{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/configure.ac": "### configure.ac\t\t\t\t\t-*- Autoconf -*-\n###\n### Process this file with autoconf to produce a configure script.\n###\n### Copyright (C) 1998-2018 R Core Team\n###\n### This file is part of R.\n###\n### R is free software; you can redistribute it and/or modify it under\n### the terms of the GNU General Public License as published by the Free\n### Software Foundation; either version 2 of the License, or (at your\n### option) any later version.\n###\n### R is distributed in the hope that it will be useful, but WITHOUT ANY\n### WARRANTY; without even the implied warranty of MERCHANTABILITY or\n### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n### License for more details.\n###\n### You should have received a copy of the GNU General Public License\n### along with R; if not, a copy is available at\n### https://www.r-project.org/Licenses/\n\nAC_PREREQ(2.62)\n\n## We want to get the version number from file 'VERSION' (rather than\n## specifying the version info in 'configure.ac'.  Hence, we need a bit\n## of M4 magic.  Note that M4 esyscmd has a trailing newline because the\n## shell command output has one, hence the patsubst() trick.\nm4_define([R_VERSION],\n          m4_bpatsubst(m4_esyscmd([cat VERSION]),\n                       [\\([0-9.]*\\)\\(\\w\\|\\W\\)*],\n                       [\\1]))\nAC_INIT([R],[R_VERSION],[https://bugs.r-project.org],[R],[https://www.r-project.org])\nAC_CONFIG_SRCDIR([src/include/Defn.h])\nAC_CONFIG_AUX_DIR([tools])\n\n### * Information on the package.\n\ndnl ## Automake initialization.\ndnl Not needed, and possibly resulting in non-portable configure scripts\ndnl with hard-wired Automake API numbers (aclocal-1.x) ...\ndnl AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)\ndnl Nevertheless, we need to provide PACKAGE and VERSION ...\nPACKAGE=[${PACKAGE_NAME}]\nAC_DEFINE_UNQUOTED(PACKAGE, \"${PACKAGE}\", [Name of package])\nAC_SUBST(PACKAGE)\nVERSION=[${PACKAGE_VERSION}]\nAC_DEFINE_UNQUOTED(VERSION, \"${VERSION}\", [Version number of package])\nAC_SUBST(VERSION)\nMAJ_MIN_VERSION=`echo ${VERSION} | sed 's/\\.[[0-9]]$//'`\nAC_SUBST(MAJ_MIN_VERSION)\n\n## Autoheader initialization.\nAH_TOP([#ifndef R_CONFIG_H\n#define R_CONFIG_H])\nAH_BOTTOM([\n#endif /* not R_CONFIG_H */])\n\n## We call AC_GNU_SOURCE early (it is a prerequisite for the gettext\n## macros), so all the C compiling makes use of that.  Nowadays it calls\n## AC_USE_SYSTEM_EXTENSIONS ....\n## This sets _GNU_SOURCE, so glibc defines all its extensions\n## (_POSIX_C_SOURCE, _XOPEN_SOURCE, _BSD_SOURCE, __USE_MISC) and these\n## unlock declarations of non-C99 functions and constants.  \n## Ditto for __EXTENSIONS__ on Solaris and _ALL_SOURCE on AIX.\n\n### ** Platform.\n\nAC_CANONICAL_HOST\nAC_DEFINE_UNQUOTED(R_PLATFORM, \"${host}\",\n[Define this to be the canonical name (cpu-vendor-os) of your system.])\nAC_DEFINE_UNQUOTED(R_CPU, \"${host_cpu}\",\n[Define this to be the name of the CPU of your system.])\nAC_DEFINE_UNQUOTED(R_VENDOR, \"${host_vendor}\",\n[Define this to be the name of the vendor of your system.])\nAC_DEFINE_UNQUOTED(R_OS, \"${host_os}\",\n[Define this to be the name of the OS of your system.])\n\n## exclude some unsupported OSes\ncase \"${host_os}\" in\n   ## Darwin 1.3.1 was macOS 10.0, 1.4.1 was 10.1, 5 is 10.2 etc\n   ## with 13 being 10.9.  We no longer support < 10.6 (Snow Leopard, Darwin 10)\n   ## https://en.wikipedia.org/wiki/Darwin_OS\n   darwin1.*)\n     AC_MSG_ERROR([The earliest supported macOS is 10.6.]\n     ;; \n  darwin[[56789]]*)\n     AC_MSG_ERROR([The earliest supported macOS is 10.6.]\n     ;; \n  aix[[123]]*|aix4.[[01]]*)\n    ## These need a form of linking we no longer support\n    AC_MSG_ERROR([AIX prior to 4.2 is not supported])\n    ;;\nesac\n\nR_PLATFORM=\"${host}\"\nAC_SUBST(R_PLATFORM)\nR_OS=\"${host_os}\"\nAC_SUBST(R_OS)\n\ncase \"${host_os}\" in\n  mingw*|windows*|winnt)\n    AC_DEFINE(Win32, 1,\n              [Define according to your operating system type.])\n    R_OSTYPE=\"windows\"\n    ;;\n  *)\n    AC_DEFINE(Unix, 1,\n              [Define according to your operating system type.])\n    R_OSTYPE=\"unix\"\n   ;;\nesac\nAC_SUBST(R_OSTYPE)\n\nR_CONFIG_ARGS=\"${ac_configure_args}\"\nAC_SUBST(R_CONFIG_ARGS)\n\n### ** Defaults.\n\n## NB: autoconf loads such files too\ncfile=\"${srcdir}/config.site\"\nif test -r \"${cfile}\"; then\n  echo \"loading site script '${cfile}'\"\n  . \"${cfile}\"\nfi\ncfile=\"${HOME}/.R/config\"\nif test -r \"${cfile}\"; then\n  echo \"loading user script '${cfile}'\"\n  . \"${cfile}\"\nfi\ncfile=\"./config.site\"\nif test -r \"${cfile}\"; then\n  echo \"loading build-specific script '${cfile}'\"\n  . \"${cfile}\"\nfi\n\n## We need to establish suitable defaults for a 64-bit OS\nlibnn=lib\ncase \"${host_os}\" in\n  linux*)\n    ## Not all distros use this: some choose to march out of step\n    ## Allow for ppc64le (Debian calls ppc64el), powerpc64le ...\n    case \"${host_cpu}\" in\n      x86_64|mips64|ppc64*|powerpc64*|sparc64|s390x)\n        if test -d /usr/lib64; then\n          libnn=lib64\n\tfi\n      ;;\n    esac\n    ;;\n  solaris*)\n    ## libnn=lib/sparcv9 ## on 64-bit only, but that's compiler-specific\n    ;;  \nesac\n: ${LIBnn=$libnn}\n## We provide these defaults so that headers and libraries in\n## '/usr/local' are found (by the native tools, mostly).\nif test -f \"/sw/etc/fink.conf\"; then\n  : ${CPPFLAGS=\"-I/sw/include -I/usr/local/include\"}\n  : ${LDFLAGS=\"-L/sw/lib -L/usr/local/lib\"}\nelse\n  : ${CPPFLAGS=\"-I/usr/local/include\"}\n  : ${LDFLAGS=\"-L/usr/local/${LIBnn}\"}\nfi\nAC_SUBST(LIBnn)\n## take care not to  override the command-line setting\nif test \"${libdir}\" = '${exec_prefix}/lib'; then\n  libdir='${exec_prefix}/${LIBnn}'\nfi\n\n## R installation directories\nm4_divert_once([HELP_BEGIN], [\nR installation directories:\n  --libdir=DIR        R files to R_HOME=DIR/R @<:@EPREFIX/$LIBnn@:>@\n    rdocdir=DIR       R doc files to DIR      @<:@R_HOME/doc@:>@\n    rincludedir=DIR   R include files to DIR  @<:@R_HOME/include@:>@\n    rsharedir=DIR     R share files to DIR    @<:@R_HOME/share@:>@])dnl\n\nif test -z \"${rdocdir}\"; then\n  rdocdir='${rhome}/doc'\nfi\nAC_SUBST([rdocdir])\n\nif test -z \"${rincludedir}\"; then\n  rincludedir='${rhome}/include'\nfi\nAC_SUBST([rincludedir])\n\nif test -z \"${rsharedir}\"; then\n  rsharedir='${rhome}/share'\nfi\nAC_SUBST([rsharedir])\n\n### ** Handle arguments to configure.\n\nconfig_opts=\"${ac_configure_args}\"\nAC_SUBST(config_opts)\n\n### ** Optional features.\n\n## Allow the user to specify support for R profiling.\nAC_ARG_ENABLE([R-profiling],\n[AS_HELP_STRING([--enable-R-profiling],[attempt to compile support for Rprof() @<:@yes@:>@])],\n[if test \"${enableval}\" = no; then\n  want_R_profiling=no\nelif test \"${enableval}\" = yes; then\n  want_R_profiling=yes\nelse\n  want_R_profiling=yes\nfi],\n[want_R_profiling=yes])\n\n## Allow the user to specify support for memory profiling.\nAC_ARG_ENABLE([memory-profiling],\n[AS_HELP_STRING([--enable-memory-profiling],[attempt to compile support for Rprofmem(), tracemem() @<:@no@:>@])],\n[if test \"${enableval}\" = no; then\n  want_memory_profiling=no\nelif test \"${enableval}\" = yes; then\n  want_memory_profiling=yes\nelse\n  want_memory_profiling=no\nfi],\n[want_memory_profiling=no])\n\n## Allow the user to specify building an R framework (Darwin).\nAC_ARG_ENABLE([R-framework],\n[AS_HELP_STRING([--enable-R-framework@<:@=DIR@:>@],[macOS only: build R framework (if possible), and specify\n                 its installation prefix @<:@no, /Library/Frameworks@:>@])],\n[want_R_framework=\"${enableval}\"],\n[want_R_framework=no])\n## Can only build frameworks on Darwin.\nif test \"${want_R_framework}\" != no; then\n  case \"${host_os}\" in\n    darwin*)\n      if test \"${want_R_framework}\" = yes; then\n        ## If we build a framework and 'prefix' was not given, we need\n        ## to set it to '/Library/Frameworks' rather than '/usr/local'.\n        ## Note that Autoconf sets things up so that by default, prefix\n        ## and exec_prefix are set to 'NONE'.  Let's hope for no change.\n\tif test \"x${prefix}\" = xNONE; then\n          prefix=\"/Library/Frameworks\"\n        fi\n      else\n\tprefix=\"${want_R_framework}\"\n\twant_R_framework=yes\n      fi\n      ## FW_VERSION is the sub-directory name used in R.framework/Version\n      ## By default it's the a.b form of the full a.b.c version to simplify\n      ## binary updates.\n      : ${FW_VERSION=`echo \"${PACKAGE_VERSION}\" | sed -e \"s/[[\\.]][[0-9]]$//\"`}\n      ;;\n    *)\n      want_R_framework=no\n      ;;\n  esac\nfi\nAM_CONDITIONAL(WANT_R_FRAMEWORK, [test \"x${want_R_framework}\" = xyes])\n\n## Allow the user to specify building R as a shared library.\n## (but a 'dynamic library' in the terminology of macOS).\n## <NOTE>\n## Building a framework implies building R shared libraries, hence the\n## strange default.\n## We might want to warn about the case where '--disable-R-shlib' was\n## given explicitly ...\n## </NOTE>\nAC_ARG_ENABLE([R-shlib],\n[AS_HELP_STRING([--enable-R-shlib],[build the shared/dynamic library 'libR' @<:@no@:>@])],\n[want_R_shlib=\"${enableval}\"],\n[want_R_shlib=\"${want_R_framework}\"])\nAM_CONDITIONAL(WANT_R_SHLIB, [test \"x${want_R_shlib}\" = xyes])\n\nAC_ARG_ENABLE([R-static-lib],\n[AS_HELP_STRING([--enable-R-static-lib],[build the static library 'libR.a' @<:@no@:>@])],\n[want_R_static=\"${enableval}\"],\n[want_R_static=\"no\"])\nif test \"x${want_R_static}\" = xyes; then\n  if test \"x${want_R_shlib}\" = xyes; then\n    AC_MSG_WARN([--enable-R-static-lib conflicts with --enable-R-shlib and will be ignored])\n    want_R_static=no\n  fi\nfi\nAM_CONDITIONAL(WANT_R_STATIC, [test \"x${want_R_static}\" = xyes])\n\n## Build separate shared/dynamic library containing R's BLAS if desired \nAC_ARG_ENABLE([BLAS-shlib],\n[AS_HELP_STRING([--enable-BLAS-shlib],[build BLAS into a shared/dynamic library @<:@perhaps@:>@])],\n[use_blas_shlib=\"${enableval}\"],\n[use_blas_shlib=\"unset\"])\n\n## As from R 3.2.0 split up -L... and -lR\nif test \"${want_R_shlib}\" = yes; then\n  LIBR0=\"-L\\\"\\$(R_HOME)/lib\\$(R_ARCH)\\\"\"\n  LIBR1=-lR\nelse\n  LIBR0=\n  LIBR1=\nfi\n\n## Enable maintainer-specific portions of Makefiles.\nAC_ARG_ENABLE([maintainer-mode],\n[AS_HELP_STRING([--enable-maintainer-mode],[enable make rules and dependencies not useful (and\n                 maybe confusing) to the casual installer @<:@no@:>@])],\n[use_maintainer_mode=\"${enableval}\"],\n[use_maintainer_mode=no])\nAM_CONDITIONAL(MAINTAINER_MODE, [test \"x${use_maintainer_mode}\" = xyes])\n\n## Enable testing the write barrier.\nAC_ARG_ENABLE([strict-barrier],\n[AS_HELP_STRING([--enable-strict-barrier],[provoke compile error on write barrier violation\n                 @<:@no@:>@])],\n[use_strict_barrier=\"${enableval}\"],\n[use_strict_barrier=no])\nif test x\"${use_strict_barrier}\" = xyes; then\n  AC_DEFINE(TESTING_WRITE_BARRIER, 1,\n            [Define to enable provoking compile errors on write barrier\n             violation.])\nfi\n\nAC_ARG_ENABLE([prebuilt-html],\n[AS_HELP_STRING([--enable-prebuilt-html],[build static HTML help pages @<:@no@:>@])],\n[want_prebuilt_html=\"${enableval}\"],\n[want_prebuilt_html=no])\nAM_CONDITIONAL(BUILD_HTML, [test \"x${want_prebuilt_html}\" = xyes])\n\nAC_ARG_ENABLE([lto],\n[AS_HELP_STRING([--enable-lto],[enable link-time optimization @<:@no@:>@])],\n[want_lto=\"${enableval}\"], [want_lto=no])\n## FIXME: add a test for gcc >= 4.5.0\nif test \"x${want_lto}\" != xno; then\n  LTO=-flto\nfi\nif test \"x${want_lto}\" = xyes; then\n  LTOALL=-flto\nfi\nAC_SUBST(LTO)\nAC_SUBST(LTOALL)\nAM_CONDITIONAL(BUILD_LTO, [test \"x${want_lto}\" != xno])\n\nAC_ARG_ENABLE([java],\n[AS_HELP_STRING([--enable-java],[enable Java @<:@yes@:>@])],\n[want_java=\"${enableval}\"],\n[want_java=yes])\nAM_CONDITIONAL(WANT_JAVA, [test \"x${want_java}\" = xyes])\n\n### ** Optional packages.\n\n## BLAS.\nAC_ARG_WITH([blas],\n[AS_HELP_STRING([--with-blas],[use system BLAS library (if available), or specify it @<:@no@:>@])],\n[R_ARG_USE(blas)],\n[use_blas=unset])\n# default is \"no\" except on macOS\n\n## LAPACK.\nAC_ARG_WITH([lapack],\n[AS_HELP_STRING([--with-lapack],[use system LAPACK library (if available), or specify it @<:@no@:>@])],\n[R_ARG_USE(lapack)],\n[use_lapack=unset])\n# default is \"no\" except on macOS\n\n## Readline.\nAC_ARG_WITH([readline],\n[AS_HELP_STRING([--with-readline],[use readline library @<:@yes@:>@])],\n[R_ARG_USE(readline)],\n[use_readline=yes])\n\n## Aqua.\nAC_ARG_WITH([aqua],\n[AS_HELP_STRING([--with-aqua],[macOS only: use Aqua (if available) @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_aqua=no\nelse\n  want_aqua=yes\nfi],\n[want_aqua=yes])\n\n## Tcl/Tk.\nAC_ARG_WITH([tcltk],\n[AS_HELP_STRING([--with-tcltk],[use Tcl/Tk (if available), or specify its library dir @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_tcltk=no\nelif test \"${withval}\" = yes; then\n  want_tcltk=yes\nelse\n  want_tcltk=yes\n  LDFLAGS=\"${LDFLAGS} -L${withval}\"\n  tcltk_prefix=\"${withval}\"\nfi],\n[want_tcltk=yes])\nAC_ARG_WITH([tcl-config],\n[AS_HELP_STRING([--with-tcl-config=TCL_CONFIG],[specify location of tclConfig.sh @<:@@:>@])],\n[TCL_CONFIG=\"${withval}\"],\n[TCL_CONFIG=\"\"])\nAC_ARG_WITH([tk-config],\n[AS_HELP_STRING([--with-tk-config=TK_CONFIG],[specify location of tkConfig.sh @<:@@:>@])],\n[TK_CONFIG=\"${withval}\"],\n[TK_CONFIG=\"\"])\n\n## cairographics etc\nAC_ARG_WITH([cairo],\n[AS_HELP_STRING([--with-cairo],[use cairo (and pango) if available @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_cairo=no\nelse\n  want_cairo=yes\nfi], [want_cairo=yes])\n\n## other libraries\nAC_ARG_WITH([libpng],\n[AS_HELP_STRING([--with-libpng],[use libpng library (if available) @<:@yes@:>@])],\n[R_ARG_USE(libpng)],\n[use_libpng=yes])\nAC_ARG_WITH([jpeglib],\n[AS_HELP_STRING([--with-jpeglib],[use jpeglib library (if available) @<:@yes@:>@])],\n[R_ARG_USE(jpeglib)],\n[use_jpeglib=yes])\nAC_ARG_WITH([libtiff],\n[AS_HELP_STRING([--with-libtiff],[use libtiff library (if available) @<:@yes@:>@])],\n[R_ARG_USE(libtiff)],\n[use_libtiff=yes])\nAC_ARG_WITH([system-tre],\n[AS_HELP_STRING([--with-system-tre],[use system tre library (if available) @<:@no@:>@])],\n[R_ARG_USE_SYSTEM(tre)],\n[use_system_tre=no])\n\n## Valgrind instrumentation\nAC_ARG_WITH([valgrind-instrumentation],\n[AS_HELP_STRING([--with-valgrind-instrumentation],[Level of additional instrumentation for Valgrind (0/1/2) @<:@0@:>@])],\n[valgrind_level=${withval}],\n[valgrind_level=0])\n\nAC_ARG_WITH([system-valgrind-headers],\n[AS_HELP_STRING([--with-system-valgrind-headers],[use system valgrind headers (if available) @<:@no@:>@])],\n[R_ARG_USE_SYSTEM(valgrind)],\n[use_system_valgrind=no])\n\nAC_ARG_WITH([internal-tzcode],\n[AS_HELP_STRING([--with-internal-tzcode],[use internal time-zone code @<:@no, yes on macOS@:>@])],\n[use_internal_tzcode=${withval}],\n[use_internal_tzcode=default])\n\n\n## <FIXME>\n## Completely disable using libtool for building shlibs until libtool\n## fully supports Fortran and C++.\n## AC_ARG_WITH([libtool],\n## [AS_HELP_STRING([--with-libtool],[use libtool for building shared libraries @<:@yes@:>@])],\n## [use_libtool=\"${withval}\"],\n## [use_libtool=yes])\n## AM_CONDITIONAL(USE_LIBTOOL, [test \"x${use_libtool}\" = xyes])\n## </FIXME>\n\n## Recommended R packages.\nAC_ARG_WITH([recommended-packages],\n[AS_HELP_STRING([--with-recommended-packages],[use/install recommended R packages @<:@yes@:>@])],\n[R_ARG_USE(recommended_packages)],\n[use_recommended_packages=yes])\n\n## ICU\nAC_ARG_WITH([ICU],\n[AS_HELP_STRING([--with-ICU],[use ICU library (if available) @<:@yes@:>@])],\n[R_ARG_USE(ICU)],\n[use_ICU=yes])\n\n## Byte-compilation of packages.\nAC_ARG_ENABLE([byte-compiled-packages],\n[AS_HELP_STRING([--enable-byte-compiled-packages],\n                [byte-compile base and recommended packages @<:@yes@:>@])],\n[want_byte_compiled_packages=\"${enableval}\"],\n[want_byte_compiled_packages=yes])\nAM_CONDITIONAL(BYTE_COMPILE_PACKAGES,\n               [test \"x${want_byte_compiled_packages}\" = xyes])\n\n### ** Precious variables.\n\nAC_ARG_VAR([R_PRINTCMD],\n           [command used to spool PostScript files to the printer])\nAC_ARG_VAR([R_PAPERSIZE],\n           [paper size for the local (PostScript) printer])\nAC_ARG_VAR([R_BATCHSAVE],\n           [set default behavior of R when ending a session])\nAC_ARG_VAR([MAIN_CFLAGS],\n           [additional CFLAGS used when compiling the main binary])\nAC_ARG_VAR([SHLIB_CFLAGS],\n           [additional CFLAGS used when building shared objects])\nAC_ARG_VAR([MAIN_FFLAGS],\n           [additional FFLAGS used when compiling the main binary])\nAC_ARG_VAR([SHLIB_FFLAGS],\n           [additional FFLAGS used when building shared objects])\nAC_ARG_VAR([MAIN_LD],\n           [command used to link the main binary])\nAC_ARG_VAR([MAIN_LDFLAGS],\n           [flags which are necessary for loading a main program which\n            will load shared objects (DLLs) at runtime])\nAC_ARG_VAR([CPICFLAGS],\n           [special flags for compiling C code to be turned into a\n            shared object.])\nAC_ARG_VAR([FPICFLAGS],\n           [special flags for compiling Fortran code to be turned into a\n            shared object.])\nAC_ARG_VAR([FCPICFLAGS],\n           [special flags for compiling Fortran 95 code to be turned into a\n            shared object.])\nAC_ARG_VAR([SHLIB_LD],\n           [command for linking shared objects which contain object\n            files from a C or Fortran compiler only])\nAC_ARG_VAR([SHLIB_LDFLAGS],\n           [special flags used by SHLIB_LD])\nAC_ARG_VAR([DYLIB_LD],\n           [command for linking dynamic libraries which contain object\n            files from a C or Fortran compiler only])\nAC_ARG_VAR([DYLIB_LDFLAGS],\n           [special flags used for make a dynamic library])\nAC_ARG_VAR([CXXPICFLAGS],\n           [special flags for compiling C++ code to be turned into a\n            shared object])\nAC_ARG_VAR([SHLIB_CXXLD],\n           [command for linking shared objects which contain object\n            files from the C++ compiler])\nAC_ARG_VAR([SHLIB_CXXLDFLAGS],\n           [special flags used by SHLIB_CXXLD])\nAC_ARG_VAR([SHLIB_FCLD],\n           [command for linking shared objects which contain object\n            files from the Fortran 95 compiler])\nAC_ARG_VAR([SHLIB_FCLDFLAGS],\n           [special flags used by SHLIB_FCLD])\nAC_ARG_VAR([TCLTK_LIBS],\n           [flags needed for linking against the Tcl and Tk libraries])\nAC_ARG_VAR([TCLTK_CPPFLAGS],\n           [flags needed for finding the tcl.h and tk.h headers])\nAC_ARG_VAR([MAKE], [make command])\nAC_ARG_VAR([TAR], [tar command])\nAC_ARG_VAR([R_BROWSER], [default browser])\nAC_ARG_VAR([R_PDFVIEWER], [default PDF viewer])\nAC_ARG_VAR([BLAS_LIBS],\n           [flags needed for linking against external BLAS libraries])\nAC_ARG_VAR([LAPACK_LIBS],\n           [flags needed for linking against external LAPACK libraries])\nAC_ARG_VAR([LIBnn], ['lib' or 'lib64' for dynamic libraries])\nAC_ARG_VAR([SAFE_FFLAGS],\n\t   [Safe Fortran 77 compiler flags for e.g. dlamc.f])\nAC_ARG_VAR([r_arch],\n           [Use architecture-dependent subdirs with this name])\nAC_ARG_VAR([DEFS], [C defines for use when compiling R])\nAC_ARG_VAR([JAVA_HOME],\n           [Path to the root of the Java environment])\nAC_ARG_VAR([R_SHELL],\n           [shell to be used for shell scripts, including 'R'])\n\nif test -z \"${r_arch}\"; then\n  R_ARCH=\n  R_XTRA_CPPFLAGS2=\"-I\\\"\\$(R_INCLUDE_DIR)\\\"\"\nelse\n  R_ARCH=\"/${r_arch}\"\n  R_XTRA_CPPFLAGS2=\"-I\\\"\\$(R_INCLUDE_DIR)\\\" -I\\\"\\$(R_INCLUDE_DIR)/${r_arch}\\\"\"\nfi\nAC_DEFINE_UNQUOTED(R_ARCH, \"${r_arch}\",\n[Define this to use architecture-dependent subdirectories of this name.])\nAC_SUBST([R_ARCH])\nAC_SUBST([R_XTRA_CPPFLAGS2])\n\n### ** Check whether we build in srcdir.\n\nAC_PATH_PROG(GETWD, pwd, pwd)\nAC_MSG_CHECKING([whether builddir is srcdir])\nif test \"`cd \\\"${srcdir}\\\" && ${GETWD}`\" = \"`${GETWD}`\"; then\n  BUILDDIR_IS_SRCDIR=yes\nelse\n  BUILDDIR_IS_SRCDIR=no\nfi\nAC_SUBST(BUILDDIR_IS_SRCDIR)\nAC_MSG_RESULT([${BUILDDIR_IS_SRCDIR}])\n\n### * Checks for programs.\n\nAC_PROG_LN_S\nR_PROG_AR\nR_PROG_INSTALL\n\n## we would like a POSIX sed, and need one on Solaris\nAC_PATH_PROGS(SED, sed, /bin/sed, [/usr/xpg4/bin:$PATH])\n## 'which' is not POSIX, and might be a shell builtin or alias\n##  (but should not be in 'sh')\nAC_PATH_PROGS(WHICH, which, which)\n## Make\n: ${MAKE=make}\nAC_SUBST(MAKE)\n## Pager\nR_PROG_PAGER\n## Tar -- we prefer a GNU version\nAC_PATH_PROGS(TAR, [${TAR} gtar gnutar tar], \"\")\n## TeXMF stuff\nR_PROG_TEXMF\n## Unzip & zip & gzip & bip2\nAC_PATH_PROGS(R_UNZIPCMD, [${UNZIP} unzip], \"\")\nAC_PATH_PROGS(R_ZIPCMD, [${ZIP} zip], \"\")\nAC_PATH_PROGS(R_GZIPCMD, [${GZIP} gzip], true)\nAC_PATH_PROGS(R_BZIPCMD, [${BZIP} bzip2], \"\")\n## Browser\nR_PROG_BROWSER\n## PDF viewer\nR_PROG_PDFVIEWER\n## Noweb (notangle), aclocal, autoconf, autoheader - maintainer mode only\n\nR_MISSING_PROG(ACLOCAL, aclocal,\n  R_MNT_WARN([[aclocal is missing - aclocal.m4 cannot be updated!]])\n)\nR_MISSING_PROG(AUTOCONF, autoconf,\n  R_MNT_WARN([[autoconf is missing - configure cannot be updated!]])\n)\nR_MISSING_PROG(AUTOHEADER, autoheader,\n  R_MNT_WARN([[autoheader is missing - header file templates like config.h.in cannot be updated!]])\n)\nAC_PROG_YACC\nif test \"${YACC}\" = yacc ; then\n  ## yacc is the default value even when yacc is not found\n  AC_CHECK_PROG(JUSTYACC, yacc, yes)\n  if test \"x${JUSTYACC}\" != xyes ; then\n    R_MNT_WARN([[yacc is missing - parsers cannot be updated!]])\n  fi\nfi\nAC_PATH_PROG(NOTANGLE, notangle, false)\nif test \"${NOTANGLE}\" = false ; then\n  R_MNT_WARN([[notangle is missing - byte-code compiler source cannot be updated!]])\n  NOTANGLE=notangle    \nfi\n## javareconf needs this\nAC_PATH_PROG(REALPATH, realpath, false)\n\n\n## Search for cairographics needs pkg-config, \n## helps find jpeg, libpng and libtiff.\nAC_PATH_PROG(PKGCONF, pkg-config , [], \n\t     [$PATH:/usr/local/bin:/ext/bin:/ext:/sw/bin:/opt/bin])\nAC_ARG_VAR([PKGCONF], [path to pkg-config utility])\nAC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\nAC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's default search path])\n\nAC_PROG_CC\nAC_PROG_GCC_TRADITIONAL\nAC_GNU_SOURCE ## see note above\n\nAC_PROG_CPP\nR_PROG_CPP_CPPFLAGS\n\n## see if the user set FFLAGS: used for Intel compilers below\nuserFFLAGS=${FFLAGS}\nR_PROG_F77\n\nAC_PROG_CXX\n## check this actually compiles\nR_PROG_CXX\n\n### R_PROG_CXX98FLAG\n\nAC_PROG_CXXCPP\nif test \"${CXXCPP}\" = \"${CXX} -E\"; then\n  CXXCPP0=\"\\$(CXX) -E\"\nelse\n  CXXCPP0=${CXXCPP}\nfi\nAC_SUBST(CXXCPP0)\n\nR_GCC4_VISIBILITY\n\nAC_PROG_OBJC\n## unfortunately autoconf sets OBJC to gcc even if there is no working compiler\nif test \"${OBJC}\" = gcc; then\n  AC_LANG_PUSH([Objective C])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[id foo;])],,[OBJC=''])\n  AC_LANG_POP([Objective C])\nfi\nR_PROG_OBJCXX\n\n## This has to be R_DEFS as autoconf overrrides DEFS\nR_DEFS=${DEFS}\nAC_SUBST(R_DEFS)\n\n## Libtool.\n## (Run this after R_PROG_F77, as AC_PROG_LIBTOOL checks for a\n## Fortran 77 compiler and sets F77 accordingly.)\nAC_DISABLE_STATIC\nLT_INIT\nAC_SUBST(LIBTOOL_DEPS)\n\n## cross-compiling: added May 2007, not actually used\nR_CROSS_COMPILING\nAC_SUBST(BUILD_CC)\nAC_SUBST(BUILD_R)\nAM_CONDITIONAL(CROSS_COMPILING, [test \"${cross_compiling}\" = yes])\n\n### * Checks for libraries.\n\n## Set up LD_LIBRARY_PATH or equivalent.\n## <FIXME>\n## What is this doing *HERE*?\n## Should be needed for tests using AC_RUN_IFELSE()?\n## Make sure that non-standard directories specified via '-L' are really\n## searched in the tests.\n## OTOH, R_LD_LIBRARY_PATH in the environment is meant to be the final version.\nR_LD_LIBRARY_PATH_save=${R_LD_LIBRARY_PATH}\nR_LD_LIBRARY_PATH=\ncase \"${host_os}\" in\n  darwin*)\n    ## Darwin provides a full path in the ID of each library such \n    ## that the linker can add library's path to the binary at link time.\n    ## This allows the dyld to find libraries even without xx_LIBRARY_PATH.\n    ## No paths should be added to R_LD_LIBRARY_PATH (which in turn\n    ## changes DYLD_LIBRARY_PATH), because they override the system\n    ## look-up sequence. Such automatic override has proven to break things\n    ## like system frameworks (e.g. ImageIO or OpenGL framework).\n    ## Not so bad in later versions of Darwin, \n    ## where DYLD_FALLBACK_LIBRARY_PATH is used (see below).\n    ;;\n  *)\n    for arg in ${LDFLAGS}; do\n      case \"${arg}\" in\n        -L*)\n\t  lib=`echo ${arg} | sed \"s/^-L//\"`\n\t  R_SH_VAR_ADD(R_LD_LIBRARY_PATH, [${lib}], [${PATH_SEPARATOR}])\n\t  ;;\n      esac\n    done\n    ;;\nesac\n\n## Record name of environment variable which tells the dynamic linker\n## where to find shlibs (typically, 'LD_LIBRARY_PATH').\n## Used in etc/ldpaths: As from R 3.0.0 override what libtool thinks on macOS\n## http://hublog.hubmed.org/archives/001192.html suggests this was in 10.4\n## However, as from 10.11 this variable is not passed down to shells.\ncase \"${host_os}\" in\n  darwin*)\n    Rshlibpath_var=DYLD_FALLBACK_LIBRARY_PATH\n    ;;\n  *)\n    Rshlibpath_var=${shlibpath_var}\nesac\nAC_SUBST(shlibpath_var)\n## Export LD_LIBRARY_PATH or equivalent.\nif eval \"test -z \\\"\\${${Rshlibpath_var}}\\\"\"; then\n  eval \"${Rshlibpath_var}=\\\"${R_LD_LIBRARY_PATH}\\\"\"\nelse\n  eval \"${Rshlibpath_var}=\\\"${R_LD_LIBRARY_PATH}${PATH_SEPARATOR}\\${${Rshlibpath_var}}\\\"\"\nfi\neval \"export ${Rshlibpath_var}\"\nAC_SUBST(Rshlibpath_var)\n\n## record how to strip shared/dynamic libraries.\nAC_SUBST(striplib)\n## record how to strip static libraries.\nstripstaticlib=${old_striplib}\nAC_SUBST(stripstaticlib)\n\n## <NOTE>\n## This actually comes from libtool.m4.\nAC_CHECK_LIBM\nAC_SUBST(LIBM)\n## </NOTE>\n## AC_CHECK_LIBM computes LIBM but does not add to LIBS, hence we do\n## the following as well.\nAC_CHECK_LIB(m, sin)\ncase \"${host_os}\" in\n  darwin*)\n    ## macOS >= 10.3 include dlcompat in libSystem\n    ## This is ancient history\n    ## SI says we want '-lcc_dynamic' on Darwin, although currently\n    ## https://developer.apple.com/documentation/MacOSX/ has nothing\n    ## official.  Bill Northcott <w.northcott@unsw.edu.au> points out\n    ## that it is only needed for GCC 3.x (and earlier) ...\n    if test \"${GCC}\" = yes; then\n      case \"${CC_VERSION}\" in\n        2.*|3.*)\n\t  AC_MSG_ERROR([Your gcc is too old.])\n      esac\n    fi\n    ;;\n  *)\n    AC_CHECK_LIB(dl, dlopen)\n    ;;\nesac\n\n## Readline.\nif test \"${use_readline}\" = yes; then\n  AC_CHECK_HEADERS(readline/history.h readline/readline.h)\n  r_save_LIBS=\"${LIBS}\"\n  LIBS=\n  ## don't use the cached value as we need to rebuild LIBS\n  unset ac_cv_lib_readline_rl_callback_read_char\n  AC_CHECK_LIB(readline, rl_callback_read_char)\n  use_readline=\"${ac_cv_lib_readline_rl_callback_read_char}\"\n  if test \"${use_readline}\" = no; then\n    ## only need ncurses if libreadline is not statically linked against it\n    unset ac_cv_lib_readline_rl_callback_read_char\n    AC_CHECK_LIB(ncurses, main, [],\n                 AC_CHECK_LIB(termcap, main, [],\n                              AC_CHECK_LIB(termlib, main)))\n    AC_CHECK_LIB(readline, rl_callback_read_char)\n    use_readline=\"${ac_cv_lib_readline_rl_callback_read_char}\"\n    if test \"${use_readline}\" = yes; then\n      use_readline=\"${ac_cv_header_readline_readline_h}\"\n    fi\n  fi\n  if test \"${use_readline}\" = no; then\n    AC_MSG_ERROR([--with-readline=yes (default) and headers/libs are not available])\n  else\n    ## the NetBSD emulation supplied by macOS does not have this\n    AC_CHECK_FUNCS(history_truncate_file)\n    ## rl_completion_matches is >= 4.2.\n    ## rl_resize_terminal is >= 4.0 ane we use it only for >= 6.3.\n    ## rl_callback_sigcleanup is in pre-releases for 7.0, not yet used.\n    R_CHECK_FUNCS([rl_callback_sigcleanup rl_completion_matches rl_resize_terminal rl_sort_completion_matches], \n[#include <stdio.h>\n#include <readline/readline.h>]\n                 )\n  fi\n  READLINE_LIBS=\"${LIBS}\"\n  LIBS=\"${r_save_LIBS}\"\nfi\nAC_SUBST(READLINE_LIBS)\n\n### * Checks for header files.\n\nAC_HEADER_STDC\nAC_HEADER_DIRENT\n## we also assume readdir and closedir\nif test \"${ac_cv_search_opendir}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'opendir' system call])\nfi\nAC_HEADER_SYS_WAIT\n## <NOTE>\n## Some of these are also checked for when Autoconf computes the default\n## includes.\n##\n## The following headers are POSIX,\n## We use sched.h for Linux-specific features (affinity)\nAC_CHECK_HEADERS(dlfcn.h fcntl.h glob.h grp.h pwd.h sched.h strings.h \\\n  sys/resource.h sys/select.h sys/socket.h sys/stat.h sys/time.h \\\n  sys/times.h sys/utsname.h unistd.h utime.h)\n## dl.h is used in src/unix/hpdlfcn.c included from src/unix/dynload.c on HP-UX\n## features.h is used by date-time code on Linux.\n## floatingpoint.h is used for fpsetmask on FreeBSD.\n## sys/param.h is one way to get PATH_MAX.\nAC_CHECK_HEADERS(arpa/inet.h dl.h elf.h features.h floatingpoint.h \\\n  langinfo.h netdb.h netinet/in.h sys/param.h)\n## stdalign.h is C11.\nAC_CHECK_HEADERS(stdalign.h)\n## These are C99 headers but some C code (written to work also\n## without assuming C99) may need the corresponding conditionals.\nAC_CHECK_HEADERS(errno.h inttypes.h limits.h locale.h stdarg.h stdbool.h \\\n                 stdint.h string.h)\n## only vsnprintf.c requires stdarg.h\n\n## We also use without checking sys/sysctl.h, but only on *BSD and macOS\n## The default includes check for sys/types.h (POSIX), which we use unconditionally\n## </NOTE>\n\nR_HEADER_SETJMP\nR_HEADER_GLIBC2\n\n### * Checks for types.\n\nAC_TYPE_SIGNAL\n## liblzma uses uint64_t: used unconditionally in src/main/util.c\nAC_TYPE_UINT64_T\nAC_CHECK_TYPES([int64_t, int_fast64_t])\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nR_SIZE_MAX\nAC_CHECK_TYPE(blkcnt_t, long)\nAH_TEMPLATE([blkcnt_t],\n            [Define to 'long' if <sys/types.h> does not define.\n             Apparently necessary to fix a GCC bug on AIX?])\nR_TYPE_SOCKLEN\nAC_CHECK_TYPES([stack_t], , , [#include <signal.h>])\n## These are optional C99 types, which we used to typedef in Defn.h if absent.\n## There seems some confusion as to where they should be defined:\n## the standard says stdint.h but drafts and Solaris 8 have inttypes.h.\n## It seems all systems having stdint.h include it in inttypes.h, and\n## POSIX requires that.  But we will make sure.\nAC_CHECK_TYPES([intptr_t, uintptr_t], , , [#ifdef HAVE_INTTYPES_H\n#include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n#include <stdint.h>\n#endif])\n\n### * Checks for compiler characteristics.\n\n### ** Generic tests for the C, Fortran 77 and C++ compilers.\n\n### *** C compiler.\n\nR_BIGENDIAN\nAC_C_CONST\nR_C_INLINE\nAC_CHECK_SIZEOF(int)\n## on some platforms this gives a trailing lf, so\ncase \"${ac_cv_sizeof_int}\" in\n    4*)\n    AC_DEFINE(INT_32_BITS, 1, [Define if you have 32 bit ints.])\n    ;;\nesac\n## This is tested in src/main/arithmetic.c and gives a compile error if false\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(double)\nAC_CHECK_SIZEOF(size_t)\nAC_ARG_ENABLE([long-double],\n[AS_HELP_STRING([--enable-long-double],[use long double type @<:@yes@:>@])],\n[if test \"${enableval}\" = no; then\n  use_long_double=no\nelse\n  use_long_double=yes\nfi],\n[use_long_double=yes])\n\ndnl also used in intl.\nif test \"x${use_long_double}\" = xyes; then \n  AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if you wish to use the 'long double' type.])\n  AC_CHECK_SIZEOF(long double)\nelse\n  AC_MSG_WARN([Not using the 'long double' type])\nfi\n\nR_PROG_CC_MAKEFRAG\nR_PROG_CC_LO_MAKEFRAG\n\nR_OPENMP\n\n### *** Fortran 77 compiler.\n\nR_PROG_F77_FLIBS\nif test -z \"$FLIBS_IN_SO\"; then\n  FLIBS_IN_SO=${FLIBS}\nfi\nAC_SUBST(FLIBS_IN_SO)\nR_PROG_F77_APPEND_UNDERSCORE\nR_PROG_F77_CAN_RUN\nR_PROG_F77_CC_COMPAT\nR_PROG_F77_CC_COMPAT_COMPLEX\n\nAM_CONDITIONAL(COMPILE_FORTRAN_DOUBLE_COMPLEX,\n               [test \"x${HAVE_FORTRAN_DOUBLE_COMPLEX}\" != x])\n\nAC_LANG_PUSH(Fortran 77)\nR_OPENMP\nAC_LANG_POP(Fortran 77)\n\n\n### *** C++ compiler.\n\nR_PROG_CXX_MAKEFRAG\n\nAC_LANG_PUSH(C++)\nR_OPENMP\nAC_LANG_POP(C++)\n\n### *** ObjC compiler\n\nR_PROG_OBJC_MAKEFRAG\nR_PROG_OBJC_RUNTIME\n## FSF builds of gcc (and maybe others?) need -fobjc-exceptions otherwise\n## @try and friends don't work\nR_PROG_OBJC_FLAG([-fobjc-exceptions],\n\t\t R_SH_VAR_ADD(OBJCFLAGS, [-fobjc-exceptions]))\n## FIXME: checks for Foundation are not darwin-specifc at all. In fact the whole\n##        point of R_OBJC_FOUNDATION is to detect foundation classes on other\n##        platforms (on Darwin we already *know* that is it -framework Foundation\n##        but not so on Linux!), so the following was not intended to be conditonal.\ncase \"${host_os}\" in\n  darwin*)\n    R_OBJC_FOUNDATION\n  ;;\nesac\n\n### ** Platform-specific overrides for the C, Fortran 77 and C++ compilers.\n\ncase \"${host_cpu}\" in\n  i*86|x86_64)\n    R_PROG_CC_FLAG_D__NO_MATH_INLINES\n    ## We used to add -mieee-fp here, but it seems it is really a\n    ## linker flag for old Linuxen adding -lieee to a non-shared link.\n    ;;\nesac\n\nAH_TEMPLATE([HAVE_NO_SYMBOL_UNDERSCORE],\n            [Define if module-loading does not need an underscore to\n             be prepended to external names.])\n\ncase \"${host_os}\" in\n  aix*)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    if test \"${GCC}\" = yes; then\n      if test \"x${OBJECT_MODE}\" = \"x64\"; then\n        R_PROG_CC_FLAG([-mminimal-toc],\n                       R_SH_VAR_ADD(R_XTRA_CFLAGS, [-mminimal-toc]))\n      else\n        R_PROG_CC_FLAG([-mno-fp-in-toc],\n                       R_SH_VAR_ADD(R_XTRA_CFLAGS, [-mno-fp-in-toc]))\n      fi\n    fi\n    ;;\n  darwin*)\n    ## which these days mean macOS\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    ;;\n  hpux*)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    case \"${CC}\" in\n      cc|c89)\n\t## Luke Tierney says we also need '-Wp,-H16000' which tells the\n\t## pre-processor to increase the size of an internal table.  It\n\t## seems that src/main/vfonts/g_her_glyph.c contains a line\n\t## that is too long for the pre-processor without this flag.\n\tR_SH_VAR_ADD(R_XTRA_CPPFLAGS, [-Wp,-H16000])\n\t;;\n    esac\n    AC_CHECK_LIB(dld, shl_load, [R_XTRA_LIBS=\"-ldld ${R_XTRA_LIBS}\"])\n    ;;\n  linux*)\n    case  \"${CC}\" in\n      ## Intel compiler\n      *icc*)\n\t## icc declares __GNUC__, so it picks up CFLAGS intended for gcc.\n\tif test \"$ac_test_CFLAGS\" != set; then\n          if test $ac_cv_prog_cc_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CFLAGS=\"-g -O2 -std=c99\"\n\t\t;;\n\t      *)\n\t        ## on ix86 optimization fails\n                CFLAGS=\"-g -std=c99\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CFLAGS=\"-O2 -std=c99\"\n\t\t;;\n\t      *)\n                CFLAGS=\"-std=c99\"\n\t\t;;\n\t    esac\n          fi\n        fi\n\t## used to set IEEE flag, but this is version-dependent.\n        ;;\n    esac\n    case  \"${F77}\" in\n      ## Intel compilers\n      *ifc|*ifort)\n\tif test \"x$userFFLAGS\" = x; then\n          if test $ac_cv_prog_f77_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        FFLAGS=\"-g -O2\"\n\t\t;;\n\t      *)\n                FFLAGS=\"-g\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        FFLAGS=\"-O2\"\n\t\t;;\n\t      *)\n\t        ## on ix86 optimization of dlamc.f fails\n                FFLAGS=\n\t\t;;\n\t    esac\n          fi\n        fi\n        ;;\n    esac\n    case  \"${CXX}\" in\n      ## Intel compilers\n      *icpc|*icc)\n\tif test \"$ac_test_CXXFLAGS\" != set; then\n          if test $ac_cv_prog_cxx_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CXXFLAGS=\"-g -O2\"\n\t\t;;\n\t      *)\n                CXXFLAGS=\"-g\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CXXFLAGS=\"-O2\"\n\t\t;;\n\t      *)\n                CXXFLAGS=\n\t\t;;\n\t    esac\n          fi\n        fi\n        ;;\n    esac\n    ;;\n  mingw*|windows*|winnt)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    ;;\n  openbsd*)\n    if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n      AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    fi\n    ;;\nesac\n\n## This was -ffloat-store on all gfortran/g77 platforms prior to 3.5.0\n## Suggestion adopted from https://gcc.gnu.org/wiki/FloatingPointMath\n## It was already the default on 32-bit macOS\nif test \"${SAFE_FFLAGS+set}\" != set; then\n  if test \"x${ac_cv_f77_compiler_gnu}\" = xyes; then\n    case \"${host_cpu}\" in\n      i*86|x86_64)\n      SAFE_FFLAGS=\"${FFLAGS} -msse2 -mfpmath=sse\"\n      ;;\n    *)\n      SAFE_FFLAGS=\"${FFLAGS}\"\n      ::\n    esac\n  else\n    SAFE_FFLAGS=\"${FFLAGS}\"\n  fi\nfi\n\n\nAC_SUBST(CFLAGS)\nAC_SUBST(MAIN_CFLAGS)\nAC_SUBST(SHLIB_CFLAGS)\nAC_SUBST(CXXFLAGS)\nAC_SUBST(CXXSTD)\nAC_SUBST(SHLIB_CXXFLAGS)\nAC_SUBST(FFLAGS)\nAC_SUBST(SAFE_FFLAGS)\nAC_SUBST(MAIN_FFLAGS)\nAC_SUBST(SHLIB_FFLAGS)\nAC_SUBST(R_XTRA_CFLAGS)\nAC_SUBST(R_XTRA_CPPFLAGS)\nAC_SUBST(R_XTRA_CXXFLAGS)\nAC_SUBST(R_XTRA_FFLAGS)\nAC_SUBST(R_XTRA_LIBS)\nAC_SUBST(OBJC_LIBS)\nAC_SUBST(OBJCFLAGS)\nAC_SUBST(OBJCXXFLAGS)\n\nR_ABI\n\n### ** DLL stuff.\n\n## We need to determine the following:\n##\n## MAIN_LD, MAIN_LDFLAGS\n##   command and flags for loading the main binary so that it will load\n##   shared objects (DLLs) at runtime, also for profiling.\n## CPICFLAGS, CXXPICFLAGS, FPICFLAGS, FCPICFLAGS\n##   flags for compiling C, C++, and Fortran library code.\n## SHLIB_LD, SHLIB_LDFLAGS\n##   command and flags for creating DLLs (which contain object files\n##   from a C or Fortran compiler).\n## DYLIB_LD, DYLIB_LDFLAGS\n##   ditto for dynamic libraries (where different.)\n## SHLIB_CXXLD, SHLIB_CXXLDFLAGS\n##   command and flags for creating DLLs which contain object files from\n##   a C++ compiler.  According to Autoconf, the C++ compiler/linker\n##   must be used for linking in this case (since special C++-ish things\n##   need to happen at link time like calling global constructors,\n##   instantiating templates, enabling exception support, etc.).\n##\n## The procedure is as follows.\n##   \n## * We use applicable values from imake in case its CC is ours.\n## * Irrespective of that, we think we know what to do with GNU tools\n##   (GNU C, Fortran, and C++ compilers).\n## * Then, use platform specific overrides.\n## * As a final safeguard, values from the environment (as specified in\n##   one of the configuration files or at the configure command line)\n##   override anything we figure out in the case of compiler flags; for\n##   linker flags (*LDFLAGS), environment settings override our results\n##   if the corresponding *LD variable was set, and add otherwise.\n##\n## NOTE: We do not provide defaults for the *LDFLAGS, taking a defensive\n## approach.  In case we cannot figure out {MAIN,SHLIB}_LDFLAGS and the\n## user did not provide defaults, an error results.  A warning is given\n## if nothing was obtained for SHLIB_CXXLDFLAGS.\n##\n## Note also that some systems (formerly AIX) do not allow for unresolved\n## symbols at link time.  For such systems, we link against -lm (in case\n## it exists) when building a shlib module via SHLIB_LIBADD.\n\nmain_ld=\"${CC}\"\nshlib_ld=\"${CC}\"\nshlib_cxxld=\"${CXX}\"\nSHLIB_EXT=\".so\"\nSHLIB_LIBADD=\nuse_exportfiles=no\n\n## Step 1.  Ask imake.\n## <NOTE>\n## Earlier versions had fpicflags=${cpicflags}.  As this really amounts\n## to hoping rather than knowing, we no longer do this.\n## </NOTE>\nr_xtra_path=\"${PATH}\"\nfor dir in /usr/bin/X11 /usr/X11R6/bin /usr/openwin/bin; do\n  r_xtra_path=\"${r_xtra_path}${PATH_SEPARATOR}${dir}\"\ndone\nAC_PATH_PROG(XMKMF, xmkmf, [], [${r_xtra_path}])\nif test -n \"${XMKMF}\"; then\n  echo > Imakefile\n  ${XMKMF} > /dev/null 2>&1 || echo > Makefile\n  cc=`\"${srcdir}/tools/GETMAKEVAL\" CC`\n  cc=`echo ${cc} | sed \"s/ .*//\"`\n  ## Paul Gilbert reported on R-devel 2006-04-13 a system with cc=\"\"\n  if test -n \"${cc}\" ; then\n    r_cc_cmd=`echo ${CC} | sed \"s/ .*//\"`\n    if test \"`which ${cc}`\" = \"`which ${r_cc_cmd}`\"; then\n      shlib_ldflags=`\"${srcdir}/tools/GETMAKEVAL\" SHLIBLDFLAGS`\n      cpicflags=`\"${srcdir}/tools/GETMAKEVAL\" PICFLAGS`\n    fi\n  fi\n  cxx=`\"${srcdir}/tools/GETMAKEVAL\" CXX`\n  cxx=`echo ${cxx} | sed \"s/ .*//\"`\n  if test -n \"${cxx}\" -a  -n \"${CXX}\"; then\n    r_cxx_cmd=`echo ${CXX} | sed \"s/ .*//\"`\n    if test \"`which ${cxx}`\" = \"`which ${r_cxx_cmd}`\"; then\n      cxxpicflags=`\"${srcdir}/tools/GETMAKEVAL\" CXXPICFLAGS`\n    fi\n  fi\n  rm -f Imakefile Makefile\nfi\n\n## Step 2.  GNU compilers.\nif test \"${GCC}\" = yes; then\n  case \"${host_cpu}\" in\n## Sparc has only an 8k global object table, 1024 entries on 64-bit.\n## PowerPC has 32k, not enough on ppc64 for the ca6200 entries in libR.so\n## The only other platform where this is said to matter is m68k, which\n## has 32k and so can use -fpic.\n## However, although the gcc docs do not mention it, it seems s390/s390x\n## also supports and needs -fPIC\n    sparc*|ppc64*|powerpc64*|s390*)\n      cpicflags=\"-fPIC\"\n      ;;\n    *)\n      cpicflags=\"-fpic\"\n      ;;\n  esac\n  shlib_ldflags=\"-shared\"\nfi\n## G77 includes gfortran\nif test \"${G77}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      fpicflags=\"-fPIC\"\n      ;;\n    *)\n      fpicflags=\"-fpic\"\n      ;;\n  esac\nfi\n## Assume flang is the same as clang (it is a modified front end)\ncase \"${F77}\" in\n  *flang)\n    fpicflags=${cpicflags}\n    ;;\nesac\nif test \"${GXX}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      cxxpicflags=\"-fPIC\"\n      ;;\n    *)\n      cxxpicflags=\"-fpic\"\n      ;;\n  esac\n  shlib_cxxldflags=\"-shared\"\nfi\n\n## Step 3.  Individual platform overrides.\ndylib_undefined_allowed=yes\ncase \"${host_os}\" in\n  aix*)\n    use_exportfiles=yes\n    ## All AIX code is PIC.\n    cpicflags=\n    cxxpicflags=\n    fpicflags=\n    ## not clear if this is correct for native compilers\n    wl=\"-Wl,\"\n    ## libtool suggests that ia64 needs -Bexport and not -brtl\n    ## but we have no confirmation.\n    dylib_undefined_allowed=no\n    ##ADD: A symbol of memcpy,memset is exported in libR by expall.\n    ##ADD: However, for example, symbol in libc of memcpy is __memmove,__memmove64.\n    ##ADD: This black magic puts lc before lR and pockets this.\n    if test \"x${OBJECT_MODE}\" = \"x64\"; then\n      main_ldflags=\"${wl}-brtl ${wl}-bexpall ${wl}-bpT:0x100000000 ${wl}-bpD:0x110000000 -lc\"\n    else\n      main_ldflags=\"${wl}-brtl ${wl}-bexpall -lc\"\n    fi\n    shlib_ldflags=\"${wl}-brtl ${wl}-G ${wl}-bexpall ${wl}-bnoentry -lc\"\n    SHLIB_LIBADD=\"\\$(LIBM)\"\n    shlib_cxxldflags=\"${shlib_ldflags}\"\n    if test \"${GCC}\" = yes; then\n      shlib_ldflags=\"-shared ${shlib_ldflags}\"\n    fi\n    if test \"${GXX}\" = yes; then\n      shlib_cxxldflags=\"-shared ${shlib_cxxldflags}\"\n    fi \n    ;;\n  darwin*)\n    darwin_pic=\"-fPIC\"\n    dylib_undefined_allowed=no\n    darwin_dylib_ldflags=\"-dynamiclib\"\n    shlib_ldflags=\"-dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress\"\n    ## * recent ld has -single_module so it doesn't need -fno-common\n    ##   we have to use dylib instead of a bundle\n    ## * dylib+single_module+flat_namespace=pretty much what other platforms call .so\n    ##   but there can be no multiple symbols (due to flat namespace)\n    ## * since 10.3 we can also use -undefined dynamic_lookup which allows us to\n    ##   use two-level namespace and still have undefined symbols\n\n    ## FIXME: strictly speaking it should be \"yes\" but libRblas still\n    ## needs -lgfortran because the sharing is a one-way street\n    ## dylib_undefined_allowed=yes\n\n    ## we have to test this in case an outdated linker or non-Apple compiler is used\n    AC_MSG_CHECKING([whether linker supports dynamic lookup])\n    AC_CACHE_VAL([r_cv_has_dynlookup],[\n[cat > conftest.c <<EOF\n  void dummy() { }\nEOF]\necho \"${CC} ${CFLAGS} conftest.c ${shlib_ldflags} -o libconftest${DYLIB_EXT} ${LIBS}\" >&AS_MESSAGE_LOG_FD\nif ${CC} ${CFLAGS} conftest.c ${shlib_ldflags} -o libconftest${DYLIB_EXT} ${LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n   r_cv_has_dynlookup=yes\n   AC_MSG_RESULT([yes])\nelse\n   r_cv_has_dynlookup=no\n   AC_MSG_RESULT([no])\n   AC_MSG_WARN([***  Please consider updating your Xcode tools. ***])\nfi\nrm -f libconftest${DYLIB_EXT} conftest.c\n])\n    if test -n \"${FORCE_FLAT_NAMESPACE}\"; then\n       AC_MSG_WARN([Use of flat namespace is requested by user.])\n       r_cv_has_dynlookup=forced-no\n    fi\n    if test \"${r_cv_has_dynlookup}\" != \"yes\"; then\n       shlib_ldflags=\"-dynamiclib -flat_namespace -undefined suppress -single_module -multiply_defined suppress\"\n       dylib_undefined_allowed=yes\n    fi\n\t\n    ## we use the same method for shlib and dylib now\n    darwin_dylib_ldflags=\"${shlib_ldflags}\"\n    ## side note: we could use flat namespace instead, but there is an exception:\n    ## * libRblas must be 2-level, dyn lookup because of xerbla which is undefined\n    cpicflags=\"${darwin_pic}\"\n    cxxpicflags=\"${darwin_pic}\"\n    ## macOS does not have a Fortran compiler, so this is speculative\n    fpicflags=\"${darwin_pic}\"\n    shlib_cxxldflags=\"${shlib_ldflags}\"\n    ;;\n  freebsd*)\n    ## maybe this needs to depend on the compiler:\n    ## -export-dynamic used to work, but does not with clang.\n    ## Seems FreeBSD has used the GNU linker since at least 3.0 (Oct 1998)\n    ## We could also use -rdynamic, which seems to work with clang and gcc.\n    main_ldflags=\"-Wl,--export-dynamic\"\n    shlib_ldflags=\"-shared\"\n    ;;\n  gnu*)\t\t\t\t# GNU Hurd, see FreeBSD comment\n    main_ldflags=\"-Wl,--export-dynamic\"\n    ;;\n  hpux*)\n    SHLIB_EXT=\".sl\"\n    case \"${CC}\" in\n      cc|c89)\n        cpicflags=\"+Z\"\n        ;;\n    esac\n    case \"${F77}\" in\n      f77|fort77|f90)\n        fpicflags=\"+Z\"\n        ;;\n    esac\n    main_ldflags=\"-Wl,-E\"\n    if test \"${GCC}\" = yes; then\n      shlib_ldflags=\"-shared -fPIC -Wl,-Bsymbolic\"\n    else\n      ## <NOTE>\n      ## Native cc insists on tacking on crt0.o when it calls ld, and\n      ## crt0.o is not built with PIC.  As there seems to be no obvious\n      ## way to tell cc not to do this, we use ld for linking shlibs.\n      shlib_ld=ld\n      shlib_ldflags=\"-b -Bsymbolic\"\n      ## </NOTE>\n    fi\n    if test \"${GXX}\" = yes; then\n      shlib_cxxldflags=\"-shared -fPIC\"\n    fi\n    ;;\n  linux*aout)\t\t\t# GNU Linux/aout\n    sed '/HAVE_ELF_H/d' confdefs.h > tmp.h ; mv tmp.h confdefs.h\n    ;;\n  linux*)\t\t\t# GNU Linux/ELF\n    case  \"${CC}\" in\n      ## Intel compiler: note that -c99 may have been appended\n      *icc*)\n        cpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgcc*)\n        cpicflags=\"-fpic\"\n\t;;\n    esac\n    case  \"${F77}\" in\n      ## Intel compilers\n      *ifc|*ifort)\n        fpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgf77|*pgf90|*pgf95)\n        fpicflags=\"-fpic\"\n        ;;\n    esac\n    case  \"${CXX}\" in\n      ## Intel compilers\n      *icpc|*icc)\n        cxxpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgCC)\n        cxxpicflags=\"-fpic\"\n        ;;\n    esac\n    ## Luke Tierney says that just '-export-dynamic' does not work for\n    ## Intel compilers (icc).  It is accepted by clang but ignored.\n    ## Could also use -rdynamic, at least for gcc and clang.\n    main_ldflags=\"-Wl,--export-dynamic\"\n    STATICR1=\"-Wl,--whole-archive\"\n    STATICR2=\"-Wl,--no-whole-archive\"\n    ;;\n  mingw*)\n    SHLIB_EXT=\".dll\"\n    cpicflags=\n    cxxpicflags=\n    fpicflags=\n    fcpicflags=\n    ;;\n  netbsd*)\n    ## See the comments about FreeBSD\n    if ${CPP} - -dM < /dev/null | grep __ELF__ >/dev/null ; then\n      main_ldflags=\"-Wl,--export-dynamic\"\n      shlib_ldflags=\"-shared\"\n    else\n      shlib_ldflags=\"-Bshareable\"\n    fi\n    ;;\n  openbsd*)\n    ## ${wl} is defined by libtool configuration code.\n    ## Both -Wl,-export-dynamic and -Wl,--export-dynamic seem to\n    ## work with the GNU linker, but the second is what is documented.\n    ## libtool seems to use -Wl-E , a GNU ld alias of -Wl,--export-dynamic\n    if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n      main_ldflags=\"${wl}-export-dynamic\"\n      shlib_ldflags=\"-shared -fPIC\"\n    fi\n    case \"${host_cpu}\" in \n      powerpc*)\n\t## GCC -fpic limits to 2**16 on OpenBSD powerpc.\n\t## Error message without -fPIC:\n\t##   relocation truncated to fit: R_PPC_GOT16...\n        if test \"${GCC}\" = yes; then\n          cpicflags=\"-fPIC\"\n        fi  \n\t## G77 includes gfortran\n        if test \"${G77}\" = yes; then\n          fpicflags=\"-fPIC\"\n        fi\n        if test \"${GXX}\" = yes; then\n          cxxpicflags=\"-fPIC\"\n        fi\n        ;;\n    esac\n    ;;\n  solaris*)\n## SPARC has only an 8k global object table, 1024 entries on 64-bit,\n## so need PIC not pic.  They are the same on other Solaris platforms.\n    shlib_ldflags=\"-G\"\n    shlib_cxxldflags=\"-G\"\n   if test \"${GCC}\" = yes; then\n      cpicflags=\"-fPIC\"\n      ld=`${CC} -print-prog-name=ld`\n      ldoutput=`${ld} -v 2>&1 | grep GNU`\n      if test -n \"${ldoutput}\"; then\n\tmain_ldflags=\"-Wl,-export-dynamic\"\n\tshlib_ldflags=\"-shared\"\n        shlib_cxxldflags=\"-shared\"\n      else\n        ## it seems gcc c 4.6.2 needs this with Solaris linker\n\tshlib_ldflags=\"-shared\"\n        shlib_cxxldflags=\"-shared\"\n      fi\n    else\n      cpicflags=\"-KPIC\"\n      if test \"`basename ${CXX}`\" = \"CC\" ; then\n        ## Forte version 7 needs -lCstd: Forte 6 does not.\t\n        ver=`${CXX} -V 2>&1 | sed 2d | grep 'Forte Developer 7 C++'`\n        if test -n \"${ver}\" ; then\n          shlib_cxxldflags=\"-G -lCstd\"\n        fi\n      fi\n    fi\n    ## G77 includes gfortran\n    if test \"${G77}\" != yes; then\n      fpicflags=\"-PIC\"\n    else\n      fpicflags=\"-fPIC\"\n    fi\n    if test \"${GXX}\" = yes; then\n      cxxpicflags=\"-fPIC\"\n      ld=`${CXX} -print-prog-name=ld`\n      ldoutput=`${ld} -v 2>&1 | grep GNU`\n      if test -n \"${ldoutput}\"; then\n        shlib_cxxldflags=\"-shared\"\n      fi\n    else\n      cxxpicflags=\"-KPIC\"\n    fi\n    ;;\nesac\n\n## <FIXME>\n## Completely disable using libtool for building shlibs until libtool\n## fully supports at least Fortran and C++.\n## ## Step 4.  In case we use libtool ...\n## if test \"${use_libtool}\" = yes; then\n##   case \"${host_os}\" in\n##     *)\n##       ;;\n##   esac\n## fi\n## </FIXME>\n\n## Step 5.  Overrides from the environment and error checking.\nif test -z \"${MAIN_LD}\"; then\n   main_ld_was_given=no\n  if test \"${main_ld}\" = \"${CC}\"; then\n     MAIN_LD=\"\\$(CC)\"\n  else\n     MAIN_LD=\"${main_ld}\"\n  fi\nfi\nR_SH_VAR_ADD(MAIN_LDFLAGS, [${main_ldflags}])\n\n: ${CPICFLAGS=\"${cpicflags}\"}\nif test -z \"${CPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine CPICFLAGS.])\n      AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\n      ;;\n  esac\nfi\n\n: ${FPICFLAGS=\"${fpicflags}\"}\nif test -z \"${FPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine FPICFLAGS.])\n      AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\n      ;;\n  esac\nfi\n\n: ${CXXPICFLAGS=\"${cxxpicflags}\"}\nif test -n \"${CXX}\" -a -z \"${CXXPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      warn_cxxpicflags=\"I could not determine CXXPICFLAGS.\"\n      ;;\n  esac\nfi\n\nif test -z \"${SHLIB_LD}\"; then\n  shlib_ld_was_given=no\n  if test \"${shlib_ld}\" = \"${CC}\"; then\n    SHLIB_LD=\"\\$(CC)\"\n  else\n    SHLIB_LD=\"${shlib_ld}\"\n  fi\n  R_SH_VAR_ADD(SHLIB_LDFLAGS, [${shlib_ldflags}])\nfi\nif test -z \"${SHLIB_LDFLAGS}\"; then\n  AC_MSG_WARN([I could not determine SHLIB_LDFLAGS.])\n  AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\nfi\n\nif test -z \"${SHLIB_CXXLD}\"; then\n  shlib_cxxld_was_given=no\n  if test \"${shlib_cxxld}\" = \"${CXX}\"; then\n    SHLIB_CXXLD=\"\\$(CXX)\"\n  else\n    SHLIB_CXXLD=\"${shlib_cxxld}\"\n  fi\n  R_SH_VAR_ADD(SHLIB_CXXLDFLAGS, [${shlib_cxxldflags}])\nfi\nif test  -n \"${CXX}\" -a -z \"${SHLIB_CXXLDFLAGS}\"; then\n  warn_shlib_cxxldflags=\"I could not determine SHLIB_CXXLDFLAGS\"\n  AC_MSG_WARN([${warn_shlib_cxxldflags}])\nfi\n\n## Step 6.  We may need flags different from SHLIB_LDFLAGS and SHLIB_EXT\n## for building R as a shared library to link against (the SHLIB_* vars\n## just determined are really for loadable modules).  On ELF there is no\n## difference, but e.g. on Mach-O for Darwin there is.\n##\n## Also need flags to build the Rlapack shared library on some platforms.\nDYLIB_EXT=\"${SHLIB_EXT}\"\ndylib_ldflags=\"${SHLIB_LDFLAGS}\"\nLIBR_LDFLAGS=\"\"\nRLAPACK_LDFLAGS=\"\"\nRBLAS_LDFLAGS=\"\"\nR_DYLIB_VERSION_SUFFIX=\"\"\ncase \"${host_os}\" in\n  aix*)\n    ## Not needed for -brtl linking\n    # RLAPACK_LDFLAGS=\"${wl}-bE:\\$(top_builddir)/etc/Rlapack.exp\"\n    # LAPACK_LDFLAGS=\"${wl}-bI:\\$(R_HOME)/etc/Rlapack.exp\"\n    ;;\n  darwin*)\n    DYLIB_EXT=\".dylib\"\n    dylib_ldflags=\"${darwin_dylib_ldflags}\"\n    MAJR_VERSION=`echo \"${PACKAGE_VERSION}\" | sed  -e \"s/[[\\.]][[1-9]]$/.0/\"` \n    LIBR_LDFLAGS=\"-install_name libR.dylib -compatibility_version ${MAJR_VERSION}  -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names\"\n    RLAPACK_LDFLAGS=\"-install_name libRlapack.dylib -compatibility_version ${MAJR_VERSION} -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names\"\n    ## don't use version in libRblas so we can replace it with any BLAS implementation\n    RBLAS_LDFLAGS=\"-install_name libRblas.dylib -headerpad_max_install_names\"\n    ;;\n  hpux*)\n    ## Needs to avoid embedding a relative path ../../../bin.\n    ## See the above code for shlib_ldflags for reasons why we currently\n    ## cannot always use '-Wl,+s'.\n    if test \"${GCC}\" = yes; then\n      LAPACK_LDFLAGS=\"-Wl,+s\"\n    else\n      LAPACK_LDFLAGS=\"+s\"\n    fi\n    ;;\n  openbsd*)\n    if test -z \"${R_DYLIB_VERSION}\"; then\n      PACKAGE_VERSION_MAJOR=`echo \"${PACKAGE_VERSION}\" | \\\n        sed -e \"s/\\.//\" -e \"s/\\..*$//\"`\n      PACKAGE_VERSION_MINOR=`echo \"${PACKAGE_VERSION}\" | \\\n        sed -e \"s/.*\\.\\([[^.]][[^.]]*$\\)/\\1/\"`\n      R_DYLIB_VERSION=\"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}\"\n    fi\n    R_DYLIB_VERSION_SUFFIX=\".${R_DYLIB_VERSION}\"\n    ;;\nesac\n\nR_DYLIB_EXT=\"${DYLIB_EXT}${R_DYLIB_VERSION_SUFFIX}\"\n\nif test -z \"${DYLIB_LD}\"; then\n  dylib_ld_was_given=no\n  DYLIB_LD=\"${SHLIB_LD}\"\n  R_SH_VAR_ADD(DYLIB_LDFLAGS, [${dylib_ldflags}])\nelse\n  if test -z \"${DYLIB_LDFLAGS}\"; then\n    DYLIB_LDFLAGS=\"${dylib_ldflags}\"\n  fi\nfi\n\n## some claim Solaris needs -lsocket -lnsl (PR#15815)\n: ${INTERNET_LIBS=\"${internet_libs}\"}\nAC_SUBST(INTERNET_LIBS)\n\nAM_CONDITIONAL(DYLIB_UNDEFINED_ALLOWED, [test \"x${dylib_undefined_allowed}\" = xyes])\n\nAC_SUBST(MAIN_LD)\nAC_SUBST(MAIN_LDFLAGS)\nAC_SUBST(CPICFLAGS)\nAC_SUBST(CXXPICFLAGS)\nAC_SUBST(DYLIB_LD)\nAC_SUBST(DYLIB_LDFLAGS)\nAC_SUBST(FCPICFLAGS)\nAC_SUBST(FPICFLAGS)\nAC_SUBST(SHLIB_CXXLD)\nAC_SUBST(SHLIB_CXXLDFLAGS)\nAC_SUBST(SHLIB_LD)\nAC_SUBST(SHLIB_LDFLAGS)\nAC_SUBST(SHLIB_LIBADD)\nAC_SUBST(SHLIB_EXT)\nAC_DEFINE_UNQUOTED(SHLIB_EXT, \"${SHLIB_EXT}\",\n[Define this to be the extension used for shared objects on your system.])\nAM_CONDITIONAL(USE_EXPORTFILES, [test \"x${use_exportfiles}\" = xyes])\nAC_SUBST(DYLIB_EXT)\nAC_SUBST(LIBR_LDFLAGS)\nAC_SUBST(RBLAS_LDFLAGS)\nAC_SUBST(RLAPACK_LDFLAGS)\nAC_SUBST(LAPACK_LDFLAGS)\nAC_SUBST(FW_VERSION)\nAC_SUBST(STATICR1)\nAC_SUBST(STATICR2)\nAC_SUBST(R_DYLIB_EXT)\n\n## Test support for C++ standards\nR_STDCXX([98], [CXX98], [CXX])\nR_STDCXX([11], [CXX11], [CXX])\nR_STDCXX([14], [CXX14], [CXX11])\nR_STDCXX([17], [CXX17], [CXX14])\n\n### OpenMP.\n\n## The basic checking is performed via AC_OPENMP added in Autoconf 2.62,\n## which we already called for determining the appropriate flags for the\n## C, C++, Fortran 77, Fortran compiler/linker.  Note that this gives\n## variables OPENMP_CFLAGS etc., which are meant to be used for *both*\n## compiling and linking.  So we can really only used them provided that\n## we use the respective compilers for linking as well (or we need a\n## different mechanism for determining what is needed).\n##\n## For compiling R itself, we use MAIN_LD and DYLIB_LD for linking, both\n## defaulting to CC.  Hence:\n## \n##    If both MAIN_LD and DYLIB_LD were not specified by the user and\n##    equal CC and this was determined to support OpenMP, then we (try\n##    to) provide OpenMP support by adding OPENMP_CFLAGS to the linker\n##    flags and OPENMP_CFLAGS and OPENMP_FFLAGS to the C and Fortran 77\n##    compiler flags, and defining HAVE_OPENMP.\n##\n## (The Fortran 77 compiler is never used for linking by default.)\n\nif test -n \"${R_OPENMP_CFLAGS+set}\"; then\n  if test -n \"${R_OPENMP_CFLAGS}\"; then\n    R_SH_VAR_ADD(MAIN_LDFLAGS, [${R_OPENMP_CFLAGS}])\n    R_SH_VAR_ADD(DYLIB_LDFLAGS, [${R_OPENMP_CFLAGS}])\n    AC_DEFINE(HAVE_OPENMP, 1, [Define if you have C OpenMP support.])\n  fi\nelif test \"x${main_ld_was_given}\" = xno -a \"${MAIN_LD}\" = \"\\$(CC)\" -a \\\n        \"x${dylib_ld_was_given}\" = xno -a \"${DYLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\"; then\n  R_OPENMP_CFLAGS=\"${OPENMP_CFLAGS}\"\n  R_SH_VAR_ADD(MAIN_LDFLAGS, [${OPENMP_CFLAGS}])\n  R_SH_VAR_ADD(DYLIB_LDFLAGS, [${OPENMP_CFLAGS}])\n  AC_DEFINE(HAVE_OPENMP, 1, [Define if you have C OpenMP support.])\nelse\n  R_OPENMP_CFLAGS= \nfi\n## Currently unused: see comment in Makeconf.in\nif test -z \"${R_OPENMP_FFLAGS+set}\" -a \\\n        \"x${ac_cv_prog_f77_openmp}\" != \"xunsupported\"; then\n  R_OPENMP_FFLAGS=\"${OPENMP_FFLAGS}\"\nfi\nAC_SUBST(R_OPENMP_CFLAGS)\nAC_SUBST(R_OPENMP_FFLAGS)\n\n## For compiling package code, we use SHLIB_FCLD, SHLIB_CXXLD or\n## SHLIB_LD for linking, depending on whether the package contains\n## Fortran (90/95) code, C++ (or ObjC) code, or \"just\" C and Fortran 77.\n## However, we (currently) do not conditionalize compilation flags.  So\n## the only \"safe\" thing we can do for now is:\n##\n##    If none of SHLIB_LD, SHLIB_CXXLD and SHLIB_FCLD were specified by\n##    the user and equal CC, CXX and FC, respectively, and these were\n##    determined to support OpenMP, the we try to provide OpenMP support\n##    for packages by adding OPENMP_FCFLAGS, OPENMP_CXXFLAGS and\n##    OPENMP_CFLAGS to the respective linker flags, and add the OPENMP\n##    flags to all (C, C++, Fortran and Fortran 77) compiler flags.\n\n## <FIXME>\n## Need to do this after configuring Fortran 90/95 support, which comes\n## way below: should this be moved up to the compiler section?\n## </FIXME>\n\n### Now we have found all the flags, we need to use them to test appropriately.\n### We don't currently have any C++ tests, but future-proof.\n### In principle we should do this before testing for C-Fortran compatibility.\n\nCPPFLAGS_KEEP=${CPPFLAGS}\nCFLAGS_KEEP=${CFLAGS}\nFFLAGS_KEEP=${FFLAGS}\nCXXFLAGS_KEEP=${CXXFLAGS}\nCPPFLAGS=\"${CPPFLAGS} ${R_XTRA_CPPFLAGS}\"\nif test \"${want_R_shlib}\" = yes; then\n  CFLAGS=\"${CFLAGS} ${CPICFLAGS} ${R_XTRA_CFLAGS}\"\n  FFLAGS=\"${FFLAGS} ${FPICFLAGS} ${R_XTRA_FFLAGS}\"\n  CXXFLAGS=\"${CXXFLAGS} ${CXXPICFLAGS} ${R_XTRA_CXXFLAGS}\"\nelse\n  CFLAGS=\"${CFLAGS} ${R_XTRA_CFLAGS}\"\n  FFLAGS=\"${FFLAGS} ${R_XTRA_FFLAGS}\"\n  CXXFLAGS=\"${CXXFLAGS} ${R_XTRA_CXXFLAGS}\"\nfi\n\n### * Checks for library functions.\n\nAC_CHECK_TYPES([off_t])\nAC_FUNC_ALLOCA\nAC_CHECK_DECLS([alloca], , , \n[#ifdef HAVE_ALLOCA_H\n# include <alloca.h>\n#endif])\n\n## C99 functions: \n## not all C99 runtimes are complete,\n## but we had substitutes for expm1 hypot log1p and (internally) nearbyint[l]\n## FreeBSD used to lack log1pl, but 6.0 had it\n## FreeBSD 8.3 first had log2\n## FreeBSD 8.3 first had nearbyintl/rintl (from 2012)\n## https://www.freebsd.org/cgi/man.cgi?query=log&apropos=0&sektion=3&manpath=FreeBSD+11-current&format=html will give an overview.\n## Cygwin and FreeBSD lacked powl (FreeBSD 10.4 (2017-10) has it).\n## Cygwin had rintl but not nearbyintl\n## https://cygwin.com/cygwin-api/compatibility.html says it now has powl and nearbyintl .\n## powl nearbyintl and rintl are only used in format.c\nR_CHECK_FUNCS([expm1 hypot log1p log1pl log2 log10 nearbyint nearbyintl powl rintl], [#include <math.h>])\n## require these from R 3.5.0.\nif test \"${ac_cv_have_decl_expm1}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'expm1' C99 function])\nfi\nif test \"${ac_cv_have_decl_hypot}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'hypot' C99 function])\nfi\nif test \"${ac_cv_have_decl_log1p}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'log1p' C99 function])\nfi\nif test \"${ac_cv_have_decl_nearbyint}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'nearbyint' C99 function])\nfi\n## va_copy is C99: required as from R 2.13.0\nR_CHECK_FUNCS([va_copy], [#include <stdarg.h>])\nif test \"${ac_cv_have_decl_va_copy}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'va_copy' system call])\nfi\n## isblank should be a macro according to C99.  It was missing on Solaris 8\nAC_CHECK_FUNCS(isblank)\n\n## Solaris libsunmath\nAC_CHECK_HEADERS(sunmath.h)\nAC_CHECK_LIB(sunmath, cospi)\n\n## Functions from ISO/IEC TS 18661-4:2015 C11 extensions.\n## For now, do not define _GNU_SOURCE here.\n## All but pown have long been in Solaris' libsunmath\n## macOS has __cospi __sinpi __tanpi\nAC_CHECK_FUNCS([atanpi atan2pi cospi exp10 pown sinpi tanpi __cospi __sinpi __tanpi], \n[#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1\n#include <math.h>\n#ifdef HAVE_SUNMATH_H\n#include <sunmath.h>\n#endif])\n\n## fseeko/ftello are POSIX, may be macros\n## matherr is SVID, redefined in arithmetic.c if present\nAC_CHECK_FUNCS(fseeko ftello matherr)\n\n## POSIX functions\nR_CHECK_FUNCS([fcntl], [#include <fcntl.h>])\nR_CHECK_FUNCS([getgrgid], [#include <grp.h>])\nR_CHECK_FUNCS([getpwuid], [#include <pwd.h>])\nR_CHECK_FUNCS([kill sigaction sigaltstack sigemptyset], [#include <signal.h>])\nR_CHECK_FUNCS([fdopen popen], [#include <stdio.h>])\nif test \"${ac_cv_have_decl_popen}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'popen' system call])\nfi\nR_CHECK_FUNCS([getline], [#include <stdio.h>])\nR_CHECK_FUNCS([select], \n[#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>  /* POSIX >= 2001 */\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>  /* Earlier POSIX, HP-UX? */\n#endif])\ncase \"${host_os}\" in\n  mingw*|windows*|winnt)\n  ;;\n  *)\n  if test \"${ac_cv_have_decl_select}\" = \"no\"; then\n     AC_MSG_ERROR([Building R on Unix requires the 'select' system call])\n  fi\n  if test \"${ac_cv_header_sys_select_h}\" = \"no\" -a \"${ac_cv_header_sys_times_h} = \"no\"\"; then\n     AC_MSG_ERROR([Building R on Unix requires either <sys/select.h> or <sys/time.h>])\n  fi\n  ;;\nesac\n## Windows has neither setenv nor unsetenv\nR_CHECK_FUNCS([setenv unsetenv], [#include <stdlib.h>])\nR_CHECK_FUNCS([getrlimit setrlimit getrusage getpriority], [#include <sys/resource.h>])\nR_CHECK_FUNCS([chmod mkfifo stat umask], [#include <sys/stat.h>])\nif test \"${ac_cv_have_decl_stat}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'stat' system call])\nfi\nR_CHECK_FUNCS([gettimeofday utimes], [#include <sys/time.h>])\nR_CHECK_FUNCS([times], [#include <sys/times.h>])\nR_CHECK_FUNCS([gmtime_r localtime_r], [#include <time.h>])\nR_CHECK_FUNCS([nl_langinfo], [#include <langinfo.h>])\nR_CHECK_FUNCS([access chdir execv ftruncate getcwd geteuid getuid link readlink symlink sysconf],\n[#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif])\n## Linux-specific feature allowing us to fix CPU affinity for parallel\nR_CHECK_FUNCS([sched_setaffinity sched_getaffinity], [#include <sched.h>])\n## utime was declared obsolescent in POSIX 2008 (use utimes instead)\nR_CHECK_FUNCS([utime], [#include <utime.h>])\n## POSIX.1-2008 preferred form\nR_CHECK_FUNCS([utimensat], [#include <sys/stat.h>])\n## Used to avoid a problem with some Xcode 9 updates on macOS 10.12 (Darwin 16)\ncase \"${host_os}\" in\n   darwin1[[0123456]].*)\n     AC_DEFINE(MACOS_SIERRA, 1, [macOS 10.12 (Sierra) or earlier])\n   ;;\nesac\nAC_SUBST(MACOS_SIERRA)\n## clock_gettime is POSIX 1993, but not on macOS prior to 10.12 (Sierra)\n## Some OSes need -lrt: Linux (for glibc versions before 2.17), Solaris,\n## not FreeBSD. \n## Unsurprising, as POSIX 2008 moved it from its timers section to base.\n## timespec_get is C11.\nAC_CHECK_LIB(rt, clock_gettime)\nR_CHECK_FUNCS([clock_gettime timespec_get], [#include <time.h>])\n## We need setenv or putenv.  It seems that everyone does have\n## putenv, as earlier versions of R would have failed without it.\n## It is not always declared, so we do not require a declaration.\nAC_CHECK_FUNCS(putenv)\nAC_CHECK_DECLS([putenv], , , [#include <stdlib.h>])\n## this is a GNU extension so usually hidden.  Not in Solaris 10\nAC_CHECK_FUNCS(vasprintf)\nAC_CHECK_DECLS([vasprintf], , , [#include <stdio.h>])\n## mempcpy is a GNU extension used by the included gettext.  Not in Solaris 10\nAC_CHECK_FUNCS(mempcpy)\n## realpath is POSIX 2001 (and BSD)\n## Some early GNU libc systems had it in unistd.h.\nAC_CHECK_FUNCS(realpath)\nAC_CHECK_DECLS([realpath], , , [#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif])\n## glob is POSIX: we have a substitute on Windows\n## assume without checking that if we have glob we also have globfree\nR_CHECK_FUNCS([glob], [#ifdef HAVE_GLOB_H\n# include <glob.h>\n#endif])\nAC_CHECK_FUNCS([dladdr dlsym])\nAC_CHECK_DECLS([dladdr,dlsym], , , [#include<dlfcn.h>])\nAC_CHECK_DECLS([RTLD_DEFAULT,RTLD_NEXT], , , [#include<dlfcn.h>])\nAC_CHECK_HEADERS([thread.h])\nR_CHECK_FUNCS([thr_stksegment], [\n#include <thread.h>\n#include <signal.h>\n])\n\n## Lots of uses of getwd(), file.access(), Sys.glob().\n## We don't need times() except as a fallback for getrusage and\n## clock_gettime/gettimeofday -- but it is older and always there.\ncase \"${host_os}\" in\n  mingw*)\n  ;;\n  *)\n    if test \"${ac_cv_search_glob}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'glob' system call])\n    fi\n    if test \"${ac_cv_search_access}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'access' system call])\n    fi\n    if test \"${ac_cv_search_getcwd}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'getcwd' system call])\n    fi\n    if test \"${ac_cv_search_chdir}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'chdir' system call])\n    fi\n    if test \"${ac_cv_search_times}\" = \"no\"; then\n      AC_MSG_ERROR([Building R requires the 'times' system call])\n    fi\n  ;;\nesac\n## We also use getlogin isatty rename unlink without checking.\n\n## <NOTE>\n## No need checking for bcopy bzero memcpy even though ifnames\n## might report corresponding HAVE_FOO conditionals.\n## </NOTE>\n\n\nif test $ac_cv_type_off_t=yes -a $ac_cv_func_fseeko=yes -a $ac_cv_func_ftello=yes; then\n   AC_DEFINE(HAVE_OFF_T, 1,\n            [Define if you have off_t, fseeko and ftello.]) \nfi\n\n## IEEE 754. We rely on this in e.g. the working log test.\nR_IEEE_754\n\n## check if putenv can substitute for unsetenv\nR_PUTENV_AS_UNSETENV\n\n\n## check whether nl_langinfo(CODESET) is in langinfo.h\n## defines HAVE_LANGINFO_CODESET if it's there\nAM_LANGINFO_CODESET\n\n## Used to build src/include/Rmath.h.\n## <NOTE>\n## we don't use AC_CONFIG_HEADERS on Rmath.h.in because\n## a) that would comment out #undef statements in Rmath.h.in and\n## b) Rmath.h should be a self-contained file for standalone Rmath use.\n## </NOTE>\n\n## Do we need substitutes?\n## mkdtemp is not on Solaris 10, added in POSIX 2008\n## strdup strncasecmp were first required in POSIX 2001.\nAC_REPLACE_FUNCS([mkdtemp strdup strncasecmp])\n## Enable declarations in Defn.h?\nAC_CHECK_DECLS([mkdtemp, strdup, strncasecmp])\n\nAC_SEARCH_LIBS(connect, [socket])\n# gethostbyname was removed in POSIX 2008 (in favour of getaddrinfo, POSIX 2001)\nAC_SEARCH_LIBS(gethostbyname, [nsl socket])\n## -lnsl is needed on Solaris\n## 2018: Sun RPC is being unbundled from glibc, at least in Fedora 28\n## (https://fedoraproject.org/wiki/Changes/SunRPCRemoval)\n## Use libtirpc instead, which has been a possible source since ca 2007\nAC_SEARCH_LIBS(xdr_string, [nsl tirpc])\nR_FUNC_CALLOC\nif test \"${ac_cv_have_decl_isfinite}\" = \"yes\"; then\nR_FUNC_ISFINITE\nfi\n## check accuracy of log1p\n## issues are probably ancient history: \n## reported for NetBSD 1.6 and OpenBSD 3.2 (both 2002).\nR_FUNC_LOG1P\nR_FUNC_FTELL\nR_FUNC_SIGACTION\n\nif test x${use_internal_tzcode} = xdefault; then\ncase \"${host_os}\" in\n   darwin*)\n     use_internal_tzcode=yes;\n     ;; \nesac\nfi\nif test \"${use_internal_tzcode}\" != yes; then\n  R_MKTIME_ERRNO\n  R_FUNC_MKTIME\nfi\n\nR_C99_COMPLEX\nR_FUNC_CTANH\n\n## BSD extensions\nAC_CACHE_CHECK([whether 'struct tm' includes tm_zone],\n                [r_cv_have_tm_zone],\n[AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n// glibc needs this defined.\n#define _BSD_SOURCE\n#include <time.h>\n\nint main() {\n    struct tm x;\n    x.tm_zone = \"\";\n}\n]])],\n              [r_cv_have_tm_zone=yes],\n              [r_cv_have_tm_zone=no])])\nif test \"x${r_cv_have_tm_zone}\" = xyes; then\n  AC_DEFINE(HAVE_TM_ZONE, 1, [Define to 1 if your 'struct tm' has tm_zone.])\nfi\n\nAC_CACHE_CHECK([whether 'struct tm' includes tm_gmtoff],\n                [r_cv_have_tm_gmtoff],\n[AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n// glibc needs this defined, second for >= 2.20\n#define _BSD_SOURCE\n#define _DEFAULT_SOURCE\n#include <time.h>\n\nint main() {\n    struct tm x;\n    x.tm_gmtoff = +3600;\n}\n]])],\n              [r_cv_have_tm_gmtoff=yes],\n              [r_cv_have_tm_gmtoff=no])])\nif test \"x${r_cv_have_tm_gmtoff}\" = xyes; then\n  AC_DEFINE(HAVE_TM_GMTOFF, 1, [Define to 1 if your 'struct tm' has tm_gmtoff.])\nfi\n\n## BLAS.\n## <NOTE>\n## This has to come *after* checking for Fortran 77 compiler/converter\n## characteristics (notably name mangling and FLIBS).\n## </NOTE>\n\nif test \"${use_blas}\" = yes; then\n  ## may acx_blas_ok to yes\n  R_BLAS_LIBS\nfi\n\nif test \"${acx_blas_ok}\" != \"yes\"; then\n  case \"${host_os}\" in\n    aix*)\n      ;;\n    *)\n      if test \"${use_blas_shlib}\" = \"unset\"; then\n        use_blas_shlib=\"yes\"\n      fi\n      ;;\n  esac\nfi\n\nAM_CONDITIONAL(BLAS_SHLIB, [test \"x${use_blas_shlib}\" = xyes])\n\ncase \"${host_os}\" in\n  darwin*)\n    ## In order to allow the R build to be relocatable, we strip paths\n    ## from all shlibs and rely on DYLD_LIBRARY_PATH. Unfortunately\n    ## Darwin linker ignores it at build-time and doesn't use -L to\n    ## resolve dylib dependencies, so libRblas will not be found unless\n    ## we tell ld where it lives. I don't know of any more elegant solution :/\n    if test \"x${use_blas_shlib}\" = xyes; then\n      LIBR=\"${LIBR} -dylib_file libRblas.dylib:\\\"\\$(R_HOME)/lib\\$(R_ARCH)/libRblas.dylib\\\"\"\n    fi\n  ;;\nesac\n## LIBR0 is for the -L part, LIBR1 for -lR (if needed)\nAC_SUBST(LIBR0)\nAC_SUBST(LIBR1)\n\n## This version is used to build a shared BLAS lib\nBLAS_LIBS0=${BLAS_LIBS}\n\n## external BLAS + shared BLAS lib = we need to pass symbols through\n## this may require some magic\nif test \"${acx_blas_ok}\" = yes -a \"${use_blas_shlib}\" = yes; then\n  case \"${host_os}\" in\n    darwin*)\n    ## test whether we can see symbols through the proxy BLAS library\n    ## this test could be modified to not be Darwin-specific,\n    ## however the fix is darwin-specific\n    if test \"${r_cv_prog_f77_append_underscore}\" = yes; then\n      dgemm=dgemm_\n      xerbla=xerbla_\n    else\n      dgemm=dgemm\n      xerbla=xerbla\n    fi\n    AC_MSG_CHECKING([whether external BLAS is visible through libRblas])\n    AC_CACHE_VAL([r_cv_blas0_passthrough],[\n[cat > conftestl.c <<EOF\n  void ${dgemm}();\n  void dummy() { ${dgemm}(); }\nEOF]\necho \"${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS}\" >&AS_MESSAGE_LOG_FD\n${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\n[cat > conftest.c <<EOF\nvoid ${dgemm}();\nvoid ${xerbla}(char *srname, int *info){};\nint main(int argc, char **argv) { if (argc<0) ${dgemm}(); return 0; }\nEOF]\nif ${CC} ${CFLAGS} -c conftest.c 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n  if ${CC} ${LDFLAGS} -o conftest${ac_exeext} \\\n       conftest.${ac_objext} -L. -lconftest \\\n       1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD;\n  then\n    ## redirect error messages to config.log\n    output=`./conftest${ac_exeext} 2>&AS_MESSAGE_LOG_FD`\n    if test ${?} = 0; then\n\tr_cv_blas0_passthrough=yes\n    fi\n  fi\nfi\n])\nif test -n \"${r_cv_blas0_passthrough}\"; then\nr_cv_blas0_passthrough=yes\nAC_MSG_RESULT([yes])\nelse\nAC_MSG_RESULT([no])\nAC_MSG_CHECKING([can it be fixed by using -sub_umbrella])\nac_test_BLAS_LIBS=`echo \"${BLAS_LIBS}\"|sed -e s/-framework/-sub_umbrella/`\nrm -f libconftest.dylib\necho \"${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} ${ac_test_BLAS_LIBS}\" >&AS_MESSAGE_LOG_FD\n${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} ${ac_test_BLAS_LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\nif ${CC} ${CFLAGS} -c conftest.c 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n  if ${CC} ${LDFLAGS} -o conftest${ac_exeext} \\\n       conftest.${ac_objext} -L. -lconftest \\\n       1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD;\n  then\n    ## redirect error messages to config.log\n    output=`./conftest${ac_exeext} 2>&AS_MESSAGE_LOG_FD`\n    if test ${?} = 0; then\n        r_cv_blas0_passthrough=yes\n    fi\n  fi\nfi\nif test -n \"${r_cv_blas0_passthrough}\"; then\nr_cv_blas0_passthrough=yes\nAC_MSG_RESULT([yes])\nBLAS_LIBS0=\"${BLAS_LIBS} ${ac_test_BLAS_LIBS}\"\nelse\nAC_MSG_RESULT([no])\nAC_MSG_ERROR([Cannot build Rblas shared library such that it makes external BLAS visible.\nAn alternative is to use internal BLAS instead and replace\nlibRblas.dylib with the external BLAS library after R is built.])\nfi\nfi\n    rm -f conftest.c conftest.o conftestl.c libconftest.dylib\n    ;;\n  esac\nfi\nAC_SUBST(BLAS_LIBS0)\n\nif test \"${use_blas_shlib}\" = yes; then\n  ## set BLAS_LIBS to point at local version\n  BLAS_LIBS=\"-L\\\"\\$(R_HOME)/lib\\$(R_ARCH)\\\" -lRblas\"\nfi\n\nAM_CONDITIONAL(USE_VECLIB_G95FIX, [test \"x${use_veclib_g95fix}\" = xyes])\nAM_CONDITIONAL(USE_EXTERNAL_BLAS, [test \"${acx_blas_ok}\" = \"yes\"])\n\n## LAPACK.\n## The default has already been set on macOS: otherwise it is \"no\"\n## and so this test fails.\nif test \"${use_lapack}\" = \"yes\"; then\n  R_LAPACK_LIBS\nfi\nif test \"${acx_lapack_ok}\" != \"yes\"; then\n  LAPACK_LIBS=\"-L\\\"\\$(R_HOME)/lib\\$(R_ARCH)\\\" -lRlapack\"\nfi\nAC_SUBST(LAPACK_LIBS)\nAM_CONDITIONAL(USE_EXTERNAL_LAPACK, [test \"${acx_lapack_ok}\" = \"yes\"])\n\n### * Checks for system services.\n\n## iconv headers and function.\nR_ICONV\n\n## check sufficient support for MBCS\nR_MBCS\n\n## support for ICU\nif test \"$use_ICU\" = yes ; then\n  R_ICU\n  if test \"$use_ICU\" = no ; then\n    case \"${host_os}\" in\n      darwin*)\n        AC_CHECK_LIB(icucore, ucol_open, [],\n            [AC_MSG_ERROR([library 'icucore' is required for ICU])])\n        AC_DEFINE(USE_ICU_APPLE, 1, [Define to use Apple's ICU.])\n        AC_DEFINE(USE_ICU, 1, [Define to use ICU for collation.])\n\tuse_ICU=yes\n      ;;\n    esac\n  fi\nfi\nAC_SUBST(USE_ICU)\nAC_SUBST(USE_ICU_APPLE)\n\n## X11.\nR_X11\nAM_CONDITIONAL(BUILD_X11, [test \"x${use_X11}\" = \"xyes\"])\n## check if X11 typedefs KeySym\nR_TYPE_KEYSYM\n## check if Xmu is supported\nR_X11_Xmu\n\nif test \"x${want_cairo}\" = \"xyes\"; then\nR_PANGO_CAIRO\nfi\nAM_CONDITIONAL(BUILD_DEVCAIRO, [test \"x${r_cv_cairo_works}\" = xyes])\n\n\n## Aqua\ncase \"${host_os}\" in\n  darwin*)\n    ## check for CoreFoundation framework (chances are much higher\n    ## that we can build AQUA if this one is present)\n    R_CHECK_FRAMEWORK(CFStringGetSystemEncoding, CoreFoundation)\n    ## FIXME: we should verify that we can use Obj-C exceptions\n    ##        such as @try and friends. The OBJC compiler tests\n    ##\t      above add -fobjc-exceptions where possible, but\n    ##\t      they don't check that the exceptions are available.\n    R_AQUA\n    ## That sets HAVE_AQUA, which is used to enable support of R.app\n    ## and also in C headers and files related to quartz()\n  ;;\n  *)\n    use_aqua=no\n  ;;\nesac\n## Now used:\n## - to compile src/unix/aqua.c\n## - in etc/Renviron to set the personal library,\n## - in grDevices to select building quartz()\nAM_CONDITIONAL(BUILD_AQUA, [test \"x${use_aqua}\" = xyes])\n\n## Tcl/Tk.\nR_TCLTK\n\n## BSD networking.\nR_BSD_NETWORKING\n\n## XDR headers and library routines.\nR_XDR\n\n## zlib headers and libraries.\nR_ZLIB\n\n## bzlib headers and libraries.\nR_BZLIB\n\n## LZMA headers and libraries from xz-utils\nR_LZMA\n\n## PCRE headers and libraries.\nR_PCRE\n\n## PCRE2 header and 8-bit library.\nR_PCRE2\n\n## tre headers and libraries.\nR_TRE\n\n## libcurl\nR_LIBCURL\n\n\n## Bitmap headers and libraries.\nif test -n \"${PKGCONF}\"; then\nR_BITMAPS2\nelse\nR_BITMAPS\nfi\n\n## POSIX times.\nR_SYS_POSIX_LEAPSECONDS\n\n## stat times\ngl_STAT_TIME\n \n## R profiling.\nif test \"${want_R_profiling}\" = yes; then\n  AC_CHECK_FUNCS(setitimer,\n                 [AC_DEFINE(R_PROFILING, 1,\n\t\t            [Define this to enable R-level profiling.])],\n                 [want_R_profiling=\"no\"])\nfi\nAC_SUBST(R_PROFILING)\n\n## R profiling.\nif test \"${want_memory_profiling}\" = yes; then\n  AC_DEFINE(R_MEMORY_PROFILING, 1, [Define this to enable memory profiling.])\nfi\n\n## Large-file-support\nAC_SYS_LARGEFILE\nAC_FUNC_FSEEKO\n\n## Valgrind instrumentation\nif test ${valgrind_level} -eq 0; then\n  AC_DEFINE(NVALGRIND, 1, [Define to disable Valgrind instrumentation])\nelif test \"${use_system_valgrind}\" = yes; then\n  AC_CHECK_HEADERS([valgrind/memcheck.h])\nfi\n\nAC_DEFINE_UNQUOTED(VALGRIND_LEVEL, ${valgrind_level}, [Define as 1 or 2 to specify levels of Valgrind instrumentation])\n\n\nif test \"x${use_internal_tzcode}\" = xyes; then\n  AC_DEFINE(USE_INTERNAL_MKTIME, 1, [Define to use internal time-zone code])\nfi\nAM_CONDITIONAL(BUILD_TZONE, [test \"x${use_internal_tzcode}\" = xyes])\n\n\n## KERN_USRSTACK support (BSD, Darwin, ...)\nR_KERN_USRSTACK\n\n## check for visible __libc_stack_end on Linux\ncase \"${host_os}\" in\n  linux*)\n    AC_CACHE_CHECK([for visible __lib_stack_end], \n    [r_cv_libc_stack_end],\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#include <stdlib.h>\n/* This might get optimized out if not used */\nextern void * __libc_stack_end;\n\nint main () {\n    if(!__libc_stack_end) exit(1);\n    exit(0);\n}\n  ]])], [r_cv_libc_stack_end=yes], [r_cv_libc_stack_end=no], \n    [r_cv_libc_stack_end=no])])\n\n  if test \"${r_cv_libc_stack_end}\" = yes; then\n    AC_DEFINE(HAVE_LIBC_STACK_END, 1, [Define if __libc_stack_end is visible.])\n  fi\nesac\n\n### * Miscellaneous.\n\n## Printing.\n## We look to see whether we have 'lpr' or 'lp'.  Some platforms\n## provide both (SunOS and HPUX), and in those cases we choose lpr.\nif test -z \"${R_PRINTCMD}\"; then\n  AC_CHECK_PROGS(R_PRINTCMD, [lpr lp])\nfi\nAC_DEFINE_UNQUOTED(R_PRINTCMD, \"${R_PRINTCMD}\",\n[Define this to be printing command on your system.])\n\n## Default paper size.\nAC_PATH_PROG(PAPERCONF, paperconf, false)\n: ${PAPERSIZE=a4}\npapersize=`${PAPERCONF}`\ntest -z \"${papersize}\" && papersize=\"${PAPERSIZE}\"\n: ${R_PAPERSIZE=\"${papersize}\"}\nAC_SUBST(R_PAPERSIZE)\n\n## Saving.\nAC_SUBST(R_BATCHSAVE)\n\n## Java support\n## R_JAVA\ncustom_JAVA_HOME=\"${JAVA_HOME}\"\n: ${JAVA_LIBS=~autodetect~}\n: ${JAVA_CPPFLAGS=~autodetect~}\n: ${JAVA_LD_LIBRARY_PATH=~autodetect~}\ncustom_JAVA_LIBS=\"${JAVA_LIBS}\"\ncustom_JAVA_CPPFLAGS=\"${JAVA_CPPFLAGS}\"\ncustom_JAVA_LD_LIBRARY_PATH=\"${JAVA_LD_LIBRARY_PATH}\"\ncustom_JAVA=\"${JAVA}\"\ncustom_JAVAC=\"${JAVAC}\"\ncustom_JAVAH=\"${JAVAH}\"\ncustom_JAR=\"${JAR}\"\nAC_SUBST(custom_JAVA_HOME)\nAC_SUBST(custom_JAVA_CPPFLAGS)\nAC_SUBST(custom_JAVA_LIBS)\nAC_SUBST(custom_JAVA_LD_LIBRARY_PATH)\nAC_SUBST(custom_JAVA)\nAC_SUBST(custom_JAVAC)\nAC_SUBST(custom_JAVAH)\nAC_SUBST(custom_JAR)\nJAVA_LD_LIBRARY_PATH=\nAC_SUBST(JAVA)\nAC_SUBST(JAVAC)\nAC_SUBST(JAVAH)\nAC_SUBST(JAR)\nAC_SUBST(JAVA_LD_LIBRARY_PATH)\nAC_SUBST(JAVA_LIBS0)\nAC_SUBST(JAVA_CPPFLAGS0)\nAC_SUBST(R_JAVA_LD_LIBRARY_PATH)\n\n\n## F90/F95 support\nAC_PROG_FC()\nAC_LANG_PUSH(Fortran)\nAC_FC_SRCEXT(f90, [dummy=1], [dummy=0])\nAC_FC_SRCEXT(f95, [dummy=1], [dummy=0])\nR_OPENMP\nAC_LANG_POP()\nif test -z \"${SHLIB_FCLD}\"; then\n  shlib_fcld_was_given=no\n  SHLIB_FCLD=\"\\$(FC)\"\nfi\n: ${SHLIB_FCLDFLAGS=\"${SHLIB_LDFLAGS}\"}\nAC_SUBST(SHLIB_FCLD)\nAC_SUBST(SHLIB_FCLDFLAGS)\n## x86 Solaris' f95 needs additional libs when building a DSO\nFCLIBS=${FCLIBS}\nAC_SUBST(FCLIBS)\n\n## OpenMP package stuff (needs to come *after* configuration of all\n## compilers).\n## We allow the users to override this for packages only (for now)\nif test \"x${shlib_ld_was_given}\" = xno -a \\\n        \"${SHLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"x\" -a \\\n        \"x${shlib_cxxld_was_given}\" = xno -a \\\n        \"${SHLIB_CXXLD}\" = \"\\$(CXX)\" -a \\\n        \"x${ac_cv_prog_cxx_openmp}\" != \"xunsupported\" -a \\\n        \"x${shlib_fcld_was_given}\" = xno -a \\\n        \"${SHLIB_FCLD}\" = \"\\$(FC)\" -a \\\n        \"x${ac_cv_prog_fc_openmp}\" != \"xunsupported\"; then\n  ## next macro is copied into Rconfig.h\n  AC_DEFINE(SUPPORT_OPENMP, 1,\n            [Define if you have C/C++/Fortran OpenMP support for package code.])\nfi\n## This assumes that OpenMP support in the C compiler includes compilation by F77\nif test -z \"${SHLIB_OPENMP_CFLAGS+set}\" -a \\\n        \"x${shlib_ld_was_given}\" = xno -a \\\n        \"${SHLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"x\"; then\n  SHLIB_OPENMP_CFLAGS=\"${OPENMP_CFLAGS}\"\n  if test -z \"${SHLIB_OPENMP_FFLAGS+set}\" -a \\\n          \"x${ac_cv_prog_f77_openmp}\" != \"xunsupported\"; then\n    SHLIB_OPENMP_FFLAGS=\"${OPENMP_FFLAGS}\"\n  fi\nfi\nif test -z \"${SHLIB_OPENMP_CXXFLAGS+set}\" -a \\\n        \"x${shlib_cxxld_was_given}\" = xno -a \\\n        \"${SHLIB_CXXLD}\" = \"\\$(CXX)\" -a \\\n        \"x${ac_cv_prog_cxx_openmp}\" != \"xunsupported\"; then\n  SHLIB_OPENMP_CXXFLAGS=\"${OPENMP_CXXFLAGS}\"\nfi\nif test -z \"${SHLIB_OPENMP_FCFLAGS+set}\" -a \\\n        \"x${shlib_fcld_was_given}\" = xno -a \\\n        \"${SHLIB_FCLD}\" = \"\\$(FC)\" -a \\\n        \"x${ac_cv_prog_fc_openmp}\" != \"xunsupported\"; then\n  SHLIB_OPENMP_FCFLAGS=\"${OPENMP_FCFLAGS}\"\nfi\n\nAC_SUBST(SHLIB_OPENMP_CFLAGS)\nAC_SUBST(SHLIB_OPENMP_CXXFLAGS)\nAC_SUBST(SHLIB_OPENMP_FCFLAGS)\nAC_SUBST(SHLIB_OPENMP_FFLAGS)\n\n\n## Look for FCPICFLAGS\n## Debian in their wisdom have f95 as a link to gfortran, so\n## use this to pick out gfortran (even though it is unreliable).\nif test \"${ac_cv_fc_compiler_gnu}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      fcpicflags=\"-fPIC\"\n      ;;\n    *)\n      fcpicflags=\"-fpic\"\n      ;;\n  esac\nfi\ncase \"${host_os}\" in\n  darwin*)\n     ## macOS does not have a Fortran compiler, so this is speculative\n    fcpicflags=\"${darwin_pic}\"\n    ;;\n  hpux*)\n    case \"${FC}\" in\n      f90)\n        fcpicflags=\"+Z\"\n        ;;\n    esac\n    ;;\n  linux*)\n    case  \"${FC}\" in\n      ## Intel compilers: probably get identified as GNU, but make sure.\n      *ifc|*ifort)\n        fcpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgf95|*pgf90)\n        fcpicflags=\"-fpic\"\n        ;;\n      *flang)\n        fcpicflags=${cpicflags}\n        ;;\n    esac\n    ;;\n  solaris*)\n    if test \"${ac_cv_fc_compiler_gnu}\" = yes; then\n      fcpicflags=\"-fPIC\"\n    else\n      fcpicflags=\"-PIC\"\n    fi\n    ;;\nesac\n: ${FCPICFLAGS=\"${fcpicflags}\"}\nif test -z \"${FCPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine FCPICFLAGS.])\n      ;;\n  esac\nfi\n\n\n## Make sure -L terms come first in LIBS.\nLIBS1=\"\"\nLIBS2=\"\"\nfor arg in ${LIBS}; do\n  case \"${arg}\" in\n    -L*)\n      R_SH_VAR_ADD(LIBS1, [${arg}])\n      ;;\n    *)\n      R_SH_VAR_ADD(LIBS2, [${arg}])\n      ;;\n  esac\ndone\nLIBS=\"${LIBS1} ${LIBS2}\"\n\n## R_LD_LIBRARY_PATH.\n\n## On Linux, do not add the ld.so system directories such as '/lib' and\n## '/usr/lib', so that the entries from '/etc/ld.so.conf' are not\n## shadowed (otherwise, e.g. optimized ATLAS libs would not be used).\n\n## On macOS (Darwin) this used to have /usr/X11R6/lib\n## which shadows the OpenGL framework but we add nothing on macOS ....\ncase \"${host_os}\" in\n  linux*)\n    r_ld_library_defaults=\"/usr/lib64:/lib64:/usr/lib:/lib\"\n    ;;\n  solaris*)\n    r_ld_library_defaults=\"/usr/lib:/lib\"\n    ;;\n  *)\n    r_ld_library_defaults=\n    ;;\nesac\nif test -n \"${R_LD_LIBRARY_PATH_save}\"; then\n  R_LD_LIBRARY_PATH=${R_LD_LIBRARY_PATH_save}\nelse\n## We already added -L's from LDFLAGS (except on Darwin): \n## seem to be doing it again\nfor arg in ${LDFLAGS} ${FLIBS} ${BLAS_LIBS} ${LAPACK_LIBS} ${X_LIBS} \\\n           ${TCLTK_LIBS}; do\n  case \"${arg}\" in\n    -L*)\n      lib=`echo ${arg} | sed \"s/^-L//\"`\n      r_want_lib=true\n      ## don't add anything for Darwin\n      case \"${host_os}\" in darwin*) r_want_lib=false ;; esac\n      ## Do not add non-existent directories.\n      test -d \"${lib}\" || r_want_lib=false\n      if test x\"${r_want_lib}\" = xtrue; then\n        ## Canonicalize (/usr/lib/gcc-lib/i486-linux/3.3.4/../../..).\n        lib=`cd \"${lib}\" && ${GETWD}`\n        ## Do not add something twice, or default paths.\n        r_save_IFS=\"${IFS}\"; IFS=\"${PATH_SEPARATOR}\"\n        for dir in ${R_LD_LIBRARY_PATH}${IFS}${r_ld_library_defaults}; do\n          if test x\"${dir}\" = x\"${lib}\"; then\n            r_want_lib=false\n            break\n          fi\n        done\n        IFS=\"${r_save_IFS}\"\n        if test x\"${r_want_lib}\" = xtrue; then\n          R_SH_VAR_ADD(R_LD_LIBRARY_PATH, [${lib}], [${PATH_SEPARATOR}])\n        fi\n      fi\n      ;;\n  esac\ndone\nfi\n\nAC_SUBST(R_LD_LIBRARY_PATH)\n\n## Recommended packages.\nif test \"${use_recommended_packages}\" = yes; then\n  R_RECOMMENDED_PACKAGES\nfi\nAM_CONDITIONAL(USE_RECOMMENDED_PACKAGES,\n               [test \"x${use_recommended_packages}\" = xyes])\n\n# i18n support.\nAM_NLS\nif test \"${USE_NLS}\" = \"yes\"; then\n  echo\n  echo \"Configuring src/extra/intl directory\"\n  AM_GNU_GETTEXT_VERSION(0.16.1)\n  AM_GNU_GETTEXT([no-libtool], [need-ngettext], [../extra/intl])\n  if test -n \"$INTL_MACOSX_LIBS\"; then\n    XTRA_INTL_CPPFLAGS=-I/System/Library/Frameworks/CoreFoundation.framework/Headers\n  fi\n  echo \"Finished configuring src/extra/intl directory\"\n  echo\nelse\n  USE_INCLUDED_LIBINTL=no\nfi\nAC_SUBST(XTRA_INTL_CPPFLAGS)\n\nAM_CONDITIONAL(USE_NLS, [test \"x${USE_NLS}\" = xyes])\nAM_CONDITIONAL(BUILD_LIBINTL, [test \"x${USE_INCLUDED_LIBINTL}\" = xyes])\n\nR_OPENMP_SIMDRED\n\n### shell for use in scripts: we allow R_SHELL to set the script,\n### since some AIX systems have zsh as sh.\n: ${R_SHELL=${SHELL}}\nAC_SUBST(R_SHELL)\nAC_MSG_RESULT([using as R_SHELL for scripts ... ${R_SHELL}])\n\n\n### * Win32 overrides\ncase \"${host_os}\" in\n  mingw*)\n    AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n    AC_DEFINE(HAVE_ICONVLIST, 1, [Define if you have the `iconvlist' function.])\n    AC_DEFINE(HAVE_ICONV_H, 1, [Define to 1 if you have the <iconv.h> header file.])\n    AC_DEFINE(HAVE_JPEG, 1,[Define if you have the JPEG headers and libraries.])\n    AC_DEFINE(HAVE_PNG, 1, [Define if you have the PNG headers and libraries.])\n    AC_DEFINE(HAVE_POSIX_SETJMP, 1, [Define if you have POSIX.1 compatible\n                                     sigsetjmp/siglongjmp.])\n    AC_DEFINE(HAVE_TCLTK, 1, [Define if you have the Tcl/Tk headers and \n                              libraries and want Tcl/Tk support to be built.] )\n    AC_DEFINE(HAVE_TIFF, 1, [Define this if libtiff is available.])\n    AC_DEFINE(HAVE_TIMES, 1, [Define to 1 if you have the `times' function.])\n    want_R_profiling=yes\n    AC_DEFINE(R_PROFILING, 1, [Define this to enable R-level profiling.])\n    ;;\nesac\n\n### * Output.\n\nAC_CONFIG_HEADERS([src/include/config.h])\nAC_CONFIG_FILES(\n[Makeconf\n  Makefile\n  doc/Makefile\n  doc/html/Makefile\n  doc/manual/Makefile\n  etc/Makefile\n  etc/Makeconf\n  etc/Renviron\n  etc/javaconf\n  etc/ldpaths\n  m4/Makefile\n  po/Makefile \n  share/Makefile\n  src/Makefile\n  src/appl/Makefile\n  src/extra/Makefile\n  src/extra/blas/Makefile\n  src/extra/intl/Makefile\n  src/extra/tre/Makefile\n  src/extra/tzone/Makefile\n  src/extra/xdr/Makefile\n  src/include/Makefile\n  src/include/Rmath.h0\n  src/include/R_ext/Makefile\n  src/library/Recommended/Makefile\n  src/library/Makefile\n  src/library/base/DESCRIPTION\n  src/library/base/Makefile\n  src/library/compiler/DESCRIPTION\n  src/library/compiler/Makefile\n  src/library/datasets/DESCRIPTION\n  src/library/datasets/Makefile\n  src/library/graphics/DESCRIPTION\n  src/library/graphics/Makefile\n  src/library/graphics/src/Makefile\n  src/library/grDevices/DESCRIPTION\n  src/library/grDevices/Makefile\n  src/library/grDevices/src/Makefile\n  src/library/grDevices/src/cairo/Makefile\n  src/library/grid/DESCRIPTION\n  src/library/grid/Makefile\n  src/library/grid/src/Makefile\n  src/library/methods/DESCRIPTION\n  src/library/methods/Makefile\n  src/library/methods/src/Makefile\n  src/library/parallel/DESCRIPTION\n  src/library/parallel/Makefile\n  src/library/parallel/src/Makefile\n  src/library/profile/Makefile\n  src/library/stats/DESCRIPTION\n  src/library/stats/Makefile\n  src/library/stats/src/Makefile\n  src/library/stats4/DESCRIPTION\n  src/library/stats4/Makefile\n  src/library/splines/DESCRIPTION\n  src/library/splines/Makefile\n  src/library/splines/src/Makefile\n  src/library/tcltk/DESCRIPTION\n  src/library/tcltk/Makefile\n  src/library/tcltk/src/Makefile\n  src/library/tools/DESCRIPTION\n  src/library/tools/Makefile\n  src/library/tools/src/Makefile\n  src/library/translations/DESCRIPTION\n  src/library/translations/Makefile\n  src/library/utils/DESCRIPTION\n  src/library/utils/Makefile\n  src/library/utils/src/Makefile\n  src/main/Makefile\n  src/modules/Makefile\n  src/modules/X11/Makefile\n  src/modules/internet/Makefile\n  src/modules/lapack/Makefile\n  src/nmath/Makefile\n  src/nmath/standalone/Makefile\n  src/scripts/Makefile\n  src/scripts/R.sh\n  src/scripts/Rcmd\n  src/scripts/f77_f2c\n  src/scripts/javareconf\n  src/scripts/mkinstalldirs\n  src/scripts/pager\n  src/scripts/rtags\n  src/unix/Makefile\n  tests/Makefile\n  tests/Embedding/Makefile\n  tests/Examples/Makefile\n  tools/Makefile\n])\n\nAC_CONFIG_COMMANDS([stamp-h],\n[test -f src/include/stamp-h || echo timestamp > src/include/stamp-h])\n\n### now reset flags\nCPPFLAGS=${CPPFLAGS_KEEP}\nCFLAGS=${CFLAGS_KEEP}\nFFLAGS=${FFLAGS_KEEP}\nCXXFLAGS=${CXXFLAGS_KEEP}\n\nAC_OUTPUT\n\n## Summarize configure results.\n## <NOTE>\n## Doing this via AC_CONFIG_COMMANDS would require explicitly passing all\n## configure variables to config.status.\n## </NOTE>\nr_c_compiler=\"${CC} ${R_XTRA_CFLAGS} ${CFLAGS}\"\nr_cxx_compiler=\"${CXX} ${CXXSTD} ${R_XTRA_CXXFLAGS} ${CXXFLAGS}\"\nr_cxx98_compiler=\"${CXX98} ${CXX98STD} ${CXX98FLAGS}\"\nr_cxx11_compiler=\"${CXX11} ${CXX11STD} ${CXX11FLAGS}\"\nr_cxx14_compiler=\"${CXX14} ${CXX14STD} ${CXX14FLAGS}\"\nr_cxx17_compiler=\"${CXX17} ${CXX17STD} ${CXX17FLAGS}\"\nr_f77_compiler=\"${F77} ${R_XTRA_FFLAGS} ${FFLAGS}\"\nr_f95_compiler=\"${FC} ${FCFLAGS}\"\nr_objc_compiler=\"${OBJC} ${OBJCFLAGS}\"\nr_interfaces=\n## we will not have tested for X11 under some configure options, so\n## need to test protect the test.\nfor item in X11 aqua tcltk; do\n  if eval \"test x\\${use_${item}} = xyes\"; then\n    R_SH_VAR_ADD(r_interfaces, [${item}], [, ])\n  fi\ndone\nr_external_libs=\nif test \"${use_readline}\" = yes; then\n  r_external_libs=readline\nfi\nif test \"${acx_blas_ok}\" = \"yes\"; then\n  ## Try to figure out which BLAS was used.\n  case \"${BLAS_LIBS0}\" in\n    *-latlas*) r_blas=ATLAS ;;\n    *-lgoto*) r_blas=Goto ;;\n    *-lopenblas*) r_blas=OpenBLAS ;;\n    *-lacml*) r_blas=ACML ;;\n    *-lmkl*) r_blas=MKL ;;\n    *-lsgemm*) r_blas=PhiPack ;;\n    *sunperf*) r_blas=SunPerf ;;\n    *-lessl*)  r_blas=ESSL ;;\n    *Accelerate*)  r_blas=Accelerate ;;\n    \"\")        r_blas=none ;;\n    *)         r_blas=generic ;;\n  esac\n  R_SH_VAR_ADD(r_external_libs, [BLAS(${r_blas})], [, ])\nfi\nif test \"${acx_lapack_ok}\" = \"yes\"; then\n  ## Try to figure out which LAPACK was used.\n  case \"${LAPACK_LIBS}\" in\n    *sunperf*) r_lapack=SunPerf ;;\n    \"\")        r_lapack=\"in blas\" ;;\n    *)         r_lapack=generic ;;\n  esac\n  R_SH_VAR_ADD(r_external_libs, [LAPACK(${r_lapack})], [, ])\nfi\nif test \"${have_tre}\" = yes; then\n  R_SH_VAR_ADD(r_external_libs, [tre], [, ])\nfi\nif test \"x$ac_cv_header_curl_curl_h\" = xyes; then\n  R_SH_VAR_ADD(r_external_libs, [curl], [, ])\nfi\n\nr_capabilities=\nr_no_capabilities=\nif test \"${have_png}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [PNG], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [PNG], [, ])\nfi\nif test \"${have_jpeg}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [JPEG], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [JPEG], [, ])\nfi\nif test \"${have_tiff}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [TIFF], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [TIFF], [, ])\nfi\nif test \"${USE_NLS}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [NLS], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [NLS], [, ])\nfi\nif test \"${r_cv_cairo_works}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [cairo], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [cairo], [, ])\nfi\nif test \"${use_ICU}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [ICU], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [ICU], [, ])\nfi\n\nr_options=\nr_no_options=\nif test \"${want_R_framework}\" = yes; then\n  R_SH_VAR_ADD(r_options, [framework], [, ])\nelif test \"${want_R_shlib}\" = yes; then\n  R_SH_VAR_ADD(r_options, [shared R library], [, ])\nelif test \"${want_R_static}\" = yes; then\n  R_SH_VAR_ADD(r_options, [static R library], [, ])\nfi\nif test \"${use_blas_shlib}\" = yes; then\n  R_SH_VAR_ADD(r_options, [shared BLAS], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [shared BLAS], [, ])\nfi\nif test \"${want_R_profiling}\" = yes; then\n  R_SH_VAR_ADD(r_options, [R profiling], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [R profiling], [, ])\nfi\nif test \"${want_memory_profiling}\" = yes; then\n  R_SH_VAR_ADD(r_options, [memory profiling], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [memory profiling], [, ])\nfi\nif test \"${use_maintainer_mode}\" = yes; then\n  R_SH_VAR_ADD(r_options, [maintainer mode], [, ])\nfi\nif test \"${use_strict_barrier}\" = yes; then\n  R_SH_VAR_ADD(r_options, [strict barrier], [, ])\nfi\nif test \"${want_prebuilt_html}\" = yes; then\n  R_SH_VAR_ADD(r_options, [static HTML], [, ])\nfi\n\nAC_MSG_RESULT(\n[\nR is now configured for ${host}\n\n  Source directory:          ${srcdir}\n  Installation directory:    ${prefix}\n\n  C compiler:                ${r_c_compiler}\n  Fortran 77 compiler:       ${r_f77_compiler}\n\n  Default C++ compiler:      ${r_cxx_compiler}\n  C++98 compiler:            ${r_cxx98_compiler}\n  C++11 compiler:            ${r_cxx11_compiler}\n  C++14 compiler:            ${r_cxx14_compiler}\n  C++17 compiler:            ${r_cxx17_compiler}\n  Fortran 90/95 compiler:    ${r_f95_compiler}\n  Obj-C compiler:\t     ${r_objc_compiler}\n\n  Interfaces supported:      ${r_interfaces}\n  External libraries:        ${r_external_libs}\n  Additional capabilities:   ${r_capabilities}\n  Options enabled:           ${r_options}\n\n  Capabilities skipped:      ${r_no_capabilities}\n  Options not enabled:       ${r_no_options}\n\n  Recommended packages:      ${use_recommended_packages} \n])\nif test -n \"${warn_f77_cc_double_complex}\"; then\n  AC_MSG_WARN([${warn_f77_cc_double_complex}])\nfi\nif test -n \"${warn_xcompile_sizeof_long}\"; then\n  AC_MSG_WARN([${warn_xcompile_sizeof_long}])\nfi\nif test -n \"${warn_type_socklen}\"; then\n  AC_MSG_WARN([${warn_type_socklen}])\nfi\nif test -n \"${warn_cxxpicflags}\"; then\n  AC_MSG_WARN([${warn_cxxpicflags}])\nfi\nif test -n \"${warn_shlib_cxxldflags}\"; then\n  AC_MSG_WARN([${warn_shlib_cxxldflags}])\nfi\nif test -n \"${warn_cxxpicflags}\"; then\n  AC_MSG_WARN([${warn_cxxpicflags}])\nfi\nif test -n \"${warn_fcpicflags}\"; then\n  AC_MSG_WARN([${warn_fcpicflags}])\nfi\nif test -n \"${warn_tcltk_version}\"; then\n  AC_MSG_WARN([${warn_tcltk_version}])\nfi\nif test -n \"${warn_pcre_version}\"; then\n  AC_MSG_WARN([${warn_pcre_version}])\nfi\nif test -n \"${warn_info}\"; then\n  AC_MSG_WARN([${warn_info}])\nfi\nif test -n \"${warn_pdf1}\"; then\n  AC_MSG_WARN([${warn_pdf1}])\nfi\nif test -n \"${warn_pdf2}\"; then\n  AC_MSG_WARN([${warn_pdf2}])\nfi\nif test -n \"${warn_pdf3}\"; then\n  AC_MSG_WARN([${warn_pdf3}])\nfi\nif test -n \"${warn_pager}\"; then\n  AC_MSG_WARN([${warn_pager}])\nfi\nif test -n \"${warn_browser}\"; then\n  AC_MSG_WARN([${warn_browser}])\nfi\nif test -n \"${warn_pdfviewer}\"; then\n  AC_MSG_WARN([${warn_pdfviewer}])\nfi\n\n### Local variables: ***\n### mode: outline-minor ***\n### outline-regexp: \"### [*]+\" ***\n### End: ***\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/main/platform.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995, 1996  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1998--2017 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n\n/* Notes on so-called 'Large File Support'\n\n   The 'stat' structure returns a file size as 'off_t'.  On some\n   32-bit systems this will fail if called on a file > 2GB.  On\n   systems with LFS selected (see the notes in connections.c) the call\n   is re-mapped to *stat64, which uses off64_t for the file size.\n\n   file.info() returns file sizes as an R double.\n\n   On Windows we need to remap for ourselves.  There are various\n   versions of the 'stat' structure (some with 64-bit times and not\n   available in the original MSVCRT.dll): we use _stati64 that simply\n   replaces off_t by __int64_t.\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Internal.h>\n#include <Rinterface.h>\n#include <Fileio.h>\n#include <ctype.h>\t\t\t/* toupper */\n#include <limits.h>\n#include <string.h>\n#include <stdlib.h>\t\t\t/* for realpath */\n#include <time.h>\t\t\t/* for ctime */\n\n# include <errno.h>\n\n/* Machine Constants */\n\nstatic void\nmachar(int *ibeta, int *it, int *irnd, int *ngrd, int *machep, int *negep,\n       int *iexp, int *minexp, int *maxexp, double *eps,\n       double *epsneg, double *xmin, double *xmax);\n\nstatic void Init_R_Machine(SEXP rho)\n{\n    SEXP ans, nms;\n\n    machar(&R_AccuracyInfo.ibeta,\n\t   &R_AccuracyInfo.it,\n\t   &R_AccuracyInfo.irnd,\n\t   &R_AccuracyInfo.ngrd,\n\t   &R_AccuracyInfo.machep,\n\t   &R_AccuracyInfo.negep,\n\t   &R_AccuracyInfo.iexp,\n\t   &R_AccuracyInfo.minexp,\n\t   &R_AccuracyInfo.maxexp,\n\t   &R_AccuracyInfo.eps,\n\t   &R_AccuracyInfo.epsneg,\n\t   &R_AccuracyInfo.xmin,\n\t   &R_AccuracyInfo.xmax);\n\n    R_dec_min_exponent = (int) floor(log10(R_AccuracyInfo.xmin)); /* smallest decimal exponent */\n    PROTECT(ans = allocVector(VECSXP, 18));\n    PROTECT(nms = allocVector(STRSXP, 18));\n    SET_STRING_ELT(nms, 0, mkChar(\"double.eps\"));\n    SET_VECTOR_ELT(ans, 0, ScalarReal(R_AccuracyInfo.eps));\n\n    SET_STRING_ELT(nms, 1, mkChar(\"double.neg.eps\"));\n    SET_VECTOR_ELT(ans, 1, ScalarReal(R_AccuracyInfo.epsneg));\n\n    SET_STRING_ELT(nms, 2, mkChar(\"double.xmin\"));\n    SET_VECTOR_ELT(ans, 2, ScalarReal(R_AccuracyInfo.xmin));\n\n    SET_STRING_ELT(nms, 3, mkChar(\"double.xmax\"));\n    SET_VECTOR_ELT(ans, 3, ScalarReal(R_AccuracyInfo.xmax));\n\n    SET_STRING_ELT(nms, 4, mkChar(\"double.base\"));\n    SET_VECTOR_ELT(ans, 4, ScalarInteger(R_AccuracyInfo.ibeta));\n\n    SET_STRING_ELT(nms, 5, mkChar(\"double.digits\"));\n    SET_VECTOR_ELT(ans, 5, ScalarInteger(R_AccuracyInfo.it));\n\n    SET_STRING_ELT(nms, 6, mkChar(\"double.rounding\"));\n    SET_VECTOR_ELT(ans, 6, ScalarInteger(R_AccuracyInfo.irnd));\n\n    SET_STRING_ELT(nms, 7, mkChar(\"double.guard\"));\n    SET_VECTOR_ELT(ans, 7, ScalarInteger(R_AccuracyInfo.ngrd));\n\n    SET_STRING_ELT(nms, 8, mkChar(\"double.ulp.digits\"));\n    SET_VECTOR_ELT(ans, 8, ScalarInteger(R_AccuracyInfo.machep));\n\n    SET_STRING_ELT(nms, 9, mkChar(\"double.neg.ulp.digits\"));\n    SET_VECTOR_ELT(ans, 9, ScalarInteger(R_AccuracyInfo.negep));\n\n    SET_STRING_ELT(nms, 10, mkChar(\"double.exponent\"));\n    SET_VECTOR_ELT(ans, 10, ScalarInteger(R_AccuracyInfo.iexp));\n\n    SET_STRING_ELT(nms, 11, mkChar(\"double.min.exp\"));\n    SET_VECTOR_ELT(ans, 11, ScalarInteger(R_AccuracyInfo.minexp));\n\n    SET_STRING_ELT(nms, 12, mkChar(\"double.max.exp\"));\n    SET_VECTOR_ELT(ans, 12, ScalarInteger(R_AccuracyInfo.maxexp));\n\n    SET_STRING_ELT(nms, 13, mkChar(\"integer.max\"));\n    SET_VECTOR_ELT(ans, 13, ScalarInteger(INT_MAX));\n\n    SET_STRING_ELT(nms, 14, mkChar(\"sizeof.long\"));\n    SET_VECTOR_ELT(ans, 14, ScalarInteger(SIZEOF_LONG));\n\n    SET_STRING_ELT(nms, 15, mkChar(\"sizeof.longlong\"));\n    SET_VECTOR_ELT(ans, 15, ScalarInteger(SIZEOF_LONG_LONG));\n\n    SET_STRING_ELT(nms, 16, mkChar(\"sizeof.longdouble\"));\n#ifdef HAVE_LONG_DOUBLE\n    SET_VECTOR_ELT(ans, 16, ScalarInteger(SIZEOF_LONG_DOUBLE));\n#else\n    SET_VECTOR_ELT(ans, 16, ScalarInteger(0));\n#endif\n\n    SET_STRING_ELT(nms, 17, mkChar(\"sizeof.pointer\"));\n    SET_VECTOR_ELT(ans, 17, ScalarInteger(sizeof(SEXP)));\n    setAttrib(ans, R_NamesSymbol, nms);\n    defineVar(install(\".Machine\"), ans, rho);\n    UNPROTECT(2);\n}\n\n\n/*  Platform\n *\n *  Return various platform dependent strings.  This is similar to\n *  \"Machine\", but for strings rather than numerical values.  These\n *  two functions should probably be amalgamated.\n */\nstatic const char  * const R_OSType = OSTYPE;\nstatic const char  * const R_FileSep = FILESEP;\n\nstatic void Init_R_Platform(SEXP rho)\n{\n    SEXP value, names;\n\n    PROTECT(value = allocVector(VECSXP, 8));\n    PROTECT(names = allocVector(STRSXP, 8));\n    SET_STRING_ELT(names, 0, mkChar(\"OS.type\"));\n    SET_STRING_ELT(names, 1, mkChar(\"file.sep\"));\n    SET_STRING_ELT(names, 2, mkChar(\"dynlib.ext\"));\n    SET_STRING_ELT(names, 3, mkChar(\"GUI\"));\n    SET_STRING_ELT(names, 4, mkChar(\"endian\"));\n    SET_STRING_ELT(names, 5, mkChar(\"pkgType\"));\n    SET_STRING_ELT(names, 6, mkChar(\"path.sep\"));\n    SET_STRING_ELT(names, 7, mkChar(\"r_arch\"));\n    SET_VECTOR_ELT(value, 0, mkString(R_OSType));\n    SET_VECTOR_ELT(value, 1, mkString(R_FileSep));\n    SET_VECTOR_ELT(value, 2, mkString(SHLIB_EXT));\n    SET_VECTOR_ELT(value, 3, mkString(R_GUIType));\n#ifdef WORDS_BIGENDIAN\n    SET_VECTOR_ELT(value, 4, mkString(\"big\"));\n#else\n    SET_VECTOR_ELT(value, 4, mkString(\"little\"));\n#endif\n/* pkgType should be \"mac.binary\" for CRAN build *only*, not for all\n   AQUA builds. Also we want to be able to use \"mac.binary.mavericks\",\n   \"mac.binary.el-capitan\" and similar. */\n#ifdef PLATFORM_PKGTYPE\n    SET_VECTOR_ELT(value, 5, mkString(PLATFORM_PKGTYPE));\n#else /* unix default */\n    SET_VECTOR_ELT(value, 5, mkString(\"source\"));\n#endif\n#ifdef Win32\n    SET_VECTOR_ELT(value, 6, mkString(\";\"));\n#else /* not Win32 */\n    SET_VECTOR_ELT(value, 6, mkString(\":\"));\n#endif\n#ifdef R_ARCH\n    SET_VECTOR_ELT(value, 7, mkString(R_ARCH));\n#else\n    SET_VECTOR_ELT(value, 7, mkString(\"\"));\n#endif\n    setAttrib(value, R_NamesSymbol, names);\n    defineVar(install(\".Platform\"), value, rho);\n    UNPROTECT(2);\n}\n\nvoid attribute_hidden Init_R_Variables(SEXP rho)\n{\n    Init_R_Machine(rho);\n    Init_R_Platform(rho);\n}\n\n#ifdef HAVE_LANGINFO_CODESET\n/* case-insensitive string comparison (needed for locale check) */\nint static R_strieql(const char *a, const char *b)\n{\n    while (*a && *b && toupper(*a) == toupper(*b)) { a++; b++; }\n    return (*a == 0 && *b == 0);\n}\n#endif\n\n#include <locale.h>\n#ifdef HAVE_LANGINFO_CODESET\n# include <langinfo.h>\n#endif\n\nstatic char native_enc[R_CODESET_MAX + 1];\nconst char attribute_hidden *R_nativeEncoding(void)\n{\n    return native_enc;\n}\n\n/* retrieves information about the current locale and\n   sets the corresponding variables (known_to_be_utf8,\n   known_to_be_latin1, utf8locale, latin1locale and mbcslocale) */\nvoid attribute_hidden R_check_locale(void)\n{\n    known_to_be_utf8 = utf8locale = FALSE;\n    known_to_be_latin1 = latin1locale = FALSE;\n    mbcslocale = FALSE;\n    strcpy(native_enc, \"ASCII\");\n#ifdef HAVE_LANGINFO_CODESET\n    /* not on Windows */\n    {\n\tchar  *p = nl_langinfo(CODESET);\n\t/* more relaxed due to Darwin: CODESET is case-insensitive and\n\t   latin1 is ISO8859-1 */\n\tif (R_strieql(p, \"UTF-8\")) known_to_be_utf8 = utf8locale = TRUE;\n\tif (streql(p, \"ISO-8859-1\")) known_to_be_latin1 = latin1locale = TRUE;\n\tif (R_strieql(p, \"ISO8859-1\")) known_to_be_latin1 = latin1locale = TRUE;\n# if __APPLE__\n\t/* On Darwin 'regular' locales such as 'en_US' are UTF-8 (hence\n\t   MB_CUR_MAX == 6), but CODESET is \"\" */\n\tif (*p == 0 && MB_CUR_MAX == 6)\n\t    known_to_be_utf8 = utf8locale = TRUE;\n# endif\n\tif (utf8locale)\n\t    strcpy(native_enc, \"UTF-8\");\n\telse if (latin1locale)\n\t    strcpy(native_enc, \"ISO-8859-1\");\n\telse {\n\t    strncpy(native_enc, p, R_CODESET_MAX);\n\t    native_enc[R_CODESET_MAX] = 0;\n\t}\n    }\n#endif\n    mbcslocale = MB_CUR_MAX > 1;\n#ifdef Win32\n    {\n\tchar *ctype = setlocale(LC_CTYPE, NULL), *p;\n\tp = strrchr(ctype, '.');\n\tif (p && isdigit(p[1])) localeCP = atoi(p+1); else localeCP = 0;\n\t/* Not 100% correct, but CP1252 is a superset */\n\tknown_to_be_latin1 = latin1locale = (localeCP == 1252);\n\tif (localeCP) {\n\t    /* CP1252 when latin1locale is true */\n\t    snprintf(native_enc, R_CODESET_MAX, \"CP%d\", localeCP);\n\t    native_enc[R_CODESET_MAX] = 0;\n\t}\n    }\n#endif\n#if defined(SUPPORT_UTF8_WIN32) /* never at present */\n    utf8locale = mbcslocale = TRUE;\n    strcpy(native_enc, \"UTF-8\");\n#endif\n}\n\n/*  date\n *\n *  Return the current date in a standard format.  This uses standard\n *  POSIX calls which should be available on each platform.  We should\n *  perhaps check this in the configure script.\n */\n/* BDR 2000/7/20.\n *  time and ctime are in fact ANSI C calls, so we don't check them.\n */\nstatic char *R_Date(void)\n{\n    time_t t;\n    static char s[26];\t\t/* own space */\n\n    time(&t);\n    strcpy(s, ctime(&t));\n    s[24] = '\\0';\t\t/* overwriting the final \\n */\n    return s;\n}\n\nSEXP attribute_hidden do_date(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n    return mkString(R_Date());\n}\n\n/*  file.show\n *\n *  Display file(s) so that a user can view it.  The function calls\n *  \"R_ShowFiles\" which is a platform-dependent hook that arranges\n *  for the file(s) to be displayed.\n */\n\n// .Internal so manages R_alloc stack used by acopy_string\nSEXP attribute_hidden do_fileshow(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, tl, hd, pg;\n    const char **f, **h, *t, *pager = NULL /* -Wall */;\n    Rboolean dl;\n    int i, n;\n\n    checkArity(op, args);\n    fn = CAR(args); args = CDR(args);\n    hd = CAR(args); args = CDR(args);\n    tl = CAR(args); args = CDR(args);\n    dl = (Rboolean) asLogical(CAR(args)); args = CDR(args);\n    pg = CAR(args);\n    n = 0;\t\t\t/* -Wall */\n    if (!isString(fn) || (n = LENGTH(fn)) < 1)\n\terror(_(\"invalid filename specification\"));\n    if (!isString(hd) || LENGTH(hd) != n)\n\terror(_(\"invalid '%s' argument\"), \"headers\");\n    if (!isString(tl))\n\terror(_(\"invalid '%s' argument\"), \"title\");\n    if (!isString(pg))\n\terror(_(\"invalid '%s' argument\"), \"pager\");\n    f = (const char**) R_alloc(n, sizeof(char*));\n    h = (const char**) R_alloc(n, sizeof(char*));\n    for (i = 0; i < n; i++) {\n\tSEXP el = STRING_ELT(fn, i);\n\tif (!isNull(el) && el != NA_STRING)\n#ifdef Win32\n\t    f[i] = acopy_string(reEnc(CHAR(el), getCharCE(el), CE_UTF8, 1));\n#else\n\t    f[i] = acopy_string(translateChar(el));\n#endif\n\telse\n\t    error(_(\"invalid filename specification\"));\n\tif (STRING_ELT(hd, i) != NA_STRING)\n\t    h[i] = acopy_string(translateChar(STRING_ELT(hd, i)));\n\telse\n\t    error(_(\"invalid '%s' argument\"), \"headers\");\n    }\n    if (isValidStringF(tl))\n\tt = acopy_string(translateChar(STRING_ELT(tl, 0)));\n    else\n\tt = \"\";\n    if (isValidStringF(pg)) {\n\tSEXP pg0 = STRING_ELT(pg, 0);\n\tif (pg0 != NA_STRING)\n\t    pager = acopy_string(CHAR(pg0));\n\telse\n\t    error(_(\"invalid '%s' argument\"), \"pager\");\n    } else\n\tpager = \"\";\n    R_ShowFiles(n, f, h, t, dl, pager);\n    return R_NilValue;\n}\n\n/*  file.append\n *\n *  Given two vectors of file names as arguments and arranges for\n *  the second set of files to be appended to the first.\n */\n\n#if defined(BUFSIZ) && (BUFSIZ > 512)\n/* OS's buffer size in stdio.h, probably.\n   Windows has 512, Solaris 1024, glibc 8192\n */\n# define APPENDBUFSIZE BUFSIZ\n#else\n# define APPENDBUFSIZE 512\n#endif\n\nstatic int R_AppendFile(SEXP file1, SEXP file2)\n{\n    FILE *fp1, *fp2;\n    char buf[APPENDBUFSIZE];\n    size_t nchar;\n    int status = 0;\n    if ((fp1 = RC_fopen(file1, \"ab\", TRUE)) == NULL) return 0;\n    if ((fp2 = RC_fopen(file2, \"rb\", TRUE)) == NULL) {\n\tfclose(fp1);\n\treturn 0;\n    }\n    while ((nchar = fread(buf, 1, APPENDBUFSIZE, fp2)) == APPENDBUFSIZE)\n\tif (fwrite(buf, 1, APPENDBUFSIZE, fp1) != APPENDBUFSIZE) goto append_error;\n    if (fwrite(buf, 1, nchar, fp1) != nchar) goto append_error;\n    status = 1;\n append_error:\n    if (status == 0) warning(_(\"write error during file append\"));\n    fclose(fp1);\n    fclose(fp2);\n    return status;\n}\n\nSEXP attribute_hidden do_fileappend(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP f1, f2, ans;\n    int n, n1, n2;\n\n    checkArity(op, args);\n    f1 = CAR(args);\n    f2 = CADR(args);\n    if (!isString(f1))\n\terror(_(\"invalid '%s' argument\"), \"file1\");\n    if (!isString(f2))\n\terror(_(\"invalid '%s' argument\"), \"file2\");\n    n1 = LENGTH(f1); n2 = LENGTH(f2);\n    if (n1 < 1)\n\terror(_(\"nothing to append to\"));\n    if (n2 < 1)\n\treturn allocVector(LGLSXP, 0);\n    n = (n1 > n2) ? n1 : n2;\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (int i = 0; i < n; i++) LOGICAL(ans)[i] = 0;  /* all FALSE */\n    if (n1 == 1) { /* common case */\n\tFILE *fp1, *fp2;\n\tchar buf[APPENDBUFSIZE];\n\tint status = 0;\n\tsize_t nchar;\n\tif (STRING_ELT(f1, 0) == NA_STRING ||\n\t    !(fp1 = RC_fopen(STRING_ELT(f1, 0), \"ab\", TRUE)))\n\t   goto done;\n\tfor (int i = 0; i < n; i++) {\n\t    status = 0;\n\t    if (STRING_ELT(f2, i) == NA_STRING ||\n\t       !(fp2 = RC_fopen(STRING_ELT(f2, i), \"rb\", TRUE))) continue;\n\t    while ((nchar = fread(buf, 1, APPENDBUFSIZE, fp2)) == APPENDBUFSIZE)\n\t\tif (fwrite(buf, 1, APPENDBUFSIZE, fp1) != APPENDBUFSIZE)\n\t\t    goto append_error;\n\t    if (fwrite(buf, 1, nchar, fp1) != nchar) goto append_error;\n\t    status = 1;\n\tappend_error:\n\t    if (status == 0)\n\t\twarning(_(\"write error during file append\"));\n\t    LOGICAL(ans)[i] = status;\n\t    fclose(fp2);\n\t}\n\tfclose(fp1);\n    } else {\n\tfor (int i = 0; i < n; i++) {\n\t    if (STRING_ELT(f1, i%n1) == R_NilValue ||\n\t\tSTRING_ELT(f2, i%n2) == R_NilValue)\n\t\tLOGICAL(ans)[i] = 0;\n\t    else\n\t\tLOGICAL(ans)[i] =\n\t\t    R_AppendFile(STRING_ELT(f1, i%n1), STRING_ELT(f2, i%n2));\n\t}\n    }\ndone:\n    UNPROTECT(1);\n    return ans;\n}\n\nSEXP attribute_hidden do_filecreate(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, ans;\n    FILE *fp;\n    int i, n, show;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    if (!isString(fn))\n\terror(_(\"invalid filename argument\"));\n    show = asLogical(CADR(args));\n    if (show == NA_LOGICAL) show = 0;\n    n = LENGTH(fn);\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) {\n\tLOGICAL(ans)[i] = 0;\n\tif (STRING_ELT(fn, i) == NA_STRING) continue;\n\tif ((fp = RC_fopen(STRING_ELT(fn, i), \"w\", TRUE)) != NULL) {\n\t    LOGICAL(ans)[i] = 1;\n\t    fclose(fp);\n\t} else if (show) {\n\t    warning(_(\"cannot create file '%s', reason '%s'\"),\n\t\t    translateChar(STRING_ELT(fn, i)), strerror(errno));\n\t}\n    }\n    UNPROTECT(1);\n    return ans;\n}\n\nSEXP attribute_hidden do_fileremove(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP f, ans;\n    int i, n;\n    checkArity(op, args);\n    f = CAR(args);\n    if (!isString(f))\n\terror(_(\"invalid first filename\"));\n    n = LENGTH(f);\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) {\n\tif (STRING_ELT(f, i) != NA_STRING) {\n\t    LOGICAL(ans)[i] =\n#ifdef Win32\n\t\t(_wremove(filenameToWchar(STRING_ELT(f, i), TRUE)) == 0);\n#else\n\t\t(remove(R_ExpandFileName(translateChar(STRING_ELT(f, i)))) == 0);\n#endif\n\t    if(!LOGICAL(ans)[i])\n\t\twarning(_(\"cannot remove file '%s', reason '%s'\"),\n\t\t\ttranslateChar(STRING_ELT(f, i)), strerror(errno));\n\t} else LOGICAL(ans)[i] = FALSE;\n    }\n    UNPROTECT(1);\n    return ans;\n}\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h> /* for symlink, getpid */\n#endif\n\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n\n#ifdef Win32\n/* Mingw-w64 defines this to be 0x0502 */\n#ifndef _WIN32_WINNT\n# define _WIN32_WINNT 0x0500 /* for CreateHardLink */\n#endif\n#include <windows.h>\ntypedef BOOLEAN (WINAPI *PCSL)(LPWSTR, LPWSTR, DWORD);\nstatic PCSL pCSL = NULL;\nconst char *formatError(DWORD res);  /* extra.c */\n/* Windows does not have link(), but it does have CreateHardLink() on NTFS */\n#undef HAVE_LINK\n#define HAVE_LINK 1\n/* Windows does not have symlink(), but >= Vista does have\n   CreateSymbolicLink() on NTFS */\n#undef HAVE_SYMLINK\n#define HAVE_SYMLINK 1\n#endif\n\n/* the Win32 stuff here is not ready for release:\n\n   (i) It needs Windows >= Vista\n   (ii) It matters whether 'from' is a file or a dir, and we could only\n   know if it exists already.\n   (iii) This needs specific privileges which in general only Adminstrators\n   have, and which many people report granting in the Policy Editor\n   fails to work.\n*/\nSEXP attribute_hidden do_filesymlink(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP f1, f2;\n    int n, n1, n2;\n#ifdef HAVE_SYMLINK\n    SEXP ans;\n    int i;\n#endif\n    checkArity(op, args);\n    f1 = CAR(args);\n    f2 = CADR(args);\n    if (!isString(f1))\n\terror(_(\"invalid first filename\"));\n    if (!isString(f2))\n\terror(_(\"invalid second filename\"));\n    n1 = LENGTH(f1); n2 = LENGTH(f2);\n    if (n1 < 1)\n\terror(_(\"nothing to link\"));\n    if (n2 < 1)\n\treturn allocVector(LGLSXP, 0);\n    n = (n1 > n2) ? n1 : n2;\n\n#ifdef Win32\n    // Vista, Server 2008 and later\n    pCSL = (PCSL) GetProcAddress(GetModuleHandle(TEXT(\"kernel32.dll\")),\n\t\t\t\t \"CreateSymbolicLinkW\");\n    if(!pCSL)\n\terror(_(\"symbolic links are not supported on this version of Windows\"));\n#endif\n\n#ifdef HAVE_SYMLINK\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) {\n\tif (STRING_ELT(f1, i%n1) == NA_STRING ||\n\t    STRING_ELT(f2, i%n2) == NA_STRING)\n\t    LOGICAL(ans)[i] = 0;\n\telse {\n#ifdef Win32\n\t    wchar_t from[PATH_MAX+1], *to, *p;\n\t    struct _stati64 sb;\n\t    from[PATH_MAX] = L'\\0';\n\t    p = filenameToWchar(STRING_ELT(f1, i%n1), TRUE);\n\t    if (wcslen(p) >= PATH_MAX)\n\t    \terror(_(\"'%s' path too long\"), \"from\");\n\t    wcsncpy(from, p, PATH_MAX);\n\t    /* This Windows system call does not accept slashes */\n\t    for (wchar_t *p = from; *p; p++) if (*p == L'/') *p = L'\\\\';\n\t    to = filenameToWchar(STRING_ELT(f2, i%n2), TRUE);\n\t    _wstati64(from, &sb);\n\t    int isDir = (sb.st_mode & S_IFDIR) > 0;\n\t    LOGICAL(ans)[i] = pCSL(to, from, isDir) != 0;\n\t    if(!LOGICAL(ans)[i])\n\t\twarning(_(\"cannot symlink '%ls' to '%ls', reason '%s'\"),\n\t\t\tfrom, to, formatError(GetLastError()));\n#else\n\t    char from[PATH_MAX], to[PATH_MAX];\n\t    const char *p;\n\t    p = R_ExpandFileName(translateChar(STRING_ELT(f1, i%n1)));\n\t    if (strlen(p) >= PATH_MAX - 1) {\n\t\tLOGICAL(ans)[i] = 0;\n\t\tcontinue;\n\t    }\n\t    strcpy(from, p);\n\t    p = R_ExpandFileName(translateChar(STRING_ELT(f2, i%n2)));\n\t    if (strlen(p) >= PATH_MAX - 1) {\n\t\tLOGICAL(ans)[i] = 0;\n\t\tcontinue;\n\t    }\n\t    strcpy(to, p);\n\t    /* Rprintf(\"linking %s to %s\\n\", from, to); */\n\t    LOGICAL(ans)[i] = symlink(from, to) == 0;\n\t    if(!LOGICAL(ans)[i])\n\t\twarning(_(\"cannot symlink '%s' to '%s', reason '%s'\"),\n\t\t\tfrom, to, strerror(errno));\n#endif\n\t}\n    }\n    UNPROTECT(1);\n    return ans;\n#else\n    warning(_(\"symbolic links are not supported on this platform\"));\n    return allocVector(LGLSXP, n);\n#endif\n}\n\n\nSEXP attribute_hidden do_filelink(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP f1, f2;\n    int n, n1, n2;\n#ifdef HAVE_LINK\n    SEXP ans;\n    int i;\n#endif\n    checkArity(op, args);\n    f1 = CAR(args);\n    f2 = CADR(args);\n    if (!isString(f1))\n\terror(_(\"invalid first filename\"));\n    if (!isString(f2))\n\terror(_(\"invalid second filename\"));\n    n1 = LENGTH(f1); n2 = LENGTH(f2);\n    if (n1 < 1)\n\terror(_(\"nothing to link\"));\n    if (n2 < 1)\n\treturn allocVector(LGLSXP, 0);\n    n = (n1 > n2) ? n1 : n2;\n#ifdef HAVE_LINK\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) {\n\tif (STRING_ELT(f1, i%n1) == NA_STRING ||\n\t    STRING_ELT(f2, i%n2) == NA_STRING)\n\t    LOGICAL(ans)[i] = 0;\n\telse {\n#ifdef Win32\n\t    wchar_t from[PATH_MAX+1], *to, *p;\n\t    p = filenameToWchar(STRING_ELT(f1, i%n1), TRUE);\n\t    if (wcslen(p) >= PATH_MAX)\n\t    \terror(_(\"'%s' path too long\"), \"from\");\n\t    wcscpy(from, p);\n\t    to = filenameToWchar(STRING_ELT(f2, i%n2), TRUE);\n\t    LOGICAL(ans)[i] = CreateHardLinkW(to, from, NULL) != 0;\n\t    if(!LOGICAL(ans)[i]) {\n\t\twarning(_(\"cannot link '%ls' to '%ls', reason '%s'\"),\n\t\t\tfrom, to, formatError(GetLastError()));\n\t    }\n#else\n\t    char from[PATH_MAX], to[PATH_MAX];\n\t    const char *p;\n\t    p = R_ExpandFileName(translateChar(STRING_ELT(f1, i%n1)));\n\t    if (strlen(p) >= PATH_MAX - 1) {\n\t\tLOGICAL(ans)[i] = 0;\n\t\tcontinue;\n\t    }\n\t    strcpy(from, p);\n\t    p = R_ExpandFileName(translateChar(STRING_ELT(f2, i%n2)));\n\t    if (strlen(p) >= PATH_MAX - 1) {\n\t\tLOGICAL(ans)[i] = 0;\n\t\tcontinue;\n\t    }\n\t    strcpy(to, p);\n\t    LOGICAL(ans)[i] = link(from, to) == 0;\n\t    if(!LOGICAL(ans)[i]) {\n\t\twarning(_(\"cannot link '%s' to '%s', reason '%s'\"),\n\t\t\tfrom, to, strerror(errno));\n\t    }\n#endif\n\t}\n    }\n    UNPROTECT(1);\n    return ans;\n#else\n    warning(_(\"(hard) links are not supported on this platform\"));\n    return allocVector(LGLSXP, n);\n#endif\n}\n\n#ifdef Win32\nint Rwin_rename(char *from, char *to);  /* in src/gnuwin32/extra.c */\nint Rwin_wrename(const wchar_t *from, const wchar_t *to);\n#endif\n\nSEXP attribute_hidden do_filerename(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP f1, f2, ans;\n    int i, n1, n2;\n#ifdef Win32\n    wchar_t from[PATH_MAX], to[PATH_MAX];\n    const wchar_t *w;\n#else\n    char from[PATH_MAX], to[PATH_MAX];\n    const char *p;\n    int res;\n#endif\n\n    checkArity(op, args);\n    f1 = CAR(args);\n    f2 = CADR(args);\n    if (!isString(f1))\n\terror(_(\"invalid '%s' argument\"), \"from\");\n    if (!isString(f2))\n\terror(_(\"invalid '%s' argument\"), \"to\");\n    n1 = LENGTH(f1); n2 = LENGTH(f2);\n   if (n2 != n1)\n\terror(_(\"'from' and 'to' are of different lengths\"));\n    PROTECT(ans = allocVector(LGLSXP, n1));\n    for (i = 0; i < n1; i++) {\n\tif (STRING_ELT(f1, i) == NA_STRING ||\n\t    STRING_ELT(f2, i) == NA_STRING) {\n\t    LOGICAL(ans)[i] = 0;\n\t    continue;\n\t}\n#ifdef Win32\n\tw = filenameToWchar(STRING_ELT(f1, i), TRUE);\n\tif (wcslen(w) >= PATH_MAX - 1)\n\t    error(_(\"expanded 'from' name too long\"));\n\twcsncpy(from, w, PATH_MAX - 1);\n\tw = filenameToWchar(STRING_ELT(f2, i), TRUE);\n\tif (wcslen(w) >= PATH_MAX - 1)\n\t    error(_(\"expanded 'to' name too long\"));\n\twcsncpy(to, w, PATH_MAX - 1);\n\tLOGICAL(ans)[i] = (Rwin_wrename(from, to) == 0);\n#else\n\tp = R_ExpandFileName(translateChar(STRING_ELT(f1, i)));\n\tif (strlen(p) >= PATH_MAX - 1)\n\t    error(_(\"expanded 'from' name too long\"));\n\tstrncpy(from, p, PATH_MAX - 1);\n\tp = R_ExpandFileName(translateChar(STRING_ELT(f2, i)));\n\tif (strlen(p) >= PATH_MAX - 1)\n\t    error(_(\"expanded 'to' name too long\"));\n\tstrncpy(to, p, PATH_MAX - 1);\n\tres = rename(from, to);\n\tif(res) {\n\t    warning(_(\"cannot rename file '%s' to '%s', reason '%s'\"),\n\t\t    from, to, strerror(errno));\n\t}\n\tLOGICAL(ans)[i] = (res == 0);\n#endif\n    }\n    UNPROTECT(1);\n    return ans;\n}\n\n# if defined(Unix) && defined(HAVE_PWD_H) && defined(HAVE_GRP_H) \\\n  && defined(HAVE_GETPWUID) && defined(HAVE_GETGRGID)\n#  include <pwd.h>\n#  include <grp.h>\n#  define UNIX_EXTRAS 1\n# endif\n\n#ifdef Win32\n# ifndef SCS_64BIT_BINARY\n#  define SCS_64BIT_BINARY 6\n# endif\n#endif\n\n#if defined HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC\n# ifdef TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC\n#  define STAT_TIMESPEC(st, st_xtim) ((st).st_xtim)\n# else\n#  define STAT_TIMESPEC_NS(st, st_xtim) ((st).st_xtim.tv_nsec)\n# endif\n#elif defined HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC\n# define STAT_TIMESPEC(st, st_xtim) ((st).st_xtim##espec)\n#elif defined HAVE_STRUCT_STAT_ST_ATIMENSEC\n# define STAT_TIMESPEC_NS(st, st_xtim) ((st).st_xtim##ensec)\n#elif defined HAVE_STRUCT_STAT_ST_ATIM_ST__TIM_TV_NSEC\n# define STAT_TIMESPEC_NS(st, st_xtim) ((st).st_xtim.st__tim.tv_nsec)\n#endif\n\nSEXP attribute_hidden do_fileinfo(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, ans, ansnames, fsize, mtime, ctime, atime, isdir,\n\tmode, xxclass;\n#ifdef UNIX_EXTRAS\n    SEXP uid = R_NilValue, gid = R_NilValue,\n\tuname = R_NilValue, grname = R_NilValue; // silence -Wall\n#endif\n#ifdef Win32\n    SEXP exe = R_NilValue;\n    struct _stati64 sb;\n#else\n    struct stat sb;\n#endif\n\n    checkArity(op, args);\n    fn = CAR(args);\n    if (!isString(fn))\n\terror(_(\"invalid filename argument\"));\n    int extras = asInteger(CADR(args));\n    if(extras == NA_INTEGER)\n\terror(_(\"invalid '%s' argument\"), \"extra_cols\");\n    int n = LENGTH(fn), ncols = 6;\n    if(extras) {\n#ifdef UNIX_EXTRAS\n\tncols = 10;\n#elif defined(Win32)\n\tncols = 7;\n#endif\n    }\n    PROTECT(ans = allocVector(VECSXP, ncols));\n    PROTECT(ansnames = allocVector(STRSXP, ncols));\n    fsize = SET_VECTOR_ELT(ans, 0, allocVector(REALSXP, n));\n    SET_STRING_ELT(ansnames, 0, mkChar(\"size\"));\n    isdir = SET_VECTOR_ELT(ans, 1, allocVector(LGLSXP, n));\n    SET_STRING_ELT(ansnames, 1, mkChar(\"isdir\"));\n    mode  = SET_VECTOR_ELT(ans, 2, allocVector(INTSXP, n));\n    SET_STRING_ELT(ansnames, 2, mkChar(\"mode\"));\n    mtime = SET_VECTOR_ELT(ans, 3, allocVector(REALSXP, n));\n    SET_STRING_ELT(ansnames, 3, mkChar(\"mtime\"));\n    ctime = SET_VECTOR_ELT(ans, 4, allocVector(REALSXP, n));\n    SET_STRING_ELT(ansnames, 4, mkChar(\"ctime\"));\n    atime = SET_VECTOR_ELT(ans, 5, allocVector(REALSXP, n));\n    SET_STRING_ELT(ansnames, 5, mkChar(\"atime\"));\n    if (extras) {\n#ifdef UNIX_EXTRAS\n\tuid = SET_VECTOR_ELT(ans, 6, allocVector(INTSXP, n));\n\tSET_STRING_ELT(ansnames, 6, mkChar(\"uid\"));\n\tgid = SET_VECTOR_ELT(ans, 7, allocVector(INTSXP, n));\n\tSET_STRING_ELT(ansnames, 7, mkChar(\"gid\"));\n\tuname = SET_VECTOR_ELT(ans, 8, allocVector(STRSXP, n));\n\tSET_STRING_ELT(ansnames, 8, mkChar(\"uname\"));\n\tgrname = SET_VECTOR_ELT(ans, 9, allocVector(STRSXP, n));\n\tSET_STRING_ELT(ansnames, 9, mkChar(\"grname\"));\n#endif\n#ifdef Win32\n\texe = SET_VECTOR_ELT(ans, 6, allocVector(STRSXP, n));\n\tSET_STRING_ELT(ansnames, 6, mkChar(\"exe\"));\n#endif\n    }\n    for (int i = 0; i < n; i++) {\n#ifdef Win32\n\twchar_t *wfn = filenameToWchar(STRING_ELT(fn, i), TRUE);\n\t/* trailing \\ is not valid on Windows except for the\n\t   root directory on a drive, specified as \"\\\", or \"D:\\\",\n\t   or \"\\\\?\\D:\\\", etc.  We remove it in other cases,\n\t   to help those who think they're on Unix. */\n\tsize_t len = wcslen(wfn);\n\tif (len) {\n\t    wchar_t *p = wfn + (len - 1);\n\t    if (len > 1 && (*p == L'/' || *p == L'\\\\') &&\n\t\t*(p-1) != L':') *p = 0;\n\t}\n#else\n\tconst char *efn = R_ExpandFileName(translateChar(STRING_ELT(fn, i)));\n#endif\n\tif (STRING_ELT(fn, i) != NA_STRING &&\n#ifdef Win32\n\t    _wstati64(wfn, &sb)\n#else\n\t    /* Target not link */\n\t    stat(efn, &sb)\n#endif\n\t    == 0) {\n\t    REAL(fsize)[i] = (double) sb.st_size;\n\t    LOGICAL(isdir)[i] = (sb.st_mode & S_IFDIR) > 0;\n\t    INTEGER(mode)[i]  = (int) sb.st_mode & 0007777;\n\n#if defined STAT_TIMESPEC\n\t    /* POSIX 2008 changed this to a struct timespec st_mtim etc\n\t       Not all OSes (e.g. Darwin) agree on this. */\n\t    REAL(mtime)[i] = (double) STAT_TIMESPEC(sb, st_mtim).tv_sec\n\t\t+ 1e-9 * (double) STAT_TIMESPEC(sb, st_mtim).tv_nsec;\n\t    REAL(ctime)[i] = (double) STAT_TIMESPEC(sb, st_ctim).tv_sec\n\t\t+ 1e-9 * (double) STAT_TIMESPEC(sb, st_ctim).tv_nsec;\n\t    REAL(atime)[i] = (double) STAT_TIMESPEC(sb, st_atim).tv_sec\n\t\t+ 1e-9 * (double) STAT_TIMESPEC(sb, st_atim).tv_nsec;\n#else\n#ifdef Win32\n#define WINDOWS_TICK 10000000\n#define SEC_TO_UNIX_EPOCH 11644473600LL\n\t    {\n\t\tFILETIME c_ft, a_ft, m_ft; \n\t\tHANDLE h;\n\t\tint success = 0;\n\t\th = CreateFileW(wfn, 0,\n\t\t                FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE,\n\t\t                NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);\n\t\tif (h != INVALID_HANDLE_VALUE) {\n\t\t    int res  = GetFileTime(h, &c_ft, &a_ft, &m_ft);\n\t\t    CloseHandle(h);\n\t\t    if (res) { \n\t\t\tULARGE_INTEGER time;\n\t\t\ttime.LowPart = m_ft.dwLowDateTime;\n\t\t\ttime.HighPart = m_ft.dwHighDateTime;\n\t\t\tREAL(mtime)[i] = (((double) time.QuadPart) / WINDOWS_TICK - SEC_TO_UNIX_EPOCH);\n\t\t\ttime.LowPart = c_ft.dwLowDateTime;\n\t\t\ttime.HighPart = c_ft.dwHighDateTime;\n\t\t\tREAL(ctime)[i] = (((double) time.QuadPart) / WINDOWS_TICK - SEC_TO_UNIX_EPOCH);\n\t\t\ttime.LowPart = a_ft.dwLowDateTime;\n\t\t\ttime.HighPart = a_ft.dwHighDateTime;\n\t\t\tREAL(atime)[i] = (((double) time.QuadPart) / WINDOWS_TICK - SEC_TO_UNIX_EPOCH);\n\t\t\tsuccess = 1;\n\t\t    }\n\t\t} else\n\t\t    warning(_(\"cannot open file '%ls': %s\"),\n\t\t            wfn, formatError(GetLastError()));\n\t\tif (!success) {\n\t\t    REAL(mtime)[i] = NA_REAL;\n\t\t    REAL(ctime)[i] = NA_REAL;\n\t\t    REAL(atime)[i] = NA_REAL;\t\n\t        }\n\t    }\n#else\n\t    REAL(mtime)[i] = (double) sb.st_mtime;\n\t    REAL(ctime)[i] = (double) sb.st_ctime;\n\t    REAL(atime)[i] = (double) sb.st_atime;\n# ifdef STAT_TIMESPEC_NS\n\t    REAL(mtime)[i] += STAT_TIMESPEC_NS (sb, st_mtim);\n\t    REAL(ctime)[i] += STAT_TIMESPEC_NS (sb, st_ctim);\n\t    REAL(atime)[i] += STAT_TIMESPEC_NS (sb, st_atim);\n# endif\n#endif\n#endif\n\t    if (extras) {\n#ifdef UNIX_EXTRAS\n\t\tINTEGER(uid)[i] = (int) sb.st_uid;\n\t\tINTEGER(gid)[i] = (int) sb.st_gid;\n\n\t\t/* Usually all of the uid and gid values in a list of\n\t\t * files are the same so we can avoid most of the calls\n\t\t * to getpwuid() and getgrgid(), which can be quite slow\n\t\t * on some systems.  (PR#15804)\n\t\t */\n\t\tif (i && INTEGER(uid)[i - 1] == (int) sb.st_uid)\n\t\t    SET_STRING_ELT(uname, i, STRING_ELT(uname, i - 1));\n\t\telse {\n\t\t    struct passwd *stpwd = getpwuid(sb.st_uid);\n\t\t    SET_STRING_ELT(uname, i,\n\t\t\t\t   stpwd ? mkChar(stpwd->pw_name): NA_STRING);\n\t\t}\n\n\t\tif (i && INTEGER(gid)[i - 1] == (int) sb.st_gid)\n\t\t    SET_STRING_ELT(grname, i, STRING_ELT(grname, i - 1));\n\t\telse {\n\t\t    struct group *stgrp = getgrgid(sb.st_gid);\n\t\t    SET_STRING_ELT(grname, i,\n\t\t\t\t   stgrp ? mkChar(stgrp->gr_name): NA_STRING);\n\t\t}\n#endif\n#ifdef Win32\n\t\t{\n\t\t    char *s=\"no\";\n\t\t    DWORD type;\n\t\t    if (GetBinaryTypeW(wfn, &type))\n\t\t\tswitch(type) {\n\t\t\tcase SCS_64BIT_BINARY:\n\t\t\t    s = \"win64\";\n\t\t\t    break;\n\t\t\tcase SCS_32BIT_BINARY:\n\t\t\t    s = \"win32\";\n\t\t\t    break;\n\t\t\tcase SCS_DOS_BINARY:\n\t\t\tcase SCS_PIF_BINARY:\n\t\t\t    s = \"msdos\";\n\t\t\t    break;\n\t\t\tcase SCS_WOW_BINARY:\n\t\t\t    s = \"win16\";\n\t\t\t    break;\n\t\t\tdefault:\n\t\t\t    s = \"unknown\";\n\t\t\t}\n\t\t    SET_STRING_ELT(exe, i, mkChar(s));\n\t\t}\n#endif\n\t    }\n\t} else {\n\t    REAL(fsize)[i] = NA_REAL;\n\t    LOGICAL(isdir)[i] = NA_INTEGER;\n\t    INTEGER(mode)[i]  = NA_INTEGER;\n\t    REAL(mtime)[i] = NA_REAL;\n\t    REAL(ctime)[i] = NA_REAL;\n\t    REAL(atime)[i] = NA_REAL;\n\t    if (extras) {\n#ifdef UNIX_EXTRAS\n\t\tINTEGER(uid)[i] = NA_INTEGER;\n\t\tINTEGER(gid)[i] = NA_INTEGER;\n\t\tSET_STRING_ELT(uname, i, NA_STRING);\n\t\tSET_STRING_ELT(grname, i, NA_STRING);\n#endif\n#ifdef Win32\n\t\tSET_STRING_ELT(exe, i, NA_STRING);\n#endif\n\t    }\n\t}\n    }\n    setAttrib(ans, R_NamesSymbol, ansnames);\n    PROTECT(xxclass = mkString(\"octmode\"));\n    classgets(mode, xxclass);\n    UNPROTECT(3);\n    return ans;\n}\n\nSEXP attribute_hidden do_direxists(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, ans;\n\n#ifdef Win32\n    struct _stati64 sb;\n#else\n    struct stat sb;\n#endif\n\n    checkArity(op, args);\n    fn = CAR(args);\n    if (!isString(fn))\n\terror(_(\"invalid filename argument\"));\n    int n = LENGTH(fn);\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (int i = 0; i < n; i++) {\n#ifdef Win32\n\twchar_t *wfn = filenameToWchar(STRING_ELT(fn, i), TRUE);\n\t/* trailing \\ is not valid on Windows except for the\n\t   root directory on a drive, specified as \"\\\", or \"D:\\\",\n\t   or \"\\\\?\\D:\\\", etc.  We remove it in other cases,\n\t   to help those who think they're on Unix. */\n\tsize_t len = wcslen(wfn);\n\tif (len) {\n\t    wchar_t *p = wfn + (len - 1);\n\t    if (len > 1 && (*p == L'/' || *p == L'\\\\') &&\n\t\t*(p-1) != L':') *p = 0;\n\t}\n#else\n\tconst char *efn = R_ExpandFileName(translateChar(STRING_ELT(fn, i)));\n#endif\n\tif (STRING_ELT(fn, i) != NA_STRING &&\n#ifdef Win32\n\t    _wstati64(wfn, &sb)\n#else\n\t    /* Target not link */\n\t    stat(efn, &sb)\n#endif\n\t    == 0) {\n\t    LOGICAL(ans)[i] = (sb.st_mode & S_IFDIR) > 0;\n\n\t} else LOGICAL(ans)[i] = 0;\n    }\n    // copy names?\n    UNPROTECT(1);\n    return ans;\n}\n\n/* No longer required by POSIX, but maybe on earlier OSes */\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n\n#if HAVE_DIRENT_H\n# include <dirent.h>\n#elif HAVE_SYS_NDIR_H\n# include <sys/ndir.h>\n#elif HAVE_SYS_DIR_H\n# include <sys/dir.h>\n#elif HAVE_NDIR_H\n# include <ndir.h>\n#endif\n\n#define CBUFSIZE 2*PATH_MAX+1\nstatic SEXP filename(const char *dir, const char *file)\n{\n    SEXP ans;\n    char cbuf[CBUFSIZE];\n    if (dir) {\n#ifdef Win32\n\tif ((strlen(dir) == 2 && dir[1] == ':') ||\n\t    dir[strlen(dir) - 1] == '/' ||  dir[strlen(dir) - 1] == '\\\\')\n\t    snprintf(cbuf, CBUFSIZE, \"%s%s\", dir, file);\n\telse\n\t    snprintf(cbuf, CBUFSIZE, \"%s%s%s\", dir, R_FileSep, file);\n#else\n\tsnprintf(cbuf, CBUFSIZE, \"%s%s%s\", dir, R_FileSep, file);\n#endif\n\tans = mkChar(cbuf);\n    } else {\n\tsnprintf(cbuf, CBUFSIZE, \"%s\", file);\n\tans = mkChar(cbuf);\n    }\n    return ans;\n}\n\n#include <tre/tre.h>\n\nstatic void\nlist_files(const char *dnp, const char *stem, int *count, SEXP *pans,\n\t   Rboolean allfiles, Rboolean recursive,\n\t   const regex_t *reg, int *countmax, PROTECT_INDEX idx,\n\t   Rboolean idirs, Rboolean allowdots)\n{\n    DIR *dir;\n    struct dirent *de;\n    char p[PATH_MAX], stem2[PATH_MAX];\n#ifdef Windows\n    /* > 2GB files might be skipped otherwise */\n    struct _stati64 sb;\n#else\n    struct stat sb;\n#endif\n    R_CheckUserInterrupt(); // includes stack check\n    if ((dir = opendir(dnp)) != NULL) {\n\twhile ((de = readdir(dir))) {\n\t    if (allfiles || !R_HiddenFile(de->d_name)) {\n\t\tRboolean not_dot = strcmp(de->d_name, \".\") && strcmp(de->d_name, \"..\");\n\t\tif (recursive) {\n#ifdef Win32\n\t\t    if (strlen(dnp) == 2 && dnp[1] == ':') // e.g. \"C:\"\n\t\t\tsnprintf(p, PATH_MAX, \"%s%s\", dnp, de->d_name);\n\t\t    else\n#endif\n\t\t\tsnprintf(p, PATH_MAX, \"%s%s%s\", dnp, R_FileSep, de->d_name);\n\n#ifdef Windows\n\t\t    _stati64(p, &sb);\n#else\n\t\t    stat(p, &sb);\n#endif\n\t\t    if ((sb.st_mode & S_IFDIR) > 0) {\n\t\t\tif (not_dot) {\n\t\t\t    if (idirs) {\n#define IF_MATCH_ADD_TO_ANS\t\t\t\t\t\t\\\n\t\t\t\tif (!reg || tre_regexec(reg, de->d_name, 0, NULL, 0) == 0) { \\\n\t\t\t\t    if (*count == *countmax - 1) {\t\\\n\t\t\t\t\t*countmax *= 2;\t\t\t\\\n\t\t\t\t\tREPROTECT(*pans = lengthgets(*pans, *countmax), idx); \\\n\t\t\t\t    }\t\t\t\t\t\\\n\t\t\t\t    SET_STRING_ELT(*pans, (*count)++,\t\\\n\t\t\t\t\t\t   filename(stem, de->d_name));\t\\\n\t\t\t\t}\n\t\t\t\tIF_MATCH_ADD_TO_ANS\n\t\t\t    }\n\t\t\t    if (stem) {\n#ifdef Win32\n\t\t\t\tif(strlen(stem) == 2 && stem[1] == ':')\n\t\t\t\t    snprintf(stem2, PATH_MAX, \"%s%s\", stem,\n\t\t\t\t\t     de->d_name);\n\t\t\t\telse\n#endif\n\t\t\t\t    snprintf(stem2, PATH_MAX, \"%s%s%s\", stem,\n\t\t\t\t\t     R_FileSep, de->d_name);\n\t\t\t    } else\n\t\t\t\tstrcpy(stem2, de->d_name);\n\n\t\t\t    list_files(p, stem2, count, pans, allfiles,\n\t\t\t\t       recursive, reg, countmax, idx, idirs,\n\t\t\t\t       allowdots);\n\t\t\t}\n\t\t\tcontinue;\n\t\t    }\n\t\t} // end if(recursive)\n\n\t\tif (not_dot || allowdots)\n\t\t    IF_MATCH_ADD_TO_ANS\n\t    }\n\n\t} // end while()\n\tclosedir(dir);\n    }\n}\n#undef IF_MATCH_ADD_TO_ANS\n\nSEXP attribute_hidden do_listfiles(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    int countmax = 128;\n\n    checkArity(op, args);\n    SEXP d = CAR(args);  args = CDR(args); // d := directory = path\n    if (!isString(d)) error(_(\"invalid '%s' argument\"), \"path\");\n    SEXP p = CAR(args); args = CDR(args);\n    Rboolean pattern = FALSE;\n    if (isString(p) && LENGTH(p) >= 1 && STRING_ELT(p, 0) != NA_STRING)\n\tpattern = TRUE;\n    else if (!isNull(p) && !(isString(p) && LENGTH(p) < 1))\n\terror(_(\"invalid '%s' argument\"), \"pattern\");\n    int allfiles = asLogical(CAR(args)); args = CDR(args);\n    if (allfiles == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"all.files\");\n    int fullnames = asLogical(CAR(args)); args = CDR(args);\n    if (fullnames == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"full.names\");\n    int recursive = asLogical(CAR(args)); args = CDR(args);\n    if (recursive == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"recursive\");\n    int igcase = asLogical(CAR(args)); args = CDR(args);\n    if (igcase == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"ignore.case\");\n    int idirs = asLogical(CAR(args)); args = CDR(args);\n    if (idirs == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"include.dirs\");\n    int nodots = asLogical(CAR(args));\n    if (nodots == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"no..\");\n\n    int flags = REG_EXTENDED;\n    if (igcase) flags |= REG_ICASE;\n    regex_t reg;\n    if (pattern && tre_regcomp(&reg, translateChar(STRING_ELT(p, 0)), flags))\n\terror(_(\"invalid 'pattern' regular expression\"));\n    PROTECT_INDEX idx;\n    SEXP ans;\n    PROTECT_WITH_INDEX(ans = allocVector(STRSXP, countmax), &idx);\n    int count = 0;\n    for (int i = 0; i < LENGTH(d) ; i++) {\n\tif (STRING_ELT(d, i) == NA_STRING) continue;\n\tconst char *dnp = R_ExpandFileName(translateChar(STRING_ELT(d, i)));\n\tlist_files(dnp, fullnames ? dnp : NULL, &count, &ans, allfiles,\n\t\t   recursive, pattern ? &reg : NULL, &countmax, idx,\n\t\t   idirs, /* allowdots = */ !nodots);\n    }\n    REPROTECT(ans = lengthgets(ans, count), idx);\n    if (pattern) tre_regfree(&reg);\n    ssort(STRING_PTR(ans), count);\n    UNPROTECT(1);\n    return ans;\n}\n\nstatic void list_dirs(const char *dnp, const char *nm,\n\t\t      Rboolean full, int *count,\n\t\t      SEXP *pans, int *countmax, PROTECT_INDEX idx,\n\t\t      Rboolean recursive)\n{\n    DIR *dir;\n    struct dirent *de;\n    char p[PATH_MAX];\n#ifdef Windows\n    /* > 2GB files might be skipped otherwise */\n    struct _stati64 sb;\n#else\n    struct stat sb;\n#endif\n    R_CheckUserInterrupt(); // includes stack check\n\n    if ((dir = opendir(dnp)) != NULL) {\n\tif (recursive) {\n\t    if (*count == *countmax - 1) {\n\t\t*countmax *= 2;\n\t\tREPROTECT(*pans = lengthgets(*pans, *countmax), idx);\n\t    }\n\t    SET_STRING_ELT(*pans, (*count)++, mkChar(full ? dnp : nm));\n\t}\n\twhile ((de = readdir(dir))) {\n#ifdef Win32\n\t    if (strlen(dnp) == 2 && dnp[1] == ':')\n\t\tsnprintf(p, PATH_MAX, \"%s%s\", dnp, de->d_name);\n\t    else\n\t\tsnprintf(p, PATH_MAX, \"%s%s%s\", dnp, R_FileSep, de->d_name);\n#else\n\t    snprintf(p, PATH_MAX, \"%s%s%s\", dnp, R_FileSep, de->d_name);\n#endif\n#ifdef Windows\n\t    _stati64(p, &sb);\n#else\n\t    stat(p, &sb);\n#endif\n\t    if ((sb.st_mode & S_IFDIR) > 0) {\n\t\tif (strcmp(de->d_name, \".\") && strcmp(de->d_name, \"..\")) {\n\t\t    if(recursive) {\n\t\t\tchar nm2[PATH_MAX];\n\t\t\tsnprintf(nm2, PATH_MAX, \"%s%s%s\", nm, R_FileSep,\n\t\t\t\t de->d_name);\n\t\t\tlist_dirs(p, nm[0] ? nm2 : de->d_name, full, count,\n\t\t\t\t  pans, countmax, idx, recursive);\n\n\t\t    } else {\n\t\t\tif (*count == *countmax - 1) {\n\t\t\t    *countmax *= 2;\n\t\t\t    REPROTECT(*pans = lengthgets(*pans, *countmax), idx);\n\t\t\t}\n\t\t\tSET_STRING_ELT(*pans, (*count)++,\n\t\t\t\t       mkChar(full ? p : de->d_name));\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tclosedir(dir);\n    }\n}\n\nSEXP attribute_hidden do_listdirs(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    PROTECT_INDEX idx;\n    SEXP d, ans;\n    int fullnames, count, i, recursive;\n    const char *dnp;\n    int countmax = 128;\n\n    checkArity(op, args);\n    d = CAR(args); args = CDR(args);\n    if (!isString(d)) error(_(\"invalid '%s' argument\"), \"directory\");\n    fullnames = asLogical(CAR(args)); args = CDR(args);\n    if (fullnames == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"full.names\");\n    recursive = asLogical(CAR(args)); args = CDR(args);\n    if (recursive == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"recursive\");\n\n    PROTECT_WITH_INDEX(ans = allocVector(STRSXP, countmax), &idx);\n    count = 0;\n    for (i = 0; i < LENGTH(d) ; i++) {\n\tif (STRING_ELT(d, i) == NA_STRING) continue;\n\tdnp = R_ExpandFileName(translateChar(STRING_ELT(d, i)));\n\tlist_dirs(dnp, \"\", fullnames, &count, &ans, &countmax, idx, recursive);\n    }\n    REPROTECT(ans = lengthgets(ans, count), idx);\n    ssort(STRING_PTR(ans), count);\n    UNPROTECT(1);\n    return ans;\n}\n\nSEXP attribute_hidden do_Rhome(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    char *path;\n    checkArity(op, args);\n    if (!(path = R_HomeDir()))\n\terror(_(\"unable to determine R home location\"));\n    return mkString(path);\n}\n\n#ifdef Win32\nstatic Rboolean attribute_hidden R_WFileExists(const wchar_t *path)\n{\n    struct _stati64 sb;\n    return _wstati64(path, &sb) == 0;\n}\n#endif\n\nSEXP attribute_hidden do_fileexists(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP file, ans;\n    int i, nfile;\n    checkArity(op, args);\n    if (!isString(file = CAR(args)))\n\terror(_(\"invalid '%s' argument\"), \"file\");\n    nfile = LENGTH(file);\n    ans = PROTECT(allocVector(LGLSXP, nfile));\n    for (i = 0; i < nfile; i++) {\n\tLOGICAL(ans)[i] = 0;\n\tif (STRING_ELT(file, i) != NA_STRING) {\n#ifdef Win32\n\t    /* Package XML sends arbitrarily long strings to file.exists! */\n\t    size_t len = strlen(CHAR(STRING_ELT(file, i)));\n\t    if (len > MAX_PATH)\n\t\tLOGICAL(ans)[i] = FALSE;\n\t    else\n\t\tLOGICAL(ans)[i] =\n\t\t    R_WFileExists(filenameToWchar(STRING_ELT(file, i), TRUE));\n#else\n\t    LOGICAL(ans)[i] = R_FileExists(translateChar(STRING_ELT(file, i)));\n#endif\n\t} else LOGICAL(ans)[i] = FALSE;\n    }\n    UNPROTECT(1); /* ans */\n    return ans;\n}\n\n#define CHOOSEBUFSIZE 1024\n\n#ifndef Win32\nSEXP attribute_hidden do_filechoose(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    int _new, len;\n    char buf[CHOOSEBUFSIZE];\n    checkArity(op, args);\n    _new = asLogical(CAR(args));\n    if ((len = R_ChooseFile(_new, buf, CHOOSEBUFSIZE)) == 0)\n\terror(_(\"file choice cancelled\"));\n    if (len >= CHOOSEBUFSIZE - 1)\n\terror(_(\"file name too long\"));\n    return mkString(R_ExpandFileName(buf));\n}\n#endif\n\n/* needed for access, and perhaps for realpath */\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#ifdef Win32\nextern int winAccessW(const wchar_t *path, int mode);\n#endif\n\n/* we require 'access' as from 2.12.0 */\nSEXP attribute_hidden do_fileaccess(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, ans;\n    int i, n, mode, modemask;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    if (!isString(fn))\n\terror(_(\"invalid '%s' argument\"), \"names\");\n    n = LENGTH(fn);\n    mode = asInteger(CADR(args));\n    if (mode < 0 || mode > 7) error(_(\"invalid '%s' argument\"), \"mode\");\n    modemask = 0;\n    if (mode & 1) modemask |= X_OK;\n    if (mode & 2) modemask |= W_OK;\n    if (mode & 4) modemask |= R_OK;\n    PROTECT(ans = allocVector(INTSXP, n));\n    for (i = 0; i < n; i++)\n\tif (STRING_ELT(fn, i) != NA_STRING) {\n\t    INTEGER(ans)[i] =\n#ifdef Win32\n\t\twinAccessW(filenameToWchar(STRING_ELT(fn, i), TRUE), modemask);\n#else\n\t\taccess(R_ExpandFileName(translateChar(STRING_ELT(fn, i))),\n\t\t       modemask);\n#endif\n\t} else INTEGER(ans)[i] = FALSE;\n    UNPROTECT(1);\n    return ans;\n}\n\n#ifdef Win32\n\nstatic int R_rmdir(const wchar_t *dir)\n{\n    wchar_t tmp[MAX_PATH];\n    GetShortPathNameW(dir, tmp, MAX_PATH);\n    //printf(\"removing directory %ls\\n\", tmp);\n    return _wrmdir(tmp);\n}\n\n/* Junctions and symbolic links are fundamentally reparse points, so\n   apparently this is the way to detect them. */\nstatic int isReparsePoint(const wchar_t *name)\n{\n    DWORD res = GetFileAttributesW(name);\n    if(res == INVALID_FILE_ATTRIBUTES) {\n\twarning(\"cannot get info on '%ls', reason '%s'\",\n\t\tname, formatError(GetLastError()));\n\treturn 0;\n    }\n    // printf(\"%ls: %x\\n\", name, res);\n    return res & FILE_ATTRIBUTE_REPARSE_POINT;\n}\n\nstatic int delReparsePoint(const wchar_t *name)\n{\n    HANDLE hd =\n\tCreateFileW(name, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,\n\t\t    FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT,\n\t\t    0);\n    if(hd == INVALID_HANDLE_VALUE) {\n\twarning(\"cannot open reparse point '%ls', reason '%s'\",\n\t\tname, formatError(GetLastError()));\n\treturn 1;\n    }\n    REPARSE_GUID_DATA_BUFFER rgdb = {0};\n    rgdb.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n    DWORD dwBytes;\n    BOOL res = DeviceIoControl(hd, FSCTL_DELETE_REPARSE_POINT, &rgdb,\n\t\t\t       REPARSE_GUID_DATA_BUFFER_HEADER_SIZE,\n\t\t\t       NULL, 0, &dwBytes, 0);\n    CloseHandle(hd);\n    if(res == 0)\n\twarning(\"cannot delete reparse point '%ls', reason '%s'\",\n\t\tname, formatError(GetLastError()));\n    else /* This may leave an empty dir behind */\n\tR_rmdir(name);\n    return res == 0;\n}\n\nstatic int R_unlink(wchar_t *name, int recursive, int force)\n{\n    R_CheckStack(); // called recursively\n    if (wcscmp(name, L\".\") == 0 || wcscmp(name, L\"..\") == 0) return 0;\n    //printf(\"R_unlink(%ls)\\n\", name);\n    if (!R_WFileExists(name)) return 0;\n    if (force) _wchmod(name, _S_IWRITE);\n\n    if (recursive) {\n\t_WDIR *dir;\n\tstruct _wdirent *de;\n\twchar_t p[PATH_MAX];\n\tstruct _stati64 sb;\n\tint n, ans = 0;\n\n\t_wstati64(name, &sb);\n\t/* We need to test for a junction first, as junctions\n\t   are detected as directories. */\n\tif (isReparsePoint(name)) ans += delReparsePoint(name);\n\telse if ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\t    if ((dir = _wopendir(name)) != NULL) {\n\t\twhile ((de = _wreaddir(dir))) {\n\t\t    if (!wcscmp(de->d_name, L\".\") || !wcscmp(de->d_name, L\"..\"))\n\t\t\tcontinue;\n\t\t    /* On Windows we need to worry about trailing seps */\n\t\t    n = wcslen(name);\n\t\t    if (name[n] == L'/' || name[n] == L'\\\\') {\n\t\t\twcscpy(p, name); wcscat(p, de->d_name);\n\t\t    } else {\n\t\t\twcscpy(p, name); wcscat(p, L\"/\"); wcscat(p, de->d_name);\n\t\t    }\n\t\t    /* printf(\"stat-ing %ls\\n\", p); */\n\t\t    _wstati64(p, &sb);\n\t\t    if (isReparsePoint(name)) ans += delReparsePoint(name);\n\t\t    else if ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\t\t\t/* printf(\"is a directory\\n\"); */\n\t\t\tif (force) _wchmod(p, _S_IWRITE);\n\t\t\tans += R_unlink(p, recursive, force);\n\t\t    } else {\n\t\t\tif (force) _wchmod(p, _S_IWRITE);\n\t\t\tans += (_wunlink(p) == 0) ? 0 : 1;\n\t\t    }\n\t\t}\n\t\t_wclosedir(dir);\n\t    } else { /* we were unable to read a dir */\n\t\tans++;\n\t    }\n\t    ans += (R_rmdir(name) == 0) ? 0 : 1;\n\t    return ans;\n\t}\n\t/* drop through */\n    } else if (isReparsePoint(name)) return delReparsePoint(name);\n\n    return _wunlink(name) == 0 ? 0 : 1;\n}\n\nvoid R_CleanTempDir(void)\n{\n    if (Sys_TempDir) {\n\tsize_t n = strlen(Sys_TempDir);\n\t/* Windows cannot delete the current working directory */\n\tSetCurrentDirectory(R_HomeDir());\n\twchar_t w[2*(n+1)];\n\tmbstowcs(w, Sys_TempDir, n+1);\n\tR_unlink(w, 1, 1); /* recursive=TRUE, force=TRUE */\n    }\n}\n#else\nstatic int R_unlink(const char *name, int recursive, int force)\n{\n    R_CheckStack(); // called recursively\n    struct stat sb;\n    int res, res2;\n\n    if (streql(name, \".\") || streql(name, \"..\")) return 0;\n    /* We cannot use R_FileExists here since it is false for broken\n       symbolic links\n       if (!R_FileExists(name)) return 0; */\n    res  = lstat(name, &sb);  /* better to be lstat */\n    if (!res && force) chmod(name, sb.st_mode | S_IWUSR);\n\n    if (!res && recursive) {\n\tDIR *dir;\n\tstruct dirent *de;\n\tchar p[PATH_MAX];\n\tint ans = 0;\n\n\tif ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\t    if ((dir = opendir(name)) != NULL) {\n\t\twhile ((de = readdir(dir))) {\n\t\t    if (streql(de->d_name, \".\") || streql(de->d_name, \"..\"))\n\t\t\tcontinue;\n\t\t    size_t n = strlen(name);\n\t\t    if (name[n] == R_FileSep[0])\n\t\t\tsnprintf(p, PATH_MAX, \"%s%s\", name, de->d_name);\n\t\t    else\n\t\t\tsnprintf(p, PATH_MAX, \"%s%s%s\", name, R_FileSep,\n\t\t\t\t de->d_name);\n\t\t    lstat(p, &sb);\n\t\t    if ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\t\t\tif (force) chmod(p, sb.st_mode | S_IWUSR | S_IXUSR);\n\t\t\tans += R_unlink(p, recursive, force);\n\t\t    } else {\n\t\t\tif (force) chmod(p, sb.st_mode | S_IWUSR);\n\t\t\tans += (unlink(p) == 0) ? 0 : 1;\n\t\t    }\n\t\t}\n\t\tclosedir(dir);\n\t    } else { /* we were unable to read a dir */\n\t\tans++;\n\t    }\n\t    ans += (rmdir(name) == 0) ? 0 : 1;\n\t    return ans;\n\t}\n\t/* drop through */\n    }\n    res2 = unlink(name);\n    /* We want to return 0 if either unlink succeeded or 'name' did not exist */\n    return (res2 == 0 || res != 0) ? 0 : 1;\n}\n\n#endif\n\n\n/* Note that wildcards are allowed in 'names' */\n#ifdef Win32\n# include <dos_wglob.h>\nSEXP attribute_hidden do_unlink(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP  fn;\n    int i, j, nfiles, res, failures = 0, recursive, force;\n    const wchar_t *names;\n    wglob_t globbuf;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    nfiles = length(fn);\n    if (nfiles > 0) {\n\tif (!isString(fn))\n\t    error(_(\"invalid '%s' argument\"), \"x\");\n\trecursive = asLogical(CADR(args));\n\tif (recursive == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"recursive\");\n\tforce = asLogical(CADDR(args));\n\tif (force == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"force\");\n\tfor (i = 0; i < nfiles; i++) {\n\t    if (STRING_ELT(fn, i) != NA_STRING) {\n\t\tnames = filenameToWchar(STRING_ELT(fn, i), TRUE);\n\t\t//Rprintf(\"do_unlink(%ls)\\n\", names);\n\t\tres = dos_wglob(names, GLOB_NOCHECK, NULL, &globbuf);\n\t\tif (res == GLOB_NOSPACE)\n\t\t    error(_(\"internal out-of-memory condition\"));\n\t\tfor (j = 0; j < globbuf.gl_pathc; j++)\n\t\t    failures += R_unlink(globbuf.gl_pathv[j], recursive, force);\n\t\tdos_wglobfree(&globbuf);\n\t    } else failures++;\n\t}\n    }\n    return ScalarInteger(failures ? 1 : 0);\n}\n#else\n# if defined(HAVE_GLOB) && defined(HAVE_GLOB_H)\n#  include <glob.h>\n# endif\n\nSEXP attribute_hidden do_unlink(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP  fn;\n    int i, nfiles, failures = 0, recursive, force;\n    const char *names;\n#if defined(HAVE_GLOB)\n    int j, res;\n    glob_t globbuf;\n#endif\n\n    checkArity(op, args);\n    fn = CAR(args);\n    nfiles = length(fn);\n    if (nfiles > 0) {\n\tif (!isString(fn))\n\t    error(_(\"invalid '%s' argument\"), \"x\");\n\trecursive = asLogical(CADR(args));\n\tif (recursive == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"recursive\");\n\tforce = asLogical(CADDR(args));\n\tif (force == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"force\");\n\tfor (i = 0; i < nfiles; i++) {\n\t    if (STRING_ELT(fn, i) != NA_STRING) {\n\t\tnames = R_ExpandFileName(translateChar(STRING_ELT(fn, i)));\n#if defined(HAVE_GLOB)\n\t\tres = glob(names, GLOB_NOCHECK, NULL, &globbuf);\n# ifdef GLOB_ABORTED\n\t\tif (res == GLOB_ABORTED)\n\t\t    warning(_(\"read error on '%s'\"), names);\n# endif\n# ifdef GLOB_NOSPACE\n\t\tif (res == GLOB_NOSPACE)\n\t\t    error(_(\"internal out-of-memory condition\"));\n# endif\n\t\tfor (j = 0; j < globbuf.gl_pathc; j++)\n\t\t    failures += R_unlink(globbuf.gl_pathv[j], recursive, force);\n\t\tglobfree(&globbuf);\n\t    } else failures++;\n#else /* HAVE_GLOB */\n\t\tfailures += R_unlink(names, recursive, force);\n\t    } else failures++;\n#endif\n\t}\n    }\n    return ScalarInteger(failures ? 1 : 0);\n}\n#endif\n\nSEXP attribute_hidden do_getlocale(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    int cat;\n    char *p = NULL;\n\n    checkArity(op, args);\n    cat = asInteger(CAR(args));\n    if (cat == NA_INTEGER || cat < 0)\n\terror(_(\"invalid '%s' argument\"), \"category\");\n    switch(cat) {\n    case 1: cat = LC_ALL; break;\n    case 2: cat = LC_COLLATE; break;\n    case 3: cat = LC_CTYPE; break;\n    case 4: cat = LC_MONETARY; break;\n    case 5: cat = LC_NUMERIC; break;\n    case 6: cat = LC_TIME; break;\n#ifdef LC_MESSAGES\n    case 7: cat = LC_MESSAGES; break;\n#endif\n#ifdef LC_PAPER\n    case 8: cat = LC_PAPER; break;\n#endif\n#ifdef LC_MEASUREMENT\n    case 9: cat = LC_MEASUREMENT; break;\n#endif\n    default: cat = NA_INTEGER;\n    }\n    if (cat != NA_INTEGER) p = setlocale(cat, NULL);\n    return mkString(p ? p : \"\");\n}\n\n/* Locale specs are always ASCII */\nSEXP attribute_hidden do_setlocale(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP locale = CADR(args), ans;\n    int cat;\n    const char *p;\n\n    checkArity(op, args);\n    cat = asInteger(CAR(args));\n    if (cat == NA_INTEGER || cat < 0)\n\terror(_(\"invalid '%s' argument\"), \"category\");\n    if (!isString(locale) || LENGTH(locale) != 1)\n\terror(_(\"invalid '%s' argument\"), \"locale\");\n    switch(cat) {\n    case 1:\n    {\n\tconst char *l = CHAR(STRING_ELT(locale, 0));\n\tcat = LC_ALL;\n\t/* assume we can set LC_CTYPE iff we can set the rest */\n\tif ((p = setlocale(LC_CTYPE, l))) {\n\t    setlocale(LC_COLLATE, l);\n\t    resetICUcollator();\n\t    setlocale(LC_MONETARY, l);\n\t    setlocale(LC_TIME, l);\n\t    dt_invalidate_locale();\n\t    /* Need to return value of LC_ALL */\n\t    p = setlocale(cat, NULL);\n\t}\n\tbreak;\n    }\n    case 2:\n\tcat = LC_COLLATE;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tresetICUcollator();\n\tbreak;\n    case 3:\n\tcat = LC_CTYPE;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tbreak;\n    case 4:\n\tcat = LC_MONETARY;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tbreak;\n    case 5:\n\tcat = LC_NUMERIC;\n\t{\n\t    const char *new_lc_num = CHAR(STRING_ELT(locale, 0));\n\t    if (strcmp(new_lc_num, \"C\")) /* do not complain about C locale - that's the only\n\t\t\t\t\t    reliable way to restore sanity */\n\t\twarning(_(\"setting 'LC_NUMERIC' may cause R to function strangely\"));\n\t    p = setlocale(cat, new_lc_num);\n\t}\n\tbreak;\n    case 6:\n\tcat = LC_TIME;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tdt_invalidate_locale();\n\tbreak;\n#if defined LC_MESSAGES\n    case 7:\n\tcat = LC_MESSAGES;\n#ifdef Win32\n/* this seems to exist in MinGW, but it does not work in Windows */\n\twarning(_(\"LC_MESSAGES exists on Windows but is not operational\"));\n\tp = NULL;\n#else\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n#endif\n\tbreak;\n#endif\n#ifdef LC_PAPER\n    case 8:\n\tcat = LC_PAPER;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tbreak;\n#endif\n#ifdef LC_MEASUREMENT\n    case 9:\n\tcat = LC_MEASUREMENT;\n\tp = setlocale(cat, CHAR(STRING_ELT(locale, 0)));\n\tbreak;\n#endif\n    default:\n\tp = NULL; /* -Wall */\n\terror(_(\"invalid '%s' argument\"), \"category\");\n    }\n    PROTECT(ans = allocVector(STRSXP, 1));\n    if (p) SET_STRING_ELT(ans, 0, mkChar(p));\n    else  {\n\tSET_STRING_ELT(ans, 0, mkChar(\"\"));\n\twarning(_(\"OS reports request to set locale to \\\"%s\\\" cannot be honored\"),\n\t\tCHAR(STRING_ELT(locale, 0)));\n    }\n    UNPROTECT(1);\n    R_check_locale();\n    invalidate_cached_recodings();\n    return ans;\n}\n\n\n\nSEXP attribute_hidden do_localeconv(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP ans, ansnames;\n    struct lconv *lc = localeconv();\n    int i = 0;\n    char buff[20];\n\n    checkArity(op, args);\n    PROTECT(ans = allocVector(STRSXP, 18));\n    PROTECT(ansnames = allocVector(STRSXP, 18));\n    SET_STRING_ELT(ans, i, mkChar(lc->decimal_point));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"decimal_point\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->thousands_sep));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"thousands_sep\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->grouping));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"grouping\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->int_curr_symbol));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"int_curr_symbol\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->currency_symbol));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"currency_symbol\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->mon_decimal_point));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"mon_decimal_point\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->mon_thousands_sep));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"mon_thousands_sep\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->mon_grouping));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"mon_grouping\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->positive_sign));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"positive_sign\"));\n    SET_STRING_ELT(ans, i, mkChar(lc->negative_sign));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"negative_sign\"));\n    sprintf(buff, \"%d\", (int)lc->int_frac_digits);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"int_frac_digits\"));\n    sprintf(buff, \"%d\", (int)lc->frac_digits);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"frac_digits\"));\n    sprintf(buff, \"%d\", (int)lc->p_cs_precedes);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"p_cs_precedes\"));\n    sprintf(buff, \"%d\", (int)lc->p_sep_by_space);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"p_sep_by_space\"));\n    sprintf(buff, \"%d\", (int)lc->n_cs_precedes);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"n_cs_precedes\"));\n    sprintf(buff, \"%d\", (int)lc->n_sep_by_space);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"n_sep_by_space\"));\n    sprintf(buff, \"%d\", (int)lc->p_sign_posn);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"p_sign_posn\"));\n    sprintf(buff, \"%d\", (int)lc->n_sign_posn);\n    SET_STRING_ELT(ans, i, mkChar(buff));\n    SET_STRING_ELT(ansnames, i++, mkChar(\"n_sign_posn\"));\n    setAttrib(ans, R_NamesSymbol, ansnames);\n    UNPROTECT(2);\n    return ans;\n}\n\n/* .Internal function for path.expand */\nSEXP attribute_hidden do_pathexpand(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, ans;\n    int i, n;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    if (!isString(fn))\n\terror(_(\"invalid '%s' argument\"), \"path\");\n    n = LENGTH(fn);\n    PROTECT(ans = allocVector(STRSXP, n));\n    for (i = 0; i < n; i++) {\n\tSEXP tmp = STRING_ELT(fn, i);\n\tif (tmp != NA_STRING) {\n#ifndef Win32\n\t    tmp = markKnown(R_ExpandFileName(translateChar(tmp)), tmp);\n#else\n/* Windows can have files and home directories that aren't representable in the native encoding (e.g. latin1), so\n   we need to translate everything to UTF8.  */\n\t    tmp = mkCharCE(R_ExpandFileNameUTF8(translateCharUTF8(tmp)), CE_UTF8);\n#endif\n\t}\n\tSET_STRING_ELT(ans, i, tmp);\n    }\n    UNPROTECT(1);\n    return ans;\n}\n\n#ifdef Unix\nstatic int var_R_can_use_X11 = -1;\n\nextern Rboolean R_access_X11(void); /* from src/unix/X11.c */\n\nstatic Rboolean R_can_use_X11(void)\n{\n    if (var_R_can_use_X11 < 0) {\n#ifdef HAVE_X11\n\tif (strcmp(R_GUIType, \"none\") != 0) {\n\t    /* At this point we have permission to use the module, so try it */\n\t    var_R_can_use_X11 = R_access_X11();\n\t} else {\n\t    var_R_can_use_X11 = 0;\n\t}\n#else\n\tvar_R_can_use_X11 = 0;\n#endif\n    }\n\n    return var_R_can_use_X11 > 0;\n}\n#endif\n\n/* only actually used on Unix */\nSEXP attribute_hidden do_capabilitiesX11(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n#ifdef Unix\n    return ScalarLogical(R_can_use_X11());\n#else\n    return ScalarLogical(FALSE);\n#endif\n}\n\nSEXP attribute_hidden do_capabilities(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP ans, ansnames;\n    int i = 0;\n#ifdef Unix\n# ifdef HAVE_X11\n    int X11 = NA_LOGICAL;\n# else\n    int X11 = FALSE;\n# endif\n#endif\n\n    checkArity(op, args);\n\n    PROTECT(ans = allocVector(LGLSXP, 18));\n    PROTECT(ansnames = allocVector(STRSXP, 18));\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"jpeg\"));\n#ifdef HAVE_JPEG\n# if defined Unix && !defined HAVE_WORKING_CAIRO\n    LOGICAL(ans)[i++] = X11;\n# else\n    LOGICAL(ans)[i++] = TRUE;\n# endif\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"png\"));\n#ifdef HAVE_PNG\n# if defined Unix && !defined HAVE_WORKING_CAIRO\n    LOGICAL(ans)[i++] = X11;\n# else /* Windows */\n    LOGICAL(ans)[i++] = TRUE;\n# endif\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"tiff\"));\n#ifdef HAVE_TIFF\n# if defined Unix && !defined HAVE_WORKING_CAIRO\n    LOGICAL(ans)[i++] = X11;\n# else /* Windows */\n    LOGICAL(ans)[i++] = TRUE;\n# endif\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"tcltk\"));\n#ifdef HAVE_TCLTK\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"X11\"));\n#ifdef HAVE_X11\n# if defined(Unix)\n    LOGICAL(ans)[i++] = X11;\n# else\n    LOGICAL(ans)[i++] = TRUE;\n# endif\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"aqua\"));\n#ifdef HAVE_AQUA\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"http/ftp\"));\n    LOGICAL(ans)[i++] = TRUE;\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"sockets\"));\n    LOGICAL(ans)[i++] = TRUE;\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"libxml\"));\n    LOGICAL(ans)[i++] = TRUE;\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"fifo\"));\n#if (defined(HAVE_MKFIFO) && defined(HAVE_FCNTL_H)) || defined(_WIN32)\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    /* This one is complex.  Set it to be true only in interactive use,\n       with the Windows and GNOME GUIs (but not Tk GUI) or under Unix\n       if readline is available and in use. */\n    SET_STRING_ELT(ansnames, i, mkChar(\"cledit\"));\n    LOGICAL(ans)[i] = FALSE;\n#if defined(Win32)\n    if (R_Interactive) LOGICAL(ans)[i] = TRUE;\n#endif\n#ifdef Unix\n    if (strcmp(R_GUIType, \"GNOME\") == 0) {  /* always interactive */\n\tLOGICAL(ans)[i] = TRUE;  /* also AQUA ? */\n    } else {\n#if defined(HAVE_LIBREADLINE) && defined(HAVE_READLINE_HISTORY_H)\n\textern Rboolean UsingReadline;\n\tif (R_Interactive && UsingReadline) LOGICAL(ans)[i] = TRUE;\n#endif\n    }\n#endif\n    i++;\n\n/* always true as from R 2.10.0 */\n    SET_STRING_ELT(ansnames, i, mkChar(\"iconv\"));\n    LOGICAL(ans)[i++] = TRUE;\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"NLS\"));\n#ifdef ENABLE_NLS\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"profmem\"));\n#ifdef R_MEMORY_PROFILING\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"cairo\"));\n#ifdef HAVE_WORKING_CAIRO\n    LOGICAL(ans)[i++] = TRUE;\n#elif defined(Win32)\n{\n    /* This is true iff winCairo.dll is available */\n    struct stat sb;\n    char path[1000];\n    snprintf(path, 1000, \"%s/library/grDevices/libs/%s/winCairo.dll\",\n\t     R_HomeDir(), R_ARCH);\n    LOGICAL(ans)[i++] = stat(path, &sb) == 0;\n}\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"ICU\"));\n#ifdef USE_ICU\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"long.double\"));\n    LOGICAL(ans)[i++] = sizeof(LDOUBLE) > sizeof(double);\n\n    SET_STRING_ELT(ansnames, i, mkChar(\"libcurl\"));\n#ifdef HAVE_LIBCURL\n    LOGICAL(ans)[i++] = TRUE;\n#else\n    LOGICAL(ans)[i++] = FALSE;\n#endif\n\n\n    setAttrib(ans, R_NamesSymbol, ansnames);\n    UNPROTECT(2);\n    return ans;\n}\n\nSEXP attribute_hidden do_sysgetpid(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n    return ScalarInteger(getpid());\n}\n\n\n/* NB: we save errno immediately after the call here.  This should not\n  be necessary on a POSIX OS, but it is on Windows, where it seems\n  that on some versions strerror itself changes errno (something\n  allowed in C99 but disallowed in POSIX).  Also, something under\n  warning() might set errno in a future version.\n*/\n#ifndef Win32\n/* mkdir is defined in <sys/stat.h> */\nSEXP attribute_hidden do_dircreate(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP path;\n    int res, show, recursive, mode, serrno = 0;\n    char *p, dir[PATH_MAX];\n\n    checkArity(op, args);\n    path = CAR(args);\n    if (!isString(path) || LENGTH(path) != 1)\n\terror(_(\"invalid '%s' argument\"), \"path\");\n    if (STRING_ELT(path, 0) == NA_STRING) return ScalarLogical(FALSE);\n    show = asLogical(CADR(args));\n    if (show == NA_LOGICAL) show = 0;\n    recursive = asLogical(CADDR(args));\n    if (recursive == NA_LOGICAL) recursive = 0;\n    mode = asInteger(CADDDR(args));\n    if (mode == NA_LOGICAL) mode = 0777;\n    strcpy(dir, R_ExpandFileName(translateChar(STRING_ELT(path, 0))));\n    /* remove trailing slashes */\n    p = dir + strlen(dir) - 1;\n    while (*p == '/' && strlen(dir) > 1) *p-- = '\\0';\n    if (recursive) {\n\tp = dir;\n\twhile ((p = Rf_strchr(p+1, '/'))) {\n\t    *p = '\\0';\n\t    struct stat sb;\n\t    res = stat(dir, &sb);\n\t    if (res == 0) {\n\t\tif (! S_ISDIR (sb.st_mode)) {\n\t\t    /* file already exists but is not a directory */\n\t\t    res = -1;\n\t\t    serrno = ENOTDIR;\n\t\t    goto end;\n\t\t}\n\t    } else if (errno != ENOENT || !*dir) {\n\t\tserrno = errno;\n\t\tgoto end;\n\t    } else\n\t\tres = mkdir(dir, (mode_t) mode);\n\n\t    /* Solaris 10 returns ENOSYS on automount, PR#13834\n\t       EROFS is allowed by POSIX, so we skip that too */\n\t    serrno = errno;\n\t    if (res && serrno != EEXIST && serrno != ENOSYS && serrno != EROFS)\n\t\tgoto end;\n\t    *p = '/';\n\t}\n    }\n    res = mkdir(dir, (mode_t) mode);\n    serrno = errno;\n    if (show && res && serrno == EEXIST)\n\twarning(_(\"'%s' already exists\"), dir);\nend:\n    if (show && res && serrno != EEXIST)\n\twarning(_(\"cannot create dir '%s', reason '%s'\"), dir,\n\t\tstrerror(serrno));\n    return ScalarLogical(res == 0);\n}\n#else /* Win32 */\n#include <io.h> /* mkdir is defined here */\nSEXP attribute_hidden do_dircreate(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP  path;\n    wchar_t *p, dir[MAX_PATH];\n    int res, show, recursive, serrno = 0, maybeshare;\n\n    checkArity(op, args);\n    path = CAR(args);\n    if (!isString(path) || LENGTH(path) != 1)\n\terror(_(\"invalid '%s' argument\"), \"path\");\n    if (STRING_ELT(path, 0) == NA_STRING) return ScalarLogical(FALSE);\n    show = asLogical(CADR(args));\n    if (show == NA_LOGICAL) show = 0;\n    recursive = asLogical(CADDR(args));\n    if (recursive == NA_LOGICAL) recursive = 0;\n    p = filenameToWchar(STRING_ELT(path, 0), TRUE);\n    if (wcslen(p) >= MAX_PATH)\n    \terror(_(\"'%s' too long\"), \"path\");\n    wcsncpy(dir, p, MAX_PATH);\n    for (p = dir; *p; p++) if (*p == L'/') *p = L'\\\\';\n    /* remove trailing slashes */\n    p = dir + wcslen(dir) - 1;\n    while (*p == L'\\\\' && wcslen(dir) > 1 && *(p-1) != L':') *p-- = L'\\0';\n    if (recursive) {\n\tp = dir;\n\tmaybeshare = 0;\n\t/* skip leading \\\\server\\\\share, \\\\share */\n\t/* FIXME: is \\\\share (still) possible? */\n\tif (*p == L'\\\\' && *(p+1) == L'\\\\') {\n\t    p += 2;\n\t    p = wcschr(p, L'\\\\');\n\t    maybeshare = 1; /* the next element may be a share name */\n\t}\n\twhile ((p = wcschr(p+1, L'\\\\'))) {\n\t    *p = L'\\0';\n\t    if (*(p-1) != L':') {\n\t\tres = _wmkdir(dir);\n\t\tserrno = errno;\n\t\tif (res && serrno != EEXIST && !maybeshare) goto end;\n\t    }\n\t    maybeshare = 0;\n\t    *p = L'\\\\';\n\t}\n    }\n    res = _wmkdir(dir);\n    serrno = errno;\n    if (show && res) {\n    \tif (serrno == EEXIST)\n\t    warning(_(\"'%ls' already exists\"), dir);\n        else\n            warning(_(\"cannot create dir '%ls', reason '%s'\"), dir,\n            \t    strerror(serrno));\n    }\n    return ScalarLogical(res == 0);\nend:\n    if (show && res && serrno != EEXIST)\n\twarning(_(\"cannot create dir '%ls', reason '%s'\"), dir,\n\t\tstrerror(serrno));\n    return ScalarLogical(res == 0);\n}\n#endif\n\n/* take file/dir 'name' in dir 'from' and copy it to 'to'\n   'from', 'to' should have trailing path separator if needed.\n*/\n#ifdef Win32\nstatic void copyFileTime(const wchar_t *from, const wchar_t * to)\n{\n    HANDLE hFrom, hTo;\n    FILETIME modft;\n\n    hFrom = CreateFileW(from, GENERIC_READ, 0, NULL, OPEN_EXISTING,\n\t\t\tFILE_FLAG_BACKUP_SEMANTICS, NULL);\n    if (hFrom == INVALID_HANDLE_VALUE) return;\n    int res  = GetFileTime(hFrom, NULL, NULL, &modft);\n    CloseHandle(hFrom);\n    if(!res) return;\n\n    hTo = CreateFileW(to, GENERIC_WRITE, 0, NULL, OPEN_EXISTING,\n\t\t      FILE_FLAG_BACKUP_SEMANTICS, NULL);\n    if (hTo == INVALID_HANDLE_VALUE) return;\n    SetFileTime(hTo, NULL, NULL, &modft);\n    CloseHandle(hTo);\n}\n\nstatic int do_copy(const wchar_t* from, const wchar_t* name, const wchar_t* to,\n\t\t   int over, int recursive, int perms, int dates, int depth)\n{\n    R_CheckUserInterrupt(); // includes stack check\n    if(depth > 100) {\n\twarning(_(\"too deep nesting\"));\n\treturn 1;\n    }\n    struct _stati64 sb;\n    int nc, nfail = 0, res;\n    wchar_t dest[PATH_MAX + 1], this[PATH_MAX + 1];\n\n    if (wcslen(from) + wcslen(name) >= PATH_MAX) {\n\twarning(_(\"over-long path\"));\n\treturn 1;\n    }\n    wsprintfW(this, L\"%ls%ls\", from, name);\n    _wstati64(this, &sb);\n    if ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\t_WDIR *dir;\n\tstruct _wdirent *de;\n\twchar_t p[PATH_MAX + 1];\n\n\tif (!recursive) return 1;\n\tnc = wcslen(to);\n\tif (wcslen(to) + wcslen(name) >= PATH_MAX) {\n\t    warning(_(\"over-long path\"));\n\t    return 1;\n\t}\n\twsprintfW(dest, L\"%ls%ls\", to, name);\n\t/* We could set the mode (only the 200 part matters) later */\n\tres = _wmkdir(dest);\n\tif (res && errno != EEXIST) {\n\t    warning(_(\"problem creating directory %ls: %s\"),\n\t\t    dest, strerror(errno));\n\t    return 1;\n\t}\n\t// NB Windows' mkdir appears to require \\ not /.\n\tif ((dir = _wopendir(this)) != NULL) {\n\t    depth++;\n\t    while ((de = _wreaddir(dir))) {\n\t\tif (!wcscmp(de->d_name, L\".\") || !wcscmp(de->d_name, L\"..\"))\n\t\t    continue;\n\t\tif (wcslen(name) + wcslen(de->d_name) + 1 >= PATH_MAX) {\n\t\t    warning(_(\"over-long path\"));\n\t\t    return 1;\n\t\t}\n\t\twsprintfW(p, L\"%ls%\\\\%ls\", name, de->d_name);\n\t\tnfail += do_copy(from, p, to, over, recursive,\n\t\t\t\t perms, dates, depth);\n\t    }\n\t    _wclosedir(dir);\n\t} else {\n\t    warning(_(\"problem reading dir %ls: %s\"), this, strerror(errno));\n\t    nfail++; /* we were unable to read a dir */\n\t}\n\tif(dates) copyFileTime(this, dest);\n    } else { /* a file */\n\tFILE *fp1 = NULL, *fp2 = NULL;\n\twchar_t buf[APPENDBUFSIZE];\n\n\tnfail = 0;\n\tnc = wcslen(to);\n\tif (nc + wcslen(name) >= PATH_MAX) {\n\t    warning(_(\"over-long path length\"));\n\t    nfail++;\n\t    goto copy_error;\n\t}\n\twsprintfW(dest, L\"%ls%ls\", to, name);\n\tif (over || !R_WFileExists(dest)) { /* FIXME */\n\t    if ((fp1 = _wfopen(this, L\"rb\")) == NULL ||\n\t\t(fp2 = _wfopen(dest, L\"wb\")) == NULL) {\n\t\twarning(_(\"problem copying %ls to %ls: %s\"),\n\t\t\tthis, dest, strerror(errno));\n\t\tnfail++;\n\t\tgoto copy_error;\n\t    }\n\t    while ((nc = fread(buf, 1, APPENDBUFSIZE, fp1)) == APPENDBUFSIZE)\n\t\tif (fwrite(buf, 1, APPENDBUFSIZE, fp2) != APPENDBUFSIZE) {\n\t\t    nfail++;\n\t\t    goto copy_error;\n\t\t}\n\t    if (fwrite(buf, 1, nc, fp2) != nc) {\n\t\tnfail++;\n\t\tgoto copy_error;\n\t    }\n\t} else if (!over) {\n\t  nfail++;\n\t  goto copy_error;\n\t}\n\tif(fp1) fclose(fp1); fp1 = NULL;\n\tif(fp2) fclose(fp2); fp2 = NULL;\n\t/* FIXME: perhaps manipulate mode as we do in Sys.chmod? */\n\tif(perms) _wchmod(dest, sb.st_mode & 0777);\n\tif(dates) copyFileTime(this, dest);\ncopy_error:\n\tif(fp2) fclose(fp2);\n\tif(fp1) fclose(fp1);\n    }\n    return nfail;\n}\n\n/* file.copy(files, dir, over, recursive=TRUE, perms), only */\nSEXP attribute_hidden do_filecopy(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, to, ans;\n    wchar_t *p, dir[PATH_MAX], from[PATH_MAX], name[PATH_MAX];\n    int i, nfiles, over, recursive, perms, dates, nfail;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    nfiles = length(fn);\n    PROTECT(ans = allocVector(LGLSXP, nfiles));\n    if (nfiles > 0) {\n\targs = CDR(args);\n\tif (!isString(fn))\n\t    error(_(\"invalid '%s' argument\"), \"from\");\n\tto = CAR(args); args = CDR(args);\n\tif (!isString(to) || LENGTH(to) != 1)\n\t    error(_(\"invalid '%s' argument\"), \"to\");\n\tover = asLogical(CAR(args)); args = CDR(args);\n\tif (over == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"overwrite\");\n\trecursive = asLogical(CAR(args)); args = CDR(args);\n\tif (recursive == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"recursive\");\n\tperms = asLogical(CAR(args)); args = CDR(args);\n\tif (perms == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"copy.mode\");\n\tdates = asLogical(CAR(args));\n\tif (dates == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"copy.dates\");\n\tp = filenameToWchar(STRING_ELT(to, 0), TRUE);\n\tif (wcslen(p) >= PATH_MAX)\n\t    error(_(\"'%s' path too long\"), \"to\");\n\twcsncpy(dir, p, PATH_MAX);\n\tdir[PATH_MAX - 1] = L'\\0';\n\tif (*(dir + (wcslen(dir) - 1)) !=  L'\\\\')\n\t    wcsncat(dir, L\"\\\\\", PATH_MAX);\n\tfor (i = 0; i < nfiles; i++) {\n\t    if (STRING_ELT(fn, i) != NA_STRING) {\n\t    \tp = filenameToWchar(STRING_ELT(fn, i), TRUE);\n\t    \tif (wcslen(p) >= PATH_MAX)\n\t    \t    error(_(\"'%s' path too long\"), \"from\");\n\t\twcsncpy(from, p, PATH_MAX);\n\t\tfrom[PATH_MAX - 1] = L'\\0';\n\t\tif(wcslen(from)) {\n\t\t    /* If there was a trailing sep, this is a mistake */\n\t\t    p = from + (wcslen(from) - 1);\n\t\t    if(*p == L'\\\\') *p = L'\\0';\n\t\t    p = wcsrchr(from, L'\\\\') ;\n\t\t    if (p) {\n\t\t\twcsncpy(name, p+1, PATH_MAX);\n\t\t\tname[PATH_MAX - 1] = L'\\0';\n\t\t\t*(p+1) = L'\\0';\n\t\t    } else {\n\t\t\tif(wcslen(from) > 2 && from[1] == L':') {\n\t\t\t    wcsncpy(name, from+2, PATH_MAX);\n\t\t\t    name[PATH_MAX - 1] = L'\\0';\n\t\t\t    from[2] = L'\\0';\n\t\t\t} else {\n\t\t\t    wcsncpy(name, from, PATH_MAX);\n\t\t\t    name[PATH_MAX - 1] = L'\\0';\n\t\t\t    wcsncpy(from, L\".\\\\\", PATH_MAX);\n\t\t\t}\n\t\t    }\n\t\t    nfail = do_copy(from, name, dir, over, recursive,\n\t\t\t\t    perms, dates, 1);\n\t\t} else nfail = 1;\n\t    } else nfail = 1;\n\t    LOGICAL(ans)[i] = (nfail == 0);\n\t}\n    }\n    UNPROTECT(1);\n    return ans;\n}\n\n#else\n\n/* Only 10.13 (High Sierra) has this, but the headers in Xcode 9 on 10.12\n   declare it, for some people. */\n#if defined(__APPLE__) && defined(MACOS_SIERRA)\n# undef HAVE_UTIMENSAT\n#endif\n\n#if defined(HAVE_UTIMENSAT)\n# include <fcntl.h>\n# include <sys/stat.h>\n#elif defined(HAVE_UTIMES)\n# include <sys/time.h>\n#elif defined(HAVE_UTIME)\n# include <utime.h>\n#endif\n\nstatic void copyFileTime(const char *from, const char * to)\n{\n    struct stat sb;\n    if(stat(from, &sb)) return;\n    double ftime;\n\n#ifdef STAT_TIMESPEC\n    ftime = (double) STAT_TIMESPEC(sb, st_mtim).tv_sec\n\t+ 1e-9 * (double) STAT_TIMESPEC(sb, st_mtim).tv_nsec;\n#elif defined STAT_TIMESPEC_NS\n    ftime = STAT_TIMESPEC_NS (sb, st_mtim);\n#else\n    ftime = (double) sb.st_mtime;\n#endif\n\n#if defined(HAVE_UTIMENSAT)\n    struct timespec times[2];\n\n    times[0].tv_sec = times[1].tv_sec = (int)ftime;\n    times[0].tv_nsec = times[1].tv_nsec = (int)(1e9*(ftime - (int)ftime));\n    utimensat(AT_FDCWD, to, times, 0);\n#elif defined(HAVE_UTIMES)\n    struct timeval times[2];\n\n    times[0].tv_sec = times[1].tv_sec = (int)ftime;\n    times[0].tv_usec = times[1].tv_usec = (int)(1e6*(ftime - (int)ftime));\n    utimes(to, times);\n#elif defined(HAVE_UTIME)\n    struct utimbuf settime;\n\n    settime.actime = settime.modtime = (int)ftime;\n    utime(to, &settime);\n#endif\n}\n\nstatic int do_copy(const char* from, const char* name, const char* to,\n\t\t   int over, int recursive, int perms, int dates, int depth)\n{\n    R_CheckUserInterrupt(); // includes stack check\n    if(depth > 100) {\n\twarning(_(\"too deep nesting\"));\n\treturn 1;\n    }\n\n    struct stat sb;\n    int nfail = 0, res, mask;\n    char dest[PATH_MAX+1], this[PATH_MAX+1];\n\n#ifdef HAVE_UMASK\n    int um = umask(0); umask((mode_t) um);\n    mask = 0777 & ~um;\n#else\n    mask = 0777;\n#endif\n    /* REprintf(\"from: %s, name: %s, to: %s\\n\", from, name, to); */\n    if (strlen(from) + strlen(name) >= PATH_MAX) {\n\twarning(_(\"over-long path length\"));\n\treturn 1;\n    }\n    snprintf(this, PATH_MAX+1, \"%s%s\", from, name);\n    /* Here we want the target not the link */\n    stat(this, &sb);\n    if ((sb.st_mode & S_IFDIR) > 0) { /* a directory */\n\tDIR *dir;\n\tstruct dirent *de;\n\tchar p[PATH_MAX+1];\n\n\tif (!recursive) return 1;\n\tif (strlen(to) + strlen(name) >= PATH_MAX) {\n\t    warning(_(\"over-long path length\"));\n\t    return 1;\n\t}\n\tsnprintf(dest, PATH_MAX+1, \"%s%s\", to, name);\n\t/* If a directory does not have write permission for the user,\n\t   we will fail to create files in that directory, so defer\n\t   setting mode */\n\tres = mkdir(dest, 0700);\n\tif (res && errno != EEXIST) {\n\t    warning(_(\"problem creating directory %s: %s\"),\n\t\t    this, strerror(errno));\n\t    return 1;\n\t}\n\tstrcat(dest, \"/\");\n\tif ((dir = opendir(this)) != NULL) {\n\t    depth++;\n\t    while ((de = readdir(dir))) {\n\t\tif (streql(de->d_name, \".\") || streql(de->d_name, \"..\"))\n\t\t    continue;\n\t\tif (strlen(name) + strlen(de->d_name) + 1 >= PATH_MAX) {\n\t\t    warning(_(\"over-long path length\"));\n\t\t    closedir(dir);\n\t\t    return 1;\n\t\t}\n\t\tsnprintf(p, PATH_MAX+1, \"%s/%s\", name, de->d_name);\n\t\tnfail += do_copy(from, p, to, over, recursive,\n\t\t\t\t perms, dates, depth);\n\t    }\n\t    closedir(dir);\n\t} else {\n\t    warning(_(\"problem reading directory %s: %s\"),\n\t\t    this, strerror(errno));\n\t    nfail++; /* we were unable to read a dir */\n\t}\n\tchmod(dest, (mode_t) (perms ? (sb.st_mode & mask): mask));\n\tif(dates) copyFileTime(this, dest);\n    } else { /* a file */\n\tFILE *fp1 = NULL, *fp2 = NULL;\n\tchar buf[APPENDBUFSIZE];\n\n\tnfail = 0;\n\tsize_t nc = strlen(to);\n\tif (strlen(to) + strlen(name) >= PATH_MAX) {\n\t    warning(_(\"over-long path length\"));\n\t    nfail++;\n\t    goto copy_error;\n\t}\n\tsnprintf(dest, PATH_MAX+1, \"%s%s\", to, name);\n\tif (over || !R_FileExists(dest)) {\n\t    /* REprintf(\"copying %s to %s\\n\", this, dest); */\n\t    if ((fp1 = R_fopen(this, \"rb\")) == NULL ||\n\t\t(fp2 = R_fopen(dest, \"wb\")) == NULL) {\n\t\twarning(_(\"problem copying %s to %s: %s\"),\n\t\t\tthis, dest, strerror(errno));\n\t\tnfail++;\n\t\tgoto copy_error;\n\t    }\n\t    while ((nc = fread(buf, 1, APPENDBUFSIZE, fp1)) == APPENDBUFSIZE)\n\t\tif (fwrite(buf, 1, APPENDBUFSIZE, fp2) != APPENDBUFSIZE) {\n\t\t    nfail++;\n\t\t    goto copy_error;\n\t\t}\n\t    if (fwrite(buf, 1, nc, fp2) != nc) {\n\t\tnfail++;\n\t\tgoto copy_error;\n\t    }\n\t    if(fp2) {fclose(fp2); fp2 = NULL;}\n\t    if(perms) chmod(dest, sb.st_mode & mask);\n\t    if(dates) copyFileTime(this, dest);\n\t} else if (!over)\n\t    nfail++;\ncopy_error:\n\tif(fp2) fclose(fp2);\n\tif(fp1) fclose(fp1);\n    }\n    return nfail;\n}\n\n/* file.copy(files, dir, recursive), only */\nSEXP attribute_hidden do_filecopy(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP fn, to, ans;\n    char *p, dir[PATH_MAX], from[PATH_MAX], name[PATH_MAX];\n    int i, nfiles, over, recursive, perms, dates, nfail;\n\n    checkArity(op, args);\n    fn = CAR(args);\n    nfiles = length(fn);\n    PROTECT(ans = allocVector(LGLSXP, nfiles));\n    if (nfiles > 0) {\n\targs = CDR(args);\n\tif (!isString(fn))\n\t    error(_(\"invalid '%s' argument\"), \"from\");\n\tto = CAR(args); args = CDR(args);\n\tif (!isString(to) || LENGTH(to) != 1)\n\t    error(_(\"invalid '%s' argument\"), \"to\");\n\tover = asLogical(CAR(args)); args = CDR(args);\n\tif (over == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"overwrite\");\n\trecursive = asLogical(CAR(args)); args = CDR(args);\n\tif (recursive == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"recursive\");\n\tperms = asLogical(CAR(args)); args = CDR(args);\n\tif (perms == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"copy.mode\");\n\tdates = asLogical(CAR(args));\n\tif (dates == NA_LOGICAL)\n\t    error(_(\"invalid '%s' argument\"), \"copy.dates\");\n\tconst char* q = R_ExpandFileName(translateChar(STRING_ELT(to, 0)));\n\tif(strlen(q) > PATH_MAX - 2) // allow for '/' and terminator\n\t    error(_(\"invalid '%s' argument\"), \"to\");\n\tstrncpy(dir, q, PATH_MAX);\n\tdir[PATH_MAX - 1] = '\\0';\n\tif (*(dir + (strlen(dir) - 1)) !=  '/')\n\t    strcat(dir, \"/\");\n\tfor (i = 0; i < nfiles; i++) {\n\t    if (STRING_ELT(fn, i) != NA_STRING) {\n\t\tstrncpy(from,\n\t\t\tR_ExpandFileName(translateChar(STRING_ELT(fn, i))),\n\t\t\tPATH_MAX);\n\t\tfrom[PATH_MAX - 1] = '\\0';\n\t\tsize_t ll = strlen(from);\n\t\tif (ll) {  // people do pass \"\"\n\t\t    /* If there is a trailing sep, this is a mistake */\n\t\t    p = from + (ll - 1);\n\t\t    if(*p == '/') *p = '\\0';\n\t\t    p = strrchr(from, '/') ;\n\t\t    if (p) {\n\t\t\tstrncpy(name, p+1, PATH_MAX);\n\t\t\tname[PATH_MAX - 1] = '\\0';\n\t\t\t*(p+1) = '\\0';\n\t\t    } else {\n\t\t\tstrncpy(name, from, PATH_MAX);\n\t\t\tname[PATH_MAX - 1] = '\\0';\n\t\t\tstrncpy(from, \"./\", PATH_MAX);\n\t\t    }\n\t\t    nfail = do_copy(from, name, dir, over, recursive,\n\t\t\t\t    perms, dates, 1);\n\t\t} else nfail = 1;\n\t    } else nfail = 1;\n\t    LOGICAL(ans)[i] = (nfail == 0);\n\t}\n    }\n    UNPROTECT(1);\n    return ans;\n}\n#endif\n\nSEXP attribute_hidden do_l10n_info(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n#ifdef Win32\n    int len = 4;\n#else\n    int len = 3;\n#endif\n    SEXP ans, names;\n    checkArity(op, args);\n    PROTECT(ans = allocVector(VECSXP, len));\n    PROTECT(names = allocVector(STRSXP, len));\n    SET_STRING_ELT(names, 0, mkChar(\"MBCS\"));\n    SET_STRING_ELT(names, 1, mkChar(\"UTF-8\"));\n    SET_STRING_ELT(names, 2, mkChar(\"Latin-1\"));\n    SET_VECTOR_ELT(ans, 0, ScalarLogical(mbcslocale));\n    SET_VECTOR_ELT(ans, 1, ScalarLogical(utf8locale));\n    SET_VECTOR_ELT(ans, 2, ScalarLogical(latin1locale));\n#ifdef Win32\n    SET_STRING_ELT(names, 3, mkChar(\"codepage\"));\n    SET_VECTOR_ELT(ans, 3, ScalarInteger(localeCP));\n#endif\n    setAttrib(ans, R_NamesSymbol, names);\n    UNPROTECT(2);\n    return ans;\n}\n\n/* do_normalizepath moved to util.c in R 2.13.0 */\n\nSEXP attribute_hidden do_syschmod(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n#ifdef HAVE_CHMOD\n    SEXP paths, smode, ans;\n    int i, m, n, *modes, res;\n    mode_t um = 0;\n\n    checkArity(op, args);\n    paths = CAR(args);\n    if (!isString(paths))\n\terror(_(\"invalid '%s' argument\"), \"paths\");\n    n = LENGTH(paths);\n    PROTECT(smode = coerceVector(CADR(args), INTSXP));\n    modes = INTEGER(smode);\n    m = LENGTH(smode);\n    if(!m && n) error(_(\"'mode' must be of length at least one\"));\n    int useUmask = asLogical(CADDR(args));\n    if (useUmask == NA_LOGICAL)\n\terror(_(\"invalid '%s' argument\"), \"use_umask\");\n#ifdef HAVE_UMASK\n    um = umask(0); umask(um);\n#endif\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) {\n\tmode_t mode = (mode_t) modes[i % m];\n\tif (mode == NA_INTEGER) mode = 0777;\n#ifdef HAVE_UMASK\n\tif(useUmask) mode = mode & ~um;\n#endif\n#ifdef Win32\n\t/* Windows' _[w]chmod seems only to support read access\n\t   or read-write access.  _S_IWRITE is 0200.\n\t*/\n\tmode = (mode & 0200) ? (_S_IWRITE | _S_IREAD): _S_IREAD;\n#endif\n\tif (STRING_ELT(paths, i) != NA_STRING) {\n#ifdef Win32\n\t    res = _wchmod(filenameToWchar(STRING_ELT(paths, i), TRUE), mode);\n#else\n\t    res = chmod(R_ExpandFileName(translateChar(STRING_ELT(paths, i))),\n\t\t\tmode);\n#endif\n\t} else res = 1;\n\tLOGICAL(ans)[i] = (res == 0);\n    }\n    UNPROTECT(2);\n    return ans;\n#else\n    SEXP paths, ans;\n    int i, n;\n\n    checkArity(op, args);\n    paths = CAR(args);\n    if (!isString(paths))\n\terror(_(\"invalid '%s' argument\"), \"paths\");\n    n = LENGTH(paths);\n    warning(\"insufficient OS support on this platform\");\n    PROTECT(ans = allocVector(LGLSXP, n));\n    for (i = 0; i < n; i++) LOGICAL(ans)[i] = 0;\n    UNPROTECT(1);\n    return ans;\n#endif\n}\n\nSEXP attribute_hidden do_sysumask(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP ans;\n    int mode;\n    mode_t res = 0;\n\n    checkArity(op, args);\n    mode = asInteger(CAR(args));\n#ifdef HAVE_UMASK\n    if (mode == NA_INTEGER) {\n\tres = umask(0);\n\tumask(res);\n\tR_Visible = TRUE;\n    } else {\n\tres = umask((mode_t) mode);\n\tR_Visible = FALSE;\n    }\n#else\n    warning(_(\"insufficient OS support on this platform\"));\n    R_Visible = FALSE;\n#endif\n    PROTECT(ans = ScalarInteger(res));\n    setAttrib(ans, R_ClassSymbol, mkString(\"octmode\"));\n    UNPROTECT(1);\n    return ans;\n}\n\nSEXP attribute_hidden do_readlink(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    checkArity(op, args);\n    SEXP paths = CAR(args);\n    if(!isString(paths))\n\terror(_(\"invalid '%s' argument\"), \"paths\");\n    int n = LENGTH(paths);\n    SEXP ans = PROTECT(allocVector(STRSXP, n));\n#ifdef HAVE_READLINK\n    char buf[PATH_MAX+1];\n    for (int i = 0; i < n; i++) {\n\tmemset(buf, 0, PATH_MAX+1);\n\tssize_t res = \n\t    readlink(R_ExpandFileName(translateChar(STRING_ELT(paths, i))),\n\t\t     buf, PATH_MAX);\n\tif (res == PATH_MAX) {\n\t    SET_STRING_ELT(ans, i, mkChar(buf));\n\t    warning(\"possible truncation of value for element %d\", i + 1);\n\t} else if (res >= 0) SET_STRING_ELT(ans, i, mkChar(buf));\n\telse if (errno == EINVAL) SET_STRING_ELT(ans, i, mkChar(\"\"));\n\telse SET_STRING_ELT(ans, i,  NA_STRING);\n    }\n#endif\n    UNPROTECT(1);\n    return ans;\n}\n\n\nSEXP attribute_hidden do_Cstack_info(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    SEXP ans, nms;\n\n    checkArity(op, args);\n    PROTECT(ans = allocVector(INTSXP, 4));\n    PROTECT(nms = allocVector(STRSXP, 4));\n    /* FIXME: could be out of range */\n    INTEGER(ans)[0] = (R_CStackLimit == -1) ? NA_INTEGER : (int) R_CStackLimit;\n    INTEGER(ans)[1] = (R_CStackLimit == -1) ? NA_INTEGER : (int)\n\t(R_CStackDir * (R_CStackStart - (uintptr_t) &ans));\n    INTEGER(ans)[2] = R_CStackDir;\n    INTEGER(ans)[3] = R_EvalDepth;\n    SET_STRING_ELT(nms, 0, mkChar(\"size\"));\n    SET_STRING_ELT(nms, 1, mkChar(\"current\"));\n    SET_STRING_ELT(nms, 2, mkChar(\"direction\"));\n    SET_STRING_ELT(nms, 3, mkChar(\"eval_depth\"));\n\n    UNPROTECT(2);\n    setAttrib(ans, R_NamesSymbol, nms);\n    return ans;\n}\n\n#ifdef Win32\nstatic int winSetFileTime(const char *fn, double ftime)\n{\n    SYSTEMTIME st;\n    FILETIME modft;\n    struct tm *utctm;\n    HANDLE hFile;\n    time_t ftimei = (time_t) ftime;\n\n    utctm = gmtime(&ftimei);\n    if (!utctm) return 0;\n\n    st.wYear         = (WORD) utctm->tm_year + 1900;\n    st.wMonth        = (WORD) utctm->tm_mon + 1;\n    st.wDayOfWeek    = (WORD) utctm->tm_wday;\n    st.wDay          = (WORD) utctm->tm_mday;\n    st.wHour         = (WORD) utctm->tm_hour;\n    st.wMinute       = (WORD) utctm->tm_min;\n    st.wSecond       = (WORD) utctm->tm_sec;\n    st.wMilliseconds = (WORD) 1000*(ftime - ftimei);\n    if (!SystemTimeToFileTime(&st, &modft)) return 0;\n\n    hFile = CreateFile(fn, GENERIC_WRITE, 0, NULL, OPEN_EXISTING,\n\t\t       FILE_FLAG_BACKUP_SEMANTICS, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) return 0;\n    int res  = SetFileTime(hFile, NULL, NULL, &modft);\n    CloseHandle(hFile);\n    return res != 0; /* success is non-zero */\n}\n#endif\n\nSEXP attribute_hidden\ndo_setFileTime(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n    const char *fn = translateChar(STRING_ELT(CAR(args), 0));\n    double ftime = asReal(CADR(args));\n    int res;\n\n#ifdef Win32\n    res  = winSetFileTime(fn, ftime);\n#elif defined(HAVE_UTIMENSAT)\n    struct timespec times[2];\n\n    times[0].tv_sec = times[1].tv_sec = (int)ftime;\n    times[0].tv_nsec = times[1].tv_nsec = (int)(1e9*(ftime - (int)ftime));\n\n    res = utimensat(AT_FDCWD, fn, times, 0) == 0;\n#elif defined(HAVE_UTIMES)\n    struct timeval times[2];\n\n    times[0].tv_sec = times[1].tv_sec = (int)ftime;\n    times[0].tv_usec = times[1].tv_usec = (int)(1e6*(ftime - (int)ftime));\n    res = utimes(fn, times) == 0;\n#elif defined(HAVE_UTIME)\n    struct utimbuf settime;\n\n    settime.actime = settime.modtime = (int)ftime;\n    res = utime(fn, &settime) == 0;\n#endif\n    return ScalarLogical(res);\n}\n\n#ifdef Win32\n/* based on ideas in\n   http://www.codeproject.com/KB/winsdk/junctionpoints.aspx\n*/\ntypedef struct TMN_REPARSE_DATA_BUFFER\n{\n    DWORD  ReparseTag;\n    WORD   ReparseDataLength;\n    WORD   Reserved;\n    WORD   SubstituteNameOffset;\n    WORD   SubstituteNameLength;\n    WORD   PrintNameOffset;\n    WORD   PrintNameLength;\n    WCHAR  PathBuffer[1024];\n} TMN_REPARSE_DATA_BUFFER;\n\nSEXP attribute_hidden do_mkjunction(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    wchar_t from[10000];\n    const wchar_t *to;\n\n    checkArity(op, args);\n    /* from and to are both directories: and to exists */\n    wcscpy(from, filenameToWchar(STRING_ELT(CAR(args), 0), FALSE));\n    to = filenameToWchar(STRING_ELT(CADR(args), 0), TRUE);\n    // printf(\"ln %ls %ls\\n\", from, to);\n\n    HANDLE hd =\n\tCreateFileW(to, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING,\n\t\t    FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT,\n\t\t    0);\n    if(hd == INVALID_HANDLE_VALUE) {\n\twarning(\"cannot open reparse point '%ls', reason '%s'\",\n\t\tto, formatError(GetLastError()));\n\treturn ScalarLogical(1);\n    }\n    TMN_REPARSE_DATA_BUFFER rdb;\n    const size_t nbytes = wcslen(from) * 2;\n    rdb.ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n    rdb.ReparseDataLength = nbytes + 12;\n    wcscpy(rdb.PathBuffer, from);\n    rdb.Reserved = 0;\n    rdb.SubstituteNameOffset = 0;\n    rdb.SubstituteNameLength = nbytes;\n    rdb.PrintNameOffset = nbytes + 2;\n    rdb.PrintNameLength = 0;\n    DWORD dwBytes;\n    const BOOL bOK =\n\tDeviceIoControl(hd, FSCTL_SET_REPARSE_POINT, &rdb,\n\t\t\t8 /* header */ + rdb.ReparseDataLength,\n\t\t\tNULL, 0, &dwBytes, 0);\n    CloseHandle(hd);\n    if(!bOK)\n\twarning(\"cannot set reparse point '%ls', reason '%s'\",\n\t\tto, formatError(GetLastError()));\n    return ScalarLogical(bOK != 0);\n}\n#endif\n\n#include <zlib.h>\n#include <bzlib.h>\n#include <lzma.h>\n#ifdef HAVE_PCRE_PCRE_H\n# include <pcre/pcre.h>\n#else\n# include <pcre.h>\n#endif\n\n#ifdef USE_ICU\n# ifndef USE_ICU_APPLE\n#  include <unicode/uversion.h>\n# else\n#  define U_MAX_VERSION_LENGTH 4\n#  define U_MAX_VERSION_STRING_LENGTH 20\ntypedef uint8_t UVersionInfo[U_MAX_VERSION_LENGTH];\nvoid u_versionToString(const UVersionInfo versionArray, char *versionString);\nvoid u_getVersion(UVersionInfo versionArray);\n# endif\n#endif\n\n#include <iconv.h>\n#if defined(__GLIBC__)\n# include <gnu/libc-version.h>\n#endif\n\n#ifdef HAVE_LIBREADLINE\n// that ensures we have this header\n# include <readline/readline.h>\n#endif\n\n#if defined(HAVE_REALPATH) && defined(HAVE_DECL_REALPATH) && !HAVE_DECL_REALPATH\nextern char *realpath(const char *path, char *resolved_path);\n#endif\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h> /* for dladdr, dlsym */\n#endif\n\n#if defined(HAVE_DLADDR) && defined(HAVE_DECL_DLADDR) && !HAVE_DECL_DLADDR\nextern int dladdr(void *addr, Dl_info *info);\n#endif\n\n#if defined(HAVE_DLSYM) && defined(HAVE_DECL_DLSYM) && !HAVE_DECL_DLSYM\nextern void *dlsym(void *handle, const char *symbol);\n#endif\n\n/* extSoftVersion only detects versions of libraries that are available\n   without loading any modules; libraries available via modules are\n   treated individually (libcurlVersion(), La_version(), etc)\n*/\nSEXP attribute_hidden\ndo_eSoftVersion(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n    SEXP ans = PROTECT(allocVector(STRSXP, 9));\n    SEXP nms = PROTECT(allocVector(STRSXP, 9));\n    setAttrib(ans, R_NamesSymbol, nms);\n    unsigned int i = 0;\n    char p[256];\n    snprintf(p, 256, \"%s\", zlibVersion());\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"zlib\"));\n    snprintf(p, 256, \"%s\", BZ2_bzlibVersion());\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"bzlib\"));\n    snprintf(p, 256, \"%s\", lzma_version_string());\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"xz\"));\n    snprintf(p, 256, \"%s\", pcre_version());\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"PCRE\"));\n#ifdef USE_ICU\n    UVersionInfo icu;\n    char pu[U_MAX_VERSION_STRING_LENGTH];\n    u_getVersion(icu);\n    u_versionToString(icu, pu);\n    SET_STRING_ELT(ans, i, mkChar(pu));\n#else\n    SET_STRING_ELT(ans, i, mkChar(\"\"));\n#endif\n    SET_STRING_ELT(nms, i++, mkChar(\"ICU\"));\n    snprintf(p, 256, \"%s\", tre_version());\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"TRE\"));\n#ifdef _LIBICONV_VERSION\n    {\n\tint ver = _libiconv_version;\n\tsnprintf(p, 256, \"GNU libiconv %d.%d\", ver/0x0100, ver%0x0100);\n    }\n#elif defined(_WIN32)\n    snprintf(p, 256, \"%s\", \"win_iconv\");\n#elif defined(__GLIBC__)\n    snprintf(p, 256, \"glibc %s\", gnu_get_libc_version());\n#else\n    snprintf(p, 256, \"%s\", \"unknown\");\n#endif\n    SET_STRING_ELT(ans, i, mkChar(p));\n    SET_STRING_ELT(nms, i++, mkChar(\"iconv\"));\n#ifdef HAVE_LIBREADLINE\n    SET_STRING_ELT(ans, i, mkChar(rl_library_version));\n#else\n    SET_STRING_ELT(ans, i, mkChar(\"\"));\n#endif\n    SET_STRING_ELT(nms, i++, mkChar(\"readline\"));\n\n    SET_STRING_ELT(ans, i, mkChar(\"\"));\n\n#if defined(HAVE_DLADDR) && defined(HAVE_REALPATH) && defined(HAVE_DLSYM) \\\n    && defined(HAVE_DECL_RTLD_DEFAULT) && HAVE_DECL_RTLD_DEFAULT \\\n    && defined(HAVE_DECL_RTLD_NEXT) && HAVE_DECL_RTLD_NEXT\n\n    /* Look for blas function dgemm and try to figure out in which\n       binary/shared library is it defined. This is based on experimentation\n       and heuristics, and depends on implementation details\n       of dynamic linkers.\n    */\n#ifdef HAVE_F77_UNDERSCORE\n    char *dgemm_name = \"dgemm_\";\n#else\n    char *dgemm_name = \"dgemm\";\n#endif\n\n    Rboolean ok = TRUE;\n\n    void *dgemm_addr = dlsym(RTLD_DEFAULT, dgemm_name);\n\n    Dl_info dl_info1, dl_info2;\n\n    if (!dladdr((void *)do_eSoftVersion, &dl_info1)) ok = FALSE;\n    if (!dladdr((void *)dladdr, &dl_info2)) ok = FALSE;\n\n    if (ok && !strcmp(dl_info1.dli_fname, dl_info2.dli_fname)) {\n\n\t/* dladdr is not inside R, hence we probably have the PLT for\n\t   dynamically linked symbols; lets use dlsym(RTLD_NEXT) to\n\t   get the real address for dgemm.\n\n\t   PLT is used on Linux and on Solaris when the main binary\n\t   is _not_ position independent. PLT is not used on macOS.\n\t*/\n\tif (dgemm_addr != NULL) {\n\n\t    /* If dgemm_addr is NULL, dgemm is statically linked and\n\t       we are on Linux. On Solaris, dgemm_addr is never NULL.\n\t    */\n\t    void *dgemm_next_addr = dlsym(RTLD_NEXT, dgemm_name);\n\t    if (dgemm_next_addr != NULL)\n\n\t\t/* If dgemm_next_addr is NULL, dgemm is statically linked.\n\t\t   Otherwise, it is linked dynamically and dgemm_next_addr\n\t\t   is its true address (dgemm points to PLT).\n\n\t\t   On Linux, dgemm_next_addr is only NULL here when\n\t\t   dgemm is export-dynamic (yet statically linked).\n\t\t*/\n\t\tdgemm_addr = dgemm_next_addr;\n\t}\n    }\n\n    char buf[PATH_MAX+1];\n    if (ok && dladdr(dgemm_addr, &dl_info1)) {\n\tchar *res = realpath(dl_info1.dli_fname, buf);\n\tif (res)\n\t    SET_STRING_ELT(ans, i, mkChar(res));\n    }\n#endif\n    SET_STRING_ELT(nms, i++, mkChar(\"BLAS\"));\n\n    UNPROTECT(2);\n    return ans;\n}\n\n/* platform-specific */\nextern void Rsleep(double timeint);\n\nSEXP attribute_hidden do_syssleep(SEXP call, SEXP op, SEXP args, SEXP rho)\n{\n    checkArity(op, args);\n    double time = asReal(CAR(args));\n    if (ISNAN(time) || time < 0.)\n\terror(_(\"invalid '%s' value\"), \"time\");\n    Rsleep(time);\n    return R_NilValue;\n}\n\n\n/* Formerly src/appl/machar.c:\n * void machar()  -- computes ALL `machine constants' at once.\n * -------------  -- compare with ../nmath/i1mach.c & ../nmath/d1mach.c\n *\t\t     which use the C  <float.h> constants !\n *      algorithm 665, collected algorithms from acm.\n *      this work published in transactions on mathematical software,\n *      vol. 14, no. 4, pp. 303-311.\n *\n *  this fortran 77 subroutine is intended to determine the parameters\n *   of the floating-point arithmetic system specified below.  the\n *   determination of the first three uses an extension of an algorithm\n *   due to m. malcolm, cacm 15 (1972), pp. 949-951, incorporating some,\n *   but not all, of the improvements suggested by m. gentleman and s.\n *   marovich, cacm 17 (1974), pp. 276-277.  an earlier version of this\n *   program was published in the book software manual for the\n *   elementary functions by w. j. cody and w. waite, prentice-hall,\n *   englewood cliffs, nj, 1980.\n *\n *  the program as given here must be modified before compiling.  if\n *   a single (double) precision version is desired, change all\n *   occurrences of cs (  ) in columns 1 and 2 to blanks.\n *\n *  parameter values reported are as follows:\n *\n *       ibeta   - the radix for the floating-point representation\n *       it      - the number of base ibeta digits in the floating-point\n *                 significand\n *       irnd    - 0 if floating-point addition chops\n *                 1 if floating-point addition rounds, but not in the\n *                   ieee style\n *                 2 if floating-point addition rounds in the ieee style\n *                 3 if floating-point addition chops, and there is\n *                   partial underflow\n *                 4 if floating-point addition rounds, but not in the\n *                   ieee style, and there is partial underflow\n *                 5 if floating-point addition rounds in the ieee style,\n *                   and there is partial underflow\n *       ngrd    - the number of guard digits for multiplication with\n *                 truncating arithmetic.  it is\n *                 0 if floating-point arithmetic rounds, or if it\n *                   truncates and only  it  base  ibeta digits\n *                   participate in the post-normalization shift of the\n *                   floating-point significand in multiplication;\n *                 1 if floating-point arithmetic truncates and more\n *                   than  it  base  ibeta  digits participate in the\n *                   post-normalization shift of the floating-point\n *                   significand in multiplication.\n *       machep  - the largest negative integer such that\n *                 1.0+float(ibeta)**machep .ne. 1.0, except that\n *                 machep is bounded below by  -(it+3)\n *       negeps  - the largest negative integer such that\n *                 1.0-float(ibeta)**negeps .ne. 1.0, except that\n *                 negeps is bounded below by  -(it+3)\n *       iexp    - the number of bits (decimal places if ibeta = 10)\n *                 reserved for the representation of the exponent\n *                 (including the bias or sign) of a floating-point\n *                 number\n *       minexp  - the largest in magnitude negative integer such that\n *                 float(ibeta)**minexp is positive and normalized\n *       maxexp  - the smallest positive power of  beta  that overflows\n *       eps     - the smallest positive floating-point number such\n *                 that  1.0+eps .ne. 1.0. in particular, if either\n *                 ibeta = 2  or  irnd = 0, eps = float(ibeta)**machep.\n *                 otherwise,  eps = (float(ibeta)**machep)/2\n *       epsneg  - a small positive floating-point number such that\n *                 1.0-epsneg .ne. 1.0. in particular, if ibeta = 2\n *                 or  irnd = 0, epsneg = float(ibeta)**negeps.\n *                 otherwise,  epsneg = (ibeta**negeps)/2.  because\n *                 negeps is bounded below by -(it+3), epsneg may not\n *                 be the smallest number that can alter 1.0 by\n *                 subtraction.\n *       xmin    - the smallest non-vanishing normalized floating-point\n *                 power of the radix, i.e.,  xmin = float(ibeta)**minexp\n *       xmax    - the largest finite floating-point number.  in\n *                 particular  xmax = (1.0-epsneg)*float(ibeta)**maxexp\n *                 note - on some machines  xmax  will be only the\n *                 second, or perhaps third, largest number, being\n *                 too small by 1 or 2 units in the last digit of\n *                 the significand.\n *\n *     latest revision - april 20, 1987\n *\n *     author - w. j. cody\n *              argonne national laboratory\n *\n */\n\n\nstatic void\nmachar(int *ibeta, int *it, int *irnd, int *ngrd, int *machep, int *negep,\n       int *iexp, int *minexp, int *maxexp, double *eps,\n       double *epsneg, double *xmin, double *xmax)\n{\n\tvolatile double a, b, beta, betain, betah, one,\n\t\tt, temp, tempa, temp1, two, y, z, zero;\n\tint i, itemp, iz, j, k, mx, nxres;\n\n\tone = 1;\n\ttwo = one+one;\n\tzero = one-one;\n\n\t\t/* determine ibeta, beta ala malcolm. */\n\n\ta = one;\n\tdo {\n\t\ta = a + a;\n\t\ttemp = a + one;\n\t\ttemp1 = temp - a;\n\t}\n\twhile(temp1 - one == zero);\n\tb = one;\n\tdo {\n\t\tb = b + b;\n\t\ttemp = a + b;\n\t\titemp = (int)(temp - a);\n\t}\n\twhile (itemp == 0);\n\t*ibeta = itemp;\n\tbeta = *ibeta;\n\n\t\t/* determine it, irnd */\n\n\t*it = 0;\n\tb = one;\n\tdo {\n\t\t*it = *it + 1;\n\t\tb = b * beta;\n\t\ttemp = b + one;\n\t\ttemp1 = temp - b;\n\t}\n\twhile(temp1 - one == zero);\n\t*irnd = 0;\n\tbetah = beta / two;\n\ttemp = a + betah;\n\tif (temp - a != zero)\n\t\t*irnd = 1;\n\ttempa = a + beta;\n\ttemp = tempa + betah;\n\tif (*irnd == 0 && temp - tempa != zero)\n\t\t*irnd = 2;\n\n\t\t/* determine negep, epsneg */\n\n\t*negep = *it + 3;\n\tbetain = one / beta;\n\ta = one;\n\tfor(i=1 ; i<=*negep ; i++)\n\t\ta = a * betain;\n\tb = a;\n\tfor(;;) {\n\t\ttemp = one - a;\n\t\tif (temp - one != zero)\n\t\t\tbreak;\n\t\ta = a * beta;\n\t\t*negep = *negep - 1;\n\t}\n\t*negep = -*negep;\n\t*epsneg = a;\n\tif (*ibeta != 2 && *irnd != 0) {\n\t\ta = (a * (one + a)) / two;\n\t\ttemp = one - a;\n\t\tif (temp - one != zero)\n\t\t\t*epsneg = a;\n\t}\n\n\t\t/* determine machep, eps */\n\n\t*machep = -*it - 3;\n\ta = b;\n\tfor(;;) {\n\t\ttemp = one + a;\n\t\tif (temp - one != zero)\n\t\t\tbreak;\n\t\ta = a * beta;\n\t\t*machep = *machep + 1;\n\t}\n\t*eps = a;\n\ttemp = tempa + beta * (one + *eps);\n\tif (*ibeta != 2 && *irnd != 0) {\n\t\ta = (a * (one + a)) / two;\n\t\ttemp = one + a;\n\t\tif (temp - one != zero)\n\t\t\t*eps = a;\n\t}\n\n\t\t/* determine ngrd */\n\n\t*ngrd = 0;\n\ttemp = one + *eps;\n\tif (*irnd == 0 && temp * one - one != zero)\n\t\t*ngrd = 1;\n\n\t/* determine iexp, minexp, xmin */\n\n\t/* loop to determine largest i and k = 2**i such that */\n\t/*        (1/beta) ** (2**(i)) */\n\t/* does not underflow. */\n\t/* exit from loop is signaled by an underflow. */\n\n\ti = 0;\n\tk = 1;\n\tz = betain;\n\tt = one + *eps;\n\tnxres = 0;\n\tfor(;;) {\n\t\ty = z;\n\t\tz = y * y;\n\n\t\t/* check for underflow here */\n\n\t\ta = z * one;\n\t\ttemp = z * t;\n\t\tif (a+a == zero || fabs(z) >= y)\n\t\t\tbreak;\n\t\ttemp1 = temp * betain;\n\t\tif (temp1 * beta == z)\n\t\t\tbreak;\n\t\ti = i+1;\n\t\tk = k+k;\n\t}\n\tif (*ibeta != 10) {\n\t\t*iexp = i + 1;\n\t\tmx = k + k;\n\t}\n\telse {\n\t\t/* this segment is for decimal machines only */\n\n\t\t*iexp = 2;\n\t\tiz = *ibeta;\n\t\twhile (k >= iz) {\n\t\t\tiz = iz * *ibeta;\n\t\t\tiexp = iexp + 1;\n\t\t}\n\t\tmx = iz + iz - 1;\n\t}\n\tdo {\n\t\t/* loop to determine minexp, xmin */\n\t\t/* exit from loop is signaled by an underflow */\n\n\t\t*xmin = y;\n\t\ty = y * betain;\n\n\t\t/* check for underflow here */\n\n\t\ta = y * one;\n\t\ttemp = y * t;\n\t\tif (a+a == zero || fabs(y) >= *xmin)\n\t\t\tgoto L10;\n\t\tk = k + 1;\n\t\ttemp1 = temp * betain;\n\t}\n\twhile(temp1 * beta != y);\n\tnxres = 3;\n\t*xmin = y;\nL10:\t*minexp = -k;\n\n\t/* determine maxexp, xmax */\n\n\tif (mx <= k + k - 3 && *ibeta != 10) {\n\t\tmx = mx + mx;\n\t\t*iexp = *iexp + 1;\n\t}\n\t*maxexp = mx + *minexp;\n\n\t/* adjust irnd to reflect partial underflow */\n\n\t*irnd = *irnd + nxres;\n\n\t/* adjust for ieee-style machines */\n\n\tif (*irnd == 2 || *irnd == 5)\n\t\t*maxexp = *maxexp - 2;\n\n\t/* adjust for non-ieee machines with partial underflow */\n\n\tif (*irnd == 3 || *irnd == 4)\n\t\t*maxexp = *maxexp - *it;\n\n\t/* adjust for machines with implicit leading bit in binary */\n\t/* significand, and machines with radix point at extreme */\n\t/* right of significand. */\n\n\ti = *maxexp + *minexp;\n\tif (*ibeta == 2 && i == 0)\n\t\t*maxexp = *maxexp - 1;\n\tif (i > 20)\n\t\t*maxexp = *maxexp - 1;\n\tif (a != y)\n\t\t*maxexp = *maxexp - 2;\n\t*xmax = one - *epsneg;\n\tif (*xmax * one != *xmax)\n\t\t*xmax = one - beta * *epsneg;\n\t*xmax = *xmax / (beta * beta * beta * *xmin);\n\ti = *maxexp + *minexp + 3;\n\tif (i>0)\n\t\tfor(j=1 ; j<=i ; j++) {\n\t\t\tif (*ibeta == 2)\n\t\t\t\t*xmax = *xmax + *xmax;\n\t\t\tif (*ibeta != 2)\n\t\t\t\t*xmax = *xmax * beta;\n\t\t}\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/main/dotcode.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997--2014  The R Core Team\n *  Copyright (C) 2003\t      The R Foundation\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#define R_USE_SIGNALS 1\n#include <Defn.h>\n#include <Internal.h>\n#include <ctype.h> /* for tolower */\n#include <string.h>\n#include <errno.h>\n\n#include <Rmath.h>\n\n\n#ifndef max\n#define max(a, b) ((a > b)?(a):(b))\n#endif\n\n/* Was 'name' prior to 2.13.0, then .NAME, but checked as\n   'name' up to 2.15.1. */\nstatic void check1arg2(SEXP arg, SEXP call, const char *formal)\n{\n    if (TAG(arg) == R_NilValue) return;\n    errorcall(call, \"the first argument should not be named\");\n }\n\n\n\n/* These are set during the first call to do_dotCode() below. */\n\nstatic SEXP NaokSymbol = NULL;\nstatic SEXP DupSymbol = NULL;\nstatic SEXP PkgSymbol = NULL;\nstatic SEXP EncSymbol = NULL;\nstatic SEXP CSingSymbol = NULL;\n\n#include <Rdynpriv.h>\n// Odd: 'type' is really this enum\nenum {NOT_DEFINED, FILENAME, DLL_HANDLE, R_OBJECT};\ntypedef struct {\n    char DLLname[PATH_MAX];\n    HINSTANCE dll;\n    SEXP  obj;\n    int type;\n} DllReference;\n\n/* Maximum length of entry-point name, including nul terminator */\n#define MaxSymbolBytes 1024\n\n/* Maximum number of args to .C, .Fortran and .Call */\n#define MAX_ARGS 65\n\n/* This looks up entry points in DLLs in a platform specific way. */\nstatic DL_FUNC\nR_FindNativeSymbolFromDLL(char *name, DllReference *dll,\n\t\t\t  R_RegisteredNativeSymbol *symbol, SEXP env);\n\nstatic SEXP naokfind(SEXP args, int * len, int *naok, DllReference *dll);\nstatic SEXP pkgtrim(SEXP args, DllReference *dll);\n\nstatic R_INLINE Rboolean isNativeSymbolInfo(SEXP op)\n{\n    /* was: inherits(op, \"NativeSymbolInfo\")\n     * inherits() is slow because of string comparisons, so use\n     * structural check instead. */\n    return (TYPEOF(op) == VECSXP &&\n\t    LENGTH(op) >= 2 &&\n\t    TYPEOF(VECTOR_ELT(op, 1)) == EXTPTRSXP);\n}\n\n/*\n  Called from resolveNativeRoutine (and itself).\n\n  Checks whether the specified object correctly identifies a native routine.\n  op is the supplied value for .NAME.  This can be\n   a) a string (when this does nothing).\n   b) an external pointer giving the address of the routine\n      (e.g. getNativeSymbolInfo(\"foo\")$address)\n   c) or a NativeSymbolInfo itself  (e.g. getNativeSymbolInfo(\"foo\"))\n\n   It copies the symbol name to buf.\n\n   NB: in the last two cases it sets fun and symbol as well!\n */\nstatic void\ncheckValidSymbolId(SEXP op, SEXP call, DL_FUNC *fun,\n\t\t   R_RegisteredNativeSymbol *symbol, char *buf)\n{\n    if (isValidString(op)) return;\n\n    if(TYPEOF(op) == EXTPTRSXP) {\n\tstatic SEXP native_symbol = NULL;\n\tstatic SEXP registered_native_symbol = NULL;\n\tif (native_symbol == NULL) {\n\t    native_symbol = install(\"native symbol\");\n\t    registered_native_symbol = install(\"registered native symbol\");\n\t}\n\tchar *p = NULL;\n\tif(R_ExternalPtrTag(op) == native_symbol)\n\t   *fun = R_ExternalPtrAddrFn(op);\n\telse if(R_ExternalPtrTag(op) == registered_native_symbol) {\n\t   R_RegisteredNativeSymbol *tmp;\n\t   tmp = (R_RegisteredNativeSymbol *) R_ExternalPtrAddr(op);\n\t   if(tmp) {\n\t      if(symbol->type != R_ANY_SYM && symbol->type != tmp->type)\n\t\t errorcall(call, _(\"NULL value passed as symbol address\"));\n\t\t/* Check the type of the symbol. */\n\t      switch(symbol->type) {\n\t      case R_C_SYM:\n\t\t  *fun = tmp->symbol.c->fun;\n\t\t  p = tmp->symbol.c->name;\n\t\t  break;\n\t      case R_CALL_SYM:\n\t\t  *fun = tmp->symbol.call->fun;\n\t\t  p = tmp->symbol.call->name;\n\t\t  break;\n\t      case R_FORTRAN_SYM:\n\t\t  *fun = tmp->symbol.fortran->fun;\n\t\t  p = tmp->symbol.fortran->name;\n\t\t  break;\n\t      case R_EXTERNAL_SYM:\n\t\t  *fun = tmp->symbol.external->fun;\n\t\t  p = tmp->symbol.external->name;\n\t\t  break;\n\t      default:\n\t\t /* Something unintended has happened if we get here. */\n\t\t  errorcall(call, _(\"Unimplemented type %d in createRSymbolObject\"),\n\t\t\t    symbol->type);\n\t\t  break;\n\t      }\n\t      *symbol = *tmp;\n\t   }\n\t}\n\t/* This is illegal C */\n\tif(*fun == NULL)\n\t    errorcall(call, _(\"NULL value passed as symbol address\"));\n\n\t/* copy the symbol name. */\n\tif (p && buf) {\n\t    if (strlen(p) >= MaxSymbolBytes)\n\t\terror(_(\"symbol '%s' is too long\"), p);\n\t    memcpy(buf, p, strlen(p)+1);\n\t}\n\n\treturn;\n    }\n    else if(isNativeSymbolInfo(op)) {\n\tcheckValidSymbolId(VECTOR_ELT(op, 1), call, fun, symbol, buf);\n\treturn;\n    }\n\n    errorcall(call,\n      _(\"first argument must be a string (of length 1) or native symbol reference\"));\n    return; /* not reached */\n}\n\nattribute_hidden\nDL_FUNC R_dotCallFn(SEXP op, SEXP call, int nargs) {\n    R_RegisteredNativeSymbol symbol = {R_CALL_SYM, {NULL}, NULL};\n    DL_FUNC fun = NULL;\n    checkValidSymbolId(op, call, &fun, &symbol, NULL);\n    /* should check arg count here as well */\n    return fun;\n}\n\n/*\n  This is the routine that is called by do_dotCode, do_dotcall and\n  do_External to find the DL_FUNC to invoke. It handles processing the\n  arguments for the PACKAGE argument, if present, and also takes care\n  of the cases where we are given a NativeSymbolInfo object, an\n  address directly, and if the DLL is specified. If no PACKAGE is\n  provided, we check whether the calling function is in a namespace\n  and look there.\n*/\n\nstatic SEXP\nresolveNativeRoutine(SEXP args, DL_FUNC *fun,\n\t\t     R_RegisteredNativeSymbol *symbol, char *buf,\n\t\t     int *nargs, int *naok, SEXP call, SEXP env)\n{\n    SEXP op;\n    const char *p; char *q;\n    DllReference dll;\n    /* This is used as shorthand for 'all' in R_FindSymbol, but\n       should never be supplied */\n    strcpy(dll.DLLname, \"\");\n    dll.dll = NULL; dll.obj = NULL; dll.type = NOT_DEFINED;\n\n    op = CAR(args);  // value of .NAME =\n    /* NB, this sets fun, symbol and buf and is not just a check! */\n    checkValidSymbolId(op, call, fun, symbol, buf);\n\n    /* The following code modifies the argument list */\n    /* We know this is ok because do_dotCode is entered */\n    /* with its arguments evaluated. */\n\n    if(symbol->type == R_C_SYM || symbol->type == R_FORTRAN_SYM) {\n\t/* And that also looks for PACKAGE = */\n\targs = naokfind(CDR(args), nargs, naok, &dll);\n\tif(*naok == NA_LOGICAL)\n\t    errorcall(call, _(\"invalid '%s' value\"), \"naok\");\n\tif(*nargs > MAX_ARGS)\n\t    errorcall(call, _(\"too many arguments in foreign function call\"));\n    } else {\n\t/* This has the side effect of setting dll.type if a PACKAGE=\n\t   argument if found, but it will only be used if a string was\n\t   passed in  */\n\targs = pkgtrim(args, &dll);\n    }\n\n    /* We were given a symbol (or an address), so we are done. */\n    if (*fun) return args;\n\n    if (dll.type == FILENAME && !strlen(dll.DLLname))\n\terrorcall(call, _(\"PACKAGE = \\\"\\\" is invalid\"));\n\n    // find if we were called from a namespace\n    SEXP env2 = ENCLOS(env);\n    const char *ns = \"\";\n    if(R_IsNamespaceEnv(env2))\n\tns = CHAR(STRING_ELT(R_NamespaceEnvSpec(env2), 0));\n    else env2 = R_NilValue;\n\n#ifdef CHECK_CROSS_USAGE\n    if (dll.type == FILENAME && strcmp(dll.DLLname, \"base\")) {\n\tif(strlen(ns) && strcmp(dll.DLLname, ns) &&\n\t   !(streql(dll.DLLname, \"BioC_graph\") && streql(ns, \"graph\")))\n\t    warningcall(call,\n\t\t\t\"using PACKAGE = \\\"%s\\\" from namespace '%s'\",\n\t\t\tdll.DLLname, ns);\n    }\n#endif\n\n    /* Make up the load symbol */\n    if(TYPEOF(op) == STRSXP) {\n\tconst void *vmax = vmaxget();\n\tp = translateChar(STRING_ELT(op, 0));\n\tif(strlen(p) >= MaxSymbolBytes)\n\t    error(_(\"symbol '%s' is too long\"), p);\n\tq = buf;\n\twhile ((*q = *p) != '\\0') {\n\t    if(symbol->type == R_FORTRAN_SYM) *q = (char) tolower(*q);\n\t    p++;\n\t    q++;\n\t}\n\tvmaxset(vmax);\n    }\n\n    if(dll.type != FILENAME && strlen(ns)) {\n\t/* no PACKAGE= arg, so see if we can identify a DLL\n\t   from the namespace defining the function */\n\t*fun = R_FindNativeSymbolFromDLL(buf, &dll, symbol, env2);\n\tif (*fun) return args;\n\terrorcall(call, \"\\\"%s\\\" not resolved from current namespace (%s)\",\n\t\t  buf, ns);\n    }\n\n    /* NB: the actual conversion to the symbol is done in\n       R_dlsym in Rdynload.c.  That prepends an underscore (usually),\n       and may append one or more underscores.\n    */\n\n    *fun = R_FindSymbol(buf, dll.DLLname, symbol);\n    if (*fun) return args;\n\n    /* so we've failed and bail out */\n    if(strlen(dll.DLLname)) {\n\tswitch(symbol->type) {\n\tcase R_C_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".C\", dll.DLLname);\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".Fortran\", dll.DLLname);\n\t    break;\n\tcase R_CALL_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".Call\", dll.DLLname);\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".External\", dll.DLLname);\n\t    break;\n\tcase R_ANY_SYM:\n\t    errorcall(call,\n\t\t      _(\"%s symbol name \\\"%s\\\" not in DLL for package \\\"%s\\\"\"),\n\t\t      \"C/Fortran\", buf, dll.DLLname);\n\t    break;\n\t}\n    } else\n\terrorcall(call, _(\"%s symbol name \\\"%s\\\" not in load table\"),\n\t\t  symbol->type == R_FORTRAN_SYM ? \"Fortran\" : \"C\", buf);\n\n    return args; /* -Wall */\n}\n\n\nstatic Rboolean\ncheckNativeType(int targetType, int actualType)\n{\n    if(targetType > 0) {\n\tif(targetType == INTSXP || targetType == LGLSXP) {\n\t    return(actualType == INTSXP || actualType == LGLSXP);\n\t}\n\treturn(targetType == actualType);\n    }\n\n    return(TRUE);\n}\n\n\nstatic Rboolean\ncomparePrimitiveTypes(R_NativePrimitiveArgType type, SEXP s)\n{\n   if(type == ANYSXP || TYPEOF(s) == type)\n      return(TRUE);\n\n   if(type == SINGLESXP)\n      return(asLogical(getAttrib(s, install(\"Csingle\"))) == TRUE);\n\n   return(FALSE);\n}\n\n\n/* Foreign Function Interface.  This code allows a user to call C */\n/* or Fortran code which is either statically or dynamically linked. */\n\n/* NB: this leaves NAOK and DUP arguments on the list */\n\n/* find NAOK and DUP, find and remove PACKAGE */\nstatic SEXP naokfind(SEXP args, int * len, int *naok, DllReference *dll)\n{\n    SEXP s, prev;\n    int nargs=0, naokused=0, dupused=0, pkgused=0;\n    const char *p;\n\n    *naok = 0;\n    *len = 0;\n    for(s = args, prev=args; s != R_NilValue;) {\n\tif(TAG(s) == NaokSymbol) {\n\t    *naok = asLogical(CAR(s));\n\t    if(naokused++ == 1) warning(_(\"'%s' used more than once\"), \"NAOK\");\n\t} else if(TAG(s) == DupSymbol) {\n\t    if(dupused++ == 1) warning(_(\"'%s' used more than once\"), \"DUP\");\n\t} else if(TAG(s) == PkgSymbol) {\n\t    dll->obj = CAR(s);  // really?\n\t    if(TYPEOF(CAR(s)) == STRSXP) {\n\t\tp = translateChar(STRING_ELT(CAR(s), 0));\n\t\tif(strlen(p) > PATH_MAX - 1)\n\t\t    error(_(\"DLL name is too long\"));\n\t\tdll->type = FILENAME;\n\t\tstrcpy(dll->DLLname, p);\n\t\tif(pkgused++ > 1)\n\t\t    warning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t\t/* More generally, this should allow us to process\n\t\t   any additional arguments and not insist that PACKAGE\n\t\t   be the last argument.\n\t\t*/\n\t    } else {\n\t\t/* Have a DLL object, which is not something documented .... */\n\t\tif(TYPEOF(CAR(s)) == EXTPTRSXP) {\n\t\t    dll->dll = (HINSTANCE) R_ExternalPtrAddr(CAR(s));\n\t\t    dll->type = DLL_HANDLE;\n\t\t} else if(TYPEOF(CAR(s)) == VECSXP) {\n\t\t    dll->type = R_OBJECT;\n\t\t    dll->obj = s;\n\t\t    strcpy(dll->DLLname,\n\t\t\t   translateChar(STRING_ELT(VECTOR_ELT(CAR(s), 1), 0)));\n\t\t    dll->dll = (HINSTANCE) R_ExternalPtrAddr(VECTOR_ELT(s, 4));\n\t\t} else\n\t\t    error(\"incorrect type (%s) of PACKAGE argument\\n\",\n\t\t\t  type2char(TYPEOF(CAR(s))));\n\t    }\n\t} else {\n\t    nargs++;\n\t    prev = s;\n\t    s = CDR(s);\n\t    continue;\n\t}\n\tif(s == args)\n\t    args = s = CDR(s);\n\telse\n\t    SETCDR(prev, s = CDR(s));\n    }\n    *len = nargs;\n    return args;\n}\n\nstatic void setDLLname(SEXP s, char *DLLname)\n{\n    SEXP ss = CAR(s);\n    const char *name;\n\n    if(TYPEOF(ss) != STRSXP || length(ss) != 1)\n\terror(_(\"PACKAGE argument must be a single character string\"));\n    name = translateChar(STRING_ELT(ss, 0));\n    /* allow the package: form of the name, as returned by find */\n    if(strncmp(name, \"package:\", 8) == 0)\n\tname += 8;\n    if(strlen(name) > PATH_MAX - 1)\n\terror(_(\"PACKAGE argument is too long\"));\n    strcpy(DLLname, name);\n}\n\nstatic SEXP pkgtrim(SEXP args, DllReference *dll)\n{\n    SEXP s, ss;\n    int pkgused = 0;\n\n    if (PkgSymbol == NULL) PkgSymbol = install(\"PACKAGE\");\n\n    for(s = args ; s != R_NilValue;) {\n\tss = CDR(s);\n\t/* Look for PACKAGE=. We look at the next arg, unless\n\t   this is the last one (which will only happen for one arg),\n\t   and remove it */\n\tif(ss == R_NilValue && TAG(s) == PkgSymbol) {\n\t    if(pkgused++ == 1)\n\t\twarning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t    setDLLname(s, dll->DLLname);\n\t    dll->type = FILENAME;\n\t    return R_NilValue;\n\t}\n\tif(TAG(ss) == PkgSymbol) {\n\t    if(pkgused++ == 1)\n\t\twarning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t    setDLLname(ss, dll->DLLname);\n\t    dll->type = FILENAME;\n\t    SETCDR(s, CDR(ss));\n\t}\n\ts = CDR(s);\n    }\n    return args;\n}\n\nstatic SEXP enctrim(SEXP args)\n{\n    SEXP s, ss;\n\n    for(s = args ; s != R_NilValue;) {\n\tss = CDR(s);\n\t/* Look for ENCODING=. We look at the next arg, unless\n\t   this is the last one (which will only happen for one arg),\n\t   and remove it */\n\tif(ss == R_NilValue && TAG(s) == EncSymbol) {\n\t    warning(\"ENCODING is defunct and will be ignored\");\n\t    return R_NilValue;\n\t}\n\tif(TAG(ss) == EncSymbol) {\n\t    warning(\"ENCODING is defunct and will be ignored\");\n\t    SETCDR(s, CDR(ss));\n\t}\n\ts = CDR(s);\n    }\n    return args;\n}\n\n\n\nSEXP attribute_hidden do_isloaded(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char *sym, *type=\"\", *pkg = \"\";\n    int val = 1, nargs = length(args);\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n\n    if (nargs < 1) error(_(\"no arguments supplied\"));\n    if (nargs > 3) error(_(\"too many arguments\"));\n\n    if(!isValidString(CAR(args)))\n\terror(_(\"invalid '%s' argument\"), \"symbol\");\n    sym = translateChar(STRING_ELT(CAR(args), 0));\n    if(nargs >= 2) {\n\tif(!isValidString(CADR(args)))\n\t    error(_(\"invalid '%s' argument\"), \"PACKAGE\");\n\tpkg = translateChar(STRING_ELT(CADR(args), 0));\n    }\n    if(nargs >= 3) {\n\tif(!isValidString(CADDR(args)))\n\t    error(_(\"invalid '%s' argument\"), \"type\");\n\ttype = CHAR(STRING_ELT(CADDR(args), 0)); /* ASCII */\n\tif(strcmp(type, \"C\") == 0) symbol.type = R_C_SYM;\n\telse if(strcmp(type, \"Fortran\") == 0) symbol.type = R_FORTRAN_SYM;\n\telse if(strcmp(type, \"Call\") == 0) symbol.type = R_CALL_SYM;\n\telse if(strcmp(type, \"External\") == 0) symbol.type = R_EXTERNAL_SYM;\n    }\n    if(!(R_FindSymbol(sym, pkg, &symbol))) val = 0;\n    return ScalarLogical(val);\n}\n\n/*   Call dynamically loaded \"internal\" functions.\n     Original code by Jean Meloche <jean@stat.ubc.ca> */\n\ntypedef SEXP (*R_ExternalRoutine)(SEXP);\ntypedef SEXP (*R_ExternalRoutine2)(SEXP, SEXP, SEXP, SEXP);\n\nSEXP attribute_hidden do_External(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    DL_FUNC ofun = NULL;\n    SEXP retval;\n    R_RegisteredNativeSymbol symbol = {R_EXTERNAL_SYM, {NULL}, NULL};\n    const void *vmax = vmaxget();\n    char buf[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n    args = resolveNativeRoutine(args, &ofun, &symbol, buf, NULL, NULL,\n\t\t\t\tcall, env);\n\n    if(symbol.symbol.external && symbol.symbol.external->numArgs > -1) {\n\tint nargs = length(args) - 1;\n\tif(symbol.symbol.external->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.external->numArgs, buf);\n    }\n\n    if (PRIMVAL(op) == 1) {\n\tR_ExternalRoutine2 fun = (R_ExternalRoutine2) ofun;\n\tretval = fun(call, op, args, env);\n    } else {\n\tR_ExternalRoutine fun = (R_ExternalRoutine) ofun;\n\tretval = fun(args);\n    }\n    vmaxset(vmax);\n    return retval;\n}\n\n#ifdef __cplusplus\ntypedef SEXP (*VarFun)(...);\n#else\ntypedef DL_FUNC VarFun;\n#endif\n\nSEXP attribute_hidden R_doDotCall(DL_FUNC ofun, int nargs, SEXP *cargs,\n\t\t\t\t  SEXP call) {\n    VarFun fun = NULL;\n    SEXP retval = R_NilValue;\t/* -Wall */\n    fun = (VarFun) ofun;\n    switch (nargs) {\n    case 0:\n\tretval = (SEXP)ofun();\n\tbreak;\n    case 1:\n\tretval = (SEXP)fun(cargs[0]);\n\tbreak;\n    case 2:\n\tretval = (SEXP)fun(cargs[0], cargs[1]);\n\tbreak;\n    case 3:\n\tretval = (SEXP)fun(cargs[0], cargs[1], cargs[2]);\n\tbreak;\n    case 4:\n\tretval = (SEXP)fun(cargs[0], cargs[1], cargs[2], cargs[3]);\n\tbreak;\n    case 5:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4]);\n\tbreak;\n    case 6:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5]);\n\tbreak;\n    case 7:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6]);\n\tbreak;\n    case 8:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7]);\n\tbreak;\n    case 9:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8]);\n\tbreak;\n    case 10:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9]);\n\tbreak;\n    case 11:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10]);\n\tbreak;\n    case 12:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11]);\n\tbreak;\n    case 13:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12]);\n\tbreak;\n    case 14:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13]);\n\tbreak;\n    case 15:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14]);\n\tbreak;\n    case 16:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15]);\n\tbreak;\n    case 17:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16]);\n\tbreak;\n    case 18:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17]);\n\tbreak;\n    case 19:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18]);\n\tbreak;\n    case 20:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19]);\n\tbreak;\n    case 21:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20]);\n\tbreak;\n    case 22:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21]);\n\tbreak;\n    case 23:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22]);\n\tbreak;\n    case 24:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23]);\n\tbreak;\n    case 25:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24]);\n\tbreak;\n    case 26:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25]);\n\tbreak;\n    case 27:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26]);\n\tbreak;\n    case 28:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27]);\n\tbreak;\n    case 29:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28]);\n\tbreak;\n    case 30:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29]);\n\tbreak;\n    case 31:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30]);\n\tbreak;\n    case 32:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31]);\n\tbreak;\n    case 33:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32]);\n\tbreak;\n    case 34:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33]);\n\tbreak;\n    case 35:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34]);\n\tbreak;\n    case 36:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35]);\n\tbreak;\n    case 37:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36]);\n\tbreak;\n    case 38:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37]);\n\tbreak;\n    case 39:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38]);\n\tbreak;\n    case 40:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39]);\n\tbreak;\n    case 41:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40]);\n\tbreak;\n    case 42:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41]);\n\tbreak;\n    case 43:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42]);\n\tbreak;\n    case 44:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43]);\n\tbreak;\n    case 45:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44]);\n\tbreak;\n    case 46:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45]);\n\tbreak;\n    case 47:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46]);\n\tbreak;\n    case 48:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47]);\n\tbreak;\n    case 49:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48]);\n\tbreak;\n    case 50:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49]);\n\tbreak;\n    case 51:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50]);\n\tbreak;\n    case 52:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51]);\n\tbreak;\n    case 53:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52]);\n\tbreak;\n    case 54:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53]);\n\tbreak;\n    case 55:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54]);\n\tbreak;\n    case 56:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55]);\n\tbreak;\n    case 57:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56]);\n\tbreak;\n    case 58:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57]);\n\tbreak;\n    case 59:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58]);\n\tbreak;\n    case 60:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59]);\n\tbreak;\n    case 61:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60]);\n\tbreak;\n    case 62:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61]);\n\tbreak;\n    case 63:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62]);\n\tbreak;\n    case 64:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63]);\n\tbreak;\n    case 65:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]);\n\tbreak;\n    default:\n\terrorcall(call, _(\"too many arguments, sorry\"));\n    }\n    return retval;\n}\n\n/* .Call(name, <args>) */\nSEXP attribute_hidden do_dotcall(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    DL_FUNC ofun = NULL;\n    SEXP retval, cargs[MAX_ARGS], pargs;\n    R_RegisteredNativeSymbol symbol = {R_CALL_SYM, {NULL}, NULL};\n\n    int nargs;\n    const void *vmax = vmaxget();\n    char buf[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n\n    args = resolveNativeRoutine(args, &ofun, &symbol, buf, NULL, NULL, call, env);\n    args = CDR(args);\n\n    for(nargs = 0, pargs = args ; pargs != R_NilValue; pargs = CDR(pargs)) {\n\tif (nargs == MAX_ARGS)\n\t    errorcall(call, _(\"too many arguments in foreign function call\"));\n\tcargs[nargs] = CAR(pargs);\n\tnargs++;\n    }\n    if(symbol.symbol.call && symbol.symbol.call->numArgs > -1) {\n\tif(symbol.symbol.call->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.call->numArgs, buf);\n    }\n\n    if (R_check_constants < 4)\n\tretval = R_doDotCall(ofun, nargs, cargs, call);\n    else {\n\tSEXP *cargscp = (SEXP *) R_alloc(nargs, sizeof(SEXP));\n\tint i;\n\tfor(i = 0; i < nargs; i++)\n\t    cargscp[i] = PROTECT(duplicate(cargs[i]));\n\tretval = PROTECT(R_doDotCall(ofun, nargs, cargs, call));\n\tRboolean constsOK = TRUE;\n\tfor(i = 0; constsOK && i < nargs; i++)\n\t    /* 39: not numerical comparison, not single NA, not attributes as\n               set, do ignore byte-code, do ignore environments of closures,\n               not ignore srcref\n\n               srcref is not ignored because ignoring it is expensive\n               (it triggers duplication)\n\t    */\n            if (!R_compute_identical(cargs[i], cargscp[i], 39)\n\t\t    && !R_checkConstants(FALSE))\n\t\tconstsOK = FALSE;\n\tif (!constsOK) {\n\t    REprintf(\"ERROR: detected compiler constant(s) modification after\"\n\t\t\" .Call invocation of function %s from library %s (%s).\\n\",\n\t\tbuf,\n\t\tsymbol.dll ? symbol.dll->name : \"unknown\",\n\t\tsymbol.dll ? symbol.dll->path : \"unknown\");\n\t    for(i = 0; i < nargs; i++)\n\t\tif (!R_compute_identical(cargs[i], cargscp[i], 39))\n\t\t    REprintf(\"NOTE: .Call function %s modified its argument\"\n\t\t\t\" (number %d, type %s, length %d)\\n\",\n\t\t\tbuf,\n\t\t\ti + 1,\n\t\t\tCHAR(type2str(TYPEOF(cargscp[i]))),\n\t\t\tlength(cargscp[i])\n\t\t    );\n\t    R_Suicide(\"compiler constants were modified (in .Call?)!\\n\");\n\t}\n\tUNPROTECT(nargs + 1);\n    }\n    vmaxset(vmax);\n    return retval;\n}\n\n/*  Call dynamically loaded \"internal\" graphics functions\n    .External.graphics (used in graphics) and  .Call.graphics (used in grid).\n\n    If there is an error or user-interrupt in the above\n    evaluation, dd->recordGraphics is set to TRUE\n    on all graphics devices (see GEonExit(); called in errors.c)\n\n    NOTE: if someone uses try() around this call and there\n    is an error, then dd->recordGraphics stays FALSE, so\n    subsequent pages of graphics output are NOT saved on\n    the display list.  A workaround is to deliberately\n    force an error in a graphics call (e.g., a grid popViewport()\n    while in the ROOT viewport) which will reset dd->recordGraphics\n    to TRUE as per the comment above.\n*/\n\n#include <R_ext/GraphicsEngine.h>\n\nSEXP attribute_hidden do_Externalgr(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP retval;\n    pGEDevDesc dd = GEcurrentDevice();\n    Rboolean record = dd->recordGraphics;\n    dd->recordGraphics = FALSE;\n    PROTECT(retval = do_External(call, op, args, env));\n    dd->recordGraphics = record;\n    if (GErecording(call, dd)) { // which is record && call != R_NilValue\n\tif (!GEcheckState(dd))\n\t    errorcall(call, _(\"invalid graphics state\"));\n\tGErecordGraphicOperation(op, args, dd);\n    }\n    UNPROTECT(1);\n    return retval;\n}\n\nSEXP attribute_hidden do_dotcallgr(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP retval;\n    pGEDevDesc dd = GEcurrentDevice();\n    Rboolean record = dd->recordGraphics;\n    dd->recordGraphics = FALSE;\n    PROTECT(retval = do_dotcall(call, op, args, env));\n    dd->recordGraphics = record;\n    if (GErecording(call, dd)) {\n\tif (!GEcheckState(dd))\n\t    errorcall(call, _(\"invalid graphics state\"));\n\tGErecordGraphicOperation(op, args, dd);\n    }\n    UNPROTECT(1);\n    return retval;\n}\n\nstatic SEXP\nRf_getCallingDLL(void)\n{\n    SEXP e, ans;\n    RCNTXT *cptr;\n    SEXP rho = R_NilValue;\n    Rboolean found = FALSE;\n\n    /* First find the environment of the caller.\n       Testing shows this is the right caller, despite the .C/.Call ...\n     */\n    for (cptr = R_GlobalContext;\n\t cptr != NULL && cptr->callflag != CTXT_TOPLEVEL;\n\t cptr = cptr->nextcontext)\n\t    if (cptr->callflag & CTXT_FUNCTION) {\n\t\t/* PrintValue(cptr->call); */\n\t\trho = cptr->cloenv;\n\t\tbreak;\n\t    }\n    /* Then search up until we hit a namespace or globalenv.\n       The idea is that we will not find a namespace unless the caller\n       was defined in one. */\n    while(rho != R_NilValue) {\n\tif (rho == R_GlobalEnv) break;\n\telse if (R_IsNamespaceEnv(rho)) {\n\t    found = TRUE;\n\t    break;\n\t}\n\trho = ENCLOS(rho);\n    }\n    if(!found) return R_NilValue;\n\n    PROTECT(e = lang2(install(\"getCallingDLLe\"), rho));\n    ans = eval(e,  R_GlobalEnv);\n    UNPROTECT(1);\n    return(ans);\n}\n\n\n/*\n  We are given the PACKAGE argument in dll.obj\n  and we can try to figure out how to resolve this.\n  0) dll.obj is NULL.  Then find the environment of the\n   calling function and if it is a namespace, get the first registered DLL.\n\n  1) dll.obj is a DLLInfo object\n*/\nstatic DL_FUNC\nR_FindNativeSymbolFromDLL(char *name, DllReference *dll,\n\t\t\t  R_RegisteredNativeSymbol *symbol,\n\t\t\t  SEXP env)\n{\n    int numProtects = 0;\n    DllInfo *info;\n    DL_FUNC fun = NULL;\n\n    if(dll->obj == NULL) {\n\t/* Rprintf(\"\\nsearching for %s\\n\", name); */\n\tif (env != R_NilValue) {\n\t    SEXP e;\n\t    PROTECT(e = lang2(install(\"getCallingDLLe\"), env));\n\t    dll->obj = eval(e, R_GlobalEnv);\n\t    UNPROTECT(1);\n\t} else dll->obj = Rf_getCallingDLL();\n\tPROTECT(dll->obj); numProtects++;\n    }\n\n    if(inherits(dll->obj, \"DLLInfo\")) {\n\tSEXP tmp;\n\ttmp = VECTOR_ELT(dll->obj, 4);\n\tinfo = (DllInfo *) R_ExternalPtrAddr(tmp);\n\tif(!info)\n\t    error(_(\"NULL value for DLLInfoReference when looking for DLL\"));\n\tfun = R_dlsym(info, name, symbol);\n    }\n\n    if(numProtects) UNPROTECT(numProtects);\n\n    return fun;\n}\n\n\n\n/* .C() {op=0}  or  .Fortran() {op=1} */\n/* Use of this except for atomic vectors is not allowed for .Fortran,\n   and is only kept for legacy code for .C.\n\n   CRAN packages R2Cuba, RCALI, ars, coxme, fCopulae, locfit, nlme,\n   splinesurv and survival pass functions, the case of RCALI as a list\n   of two functions.\n\n   RecordLinkage and locfit pass lists.\n*/\n\n/* pattern and number of guard bytes */\n#define FILL 0xee\n#define NG 64\n\nSEXP attribute_hidden do_dotCode(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    void **cargs, **cargs0 = NULL /* -Wall */;\n    int naok, na, nargs, Fort;\n    Rboolean havenames, copy = R_CBoundsCheck; /* options(CboundsCheck) */\n    DL_FUNC ofun = NULL;\n    VarFun fun = NULL;\n    SEXP ans, pa, s;\n    R_RegisteredNativeSymbol symbol = {R_C_SYM, {NULL}, NULL};\n    R_NativePrimitiveArgType *checkTypes = NULL;\n    const void *vmax;\n    char symName[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n    if (NaokSymbol == NULL || DupSymbol == NULL || PkgSymbol == NULL) {\n\tNaokSymbol = install(\"NAOK\");\n\tDupSymbol = install(\"DUP\");\n\tPkgSymbol = install(\"PACKAGE\");\n    }\n    if (EncSymbol == NULL) EncSymbol = install(\"ENCODING\");\n    if (CSingSymbol == NULL) CSingSymbol = install(\"Csingle\");\n    vmax = vmaxget();\n    Fort = PRIMVAL(op);\n    if(Fort) symbol.type = R_FORTRAN_SYM;\n\n    args = enctrim(args);\n    args = resolveNativeRoutine(args, &ofun, &symbol, symName, &nargs,\n\t\t\t\t&naok, call, env);\n    fun = (VarFun) ofun;\n\n    if(symbol.symbol.c && symbol.symbol.c->numArgs > -1) {\n\tif(symbol.symbol.c->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.c->numArgs, symName);\n\n\tcheckTypes = symbol.symbol.c->types;\n    }\n\n    /* Construct the return value */\n    nargs = 0;\n    havenames = FALSE;\n    for(pa = args ; pa != R_NilValue; pa = CDR(pa)) {\n\tif (TAG(pa) != R_NilValue) havenames = TRUE;\n\tnargs++;\n    }\n\n    PROTECT(ans = allocVector(VECSXP, nargs));\n    if (havenames) {\n\tSEXP names;\n\tPROTECT(names = allocVector(STRSXP, nargs));\n\tfor (na = 0, pa = args ; pa != R_NilValue ; pa = CDR(pa), na++) {\n\t    if (TAG(pa) == R_NilValue)\n\t\tSET_STRING_ELT(names, na, R_BlankString);\n\t    else\n\t\tSET_STRING_ELT(names, na, PRINTNAME(TAG(pa)));\n\t}\n\tsetAttrib(ans, R_NamesSymbol, names);\n\tUNPROTECT(1);\n    }\n\n    /* Convert the arguments for use in foreign function calls. */\n    cargs = (void**) R_alloc(nargs, sizeof(void*));\n    if (copy) cargs0 = (void**) R_alloc(nargs, sizeof(void*));\n    for(na = 0, pa = args ; pa != R_NilValue; pa = CDR(pa), na++) {\n\tif(checkTypes &&\n\t   !comparePrimitiveTypes(checkTypes[na], CAR(pa))) {\n\t    /* We can loop over all the arguments and report all the\n\t       erroneous ones, but then we would also want to avoid\n\t       the conversions.  Also, in the future, we may just\n\t       attempt to coerce the value to the appropriate\n\t       type. */\n\t    errorcall(call, _(\"wrong type for argument %d in call to %s\"),\n\t\t      na+1, symName);\n\t}\n\tint nprotect = 0, targetType =  checkTypes ? checkTypes[na] : 0;\n\tR_xlen_t n;\n\ts = CAR(pa);\n\t/* start with return value a copy of the inputs, as that is\n\t   what is needed for non-atomic-vector inputs */\n\tSET_VECTOR_ELT(ans, na, s);\n\n\tif(checkNativeType(targetType, TYPEOF(s)) == FALSE &&\n\t   targetType != SINGLESXP) {\n\t    /* Cannot be called if DUP = FALSE, so only needs to live\n\t       until copied in the switch.\n\t       But R_alloc allocates, so missed protection < R 2.15.0.\n\t    */\n\t    PROTECT(s = coerceVector(s, targetType));\n\t    nprotect++;\n\t}\n\n\t/* We create any copies needed for the return value here,\n\t   except for character vectors.  The compiled code works on\n\t   the data pointer of the return value for the other atomic\n\t   vectors, and anything else is supposed to be read-only.\n\n\t   We do not need to copy if the inputs have no references */\n\n#ifdef LONG_VECTOR_SUPPORT\n\tif (isVector(s) && IS_LONG_VEC(s))\n\t    error(_(\"long vectors (argument %d) are not supported in %s\"),\n\t\t  na + 1, Fort ? \".Fortran\" : \".C\");\n#endif\n\tSEXPTYPE t = TYPEOF(s);\n\tswitch(t) {\n\tcase RAWSXP:\n\t    if (copy) {\n\t\tn = XLENGTH(s);\n\t\tchar *ptr = R_alloc(n * sizeof(Rbyte) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(Rbyte) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, RAW(s), n);\n\t\tcargs[na] = (void *) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tn = XLENGTH(s);\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(RAW(ss), RAW(s), n * sizeof(Rbyte));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) RAW(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void *) RAW(s);\n\t    break;\n\tcase LGLSXP:\n\tcase INTSXP:\n\t    n = XLENGTH(s);\n\t    int *iptr = INTEGER(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(iptr[i] == NA_INTEGER)\n\t\t\terror(_(\"NAs in foreign function call (arg %d)\"), na + 1);\n\t    if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(int) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(int) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, INTEGER(s), n * sizeof(int));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(INTEGER(ss), INTEGER(s), n * sizeof(int));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) INTEGER(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void*) iptr;\n\t    break;\n\tcase REALSXP:\n\t    n = XLENGTH(s);\n\t    double *rptr = REAL(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(!R_FINITE(rptr[i]))\n\t\t\terror(_(\"NA/NaN/Inf in foreign function call (arg %d)\"), na + 1);\n\t    if (asLogical(getAttrib(s, CSingSymbol)) == 1) {\n\t\tfloat *sptr = (float*) R_alloc(n, sizeof(float));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) sptr[i] = (float) REAL(s)[i];\n\t\tcargs[na] = (void*) sptr;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, sptr);\n#endif\n\t    } else if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(double) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(double) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, REAL(s), n * sizeof(double));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss  = allocVector(t, n);\n\t\tmemcpy(REAL(ss), REAL(s), n * sizeof(double));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) REAL(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void*) rptr;\n\t    break;\n\tcase CPLXSXP:\n\t    n = XLENGTH(s);\n\t    Rcomplex *zptr = COMPLEX(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(!R_FINITE(zptr[i].r) || !R_FINITE(zptr[i].i))\n\t\t\terror(_(\"complex NA/NaN/Inf in foreign function call (arg %d)\"), na + 1);\n\t    if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(Rcomplex) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(Rcomplex) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, COMPLEX(s), n * sizeof(Rcomplex));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(COMPLEX(ss), COMPLEX(s), n * sizeof(Rcomplex));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) COMPLEX(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void *) zptr;\n\t    break;\n\tcase STRSXP:\n\t    n = XLENGTH(s);\n\t    if (Fort) {\n\t\tconst char *ss = translateChar(STRING_ELT(s, 0));\n\t\tif (n > 1)\n\t\t    warning(_(\"only first string in char vector used in .Fortran\"));\n\t\tchar *fptr = (char*) R_alloc(max(255, strlen(ss)) + 1, sizeof(char));\n\t\tstrcpy(fptr, ss);\n\t\tcargs[na] =  (void*) fptr;\n\t    } else if (copy) {\n\t\tchar **cptr = (char**) R_alloc(n, sizeof(char*)),\n\t\t    **cptr0 = (char**) R_alloc(n, sizeof(char*));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t\t    size_t nn = strlen(ss) + 1 + 2 * NG;\n\t\t    char *ptr = (char*) R_alloc(nn, sizeof(char));\n\t\t    memset(ptr, FILL, nn);\n\t\t    cptr[i] = cptr0[i] = ptr + NG;\n\t\t    strcpy(cptr[i], ss);\n\t\t}\n\t\tcargs[na] = (void*) cptr;\n\t\tcargs0[na] = (void*) cptr0;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, cargs[na]);\n#endif\n\t    } else {\n\t\tchar **cptr = (char**) R_alloc(n, sizeof(char*));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t\t    size_t nn = strlen(ss) + 1;\n\t\t    if(nn > 1) {\n\t\t\tcptr[i] = (char*) R_alloc(nn, sizeof(char));\n\t\t\tstrcpy(cptr[i], ss);\n\t\t    } else {\n\t\t\t/* Protect ourselves against those who like to\n\t\t\t   extend \"\", maybe using strncpy */\n\t\t\tnn = 128;\n\t\t\tcptr[i] = (char*) R_alloc(nn, sizeof(char));\n\t\t\tmemset(cptr[i], 0, nn);\n\t\t    }\n\t\t}\n\t\tcargs[na] = (void*) cptr;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, cargs[na]);\n#endif\n\t    }\n\t    break;\n\tcase VECSXP:\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    /* Used read-only, so this is safe */\n#ifdef USE_RINTERNALS\n\t    cargs[na] = (void*) DATAPTR(s);\n#else\n\t    n = XLENGTH(s);\n\t    SEXP *lptr = (SEXP *) R_alloc(n, sizeof(SEXP));\n\t    for (R_xlen_t i = 0 ; i < n ; i++) lptr[i] = VECTOR_ELT(s, i);\n\t    cargs[na] = (void*) lptr;\n#endif\n\t    break;\n\tcase CLOSXP:\n\tcase BUILTINSXP:\n\tcase SPECIALSXP:\n\tcase ENVSXP:\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    cargs[na] =  (void*) s;\n\t    break;\n\tcase NILSXP:\n\t    error(_(\"invalid mode (%s) to pass to C or Fortran (arg %d)\"),\n\t\t  type2char(t), na + 1);\n\t    cargs[na] =  (void*) s;\n\t    break;\n\tdefault:\n\t    /* Includes pairlists from R 2.15.0 */\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    warning(\"passing an object of type '%s' to .C (arg %d) is deprecated\",\n\t\t    type2char(t), na + 1);\n\t    if (t == LISTSXP)\n\t\twarning(_(\"pairlists are passed as SEXP as from R 2.15.0\"));\n\t    cargs[na] =  (void*) s;\n\t    break;\n\t}\n\tif (nprotect) UNPROTECT(nprotect);\n    }\n\n    switch (nargs) {\n    case 0:\n\t/* Silicon graphics C chokes here */\n\t/* if there is no argument to fun. */\n\tfun(0);\n\tbreak;\n    case 1:\n\tfun(cargs[0]);\n\tbreak;\n    case 2:\n\tfun(cargs[0], cargs[1]);\n\tbreak;\n    case 3:\n\tfun(cargs[0], cargs[1], cargs[2]);\n\tbreak;\n    case 4:\n\tfun(cargs[0], cargs[1], cargs[2], cargs[3]);\n\tbreak;\n    case 5:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4]);\n\tbreak;\n    case 6:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5]);\n\tbreak;\n    case 7:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6]);\n\tbreak;\n    case 8:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7]);\n\tbreak;\n    case 9:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8]);\n\tbreak;\n    case 10:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9]);\n\tbreak;\n    case 11:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10]);\n\tbreak;\n    case 12:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11]);\n\tbreak;\n    case 13:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12]);\n\tbreak;\n    case 14:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13]);\n\tbreak;\n    case 15:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14]);\n\tbreak;\n    case 16:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15]);\n\tbreak;\n    case 17:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16]);\n\tbreak;\n    case 18:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17]);\n\tbreak;\n    case 19:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18]);\n\tbreak;\n    case 20:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19]);\n\tbreak;\n    case 21:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20]);\n\tbreak;\n    case 22:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21]);\n\tbreak;\n    case 23:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22]);\n\tbreak;\n    case 24:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23]);\n\tbreak;\n    case 25:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24]);\n\tbreak;\n    case 26:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25]);\n\tbreak;\n    case 27:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26]);\n\tbreak;\n    case 28:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27]);\n\tbreak;\n    case 29:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28]);\n\tbreak;\n    case 30:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29]);\n\tbreak;\n    case 31:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30]);\n\tbreak;\n    case 32:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31]);\n\tbreak;\n    case 33:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32]);\n\tbreak;\n    case 34:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33]);\n\tbreak;\n    case 35:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34]);\n\tbreak;\n    case 36:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35]);\n\tbreak;\n    case 37:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36]);\n\tbreak;\n    case 38:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37]);\n\tbreak;\n    case 39:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38]);\n\tbreak;\n    case 40:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39]);\n\tbreak;\n    case 41:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40]);\n\tbreak;\n    case 42:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41]);\n\tbreak;\n    case 43:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42]);\n\tbreak;\n    case 44:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43]);\n\tbreak;\n    case 45:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44]);\n\tbreak;\n    case 46:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45]);\n\tbreak;\n    case 47:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46]);\n\tbreak;\n    case 48:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47]);\n\tbreak;\n    case 49:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48]);\n\tbreak;\n    case 50:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49]);\n\tbreak;\n    case 51:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50]);\n\tbreak;\n    case 52:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51]);\n\tbreak;\n    case 53:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52]);\n\tbreak;\n    case 54:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53]);\n\tbreak;\n    case 55:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54]);\n\tbreak;\n    case 56:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55]);\n\tbreak;\n    case 57:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56]);\n\tbreak;\n    case 58:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57]);\n\tbreak;\n    case 59:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58]);\n\tbreak;\n    case 60:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59]);\n\tbreak;\n    case 61:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60]);\n\tbreak;\n    case 62:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61]);\n\tbreak;\n    case 63:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62]);\n\tbreak;\n    case 64:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63]);\n\tbreak;\n    case 65:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]);\n\tbreak;\n    default:\n\terrorcall(call, _(\"too many arguments, sorry\"));\n    }\n\n    for (na = 0, pa = args ; pa != R_NilValue ; pa = CDR(pa), na++) {\n\tvoid *p = cargs[na];\n\tSEXP arg = CAR(pa);\n\ts = VECTOR_ELT(ans, na);\n\tR_NativePrimitiveArgType type =\n\t    checkTypes ? checkTypes[na] : TYPEOF(arg);\n\tR_xlen_t n = xlength(arg);\n\n\tswitch(type) {\n\tcase RAWSXP:\n\t    if (copy) {\n\t\ts = allocVector(type, n);\n\t\tunsigned char *ptr = (unsigned char *) p;\n\t\tmemcpy(RAW(s), ptr, n * sizeof(Rbyte));\n\t\tptr += n * sizeof(Rbyte);\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*ptr++ != FILL)\n\t\t\terror(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t\tptr = (unsigned char *) p;\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*--ptr != FILL)\n\t\t\terror(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t    }\n\t    break;\n\tcase INTSXP:\n\t    if (copy) {\n\t\ts = allocVector(type, n);\n\t\tunsigned char *ptr = (unsigned char *) p;\n\t\tmemcpy(INTEGER(s), ptr, n * sizeof(int));\n\t\tptr += n * sizeof(int);\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*ptr++ != FILL)\n\t\t\terror(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t\tptr = (unsigned char *) p;\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*--ptr != FILL)\n\t\t\terror(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t    }\n\t    break;\n\tcase LGLSXP:\n\t    if (copy) {\n\t\ts = allocVector(type, n);\n\t\tunsigned char *ptr = (unsigned char *) p;\n\t\tint *iptr = (int*) ptr, tmp;\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    tmp =  iptr[i];\n\t\t    LOGICAL(s)[i] = (tmp == NA_INTEGER || tmp == 0) ? tmp : 1;\n\t\t}\n\t\tptr += n * sizeof(int);\n\t\tfor (int i = 0; i < NG;  i++)\n\t\t    if(*ptr++ != FILL)\n\t\t\terror(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t\tptr = (unsigned char *) p;\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*--ptr != FILL)\n\t\t\terror(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t    } else {\n\t\tint *iptr = (int *)p, tmp;\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    tmp =  iptr[i];\n\t\t    iptr[i] = (tmp == NA_INTEGER || tmp == 0) ? tmp : 1;\n\t\t}\n\t    }\n\t    break;\n\tcase REALSXP:\n\tcase SINGLESXP:\n\t    if (copy) {\n\t\ts = allocVector(REALSXP, n);\n\t\tif (type == SINGLESXP || asLogical(getAttrib(arg, CSingSymbol)) == 1) {\n\t\t    float *sptr = (float*) p;\n\t\t    for(R_xlen_t i = 0 ; i < n ; i++)\n\t\t\tREAL(s)[i] = (double) sptr[i];\n\t\t} else {\n\t\t    unsigned char *ptr = (unsigned char *) p;\n\t\t    memcpy(REAL(s), ptr, n * sizeof(double));\n\t\t    ptr += n * sizeof(double);\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*ptr++ != FILL)\n\t\t\t    error(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t    ptr = (unsigned char *) p;\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*--ptr != FILL)\n\t\t\t    error(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t}\n\t    } else {\n\t\tif (type == SINGLESXP || asLogical(getAttrib(arg, CSingSymbol)) == 1) {\n\t\t    s = allocVector(REALSXP, n);\n\t\t    float *sptr = (float*) p;\n\t\t    for(int i = 0 ; i < n ; i++)\n\t\t\tREAL(s)[i] = (double) sptr[i];\n\t\t}\n\t    }\n\t    break;\n\tcase CPLXSXP:\n\t    if (copy) {\n\t\ts = allocVector(type, n);\n\t\tunsigned char *ptr = (unsigned char *) p;\n\t\tmemcpy(COMPLEX(s), p, n * sizeof(Rcomplex));\n\t\tptr += n * sizeof(Rcomplex);\n\t\tfor (int i = 0; i < NG;  i++)\n\t\t    if(*ptr++ != FILL)\n\t\t\terror(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t\tptr = (unsigned char *) p;\n\t\tfor (int i = 0; i < NG; i++)\n\t\t    if(*--ptr != FILL)\n\t\t\terror(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t      symName, type2char(type), na+1);\n\t    }\n\t    break;\n\tcase STRSXP:\n\t    if(Fort) {\n\t\tchar buf[256];\n\t\t/* only return one string: warned on the R -> Fortran step */\n\t\tstrncpy(buf, (char*)p, 255);\n\t\tbuf[255] = '\\0';\n\t\tPROTECT(s = allocVector(type, 1));\n\t\tSET_STRING_ELT(s, 0, mkChar(buf));\n\t\tUNPROTECT(1);\n\t    } else if (copy) {\n\t\tSEXP ss = arg;\n\t\tPROTECT(s = allocVector(type, n));\n\t\tchar **cptr = (char**) p, **cptr0 = (char**) cargs0[na];\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    unsigned char *ptr = (unsigned char *) cptr[i];\n\t\t    SET_STRING_ELT(s, i, mkChar(cptr[i]));\n\t\t    if (cptr[i] == cptr0[i]) {\n\t\t\tconst char *z = translateChar(STRING_ELT(ss, i));\n\t\t\tfor (int j = 0; j < NG; j++)\n\t\t\t    if(*--ptr != FILL)\n\t\t\t\terror(\"array under-run in .C(\\\"%s\\\") in character argument %d, element %d\",\n\t\t\t\t      symName, na+1, (int)(i+1));\n\t\t\tptr = (unsigned char *) cptr[i];\n\t\t\tptr += strlen(z) + 1;\n\t\t\tfor (int j = 0; j < NG;  j++)\n\t\t\t    if(*ptr++ != FILL) {\n\t\t\t\t// force termination\n\t\t\t\tunsigned char *p = ptr;\n\t\t\t\tfor (int k = 1; k < NG - j; k++, p++)\n\t\t\t\t    if (*p == FILL) *p = '\\0';\n\t\t\t\terror(\"array over-run in .C(\\\"%s\\\") in character argument %d, element %d\\n'%s'->'%s'\\n\",\n\t\t\t\t      symName, na+1, (int)(i+1),\n\t\t\t\t      z, cptr[i]);\n\t\t\t    }\n\t\t    }\n\t\t}\n\t\tUNPROTECT(1);\n\t    } else {\n\t\tPROTECT(s = allocVector(type, n));\n\t\tchar **cptr = (char**) p;\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    SET_STRING_ELT(s, i, mkChar(cptr[i]));\n\t\tUNPROTECT(1);\n\t    }\n\t    break;\n\tdefault:\n\t    break;\n\t}\n\tif (s != arg) {\n\t    PROTECT(s);\n\t    SHALLOW_DUPLICATE_ATTRIB(s, arg);\n\t    SET_VECTOR_ELT(ans, na, s);\n\t    UNPROTECT(1);\n\t}\n    }\n    UNPROTECT(1);\n    vmaxset(vmax);\n    return ans;\n}\n\n#ifndef NO_CALL_R\nstatic const struct {\n    const char *name;\n    const SEXPTYPE type;\n}\n\ntypeinfo[] = {\n    {\"logical\",\t  LGLSXP },\n    {\"integer\",\t  INTSXP },\n    {\"double\",\t  REALSXP},\n    {\"complex\",\t  CPLXSXP},\n    {\"character\", STRSXP },\n    {\"list\",\t  VECSXP },\n    {NULL,\t  0      }\n};\n\nstatic int string2type(char *s)\n{\n    int i;\n    for (i = 0 ; typeinfo[i].name ; i++) {\n\tif(!strcmp(typeinfo[i].name, s)) {\n\t    return typeinfo[i].type;\n\t}\n    }\n    error(_(\"type \\\"%s\\\" not supported in interlanguage calls\"), s);\n    return 1; /* for -Wall */\n}\n\n/* This is entirely legacy, with no known users (Mar 2012).\n   So we freeze the code involved.\n */\n\nstatic void *RObjToCPtr2(SEXP s)\n{\n    int n;\n\n    switch(TYPEOF(s)) {\n    case LGLSXP:\n    case INTSXP:\n\tn = LENGTH(s);\n\tint *iptr = INTEGER(s);\n\tiptr = (int*) R_alloc(n, sizeof(int));\n\tfor (int i = 0 ; i < n ; i++) iptr[i] = INTEGER(s)[i];\n\treturn (void*) iptr;\n\tbreak;\n    case REALSXP:\n\tn = LENGTH(s);\n\tdouble *rptr = REAL(s);\n\trptr = (double*) R_alloc(n, sizeof(double));\n\tfor (int i = 0 ; i < n ; i++) rptr[i] = REAL(s)[i];\n\treturn (void*) rptr;\n\tbreak;\n    case CPLXSXP:\n\tn = LENGTH(s);\n\tRcomplex *zptr = COMPLEX(s);\n\tzptr = (Rcomplex*) R_alloc(n, sizeof(Rcomplex));\n\tfor (int i = 0 ; i < n ; i++) zptr[i] = COMPLEX(s)[i];\n\treturn (void*) zptr;\n\tbreak;\n    case STRSXP:\n\tn = LENGTH(s);\n\tchar **cptr = (char**) R_alloc(n, sizeof(char*));\n\tfor (int i = 0 ; i < n ; i++) {\n\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t    cptr[i] = (char*) R_alloc(strlen(ss) + 1, sizeof(char));\n\t    strcpy(cptr[i], ss);\n\t}\n\treturn (void*) cptr;\n\tbreak;\n\t/* From here down, probably not right */\n    case VECSXP:\n\tn = length(s);\n\tSEXP *lptr = (SEXP *) R_alloc(n, sizeof(SEXP));\n\tfor (int i = 0 ; i < n ; i++) lptr[i] = VECTOR_ELT(s, i);\n\treturn (void*) lptr;\n\tbreak;\n    default:\n\treturn (void*) s;\n    }\n}\n\n\n\nvoid call_R(char *func, long nargs, void **arguments, char **modes,\n\t    long *lengths, char **names, long nres, char **results)\n{\n    SEXP call, pcall, s;\n    SEXPTYPE type;\n    int i, j, n;\n\n    if (!isFunction((SEXP)func))\n\terror(\"invalid function in call_R\");\n    if (nargs < 0)\n\terror(\"invalid argument count in call_R\");\n    if (nres < 0)\n\terror(\"invalid return value count in call_R\");\n    PROTECT(pcall = call = allocList((int) nargs + 1));\n    SET_TYPEOF(call, LANGSXP);\n    SETCAR(pcall, (SEXP)func);\n    s = R_NilValue;\t\t/* -Wall */\n    for (i = 0 ; i < nargs ; i++) {\n\tpcall = CDR(pcall);\n\ttype = string2type(modes[i]);\n\tswitch(type) {\n\tcase LGLSXP:\n\tcase INTSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(type, n));\n\t    memcpy(INTEGER(CAR(pcall)), arguments[i], n * sizeof(int));\n\t    break;\n\tcase REALSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(REALSXP, n));\n\t    memcpy(REAL(CAR(pcall)), arguments[i], n * sizeof(double));\n\t    break;\n\tcase CPLXSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(CPLXSXP, n));\n\t    memcpy(REAL(CAR(pcall)), arguments[i], n * sizeof(Rcomplex));\n\t    break;\n\tcase STRSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(STRSXP, n));\n\t    for (j = 0 ; j < n ; j++) {\n\t\tchar *str = (char*)(arguments[i]);\n\t\tSET_STRING_ELT(CAR(pcall), i, mkChar(str));\n\t    }\n\t    break;\n\tdefault:\n\t    error(_(\"mode '%s' is not supported in call_R\"), modes[i]);\n\t}\n\tif(names && names[i])\n\t    SET_TAG(pcall, install(names[i]));\n\tENSURE_NAMEDMAX(CAR(pcall));\n    }\n    PROTECT(s = eval(call, R_GlobalEnv));\n    switch(TYPEOF(s)) {\n    case LGLSXP:\n    case INTSXP:\n    case REALSXP:\n    case CPLXSXP:\n    case STRSXP:\n\tif(nres > 0)\n\t    results[0] = (char *) RObjToCPtr2(s);\n\tbreak;\n    case VECSXP:\n\tn = length(s);\n\tif (nres < n) n = (int) nres;\n\tfor (i = 0 ; i < n ; i++)\n\t    results[i] = (char *) RObjToCPtr2(VECTOR_ELT(s, i));\n\tbreak;\n    case LISTSXP:\n\tn = length(s);\n\tif(nres < n) n = (int) nres;\n\tfor(i = 0 ; i < n ; i++) {\n\t    results[i] = (char *) RObjToCPtr2(s);\n\t    s = CDR(s);\n\t}\n\tbreak;\n    }\n    UNPROTECT(2);\n    return;\n}\n\nvoid call_S(char *func, long nargs, void **arguments, char **modes,\n\t    long *lengths, char **names, long nres, char **results)\n{\n    call_R(func, nargs, arguments, modes, lengths, names, nres, results);\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/main/Rdynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1997-2018 The R Core Team\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n\n/*\n  This is an effort to merge the 3 different dynload.c files in the\n  distribution from the unix/, macintosh/dll/ and gnuwin32/ directories.\n  The aim is to consolidate these different implementations into\n      i) a generic or platform-independent common core\n     ii) platform-dependent routines that are registered\n\t as function pointers.\n  The reason for using function pointers rather than explicit\n  linking of symbols is\n     a) to avoid confusion in the linking\n     b) to allow for easily overriding these in embedded applications\n\tin which a host application needs to control how R finds\n\tsymbols. This may be necessary for security reasons.\n */\n\n/*  Dynamic Loading Support\n *\n *  This module provides support for run-time loading of shared objects\n *  access to symbols within such objects via .C and .Fortran.  This is\n *  done under Unix with dlopen, dlclose and dlsym (the exception is\n *  hpux, where we use compatibility code provided by Luke Tierney).\n *  There are two cases:\n *\n *\n *  1. The dlopen interface is available.\n *\n *  In this case all symbol location in packages is done using the\n *  dlopen routines.  We maintain a list of currently loaded shared\n *  objects in an array called \"LoadedDLL\" with the number of currently\n *  loaded objects being \"CountDLL\".  To locate a symbol, we probe\n *  the loaded objects in order until the symbol is located.  If we\n *  do not find a symbol in the loaded objects, we search the\n *  executable itself.  This search is not very efficient, but this\n *  probably pales into insignificance when compared with the\n *  inefficiencies in the R interpreter.\n *\n *  Loading and unloading of shared objects is done via the routines\n *  AddDLL and DeleteDLL.  These routines maintain the list of\n *  currently loaded objects.  When an object is added, any existing\n *  reference to that object is deleted and then the object is\n *  inserted at the start of the search list.  This way, symbols in\n *  more recently loaded objects are found first.\n *\n *\n *  Accessing native routines in base (the R executable).\n *\n *  In this case, we use the registration mechanism and the DllInfo array\n *  in ../main/Rdynload.c to locate functions in the executable. We do this\n *  by straight linear search through the table.\n *  Note that the base routines registered are listed in\n *               ../main/registration.c\n *  and are registered during the initialization of the R engine.\n *  (This replaces the previous mechanism that built a table\n *  from ../appl/ROUTINES using Perl/sed).\n *\n *\n *  If speed is ever an issue in the lookup of registered symbols, we can\n *  store the registered routines in a hashtable or binary tree as they\n *  are being registered.\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Internal.h>\n\n#include <string.h>\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#include <Rmath.h>\n#include <Rdynpriv.h>\n\n#ifdef Unix\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif /* __hpux */\n# ifndef HAVE_NO_SYMBOL_UNDERSCORE\n#  ifdef HAVE_ELF_H\n#   define HAVE_NO_SYMBOL_UNDERSCORE\n#  endif /* HAVE_ELF_H */\n# endif /* HAVE_NO_SYMBOL_UNDERSCORE */\n#endif\n\n#ifdef Win32\n# define HAVE_DYNAMIC_LOADING\n#endif\n\n\n#ifdef CACHE_DLL_SYM  /* Used on Windows */\n#define MAX_CACHE\t100\n/* keep a record of symbols that have been found, about 70 bytes each */\nR_CPFun CPFun[MAX_CACHE];\nint nCPFun = 0;\n#endif\n\nstatic int MaxNumDLLs = 0; /* initialized in initLoadedDLL */\n\nstatic int CountDLL = 0;\n\n#include <R_ext/Rdynload.h>\n\n/* Allocated in initLoadedDLL at R session start. Never free'd */\nstatic DllInfo* LoadedDLL = NULL;\n\nstatic int addDLL(char *dpath, char *name, HINSTANCE handle);\nstatic SEXP Rf_MakeDLLInfo(DllInfo *info);\n\nstatic SEXP createRSymbolObject(SEXP sname, DL_FUNC f,\n\t\t\t\tR_RegisteredNativeSymbol *symbol,\n\t\t\t\tRboolean withRegistrationInfo);\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path);\n\nattribute_hidden OSDynSymbol Rf_osDynSymbol;\nattribute_hidden OSDynSymbol *R_osDynSymbol = &Rf_osDynSymbol;\n\nvoid R_init_base(DllInfo *); /* In Registration.c */\n\nstatic void initLoadedDLL();\n\nvoid attribute_hidden\nInitDynload()\n{\n    initLoadedDLL();\n    int which = addDLL(strdup(\"base\"), \"base\", NULL);\n    DllInfo *dll = &LoadedDLL[which];\n    R_init_base(dll);\n    InitFunctionHashing();\n}\n\n/* Allocate LoadedDLL. Errors are reported via R_Suicide, because this is\n   called too early during startup to use error(.) */\nstatic void initLoadedDLL()\n{\n    if (CountDLL != 0 || LoadedDLL != NULL)\n\tR_Suicide(\"DLL table corruption detected\"); /* not translated */\n\n    /* Note that it is likely that dlopen will use up at least one file\n       descriptor for each DLL loaded (it may load further dynamically\n       linked libraries), so we do not want to get close to the fd limit\n       (which may be as low as 256).\n\n       When R_MAX_NUM_DLLS environment variable is set and is in range\n       [100,1000] and the fd limit is sufficient or can be increased,\n       this becomes the maximum number of DLLs. Otherwise, R fails to start.\n\n       When R_MAX_NUM_DLLS is not set, R uses a reasonable default value\n       that matches the fd limit. R attempts to increase the limit if it\n       is too small. The goal for maximum number of DLLs is currently 614.\n\n       The limit receives increased attention with 'workflow'\n       documents which load increasingly more packages, hitting the\n       default fd limit of 256 on macOS systems.\n    */\n\n    char *req = getenv(\"R_MAX_NUM_DLLS\");\n    if (req != NULL) {\n\t/* set exactly the requested limit, or fail */\n\tint reqlimit = atoi(req);\n\tif (reqlimit < 100) {\n\t    char msg[128];\n\t    snprintf(msg, 128,\n\t      _(\"R_MAX_NUM_DLLS must be at least %d\"), 100);\n\t    R_Suicide(msg);\n\t}\n\tif (reqlimit > 1000) {\n\t    char msg[128];\n\t    snprintf(msg, 128,\n\t      _(\"R_MAX_NUM_DLLS cannot be bigger than %d\"), 1000);\n\t    R_Suicide(msg);\n\t}\n\tint needed_fds = (int)ceil(reqlimit / 0.6);\n\tint fdlimit = R_EnsureFDLimit(needed_fds);\n\tif (fdlimit < 0 && reqlimit > 100) {\n\t    /* this is very unlikely */\n\t    char msg[128];\n\t    snprintf(msg, 128,\n\t      _(\"R_MAX_NUM_DLLS cannot be bigger than %d when fd limit is not known\"),\n\t      100);\n\t    R_Suicide(msg);\n\t} else if (fdlimit >= 0 && fdlimit < needed_fds) {\n\t    int maxdlllimit = (int) (0.6 * fdlimit);\n\t    if (maxdlllimit < 100)\n\t\tR_Suicide(_(\"the limit on the number of open files is too low\"));\n\t    char msg[128];\n\t    snprintf(msg, 128,\n\t      _(\"R_MAX_NUM_DLLS bigger than %d may exhaust open files limit\"),\n\t      maxdlllimit);\n\t    R_Suicide(msg);\n\t}\n\t/* when fdlimit == -1 (not known), currently only reqlimit of 100 is\n\t   allowed */\n\tMaxNumDLLs = reqlimit;\n    } else {\n\t/* set a reasonable default limit */\n\tint needed_fds = 1024;\n\tint fdlimit = R_EnsureFDLimit(needed_fds);\n\tif (fdlimit < 0)\n\t    MaxNumDLLs = 100;\n\telse {\n\t    MaxNumDLLs = (int) (0.6 * fdlimit);\n\t    if (MaxNumDLLs < 100)\n\t\tR_Suicide(_(\"the limit on the number of open files is too low\"));\n\t}\n    }\n\n    /* memory is set to zero */\n    LoadedDLL = (DllInfo *) calloc(MaxNumDLLs, sizeof(DllInfo));\n    if (LoadedDLL == NULL)\n\tR_Suicide(_(\"could not allocate space for DLL table\"));\n}\n\n/* returns DllInfo used by the embedding application.\n   the underlying \"(embedding)\" entry is created if not present */\nDllInfo *R_getEmbeddingDllInfo()\n{\n    DllInfo *dll = R_getDllInfo(\"(embedding)\");\n    if (dll == NULL) {\n\tint which = addDLL(strdup(\"(embedding)\"), \"(embedding)\", NULL);\n\tdll = &LoadedDLL[which];\n\t/* make sure we don't attempt dynamic lookup */\n\tR_useDynamicSymbols(dll, FALSE);\n    }\n    return dll;\n}\n\nRboolean R_useDynamicSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->useDynamicLookup;\n    info->useDynamicLookup = value;\n    return old;\n}\n\nRboolean R_forceSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->forceSymbols;\n    info->forceSymbols = value;\n    return old;\n}\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym);\nstatic void\nR_addCallRoutine(DllInfo *info,\n\t\t const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym);\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym);\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym);\n\n\n/*\n Returns a reference to the DllInfo object associated with the shared object\n with the path name `path'. This ensures uniqueness rather than having the\n undesirable situation of two objects with the same name but in different\n directories.\n This is available so that it can be called from arbitrary C routines\n that need to call R_registerRoutines(). The initialization routine\n R_init_<object name> is passed the DllInfo reference as an argument.\n Other routines must explicitly request it using this routine.\n */\nDllInfo *\nR_getDllInfo(const char *path)\n{\n    int i;\n    for(i = 0; i < CountDLL; i++) {\n\tif(strcmp(LoadedDLL[i].path, path) == 0) return(&LoadedDLL[i]);\n    }\n    return (DllInfo*) NULL;\n}\n\n/*\n  Explicitly register the native routines for use in .Call(), .C() and\n  .Fortran() functions. These registered values are used to resolve\n  symbols in an object that makes a call to this routine, rather than\n  the usual dynamic resolution done by dlsym() or the equivalent on\n  the different platforms.\n */\nint\nR_registerRoutines(DllInfo *info, const R_CMethodDef * const croutines,\n\t\t   const R_CallMethodDef * const callRoutines,\n\t\t   const R_FortranMethodDef * const fortranRoutines,\n\t\t   const R_ExternalMethodDef * const externalRoutines)\n{\n    int i, num;\n\n    if(info == NULL)\n\terror(_(\"R_RegisterRoutines called with invalid DllInfo object.\"));\n\n    /* Default is to look in registered and then dynamic (unless\n       the is no handle such as in \"base\" or \"embedded\")\n       Potentially change in the future to be only registered\n       if there are any registered values.\n    */\n    info->useDynamicLookup = (info->handle) ? TRUE : FALSE;\n    info->forceSymbols = FALSE;\n\n    if(croutines) {\n\tfor(num = 0; croutines[num].name != NULL; num++) {;}\n\tinfo->CSymbols = (Rf_DotCSymbol*)calloc((size_t) num,\n\t\t\t\t\t\tsizeof(Rf_DotCSymbol));\n\tinfo->numCSymbols = num;\n\tfor(i = 0; i < num; i++) {\n\t    R_addCRoutine(info, croutines+i, info->CSymbols + i);\n\t}\n    }\n\n    if(fortranRoutines) {\n\tfor(num = 0; fortranRoutines[num].name != NULL; num++) {;}\n\tinfo->FortranSymbols =\n\t    (Rf_DotFortranSymbol*)calloc((size_t) num,\n\t\t\t\t\t sizeof(Rf_DotFortranSymbol));\n\tinfo->numFortranSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addFortranRoutine(info, fortranRoutines+i,\n\t\t\t\tinfo->FortranSymbols + i);\n    }\n\n    if(callRoutines) {\n\tfor(num = 0; callRoutines[num].name != NULL; num++) {;}\n\tinfo->CallSymbols =\n\t    (Rf_DotCallSymbol*)calloc((size_t) num, sizeof(Rf_DotCallSymbol));\n\tinfo->numCallSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addCallRoutine(info, callRoutines+i, info->CallSymbols + i);\n    }\n\n    if(externalRoutines) {\n\tfor(num = 0; externalRoutines[num].name != NULL; num++) {;}\n\tinfo->ExternalSymbols =\n\t    (Rf_DotExternalSymbol*)calloc((size_t) num,\n\t\t\t\t\t  sizeof(Rf_DotExternalSymbol));\n\tinfo->numExternalSymbols = num;\n\n\tfor(i = 0; i < num; i++)\n\t    R_addExternalRoutine(info, externalRoutines+i,\n\t\t\t\t info->ExternalSymbols + i);\n    }\n\n    return(1);\n}\n\nstatic void\nR_setPrimitiveArgTypes(const R_FortranMethodDef * const croutine,\n\t\t       Rf_DotFortranSymbol *sym)\n{\n    sym->types = (R_NativePrimitiveArgType *)\n\tmalloc(sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n    if(!sym->types)\n\terror(\"allocation failure in R_setPrimitiveArgTypes\");\n    if(sym->types)\n\tmemcpy(sym->types, croutine->types,\n\t       sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n\n}\n\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n}\n\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n}\n\nstatic void\nR_addCallRoutine(DllInfo *info, const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\nstatic void\nRf_freeCSymbol(Rf_DotCSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeCallSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeExternalSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeFortranSymbol(Rf_DotFortranSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeDllInfo(DllInfo *info)\n{\n    int i;\n    free(info->name);\n    free(info->path);\n    if(info->CSymbols) {\n\tfor(i = 0; i < info->numCSymbols; i++)\n\t    Rf_freeCSymbol(info->CSymbols+i);\n\tfree(info->CSymbols);\n    }\n    if(info->CallSymbols) {\n\tfor(i = 0; i < info->numCallSymbols; i++)\n\t    Rf_freeCallSymbol(info->CallSymbols+i);\n\tfree(info->CallSymbols);\n    }\n    if(info->ExternalSymbols) {\n\tfor(i = 0; i < info->numExternalSymbols; i++)\n\t    Rf_freeExternalSymbol(info->ExternalSymbols+i);\n\tfree(info->ExternalSymbols);\n    }\n    if(info->FortranSymbols) {\n\tfor(i = 0; i < info->numFortranSymbols; i++)\n\t    Rf_freeFortranSymbol(info->FortranSymbols+i);\n\tfree(info->FortranSymbols);\n    }\n}\n\n\ntypedef void (*DllInfoUnloadCall)(DllInfo *);\ntypedef DllInfoUnloadCall DllInfoInitCall;\n\nstatic Rboolean\nR_callDLLUnload(DllInfo *dllInfo)\n{\n    char buf[1024];\n    DllInfoUnloadCall f;\n    R_RegisteredNativeSymbol symbol;\n    symbol.type = R_ANY_SYM;\n\n    snprintf(buf, 1024, \"R_unload_%s\", dllInfo->name);\n    f = (DllInfoUnloadCall) R_dlsym(dllInfo, buf, &symbol);\n    if(f) f(dllInfo);\n\n    return(TRUE);\n}\n\n\t/* Remove the specified DLL from the current DLL list */\n\t/* Returns 1 if the DLL was found and removed from */\n\t/* the list and returns 0 otherwise. */\n\nstatic int DeleteDLL(const char *path)\n{\n    int   i, loc;\n\n    for (i = 0; i < CountDLL; i++) {\n\tif (!strcmp(path, LoadedDLL[i].path)) {\n\t    loc = i;\n\t    goto found;\n\t}\n    }\n    return 0;\nfound:\n#ifdef CACHE_DLL_SYM\n    if(R_osDynSymbol->deleteCachedSymbols)\n\tR_osDynSymbol->deleteCachedSymbols(&LoadedDLL[loc]);\n#endif\n    R_reinit_altrep_classes(&LoadedDLL[loc]);\n    R_callDLLUnload(&LoadedDLL[loc]);\n    R_osDynSymbol->closeLibrary(LoadedDLL[loc].handle);\n    Rf_freeDllInfo(LoadedDLL+loc);\n    /* FIXME: why not use memcpy here? */\n    for(i = loc + 1 ; i < CountDLL ; i++) {\n\tLoadedDLL[i - 1].path = LoadedDLL[i].path;\n\tLoadedDLL[i - 1].name = LoadedDLL[i].name;\n\tLoadedDLL[i - 1].handle = LoadedDLL[i].handle;\n\tLoadedDLL[i - 1].useDynamicLookup = LoadedDLL[i].useDynamicLookup;\n\tLoadedDLL[i - 1].numCSymbols = LoadedDLL[i].numCSymbols;\n\tLoadedDLL[i - 1].numCallSymbols = LoadedDLL[i].numCallSymbols;\n\tLoadedDLL[i - 1].numFortranSymbols = LoadedDLL[i].numFortranSymbols;\n\tLoadedDLL[i - 1].numExternalSymbols = LoadedDLL[i].numExternalSymbols;\n\tLoadedDLL[i - 1].CSymbols = LoadedDLL[i].CSymbols;\n\tLoadedDLL[i - 1].CallSymbols = LoadedDLL[i].CallSymbols;\n\tLoadedDLL[i - 1].FortranSymbols = LoadedDLL[i].FortranSymbols;\n\tLoadedDLL[i - 1].ExternalSymbols = LoadedDLL[i].ExternalSymbols;\n\tLoadedDLL[i - 1].forceSymbols = LoadedDLL[i].forceSymbols;\n    }\n    CountDLL--;\n    return 1;\n}\n\nattribute_hidden\nDL_FUNC Rf_lookupCachedSymbol(const char *name, const char *pkg, int all)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    for (i = 0; i < nCPFun; i++)\n\tif (!strcmp(name, CPFun[i].name) &&\n\t    (all || !strcmp(pkg, CPFun[i].pkg)))\n\t    return CPFun[i].func;\n#endif\n\n    return((DL_FUNC) NULL);\n}\n\n\n\n#ifdef Win32\n#define DLLerrBUFSIZE 4000\n#else  /* Not Windows */\n#define DLLerrBUFSIZE 1000\n#endif\n\nstatic char DLLerror[DLLerrBUFSIZE] = \"\";\n\n/* the error message; length taken from ERRBUFSIZE in ./hpdlfcn.c  */\n\n\t/* Inserts the specified DLL at the head of the DLL list */\n\t/* Returns 1 if the DLL was successfully added */\n\t/* and returns 0 if the DLL table is full or */\n\t/* or if dlopen fails for some reason. */\n\n\nstatic DllInfo* AddDLL(const char *path, int asLocal, int now,\n\t\t       const char *DLLsearchpath)\n{\n    HINSTANCE handle;\n    DllInfo *info = NULL;\n\n    DeleteDLL(path);\n    if(CountDLL == MaxNumDLLs) {\n\tstrcpy(DLLerror, _(\"`maximal number of DLLs reached...\"));\n\treturn NULL;\n    }\n\n    handle = R_osDynSymbol->loadLibrary(path, asLocal, now, DLLsearchpath);\n\n    if(handle == NULL) {\n\tR_osDynSymbol->getError(DLLerror, DLLerrBUFSIZE);\n\treturn NULL;\n    }\n\n    info = R_RegisterDLL(handle, path);\n\n    /* Now look for an initializing routine named R_init_<object name>.\n       If it is present, we call it. It should take a reference to the\n       DllInfo object currently being initialized.\n    */\n    if(info) {\n\tconst char *nm = info->name;\n\tsize_t len = strlen(nm) + 9;\n\tchar tmp[len]; // R_init_ + underscore + null\n\tDllInfoInitCall f;\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n\tsnprintf(tmp, len,  \"%s%s\",\"R_init_\", info->name);\n#else\n\tsnprintf(tmp, len, \"_%s%s\",\"R_init_\", info->name);\n#endif\n\tf = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t/* If that failed, might have used the package name with\n\t   . replaced by _ (as . it not valid in symbol names). */\n\tif(!f) {\n\t    /* This is potentially unsafe in MBCSs, as '.' might be\n\t       part of a character: but is not in UTF-8 */\n\t    for(char *p = tmp; *p; p++) if(*p == '.') *p = '_';\n\t    f = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t}\n\tif(f) f(info);\n    }\n\n    return info;\n}\n\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path)\n{\n    char *dpath,  DLLname[PATH_MAX], *p;\n    DllInfo *info;\n\n    dpath = (char *) malloc(strlen(path)+1);\n    if(dpath == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'path'\"));\n\tR_osDynSymbol->closeLibrary(handle);\n\treturn 0;\n    }\n    strcpy(dpath, path);\n\n    if(R_osDynSymbol->fixPath) R_osDynSymbol->fixPath(dpath);\n\n    /* keep only basename from path */\n    p = Rf_strrchr(dpath, FILESEP[0]);\n    if(!p) p = dpath; else p++;\n    if(strlen(p) < PATH_MAX) strcpy(DLLname, p);\n    else error(_(\"DLLname '%s' is too long\"), p);\n\n    /* remove SHLIB_EXT if present */\n    p = DLLname + strlen(DLLname) - strlen(SHLIB_EXT);\n#ifdef Win32  /* case-insensitive file system */\n    if(p > DLLname && stricmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#else\n    if(p > DLLname && strcmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#endif\n\n    if (addDLL(dpath, DLLname, handle)) {\n\tinfo = &LoadedDLL[CountDLL-1];\n\t/* default is to use old-style dynamic lookup.  The object's\n\t   initialization routine can limit access by setting this to FALSE.\n\t*/\n\tinfo->useDynamicLookup = TRUE;\n\tinfo->forceSymbols = FALSE;\n\treturn info;\n    } else\n\treturn NULL;\n}\n\nstatic int\naddDLL(char *dpath, char *DLLname, HINSTANCE handle)\n{\n    int ans = CountDLL;\n    char *name = (char *) malloc(strlen(DLLname)+1);\n    if(name == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'name'\"));\n\tif(handle)\n\t    R_osDynSymbol->closeLibrary(handle);\n\tfree(dpath);\n\treturn 0;\n    }\n\n    strcpy(name, DLLname);\n    LoadedDLL[CountDLL].path = dpath;\n    LoadedDLL[CountDLL].name = name;\n    LoadedDLL[CountDLL].handle = handle;\n\n    LoadedDLL[CountDLL].numCSymbols = 0;\n    LoadedDLL[CountDLL].numCallSymbols = 0;\n    LoadedDLL[CountDLL].numFortranSymbols = 0;\n    LoadedDLL[CountDLL].numExternalSymbols = 0;\n    LoadedDLL[CountDLL].CSymbols = NULL;\n    LoadedDLL[CountDLL].CallSymbols = NULL;\n    LoadedDLL[CountDLL].FortranSymbols = NULL;\n    LoadedDLL[CountDLL].ExternalSymbols = NULL;\n    CountDLL++;\n\n    return(ans);\n}\n\nstatic Rf_DotCSymbol *\nRf_lookupRegisteredCSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numCSymbols; i++) {\n\tif(strcmp(name, info->CSymbols[i].name) == 0)\n\t    return(&(info->CSymbols[i]));\n    }\n    return NULL;\n}\n\nstatic Rf_DotFortranSymbol *\nRf_lookupRegisteredFortranSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numFortranSymbols; i++) {\n\tif(strcmp(name, info->FortranSymbols[i].name) == 0)\n\t    return(&(info->FortranSymbols[i]));\n    }\n\n    return (Rf_DotFortranSymbol*) NULL;\n}\n\nstatic Rf_DotCallSymbol *\nRf_lookupRegisteredCallSymbol(DllInfo *info, const char *name)\n{\n\n    for(int i = 0; i < info->numCallSymbols; i++) {\n\tif(strcmp(name, info->CallSymbols[i].name) == 0)\n\t    return(&(info->CallSymbols[i]));\n    }\n    return (Rf_DotCallSymbol*) NULL;\n}\n\nstatic Rf_DotExternalSymbol *\nRf_lookupRegisteredExternalSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numExternalSymbols; i++) {\n\tif(strcmp(name, info->ExternalSymbols[i].name) == 0)\n\t    return(&(info->ExternalSymbols[i]));\n    }\n    return (Rf_DotExternalSymbol*) NULL;\n}\n\nstatic DL_FUNC\nR_getDLLRegisteredSymbol(DllInfo *info, const char *name,\n\t\t\t R_RegisteredNativeSymbol *symbol)\n{\n    NativeSymbolType purpose = R_ANY_SYM;\n\n    if(symbol)\n\tpurpose = symbol->type;\n\n    if((purpose == R_ANY_SYM || purpose == R_C_SYM) &&\n       info->numCSymbols > 0) {\n\tRf_DotCSymbol *sym;\n\tsym = Rf_lookupRegisteredCSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_C_SYM;\n\t\tsymbol->symbol.c = sym;\n\t\tsymbol->dll = info;\n\t    }\n\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_CALL_SYM) &&\n       info->numCallSymbols > 0) {\n\tRf_DotCallSymbol *sym;\n\tsym = Rf_lookupRegisteredCallSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_CALL_SYM;\n\t\tsymbol->symbol.call = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_FORTRAN_SYM) &&\n       info->numFortranSymbols > 0) {\n\tRf_DotFortranSymbol *sym;\n\tsym = Rf_lookupRegisteredFortranSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_FORTRAN_SYM;\n\t\tsymbol->symbol.fortran = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_EXTERNAL_SYM) &&\n       info->numExternalSymbols > 0) {\n\tRf_DotExternalSymbol *sym;\n\tsym = Rf_lookupRegisteredExternalSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_EXTERNAL_SYM;\n\t\tsymbol->symbol.external = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    return((DL_FUNC) NULL);\n}\n\nDL_FUNC attribute_hidden\nR_dlsym(DllInfo *info, char const *name,\n\tR_RegisteredNativeSymbol *symbol)\n{\n    size_t len = strlen(name) + 4;\n    char buf[len]; /* up to 3 additional underscores */\n    DL_FUNC f;\n\n    f = R_getDLLRegisteredSymbol(info, name, symbol);\n    if(f) return(f);\n\n\n    if(info->useDynamicLookup == FALSE) return(NULL);\n\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n    snprintf(buf, len, \"%s\", name);\n#else\n    snprintf(buf, len, \"_%s\", name);\n#endif\n\n#ifdef HAVE_F77_UNDERSCORE\n    if(symbol && symbol->type == R_FORTRAN_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n    }\n#endif\n\n    f = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n#ifdef HAVE_F77_UNDERSCORE\n    if (!f && symbol && symbol->type == R_ANY_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n\tf = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n    }\n#endif\n\n    return f;\n}\n\n/* R_FindSymbol checks whether one of the objects that have been\n   loaded contains the symbol name and returns a pointer to that\n   symbol upon success.\n*/\n\nDL_FUNC R_FindSymbol(char const *name, char const *pkg,\n\t\t     R_RegisteredNativeSymbol *symbol)\n{\n    DL_FUNC fcnptr = (DL_FUNC) NULL;\n    int i, all = (strlen(pkg) == 0), doit;\n\n    if(R_osDynSymbol->lookupCachedSymbol)\n\tfcnptr = R_osDynSymbol->lookupCachedSymbol(name, pkg, all);\n\n    if(fcnptr) return(fcnptr);\n\n    /* The following is not legal ANSI C. */\n    /* It is only meant to be used in systems supporting */\n    /* the dlopen() interface, in which systems data and  */\n    /* function pointers _are_ the same size and _can_   */\n    /* be cast without loss of information.\t     */\n\n    for (i = CountDLL - 1; i >= 0; i--) {\n\tdoit = all;\n\tif(!doit && !strcmp(pkg, LoadedDLL[i].name)) doit = 2;\n\tif(doit && LoadedDLL[i].forceSymbols) doit = 0;\n\tif(doit) {\n\t    fcnptr = R_dlsym(&LoadedDLL[i], name, symbol); /* R_osDynSymbol->dlsym */\n\t    if (fcnptr != (DL_FUNC) NULL) {\n\t\tif(symbol)\n\t\t    symbol->dll = LoadedDLL+i;\n#ifdef CACHE_DLL_SYM\n\t\tif(strlen(pkg) <= 20 && strlen(name) <= 40 && nCPFun < MAX_CACHE\n\t\t   && (!symbol || !symbol->symbol.c)) {\n\t\t    strcpy(CPFun[nCPFun].pkg, LoadedDLL[i].name);\n\t\t    strcpy(CPFun[nCPFun].name, name);\n\t\t    CPFun[nCPFun++].func = fcnptr;\n\t\t}\n#endif\n\t\treturn fcnptr;\n\t    }\n\t}\n\tif(doit > 1) return (DL_FUNC) NULL;  /* Only look in the first-matching DLL */\n    }\n\n    return (DL_FUNC) NULL;\n}\n\n\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *const path)\n{\n    R_osDynSymbol->getFullDLLPath(call, buf, path);\n}\n\n\t/* do_dynload implements the R-Interface for the */\n\t/* loading of shared objects */\n\n/*\n  Extended to support 2 additional arguments (3 in total).\n  First argument is the name of the DLL.\n  Second argument is a logical indicating whether we\n  want the symbols to be kept in their own local symbol table\n  or added to the global symbol table of the application.\n  Third argument is a logical indicating whether the\n  dynamic loading should relocate all routine symbols\n  now and signal any errors immediately or lazily relocate\n  the symbols as they are invoked. This is useful for\n  developers so that they can ensure that all the symbols\n  are available before they release, and allows users to\n  call routines from \"incomplete\" DLLs.\n */\n\nSEXP attribute_hidden do_dynload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n    DllInfo *info;\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    /* AddDLL does this DeleteDLL(buf); */\n    info = AddDLL(buf, LOGICAL(CADR(args))[0], LOGICAL(CADDR(args))[0],\n\t\t  translateChar(STRING_ELT(CADDDR(args), 0)));\n    if(!info)\n\terror(_(\"unable to load shared object '%s':\\n  %s\"), buf, DLLerror);\n    return(Rf_MakeDLLInfo(info));\n}\n\nSEXP attribute_hidden do_dynunload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    if(!DeleteDLL(buf))\n\terror(_(\"shared object '%s\\' was not loaded\"), buf);\n    return R_NilValue;\n}\n\nint R_moduleCdynload(const char *module, int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\");\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s%s%s\", p, FILESEP, FILESEP,\n\t     R_ARCH, FILESEP, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s\", p, FILESEP, FILESEP,\n\t     module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\nint R_cairoCdynload(int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\"), *module = \"cairo\";\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s/%s%s\",\n\t     p, R_ARCH, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s%s\",\n\t     p, module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\n/**\n  Creates an R object representing the value of the\n  function pointer given by `f'. This object has class\n  NativeSymbol and can be used to relay symbols from\n  one DLL to another.\n */\nstatic SEXP\nRf_MakeNativeSymbolRef(DL_FUNC f)\n{\n    SEXP ref, klass;\n\n    PROTECT(ref = R_MakeExternalPtrFn(f, install(\"native symbol\"),\n\t\t\t\t      R_NilValue));\n    PROTECT(klass = mkString(\"NativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n    UNPROTECT(2);\n    return(ref);\n}\n\nstatic void\nfreeRegisteredNativeSymbolCopy(SEXP ref)\n{\n   void *ptr;\n   ptr = R_ExternalPtrAddr(ref);\n   if (ptr)\n       free(ptr);\n}\n\nstatic SEXP\nRf_MakeRegisteredNativeSymbol(R_RegisteredNativeSymbol *symbol)\n{\n    SEXP ref, klass;\n    R_RegisteredNativeSymbol *copy;\n    copy = (R_RegisteredNativeSymbol *) malloc(1 * sizeof(R_RegisteredNativeSymbol));\n    if(!copy) {\n\terror(ngettext(\"cannot allocate memory for registered native symbol (%d byte)\",\n\t\t       \"cannot allocate memory for registered native symbol (%d bytes)\",\n\t\t      (int) sizeof(R_RegisteredNativeSymbol)),\n\t\t      (int) sizeof(R_RegisteredNativeSymbol));\n    }\n    *copy = *symbol;\n\n    PROTECT(ref = R_MakeExternalPtr(copy,\n\t\t\t\t    install(\"registered native symbol\"),\n\t\t\t\t    R_NilValue));\n    R_RegisterCFinalizer(ref, freeRegisteredNativeSymbolCopy);\n\n    PROTECT(klass = mkString(\"RegisteredNativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n\n    UNPROTECT(2);\n    return(ref);\n}\n\n\nstatic SEXP\nRf_makeDllObject(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLHandle\"),\n\t\t\t\t    R_NilValue));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLHandle\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\nstatic SEXP\nRf_makeDllInfoReference(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLInfo\"),\n\t\t\t\t    install(\"DLLInfo\")));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoReference\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\n\n/**\n Creates an R object representing the public DLL information stored in\n info. Currently this is only the short and the long, fully qualified\n name of the DLL and whether we only look for symbols that have been\n registered in this DLL or do we also use dynamic lookup.\n */\nstatic SEXP\nRf_MakeDLLInfo(DllInfo *info)\n{\n    SEXP ref, elNames, tmp;\n    int i, n;\n    const char *const names[] = {\"name\", \"path\", \"dynamicLookup\",\n\t\t\t\t \"handle\", \"info\"};\n\n    n = sizeof(names)/sizeof(names[0]);\n\n    PROTECT(ref = allocVector(VECSXP, n));\n    SET_VECTOR_ELT(ref, 0, tmp = allocVector(STRSXP, 1));\n    if(info->name)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->name));\n    SET_VECTOR_ELT(ref, 1, tmp = allocVector(STRSXP, 1));\n    if(info->path)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->path));\n    SET_VECTOR_ELT(ref, 2, ScalarLogical(info->useDynamicLookup));\n\n    SET_VECTOR_ELT(ref, 3, Rf_makeDllObject(info->handle));\n\n    SET_VECTOR_ELT(ref, 4, Rf_makeDllInfoReference((HINSTANCE) info));\n\n    PROTECT(elNames = allocVector(STRSXP, n));\n    for(i = 0; i < n; i++)\n\tSET_STRING_ELT(elNames, i, mkChar(names[i]));\n    setAttrib(ref, R_NamesSymbol, elNames);\n\n    setAttrib(ref, R_ClassSymbol, mkString(\"DLLInfo\"));\n\n    UNPROTECT(2);\n\n    return(ref);\n}\n\n/*\n  This is the routine associated with the getNativeSymbolInfo()\n  function and it takes the name of a symbol and optionally an\n  object identifier (package usually) in which to restrict the search\n  for this symbol. It resolves the symbol and returns it to the caller\n  giving the symbol address, the package information (i.e. name and\n  fully qualified shared object name). If the symbol was explicitly\n  registered (rather than dynamically resolved by R), then we pass\n  back that information also, giving the number of arguments it\n  expects and the interface by which it should be called.\n  The returned object has class NativeSymbol. If the symbol was\n  registered, we add a class identifying the interface type\n  for which it is intended (i.e. .C(), .Call(), etc.)\n */\nSEXP attribute_hidden\nR_getSymbolInfo(SEXP sname, SEXP spackage, SEXP withRegistrationInfo)\n{\n    const void *vmax = vmaxget();\n    const char *package, *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    package = \"\";\n\n    name = translateChar(STRING_ELT(sname, 0));\n\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n\n    vmaxset(vmax);\n    return sym;\n}\n\nSEXP attribute_hidden\nR_getDllTable()\n{\n    int i;\n    SEXP ans;\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(i = 0; i < CountDLL; i++) {\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    }\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans))\n\tgoto again;\n\n    return(ans);\n}\n\nstatic SEXP\ncreateRSymbolObject(SEXP sname, DL_FUNC f, R_RegisteredNativeSymbol *symbol,\n\t\t    Rboolean withRegistrationInfo)\n{\n    SEXP tmp, klass, sym, names;\n    int n = (symbol->type != R_ANY_SYM) ? 4 : 3;\n    int numProtects = 0;\n\n    PROTECT(sym = allocVector(VECSXP, n));    numProtects++;\n    PROTECT(names = allocVector(STRSXP, n));    numProtects++;\n\n    if(!sname || sname == R_NilValue) {\n\tPROTECT(sname = mkString(symbol->symbol.call->name));\n\tnumProtects++;\n    }\n\n    SET_VECTOR_ELT(sym, 0, sname);\n    SET_STRING_ELT(names, 0, mkChar(\"name\"));\n\n    SET_VECTOR_ELT(sym, 1,\n\t\t   withRegistrationInfo && symbol && symbol->symbol.c && symbol->dll\n\t\t   ? Rf_MakeRegisteredNativeSymbol(symbol)\n\t\t   : Rf_MakeNativeSymbolRef(f));\n    SET_STRING_ELT(names, 1, mkChar(\"address\"));\n    if(symbol->dll)\n\tSET_VECTOR_ELT(sym, 2, Rf_MakeDLLInfo(symbol->dll));\n    SET_STRING_ELT(names, 2, mkChar(\"dll\"));\n\n\n    PROTECT(klass = allocVector(STRSXP, (symbol->type != R_ANY_SYM ? 2 : 1)));\n    numProtects++;\n    SET_STRING_ELT(klass, LENGTH(klass) - 1, mkChar(\"NativeSymbolInfo\"));\n\n    if(n > 3) {\n\t/* Add the registration information:\n\t   the number of arguments and the classname.\n\t*/\n\tint nargs = -1;\n\tchar *className = \"\";\n\tswitch(symbol->type) {\n\tcase R_C_SYM:\n\t    nargs = symbol->symbol.c->numArgs;\n\t    className = \"CRoutine\";\n\t    break;\n\tcase R_CALL_SYM:\n\t    nargs = symbol->symbol.call->numArgs;\n\t    className = \"CallRoutine\";\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    nargs = symbol->symbol.fortran->numArgs;\n\t    className = \"FortranRoutine\";\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    nargs = symbol->symbol.external->numArgs;\n\t    className = \"ExternalRoutine\";\n\t    break;\n\tdefault:\n\t    /* Something unintended has happened if we get here. */\n\t    error(_(\"unimplemented type %d in 'createRSymbolObject'\"),\n\t\t  symbol->type);\n\t    break;\n\t}\n\tSET_VECTOR_ELT(sym, 3, tmp = ScalarInteger(nargs));\n\tSET_STRING_ELT(klass, 0, mkChar(className));\n\tSET_STRING_ELT(names, 3, mkChar(\"numParameters\"));\n    }\n\n    setAttrib(sym, R_ClassSymbol, klass);\n    setAttrib(sym, R_NamesSymbol, names);\n\n    UNPROTECT(numProtects);\n    return(sym);\n}\n\nstatic SEXP\nR_getRoutineSymbols(NativeSymbolType type, DllInfo *info)\n{\n    SEXP ans;\n    int i, num;\n    R_RegisteredNativeSymbol  sym;\n    DL_FUNC address = NULL;\n\n    sym.dll = info;\n    sym.type =type;\n\n    switch(type) {\n    case R_CALL_SYM: num = info->numCallSymbols;\n\tbreak;\n    case R_C_SYM: num = info->numCSymbols;\n\tbreak;\n    case R_FORTRAN_SYM: num = info->numFortranSymbols;\n\tbreak;\n    case R_EXTERNAL_SYM: num = info->numExternalSymbols;\n\tbreak;\n    default:\n\tnum = 0;\n    }\n\n    PROTECT(ans = allocVector(VECSXP, num));\n\n    for(i = 0; i < num ; i++) {\n\tswitch(type) {\n\tcase R_CALL_SYM:\n\t    sym.symbol.call = &info->CallSymbols[i];\n\t    address = sym.symbol.call->fun;\n\t    break;\n\tcase R_C_SYM:\n\t    sym.symbol.c = &info->CSymbols[i];\n\t    address = sym.symbol.c->fun;\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    sym.symbol.fortran = &info->FortranSymbols[i];\n\t    address = sym.symbol.fortran->fun;\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    sym.symbol.external = &info->ExternalSymbols[i];\n\t    address = sym.symbol.external->fun;\n\t    break;\n\tdefault:\n\t    continue;\n\t}\n\tSET_VECTOR_ELT(ans, i, createRSymbolObject(NULL,  address, &sym, TRUE));/* XXX */\n    }\n\n    setAttrib(ans, R_ClassSymbol, mkString(\"NativeRoutineList\"));\n    UNPROTECT(1);\n    return(ans);\n}\n\n\nSEXP attribute_hidden\nR_getRegisteredRoutines(SEXP dll)\n{\n    DllInfo *info;\n    SEXP ans, snames;\n    int i;\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\nSEXP attribute_hidden\ndo_getSymbolInfo(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char *package = \"\", *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    checkArity(op, args);\n    SEXP sname = CAR(args), spackage = CADR(args),\n\twithRegistrationInfo = CADDR(args);\n\n    if (!isString(sname) || LENGTH(sname) != 1)\n\terror(_(\"invalid '%s' argument\"), \"name\");\n    name = translateChar(STRING_ELT(sname, 0));\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n    return sym;\n}\n\n/* .Internal(getLoadedDLLs()) */\nSEXP attribute_hidden\ndo_getDllTable(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP ans, nm;\n\n    checkArity(op, args);\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(int i = 0; i < CountDLL; i++)\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans)) goto again;\n\n    PROTECT(ans);\n    PROTECT(nm = allocVector(STRSXP, CountDLL));\n    setAttrib(ans, R_NamesSymbol, nm);\n    for(int i = 0; i < CountDLL; i++)\n\tSET_STRING_ELT(nm, i,\n\t\t       STRING_ELT(VECTOR_ELT(VECTOR_ELT(ans, i), 0), 0));\n    UNPROTECT(2);\n    return ans;\n}\n\nSEXP attribute_hidden\ndo_getRegisteredRoutines(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    checkArity(op, args);\n    SEXP dll = CAR(args), ans, snames;\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    DllInfo *info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(int i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\n\n\n/* Experimental interface for exporting and importing functions and\n   data from one package for use from C code in a package.  The\n   registration part probably ought to be integrated with the other\n   registrations.  The naming of these routines may be less than\n   ideal. */\n\nstatic SEXP CEntryTable = NULL;\n\nstatic SEXP get_package_CEntry_table(const char *package)\n{\n    SEXP penv, pname;\n\n    if (CEntryTable == NULL) {\n\tCEntryTable = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tR_PreserveObject(CEntryTable);\n    }\n    pname = install(package);\n    penv = findVarInFrame(CEntryTable, pname);\n    if (penv == R_UnboundValue) {\n\tpenv = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tdefineVar(pname, penv, CEntryTable);\n    }\n    return penv;\n}\n\n\nvoid R_RegisterCCallable(const char *package, const char *name, DL_FUNC fptr)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = R_MakeExternalPtrFn(fptr, R_NilValue, R_NilValue);\n    PROTECT(eptr);\n    defineVar(install(name), eptr, penv);\n    UNPROTECT(2);\n}\n\nDL_FUNC R_GetCCallable(const char *package, const char *name)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = findVarInFrame(penv, install(name));\n    UNPROTECT(1);\n    if (eptr == R_UnboundValue)\n\terror(_(\"function '%s' not provided by package '%s'\"), name, package);\n    else if (TYPEOF(eptr) != EXTPTRSXP)\n\terror(_(\"table entry must be an external pointer\"));\n    return R_ExternalPtrAddrFn(eptr);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/include/config.h.in": "/* src/include/config.h.in.  Generated from configure.ac by autoheader.  */\n\n#ifndef R_CONFIG_H\n#define R_CONFIG_H\n\n/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n   systems. This function is required for `alloca.c' support on those systems.\n   */\n#undef CRAY_STACKSEG_END\n\n/* Define to 1 if using `alloca.c'. */\n#undef C_ALLOCA\n\n/* Define to 1 if translation of program messages to the user's native\n   language is requested. */\n#undef ENABLE_NLS\n\n/* Define to dummy `main' function (if any) required to link to the Fortran\n   libraries. */\n#undef F77_DUMMY_MAIN\n\n/* Define to a macro mangling the given C identifier (in lower and upper\n   case), which must not contain underscores, for linking with Fortran. */\n#undef F77_FUNC\n\n/* As F77_FUNC, but for C identifiers containing underscores. */\n#undef F77_FUNC_\n\n/* Define if F77 and FC dummy `main' functions are identical. */\n#undef FC_DUMMY_MAIN_EQ_F77\n\n/* Define to 1 if you have the `access' function. */\n#undef HAVE_ACCESS\n\n/* Define to 1 if you have `alloca', as a function or macro. */\n#undef HAVE_ALLOCA\n\n/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n   */\n#undef HAVE_ALLOCA_H\n\n/* Define if you have the Aqua headers and libraries, and want to include\n   support for R.app and for the quartz() device to be built. */\n#undef HAVE_AQUA\n\n/* Define to 1 if you have the `argz_count' function. */\n#undef HAVE_ARGZ_COUNT\n\n/* Define to 1 if you have the <argz.h> header file. */\n#undef HAVE_ARGZ_H\n\n/* Define to 1 if you have the `argz_next' function. */\n#undef HAVE_ARGZ_NEXT\n\n/* Define to 1 if you have the `argz_stringify' function. */\n#undef HAVE_ARGZ_STRINGIFY\n\n/* Define to 1 if you have the <arpa/inet.h> header file. */\n#undef HAVE_ARPA_INET_H\n\n/* Define to 1 if you have the `asprintf' function. */\n#undef HAVE_ASPRINTF\n\n/* Define to 1 if you have the `atan2pi' function. */\n#undef HAVE_ATAN2PI\n\n/* Define to 1 if you have the `atanpi' function. */\n#undef HAVE_ATANPI\n\n/* Define to 1 if the compiler understands __builtin_expect. (For intl) */\n#undef HAVE_BUILTIN_EXPECT\n\n/* Define to 1 if you have the <bzlib.h> header file. */\n#undef HAVE_BZLIB_H\n\n/* Define to 1 if you have the `cabs' function. */\n#undef HAVE_CABS\n\n/* Define to 1 if you have the `cacos' function. */\n#undef HAVE_CACOS\n\n/* Define to 1 if you have cairo-ps. */\n#undef HAVE_CAIRO_PDF\n\n/* Define to 1 if you have cairo-pdf. */\n#undef HAVE_CAIRO_PS\n\n/* Define to 1 if you have cairo-svg. */\n#undef HAVE_CAIRO_SVG\n\n/* Define to 1 if you have the `carg' function. */\n#undef HAVE_CARG\n\n/* Define to 1 if you have the `casin' function. */\n#undef HAVE_CASIN\n\n/* Define to 1 if you have the `catan' function. */\n#undef HAVE_CATAN\n\n/* Define to 1 if you have the `ccos' function. */\n#undef HAVE_CCOS\n\n/* Define to 1 if you have the `ccosh' function. */\n#undef HAVE_CCOSH\n\n/* Define to 1 if you have the `cexp' function. */\n#undef HAVE_CEXP\n\n/* Define to 1 if you have the OS X function CFLocaleCopyCurrent in the\n   CoreFoundation framework. (For intl) */\n#undef HAVE_CFLOCALECOPYCURRENT\n\n/* Define to 1 if you have the OS X function CFPreferencesCopyAppValue in the\n   CoreFoundation framework. (For intl) */\n#undef HAVE_CFPREFERENCESCOPYAPPVALUE\n\n/* Define to 1 if you have the `chdir' function. */\n#undef HAVE_CHDIR\n\n/* Define to 1 if you have the `chmod' function. */\n#undef HAVE_CHMOD\n\n/* Define to 1 if you have the `clock_gettime' function. */\n#undef HAVE_CLOCK_GETTIME\n\n/* Define to 1 if you have the `clog' function. */\n#undef HAVE_CLOG\n\n/* Defined if framework CoreFoundation is present */\n#undef HAVE_COREFOUNDATION_FW\n\n/* Define to 1 if you have the `cospi' function. */\n#undef HAVE_COSPI\n\n/* Define to 1 if you have the `cpow' function. */\n#undef HAVE_CPOW\n\n/* Define to 1 if you have the `csin' function. */\n#undef HAVE_CSIN\n\n/* Define to 1 if you have the `csinh' function. */\n#undef HAVE_CSINH\n\n/* Define to 1 if you have the `csqrt' function. */\n#undef HAVE_CSQRT\n\n/* Define to 1 if you have the `ctan' function. */\n#undef HAVE_CTAN\n\n/* Define to 1 if you have the `ctanh' function. */\n#undef HAVE_CTANH\n\n/* Define to 1 if you have the <curl/curl.h> header file. */\n#undef HAVE_CURL_CURL_H\n\n/* Define if the GNU dcgettext() function is already present or preinstalled.\n   */\n#undef HAVE_DCGETTEXT\n\n/* Define to 1 if you have the declaration of `alloca', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ALLOCA\n\n/* Define to 1 if you have the declaration of `dladdr', and to 0 if you don't.\n   */\n#undef HAVE_DECL_DLADDR\n\n/* Define to 1 if you have the declaration of `dlsym', and to 0 if you don't.\n   */\n#undef HAVE_DECL_DLSYM\n\n/* Define to 1 if you have the declaration of `feof_unlocked', and to 0 if you\n   don't. (For intl) */\n#undef HAVE_DECL_FEOF_UNLOCKED\n\n/* Define to 1 if you have the declaration of `fgets_unlocked', and to 0 if\n   you don't. (For intl) */\n#undef HAVE_DECL_FGETS_UNLOCKED\n\n/* Define to 1 if you have the declaration of `getc_unlocked', and to 0 if you\n   don't. (For intl) */\n#undef HAVE_DECL_GETC_UNLOCKED\n\n/* Define to 1 if you have the declaration of `isfinite', and to 0 if you\n   don't. */\n#undef HAVE_DECL_ISFINITE\n\n/* Define to 1 if you have the declaration of `isnan', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ISNAN\n\n/* Define to 1 if you have the declaration of `mkdtemp', and to 0 if you\n   don't. */\n#undef HAVE_DECL_MKDTEMP\n\n/* Define to 1 if you have the declaration of `putenv', and to 0 if you don't.\n   */\n#undef HAVE_DECL_PUTENV\n\n/* Define to 1 if you have the declaration of `realpath', and to 0 if you\n   don't. */\n#undef HAVE_DECL_REALPATH\n\n/* Define to 1 if you have the declaration of `RTLD_DEFAULT', and to 0 if you\n   don't. */\n#undef HAVE_DECL_RTLD_DEFAULT\n\n/* Define to 1 if you have the declaration of `RTLD_NEXT', and to 0 if you\n   don't. */\n#undef HAVE_DECL_RTLD_NEXT\n\n/* Define to 1 if you have the declaration of `siglongjmp', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SIGLONGJMP\n\n/* Define to 1 if you have the declaration of `sigsetjmp', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SIGSETJMP\n\n/* Define to 1 if you have the declaration of `SIZE_MAX', and to 0 if you\n   don't. */\n#undef HAVE_DECL_SIZE_MAX\n\n/* Define to 1 if you have the declaration of `strdup', and to 0 if you don't.\n   */\n#undef HAVE_DECL_STRDUP\n\n/* Define to 1 if you have the declaration of `strncasecmp', and to 0 if you\n   don't. */\n#undef HAVE_DECL_STRNCASECMP\n\n/* Define to 1 if you have the declaration of `vasprintf', and to 0 if you\n   don't. */\n#undef HAVE_DECL_VASPRINTF\n\n/* Define to 1 if you have the declaration of `_snprintf', and to 0 if you\n   don't. (For intl) */\n#undef HAVE_DECL__SNPRINTF\n\n/* Define to 1 if you have the declaration of `_snwprintf', and to 0 if you\n   don't. (For intl) */\n#undef HAVE_DECL__SNWPRINTF\n\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_DIRENT_H\n\n/* Define to 1 if you have the `dladdr' function. */\n#undef HAVE_DLADDR\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `dlsym' function. */\n#undef HAVE_DLSYM\n\n/* Define to 1 if you have the <dl.h> header file. */\n#undef HAVE_DL_H\n\n/* Define to 1 if you have the <elf.h> header file. */\n#undef HAVE_ELF_H\n\n/* Define to 1 if you have the <errno.h> header file. */\n#undef HAVE_ERRNO_H\n\n/* Define to 1 if you have the `execv' function. */\n#undef HAVE_EXECV\n\n/* Define to 1 if you have the `exp10' function. */\n#undef HAVE_EXP10\n\n/* Define to 1 if you have the `expm1' function. */\n#undef HAVE_EXPM1\n\n/* Define if your Fortran compiler appends an extra_underscore to external\n   names containing an underscore. */\n#undef HAVE_F77_EXTRA_UNDERSCORE\n\n/* Define if your Fortran compiler appends an underscore to external names. */\n#undef HAVE_F77_UNDERSCORE\n\n/* Define to 1 if you have the `fcntl' function. */\n#undef HAVE_FCNTL\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define to 1 if you have the `fdopen' function. */\n#undef HAVE_FDOPEN\n\n/* Define to 1 if you have the <features.h> header file. */\n#undef HAVE_FEATURES_H\n\n/* Define to 1 if you have the <floatingpoint.h> header file. */\n#undef HAVE_FLOATINGPOINT_H\n\n/* Define if C's Rcomplex and Fortran's COMPLEX*16 can be interchanged, and\n   can do arithmetic on the latter. */\n#undef HAVE_FORTRAN_DOUBLE_COMPLEX\n\n/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */\n#undef HAVE_FSEEKO\n\n/* Define to 1 if you have the `ftello' function. */\n#undef HAVE_FTELLO\n\n/* Define to 1 if you have the `ftruncate' function. */\n#undef HAVE_FTRUNCATE\n\n/* Define to 1 if you have the `fwprintf' function. */\n#undef HAVE_FWPRINTF\n\n/* Define to 1 if you have the `getcwd' function. */\n#undef HAVE_GETCWD\n\n/* Define to 1 if you have the `getegid' function. */\n#undef HAVE_GETEGID\n\n/* Define to 1 if you have the `geteuid' function. */\n#undef HAVE_GETEUID\n\n/* Define to 1 if you have the `getgid' function. */\n#undef HAVE_GETGID\n\n/* Define to 1 if you have the `getgrgid' function. */\n#undef HAVE_GETGRGID\n\n/* Define to 1 if you have the `getline' function. */\n#undef HAVE_GETLINE\n\n/* Define to 1 if you have the `getpagesize' function. */\n#undef HAVE_GETPAGESIZE\n\n/* Define to 1 if you have the `getpriority' function. */\n#undef HAVE_GETPRIORITY\n\n/* Define to 1 if you have the `getpwuid' function. */\n#undef HAVE_GETPWUID\n\n/* Define to 1 if you have the `getrlimit' function. */\n#undef HAVE_GETRLIMIT\n\n/* Define to 1 if you have the `getrusage' function. */\n#undef HAVE_GETRUSAGE\n\n/* Define if the GNU gettext() function is already present or preinstalled. */\n#undef HAVE_GETTEXT\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the `getuid' function. */\n#undef HAVE_GETUID\n\n/* Define if you have the GNU C library version >= 2. This is needed to fix a\n   problem with getting the prototype of strptime(). */\n#undef HAVE_GLIBC2\n\n/* Define to 1 if you have the `glob' function. */\n#undef HAVE_GLOB\n\n/* Define to 1 if you have the <glob.h> header file. */\n#undef HAVE_GLOB_H\n\n/* Define to 1 if you have the `gmtime_r' function. */\n#undef HAVE_GMTIME_R\n\n/* Define to 1 if you have the <grp.h> header file. */\n#undef HAVE_GRP_H\n\n/* Define to 1 if you have the `history_truncate_file' function. */\n#undef HAVE_HISTORY_TRUNCATE_FILE\n\n/* Define to 1 if you have the `hypot' function. */\n#undef HAVE_HYPOT\n\n/* Define if you have the iconv() function. */\n#undef HAVE_ICONV\n\n/* Define if you have the `iconvlist' function. */\n#undef HAVE_ICONVLIST\n\n/* Define if `iconv' accepts \"CP1252\". */\n#undef HAVE_ICONV_CP1252\n\n/* Define to 1 if you have the <iconv.h> header file. */\n#undef HAVE_ICONV_H\n\n/* Define to 1 if the system has the type `int64_t'. */\n#undef HAVE_INT64_T\n\n/* Define if you have the 'intmax_t' type in <stdint.h> or <inttypes.h>. (For\n   intl) */\n#undef HAVE_INTMAX_T\n\n/* Define to 1 if the system has the type `intptr_t'. */\n#undef HAVE_INTPTR_T\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define if <inttypes.h> exists, doesn't clash with <sys/types.h>, and\n   declares uintmax_t. (For intl) */\n#undef HAVE_INTTYPES_H_WITH_UINTMAX\n\n/* Define to 1 if the system has the type `int_fast64_t'. */\n#undef HAVE_INT_FAST64_T\n\n/* Define to 1 if you have the `isblank' function. */\n#undef HAVE_ISBLANK\n\n/* Define to 1 if you have the `isnan' function. */\n#undef HAVE_ISNAN\n\n/* Define to 1 if you have the `iswblank' function. */\n#undef HAVE_ISWBLANK\n\n/* Define to 1 if you have the `iswctype' function. */\n#undef HAVE_ISWCTYPE\n\n/* Define if you have the JPEG headers and libraries. */\n#undef HAVE_JPEG\n\n/* Define if KERN_USRSTACK sysctl is supported. */\n#undef HAVE_KERN_USRSTACK\n\n/* Define if you have KeySym defined in X11. */\n#undef HAVE_KEYSYM\n\n/* Define to 1 if you have the `kill' function. */\n#undef HAVE_KILL\n\n/* Define if you have <langinfo.h> and nl_langinfo(CODESET). */\n#undef HAVE_LANGINFO_CODESET\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n#undef HAVE_LANGINFO_H\n\n/* Define if your <locale.h> file defines LC_MESSAGES. */\n#undef HAVE_LC_MESSAGES\n\n/* Define if your system has libcurl >= 7.22.0 with support for https. */\n#undef HAVE_LIBCURL\n\n/* Define if __libc_stack_end is visible. */\n#undef HAVE_LIBC_STACK_END\n\n/* Define to 1 if you have the `dl' library (-ldl). */\n#undef HAVE_LIBDL\n\n/* Define to 1 if you have the `icucore' library (-licucore). */\n#undef HAVE_LIBICUCORE\n\n/* Define to 1 if you have the `m' library (-lm). */\n#undef HAVE_LIBM\n\n/* Define to 1 if you have the `ncurses' library (-lncurses). */\n#undef HAVE_LIBNCURSES\n\n/* Define to 1 if you have the `readline' library (-lreadline). */\n#undef HAVE_LIBREADLINE\n\n/* Define to 1 if you have the `rt' library (-lrt). */\n#undef HAVE_LIBRT\n\n/* Define to 1 if you have the `sunmath' library (-lsunmath). */\n#undef HAVE_LIBSUNMATH\n\n/* Define to 1 if you have the `termcap' library (-ltermcap). */\n#undef HAVE_LIBTERMCAP\n\n/* Define to 1 if you have the `termlib' library (-ltermlib). */\n#undef HAVE_LIBTERMLIB\n\n/* Define to 1 if you have the `tk' library (-ltk). */\n#undef HAVE_LIBTK\n\n/* Define to 1 if you have the <limits.h> header file. */\n#undef HAVE_LIMITS_H\n\n/* Define to 1 if you have the `link' function. */\n#undef HAVE_LINK\n\n/* Define to 1 if you have the <locale.h> header file. */\n#undef HAVE_LOCALE_H\n\n/* Define to 1 if you have the `localtime_r' function. */\n#undef HAVE_LOCALTIME_R\n\n/* Define to 1 if you have the `log10' function. */\n#undef HAVE_LOG10\n\n/* Define to 1 if you have the `log1p' function. */\n#undef HAVE_LOG1P\n\n/* Define to 1 if you have the `log1pl' function. */\n#undef HAVE_LOG1PL\n\n/* Define to 1 if you have the `log2' function. */\n#undef HAVE_LOG2\n\n/* Define if you wish to use the 'long double' type. */\n#undef HAVE_LONG_DOUBLE\n\n/* Define to 1 if the system has the type `long long int'. (For intl) */\n#undef HAVE_LONG_LONG_INT\n\n/* Define if your system has lzma >= 5.0.3. */\n#undef HAVE_LZMA\n\n/* Define to 1 if you have the <lzma.h> header file. */\n#undef HAVE_LZMA_H\n\n/* Define to 1 if you have the `matherr' function. */\n#undef HAVE_MATHERR\n\n/* Define to 1 if you have the `mbrtowc' function. */\n#undef HAVE_MBRTOWC\n\n/* Define to 1 if the system has the type `mbstate_t'. */\n#undef HAVE_MBSTATE_T\n\n/* Define to 1 if you have the `mbstowcs' function. */\n#undef HAVE_MBSTOWCS\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if you have the `mempcpy' function. */\n#undef HAVE_MEMPCPY\n\n/* Define to 1 if you have the `mkdtemp' function. */\n#undef HAVE_MKDTEMP\n\n/* Define to 1 if you have the `mkfifo' function. */\n#undef HAVE_MKFIFO\n\n/* Define to 1 if you have a working `mmap' system call. */\n#undef HAVE_MMAP\n\n/* Define to 1 if you have the `munmap' function. */\n#undef HAVE_MUNMAP\n\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\n#undef HAVE_NDIR_H\n\n/* Define to 1 if you have the `nearbyint' function. */\n#undef HAVE_NEARBYINT\n\n/* Define to 1 if you have the `nearbyintl' function. */\n#undef HAVE_NEARBYINTL\n\n/* Define to 1 if you have the <netdb.h> header file. */\n#undef HAVE_NETDB_H\n\n/* Define to 1 if you have the <netinet/in.h> header file. */\n#undef HAVE_NETINET_IN_H\n\n/* Define to 1 if you have the `nl_langinfo' function. */\n#undef HAVE_NL_LANGINFO\n\n/* Define if you have <langinfo.h> and it defines the NL_LOCALE_NAME macro if\n   _GNU_SOURCE is defined. */\n#undef HAVE_NL_LOCALE_NAME\n\n/* Define if module-loading does not need an underscore to be prepended to\n   external names. */\n#undef HAVE_NO_SYMBOL_UNDERSCORE\n\n/* Define if you have off_t, fseeko and ftello. */\n#undef HAVE_OFF_T\n\n/* Define if you have C OpenMP support. */\n#undef HAVE_OPENMP\n\n/* Define if your OpenMP 4 implementation fully supports SIMD reduction */\n#undef HAVE_OPENMP_SIMDRED\n\n/* Define to 1 if you have pangocairo. */\n#undef HAVE_PANGOCAIRO\n\n/* Define if your system has pcre2. */\n#undef HAVE_PCRE2\n\n/* Define to 1 if you have the <pcre.h> header file. */\n#undef HAVE_PCRE_H\n\n/* Define to 1 if you have the <pcre/pcre.h> header file. */\n#undef HAVE_PCRE_PCRE_H\n\n/* Define if you have the PNG headers and libraries. */\n#undef HAVE_PNG\n\n/* Define to 1 if you have the `popen' function. */\n#undef HAVE_POPEN\n\n/* Define if your system time functions do not count leap seconds, as required\n   by POSIX. */\n#undef HAVE_POSIX_LEAPSECONDS\n\n/* Define if your printf() function supports format strings with positions.\n   (For intl) */\n#undef HAVE_POSIX_PRINTF\n\n/* Define if you have POSIX.1 compatible sigsetjmp/siglongjmp. */\n#undef HAVE_POSIX_SETJMP\n\n/* Define to 1 if you have the `powl' function. */\n#undef HAVE_POWL\n\n/* Define to 1 if you have the `pown' function. */\n#undef HAVE_POWN\n\n/* Define if the <pthread.h> defines PTHREAD_MUTEX_RECURSIVE. (For intl) */\n#undef HAVE_PTHREAD_MUTEX_RECURSIVE\n\n/* Define if the POSIX multithreading library has read/write locks. (For intl)\n   */\n#undef HAVE_PTHREAD_RWLOCK\n\n/* Define to 1 if you have the `putenv' function. */\n#undef HAVE_PUTENV\n\n/* Define if putenv(\"FOO\") can unset an environment variable */\n#undef HAVE_PUTENV_UNSET\n\n/* Define if putenv(\"FOO=\") can unset an environment variable */\n#undef HAVE_PUTENV_UNSET2\n\n/* Define to 1 if you have the <pwd.h> header file. */\n#undef HAVE_PWD_H\n\n/* Define to 1 if you have the <readline/history.h> header file. */\n#undef HAVE_READLINE_HISTORY_H\n\n/* Define to 1 if you have the <readline/readline.h> header file. */\n#undef HAVE_READLINE_READLINE_H\n\n/* Define to 1 if you have the `readlink' function. */\n#undef HAVE_READLINK\n\n/* Define to 1 if you have the `realpath' function. */\n#undef HAVE_REALPATH\n\n/* Define to 1 if you have the `rintl' function. */\n#undef HAVE_RINTL\n\n/* Define to 1 if you have the `rl_callback_sigcleanup' function. */\n#undef HAVE_RL_CALLBACK_SIGCLEANUP\n\n/* Define to 1 if you have the `rl_completion_matches' function. */\n#undef HAVE_RL_COMPLETION_MATCHES\n\n/* Define to 1 if you have the `rl_resize_terminal' function. */\n#undef HAVE_RL_RESIZE_TERMINAL\n\n/* Define to 1 if you have the `rl_sort_completion_matches' function. */\n#undef HAVE_RL_SORT_COMPLETION_MATCHES\n\n/* Define to 1 if you have the `sched_getaffinity' function. */\n#undef HAVE_SCHED_GETAFFINITY\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define to 1 if you have the `sched_setaffinity' function. */\n#undef HAVE_SCHED_SETAFFINITY\n\n/* Define to 1 if you have the `select' function. */\n#undef HAVE_SELECT\n\n/* Define to 1 if you have the `setenv' function. */\n#undef HAVE_SETENV\n\n/* Define to 1 if you have the `setitimer' function. */\n#undef HAVE_SETITIMER\n\n/* Define to 1 if you have the `setlocale' function. */\n#undef HAVE_SETLOCALE\n\n/* Define to 1 if you have the `setrlimit' function. */\n#undef HAVE_SETRLIMIT\n\n/* Define to 1 if you have the `sigaction' function. */\n#undef HAVE_SIGACTION\n\n/* Define to 1 if you have the `sigaltstack' function. */\n#undef HAVE_SIGALTSTACK\n\n/* Define to 1 if you have the `sigemptyset' function. */\n#undef HAVE_SIGEMPTYSET\n\n/* Define to 1 if you have the `sinpi' function. */\n#undef HAVE_SINPI\n\n/* Define to 1 if you have the `snprintf' function. */\n#undef HAVE_SNPRINTF\n\n/* Define to 1 if the system has the type `stack_t'. */\n#undef HAVE_STACK_T\n\n/* Define to 1 if you have the `stat' function. */\n#undef HAVE_STAT\n\n/* Define to 1 if you have the <stdalign.h> header file. */\n#undef HAVE_STDALIGN_H\n\n/* Define to 1 if you have the <stdarg.h> header file. */\n#undef HAVE_STDARG_H\n\n/* Define to 1 if you have the <stdbool.h> header file. */\n#undef HAVE_STDBOOL_H\n\n/* Define to 1 if you have the <stddef.h> header file. */\n#undef HAVE_STDDEF_H\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define if <stdint.h> exists, doesn't clash with <sys/types.h>, and declares\n   uintmax_t. (For intl) */\n#undef HAVE_STDINT_H_WITH_UINTMAX\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the `stpcpy' function. */\n#undef HAVE_STPCPY\n\n/* Define to 1 if you have the `strcasecmp' function. */\n#undef HAVE_STRCASECMP\n\n/* Define to 1 if you have the `strdup' function. */\n#undef HAVE_STRDUP\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strncasecmp' function. */\n#undef HAVE_STRNCASECMP\n\n/* Define to 1 if you have the `strtoul' function. */\n#undef HAVE_STRTOUL\n\n/* Define to 1 if `st_atimensec' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_ATIMENSEC\n\n/* Define to 1 if `st_atimespec.tv_nsec' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC\n\n/* Define to 1 if `st_atim.st__tim.tv_nsec' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_ATIM_ST__TIM_TV_NSEC\n\n/* Define to 1 if `st_atim.tv_nsec' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC\n\n/* Define to 1 if you have the <sunmath.h> header file. */\n#undef HAVE_SUNMATH_H\n\n/* Define to 1 if you have the `symlink' function. */\n#undef HAVE_SYMLINK\n\n/* Define to 1 if you have the `sysconf' function. */\n#undef HAVE_SYSCONF\n\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_DIR_H\n\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_NDIR_H\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#undef HAVE_SYS_PARAM_H\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/times.h> header file. */\n#undef HAVE_SYS_TIMES_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/utsname.h> header file. */\n#undef HAVE_SYS_UTSNAME_H\n\n/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */\n#undef HAVE_SYS_WAIT_H\n\n/* Define to 1 if you have the `tanpi' function. */\n#undef HAVE_TANPI\n\n/* Define if you have the Tcl/Tk headers and libraries and want Tcl/Tk support\n   to be built. */\n#undef HAVE_TCLTK\n\n/* Define to 1 if you have the <thread.h> header file. */\n#undef HAVE_THREAD_H\n\n/* Define to 1 if you have the `thr_stksegment' function. */\n#undef HAVE_THR_STKSEGMENT\n\n/* Define this if libtiff is available. */\n#undef HAVE_TIFF\n\n/* Define to 1 if you have the <tiffio.h> header file. */\n#undef HAVE_TIFFIO_H\n\n/* Define to 1 if you have the `times' function. */\n#undef HAVE_TIMES\n\n/* Define to 1 if you have the `timespec_get' function. */\n#undef HAVE_TIMESPEC_GET\n\n/* Define to 1 if your 'struct tm' has tm_gmtoff. */\n#undef HAVE_TM_GMTOFF\n\n/* Define to 1 if your 'struct tm' has tm_zone. */\n#undef HAVE_TM_ZONE\n\n/* Define if your system has tre. */\n#undef HAVE_TRE\n\n/* Define to 1 if you have the <tre/tre.h> header file. */\n#undef HAVE_TRE_TRE_H\n\n/* Define to 1 if you have the `tsearch' function. */\n#undef HAVE_TSEARCH\n\n/* Define if you have the 'uintmax_t' type in <stdint.h> or <inttypes.h>. (For\n   intl) */\n#undef HAVE_UINTMAX_T\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#undef HAVE_UINTPTR_T\n\n/* Define to 1 if you have the `umask' function. */\n#undef HAVE_UMASK\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the `unsetenv' function. */\n#undef HAVE_UNSETENV\n\n/* Define if you have the 'unsigned long long' type. (For intl) */\n#undef HAVE_UNSIGNED_LONG_LONG\n\n/* Define to 1 if the system has the type `unsigned long long int'. (For intl)\n   */\n#undef HAVE_UNSIGNED_LONG_LONG_INT\n\n/* Define to 1 if you have the `utime' function. */\n#undef HAVE_UTIME\n\n/* Define to 1 if you have the `utimensat' function. */\n#undef HAVE_UTIMENSAT\n\n/* Define to 1 if you have the `utimes' function. */\n#undef HAVE_UTIMES\n\n/* Define to 1 if you have the <utime.h> header file. */\n#undef HAVE_UTIME_H\n\n/* Define to 1 if you have the <valgrind/memcheck.h> header file. */\n#undef HAVE_VALGRIND_MEMCHECK_H\n\n/* Define to 1 if you have the `vasprintf' function. */\n#undef HAVE_VASPRINTF\n\n/* Define to 1 if you have the `va_copy' function. */\n#undef HAVE_VA_COPY\n\n/* Define to 1 or 0, depending whether the compiler supports simple visibility\n   declarations. (For intl) */\n#undef HAVE_VISIBILITY\n\n/* Define to 1 if __attribute__((visibility())) is supported */\n#undef HAVE_VISIBILITY_ATTRIBUTE\n\n/* Define to 1 if you have the <wchar.h> header file. */\n#undef HAVE_WCHAR_H\n\n/* Define if you have the 'wchar_t' type. (For intl) */\n#undef HAVE_WCHAR_T\n\n/* Define to 1 if you have the `wcrtomb' function. */\n#undef HAVE_WCRTOMB\n\n/* Define to 1 if you have the `wcscoll' function. */\n#undef HAVE_WCSCOLL\n\n/* Define to 1 if you have the `wcsftime' function. */\n#undef HAVE_WCSFTIME\n\n/* Define to 1 if you have the `wcslen' function. */\n#undef HAVE_WCSLEN\n\n/* Define to 1 if you have the `wcstod' function. */\n#undef HAVE_WCSTOD\n\n/* Define to 1 if you have the `wcstombs' function. */\n#undef HAVE_WCSTOMBS\n\n/* Define to 1 if you have the `wctrans' function. */\n#undef HAVE_WCTRANS\n\n/* Define to 1 if the system has the type `wctrans_t'. */\n#undef HAVE_WCTRANS_T\n\n/* Define to 1 if you have the `wctype' function. */\n#undef HAVE_WCTYPE\n\n/* Define to 1 if you have the <wctype.h> header file. */\n#undef HAVE_WCTYPE_H\n\n/* Define if you have the 'wint_t' type. (For intl) */\n#undef HAVE_WINT_T\n\n/* Define if your mktime works correctly outside 1902-2037. */\n#undef HAVE_WORKING_64BIT_MKTIME\n\n/* Define to 1 if you have cairo. */\n#undef HAVE_WORKING_CAIRO\n\n/* Define if calloc(0) returns a null pointer. */\n#undef HAVE_WORKING_CALLOC\n\n/* Define if ctanh() exists and is working correctly. */\n#undef HAVE_WORKING_CTANH\n\n/* Define if your ftell works correctly on files opened for append. */\n#undef HAVE_WORKING_FTELL\n\n/* Define if isfinite() is correct for -Inf/NaN/Inf. */\n#undef HAVE_WORKING_ISFINITE\n\n/* Define if log1p() exists and is accurate enough. */\n#undef HAVE_WORKING_LOG1P\n\n/* Define if sigaction() is complete enough for R's usage */\n#undef HAVE_WORKING_SIGACTION\n\n/* Define if you have the X11 headers and libraries, and want the X11 GUI to\n   be built. */\n#undef HAVE_X11\n\n/* Define if you have the X11/Xmu headers and libraries. */\n#undef HAVE_X11_Xmu\n\n/* Define to 1 if you have the `__cospi' function. */\n#undef HAVE___COSPI\n\n/* Define to 1 if you have the `__fsetlocking' function. */\n#undef HAVE___FSETLOCKING\n\n/* Define to 1 if you have the `__sinpi' function. */\n#undef HAVE___SINPI\n\n/* Define to 1 if you have the `__tanpi' function. */\n#undef HAVE___TANPI\n\n/* Define as const if the declaration of iconv() needs const. */\n#undef ICONV_CONST\n\n/* Define if you have IEEE 754 floating point arithmetic. */\n#undef IEEE_754\n\n/* Define if integer division by zero raises signal SIGFPE. (For intl) */\n#undef INTDIV0_RAISES_SIGFPE\n\n/* Define if you have 32 bit ints. */\n#undef INT_32_BITS\n\n/* Define to the sub-directory where libtool stores uninstalled libraries. */\n#undef LT_OBJDIR\n\n/* macOS 10.12 (Sierra) or earlier */\n#undef MACOS_SIERRA\n\n/* Define if mktime sets errno. */\n#undef MKTIME_SETS_ERRNO\n\n/* Define to disable Valgrind instrumentation */\n#undef NVALGRIND\n\n/* Define if using GNU-style Objective C runtime. */\n#undef OBJC_GNU_RUNTIME\n\n/* Define if using NeXT/Apple-style Objective C runtime. */\n#undef OBJC_NEXT_RUNTIME\n\n/* Name of package */\n#undef PACKAGE\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* PCRE2 code unit width wanted. */\n#undef PCRE2_CODE_UNIT_WIDTH\n\n/* Define if <inttypes.h> exists and defines unusable PRI* macros. (For intl)\n   */\n#undef PRI_MACROS_BROKEN\n\n/* Define if the pthread_in_use() detection is hard. (For intl) */\n#undef PTHREAD_IN_USE_DETECTION_HARD\n\n/* Define as the return type of signal handlers (`int' or `void'). */\n#undef RETSIGTYPE\n\n/* Define this to use architecture-dependent subdirectories of this name. */\n#undef R_ARCH\n\n/* Define this to be the name of the CPU of your system. */\n#undef R_CPU\n\n/* Define as `inline', or `__inline__' or `__inline' if that's what the C\n   compiler calls it, or to nothing if it is not supported. */\n#undef R_INLINE\n\n/* Define this to enable memory profiling. */\n#undef R_MEMORY_PROFILING\n\n/* Define this to be the name of the OS of your system. */\n#undef R_OS\n\n/* Define this to be the canonical name (cpu-vendor-os) of your system. */\n#undef R_PLATFORM\n\n/* Define this to be printing command on your system. */\n#undef R_PRINTCMD\n\n/* Define this to enable R-level profiling. */\n#undef R_PROFILING\n\n/* Type for socket lengths: socklen_t, sock_t, int? */\n#undef R_SOCKLEN_T\n\n/* Define this to be the name of the vendor of your system. */\n#undef R_VENDOR\n\n/* Define this to be the extension used for shared objects on your system. */\n#undef SHLIB_EXT\n\n/* The size of `double', as computed by sizeof. */\n#undef SIZEOF_DOUBLE\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `long double', as computed by sizeof. */\n#undef SIZEOF_LONG_DOUBLE\n\n/* The size of `long long', as computed by sizeof. */\n#undef SIZEOF_LONG_LONG\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* Define as the maximum value of type 'size_t', if the system doesn't define\n   it. (For intl) */\n#undef SIZE_MAX\n\n/* If using the C implementation of alloca, define if you know the\n   direction of stack growth for your system; otherwise it will be\n   automatically deduced at runtime.\n\tSTACK_DIRECTION > 0 => grows toward higher addresses\n\tSTACK_DIRECTION < 0 => grows toward lower addresses\n\tSTACK_DIRECTION = 0 => direction of growth unknown */\n#undef STACK_DIRECTION\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define if you have C/C++/Fortran OpenMP support for package code. */\n#undef SUPPORT_OPENMP\n\n/* Define to enable provoking compile errors on write barrier violation. */\n#undef TESTING_WRITE_BARRIER\n\n/* Define to 1 if the type of the st_atim member of a struct stat is struct\n   timespec. */\n#undef TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC\n\n/* Define to use ICU for collation. */\n#undef USE_ICU\n\n/* Define to use Apple's ICU. */\n#undef USE_ICU_APPLE\n\n/* Define to use internal time-zone code */\n#undef USE_INTERNAL_MKTIME\n\n/* Define if the POSIX multithreading library can be used. (For intl) */\n#undef USE_POSIX_THREADS\n\n/* Define if references to the POSIX multithreading library should be made\n   weak. (For intl) */\n#undef USE_POSIX_THREADS_WEAK\n\n/* Define if the GNU Pth multithreading library can be used. (For intl) */\n#undef USE_PTH_THREADS\n\n/* Define if references to the GNU Pth multithreading library should be made\n   weak. (For intl) */\n#undef USE_PTH_THREADS_WEAK\n\n/* Define if the old Solaris multithreading library can be used. (For intl) */\n#undef USE_SOLARIS_THREADS\n\n/* Define if references to the old Solaris multithreading library should be\n   made weak. (For intl) */\n#undef USE_SOLARIS_THREADS_WEAK\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n# undef _ALL_SOURCE\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# undef _GNU_SOURCE\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n# undef _POSIX_PTHREAD_SEMANTICS\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n# undef _TANDEM_SOURCE\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n# undef __EXTENSIONS__\n#endif\n\n\n/* Define if the Win32 multithreading API can be used. (For intl) */\n#undef USE_WIN32_THREADS\n\n/* Define according to your operating system type. */\n#undef Unix\n\n/* Define as 1 or 2 to specify levels of Valgrind instrumentation */\n#undef VALGRIND_LEVEL\n\n/* Version number of package */\n#undef VERSION\n\n/* Define to 1 if your processor stores words with the most significant byte\n   first (like Motorola and SPARC, unlike Intel and VAX). */\n#undef WORDS_BIGENDIAN\n\n/* Define according to your operating system type. */\n#undef Win32\n\n/* Define to 1 if the X Window System is missing or not being used. */\n#undef X_DISPLAY_MISSING\n\n/* Enable large inode numbers on Mac OS X 10.5.  */\n#ifndef _DARWIN_USE_64_BIT_INODE\n# define _DARWIN_USE_64_BIT_INODE 1\n#endif\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n#undef _FILE_OFFSET_BITS\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n#undef _LARGEFILE_SOURCE\n\n/* Define for large files, on AIX-style hosts. */\n#undef _LARGE_FILES\n\n/* Define to 1 if on MINIX. */\n#undef _MINIX\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n#undef _POSIX_1_SOURCE\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n#undef _POSIX_SOURCE\n\n/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n#undef _UINT64_T\n\n/* Define to 'long' if <sys/types.h> does not define. Apparently necessary to\n   fix a GCC bug on AIX? */\n#undef blkcnt_t\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef pid_t\n\n/* Define as the type of the result of subtracting two pointers, if the system\n   doesn't define it. (For intl) */\n#undef ptrdiff_t\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define to the type of an unsigned integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n#undef uint64_t\n\n/* Define to unsigned long or unsigned long long if <stdint.h> and\n   <inttypes.h> don't define. (For intl) */\n#undef uintmax_t\n\n\n#endif /* not R_CONFIG_H */\n\n\n#define __libc_lock_t                   gl_lock_t\n#define __libc_lock_define              gl_lock_define\n#define __libc_lock_define_initialized  gl_lock_define_initialized\n#define __libc_lock_init                gl_lock_init\n#define __libc_lock_lock                gl_lock_lock\n#define __libc_lock_unlock              gl_lock_unlock\n#define __libc_lock_recursive_t                   gl_recursive_lock_t\n#define __libc_lock_define_recursive              gl_recursive_lock_define\n#define __libc_lock_define_initialized_recursive  gl_recursive_lock_define_initialized\n#define __libc_lock_init_recursive                gl_recursive_lock_init\n#define __libc_lock_lock_recursive                gl_recursive_lock_lock\n#define __libc_lock_unlock_recursive              gl_recursive_lock_unlock\n#define glthread_in_use  libintl_thread_in_use\n#define glthread_lock_init     libintl_lock_init\n#define glthread_lock_lock     libintl_lock_lock\n#define glthread_lock_unlock   libintl_lock_unlock\n#define glthread_lock_destroy  libintl_lock_destroy\n#define glthread_rwlock_init     libintl_rwlock_init\n#define glthread_rwlock_rdlock   libintl_rwlock_rdlock\n#define glthread_rwlock_wrlock   libintl_rwlock_wrlock\n#define glthread_rwlock_unlock   libintl_rwlock_unlock\n#define glthread_rwlock_destroy  libintl_rwlock_destroy\n#define glthread_recursive_lock_init     libintl_recursive_lock_init\n#define glthread_recursive_lock_lock     libintl_recursive_lock_lock\n#define glthread_recursive_lock_unlock   libintl_recursive_lock_unlock\n#define glthread_recursive_lock_destroy  libintl_recursive_lock_destroy\n#define glthread_once                 libintl_once\n#define glthread_once_call            libintl_once_call\n#define glthread_once_singlethreaded  libintl_once_singlethreaded\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/include/Rdynpriv.h": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 2001-2017  The R Core Team.\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n#ifndef R_DYNPRIV_H\n#define R_DYNPRIV_H\n\n/*****************************************************\n These are internal routines and definitions subject\n to unannounced changes. Do not use for packages, etc.\n (The header is not installed.)\n \n There is a great deal of repetition in the definitions \n of the user-level method definitions and in the internal\n definition structures. This is done to ensure that we\n don't get into troubles needing different types, etc.\n We could do it with typedef's and reduce the code, but it \n is done now and isn't too complicated yet.\n*****************************************************/\n\n\n#ifdef Win32\n#include <windows.h>\n#define CACHE_DLL_SYM 1\n#else\ntypedef void *HINSTANCE;\n#endif\n\n\n#include <Defn.h>\n#include <R_ext/Rdynload.h>\nint R_moduleCdynload(const char *module, int local, int now);\n\n  /*\n     A name-routine pair.\n   */\ntypedef struct {\n    char *name;\n    DL_FUNC func;\n} CFunTabEntry;\n\n  /*\n     These three structures are the processed, internal information about\n     native routines that can be called by R. They are intended to be \n     instantiated by packages that explicitly register the routines in the\n     library.\n   */\n\ntypedef struct {\n    char       *name;\n    DL_FUNC     fun;\n    int         numArgs;\n\n    R_NativePrimitiveArgType *types;   \n} Rf_DotCSymbol;\n\ntypedef Rf_DotCSymbol Rf_DotFortranSymbol;\n\n\ntypedef struct {\n    char       *name;\n    DL_FUNC     fun;\n    int         numArgs;\n} Rf_DotCallSymbol;\n\ntypedef Rf_DotCallSymbol Rf_DotExternalSymbol;\n\n\n\n  /*\n      This structure holds the information about a library that is \n      loaded into R and whose symbols are directly accessible to\n      .C, .Call, .Fortran, .External, ...\n      This stores the short name of the library (with the path and extension \n      removed), and its fully  qualified name including the path and extension.\n      Additionally, it can potentially be populated with information about\n      the native routines in that library that are callable by R.\n   */\nstruct _DllInfo {\n    char  *path;\n    char  *name;\n    HINSTANCE handle;\n    Rboolean useDynamicLookup; /* Flag indicating whether we use both\n\t\t\t\t  registered and dynamic lookup (TRUE)\n\t\t\t\t  or just registered values if there\n\t\t\t\t  are any. */\n    int numCSymbols;\n    Rf_DotCSymbol *CSymbols;\n\n    int numCallSymbols;\n    Rf_DotCallSymbol *CallSymbols;\n\n    int numFortranSymbols;\n    Rf_DotFortranSymbol *FortranSymbols;\n\n    int numExternalSymbols;\n    Rf_DotExternalSymbol *ExternalSymbols;\n\n    Rboolean forceSymbols;\n};\n\n\nstruct Rf_RegisteredNativeSymbol {\n    NativeSymbolType type;\n    union {\n\tRf_DotCSymbol        *c;\n\tRf_DotCallSymbol     *call;\n\tRf_DotFortranSymbol  *fortran;\n\tRf_DotExternalSymbol *external;\n    } symbol;\n    DllInfo *dll;\n};\n\n\n  /* \n     An abstraction of the system-specific hooks that can be implemented\n     to customize the dynamic loading for a particular operating system\n     or application.\n     The function pointers implement \n        the opening and closing of the libraries,\n        the resolution of symbol, \n        returning error messages from system-level failures, \n        finding symbols in R itself,\n        handling the cached symbols,\n        processing the library path. \n   */\ntypedef struct {\n    HINSTANCE (*loadLibrary)(const char *path, int asLocal, int now,\n\t\t\t     char const *search); \n    /* Load the dynamic library. */\n    DL_FUNC (*dlsym)(DllInfo *info, char const *name); \n    /* Low-level symbol lookup in library */\n    void (*closeLibrary)(HINSTANCE handle); \n    /* Unload the dynamic library from process. */\n    void (*getError)(char *buf, int len); \n    /* Put the current system error in DLLerror. */\n\n\n    void (*deleteCachedSymbols)(DllInfo *dll);  /* Discard cached symbols */\n    DL_FUNC (*lookupCachedSymbol)(const char *name, const char *pkg, int all);\n\n    void  (*fixPath)(char *path);\n    void  (*getFullDLLPath)(SEXP call, char *buf, const char * const path);\n\n} OSDynSymbol;\n\nextern OSDynSymbol Rf_osDynSymbol, *R_osDynSymbol;\n\n\n#ifdef CACHE_DLL_SYM\n  /* \n     The collection of cached symbol holders which are used to make the lookup\n     more efficient. The most recently resolved symbols are stored in this \n     pool if CACHE_DLL_SYM is defined and repeated lookups check here first,\n     before using the dynamic loader's lookup mechanism.\n   */\ntypedef struct {\n    char pkg[21];\n    char name[41];\n    DL_FUNC func;\n} R_CPFun;\n\nextern R_CPFun CPFun[];\nextern int nCPFun;\n\n#endif /* CACHE_DLL_SYM */\n\n\nDL_FUNC Rf_lookupCachedSymbol(const char *name, const char *pkg, int all);\n\nDL_FUNC R_dlsym(DllInfo *info, char const *name, \n\t\tR_RegisteredNativeSymbol *symbol);\n\n/* Moved to API in R 3.4.0\n  SEXP R_MakeExternalPtrFn(DL_FUNC p, SEXP tag, SEXP prot);\n  DL_FUNC R_ExternalPtrAddrFn(SEXP s);\n*/\nDL_FUNC R_dotCallFn(SEXP, SEXP, int);\nSEXP R_doDotCall(DL_FUNC, int, SEXP *, SEXP);\n\n#endif /* ifdef R_DYNPRIV_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/src/devQuartz.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 2007-11  The R Foundation\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n *\n *  Modular Quartz device for macOS\n *\n *  Partially based on code by Byron Ellis\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#if HAVE_AQUA\n\n#include <Defn.h>\n#include <Rinternals.h>\n#define R_USE_PROTOTYPES 1\n#include <R_ext/GraphicsEngine.h>\n/* This sets ptr_QuartzBackend as a symbol in this file */\n#define IN_AQUA_C 1\n#include <R_ext/QuartzDevice.h>\n\n#include \"grDevices.h\"\n\n#include <CoreFoundation/CoreFoundation.h>\n\n#define DEVQUARTZ_VERSION 1 /* first public Quartz API version */\n\n#define QBE_NATIVE   1  /* either Cocoa or Carbon depending on the macOS version */\n#define QBE_COCOA    2  /* internal Cocoa */\n#define QBE_CARBON   3  /* internal Carbon */\n#define QBE_BITMAP   4  /* bitmap file creating */\n#define QBE_PDF      5  /* PDF file creating */\n\ntypedef struct moduleTypes_s {\n    const char *type;\n    const char *subst;\n    int qbe; /* Quartz back-end */\n} quartz_module_t;\n\n/* list of internally supported output modules */\nconst quartz_module_t quartz_modules[] = {\n    { \"\",        0,                           QBE_NATIVE  },\n    { \"native\",  0,                           QBE_NATIVE  },\n    { \"cocoa\",   0,                           QBE_COCOA   },\n    { \"carbon\",  0,                           QBE_CARBON  },\n    { \"pdf\",     0,                           QBE_PDF     },\n    { \"png\",     \"public.png\",                QBE_BITMAP  },\n    { \"jpeg\",    \"public.jpeg\",               QBE_BITMAP  },\n    { \"jpg\",     \"public.jpeg\",               QBE_BITMAP  },\n    { \"jpeg2000\",\"public.jpeg-2000\",          QBE_BITMAP  },\n    { \"tiff\",    \"public.tiff\",               QBE_BITMAP  },\n    { \"tif\",     \"public.tiff\",               QBE_BITMAP  },\n    { \"gif\",     \"com.compuserve.gif\",        QBE_BITMAP  },\n    { \"psd\",     \"com.adobe.photoshop-image\", QBE_BITMAP  },\n    { \"bmp\",     \"com.microsoft.bmp\",         QBE_BITMAP  },\n    { \"sgi\",     \"com.sgi.sgi-image\",         QBE_BITMAP  },\n    { \"pict\",    \"com.apple.pict\",            QBE_BITMAP  },\n    { 0, 0, 0} };\n\n\n\n/* for compatibility with macOS <10.5 */\n#ifndef CGFLOAT_DEFINED\ntypedef float CGFloat;\n#define CGFLOAT_MIN FLT_MIN\n#define CGFLOAT_MAX FLT_MAX\n#define CGFLOAT_IS_DOUBLE 0\n#define CGFLOAT_DEFINED 1\n#endif\n\ntypedef struct QuartzSpecific_s {\n    double        ps;\n    double        scalex, scaley;  /* resolution correction: px/pt ratio */\n    double        width,height;    /* size (in inches) */\n    double        tscale;          /* text scale (resolution independent,\n                                      i.e. it constitutes a text zoom factor */\n    int           dirty;           /* dirtly flag. Not acted upon by the Quartz\n                                      core, but QC sets it whenever a drawing\n                                      operation is performed (see detailed\n\t\t\t\t      description in R_ext/QuartzDevice.h) */\n    int           gstate;          /* gstate counter */\n    int           async;           /* asynchronous drawing (i.e. context was\n                                      not ready for an operation) */\n    int           bg;              /* background color */\n    int           canvas;          /* background color */\n    int           antialias,smooth;/* smoothing flags (only aa makes any sense) */\n    int           flags;           /* additional QDFLAGs */\n    int           holdlevel;       /* hold level */\n    int           redraw;          /* redraw flag is set when replaying\n\t\t                              and inhibits syncs on Mode */\n    CGRect        clipRect;        /* clipping rectangle */\n    pDevDesc      dev;             /* device structure holding this one */\n    CGFontRef     font;            /* currently used font */\n\n    void*         userInfo;        /* pointer to a module-dependent space */\n\n    /* callbacks - except for getCGContext all others are optional */\n    CGContextRef (*getCGContext)(QuartzDesc_t dev, void *userInfo);\n    int          (*locatePoint)(QuartzDesc_t dev, void *userInfo, double *x, double *y);\n    void         (*close)(QuartzDesc_t dev, void *userInfo);\n    void         (*newPage)(QuartzDesc_t dev, void *userInfo, int flags);\n    void         (*state)(QuartzDesc_t dev,  void *userInfo,  int state);\n    void*        (*par)(QuartzDesc_t dev, void *userInfo, int set, const char *key, void *value);\n    void         (*sync)(QuartzDesc_t dev, void *userInfo);\n    void*        (*cap)(QuartzDesc_t dev, void*userInfo);\n} QuartzDesc;\n\n/* coordinates:\n   - R graphics (positions etc., usually points)\n   - real size (e.g. inches)\n   - display view (usually pixels)\n\n   bookkeeping:\n   - QuartzDevice.width/height:  inches\n   - R GE size (.._Size): points\n   - physical (on-screen) coordinates : pixels\n\nthe current implementation uses points as plotting units (i.e. this is what\nQuartz tells R), but the canvas is specified in pixels. The scalex/y factors\nspecify the conversion factor between pixels and points.\nWe are *not* using R's scaling facilities, because R doesn't work with\nnon-square pixels (e.g. circles become ellipses).\n\nFIXME: yes it does -- ipr is a two-element array.\n -- not entirely, because it uses text (e.g. \"o\") as symbols which is rendered\n in 1:1 aspect ratio and thus is squished on displays with non-square pixels\n(That being a bug in Quartz, then!)\n\nActually, dp not points are used.\n*/\n\n#pragma mark QuartzDevice API (for modules)\n\n/* Update should be called when ps or tscale change.\n   Conservatively, it should be called on scale change, too, in case\n   we decide to abandon the CTM approach */\nstatic void QuartzDevice_Update(QuartzDesc_t desc);\n\n/* this function must be called after a new context is created.\n   it primes the context for drawing */\nvoid QuartzDevice_ResetContext(QuartzDesc_t desc) {\n    QuartzDesc *qd = ((QuartzDesc*) desc);\n    qd->gstate = 0;\n    qd->dirty = 0;\n    if (qd->getCGContext) {\n        CGContextRef ctx = qd->getCGContext(qd, qd->userInfo);\n        if (ctx) {\n            CGContextSetAllowsAntialiasing(ctx, qd->antialias);\n            CGContextSetShouldSmoothFonts(ctx, qd->smooth);\n            CGContextScaleCTM(ctx, qd->scalex, qd->scaley);\n            CGContextSaveGState(ctx);\n            qd->gstate = 1;\n        }\n    }\n}\n\n/* Uses (e.g. in window title) seems to assume this is 1-based */\nint QuartzDevice_DevNumber(QuartzDesc_t desc) {\n    return 1 + ndevNumber((((QuartzDesc*) desc)->dev));\n}\n\ndouble QuartzDevice_GetWidth(QuartzDesc_t desc)\t{ return ((QuartzDesc*) desc)->width;  }\ndouble QuartzDevice_GetHeight(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->height;   }\nvoid   QuartzDevice_SetSize(QuartzDesc_t desc, double width, double height)\n{\n    QuartzDesc *qd = ((QuartzDesc*) desc);\n    qd->width = width;\n    qd->height = height;\n    qd->dev->right = width*72.0;\n    qd->dev->bottom = height*72.0;\n}\n\ndouble QuartzDevice_GetScaledWidth(QuartzDesc_t desc)   { QuartzDesc *qd=((QuartzDesc*) desc); return qd->scalex*qd->width*72.0; }\ndouble QuartzDevice_GetScaledHeight(QuartzDesc_t desc)  { QuartzDesc *qd=((QuartzDesc*) desc); return qd->scaley*qd->height*72.0; }\nvoid QuartzDevice_SetScaledSize(QuartzDesc_t desc, double width, double height) {\n    QuartzDesc *qd=((QuartzDesc*) desc);\n    QuartzDevice_SetSize(desc, width/qd->scalex/72.0, height/qd->scaley/72.0);\n}\n\ndouble QuartzDevice_GetXScale(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->scalex;  }\ndouble QuartzDevice_GetYScale(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->scaley;  }\nvoid   QuartzDevice_SetScale(QuartzDesc_t desc, double scalex, double scaley) {\n    ((QuartzDesc*) desc)->scalex = scalex;\n    ((QuartzDesc*) desc)->scaley = scaley;\n    QuartzDevice_Update(desc);\n}\n\ndouble QuartzDevice_GetTextScale(QuartzDesc_t desc) {\n    return ((QuartzDesc*) desc)->tscale;\n}\n\nvoid   QuartzDevice_SetTextScale(QuartzDesc_t desc, double scale) {\n    ((QuartzDesc*) desc)->tscale = scale;\n    QuartzDevice_Update(desc);\n}\n\ndouble QuartzDevice_GetPointSize(QuartzDesc_t desc) {\n    return ((QuartzDesc*) desc)->ps;\n}\n\nvoid   QuartzDevice_SetPointSize(QuartzDesc_t desc, double ps) {\n    ((QuartzDesc*) desc)->ps = ps;\n    QuartzDevice_Update(desc);\n}\n\nint   QuartzDevice_GetDirty(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->dirty; }\nvoid  QuartzDevice_SetDirty(QuartzDesc_t desc,int dirty) { ((QuartzDesc*) desc)->dirty = dirty; }\n\nint   QuartzDevice_GetAntialias(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->antialias; }\nvoid  QuartzDevice_SetAntialias(QuartzDesc_t desc,int aa) {\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    qd->antialias  = aa;\n    if(NULL != qd->getCGContext)\n        CGContextSetAllowsAntialiasing( qd->getCGContext(qd, qd->userInfo), aa );\n}\n\nvoid QuartzDevice_Kill(QuartzDesc_t desc) {\n    pGEDevDesc dd = GEgetDevice(ndevNumber(((QuartzDesc*) desc)->dev));\n    if (dd) GEkillDevice(dd);\n}\n\nint   QuartzDesc_GetFontSmooth(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->smooth; }\nvoid  QuartzDesc_SetFontSmooth(QuartzDesc_t desc, int fs) {\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    qd->smooth = fs;\n    if(qd->getCGContext)\n        CGContextSetShouldSmoothFonts( qd->getCGContext(qd, qd->userInfo), fs);\n}\n\nint   QuartzDevice_GetBackground(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->bg; }\n\nstatic void   QuartzDevice_Update(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pDevDesc dev= qd->dev;\n\n    /* pre-scaling happens in Quartz (using CTM), so scales should not be\n       reflected in R measurements. We tell R to use 72dpi which corresponds\n       to plotting in pt coordinates */\n    dev->cra[0] = 0.9*qd->ps*qd->tscale;\n    dev->cra[1] = 1.2*qd->ps*qd->tscale;\n    dev->ipr[0] = 1.0/72.0;\n    dev->ipr[1] = 1.0/72.0;\n}\n\nvoid QuartzDevice_Activate(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    if (qd) {\n\tint n = ndevNumber(qd->dev);\n\tselectDevice(n);\n    }\n}\n\nvoid QuartzDevice_ReplayDisplayList(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    int _dirty = qd->dirty;\n    pGEDevDesc gdd = desc2GEDesc(qd->dev);\n    qd->redraw = 1;\n    /* CHECK this */\n    if(gdd->displayList != R_NilValue) GEplayDisplayList(gdd);\n    qd->redraw = 0;\n    qd->dirty = _dirty; /* we do NOT change the dirty flag */\n}\n\nvoid* QuartzDevice_GetSnapshot(QuartzDesc_t desc, int last)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pGEDevDesc gd  = GEgetDevice(ndevNumber(qd->dev));\n    SEXP snap;\n    if (last)\n\tsnap = desc2GEDesc(qd->dev)->savedSnapshot;\n    else\n\tsnap = GEcreateSnapshot(gd);\n    if (R_NilValue == VECTOR_ELT(snap, 0))\n\tsnap = 0;\n    return (snap == R_NilValue) ? 0 : snap;\n}\n\nvoid QuartzDevice_RestoreSnapshot(QuartzDesc_t desc, void* snap)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pGEDevDesc gd  = GEgetDevice(ndevNumber(qd->dev));\n    if(NULL == snap) return; /*Aw, hell no!*/\n    PROTECT((SEXP)snap);\n    if(R_NilValue == VECTOR_ELT(snap,0))\n        warning(\"Tried to restore an empty snapshot?\");\n    qd->redraw = 1;\n    GEplaySnapshot((SEXP)snap, gd);\n    qd->redraw = 0;\n    qd->dirty = 0; /* we reset the dirty flag */\n    UNPROTECT(1);\n}\n\nstatic int quartz_embedding = 0;\n\nstatic void* QuartzDevice_SetParameter(QuartzDesc_t desc, const char *key, void *value)\n{\n    if (desc) { /* backend-specific? pass it on */\n\tQuartzDesc *qd = (QuartzDesc*) desc;\n\treturn (qd->par) ? qd->par(qd, qd->userInfo, 1, key, value) : NULL;\n    } else { /* global? try to handle it */\n\tif (key) {\n\t    if (!streql(key, QuartzParam_EmbeddingFlags)) {\n\t\tif (value) quartz_embedding = ((int*)value)[0];\n\t\treturn &quartz_embedding;\n\t    }\n\t}\n    }\n    return NULL;\n}\n\nvoid setup_RdotApp(void)\n{\n    int eflags = QP_Flags_CFLoop | QP_Flags_Cocoa | QP_Flags_Front;\n    QuartzDevice_SetParameter(NULL, QuartzParam_EmbeddingFlags, &eflags);\n}\n\nstatic void*  QuartzDevice_GetParameter(QuartzDesc_t desc, const char *key)\n{\n    if (desc) { /* backend-specific? pass it on */\n\tQuartzDesc *qd = (QuartzDesc*) desc;\n\treturn (qd->par) ? qd->par(qd, qd->userInfo, 0, key, NULL) : NULL;\n    } else { /* global? try to handle it */\n\tif (key) {\n\t    if (!streql(key, QuartzParam_EmbeddingFlags)) return &quartz_embedding;\n\t}\n    }\n    return NULL;\n}\n\n#pragma mark RGD API Function Prototypes\n\nstatic void     RQuartz_Close(pDevDesc);\nstatic void     RQuartz_Activate(pDevDesc);\nstatic void     RQuartz_Deactivate(pDevDesc);\nstatic void     RQuartz_Size(double*, double*, double*, double*, pDevDesc);\nstatic void     RQuartz_NewPage(const pGEcontext, pDevDesc);\nstatic int      RQuartz_HoldFlush(pDevDesc, int);\nstatic void     RQuartz_Clip(double, double, double, double, pDevDesc);\nstatic double   RQuartz_StrWidth(const char*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Text(double, double, const char*, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Rect(double, double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Raster(unsigned int *raster, int w, int h,\n                       double x, double y, double width, double height,\n                       double rot, Rboolean interpolate,\n                       const pGEcontext gc, pDevDesc dd);\nstatic SEXP     RQuartz_Cap(pDevDesc dd);\nstatic void     RQuartz_Circle(double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Line(double, double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Polyline(int, double*, double*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Polygon(int, double*, double*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Path(double*, double*, int, int*, Rboolean, const pGEcontext, pDevDesc);\nstatic Rboolean RQuartz_Locator(double*, double*, pDevDesc);\nstatic void     RQuartz_Mode(int mode, pDevDesc);\nstatic void     RQuartz_MetricInfo(int, const pGEcontext , double*, double*, double*, pDevDesc);\n\n#pragma mark Quartz device implementation\n\nvoid* QuartzDevice_Create(void *_dev, QuartzBackend_t *def)\n{\n    pDevDesc dev = _dev;\n\n    dev->startfill = def->bg;\n    dev->startcol  = R_RGB(0, 0, 0);\n    dev->startps   = def->pointsize;\n    dev->startfont = 1;\n    dev->startlty  = LTY_SOLID;\n    dev->startgamma= 1;\n\n    /* Set up some happy pointers */\n    dev->close        = RQuartz_Close;\n    dev->activate     = RQuartz_Activate;\n    dev->deactivate   = RQuartz_Deactivate;\n    dev->size         = RQuartz_Size;\n    dev->newPage      = RQuartz_NewPage;\n    dev->clip         = RQuartz_Clip;\n    dev->strWidth     = RQuartz_StrWidth;\n    dev->text         = RQuartz_Text;\n    dev->rect         = RQuartz_Rect;\n    dev->raster       = RQuartz_Raster;\n    dev->cap          = RQuartz_Cap;\n    dev->circle       = RQuartz_Circle;\n    dev->line         = RQuartz_Line;\n    dev->polyline     = RQuartz_Polyline;\n    dev->polygon      = RQuartz_Polygon;\n    dev->path         = RQuartz_Path;\n    dev->locator      = RQuartz_Locator;\n    dev->mode         = RQuartz_Mode;\n    dev->metricInfo   = RQuartz_MetricInfo;\n    dev->holdflush    = RQuartz_HoldFlush;\n    dev->hasTextUTF8  = TRUE;\n    dev->textUTF8     = RQuartz_Text;\n    dev->strWidthUTF8 = RQuartz_StrWidth;\n\n    dev->left = 0;\n    dev->top  = 0;\n\n\n    /* Magic numbers from on high. */\n    dev->xCharOffset = 0.4900;\n    dev->yCharOffset = 0.3333;\n    dev->yLineBias   = 0.20; /* This is .2 for PS/PDF devices... */\n\n    dev->canClip       = TRUE;\n    dev->canHAdj       = 2;\n    dev->canChangeGamma= FALSE;\n    dev->displayListOn = (def->flags & QDFLAG_DISPLAY_LIST) ? TRUE : FALSE;\n\n    dev->haveTransparency = 2;\n    dev->haveTransparentBg = 3; /* FIXME: depends on underlying device */\n    dev->haveRaster = 2;\n    dev->haveCapture = (def->cap) ? 2 : 1;\n    dev->haveLocator = (def->locatePoint) ? 2 : 1;\n\n    QuartzDesc *qd = calloc(1, sizeof(QuartzDesc));\n    qd->width      = def->width;\n    qd->height     = def->height;\n    qd->userInfo   = def->userInfo;\n    qd->getCGContext=def->getCGContext;\n    qd->locatePoint= def->locatePoint;\n    qd->close      = def->close;\n    qd->newPage    = def->newPage;\n    qd->state      = def->state;\n    qd->sync       = def->sync;\n    qd->cap        = def->cap;\n    qd->scalex     = def->scalex;\n    qd->scaley     = def->scaley;\n    qd->tscale     = 1.0;\n    qd->ps         = def->pointsize;\n    qd->bg         = def->bg;\n    qd->canvas     = def->canvas;\n    qd->antialias  = (def->flags & QPFLAG_ANTIALIAS) ? 1 : 0;\n    qd->flags      = def->flags;\n    qd->gstate     = 0;\n    qd->font       = NULL;\n\n    dev->deviceSpecific = qd;\n    qd->dev             = dev;\n\n    QuartzDevice_Update(qd);\n\n    /* Re-set for bitmap devices later */\n     dev->right = def->width*72.0;\n     dev->bottom= def->height*72.0;\n\n    qd->clipRect = CGRectMake(0, 0, dev->right, dev->bottom);\n\n    qd->dirty = 0;\n    qd->redraw= 0;\n    qd->async = 0;\n    qd->holdlevel = 0;\n    return (QuartzDesc_t)qd;\n}\n\nstatic QuartzFunctions_t qfn = {\n    QuartzDevice_Create,\n    QuartzDevice_DevNumber,\n    QuartzDevice_Kill,\n    QuartzDevice_ResetContext,\n    QuartzDevice_GetWidth,\n    QuartzDevice_GetHeight,\n    QuartzDevice_SetSize,\n    QuartzDevice_GetScaledWidth,\n    QuartzDevice_GetScaledHeight,\n    QuartzDevice_SetScaledSize,\n    QuartzDevice_GetXScale,\n    QuartzDevice_GetYScale,\n    QuartzDevice_SetScale,\n    QuartzDevice_SetTextScale,\n    QuartzDevice_GetTextScale,\n    QuartzDevice_SetPointSize,\n    QuartzDevice_GetPointSize,\n    QuartzDevice_GetDirty,\n    QuartzDevice_SetDirty,\n    QuartzDevice_ReplayDisplayList,\n    QuartzDevice_GetSnapshot,\n    QuartzDevice_RestoreSnapshot,\n    QuartzDevice_GetAntialias,\n    QuartzDevice_SetAntialias,\n    QuartzDevice_GetBackground,\n    QuartzDevice_Activate,\n    QuartzDevice_SetParameter,\n    QuartzDevice_GetParameter\n};\n\n/* currrently unused: was used by R.app via aqua.c */\nQuartzFunctions_t *getQuartzAPI() {\n    return &qfn;\n}\n\n/* old macOS versions has different names for some of the CGFont stuff */\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n#define CGFontCreateWithFontName CGFontCreateWithName\n#define CGFontGetGlyphBBoxes CGFontGetGlyphBoundingBoxes\n/* The following is a real pain. We have to work around bugs in CoreGraphics\n   and Apple's dyloader simultaneously so a 10.4 binary runs on 10.5 as well. */\ntypedef void (*RQFontGetGlyphsForUnichars_t)(CGFontRef a, const UniChar b[], CGGlyph c[], size_t d);\nstatic RQFontGetGlyphsForUnichars_t RQFontGetGlyphsForUnichars;\n#include <dlfcn.h> /* dynamically find the right entry point on initialization */\n__attribute__((constructor)) static void RQ_init() {\n    void *r;\n    if ((r = dlsym(RTLD_NEXT, \"CGFontGetGlyphsForUnichars\")) || (r = dlsym(RTLD_NEXT, \"CGFontGetGlyphsForUnicodes\")) ||\n\t(r = dlsym(RTLD_DEFAULT, \"CGFontGetGlyphsForUnichars\")) || (r = dlsym(RTLD_DEFAULT, \"CGFontGetGlyphsForUnicodes\")))\n\tRQFontGetGlyphsForUnichars = (RQFontGetGlyphsForUnichars_t) r;\n    else\n\terror(\"Cannot load CoreGraphics\"); /* this should never be reached but I suppose it's better than a hidden segfault */\n}\n#define CGFontGetGlyphsForUnichars RQFontGetGlyphsForUnichars\n/* and some missing declarations */\nextern CGFontRef CGFontCreateWithName(CFStringRef);\nextern bool CGFontGetGlyphAdvances(CGFontRef font, const CGGlyph glyphs[], size_t count, int advances[]);\nextern int CGFontGetUnitsPerEm(CGFontRef font);\nextern bool CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph glyphs[], size_t count, CGRect bboxes[]);\n#else\nextern void CGFontGetGlyphsForUnichars(CGFontRef, const UniChar[], CGGlyph[], size_t);\n#endif\n\nextern CGFontRef CGContextGetFont(CGContextRef);\n\n#define DEVDESC pDevDesc dd\n#define CTXDESC const pGEcontext gc, pDevDesc dd\n\n#define DEVSPEC QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific; CGContextRef ctx = xd->getCGContext(xd, xd->userInfo)\n#define DRAWSPEC QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific; CGContextRef ctx = xd->getCGContext(xd, xd->userInfo); xd->dirty = 1\n#define XD QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific\n\n#pragma mark Quartz Font Cache\n\n/* Font lookup is expesive yet frequent. Therefore we cache all used ATS fonts (which are global to the app). */\n\ntypedef struct font_cache_entry_s {\n    ATSFontRef font;\n    char *family;\n    int  face;\n} font_cache_entry_t;\n\n#define max_fonts_per_block 32\n\ntypedef struct font_cache_s {\n    font_cache_entry_t e[max_fonts_per_block];\n    int fonts;\n    struct font_cache_s *next;\n} font_cache_t;\n\nfont_cache_t font_cache, *font_cache_tail = &font_cache;\n\nstatic ATSFontRef RQuartz_CacheGetFont(const char *family, int face) {\n    font_cache_t *fc = &font_cache;\n    while (fc) {\n        int i = 0, j = fc->fonts;\n        while (i < j) {\n            if (face == fc->e[i].face && streql(family, fc->e[i].family))\n                return fc->e[i].font;\n            i++;\n        }\n        fc = fc->next;\n    }\n    return 0;\n}\n\nstatic void RQuartz_CacheAddFont(const char *family, int face, ATSFontRef font) {\n    if (font_cache_tail->fonts >= max_fonts_per_block)\n        font_cache_tail = font_cache_tail->next = (font_cache_t*) calloc(1, sizeof(font_cache_t));\n    {\n        int i = font_cache_tail->fonts;\n        font_cache_tail->e[i].font = font;\n        font_cache_tail->e[i].family = strdup(family);\n        font_cache_tail->e[i].face = face;\n        font_cache_tail->fonts++;\n    }\n}\n\n#ifdef UNUSED\nstatic void RQuartz_CacheRelease() {\n    font_cache_t *fc = &font_cache;\n    while (fc) {\n        font_cache_t *next = fc->next;\n        int i = 0, j = fc->fonts;\n        while (i < j) free(fc->e[i++].family);\n        if (fc != &font_cache) free(fc);\n        fc = next;\n    }\n    font_cache.fonts = 0;\n}\n#endif\n\n#pragma mark Device Implementation\n\n/* mapping of virtual family names (e.g \"serif\") and face to real font names using .Quartzenv$.Quartz.Fonts list */\nconst char *RQuartz_LookUpFontName(int fontface, const char *fontfamily)\n{\n    const char *mappedFont = 0;\n    SEXP ns, env, db, names;\n    PROTECT_INDEX index;\n    PROTECT(ns = R_FindNamespace(ScalarString(mkChar(\"grDevices\"))));\n    PROTECT_WITH_INDEX(env = findVar(install(\".Quartzenv\"), ns), &index);\n    if(TYPEOF(env) == PROMSXP)\n        REPROTECT(env = eval(env,ns) ,index);\n    PROTECT(db    = findVar(install(\".Quartz.Fonts\"), env));\n    PROTECT(names = getAttrib(db, R_NamesSymbol));\n    if (*fontfamily) {\n        int i;\n        for(i = 0; i < length(names); i++)\n            if(streql(fontfamily, CHAR(STRING_ELT(names, i)))) {\n                mappedFont = CHAR(STRING_ELT(VECTOR_ELT(db, i), fontface - 1));\n                break;\n            }\n    }\n    UNPROTECT(4);\n    return mappedFont;\n}\n\n/* get a font according to the current graphics context */\nCGFontRef RQuartz_Font(CTXDESC)\n{\n    const char *fontName = NULL, *fontFamily = gc->fontfamily;\n    ATSFontRef atsFont = 0;\n    int fontFace = gc->fontface;\n    if (fontFace < 1 || fontFace > 5) fontFace = 1; /* just being paranoid */\n    if (fontFace == 5)\n        fontName = \"Symbol\";\n    else\n        fontName = RQuartz_LookUpFontName(fontFace, fontFamily[0] ? fontFamily : \"default\");\n    if (fontName) {\n        atsFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */\n        if (!atsFont) { /* not in the cache, get it */\n            CFStringRef cfFontName = CFStringCreateWithCString(NULL, fontName, kCFStringEncodingUTF8);\n            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n            if (!atsFont)\n                atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);\n            CFRelease(cfFontName);\n            if (!atsFont) {\n                warning(_(\"font \\\"%s\\\" could not be found for family \\\"%s\\\"\"), fontName, fontFamily);\n                return NULL;\n            }\n            RQuartz_CacheAddFont(fontName, 0, atsFont);\n        }\n    } else { /* the real font name could not be looked up. We must use cache and/or find the right font by family and face */\n        if (!fontFamily[0]) fontFamily = \"Arial\"; \n\t/* Arial is the default, because Helvetica doesn't have Oblique \n\t   on 10.4 - maybe change later? */\n        atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);\n        if (!atsFont) { /* not in the cache? Then we need to find the \n\t\t\t   proper font name from the family name and face */\n            /* as it turns out kATSFontFilterSelectorFontFamily is not \n\t       implemented in macOS (!!) so there is no way to query for a \n\t       font from a specific family. Therefore we have to use \n\t       text-matching heuristics ... very nasty ... */\n            char compositeFontName[256];\n            /* CFStringRef cfFontName; */\n            if (strlen(fontFamily) > 210) error(_(\"font family name is too long\"));\n            while (!atsFont) { /* try different faces until exhausted or successful */\n                strcpy(compositeFontName, fontFamily);\n                if (fontFace == 2 || fontFace == 4) strcat(compositeFontName, \" Bold\");\n                if (fontFace == 3 || fontFace == 4) strcat(compositeFontName, \" Italic\");\n                CFStringRef cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                if (!atsFont) atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);\n                CFRelease(cfFontName);\n                if (!atsFont) {\n                    if (fontFace == 1) { /* more guessing - fontFace == 1 may need Regular or Roman */\n                        strcat(compositeFontName,\" Regular\");\n                        cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                        CFRelease(cfFontName);\n                        if (!atsFont) {\n                            strcpy(compositeFontName, fontFamily);\n                            strcat(compositeFontName,\" Roman\");\n                            cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                            CFRelease(cfFontName);\n                        }\n                    } else if (fontFace == 3 || fontFace == 4) { /* Oblique is sometimes used instead of Italic (e.g. in Helvetica) */\n                        strcpy(compositeFontName, fontFamily);\n                        if (fontFace == 4) strcat(compositeFontName, \" Bold\");\n                        strcat(compositeFontName,\" Oblique\");\n                        cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                        CFRelease(cfFontName);                    \n                    }\n                }\n                if (!atsFont) { /* try to fall back to a more plain face */\n                    if (fontFace == 4) fontFace = 2;\n                    else if (fontFace != 1) fontFace = 1;\n                    else break;\n                    atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);\n                    if (atsFont) break;\n                }\n            }\n            if (!atsFont)\n                warning(_(\"no font could be found for family \\\"%s\\\"\"), fontFamily);\n            else\n                RQuartz_CacheAddFont(fontFamily, fontFace, atsFont);\n        }\n    }\n\n    return CGFontCreateWithPlatformFont(&atsFont);\n}\n\n#define RQUARTZ_FILL   (1)\n#define RQUARTZ_STROKE (1<<1)\n#define RQUARTZ_LINE   (1<<2)\n\nstatic void RQuartz_SetFont(CGContextRef ctx, const pGEcontext gc, QuartzDesc *xd) {\n    CGFontRef font = RQuartz_Font(gc, NULL);\n    if (font) {\n        CGContextSetFont(ctx, font);\n        if (font != xd->font) {\n            if (xd->font) CGFontRelease(xd->font);\n            xd->font = font;\n        }\n    }\n    CGContextSetFontSize(ctx, gc->cex * gc->ps);\n}\n\n/* pre-10.5 doesn't have kCGColorSpaceGenericRGB so fall back to kCGColorSpaceGenericRGB */\n#if MAC_OS_X_VERSION_10_4 >= MAC_OS_X_VERSION_MAX_ALLOWED\n#define kCGColorSpaceSRGB kCGColorSpaceGenericRGB\n#endif\n\nvoid RQuartz_Set(CGContextRef ctx,const pGEcontext gc,int flags) {\n    CGColorSpaceRef cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);\n    if(flags & RQUARTZ_FILL) {\n        int fill = gc->fill;\n        CGFloat fillColor[] = { R_RED(fill)/255.0, \n                                R_GREEN(fill)/255.0, \n                                R_BLUE(fill)/255.0, \n                                R_ALPHA(fill)/255.0 };\n        CGColorRef fillColorRef = CGColorCreate(cs, fillColor);\n        CGContextSetFillColorWithColor(ctx, fillColorRef);\n        CGColorRelease(fillColorRef);\n    }\n    if(flags & RQUARTZ_STROKE) {\n        int stroke = gc->col;\n        CGFloat strokeColor[] = { R_RED(stroke)/255.0, \n                                  R_GREEN(stroke)/255.0, \n                                  R_BLUE(stroke)/255.0, \n                                  R_ALPHA(stroke)/255.0 };\n        CGColorRef strokeColorRef = CGColorCreate(cs, strokeColor);\n        CGContextSetStrokeColorWithColor(ctx, strokeColorRef);\n        CGColorRelease(strokeColorRef);\n    }\n    if(flags & RQUARTZ_LINE) {\n        CGFloat dashlist[8];\n        int   i, ndash = 0;\n        int   lty = gc->lty;\n\tfloat lwd = (float)(gc->lwd * 0.75);\n        CGContextSetLineWidth(ctx, lwd);\n\n        for(i = 0; i < 8 && lty; i++) {\n            dashlist[ndash++] = (lwd >= 1 ? lwd : 1) * (lty & 15);\n            lty >>= 4;\n        }\n        CGContextSetLineDash(ctx, 0, dashlist, ndash);\n        CGLineCap cap = kCGLineCapButt;\n        switch(gc->lend) {\n            case GE_ROUND_CAP:  cap = kCGLineCapRound;  break;\n            case GE_BUTT_CAP:   cap = kCGLineCapButt;   break;\n            case GE_SQUARE_CAP: cap = kCGLineCapSquare; break;\n        }\n        CGContextSetLineCap(ctx,cap);\n        CGLineJoin join = kCGLineJoinRound;\n        switch(gc->ljoin) {\n            case GE_ROUND_JOIN: join = kCGLineJoinRound; break;\n            case GE_MITRE_JOIN: join = kCGLineJoinMiter; break;\n            case GE_BEVEL_JOIN: join = kCGLineJoinBevel; break;\n        }\n        CGContextSetLineJoin(ctx, join);\n        CGContextSetMiterLimit(ctx, gc->lmitre);\n    }\n    CGColorSpaceRelease(cs);\n}\n\n#define SET(X) RQuartz_Set(ctx, gc, (X))\n#define NOCTX { xd->async = 1; return; }\n#define NOCTXR(V) { xd->async = 1; return(V); }\n\n\nstatic void RQuartz_Close(DEVDESC)\n{\n    XD;\n    if (xd->close) xd->close(xd, xd->userInfo);\n}\n\nstatic void RQuartz_Activate(DEVDESC)\n{\n    XD;\n    if (xd->state) xd->state(xd, xd->userInfo, 1);\n}\n\nstatic void RQuartz_Deactivate(DEVDESC)\n{\n    XD;\n    if (xd->state) xd->state(xd, xd->userInfo, 0);\n}\n\nstatic void RQuartz_Size(double *left, double *right, double *bottom, double *top, DEVDESC)\n{\n    XD;\n    *left = *top = 0;\n    *right  = QuartzDevice_GetWidth(xd) * 72.0;\n    *bottom = QuartzDevice_GetHeight(xd) * 72.0;\n}\n\nstatic void RQuartz_NewPage(CTXDESC)\n{\n    {\n        DRAWSPEC;\n        ctx = NULL;\n        if (xd->newPage) xd->newPage(xd, xd->userInfo, xd->redraw ? QNPF_REDRAW : 0);\n    }\n    { /* we have to re-fetch the status *after* newPage since it may have changed it */\n        DRAWSPEC;\n        if (!ctx) NOCTX;\n        {\n            CGRect bounds = CGRectMake(0, 0,\n\t\t\t\t       QuartzDevice_GetScaledWidth(xd) * 72.0,\n\t\t\t\t       QuartzDevice_GetScaledHeight(xd) * 72.0);\n\t    /* reset the clipping region by restoring the base GC.\n\t       If there is no GC on the stack then the clipping region was never set. */\n\t    if (xd->gstate > 0) {\n\t\tCGContextRestoreGState(ctx);\n\t\tCGContextSaveGState(ctx);\n\t\t/* no need to modify gstate since we don't modify the stack */\n\t    }\n\t    /* The logic is to paint the canvas then gc->fill.\n\t       (The canvas colour is set to 0 on non-screen devices.)\n\t     */\n\t    if (R_ALPHA(xd->canvas) > 0 && !R_OPAQUE(gc->fill)) {\n\t\t/* Paint the canvas colour. */\n\t\tint savefill = gc->fill;\n\t\tCGContextClearRect(ctx, bounds);\n\t\tgc->fill = xd->canvas;\n\t\tSET(RQUARTZ_FILL);\n\t\tCGContextFillRect(ctx, bounds);\n\t\tgc->fill = savefill;\n\t    }\n\t    SET(RQUARTZ_FILL); /* this will fill with gc->fill */\n            CGContextFillRect(ctx, bounds);\n        }\n    }\n}\n\nstatic int RQuartz_HoldFlush(DEVDESC, int level)\n{\n    int ol;\n    XD;\n    /* FIXME: should we check for interactive? */\n    ol = xd->holdlevel;\n    xd->holdlevel += level;\n    if (xd->holdlevel < 0) xd->holdlevel = 0;\n    if (xd->holdlevel == 0) { /* flush */\n\t/* trigger flush */\n        if (xd->sync)\n            xd->sync(xd, xd->userInfo);\n        else {\n\t    CGContextRef ctx = xd->getCGContext(xd, xd->userInfo);\n\t    if (ctx)\n\t\tCGContextSynchronize(ctx);\n\t}\n    } else if (ol == 0) { /* first hold */\n\t/* could display a wait cursor or something ... */\n    }\n    return xd->holdlevel;\n}\n\nstatic void RQuartz_Clip(double x0, double x1, double y0, double y1, DEVDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    if(xd->gstate > 0) {\n        --xd->gstate;\n        CGContextRestoreGState(ctx);\n    }\n    CGContextSaveGState(ctx);\n    xd->gstate++;\n    if(x1 > x0) { double t = x1; x1 = x0;x0 = t; }\n    if(y1 > y0) { double t = y1; y1 = y0;y0 = t; }\n    xd->clipRect = CGRectMake(x0, y0, x1 - x0, y1 - y0);\n    CGContextClipToRect(ctx, xd->clipRect);\n}\n\n/* non-symbol text is sent in UTF-8 */\nstatic CFStringRef text2unichar(CTXDESC, const char *text, UniChar **buffer, int *free)\n{\n    CFStringRef str;\n    if(gc->fontface == 5)\n        str = CFStringCreateWithCString(NULL, text, kCFStringEncodingMacSymbol);\n    else {\n        str = CFStringCreateWithCString(NULL, text, kCFStringEncodingUTF8);\n        /* Try fallback Latin1 encoding if UTF8 doesn't work \n\t   -- should no longer be needed. */\n        if(!str)\n            CFStringCreateWithCString(NULL, text, kCFStringEncodingISOLatin1);\n    }\n    if (!str) return NULL;\n    *buffer = (UniChar*) CFStringGetCharactersPtr(str);\n    if (*buffer == NULL) {\n        CFIndex length = CFStringGetLength(str);\n\t/* FIXME: check allocation */\n        *buffer = malloc(length * sizeof(UniChar));\n        CFStringGetCharacters(str, CFRangeMake(0, length), *buffer);\n        *free = 1;\n    }\n    return str;\n}\n\nstatic double RQuartz_StrWidth(const char *text, CTXDESC)\n{\n    DEVSPEC;\n    if (!ctx) NOCTXR(strlen(text) * 10.0); /* for sanity reasons */\n    RQuartz_SetFont(ctx, gc, xd);\n\n    CGFontRef font = CGContextGetFont(ctx);\n    float aScale   = (float)((gc->cex * gc->ps * xd->tscale) /\n\t\t\t     CGFontGetUnitsPerEm(font));\n    UniChar *buffer;\n    CGGlyph *glyphs;\n    int     *advances;\n    int Free = 0, len;\n    CFStringRef str = text2unichar(gc, dd, text, &buffer, &Free);\n    if (!str) return 0.0; /* invalid text contents */\n    len = (int) CFStringGetLength(str);\n    /* FIXME: check allocations */\n    glyphs = malloc(sizeof(CGGlyph) * len);\n    advances = malloc(sizeof(int) * len);\n    CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n    CGFontGetGlyphAdvances(font, glyphs, len, advances);\n    float width = 0.0; /* aScale*CGFontGetLeading(CGContextGetFont(ctx)); */\n    for(int i = 0; i < len; i++) width += aScale * advances[i];\n    free(advances);\n    free(glyphs);\n    if(Free) free(buffer);\n    CFRelease(str);\n    return width;\n}\n\nstatic void RQuartz_Text(double x, double y, const char *text, double rot, double hadj, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    /* A stupid hack because R isn't consistent. */\n    int fill = gc->fill;\n    gc->fill = gc->col;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE);\n    RQuartz_SetFont(ctx, gc, xd);\n    gc->fill = fill;\n    CGFontRef font = CGContextGetFont(ctx);\n    float aScale   = (float) ((gc->cex * gc->ps * xd->tscale) /\n\t\t\t      CGFontGetUnitsPerEm(font));\n    UniChar *buffer;\n    CGGlyph   *glyphs;\n\n    int Free = 0, len, i;\n    float width = 0.0;\n    CFStringRef str = text2unichar(gc, dd, text, &buffer, &Free);\n    if (!str) return; /* invalid text contents */\n    len = (int) CFStringGetLength(str);\n    /* FIXME: check allocations */\n    glyphs = malloc(sizeof(CGGlyph) * len);\n    CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n    int      *advances = malloc(sizeof(int) * len);\n    CGSize   *g_adv    = malloc(sizeof(CGSize) * len);\n\n    CGFontGetGlyphAdvances(font, glyphs, len, advances);\n    for(i =0 ; i < len; i++) {\n\twidth += advances[i] * aScale;\n\tg_adv[i] = CGSizeMake(aScale * advances[i] * cos(-DEG2RAD*rot), aScale*advances[i]*sin(-DEG2RAD * rot));\n    }\n    free(advances);\n    CGContextSetTextMatrix(ctx,\n\t\t\t   CGAffineTransformConcat(CGAffineTransformMakeScale(1.0, -1.0),\n\t\t\t\t\t\t   CGAffineTransformMakeRotation(-DEG2RAD * rot)));\n    double ax = (width * hadj) * cos(-DEG2RAD * rot);\n    double ay = (width * hadj) * sin(-DEG2RAD * rot);\n    /*      double h  = CGFontGetXHeight(CGContextGetFont(ctx))*aScale; */\n    CGContextSetTextPosition(ctx, x - ax, y - ay);\n    /*      Rprintf(\"%s,%.2f %.2f (%.2f,%.2f) (%d,%f)\\n\",text,hadj,width,ax,ay,CGFontGetUnitsPerEm(CGContextGetFont(ctx)),CGContextGetFontSize(ctx));       */\n    CGContextShowGlyphsWithAdvances(ctx,glyphs, g_adv, len);\n    free(glyphs);\n    free(g_adv);\n    if(Free) free(buffer);\n    CFRelease(str);\n}\n\nstatic void RQuartz_Rect(double x0, double y0, double x1, double y1, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    if (xd->flags & QDFLAG_RASTERIZED) {\n        /* in the case of borderless rectangles snap them to pixels.\n           this solves issues with image() without introducing other artifacts.\n           other approaches (disabling anti-aliasing, drawing background first,\n           snapping rect with borders) don't work as well, because they have\n           unwanted visual side-effects. */\n        if (R_ALPHA(gc->fill) > 0 && R_ALPHA(gc->col) == 0) {\n\t    /* store original values in case we need to go back */\n\t    double ox0 = x0, ox1 = x1, oy0 = y0, oy1 = y1;\n            x0 = (round(x0 * xd->scalex)) / xd->scalex;\n            x1 = (round(x1 * xd->scalex)) / xd->scalex;\n            y0 = (round(y0 * xd->scaley)) / xd->scaley;\n            y1 = (round(y1 * xd->scaley)) / xd->scaley;\n\t    /* work-around for PR#13744 - make sure the width or height\n\t       does not drop to 0 because of aligning. */\n\t    if (x0 == x1 && (ox0 != ox1)) x1 += ox1 - ox0;\n\t    if (y0 == y1 && (oy0 != oy1)) y1 += oy1 - oy0;\n        }\n    }\n    CGContextBeginPath(ctx);\n    CGContextAddRect(ctx, CGRectMake(x0, y0, x1 - x0, y1 - y0));\n    CGContextDrawPath(ctx, kCGPathFillStroke);\n}\n\nstatic void RQuartz_Raster(unsigned int *raster, int w, int h,\n                           double x, double y, \n                           double width, double height,\n                           double rot, \n                           Rboolean interpolate,\n                           const pGEcontext gc, pDevDesc dd)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    CGDataProviderRef dp;\n    CGColorSpaceRef cs;\n    CGImageRef img;\n    \n    /* Create a \"data provider\" containing the raster data */\n    dp = CGDataProviderCreateWithData(NULL, (void *) raster, 4*w*h, NULL);\n\n    cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);\n\n    /* Create a quartz image from the data provider */\n    img = CGImageCreate(w, h, \n                        8,   /* bits per channel */\n                        32,  /* bits per pixel */\n                        4*w, /* bytes per row */\n                        cs,  /* color space */\n\t\t\t/* R uses AGBR which is so unusual (inverted RGBA) that it corresponds to endinness inverse(!) to the host with alpha last (=RGBA).  */\n#ifdef __BIG_ENDIAN__\n                        kCGImageAlphaLast | kCGBitmapByteOrder32Little,\n#else\n                        kCGImageAlphaLast | kCGBitmapByteOrder32Big,\n#endif\n                        dp,  /* data provider */\n                        NULL,/* decode array */\n                        1,   /* interpolate (interpolation type below) */\n                        kCGRenderingIntentDefault);\n\n    if (height < 0) {\n        y = y + height;\n        height = -height;\n    }\n\n    CGContextSaveGState(ctx);\n    /* Translate by height of image */\n    CGContextTranslateCTM(ctx, 0.0, height);\n    /* Flip vertical */\n    CGContextScaleCTM(ctx, 1.0, -1.0);\n    /* Translate to position */\n    CGContextTranslateCTM(ctx, x, -y);\n    /* Rotate */\n    CGContextRotateCTM(ctx, rot*M_PI/180.0);\n    /* Determine interpolation method */\n    if (interpolate)\n        CGContextSetInterpolationQuality(ctx, kCGInterpolationDefault);\n    else\n        CGContextSetInterpolationQuality(ctx, kCGInterpolationNone);\n    /* Draw the quartz image */\n    CGContextDrawImage(ctx, CGRectMake(0, 0, width, height), img);\n    CGContextRestoreGState(ctx);\n\n    /* Tidy up */\n    CGColorSpaceRelease(cs);\n    CGDataProviderRelease(dp);\n    CGImageRelease(img);\n}\n\nstatic SEXP RQuartz_Cap(pDevDesc dd)\n{\n    SEXP raster = R_NilValue;\n    DRAWSPEC;\n    if (!ctx) NOCTXR(raster);\n\n    if (xd->cap) \n        raster = (SEXP) xd->cap(xd, xd->userInfo);\n\n    return raster;\n}\n\nstatic void RQuartz_Circle(double x, double y, double r, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    double r2 = 2.0*r;\n    CGContextBeginPath(ctx);\n    CGContextAddEllipseInRect(ctx,CGRectMake(x-r,y-r,r2,r2));\n    CGContextDrawPath(ctx,kCGPathFillStroke);\n}\n\nstatic void RQuartz_Line(double x1, double y1, double x2, double y2, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_STROKE | RQUARTZ_LINE);\n    CGContextBeginPath(ctx);\n    CGContextMoveToPoint(ctx, x1, y1);\n    CGContextAddLineToPoint(ctx, x2, y2);\n    CGContextStrokePath(ctx);\n}\n\n#define max_segments 100\n\nstatic void RQuartz_Polyline(int n, double *x, double *y, CTXDESC)\n{\n    if (n < 2) return;\n    int i = 0;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_STROKE | RQUARTZ_LINE);\n\n    /* CGContextStrokeLineSegments turned out to be a bad idea due to\n       Leopard restarting dashes for each segment.\n       CGContextAddLineToPoint is fast enough. \n       The only remaining problem is that Quartz seems to restart\n       dashes at segment breakup points. We should make the segments\n       break-up an optional feature and possibly fix the underlying\n       problem (software rendering).  \n    */\n\n    while (i < n) {\n        int j = i + max_segments;\n        if (j > n) j = n;\n        CGContextBeginPath(ctx);\n\tif (i) i--; /* start at the last point of the preceding chunk */\n        CGContextMoveToPoint(ctx, x[i], y[i]);\n        while(++i < j)\n            CGContextAddLineToPoint(ctx, x[i], y[i]);\n        CGContextStrokePath(ctx);\n    }\n}\n\nstatic void RQuartz_Polygon(int n, double *x, double *y, CTXDESC)\n{\n    if (n < 2) return;\n    int i;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    CGContextBeginPath(ctx);\n    CGContextMoveToPoint(ctx, x[0], y[0]);\n    for(i = 1; i < n; i++)\n\tCGContextAddLineToPoint(ctx, x[i], y[i]);\n    CGContextClosePath(ctx);\n    CGContextDrawPath(ctx, kCGPathFillStroke);\n}\n\nstatic void RQuartz_Path(double *x, double *y, \n                         int npoly, int* nper,\n                         Rboolean winding,\n                         CTXDESC)\n{\n    int i, j, index;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    index = 0;\n    CGContextBeginPath(ctx);\n    for (i=0; i < npoly; i++) {\n        CGContextMoveToPoint(ctx, x[index], y[index]);\n        index++;\n        for(j=1; j < nper[i]; j++) {\n            CGContextAddLineToPoint(ctx, x[index], y[index]);\n            index++;\n        }\n        CGContextClosePath(ctx);\n    }\n    if (winding) {\n        CGContextDrawPath(ctx, kCGPathFillStroke);\n    } else {\n        CGContextDrawPath(ctx, kCGPathEOFillStroke);\n    }\n}\n\nstatic void RQuartz_Mode(int mode, DEVDESC)\n{\n    DEVSPEC;\n    if (!ctx) NOCTX;\n    /* don't do anything in redraw as we can signal the end */\n    if (xd->redraw) return;\n    /* mode=0 -> drawing complete, signal sync */\n    if (mode == 0 && xd->holdlevel == 0) {\n        if (xd->sync)\n            xd->sync(xd, xd->userInfo);\n        else\n            CGContextSynchronize(ctx);\n    }\n}\n\nstatic void\nRQuartz_MetricInfo(int c, const pGEcontext gc,\n\t\t   double *ascent, double *descent, double *width,\n\t\t   pDevDesc dd)\n{\n    DRAWSPEC;\n    if (!ctx) { /* dummy data if we have no context, for sanity reasons */\n        *ascent = 10.0;\n        *descent= 2.0;\n        *width  = 9.0;\n        NOCTX;\n    }\n    RQuartz_SetFont(ctx, gc, xd);\n    {\n\tCGFontRef font = CGContextGetFont(ctx);\n        float aScale   = (float)((gc->cex * gc->ps * xd->tscale) /\n\t\t\t\t CGFontGetUnitsPerEm(font));\n\tUniChar  *buffer, single;\n        CGGlyph  glyphs[8];\n\tCFStringRef str = NULL;\n        int free_buffer = 0, len;\n\t*width = *ascent = *descent = 0.0; /* data for bail-out cases */\n\tif (c >= 0 && c <= ((mbcslocale && gc->fontface != 5) ? 127 : 255)) {\n\t    char    text[2] = { (char)c, 0 };\n\t    str = text2unichar(gc, dd, text, &buffer, &free_buffer);\n\t    if(!str) return;\n\t    len = (int) CFStringGetLength(str);\n\t    if (len > 7) return; /* this is basically impossible,\n\t\t\t\t    but you never know */\n\t} else {\n\t    single = (UniChar) ((c < 0) ? -c : c);\n\t    buffer = &single;\n\t    len = 1;\n\t}\n        *width = 0.0;\n        CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n        {\n\t    int i;\n            int    advances[8];\n            CGRect bboxes[8];\n            CGFontGetGlyphAdvances(font, glyphs, len, advances);\n            CGFontGetGlyphBBoxes(font, glyphs, len, bboxes);\n            for(i = 0; i < len; i++)\n                *width += advances[i] * aScale;\n            *ascent  = aScale * (bboxes[0].size.height + bboxes[0].origin.y);\n            *descent = -aScale * bboxes[0].origin.y;\n        }\n        if (free_buffer) free(buffer);\n        if (str) CFRelease(str);\n    }\n}\n\nstatic Rboolean RQuartz_Locator(double *x, double *y, DEVDESC)\n{\n    Rboolean res;\n    DEVSPEC;\n    ctx = NULL;\n    if (!xd->locatePoint)\n        return FALSE;\n    res = xd->locatePoint(xd, xd->userInfo, x, y);\n    *x/=xd->scalex;\n    *y/=xd->scaley;\n    return res;\n}\n\n#pragma mark -\n#pragma mark R Interface\n\n#include \"qdCocoa.h\"\n#include \"qdBitmap.h\"\n#include \"qdPDF.h\"\n/* disabled for now until we get to test in on 10.3 #include \"qdCarbon.h\" */\n\n/* current fake */\nQuartzDesc_t \nQuartzCarbon_DeviceCreate(pDevDesc dd, QuartzFunctions_t *fn, QuartzParameters_t *par)\n{\n    return NULL;\n}\n\n#define ARG(HOW,WHAT) HOW(CAR(WHAT));WHAT = CDR(WHAT)\n\n/* C version of the Quartz call (experimental)\n   Quartz descriptor on success, NULL on failure. \n   If errorCode is not NULL, it will contain the error code on exit */\nQuartzDesc_t \nQuartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)\n{\n    if (!q_create || !par) {\n\tif (errorCode) errorCode[0] = -4;\n\treturn NULL;\n    }\n    {\n        const void *vmax = vmaxget();\n\tQuartzDesc_t qd = NULL;\n\tR_GE_checkVersionOrDie(R_GE_version);\n        R_CheckDeviceAvailable();\n        {\n\t    const char *devname = \"quartz_off_screen\";\n\t    /* FIXME: check this allocation */\n            pDevDesc dev    = calloc(1, sizeof(DevDesc));\n\n            if (!dev) {\n\t\tif (errorCode) errorCode[0] = -2;\n\t\treturn NULL;\n\t    }\n            if (!(qd = q_create(dev, &qfn, par))) {\n                vmaxset(vmax);\n                free(dev);\n\t\tif (errorCode) errorCode[0] = -3;\n\t\treturn NULL;\n            }\n\t    if(streql(par->type, \"\") || streql(par->type, \"native\")\n\t       || streql(par->type, \"cocoa\") || streql(par->type, \"carbon\"))\n\t\tdevname = \"quartz\";\n            gsetVar(R_DeviceSymbol, mkString(devname), R_BaseEnv);\n            pGEDevDesc dd = GEcreateDevDesc(dev);\n            GEaddDevice(dd);\n            GEinitDisplayList(dd);\n            vmaxset(vmax);\n        }\n\treturn qd;\n    }\n}\n\n/* ARGS: type, file, width, height, ps, family, antialias,\n   title, bg, canvas, dpi */\nSEXP Quartz(SEXP args)\n{\n    SEXP tmps, bgs, canvass;\n    double   width, height, ps;\n    Rboolean antialias;\n    int      quartzpos, bg, canvas, module = 0;\n    double   mydpi[2], *dpi = 0;\n    const char *type, *mtype = 0, *family, *title;\n    char *file = NULL;\n    QuartzDesc_t qd = NULL;\n\n    const void *vmax = vmaxget();\n    /* Get function arguments */\n    args = CDR(args); /* Skip the call */\n    if (TYPEOF(CAR(args)) != STRSXP || LENGTH(CAR(args)) < 1)\n        type = \"\";\n    else\n        type  = CHAR(STRING_ELT(CAR(args), 0));\n    args = CDR(args);\n    /* we may want to support connections at some point, but not yet ... */\n    tmps = CAR(args);    args = CDR(args);\n    if (isNull(tmps)) \n\tfile = NULL;\n    else if (isString(tmps) && LENGTH(tmps) >= 1) {\n        const char *tmp = R_ExpandFileName(CHAR(STRING_ELT(tmps, 0)));\n\tfile = R_alloc(strlen(tmp) + 1, sizeof(char));\n\tstrcpy(file, tmp);\n    } else\n        error(_(\"invalid 'file' argument\"));\n    width     = ARG(asReal,args);\n    height    = ARG(asReal,args);\n    ps        = ARG(asReal,args);\n    family    = CHAR(STRING_ELT(CAR(args), 0)); args = CDR(args);\n    antialias = ARG(asLogical,args);\n    title     = CHAR(STRING_ELT(CAR(args), 0)); args = CDR(args);\n    bgs       = CAR(args); args = CDR(args);\n    bg        = RGBpar(bgs, 0);\n    canvass   = CAR(args); args = CDR(args);\n    canvas    = RGBpar(canvass, 0) | 0xff000000; /* force opaque */\n    tmps      = CAR(args); args = CDR(args);\n    if (!isNull(tmps)) {\n        tmps = coerceVector(tmps, REALSXP);\n        if (LENGTH(tmps) > 0) {\n            dpi = mydpi;\n            mydpi[0] = REAL(tmps)[0];\n            if (LENGTH(tmps) > 1)\n                mydpi[1] = REAL(tmps)[1];\n            else\n                mydpi[1] = mydpi[0];\n        }\n    }\n    /* just in case someone passed NAs/NaNs */\n    if (dpi && (ISNAN(dpi[0]) || ISNAN(dpi[1]))) dpi=0;\n\n    if (ISNAN(width) || ISNAN(height) || width <= 0.0 || height <= 0.0)\n        error(_(\"invalid quartz() device size\"));\n\n    if (type) {\n        const quartz_module_t *m = quartz_modules;\n\tmtype = type;\n        while (m->type) {\n            if (!strcasecmp(type, m->type)) {\n                module = m->qbe;\n                if (m->subst) mtype = m->subst;\n                break;\n            }\n            m++;\n        }\n\n\tif (!strncasecmp(type, \"bitmap:\", 7)) {\n\t    module = QBE_BITMAP;\n\t    mtype = mtype + 7;\n\t}\n    }\n\n    quartzpos = 1;\n\n    R_GE_checkVersionOrDie(R_GE_version);\n    R_CheckDeviceAvailable();\n    BEGIN_SUSPEND_INTERRUPTS {\n\tpDevDesc dev = calloc(1, sizeof(DevDesc));\n\n\tif (!dev)\n\t    error(_(\"unable to create device description\"));\n\n\tQuartzParameters_t qpar = {\n\t    sizeof(qpar),\n\t    mtype, file, title,\n\t    -1.0, -1.0, width, height, ps,\n\t    family,\n\t    antialias ? QPFLAG_ANTIALIAS: 0,\n\t    -1, /* connection */\n\t    bg, canvas,\n\t    dpi\n\t};\n\n\t/* re-routed code has the first shot */\n\tif (ptr_QuartzBackend)\n\t    qd = ptr_QuartzBackend(dev, &qfn, &qpar);\n\n\tif (qd == NULL) { /* try internal modules next */\n\t    switch (module) {\n            case QBE_COCOA:\n                qd = QuartzCocoa_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_NATIVE:\n                /* native is essentially cocoa with carbon fall-back */\n                qd = QuartzCocoa_DeviceCreate(dev, &qfn, &qpar);\n                if (qd) break;\n            case QBE_CARBON:\n                qd = QuartzCarbon_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_PDF:\n\t\tqpar.canvas = 0; /* so not used */\n                qd = QuartzPDF_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_BITMAP:\n\t\t/* we need to set up the default file name here, where we\n\t\t   know the original type name. */\n\t\tif (file == NULL) {\n\t\t    static char deffile[30];\n\t\t    snprintf(deffile, 30, \"%s.%s\", \"Rplot%03d\", type);\n\t\t    qpar.file = deffile;\n\t\t}\n\t\tqpar.canvas = 0; /* so not used */\n\t\tqd = QuartzBitmap_DeviceCreate(dev, &qfn, &qpar);\n\t\tbreak;\n\t    }\n\t}\n\n\tif (qd == NULL) {\n\t    vmaxset(vmax);\n\t    free(dev);\n\t    error(_(\"unable to create quartz() device target, given type may not be supported\"));\n\t}\n\tconst char *devname = \"quartz_off_screen\";\n\tif(streql(type, \"\") || streql(type, \"native\") || streql(type, \"cocoa\") \n\t   || streql(type, \"carbon\")) devname = \"quartz\";\n\tSEXP f = PROTECT(mkString(devname));\n\tif(file) setAttrib(f, install(\"filepath\"), mkString(file));\n \tgsetVar(R_DeviceSymbol, f, R_BaseEnv);\n\tUNPROTECT(1);\n\tpGEDevDesc dd = GEcreateDevDesc(dev);\n\tGEaddDevice(dd);\n\tGEinitDisplayList(dd);\n    } END_SUSPEND_INTERRUPTS;\n    vmaxset(vmax);\n    return R_NilValue;\n}\n\n#include <sys/sysctl.h>\n\nstatic double cached_darwin_version = 0.0;\n\n/* Darwin version X.Y maps to macOS version 10.(X - 4).Y */\nstatic double darwin_version() {\n    char ver[32];\n    size_t len = sizeof(ver) - 1;\n    int mib[2] = { CTL_KERN, KERN_OSRELEASE };\n    if (cached_darwin_version > 0.0)\n\treturn cached_darwin_version;\n    sysctl(mib, 2, &ver, &len, 0, 0);\n    return (cached_darwin_version = atof(ver));\n}\n\n#include <mach/mach.h>\n#include <servers/bootstrap.h>\n\n/* even as of Darwin 9 there is no entry for bootstrap_info in bootrap headers */\nextern kern_return_t bootstrap_info(mach_port_t , /* bootstrap port */\n                                    name_array_t*, mach_msg_type_number_t*,  /* service */\n                                    name_array_t*, mach_msg_type_number_t*,  /* server */\n                                    bool_array_t*, mach_msg_type_number_t*); /* active */\n\n/* returns 1 if window server session service\n   (com.apple.windowserver.session) is present in the boostrap\n   namespace (pre-Lion) or when a current session is present, active\n   and there is no SSH_CONNECTION (Lion and later).\n   returns 0 if an error occurred or the service is not\n   present. For all practical purposes this returns 1 only if run\n   interactively via LS. Although ssh to a machine that has a running\n   session for the same user will allow a WS connection, this function\n   will still return 0 in that case.\n   NOTE: on macOS 10.5 we are currently NOT searching the parent\n   namespaces. This is currently OK, because the session service will\n   be registered in the session namespace which is the last in the\n   chain. However, this could change in the future.\n */\nstatic int has_wss() {\n    int res = 0;\n\n    if (darwin_version() < 11.0) { /* before Lion we get reliable information from the bootstrap info */\n\tkern_return_t kr;\n\tmach_port_t self = mach_task_self();\n\tmach_port_t bport = MACH_PORT_NULL;\n\tkr = task_get_bootstrap_port(self, &bport);\n\tif (kr == KERN_SUCCESS) {\n\t    kern_return_t           kr;\n\t    name_array_t            serviceNames;\n\t    mach_msg_type_number_t  serviceNameCount;\n\t    name_array_t            serverNames;\n\t    mach_msg_type_number_t  serverNameCount;\n\t    bool_array_t            active;\n\t    mach_msg_type_number_t  activeCount;\n\t    \n\t    serviceNames  = NULL;\n\t    serverNames   = NULL;\n\t    active        = NULL;\n\t    \n\t    kr = bootstrap_info(bport, \n\t\t\t\t&serviceNames, &serviceNameCount, \n\t\t\t\t&serverNames, &serverNameCount, \n\t\t\t\t&active, &activeCount);\n\t    if (kr == KERN_SUCCESS) {\n\t\tunsigned int i = 0;\n\t\twhile (i < serviceNameCount) {\n\t\t    if (!strcmp(serviceNames[i], \"com.apple.windowserver.session\")) {\n\t\t\tres = 1;\n\t\t\tbreak;\n\t\t    }\n\t\t    i++;\n\t\t}\n\t    }\n\t}\n\tif (bport != MACH_PORT_NULL)\n\t    mach_port_deallocate(mach_task_self(), bport);\n    } else {\n\t/* On macOS 10.7 (Lion) and higher two things changed:\n\t   a) there is no com.apple.windowserver.session anymore \n\t   so the above will fail\n\t   b) every process has now the full bootstrap info, \n\t   so in fact even remote connections will be able to \n\t   run on-screen tasks if the user is logged in\n\t   So we need to add some heuristics to decide when the user \n\t   actually wants Quartz ... */   \n\t/* check user's session */\n\tCFDictionaryRef dict = CGSessionCopyCurrentDictionary();\n\tif (dict) { /* allright, let's see if the session is current */\n\t    CFTypeRef obj = CFDictionaryGetValue(dict, CFSTR(\"kCGSSessionOnConsoleKey\"));\n\t    if (obj && CFGetTypeID(obj) == CFBooleanGetTypeID()) {\n\t\t/* even if this session is active, we don't use Quartz for SSH connections */\n\t\tif (CFBooleanGetValue(obj) && (!getenv(\"SSH_CONNECTION\") || getenv(\"SSH_CONNECTION\")[0] == 0))\n\t\t    res = 1;\n\t    }\n\t    CFRelease(dict);\n\t}\n    }\n\n    return res;\n}\n\nSEXP makeQuartzDefault() {\n    return ScalarLogical(has_wss());\n}\n\n#else\n/* --- no AQUA support = no Quartz --- */\n\n#include \"grDevices.h\"\n#include <R_ext/QuartzDevice.h>\n\nSEXP Quartz(SEXP args)\n{\n    warning(_(\"Quartz device is not available on this platform\"));\n    return R_NilValue;\n}\n\nSEXP makeQuartzDefault() {\n    return ScalarLogical(FALSE);\n}\n\nQuartzDesc_t \nQuartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)\n{\n    if (errorCode) errorCode[0] = -1;\n    return NULL;\n}\n\nvoid *getQuartzAPI()\n{\n    return NULL;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/R/check.R": "#  File src/library/tools/R/check.R\n#  Part of the R package, https://www.R-project.org\n#\n#  Copyright (C) 1995-2018 The R Core Team\n#\n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  A copy of the GNU General Public License is available at\n#  https://www.R-project.org/Licenses/\n\n###- R based engine for R CMD check\n\n## R developers can use this to debug the function by running it\n## directly as tools:::.check_packages(args), where the args should\n## be what commandArgs(TRUE) would return, that is a character vector\n## of (space-delimited) terms that would be passed to R CMD check.\n\n\nget_timeout <- function(tlim)\n{\n    if(is.character(tlim)) {\n        if(grepl(\"m$\", tlim))\n            tlim <- 60*as.numeric(sub(\"m$\", \"\", tlim))\n        else if(grepl(\"h$\", tlim))\n            tlim <- 3600*as.numeric(sub(\"h$\", \"\", tlim))\n        else if(grepl(\"s$\", tlim))  # for completeness, like GNU timeout.\n            tlim <- as.numeric(sub(\"s$\", \"\", tlim))\n    }\n    tlim <- as.numeric(tlim)\n    if(is.na(tlim) || tlim < 0) tlim <- 0\n    tlim\n}\n\nreport_timeout <- function(tlim)\n{\n    tlim <- trunc(tlim)\n    if (tlim >= 3600)\n        warning(gettextf(\"elapsed-time limit of %g %s reached for sub-process\",\n                         round(tlim/3600, 1L), \"hours\"),\n                domain = NA, call. = FALSE)\n    else if (tlim >= 60)\n        warning(gettextf(\"elapsed-time limit of %g %s reached for sub-process\",\n                         round(tlim/60, 1L), \"minutes\"),\n                domain = NA, call. = FALSE)\n    else\n        warning(gettextf(\"elapsed-time limit of %g %s reached for sub-process\",\n                         tlim, \"seconds\"),\n                domain = NA, call. = FALSE)\n}\n\n## Find serialized objects (for load() and for readRDS()) in \"allfiles\" and\n## report serialization versions (0 means not a serialized object,\n## 1 means either version-1 or not a serialized object, 2 and more means\n## serialized object of that version).\n##\n## These are most commonly data/*.{Rdata,rda}, R/sysdata.rda files,\n## and build/vignette.rds\n## But packages have other .rds files in many places.\n## Despite its name, build/partial.rdb is created by saveRDS.\n##\nget_serialization_version <- function(allfiles)\n{\n    getVerLoad <- function(file)\n    {\n        ## This could look at the magic number, but for a short\n        ## while version 3 files were produced with a version-2\n        ## magic number. loadInfoFromConn2 checks if the magic number\n        ## is sensible.\n        con <- gzfile(file, \"rb\"); on.exit(close(con))\n        ## The .Internal gives an error on version-1 files\n        ## (and on non-serialized files)\n        tryCatch(.Internal(loadInfoFromConn2(con))$version,\n                 error = function(e) 1L)\n    }\n    getVerSer <- function(file)\n    {\n        con <- gzfile(file, \"rb\"); on.exit(close(con))\n        ## In case this is not a serialized object\n        tryCatch(.Internal(serializeInfoFromConn(con))$version,\n                 error = function(e) 0L)\n    }\n    loadfiles <- grep(\"[.](rda|RData|Rdata|rdata|Rda|bam|Rbin)$\",\n                      allfiles, value = TRUE)\n    serfiles <- c(grep(\"[.](rds|RDS|Rds|rdx)$\", allfiles, value = TRUE),\n                  grep(\"build/partial[.]rdb$\", allfiles, value = TRUE))\n    vers1 <- sapply(loadfiles, getVerLoad)\n    vers2 <- sapply(serfiles, getVerSer)\n    c(vers1, vers2)\n}\n\n## Used for INSTALL and Rd2pdf\nrun_Rcmd <- function(args, out = \"\", env = \"\", timeout = 0)\n{\n    status <- if(.Platform$OS.type == \"windows\")\n        system2(file.path(R.home(\"bin\"), \"Rcmd.exe\"), args, out, out,\n                timeout = get_timeout(timeout))\n    else\n        system2(file.path(R.home(\"bin\"), \"R\"), c(\"CMD\", args), out, out,\n                env = env, timeout = get_timeout(timeout))\n    if(identical(status, 124L)) report_timeout(timeout)\n    status\n}\n\nR_runR <- function(cmd = NULL, Ropts = \"\", env = \"\",\n                   stdout = TRUE, stderr = TRUE, stdin = NULL,\n                   arch = \"\", timeout = 0)\n{\n    timeout <- get_timeout(timeout)\n    out <- if (.Platform$OS.type == \"windows\") {\n        ## workaround Windows problem with input = cmd\n        if (!is.null(cmd)) {\n            ## In principle this should escape \\\n           Rin <- tempfile(\"Rin\"); on.exit(unlink(Rin)); writeLines(cmd, Rin)\n        } else Rin <- stdin\n        suppressWarnings(system2(if(nzchar(arch)) file.path(R.home(), \"bin\", arch, \"Rterm.exe\")\n                                 else file.path(R.home(\"bin\"), \"Rterm.exe\"),\n                                 c(Ropts, paste(\"-f\", Rin)), stdout, stderr,\n                                 env = env, timeout = timeout))\n    } else {\n        suppressWarnings(system2(file.path(R.home(\"bin\"), \"R\"),\n                                 c(if(nzchar(arch)) paste0(\"--arch=\", arch), Ropts),\n                                 stdout, stderr, stdin, input = cmd, env = env,\n                                 timeout = timeout))\n    }\n    if(identical(out, 124L) || identical(attr(out, \"status\"), 124L))\n        report_timeout(timeout)\n    out\n}\n\nsetRlibs <-\n    function(lib0 = \"\", pkgdir = \".\", suggests = FALSE, libdir = NULL,\n             self = FALSE, self2 = TRUE, quote = FALSE, LinkingTo = FALSE,\n             tests = FALSE)\n{\n    WINDOWS <- .Platform$OS.type == \"windows\"\n    useJunctions <- WINDOWS && !nzchar(Sys.getenv(\"R_WIN_NO_JUNCTIONS\"))\n    flink <- function(from, to) {\n        res <- if(WINDOWS) {\n            if(useJunctions) Sys.junction(from, to)\n            else file.copy(from, to, recursive = TRUE)\n        } else file.symlink(from, to)\n        if (!res) stop(gettextf(\"cannot link from %s\", from), domain = NA)\n    }\n\n    pi <- .split_description(.read_description(file.path(pkgdir, \"DESCRIPTION\")))\n    thispkg <- unname(pi$DESCRIPTION[\"Package\"])\n\n    ## We need to make some assumptions about layout: this version\n    ## assumes .Library contains standard and recommended packages\n    ## and nothing else.\n    tmplib <- tempfile(\"RLIBS_\")\n    dir.create(tmplib)\n    ## Since this is under the session directory and only contains\n    ## symlinks and dummies (hence will be small) we never clean it up.\n\n    test_recommended <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_NO_RECOMMENDED_\", \"FALSE\"))\n\n    if(test_recommended) {\n        ## Now add dummies for recommended packages (removed later if declared)\n        recommended <- .get_standard_package_names()$recommended\n        ## grDevices has :: to KernSmooth\n        ## stats has ::: to Matrix, Matrix depends on lattice\n        ## which gives false positives in MASS and Rcpp\n        ## codetools is really part of tools\n        exceptions <- \"codetools\"\n        if (thispkg %in% c(\"MASS\", \"Rcpp\"))\n            exceptions <- c(exceptions, \"Matrix\", \"lattice\")\n        if (thispkg %in%\n            c(\"Modalclust\", \"aroma.core\", \"iWebPlots\",\n              \"openair\", \"oce\", \"pcalg\", \"tileHMM\"))\n            exceptions <- c(exceptions, \"KernSmooth\")\n        recommended <- recommended %w/o% exceptions\n        for(pkg in recommended) {\n            if(pkg == thispkg) next\n            dir.create(pd <- file.path(tmplib, pkg))\n            ## some people remove recommended packages ....\n            f <- file.path(.Library, pkg, \"DESCRIPTION\")\n            if(file.exists(f)) file.copy(f, pd)\n            ## to make sure find.package throws an error:\n            close(file(file.path(pd, \"dummy_for_check\"), \"w\"))\n        }\n    }\n\n    sug <- if (suggests)  names(pi$Suggests)\n    else {\n        ## we always need to be able to recognise 'vignettes'\n        VB <- unname(pi$DESCRIPTION[\"VignetteBuilder\"])\n        sug <- if(is.na(VB)) character()\n        else {\n            VB <- unlist(strsplit(VB, \",\"))\n            sug <- unique(gsub('[[:space:]]', '', VB))\n            ## too many people forgot this, but it will never get fixed if made an exception.\n            ## if(\"knitr\" %in% VB) sug <- c(sug, \"rmarkdown\")\n            sug\n        }\n        if(tests) ## we need the test-suite package available\n            c(sug, intersect(names(pi$Suggests), c(\"RUnit\", \"testthat\")))\n        else sug\n    }\n    deps <- unique(c(names(pi$Depends), names(pi$Imports),\n                     if(LinkingTo) names(pi$LinkingTo),\n                     sug))\n    if(length(libdir) && self2) flink(file.path(libdir, thispkg), tmplib)\n    ## .Library is not necessarily canonical, but the .libPaths version is.\n    lp <- .libPaths()\n    poss <- c(lp[length(lp)], .Library)\n    already <- thispkg\n    more <- unique(deps %w/o% already) # should not depend on itself ...\n    while(length(more)) {\n        m0 <- more; more <- character()\n        for (pkg in m0) {\n            if (test_recommended) {\n                if (pkg %in% recommended) unlink(file.path(tmplib, pkg), TRUE)\n                ## hard-code dependencies for now.\n                if (pkg == \"mgcv\")\n                    unlink(file.path(tmplib, c(\"Matrix\", \"lattice\", \"nlme\")), TRUE)\n                if (pkg == \"Matrix\") unlink(file.path(tmplib, \"lattice\"), TRUE)\n                if (pkg == \"class\") unlink(file.path(tmplib, \"MASS\"), TRUE)\n                if (pkg == \"nlme\") unlink(file.path(tmplib, \"lattice\"), TRUE)\n            }\n            where <- find.package(pkg, quiet = TRUE)\n            if(length(where)) {\n                if (dirname(where) %notin% poss)\n                    flink(where, tmplib)\n                else if (!test_recommended)\n                    # If the package is in the standard library we can\n                    # assume dependencies have been met, but we can\n                    # only skip the traversal if we aren't testing recommended\n                    # packages, because loading will fail if there is\n                    # an indirect dependency to one that has been hidden\n                    # by a dummy in tmplib.\n                    next\n                pi <- readRDS(file.path(where, \"Meta\", \"package.rds\"))\n                more <- c(more, names(pi$Depends), names(pi$Imports),\n                          names(pi$LinkingTo))\n            }\n        }\n        already <- c(already, m0)\n        more <- unique(more %w/o% already)\n    }\n    if (self) flink(normalizePath(pkgdir), tmplib)\n    # print(dir(tmplib))\n    rlibs <- tmplib\n    if (nzchar(lib0)) rlibs <- c(lib0, rlibs)\n    rlibs <- paste(rlibs, collapse = .Platform$path.sep)\n    if(quote) rlibs <- shQuote(rlibs)\n    c(paste0(\"R_LIBS=\", rlibs),\n      if(WINDOWS) \" R_ENVIRON_USER='no_such_file'\" else \"R_ENVIRON_USER=''\",\n      if(WINDOWS) \" R_LIBS_USER='no_such_dir'\" else \"R_LIBS_USER=''\",\n      \" R_LIBS_SITE='no_such_dir'\")\n}\n\nadd_dummies <- function(dir, Log)\n{\n    dir1 <- file.path(dir, \"R_check_bin\")\n    if (dir.exists(file.path(dir1))) {\n        messageLog(Log, \"directory \", sQuote(dir1), \" already exists\")\n        return()\n    }\n    dir.create(dir1)\n    if (!dir.exists(dir1)) {\n        messageLog(Log, \"creation of directory \", sQuote(dir1), \" failed\")\n        return()\n    }\n    Sys.setenv(PATH = env_path(dir1, Sys.getenv(\"PATH\")))\n    if(.Platform$OS.type != \"windows\") {\n        writeLines(c('echo \"\\'R\\' should not be used without a path -- see par. 1.6 of the manual\"',\n                     'exit 1'),\n                   p1 <- file.path(dir1, \"R\"))\n        writeLines(c('echo \"\\'Rscript\\' should not be used without a path -- see par. 1.6 of the manual\"',\n                     'exit 1'),\n                   p2 <- file.path(dir1, \"Rscript\"))\n        Sys.chmod(c(p1, p2), \"0755\")\n    } else {\n        ## currently untested\n        writeLines(c('@ECHO OFF',\n                     'echo \"\\'R\\' should not be used without a path -- see par. 1.6 of the manual\"',\n                     'exit /b 1'),\n                   p1 <- file.path(dir1, \"R.bat\"))\n        writeLines(c('@ECHO OFF',\n                     'echo \"\\'Rscript\\' should not be used without a path -- see par. 1.6 of the manual\"',\n                     'exit /b 1'),\n                   p2 <- file.path(dir1, \"Rscript.bat\"))\n   }\n}\n\n###- The main function for \"R CMD check\"\n.check_packages <- function(args = NULL, no.q = interactive())\n{\n    WINDOWS <- .Platform$OS.type == \"windows\"\n    ## this requires on Windows: file.exe (optional)\n\n    wrapLog <- function(...) {\n        text <- paste(..., collapse = \" \")\n        ## strwrap expects paras separated by blank lines.\n        ## Perl's wrap split on \\n\n        text <- strsplit(text, \"\\n\", useBytes = TRUE)[[1L]]\n        printLog(Log, paste(strwrap(text), collapse = \"\\n\"), \"\\n\")\n    }\n\n  ## used for R_runR2 and\n  ## .check_package_description\n  ## .check_package_description_encoding\n  ## .check_package_license\n  ## .check_demo_index\n  ## .check_vignette_index\n  ## .check_package_subdirs\n  ## .check_citation\n  ## .check_package_ASCII_code\n  ## .check_package_code_syntax\n  ## .check_packages_used\n  ## .check_package_code_shlib\n  ## .check_package_code_startup_functions\n  ## .check_package_code_unload_functions\n  ## .check_package_code_tampers\n  ## .check_package_code_assign_to_globalenv\n  ## .check_package_code_attach\n  ## .check_package_code_data_into_globalenv\n  ## .check_package_parseRd\n  ## .check_Rd_metadata\n  ## .check_Rd_line_widths\n  ## .check_Rd_xrefs\n  ## .check_Rd_contents\n  ## .check_package_datasets\n  ## .check_package_compact_datasets\n  ## .check_package_compact_sysdata\n  ## .check_make_vars\n  ## check_compiled_code\n  ## Checking loading\n  ## Rdiff on reference output\n  ## Creating -Ex.R\n  ## Running examples (run_one_arch)\n  ## .runPackageTestsR\n  ## .run_one_vignette\n  ## buildVignettes\n\n    def_tlim <- get_timeout(Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\"))\n    R_runR0 <- function(..., timeout = def_tlim)\n            R_runR(..., timeout = timeout)\n\n    ## Used for\n    ## .check_packages_used_in_examples\n    ## .check_packages_used_in_tests\n    ## .check_packages_used_in_vignettes\n    ## checkS3methods\n    ## checkReplaceFuns\n    ## checkFF\n    ## .check_code_usage_in_package (with full set)\n    ## .check_T_and_F (with full set)\n    ## .check_dotInternal (with full set)\n    ## undoc, codoc, codocData, codocClasses\n    ## checkDocFiles, checkDocStyle\n    ## The default set of packages here are as they are because\n    ## .get_S3_generics_as_seen_from_package needs utils,graphics,stats\n    ##  Used by checkDocStyle (which needs the generic visible) and checkS3methods.\n    R_runR2 <-\n        status <- if(WINDOWS) {\n            function(cmd,\n                     env = \"R_DEFAULT_PACKAGES=utils,grDevices,graphics,stats\",\n                     timeout = 0)\n                {\n                    out <- R_runR(cmd, R_opts2, env, timeout = timeout)\n                    ## pesky gdata ....\n                    filtergrep(\"^(ftype: not found|File type)\", out)\n                }\n        } else\n            function(cmd,\n                     env = \"R_DEFAULT_PACKAGES='utils,grDevices,graphics,stats'\",\n                     timeout = 0)\n            {\n                out <- R_runR(cmd, R_opts2, env, timeout = timeout)\n                ## htmltools produced non-UTF-8 output in Dec 2015\n                if (R_check_suppress_RandR_message)\n                    filtergrep('^Xlib: *extension \"RANDR\" missing on display',\n                               out, useBytes = TRUE)\n                else out\n            }\n\n    td0 <- Inf # updated below\n    print_time <- function(t1, t2, Log)\n    {\n        td <- t2 - t1\n        if(td[3L] < td0) return()\n        td2 <- if (td[3L] > 600) {\n            td <- td/60\n            if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))\n            else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))\n        } else {\n            if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))\n            else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))\n        }\n        cat(td2)\n        if (!is.null(Log) && Log$con > 0L) cat(td2, file = Log$con)\n    }\n\n    parse_description_field <- function(desc, field, default)\n        str_parse_logic(desc[field], default=default)\n\n    check_pkg <- function(pkg, pkgname, pkgoutdir, startdir, libdir, desc,\n                          is_base_pkg, is_rec_pkg, subdirs, extra_arch)\n    {\n        Sys.setenv(\"_R_CHECK_PACKAGE_NAME_\" = pkgname)\n        on.exit(Sys.unsetenv(\"_R_CHECK_PACKAGE_NAME_\"))\n\n        ## pkg is the argument we received from the main loop.\n        ## pkgdir is the corresponding absolute path,\n\n        checkingLog(Log, \"package directory\")\n        setwd(startdir)\n        pkg <- sub(\"/$\", \"\", pkg)\n        if (dir.exists(pkg)) {\n            setwd(pkg) ## wrap in try()?\n            pkgdir <- getwd()\n            resultLog(Log, \"OK\")\n        } else {\n            errorLog(Log, \"Package directory \", sQuote(pkg), \"does not exist.\")\n            summaryLog(Log)\n            do_exit(1L)\n        }\n\n        haveR <- dir.exists(\"R\") && !extra_arch\n\n        if (!extra_arch) {\n            if(dir.exists(\"build\")) check_build()\n            db <- check_meta()  # Check DESCRIPTION meta-information.\n            check_top_level()\n            check_detritus()\n            check_indices()\n            check_subdirectories(haveR, subdirs)\n            ## Check R code for non-ASCII chars which\n            ## might be syntax errors in some locales.\n            if (!is_base_pkg && haveR && R_check_ascii_code) check_non_ASCII()\n        } # end of !extra_arch\n\n        ## Check we can actually load the package: base is always loaded\n        if (do_install && pkgname != \"base\") {\n            if (this_multiarch) {\n                Log$stars <<-  \"**\"\n                for (arch in inst_archs) {\n                    printLog(Log, \"* loading checks for arch \", sQuote(arch), \"\\n\")\n                    check_loading(arch)\n                }\n                Log$stars <<-  \"*\"\n            } else {\n                check_loading()\n            }\n        }\n\n        if (haveR) {\n            check_R_code() # unstated dependencies, S3 methods, replacement, foreign\n            check_R_files(is_rec_pkg) # codetools etc\n        }\n\n        check_Rd_files(haveR)\n\n        check_data() # 'data' dir and sysdata.rda\n\n        if (!is_base_pkg && !extra_arch) check_src_dir(desc)\n\n        check_src()\n        if(do_install &&\n           dir.exists(\"src\") &&\n           length(so_symbol_names_table)) # suitable OS\n            check_sos()\n\n        miss <- file.path(\"inst\", \"doc\", c(\"Rplots.ps\", \"Rplots.pdf\"))\n        if (any(f <- file.exists(miss))) {\n            checkingLog(Log, \"for left-overs from vignette generation\")\n            warningLog(Log)\n            printLog(Log,\n                     paste(\"  file\", paste(sQuote(miss[f]), collapse = \", \"),\n                           \"will not be installed: please remove it\\n\"))\n        }\n        if (dir.exists(\"inst/doc\")) {\n            if (R_check_doc_sizes) check_doc_size()\n            else if (as_cran)\n                warningLog(Log, \"'qpdf' is needed for checks on size reduction of PDFs\")\n        }\n        if (dir.exists(\"inst/doc\") && do_install) check_doc_contents()\n        if (dir.exists(\"vignettes\")) check_vign_contents(ignore_vignettes)\n        if (!ignore_vignettes) {\n            if (dir.exists(\"inst/doc\") && !dir.exists(\"vignettes\")) {\n                pattern <- vignetteEngine(\"Sweave\")$pattern\n                sources <- setdiff(list.files(file.path(\"inst\", \"doc\"),\n                                              pattern = pattern),\n                                   list.files(\"vignettes\", pattern = pattern))\n                buildPkgs <- .get_package_metadata(\".\")[\"VignetteBuilder\"]\n                if (!is.na(buildPkgs)) {\n                    buildPkgs <- unlist(strsplit(buildPkgs, \",\"))\n                    buildPkgs <- unique(gsub('[[:space:]]', '', buildPkgs))\n                    engineList <- vignetteEngine(package = buildPkgs)\n                    for(nm in names(engineList)) {\n                        pattern <- engineList[[nm]]$pattern\n                        sources <- c(sources,\n                                     setdiff(list.files(file.path(\"inst\", \"doc\"),\n                                                        pattern = pattern),\n                                             list.files(\"vignettes\", pattern = pattern)))\n                    }\n                }\n                sources <- unique(sources)\n                if(length(sources)) {\n                    checkingLog(Log, \"for old-style vignette sources\")\n                    msg <- c(\"Vignette sources only in 'inst/doc':\",\n                             strwrap(paste(sQuote(sources), collapse = \", \"),\n                                     indent = 2L, exdent = 2L),\n                             \"A 'vignettes' directory is required as from R 3.1.0\",\n                             \"and these will not be indexed nor checked\")\n                    ## warning or error eventually\n                    noteLog(Log, paste(msg, collapse = \"\\n\"))\n                }\n            }\n        }\n\n        setwd(pkgoutdir)\n\n        ## Run the examples: this will be skipped if installation was\n        if (dir.exists(file.path(libdir, pkgname, \"help\"))) {\n            run_examples()\n        } else if (dir.exists(file.path(pkgdir, \"man\"))) {\n            checkingLog(Log, \"examples\")\n            resultLog(Log, \"SKIPPED\")\n        }\n\n        ## Run the package-specific tests.\n        tests_dir <- file.path(pkgdir, test_dir)\n\tif (test_dir != \"tests\" && !dir.exists(tests_dir)) {\n\t    warningLog(Log)\n\t    printLog(Log, \"directory \", sQuote(test_dir), \" not found\\n\")\n\t}\n        if (dir.exists(tests_dir) && # trackObjs has only *.Rin\n            length(dir(tests_dir, pattern = \"\\\\.(R|r|Rin)$\")))\n            run_tests()\n\n        ## Check package vignettes.\n        setwd(pkgoutdir)\n        if (!ignore_vignettes) run_vignettes(desc)\n\n    } ## end{ check_pkg }\n\n    check_file_names <- function()\n    {\n        ## Check for portable file names.\n        checkingLog(Log, \"for portable file names\")\n\n        ## Build list of exclude patterns.\n        ignore <- get_exclude_patterns()\n        ignore_file <- \".Rbuildignore\"\n        if (ignore_file %in% dir())\n            ignore <- c(ignore, readLines(ignore_file))\n\n        ## Ensure that the names of the files in the package are valid\n        ## for at least the supported OS types.  Under Unix, we\n        ## definitely cannot have '/'.  Under Windows, the control\n        ## characters as well as \" * : < > ? \\ | (i.e., ASCII\n        ## characters 1 to 31 and 34, 36, 58, 60, 62, 63, 92, and 124)\n        ## are or can be invalid.  (In addition, one cannot have\n        ## one-character file names consisting of just ' ', '.', or\n        ## '~'., and '~' has a special meaning for 8.3 short file\n        ## names).\n\n        ## Based on information by Uwe Ligges, Duncan Murdoch, and\n        ## Brian Ripley: see also\n        ## http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx\n\n        ## In addition, Windows does not allow the following DOS type\n        ## device names (by themselves or with possible extensions),\n        ## see e.g.\n        ## http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/naming_a_file.asp\n        ## http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#naming_conventions\n        ## and http://en.wikipedia.org/wiki/Filename (which as of\n        ## 2007-04-22 is wrong about claiming that COM0 and LPT0 are\n        ## disallowed):\n        ##\n        ## CON: Keyboard and display\n        ## PRN: System list device, usually a parallel port\n        ## AUX: Auxiliary device, usually a serial port\n        ## NUL: Bit-bucket device\n        ## CLOCK$: System real-time clock\n        ## COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9:\n        ##   Serial communications ports 1-9\n        ## LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9:\n        ##   parallel printer ports 1-9\n\n        ## In addition, the names of help files get converted to HTML\n        ## file names and so should be valid in URLs.  We check that\n        ## they are ASCII and do not contain %, which is what is known\n        ## to cause troubles.\n\n        allfiles <- dir(\".\", all.files = TRUE,\n                        full.names = TRUE, recursive = TRUE)\n        allfiles <- c(allfiles, unique(dirname(allfiles)))\n        allfiles <- af <- sub(\"^./\", \"\", allfiles)\n        ignore_re <- paste0(\"(\", paste(ignore, collapse = \"|\"), \")\")\n        allfiles <- filtergrep(ignore_re, allfiles)\n        bad_files <- allfiles[grepl(\"[[:cntrl:]\\\"*/:<>?\\\\|]\",\n                                    basename(allfiles))]\n        is_man <- grepl(\"man$\", dirname(allfiles))\n        bad <- sapply(strsplit(basename(allfiles[is_man]), \"\"),\n                      function(x) any(grepl(\"[^ -~]|%\", x)))\n        if (length(bad))\n            bad_files <- c(bad_files, (allfiles[is_man])[bad])\n        bad <- tolower(basename(allfiles))\n        ## remove any extension(s) (see 'Writing R Extensions')\n        bad <- sub(\"[.].*\", \"\", bad)\n        bad <- grepl(\"^(con|prn|aux|clock[$]|nul|lpt[1-9]|com[1-9])$\", bad)\n        bad_files <- c(bad_files, allfiles[bad])\n        if (nb <- length(bad_files)) {\n            errorLog(Log)\n            msg <- ngettext(nb,\n                            \"Found the following file with a non-portable file name:\\n\",\n                            \"Found the following files with non-portable file names:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            wrapLog(\"These are not valid file names\",\n                    \"on all R platforms.\\n\",\n                    \"Please rename the files and try again.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    maybe_exit(1L)\n        }\n\n        ## Next check for name clashes on case-insensitive file systems\n        ## (that is on Windows and (by default) on macOS).\n\n        dups <- unique(allfiles[duplicated(tolower(allfiles))])\n        if (nb <- length(dups)) {\n            errorLog(Log)\n            wrapLog(\"Found the following files with duplicate lower-cased file names:\\n\")\n            printLog0(Log, .format_lines_with_indent(dups), \"\\n\")\n            wrapLog(\"File names must not differ just by case\",\n                    \"to be usable on all R platforms.\\n\",\n                    \"Please rename the files and try again.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    maybe_exit(1L)\n        }\n\n        ## NB: the omission of ' ' is deliberate.\n        non_ASCII_files <-\n            allfiles[grepl(\"[^-A-Za-z0-9._!#$%&+,;=@^(){}\\'[\\\\]]\", #\n                           basename(allfiles), perl = TRUE)]\n        any <- FALSE\n        if (nb <- length(non_ASCII_files)) {\n            any <- TRUE\n            warningLog(Log)\n            msg <- ngettext(nb,\n                            \"Found the following file with a non-portable file name:\\n\",\n                            \"Found the following files with non-portable file names:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(non_ASCII_files), \"\\n\")\n            wrapLog(\"These are not fully portable file names.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        }\n\n        ## now check lengths, as tarballs can only record up to 100 bytes\n        ## plus perhaps 155 bytes as a prefix plus /\n        af <- file.path(pkgname, af)\n        lens <- nchar(af, \"b\")\n        if (any(lens > 100L)) {\n            bad_files <- af[lens > 100L]\n            OK <- TRUE\n            if (any(lens > 256L)) OK <- FALSE\n            else { # check if can be splt\n                for (f in bad_files) {\n                    name <- charToRaw(f)\n                    s <- max(which(name[1:155] == charToRaw(\"/\")))\n                    if(is.infinite(s) || s+100 < length(name)) {\n                        OK <- FALSE; break\n                    }\n                }\n                if (!OK) errorLog(Log)\n                else if(!any) {\n                    noteLog(Log)\n                    any <- TRUE\n                }\n            }\n            msg <- ngettext(length(bad_files),\n                            \"Found the following non-portable file path:\\n\",\n                            \"Found the following non-portable file paths:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\\n\")\n            wrapLog(\"Tarballs are only required to store paths of up to 100\",\n                    \"bytes and cannot store those of more than 256 bytes,\",\n                    \"with restrictions including to 100 bytes for the\",\n                    \"final component.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    if (!OK)\n\t\tmaybe_exit(1L)\n        }\n        if (!any) resultLog(Log, \"OK\")\n\n        allfiles\n    }\n\n    check_permissions <- function(allfiles)\n    {\n        checkingLog(Log, \"for sufficient/correct file permissions\")\n\n        ## This used to be much more 'aggressive', requiring that dirs\n        ## and files have mode >= 00755 and 00644, respectively (with\n        ## an error if not), and that files know to be 'text' have\n        ## mode 00644 (with a warning if not).  We now only require\n        ## that dirs and files have mode >= 00700 and 00400,\n        ## respectively, and try to fix insufficient permission in the\n        ## INSTALL code (Unix only).\n        ##\n        ## In addition, we check whether files 'configure' and\n        ## 'cleanup' exists in the top-level directory but are not\n        ## executable, which is most likely not what was intended.\n\n        ## Phase A.  Directories at least 700, files at least 400.\n        bad_files <- character()\n        ##                 allfiles <- dir(\".\", all.files = TRUE,\n        ##                                 full.names = TRUE, recursive = TRUE)\n        ##                 allfiles <- sub(\"^./\", \"\", allfiles)\n        if(length(allfiles)) {\n            mode <- file.mode(allfiles)\n            bad_files <- allfiles[(mode & \"400\") < as.octmode(\"400\")]\n        }\n        if(length(alldirs <- unique(dirname(allfiles)))) {\n            mode <- file.mode(alldirs)\n            bad_files <- c(bad_files,\n                           alldirs[(mode & \"700\") < as.octmode(\"700\")])\n        }\n        if (length(bad_files)) {\n            errorLog(Log)\n            wrapLog(\"Found the following files with insufficient permissions:\\n\")\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            wrapLog(\"Permissions should be at least 700 for directories and 400 for files.\\nPlease fix permissions and try again.\\n\")\n\t    maybe_exit(1L)\n\t}\n\n        ## Phase B.  Top-level scripts 'configure' and 'cleanup'\n        ## should really be mode at least 500, or they will not be\n        ## necessarily be used (or should we rather change *that*?)\n        bad_files <- character()\n        for (f in c(\"configure\", \"cleanup\")) {\n            if (!file.exists(f)) next\n            mode <- file.mode(f)\n            if ((mode & \"500\") < as.octmode(\"500\"))\n                bad_files <- c(bad_files, f)\n        }\n        if (length(bad_files)) {\n            warningLog(Log)\n            wrapLog(\"The following files should most likely be executable (for the owner):\\n\")\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            printLog(Log, \"Please fix their permissions\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    ## Look for serialized objects, and check their version\n\n    ## We need to so this before installation, which may create\n    ## src/symbols.rds in the sources.\n    check_serialization <- function(allfiles)\n    {\n        checkingLog(Log, \"serialization versions\")\n        bad <- get_serialization_version(allfiles)\n        bad <- names(bad[bad >= 3L])\n        if(length(bad)) {\n            msg <- \"Found file(s) with version 3 serialization:\"\n            warningLog(Log, msg)\n            printLog0(Log, paste0(.pretty_format(sort(bad)), \"\\n\"))\n            wrapLog(\"Such files are only readable in R >= 3.5.0.\\n\",\n                    \"Recreate them with R < 3.5.0 or\",\n                    \"save(version = 2) or saveRDS(version = 2)\",\n                    \"as appropriate\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_meta <- function()\n    {\n        ## If we just installed the package (via R CMD INSTALL), we already\n        ## validated most of the package DESCRIPTION metadata.  Otherwise,\n        ## let us be defensive about this ...\n\n        checkingLog(Log, \"DESCRIPTION meta-information\")\n        dfile <- if (is_base_pkg) \"DESCRIPTION.in\" else \"DESCRIPTION\"\n        any <- FALSE\n\n        ## Check the encoding -- do first as it gives a WARNING\n        Rcmd <- sprintf(\"tools:::.check_package_description_encoding(\\\"%s\\\")\", dfile)\n        out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            warningLog(Log)\n            any <- TRUE\n            printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n        }\n\n        ## FIXME: this does not need to be run in another process\n        ## but that needs conversion to format().\n        Rcmd <- sprintf(\"tools:::.check_package_description(\\\"%s\\\", TRUE)\",\n                        dfile)\n        out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            if(any(!grepl(\"^Malformed (Title|Description)\", out))) {\n                errorLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                summaryLog(Log)\n                do_exit(1L)\n            } else {\n                noteLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n        }\n\n        ## Check the license.\n        ## For base packages, the DESCRIPTION.in files have non-canonical\n        ##   License: Part of R @VERSION@\n        ## entries because these really are a part of R: hence, skip the\n        ## check.\n        check_license <- if (!is_base_pkg) {\n            Check_license <- Sys.getenv(\"_R_CHECK_LICENSE_\", NA_character_)\n            if(is.na(Check_license)) {\n                ## The check code conditionalizes *output* on _R_CHECK_LICENSE_.\n                Sys.setenv('_R_CHECK_LICENSE_' = \"TRUE\")\n                TRUE\n            } else config_val_to_logical(Check_license)\n        } else FALSE\n        if (!isFALSE(check_license)) {\n            Rcmd <- sprintf(\"tools:::.check_package_license(\\\"%s\\\", \\\"%s\\\")\",\n                            dfile, pkgdir)\n            ## FIXME: this does not need to be run in another process\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if (check_license == \"maybe\") {\n                    if (!any) warningLog(Log)\n                } else if(any(startsWith(out, \"Standardizable: FALSE\"),\n                              startsWith(out, \"Invalid license file pointers:\"))) {\n                    if (!any) warningLog(Log)\n                } else {\n                    if (!any) noteLog(Log)\n                }\n                any <- TRUE\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n        }\n\n        ## .check_package_description() only checks Authors@R \"if needed\",\n        ## and does not check for persons with no valid roles.\n        db <- .read_description(dfile)\n        if(!is.na(aar <- db[\"Authors@R\"])) {\n            lev <- if(check_incoming) 2L else 1L\n            out <- .check_package_description_authors_at_R_field(aar,\n                                                                 strict = lev)\n            if(length(out)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                out <- .format_check_package_description_authors_at_R_field_results(out)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n            ## and there might be stale Authors and Maintainer fields\n            yorig <- db[c(\"Author\", \"Maintainer\")]\n            if(check_incoming && any(!is.na(yorig))) {\n                enc <- db[\"Encoding\"]\n                aar <- utils:::.read_authors_at_R_field(aar)\n                y <- c(Author =\n                       utils:::.format_authors_at_R_field_for_author(aar),\n                       Maintainer =\n                       utils:::.format_authors_at_R_field_for_maintainer(aar))\n                ## ignore formatting as far as possible\n                clean_up <- function(x) trimws(gsub(\"[[:space:]]+\", \" \", x))\n                yorig <- sapply(yorig, clean_up)\n                y <- sapply(y, clean_up)\n                diff <- y != yorig\n                ## <FIXME>\n                if(diff[1L]\n                   && grepl(\"https://orcid.org/\", y[1L], fixed = TRUE)) {\n                    ## Argh.  Might be from using the new ORCID id\n                    ## mechanism but having built with R < 3.5.0.\n                    ## Let's ignore ...\n                    ## Remove eventually.\n                    aar$comment <- lapply(aar$comment, unname)\n                    y1 <- utils:::.format_authors_at_R_field_for_author(aar)\n                    diff[1L] <- clean_up(y1) != yorig[1L]\n                }\n                ## </FIXME>\n                if(any(diff)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    if(diff[1L]) {\n                        printLog(Log, \"Author field differs from that derived from Authors@R\", \"\\n\")\n                        printLog(Log, \"  Author:    \", sQuote(yorig[1L]), \"\\n\")\n                        printLog(Log, \"  Authors@R: \", sQuote(y[1L]), \"\\n\")\n                        printLog(Log, \"\\n\")\n                    }\n                    if(diff[2L]) {\n                        printLog(Log, \"Maintainer field differs from that derived from Authors@R\", \"\\n\")\n                        printLog(Log, \"  Maintainer: \", sQuote(yorig[2L]), \"\\n\")\n                        printLog(Log, \"  Authors@R:  \", sQuote(y[2L]), \"\\n\")\n                        printLog(Log, \"\\n\")\n                    }\n                }\n            }\n        }\n\n        if(!is_base_pkg && is.na(db[\"Packaged\"])) {\n            if(!any) (noteLog(Log))\n            any <- TRUE\n            printLog(Log,\n                     \"Checking should be performed on sources prepared by 'R CMD build'.\",\n                     \"\\n\")\n        }\n\n        if(!is.na(ncomp <- db[\"NeedsCompilation\"])) {\n            if (ncomp %notin% c(\"yes\", \"no\")) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, \"NeedsCompilation field must take value 'yes' or 'no'\", \"\\n\")\n            }\n            if((ncomp == \"no\") && dir.exists(\"src\")) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, \"NeedsCompilation field should likely be 'yes'\", \"\\n\")\n            }\n        }\n\n        ## check for BugReports field added at R 3.4.0\n        ## This used to check for empty first line as that\n        ## breaks bug.report() in R <= 3.3.2 -- but read.dcf in those\n        ## versions adds back the newline.\n        if(!is.na(BR <- db[\"BugReports\"])) {\n            if (nzchar(BR)) {\n                msg <- \"\"\n                ## prior to 3.4.0 this was said to be\n                ## 'a URL to which bug reports about the package\n                ## should be submitted'\n                ## We will take that to mean a http[s]:// URL,\n                isURL <- grepl(\"^https?://[^ ]*$\", BR)\n                ## As from 3.4.0 bug,report() is able to extract\n                ## an email addr.\n                if(!isURL) {\n                    findEmail <- function(x) {\n                        x <- paste(x, collapse = \" \")\n                        if (grepl(\"mailto:\", x))\n                            sub(\".*mailto:([^ ]+).*\", \"\\\\1\", x)\n                        else if (grepl(\"[^<]*<([^>]+)\", x))\n                            sub(\"[^<]*<([^>]+)>.*\", \"\\\\1\", x)\n                        else NA_character_\n                    }\n                    msg <- if (is.na(findEmail(BR))) {\n                        if (grepl(\"(^|.* )[^ ]+@[[:alnum:]._]+\", BR))\n                            \"BugReports field is not a suitable URL but appears to contain an email address\\n  not specified by mailto: nor contained in < >\"\n                        else\n                            \"BugReports field should be the URL of a single webpage\"\n                    } else\n                        \"BugReports field is not a suitable URL but contains an email address\\n  which will be used as from R 3.4.0\"\n                }\n            } else {\n                msg <- \"BugReports field should not be empty\"\n            }\n            if (nzchar(msg)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, msg, \"\\n\")\n           }\n        }\n\n\n        out <- format(.check_package_description2(dfile))\n        if (length(out)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n        }\n\n        ## Dependence on say R >= 3.4.3 when 3.4 is current can\n        ## cause problems with revdeps (and did for 3.2.x).\n        ## We only check recent ones: maybe previous two\n        ## (R-release and R-old-release) while this is R-devel\n        Check_R_deps <- Sys.getenv(\"_R_CHECK_R_DEPENDS_\", \"FALSE\")\n        act <- if(Check_R_deps %in% c(\"note\", \"warn\")) TRUE\n               else config_val_to_logical(Check_R_deps)\n        if(act) {\n            Rver <-.split_description(db, verbose = TRUE)$Rdepends2\n            if(length(Rver) && Rver[[1L]]$op == \">=\") {\n                ver <- unclass(Rver[[1L]]$version)[[1L]]\n                thisver <- unclass(getRversion())[[1L]]\n                ## needs updating if we ever go to 4.0\n                tv <- if(thisver[1L] == 3L) thisver[2L] - 2L else 4L\n                if (length(ver) == 3L && ver[3L] != 0 &&\n                    ((ver[1L] > 3L) ||\n                     (ver[1L] == 3L) && (ver[2L] >= tv) )) {\n                    ## This is not quite right: may have NOTE-d above\n                    if(Check_R_deps == \"warn\") warningLog(Log)\n                    else if(!any) noteLog(Log)\n                    any <- TRUE\n                    printLog0(Log,\n                              sprintf(\"Dependence on R version %s not with patchlevel 0\\n\",\n                                      sQuote(format(Rver[[1L]]$version))))\n              }\n            }\n        }\n        if (!any) resultLog(Log, \"OK\")\n        return(db)\n    }\n\n    check_build <- function()\n    {\n        ## currently only checks vignettes\n        if (ignore_vignettes) return()\n        fv <- file.path(\"build\", \"vignette.rds\")\n        if(!file.exists(fv)) return()\n        checkingLog(Log, \"'build' directory\")\n        any <- FALSE\n        db <- readRDS(fv)\n        ## do as CRAN-pack does\n        keep <- nzchar(db$PDF)\n        if(any(!keep)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Vignette(s) without any output listed in 'build/vignette.rds'\",\n                     strwrap(sQuote(db$file[!keep]), indent = 2L, exdent = 2L))\n            printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n        }\n        pdfs <- file.path(\"inst\", \"doc\", db[keep, ]$PDF)\n        missing <- !file.exists(pdfs)\n        if(any(missing)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Output(s) listed in 'build/vignette.rds' but not in package:\",\n                     strwrap(sQuote(pdfs[missing]), indent = 2L, exdent = 2L))\n            printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_top_level <- function()\n    {\n        checkingLog(Log, \"top-level files\")\n        topfiles <- Sys.glob(c(\"install.R\", \"R_PROFILE.R\"))\n        any <- FALSE\n        if (length(topfiles)) {\n            any <- TRUE\n            warningLog(Log)\n            printLog0(Log, .format_lines_with_indent(topfiles), \"\\n\")\n            wrapLog(\"These files are defunct.\",\n                    \"See manual 'Writing R Extensions'.\\n\")\n        }\n        if(check_incoming) {\n            ## CRAN must be able to convert\n            ##   inst/README.md or README.md\n            ##   inst/NEWS.md or NEWS.md\n            ## to HTML using pandoc: check that this works fine.\n            md_files <-\n                c(Filter(file.exists,\n                         c(file.path(\"inst\", \"README.md\"),\n                           \"README.md\"))[1L],\n                  Filter(file.exists,\n                         c(file.path(\"inst\", \"NEWS.md\"),\n                           \"NEWS.md\"))[1L])\n            md_files <- md_files[!is.na(md_files)]\n            if(length(md_files)) {\n                if(nzchar(Sys.which(\"pandoc\"))) {\n                    for(ifile in md_files) {\n                        ofile <- tempfile(\"pandoc\", fileext = \".html\")\n                        out <- .pandoc_md_for_CRAN(ifile, ofile)\n                        if(out$status) {\n                            if(!any) warningLog(Log)\n                            any <- TRUE\n                            printLog(Log,\n                                     sprintf(\"Conversion of '%s' failed:\\n\",\n                                             ifile),\n                                     paste(out$stderr, collapse = \"\\n\"),\n                                     \"\\n\")\n                        }\n                        unlink(ofile)\n                    }\n                } else {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    printLog(Log,\n                             \"Files 'README.md' or 'NEWS.md' cannot be checked without 'pandoc' being installed.\\n\")\n                }\n            }\n        }\n        topfiles <- Sys.glob(c(\"LICENCE\", \"LICENSE\"))\n        if (length(topfiles)) {\n            ## Are these mentioned in DESCRIPTION?\n            lic <- desc[\"License\"]\n            if(!is.na(lic)) {\n                found <- sapply(topfiles,\n                                function(x) grepl(x, lic, fixed = TRUE))\n                topfiles <- topfiles[!found]\n                if (length(topfiles)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    one <- (length(topfiles) == 1L)\n                    msg <- c(if(one) \"File\" else \"Files\",\n                             \"\\n\",\n                             .format_lines_with_indent(topfiles),\n                             \"\\n\",\n                             if(one) {\n                                 \"is not mentioned in the DESCRIPTION file.\\n\"\n                             } else {\n                                 \"are not mentioned in the DESCRIPTION file.\\n\"\n                             })\n                    printLog(Log, msg)\n                }\n            }\n        }\n        topfiles <- Sys.glob(file.path(\"inst\", c(\"LICENCE\", \"LICENSE\")))\n        if (length(topfiles)) {\n            ## Are these mentioned in DESCRIPTION?\n            lic <- desc[\"License\"]\n            if(!is.na(lic)) {\n                found <- sapply(basename(topfiles),\n                                function(x) grepl(x, lic, fixed = TRUE))\n                topfiles <- topfiles[!found]\n                if (length(topfiles)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    one <- (length(topfiles) == 1L)\n                    msg <- c(if(one) \"File\" else \"Files\",\n                             \"\\n\",\n                             .format_lines_with_indent(topfiles),\n                             \"\\n\",\n                             if(one) {\n                                 \"will install at top-level and is not mentioned in the DESCRIPTION file.\\n\"\n                             } else {\n                                 \"will install at top-level and are not mentioned in the DESCRIPTION file.\\n\"\n                             })\n                    printLog(Log, msg)\n                }\n            }\n        }\n        if (!is_base_pkg && R_check_toplevel_files) {\n            ## any others?\n            if(is.null(topfiles0)) {\n                topfiles <- dir()\n                ## Now check if any of these were created since we started\n                topfiles <-\n                    topfiles[file.info(topfiles, extra_cols = FALSE)$ctime\n                             <= .unpack.time]\n            } else topfiles <- topfiles0\n            known <- c(\"DESCRIPTION\", \"INDEX\", \"LICENCE\", \"LICENSE\",\n                       \"LICENCE.note\", \"LICENSE.note\",\n                       \"MD5\", \"NAMESPACE\", \"NEWS\", \"PORTING\",\n                       \"COPYING\", \"COPYING.LIB\", \"GPL-2\", \"GPL-3\",\n                       \"BUGS\", \"Bugs\",\n                       \"ChangeLog\", \"Changelog\", \"CHANGELOG\", \"CHANGES\", \"Changes\",\n                       \"INSTALL\", \"README\", \"THANKS\", \"TODO\", \"ToDo\",\n                       \"INSTALL.windows\",\n                       \"README.md\", \"NEWS.md\",\n                       \"configure\", \"configure.win\", \"cleanup\", \"cleanup.win\",\n                       \"configure.ac\", \"configure.in\",\n                       \"datafiles\",\n                       \"R\", \"data\", \"demo\", \"exec\", \"inst\", \"man\",\n                       \"po\", \"src\", \"tests\", \"vignettes\",\n                       \"build\",       # used by R CMD build\n                       \".aspell\",     # used for spell checking packages\n                       \"java\", \"tools\", \"noweb\") # common dirs in packages.\n            topfiles <- setdiff(topfiles, known)\n            if (file.exists(file.path(\"inst\", \"AUTHORS\")))\n                topfiles <- setdiff(topfiles, \"AUTHORS\")\n            if (file.exists(file.path(\"inst\", \"COPYRIGHTS\")))\n                topfiles <- setdiff(topfiles, \"COPYRIGHTS\")\n            if (lt <- length(topfiles)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, ## dirs are files, but maybe not on Windows\n                         if(lt > 1L) \"Non-standard files/directories found at top level:\\n\"\n                         else \"Non-standard file/directory found at top level:\\n\" )\n                msg <- strwrap(paste(sQuote(topfiles), collapse = \" \"),\n                               indent = 2L, exdent = 2L)\n                printLog0(Log, paste(c(msg, \"\"), collapse=\"\\n\"))\n                cp <- grep(\"^copyright\", topfiles,\n                           ignore.case = TRUE, value = TRUE)\n                if (length(cp))\n                    printLog(Log, \"Copyright information should be in file inst/COPYRIGHTS\\n\")\n                if(\"AUTHORS\" %in% topfiles)\n                    printLog(Log, \"Authors information should be in file inst/AUTHORS\\n\")\n            }\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_detritus <- function()\n    {\n        checkingLog(Log, \"for left-over files\")\n        files <- dir(\".\", full.names = TRUE, recursive = TRUE)\n        bad <- grep(\"svn-commit[.].*tmp$\", files, value = TRUE)\n        bad <- c(bad, grep(\"^[.]/[^/]*[.][rR]d$\", files, value = TRUE))\n        if (length(bad)) {\n            bad <- sub(\"^[.]/\", paste0(pkgname, \"/\"), bad)\n            noteLog(Log)\n            printLog0(Log,\n                      \"The following files look like leftovers:\\n\",\n                      paste(strwrap(paste(sQuote(bad), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n\n    check_indices <- function()\n    {\n        ## Check index information.\n        checkingLog(Log, \"index information\")\n        any <- FALSE\n        if (file.exists(\"INDEX\") &&\n            !length(readLines(\"INDEX\", warn = FALSE))) {\n            any <- TRUE\n            warningLog(Log, \"Empty file 'INDEX'.\")\n        }\n        if (dir.exists(\"demo\")) {\n            index <- file.path(\"demo\", \"00Index\")\n            if (!file.exists(index) ||\n                !length(readLines(index, warn = FALSE))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log,\n                          sprintf(\"Empty or missing file %s.\\n\",\n                                  sQuote(index)))\n            } else {\n                Rcmd <- \"options(warn=1)\\ntools:::.check_demo_index(\\\"demo\\\")\\n\"\n                ## FIXME: this does not need to be run in another process\n                out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n                if(length(out)) {\n                    if(!any) warningLog(Log)\n                    any <- TRUE\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                }\n            }\n        }\n        if (dir.exists(file.path(\"inst\", \"doc\"))) {\n            Rcmd <- \"options(warn=1)\\ntools:::.check_vignette_index(\\\"inst/doc\\\")\\n\"\n            ## FIXME: this does not need to be run in another process\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            }\n        }\n        if (any)\n            wrapLog(\"See sections 'The INDEX file' and 'Package subdirectories' in the 'Writing R Extensions' manual.\\n\")\n        else resultLog(Log, \"OK\")\n    }\n\n    check_subdirectories <- function(haveR, subdirs)\n    {\n        checkingLog(Log, \"package subdirectories\")\n        any <- FALSE\n        if (haveR && !length(list_files_with_type(\"R\", \"code\")) &&\n            !file.exists(file.path(\"R\", \"sysdata.rda\"))) {\n            haveR <- FALSE\n            warningLog(Log, \"Found directory 'R' with no source files.\")\n            any <- TRUE\n        }\n        if (R_check_subdirs_nocase) {\n            ## Argh.  We often get submissions where 'R' comes out as 'r',\n            ## or 'man' comes out as 'MAN', and we've just ran into 'DATA'\n            ## instead of 'data' (2007-03-31).  Maybe we should warn about\n            ## this unconditionally ...\n            ## <FIXME>\n            ## Actually, what we should really do is check whether there is\n            ## any directory with lower-cased name matching a lower-cased\n            ## name of a standard directory, while differing in name.\n            ## </FIXME>\n\n            ## Watch out for case-insensitive file systems\n            if (\"./r\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'r'.\\n\",\n                         \"Most likely, this should be 'R'.\\n\")\n            }\n            if (\"./MAN\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'MAN'.\\n\",\n                         \"Most likely, this should be 'man'.\\n\")\n            }\n            if (\"./DATA\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'DATA'.\\n\",\n                         \"Most likely, this should be 'data'.\\n\")\n            }\n        }\n\n        all_dirs <- list.dirs(\".\")\n\n        ## several packages have had check dirs in the sources, e.g.\n        ## ./languageR/languageR.Rcheck\n        ## ./locfdr/man/locfdr.Rcheck\n        ## ./clustvarsel/inst/doc/clustvarsel.Rcheck\n        ## ./bicreduc/OldFiles/bicreduc.Rcheck\n        ## ./waved/man/waved.Rcheck\n        ## ./waved/..Rcheck\n        ind <- grepl(\"\\\\.Rcheck$\", all_dirs)\n        if(any(ind)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a check directory:\\n\",\n                            \"Found the following directories with names of check directories:\\n\", domain = NA)\n            printLog0(Log, msg,\n                      .format_lines_with_indent(all_dirs[ind]),\n                      \"\\n\",\n                      \"Most likely, these were included erroneously.\\n\")\n        }\n\n        ## Several packages had leftover Rd2dvi build directories in\n        ## their sources\n        ind <- grepl(\"^\\\\.Rd2(dvi|pdf)\", basename(all_dirs))\n        if(any(ind)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a Rd2pdf directory:\\n\",\n                            \"Found the following directories with names of Rd2pdf directories:\\n\", domain = NA)\n           printLog0(Log, msg,\n                     .format_lines_with_indent(all_dirs[ind]),\n                     \"\\n\",\n                     \"Most likely, these were included erroneously.\\n\")\n        }\n\n\n        if(!is_base_pkg && (istar || R_check_vc_dirs)) {\n            ## Packages also should not contain version control subdirs\n            ## provided that we check a .tar.gz or know we unpacked one.\n            ind <- basename(all_dirs) %in% .vc_dir_names\n            if(any(ind)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a version control directory:\\n\",\n                            \"Found the following directories with names of version control directories:\\n\", domain = NA)\n                printLog0(Log, msg,\n                          .format_lines_with_indent(all_dirs[ind]),\n                          \"\\n\",\n                          \"These should not be in a package tarball.\\n\")\n            }\n        }\n\n        if (subdirs != \"no\") {\n            Rcmd <- \"tools:::.check_package_subdirs(\\\".\\\")\\n\"\n            ## We don't run this in the C locale, as we only require\n            ## certain filenames to start with ASCII letters/digits, and not\n            ## to be entirely ASCII.\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"Please remove or rename the files.\\n\",\n                        \"See section 'Package subdirectories'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            }\n        }\n\n        ## Subdirectory 'data' without data sets?\n        if (dir.exists(\"data\") &&\n            !length(list_files_with_type(\"data\", \"data\"))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'data' contains no data sets.\\n\")\n       }\n        ## Subdirectory 'demo' without demos?\n\n        if (dir.exists(\"demo\")) {\n            demos <- list_files_with_type(\"demo\", \"demo\")\n            if(!length(demos)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Subdirectory 'demo' contains no demos.\\n\")\n            } else {\n                ## check for non-ASCII code in each demo\n                bad <- character()\n                for(d in demos) {\n                    x <- readLines(d, warn = FALSE)\n                    asc <- iconv(x, \"latin1\", \"ASCII\")\n                    ind <- is.na(asc) | asc != x\n                    if (any(ind)) bad <- c(bad, basename(d))\n                }\n                if (length(bad)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Demos with non-ASCII characters:\")\n                    if(length(bad) > 1L)\n                        printLog0(Log, \"\\n\",\n                                  .format_lines_with_indent(bad), \"\\n\")\n                    else printLog0(Log, \"  \", bad, \"\\n\")\n                    wrapLog(\"Portable packages must use only ASCII\",\n                            \"characters in their demos.\\n\",\n                            \"Use \\\\uxxxx escapes for other characters.\\n\")\n                    demos <- demos[basename(demos) %notin% bad]\n                }\n                ## check we can parse each demo.\n                bad <- character()\n                for(d in demos)\n                    tryCatch(parse(file = d),\n                             error = function(e) bad <<- c(bad, basename(d)))\n                if (length(bad)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Demos which do not contain valid R code:\")\n                    if(length(bad) > 1L)\n                        printLog0(Log, \"\\n\",\n                                  .format_lines_with_indent(bad), \"\\n\")\n                    else printLog0(Log, \"  \", bad, \"\\n\")\n               }\n            }\n        }\n\n        ## Subdirectory 'exec' without files?\n        if (dir.exists(\"exec\") && !length(dir(\"exec\"))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'exec' contains no files.\\n\")\n        }\n\n        ## Subdirectory 'inst' without files?\n        if (dir.exists(\"inst\") && !length(dir(\"inst\", recursive = TRUE))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'inst' contains no files.\\n\")\n        }\n\n        ## Subdirectory 'src' without sources?\n        if (dir.exists(\"src\")) {\n            ## <NOTE>\n            ## If there is a Makefile (or a Makefile.win), we cannot assume\n            ## that source files have the predefined extensions.\n            ## </NOTE>\n            if (!any(file.exists(file.path(\"src\",\n                                           c(\"Makefile\", \"Makefile.win\",\n                                             \"install.libs.R\"))))) {\n                if (!length(dir(\"src\", pattern = \"\\\\.([cfmM]|cc|cpp|f90|f95|mm)\"))) {\n                    if (!any) warningLog(Log)\n                    printLog(Log, \"Subdirectory 'src' contains no source files.\\n\")\n                    any <- TRUE\n                }\n            }\n        }\n\n        ## Do subdirectories of 'inst' interfere with R package system\n        ## subdirectories?\n        if (dir.exists(\"inst\")) {\n            ## These include pre-2.10.0 ones\n            R_system_subdirs <-\n                c(\"Meta\", \"R\", \"data\", \"demo\", \"exec\", \"libs\",\n                  \"man\", \"help\", \"html\", \"latex\", \"R-ex\", \"build\")\n            allfiles <- dir(\"inst\", full.names = TRUE)\n            alldirs <- allfiles[dir.exists(allfiles)]\n            suspect <- basename(alldirs) %in% R_system_subdirs\n            if (any(suspect)) {\n                ## check they are non-empty\n                suspect <- alldirs[suspect]\n                suspect <- suspect[sapply(suspect, function(x) {\n                    length(dir(x, all.files = TRUE)) > 2L\n                })]\n                if (length(suspect)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    wrapLog(\"Found the following non-empty\",\n                            \"subdirectories of 'inst' also\",\n                            \"used by R:\\n\")\n                    printLog0(Log, .format_lines_with_indent(suspect), \"\\n\")\n                    wrapLog(\"It is recommended not to interfere\",\n                            \"with package subdirectories used by R.\\n\")\n                }\n            }\n        }\n\n        ## Valid NEWS.Rd?\n        nfile <- file.path(\"inst\", \"NEWS.Rd\")\n        if(file.exists(nfile)) {\n            ## Catch all warning and error messages.\n            ## We use the same construction in at least another place,\n            ## so maybe factor out a common utility function\n            ##   .try_catch_all_warnings_and_errors\n            ## eventually.\n            ## For testing package NEWS.Rd files, we really need a real\n            ## QC check function eventually ...\n            .warnings <- NULL\n            .error <- NULL\n            withCallingHandlers(tryCatch(.build_news_db_from_package_NEWS_Rd(nfile),\n                                         error = function(e)\n                                         .error <<- conditionMessage(e)),\n                                warning = function(e) {\n                                    .warnings <<- c(.warnings,\n                                                    conditionMessage(e))\n                                    invokeRestart(\"muffleWarning\")\n                                })\n            msg <- c(.warnings, .error)\n            if(length(msg)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Problems with news in 'inst/NEWS.Rd':\\n\")\n                printLog0(Log,\n                          paste0(\"  \",\n                                 unlist(strsplit(msg, \"\\n\", fixed = TRUE)),\n                                 collapse = \"\\n\"),\n                          \"\\n\")\n            }\n        }\n\n        ## Valid CITATION metadata?\n        if (file.exists(file.path(\"inst\", \"CITATION\"))) {\n            Rcmd <- if(do_install)\n                sprintf(\"tools:::.check_citation(\\\"inst/CITATION\\\", \\\"%s\\\")\\n\",\n                        file.path(if(is_base_pkg) .Library else libdir,\n                                  pkgname))\n            else\n                \"tools:::.check_citation(\\\"inst/CITATION\\\")\\n\"\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=utils\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"Invalid citation information in 'inst/CITATION':\\n\")\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            }\n        }\n\n        ## CITATION files in non-standard places?\n        ## Common problems: rather than inst/CITATION, have\n        ##   CITATION\n        ##   CITATION.txt\n        ##   inst/doc/CITATION\n        ## Of course, everything in inst is justifiable, so only give a\n        ## note for now.\n        files <- dir(\".\", pattern = \"^CITATION.*\", recursive = TRUE)\n        files <- files[file_path_sans_ext(basename(files)) == \"CITATION\" &\n                       files != file.path(\"inst\", \"CITATION\")]\n        if(length(files)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            msg <- ngettext(length(files),\n                            \"Found the following CITATION file in a non-standard place:\\n\",\n                            \"Found the following CITATION files in a non-standard place:\\n\", domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(files), \"\\n\")\n            wrapLog(\"Most likely 'inst/CITATION' should be used instead.\\n\")\n        }\n\n        if(!any) resultLog(Log, \"OK\")\n    }\n\n    check_non_ASCII <- function()\n    {\n        checkingLog(Log, \"R files for non-ASCII characters\")\n        out <- R_runR0(\"tools:::.check_package_ASCII_code('.')\",\n                       R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            warningLog(Log)\n            msg <- ngettext(length(out),\n                            \"Found the following file with non-ASCII characters:\\n\",\n                            \"Found the following files with non-ASCII characters:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            wrapLog(\"Portable packages must use only ASCII\",\n                    \"characters in their R code,\\n\",\n                    \"except perhaps in comments.\\n\",\n                    \"Use \\\\uxxxx escapes for other characters.\\n\")\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"R files for syntax errors\")\n        Rcmd  <- \"options(warn=1);tools:::.check_package_code_syntax(\\\"R\\\")\"\n        out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (any(startsWith(out, \"Error\"))) {\n            errorLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n\t    maybe_exit(1L)\n        } else if (length(out)) {\n            warningLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_R_code <- function()\n    {\n        ## if (!is_base_pkg) {\n            checkingLog(Log, \"dependencies in R code\")\n            if (do_install) {\n                Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                              sprintf(\"tools:::.check_packages_used(package = \\\"%s\\\")\\n\", pkgname))\n\n                out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n                if (length(out)) {\n                    if(any(grepl(\"(not declared from|Including base/recommended)\", out))) warningLog(Log)\n                    else noteLog(Log)\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    ## wrapLog(msg_DESCRIPTION)\n                } else resultLog(Log, \"OK\")\n            } else {\n                ## this needs to read the package code, and will fail on\n                ## syntax errors such as non-ASCII code.\n                Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                              sprintf(\"tools:::.check_packages_used(dir = \\\"%s\\\")\\n\", pkgdir))\n\n                out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n                if (length(out)) {\n                    if(any(grepl(\"not declared from\", out))) warningLog(Log)\n                    else noteLog(Log)\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    ## wrapLog(msg_DESCRIPTION)\n                } else resultLog(Log, \"OK\")\n            }\n        ## }\n\n        ## Check whether methods have all arguments of the corresponding\n        ## generic.\n        checkingLog(Log, \"S3 generic/method consistency\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      \"options(expressions=1000)\\n\",\n                      if (do_install)\n                      sprintf(\"tools::checkS3methods(package = \\\"%s\\\")\\n\", pkgname)\n                      else\n                      sprintf(\"tools::checkS3methods(dir = \\\"%s\\\")\\n\", pkgdir))\n        out <- R_runR2(Rcmd)\n        if (length(out)) {\n            pos <- grep(\"^Found the following apparent S3 methods\", out)\n            if(!length(pos)) {\n                out1 <- out\n                out2 <- character()\n            } else {\n                pos <- pos[1L]\n                out1 <- out[seq_len(pos - 1L)]\n                out2 <- out[seq.int(pos, length(out))]\n            }\n            if(length(out1)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out1, \"\"), collapse = \"\\n\"))\n                wrapLog(\"See section 'Generic functions and methods'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            } else\n                noteLog(Log)\n            if(length(out2)) {\n                printLog0(Log,\n                          paste(c(if(length(out1)) \"\", out2, \"\"),\n                                collapse = \"\\n\"))\n                wrapLog(\"See section 'Registering S3 methods'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            }\n        } else resultLog(Log, \"OK\")\n\n        ## Check whether replacement functions have their final argument\n        ## named 'value'.\n        checkingLog(Log, \"replacement functions\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      if (do_install)\n                      sprintf(\"tools::checkReplaceFuns(package = \\\"%s\\\")\\n\", pkgname)\n                      else\n                      sprintf(\"tools::checkReplaceFuns(dir = \\\"%s\\\")\\n\", pkgdir))\n        out <- R_runR2(Rcmd)\n        if (length(out)) {\n            ## <NOTE>\n            ## We really want to stop if we find offending replacement\n            ## functions.  But we cannot use error() because output may\n            ## contain warnings ...\n            warningLog(Log)\n            ## </NOTE>\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"The argument of a replacement function\",\n                    \"which corresponds to the right hand side\",\n                    \"must be named 'value'.\\n\")\n        } else resultLog(Log, \"OK\")\n\n        ## Check foreign function calls.\n        ## The neverending story ...\n        ## For the time being, allow to turn this off by setting the environment\n        ## variable _R_CHECK_FF_CALLS_ to an empty value.\n        if (nzchar(R_check_FF)) {\n            registration <-\n                identical(R_check_FF, \"registration\") && install != \"fake\"\n            checkingLog(Log, \"foreign function calls\")\n            DUP <- R_check_FF_DUP\n            if(as_cran) {\n                Sys.setenv(\"_R_CHECK_FF_AS_CRAN_\" = \"TRUE\")\n                DUP <- TRUE\n            }\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::checkFF(package = \\\"%s\\\", registration = %s, check_DUP = %s)\\n\",\n                                  pkgname, registration, DUP)\n                          else\n                          sprintf(\"tools::checkFF(dir = \\\"%s\\\", registration = %s, check_DUP = %s)\\n\",\n                                  pkgdir, \"FALSE\", DUP))\n            out <- R_runR2(Rcmd)\n            Sys.unsetenv(\"_R_CHECK_FF_AS_CRAN_\")\n            if (length(out)) {\n                if(any(grepl(\"^Foreign function calls? with(out| empty)\", out)) ||\n                   (!is_base_pkg && any(grepl(\"to a base package:\", out))) ||\n                   any(grepl(\"^Undeclared packages? in\", out)) ||\n                   any(grepl(\"parameter[s]*, expected \", out))\n                   ) warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                if(!is_base_pkg && any(grepl(\"to a base package:\", out)))\n                    wrapLog(\"Packages should not make\",\n                            \".C/.Call/.External/.Fortran\",\n                            \"calls to a base package.\",\n                            \"They are not part of the API,\",\n                            \"for use only by R itself\",\n                            \"and subject to change without notice.\")\n                else if(any(grepl(\"with DUP:\", out)))\n                    wrapLog(\"DUP is no longer supported and will be ignored.\")\n                else\n                    wrapLog(\"See chapter 'System and foreign language interfaces' in the 'Writing R Extensions' manual.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n    }\n\n    check_R_files <- function(is_rec_pkg)\n    {\n        checkingLog(Log, \"R code for possible problems\")\n        t1 <- proc.time()\n        if (!is_base_pkg) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_shlib(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                errorLog(Log)\n                wrapLog(\"Incorrect (un)loading of package\",\n                        \"shared object.\\n\")\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"The system-specific extension for\",\n                        \"shared objects must not be added.\\n\",\n                        \"See ?library.dynam.\\n\")\n\t\tmaybe_exit(1L)\n            }\n        }\n\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_package_code_startup_functions(dir = \\\"%s\\\")\\n\",\n                              pkgdir))\n        out1 <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_package_code_unload_functions(dir = \\\"%s\\\")\\n\",\n                              pkgdir))\n        out1a <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        out1 <- if (length(out1) && length(out1a)) c(out1, \"\", out1a)\n                else c(out1, out1a)\n\n        out2 <- out3 <- out4 <- out5 <- out6 <- out7 <- out8 <- NULL\n\n        if (!is_base_pkg && R_check_unsafe_calls) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_tampers(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out2 <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        }\n\n        if (R_check_use_codetools && do_install) {\n            Rcmd <-\n                paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_code_usage_in_package(package = \\\"%s\\\")\\n\", pkgname))\n            if(config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_USAGE_WITH_ONLY_BASE_ATTACHED_\",\n                                                \"true\"))) {\n                out3 <-  R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n                if(length(pos <-\n                          grep(\"^Undefined global functions or variables:\",\n                               out3))) {\n                    Rcmd <-\n                        sprintf(\"writeLines(strwrap(tools:::imports_for_undefined_globals(\\\"%s\\\"), exdent = 11))\\n\",\n                                paste(utils::tail(out3, -pos),\n                                      collapse = \" \"))\n                    miss <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n                    ## base has no NAMESPACE\n                    if(length(miss) && pkgname != \"base\") {\n                        msg3 <- if(length(grep(\"^importFrom\\\\(\\\"methods\\\"\",\n                                               miss))) {\n                            strwrap(\"to your NAMESPACE file (and ensure that your DESCRIPTION Imports field contains 'methods').\")\n                        } else \"to your NAMESPACE file.\"\n                        out3 <- c(out3,\n                                  c(\"Consider adding\",\n                                    paste0(\"  \", miss),\n                                    msg3))\n                    }\n                }\n            } else\n                out3 <-  R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        if(!is_base_pkg && R_check_use_codetools && R_check_dot_internal) {\n            details <- pkgname != \"relax\" # has .Internal in a 10,000 line fun\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                              sprintf(\"tools:::.check_dotInternal(package = \\\"%s\\\",details=%s)\\n\", pkgname, details)\n                          else\n                              sprintf(\"tools:::.check_dotInternal(dir = \\\"%s\\\",details=%s)\\n\", pkgdir, details))\n            out4 <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n            ## Hmisc, gooJSON, quantmod give spurious output\n            if (!any(grepl(\"^Found.* .Internal call\", out4))) out4 <- NULL\n        }\n\n        if(!is_base_pkg && R_check_code_assign_to_globalenv) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_assign_to_globalenv(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out5 <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        if(!is_base_pkg && R_check_code_attach) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_attach(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out6 <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n        if(!is_base_pkg && R_check_code_data_into_globalenv) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_data_into_globalenv(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out7 <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        ## Use of deprecated, defunct and platform-specific devices?\n        if(!is_base_pkg && R_check_use_codetools && R_check_depr_def) {\n            win <- !is.na(OS_type) && OS_type == \"windows\"\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                              sprintf(\"tools:::.check_depdef(package = \\\"%s\\\", WINDOWS = %s)\\n\", pkgname, win)\n                          else\n                              sprintf(\"tools:::.check_depdef(dir = \\\"%s\\\", WINDOWS = %s)\\n\", pkgdir, win))\n            out8 <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n        }\n        t2 <- proc.time()\n        print_time(t1, t2, Log)\n\n        if (length(out1) || length(out2) || length(out3) ||\n            length(out4) || length(out5) || length(out6) ||\n            length(out7) || length(out8)) {\n            ini <- character()\n            if(length(out4) ||\n               length(grep(\"^Found the defunct/removed function\", out8)))\n                warningLog(Log) else noteLog(Log)\n            if (length(out4)) {\n                first <- grep(\"^Found.* .Internal call\", out4)[1L]\n                if(first > 1L) out4 <- out4[-seq_len(first-1)]\n                printLog0(Log, paste(c(ini, out4, \"\", \"\"), collapse = \"\\n\"))\n                wrapLog(c(\"Packages should not call .Internal():\",\n                          \"it is not part of the API,\",\n                          \"for use only by R itself\",\n                          \"and subject to change without notice.\"))\n                ini <- \"\"\n            }\n            if (length(out8)) {\n                printLog0(Log, paste(c(ini, out8, \"\"), collapse = \"\\n\"))\n                if(length(grep(\"^Found the defunct/removed function\", out8)))\n                    ini <- \"\"\n            }\n            ## All remaining checks give notes and not warnings.\n            if(length(ini))\n                ini <- c(\"\",\n                         \"In addition to the above warning(s), found the following notes:\",\n                         \"\")\n\n            if (length(out1)) {\n                printLog0(Log, paste(c(ini, out1, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out2)) {\n                printLog0(Log,\n                          paste(c(ini,\n                                  \"Found the following possibly unsafe calls:\",\n                                  out2, \"\"),\n                                collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out3)) {\n                printLog0(Log, paste(c(ini, out3, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out5)) {\n                printLog0(Log, paste(c(ini, out5, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out6)) {\n                printLog0(Log, paste(c(ini, out6, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n                wrapLog(gettextf(\"See section %s in '%s'.\",\n                                 sQuote(\"Good practice\"), \"?attach\"))\n           }\n            if (length(out7)) {\n                printLog0(Log, paste(c(ini, out7, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n                wrapLog(gettextf(\"See section %s in '%s'.\",\n                                 sQuote(\"Good practice\"), \"?data\"))\n            }\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_Rd_files <- function(haveR)\n    {\n        msg_writing_Rd <-\n            c(\"See chapter 'Writing R documentation files' in the 'Writing R Extensions' manual.\\n\")\n\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"Rd files\")\n            minlevel <- Sys.getenv(\"_R_CHECK_RD_CHECKRD_MINLEVEL_\", \"-1\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_parseRd('.', minlevel=%s)\\n\", minlevel))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if(length(grep(\"^prepare.*Dropping empty section\", out,\n                               invert = TRUE)))\n                    warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n\n            checkingLog(Log, \"Rd metadata\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_metadata(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_metadata(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check Rd line widths.\n        if(dir.exists(\"man\") && R_check_Rd_line_widths) {\n            checkingLog(Log, \"Rd line widths\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if(do_install)\n                          sprintf(\"tools:::.check_Rd_line_widths(\\\"%s\\\", installed = TRUE)\\n\",\n                                  file.path(if(is_base_pkg) .Library else libdir,\n                                            pkgname))\n                          else\n                          sprintf(\"tools:::.check_Rd_line_widths(\\\"%s\\\")\\n\",\n                                  pkgdir))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"These lines will be truncated in the PDF manual.\\n\")\n\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check cross-references in R documentation files.\n\n        ## <NOTE>\n        ## Installing a package warns about missing links (and hence R CMD\n        ## check knows about this too provided an install log is used).\n        ## However, under Windows the install-time check verifies the links\n        ## against what is available in the default library, which might be\n        ## considerably more than what can be assumed to be available.\n        ##\n        ## The formulations in section \"Cross-references\" of R-exts are not\n        ## quite clear about this, but CRAN policy has for a long time\n        ## enforced anchoring links to targets (aliases) from non-base\n        ## packages.\n        ## </NOTE>\n\n        if (dir.exists(\"man\") && R_check_Rd_xrefs) {\n            checkingLog(Log, \"Rd cross-references\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_xrefs(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_xrefs(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if (!all(grepl(\"Package[s]? unavailable to check\", out)))\n                    warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for missing documentation entries.\n        if (!extra_arch && (haveR || dir.exists(\"data\"))) {\n            checkingLog(Log, \"for missing documentation entries\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::undoc(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools::undoc(dir = \\\"%s\\\")\\n\", pkgdir))\n            ## This is needed to pick up undocumented S4 classes.\n            ## even for packages which only import methods.\n            ## But as that check needs to run get() on all the lazy-loaded\n            ## promises, avoid if possible.\n            ## desc exists in the body of this function.\n            use_methods <- if(pkgname == \"methods\") TRUE else {\n                pi <- .split_description(desc)\n                \"methods\" %in% c(names(pi$Depends), names(pi$Imports))\n            }\n            out <- if (use_methods) {\n                env <- if(WINDOWS) \"R_DEFAULT_PACKAGES=utils,grDevices,graphics,stats,methods\" else \"R_DEFAULT_PACKAGES='utils,grDevices,graphics,stats,methods'\"\n                R_runR2(Rcmd, env = env)\n            } else R_runR2(Rcmd)\n            ## Grr, get() in undoc can change the search path\n            ## Current example is TeachingDemos\n            out <- filtergrep(\"^Loading required package:\", out)\n            err <- grep(\"^Error\", out)\n            if (length(err)) {\n                errorLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n\t\tmaybe_exit(1L)\n            } else if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"All user-level objects\",\n                        \"in a package\",\n                        if (any(startsWith(out, \"Undocumented S4\")))\n                        \"(including S4 classes and methods)\",\n                        \"should have documentation entries.\\n\")\n                wrapLog(msg_writing_Rd)\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for code/documentation mismatches.\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"for code/documentation mismatches\")\n            if (!do_codoc) resultLog(Log, \"SKIPPED\")\n            else {\n                any <- FALSE\n                ## Check for code/documentation mismatches in functions.\n                if (haveR) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  if (do_install)\n                                  sprintf(\"tools::codoc(package = \\\"%s\\\")\\n\", pkgname)\n                                  else\n                                  sprintf(\"tools::codoc(dir = \\\"%s\\\")\\n\", pkgdir))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        any <- TRUE\n                        warningLog(Log)\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                ## Check for code/documentation mismatches in data sets.\n                if (do_install) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  sprintf(\"tools::codocData(package = \\\"%s\\\")\\n\", pkgname))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                ## Check for code/documentation mismatches in S4 classes.\n                if (do_install && haveR) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  sprintf(\"tools::codocClasses(package = \\\"%s\\\")\\n\", pkgname))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                if (!any) resultLog(Log, \"OK\")\n            }\n        }\n\n        ## Check Rd files, for consistency of \\usage with \\arguments (are\n        ## all arguments shown in \\usage documented in \\arguments?) and\n        ## aliases (do all functions shown in \\usage have an alias?)\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"Rd \\\\usage sections\")\n\n            msg_doc_files <-\n                c(\"Functions with \\\\usage entries\",\n                  \"need to have the appropriate \\\\alias entries,\",\n                  \"and all their arguments documented.\\n\",\n                  \"The \\\\usage entries must correspond to syntactically\",\n                  \"valid R code.\\n\")\n            any <- FALSE\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::checkDocFiles(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools::checkDocFiles(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR2(Rcmd)\n            if (length(out)) {\n                any <- TRUE\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(msg_doc_files)\n                wrapLog(msg_writing_Rd)\n            }\n\n            if (R_check_Rd_style && haveR) {\n                msg_doc_style <-\n                    c(\"The \\\\usage entries for S3 methods should use\",\n                      \"the \\\\method markup and not their full name.\\n\")\n\n                Rcmd <- paste(\"options(warn=1)\\n\",\n                              if (do_install)\n                              sprintf(\"tools::checkDocStyle(package = \\\"%s\\\")\\n\", pkgname)\n                              else\n                              sprintf(\"tools::checkDocStyle(dir = \\\"%s\\\")\\n\", pkgdir))\n                out <- R_runR2(Rcmd)\n                if (length(out)) {\n                    if (!any) noteLog(Log)\n                    any <- TRUE\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    wrapLog(msg_doc_style)\n                    wrapLog(msg_writing_Rd)\n                }\n            }\n\n            if (!any) resultLog(Log, \"OK\")\n        }\n\n        ## Check Rd contents\n        if (dir.exists(\"man\") && R_check_Rd_contents && !extra_arch) {\n            checkingLog(Log, \"Rd contents\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_contents(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_contents(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check undeclared dependencies in examples (if any)\n        if (dir.exists(\"man\") && do_install && !extra_arch && !is_base_pkg) {\n            checkingLog(Log, \"for unstated dependencies in examples\")\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_examples(package = \\\"%s\\\")\\n\", pkgname))\n\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                # wrapLog(msg_DESCRIPTION)\n            } else resultLog(Log, \"OK\")\n        } ## FIXME, what if no install?\n    }\n\n    check_data <- function()\n    {\n        ## Check contents of 'data'\n        if (!is_base_pkg && dir.exists(\"data\")) {\n            checkingLog(Log, \"contents of 'data' directory\")\n            fi <- list.files(\"data\")\n            if (!any(grepl(\"\\\\.[Rr]$\", fi))) { # code files can do anything\n                dataFiles <- basename(list_files_with_type(\"data\", \"data\"))\n                odd <- fi %w/o% c(dataFiles, \"datalist\")\n                if (length(odd)) {\n                    warningLog(Log)\n                    msg <-\n                        c(sprintf(\"Files not of a type allowed in a %s directory:\\n\",\n                                  sQuote(\"data\")),\n                          paste0(.pretty_format(odd), \"\\n\"),\n                          sprintf(\"Please use e.g. %s for non-R data files\\n\",\n                                  sQuote(\"inst/extdata\")))\n                    printLog0(Log, msg)\n                } else resultLog(Log, \"OK\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for non-ASCII characters in 'data'\n        if (!is_base_pkg && R_check_ascii_data && dir.exists(\"data\")) {\n            checkingLog(Log, \"data for non-ASCII characters\")\n            out <- R_runR0(\"tools:::.check_package_datasets('.')\", R_opts2)\n            out <- filtergrep(\"Loading required package\", out)\n            out <- filtergrep(\"Warning: changing locked binding\", out, fixed = TRUE)\n           if (length(out)) {\n                bad <- grep(\"^Warning:\", out)\n                if (length(bad)) warningLog(Log) else noteLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for ASCII and uncompressed/unoptimized saves in 'data'\n        if (!is_base_pkg && R_check_compact_data && dir.exists(\"data\")) {\n            checkingLog(Log, \"data for ASCII and uncompressed saves\")\n            out <- R_runR0(\"tools:::.check_package_compact_datasets('.', TRUE)\",\n                           R_opts2)\n            out <- filtergrep(\"Warning: changing locked binding\", out, fixed = TRUE)\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for ASCII and uncompressed/unoptimized saves in 'sysdata':\n        ## no base package has this\n        if (R_check_compact_data && file.exists(file.path(\"R\", \"sysdata.rda\"))) {\n            checkingLog(Log, \"R/sysdata.rda\")\n            out <- R_runR0(\"tools:::.check_package_compact_sysdata('.', TRUE)\",\n                           R_opts2)\n            if (length(out)) {\n                bad <- grep(\"^Warning:\", out)\n                if (length(bad)) warningLog(Log) else noteLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n   }\n\n    check_doc_contents <- function()\n    {\n        ## Have already checked that inst/doc exists\n        doc_dir <- file.path(libdir, pkgname, \"doc\")\n        if (!dir.exists(doc_dir)) return()\n        checkingLog(Log, \"installed files from 'inst/doc'\")\n        ## special case common problems.\n        any <- FALSE\n        files <- dir(file.path(pkgdir, \"inst\", \"doc\"))\n        already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")\n        bad <- files[files %in% already]\n        if (length(bad)) {\n            noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files are already in R: \",\n                      paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please remove them from your package.\\n\")\n        }\n        files2 <- dir(file.path(pkgdir, \"inst\", \"doc\"), recursive = TRUE,\n                     pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)\n        ## Skip Rnews.sty and RJournal.sty for now\n        files2 <- files2[basename(files2) %notin%\n                         c(\"jss.cls\", \"jss.drv\", \"Rnews.sty\", \"RJournal.sty\")]\n        bad <- character()\n        for(f in files2) {\n            pat <- \"%% (This generated file may be distributed as long as the|original source files, as listed above, are part of the|same distribution.)\"\n            if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))\n               == 3L) bad <- c(bad, basename(f))\n        }\n        if (length(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files contain a license that requires\\n\",\n                      \"distribution of original sources:\\n\",\n                      \"  \", paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please ensure that you have complied with it.\\n\")\n        }\n\n        ## Now look for TeX leftovers (and soiltexture, Amelia ...).\n        bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",\n                     files, ignore.case = TRUE)\n        if (any(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files look like leftovers/mistakes:\\n\",\n                      paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        }\n\n        files <- dir(doc_dir)\n        files <- files %w/o% already\n        bad <- grepl(\"[.](tex|lyx|png|jpg|jpeg|gif|ico|bst|cls|sty|ps|eps|img)$\",\n                     files, ignore.case = TRUE)\n        bad <- bad | grepl(\"(Makefile|~$)\", files)\n        ## How about any pdf files which look like figures files from vignettes?\n        vigns <- pkgVignettes(dir = pkgdir)\n        if (!is.null(vigns) && length(vigns$docs)) {\n            vf <- vigns$names\n            pat <- paste(vf, collapse=\"|\")\n            pat <- paste0(\"^(\", pat, \")-[0-9]+[.]pdf\")\n            bad <- bad | grepl(pat, files)\n        }\n        bad <- bad | grepl(\"^fig.*[.]pdf$\", files)\n        badf <- files[bad]\n        dirs <- basename(list.dirs(doc_dir, recursive = FALSE))\n        badd <- dirs[dirs %in% c(\"auto\", \"Bilder\", \"fig\", \"figs\", \"figures\",\n                                 \"Figures\", \"img\", \"images\", \"JSSstyle\",\n                                 \"jssStyle\", \"screenshots2\", \"src\", \"tex\", \"tmp\")]\n        if (length(c(badf, badd))) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            if(length(badf))\n                printLog0(Log,\n                          \"The following files should probably not be installed:\\n\",\n                          paste(strwrap(paste(sQuote(badf), collapse = \", \"),\n                                        indent = 2, exdent = 2), collapse = \"\\n\"),\n                          \"\\n\")\n            if(length(badd))\n                printLog0(Log,\n                          \"The following directories should probably not be installed:\\n\",\n                          paste(strwrap(paste(sQuote(badd), collapse = \", \"),\n                                        indent = 2, exdent = 2), collapse = \"\\n\"),\n                          \"\\n\")\n            printLog0(Log, \"\\nConsider the use of a .Rinstignore file: see \",\n                      sQuote(\"Writing R Extensions\"), \",\\n\",\n                      \"or move the vignette sources from \",\n                      sQuote(\"inst/doc\"), \" to \", sQuote(\"vignettes\"), \".\\n\")\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_vign_contents <- function(ignore_vignettes = FALSE)\n    {\n        checkingLog(Log, \"files in 'vignettes'\")\n        if (ignore_vignettes) {\n            resultLog(Log, \"SKIPPED\")\n            return()\n        }\n        ## special case common problems.\n        any <- FALSE\n        pattern <- vignetteEngine(\"Sweave\")$pattern\n        vign_dir <- file.path(pkgdir, \"vignettes\")\n        sources <- setdiff(list.files(file.path(pkgdir, \"inst\", \"doc\"),\n                                      pattern = pattern),\n                           list.files(vign_dir, pattern = pattern))\n        if(length(sources)) {\n            warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Vignette sources in 'inst/doc' missing from the 'vignettes' directory:\",\n                    strwrap(paste(sQuote(sources), collapse = \", \"),\n                            indent = 2L, exdent = 4L),\n                     \"\")\n            printLog0(Log, paste(msg, collapse = \"\\n\"))\n        }\n\n\t## Did the vignettes get updated in inst/doc?\n\tinst_doc_files <- list.files(file.path(pkgdir, \"inst\", \"doc\"),\n\t\t\t\t     recursive = TRUE)\n\tvignette_files <- list.files(vign_dir, recursive = TRUE)\n\tif (!is_base_pkg && length(vignette_files)) {\n\t    if (!length(inst_doc_files)) {\n\t\tif (!any) warningLog(Log)\n\t\tany <- TRUE\n\t\tmsg <- c(\"Files in the 'vignettes' directory but no files in 'inst/doc':\",\n\t\t\t strwrap(paste(sQuote(vignette_files), collapse = \", \"),\n\t\t\t\t indent = 2L, exdent = 4L),\n\t\t\t \"\")\n\t\tprintLog0(Log, paste(msg, collapse = \"\\n\"))\n\t    } else {\n                ## allow for some imprecision in file times (in secs)\n                time_tol <- as.double(Sys.getenv(\"_R_CHECK_FILE_TIMES_TOL_\", 10))\n\t\tvignette_times <- file.mtime(file.path(vign_dir, vignette_files))\n\t\tinst_doc_times <- file.mtime(file.path(pkgdir, \"inst\", \"doc\", inst_doc_files))\n\t\tif (sum(!is.na(vignette_times)) && sum(!is.na(inst_doc_times)) &&\n                    max(vignette_times, na.rm = TRUE) > max(inst_doc_times, na.rm = TRUE) + time_tol) {\n\t\t    if (!any) warningLog(Log)\n\t\t    any <- TRUE\n\t\t    msg <- c(\"Files in the 'vignettes' directory newer than all files in 'inst/doc':\",\n\t\t\t     strwrap(paste(sQuote(vignette_files[!is.na(vignette_times) & vignette_times > max(inst_doc_times, na.rm = TRUE)]),\n\t\t\t\t\t   collapse = \", \"),\n\t\t\t\t     indent = 2L, exdent = 4L),\n\t\t\t     \"\")\n\t\t    keep <- is.na(vignette_times) |\n                        vignette_times <= max(inst_doc_times, na.rm = TRUE) + time_tol\n\t\t    vignette_files <- vignette_files[keep]\n\t\t    vignette_times <- vignette_times[keep]\n\t\t    printLog0(Log, paste(msg, collapse = \"\\n\"))\n\t\t}\n\t\tmatches <- match(vignette_files, inst_doc_files)\n\t\tnewer <- vignette_times > inst_doc_times[matches] + time_tol\n\t\tnewer <- !is.na(matches) & !is.na(newer) & newer\n\t\tif (any(newer)) {\n\t\t    if (!any) warningLog(Log)\n\t\t    any <- TRUE\n\t\t    msg <- c(\"Files in the 'vignettes' directory newer than same file in 'inst/doc':\",\n\t\t\t     strwrap(paste(sQuote(vignette_files[newer]),\n\t\t\t\t\t   collapse = \", \"),\n\t\t\t\t     indent = 2L, exdent = 4L),\n\t\t\t     \"\")\n\t\t    printLog0(Log, paste(msg, collapse = \"\\n\"))\n\t\t}\n\t    }\n\t}\n\n        files <- dir(file.path(pkgdir, \"vignettes\"))\n        if(length(files) &&\n           !length(dir(file.path(pkgdir, \"vignettes\"),\n                       pattern = pattern)) &&\n           is.na(desc[\"VignetteBuilder\"])) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"Package has no Sweave vignette sources and no VignetteBuilder field.\\n\")\n        }\n\n        vigns <- pkgVignettes(dir = pkgdir, check = TRUE)\n        if(length(msg <- vigns[[\"msg\"]])) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n        }\n\n        already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")\n        bad <- files[files %in% already]\n        if (length(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files are already in R: \",\n                      paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please remove them from your package.\\n\")\n        }\n        files2 <- dir(file.path(pkgdir, \"vignettes\"), recursive = TRUE,\n                     pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)\n        files2 <- files2[basename(files2) %notin%\n                         c(\"jss.cls\", \"jss.drv\", \"Rnews.sty\", \"RJournal.sty\")]\n        bad <- character()\n        for(f in files2) {\n            pat <- \"%% (This generated file may be distributed as long as the|original source files, as listed above, are part of the|same distribution.)\"\n            if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))\n               == 3L) bad <- c(bad, basename(f))\n        }\n        if (length(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files contain a license that requires\\n\",\n                      \"distribution of original sources:\\n\",\n                      \"  \", paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please ensure that you have complied with it.\\n\")\n        }\n\n        ## Now look for TeX leftovers (and soiltexture, Amelia ...).\n        bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",\n                     files, ignore.case = TRUE)\n        bad <- bad | (files %in% c(\"Rplots.ps\", \"Rplots.pdf\"))\n        if (any(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files look like leftovers/mistakes:\\n\",\n                      paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        }\n\n        ## Probable leftovers from knitr\n        dirs <- file.path(pkgdir, \"vignettes\", c(\"cache\", \"figure\"))\n        dirs <- basename(dirs[dir.exists(dirs)])\n        if(length(dirs)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      if(length(dirs)> 1L) \"The following directories look like leftovers from 'knitr':\\n\"\n                      else \"The following directory looks like a leftover from 'knitr':\\n\",\n                      paste(strwrap(paste(sQuote(dirs), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove from your package.\\n\")\n        }\n\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_doc_size <- function()\n    {\n        ## Have already checked that inst/doc exists and qpdf can be found\n        pdfs <- dir('inst/doc', pattern=\"\\\\.pdf\",\n                    recursive = TRUE, full.names = TRUE)\n        pdfs <- setdiff(pdfs, \"inst/doc/Rplots.pdf\")\n        if (length(pdfs)) {\n            checkingLog(Log, \"sizes of PDF files under 'inst/doc'\")\n            any <- FALSE\n            td <- tempfile('pdf')\n            dir.create(td)\n            file.copy(pdfs, td)\n            res <- compactPDF(td, gs_quality = \"none\") # use qpdf\n            res <- format(res, diff = 1e5)\n            if(length(res)) {\n                noteLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  'qpdf' made some significant size reductions:\\n\",\n                         paste(\"  \", res, collapse = \"\\n\"),\n                         \"\\n\",\n                         \"  consider running tools::compactPDF() on these files\\n\")\n            }\n            if (R_check_doc_sizes2) {\n                gs_cmd <- find_gs_cmd()\n                if (nzchar(gs_cmd)) {\n                    res <- compactPDF(td, gs_cmd = gs_cmd, gs_quality = \"ebook\")\n                    res <- format(res, diff = 2.56e5) # 250 KB for now\n                    if(length(res)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog(Log,\n                                 \"  'gs+qpdf' made some significant size reductions:\\n\",\n                                 paste(\"  \", res, collapse = \"\\n\"),\n                                 \"\\n\",\n                                 '  consider running tools::compactPDF(gs_quality = \"ebook\") on these files\\n')\n                    }\n                } else {\n                    if (!any) noteLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Unable to find GhostScript executable to run checks on size reduction\\n\")\n                }\n\n            }\n            if (!any) resultLog(Log, \"OK\")\n        }\n    }\n\n    check_src_dir <- function(desc)\n    {\n        ## Added in R 3.4.2: check line endings for shell scripts:\n        ## for Unix CRLF line endings are fatal but these are not used\n        ## on Windows and hence this is not detected.\n        ## Packages could have arbitrary scripts, so we could\n        ## extend this to look for scripts at top level or elsewhere.\n        scripts <- dir(\".\", pattern = \"^(configure|configure.in|configure.ac|cleanup)$\")\n        if(length(scripts)) {\n            checkingLog(Log, \"line endings in shell scripts\")\n            bad_files <- character()\n            for(f in scripts) {\n                contents <- readChar(f, file.size(f), useBytes = TRUE)\n                if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))\n                    bad_files <- c(bad_files, f)\n            }\n            if (length(bad_files)) {\n                warningLog(Log, \"Found the following shell script(s) with CR or CRLF line endings:\")\n                printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                printLog(Log, \"Non-Windows OSes require LF line endings.\\n\")\n            } else resultLog(Log, \"OK\")\n       }\n\n\n        ## Check C/C++/Fortran sources/headers for CRLF line endings.\n        ## <FIXME>\n        ## Does ISO C really require LF line endings?  (Reference?)\n        ## We know that some versions of Solaris cc and f77/f95\n        ## will not accept CRLF or CR line endings.\n        ## (Sun Studio 12 definitely objects to CR in both C and Fortran).\n        ## </FIXME>\n        if(dir.exists(\"src\")) {\n            checkingLog(Log, \"line endings in C/C++/Fortran sources/headers\")\n            ## pattern is \"([cfh]|cc|cpp)\"\n            files <- dir(\"src\", pattern = \"\\\\.([cfh]|cc|cpp)$\",\n                         full.names = TRUE, recursive = TRUE)\n            ## exclude dirs starting src/win, e.g for tiff\n            files <- filtergrep(\"^src/[Ww]in\", files)\n            bad_files <- character()\n            for(f in files) {\n                contents <- readChar(f, file.size(f), useBytes = TRUE)\n                if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))\n                    bad_files <- c(bad_files, f)\n            }\n            if (length(bad_files)) {\n                warningLog(Log, \"Found the following sources/headers with CR or CRLF line endings:\")\n                printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                printLog(Log, \"Some Unix compilers require LF line endings.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check src/Make* for LF line endings, as Sun make does not accept CRLF\n        ## .win files are not checked, as CR/CRLF work there\n        all_files <-\n            dir(\"src\",\n                pattern = \"^(Makevars|Makevars.in|Makefile|Makefile.in)$\",\n                full.names = TRUE, recursive = TRUE)\n        all_files <- c(all_files,\n                       dir(\".\", pattern = \"^Makefile$\",\n                           full.names = TRUE, recursive = TRUE))\n        all_files <- sub(\"^[.]/\", \"\", all_files)\n        all_files <- unique(sort(all_files))\n        if(length(all_files)) {\n            checkingLog(Log, \"line endings in Makefiles\")\n            bad_files <- noEOL<- character()\n            for(f in all_files) {\n                if (!file.exists(f)) next\n                contents <- readChar(f, file.size(f), useBytes = TRUE)\n                if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))\n                    bad_files <- c(bad_files, f)\n                if (!grepl(\"\\n$\", contents, useBytes = TRUE))\n                    noEOL <- c(noEOL, f)\n            }\n            if (length(bad_files)) {\n                warningLog(Log, \"Found the following Makefile(s) with CR or CRLF line endings:\")\n                printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                printLog(Log, \"Some Unix 'make' programs require LF line endings.\\n\")\n            } else if (length(noEOL)) {\n                noteLog(Log, \"Found the following Makefile(s) without a final LF:\")\n                printLog0(Log, .format_lines_with_indent(noEOL), \"\\n\")\n                printLog(Log, \"Some 'make' programs ignore lines not ending in LF.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n        ## Check src/Makevars[.in] compilation flags.\n        if (length(makevars)) {\n            checkingLog(Log, \"compilation flags in Makevars\")\n\n            Rcmd <- sprintf(\"tools:::.check_make_vars(\\\"src\\\", %s)\\n\",\n                            deparse(makevars))\n            out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if(any(grepl(\"^(Non-portable flags|Variables overriding)\", out)))\n                   warningLog(Log) else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n        ## Check GNUisms\n        if (length(all_files)) {\n            checkingLog(Log, \"for GNU extensions in Makefiles\")\n            bad_files <- character()\n            for(f in all_files) {\n                contents <- readLines(f, warn = FALSE)\n                contents <- filtergrep(\"^ *#\", contents)\n                ## Things like $(SUBDIRS:=.a)\n                contents <- filtergrep(\"[$][(].+:=.+[)]\", contents)\n                if (any(grepl(\"([+]=|:=|[$][(]wildcard|[$][(]shell|[$][(]eval|[$][(]call|[$][(]patsubst|^ifeq|^ifneq|^ifdef|^ifndef|^endif)\", contents)))\n                    bad_files <- c(bad_files, f)\n            }\n            SysReq <- desc[\"SystemRequirements\"]\n            if (length(bad_files)) {\n                if(!is.na(SysReq) && grepl(\"GNU [Mm]ake\", SysReq)) {\n                    noteLog(Log, \"GNU make is a SystemRequirements.\")\n                } else {\n                    warningLog(Log, \"Found the following file(s) containing GNU extensions:\")\n                    printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                    wrapLog(\"Portable Makefiles do not use GNU extensions\",\n                            \"such as +=, :=, $(shell), $(wildcard),\",\n                            \"ifeq ... endif.\",\n                            \"See section 'Writing portable packages'\",\n                            \"in the 'Writing R Extensions' manual.\\n\")\n                }\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## check src/Makevar*, src/Makefile* for correct use of BLAS_LIBS\n        ## FLIBS is not needed on Windows, at least currently (as it is\n        ## statically linked).\n        makefiles <- Sys.glob(file.path(\"src\",\n                                        c(\"Makevars\", \"Makevars.in\",\n                                          \"Makefile\", \"Makefile.win\")))\n        if(length(makefiles)) {\n            checkingLog(Log, \"for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS)\")\n            any <- FALSE\n            for (f in makefiles) {\n                lines <- readLines(f, warn = FALSE)\n                ## Combine lines ending in escaped newlines.\n                if(any(ind <- grepl(\"[\\\\]$\", lines, useBytes = TRUE))) {\n                    ## Eliminate escape.\n                    lines[ind] <-\n                        sub(\"[\\\\]$\", \"\", lines[ind], useBytes = TRUE)\n                    ## Determine ids of blocks that need to be joined.\n                    ind <- seq_along(ind) - c(0, cumsum(ind)[-length(ind)])\n                    ## And join.\n                    lines <- unlist(lapply(split(lines, ind), paste,\n                                           collapse = \" \"))\n                }\n                ## Truncate at first comment char\n                lines <- sub(\"#.*\", \"\", lines)\n                c1 <- grepl(\"^[[:space:]]*PKG_LIBS\", lines, useBytes = TRUE)\n                c2l <- grepl(\"\\\\$[{(]{0,1}LAPACK_LIBS\", lines, useBytes = TRUE)\n                c2b <- grepl(\"\\\\$[{(]{0,1}BLAS_LIBS\", lines, useBytes = TRUE)\n                c2lb <- grepl(\"\\\\$[{(]{0,1}LAPACK_LIBS.*\\\\$[{(]{0,1}BLAS_LIBS\",\n                              lines, useBytes = TRUE)\n                c2bf <- grepl(\"\\\\$[{(]{0,1}BLAS_LIBS.*\\\\$[{(]{0,1}FLIBS\",\n                              lines, useBytes = TRUE)\n                if (any(c1 & c2l & !c2lb)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log,\n                             \"  apparently using $(LAPACK_LIBS) without following $(BLAS_LIBS) in \",\n                             sQuote(f), \"\\n\")\n                }\n                if (any(c1 & c2b & !c2bf)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log,\n                             \"  apparently using $(BLAS_LIBS) without following $(FLIBS) in \",\n                             sQuote(f), \"\\n\")\n                }\n            }\n            if (!any) resultLog(Log, \"OK\")\n        }\n\n        ## Check include directives for use of R_HOME which may contain\n        ## spaces for which there is no portable way to quote/escape.\n        all_files <-\n            dir(\".\",\n                pattern = \"^(Makefile|Makefile.in|Makefile.win|makefile|GNUmakefile)$\",\n                recursive = TRUE)\n        all_files <- unique(sort(all_files))\n        if(length(all_files)) {\n            checkingLog(Log, \"include directives in Makefiles\")\n            bad_lines <-\n                lapply(all_files,\n                       function(f) {\n                           s <- readLines(f, warn = FALSE)\n                           grep(\"^include .*R_HOME\", s, value = TRUE)\n                       })\n            bad_files <- all_files[lengths(bad_lines) > 0L]\n            if(length(bad_files)) {\n                noteLog(Log,\n                        \"Found the following Makefile(s) with an include directive with a pathname using R_HOME:\")\n                printLog0(Log, .format_lines_with_indent(bad_files),\n                          \"\\n\")\n                msg <-\n                    c(\"Even though not recommended, variable R_HOME may contain spaces.\",\n                      \"Makefile directives use space as a separator and there is no portable\",\n                      \"way to quote/escape the space in Make rules and directives.  However,\",\n                      \"one can and should quote pathnames when passed from Makefile to the\",\n                      \"shell, and this can be done specifically when invoking Make recursively.\",\n                      \"It is therefore recommended to use the Make '-f' option to include files\",\n                      \"in directories specified using R_HOME.  This option can be specified\",\n                      \"multiple times to include multiple Makefiles.  Note that 'Makeconf' is\",\n                      \"included automatically into top-level makefile of a package.\",\n                      \"More information can be found in 'Writing R Extensions'.\")\n                printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n    }\n\n    check_src <- function() {\n        Check_pragmas <- Sys.getenv(\"_R_CHECK_PRAGMAS_\", \"FALSE\")\n        if(config_val_to_logical(Check_pragmas) &&\n           any(dir.exists(c(\"src\", \"inst/include\")))) {\n            checkingLog(Log, \"pragmas in C/C++ headers and code\")\n            ans <- .check_pragmas('.')\n            if(length(ans)) {\n                if(length(warn <- attr(ans, \"warn\")))\n                    {\n                        warningLog(Log)\n                        msg <- if(length(warn) == 1L)\n                            \"File which contains pragma(s) suppressing important diagnostics:\"\n                        else\n                            \"Files which contain pragma(s) suppressing important diagnostics:\"\n                        msg <- c(msg, .pretty_format(warn))\n                        rest <- setdiff(ans, warn)\n                        if(length(rest)) {\n                            msg <- c(msg, if(length(rest) == 1L)\n                                     \"File which contains pragma(s) suppressing diagnostics:\"\n                            else\n                                     \"Files which contain pragma(s) suppressing diagnostics:\")\n                            msg <- c(msg, .pretty_format(rest))\n                        }\n                   } else {\n                        noteLog(Log)\n                        msg <- if(length(ans) == 1L)\n                            \"File which contains pragma(s) suppressing diagnostics:\"\n                        else\n                            \"Files which contain pragma(s) suppressing diagnostics:\"\n                        msg <- c(msg, .pretty_format(ans))\n                    }\n                printLog0(Log, paste(c(msg,\"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        Check_flags <- Sys.getenv(\"_R_CHECK_COMPILATION_FLAGS_\", \"FALSE\")\n        if(config_val_to_logical(Check_flags)) {\n            instlog <- if (startsWith(install, \"check\"))\n                install_log_path\n            else\n                file.path(pkgoutdir, \"00install.out\")\n            if (file.exists(instlog) && dir.exists('src')) {\n                checkingLog(Log, \"compilation flags used\")\n                lines <- readLines(instlog, warn = FALSE)\n                poss <- grep(\" -W\", lines,  useBytes = TRUE, value = TRUE)\n                tokens <- unique(unlist(strsplit(poss, \" \", perl = TRUE,\n                                                 useBytes = TRUE)))\n                warns <- grep(\"^[-]W\", tokens,\n                              value = TRUE, perl = TRUE, useBytes = TRUE)\n                ## Not sure -Wextra and -Weverything are portable, though\n                ## -Werror is not compiler independent\n                ##   (as what is a warning is not)\n                ## -Wno-dev is from qt, not a compiler flag.\n                except <- Sys.getenv(\"_R_CHECK_COMPILATION_FLAGS_KNOWN_\", \"\")\n                except <- unlist(strsplit(except, \"\\\\s\", perl = TRUE))\n                warns <- setdiff(warns,\n                                 c(except, \"-Wall\", \"-Wextra\", \"-Weverything\",\n                                   \"-Wno-dev\"))\n                warns <- warns[!startsWith(warns, \"-Wl,\")] # linker flags\n                diags <- grep(\" -fno-diagnostics-show-option\", tokens,\n                              useBytes = TRUE, value = TRUE)\n                ## next set are about unsafe optimizations\n                opts <- grep(\"-f(fast-math|unsafe-math-optimizations|associative-math|reciprocal-math)\",\n                             tokens, useBytes = TRUE, value = TRUE)\n                warns <- c(warns, diags, opts)\n                if(any(grepl(\"^-Wno-\", warns)) || length(diags)) {\n                    warningLog(Log)\n                    msg <- c(\"Compilation used the following non-portable flag(s):\",\n                             .pretty_format(sort(warns)),\n                             \"including flag(s) suppressing warnings\")\n                    printLog0(Log, paste(c(msg,\"\"), collapse = \"\\n\"))\n                } else if(length(warns)) {\n                    warningLog(Log)  # might consider NOTE instead\n                    msg <- c(\"Compilation used the following non-portable flag(s):\",\n                             .pretty_format(sort(warns)))\n                    printLog0(Log, paste(c(msg,\"\"), collapse = \"\\n\"))\n                } else\n                    resultLog(Log, \"OK\")\n            }\n        }\n    }\n\n    check_sos <- function() {\n        checkingLog(Log, \"compiled code\")\n        ## from sotools.R\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::check_compiled_code(\\\"%s\\\")\",\n                              file.path(libdir, pkgname)))\n        out <- R_runR0(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if(length(out) == 1L && startsWith(out, \"Note:\")) {\n            ## This will be a note about symbols.rds not being available\n            if(!is_base_pkg) {\n                noteLog(Log)\n                printLog0(Log, c(out, \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        } else if(length(out)) {\n            ## If we have named objects then we have symbols.rds and\n            ## will not be picking up symbols just in system libraries.\n            haveObjs <- any(grepl(\"^ *Object\", out))\n            pat <- paste(\"possibly from\",\n                         sQuote(\"(abort|assert|exit|_exit|_Exit|stop)\"))\n            if(haveObjs && any(grepl(pat, out)) && pkgname %notin% \"parallel\")\n                ## need _exit in forked child\n                warningLog(Log)\n            else {\n                ## look for Fortran detritus\n                pat1 <- paste(\"possibly from\", sQuote(\"(open|close|rewind)\"))\n                pat2 <- paste(\"possibly from\", sQuote(\"(read|write)\"))\n                pat3 <- paste(\"possibly from\", sQuote(\"close\"))\n                pat4 <- paste(\"possibly from\", sQuote(\"open\"))\n                if(haveObjs &&\n                   (any(grepl(pat1, out)) && !any(grepl(pat2, out))) ||\n                   (any(grepl(pat3, out)) && !any(grepl(pat4, out))) ||\n                   (any(grepl(pat4, out)) && !any(grepl(pat3, out))))\n                    warningLog(Log)\n                else noteLog(Log)\n            }\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            nAPIs <- length(grep(\"Found non-API\", out))\n            nRS <- length(grep(\"Found no call\", out))\n            nBad <- length(grep(\", possibly from \", out))\n            msg <- if (nBad) {\n                if(haveObjs)\n                    c(\"Compiled code should not call entry points which\",\n                      \"might terminate R nor write to stdout/stderr instead of\",\n                      \"to the console, nor use Fortran I/O nor system RNGs.\\n\")\n                else\n                    c(\"Compiled code should not call entry points which\",\n                      \"might terminate R nor write to stdout/stderr instead of\",\n                      \"to the console, nor use Fortran I/O nor system RNGs.\",\n                      \"The detected symbols are linked\",\n                      \"into the code but might come from libraries\",\n                      \"and not actually be called.\\n\")\n            } else character()\n            if(nAPIs)\n                msg <- c(msg,\n                         \"Compiled code should not call non-API entry points in R.\\n\")\n            if(nRS)\n                msg <- c(msg,\n                         \"It is good practice to register native routines and to disable symbol search.\\n\")\n            wrapLog(\"\\n\", paste(msg, collapse = \" \"), \"\\n\",\n                    \"See 'Writing portable packages'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_loading <- function(arch = \"\")\n    {\n        checkingLog(Log, \"whether the package can be loaded\")\n        Rcmd <- sprintf(\"library(%s)\", pkgname)\n        opts <- if(nzchar(arch)) R_opts4 else R_opts2\n        env <- \"R_DEFAULT_PACKAGES=NULL\"\n        env1 <- if(nzchar(arch)) env0 else character()\n        out <- R_runR0(Rcmd, opts, env1, arch = arch)\n        if(length(st <- attr(out, \"status\"))) {\n            errorLog(Log)\n            wrapLog(\"Loading this package had a fatal error\",\n                    \"status code \", st,  \"\\n\")\n            if(length(out))\n                printLog0(Log,\n                          paste(c(\"Loading log:\", out, \"\"),\n                                collapse = \"\\n\"))\n            summaryLog(Log)\n            do_exit(1L)\n        }\n        if (any(startsWith(out, \"Error\"))) {\n            errorLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"\\nIt looks like this package\",\n                    \"has a loading problem: see the messages\",\n                    \"for details.\\n\")\n\t    maybe_exit(1L)\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"whether the package can be loaded with stated dependencies\")\n        out <- R_runR0(Rcmd, opts, c(env, env1), arch = arch)\n        if (any(startsWith(out, \"Error\")) || length(attr(out, \"status\"))) {\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"\\nIt looks like this package\",\n                    \"(or one of its dependent packages)\",\n                    \"has an unstated dependence on a standard\",\n                    \"package.  All dependencies must be\",\n                    \"declared in DESCRIPTION.\\n\")\n            wrapLog(msg_DESCRIPTION)\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"whether the package can be unloaded cleanly\")\n        Rcmd <- sprintf(\"suppressMessages(library(%s)); cat('\\n---- unloading\\n'); detach(\\\"package:%s\\\")\", pkgname, pkgname)\n        out <- R_runR0(Rcmd, opts, c(env, env1), arch = arch)\n        if (any(grepl(\"^(Error|\\\\.Last\\\\.lib failed)\", out)) ||\n            length(attr(out, \"status\"))) {\n            warningLog(Log)\n            ll <- grep(\"---- unloading\", out)\n            if(length(ll)) {\n                ll <- ll[length(ll)]\n                out <- out[ll:length(out)]\n            }\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n        } else resultLog(Log, \"OK\")\n\n        ## and if it has a namespace, that we can load/unload just\n        ## the namespace\n        if (file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n            checkingLog(Log, \"whether the namespace can be loaded with stated dependencies\")\n            Rcmd <-\n                sprintf(\"options(warn=1)\\ntools:::.load_namespace_rather_quietly(\\\"%s\\\")\",\n                        pkgname)\n            out <- R_runR0(Rcmd, opts, c(env, env1), arch = arch)\n            any <- FALSE\n            if (any(startsWith(out, \"Error\")) || length(attr(out, \"status\"))) {\n                warningLog(Log)\n                any <- TRUE\n            } else {\n\t\t## Drop tcltk warning if no DISPLAY variable\n\t\tif(pkgname == \"tcltk\")\n\t\t    out <- filtergrep(\"Warning: no DISPLAY variable so Tk is not available\",\n                                      out, fixed = TRUE)\n                ## Drop warnings about replacing previous imports unless\n                ## these were disabled for the installation check.\n                check_imports_flag <-\n                    Sys.getenv(\"_R_CHECK_REPLACING_IMPORTS_\", \"TRUE\")\n                if(config_val_to_logical(check_imports_flag))\n                    out <- filtergrep(\"Warning: replacing previous import\", out,\n                                      fixed = TRUE)\n                if(any(startsWith(out, \"Warning\"))) {\n                    noteLog(Log)\n                    any <- TRUE\n                }\n            }\n            if(any) {\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"\\nA namespace must be able to be loaded\",\n                        \"with just the base namespace loaded:\",\n                        \"otherwise if the namespace gets loaded by a\",\n                        \"saved object, the session will be unable\",\n                        \"to start.\\n\\n\",\n                        \"Probably some imports need to be declared\",\n                        \"in the NAMESPACE file.\\n\")\n            } else resultLog(Log, \"OK\")\n\n            checkingLog(Log,\n                        \"whether the namespace can be unloaded cleanly\")\n            Rcmd <- sprintf(\"invisible(suppressMessages(loadNamespace(\\\"%s\\\"))); cat('\\n---- unloading\\n'); unloadNamespace(\\\"%s\\\")\",\n                            pkgname, pkgname)\n            out <- if (is_base_pkg && pkgname != \"stats4\")\n                R_runR0(Rcmd, opts, \"R_DEFAULT_PACKAGES=NULL\", arch = arch)\n            else R_runR0(Rcmd, opts, env1)\n            if (any(grepl(\"^(Error|\\\\.onUnload failed)\", out)) ||\n                length(attr(out, \"status\"))) {\n                warningLog(Log)\n                ll <- grep(\"---- unloading\", out)\n                if(length(ll)) {\n                    ll <- ll[length(ll)]\n                    out <- out[ll:length(out)]\n                }\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## No point in this test if already installed in .Library\n        if (pkgname %notin% dir(.Library)) {\n            checkingLog(Log, \"loading without being on the library search path\")\n            Rcmd <- sprintf(\"library(%s, lib.loc = '%s')\", pkgname, libdir)\n            opts <- if(nzchar(arch)) R_opts4 else R_opts2\n            env <- setRlibs(pkgdir = pkgdir, libdir = libdir,\n                            self2 = FALSE, quote = TRUE)\n            if(nzchar(arch)) env <- c(env, \"R_DEFAULT_PACKAGES=NULL\")\n            out <- R_runR0(Rcmd, opts, env, arch = arch)\n            if (any(startsWith(out, \"Error\"))) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"\\nIt looks like this package\",\n                        \"has a loading problem when not on .libPaths:\",\n                        \"see the messages for details.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n        if(!extra_arch && !is_base_pkg) {\n            check_S3reg <-\n                Sys.getenv(\"_R_CHECK_OVERWRITE_REGISTERED_S3_METHODS_\", \"NA\")\n            check_S3reg <- if(check_S3reg == \"NA\") check_incoming else {\n                config_val_to_logical(check_S3reg)\n            }\n            if(check_S3reg) {\n                checkingLog(Log, \"use of S3 registration\")\n                Rcmd <- sprintf(\"suppressWarnings(suppressPackageStartupMessages(loadNamespace('%s', lib.loc = '%s')))\",\n                                pkgname, libdir)\n                opts <- if(nzchar(arch)) R_opts4 else R_opts2\n                env <- Sys.getenv(\"_R_LOAD_CHECK_OVERWRITE_S3_METHODS_\",\n                                  \"NA\")\n                env <- paste0(\"_R_LOAD_CHECK_OVERWRITE_S3_METHODS_=\",\n                              if(env == \"all\") env else pkgname)\n                ## <FIXME>\n                ## Oh dear.  R-ints says that if env var\n                ## '_R_CHECK_OVERWRITE_REGISTERED_S3_METHODS_' is set to\n                ## something true,\n                ##   report already registered S3 methods in\n                ##   base/recommended packages which are overwritten\n                ##   when this package's namespace is loaded.\n                ## As of 2017-12, to make this work as documented we\n                ## really need to load all base and recommended packages\n                ## which register S3 methods first, which takes *quite\n                ## some time*.  There really should be a better way ...\n                ## Running with\n                ##   R_DEFAULT_PACKAGES=MASS,Matrix,boot,class,cluster,grDevices,graphics,grid,lattice,mgcv,nlme,nnet,parallel,rpart,spatial,splines,stats,survival,tcltk,tools,utils\n                ## does not suppress package startup messages: so try to\n                ## load the relevant base and recommended package\n                ## namespaces quietly ...\n                Rcmd <-\n                    c(sprintf(\"suppressPackageStartupMessages(loadNamespace('%s', lib.loc = '%s'))\",\n                              ## Perhaps provide these sorted according\n                              ## to dependency?\n                              c(\"MASS\", \"Matrix\", \"boot\", \"class\",\n                                \"cluster\", \"grDevices\",  \"graphics\",\n                                \"grid\", \"lattice\", \"mgcv\", \"nlme\",\n                                \"nnet\", \"parallel\", \"rpart\", \"spatial\",\n                                \"splines\", \"stats\", \"survival\", \"tcltk\",\n                                \"tools\", \"utils\"),\n                              .Library),\n                      Rcmd)\n                env <- c(env, \"R_DEFAULT_PACKAGES=NULL\")\n                out <- R_runR0(Rcmd, opts, env, arch = arch)\n                ## </FIXME>\n                if (any(grepl(\"^Registered S3 method.*overwritten\", out))) {\n                    out <- filtergrep(\"^<environment: namespace:\", out)\n                    warningLog(Log)\n                    printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                } else resultLog(Log, \"OK\")\n            }\n        }\n    }\n\n    run_examples <- function()\n    {\n        run_one_arch <- function(exfile, exout, arch = \"\")\n        {\n            any <- FALSE\n            ## moved here to avoid WARNING + OK\n            if (nzchar(enc) && is_ascii) {\n                warningLog(Log,\n                           paste(\"checking a package with encoding \",\n                                 sQuote(e), \" in an ASCII locale\\n\"))\n                any <- TRUE\n            }\n            Ropts <- if (nzchar(arch)) R_opts3 else R_opts\n            if (use_valgrind) Ropts <- paste(Ropts, \"-d valgrind\")\n            t1 <- proc.time()\n            tlim <- get_timeout(Sys.getenv(\"_R_CHECK_EXAMPLES_ELAPSED_TIMEOUT_\",\n                                Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n            ## might be diff-ing results against tests/Examples later\n            ## so force LANGUAGE=en\n            status <- R_runR0(NULL, c(Ropts, enc),\n                              c(\"LANGUAGE=en\", \"_R_CHECK_INTERNALS2_=1\",\n                                if(nzchar(arch)) env0, jitstr, elibs),\n                              stdout = exout, stderr = exout,\n                              stdin = exfile, arch = arch, timeout = tlim)\n            t2 <- proc.time()\n            if (status) {\n                errorLog(Log, \"Running examples in \",\n                         sQuote(basename(exfile)),\n                         \" failed\")\n                ## Try to spot the offending example right away.\n                txt <- paste(readLines(exout, warn = FALSE),\n                             collapse = \"\\n\")\n                ## Look for the header section anchored by a\n                ## subsequent call to flush(): needs to be kept in\n                ## sync with the code in massageExamples (in\n                ## testing.R).  Should perhaps also be more\n                ## defensive about the prompt ...\n                chunks <- strsplit(txt,\n                                   \"> ### \\\\* [^\\n]+\\n> \\n> flush[^\\n]+\\n> \\n\", useBytes = TRUE)[[1L]]\n                                       if((ll <- length(chunks)) >= 2) {\n                                           printLog(Log,\n                                                    \"The error most likely occurred in:\\n\\n\")\n                                           printLog0(Log, chunks[ll], \"\\n\")\n                                       } else {\n                                           ## most likely error before the first example\n                                           ## so show all the output.\n                                           printLog(Log, \"The error occurred in:\\n\\n\")\n                                           printLog0(Log, txt, \"\\n\")\n                                       }\n                return(FALSE)\n            }\n\n            print_time(t1, t2, Log)\n            ## Look at the output from running the examples.  For\n            ## the time being, report warnings about use of\n            ## deprecated , as the next release will make\n            ## them defunct and hence using them an error.\n            bad <- FALSE\n            lines <- readLines(exout, warn = FALSE)\n            bad_lines <- grep(\"^Warning: .*is deprecated.$\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                bad <- TRUE\n                warningLog(Log, \"Found the following significant warnings:\\n\")\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"Deprecated functions may be defunct as\",\n                        \"soon as of the next release of R.\\n\",\n                        \"See ?Deprecated.\\n\")\n            }\n            bad_lines <- grep(\"^Warning.*screen devices should not be used in examples\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"dev.new() is the preferred way to open a new device,\",\n                        \"in the unlikely event one is needed.\")\n            }\n            bad_lines <- grep(\"^Warning: .*simultaneous processes spawned$\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"Note that CRAN packages must never use more than two\",\n                        \"cores simultaneously during their checks.\")\n            }\n            bad_lines <- grep(\"^Warning: working directory was changed to\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n            }\n            bad_lines <- grep(\"^Warning: items .* were removed from the search path\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n            }\n            any <- any || bad\n\n            if (!any && !(check_incoming && do_timings))\n                resultLog(Log, \"OK\")\n\n            if (do_timings) {\n                theta <-\n                    as.numeric(Sys.getenv(\"_R_CHECK_EXAMPLE_TIMING_THRESHOLD_\",\n                                          \"5\"))\n                tfile <- paste0(pkgname, \"-Ex.timings\")\n\t\ttimes <-\n                    utils::read.table(tfile, header = TRUE, row.names = 1L,\n                                      colClasses = c(\"character\", rep(\"numeric\", 3)))\n                o <- order(times[[1L]] + times[[2L]], decreasing = TRUE)\n                times <- times[o, ]\n\n                keep <- ((times[[1L]] + times[[2L]] > theta) |\n                         (times[[3L]] > theta))\n                if(any(keep)) {\n                    if(!any && check_incoming) {\n                        noteLog(Log)\n                        any <- TRUE\n                    }\n                    printLog(Log,\n                             sprintf(\"Examples with CPU or elapsed time > %gs\\n\",\n                                     theta))\n                    out <- utils::capture.output(format(times[keep, ]))\n                    printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                }\n\n                theta <-\n                    as.numeric(Sys.getenv(\"_R_CHECK_EXAMPLE_TIMING_CPU_TO_ELAPSED_THRESHOLD_\",\n                                          NA_character_))\n                if(!is.na(theta)) {\n                    keep <- ((times[[1L]] + times[[2L]]) >=\n                              pmax(theta * times[[3L]], 1))\n                    if(any(keep)) {\n                        if(!any && check_incoming) {\n                            noteLog(Log)\n                            any <- TRUE\n                        }\n                        printLog(Log,\n                                 sprintf(\"Examples with CPU time > %g times elapsed time\\n\",\n                                         theta))\n                        bad <- times[keep, ]\n                        ratio <- (bad[[1L]] + bad[[2L]]) / bad[[3L]]\n                        bad <- cbind(bad, ratio = round(ratio, 3L))\n                        bad <- bad[order(bad$ratio, decreasing = TRUE), ]\n                        out <- utils::capture.output(format(bad))\n                        printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                    }\n                }\n\n                if(!any && check_incoming)\n                    resultLog(Log, \"OK\")\n            }\n\n            ## Try to compare results from running the examples to\n            ## a saved previous version.\n            exsave <- file.path(pkgdir, test_dir, \"Examples\",\n                                paste0(pkgname, \"-Ex.Rout.save\"))\n            if (file.exists(exsave)) {\n                checkingLog(Log, \"differences from \",\n                            sQuote(basename(exout)),\n                            \" to \", sQuote(basename(exsave)))\n                cmd <- paste0(\"invisible(tools::Rdiff('\",\n                              exout, \"', '\", exsave, \"',TRUE,TRUE))\")\n                out <- R_runR0(cmd, R_opts2)\n                resultLog(Log, \"OK\")\n                if(length(out))\n                    printLog0(Log, paste(c(\"\", out, \"\"), collapse = \"\\n\"))\n            }\n\n            TRUE\n        }\n\n        checkingLog(Log, \"examples\")\n        if (!do_examples) resultLog(Log, \"SKIPPED\")\n        else {\n            pkgtopdir <- file.path(libdir, pkgname)\n            cmd <- sprintf('tools:::.createExdotR(\"%s\", \"%s\", silent = TRUE, use_gct = %s, addTiming = %s, commentDontrun = %s, commentDonttest = %s)',\n                           pkgname, pkgtopdir, use_gct, do_timings,\n                           !run_dontrun, !run_donttest)\n            Rout <- tempfile(\"Rout\")\n            ## any arch will do here\n            status <- R_runR0(cmd, R_opts2, \"LC_ALL=C\",\n                              stdout = Rout, stderr = Rout)\n            exfile <- paste0(pkgname, \"-Ex.R\")\n            if (status) {\n                errorLog(Log,\n                         paste(\"Running massageExamples to create\",\n                               sQuote(exfile), \"failed\"))\n                printLog0(Log,\n                          paste(readLines(Rout, warn = FALSE),\n                                collapse = \"\\n\"),\n                          \"\\n\")\n\t\tmaybe_exit(1L)\n            }\n            ## It ran, but did it create any examples?\n            if (file.exists(exfile)) {\n                enc <- if (!is.na(e <- desc[\"Encoding\"])) {\n                    paste0(\"--encoding=\", e)\n                } else \"\"\n                if (!this_multiarch) {\n                    exout <- paste0(pkgname, \"-Ex.Rout\")\n                    if(!run_one_arch(exfile, exout)) maybe_exit(1L)\n                } else {\n                    printLog(Log, \"\\n\")\n                    Log$stars <<-  \"**\"\n                    res <- TRUE\n                    for (arch in inst_archs) {\n                        printLog(Log, \"** running examples for arch \",\n                                 sQuote(arch), \" ...\")\n                        if (arch %in% R_check_skip_examples_arch) {\n                            resultLog(Log, \"SKIPPED\")\n                        } else {\n                            tdir <- paste0(\"examples_\", arch)\n                            dir.create(tdir)\n                            if (!dir.exists(tdir)) {\n                                errorLog(Log,\n                                         \"unable to create examples directory\")\n                                summaryLog(Log)\n                                do_exit(1L)\n                            }\n                            od <- setwd(tdir)\n                            exout <- paste0(pkgname, \"-Ex_\", arch, \".Rout\")\n                            res <- res & run_one_arch(file.path(\"..\", exfile),\n                                                      file.path(\"..\", exout),\n                                                      arch)\n                            setwd(od)\n                        }\n                    }\n                    Log$stars <<-  \"*\"\n                    if (!res) maybe_exit(1L)\n                }\n                cntFile <- paste0(exfile, \"-cnt\")\n                if (file.exists(cntFile)) {\n                    unlink(cntFile)\n                    if (as_cran)\n                        printLog(Log, \"** found \\\\donttest examples:\",\n                                 \" check also with --run-donttest\\n\")\n                }\n            } else {\n                resultLog(Log, \"NONE\")\n                no_examples <<- TRUE\n            }\n        }\n    }\n\n    run_tests <- function()\n    {\n        if (!extra_arch && !is_base_pkg) {\n            checkingLog(Log, \"for unstated dependencies in \", sQuote(test_dir))\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_tests(\\\"%s\\\", \\\"%s\\\")\\n\", pkgdir, test_dir))\n\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                # wrapLog(msg_DESCRIPTION)\n            } else resultLog(Log, \"OK\")\n        }\n\n        if (test_dir == \"tests\")\n\t    checkingLog(Log, \"tests\")\n\telse\n\t    checkingLog(Log, \"tests in \", sQuote(test_dir))\n\n        run_one_arch <- function(arch = \"\")\n        {\n            testsrcdir <- file.path(pkgdir, test_dir)\n            testdir <- file.path(pkgoutdir, \"tests\")\n            if(nzchar(arch)) testdir <- paste(testdir, arch, sep = \"_\")\n            if(!dir.exists(testdir)) dir.create(testdir, mode = \"0755\")\n            if(!dir.exists(testdir)) {\n                errorLog(Log,\n                         sprintf(\"unable to create %s\", sQuote(testdir)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            file.copy(Sys.glob(paste0(testsrcdir, \"/*\")),\n                      testdir, recursive = TRUE)\n            setwd(testdir)\n\t    logf <- gsub(\"\\\\\", \"/\", tempfile(), fixed=TRUE)\n\t    extra <- c(if(use_gct) \"use_gct = TRUE\",\n\t\t       if(use_valgrind) \"use_valgrind = TRUE\",\n\t\t       if(!stop_on_test_error) \"stop_on_error = FALSE\",\n\t\t       paste0('Log=\"', logf, '\"'))\n            ## might be diff-ing results against tests/*.R.out.save\n            ## so force LANGUAGE=en\n            cmd <- paste0(\"tools:::.runPackageTestsR(\",\n                          paste(extra, collapse = \", \"), \")\")\n            t1 <- proc.time()\n            tlim <- get_timeout(Sys.getenv(\"_R_CHECK_TESTS_ELAPSED_TIMEOUT_\",\n                                Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n            status <- R_runR0(cmd,\n                              if(nzchar(arch)) R_opts4 else R_opts2,\n                              env = c(\"LANGUAGE=en\",\n                                     \"_R_CHECK_INTERNALS2_=1\",\n                              if(nzchar(arch)) env0, jitstr, elibs_tests),\n                              stdout = \"\", stderr = \"\", arch = arch,\n                              timeout = tlim)\n            t2 <- proc.time()\n            if (status) {\n                print_time(t1, t2, Log)\n                errorLog(Log)\n                if (Log$con > 0L && file.exists(logf)) {\n                    ## write individual results only to 00check.log\n                    cat(readLines(logf, warn = FALSE),\n                        sep = \"\\n\", file = Log$con)\n                }\n                ## Don't just fail: try to log where the problem occurred.\n                ## First, find the test(s) which failed.\n                ## (Maybe there was an error without a failing test.)\n                bad_files <- dir(\".\", pattern=\"\\\\.Rout\\\\.fail$\")\n                if (length(bad_files)) {\n                    ## Read in output from the failed test(s)\n                    ## (As from R 3.4.0 there can be more than one\n                    ## with option --no-stop-on-test-error.)\n                    for(f in bad_files) {\n                        lines <- readLines(f, warn = FALSE)\n                        f <- file.path(test_dir, sub(\"out\\\\.fail$\", \"\", f))\n                        src_files <- dir(\".\", pattern = \"\\\\.[rR]$\")\n                        if (basename(f) %notin% src_files) {\n                            f <- sub(\"R$\", \"r\", f) # This assumes only one of foo.r and foo.R exists.\n                            if (basename(f) %notin% src_files)\n                                f <- sub(\"r$\", \"[rR]\", f) # Just in case the test script got deleted somehow, show the pattern.\n                        }\n                        keep <- as.integer(Sys.getenv(\"_R_CHECK_TESTS_NLINES_\",\n                                                      \"13\"))\n                        ## keep = 0 means keep all of it, but we will\n                        ## always omit the R preamble and start at the first\n                        ## line with an R prompt.\n                        ll <- length(lines)\n                        st <- grep(\"^>\", lines, useBytes = TRUE)\n                        if (length(st)) {\n                            lines <- lines[st[1L]:ll]\n                            ll <- length(lines)\n                        }\n                        if (keep > 0L)\n                            lines <- lines[max(1L, ll-keep-1L):ll]\n                        if (R_check_suppress_RandR_message)\n                            lines <- filtergrep('^Xlib: *extension \"RANDR\" missing on display',\n                                                lines, useBytes = TRUE)\n                        printLog(Log, sprintf(\"Running the tests in %s failed.\\n\",\n                                              sQuote(f)))\n                        printLog(Log, if(keep > 0L && keep < ll)\n                                 sprintf(\"Last %i lines of output:\\n\", keep)\n                                 else \"Complete output:\\n\")\n                        printLog0(Log, .format_lines_with_indent(lines), \"\\n\")\n                    }\n                }\n                return(FALSE)\n            } else {\n                print_time(t1, t2, Log)\n                resultLog(Log, \"OK\")\n                if (Log$con > 0L && file.exists(logf)) {\n                    ## write results only to 00check.log\n                    lines <- readLines(logf, warn = FALSE)\n                    cat(lines, sep=\"\\n\", file = Log$con)\n                    unlink(logf)\n                }\n            }\n            setwd(pkgoutdir)\n            TRUE\n        }\n        if (do_install && do_tests) {\n            if (!this_multiarch) {\n                res <- run_one_arch()\n            } else {\n                printLog(Log, \"\\n\")\n                res <- TRUE\n                for (arch in inst_archs)\n                    if (arch %notin% R_check_skip_tests_arch) {\n                        printLog(Log, \"** running tests for arch \",\n                                 sQuote(arch), \" ...\")\n                        res <- res & run_one_arch(arch)\n                    }\n            }\n            if (!res) maybe_exit(1L)\n        } else resultLog(Log, \"SKIPPED\")\n    }\n\n    run_vignettes <- function(desc)\n    {\n        theta <-\n            as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTE_TIMING_CPU_TO_ELAPSED_THRESHOLD_\",\n                                  NA_character_))\n\n        libpaths <- .libPaths()\n        .libPaths(c(libdir, libpaths))\n        vigns <- pkgVignettes(dir = pkgdir)\n        .libPaths(libpaths)\n        if (is.null(vigns) || !length(vigns$docs)) return()\n\n        if(do_install && !spec_install && !is_base_pkg && !extra_arch) {\n            ## fake installs don't install inst/doc\n            checkingLog(Log, \"for unstated dependencies in vignettes\")\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_vignettes(package = \\\"%s\\\")\\n\", pkgname))\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))\n        any <- FALSE\n        ## Do PDFs or HTML files exist for all package vignettes?\n        ## A base source package need not have PDFs to avoid\n        ## frequently-changing binary files in the SVN archive.\n        if (!is_base_pkg) {\n            dir <- file.path(pkgdir, \"inst\", \"doc\")\n            outputs <- character(length(vigns$docs))\n            for (i in seq_along(vigns$docs)) {\n                file <- vigns$docs[i]\n                name <- vigns$names[i]\n                engine <- vignetteEngine(vigns$engines[i])\n                outputs[i] <- tryCatch({\n                    find_vignette_product(name, what=\"weave\", final=TRUE, dir=dir, engine = engine)\n                }, error = function(ex) NA)\n            }\n            bad_vignettes <- vigns$docs[is.na(outputs)]\n            if (nb <- length(bad_vignettes)) {\n                any <- TRUE\n                warningLog(Log)\n                msg <- ngettext(nb,\n                                \"Package vignette without corresponding PDF/HTML:\\n\",\n                                \"Package vignettes without corresponding PDF/HTML:\\n\", domain = NA)\n                printLog0(Log, msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n\t    defaultEncoding <- .get_package_metadata(pkgdir)[\"Encoding\"]\n            encs <- vapply(vigns$docs, getVignetteEncoding, \"\", default = defaultEncoding)\n            bad_vignettes <- vigns$docs[encs == \"non-ASCII\"]\n            if(nb <- length(bad_vignettes)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(nb,\n                         \"Non-ASCII package vignette without specified encoding:\\n\",\n                         \"Non-ASCII package vignettes without specified encoding:\\n\", domain = NA)\n                printLog0(Log, \"  \", msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n        }\n\n# FIXME:  we should do this check in build, not here.  Currently not doing it at all.\n#        ## Do any of the .R files which will be generated\n#        ## exist in inst/doc?  If so the latter will be ignored,\n#        sources <-\n#            basename(list_files_with_exts(file.path(pkgdir, \"inst/doc\"), \"R\"))\n#        custom <- !is.na(desc[\"VignetteBuilder\"])\n#        if (length(sources) && !custom) {\n#            new_sources <- paste0(vigns$names, \".R\")\n#            dups <- sources[sources %in% new_sources]\n#            if(nb <- length(dups)) {\n#                if(!any) warningLog(Log)\n#                any <- TRUE\n#                msg <- ngettext(nb,\n#                                \"Unused file in 'inst/doc' which is pointless or misleading\",\n#                                \"Unused files in 'inst/doc' which are pointless or misleading\", domain = NA)\n#                printLog(Log, \"  \",\n#                         paste(msg,\n#                               \"  as they will be re-created from the vignettes:\", \"\",\n#                               sep = \"\\n\"))\n#                printLog(Log,\n#                         paste(c(paste(\"  \", dups), \"\", \"\"),\n#                               collapse = \"\\n\"))\n#            }\n#        }\n        ## avoid case-insensitive matching\n        if (\"makefile\" %in% dir(vigns$dir)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log,\n                     \"  Found 'inst/doc/makefile': should be 'Makefile' and will be ignored\\n\")\n        }\n        if (\"Makefile\" %in% dir(vigns$dir)) {\n            f <- file.path(vigns$dir, \"Makefile\")\n            lines <- readLines(f, warn = FALSE)\n            ## remove comment lines\n            lines <- filtergrep(\"^[[:space:]]*#\", lines)\n            if(any(grepl(\"[^/]R +CMD\", lines))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  Found 'R CMD' in Makefile: should be '\\\"$(R_HOME)/bin/R\\\" CMD'\\n\")\n            }\n            contents <- readChar(f, file.size(f), useBytes = TRUE)\n            if(any(grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found Makefile with CR or CRLF line endings:\\n\")\n                printLog(Log, \"some Unix 'make' programs require LF line endings.\\n\")\n           }\n            if(any(grepl(\"[^/]Rscript\", lines))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  Found 'Rscript' in Makefile: should be '\\\"$(R_HOME)/bin/Rscript\\\"'\\n\")\n            }\n        }\n\n        ## If the vignettes declare an encoding, are they actually in it?\n        ## (We don't check the .tex, though)\n        bad_vignettes <- character()\n        for (i in seq_along(vigns$docs)) {\n\t    v <- vigns$docs[i]\n            enc <- vigns$encodings[i]\n            if (enc %in% c(\"\", \"non-ASCII\", \"unknown\")) next\n            lines <- readLines(v, warn = FALSE) # some miss final NA\n            lines2 <- iconv(lines, enc, \"UTF-16LE\", toRaw = TRUE)\n            if(any(vapply(lines2, is.null, TRUE)))\n                bad_vignettes <- c(bad_vignettes, v)\n            if(nb <- length(bad_vignettes)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(nb,\n                                \"Package vignette which is not in its specified encoding:\\n\",\n                                \"Package vignettes which are not in their specified encoding:\\n\", domain = NA)\n                printLog0(Log, \"  \", msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n        }\n\n        if (!any) resultLog(Log, \"OK\")\n\n        if (do_install && do_vignettes) {\n            ## Can we run the code in the vignettes?\n            ## Should checking the vignettes assume the system default\n            ## packages, or just base?\n            ## FIXME: should we do this for multiple sub-archs?\n\n            ## Re-building the vignette outputs also runs the code, so\n            ## doing so as well creates no additional value unless the\n            ## results are compared against saved results (which could\n            ## perhaps also be integrated into buildVignettes().\n            ## Hence, when re-building, skip running the code when there\n            ## are no saved results.\n            ## Could make this controllable via some env var ...\n\n            build_vignettes <-\n                parse_description_field(desc, \"BuildVignettes\", TRUE)\n            if (!build_vignettes && as_cran) {\n                ## FOSS packages must be able to rebuild their vignettes\n                info <- analyze_license(desc[\"License\"])\n                build_vignettes <- info$is_verified\n            }\n            do_build_vignettes <- do_build_vignettes && build_vignettes\n            skip_run_maybe <-\n                R_check_vignettes_skip_run_maybe && do_build_vignettes\n\n            vigns <- pkgVignettes(dir = pkgdir)\n            savefiles <-\n                file.path(dirname(vigns$docs),\n                          paste0(vigns$names, \".Rout.save\"))\n            ran <- FALSE\n\n            if(!skip_run_maybe || any(file.exists(savefiles))) {\n                checkingLog(Log, \"running R code from vignettes\")\n                res <- character()\n                cat(\"\\n\")\n                def_enc <- desc[\"Encoding\"]\n                if( (is.na(def_enc))) def_enc <- \"\"\n                t1 <- proc.time()\n                iseq <- seq_along(savefiles)\n                if(skip_run_maybe)\n                    iseq <- iseq[file.exists(savefiles)]\n                for (i in iseq) {\n                    file <- vigns$docs[i]\n                    name <- vigns$names[i]\n                    enc <- vigns$encodings[i]\n                    cat(\"  \", sQuote(basename(file)),\n                        if(nzchar(enc)) paste(\"using\", sQuote(enc)),\n                        \"...\")\n                    Rcmd <- paste0(\"options(warn=1)\\ntools:::.run_one_vignette('\",\n                                   basename(file), \"', '\", vigns$dir, \"'\",\n                                   if (nzchar(enc))\n                                       paste0(\", encoding = '\", enc, \"'\"),\n                                   \", pkgdir='\", vigns$pkgdir, \"')\")\n                    outfile <- paste0(basename(file), \".log\")\n                    tlim <- get_timeout(Sys.getenv(\"_R_CHECK_ONE_VIGNETTE_ELAPSED_TIMEOUT_\",\n                                        Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n                    t1b <- proc.time()\n                    status <- R_runR0(Rcmd,\n                                      if (use_valgrind) paste(R_opts2, \"-d valgrind\") else R_opts2,\n                                      ## add timing as footer, as BATCH does\n                                      env = c(jitstr, \"R_BATCH=1234\", elibs,\n                                              \"_R_CHECK_INTERNALS2_=1\"),\n                                      stdout = outfile, stderr = outfile,\n                                      timeout = tlim)\n                    t2b <- proc.time()\n                    out <- readLines(outfile, warn = FALSE)\n                    pos <- which(out == \" *** Run successfully completed ***\")\n                    if(!length(pos) || any(nzchar(out[seq_len(pos[1L] - 1L)])))\n                        ran <- TRUE\n                    savefile <- savefiles[i]\n                    if(length(grep(\"^  When (running|tangling|sourcing)\", out,\n                                   useBytes = TRUE))) {\n                        cat(\" failed\\n\")\n                        keep <- as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\",\n                                                      \"10\"))\n                        res <- if (keep > 0)\n                            c(res,\n                              paste(\"when running code in\", sQuote(basename(file))),\n                              \"  ...\",\n                              utils::tail(out, keep))\n                        else\n                            c(res,\n                              paste(\"when running code in\", sQuote(basename(file))),\n                              out)\n\n                    } else if(status || \" *** Run successfully completed ***\" %notin% out) {\n                        ## (Need not be the final line if running under valgrind)\n                        keep <- as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\",\n                                                      \"10\"))\n                        cat(\" failed to complete the test\\n\")\n                        out <- c(out, \"\", \"... incomplete output.  Crash?\")\n                        res <- if (keep > 0)\n                            c(res,\n                                 paste(\"when running code in\", sQuote(basename(file))),\n                                 \"  ...\",\n                                 utils::tail(out, keep))\n                        else\n                            c(res,\n                                 paste(\"when running code in\", sQuote(basename(file))),\n                                 out)\n                    } else if (file.exists(savefile)) {\n                        cmd <- paste0(\"invisible(tools::Rdiff('\",\n                                      outfile, \"', '\", savefile, \"',TRUE,TRUE))\")\n                        out2 <- R_runR0(cmd, R_opts2)\n                        if(length(out2)) {\n                            print_time(t1b, t2b, NULL)\n                            cat(\"\\ndifferences from \", sQuote(basename(savefile)),\n                                \"\\n\", sep = \"\")\n                            writeLines(c(out2, \"\"))\n                        } else {\n                            print_time(t1b, t2b, NULL)\n                            cat(\" OK\\n\")\n                            if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))\n                                unlink(outfile)\n                        }\n                    } else {\n                        print_time(t1b, t2b, NULL)\n                        cat(\" OK\\n\")\n                        if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))\n                            unlink(outfile)\n                    }\n                    if(!WINDOWS && !is.na(theta)) {\n                        td <- t2b - t1b\n                        cpu <- sum(td[-3L])\n                        if(cpu >= pmax(theta * td[3L], 1)) {\n                            ratio <- round(cpu/td[3L], 1L)\n                            cat(sprintf(\"Running R code from vignette %s had CPU time %g times elapsed time\\n\",\n                                        sQuote((basename(file))), ratio))\n                        }\n                    }\n                }\n                t2 <- proc.time()\n                if(!ran) {\n                    resultLog(Log, \"NONE\")\n                } else {\n                    print_time(t1, t2, Log)\n                    if(R_check_suppress_RandR_message)\n                        res <- filtergrep('^Xlib: *extension \"RANDR\" missing on display',\n                                          res, useBytes = TRUE)\n                    if(length(res)) {\n                        if(length(grep(\"there is no package called\", res,\n                                       useBytes = TRUE))) {\n                            warningLog(Log, \"Errors in running code in vignettes:\")\n                            printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))\n                        } else {\n                            errorLog(Log, \"Errors in running code in vignettes:\")\n                            printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))\n                            maybe_exit(1L)\n                        }\n                    } else resultLog(Log, \"OK\")\n                    if(!WINDOWS && !is.na(theta)) {\n                        td <- t2 - t1\n                        cpu <- sum(td[-3L])\n                        if(cpu >= pmax(theta * td[3L], 1)) {\n                            ratio <- round(cpu/td[3L], 1L)\n                            printLog(Log,\n                                     sprintf(\"Running R code from vignettes had CPU time %g times elapsed time\\n\",\n                                             ratio))\n                        }\n                    }\n                }\n            }\n\n            if (do_build_vignettes) {\n                checkingLog(Log, \"re-building of vignette outputs\")\n                ## copy the whole pkg directory to check directory\n                ## so we can work in place, and allow ../../foo references.\n                dir.create(vd2 <- \"vign_test\")\n                if (!dir.exists(vd2)) {\n                    errorLog(Log, \"unable to create 'vign_test'\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n                file.copy(pkgdir, vd2, recursive = TRUE)\n\n                ## since so many people use 'R CMD' in Makefiles,\n                oPATH <- Sys.getenv(\"PATH\")\n                Sys.setenv(PATH = paste(R.home(\"bin\"), oPATH,\n                                        sep = .Platform$path.sep))\n                on.exit(Sys.setenv(PATH = oPATH))\n                ## And too many 'vignettes/Makefile's are not safe for\n                ## parallel makes\n                Sys.setenv(MAKEFLAGS=\"\")\n                ## we could use clean = FALSE, but that would not be\n                ## testing what R CMD build uses.\n                Rcmd <- \"options(warn=1)\\nlibrary(tools)\\n\"\n                Rcmd <- paste0(Rcmd, \"buildVignettes(dir = '\",\n                               file.path(pkgoutdir, \"vign_test\", pkgname0),\n                               \"')\")\n                tlim <- get_timeout(Sys.getenv(\"_R_CHECK_BUILD_VIGNETTES_ELAPSED_TIMEOUT_\",\n                                    Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n                t1 <- proc.time()\n                outfile <- file.path(pkgoutdir, \"build_vignettes.log\")\n                status <- R_runR0(Rcmd, R_opts2, c(jitstr, elibs),\n                                  stdout = outfile, stderr = outfile,\n                                  timeout = tlim)\n                t2 <- proc.time()\n                out <- readLines(outfile, warn = FALSE)\n                if(R_check_suppress_RandR_message)\n                    out <- filtergrep('^Xlib: *extension \"RANDR\" missing on display',\n                                      out, useBytes = TRUE)\n                warns <- grep(\"^Warning: file .* is not portable\",\n                              out, value = TRUE, useBytes = TRUE)\n                print_time(t1, t2, Log)\n                if (status) {\n                    keep <- as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\",\n                                                  \"25\"))\n                    if(skip_run_maybe || !ran) warningLog(Log) else noteLog(Log)\n                    if(keep > 0) out <- utils::tail(out, keep)\n                    printLog0(Log,\n                              paste(c(\"Error in re-building vignettes:\",\n                                      \"  ...\", out, \"\", \"\"), collapse = \"\\n\"))\n                } else if(nw <- length(warns)) {\n                    if(skip_run_maybe || !ran) warningLog(Log) else noteLog(Log)\n                    msg <- ngettext(nw,\n                                    \"Warning in re-building vignettes:\\n\",\n                                    \"Warnings in re-building vignettes:\\n\",\n                                    domain = NA)\n                    wrapLog(msg)\n                    printLog0(Log, .format_lines_with_indent(warns), \"\\n\")\n                } else {\n                    ## clean up\n                    if (config_val_to_logical(Sys.getenv(\"_R_CHECK_CLEAN_VIGN_TEST_\", \"true\")))\n                        unlink(vd2, recursive = TRUE)\n                    if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", \"false\")))\n                            unlink(outfile)\n                    resultLog(Log, \"OK\")\n                }\n                if(!WINDOWS && !is.na(theta)) {\n                    td <- t2 - t1\n                    cpu <- sum(td[-3L])\n                    if(cpu >= pmax(theta * td[3L], 1)) {\n                        ratio <- round(cpu/td[3L], 1L)\n                        printLog(Log,\n                                 sprintf(\"Re-building vignettes had CPU time %g times elapsed time\\n\",\n                                        ratio))\n                    }\n                }\n            } else {\n                checkingLog(Log, \"re-building of vignette outputs\")\n                resultLog(Log, \"SKIPPED\")\n            }\n        } else {\n            checkingLog(Log, \"running R code from vignettes\")\n            resultLog(Log, \"SKIPPED\")\n            checkingLog(Log, \"re-building of vignette outputs\")\n            resultLog(Log, \"SKIPPED\")\n        }\n    }\n\n    check_pkg_manual <- function(pkgdir, pkgname)\n    {\n        ## Run Rd2pdf on the manual, if there are man pages\n        ## If it is installed there is a 'help' dir\n        ## and for a source package, there is a 'man' dir\n        if (dir.exists(file.path(pkgdir, \"help\")) ||\n            dir.exists(file.path(pkgdir, \"man\"))) {\n            tlim <- get_timeout(Sys.getenv(\"_R_CHECK_PKGMAN_ELAPSED_TIMEOUT_\",\n                                Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n            topdir <- pkgdir\n            Rd2pdf_opts <- \"--batch --no-preview\"\n            checkingLog(Log, \"PDF version of manual\")\n            build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n            man_file <- paste0(pkgname, \"-manual.pdf \")\n            ## precautionary remove in case some other attempt left it behind\n            if(file.exists(man_file)) unlink(man_file)\n            args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                      paste0(\"--build-dir=\", shQuote(build_dir)),\n                      \"--no-clean\", \"-o \", man_file , shQuote(topdir))\n            res <- run_Rcmd(args,  \"Rdlatex.log\", timeout = tlim)\n            latex_log <- file.path(build_dir, \"Rd2.log\")\n            if (file.exists(latex_log))\n                file.copy(latex_log, paste0(pkgname, \"-manual.log\"))\n            if (res == 11) { ## return code from Rd2pdf\n                errorLog(Log, \"Rd conversion errors:\")\n                lines <- readLines(\"Rdlatex.log\", warn = FALSE)\n                lines <- filtergrep(\"^(Hmm|Execution)\", lines)\n                printLog0(Log, paste(c(lines, \"\"), collapse = \"\\n\"))\n                unlink(build_dir, recursive = TRUE)\n\t\tmaybe_exit(1L)\n            } else if (res > 0) {\n                latex_file <- file.path(build_dir, \"Rd2.tex\")\n                if (file.exists(latex_file))\n                    file.copy(latex_file, paste0(pkgname, \"-manual.tex\"))\n                warningLog(Log)\n                printLog0(Log,\n                          paste0(\"LaTeX errors when creating PDF version.\\n\",\n                                 \"This typically indicates Rd problems.\\n\"))\n                ## If possible, indicate the problems found.\n                if (file.exists(latex_log)) {\n                    lines <- .get_LaTeX_errors_from_log_file(latex_log)\n                    printLog(Log, \"LaTeX errors found:\\n\")\n                    printLog0(Log, paste(c(lines, \"\"), collapse = \"\\n\"))\n                }\n                unlink(build_dir, recursive = TRUE)\n                ## for Windows' sake: errors can make it unwritable\n                build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n                checkingLog(Log, \"PDF version of manual without hyperrefs or index\")\n                ## Also turn off hyperrefs.\n                Sys.setenv(R_RD4PDF = \"times\")\n                args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                          paste0(\"--build-dir=\", shQuote(build_dir)),\n                          \"--no-clean\", \"--no-index\",\n                          \"-o \", man_file, topdir)\n                if (run_Rcmd(args, \"Rdlatex.log\", timeout = tlim)) {\n                    ## FIXME: the info is almost certainly in Rdlatex.log\n                    errorLog(Log)\n                    latex_log <- file.path(build_dir, \"Rd2.log\")\n                    if (file.exists(latex_log))\n                        file.copy(latex_log, paste0(pkgname, \"-manual.log\"))\n                    else {\n                        ## No log file and thus no chance to find out\n                        ## what went wrong.  Hence, re-run without\n                        ## redirecting stdout/stderr and hope that this\n                        ## gives the same problem ...\n                        # printLog(Log, \"Error when running command:\\n\")\n                        # cmd <- paste(c(\"R CMD\", args), collapse = \" \")\n                        # printLog(Log, strwrap(cmd, indent = 2, exdent = 4), \"\\n\")\n                        printLog(Log, \"Re-running with no redirection of stdout/stderr.\\n\")\n                        unlink(build_dir, recursive = TRUE)\n                        build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n                        args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                                  paste0(\"--build-dir=\", shQuote(build_dir)),\n                                  \"--no-clean\", \"--no-index\",\n                                  \"-o \", paste0(pkgname, \"-manual.pdf \"),\n                                  topdir)\n                        run_Rcmd(args, timeout = tlim)\n                    }\n                    unlink(build_dir, recursive = TRUE)\n\t\t    maybe_exit(1L)\n                } else {\n                    unlink(build_dir, recursive = TRUE)\n                    resultLog(Log, \"OK\")\n                }\n            } else {\n                unlink(build_dir, recursive = TRUE)\n                resultLog(Log, \"OK\")\n            }\n        }\n    }\n\n    check_executables <- function()\n    {\n        owd <- setwd(pkgdir)\n        allfiles <- dir(\".\", all.files = TRUE, full.names = TRUE,\n                        recursive = TRUE)\n        allfiles <- sub(\"^./\",\"\", allfiles)\n        ## this is tailored to the FreeBSD/Linux 'file',\n        ## see http://www.darwinsys.com/file/\n        ## (Solaris has a different 'file' without --version)\n        ## Most systems are now on >= 5.03, but macOS 10.5 had 4.17\n        ## version 4.21 writes to stdout,\n        ## 4.23 to stderr and sets an error status code\n        FILE <- \"file\"\n        lines <- suppressWarnings(tryCatch(system2(FILE, \"--version\", TRUE, TRUE), error = function(e) \"error\"))\n        ## a reasonable check -- it does not identify itself well\n        have_free_file <- any(grepl(\"^(file-[45]|magic file from)\", lines))\n        if (!have_free_file) {\n            ## OpenCSW calls this 'gfile'\n            FILE <- \"gfile\"\n            lines <- suppressWarnings(tryCatch(system2(FILE, \"--version\", TRUE, TRUE), error = function(e) \"error\"))\n            have_free_file <- any(grepl(\"magic file from\", lines))\n        }\n        if (have_free_file) {\n            checkingLog(Log, \"for executable files\")\n            ## Watch out for spaces in file names here\n            ## Do in parallel for speed on Windows, but in batches\n            ## since there may be a line-length limit.\n            execs <- character()\n            files <- allfiles\n            while(ll <- length(files)) {\n                chunk <- seq_len(min(100, ll))\n                these <- files[chunk]\n                files <- files[-chunk]\n                lines <- suppressWarnings(system2(FILE, shQuote(these), TRUE, TRUE))\n                ## avoid match to is_executable.Rd\n                ex <- grepl(\" executable\", lines, useBytes=TRUE)\n\t\tex2 <- grepl(\"script\", lines, useBytes=TRUE) &\n\t\t       grepl(\"text\", lines, useBytes=TRUE)\n                execs <- c(execs, lines[ex & !ex2])\n            }\n            if(length(execs)) {\n                execs <- sub(\":[[:space:]].*$\", \"\", execs, useBytes = TRUE)\n                known <- rep(FALSE, length(execs))\n                pexecs <- file.path(pkgname, execs)\n                ## known false positives\n                for(fp in  c(\"foreign/tests/datefactor.dta\",\n                             \"msProcess/inst/data[12]/.*.txt\",\n                             \"WMBrukerParser/inst/Examples/C3ValidationExtractSmall/RobotRun1/2-100kDa/0_B1/1/1SLin/fid\",\n                             \"bayesLife/inst/ex-data/bayesLife.output/predictions/traj_country104.rda\", # file 5.16\n                             \"alm/inst/vign/cache/signposts1_c96f55a749822dd089b636087766def2.rdb\" # Sparc Solaris, file 5.16\n                             ) )\n                    known <- known | grepl(fp, pexecs)\n                execs <- execs[!known]\n            }\n        } else {\n            ## no 'file', so just check extensions\n            checkingLog(Log, \"for .dll and .exe files\")\n            execs <- grep(\"\\\\.(exe|dll)$\", allfiles, value = TRUE)\n        }\n        if (R_check_executables_exclusions && file.exists(\"BinaryFiles\")) {\n            excludes <- readLines(\"BinaryFiles\")\n            execs <- execs %w/o% excludes\n        }\n        if (nb <- length(execs)) {\n            msg <- ngettext(nb,\n                            \"Found the following executable file:\",\n                            \"Found the following executable files:\",\n                            domain = NA)\n            warningLog(Log, msg)\n            printLog0(Log, .format_lines_with_indent(execs), \"\\n\")\n            wrapLog(\"Source packages should not contain undeclared executable files.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    ## CRAN-pack knows about\n    .hidden_file_exclusions <-\n        c(\".Renviron\", \".Rprofile\", \".Rproj.user\",\n          \".Rhistory\", \".Rapp.history\",\n          \".tex\", \".log\", \".aux\", \".pdf\", \".png\",\n          \".backups\", \".cvsignore\", \".cproject\", \".directory\",\n          \".dropbox\", \".exrc\", \".gdb.history\",\n          \".gitattributes\", \".gitignore\", \".gitmodules\",\n          \".hgignore\", \".hgtags\",\n          \".project\", \".seed\", \".settings\", \".tm_properties\")\n\n    check_dot_files <- function(cran = FALSE)\n    {\n        checkingLog(Log, \"for hidden files and directories\")\n        owd <- setwd(pkgdir)\n        dots <- dir(\".\", all.files = TRUE, full.names = TRUE,\n                        recursive = TRUE, pattern = \"^[.]\")\n        dots <- sub(\"^./\",\"\", dots)\n        allowed <-\n            c(\".Rbuildignore\", \".Rinstignore\", \"vignettes/.install_extras\")\n        dots <- dots %w/o% allowed\n        alldirs <- list.dirs(\".\", full.names = TRUE, recursive = TRUE)\n        alldirs <- sub(\"^./\",\"\", alldirs)\n        alldirs <- alldirs[alldirs != \".\"]\n        bases <- basename(alldirs)\n        dots <- c(dots, setdiff(alldirs[startsWith(bases, \".\")], \".aspell\"))\n        if (length(dots)) {\n            noteLog(Log, \"Found the following hidden files and directories:\")\n            printLog0(Log, .format_lines_with_indent(dots), \"\\n\")\n            wrapLog(\"These were most likely included in error.\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n            if(cran) {\n                known <- basename(dots) %in% .hidden_file_exclusions\n                known <- known | grepl(\"^.Rbuildindex[.]\", dots) |\n                    ## or?      startsWith(dots,\".Rbuildindex.\") |\n                    endsWith(dots, \"inst/doc/.Rinstignore\") |\n                    endsWith(dots, \"inst/doc/.build.timestamp\") |\n                    endsWith(dots, \"vignettes/.Rinstignore\") |\n                    grepl(\"^src.*/[.]deps$\", dots)\n\t\tif (all(known))\n                    printLog(Log, \"\\nCRAN-pack knows about all of these\\n\")\n                else if (any(!known)) {\n                    printLog(Log, \"\\nCRAN-pack does not know about\\n\")\n                    printLog0(Log, .format_lines_with_indent(dots[!known]), \"\\n\")\n                }\n            }\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    check_install <- function()\n    {\n        ## Option '--no-install' turns off installation and the tests\n        ## which require the package to be installed.  When testing\n        ## recommended packages bundled with R we can skip\n        ## installation, and do so if '--install=skip' was given.  If\n        ## command line option '--install' is of the form\n        ## 'check:FILE', it is assumed that installation was already\n        ## performed with stdout/stderr redirected to FILE, the\n        ## contents of which need to be checked (without repeating the\n        ## installation).  In this case, one also needs to specify\n        ## *where* the package was installed to using command line\n        ## option '--library'.\n\n        if (install == \"skip\")\n            messageLog(Log, \"skipping installation test\")\n        else {\n            tlim <- get_timeout(Sys.getenv(\"_R_CHECK_INSTALL_ELAPSED_TIMEOUT_\",\n                                Sys.getenv(\"_R_CHECK_ELAPSED_TIMEOUT_\")))\n            use_install_log <-\n                (startsWith(install, \"check\") || R_check_use_install_log\n                 || !isatty(stdout()))\n            INSTALL_opts <- install_args\n            ## don't use HTML, checkRd goes over the same ground.\n            INSTALL_opts <- c(INSTALL_opts,  \"--no-html\")\n            if (install == \"fake\")\n                INSTALL_opts <- c(INSTALL_opts,  \"--fake\")\n            else if (!multiarch)\n                INSTALL_opts <- c(INSTALL_opts,  \"--no-multiarch\")\n            INSTALL_opts <- paste(INSTALL_opts, collapse = \" \")\n            args <- c(\"INSTALL\", \"-l\", shQuote(libdir), INSTALL_opts,\n                      shQuote(if (WINDOWS) utils::shortPathName(pkgdir) else pkgdir))\n            if (!use_install_log) {\n                ## Case A: No redirection of stdout/stderr from installation.\n                ## This is very rare: needs _R_CHECK_USE_INSTALL_LOG_ set\n                ## to false.\n                message(\"\")\n                ## Rare use of R CMD INSTALL\n                if (run_Rcmd(args, timeout = tlim)) {\n                    errorLog(Log, \"Installation failed.\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n                message(\"\")\n            } else {\n                ## Case B. All output from installation redirected,\n                ## or already available in the log file.\n                checkingLog(Log,\n\t\t\t    \"whether package \", sQuote(desc[\"Package\"]),\n                            \" can be installed\")\n                outfile <- file.path(pkgoutdir, \"00install.out\")\n                if (startsWith(install, \"check\")) {\n                    if (!nzchar(arg_libdir))\n                        printLog(Log, \"\\nWarning: --install=check... specified without --library\\n\")\n                    thislog <- install_log_path\n                    if(!nzchar(thislog)) {\n                        errorLog(Log,\n                                 sprintf(\"install log %s does not exist\", sQuote(thislog)))\n                        summaryLog(Log)\n                        do_exit(2L)\n                    }\n                    file.copy(thislog, outfile)\n                    install <- \"check\"\n                    lines <- readLines(outfile, warn = FALSE)\n                    ## <NOTE>\n                    ## We used to have\n                    ## $install_error = ($lines[$#lines] !~ /^\\* DONE/);\n                    ## but what if there is output from do_cleanup\n                    ## in (Unix) R CMD INSTALL?\n                    ## </NOTE>\n                    install_error <- !any(grepl(\"^\\\\* DONE\", lines))\n                } else {\n                    ## record in the log what options were used\n                    cat(\"* install options \", sQuote(INSTALL_opts),\n                        \"\\n\\n\", sep = \"\", file = outfile)\n##                    env <- \"\"\n                    ## Normal use of R CMD INSTALL\n                    t1 <- proc.time()\n                    install_error <-\n                        run_Rcmd(args, outfile, timeout = tlim)\n                    t2 <- proc.time()\n                    print_time(t1, t2, Log)\n                    lines <- readLines(outfile, warn = FALSE)\n                }\n                if (install_error) {\n                    errorLog(Log, \"Installation failed.\")\n                    printLog0(Log, \"See \", sQuote(outfile),\n                             \" for details.\\n\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n\n                ## There could still be some important warnings that\n                ## we'd like to report.  For the time being, start\n                ## with compiler warnings about non ISO C code (or\n                ## at least, what looks like it), and also include\n                ## warnings resulting from the const char * CHAR()\n                ## change in R 2.6.0.  (In theory, we should only do\n                ## this when using GCC ...)\n\n                if (install != \"check\")\n                    lines <- readLines(outfile, warn = FALSE)\n\n                lines0 <- lines\n                warn_re <- c(\"^WARNING:\",\n                             ## This fires on ODS 12.5 warnings like\n                             ##   Warning: original hides icu_55::PtnSkeleton::original.\n                             ## so filter out later.\n                             \"^Warning:\",\n                             ## <FIXME>\n                             ## New style Rd conversion\n                             ## which may even show errors:\n                             \"^Rd (warning|error): \",\n                             ## </FIXME>\n                             \": warning: .*ISO C\",\n                             \": warning: .* discards qualifiers from pointer target type\",\n                             \": warning: .* is used uninitialized\",\n                             \": warning: .* set but not used\",\n                             \": warning: unused\",\n                             \": warning: .* makes pointer from integer\", # gcc\n                             \": warning: .* pointer.* conversion\", # clang\n                             \": warning: improper pointer\", # Solaris\n                             \": warning: unknown escape sequence\", # gcc\n                             \": warning: use of non-standard escape character\", # clang\n                             ## clang warning about invalid returns.\n                             \"warning: void function\",\n                             \"warning: control reaches end of non-void function\",\n                             \"warning: no return statement in function returning non-void\",\n                             ## gcc-only form\n                             ## \": #warning\",\n                             ## gcc indents these, igraph has space after #\n                             \"^ *# *warning\",\n                             ## Solaris cc has\n                             \"Warning: # *warning\",\n                             # these are from era of static HTML\n                             \"missing links?:\",\n                             ## From the byte compiler's 'warn' methods\n                             \"^Note: possible error in\",\n                             \"^Note: (break|next) used in wrong context: no loop is visible\"\n                             )\n                ## Warnings spotted by gcc with\n                ##   '-Wimplicit-function-declaration'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_IMPLICIT_\", \"FALSE\")\n                ## (Not quite perfect, as the name should really\n                ## include 'IMPLICIT_FUNCTION_DECLARATION'.)\n                if (config_val_to_logical(check_src_flag)) {\n                    warn_re <- c(warn_re,\n                                 \": warning: implicit declaration of function\",\n                                 \": warning: incompatible implicit declaration of built-in function\")\n                }\n\n                ## Warnings spotted by clang with\n                ## '-Wreturn-type-c-linkage':\n                warn_re <- c(warn_re,\n                             \": warning: .* \\\\[-Wreturn-type-c-linkage\\\\]\")\n\n                ## gcc and clang warnings about sequencing\n\n                ## gcc warnings\n                warn_re <- c(warn_re,\n                             \": warning: pointer of type .* used in arithmetic\",\n                             \": warning: .* \\\\[-Wformat-contains-nul\\\\]\",\n                             \": warning: .* \\\\[-Wformat-zero-length\\\\]\",\n                             \": warning: .* \\\\[-Wpointer-to-int-cast\\\\]\",\n                             \": warning: .* \\\\[-Wsequence-point\\\\]\",\n                             \": warning: .* \\\\[-Wformat-overflow=\\\\]\",\n                             \": warning: .* \\\\[-Wformat-truncation=\\\\]\",\n                             \": warning: .* \\\\[-Wnonull\",\n                             \": warning: .* \\\\[-Walloc-size-larger-than=\\\\]\",\n                             \": warning: .* \\\\[-Wterminate\\\\]\",\n                             ## Solaris warns on this next one. Also clang\n                             \": warning: .* \\\\[-Wint-conversion\\\\]\",\n                             ## clang calls these 'a GNU extension'\n                             \": warning: .* GCC extension\",\n                             \": warning: .* \\\\[-Wsizeof-pointer-memaccess\\\\]\",\n                             ## usually | for ||, = for == (etc)\n                             \": warning: suggest parentheses around (comparison|assignment)\",\n                             \": warning: .* \\\\[-Wstringop\", # mainly gcc8\n                             \": warning: .* \\\\[-Wclass-memaccess\\\\]\", # gcc8\n                             ## Fatal on clang and Solaris ODS\n                             \": warning: .* with a value, in function returning void\"\n                            )\n\n                ## clang warnings\n                warn_re <- c(warn_re,\n                             \": warning: .* GNU extension\",\n                             \": warning: .* \\\\[-Wdeprecated-register\\\\]\",\n                             \": warning: .* \\\\[-Wformat-extra-args\\\\]\", # also gcc\n                             \": warning: .* \\\\[-Wformat-security\\\\]\",\n                             \": warning: .* \\\\[-Wheader-guard\\\\]\",\n                             \": warning: .* \\\\[-Wpointer-arith\\\\]\",\n                             \": warning: .* \\\\[-Wunsequenced\\\\]\",\n                             \": warning: .* \\\\[-Wvla-extension\\\\]\",\n                             \": warning: .* \\\\[-Wmismatched-new-delete\\\\]\",\n                             \": warning: .* \\\\[-Wabsolute-value\\\\]\",\n                             \": warning: .* \\\\[-Wreorder\\\\]\", # also gcc\n                             \": warning: .* \\\\[-Wself-assign\",\n                             \": warning: .* \\\\[-Wtautological\",  # also gcc\n                             \": warning: .* \\\\[-Wincompatible-pointer-types\\\\]\",\n                             \": warning: format string contains '[\\\\]0'\",\n                             \": warning: .* \\\\[-Wc[+][+]11-long-long\\\\]\",\n                             \": warning: empty macro arguments are a C99 feature\",\n                             ## for non-portable flags (seen in sub-Makefiles)\n                             \"warning: .* \\\\[-Wunknown-warning-option\\\\]\"\n                             )\n\n                warn_re <- paste0(\"(\", paste(warn_re, collapse = \"|\"), \")\")\n\n                lines <- grep(warn_re, lines, value = TRUE, useBytes = TRUE)\n\n                ## gcc seems not to know the size of pointers, so skip\n                ## some from -Walloc-size-larger-than= and -Wstringop-overflow=\n                lines <- grep(\"exceeds maximum object size.*-W(alloc-size-larger-than|stringop-overflow)\", lines,\n                              value = TRUE, useBytes = TRUE, invert = TRUE)\n                ## skip for now some c++11-long-long warnings.\n                ex_re <- \"(/BH/include/boost/|/RcppParallel/include/|/usr/include/|/usr/local/include/|/opt/X11/include/|/usr/X11/include/).*\\\\[-Wc[+][+]11-long-long\\\\]\"\n                lines <- filtergrep(ex_re, lines, useBytes = TRUE)\n\n                ## and GNU extensions in system headers\n                ex_re <- \"^ *(/usr/|/opt/).*GNU extension\"\n                lines <- filtergrep(ex_re, lines, useBytes = TRUE)\n\n                ## and ODS 12.5 warnings\n                ex_re <- \"^Warning: [[:alnum:]]+ hides\"\n                lines <- filtergrep(ex_re, lines, useBytes = TRUE)\n\n                ## Ignore install-time readLines() warnings about\n                ## files with incomplete final lines.  Most of these\n                ## come from .install_package_indices(), and should be\n                ## safe to ignore ...\n                lines <- filtergrep(\"Warning: incomplete final line found by readLines\",\n                                    lines, useBytes = TRUE)\n\n                check_Stangle <- Sys.getenv(\"_R_CHECK_STANGLE_WARNINGS_\", \"TRUE\")\n                if (!config_val_to_logical(check_Stangle))\n                lines <- filtergrep(\"Warning: value of .* option should be lowercase\",\n                                    lines, useBytes = TRUE)\n\n                ## Package writers cannot really do anything about\n                ## non ISO C code in *system* headers.  Also,\n                ## GCC >= 3.4 warns about function pointers\n                ## casts which are \"needed\" for dlsym(), but it\n                ## seems that all systems which have dlsym() also\n                ## support the cast.  Hence, try to ignore these by\n                ## default, but make it possible to get all ISO C\n                ## warnings via an environment variable.\n                if (!R_check_all_non_ISO_C) {\n                    lines <- filtergrep(\"^ */.*: warning: .*ISO C\",\n                                        lines, useBytes = TRUE)\n                    lines <- filtergrep(\"warning: *ISO C forbids.*function pointer\",\n                                        lines, useBytes = TRUE)\n                    if(WINDOWS) lines <- filtergrep(\n                                    \"warning: *ISO C does not support.*ms_printf length modifier\",\n                                    lines, useBytes = TRUE)\n                }\n\n                ## Warnings spotted by gcc with\n                ##   '-Wunused'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_UNUSED_\", \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    lines <- filtergrep(\"warning: unused\", lines,\n                                        ignore.case = TRUE, useBytes = TRUE)\n                    lines <- filtergrep(\"warning: .* set but not used\", lines,\n                                        ignore.case = TRUE, useBytes = TRUE)\n                }\n                ## (gfortran seems to use upper case.)\n\n                ## Warnings spotted by clang with\n                ##   '-Wsometimes-uninitialized'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_SOMETIMES_UNINITIALIZED_\",\n                               \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    lines <- filtergrep(\"warning: .* is used uninitialized whenever\",\n                                        lines, useBytes = TRUE)\n                }\n\n                ## Warnings spotted by gfortran >= 4.0 with '-Wall'.\n                ## Justified in principle, it seems.\n                ## Let's filter them for the time being, and maybe\n                ## revert this later on ... but make it possible to\n                ## suppress filtering out by setting the internal\n                ## environment variable _R_CHECK_WALL_FORTRAN_ to\n                ## something \"true\".\n                ## All gfortran -Wall warnings start Warning: so have been\n                ## included.  We exclude some now.\n                check_src_flag <- Sys.getenv(\"_R_CHECK_WALL_FORTRAN_\", \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    warn_re <-\n                        c(\"Label .* at \\\\(1\\\\) defined but not used\",\n                          \"Line truncated at \\\\(1\\\\)\",\n                          \"ASSIGN statement at \\\\(1\\\\)\",\n                          \"Assigned GOTO statement at \\\\(1\\\\)\",\n                          \"arithmetic IF statement at \\\\(1\\\\)\",\n                          \"Nonconforming tab character (in|at)\",\n                          \"Obsolescent feature:\")\n                    warn_re <- c(warn_re,\n                                 \"Warning: .*\\\\[-Wconversion]\",\n                                 ## We retain [-Wuninitialized]\n                                 \"Warning: .*\\\\[-Wmaybe-uninitialized]\",\n                                 \"Warning: .*\\\\[-Wintrinsic-shadow]\",\n                                 ## R itself uses these, the latter in LAPACK\n                                 \"Warning: GNU Extension: DOUBLE COMPLEX\",\n                                 \"Warning: GNU Extension: .*COMPLEX[*]16\"\n                                )\n                    check_src_flag <-\n                        Sys.getenv(\"_R_CHECK_SRC_MINUS_W_UNUSED_\", \"FALSE\")\n                    if (!config_val_to_logical(check_src_flag))\n                        warn_re <- c(warn_re,\n                                     \"Warning: .*\\\\[-Wunused-function]\",\n                                     \"Warning: .*\\\\[-Wunused-dummy-argument]\")\n                    warn_re <- paste0(\"(\", paste(warn_re, collapse = \"|\"), \")\")\n                    lines <- filtergrep(warn_re, lines)\n                }\n\n                if (WINDOWS) {\n                    ## Warning on Windows with some packages that\n                    ## cannot transparently be installed bi-arch.\n                    lines <- filtergrep(\"Warning: this package has a non-empty 'configure.win' file\",\n                                        lines)\n                    ## Warning on x64 Windows gcc 4.5.1 that\n                    ## seems to be spurious\n                    lines <- filtergrep(\"Warning: .drectve .* unrecognized\", lines)\n                }\n\n                check_imports_flag <-\n                    Sys.getenv(\"_R_CHECK_REPLACING_IMPORTS_\", \"TRUE\")\n                if (!config_val_to_logical(check_imports_flag))\n                    lines <- filtergrep(\"Warning: replacing previous import\", lines,\n                                        fixed = TRUE)\n                else {\n                    this <- unique(grep(\"Warning: replacing previous import\",\n                                        lines, fixed = TRUE, value = TRUE))\n                    this <- grep(paste0(sQuote(pkgname), \"$\"), this,\n                                 value = TRUE)\n                    lines <- filtergrep(\"Warning: replacing previous import\", lines,\n                                        fixed = TRUE)\n                    lines <- c(lines, this)\n                }\n                check_FirstLib_flag <-\n                    Sys.getenv(\"_R_CHECK_DOT_FIRSTLIB_\", \"FALSE\")\n                if (!config_val_to_logical(check_FirstLib_flag))\n                    lines <- filtergrep(\"Warning: ignoring .First.lib()\", lines,\n                                        fixed = TRUE)\n\n                lines <- unique(lines)\n\n                ## Can get reports like\n                ## Warning: No generic function \u2018as.vector\u2019 found corresponding to requested imported methods from package \u2018Matrix\u2019 when loading \u2018MatrixModels\u2019 (malformed exports?)\n                ## Exclude these unless they are about the current package.\n                load_re <- \"Warning: No generic function.*corresponding to requested imported methods\"\n                ex <- grepl(load_re, lines, useBytes = TRUE) &\n                    !grepl(pkgname, lines, fixed = TRUE, useBytes = TRUE)\n                lines <- lines[!ex]\n\n                note_re <-\n                    \"warning: control may reach end of non-void function\"\n\n                notes <- grep(note_re, lines0, value = TRUE, useBytes = TRUE)\n                notes <- unique(notes)\n\n                if (length(lines)) {\n                    warningLog(Log, \"Found the following significant warnings:\")\n                    printLog0(Log, .format_lines_with_indent(lines), \"\\n\")\n                    if(length(notes)) {\n                        printLog(Log,\n                                 \"Found the following additional warnings:\\n\")\n                        printLog0(Log, .format_lines_with_indent(notes),\n                                  \"\\n\")\n                    }\n                    printLog0(Log, sprintf(\"See %s for details.\\n\",\n                                           sQuote(outfile)))\n                    if(any(grepl(\"^Note:\", lines, useBytes = TRUE)))\n                        wrapLog(\"Information on the location(s)\",\n                                \"of code generating the\",\n                                paste0(sQuote(\"Note\"), \"s\"),\n                                \"can be obtained by re-running with\",\n                                \"environment variable R_KEEP_PKG_SOURCE\",\n                                \"set to 'yes'.\\n\")\n\n                } else if(length(notes)) {\n                    noteLog(Log, \"Found the following warnings:\")\n                    printLog0(Log, .format_lines_with_indent(notes), \"\\n\")\n                    printLog0(Log, sprintf(\"See %s for details.\\n\",\n                                           sQuote(outfile)))\n                } else resultLog(Log, \"OK\")\n            }   ## end of case B\n        }\n\n    }\n\n    ## This requires a GNU-like 'du' with 1k block sizes,\n    ## so use -k (which POSIX requires).\n    ## It also depends on the total being last.\n    check_install_sizes <- function()\n    {\n        pd <- file.path(libdir, pkgname)\n        ## if we used a log, the installation would not need to remain.\n        if (!dir.exists(pd)) return()\n        checkingLog(Log, \"installed package size\")\n        owd <- setwd(pd)\n        res <- system2(\"du\", \"-k\", TRUE, TRUE)\n        sizes <- as.integer(sub(\"\\\\D.*\", \"\", res))\n        dirs <- sub(\"^\\\\d*\\\\s*\", \"\", res)\n        res2 <- data.frame(size = sizes, dir = I(dirs))\n        total <- res2[nrow(res2), 1L]\n        if(!is.na(total) && total > 1024*5 && # report at 5Mb\n           pkgname != \"Matrix\") { # <- large recommended package\n            noteLog(Log)\n            printLog(Log, sprintf(\"  installed size is %4.1fMb\\n\", total/1024))\n            rest <- res2[-nrow(res2), ]\n            rest[, 2L] <- sub(\"./\", \"\", rest[, 2L])\n            ## keep only top-level directories\n            rest <- rest[!grepl(\"/\", rest[, 2L]), ]\n            rest <- rest[rest[, 1L] > 1024, ] # > 1Mb\n            if(nrow(rest)) {\n                o <- sort.list(rest[, 2L])\n                printLog(Log, \"  sub-directories of 1Mb or more:\\n\")\n                size <- sprintf('%4.1fMb', rest[, 1L]/1024)\n                printLog0(Log,\n\t\t\t  paste0(\"    \", format(rest[o, 2L], justify = \"left\"),\n\t\t\t\t \"  \", format(size[o], justify = \"right\"), \"\\n\"))\n            }\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    check_description <- function()\n    {\n        checkingLog(Log, \"for file \",\n                    sQuote(file.path(pkgname0, \"DESCRIPTION\")))\n        if (\"DESCRIPTION\" %in% dir(pkgdir)) {\n            f <- file.path(pkgdir, \"DESCRIPTION\")\n            desc <- tryCatch(.read_description(f), error = identity)\n            if(inherits(desc, \"error\")) {\n                errorLog(Log, conditionMessage(desc))\n                summaryLog(Log)\n                do_exit(1L)\n            } else if(!length(desc)) {\n                errorLog(Log, \"File DESCRIPTION exists but is not in correct format\")\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            mandatory <- c(\"Package\", \"Version\", \"License\", \"Description\",\n                           \"Title\", \"Author\", \"Maintainer\")\n            OK <- sapply(desc[mandatory], function(x) !is.na(x) && nzchar(x))\n            if(!all(OK)) {\n                fail <- mandatory[!OK]\n                msg <- ngettext(length(fail),\n                                \"Required field missing or empty:\",\n                                \"Required fields missing or empty:\")\n                msg <- paste0(msg, \"\\n\", .pretty_format(fail))\n                errorLog(Log, msg)\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            if(!grepl(\"^[[:alpha:]][[:alnum:].]*[[:alnum:]]$\", desc[\"Package\"])\n               || grepl(\"[.]$\", desc[\"Package\"])) {\n                warningLog(Log)\n                printLog(Log,\"  Package name is not portable:\\n\",\n                         \"  It must start with a letter, contain letters, digits or dot\\n\",\n                         \"  have at least 2 characters and not end with a dot.\\n\")\n            } else resultLog(Log, \"OK\")\n            encoding <- desc[\"Encoding\"]\n        } else if (file.exists(f <- file.path(pkgdir, \"DESCRIPTION\"))) {\n            errorLog(Log,\n                     \"File DESCRIPTION does not exist but there is a case-insensitive match.\")\n            summaryLog(Log)\n            do_exit(1L)\n        } else {\n            errorLog(Log,\n                     \"File DESCRIPTION does not exist\")\n            summaryLog(Log)\n            do_exit(1L)\n        }\n        if(!is.na(desc[\"Type\"])) { # standard packages do not have this\n            checkingLog(Log, \"extension type\")\n            if(desc[\"Type\"] != \"Package\") {\n                errorLog(Log,\n                         sprintf(\"Extensions with Type %s cannot be checked.\",\n                                 sQuote(desc[\"Type\"])))\n                summaryLog(Log)\n                do_exit(0L)\n            } else resultLog(Log, desc[\"Type\"])\n        }\n        if(!is.na(desc[\"Bundle\"])) {\n            checkingLog(Log, \"package bundle\")\n            errorLog(Log,\n                     sprintf(\"Looks like %s is a package bundle -- they are defunct\",\n                             sQuote(pkgname0)))\n            summaryLog(Log)\n            do_exit(1L)\n        }\n\n        messageLog(Log,\n                   sprintf(\"this is package %s version %s\",\n                           sQuote(desc[\"Package\"]),\n                           sQuote(desc[\"Version\"])))\n\n        if (!is.na(encoding))\n            messageLog(Log, \"package encoding: \", encoding)\n\n        desc\n    }\n\n    check_CRAN_incoming <- function(localOnly)\n    {\n        checkingLog(Log, \"CRAN incoming feasibility\")\n        res <- .check_package_CRAN_incoming(pkgdir, localOnly)\n        bad <- FALSE\n        if(length(res)) {\n            out <- format(res)\n            if(length(out) == 1L && startsWith(out, \"Maintainer: \")) {\n                ## Special-case when there is only the maintainer\n                ## address to note (if at all).\n                maintainer <- res$Maintainer\n                if(nzchar(maintainer) &&\n                   identical(maintainer,\n                             Sys.getenv(\"_R_CHECK_MAINTAINER_ADDRESS_\"))) {\n                    resultLog(Log, \"OK\")\n                    out <- character()\n                }\n                else resultLog(Log, \"Note_to_CRAN_maintainers\")\n            } else if(length(res$bad_package)) {\n                errorLog(Log)\n                bad <- TRUE\n            } else if(length(res$bad_version) ||\n                      length(res$strong_dependencies_not_in_mainstream_repositories) ||\n                      isTRUE(res$foss_with_BuildVignettes) ||\n                      res$Maintainer_invalid_or_multi_person ||\n                      res$empty_Maintainer_name ||\n                      res$Maintainer_needs_quotes)\n                warningLog(Log)\n            else if(length(res) > 1L) noteLog(Log)\n            else resultLog(Log, \"OK\")\n            printLog0(Log, c(paste(out, collapse = \"\\n\\n\"), \"\\n\"))\n            if(bad) maybe_exit(1L)\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_dependencies <- function()\n    {\n        ## Try figuring out whether the package dependencies can be\n        ## resolved at run time.  Ideally, the installation\n        ## mechanism would do this, and we also do not check\n        ## versions ... also see whether vignette and namespace\n        ## package dependencies are recorded in DESCRIPTION.\n\n        ## <NOTE>\n        ## We are not checking base packages here, so all packages do\n        ## have a description file.\n        ## </NOTE>\n\n        ## <NOTE>\n        ## If a package has a namespace, checking dependencies will\n        ## try making use of it without the NAMESPACE file ever\n        ## being validated.\n        ## Uncaught errors can lead to messages like\n        ##   * checking package dependencies ... ERROR\n        ##   Error in e[[1]] : object is not subsettable\n        ##   Execution halted\n        ## which are not too helpful :-(\n        ## Hence, we try to intercept this here.\n\n        if (!extra_arch &&\n            file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n            checkingLog(Log, \"package namespace information\")\n            ns <- tryCatch(parseNamespaceFile(basename(pkgdir),\n                                              dirname(pkgdir)),\n                     error = function(e) {\n                         errorLog(Log)\n                         printLog0(Log,\n                                   \"Invalid NAMESPACE file, parsing gives:\",\n                                   \"\\n\", as.character(e), \"\\n\")\n                         msg_NAMESPACE <-\n                             c(\"See section 'Package namespaces'\",\n                               \" in the 'Writing R Extensions' manual.\\n\")\n                         wrapLog(msg_NAMESPACE)\n                         summaryLog(Log)\n                         do_exit(1L)\n                     })\n            OK <- TRUE\n            ## Look for empty importFrom\n            imp <- ns$imports\n            lens <- lengths(imp)\n            imp <- imp[lens == 2L]\n            nm <- sapply(imp, \"[[\", 1)\n            lens <- sapply(imp, function(x) length(x[[2]]))\n            bad <- nm[lens == 0L]\n            if(length(bad)) {\n                OK <- FALSE\n                msg <- if(length(bad) == 1L)\n                    sprintf(\"  Namespace with empty importFrom: %s\", sQuote(bad))\n                else\n                    paste0(\"  Namespaces with empty importFrom:\\n\",\n                           .pretty_format(sort(bad)))\n                noteLog(Log, msg)\n            }\n            nS3methods <- nrow(ns$S3methods)\n            if (nS3methods > 500L) {\n                ## check that this is installable in R 3.0.1\n                meta <- .read_description(file.path(pkgdir, \"DESCRIPTION\"))\n                deps <- .split_description(meta, verbose = TRUE)$Rdepends2\n                status <- 0L\n                current <- as.numeric_version(\"3.0.1\")\n                for(depends in deps) {\n                    ## .check_package_description will insist on these operators\n                    if(depends$op %notin% c(\"<=\", \">=\", \"<\", \">\", \"==\", \"!=\"))\n                        next\n                    status <- if(inherits(depends$version, \"numeric_version\"))\n                        !do.call(depends$op, list(current, depends$version))\n                    else {\n                        ver <- R.version\n                        if (ver$status %in% c(\"\", \"Patched\")) FALSE\n                        else !do.call(depends$op,\n                                      list(ver[[\"svn rev\"]],\n                                           as.numeric(sub(\"^r\", \"\", depends$version))))\n                    }\n                    if(status != 0L)  break\n                }\n                if (status == 0L) {\n                    OK <- FALSE\n                    msg <- sprintf(\"R < 3.0.2 had a limit of 500 registered S3 methods: found %d\",\n                                   nS3methods)\n                    noteLog(Log, msg)\n                }\n            }\n            if(OK) resultLog(Log, \"OK\")\n        }\n\n        checkingLog(Log, \"package dependencies\")\n        ## Everything listed in Depends or Suggests or Imports\n        ## should be available for successfully running R CMD check.\n        ## \\VignetteDepends{} entries not \"required\" by the package code\n        ## must be in Suggests.  Note also that some of us think that a\n        ## package vignette must require its own package, which OTOH is\n        ## not required in the package DESCRIPTION file.\n        ## Namespace imports must really be in Depends.\n        res <- .check_package_depends(pkgdir, R_check_force_suggests,\n                                      check_incoming, ignore_vignettes)\n        if(any(lengths(res) > 0L)) {\n            out <- format(res)\n            allowed <- c(\"suggests_but_not_installed\",\n                         \"enhances_but_not_installed\",\n                         \"many_depends\",\n                         \"skipped\",\n                         \"hdOnly\",\n                         if(!check_incoming) \"bad_engine\")\n            if(!all(names(res) %in% allowed)) {\n                errorLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                if(length(res$suggested_but_not_installed))\n                   wrapLog(\"The suggested packages are required for\",\n                           \"a complete check.\\n\",\n                           \"Checking can be attempted without them\",\n                           \"by setting the environment variable\",\n                           \"_R_CHECK_FORCE_SUGGESTS_\",\n                           \"to a false value.\\n\\n\")\n                wrapLog(msg_DESCRIPTION)\n                summaryLog(Log)\n                do_exit(1L)\n            } else {\n                noteLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"))\n            }\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_sources <- function()\n    {\n        checkingLog(Log, \"if this is a source package\")\n        ## <NOTE>\n        ## This check should be adequate, but would not catch a manually\n        ## installed package, nor one installed prior to 1.4.0.\n        ## </NOTE>\n        if (!is.na(desc[\"Built\"])) {\n            errorLog(Log)\n            printLog(Log, \"Only *source* packages can be checked.\\n\")\n            summaryLog(Log)\n            do_exit(1L)\n        } else if (!startsWith(install, \"check\")) {\n            ini <- character()\n            ## Check for package 'src' subdirectories with object\n            ## files (but not if installation was already performed).\n            pat <- \"(a|o|[ls][ao]|sl|obj|dll)\" # Object file/library extensions.\n            any <- FALSE\n            srcd <- file.path(pkgdir, \"src\")\n            if (dir.exists(srcd) &&\n                length(of <- list_files_with_exts(srcd, pat))) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                of <- sub(paste0(\".*/\", file.path(pkgname, \"src\"), \"/\"),\n                          \"\", of)\n                printLog0(Log,\n                          sprintf(\"Subdirectory %s contains apparent object files/libraries\\n\",\n                                  sQuote(file.path(pkgname, \"src\"))),\n                          paste(strwrap(paste(of, collapse = \" \"),\n                                        indent = 2L, exdent = 2L),\n                                collapse = \"\\n\"),\n                          \"\\nObject files/libraries should not be included in a source package.\\n\")\n                ini <- \"\"\n            }\n            ## A submission had src-i386 etc from multi-arch builds\n            ad <- list.dirs(pkgdir, recursive = FALSE)\n            if(thispkg_src_subdirs != \"no\" &&\n               any(ind <- grepl(\"/src-(i386|x64|x86_64|ppc)$\", ad))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(sum(ind),\n                                \"Found the following directory with a name of a multi-arch build directory:\\n\",\n                                \"Found the following directories with names of multi-arch build directories:\\n\",\n                                domain = NA)\n                printLog0(Log,\n                          ini,\n                          msg,\n                          .format_lines_with_indent(basename(ad[ind])),\n                          \"\\n\",\n                          \"Most likely, these were included erroneously.\\n\")\n                ini <- \"\"\n            }\n            if (thispkg_src_subdirs != \"no\" && dir.exists(srcd)) {\n                setwd(srcd)\n                if (!file.exists(\"Makefile\") &&\n                    !file.exists(\"Makefile.win\") &&\n                    !(file.exists(\"Makefile.in\") && spec_install)) {\n                    ## Recognized extensions for sources or headers.\n                    srcfiles <- dir(\".\", all.files = TRUE)\n                    srcfiles <- srcfiles[!dir.exists(srcfiles)]\n                    srcfiles <- filtergrep(\n                        \"(\\\\.([cfmCM]|cc|cpp|f90|f95|mm|h|o|so)$|^Makevars|-win\\\\.def|^install\\\\.libs\\\\.R$)\",\n                        srcfiles)\n                    if (length(srcfiles)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        msg <- c(ini,\n                                 paste(\"Subdirectory\",\n                                       sQuote(\"src\"),\n                                       \"contains:\"),\n                                 strwrap(paste(srcfiles, collapse = \" \"),\n                                         indent = 2, exdent = 2),\n                                 strwrap(\"These are unlikely file names for src files.\"),\n                                 \"\")\n                        printLog0(Log, paste(msg, collapse = \"\\n\"))\n                        ini <- \"\"\n                    }\n                }\n                setwd(startdir)\n            }\n            ## All remaining checks give notes and not warnings.\n            if(length(ini))\n                ini <- c(\"\",\n                         \"In addition to the above warning(s), found the following notes:\",\n                         \"\")\n            files <- list.files(pkgdir, recursive = TRUE)\n            ## Check for object files not directly in src.\n            ## (Note that the above does not look for object files in\n            ## subdirs of src.)\n            bad <- files[grepl(sprintf(\"\\\\.%s$\", pat), basename(files))]\n            bad <- bad[dirname(bad) != \"src\" |\n                       dirname(dirname(bad)) != \".\"]\n            if(length(bad)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                msg <- c(ini,\n                         \"Found the following apparent object files/libraries:\",\n                         strwrap(paste(bad, collapse = \" \"),\n                                 indent = 2L, exdent = 2L),\n                         \"Object files/libraries should not be included in a source package.\\n\")\n                printLog0(Log, paste(msg, collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            ## Check for installed copies of the package in some subdir.\n            files <- files[basename(dirname(files)) == \"Meta\"]\n            if(length(files) &&\n               all(!is.na(match(c(\"package.rds\", \"hsearch.rds\"),\n                                basename(files))))) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                msg <- c(ini,\n                         sprintf(\"Subdirectory %s seems to contain an installed version of the package.\\n\",\n                                 sQuote(dirname(dirname(files[1L])))))\n                printLog0(Log, paste(msg, collapse = \"\\n\"))\n            }\n            if (!any) resultLog(Log, \"OK\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    do_exit <-\n\tif(no.q)\n\t    function(status) (if(status) stop else message)(\n\t\t\".check_packages() exit status \", status)\n\telse\n\t    function(status) q(\"no\", status = status, runLast = FALSE)\n\n    maybe_exit <- function(status = 1L) {\n\tif (R_check_exit_on_first_error) {\n\t    printLog(Log, \"NOTE:  Quitting check on first error.\\n\")\n\t    summaryLog(Log)\n\t    do_exit(status)\n\t}\n    }\n\n    Usage <- function() {\n        cat(\"Usage: R CMD check [options] pkgs\",\n            \"\",\n            \"Check R packages from package sources, which can be directories or\",\n            \"package 'tar' archives with extension '.tar.gz', '.tar.bz2',\",\n            \"'.tar.xz' or '.tgz'.\",\n            \"\",\n            \"A variety of diagnostic checks on directory structure, index and\",\n            \"control files are performed.  The package is installed into the log\",\n            \"directory and production of the package PDF manual is tested.\",\n            \"All examples and tests provided by the package are tested to see if\",\n            \"they run successfully.  By default code in the vignettes is tested,\",\n            \"as is re-building the vignette PDFs.\",\n            \"\",\n            \"Options:\",\n            \"  -h, --help\t\tprint short help message and exit\",\n            \"  -v, --version\t\tprint version info and exit\",\n            \"  -l, --library=LIB     library directory used for test installation\",\n            \"\t\t\tof packages (default is outdir)\",\n            \"  -o, --output=DIR      directory for output, default is current directory.\",\n            \"\t\t\tLogfiles, R output, etc. will be placed in 'pkg.Rcheck'\",\n            \"\t\t\tin this directory, where 'pkg' is the name of the\",\n            \"\t\t\tchecked package\",\n            \"      --no-clean        do not clean 'outdir' before using it\",\n            \"      --no-codoc        do not check for code/documentation mismatches\",\n            \"      --no-examples     do not run the examples in the Rd files\",\n            \"      --no-install      skip installation and associated tests\",\n            \"      --no-tests        do not run code in 'tests' subdirectory\",\n            \"      --no-manual       do not produce the PDF manual\",\n            \"      --no-vignettes    do not run R code in vignettes nor build outputs\",\n            \"      --no-build-vignettes    do not build vignette outputs\",\n            \"      --ignore-vignettes    skip all tests on vignettes\",\n            \"      --run-dontrun     do run \\\\dontrun sections in the Rd files\",\n            \"      --run-donttest    do run \\\\donttest sections in the Rd files\",\n            \"      --use-gct         use 'gctorture(TRUE)' when running examples/tests\",\n            \"      --use-valgrind    use 'valgrind' when running examples/tests/vignettes\",\n            \"      --timings         record timings for examples\",\n            \"      --install-args=\tcommand-line args to be passed to INSTALL\",\n\t    \"      --test-dir=       look in this subdirectory for test scripts (default tests)\",\n            \"      --no-stop-on-test-error   do not stop running tests after first error\",\n            \"      --check-subdirs=default|yes|no\",\n            \"\t\t\trun checks on the package subdirectories\",\n            \"\t\t\t(default is yes for a tarball, no otherwise)\",\n            \"      --as-cran         select customizations similar to those used\",\n            \"                        for CRAN incoming checking\",\n            \"\",\n            \"The following options apply where sub-architectures are in use:\",\n            \"      --extra-arch      do only runtime tests needed for an additional\",\n            \"                        sub-architecture.\",\n            \"      --multiarch       do runtime tests on all installed sub-archs\",\n            \"      --no-multiarch    do runtime tests only on the main sub-architecture\",\n            \"      --force-multiarch run tests on all sub-archs even for packages\",\n            \"                        with no compiled code\",\n            \"\",\n            \"By default, all test sections are turned on.\",\n            \"\",\n            \"Report bugs at <https://bugs.R-project.org>.\", sep=\"\\n\")\n    }\n\n###--- begin{.check_packages()} \"main\" ---\n\n    options(showErrorCalls=FALSE, warn = 1)\n\n    ## Read in check environment file.\n    Renv <- Sys.getenv(\"R_CHECK_ENVIRON\", unset = NA_character_)\n    if(!is.na(Renv)) {\n        ## Do not read any check environment file if R_CHECK_ENVIRON is\n        ## set to empty of something non-existent.\n        if(nzchar(Renv) && file.exists(Renv)) readRenviron(Renv)\n    } else {\n        ## Read in ~/.R/check.Renviron[.rarch] (if it exists).\n        rarch <- .Platform$r_arch\n        if (nzchar(rarch) &&\n            file.exists(Renv <- paste0(\"~/.R/check.Renviron.\", rarch)))\n            readRenviron(Renv)\n        else if (file.exists(Renv <- \"~/.R/check.Renviron\"))\n            readRenviron(Renv)\n    }\n\n    td0 <- as.numeric(Sys.getenv(\"_R_CHECK_TIMINGS_\"))\n    if (is.na(td0)) td0 <- Inf\n\n    ## A user might have turned on JIT compilation.  That does not\n    ## work well, so mostly disable it.\n    jit <- Sys.getenv(\"R_ENABLE_JIT\")\n    jitstr <- if(nzchar(jit)) {\n        Sys.setenv(R_ENABLE_JIT = \"0\")\n        paste0(\"R_ENABLE_JIT=\", jit)\n    } else character()\n\n    if (is.null(args)) {\n        args <- commandArgs(TRUE)\n        ## it seems that splits on spaces, so try harder.\n        args <- paste(args, collapse=\" \")\n        args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]\n    }\n\n    clean <- TRUE\n    do_codoc <- TRUE\n    do_examples <- TRUE\n    do_install_arg <- TRUE; install <- \"\"\n    do_tests <- TRUE\n    do_vignettes <- TRUE\n    do_build_vignettes <- TRUE\n    ignore_vignettes <- FALSE\n    do_manual <- TRUE\n    use_gct <- FALSE\n    use_valgrind <- FALSE\n    do_timings <- FALSE\n    install_args <- NULL\n    test_dir <- \"tests\"\n    check_subdirs <- \"\"           # defaults to R_check_subdirs_strict\n    extra_arch <- FALSE\n    spec_install <- FALSE\n    multiarch <- NA\n    force_multiarch <- FALSE\n    as_cran <- FALSE\n    run_dontrun <- FALSE\n    run_donttest <- FALSE\n    stop_on_test_error <- TRUE\n\n    libdir <- \"\"\n    outdir <- \"\"\n    pkgs <- character()\n    while(length(args)) {\n        a <- args[1L]\n        if (a %in% c(\"-h\", \"--help\")) {\n            Usage()\n            do_exit(0L)\n        }\n        else if (a %in% c(\"-v\", \"--version\")) {\n            cat(\"R add-on package check: \",\n                R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],\n                \" (r\", R.version[[\"svn rev\"]], \")\\n\", sep = \"\")\n            cat(\"\",\n                \"Copyright (C) 1997-2017 The R Core Team.\",\n                \"This is free software; see the GNU General Public License version 2\",\n                \"or later for copying conditions.  There is NO warranty.\",\n                sep=\"\\n\")\n            do_exit(0L)\n        } else if (a == \"-o\") {\n            if (length(args) >= 2L) {outdir <- args[2L]; args <- args[-1L]}\n            else stop(\"-o option without value\", call. = FALSE)\n        } else if (substr(a, 1, 9) == \"--output=\") {\n            outdir <- substr(a, 10, 1000)\n        } else if (a == \"-l\") {\n            if (length(args) >= 2L) {libdir <- args[2L]; args <- args[-1L]}\n            else stop(\"-l option without value\", call. = FALSE)\n        } else if (substr(a, 1, 10) == \"--library=\") {\n            libdir <- substr(a, 11, 1000)\n        } else if (a == \"--no-clean\") {\n            clean  <- FALSE\n        } else if (a == \"--no-codoc\") {\n            do_codoc  <- FALSE\n        } else if (a == \"--no-examples\") {\n            do_examples  <- FALSE\n        } else if (a == \"--no-install\") {\n            do_install_arg  <- FALSE\n        } else if (substr(a, 1, 10) == \"--install=\") {\n            install <- substr(a, 11, 1000)\n        } else if (a == \"--no-tests\") {\n            do_tests  <- FALSE\n        } else if (a == \"--no-build-vignettes\") {\n            do_build_vignettes  <- FALSE\n        } else if (a == \"--no-rebuild-vignettes\") { # pre-3.0.0 version\n            stop(\"'--no-rebuild-vignettes' is defunct: use '--no-build-vignettes' instead\",\n                 call. = FALSE, domain = NA)\n        } else if (a == \"--no-vignettes\") {\n            do_vignettes  <- FALSE\n        } else if (a == \"--ignore-vignettes\") {\n            ignore_vignettes  <- TRUE\n            do_vignettes  <- FALSE\n            do_build_vignettes  <- FALSE\n\t} else if (a == \"--no-manual\") {\n            do_manual  <- FALSE\n        } else if (a == \"--no-latex\") {\n            stop(\"'--no-latex' is defunct: use '--no-manual' instead\",\n                 call. = FALSE, domain = NA)\n        } else if (a == \"--run-dontrun\") {\n            run_dontrun  <- TRUE\n        } else if (a == \"--run-donttest\") {\n            run_donttest  <- TRUE\n        } else if (a == \"--use-gct\") {\n            use_gct  <- TRUE\n        } else if (a == \"--use-valgrind\") {\n            use_valgrind  <- TRUE\n        } else if (a == \"--timings\") {\n            do_timings  <- TRUE\n        } else if (substr(a, 1, 15) == \"--install-args=\") {\n            install_args <- substr(a, 16, 1000)\n\t} else if (substr(a, 1, 11) == \"--test-dir=\") {\n\t    test_dir <- substr(a, 12, 1000)\n        } else if (substr(a, 1, 16) == \"--check-subdirs=\") {\n            check_subdirs <- substr(a, 17, 1000)\n        } else if (a == \"--extra-arch\") {\n            extra_arch  <- TRUE\n        } else if (a == \"--multiarch\") {\n            multiarch  <- TRUE\n        } else if (a == \"--no-multiarch\") {\n            multiarch  <- FALSE\n        } else if (a == \"--force-multiarch\") {\n            force_multiarch  <- TRUE\n        } else if (a == \"--as-cran\") {\n            as_cran  <- TRUE\n\t} else if (a == \"--no-stop-on-test-error\") {\n\t    stop_on_test_error <- FALSE\n        } else if (substr(a, 1, 9) == \"--rcfile=\") {\n            warning(\"configuration files are not supported as from R 2.12.0\")\n        } else if (substr(a, 1, 1) == \"-\") {\n            message(\"Warning: unknown option \", sQuote(a))\n        } else pkgs <- c(pkgs, a)\n        args <- args[-1L]\n    }\n\n    ## record some of the options used.\n    opts <- character()\n    if (install == \"fake\") opts <- c(opts, \"--install=fake\")\n    if (!do_install_arg) opts <- c(opts, \"--no-install\")\n    if (install == \"no\") {\n        opts <- c(opts, \"--install=no\")\n        do_install_arg <- FALSE\n    }\n    if (run_dontrun) opts <- c(opts, \"--run-dontrun\")\n    if (run_donttest) opts <- c(opts, \"--run-donttest\")\n    opts0 <- opts # other options are added later.\n\n    if (install == \"fake\") {\n        ## If we fake installation, then we cannot *run* any code.\n        do_examples <- do_tests <- do_vignettes <- do_build_vignettes <- 0\n        spec_install <- TRUE\n        multiarch <- FALSE\n    }\n\n    install_log_path <- \"\"\n    if(startsWith(install, \"check\")) {\n        ## Expand relative to absolute if possible.\n        install_log_path <-\n            tryCatch(file_path_as_absolute(substr(install, 7L, 1000L)),\n                     error = function(e) \"\")\n    }\n\n    if (!isFALSE(multiarch)) {\n        ## see if there are multiple installed architectures, and if they work\n        if (WINDOWS) {\n            ## always has sub-archs as from R 2.12.0.\n            ## usually if two are installed, it was done on a 64-bit OS,\n            ## but the filesystem might be shared betweeen OSes.\n            f <- dir(file.path(R.home(), \"bin\"))\n            archs <- f[f %in% c(\"i386\", \"x64\")]\n            ## if we have x64, can only run it on a 64-bit OS\n            if (length(archs) > 1L && !grepl(\"x64\", utils::win.version()))\n                archs <- \"i386\"\n        } else {\n            wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))\n            archs <- Sys.glob(\"*\")\n            setwd(wd2)\n            if (length(archs) > 1L)\n                for (arch in archs) {\n                    if (arch == rarch) next\n                    cmd <- paste0(file.path(R.home(), \"bin\", \"R\"),\n                                  \" --arch=\", arch,\n                                  \" --version > /dev/null\")\n                    if (system(cmd)) archs <- archs[archs != arch]\n                }\n        }\n        if (length(archs) <= 1L && isTRUE(multiarch))\n            warning(\"'--multiarch' specified with only one usable sub-architecture\",\n                    call.=FALSE, immediate. = TRUE)\n        multiarch <- length(archs) > 1L\n    }\n\n\n    ## Use system default unless explicitly specified otherwise.\n    Sys.setenv(R_DEFAULT_PACKAGES=\"\")\n\n    ## Configurable variables\n    R_check_use_install_log <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_USE_INSTALL_LOG_\", \"TRUE\"))\n    R_check_subdirs_nocase <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_SUBDIRS_NOCASE_\", \"TRUE\"))\n    R_check_all_non_ISO_C <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_ALL_NON_ISO_C_\", \"FALSE\"))\n    R_check_subdirs_strict <-\n        Sys.getenv(\"_R_CHECK_SUBDIRS_STRICT_\", \"default\")\n    R_check_Rd_contents <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_CONTENTS_\", \"TRUE\"))\n    R_check_Rd_line_widths <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_LINE_WIDTHS_\", \"FALSE\"))\n    R_check_Rd_style <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_STYLE_\", \"TRUE\"))\n    R_check_Rd_xrefs <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_XREFS_\", \"TRUE\"))\n    R_check_use_codetools <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_USE_CODETOOLS_\", \"TRUE\"))\n    ## However, we cannot use this if we did not install the recommended\n    ## packages.\n    if(R_check_use_codetools) {\n        tmp <- tryCatch(find.package('codetools'), error = identity)\n        if(inherits(tmp, \"error\")) R_check_use_codetools <- FALSE\n    }\n    R_check_executables <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_EXECUTABLES_\", \"TRUE\"))\n    R_check_executables_exclusions <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_EXECUTABLES_EXCLUSIONS_\", \"TRUE\"))\n    R_check_permissions <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_PERMISSIONS_\",\n                                         as.character(.Platform$OS.type == \"unix\")))\n    R_check_dot_internal <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DOT_INTERNAL_\", \"TRUE\"))\n    R_check_depr_def <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DEPRECATED_DEFUNCT_\", \"FALSE\"))\n    R_check_ascii_code <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_ASCII_CODE_\", \"TRUE\"))\n    R_check_ascii_data <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_ASCII_DATA_\", \"TRUE\"))\n     R_check_compact_data <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_COMPACT_DATA_\", \"TRUE\"))\n    R_check_vc_dirs <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_VC_DIRS_\", \"FALSE\"))\n    R_check_pkg_sizes <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_PKG_SIZES_\", \"TRUE\")) &&\n        nzchar(Sys.which(\"du\"))\n    R_check_doc_sizes <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_DOC_SIZES_\", \"TRUE\")) &&\n        nzchar(Sys.which(Sys.getenv(\"R_QPDF\", \"qpdf\")))\n    R_check_doc_sizes2 <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_DOC_SIZES2_\", \"FALSE\"))\n    R_check_code_assign_to_globalenv <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_ASSIGN_TO_GLOBALENV_\",\n                                         \"FALSE\"))\n    R_check_code_attach <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_ATTACH_\", \"FALSE\"))\n    R_check_code_data_into_globalenv <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_DATA_INTO_GLOBALENV_\",\n                                         \"FALSE\"))\n\n    ## Only relevant when the package is loaded, thus installed.\n    R_check_suppress_RandR_message <-\n        do_install_arg && config_val_to_logical(Sys.getenv(\"_R_CHECK_SUPPRESS_RANDR_MESSAGE_\", \"TRUE\"))\n    R_check_force_suggests <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_FORCE_SUGGESTS_\", \"TRUE\"))\n    R_check_skip_tests_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_TESTS_ARCH_\"), \",\")[[1]])\n    R_check_skip_examples_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_EXAMPLES_ARCH_\"), \",\")[[1]])\n    R_check_skip_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_ARCH_\"), \",\")[[1]])\n    R_check_unsafe_calls <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_UNSAFE_CALLS_\", \"TRUE\"))\n    R_check_depends_only <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DEPENDS_ONLY_\", \"FALSE\"))\n    R_check_suggests_only <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_SUGGESTS_ONLY_\", \"FALSE\"))\n    R_check_FF <- Sys.getenv(\"_R_CHECK_FF_CALLS_\", \"true\")\n    R_check_FF_DUP <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_FF_DUP_\", \"TRUE\"))\n    R_check_toplevel_files <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_TOPLEVEL_FILES_\", \"FALSE\"))\n    R_check_exit_on_first_error <-\n\tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_EXIT_ON_FIRST_ERROR_\", \"FALSE\"))\n    R_check_vignettes_skip_run_maybe <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_VIGNETTES_SKIP_RUN_MAYBE_\",\n                                         \"FALSE\"))\n    R_check_serialization <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_SERIALIZATION_\", \"FALSE\"))\n\n    if (!nzchar(check_subdirs)) check_subdirs <- R_check_subdirs_strict\n\n    if (as_cran) {\n        if (extra_arch) {\n            message(\"'--as-cran' turns off '--extra-arch'\")\n            extra_arch <- FALSE\n        }\n        Sys.setenv(\"_R_CHECK_TIMINGS_\" = \"10\")\n        Sys.setenv(\"_R_CHECK_INSTALL_DEPENDS_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_NO_RECOMMENDED_\" = \"TRUE\")\n        Sys.setenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_DOT_FIRSTLIB_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_PACKAGES_USED_CRAN_INCOMING_NOTES_\" = \"TRUE\")\n        prev <- Sys.getenv(\"_R_CHECK_LIMIT_CORES_\", NA_character_)\n        if(is.na(prev)) Sys.setenv(\"_R_CHECK_LIMIT_CORES_\" = \"TRUE\")\n        prev <- Sys.getenv(\"_R_CHECK_SCREEN_DEVICE_\", NA_character_)\n        if(is.na(prev)) Sys.setenv(\"_R_CHECK_SCREEN_DEVICE_\" = \"stop\")\n        Sys.setenv(\"_R_CHECK_CODE_USAGE_VIA_NAMESPACES_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_CODE_USAGE_WITH_ONLY_BASE_ATTACHED_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_S3_METHODS_NOT_REGISTERED_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_PACKAGE_DATASETS_SUPPRESS_NOTES_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_NATIVE_ROUTINE_REGISTRATION_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_NO_STOP_ON_TEST_ERROR_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_PRAGMAS_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_COMPILATION_FLAGS_\" = \"TRUE\")\n        if(!nzchar(Sys.getenv(\"_R_CHECK_R_DEPENDS_\")))\n            Sys.setenv(\"_R_CHECK_R_DEPENDS_\" = \"warn\")\n        ## until this is tested on Windows\n        Sys.setenv(\"_R_CHECK_R_ON_PATH_\" = ifelse(WINDOWS, \"FALSE\", \"TRUE\"))\n        R_check_vc_dirs <- TRUE\n        R_check_executables_exclusions <- FALSE\n        R_check_doc_sizes2 <- TRUE\n        R_check_suggests_only <- TRUE\n        R_check_code_assign_to_globalenv <- TRUE\n        R_check_code_attach <- TRUE\n        R_check_code_data_into_globalenv <- TRUE\n        R_check_depr_def <- TRUE\n        R_check_Rd_line_widths <- TRUE\n        R_check_FF <- \"registration\"\n        do_timings <- TRUE\n        R_check_toplevel_files <- TRUE\n        R_check_vignettes_skip_run_maybe <- TRUE\n        R_check_serialization <- TRUE\n    } else {\n        ## do it this way so that INSTALL produces symbols.rds\n        ## when called from check but not in general.\n        if(is.na(Sys.getenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\",\n                            NA_character_)))\n            Sys.setenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\" = \"TRUE\")\n    }\n\n\n    if (extra_arch) {\n        R_check_Rd_contents <- R_check_all_non_ISO_C <-\n            R_check_Rd_xrefs <- R_check_use_codetools <- R_check_Rd_style <-\n                R_check_executables <- R_check_permissions <-\n                    R_check_dot_internal <- R_check_ascii_code <-\n                    \tR_check_ascii_data <- R_check_compact_data <-\n                            R_check_pkg_sizes <- R_check_doc_sizes <-\n                                R_check_doc_sizes2 <-\n                                    R_check_unsafe_calls <-\n                                        R_check_toplevel_files <- FALSE\n        R_check_Rd_line_widths <- FALSE\n    }\n\n    startdir <- getwd()\n    if (is.null(startdir))\n        stop(\"current working directory cannot be ascertained\")\n    if (!nzchar(outdir)) outdir <- startdir\n    setwd(outdir)\n    outdir <- getwd()\n    setwd(startdir)\n\n    R_LIBS <- Sys.getenv(\"R_LIBS\")\n    arg_libdir <- libdir\n    if (nzchar(libdir)) {\n        setwd(libdir)\n        libdir <- getwd()\n        Sys.setenv(R_LIBS = path_and_libPath(libdir, R_LIBS))\n        setwd(startdir)\n    }\n\n    ## all the analysis code is run with --slave\n    ## examples and tests are not.\n    R_opts <- \"--vanilla\"\n    R_opts2 <- \"--vanilla --slave\"\n    ## do run Renviron.site for some multiarch runs\n    ## We set R_ENVIRON_USER to skip .Renviron files.\n    R_opts3 <- \"--no-site-file --no-init-file --no-save --no-restore\"\n    R_opts4 <- \"--no-site-file --no-init-file --no-save --no-restore --slave\"\n    env0 <- if(WINDOWS) \"R_ENVIRON_USER='no_such_file'\" else \"R_ENVIRON_USER=''\"\n\n    msg_DESCRIPTION <-\n        c(\"See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.\\n\")\n\n    if (!length(pkgs)) {\n        message(\"Error: no packages were specified\")\n        do_exit(1L)\n    }\n\n    ## This is the main loop over all packages to be checked.\n    for (pkg in pkgs) {\n        ## pkg should be the path to the package root source\n        ## directory, either absolute or relative to startdir.\n        ## As from 2.1.0 it can also be a tarball\n\n        ## The previous package may have set do_install to FALSE\n        do_install <- do_install_arg\n        no_examples <- FALSE\n\n        ## $pkgdir is the corresponding absolute path.\n        ## pkgname0 is the name of the top-level directory\n        ## (and often the name of the package).\n        setwd(startdir)\n        pkg <- sub(\"/$\", \"\", pkg)       # strip any trailing '/'\n        pkgname0 <- basename(pkg)\n        is_ascii <- FALSE\n\n        thispkg_subdirs <- check_subdirs\n        ## is this a tar archive?\n        if (dir.exists(pkg)) {\n            istar <- FALSE\n            if (thispkg_subdirs == \"default\") thispkg_subdirs <- \"no\"\n        } else if (file.exists(pkg)) {\n            istar <- TRUE\n            if (thispkg_subdirs == \"default\") thispkg_subdirs <- \"yes-maybe\"\n            pkgname0 <- sub(\"\\\\.(tar\\\\.gz|tgz|tar\\\\.bz2|tar\\\\.xz)$\", \"\", pkgname0)\n            pkgname0 <- sub(\"_[0-9.-]*$\", \"\", pkgname0)\n        } else {\n            warning(sQuote(pkg), \" is neither a file nor directory, skipping\\n\",\n                    domain = NA, call. = FALSE, immediate. = TRUE)\n            next\n        }\n        pkgoutdir <- file.path(outdir, paste0(pkgname0, \".Rcheck\"))\n        if (clean && dir.exists(pkgoutdir)) {\n            unlink(pkgoutdir, recursive = TRUE)\n            if(WINDOWS) Sys.sleep(0.5) # allow for antivirus interference\n        }\n        dir.create(pkgoutdir, mode = \"0755\")\n        if (!dir.exists(pkgoutdir)) {\n            message(sprintf(\"ERROR: cannot create check dir %s\", sQuote(pkgoutdir)))\n            do_exit(1L)\n        }\n\n        Log <- newLog(file.path(pkgoutdir, \"00check.log\"))\n\n        messageLog(Log, \"using log directory \", sQuote(pkgoutdir))\n        messageLog(Log, \"using \", R.version.string)\n        messageLog(Log, \"using platform: \", R.version$platform,\n                   \" (\", 8*.Machine$sizeof.pointer, \"-bit)\")\n        charset <-\n            if (l10n_info()[[\"UTF-8\"]]) \"UTF-8\" else utils::localeToCharset()\n        messageLog(Log, \"using session charset: \", charset)\n        is_ascii <- charset == \"ASCII\"\n\n        if(config_val_to_logical(Sys.getenv(\"_R_CHECK_R_ON_PATH_\", \"FALSE\")))\n            add_dummies(file_path_as_absolute(pkgoutdir), Log)\n\n        if (istar) {\n            dir <- file.path(pkgoutdir, \"00_pkg_src\")\n            dir.create(dir, mode = \"0755\")\n            if (!dir.exists(dir)) {\n                checkingLog(Log, \"whether tarball can be unpacked\")\n                errorLog(Log, sprintf(\"cannot create %s\", sQuote(dir)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            ## force the use of internal untar unless over-ridden\n            ## so e.g. .tar.xz works everywhere\n            if (utils::untar(pkg, exdir = dir,\n                             tar = Sys.getenv(\"R_INSTALL_TAR\", \"internal\"))) {\n                checkingLog(Log, \"whether tarball can be unpacked\")\n                errorLog(Log, sprintf(\"cannot unpack %s\", sQuote(pkg)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            size <- file.info(pkg)$size\n            Sys.setenv(\"_R_CHECK_SIZE_OF_TARBALL_\" = size)\n            ## this assumes foo_x.y.tar.gz unpacks to foo, but we are about\n            ## to test that.\n            pkg <- file.path(dir, pkgname0)\n        }\n        if (!dir.exists(pkg)) {\n            checkingLog(Log, \"package directory\")\n            errorLog(Log,\n                     gettextf(\"package directory %s does not exist\",\n                              sQuote(pkg)))\n            summaryLog(Log)\n            do_exit(1L)\n        }\n        setwd(pkg)\n        pkgdir <- getwd()\n        thispkg_src_subdirs <- thispkg_subdirs\n        if (thispkg_src_subdirs == \"yes-maybe\") {\n            ## now see if there is a 'configure' file\n            ## configure files are only used if executable, but\n            ## -x is always false on Windows.\n            if (WINDOWS) {\n                if (file_test(\"-f\", \"configure\")) thispkg_src_subdirs <- \"no\"\n            } else {\n                if (file_test(\"-x\", \"configure\")) thispkg_src_subdirs <- \"no\"\n            }\n        }\n        setwd(startdir)\n\n        .unpack.time <- Sys.time()\n\n        ## report options used\n        opts <- opts0\n        if (!do_codoc) opts <- c(opts, \"--no-codoc\")\n        if (!do_examples && !spec_install) opts <- c(opts, \"--no-examples\")\n        if (!do_tests && !spec_install) opts <- c(opts, \"--no-tests\")\n        if (!do_manual && !spec_install) opts <- c(opts, \"--no-manual\")\n        if (ignore_vignettes) opts <- c(opts, \"--ignore-vignettes\")\n        else {\n            if (!do_vignettes && !spec_install)\n                opts <- c(opts, \"--no-vignettes\")\n            if (!do_build_vignettes && !spec_install)\n                opts <- c(opts, \"--no-build-vignettes\")\n        }\n        if (use_gct) opts <- c(opts, \"--use-gct\")\n        if (use_valgrind) opts <- c(opts, \"--use-valgrind\")\n\tif (!stop_on_test_error) opts <- c(opts, \"--no-stop-on-test-error\")\n        if (as_cran) opts <- c(opts, \"--as-cran\")\n        if (length(opts) > 1L)\n            messageLog(Log, \"using options \", sQuote(paste(opts, collapse=\" \")))\n        else if (length(opts) == 1L)\n            messageLog(Log, \"using option \", sQuote(opts))\n\n        if(identical(config_val_to_logical(Sys.getenv(\"_R_CHECK_NO_STOP_ON_TEST_ERROR_\",\n                                                      \"FALSE\")),\n                     TRUE)) {\n            stop_on_test_error <- FALSE\n        }\n\n        if (!nzchar(libdir)) { # otherwise have set R_LIBS above\n            libdir <- pkgoutdir\n            Sys.setenv(R_LIBS = path_and_libPath(libdir, R_LIBS))\n        }\n        if (WINDOWS && grepl(\" \", libdir)) # need to avoid spaces in libdir\n            libdir <- gsub(\"\\\\\", \"/\", utils::shortPathName(libdir), fixed = TRUE)\n\n        ## Package sources from the R distribution are special.  They\n        ## have a 'DESCRIPTION.in' file (instead of 'DESCRIPTION'),\n        ## with Version and License fields containing '@VERSION@' for\n        ## substitution by configure.  Earlier bundles had packages\n        ## containing DESCRIPTIION.in, hence the extra check for\n        ## Makefile.in.\n\n        is_base_pkg <- is_rec_pkg <- FALSE\n        if (file.exists(f <- file.path(pkgdir, \"DESCRIPTION.in\")) &&\n            file.exists(file.path(pkgdir, \"Makefile.in\"))) {\n            desc <- try(read.dcf(f))\n            if (inherits(desc, \"try-error\") || !length(desc)) {\n                errorLog(Log, \"File DESCRIPTION exists but is not in correct format\")\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            desc <- desc[1L, ]\n            if (identical(desc[\"Priority\"], c(Priority = \"base\"))) {\t# Priority might be missing\n                messageLog(Log, \"looks like \", sQuote(pkgname0),\n                           \" is a base package\")\n                messageLog(Log, \"skipping installation test\")\n                is_base_pkg <- TRUE\n                pkgname <- desc[\"Package\"] # should be same as pkgname0\n            }\n        }\n\n        this_multiarch <- multiarch\n        if (!is_base_pkg) {\n            desc <- check_description()\n            pkgname <- desc[\"Package\"]\n            is_rec_pkg <- identical(desc[\"Priority\"], c(Priority = \"recommended\"))\n\n            ## Check if we have any hope of installing\n            OS_type <- desc[\"OS_type\"]\n            if (do_install && !is.na(OS_type)) {\n                if (WINDOWS && OS_type != \"windows\") {\n                    messageLog(Log, \"will not attempt to install this package on Windows\")\n                    do_install <- FALSE\n                }\n                if (!WINDOWS && OS_type == \"windows\") {\n                    messageLog(Log, \"this is a Windows-only package, skipping installation\")\n                    do_install <- FALSE\n                }\n            } else OS_type <- NA\n\n            check_incoming <- Sys.getenv(\"_R_CHECK_CRAN_INCOMING_\", \"NA\")\n            check_incoming <- if(check_incoming == \"NA\") as_cran else {\n                config_val_to_logical(check_incoming)\n            }\n            check_incoming_remote <- Sys.getenv(\"_R_CHECK_CRAN_INCOMING_REMOTE_\", \"NA\")\n            check_incoming_remote <- if(check_incoming_remote == \"NA\") as_cran else {\n                config_val_to_logical(check_incoming_remote)\n            }\n            if (check_incoming) check_CRAN_incoming(!check_incoming_remote)\n\n            ## <NOTE>\n            ## We want to check for dependencies early, since missing\n            ## dependencies may make installation fail, and in any case we\n            ## give up if they are missing.  But we don't check them if\n            ## we are not going to install and hence not run any code.\n            ## </NOTE>\n            if (do_install) {\n                topfiles0 <- dir(pkgdir)\n                check_dependencies()\n            } else topfiles0 <- NULL\n\n            check_sources()\n            checkingLog(Log, \"if there is a namespace\")\n            ## careful: we need a case-sensitive match\n            if (\"NAMESPACE\" %in% dir(pkgdir))\n                resultLog(Log, \"OK\")\n            else  if (file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n                errorLog(Log,\n                       \"File NAMESPACE does not exist but there is a case-insenstiive match.\")\n                summaryLog(Log)\n                do_exit(1L)\n            } else if (dir.exists(file.path(pkgdir, \"R\"))) {\n                errorLog(Log)\n                wrapLog(\"All packages need a namespace as from R 3.0.0.\\n\",\n                        \"R CMD build will produce a suitable starting point,\",\n                        \"but it is better to handcraft a NAMESPACE file.\")\n\t        maybe_exit(1L)\n            } else {\n                noteLog(Log)\n                wrapLog(\"Packages without R code can be installed without\",\n                        \"a NAMESPACE file, but it is cleaner to add\",\n                        \"an empty one.\")\n            }\n\n            ## we need to do this before installation\n            if (R_check_executables) check_executables()\n            ## (Alternatively, could use .unpack.time.)\n\n            check_dot_files(check_incoming)\n\n\t    setwd(pkgdir)\n            allfiles <- check_file_names()\n            if (R_check_permissions) check_permissions(allfiles)\n            if (!is_base_pkg && R_check_serialization) {\n                ## We should not not do this if there is a dependence\n                ## on R >= 3.5.0, and we have to check that on the sources.\n                db <- .read_description(\"DESCRIPTION\")\n                Rver <-.split_description(db, verbose = TRUE)$Rdepends2\n                if(length(Rver) && Rver[[1L]]$op == \">=\"\n                   && Rver[[1L]]$version >= \"3.5.0\") {\n                       ## skip\n                } else check_serialization(allfiles)\n            }\n\t    setwd(startdir)\n\n            ## record this before installation.\n            ## <NOTE>\n            ## Could also teach the code to check 'src/Makevars[.in]'\n            ## files to use .unpack.time.\n            ## (But we want to know if the sources contain\n            ## 'src/Makevars' and INSTALL re-creates this.)\n            ## </NOTE>\n            makevars <-\n                Sys.glob(file.path(pkgdir, \"src\",\n                                   c(\"Makevars.in\", \"Makevars\")))\n            makevars <- basename(makevars)\n\n            if (do_install) {\n                check_install()\n                if(R_check_pkg_sizes) check_install_sizes()\n            }\n            if (multiarch) {\n                if (force_multiarch) inst_archs <- archs\n                else {\n                    ## check which architectures this package is installed for\n                    if (dir.exists(dd <- file.path(libdir, pkgname, \"libs\"))) {\n                        inst_archs <- dir(dd)\n                        ## xlsReadWrite has spurious subdir 'template'\n                        inst_archs <- inst_archs[inst_archs %in% archs]\n                        if (!identical(inst_archs, archs)) {\n                            if (length(inst_archs) > 1)\n\t\t\t\tprintLog0(Log,\n                                          \"NB: this package is only installed for sub-architectures \",\n                                          paste(sQuote(inst_archs), collapse=\", \"), \"\\n\")\n\t\t\t    else {\n\t\t\t\tprintLog0(Log,\n                                          \"NB: this package is only installed for sub-architecture \",\n                                          sQuote(inst_archs), \"\\n\")\n                                if(inst_archs == .Platform$r_arch)\n                                    this_multiarch <- FALSE\n                            }\n                        }\n                    } else this_multiarch <- FALSE  # no compiled code\n                }\n                if (this_multiarch && length(R_check_skip_arch))\n                    inst_archs <- inst_archs %w/o% R_check_skip_arch\n            }\n        } else check_incoming <- FALSE  ## end of if (!is_base_pkg)\n\n        elibs <- if(is_base_pkg) character()\n        else if(R_check_depends_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir)\n        else if(R_check_suggests_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir, suggests = TRUE)\n        else character()\n\n        elibs_tests <- if(is_base_pkg) character()\n        else if(R_check_depends_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir, tests = TRUE)\n        else if(R_check_suggests_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir, suggests = TRUE)\n        else character()\n\n        setwd(startdir)\n        check_pkg(pkgdir, pkgname, pkgoutdir, startdir, libdir, desc,\n                  is_base_pkg, is_rec_pkg, thispkg_subdirs, extra_arch)\n        if (!extra_arch && do_manual) {\n            setwd(pkgoutdir)\n            instdir <- file.path(libdir, pkgname)\n            if (dir.exists(file.path(instdir, \"help\")))\n                check_pkg_manual(instdir, desc[\"Package\"])\n            else\n                check_pkg_manual(pkgdir, desc[\"Package\"])\n        }\n\n        if (!is_base_pkg && check_incoming && no_examples &&\n            dir.exists(file.path(pkgdir, \"R\"))) {\n            tests_dir <- file.path(pkgdir, test_dir)\n            if (dir.exists(tests_dir) &&\n                length(dir(tests_dir, pattern = \"\\\\.(r|R|Rin)$\")))\n                no_examples <- FALSE\n            vigns <- pkgVignettes(dir = pkgdir)\n            if (!is.null(vigns) && length(vigns$docs)) no_examples <- FALSE\n            if (no_examples) {\n                ## figure out if the R code exercises anything\n                ns <- parseNamespaceFile(basename(pkgdir), dirname(pkgdir))\n                if(length(ns$exports) || length(ns$exportPatterns) ||\n                   length(ns$exportMethods) || length(ns$S3methods)) {\n                    checkingLog(Log, \"for code which exercises the package\")\n                    warningLog(Log, \"No examples, no tests, no vignettes\")\n                }\n            }\n        }\n        summaryLog(Log)\n\n        if(config_val_to_logical(Sys.getenv(\"_R_CHECK_CRAN_STATUS_SUMMARY_\",\n                                            \"FALSE\"))) {\n            s <- summarize_CRAN_check_status(pkgname)\n            if(nzchar(s)) {\n                writeLines(c(\"\", s), Log$con)\n            }\n        }\n\n        if(Log$errors > 0L)\n            do_exit(1L)\n\n        closeLog(Log)\n        message(\"\")\n\n    } ## end for (pkg in pkgs)\n\n}\n###--- end{ .check_packages }\n\n.format_lines_with_indent <-\nfunction(x)\n    paste0(\"  \", x, collapse = \"\\n\")\n    ## Hard-wire indent of 2 for now.\n\n### Local variables:\n### mode: R\n### page-delimiter: \"^###[#-]\"\n### End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/Rdll.hide": " BASE_SYM_CACHED\n BINDING_IS_LOCKED\n BM_norm_keep\n BZ2_blockSort\n BZ2_bsInitWrite\n BZ2_bzBuffToBuffCompress@28\n BZ2_bzBuffToBuffDecompress@24\n BZ2_bzCompress@8\n BZ2_bzCompressEnd@4\n BZ2_bzCompressInit@16\n BZ2_bzDecompress@4\n BZ2_bzDecompressEnd@4\n BZ2_bzDecompressInit@12\n BZ2_bzRead@16\n BZ2_bzReadClose@8\n BZ2_bzReadGetUnused@16\n BZ2_bzReadOpen@24\n BZ2_bzWrite@16\n BZ2_bzWriteClose64@28\n BZ2_bzWriteClose@20\n BZ2_bzWriteOpen@20\n BZ2_bz__AssertH__fail\n BZ2_bzclose@4\n BZ2_bzdopen@8\n BZ2_bzerror@8\n BZ2_bzflush@4\n BZ2_bzlibVersion@0\n BZ2_bzopen@8\n BZ2_bzread@12\n BZ2_bzwrite@12\n BZ2_compressBlock\n BZ2_crc32Table\n BZ2_decompress\n BZ2_hbAssignCodes\n BZ2_hbCreateDecodeTables\n BZ2_hbMakeCodeLengths\n BZ2_indexIntoF\n BZ2_rNums\n CPFun\n ConsoleAcceptCmd\n DebugMenuitem\n DefaultPalette\n EhiWakeUp\n EncodeReal2\n HASHASH\n IS_ACTIVE_BINDING\n IS_ASCII\n IS_BYTES\n IS_LATIN1\n IS_SPECIAL_SYMBOL\n IS_UTF8\n InitDynload\n InitParser\n Init_R_Variables\n LOCK_BINDING\n LoadInitFile\n MDIset\n MDIsize\n MainThread\n NO_SPECIAL_SYMBOLS\n PrintUsage\n ProfileEvent\n RExitContext\n R_BCNodeStackBase\n R_BCNodeStackEnd\n R_BCNodeStackTop\n R_BrowseLevel\n R_BrowseLines\n R_BrowserLastCommand\n R_CBoundsCheck\n R_ChooseFile\n R_CollectWarnings\n R_Collected\n R_ColonSymbol\n R_CommentSymbol\n R_ConnIdSymbol\n R_ConsoleIob\n R_CurrentExpr\n R_Decode2Long\n R_DevicesSymbol\n R_DisableNLinBrowser\n R_DotEnvSymbol\n R_ErrorCon\n R_EvalDepth\n R_ExactSymbol\n R_Expressions\n R_Expressions_keep\n R_FileMtime\n R_FinalizeSrcRefState\n R_FreeSEXP\n R_FreeStringBufferL\n R_GCEnabled\n R_GE_VStrHeight\n R_GE_VStrWidth\n R_GE_VText\n R_GetMaxNSize\n R_GetMaxVSize\n R_GetTraceback\n R_GetVarLocSymbol\n R_GetVarLocValue\n R_HandlerStack\n R_HiddenFile\n R_InitReadItemDepth\n R_InitSrcRefState\n R_InitialData\n R_InsertRestartHandlers\n R_Interactive\n R_IoBufferFree\n R_IoBufferGetc\n R_IoBufferInit\n R_IoBufferPutc\n R_IoBufferPuts\n R_IoBufferReadOffset\n R_IoBufferReadReset\n R_IoBufferWriteReset\n R_Is_Running\n R_JumpToContext\n R_KeepSource\n R_LibraryFileName\n R_LoadFromFile\n R_LoadRconsole\n R_Log10\n R_LookupMethod\n R_NHeap\n R_NShowCalls\n R_NSize\n R_Newhashpjw\n R_OpenInitFile\n R_OpenLibraryFile\n R_OpenSiteFile\n R_OpenSysInitFile\n R_OutputCon\n R_PCRE_study\n R_PCRE_use_JIT\n R_PPStackSize\n R_Parse1Buffer\n R_Parse1File\n R_ParseBuffer\n R_ParseConn\n R_ParseErrorCol\n R_ParseErrorFile\n R_ParseFile\n R_PendingPromises\n R_Primitive\n R_Quiet\n R_ReadItemDepth\n R_RecursiveSymbol\n R_RestartStack\n R_RestartToken\n R_ReturnedValue\n R_SaveToFile\n R_SaveToFileV\n R_SessionContext\n R_SetMaxNSize\n R_SetMaxVSize\n R_SetOptionWarn\n R_SetOptionWidth\n R_SetPPSize\n R_SetVarLocValue\n R_SetWin32\n R_ShowErrorCalls\n R_ShowErrorMessages\n R_ShowFiles\n R_ShowWarnCalls\n R_StdinEnc\n R_StringHash\n R_SymbolTable\n R_TextBufferFree\n R_TextBufferGetc\n R_TextBufferInit\n R_TmpvalSymbol\n R_Toplevel\n R_ToplevelContext\n R_UTF8fixslash\n R_UseNamesSymbol\n R_VSize\n R_Verbose\n R_WarnLength\n R_Warnings\n R_WholeSrcrefSymbol\n R_XDRDecodeDouble\n R_XDRDecodeInteger\n R_XDREncodeDouble\n R_XDREncodeInteger\n R_binary\n R_check_locale\n R_cmpfun\n R_compile_pkgs\n R_compress1\n R_compress2\n R_compress3\n R_data_class2\n R_dec_min_exponent\n R_decompress1\n R_decompress2\n R_decompress3\n R_dlsym\n R_doDotCall\n R_do_data_class\n R_do_set_class\n R_dotCallFn\n R_dot_Class\n R_dot_Generic\n R_dot_GenericCallEnv\n R_dot_GenericDefEnv\n R_dot_Group\n R_dot_Methods\n R_fgetc\n R_fixslash\n R_getClockIncrement\n R_getDllTable\n R_getProcTime\n R_getRegisteredRoutines\n R_getS4DataSlot\n R_getSymbolInfo\n R_gmtime\n R_gmtime_r\n R_has_methods\n R_initAsignSymbols\n R_init_base\n R_init_jit_enabled\n R_initialize_bcode\n R_inspect\n R_inspect3\n R_isMissing\n R_is_running\n R_jit_enabled\n R_lazyLoadDBinsertValue\n R_localtime\n R_localtime_r\n R_max_memory\n R_max_num_math_threads\n R_mktime\n R_moduleCdynload\n R_newCurlUrl\n R_newsock\n R_newunz\n R_newurl\n R_num_math_threads\n R_nwarnings\n R_osDynSymbol\n R_possible_dispatch\n R_pretty\n R_restore_globals\n R_run_onexits\n R_seemsOldStyleS4Object\n R_strftime\n R_subset3_dflt\n R_syscall\n R_sysframe\n R_sysfunction\n R_sysparent\n R_timegm\n R_tzname\n R_tzset\n R_tzsetwall\n R_unary\n R_unserialize\n R_warn_partial_match_args\n R_warn_partial_match_attr\n R_warn_partial_match_dollar\n R_wfopen\n Rconn_getline\n Rcons_vprintf\n Rconsolesetwidth\n Rf_AdobeSymbol2ucs2\n Rf_BindDomain\n Rf_CheckFormals\n Rf_CoercionWarning\n Rf_ComplexFromInteger\n Rf_ComplexFromLogical\n Rf_ComplexFromReal\n Rf_ComplexFromString\n Rf_CustomPrintValue\n Rf_DispatchAnyOrEval\n Rf_DispatchGroup\n Rf_DispatchOrEval\n Rf_EncodeEnvironment\n Rf_EncodeRaw\n Rf_EncodeReal2\n Rf_EncodeString\n Rf_EnsureString\n Rf_ErrorMessage\n Rf_GInit\n Rf_GetOptionCutoff\n Rf_GetOptionDeviceAsk\n Rf_IndexWidth\n Rf_InitArithmetic\n Rf_InitBaseEnv\n Rf_InitColors\n Rf_InitConnections\n Rf_InitEd\n Rf_InitFunctionHashing\n Rf_InitGlobalEnv\n Rf_InitGraphics\n Rf_InitMemory\n Rf_InitNames\n Rf_InitOptions\n Rf_InitS3DefaultTypes\n Rf_InitStringHash\n Rf_InitTempDir\n Rf_InitTypeTables\n Rf_IntegerFromComplex\n Rf_IntegerFromLogical\n Rf_IntegerFromReal\n Rf_IntegerFromString\n Rf_ItemName\n Rf_LogicalFromComplex\n Rf_LogicalFromInteger\n Rf_LogicalFromReal\n Rf_LogicalFromString\n Rf_OneIndex\n Rf_PrintGreeting\n Rf_PrintValueEnv\n Rf_PrintValueRec\n Rf_PrintVersion\n Rf_PrintVersionString\n Rf_PrintVersion_part_1\n Rf_RealFromComplex\n Rf_RealFromInteger\n Rf_RealFromLogical\n Rf_RealFromString\n Rf_Scollate\n Rf_Seql\n Rf_SrcrefPrompt\n Rf_StrToInternal\n Rf_StringFromComplex\n Rf_StringFromInteger\n Rf_StringFromLogical\n Rf_StringFromReal\n Rf_TimeToSeed\n Rf_VectorIndex\n Rf_WarningMessage\n Rf_addMissingVarsToNewEnv\n Rf_allocCharsxp\n Rf_asVecSize\n Rf_bd0\n Rf_chebyshev_eval\n Rf_chebyshev_init\n Rf_check1arg\n Rf_check_stack_balance\n Rf_convertToC\n Rf_createS3Vars\n Rf_d1mach\n Rf_ddfindVar\n Rf_deparse1s\n Rf_deparse1w\n Rf_evalList\n Rf_evalListKeepMissing\n Rf_findVar1\n Rf_findcontext\n Rf_formatRaw\n Rf_formatString\n Rf_framedepth\n Rf_gamma_cody\n Rf_gammalims\n Rf_get1index\n Rf_i1mach\n Rf_initStack\n Rf_installDDVAL\n Rf_installS3Signature\n Rf_isValidName\n Rf_lfastchoose\n Rf_lgammacor\n Rf_lookupCachedSymbol\n Rf_makeSubscript\n Rf_markKnown\n Rf_mat2indsub\n Rf_matchArg\n Rf_matchArgExact\n Rf_matchArgs\n Rf_matchPar\n Rf_mbtoucs\n Rf_mkCLOSXP\n Rf_mkPROMISE\n Rf_mkSYMSXP\n Rf_mkTrue\n Rf_name2col\n Rf_onsigusr1\n Rf_onsigusr2\n Rf_osDynSymbol\n Rf_patchArgsByActuals\n Rf_pbeta_raw\n Rf_printArray\n Rf_printComplexVector\n Rf_printIntegerVector\n Rf_printMatrix\n Rf_printNamedVector\n Rf_printRealVector\n Rf_printVector\n Rf_promiseArgs\n Rf_qchisq_appr\n Rf_readS3VarsFromFrame\n Rf_regcomp\n Rf_regerror\n Rf_regexec\n Rf_regfree\n Rf_setIVector\n Rf_setRVector\n Rf_sexptype2char\n Rf_ssort\n Rf_stirlerr\n Rf_stringSuffix\n Rf_strmat2intmat\n Rf_substituteList\n Rf_tspgets\n Rf_ucstomb\n Rf_unbindVar\n Rf_usemethod\n Rf_utf8toucs\n Rf_vectorIndex\n Rf_yychar\n Rf_yylval\n Rf_yynerrs\n Rf_yyparse\n RguiCommonHelp\n RguiPackageMenu\n Rgui_Edit\n Rgui_configure\n Ri18n_iswctype\n Ri18n_wcswidth\n Ri18n_wctype\n Rm_calloc\n Rm_free\n Rm_malloc\n Rm_realloc\n Rsockselect\n Rstrlen\n Rstrwid\n Rwin_rename\n Rwin_wrename\n SET_ACTIVE_BINDING_BIT\n SET_ASCII\n SET_BASE_SYM_CACHED\n SET_BYTES\n SET_CACHED\n SET_CXTAIL\n SET_HASHASH\n SET_LATIN1\n SET_NO_SPECIAL_SYMBOLS\n SET_PRIMOFFSET\n SET_SPECIAL_SYMBOL\n SET_UTF8\n Sys_TempDir\n UNIMPLEMENTED_TYPEt\n UNLOCK_BINDING\n UNSET_BASE_SYM_CACHED\n UNSET_NO_SPECIAL_SYMBOLS\n UNSET_SPECIAL_SYMBOL\n UTF8in\n UTF8out\n WinCheckUTF8\n WinUTF8out\n WrongArgCount\n _controlify\n _hershey_font_info\n _nl_explode_name\n _nl_find_domain\n _nl_find_msg\n _nl_language_preferences_default\n _nl_load_domain\n _nl_locale_name\n _nl_locale_name_default\n _nl_locale_name_posix\n _nl_make_l10nflist\n _nl_msg_cat_cntr\n _nl_normalize_codeset\n _occidental_hershey_glyphs\n _oriental_hershey_glyphs\n _pcre_OP_lengths\n _pcre_default_tables\n _pcre_find_bracket\n _pcre_hspace_list\n _pcre_is_newline\n _pcre_jit_compile\n _pcre_jit_exec\n _pcre_jit_free\n _pcre_jit_get_size\n _pcre_jit_get_target\n _pcre_ord2utf\n _pcre_ucd_caseless_sets\n _pcre_ucd_records\n _pcre_ucd_stage1\n _pcre_ucd_stage2\n _pcre_ucp_gbtable\n _pcre_ucp_gentype\n _pcre_ucp_typerange\n _pcre_utf8_table1\n _pcre_utf8_table1_size\n _pcre_utf8_table2\n _pcre_utf8_table3\n _pcre_utf8_table4\n _pcre_utt\n _pcre_utt_names\n _pcre_utt_size\n _pcre_valid_utf\n _pcre_vspace_list\n _pcre_was_newline\n _pcre_xclass\n _vsnprintf\n applyGUI\n bakslv\n bincode\n bincount\n bratio\n breaktodebugger\n cbabk2_\n cdiv_\n check_doc_file\n complex_binary\n complex_math1\n complex_math2\n complex_unary\n comqr2_\n comqr_\n console_ctrlkeyin\n console_im\n console_mousedown\n console_mousedrag\n console_mouserep\n console_normalkeyin\n console_sbf\n consolebg\n consolebufb\n consolebuffered\n consolebufl\n consolec\n consolecancopy\n consolecanpaste\n consoleclear\n consolecmd\n consolecols\n consolecopy\n consolefg\n consoleflush\n consolegetlazy\n consolehelp\n consolenewline\n consolepaste\n consolepastecmds\n consoleprint\n consoler\n consolereads\n consoleresize\n consolesavefile\n consoleselectall\n consolesetbrk\n consoletogglelazy\n consoleuser\n consolewrites\n consolex\n consoley\n corth_\n cpuLimit\n cpuLimit2\n cpuLimitValue\n csroot_\n dblep0_\n deleditordata\n do_AT\n do_Cstack_info\n do_D2POSIXlt\n do_External\n do_Externalgr\n do_ICUget\n do_ICUset\n do_Math2\n do_POSIXlt2D\n do_RNGkind\n do_Rhome\n do_S4on\n do_abbrev\n do_abs\n do_addCondHands\n do_addRestart\n do_addTryHandlers\n do_addhistory\n do_address\n do_adist\n do_agrep\n do_allnames\n do_anyNA\n do_aperm\n do_aregexec\n do_args\n do_arith\n do_arrangeWindows\n do_array\n do_asPOSIXct\n do_asPOSIXlt\n do_as_environment\n do_asatomic\n do_ascall\n do_asfunction\n do_assign\n do_asvector\n do_attach\n do_attr\n do_attrgets\n do_attributes\n do_attributesgets\n do_backsolve\n do_baseenv\n do_basename\n do_bcclose\n do_bcversion\n do_begin\n do_bincode\n do_bind\n do_bindtextdomain\n do_bitwise\n do_bndIsActive\n do_bndIsLocked\n do_body\n do_bodyCode\n do_break\n do_browser\n do_builtins\n do_c\n do_c_dflt\n do_call\n do_capabilities\n do_capabilitiesX11\n do_cat\n do_charToRaw\n do_charmatch\n do_chartr\n do_chooseDir\n do_chooseFiles\n do_class\n do_classgets\n do_clearpushback\n do_close\n do_closewinprogressbar\n do_cmathfuns\n do_colon\n do_colsum\n do_commandArgs\n do_comment\n do_commentgets\n do_compilepkgs\n do_complex\n do_copyDFattr\n do_crc64\n do_cum\n do_curlDownload\n do_curlGetHeaders\n do_curlVersion\n do_date\n do_debug\n do_delayed\n do_deparse\n do_detach\n do_devAskNewPage\n do_devsize\n do_dfltStop\n do_dfltWarn\n do_diag\n do_dim\n do_dimgets\n do_dimnames\n do_dimnamesgets\n do_dirchmod\n do_dircreate\n do_direxists\n do_dirname\n do_disassemble\n do_dllversion\n do_docall\n do_dotCode\n do_dotcall\n do_dotcallgr\n do_dput\n do_drop\n do_dump\n do_duplicated\n do_dynload\n do_dynunload\n do_eSoftVersion\n do_eSoftVersion\n do_eapply\n do_emptyenv\n do_enablejit\n do_enc2\n do_encodeString\n do_encoding\n do_env2list\n do_envIsLocked\n do_envir\n do_envirName\n do_envirgets\n do_envprofile\n do_eval\n do_expression\n do_fft\n do_fifo\n do_fileaccess\n do_fileappend\n do_filechoose\n do_filecopy\n do_filecreate\n do_fileexists\n do_fileinfo\n do_filelink\n do_filepath\n do_fileremove\n do_filerename\n do_fileshow\n do_filesymlink\n do_findinterval\n do_first_min\n do_flush\n do_for\n do_forceAndCall\n do_formals\n do_format\n do_formatC\n do_formatPOSIXlt\n do_formatinfo\n do_function\n do_gc\n do_gcinfo\n do_gctime\n do_gctorture\n do_gctorture2\n do_get\n do_getClipboardFormats\n do_getDllTable\n do_getIdentification\n do_getNSRegistry\n do_getNumRtoCConverters\n do_getNumericRounding\n do_getOption\n do_getRegNS\n do_getRegisteredRoutines\n do_getRestart\n do_getRtoCConverterDescriptions\n do_getRtoCConverterStatus\n do_getSymbolInfo\n do_getVarsFromFrame\n do_getWindowHandle\n do_getWindowHandles\n do_getWindowTitle\n do_getallconnections\n do_getconnection\n do_getconst\n do_getenv\n do_geterrmessage\n do_getfmts\n do_getlocale\n do_gettext\n do_getwd\n do_glob\n do_globalenv\n do_grep\n do_grepraw\n do_growconst\n do_gsub\n do_gzcon\n do_gzfile\n do_iconv\n do_identical\n do_if\n do_importIntoEnv\n do_inherits\n do_inspect\n do_intToBits\n do_intToUtf8\n do_interactive\n do_internal\n do_interruptsSuspended\n do_invisible\n do_invokeRestart\n do_is\n do_isNSEnv\n do_is_builtin_internal\n do_isatty\n do_isfinite\n do_isincomplete\n do_isinfinite\n do_islistfactor\n do_isloaded\n do_isna\n do_isnan\n do_isopen\n do_isseekable\n do_isunsorted\n do_isvector\n do_l10n_info\n do_lapack\n do_lapply\n do_lazyLoadDBfetch\n do_lazyLoadDBflush\n do_lazyLoadDBinsertValue\n do_length\n do_lengthgets\n do_lengths\n do_levelsgets\n do_list2env\n do_listdirs\n do_listfiles\n do_load\n do_loadFromConn2\n do_loadRconsole\n do_loadfile\n do_loadhistory\n do_localeconv\n do_lockBnd\n do_lockEnv\n do_log\n do_log1arg\n do_log_builtin\n do_logic\n do_logic2\n do_logic3\n do_ls\n do_machine\n do_makelazy\n do_makelist\n do_makenames\n do_makeunique\n do_makevector\n do_mapply\n do_match\n do_matchcall\n do_math1\n do_math2\n do_math3\n do_math4\n do_matprod\n do_matrix\n do_maxcol\n do_memCompress\n do_memDecompress\n do_memlimits\n do_memoryprofile\n do_memsize\n do_merge\n do_mget\n do_missing\n do_mkActiveBnd\n do_mkUnbound\n do_mkcode\n do_mkjunction\n do_modelframe\n do_modelmatrix\n do_mvfft\n do_names\n do_namesgets\n do_nargs\n do_nchar\n do_newenv\n do_nextmethod\n do_nextn\n do_ngettext\n do_normalizepath\n do_nzchar\n do_onexit\n do_open\n do_options\n do_order\n do_packBits\n do_paren\n do_parentenv\n do_parentenvgets\n do_parentframe\n do_parse\n do_paste\n do_pathexpand\n do_pcre_config\n do_pipe\n do_pmatch\n do_pmin\n do_polyroot\n do_pos2env\n do_pretty\n do_primitive\n do_printDeferredWarnings\n do_printdefault\n do_printfunction\n do_prmatrix\n do_proctime\n do_psort\n do_pushback\n do_pushbacklength\n do_putconst\n do_qsort\n do_quit\n do_quote\n do_radixsort\n do_radixsort2\n do_random1\n do_random2\n do_random3\n do_range\n do_rank\n do_rapply\n do_rawShift\n do_rawToBits\n do_rawToChar\n do_rawconnection\n do_rawconvalue\n do_readClipboard\n do_readDCF\n do_readEnviron\n do_readLines\n do_readRegistry\n do_readbin\n do_readchar\n do_readlink\n do_readln\n do_readtablehead\n do_recall\n do_recordGraphics\n do_refcnt\n do_regFinaliz\n do_regNS\n do_regexec\n do_regexpr\n do_relop\n do_relop_dflt\n do_remove\n do_rep\n do_rep_int\n do_rep_len\n do_repeat\n do_resetCondHands\n do_restart\n do_retracemem\n do_return\n do_returnValue\n do_rowscols\n do_rowsum\n do_sample\n do_sample2\n do_save\n do_saveToConn\n do_savefile\n do_savehistory\n do_scan\n do_search\n do_seek\n do_seq\n do_seq_along\n do_seq_len\n do_serialize\n do_serializeToConn\n do_set\n do_setFileTime\n do_setInternet2\n do_setNumericRounding\n do_setS4Object\n do_setSessionTimeLimit\n do_setStatusBar\n do_setTimeLimit\n do_setTitle\n do_setToCConverterActiveStatus\n do_setencoding\n do_setenv\n do_seterrmessage\n do_setlocale\n do_setmaxnumthreads\n do_setnumthreads\n do_setseed\n do_setwd\n do_setwinprogressbar\n do_shellexec\n do_shortRowNames\n do_shortpath\n do_signalCondition\n do_sink\n do_sinknumber\n do_sock\n do_sockconn\n do_sockselect\n do_sort\n do_split\n do_sprintf\n do_standardGeneric\n do_startHTTPD\n do_stderr\n do_stdin\n do_stdout\n do_stop\n do_stopHTTPD\n do_storage_mode\n do_strptime\n do_strrep\n do_strsplit\n do_strtoi\n do_strtrim\n do_subassign\n do_subassign2\n do_subassign2_dflt\n do_subassign3\n do_subassign_dflt\n do_subset\n do_subset2\n do_subset2_dflt\n do_subset3\n do_subset_dflt\n do_substitute\n do_substr\n do_substrgets\n do_sumconnection\n do_summary\n do_switch\n do_sys\n do_sysbrowser\n do_syschmod\n do_sysgetpid\n do_sysimplementation\n do_sysinfo\n do_syssleep\n do_system\n do_systime\n do_sysumask\n do_syswhich\n do_tabulate\n do_tempdir\n do_tempfile\n do_textconnection\n do_textconvalue\n do_tilde\n do_tolower\n do_topenv\n do_trace\n do_traceOnOff\n do_traceback\n do_tracemem\n do_transpose\n do_trunc\n do_truncate\n do_typeof\n do_tzone_name\n do_unclass\n do_unlink\n do_unlist\n do_unregNS\n do_unserializeFromConn\n do_unsetenv\n do_untracemem\n do_unz\n do_unzip\n do_updateform\n do_url\n do_usemethod\n do_utf8ToInt\n do_validEnc\n do_validUTF8\n do_vapply\n do_version\n do_warning\n do_which\n do_while\n do_windialog\n do_windialogstring\n do_wingetmenuitems\n do_winmenuadd\n do_winmenudel\n do_winmenunames\n do_winprogressbar\n do_winver\n do_withVisible\n do_writeClipboard\n do_writebin\n do_writechar\n do_writelines\n do_xtfrm\n dos_wglob\n dos_wglobfree\n drawconsole\n dt_invalidate_locale\n editorchecksave\n editorcleanall\n editorsetfont\n elapsedLimit\n elapsedLimit2\n elapsedLimitValue\n epslon_\n fixup_NaRm\n fontname\n fontsty\n formatError\n framenames\n getActive\n getActiveSink\n getAttrib0\n getConnection_no_err\n getDefaults\n getGraphMenu\n getIdentification\n getParseContext\n getTZinfo\n getWindowTitle\n get_current_mem\n get_duplicate_counter\n get_workspace_name\n getline\n gl_hist_next\n gl_hist_prev\n gl_in_hook\n gl_out_hook\n gl_setwidth\n gl_strwidth\n gl_tab_hook\n haveusedapager\n helpmenuact\n hqr_\n htribk_\n htridi_\n int_arraySubscript\n internal_shellexec\n intpr0_\n invalidate_cached_recodings\n isMethodsDispatchOn\n known_to_be_utf8\n latin1locale\n libintl_bind_textdomain_codeset\n libintl_bindtextdomain\n libintl_dcigettext\n libintl_dcngettext\n libintl_gettext_extract_plural\n libintl_gettext_free_exp\n libintl_gettext_germanic_plural\n libintl_gettextparse\n libintl_hash_string\n libintl_ngettext\n libintl_nl_current_default_domain\n libintl_nl_default_default_domain\n libintl_nl_default_dirname\n libintl_nl_domain_bindings\n libintl_textdomain\n loadRconsole\n locale_charset\n lzma_alloc\n lzma_alone_decoder\n lzma_alone_decoder_init\n lzma_alone_encoder\n lzma_auto_decoder\n lzma_block_buffer_bound\n lzma_block_buffer_decode\n lzma_block_buffer_encode\n lzma_block_compressed_size\n lzma_block_decoder\n lzma_block_decoder_init\n lzma_block_encoder\n lzma_block_encoder_init\n lzma_block_header_decode\n lzma_block_header_encode\n lzma_block_header_size\n lzma_block_total_size\n lzma_block_unpadded_size\n lzma_bufcpy\n lzma_check_finish\n lzma_check_init\n lzma_check_is_supported\n lzma_check_size\n lzma_check_update\n lzma_code\n lzma_crc32\n lzma_crc32_table\n lzma_crc64_table\n lzma_delta_coder_init\n lzma_delta_coder_memusage\n lzma_delta_decoder_init\n lzma_delta_encoder_init\n lzma_delta_props_decode\n lzma_delta_props_encode\n lzma_easy_buffer_encode\n lzma_easy_decoder_memusage\n lzma_easy_encoder\n lzma_easy_encoder_memusage\n lzma_easy_preset\n lzma_end\n lzma_fastpos\n lzma_filter_decoder_is_supported\n lzma_filter_encoder_is_supported\n lzma_filter_flags_decode\n lzma_filter_flags_encode\n lzma_filter_flags_size\n lzma_filters_copy\n lzma_filters_update\n lzma_footer_magic\n lzma_free\n lzma_get_check\n lzma_header_magic\n lzma_index_append\n lzma_index_block_count\n lzma_index_buffer_decode\n lzma_index_buffer_encode\n lzma_index_cat\n lzma_index_checks\n lzma_index_decoder\n lzma_index_dup\n lzma_index_encoder\n lzma_index_encoder_init\n lzma_index_end\n lzma_index_file_size\n lzma_index_hash_append\n lzma_index_hash_decode\n lzma_index_hash_end\n lzma_index_hash_init\n lzma_index_hash_size\n lzma_index_init\n lzma_index_iter_init\n lzma_index_iter_locate\n lzma_index_iter_next\n lzma_index_iter_rewind\n lzma_index_memusage\n lzma_index_memused\n lzma_index_padding_size\n lzma_index_prealloc\n lzma_index_size\n lzma_index_stream_count\n lzma_index_stream_flags\n lzma_index_stream_padding\n lzma_index_stream_size\n lzma_index_total_size\n lzma_index_uncompressed_size\n lzma_lz_decoder_init\n lzma_lz_decoder_memusage\n lzma_lz_decoder_uncompressed\n lzma_lz_encoder_init\n lzma_lz_encoder_memusage\n lzma_lzma2_decoder_init\n lzma_lzma2_decoder_memusage\n lzma_lzma2_encoder_init\n lzma_lzma2_encoder_memusage\n lzma_lzma2_props_decode\n lzma_lzma2_props_encode\n lzma_lzma_decoder_create\n lzma_lzma_decoder_init\n lzma_lzma_decoder_memusage\n lzma_lzma_decoder_memusage_nocheck\n lzma_lzma_encode\n lzma_lzma_encoder_create\n lzma_lzma_encoder_init\n lzma_lzma_encoder_memusage\n lzma_lzma_encoder_reset\n lzma_lzma_lclppb_decode\n lzma_lzma_lclppb_encode\n lzma_lzma_optimum_fast\n lzma_lzma_optimum_normal\n lzma_lzma_preset\n lzma_lzma_props_decode\n lzma_lzma_props_encode\n lzma_memlimit_get\n lzma_memlimit_set\n lzma_memusage\n lzma_mf_bt2_find\n lzma_mf_bt2_skip\n lzma_mf_bt3_find\n lzma_mf_bt3_skip\n lzma_mf_bt4_find\n lzma_mf_bt4_skip\n lzma_mf_find\n lzma_mf_hc3_find\n lzma_mf_hc3_skip\n lzma_mf_hc4_find\n lzma_mf_hc4_skip\n lzma_mf_is_supported\n lzma_mode_is_supported\n lzma_next_end\n lzma_next_filter_init\n lzma_next_filter_update\n lzma_properties_decode\n lzma_properties_encode\n lzma_properties_size\n lzma_raw_buffer_decode\n lzma_raw_buffer_encode\n lzma_raw_coder_init\n lzma_raw_coder_memusage\n lzma_raw_decoder\n lzma_raw_decoder_init\n lzma_raw_decoder_memusage\n lzma_raw_encoder\n lzma_raw_encoder_init\n lzma_raw_encoder_memusage\n lzma_rc_prices\n lzma_sha256_finish\n lzma_sha256_init\n lzma_sha256_update\n lzma_simple_arm_decoder_init\n lzma_simple_arm_encoder_init\n lzma_simple_armthumb_decoder_init\n lzma_simple_armthumb_encoder_init\n lzma_simple_coder_init\n lzma_simple_ia64_decoder_init\n lzma_simple_ia64_encoder_init\n lzma_simple_powerpc_decoder_init\n lzma_simple_powerpc_encoder_init\n lzma_simple_props_decode\n lzma_simple_props_encode\n lzma_simple_props_size\n lzma_simple_sparc_decoder_init\n lzma_simple_sparc_encoder_init\n lzma_simple_x86_decoder_init\n lzma_simple_x86_encoder_init\n lzma_stream_buffer_bound\n lzma_stream_buffer_decode\n lzma_stream_buffer_encode\n lzma_stream_decoder\n lzma_stream_decoder_init\n lzma_stream_encoder\n lzma_stream_encoder_init\n lzma_stream_flags_compare\n lzma_stream_footer_decode\n lzma_stream_footer_encode\n lzma_stream_header_decode\n lzma_stream_header_encode\n lzma_strm_init\n lzma_version_number\n lzma_version_string\n lzma_vli_decode\n lzma_vli_encode\n lzma_vli_size\n mallinfo\n mb_char_len\n mbcsValid\n menuclear\n menuconfig\n menueditornew\n menueditoropen\n mkPRIMSXP\n mkdtemp\n nCPFun\n newWpipe\n newconsole\n newpager\n newxbuf\n nl_Rdummy\n pR_ShowMessage\n pagerMultiple\n pagerbclose\n pagerhighlight\n pause\n pcre_assign_jit_stack\n pcre_callout\n pcre_compile\n pcre_compile2\n pcre_config\n pcre_copy_named_substring\n pcre_copy_substring\n pcre_exec\n pcre_free\n pcre_free_study\n pcre_free_substring\n pcre_free_substring_list\n pcre_fullinfo\n pcre_get_named_substring\n pcre_get_stringnumber\n pcre_get_stringtable_entries\n pcre_get_substring\n pcre_get_substring_list\n pcre_jit_exec\n pcre_jit_free_unused_memory\n pcre_jit_stack_alloc\n pcre_jit_stack_free\n pcre_maketables\n pcre_malloc\n pcre_refcount\n pcre_stack_free\n pcre_stack_guard\n pcre_stack_malloc\n pcre_study\n pcre_version\n pgamma_raw\n pkgmenuact\n pnbeta2\n pnbeta_raw\n pnchisq_raw\n pointsize\n process_site_Renviron\n process_system_Renviron\n process_user_Renviron\n qbeta_raw\n raise\n realp0_\n registerBase\n resetICUcollator\n resetTimeLimits\n reset_duplicate_counter\n rg_\n rpipeClose\n rpipeGetc\n rpipeGets\n rpipeOpen\n runerror\n savePalette\n setDLLSearchPath\n setTitle\n setWidthOnResize\n set_completion_available\n set_workspace_name\n setconsoleoptions\n setfirstcol\n setfirstvisible\n sigaction\n sigaddset\n sigblock\n sigdelset\n sigemptyset\n sigfillset\n sighold\n sigismember\n signal\n sigpending\n sigprocmask\n sigrelse\n sigsetmask\n sigsuspend\n stemleaf\n switch_stdout\n tql1_\n tql2_\n tqlrat_\n tre_ast_new_catenation\n tre_ast_new_iter\n tre_ast_new_literal\n tre_ast_new_node\n tre_ast_new_union\n tre_compile\n tre_config\n tre_ctype\n tre_ctype_map\n tre_fill_pmatch\n tre_free\n tre_have_approx\n tre_have_backrefs\n tre_isalnum_func\n tre_isalpha_func\n tre_isascii_func\n tre_isblank_func\n tre_iscntrl_func\n tre_isdigit_func\n tre_isgraph_func\n tre_islower_func\n tre_isprint_func\n tre_ispunct_func\n tre_isspace_func\n tre_isupper_func\n tre_isxdigit_func\n tre_mem_alloc_impl\n tre_mem_destroy\n tre_mem_new_impl\n tre_parse\n tre_regaexec\n tre_regaexecb\n tre_reganexec\n tre_regaparams_default\n tre_regawexec\n tre_regawnexec\n tre_regcomp\n tre_regcompb\n tre_regerror\n tre_regexec\n tre_regexecb\n tre_regfree\n tre_regncomp\n tre_regncompb\n tre_regnexec\n tre_regnexecb\n tre_reguexec\n tre_regwcomp\n tre_regwexec\n tre_regwncomp\n tre_regwnexec\n tre_stack_destroy\n tre_stack_new\n tre_stack_num_objects\n tre_stack_pop_int\n tre_stack_pop_voidptr\n tre_stack_push_int\n tre_stack_push_voidptr\n tre_tnfa_run_approx\n tre_tnfa_run_backtrack\n tre_tnfa_run_parallel\n tre_version\n tred1_\n tred2_\n trio_aprintf\n trio_asprintf\n trio_asprintfv\n trio_fprintf\n trio_fprintfv\n trio_fscanf\n trio_fscanfv\n trio_printf\n trio_printfv\n trio_scanf\n trio_scanfv\n trio_snprintf\n trio_snprintfv\n trio_sprintf\n trio_sprintfv\n trio_sscanf\n trio_sscanfv\n trio_strerror\n trio_vaprintf\n trio_vasprintf\n trio_vfprintf\n trio_vfscanf\n trio_vprintf\n trio_vscanf\n trio_vsnprintf\n trio_vsprintf\n trio_vsscanf\n tzname\n tzset\n unregisterBase\n utf8clen\n wgl_hist_init\n wgl_hist_next\n wgl_hist_prev\n wgl_loadhistory\n wgl_savehistory\n winAccessW\n xbufaddxc\n xbufaddxs\n xbufdel\n xbufgrow\n xcalloc_impl\n xcopyComplexWithRecycle\n xcopyIntegerWithRecycle\n xcopyLogicalWithRecycle\n xcopyRawWithRecycle\n xcopyRealWithRecycle\n xcopyStringWithRecycle\n xcopyVectorWithRecycle\n xdr_bool\n xdr_bytes\n xdr_char\n xdr_enum\n xdr_free\n xdr_int\n xdr_long\n xdr_netobj\n xdr_opaque\n xdr_short\n xdr_string\n xdr_u_char\n xdr_u_int\n xdr_u_long\n xdr_u_short\n xdr_union\n xdr_void\n xdr_wrapstring\n xdrstdio_create\n xfillComplexMatrixWithRecycle\n xfillIntegerMatrixWithRecycle\n xfillLogicalMatrixWithRecycle\n xfillRawMatrixWithRecycle\n xfillRealMatrixWithRecycle\n xfillStringMatrixWithRecycle\n xfillVectorMatrixWithRecycle\n xfree_impl\n xmalloc_configure\n xmalloc_current\n xmalloc_current_blocks\n xmalloc_dump_leaks\n xmalloc_impl\n xrealloc_impl\n yydebug\n yylloc\n yyllocL\n yyllocR\n z_prec_r\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/dynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2014 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n/*  Dynamic Loading Support: See ../main/Rdynload.c and ../include/Rdynpriv.h\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <string.h>\n#include <stdlib.h>\n#include <Defn.h>\n#include <Rmath.h>\n#include <direct.h>\n#define WIN32_LEAN_AND_MEAN 1\n/* Eventually #define _WIN32_WINNT 0x0502 for SetDllDirectoryA */\n#include <windows.h>\n\n/* SetDllDirectory is supported under XP SP1 and later.\n   If called with a non-NULL argument it sets the argument to be\n   the second item on the DLL search path (after the application\n   launch directory).  This is removed if called with NULL.\n\n   Prior to XP SP1 the second item was the current directory, but this\n   has (by default, 'safe DLL search mode') been moved below the\n   Windows dirs.  Using SetDllDirectory removes it altogether.\n\n   We fudge this via the current directory in earlier systems.\n */\ntypedef BOOL (WINAPI *PSDD)(LPCTSTR);\n\nint setDLLSearchPath(const char *path)\n{\n    int res = 0; /* failure */\n    PSDD p = (PSDD) -1;\n    static char wd[MAX_PATH] = \"\";  /* stored real current directory */\n\n    // XP SP1 and later.\n    if(p == (PSDD) -1)\n\tp = (PSDD) GetProcAddress(GetModuleHandle(TEXT(\"kernel32.dll\")),\n\t\t\t\t  \"SetDllDirectoryA\");\n    if(p) {\n\tres = p(path);\n    } else { /* Windows 2000 */\n\tif(path) {\n\t    GetCurrentDirectory(MAX_PATH, wd);\n\t    SetCurrentDirectory(path);\n\t} else if (wd[0]) {\n\t    SetCurrentDirectory(wd);\n\t    wd[0] = '\\0';\n\t}\n    }\n    return res;\n}\n\n#include <R_ext/Rdynload.h>\n#include <Rdynpriv.h>\n\n\n\t/* Inserts the specified DLL at the head of the DLL list */\n\t/* Returns 1 if the library was successfully added */\n\t/* and returns 0 if the library table is full or */\n\t/* or if LoadLibrary fails for some reason. */\n\nstatic void fixPath(char *path)\n{\n    char *p;\n    for(p = path; *p != '\\0'; p++) if(*p == '\\\\') *p = '/';\n}\n\nstatic HINSTANCE R_loadLibrary(const char *path, int asLocal, int now,\n\t\t\t       const char *search);\nstatic DL_FUNC getRoutine(DllInfo *info, char const *name);\n#ifdef CACHE_DLL_SYM\nstatic void R_deleteCachedSymbols(DllInfo *dll);\n#endif\n\nstatic void R_getDLLError(char *buf, int len);\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *path);\n\nstatic void closeLibrary(HINSTANCE handle)\n{\n    FreeLibrary(handle);\n}\n\nvoid InitFunctionHashing()\n{\n    R_osDynSymbol->loadLibrary = R_loadLibrary;\n    R_osDynSymbol->dlsym = getRoutine;\n    R_osDynSymbol->closeLibrary = closeLibrary;\n    R_osDynSymbol->getError = R_getDLLError;\n\n#ifdef CACHE_DLL_SYM\n    R_osDynSymbol->deleteCachedSymbols = R_deleteCachedSymbols;\n    R_osDynSymbol->lookupCachedSymbol = Rf_lookupCachedSymbol;\n#endif\n\n    R_osDynSymbol->fixPath = fixPath;\n    R_osDynSymbol->getFullDLLPath = GetFullDLLPath;\n}\n\n#ifdef CACHE_DLL_SYM\nstatic void R_deleteCachedSymbols(DllInfo *dll)\n{\n    int i;\n    for(i = nCPFun - 1; i >= 0; i--)\n\tif(!strcmp(CPFun[i].pkg, dll->name)) {\n\t    if(i < nCPFun - 1) {\n\t\tstrcpy(CPFun[i].name, CPFun[--nCPFun].name);\n\t\tstrcpy(CPFun[i].pkg, CPFun[nCPFun].pkg);\n\t\tCPFun[i].func = CPFun[nCPFun].func;\n\t    } else nCPFun--;\n\t}\n}\n#endif\n\n#ifndef _MCW_EM\n_CRTIMP unsigned int __cdecl\n_controlfp (unsigned int unNew, unsigned int unMask);\n_CRTIMP unsigned int __cdecl _clearfp (void);\n/* Control word masks for unMask */\n#define\t_MCW_EM\t\t0x0008001F\t/* Error masks */\n#define\t_MCW_IC\t\t0x00040000\t/* Infinity */\n#define\t_MCW_RC\t\t0x00000300\t/* Rounding */\n#define\t_MCW_PC\t\t0x00030000\t/* Precision */\n#endif\n\nHINSTANCE R_loadLibrary(const char *path, int asLocal, int now,\n\t\t\tconst char *search)\n{\n    HINSTANCE tdlh;\n    unsigned int dllcw, rcw;\n    int useSearch = search && search[0];\n\n    rcw = _controlfp(0,0) & ~_MCW_IC;  /* Infinity control is ignored */\n    _clearfp();\n    if(useSearch) setDLLSearchPath(search);\n    tdlh = LoadLibrary(path);\n    if(useSearch) setDLLSearchPath(NULL);\n    dllcw = _controlfp(0,0) & ~_MCW_IC;\n    if (dllcw != rcw) {\n\t_controlfp(rcw, _MCW_EM | _MCW_IC | _MCW_RC | _MCW_PC);\n\tif (LOGICAL(GetOption1(install(\"warn.FPU\")))[0])\n\t    warning(_(\"DLL attempted to change FPU control word from %x to %x\"),\n\t\t    rcw,dllcw);\n    }\n    return(tdlh);\n}\n\nstatic DL_FUNC getRoutine(DllInfo *info, char const *name)\n{\n    DL_FUNC f;\n    f = (DL_FUNC) GetProcAddress(info->handle, name);\n    return(f);\n}\n\nstatic void R_getDLLError(char *buf, int len)\n{\n    LPSTR lpMsgBuf, p;\n    char *q;\n    FormatMessage(\n\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\tFORMAT_MESSAGE_FROM_SYSTEM |\n\tFORMAT_MESSAGE_IGNORE_INSERTS,\n\tNULL,\n\tGetLastError(),\n\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t(LPSTR) &lpMsgBuf,\n\t0,\n\tNULL\n\t);\n    strcpy(buf, \"LoadLibrary failure:  \");\n    q = buf + strlen(buf);\n    /* It seems that Win 7 returns error messages with CRLF terminators */\n    for (p = lpMsgBuf; *p; p++) if (*p != '\\r') *q++ = *p;\n    LocalFree(lpMsgBuf);\n}\n\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *path)\n{\n    char *p;\n\n    if ((path[0] != '/') && (path[0] != '\\\\') && (path[1] != ':')) {\n\tif (!getcwd(buf, MAX_PATH))\n\t    errorcall(call, _(\"cannot get working directory\"));\n\tstrcat(buf, \"\\\\\");\n\tstrcat(buf, path);\n    } else\n\tstrcpy(buf, path);\n    /* fix slashes to allow inconsistent usage later */\n    for (p = buf; *p; p++) if (*p == '\\\\') *p = '/';\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/fixed/h/config.h": "#ifndef R_CONFIG_H\n#define R_CONFIG_H\n\n/* on Mingw-w64 defines the MING64_ version */\n#include <_mingw.h>\n\n/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n   systems. This function is required for `alloca.c' support on those systems.\n   */\n/* #undef CRAY_STACKSEG_END */\n\n/* Define to 1 if using `alloca.c'. */\n/* #undef C_ALLOCA */\n\n/* Define to 1 if translation of program messages to the user's native\n   language is requested. */\n#define ENABLE_NLS 1\n\n/* Define to dummy `main' function (if any) required to link to the Fortran\n   libraries. */\n/* #undef F77_DUMMY_MAIN */\n\n/* Define to a macro mangling the given C identifier (in lower and upper\n   case), which must not contain underscores, for linking with Fortran. */\n#define F77_FUNC(name,NAME) name ## _\n\n/* As F77_FUNC, but for C identifiers containing underscores. */\n#define F77_FUNC_(name,NAME) name ## _\n\n/* Define if F77 and FC dummy `main' functions are identical. */\n/* #undef FC_DUMMY_MAIN_EQ_F77 */\n\n/* Define to 1 if you have the `access' function. */\n#define HAVE_ACCESS 1\n\n/* Define to 1 if you have `alloca', as a function or macro. */\n#define HAVE_ALLOCA 1\n\n/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n   */\n/* #undef HAVE_ALLOCA_H */\n\n/* Define if you have the Aqua headers and libraries, and want to include\n   support for R.app and for the quartz() device to be built. */\n/* #undef HAVE_AQUA */\n\n/* Define to 1 if you have the `argz_count' function. */\n/* #undef HAVE_ARGZ_COUNT */\n\n/* Define to 1 if you have the <argz.h> header file. */\n/* #undef HAVE_ARGZ_H */\n\n/* Define to 1 if you have the `argz_next' function. */\n/* #undef HAVE_ARGZ_NEXT */\n\n/* Define to 1 if you have the `argz_stringify' function. */\n/* #undef HAVE_ARGZ_STRINGIFY */\n\n/* Define to 1 if you have the <arpa/inet.h> header file. */\n/* #undef HAVE_ARPA_INET_H */\n\n/* Define to 1 if you have the `asprintf' function. */\n/* #undef HAVE_ASPRINTF */\n\n/* Define to 1 if you have the `atan2pi' function. */\n/* #undef HAVE_ATAN2PI */\n\n/* Define to 1 if you have the `atanpi' function. */\n/* #undef HAVE_ATANPI */\n\n/* Define to 1 if the compiler understands __builtin_expect. (For intl) */\n#define HAVE_BUILTIN_EXPECT 1\n\n/* Define to 1 if you have the <bzlib.h> header file. */\n/* #undef HAVE_BZLIB_H */\n\n/* Define to 1 if you have the `cabs' function. */\n#define HAVE_CABS 1\n\n/* Define to 1 if you have the `cacos' function. */\n#define HAVE_CACOS 1\n\n/* Define to 1 if you have cairo-ps. */\n/* #undef HAVE_CAIRO_PDF */\n\n/* Define to 1 if you have cairo-pdf. */\n/* #undef HAVE_CAIRO_PS */\n\n/* Define to 1 if you have cairo-svg. */\n/* #undef HAVE_CAIRO_SVG */\n\n/* Define to 1 if you have the `carg' function. */\n#define HAVE_CARG 1\n\n/* Define to 1 if you have the `casin' function. */\n#define HAVE_CASIN 1\n\n/* Define to 1 if you have the `catan' function. */\n#define HAVE_CATAN 1\n\n/* Define to 1 if you have the `ccos' function. */\n#define HAVE_CCOS 1\n\n/* Define to 1 if you have the `ccosh' function. */\n#define HAVE_CCOSH 1\n\n/* Define to 1 if you have the `cexp' function. */\n#define HAVE_CEXP 1\n\n/* Define to 1 if you have the OS X function CFLocaleCopyCurrent in the\n   CoreFoundation framework. (For intl) */\n/* #undef HAVE_CFLOCALECOPYCURRENT */\n\n/* Define to 1 if you have the OS X function CFPreferencesCopyAppValue in the\n   CoreFoundation framework. (For intl) */\n/* #undef HAVE_CFPREFERENCESCOPYAPPVALUE */\n\n/* Define to 1 if you have the `chdir' function. */\n#define HAVE_CHDIR 1\n\n/* Define to 1 if you have the `chmod' function. */\n#define HAVE_CHMOD 1\n\n/* Define to 1 if you have the `clock_gettime' function. */\n/* *Some* mingw-w64 versions have this (if winpthreads are included),\n   but it is just a wrapper for what we use directly */\n/* #undef HAVE_CLOCK_GETTIME */\n\n/* Define to 1 if you have the `clog' function. */\n#define HAVE_CLOG 1\n\n/* Defined if framework CoreFoundation is present */\n/* #undef HAVE_COREFOUNDATION_FW */\n\n/* Define to 1 if you have the `cospi' function. */\n/* #undef HAVE_COSPI */\n\n/* Define to 1 if you have the `cpow' function. */\n#define HAVE_CPOW 1\n\n/* Define to 1 if you have the `csin' function. */\n#define HAVE_CSIN 1\n\n/* Define to 1 if you have the `csinh' function. */\n#define HAVE_CSINH 1\n\n/* Define to 1 if you have the `csqrt' function. */\n#define HAVE_CSQRT 1\n\n/* Define to 1 if you have the `ctan' function. */\n#define HAVE_CTAN 1\n\n/* Define to 1 if you have the `ctanh' function. */\n/* The ctanh function does not work properly, at R level \"tanh(356+0i)\"\n   returns \"1+NaNi\", but it should return \"1+0i\". */\n/* #undef HAVE_CTANH */\n\n/* Define to 1 if you have the <curl/curl.h> header file.\n   Set on the command line where supported.\n*/\n/* #undef HAVE_CURL_CURL_H */\n\n/* Define if the GNU dcgettext() function is already present or preinstalled.\n   */\n/* #undef HAVE_DCGETTEXT */\n\n/* Define to 1 if you have the declaration of `alloca', and to 0 if you don't.\n   */\n#define HAVE_DECL_ALLOCA 0\n\n\n/* Define to 1 if you have the declaration of `dladdr', and to 0 if you don't.\n   */\n/* #undef HAVE_DECL_DLADDR */\n\n/* Define to 1 if you have the declaration of `dlsym', and to 0 if you don't.\n   */\n/* #undef HAVE_DECL_DLSYM */\n\n/* Define to 1 if you have the declaration of `feof_unlocked', and to 0 if you\n   don't. (For intl) */\n#define HAVE_DECL_FEOF_UNLOCKED 0\n\n/* Define to 1 if you have the declaration of `fgets_unlocked', and to 0 if\n   you don't. (For intl) */\n#define HAVE_DECL_FGETS_UNLOCKED 0\n\n/* Define to 1 if you have the declaration of `getc_unlocked', and to 0 if you\n   don't. (For intl) */\n#define HAVE_DECL_GETC_UNLOCKED 0\n\n/* Define to 1 if you have the declaration of `isfinite', and to 0 if you\n   don't. */\n#define HAVE_DECL_ISFINITE 1\n\n/* Define to 1 if you have the declaration of `isnan', and to 0 if you don't.\n   */\n#define HAVE_DECL_ISNAN 1\n\n/* Define to 1 if you have the declaration of `mkdtemp', and to 0 if you\n   don't. */\n#define HAVE_DECL_MKDTEMP 0\n\n/* Define to 1 if you have the declaration of `putenv', and to 0 if you don't.\n   */\n#define HAVE_DECL_PUTENV 1\n\n/* Define to 1 if you have the declaration of `realpath', and to 0 if you\n   don't. */\n#define HAVE_DECL_REALPATH 0\n\n/* Define to 1 if you have the declaration of `RTLD_DEFAULT', and to 0 if you\n   don't. */\n/* #undef HAVE_DECL_RTLD_DEFAULT */\n\n/* Define to 1 if you have the declaration of `RTLD_NEXT', and to 0 if you\n   don't. */\n/* #undef HAVE_DECL_RTLD_NEXT */\n\n/* Define to 1 if you have the declaration of `siglongjmp', and to 0 if you\n   don't. */\n#define HAVE_DECL_SIGLONGJMP 1\n\n/* Define to 1 if you have the declaration of `sigsetjmp', and to 0 if you\n   don't. */\n#define HAVE_DECL_SIGSETJMP 1\n\n/* Define to 1 if you have the declaration of `SIZE_MAX', and to 0 if you\n   don't. */\n#define HAVE_DECL_SIZE_MAX 1\n\n/* Define to 1 if you have the declaration of `strdup', and to 0 if you don't.\n   */\n#define HAVE_DECL_STRDUP 1\n\n/* Define to 1 if you have the declaration of `strncasecmp', and to 0 if you\n   don't. */\n#define HAVE_DECL_STRNCASECMP 1\n\n/* Define to 1 if you have the declaration of `vasprintf', and to 0 if you\n   don't. */\n#define HAVE_DECL_VASPRINTF 0\n\n/* Define to 1 if you have the declaration of `_snprintf', and to 0 if you\n   don't. (For intl) */\n#define HAVE_DECL__SNPRINTF 1\n\n/* Define to 1 if you have the declaration of `_snwprintf', and to 0 if you\n   don't. (For intl) */\n#define HAVE_DECL__SNWPRINTF 1\n\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */\n#define HAVE_DIRENT_H 1\n\n/* Define to 1 if you have the `dladdr' function. */\n/* #undef HAVE_DLADDR */\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n/* #undef HAVE_DLFCN_H */\n\n/* Define to 1 if you have the `dlsym' function. */\n/* #undef HAVE_DLSYM */\n\n/* Define to 1 if you have the <dl.h> header file. */\n/* #undef HAVE_DL_H */\n\n/* Define to 1 if you have the <elf.h> header file. */\n/* #undef HAVE_ELF_H */\n\n/* Define to 1 if you have the <errno.h> header file. */\n#define HAVE_ERRNO_H 1\n\n/* Define to 1 if you have the `execv' function. */\n#define HAVE_EXECV 1\n\n/* Define to 1 if you have the `exp10' function. */\n/* #undef HAVE_EXP10 */\n\n/* Define to 1 if you have the `expm1' function. */\n#define HAVE_EXPM1 1\n\n/* Define if your Fortran compiler appends an extra_underscore to external\n   names containing an underscore. */\n/* #undef HAVE_F77_EXTRA_UNDERSCORE */\n\n/* Define if your Fortran compiler appends an underscore to external names. */\n#define HAVE_F77_UNDERSCORE 1\n\n/* Define to 1 if you have the `fcntl' function. */\n/* #undef HAVE_FCNTL */\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#define HAVE_FCNTL_H 1\n\n/* Define to 1 if you have the `fdopen' function. */\n#define HAVE_FDOPEN 1\n\n/* Define to 1 if you have the <features.h> header file. */\n/* #undef HAVE_FEATURES_H */\n\n/* Define to 1 if you have the <floatingpoint.h> header file. */\n/* #undef HAVE_FLOATINGPOINT_H */\n\n/* Define if C's Rcomplex and Fortran's COMPLEX*16 can be interchanged, and\n   can do arithmetic on the latter. */\n#define HAVE_FORTRAN_DOUBLE_COMPLEX 1\n\n/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */\n/* #undef HAVE_FSEEKO */\n\n/* Define to 1 if you have the `ftello' function. */\n/* #undef HAVE_FTELLO */\n\n/* Define to 1 if you have the `ftruncate' function. */\n#define HAVE_FTRUNCATE 1\n\n/* Define to 1 if you have the `fwprintf' function. */\n#define HAVE_FWPRINTF 1\n\n/* Define to 1 if you have the `getcwd' function. */\n#define HAVE_GETCWD 1\n\n/* Define to 1 if you have the `getegid' function. */\n/* #undef HAVE_GETEGID */\n\n/* Define to 1 if you have the `geteuid' function. */\n/* #undef HAVE_GETEUID */\n\n/* Define to 1 if you have the `getgid' function. */\n/* #undef HAVE_GETGID */\n\n/* Define to 1 if you have the `getline' function. */\n/* #undef HAVE_GETLINE */\n\n/* Define to 1 if you have the `getgrgid' function. */\n/* #undef HAVE_GETGRGID */\n\n/* Define to 1 if you have the `getpagesize' function. */\n#define HAVE_GETPAGESIZE 1\n\n/* Define to 1 if you have the `getpriority' function. */\n/* #undef HAVE_GETPRIORITY */\n\n/* Define to 1 if you have the `getpwuid' function. */\n/* #undef HAVE_GETPWUID */\n\n/* Define to 1 if you have the `getrlimit' function. */\n/* #undef HAVE_GETRLIMIT */\n\n/* Define to 1 if you have the `getrusage' function. */\n/* #undef HAVE_GETRUSAGE */\n\n/* Define if the GNU gettext() function is already present or preinstalled. */\n/* #undef HAVE_GETTEXT */\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#define HAVE_GETTIMEOFDAY 1\n\n/* Define to 1 if you have the `getuid' function. */\n/* #undef HAVE_GETUID */\n\n/* Define if you have the GNU C library version >= 2. This is needed to fix a\n   problem with getting the prototype of strptime(). */\n/* #undef HAVE_GLIBC2 */\n\n/* Define to 1 if you have the `glob' function. */\n/* #undef HAVE_GLOB */\n\n/* Define to 1 if you have the <glob.h> header file. */\n/* #undef HAVE_GLOB_H */\n\n/* Define to 1 if you have the `gmtime_r' function. */\n/* #undef HAVE_GMTIME_R */\n\n/* Define to 1 if you have the <grp.h> header file. */\n/* #undef HAVE_GRP_H */\n\n/* Define to 1 if you have the `history_truncate_file' function. */\n/* #undef HAVE_HISTORY_TRUNCATE_FILE */\n\n/* Define to 1 if you have the `hypot' function. */\n#define HAVE_HYPOT 1\n\n/* Define if you have the iconv() function. */\n#define HAVE_ICONV 1\n\n/* Define if you have the `iconvlist' function. */\n#define HAVE_ICONVLIST 1\n\n/* Define if `iconv' accepts \"CP1252\". */\n#define HAVE_ICONV_CP1252 1\n\n/* Define to 1 if you have the <iconv.h> header file. */\n#define HAVE_ICONV_H 1\n\n/* Define to 1 if the system has the type `int64_t'. */\n#define HAVE_INT64_T 1\n\n/* Define if you have the 'intmax_t' type in <stdint.h> or <inttypes.h>. (For\n   intl) */\n#define HAVE_INTMAX_T 1\n\n/* Define to 1 if the system has the type `intptr_t'. */\n#define HAVE_INTPTR_T 1\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#define HAVE_INTTYPES_H 1\n\n/* Define if <inttypes.h> exists, doesn't clash with <sys/types.h>, and\n   declares uintmax_t. (For intl) */\n#define HAVE_INTTYPES_H_WITH_UINTMAX 1\n\n/* Define to 1 if the system has the type `int_fast64_t'. */\n#define HAVE_INT_FAST64_T 1\n\n/* Define to 1 if you have the `isblank' function. */\n#define HAVE_ISBLANK 1\n\n/* Define to 1 if you have the `isnan' function. */\n#define HAVE_ISNAN 1\n\n/* Define to 1 if you have the `iswblank' function. */\n#define HAVE_ISWBLANK 1\n\n/* Define to 1 if you have the `iswctype' function. */\n#define HAVE_ISWCTYPE 1\n\n/* Define if you have the JPEG headers and libraries. */\n#define HAVE_JPEG 1\n\n/* Define if KERN_USRSTACK sysctl is supported. */\n/* #undef HAVE_KERN_USRSTACK */\n\n/* Define if you have KeySym defined in X11. */\n/* #undef HAVE_KEYSYM */\n\n/* Define to 1 if you have the `kill' function. */\n/* #undef HAVE_KILL */\n\n/* Define if you have <langinfo.h> and nl_langinfo(CODESET). */\n/* #undef HAVE_LANGINFO_CODESET */\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n/* #undef HAVE_LANGINFO_H */\n\n/* Define if your <locale.h> file defines LC_MESSAGES. */\n/* #undef HAVE_LC_MESSAGES */\n\n/* Define if your system has libcurl >= 7.22.0 with support for https.\n   Set on the command line where supported.\n */\n/* #undef HAVE_LIBCURL */\n\n/* Define if __libc_stack_end is visible. */\n/* #undef HAVE_LIBC_STACK_END */\n\n/* Define to 1 if you have the `dl' library (-ldl). */\n/* #undef HAVE_LIBDL */\n\n/* Define to 1 if you have the `icucore' library (-licucore). */\n/* #undef HAVE_LIBICUCORE */\n\n/* Define to 1 if you have the `m' library (-lm). */\n#define HAVE_LIBM 1\n\n/* Define to 1 if you have the `ncurses' library (-lncurses). */\n/* #undef HAVE_LIBNCURSES */\n\n/* Define to 1 if you have the `readline' library (-lreadline). */\n/* #undef HAVE_LIBREADLINE */\n\n/* Define to 1 if you have the `rt' library (-lrt). */\n#undef HAVE_LIBRT\n\n/* Define to 1 if you have the `sunmath' library (-lsunmath). */\n/* #undef HAVE_LIBSUNMATH */\n\n/* Define to 1 if you have the `termcap' library (-ltermcap). */\n/* #undef HAVE_LIBTERMCAP */\n\n/* Define to 1 if you have the `termlib' library (-ltermlib). */\n/* #undef HAVE_LIBTERMLIB */\n\n/* Define to 1 if you have the `tk' library (-ltk). */\n/* #undef HAVE_LIBTK */\n\n/* Define to 1 if you have the <limits.h> header file. */\n#define HAVE_LIMITS_H 1\n\n/* Define to 1 if you have the `link' function. */\n/* #undef HAVE_LINK */\n\n/* Define to 1 if you have the <locale.h> header file. */\n#define HAVE_LOCALE_H 1\n\n/* Define to 1 if you have the `localtime_r' function. */\n#define HAVE_LOCALTIME_R 1\n\n/* Define to 1 if you have the `log10' function. */\n#define HAVE_LOG10 1\n\n/* Define to 1 if you have the `log1p' function. */\n#define HAVE_LOG1P 1\n\n/* Define to 1 if you have the `log1pl' function. */\n#define HAVE_LOG1PL 1\n\n/* Define to 1 if you have the `log2' function. */\n#define HAVE_LOG2 1\n\n/* Define if you wish to use the 'long double' type. */\n#define HAVE_LONG_DOUBLE 1\n\n/* Define to 1 if the system has the type `long long int'. (For intl) */\n#define HAVE_LONG_LONG_INT 1\n\n/* Define if your system has lzma >= 5.0.3. */\n/* #undef HAVE_LZMA */\n\n/* Define to 1 if you have the <lzma.h> header file. */\n/* #undef HAVE_LZMA_H */\n\n/* Define to 1 if you have the `matherr' function. */\n/* #undef HAVE_MATHERR */\n\n/* Define to 1 if you have the `mbrtowc' function. */\n#define HAVE_MBRTOWC 1\n\n/* Define to 1 if the system has the type `mbstate_t'. */\n#define HAVE_MBSTATE_T 1\n\n/* Define to 1 if you have the `mbstowcs' function. */\n#define HAVE_MBSTOWCS 1\n\n/* Define to 1 if you have the <memory.h> header file. */\n#define HAVE_MEMORY_H 1\n\n/* Define to 1 if you have the `mempcpy' function. */\n#if defined(__MINGW64_VERSION_MAJOR) && __MINGW64_VERSION_MAJOR >= 2\n# define HAVE_MEMPCPY 1\n#endif\n\n/* Define to 1 if you have the `mkdtemp' function. */\n/* #undef HAVE_MKDTEMP */\n\n/* Define to 1 if you have the `mkfifo' function. */\n/* #undef HAVE_MKFIFO */\n\n/* Define to 1 if you have a working `mmap' system call. */\n/* #undef HAVE_MMAP */\n\n/* Define to 1 if you have the `munmap' function. */\n/* #undef HAVE_MUNMAP */\n\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\n/* #undef HAVE_NDIR_H */\n\n/* Define to 1 if you have the `nearbyint' function. */\n#define HAVE_NEARBYINT 1\n\n/* Define to 1 if you have the `nearbyintl' function. */\n#define HAVE_NEARBYINTL 1\n\n/* Define to 1 if you have the <netdb.h> header file. */\n/* #undef HAVE_NETDB_H */\n\n/* Define to 1 if you have the <netinet/in.h> header file. */\n/* #undef HAVE_NETINET_IN_H */\n\n/* Define to 1 if you have the `nl_langinfo' function. */\n/* #undef HAVE_NL_LANGINFO */\n\n/* Define if you have <langinfo.h> and it defines the NL_LOCALE_NAME macro if\n   _GNU_SOURCE is defined. */\n/* #undef HAVE_NL_LOCALE_NAME */\n\n/* Define if module-loading does not need an underscore to be prepended to\n   external names. */\n#define HAVE_NO_SYMBOL_UNDERSCORE 1\n\n/* Define if you have off_t, fseeko and ftello. */\n#define HAVE_OFF_T 1\n\n/* Define if you have C OpenMP support. */\n#if defined(__MINGW64_VERSION_MAJOR) && __MINGW64_VERSION_MAJOR >= 2\n// has it, but it is too slow to be usable\n// #define HAVE_OPENMP 1\n#endif\n\n/* Define if your OpenMP 4 implementation fully supports SIMD reduction */\n/* #undef HAVE_OPENMP_SIMDRED */\n\n/* Define to 1 if you have pangocairo. */\n/* #undef HAVE_PANGOCAIRO */\n\n/* Define if your system has pcre2. */\n/* #undef HAVE_PCRE2 */\n\n/* Define to 1 if you have the <pcre.h> header file. */\n/* #undef HAVE_PCRE_H */\n\n/* Define to 1 if you have the <pcre/pcre.h> header file. */\n/* #undef HAVE_PCRE_PCRE_H */\n\n/* Define if you have the PNG headers and libraries. */\n#define HAVE_PNG 1\n\n/* Define to 1 if you have the `popen' function. */\n#define HAVE_POPEN 1\n\n/* Define if your system time functions do not count leap seconds, as required\n   by POSIX. */\n#define HAVE_POSIX_LEAPSECONDS 1\n\n/* Define if your printf() function supports format strings with positions.\n   (For intl) */\n#define HAVE_POSIX_PRINTF 1\n\n/* Define if you have POSIX.1 compatible sigsetjmp/siglongjmp. */\n#define HAVE_POSIX_SETJMP 1\n\n/* Define to 1 if you have the `powl' function. */\n#define HAVE_POWL 1\n\n/* Define to 1 if you have the `pown' function. */\n/* #undef HAVE_POWN */\n\n/* Define if the <pthread.h> defines PTHREAD_MUTEX_RECURSIVE. (For intl) */\n/* #undef HAVE_PTHREAD_MUTEX_RECURSIVE */\n\n/* Define if the POSIX multithreading library has read/write locks. (For intl)\n   */\n/* #undef HAVE_PTHREAD_RWLOCK */\n\n/* Define to 1 if you have the `putenv' function. */\n#define HAVE_PUTENV 1\n\n/* Define if putenv(\"FOO\") can unset an environment variable */\n/* #undef HAVE_PUTENV_UNSET */\n\n/* Define if putenv(\"FOO=\") can unset an environment variable */\n#define HAVE_PUTENV_UNSET2 1\n\n/* Define to 1 if you have the <pwd.h> header file. */\n/* #undef HAVE_PWD_H */\n\n/* Define to 1 if you have the <readline/history.h> header file. */\n/* #undef HAVE_READLINE_HISTORY_H */\n\n/* Define to 1 if you have the <readline/readline.h> header file. */\n/* #undef HAVE_READLINE_READLINE_H */\n\n/* Define to 1 if you have the `readlink' function. */\n/* #undef HAVE_READLINK */\n\n/* Define to 1 if you have the `realpath' function. */\n/* #undef HAVE_REALPATH */\n\n/* Define to 1 if you have the `rintl' function. */\n#define HAVE_RINTL 1\n\n/* Define to 1 if you have the `rl_callback_sigcleanup' function. */\n/* #undef HAVE_RL_CALLBACK_SIGCLEANUP */\n\n/* Define to 1 if you have the `rl_completion_matches' function. */\n/* #undef HAVE_RL_COMPLETION_MATCHES */\n\n/* Define to 1 if you have the `rl_resize_terminal' function. */\n/* #undef HAVE_RL_RESIZE_TERMINAL */\n\n/* Define to 1 if you have the `rl_sort_completion_matches' function. */\n/* #undef HAVE_RL_SORT_COMPLETION_MATCHES */\n\n/* Define to 1 if you have the `sched_getaffinity' function. */\n#undef HAVE_SCHED_GETAFFINITY\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define to 1 if you have the `sched_setaffinity' function. */\n#undef HAVE_SCHED_SETAFFINITY\n\n/* Define to 1 if you have the `select' function. */\n/* #undef HAVE_SELECT */\n\n/* Define to 1 if you have the `setenv' function. */\n/* #undef HAVE_SETENV */\n\n/* Define to 1 if you have the `setitimer' function. */\n/* #undef HAVE_SETITIMER */\n\n/* Define to 1 if you have the `setlocale' function. */\n#define HAVE_SETLOCALE 1\n\n/* Define to 1 if you have the `setrlimit' function. */\n/* #undef HAVE_SETRLIMIT */\n\n/* Define to 1 if you have the `sigaction' function. */\n/* #undef HAVE_SIGACTION */\n\n/* Define to 1 if you have the `sigaltstack' function. */\n/* #undef HAVE_SIGALTSTACK */\n\n/* Define to 1 if you have the `sigemptyset' function. */\n/* #undef HAVE_SIGEMPTYSET */\n\n/* Define to 1 if you have the `sinpi' function. */\n/* #undef HAVE_SINPI */\n\n/* Define to 1 if you have the `snprintf' function. */\n#define HAVE_SNPRINTF 1\n\n/* Define to 1 if the system has the type `stack_t'. */\n/* #undef HAVE_STACK_T */\n\n/* Define to 1 if you have the `stat' function. */\n#define HAVE_STAT 1\n\n/* Define to 1 if you have the <stdalign.h> header file. */\n/* #undef HAVE_STDALIGN_H */\n\n/* Define to 1 if you have the <stdarg.h> header file. */\n#define HAVE_STDARG_H 1\n\n/* Define to 1 if you have the <stdbool.h> header file. */\n#define HAVE_STDBOOL_H 1\n\n/* Define to 1 if you have the <stddef.h> header file. */\n#define HAVE_STDDEF_H 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#define HAVE_STDINT_H 1\n\n/* Define if <stdint.h> exists, doesn't clash with <sys/types.h>, and declares\n   uintmax_t. (For intl) */\n#define HAVE_STDINT_H_WITH_UINTMAX 1\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#define HAVE_STDLIB_H 1\n\n/* Define to 1 if you have the `stpcpy' function. */\n/* #undef HAVE_STPCPY */\n\n/* Define to 1 if you have the `strcasecmp' function. */\n#define HAVE_STRCASECMP 1\n\n/* Define to 1 if you have the `strdup' function. */\n#define HAVE_STRDUP 1\n\n/* Define to 1 if you have the <strings.h> header file. */\n#define HAVE_STRINGS_H 1\n\n/* Define to 1 if you have the <string.h> header file. */\n#define HAVE_STRING_H 1\n\n/* Define to 1 if you have the `strncasecmp' function. */\n#define HAVE_STRNCASECMP 1\n\n/* Define to 1 if you have the `strtoul' function. */\n#define HAVE_STRTOUL 1\n\n/* Define to 1 if `st_atimensec' is a member of `struct stat'. */\n/* #undef HAVE_STRUCT_STAT_ST_ATIMENSEC */\n\n/* Define to 1 if `st_atimespec.tv_nsec' is a member of `struct stat'. */\n/* #undef HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC */\n\n/* Define to 1 if `st_atim.st__tim.tv_nsec' is a member of `struct stat'. */\n/* #undef HAVE_STRUCT_STAT_ST_ATIM_ST__TIM_TV_NSEC */\n\n/* Define to 1 if `st_atim.tv_nsec' is a member of `struct stat'. */\n/* #undef HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC */\n\n/* Define to 1 if you have the <sunmath.h> header file. */\n/* #undef HAVE_SUNMATH_H */\n\n/* Define to 1 if you have the `symlink' function. */\n/* #undef HAVE_SYMLINK */\n\n/* Define to 1 if you have the `sysconf' function. */\n/* #undef HAVE_SYSCONF */\n\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */\n/* #undef HAVE_SYS_DIR_H */\n\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */\n/* #undef HAVE_SYS_NDIR_H */\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#define HAVE_SYS_PARAM_H 1\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n/* #undef HAVE_SYS_RESOURCE_H */\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n/* #undef HAVE_SYS_SELECT_H */\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n/* #undef HAVE_SYS_SOCKET_H */\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#define HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/times.h> header file. */\n/* #undef HAVE_SYS_TIMES_H */\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#define HAVE_SYS_TIME_H 1\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#define HAVE_SYS_TYPES_H 1\n\n/* Define to 1 if you have the <sys/utsname.h> header file. */\n/* #undef HAVE_SYS_UTSNAME_H */\n\n/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */\n/* #undef HAVE_SYS_WAIT_H */\n\n/* Define to 1 if you have the `tanpi' function. */\n/* #undef HAVE_TANPI */\n\n/* Define if you have the Tcl/Tk headers and libraries and want Tcl/Tk support\n   to be built. */\n#define HAVE_TCLTK 1\n\n/* Define to 1 if you have the <thread.h> header file. */\n/* #undef HAVE_THREAD_H */\n\n/* Define to 1 if you have the `thr_stksegment' function. */\n/* #undef HAVE_THR_STKSEGMENT */\n\n/* Define this if libtiff is available. */\n#define HAVE_TIFF 1\n\n/* Define to 1 if you have the <tiffio.h> header file. */\n/* #undef HAVE_TIFFIO_H */\n\n/* Define to 1 if you have the `times' function. */\n#define HAVE_TIMES 1\n\n/* Define to 1 if you have the `timespec_get' function. */\n/* #undef HAVE_TIMESPEC_GET */\n\n/* Define to 1 if your 'struct tm' has tm_gmtoff. */\n/* #undef HAVE_TM_GMTOFF */\n\n/* Define to 1 if your 'struct tm' has tm_zone. */\n/* #undef HAVE_TM_ZONE */\n\n/* Define if your system has tre. */\n/* #undef HAVE_TRE */\n\n/* Define to 1 if you have the <tre/tre.h> header file. */\n/* #undef HAVE_TRE_TRE_H */\n\n/* Define to 1 if you have the `tsearch' function. */\n#if defined(__MINGW64_VERSION_MAJOR) && __MINGW64_VERSION_MAJOR >= 2\n#define HAVE_TSEARCH 1\n#endif\n\n/* Define if you have the 'uintmax_t' type in <stdint.h> or <inttypes.h>. (For\n   intl) */\n#define HAVE_UINTMAX_T 1\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#define HAVE_UINTPTR_T 1\n\n/* Define to 1 if you have the `umask' function. */\n#define HAVE_UMASK 1\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#define HAVE_UNISTD_H 1\n\n/* Define to 1 if you have the `unsetenv' function. */\n/* #undef HAVE_UNSETENV */\n\n/* Define if you have the 'unsigned long long' type. (For intl) */\n#define HAVE_UNSIGNED_LONG_LONG 1\n\n/* Define to 1 if the system has the type `unsigned long long int'. (For intl)\n   */\n#define HAVE_UNSIGNED_LONG_LONG_INT 1\n\n/* Define to 1 if you have the `utime' function. */\n/* #undef HAVE_UTIME */\n\n/* Define to 1 if you have the `utimensat' function. */\n/* #undef HAVE_UTIMENSAT */\n\n/* Define to 1 if you have the `utimes' function. */\n/* #undef HAVE_UTIMES */\n\n/* Define to 1 if you have the <utime.h> header file. */\n/* #undef HAVE_UTIME_H */\n\n/* Define to 1 if you have the <valgrind/memcheck.h> header file. */\n/* #undef HAVE_VALGRIND_MEMCHECK_H */\n\n/* Define to 1 if you have the `vasprintf' function. */\n#define HAVE_VASPRINTF 1\n\n/* Define to 1 if you have the `va_copy' function. */\n#define HAVE_VA_COPY 1\n\n/* Define to 1 or 0, depending whether the compiler supports simple visibility\n   declarations. (For intl) */\n#define HAVE_VISIBILITY 1\n\n/* Define to 1 if __attribute__((visibility())) is supported */\n/* #undef HAVE_VISIBILITY_ATTRIBUTE */\n\n/* Define to 1 if you have the <wchar.h> header file. */\n#define HAVE_WCHAR_H 1\n\n/* Define if you have the 'wchar_t' type. (For intl) */\n#define HAVE_WCHAR_T 1\n\n/* Define to 1 if you have the `wcrtomb' function. */\n#define HAVE_WCRTOMB 1\n\n/* Define to 1 if you have the `wcscoll' function. */\n#define HAVE_WCSCOLL 1\n\n/* Define to 1 if you have the `wcsftime' function. */\n#define HAVE_WCSFTIME 1\n\n/* Define to 1 if you have the `wcslen' function. */\n#define HAVE_WCSLEN 1\n\n/* Define to 1 if you have the `wcstod' function. */\n#define HAVE_WCSTOD 1\n\n/* Define to 1 if you have the `wcstombs' function. */\n#define HAVE_WCSTOMBS 1\n\n/* Define to 1 if you have the `wctrans' function. */\n#define HAVE_WCTRANS 1\n\n/* Define to 1 if the system has the type `wctrans_t'. */\n#define HAVE_WCTRANS_T 1\n\n/* Define to 1 if you have the `wctype' function. */\n#define HAVE_WCTYPE 1\n\n/* Define to 1 if you have the <wctype.h> header file. */\n#define HAVE_WCTYPE_H 1\n\n/* Define if you have the 'wint_t' type. (For intl) */\n#define HAVE_WINT_T 1\n\n/* Define if your mktime works correctly outside 1902-2037. */\n#define HAVE_WORKING_64BIT_MKTIME 1\n\n/* Define to 1 if you have cairo. */\n/* #undef HAVE_WORKING_CAIRO */\n\n/* Define if calloc(0) returns a null pointer. */\n#define HAVE_WORKING_CALLOC 1\n\n/* Define if ctanh() exists and is working correctly. */\n/* ctanh is not working correctly on Windows, see HAVE_CTANH below. */\n/* #undef HAVE_WORKING_CTANH */\n\n/* Define if your ftell works correctly on files opened for append. */\n/* #undef HAVE_WORKING_FTELL */\n\n/* Define if isfinite() is correct for -Inf/NaN/Inf. */\n#define HAVE_WORKING_ISFINITE 1\n\n/* Define if log1p() exists and is accurate enough. */\n#define HAVE_WORKING_LOG1P 1\n\n/* Define if sigaction() is complete enough for R's usage */\n/* #undef HAVE_WORKING_SIGACTION */\n\n/* Define if you have the X11 headers and libraries, and want the X11 GUI to\n   be built. */\n/* #undef HAVE_X11 */\n\n/* Define if you have the X11/Xmu headers and libraries. */\n/* #undef HAVE_X11_Xmu */\n\n/* Define to 1 if you have the `__cospi' function. */\n/* #undef HAVE___COSPI */\n\n/* Define to 1 if you have the `__fsetlocking' function. */\n/* #undef HAVE___FSETLOCKING */\n\n/* Define to 1 if you have the `__sinpi' function. */\n/* #undef HAVE___SINPI */\n\n/* Define to 1 if you have the `__tanpi' function. */\n/* #undef HAVE___TANPI */\n\n/* Define as const if the declaration of iconv() needs const. */\n#define ICONV_CONST const\n\n/* Define if you have IEEE 754 floating point arithmetic. */\n#define IEEE_754 1\n\n/* Define if integer division by zero raises signal SIGFPE. (For intl) */\n#define INTDIV0_RAISES_SIGFPE 1\n\n/* Define if you have 32 bit ints. */\n#define INT_32_BITS 1\n\n/* Define to the sub-directory where libtool stores uninstalled libraries. */\n#define LT_OBJDIR \".libs/\"\n\n/* macOS 10.12 (Sierra) or earlier */\n/* #undef MACOS_SIERRA */\n\n/* Define if mktime sets errno. */\n#define MKTIME_SETS_ERRNO 1\n\n/* Define to disable Valgrind instrumentation */\n#define NVALGRIND 1\n\n/* Define if using GNU-style Objective C runtime. */\n#define OBJC_GNU_RUNTIME 1\n\n/* Define if using NeXT/Apple-style Objective C runtime. */\n/* #undef OBJC_NEXT_RUNTIME */\n\n/* Name of package */\n#define PACKAGE \"R\"\n\n/* Define to the address where bug reports for this package should be sent. */\n#define PACKAGE_BUGREPORT \"https://bugs.r-project.org\"\n\n/* Define to the full name of this package. */\n#define PACKAGE_NAME \"R\"\n\n/* Define to the full name and version of this package. */\n#define PACKAGE_STRING \"R @VERSION@\"\n\n/* Define to the one symbol short name of this package. */\n#define PACKAGE_TARNAME \"R\"\n\n/* Define to the home page for this package. */\n#define PACKAGE_URL \"https://www.r-project.org\"\n\n/* Define to the version of this package. */\n#define PACKAGE_VERSION \"@VERSION@\"\n\n/* PCRE2 code unit width wanted. */\n/* #undef PCRE2_CODE_UNIT_WIDTH */\n\n/* Define if <inttypes.h> exists and defines unusable PRI* macros. (For intl)\n   */\n/* #undef PRI_MACROS_BROKEN */\n\n/* Define if the pthread_in_use() detection is hard. (For intl) */\n/* #undef PTHREAD_IN_USE_DETECTION_HARD */\n\n/* Define as the return type of signal handlers (`int' or `void'). */\n#define RETSIGTYPE void\n\n/* Define this to use architecture-dependent subdirectories of this name. */\n#ifndef R_ARCH\n#define R_ARCH \"\"\n#endif\n\n/* Define this to be the name of the CPU of your system. */\n#ifdef _WIN64\n#define R_CPU \"x86_64\"\n#else\n#define R_CPU \"i386\"\n#endif\n\n/* Define as `inline', or `__inline__' or `__inline' if that's what the C\n   compiler calls it, or to nothing if it is not supported. */\n#define R_INLINE inline\n\n/* Define this to enable memory profiling. */\n#define R_MEMORY_PROFILING 1\n\n/* NOTE: there is no unanimity on this.  Currently most autoconf-based\n   systems need mingw32 */\n/* Define this to be the name of the OS of your system. */\n#define R_OS \"mingw32\"\n\n/* Define this to be the canonical name (cpu-vendor-os) of your system. */\n#ifdef _WIN64\n#define R_PLATFORM \"x86_64-w64-mingw32\"\n#else\n#define R_PLATFORM \"i386-w64-mingw32\"\n#endif\n\n/* Define this to be printing command on your system. */\n#define R_PRINTCMD \"\"\n\n/* Define this to enable R-level profiling. */\n#define R_PROFILING 1\n\n/* Type for socket lengths: socklen_t, sock_t, int? */\n#define R_SOCKLEN_T int\n\n/* Define this to be the name of the vendor of your system. */\n#define R_VENDOR \"w64\"\n\n/* Define this to be the extension used for shared objects on your system. */\n#define SHLIB_EXT \".dll\"\n\n/* The size of `double', as computed by sizeof. */\n#define SIZEOF_DOUBLE 8\n\n/* The size of `int', as computed by sizeof. */\n#define SIZEOF_INT 4\n\n/* The size of `long', as computed by sizeof. */\n#define SIZEOF_LONG 4\n\n/* The size of `long double', as computed by sizeof. */\n#ifdef _WIN64\n#define SIZEOF_LONG_DOUBLE 16\n#else\n#define SIZEOF_LONG_DOUBLE 12\n#endif\n\n/* The size of `long long', as computed by sizeof. */\n#define SIZEOF_LONG_LONG 8\n\n/* The size of `size_t', as computed by sizeof. */\n#define SIZEOF_SIZE_T @ST@\n\n/* Workaround for win64 pow() precision issue in Mingw-w64 V3 and higher\n   See http://sourceforge.net/p/mingw-w64/bugs/466 for discussion. */\n#if defined(_WIN64) && defined(__MINGW64_VERSION_MAJOR) && __MINGW64_VERSION_MAJOR >= 3\n#define USE_POWL_IN_R_POW 1\n#endif\n\n/* Define as the maximum value of type 'size_t', if the system doesn't define\n   it. (For intl) */\n/* #undef SIZE_MAX */\n\n/* If using the C implementation of alloca, define if you know the\n   direction of stack growth for your system; otherwise it will be\n   automatically deduced at runtime.\n\tSTACK_DIRECTION > 0 => grows toward higher addresses\n\tSTACK_DIRECTION < 0 => grows toward lower addresses\n\tSTACK_DIRECTION = 0 => direction of growth unknown */\n/* #undef STACK_DIRECTION */\n\n/* Define to 1 if you have the ANSI C header files. */\n#define STDC_HEADERS 1\n\n/* Define if you have C/C++/Fortran OpenMP support for package code. */\n/* #undef SUPPORT_OPENMP */\n\n/* Define to enable provoking compile errors on write barrier violation. */\n/* #undef TESTING_WRITE_BARRIER */\n\n/* Define to 1 if the type of the st_atim member of a struct stat is struct\n   timespec. */\n/* #undef TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC */\n\n/* Define to use ICU for collation. */\n/* #undef USE_ICU */\n\n/* Define to use Apple's ICU. */\n/* #undef USE_ICU_APPLE */\n\n/* Define to use internal time-zone code */\n#define USE_INTERNAL_MKTIME 1\n\n/* Define if the POSIX multithreading library can be used. (For intl) */\n/* #undef USE_POSIX_THREADS */\n\n/* Define if references to the POSIX multithreading library should be made\n   weak. (For intl) */\n/* #undef USE_POSIX_THREADS_WEAK */\n\n/* Define if the GNU Pth multithreading library can be used. (For intl) */\n/* #undef USE_PTH_THREADS */\n\n/* Define if references to the GNU Pth multithreading library should be made\n   weak. (For intl) */\n/* #undef USE_PTH_THREADS_WEAK */\n\n/* Define if the old Solaris multithreading library can be used. (For intl) */\n/* #undef USE_SOLARIS_THREADS */\n\n/* Define if references to the old Solaris multithreading library should be\n   made weak. (For intl) */\n/* #undef USE_SOLARIS_THREADS_WEAK */\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n# undef _ALL_SOURCE\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# undef _GNU_SOURCE\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n# undef _POSIX_PTHREAD_SEMANTICS\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n# undef _TANDEM_SOURCE\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n# undef __EXTENSIONS__\n#endif\n\n\n/* Define if the Win32 multithreading API can be used. (For intl) */\n/* #undef USE_WIN32_THREADS */\n\n/* Define according to your operating system type. */\n/* #undef Unix */\n\n/* Define as 1 or 2 to specify levels of Valgrind instrumentation */\n#define VALGRIND_LEVEL 0\n\n/* Version number of package */\n#define VERSION \"@VERSION@\"\n\n/* Define to 1 if your processor stores words with the most significant byte\n   first (like Motorola and SPARC, unlike Intel and VAX). */\n/* #undef WORDS_BIGENDIAN */\n\n/* Define according to your operating system type. */\n#define Win32 1\n\n/* Define to 1 if the X Window System is missing or not being used. */\n#define X_DISPLAY_MISSING 1\n\n/* Enable large inode numbers on Mac OS X 10.5.  */\n#ifndef _DARWIN_USE_64_BIT_INODE\n# define _DARWIN_USE_64_BIT_INODE 1\n#endif\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n/* #undef _FILE_OFFSET_BITS */\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n/* #undef _LARGEFILE_SOURCE */\n\n/* Define for large files, on AIX-style hosts. */\n/* #undef _LARGE_FILES */\n\n/* Define to 1 if on MINIX. */\n/* #undef _MINIX */\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n/* #undef _POSIX_1_SOURCE */\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n/* #undef _POSIX_SOURCE */\n\n/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n/* #undef _UINT64_T */\n\n/* Define to 'long' if <sys/types.h> does not define. Apparently necessary to\n   fix a GCC bug on AIX? */\n#define blkcnt_t long\n\n/* Define to empty if `const' does not conform to ANSI C. */\n/* #undef const */\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n/* #undef inline */\n#endif\n\n/* Define to `int' if <sys/types.h> does not define. */\n/* #undef pid_t */\n\n/* Define as the type of the result of subtracting two pointers, if the system\n   doesn't define it. (For intl) */\n/* #undef ptrdiff_t */\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n/* #undef size_t */\n\n/* Define to the type of an unsigned integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n/* #undef uint64_t */\n\n/* Define to unsigned long or unsigned long long if <stdint.h> and\n   <inttypes.h> don't define. (For intl) */\n/* #undef uintmax_t */\n\n\n#endif /* not R_CONFIG_H */\n\n\n#define __libc_lock_t                   gl_lock_t\n#define __libc_lock_define              gl_lock_define\n#define __libc_lock_define_initialized  gl_lock_define_initialized\n#define __libc_lock_init                gl_lock_init\n#define __libc_lock_lock                gl_lock_lock\n#define __libc_lock_unlock              gl_lock_unlock\n#define __libc_lock_recursive_t                   gl_recursive_lock_t\n#define __libc_lock_define_recursive              gl_recursive_lock_define\n#define __libc_lock_define_initialized_recursive  gl_recursive_lock_define_initialized\n#define __libc_lock_init_recursive                gl_recursive_lock_init\n#define __libc_lock_lock_recursive                gl_recursive_lock_lock\n#define __libc_lock_unlock_recursive              gl_recursive_lock_unlock\n#define glthread_in_use  libintl_thread_in_use\n#define glthread_lock_init     libintl_lock_init\n#define glthread_lock_lock     libintl_lock_lock\n#define glthread_lock_unlock   libintl_lock_unlock\n#define glthread_lock_destroy  libintl_lock_destroy\n#define glthread_rwlock_init     libintl_rwlock_init\n#define glthread_rwlock_rdlock   libintl_rwlock_rdlock\n#define glthread_rwlock_wrlock   libintl_rwlock_wrlock\n#define glthread_rwlock_unlock   libintl_rwlock_unlock\n#define glthread_rwlock_destroy  libintl_rwlock_destroy\n#define glthread_recursive_lock_init     libintl_recursive_lock_init\n#define glthread_recursive_lock_lock     libintl_recursive_lock_lock\n#define glthread_recursive_lock_unlock   libintl_recursive_lock_unlock\n#define glthread_recursive_lock_destroy  libintl_recursive_lock_destroy\n#define glthread_once                 libintl_once\n#define glthread_once_call            libintl_once_call\n#define glthread_once_singlethreaded  libintl_once_singlethreaded\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/unix/hpdlfcn.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995, 1996  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1998--2000  The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <dl.h>\n\n#undef DEBUG\n\n#define RTLD_LAZY (BIND_DEFERRED | BIND_NONFATAL)\n\n/* these are added to shut up warnings that cause make check to fail. */\n#define RTLD_LOCAL 0\n#define RTLD_GLOBAL 0\n#define RTLD_NOW 0\n\n#include \"hpdlfcn.h\"\n\n/*\n * This is a minimal implementation of the ELF dlopen, dlclose, dlsym\n * and dlerror routines based on HP's shl_load, shl_unload and\n * shl_findsym. */\n\n/*\n * Reference Counting.\n *\n * Empirically it looks like the HP routines do not mainain a\n * reference count, so I maintain one here.\n */\n\ntypedef struct lib_entry {\n  shl_t handle;\n  int count;\n  struct lib_entry *next;\n} *LibEntry;\n\n#define lib_entry_handle(e) ((e)->handle)\n#define lib_entry_count(e) ((e)->count)\n#define lib_entry_next(e) ((e)->next)\n#define set_lib_entry_handle(e,v) ((e)->handle = (v))\n#define set_lib_entry_count(e,v) ((e)->count = (v))\n#define set_lib_entry_next(e,v) ((e)->next = (v))\n#define increment_lib_entry_count(e) ((e)->count++)\n#define decrement_lib_entry_count(e) ((e)->count--)\n\nstatic LibEntry Entries = NULL;\n\nstatic LibEntry find_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  for (entry = Entries; entry != NULL; entry = lib_entry_next(entry))\n    if (lib_entry_handle(entry) == handle)\n      return entry;\n  return NULL;\n}\n\nstatic LibEntry new_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  if ((entry = (LibEntry) malloc(sizeof(struct lib_entry))) != NULL) {\n    set_lib_entry_handle(entry, handle);\n    set_lib_entry_count(entry, 1);\n    set_lib_entry_next(entry, Entries);\n    Entries = entry;\n  }\n  return entry;\n}\n\nstatic void free_lib_entry(LibEntry entry)\n{\n  if (entry == Entries)\n    Entries = lib_entry_next(entry);\n  else {\n    LibEntry last, next;\n    for (last = Entries, next = lib_entry_next(last);\n\t next != NULL;\n\t last = next, next = lib_entry_next(last)) {\n      if (entry == next) {\n\tset_lib_entry_next(last, lib_entry_next(entry));\n\tbreak;\n      }\n    }\n  }\n  free(entry);\n}\n\n\n/*\n * Error Handling.\n */\n\n#define ERRBUFSIZE 1000\n\nstatic char errbuf[ERRBUFSIZE];\nstatic int dlerrno = 0;\n\nchar *dlerror(void)\n{\n  return dlerrno ? errbuf : NULL;\n}\n\n\n/*\n * Opening and Closing Liraries.\n */\n\nvoid *dlopen(const char *fname, int mode)\n{\n  shl_t handle;\n  LibEntry entry = NULL;\n\n  dlerrno = 0;\n  if (fname == NULL)\n    handle = PROG_HANDLE;\n  else {\n    handle = shl_load(fname, mode | BIND_VERBOSE, 0L);\n    if (handle != NULL) {\n      if ((entry = find_lib_entry(handle)) == NULL) {\n\tif ((entry = new_lib_entry(handle)) == NULL) {\n\t  shl_unload(handle);\n\t  handle = NULL;\n\t}\n      }\n      else\n\tincrement_lib_entry_count(entry);\n    }\n    if (handle == NULL) {\n      dlerrno = 1;\n      sprintf(errbuf, \"can't open %s\", fname);\n    }\n  }\n#ifdef DEBUG\n  printf(\"opening library %s, handle = %x, count = %d\\n\",\n\t fname, handle, entry ? lib_entry_count(entry) : -1);\n  if (dlerrno) printf(\"%s\\n\", dlerror());\n#endif\n  return (void *) handle;\n}\n\nint dlclose(void *handle)\n{\n  LibEntry entry;\n#ifdef DEBUG\n  entry = find_lib_entry(handle);\n  printf(\"closing library handle = %x, count = %d\\n\",\n\t handle, entry ? lib_entry_count(entry) : -1);\n#endif\n\n  dlerrno = 0;\n  if ((shl_t) handle == PROG_HANDLE)\n    return 0; /* ignore attempts to close main program */\n  else {\n\n    if ((entry = find_lib_entry((shl_t) handle)) != NULL) {\n      decrement_lib_entry_count(entry);\n      if (lib_entry_count(entry) > 0)\n\treturn 0;\n      else {\n\t/* unload once reference count reaches zero */\n\tfree_lib_entry(entry);\n\tif (shl_unload((shl_t) handle) == 0)\n\t  return 0;\n      }\n    }\n    /* if you get to here, an error has occurred */\n    dlerrno = 1;\n    sprintf(errbuf, \"attempt to close library failed\");\n#ifdef DEBUG\n    printf(\"%s\\n\", dlerror());\n#endif\n    return -1;\n  }\n}\n\n\n/*\n * Symbol Lookup.\n */\n\nvoid *dlsym(void *handle, const char *name)\n{\n  void *f;\n  shl_t myhandle;\n\n  dlerrno = 0;\n  myhandle = (handle == NULL) ? PROG_HANDLE : (shl_t) handle;\n\n  if (shl_findsym(&myhandle, name, TYPE_PROCEDURE, &f) != 0) {\n    dlerrno = 1;\n    sprintf(errbuf, \"symbol %s not found\", name);\n#ifdef DEBUG\n    printf(\"symbol %s not found\", name);\n#endif\n\n    f = NULL;\n  }\n\n  return(f);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/unix/dynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2016 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n/* <UTF8> char here is handled as a whole string */\n\n\n/* This provides a table of built-in C and Fortran functions.\n   We include this table, even when we have dlopen and friends.\n   This is so that the functions are actually loaded at link time. */\n\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Rdynpriv.h>\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   include \"hpdlfcn.c\"\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   include <dlfcn.h>\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif\n\n#ifdef HAVE_DYNAMIC_LOADING\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search);\nstatic void closeLibrary(void *handle);\nstatic void deleteCachedSymbols(DllInfo *);\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name);\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path);\nstatic void getSystemError(char *buf, int len);\n\nstatic int computeDLOpenFlag(int asLocal, int now);\n\nvoid attribute_hidden InitFunctionHashing()\n{\n    R_osDynSymbol->loadLibrary = loadLibrary;\n    R_osDynSymbol->dlsym = R_local_dlsym;\n    R_osDynSymbol->closeLibrary = closeLibrary;\n    R_osDynSymbol->getError = getSystemError;\n\n    R_osDynSymbol->deleteCachedSymbols = deleteCachedSymbols;\n    R_osDynSymbol->lookupCachedSymbol = Rf_lookupCachedSymbol;\n\n    R_osDynSymbol->getFullDLLPath = getFullDLLPath;\n}\n\nstatic void getSystemError(char *buf, int len)\n{\n    strcpy(buf, dlerror());\n}\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search)\n{\n    void *handle;\n    int openFlag = 0;\n\n    openFlag = computeDLOpenFlag(asLocal, now);\n    handle = (void *) dlopen(path,openFlag);\n\n    return(handle);\n}\n\nstatic void closeLibrary(HINSTANCE handle)\n{\n    dlclose(handle);\n}\n\n /*\n   If we are caching the native level symbols, this routine\n   discards the ones from the DLL identified by loc.\n   This is called as the initial action of DeleteDLL().\n  */\nstatic void deleteCachedSymbols(DllInfo *dll)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    /* Wouldn't a linked list be easier here?\n       Potentially ruin the contiguity of the memory.\n    */\n    for(i = nCPFun - 1; i >= 0; i--)\n\tif(!strcmp(CPFun[i].pkg, dll->name)) {\n\t    if(i < nCPFun - 1) {\n\t\tstrcpy(CPFun[i].name, CPFun[--nCPFun].name);\n\t\tstrcpy(CPFun[i].pkg, CPFun[nCPFun].pkg);\n\t\tCPFun[i].func = CPFun[nCPFun].func;\n\t    } else nCPFun--;\n\t}\n#endif /* CACHE_DLL_SYM */\n}\n\n\n /*\n    Computes the flag to be passed as the second argument to dlopen(),\n    controlling whether the local or global symbol integration\n    and lazy or eager resolution of the undefined symbols.\n    The arguments determine which of each of these possibilities\n    to use and the results are or'ed together. We need a separate\n    routine to keep things clean(er) because some symbolic constants\n    may not  be defined, such as RTLD_LOCAL on certain Solaris 2.5.1\n    and Irix 6.4    boxes. In such cases, we emit a warning message and\n    use the default by not modifying the value of the flag.\n\n    Called only by AddDLL().\n  */\nstatic int computeDLOpenFlag(int asLocal, int now)\n{\n#if !defined(RTLD_LOCAL) || !defined(RTLD_GLOBAL) || !defined(RTLD_NOW) || !defined(RTLD_LAZY)\n    static char *warningMessages[] = {\n\tN_(\"Explicit local dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit global dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit non-lazy dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit lazy dynamic loading not supported on this platform. Using default.\")\n    };\n    /* Define a local macro for issuing the warnings.\n       This allows us to redefine it easily so that it only emits the\n       warning once as in\n       DL_WARN(i) if(warningMessages[i]) {\\\n       warning(warningMessages[i]); \\\n       warningMessages[i] = NULL; \\\n       }\n       or to control the emission via the options currently in effect at\n       call time.\n    */\n# define DL_WARN(i) \\\n    if(asInteger(GetOption1(install(\"warn\"))) == 1 || \\\n       asInteger(GetOption1(install(\"verbose\"))) > 0) \\\n\twarning(_(warningMessages[i]))\n#endif\n\n    int openFlag = 0;\t\t/* Default value so no-ops for undefined\n\t\t\t\t   flags should do nothing in the\n\t\t\t\t   resulting dlopen(). */\n\n    if(asLocal != 0) {\n#ifndef RTLD_LOCAL\n\tDL_WARN(0);\n#else\n\topenFlag = RTLD_LOCAL;\n#endif\n    } else {\n#ifndef RTLD_GLOBAL\n\tDL_WARN(1);\n#else\n\topenFlag = RTLD_GLOBAL;\n#endif\n    }\n\n    if(now != 0) {\n#ifndef RTLD_NOW\n\tDL_WARN(2);\n#else\n\topenFlag |= RTLD_NOW;\n#endif\n    } else {\n#ifndef RTLD_LAZY\n\tDL_WARN(3);\n#else\n\topenFlag |= RTLD_LAZY;\n#endif\n    }\n\n    return(openFlag);\n}\n\n\n/*\n  This is the system/OS-specific version for resolving a\n  symbol in a shared object.  A cast would not be legal C.\n */\n/*\n  We are not interested in NULL symbols in the shared object.\n  If we were, this would need to use dlerror() before and after\n  dlsym, and check the second value is NULL.\n */\ntypedef union {void *p; DL_FUNC fn;} fn_ptr;\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name)\n{\n    fn_ptr tmp;\n    tmp.p = dlsym(info->handle, name);\n    return tmp.fn;\n}\n\n\n/*\n  In the future, this will receive an additional argument\n  which will specify the nature of the symbol expected by the\n  caller, specifically whether it is for a .C(), .Call(),\n  .Fortran(), .External(), generic, etc. invocation. This will\n  reduce the pool of possible symbols in the case of a library\n  that registers its routines.\n */\n\n\n\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path)\n{\n    if(path[0] == '~')\n\tstrcpy(buf, R_ExpandFileName(path));\n    else if(path[0] != '/') {\n#ifdef HAVE_GETCWD\n\tif(!getcwd(buf, PATH_MAX))\n#endif\n\t    errorcall(call, _(\"cannot get working directory!\"));\n\tstrcat(buf, \"/\");\n\tstrcat(buf, path);\n    }\n    else strcpy(buf, path);\n}\n\n#endif /* end of `ifdef HAVE_DYNAMIC_LOADING' */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/unix/hpdlfcn.h": "void *dlopen(const char *, int);\nvoid *dlsym(void *, const char *);\nint dlclose(void *);\nchar *dlerror(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\ndnl commented out to avoid autoconf warnings\ndnl # serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tools/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/R-exts.texi": "\\input texinfo\n@c %**start of header\n@setfilename R-exts.info\n@settitle Writing R Extensions\n@setchapternewpage on\n@c %**end of header\n\n@c @documentencoding ISO-8859-1\n\n@c Put the functions in the variable index\n@syncodeindex fn vr\n\n@dircategory Programming\n@direntry\n* R Extensions: (R-exts).      Writing R Extensions.\n@end direntry\n\n@finalout\n\n@include R-defs.texi\n@include version.texi\n\n@copying\nThis manual is for R, version @value{VERSION}.\n\n@Rcopyright{1999}\n\n@quotation\n@permission{}\n@end quotation\n@end copying\n\n@titlepage\n@title Writing R Extensions\n@subtitle Version @value{VERSION}\n@author R Core Team\n@page\n@vskip 0pt plus 1filll\n@insertcopying\n@end titlepage\n\n@ifplaintext\n@insertcopying\n@end ifplaintext\n\n@c @ifnothtml\n@contents\n@c @end ifnothtml\n\n@ifnottex\n@node Top, Acknowledgements, (dir), (dir)\n@top Writing R Extensions\n\nThis is a guide to extending @R{}, describing the process of creating\n@R{} add-on packages, writing @R{} documentation, @R{}'s system and\nforeign language interfaces, and the @R{} @acronym{API}.\n\n@insertcopying\n\n@end ifnottex\n\n@menu\n* Acknowledgements::            \n* Creating R packages::         \n* Writing R documentation files::  \n* Tidying and profiling R code::  \n* Debugging::                   \n* System and foreign language interfaces::  \n* The R API::                   \n* Generic functions and methods::  \n* Linking GUIs and other front-ends to R::  \n* Function and variable index::  \n* Concept index::               \n@end menu\n\n@node Acknowledgements, Creating R packages, Top, Top\n@unnumbered Acknowledgements\n\n\nThe contributions to early versions of this manual by Saikat DebRoy\n(who wrote the first draft of a guide to using @code{.Call} and\n@code{.External}) and Adrian Trapletti (who provided information on the\nC++ interface) are gratefully acknowledged.\n\n@node Creating R packages, Writing R documentation files, Acknowledgements, Top\n@chapter Creating R packages\n@cindex Packages\n@cindex Creating packages\n\nPackages provide a mechanism for loading optional code, data and\ndocumentation as needed.  The @R{} distribution itself includes about 30\npackages.\n\nIn the following, we assume that you know the @code{library()} command,\nincluding its @code{lib.loc} argument, and we also assume basic\nknowledge of the @command{R CMD INSTALL} utility.  Otherwise, please\nlook at @R{}'s help pages on\n\n@example\n?library\n?INSTALL\n@end example\n\n@noindent\nbefore reading on.\n\nFor packages which contain code to be compiled, a computing environment\nincluding a number of tools is assumed; the ``R Installation and\nAdministration'' manual describes what is needed for each OS.\n\nOnce a source package is created, it must be installed by\nthe command @code{R CMD INSTALL}.\n@ifset UseExternalXrefs\n@xref{Add-on packages, , Add-on-packages,\nR-admin, R Installation and Administration}.\n@end ifset\n\nOther types of extensions are supported (but rare): @xref{Package types}.\n\nSome notes on terminology complete this introduction.  These will help\nwith the reading of this manual, and also in describing concepts\naccurately when asking for help.\n\nA @emph{package} is a directory of files which extend @R{}, a\n@emph{source package} (the master files of a package), or a tarball\ncontaining the files of a source package, or an @emph{installed}\npackage, the result of running @command{R CMD INSTALL} on a source\npackage.  On some platforms (notably macOS and Windows) there are also\n@emph{binary packages}, a zip file or tarball containing the files of an\ninstalled package which can be unpacked rather than installing from\nsources.\n\nA package is @strong{not}@footnote{although this is a persistent\nmis-usage.  It seems to stem from S, whose analogues of @R{}'s packages\nwere officially known as @emph{library sections} and later as\n@emph{chapters}, but almost always referred to as @emph{libraries}.} a\n@emph{library}.  The latter is used in two senses in @R{} documentation.\n\n@itemize\n\n@item\nA directory into which packages are installed, e.g.@:\n@file{/usr/lib/R/library}: in that sense it is sometimes referred to as\na @emph{library directory} or @emph{library tree} (since the library is\na directory which contains packages as directories, which themselves\ncontain directories).\n\n@item\nThat used by the operating system, as a shared, dynamic or static\nlibrary or (especially on Windows) a DLL, where the second L stands for\n`library'.  Installed packages may contain compiled code in what is\nknown on Unix-alikes as a @emph{shared object} and on Windows as a DLL.\nThe concept of a @emph{shared library} (@emph{dynamic library} on macOS)\nas a collection of compiled code to which a package might link is also\nused, especially for @R{} itself on some platforms. On most platforms\nthese concepts are interchangeable (shared objects and DLLs can both be\nloaded into the @R{} process and be linked against), but macOS\ndistinguishes between shared objects (extension @file{.so}) and dynamic\nlibraries (extension @file{.dylib}).\n\n@end itemize\n\nThere are a number of well-defined operations on source packages.\n\n@itemize\n\n@item\nThe most common is @emph{installation} which takes a source package and\ninstalls it in a library using @command{R CMD INSTALL} or\n@code{install.packages}.\n\n@item\nSource packages can be @emph{built}.  This involves taking a source\ndirectory and creating a tarball ready for distribution, including\ncleaning it up and creating PDF documentation from any @emph{vignettes}\nit may contain.  Source packages (and most often tarballs) can be\n@emph{checked}, when a test installation is done and tested (including\nrunning its examples); also, the contents of the package are tested in\nvarious ways for consistency and portability.\n\n@item\n@emph{Compilation} is not a correct term for a package.  Installing a\nsource package which contains C, C++ or Fortran code will involve\ncompiling that code.  There is also the possibility of `byte' compiling\nthe @R{} code in a package (using the facilities of package\n@pkg{compiler}): since @R{} 3.5.0, this is enabled by default for all\npackages. Prior to @R{} 3.5.0, base and recommended packages were normally\nbyte-compiled, but this had to be specified explicitly for other packages. So\n@emph{compiling} a package may come to mean byte-compiling its @R{}\ncode.\n\n@item\nIt used to be unambiguous to talk about @emph{loading} an installed\npackage using @code{library()}, but since the advent of package\nnamespaces this has been less clear: people now often talk about\n@emph{loading} the package's namespace and then @emph{attaching} the\npackage so it becomes visible on the search path.  Function\n@code{library} performs both steps, but a package's namespace can be\nloaded without the package being attached (for example by calls like\n@code{splines::ns}).\n\n@end itemize\n\nThe concept of @emph{lazy loading} of code or data is mentioned at\nseveral points.  This is part of the installation, always selected for\n@R{} code but optional for data.  When used the @R{} objects of the\npackage are created at installation time and stored in a database in the\n@file{R} directory of the installed package, being loaded into the\nsession at first use.  This makes the @R{} session start up faster and\nuse less (virtual) memory.\n@ifset UseExternalXrefs\n(For technical details,\n@pxref{Lazy loading, , Lazy loading, R-ints,  R Internals}.)\n@end ifset\n\n@cindex CRAN\n@acronym{CRAN} is a network of WWW sites holding the @R{} distributions\nand contributed code, especially @R{} packages.  Users of @R{} are\nencouraged to join in the collaborative project and to submit their own\npackages to @acronym{CRAN}: current instructions are linked from\n@uref{https://CRAN.R-project.org/@/banner.shtml#submitting}.\n\n\n@menu\n* Package structure::           \n* Configure and cleanup::       \n* Checking and building packages::  \n* Writing package vignettes::   \n* Package namespaces::          \n* Writing portable packages::   \n* Diagnostic messages::         \n* Internationalization::        \n* CITATION files::              \n* Package types::               \n* Services::                    \n@end menu\n\n@node Package structure, Configure and cleanup, Creating R packages, Creating R packages\n@section Package structure\n@cindex Package structure\n\nThe sources of an @R{} package consists of a subdirectory containing a\nfiles @file{DESCRIPTION} and @file{NAMESPACE}, and the subdirectories\n@file{R}, @file{data}, @file{demo}, @file{exec}, @file{inst},\n@file{man}, @file{po}, @file{src}, @file{tests}, @file{tools} and\n@file{vignettes} (some of which can be missing, but which should not be\nempty).  The package subdirectory may also contain files @file{INDEX},\n@file{configure}, @file{cleanup}, @file{LICENSE}, @file{LICENCE} and\n@file{NEWS}.  Other files such as @file{INSTALL} (for non-standard\ninstallation instructions), @file{README}/@file{README.md}@footnote{This\nseems to be commonly used for a file in `markdown' format.  Be aware\nthat most users of @R{} will not know that, nor know how to view such a\nfile: platforms such as macOS and Windows do not have a default viewer\nset in their file associations.  The @acronym{CRAN} package web pages\nrender such files in @HTML{}: the converter used expects the file to be\nencoded in UTF-8.}, or @file{ChangeLog} will be ignored by @R{}, but may\nbe useful to end users.  The utility @command{R CMD build} may add files\nin a @file{build} directory (but this should not be used for other\npurposes).\n\nExcept where specifically mentioned,@footnote{currently, top-level files\n@file{.Rbuildignore} and @file{.Rinstignore}, and\n@file{vignettes/.install_extras}.} packages should not contain\nUnix-style `hidden' files/directories (that is, those whose name starts\nwith a dot).\n\nThe @file{DESCRIPTION} and @file{INDEX} files are described in the\nsubsections below.  The @file{NAMESPACE} file is described in the\nsection on @ref{Package namespaces}.\n\n@cindex configure file\n@cindex cleanup file\n\nThe optional files @file{configure} and @file{cleanup} are (Bourne)\nshell scripts which are, respectively, executed before and (if option\n@option{--clean} was given) after installation on Unix-alikes, see\n@ref{Configure and cleanup}.  The analogues on Windows are\n@file{configure.win} and @file{cleanup.win}.\n\nFor the conventions for files @file{NEWS} and @file{ChangeLog} in the\n@acronym{GNU} project see\n@uref{https://www.gnu.org/@/prep/@/standards/@/standards.html#Documentation}.\n\nThe package subdirectory should be given the same name as the package.\nBecause some file systems (e.g., those on Windows and by default on OS\nX) are not case-sensitive, to maintain portability it is strongly\nrecommended that case distinctions not be used to distinguish different\npackages.  For example, if you have a package named @file{foo}, do not\nalso create a package named @file{Foo}.\n\nTo ensure that file names are valid across file systems and supported\noperating systems, the @acronym{ASCII} control characters as well as the\ncharacters @samp{\"}, @samp{*}, @samp{:}, @samp{/}, @samp{<}, @samp{>},\n@samp{?}, @samp{\\}, and @samp{|} are not allowed in file names.  In\naddition, files with names @samp{con}, @samp{prn}, @samp{aux},\n@samp{clock$}, @samp{nul}, @samp{com1} to @samp{com9}, and @samp{lpt1}\nto @samp{lpt9} after conversion to lower case and stripping possible\n``extensions'' (e.g., @samp{lpt5.foo.bar}), are disallowed.  Also, file\nnames in the same directory must not differ only by case (see the\nprevious paragraph).  In addition, the basenames of @samp{.Rd} files may\nbe used in URLs and so must be @acronym{ASCII} and not contain @code{%}.\nFor maximal portability filenames should only contain only\n@acronym{ASCII} characters not excluded already (that is\n@code{A-Za-z0-9._!#$%&+,;=@@^()@{@}'[]} --- we exclude space as many\nutilities do not accept spaces in file paths): non-English alphabetic\ncharacters cannot be guaranteed to be supported in all locales.  It\nwould be good practice to avoid the shell metacharacters\n@code{()@{@}'[]$~}: @code{~} is also used as part of `8.3' filenames on\nWindows.  In addition, packages are normally distributed as tarballs,\nand these have a limit on path lengths: for maximal portability 100\nbytes.\n\nA source package if possible should not contain binary executable files:\nthey are not portable, and a security risk if they are of the\nappropriate architecture.  @command{R CMD check} will warn about\nthem@footnote{false positives are possible, but only a handful have been\nseen so far.} unless they are listed (one filepath per line) in a file\n@file{BinaryFiles} at the top level of the package.  Note that\n@acronym{CRAN} will not accept submissions containing binary files\neven if they are listed.\n\nThe @R{} function @code{package.skeleton} can help to create the\nstructure for a new package: see its help page for details.\n\n@menu\n* The DESCRIPTION file::        \n* Licensing::                   \n* Package Dependencies::        \n* The INDEX file::              \n* Package subdirectories::      \n* Data in packages::            \n* Non-R scripts in packages::   \n* Specifying URLs::             \n@end menu\n\n@node The DESCRIPTION file, Licensing, Package structure, Package structure\n@subsection The @file{DESCRIPTION} file\n@cindex DESCRIPTION file\n\nThe @file{DESCRIPTION} file contains basic information about the package\nin the following format:\n\n@quotation\n@cartouche\n@smallexample\nPackage: pkgname\nVersion: 0.5-1\nDate: 2015-01-01\nTitle: My First Collection of Functions\nAuthors@@R: c(person(\"Joe\", \"Developer\", role = c(\"aut\", \"cre\"),\n                     email = \"Joe.Developer@@some.domain.net\"),\n              person(\"Pat\", \"Developer\", role = \"aut\"),\n              person(\"A.\", \"User\", role = \"ctb\",\n                     email = \"A.User@@whereever.net\"))\nAuthor: Joe Developer [aut, cre],\n  Pat Developer [aut],\n  A. User [ctb]\nMaintainer: Joe Developer <Joe.Developer@@some.domain.net>\nDepends: R (>= 3.1.0), nlme\nSuggests: MASS\nDescription: A (one paragraph) description of what\n  the package does and why it may be useful.\nLicense: GPL (>= 2)\nURL: https://www.r-project.org, http://www.another.url\nBugReports: https://pkgname.bugtracker.url\n@end smallexample\n@end cartouche\n@end quotation\n\n@noindent\nThe format is that of a version of a `Debian Control File' (see the help\nfor @samp{read.dcf} and\n@uref{https://www.debian.org/@/doc/@/debian-policy/@/index.html#document-ch-controlfields}:\n@R{} does not require encoding in UTF-8 and does not support comments\nstarting with @samp{#}).  Fields start with an @acronym{ASCII} name\nimmediately followed by a colon: the value starts after the colon and a\nspace.  Continuation lines (for example, for descriptions longer than\none line) start with a space or tab.  Field names are case-sensitive:\nall those used by @R{} are capitalized.\n\nFor maximal portability, the @file{DESCRIPTION} file should be written\nentirely in @acronym{ASCII} --- if this is not possible it must contain\nan @samp{Encoding} field (see below).\n\nSeveral optional fields take @emph{logical values}: these can be\nspecified as @samp{yes}, @samp{true}, @samp{no} or @samp{false}:\ncapitalized values are also accepted.\n\nThe @samp{Package}, @samp{Version}, @samp{License}, @samp{Description},\n@samp{Title}, @samp{Author}, and @samp{Maintainer} fields are mandatory,\nall other fields are optional.  Fields @samp{Author} and\n@samp{Maintainer} can be auto-generated from @samp{Authors@@R}, and may\nbe omitted if the latter is provided: however if they are not\n@acronym{ASCII} we recommend that they are provided.\n\n@c DESCRIPTION field Package\nThe mandatory @samp{Package} field gives the name of the package.  This\nshould contain only (@acronym{ASCII}) letters, numbers and dot, have at\nleast two characters and start with a letter and not end in a dot.  If\nit needs explaining, this should be done in the @samp{Description} field\n(and not the @samp{Title} field).\n\n@c DESCRIPTION field Version\nThe mandatory @samp{Version} field gives the version of the package.\nThis is a sequence of at least @emph{two} (and usually three)\nnon-negative integers separated by single @samp{.} or @samp{-}\ncharacters.  The canonical form is as shown in the example, and a\nversion such as @samp{0.01} or @samp{0.01.0} will be handled as if it\nwere @samp{0.1-0}.  It is @strong{not} a decimal number, so for example\n@code{0.9 < 0.75} since @code{9 < 75}.\n\nThe mandatory @samp{License} field is discussed in the next subsection.\n\n@c DESCRIPTION field Title\nThe mandatory @samp{Title} field should give a @emph{short} description\nof the package.  Some package listings may truncate the title to 65\ncharacters.  It should use @emph{title case} (that is, use capitals for\nthe principal words: @code{tools::toTitleCase} can help you with this),\nnot use any markup, not have any continuation lines, and not end in a\nperiod (unless part of @dots{}).  Do not repeat the package name: it is\noften used prefixed by the name.  Refer to other packages and external\nsoftware in single quotes, and to book titles (and similar) in double\nquotes.\n\n@c DESCRIPTION field Description\nThe mandatory @samp{Description} field should give a\n@emph{comprehensive} description of what the package does.  One can use\nseveral (complete) sentences, but only one paragraph. It should be\nintelligible to all the intended readership (e.g.@: for a @acronym{CRAN}\npackage to all @acronym{CRAN} users).  It is good practice not to start\nwith the package name, `This package' or similar.  As with the\n@samp{Title} field, double quotes should be used for quotations\n(including titles of books and articles), and single quotes for\nnon-English usage, including names of other packages and external\nsoftware.  This field should also be used for explaining the package\nname if necessary.  URLs should be enclosed in angle brackets, e.g.@:\n@samp{<https://www.r-project.org>}: see also @ref{Specifying URLs}.\n\n@c DESCRIPTION field Author\n@c DESCRIPTION field Authors@R\nThe mandatory @samp{Author} field describes who wrote @emph{the\npackage}.  It is a plain text field intended for human readers, but not\nfor automatic processing (such as extracting the email addresses of all\nlisted contributors: for that use @samp{Authors@@R}).  Note that all\nsignificant contributors must be included: if you wrote an @R{} wrapper\nfor the work of others included in the @file{src} directory, you are not\nthe sole (and maybe not even the main) author.\n\n@c DESCRIPTION field Maintainer\nThe mandatory @samp{Maintainer} field should give a @emph{single} name\nfollowed by a @emph{valid} (RFC 2822) email address in angle brackets.  It\nshould not end in a period or comma.  This field is what is reported by\nthe @code{maintainer} function and used by @code{bug.report}.  For a\n@acronym{CRAN} package it should be a @emph{person}, not a mailing list\nand not a corporate entity: do ensure that it is valid and will remain\nvalid for the lifetime of the package.\n\nNote that the @emph{display name} (the part before the address in angle\nbrackets) should be enclosed in double quotes if it contains\nnon-alphanumeric characters such as comma or period.  (The current\nstandard, RFC 5322, allows periods but RFC 2822 did not.)\n\nBoth @samp{Author} and @samp{Maintainer} fields can be omitted if a\nsuitable @samp{Authors@@R} field is given.  This field can be used to\nprovide a refined and machine-readable description of the package\n``authors'' (in particular specifying their precise @emph{roles}), via\nsuitable @R{} code. It should create an object of class @code{\"person\"},\nby either a call to @code{person} or a series of calls (one per\n``author'') concatenated by @code{c()}: see the example\n@file{DESCRIPTION} file above.  The roles can include @samp{\"aut\"}\n(author) for full authors, @samp{\"cre\"} (creator) for the package\nmaintainer, and @samp{\"ctb\"} (contributor) for other contributors,\n@samp{\"cph\"} (copyright holder), among others.  See @code{?person} for\nmore information.  Note that no role is assumed by default.\nAuto-generated package citation information takes advantage of this\nspecification. The @samp{Author} and @samp{Maintainer} fields are\nauto-generated from it if needed when building@footnote{at least if this\nis done in a locale which matches the package encoding.} or installing.\n\n@findex COPYRIGHTS\n@c DESCRIPTION field Copyright\nAn optional @samp{Copyright} field can be used where the copyright\nholder(s) are not the authors.  If necessary, this can refer to an\ninstalled file: the convention is to use file @file{inst/COPYRIGHTS}.\n\n@c DESCRIPTION field Date\nThe optional @samp{Date} field gives the @emph{release date} of the\ncurrent version of the package.  It is strongly recommended@footnote{and\nrequired by @acronym{CRAN}, so checked by @command{R CMD check\n--as-cran}.} to use the @samp{yyyy-mm-dd} format conforming to the ISO\n8601 standard.\n\nThe @samp{Depends}, @samp{Imports}, @samp{Suggests}, @samp{Enhances},\n@samp{LinkingTo} and @samp{Additional_repositories} fields are discussed\nin a later subsection.\n\n@c DESCRIPTION field SystemRequirements\nDependencies external to the @R{} system should be listed in the\n@samp{SystemRequirements} field, possibly amplified in a separate\n@file{README} file.\n\n@c DESCRIPTION field URL\nThe @samp{URL} field may give a list of @acronym{URL}s\nseparated by commas or whitespace, for example the homepage of the\nauthor or a page where additional material describing the software can\nbe found.  These @acronym{URL}s are converted to active hyperlinks in\n@acronym{CRAN} package listings.  @xref{Specifying URLs}.\n\n@c DESCRIPTION field BugReports\nThe @samp{BugReports} field may contain a single @acronym{URL} to which\nbug reports about the package should be submitted.  This @acronym{URL}\nwill be used by @code{bug.report} instead of sending an email to the\nmaintainer.  A browser is opened for a @samp{http://} or @samp{https://}\n@acronym{URL}.  As from @R{} 3.4.0, @code{bug.report} will try to\nextract an email address (preferably from a @samp{mailto:} URL or\nenclosed in angle brackets).\n\n@c DESCRIPTION field Priority\nBase and recommended packages (i.e., packages contained in the @R{}\nsource distribution or available from @acronym{CRAN} and recommended to\nbe included in every binary distribution of @R{}) have a @samp{Priority}\nfield with value @samp{base} or @samp{recommended}, respectively.  These\npriorities must not be used by other packages.\n\n@c DESCRIPTION field Collate\n@c DESCRIPTION field Collate.unix\n@c DESCRIPTION field Collate.windows\nA @samp{Collate} field can be used for controlling the collation order\nfor the @R{} code files in a package when these are processed for\npackage installation.  The default is to collate according to the\n@samp{C} locale.  If present, the collate specification must list\n@emph{all} @R{} code files in the package (taking possible OS-specific\nsubdirectories into account, see @ref{Package subdirectories}) as a\nwhitespace separated list of file paths relative to the @file{R}\nsubdirectory.\n@c % double quotes are not allowed in path names, for Windows\nPaths containing white space or quotes need to be quoted.  An\nOS-specific collation field (@samp{Collate.unix} or\n@samp{Collate.windows}) will be used in preference to @samp{Collate}.\n\n@c DESCRIPTION field LazyData\n@c DESCRIPTION field LazyLoad\nThe @samp{LazyData} logical field controls whether the @R{} datasets use\nlazy-loading.  A @samp{LazyLoad} field was used in versions prior to\n2.14.0, but now is ignored.\n\n@c DESCRIPTION field KeepSource\nThe @samp{KeepSource} logical field controls if the package code is sourced\nusing @code{keep.source = TRUE} or @code{FALSE}: it might be needed\nexceptionally for a package designed to always be used with\n@code{keep.source = TRUE}.\n\n@c DESCRIPTION field ByteCompile\nThe @samp{ByteCompile} logical field controls if the package code is to be\nbyte-compiled on installation: since @R{} 3.5.0, the default is to\nbyte-compile.  Prior to @R{} 3.5.0, the default was not to, but\nrecommended packages were already byte-compiled.  This can be overridden by\ninstalling with flag @option{--no-byte-compile}.\n\n@c DESCRIPTION field ZipData\nThe @samp{ZipData} logical field was used to control whether the automatic\nWindows build would zip up the data directory or not prior to @R{}\n2.13.0: it is now ignored.\n\n@c DESCRIPTION field Biarch\nThe @samp{Biarch} logical field is used on Windows to select the\n@command{INSTALL} option @option{--force-biarch} for this package.\n\n@c DESCRIPTION field BuildVignettes\nThe @samp{BuildVignettes} logical field can be set to a false value to\nstop @command{R CMD build} from attempting to build the vignettes, as\nwell as preventing@footnote{But it is checked for Open Source packages\nby @command{R CMD check --as-cran}.}  @command{R CMD check} from testing\nthis.  This should only be used exceptionally, for example if the PDFs\ninclude large figures which are not part of the package sources (and\nhence only in packages which do not have an Open Source license).\n\n@c DESCRIPTION field VignetteBuilder\nThe @samp{VignetteBuilder} field names (in a comma-separated list)\npackages that provide an engine for building vignettes.  These may\ninclude the current package, or ones listed in @samp{Depends},\n@samp{Suggests} or @samp{Imports}. The @pkg{utils} package is always\nimplicitly appended.  See @ref{Non-Sweave vignettes} for details.  Note\nthat if, for example, the vignette `engine' is @samp{knitr::rmarkdown}\nthis field needs to declare both @CRANpkg{knitr} and\n@CRANpkg{rmarkdown}.\n\n@c DESCRIPTION field Encoding\nIf the @file{DESCRIPTION} file is not entirely in @acronym{ASCII} it\nshould contain an @samp{Encoding} field specifying an encoding.  This is\nused as the encoding of the @file{DESCRIPTION} file itself and of the\n@file{R} and @file{NAMESPACE} files, and as the default encoding of\n@file{.Rd} files.  The examples are assumed to be in this encoding when\nrunning @command{R CMD check}, and it is used for the encoding of the\n@code{CITATION} file.  Only encoding names @code{latin1}, @code{latin2}\nand @code{UTF-8} are known to be portable.  (Do not specify an encoding\nunless one is actually needed: doing so makes the package @emph{less}\nportable.  If a package has a specified encoding, you should run\n@command{R CMD build} etc in a locale using that encoding.)\n\n@c DESCRIPTION NeedsCompilation\nThe @samp{NeedsCompilation} field should be set to @code{\"yes\"} if the\npackage contains code which to be compiled, otherwise @code{\"no\"} (when\nthe package could be installed from source on any platform without\nadditional tools).  This is used by @code{install.packages(type =\n\"both\")} in @R{} >= 2.15.2 on platforms where binary packages are the\nnorm: it is normally set by @command{R CMD build} or the repository\nassuming compilation is required if and only if the package has a\n@file{src} directory.\n\n@c DESCRIPTION field OS_type\nThe @samp{OS_type} field specifies the OS(es) for which the\npackage is intended.  If present, it should be one of @code{unix} or\n@code{windows}, and indicates that the package can only be installed\non a platform with @samp{.Platform$OS.type} having that value.\n\n@c DESCRIPTION field Type\nThe @samp{Type} field specifies the type of the package:\n@pxref{Package types}.\n\n@c DESCRIPTION field Classification/ACM\n@c DESCRIPTION field Classification/ACM-2012\n@c DESCRIPTION field Classification/JEL\n@c DESCRIPTION field Classification/MSC\n@c DESCRIPTION field Classification/MSC-2010\nOne can add subject classifications for the content of the package using\nthe fields @samp{Classification/ACM} or @samp{Classification/ACM-2012}\n(using the Computing Classification System of the Association for\nComputing Machinery, @uref{http://www.acm.org/about/class/}; the former refers\nto the 1998 version), @samp{Classification/JEL} (the Journal of Economic\nLiterature Classification System,\n@uref{https://www.aeaweb.org/@/econlit/@/jelCodes.php}, or\n@samp{Classification/MSC} or @samp{Classification/MSC-2010} (the\nMathematics Subject Classification of the American Mathematical Society,\n@uref{http://www.ams.org/msc/}; the former refers to the 2000 version).\nThe subject classifications should be comma-separated lists of the\nrespective classification codes, e.g., @samp{Classification/ACM: G.4,\nH.2.8, I.5.1}.\n\n@c DESCRIPTION field Language\nA @samp{Language} field can be used to indicate if the package\ndocumentation is not in English: this should be a comma-separated list\nof standard (not private use or grandfathered) IETF language tags as\ncurrently defined by RFC 5646\n(@uref{https://tools.ietf.org/@/html/@/rfc5646}, see also\n@uref{https://en.wikipedia.org/@/wiki/@/IETF_language_tag}), i.e., use\nlanguage subtags which in essence are 2-letter ISO 639-1\n(@uref{https://en.wikipedia.@/org/@/wiki/@/ISO_639-1}) or 3-letter ISO\n639-3 (@uref{https://en.wikipedia.@/org/@/wiki/@/ISO_639-3}) language\ncodes.\n\n@c DESCRIPTION field RdMacros\nAn @samp{RdMacros} field can be used to hold a comma-separated list of\npackages from which the current package will import @file{Rd} macro\ndefinitions.  These package should also be listed in @samp{Imports},\n@samp{Suggests} or @samp{Depends}.  The macros in these packages will be \nimported after the system macros, in the \norder listed in the @samp{RdMacros} field, before any macro definitions\nin the current package are loaded.  Macro definitions in individual\n@file{.Rd} files in the @file{man} directory are loaded last, and are\nlocal to later parts of that file.  In case of duplicates, the last\nloaded definition will be used@footnote{Duplicate definitions may\ntrigger a warning: see @ref{User-defined macros}.}  Both @command{R CMD\nRd2pdf} and @command{R CMD Rdconv} have an optional flag\n@option{--RdMacros=pkglist}.  The option is also a comma-separated list\nof package names, and has priority over the value given in\n@file{DESCRIPTION}.  Packages using @file{Rd} macros should depend on\n@R{} 3.2.0 or later.\n\n@c DESCRIPTION field Built\n@c DESCRIPTION field Packaged\n@quotation Note\nThere should be no @samp{Built} or @samp{Packaged} fields, as these are\nadded by the package management tools.\n@end quotation\n\n@c DESCRIPTION field Note\n@c DESCRIPTION field Contact\n@c DESCRIPTION field MailingList\nThere is no restriction on the use of other fields not mentioned here\n(but using other capitalizations of these field names would cause\nconfusion).  Fields @code{Note}, @code{Contact} (for contacting the\nauthors/developers@footnote{As from @R{} 3.4.0, @code{bug.report} will\ntry to extract an email address from a @code{Contact} field if there is\nno @code{BugReports} field.}) and @code{MailingList} are in common use. Some\nrepositories (including @acronym{CRAN} and R-forge) add their own\nfields.\n\n\n\n@node Licensing, Package Dependencies, The DESCRIPTION file, Package structure\n@subsection Licensing\n\nLicensing for a package which might be distributed is an important but\npotentially complex subject.\n\nIt is very important that you include license information!  Otherwise,\nit may not even be legally correct for others to distribute copies of\nthe package, let alone use it.\n\nThe package management tools use the concept of\n`free or open source software'\n(FOSS, e.g., @uref{https://en.wikipedia.org/@/wiki/@/FOSS})\nlicenses: the idea being that some users of @R{} and its packages want\nto restrict themselves to such software.  Others need to ensure that\nthere are no restrictions stopping them using a package, e.g.@:\nforbidding commercial or military use.  It is a central tenet of FOSS\nsoftware that there are no restrictions on users nor usage.\n\nDo not use the @samp{License} field for information on copyright\nholders: if needed, use a @samp{Copyright} field.\n\n@c DESCRIPTION field License\n@c DESCRIPTION field License_is_FOSS\n@c DESCRIPTION field License_restricts_use\nThe mandatory @samp{License} field in the @file{DESCRIPTION} file should\nspecify the license of the package in a standardized form.  Alternatives\nare indicated @emph{via} vertical bars.  Individual specifications must\nbe one of\n@itemize @bullet\n@item\nOne of the ``standard'' short specifications\n@example\nGPL-2 GPL-3 LGPL-2 LGPL-2.1 LGPL-3 AGPL-3 Artistic-2.0\nBSD_2_clause BSD_3_clause MIT\n@end example\n@noindent\nas made available @emph{via} @uref{https://www.R-project.org/@/Licenses/} and\ncontained in subdirectory @file{share/licenses} of the @R{} source or home\ndirectory.\n@item\nThe names or abbreviations of other licenses contained in the license\ndata base in file @file{share/licenses/license.db} in the @R{} source or\nhome directory, possibly (for versioned licenses) followed by a version\nrestriction of the form @samp{(@var{op} @var{v})} with @samp{@var{op}} one of\nthe comparison operators @samp{<}, @samp{<=}, @samp{>}, @samp{>=},\n@samp{==}, or @samp{!=} and @samp{@var{v}} a numeric version specification\n(strings of non-negative integers separated by @samp{.}), possibly\ncombined @emph{via} @samp{,} (see below for an example).  For versioned\nlicenses, one can also specify the name followed by the version, or\ncombine an existing abbreviation and the version with a @samp{-}.\n\nAbbreviations @code{GPL} and @code{LGPL} are ambiguous and\nusually@footnote{@acronym{CRAN} expands them to e.g.@: @code{GPL-2\n| GPL-3}.} taken to mean any version of the license: but it is better\nnot to use them.\n@item\nOne of the strings @samp{file LICENSE} or @samp{file LICENCE} referring\nto a file named @file{LICENSE} or @file{LICENCE} in the package (source\nand installation) top-level directory.\n@item\nThe string @samp{Unlimited}, meaning that there are no restrictions on\ndistribution or use other than those imposed by relevant laws (including\ncopyright laws).\n@end itemize\n\nIf a package license @emph{restricts} a base license (where permitted,\ne.g., using GPL-3 or AGPL-3 with an attribution clause), the additional\nterms should be placed in file @file{LICENSE} (or @file{LICENCE}), and\nthe string @samp{+ file LICENSE} (or @samp{+ file LICENCE},\nrespectively) should be appended to the corresponding individual license\nspecification.  Note that several commonly used licenses do not permit\nrestrictions: this includes GPL-2 and hence any specification which\nincludes it.\n\nExamples of standardized specifications include\n@example\nLicense: GPL-2\nLicense: LGPL (>= 2.0, < 3) | Mozilla Public License\nLicense: GPL-2 | file LICENCE\nLicense: GPL (>= 2) | BSD_3_clause + file LICENSE\nLicense: Artistic-2.0 | AGPL-3 + file LICENSE\n@end example\n@noindent\nPlease note in particular that ``Public domain'' is not a valid license,\nsince it is not recognized in some jurisdictions.\n\nPlease ensure that the license you choose also covers any dependencies\n(including system dependencies) of your package: it is particularly\nimportant that any restrictions on the use of such dependencies are\nevident to people reading your @file{DESCRIPTION} file.\n\nFields @samp{License_is_FOSS} and @samp{License_restricts_use} may be\nadded by repositories where information cannot be computed from the name\nof the license.  @samp{License_is_FOSS: yes} is used for licenses which\nare known to be FOSS, and @samp{License_restricts_use} can have values\n@samp{yes} or @samp{no} if the @file{LICENSE} file is known to restrict\nusers or usage, or known not to.  These are used by, e.g.@:, the\n@code{available.packages} filters.\n\n\n@cindex LICENSE file\n@cindex LICENCE file\nThe optional file @file{LICENSE}/@file{LICENCE} contains a copy of the\nlicense of the package.  To avoid any confusion only include such a file\nif it is referred to in the @samp{License} field of the\n@file{DESCRIPTION} file.\n\nWhereas you should feel free to include a license file in your\n@emph{source} distribution, please do not arrange to @emph{install} yet\nanother copy of the @acronym{GNU} @file{COPYING} or @file{COPYING.LIB}\nfiles but refer to the copies on\n@uref{https://www.R-project.org/@/Licenses/} and included in the @R{}\ndistribution (in directory @file{share/licenses}).  Since files named\n@file{LICENSE} or @file{LICENCE} @emph{will} be installed, do not use\nthese names for standard license files.  To include comments about the\nlicensing rather than the body of a license, use a file named something\nlike @file{LICENSE.note}.\n\nA few ``standard'' licenses are rather license templates which need\nadditional information to be completed @emph{via} @samp{+ file LICENSE}.\n\n@node Package Dependencies, The INDEX file, Licensing, Package structure\n@subsection Package Dependencies\n\n@c DESCRIPTION field Depends\nThe @samp{Depends} field gives a comma-separated list of package names\nwhich this package depends on.  Those packages will be attached before\nthe current package when @code{library} or @code{require} is called.\nEach package name may be optionally followed by a comment in parentheses\nspecifying a version requirement.  The comment should contain a\ncomparison operator, whitespace and a valid version number,\ne.g. @samp{MASS (>= 3.1-20)}.\n\nThe @samp{Depends} field can also specify a dependence on a certain\nversion of @R{} --- e.g., if the package works only with @R{}\nversion 3.0.0 or later, include @samp{R (>= 3.0.0)} in the\n@samp{Depends} field.  You can also require a certain SVN revision for\nR-devel or R-patched, e.g.@: @samp{R (>= 2.14.0), R (>= r56550)}\nrequires a version later than R-devel of late July 2011 (including\nreleased versions of 2.14.0).\n\nIt makes no sense to declare a dependence on @code{R} without a version\nspecification, nor on the package @pkg{base}: this is an @R{} package\nand package @pkg{base} is always available.\n\nA package or @samp{R} can appear more than once in the @samp{Depends}\nfield, for example to give upper and lower bounds on acceptable\nversions.\n\nIt is inadvisable to use a dependence on @R{} with patchlevel (the third\ndigit) other than zero.  Doing so with packages which others depend on\nwill cause the other packages to become unusable under earlier versions\nin the series, and e.g.@: versions 3.x.1 are widely used throughout the\nNorthern Hemisphere academic year.\n\nBoth @code{library} and the @R{} package checking facilities use this\nfield: hence it is an error to use improper syntax or misuse the\n@samp{Depends} field for comments on other software that might be\nneeded.  The @R{} @command{INSTALL} facilities check if the version of\n@R{} used is recent enough for the package being installed, and the list\nof packages which is specified will be attached (after checking version\nrequirements) before the current package.\n\n@c DESCRIPTION field Imports\nThe @samp{Imports} field lists packages whose namespaces are imported\nfrom (as specified in the @file{NAMESPACE} file) but which do not need\nto be attached.  Namespaces accessed by the @samp{::} and @samp{:::}\noperators must be listed here, or in @samp{Suggests} or @samp{Enhances}\n(see below).  Ideally this field will include all the standard packages\nthat are used, and it is important to include S4-using packages (as\ntheir class definitions can change and the @file{DESCRIPTION} file is\nused to decide which packages to re-install when this happens).\nPackages declared in the @samp{Depends} field should not also be in the\n@samp{Imports} field.  Version requirements can be specified and are\nchecked when the namespace is loaded (since @R{} >= 3.0.0).\n\n@c DESCRIPTION field Suggests\nThe @samp{Suggests} field uses the same syntax as @samp{Depends} and\nlists packages that are not necessarily needed.  This includes packages\nused only in examples, tests or vignettes (@pxref{Writing package\nvignettes}), and packages loaded in the body of functions.  E.g.,\nsuppose an example@footnote{even one wrapped in @code{\\donttest}.} from\npackage @pkg{foo} uses a dataset from package @pkg{bar}. Then it is not\nnecessary to have @pkg{bar} use @pkg{foo} unless one wants to execute\nall the examples/tests/vignettes: it is useful to have @pkg{bar}, but\nnot necessary.  Version requirements can be specified but should be\nchecked by the code which uses the package.\n\n@c DESCRIPTION field Enhances\nFinally, the @samp{Enhances} field lists packages ``enhanced'' by the\npackage at hand, e.g., by providing methods for classes from these\npackages, or ways to handle objects from these packages (so several\npackages have @samp{Enhances: chron} because they can handle datetime\nobjects from @CRANpkg{chron} even though they prefer @R{}'s native\ndatetime functions).  Version requirements can be specified, but are\ncurrently not used.  Such packages cannot be required to check the\npackage: any tests which use them must be conditional on the presence\nof the package.  (If your tests use e.g.@: a dataset from another\npackage it should be in @samp{Suggests} and not @samp{Enhances}.)\n\nThe general rules are\n\n@itemize @bullet\n@item\nA package should be listed in only one of these fields.\n@item\nPackages whose namespace only is needed to load the package using\n@code{library(@var{pkgname})} should be listed in the @samp{Imports} field\nand not in the @samp{Depends} field.  Packages listed in @code{imports}\nor @code{importFrom} directives in the @file{NAMESPACE} file should\nalmost always be in @samp{Imports} and not @samp{Depends}.\n@item\nPackages that need to be attached to successfully load the package using\n@code{library(@var{pkgname})} must be listed in the @samp{Depends}\nfield.\n@item\nAll packages that are needed@footnote{This includes all packages\ndirectly called by @code{library} and @code{require} calls, as well as\ndata obtained @emph{via} @code{data(theirdata, package = \"somepkg\")}\ncalls: @command{R CMD check} will warn about all of these.  But there\nare subtler uses which it may not detect: e.g.@: if package A uses\npackage B and makes use of functionality in package B which uses package\nC which package B suggests or enhances, then package C needs to be in\nthe @samp{Suggests} list for package A.  Nor will undeclared uses in\nincluded files be reported, nor unconditional uses of packages listed\nunder @samp{Enhances}.  @command{R CMD check --as-cran} will detect more\nof the subtler uses, especially for re-building of vignettes as from\n@R{} 3.5.0.}  to successfully run @code{R CMD check} on the package must\nbe listed in one of @samp{Depends} or @samp{Suggests} or @samp{Imports}.\nPackages used to run examples or tests conditionally (e.g.@: @emph{via}\n@code{if(require(@var{pkgname}))}) should be listed in @samp{Suggests}\nor @samp{Enhances}.  (This allows checkers to ensure that all the\npackages needed for a complete check are installed.)\n@end itemize\n\n@noindent\nIn particular, packages providing ``only'' data for examples or\nvignettes should be listed in @samp{Suggests} rather than @samp{Depends}\nin order to make lean installations possible.\n\nVersion dependencies in the @samp{Depends} and @samp{Imports} fields are\nused by @code{library} when it loads the package, and\n@code{install.packages} checks versions for the @samp{Depends},\n@samp{Imports} and (for @code{dependencies = TRUE}) @samp{Suggests}\nfields.\n\nIt is increasingly important that the information in these fields is\ncomplete and accurate: it is for example used to compute which packages\ndepend on an updated package and which packages can safely be installed\nin parallel.\n\nThis scheme was developed before all packages had namespaces (@R{}\n2.14.0 in October 2011), and good practice changed once that was in\nplace.\n\nField @samp{Depends} should nowadays be used rarely, only for packages\nwhich are intended to be put on the search path to make their facilities\navailable to the end user (and not to the package itself): for example\nit makes sense that a user of package @CRANpkg{latticeExtra} would want\nthe functions of package @CRANpkg{lattice} made available.\n\nAlmost always packages mentioned in @samp{Depends} should also be\nimported from in the @file{NAMESPACE} file: this ensures that any needed\nparts of those packages are available when some other package imports\nthe current package.\n\nThe @samp{Imports} field should not contain packages which are not\nimported from (@emph{via} the @file{NAMESPACE} file or @code{::} or\n@code{:::} operators), as all the packages listed in that field need to\nbe installed for the current package to be installed.  (This is checked\nby @command{R CMD check}.)\n\n@R{} code in the package should call @code{library} or @code{require}\nonly exceptionally.  Such calls are never needed for packages listed in\n@samp{Depends} as they will already be on the search path.  It used to\nbe common practice to use @code{require} calls for packages listed in\n@samp{Suggests} in functions which used their functionality, but\nnowadays it is better to access such functionality @emph{via} @code{::}\ncalls.\n\n@c DESCRIPTION field LinkingTo\nA package that wishes to make use of header files in other packages needs\nto declare them as a comma-separated list in the field @samp{LinkingTo}\nin the @file{DESCRIPTION} file.  For example\n\n@example\nLinkingTo: link1, link2\n@end example\n\n@noindent\nThe @samp{LinkingTo} field can have a version requirement which is\nchecked at installation.\n\nSpecifying a package in @samp{LinkingTo} suffices if these are C++\nheaders containing source code or static linking is done at\ninstallation: the packages do not need to be (and usually should not be)\nlisted in the @samp{Depends} or @samp{Imports} fields.  This includes\n@acronym{CRAN} package @CRANpkg{BH} and almost all users of\n@CRANpkg{RcppArmadillo} and @CRANpkg{RcppEigen}.\n\nFor another use of @samp{LinkingTo} see @ref{Linking to native routines\nin other packages}.\n\n@c DESCRIPTION field Additional_repositories\nThe @samp{Additional_repositories} field is a comma-separated list of\nrepository URLs where the packages named in the other fields may be\nfound.  It is currently used by @command{R CMD check} to check that the\npackages can be found, at least as source packages (which can be\ninstalled on any platform).\n\n@menu\n* Suggested packages::          \n@end menu\n\n@node Suggested packages,  , Package Dependencies, Package Dependencies\n@subsubsection Suggested packages\n\nNote that someone wanting to run the examples/tests/vignettes may not\nhave a suggested package available (and it may not even be possible to\ninstall it for that platform).  The recommendation used to be to make\ntheir use conditional @emph{via} @code{if(require(\"@var{pkgname}\"))}:\nthis is OK if that conditioning is done in examples/tests/vignettes,\nalthough using @code{if(requireNamespace(\"@var{pkgname}\"))} is\npreferred, if possible.\n\nHowever, using @code{require} for conditioning @emph{in package code} is\nnot good practice as it alters the search path for the rest of the\nsession and relies on functions in that package not being masked by\nother @code{require} or @code{library} calls.  It is better practice to\nuse code like\n@example\n   if (requireNamespace(\"rgl\", quietly = TRUE)) @{\n      rgl::plot3d(...)\n   @} else @{\n      ## do something else not involving rgl.\n   @}\n@end example\n@noindent\nNote the use of @code{rgl::} as that object would not necessarily be\nvisible (and if it is, it need not be the one from that namespace:\n@code{plot3d} occurs in several other packages).  If the intention is to\ngive an error if the suggested package is not available, simply use\ne.g.@: @code{rgl::plot3d}.\n\nNote that the recommendation to use suggested packages conditionally in\ntests does also apply to packages used to manage test suites: a\nnotorious example was @CRANpkg{testthat} which in version 1.0.0 contained\nillegal C++ code and hence could not be installed on standards-compliant\nplatforms.\n\nSome people have assumed that a `recommended' package in @samp{Suggests}\ncan safely be used unconditionally, but this is not so.  (@R{} can be\ninstalled without recommended packages, and which packages are\n`recommended' may change.)\n\nAs noted above, packages in @samp{Enhances} @emph{must} be used\nconditionally and hence objects within them should always be accessed\n@emph{via} @code{::}.\n\n@node The INDEX file, Package subdirectories, Package Dependencies, Package structure\n@subsection The @file{INDEX} file\n@cindex INDEX file\n\nThe optional file @file{INDEX} contains a line for each sufficiently\ninteresting object in the package, giving its name and a description\n(functions such as print methods not usually called explicitly might not\nbe included).  Normally this file is missing and the corresponding\ninformation is automatically generated from the documentation sources\n(using @code{tools::Rdindex()}) when installing from source.\n\nThe file is part of the information given by @code{library(help =\n@var{pkgname})}.\n\nRather than editing this file, it is preferable to put customized\ninformation about the package into an overview help page\n(@pxref{Documenting packages}) and/or a vignette (@pxref{Writing package\nvignettes}).\n\n@node Package subdirectories, Data in packages, The INDEX file, Package structure\n@subsection Package subdirectories\n@cindex Package subdirectories\n\nThe @file{R} subdirectory contains @R{} code files, only.  The code\nfiles to be installed must start with an @acronym{ASCII} (lower or upper\ncase) letter or digit and have one of the extensions@footnote{Extensions\n@file{.S} and @file{.s} arise from code originally written for S(-PLUS),\nbut are commonly used for assembler code.  Extension @file{.q} was used\nfor S, which at one time was tentatively called QPE.} @file{.R},\n@file{.S}, @file{.q}, @file{.r}, or @file{.s}.  We recommend using\n@file{.R}, as this extension seems to be not used by any other software.\nIt should be possible to read in the files using @code{source()}, so\n@R{} objects must be created by assignments.  Note that there need be no\nconnection between the name of the file and the @R{} objects created by\nit.  Ideally, the @R{} code files should only directly assign @R{}\nobjects and definitely should not call functions with side effects such\nas @code{require} and @code{options}.  If computations are required to\ncreate objects these can use code `earlier' in the package (see the\n@samp{Collate} field) plus functions in the @samp{Depends} packages\nprovided that the objects created do not depend on those packages except\n@emph{via} namespace imports.\n\nTwo exceptions are allowed: if the @file{R} subdirectory contains a file\n@file{sysdata.rda} (a saved image of one or more @R{} objects: please\nuse suitable compression as suggested by @code{tools::resaveRdaFiles},\nand see also the @samp{SysDataCompression} @file{DESCRIPTION} field.)\nthis will be lazy-loaded into the namespace environment -- this is\nintended for system datasets that are not intended to be user-accessible\n@emph{via} @code{data}.  Also, files ending in @samp{.in} will be\nallowed in the @file{R} directory to allow a @file{configure} script to\ngenerate suitable files.\n\nOnly @acronym{ASCII} characters (and the control characters tab,\nformfeed, LF and CR) should be used in code files.  Other characters are\naccepted in comments@footnote{but they should be in the encoding\ndeclared in the @file{DESCRIPTION} file.}, but then the comments may not\nbe readable in e.g.@: a UTF-8 locale.  Non-@acronym{ASCII} characters in\nobject names will normally@footnote{This is true for OSes which\nimplement the @samp{C} locale: Windows' idea of the @samp{C} locale uses\nthe WinAnsi charset.} fail when the package is installed.  Any byte will\nbe allowed in a quoted character string but @code{\\uxxxx} escapes should\nbe used for non-@acronym{ASCII} characters.  However,\nnon-@acronym{ASCII} character strings may not be usable in some locales\nand may display incorrectly in others.\n\n\n@findex library.dynam\nVarious @R{} functions in a package can be used to initialize and\nclean up.  @xref{Load hooks}.\n\nThe @file{man} subdirectory should contain (only) documentation files\nfor the objects in the package in @dfn{R documentation} (Rd) format.\nThe documentation filenames must start with an @acronym{ASCII} (lower or\nupper case) letter or digit and have the extension @file{.Rd} (the\ndefault) or @file{.rd}.  Further, the names must be valid in\n@samp{file://} URLs, which means@footnote{More precisely, they can\ncontain the English alphanumeric characters and the symbols\n@samp{$ - _ . + ! ' ( ) , ; @ = &}.}\nthey must be entirely @acronym{ASCII} and not contain @samp{%}.\n@xref{Writing R documentation files}, for more information.  Note that\nall user-level objects in a package should be documented; if a package\n@var{pkg} contains user-level objects which are for ``internal'' use\nonly, it should provide a file @file{@var{pkg}-internal.Rd} which\ndocuments all such objects, and clearly states that these are not meant\nto be called by the user.  See e.g.@: the sources for package @pkg{grid}\nin the @R{} distribution.  Note that packages which use internal objects\nextensively should not export those objects from their namespace, when\nthey do not need to be documented (@pxref{Package namespaces}).\n\nHaving a @file{man} directory containing no documentation files may give\nan installation error.\n\nThe @file{man} subdirectory may contain a subdirectory named @file{macros};\nthis will contain source for user-defined Rd macros.\n(See @ref{User-defined macros}.)  These use the Rd format, but may\nnot contain anything but macro definitions, comments and whitespace.\n\nThe @file{R} and @file{man} subdirectories may contain OS-specific\nsubdirectories named @file{unix} or @file{windows}.\n\nThe sources and headers for the compiled code are in @file{src}, plus\noptionally a file @file{Makevars} or @file{Makefile}.  When a package is\ninstalled using @code{R CMD INSTALL}, @command{make} is used to control\ncompilation and linking into a shared object for loading into @R{}.\nThere are default @command{make} variables and rules for this\n(determined when @R{} is configured and recorded in\n@file{@var{R_HOME}/etc@var{R_ARCH}/Makeconf}), providing support for C,\nC++, FORTRAN 77, Fortran 9x@footnote{Note that Ratfor is not supported.\nIf you have Ratfor source code, you need to convert it to FORTRAN.  Only\nFORTRAN 77 (which we write in upper case) is supported on all platforms,\nbut most also support Fortran-95 (for which we use title case).  If you\nwant to ship Ratfor source files, please do so in a subdirectory of\n@file{src} and not in the main subdirectory.}, Objective C and Objective\nC++@footnote{either or both of which may not be supported on particular\nplatforms} with associated extensions @file{.c}, @file{.cc} or\n@file{.cpp}, @file{.f}, @file{.f90} or @file{.f95}, @file{.m}, and\n@file{.mm}, respectively.  We recommend using @file{.h} for headers,\nalso for C++@footnote{Using @file{.hpp} is not guaranteed to be\nportable.} or Fortran 9x include files.  (Use of extension @file{.C} for\nC++ is no longer supported.)  Files in the @file{src} directory should\nnot be hidden (start with a dot), and hidden files will under some\nversions of @R{} be ignored.\n\nIt is not portable (and may not be possible at all) to mix all these\nlanguages in a single package, and we do not support using both C++ and\nFortran 9x. Because @R{} itself uses it, we know that C and FORTRAN 77\ncan be used together and mixing C and C++ seems to be widely successful.\n\nIf your code needs to depend on the platform there are certain defines\nwhich can used in C or C++.  On all Windows builds (even 64-bit ones)\n@samp{_WIN32} will be defined: on 64-bit Windows builds also\n@samp{_WIN64}, and on macOS @samp{__APPLE__} is defined.@footnote{There\nis also @samp{__APPLE_CC__}, but that indicates a compiler with\nApple-specific features, not the OS.  It is used in\n@file{Rinlinedfuns.h}.}\n\nThe default rules can be tweaked by setting macros@footnote{the POSIX\nterminology, called `make variables' by GNU make.} in a file\n@file{src/Makevars} (@pxref{Using Makevars}).  Note that this mechanism\nshould be general enough to eliminate the need for a package-specific\n@file{src/Makefile}.  If such a file is to be distributed, considerable\ncare is needed to make it general enough to work on all @R{} platforms.\nIf it has any targets at all, it should have an appropriate first target\nnamed @samp{all} and a (possibly empty) target @samp{clean} which\nremoves all files generated by running @command{make} (to be used by\n@samp{R CMD INSTALL --clean} and @samp{R CMD INSTALL --preclean}).\nThere are platform-specific file names on Windows:\n@file{src/Makevars.win} takes precedence over @file{src/Makevars} and\n@file{src/Makefile.win} must be used.  Some @command{make} programs\nrequire makefiles to have a complete final line, including a newline.\n\nA few packages use the @file{src} directory for purposes other than\nmaking a shared object (e.g.@: to create executables).  Such packages\nshould have files @file{src/Makefile} and @file{src/Makefile.win}\n(unless intended for only Unix-alikes or only Windows).\n\nIn very special cases packages may create binary files other than the\nshared objects/DLLs in the @file{src} directory.  Such files will not be\ninstalled in a multi-architecture setting since @code{R CMD INSTALL\n--libs-only} is used to merge multiple sub-architectures and it only\ncopies shared objects/DLLs.  If a package wants to install other\nbinaries (for example executable programs), it should provide an @R{}\nscript @file{src/install.libs.R} which will be run as part of the\ninstallation in the @code{src} build directory @emph{instead of} copying\nthe shared objects/DLLs. The script is run in a separate @R{}\nenvironment containing the following variables: @code{R_PACKAGE_NAME}\n(the name of the package), @code{R_PACKAGE_SOURCE} (the path to the\nsource directory of the package), @code{R_PACKAGE_DIR} (the path of the\ntarget installation directory of the package), @code{R_ARCH} (the\narch-dependent part of the path, often empty), @code{SHLIB_EXT} (the\nextension of shared objects) and @code{WINDOWS} (@code{TRUE} on Windows,\n@code{FALSE} elsewhere).  Something close to the default behavior could\nbe replicated with the following @file{src/install.libs.R} file:\n\n@example\nfiles <- Sys.glob(paste0(\"*\", SHLIB_EXT))\ndest <- file.path(R_PACKAGE_DIR, paste0('libs', R_ARCH))\ndir.create(dest, recursive = TRUE, showWarnings = FALSE)\nfile.copy(files, dest, overwrite = TRUE)\nif(file.exists(\"symbols.rds\"))\n    file.copy(\"symbols.rds\", dest, overwrite = TRUE)\n@end example\n@noindent\nOn the other hand, executable programs could be installed along the\nlines of\n@example\nexecs <- c(\"one\", \"two\", \"three\")\nif(WINDOWS) execs <- paste0(execs, \".exe\")\nif ( any(file.exists(execs)) ) @{\n  dest <- file.path(R_PACKAGE_DIR,  paste0('bin', R_ARCH))\n  dir.create(dest, recursive = TRUE, showWarnings = FALSE)\n  file.copy(execs, dest, overwrite = TRUE)\n@}\n@end example\n\n@noindent\nNote the use of architecture-specific subdirectories of @file{bin} where\nneeded.\n\nThe @file{data} subdirectory is for data files: @xref{Data in packages}.\n\nThe @file{demo} subdirectory is for @R{} scripts (for running @emph{via}\n@code{demo()}) that demonstrate some of the functionality of the\npackage.  Demos may be interactive and are not checked automatically, so\nif testing is desired use code in the @file{tests} directory to achieve\nthis.  The script files must start with a (lower or upper case) letter\nand have one of the extensions @file{.R} or @file{.r}.  If present, the\n@file{demo} subdirectory should also have a @file{00Index} file with one\nline for each demo, giving its name and a description separated by a tab\nor at least three spaces. (This index file is not generated\nautomatically.)  Note that a demo does not have a specified encoding and\nso should be an @acronym{ASCII} file (@pxref{Encoding issues}). Function\n@code{demo()} will use the package encoding if there is one, but this is\nmainly useful for non-@acronym{ASCII} comments.\n\n@cindex .Rinstignore file\nThe contents of the @file{inst} subdirectory will be copied recursively\nto the installation directory.  Subdirectories of @file{inst} should not\ninterfere with those used by @R{} (currently, @file{R}, @file{data},\n@file{demo}, @file{exec}, @file{libs}, @file{man}, @file{help},\n@file{html} and @file{Meta}, and earlier versions used @file{latex},\n@file{R-ex}).  The copying of the @file{inst} happens after @file{src}\nis built so its @file{Makefile} can create files to be installed.  To\nexclude files from being installed, one can specify a list of exclude\npatterns in file @file{.Rinstignore} in the top-level source directory.\nThese patterns should be Perl-like regular expressions (see the help for\n@code{regexp} in @R{} for the precise details), one per line, to be\nmatched case-insensitively against the file and directory paths, e.g.@:\n@file{doc/.*[.]png$} will exclude all PNG files in @file{inst/doc} based\non the extension.\n\nNote that with the exceptions of @file{INDEX},\n@file{LICENSE}/@file{LICENCE} and @file{NEWS}, information files at the\ntop level of the package will @emph{not} be installed and so not be\nknown to users of Windows and macOS compiled packages (and not seen\nby those who use @command{R CMD INSTALL} or @command{install.packages}\non the tarball).  So any information files you wish an end user to see\nshould be included in @file{inst}.  Note that if the named exceptions\nalso occur in @file{inst}, the version in @file{inst} will be that seen\nin the installed package.\n\n@findex CITATION\n@cindex citation\n@findex NEWS.Rd\n@cindex news\nThings you might like to add to @file{inst} are a @file{CITATION} file\nfor use by the @code{citation} function, and a @file{NEWS.Rd} file for\nuse by the @code{news} function.  See its help page for the specific\nformat restrictions of the @file{NEWS.Rd} file.\n\n@findex AUTHORS\n@findex COPYRIGHTS\nAnother file sometimes needed in @file{inst} is @file{AUTHORS} or\n@file{COPYRIGHTS} to specify the authors or copyright holders when this\nis too complex to put in the @file{DESCRIPTION} file.\n\nSubdirectory @file{tests} is for additional package-specific test code,\nsimilar to the specific tests that come with the @R{} distribution.\nTest code can either be provided directly in a @file{.R} (or @file{.r}\nas from @R{} 3.4.0) file, or @emph{via} a @file{.Rin} file containing\ncode which in turn creates the corresponding @file{.R} file (e.g., by\ncollecting all function objects in the package and then calling them\nwith the strangest arguments).  The results of running a @file{.R} file\nare written to a @file{.Rout} file.  If there is a\ncorresponding@footnote{The best way to generate such a file is to copy\nthe @file{.Rout} from a successful run of @command{R CMD check}.  If you\nwant to generate it separately, do run @R{} with options\n@option{--vanilla --slave} and with environment variable\n@env{LANGUAGE=en} set to get messages in English.  Be careful not to use\noutput with the option @option{--timings} (and note that\n@option{--as-cran} sets it).} @file{.Rout.save} file, these two are\ncompared, with differences being reported but not causing an error.  The\ndirectory @file{tests} is copied to the check area, and the tests are\nrun with the copy as the working directory and with @code{R_LIBS} set to\nensure that the copy of the package installed during testing will be\nfound by @code{library(@var{pkg_name})}.  Note that the package-specific\ntests are run in a vanilla @R{} session without setting the\nrandom-number seed, so tests which use random numbers will need to set\nthe seed to obtain reproducible results (and it can be helpful to do so\nin all cases, to avoid occasional failures when tests are run).\n\nIf directory @file{tests} has a subdirectory @file{Examples} containing\na file @code{@var{pkg}-Ex.Rout.save}, this is compared to the output\nfile for running the examples when the latter are checked.  Reference\noutput should be produced without having the @option{--timings} option\nset (and note that @option{--as-cran} sets it).\n\nSubdirectory @file{exec} could contain additional executable scripts the\npackage needs, typically scripts for interpreters such as the shell,\nPerl, or Tcl.  NB: only files (and not directories) under @file{exec} are\ninstalled (and those with names starting with a dot are ignored), and\nthey are all marked as executable (mode @code{755}, moderated by\n@samp{umask}) on POSIX platforms.  Note too that this is not suitable\nfor executable @emph{programs} since some platforms (including Windows)\nsupport multiple architectures using the same installed package\ndirectory.\n\nSubdirectory @file{po} is used for files related to @emph{localization}:\n@pxref{Internationalization}.\n\nSubdirectory @file{tools} is the preferred place for auxiliary files\nneeded during configuration, and also for sources need to re-create\nscripts (e.g.@: M4 files for @command{autoconf}).\n\n\n@node Data in packages, Non-R scripts in packages, Package subdirectories, Package structure\n@subsection Data in packages\n\nThe @file{data} subdirectory is for data files, either to be made\navailable @emph{via} lazy-loading or for loading using @code{data()}.\n(The choice is made by the @samp{LazyData} field in the\n@file{DESCRIPTION} file: the default is not to do so.)  It should not be\nused for other data files needed by the package, and the convention has\ngrown up to use directory @file{inst/extdata} for such files.\n\nData files can have one of three types as indicated by their extension:\nplain @R{} code (@file{.R} or @file{.r}), tables (@file{.tab},\n@file{.txt}, or @file{.csv}, see @code{?data} for the file formats, and\nnote that @file{.csv} is @strong{not} the standard@footnote{e.g.@:\n@uref{https://tools.ietf.org/@/html/@/rfc4180}.} CSV format), or\n@code{save()} images (@file{.RData} or @file{.rda}).  The files should\nnot be hidden (have names starting with a dot).  Note that @R{} code\nshould be ``self-sufficient'' and not make use of extra functionality\nprovided by the package, so that the data file can also be used without\nhaving to load the package or its namespace.\n\nImages (extensions @file{.RData}@footnote{People who have trouble with\ncase are advised to use @file{.rda} as a common error is to refer to\n@file{abc.RData} as @file{abc.Rdata}!} or @file{.rda}) can contain\nreferences to the namespaces of packages that were used to create them.\nPreferably there should be no such references in data files, and in any\ncase they should only be to packages listed in the @code{Depends} and\n@code{Imports} fields, as otherwise it may be impossible to install the\npackage.  To check for such references, load all the images into a\nvanilla @R{} session, and look at the output of\n@code{loadedNamespaces()}.\n\nIf your data files are large and you are not using @samp{LazyData} you\ncan speed up installation by providing a file @file{datalist} in the\n@file{data} subdirectory.  This should have one line per topic that\n@code{data()} will find, in the format @samp{foo} if @code{data(foo)}\nprovides @samp{foo}, or @samp{foo: bar bah} if @code{data(foo)} provides\n@samp{bar} and @samp{bah}.  @command{R CMD build} will automatically add\na @file{datalist} file to @file{data} directories of over 1Mb, using the\nfunction @code{tools::add_datalist}.\n\nTables (@file{.tab}, @file{.txt}, or @file{.csv} files) can be\ncompressed by @command{gzip}, @command{bzip2} or @command{xz},\noptionally with additional extension @file{.gz}, @file{.bz2} or\n@file{.xz}.\n\nIf your package is to be distributed, do consider the resource\nimplications of large datasets for your users: they can make packages\nvery slow to download and use up unwelcome amounts of storage space, as\nwell as taking many seconds to load.  It is normally best to distribute\nlarge datasets as @file{.rda} images prepared by @code{save(, compress =\nTRUE)} (the default).  Using @command{bzip2} or @command{xz} compression\nwill usually reduce the size of both the package tarball and the\ninstalled package, in some cases by a factor of two or more.\n\nPackage @pkg{tools} has a couple of functions to help with data images:\n@code{checkRdaFiles} reports on the way the image was saved, and\n@code{resaveRdaFiles} will re-save with a different type of compression,\nincluding choosing the best type for that particular image.\n\n@c DESCRIPTION field LazyDataCompression\nSome packages using @samp{LazyData} will benefit from using a form of\ncompression other than @command{gzip} in the installed lazy-loading\ndatabase.  This can be selected by the @option{--data-compress} option\nto @command{R CMD INSTALL} or by using the @samp{LazyDataCompression}\nfield in the @file{DESCRIPTION} file.  Useful values are @code{bzip2},\n@code{xz} and the default, @code{gzip}.  The only way to discover which\nis best is to try them all and look at the size of the\n@file{@var{pkgname}/data/Rdata.rdb} file.\n\nLazy-loading is not supported for very large datasets (those which when\nserialized exceed 2GB, the limit for the format on 32-bit platforms).\n\n@c DESCRIPTION field SysDataCompression\nThe analogue for @file{sysdata.rda} is field @samp{SysDataCompression}:\nthe default is @code{xz} for files bigger than 1MB otherwise\n@code{gzip}.\n\n@node Non-R scripts in packages, Specifying URLs, Data in packages, Package structure\n@subsection Non-R scripts in packages\n\nCode which needs to be compiled (C, C++, FORTRAN, Fortran 95 @dots{})\nis included in the @file{src} subdirectory and discussed elsewhere in\nthis document.\n\nSubdirectory @file{exec} could be used for scripts for interpreters such\nas the shell, BUGS, JavaScript, Matlab, Perl, php (@CRANpkg{amap}),\nPython or Tcl (@CRANpkg{Simile}), or even @R{}.  However, it seems more\ncommon to use the @file{inst} directory, for example\n@file{WriteXLS/inst/Perl}, @file{NMF/inst/m-files},\n@file{RnavGraph/inst/tcl}, @file{RProtoBuf/inst/python} and\n@file{emdbook/inst/BUGS} and @file{gridSVG/inst/js}.\n\nJava code is a special case: except for very small programs,\n@file{.java} files should be byte-compiled (to a @file{.class} file) and\ndistributed as part of a @file{.jar} file: the conventional location for\nthe @file{.jar} file(s) is @file{inst/java}.  It is desirable (and\nrequired under an Open Source license) to make the Java source files\navailable: this is best done in a top-level @file{java} directory in the\npackage---the source files should not be installed.\n\nIf your package requires one of these interpreters or an extension then\nthis should be declared in the @samp{SystemRequirements} field of its\n@file{DESCRIPTION} file.  (Users of Java most often do so @emph{via}\n@CRANpkg{rJava}, when depending on/importing that suffices.)\n\nWindows and Mac users should be aware that the Tcl extensions\n@samp{BWidget} and @samp{Tktable} which are currently included with the\n@R{} for Windows and in the macOS installers @emph{are} extensions and do\nneed to be declared for users of other platforms (and that\n@samp{Tktable} is less widely available than it used to be, including\nnot in the main repositories for major Linux distributions).\n@c Not in Fedora since 17, only in launchpad for Ubuntu.\n\n@samp{BWidget} needs to be installed by the user on other OSes.  This is\nfairly easy to do: first find the Tcl/Tk search path:\n\n@example\nlibrary(tcltk)\nstrsplit(tclvalue('auto_path'), \" \")[[1]]\n@end example\n\n@noindent\nthen download the sources from\n@uref{https://sourceforge.net/@/projects/@/tcllib/@/files/@/BWidget/} and\nat the command line run something like\n\n@example\ntar xf bwidget-1.9.8.tar.gz\nsudo mv bwidget-1.9.8 /usr/local/lib\n@end example\n\n@noindent\nsubstituting a location on the Tcl/Tk search path for @file{/usr/local/lib} if\nneeded.\n\n@node Specifying URLs,  , Non-R scripts in packages, Package structure\n@subsection Specifying URLs\n\nURLs in many places in the package documentation will be converted to\nclickable hyperlinks in at least some of their renderings.  So care is\nneeded that their forms are correct and portable.\n\nThe full URL should be given, including the scheme (often @samp{http://}\nor @samp{https://}) and a final @samp{/} for references to directories.\n\nSpaces in URLs are not portable and how they are handled does vary by\nHTTP server and by client.  There should be no space in the host part of\nan @samp{http://} URL, and spaces in the remainder should be encoded,\nwith each space replaced by @samp{%20}.\n\nOther characters may benefit from being encoded: see the help on\n@code{URLencode()}.\n\nThe canonical URL for a @acronym{CRAN} package is\n@example\nhttps://cran.r-project.org/package=@var{pkgname}\n@end example\n\n@noindent\nand not a version starting\n@samp{https://cran.r-project.org/web/packages/@var{pkgname}}.\n\n@node Configure and cleanup, Checking and building packages, Package structure, Creating R packages\n@section Configure and cleanup\n\nNote that most of this section is specific to Unix-alikes: see the\ncomments later on about the Windows port of @R{}.\n\nIf your package needs some system-dependent configuration before\ninstallation you can include an executable (Bourne@footnote{The script\nshould only assume a POSIX-compliant @command{/bin/sh} -- see\n@uref{http://pubs.opengroup.org/@/onlinepubs/@/9699919799/@/utilities/@/V3_chap02.html}.\nIn particular @command{bash} extensions must not be used, and not all\n@R{} platforms have a @command{bash} command, let alone one at\n@file{/bin/bash}.  All known shells used with @R{} support the use of\nbackticks, but not all support @samp{$(@var{cmd})}.  However, real-world\nshells are not fully POSIX-compliant and omissions and idiosyncrasies\nneed to be worked around---which Autoconf will do for you.  Arithmetic\nexpansion is a known issue: see\n@uref{https://www.gnu.org/@/software/@/autoconf/@/manual/autoconf.html#Portable-Shell}\nfor this and others.}) shell script @file{configure} in your package\nwhich (if present) is executed by @code{R CMD INSTALL} before any other\naction is performed.  This can be a script created by the Autoconf\nmechanism, but may also be a script written by yourself.  Use this to\ndetect if any nonstandard libraries are present such that corresponding\ncode in the package can be disabled at install time rather than giving\nerror messages when the package is compiled or used.  To summarize, the\nfull power of Autoconf is available for your extension package\n(including variable substitution, searching for libraries, etc.).\n\nUnder a Unix-alike only, an executable (Bourne shell) script\n@file{cleanup} is executed as the last thing by @code{R CMD INSTALL} if\noption @option{--clean} was given, and by @code{R CMD build} when\npreparing the package for building from its source.\n\nAs an example consider we want to use functionality provided by a (C or\nFORTRAN) library @code{foo}.  Using Autoconf, we can create a configure\nscript which checks for the library, sets variable @code{HAVE_FOO} to\n@code{TRUE} if it was found and to @code{FALSE} otherwise, and then\nsubstitutes this value into output files (by replacing instances of\n@samp{@@HAVE_FOO@@} in input files with the value of @code{HAVE_FOO}).\nFor example, if a function named @code{bar} is to be made available by\nlinking against library @code{foo} (i.e., using @option{-lfoo}), one\ncould use\n\n@example\n@group\nAC_CHECK_LIB(foo, @var{fun}, [HAVE_FOO=TRUE], [HAVE_FOO=FALSE])\nAC_SUBST(HAVE_FOO)\n......\nAC_CONFIG_FILES([foo.R])\nAC_OUTPUT\n@end group\n@end example\n\n@noindent\nin @file{configure.ac} (assuming Autoconf 2.50 or later).\n\nThe definition of the respective @R{} function in @file{foo.R.in} could be\n\n@example\n@group\nfoo <- function(x) @{\n    if(!@@HAVE_FOO@@)\n      stop(\"Sorry, library 'foo' is not available\")\n    ...\n@end group\n@end example\n\n@noindent\nFrom this file @command{configure} creates the actual @R{} source file\n@file{foo.R} looking like\n\n@example\n@group\nfoo <- function(x) @{\n    if(!FALSE)\n      stop(\"Sorry, library 'foo' is not available\")\n    ...\n@end group\n@end example\n\n@noindent\nif library @code{foo} was not found (with the desired functionality).\nIn this case, the above @R{} code effectively disables the function.\n\nOne could also use different file fragments for available and missing\nfunctionality, respectively.\n\nYou will very likely need to ensure that the same C compiler and\ncompiler flags are used in the @file{configure} tests as when compiling\n@R{} or your package.  Under a Unix-alike, you can achieve this by\nincluding the following fragment early in @file{configure.ac}\n(@emph{before} calling @code{AC_PROG_CC})\n\n@example\n@group\n: $@{R_HOME=`R RHOME`@}\nif test -z \"$@{R_HOME@}\"; then\n  echo \"could not determine R_HOME\"\n  exit 1\nfi\nCC=`\"$@{R_HOME@}/bin/R\" CMD config CC`\nCFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CFLAGS`\nCPPFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CPPFLAGS`\n@end group\n@end example\n\n@noindent\n(Using @samp{$@{R_HOME@}/bin/R} rather than just @samp{R} is necessary\nin order to use the correct version of @R{} when running the script as\npart of @code{R CMD INSTALL}, and the quotes since @samp{$@{R_HOME@}}\nmight contain spaces.)\n\nIf your code does load checks then you may also need\n@example\nLDFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config LDFLAGS`\n@end example\n\n@noindent\nand packages written with C++ need to pick up the details for the C++\ncompiler and switch the current language to C++ by something like\n@example\nCXX=`\"$@{R_HOME@}/bin/R\" CMD config CXX`\nCXXFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CXXFLAGS`\nAC_LANG(C++)\n@end example\n\n@noindent\nThe latter is important, as for example C headers may not be available\nto C++ programs or may not be written to avoid C++ name-mangling.\n\n@findex R CMD config\nYou can use @code{R CMD config} for getting the value of the basic\nconfiguration variables, and also the header and library flags necessary\nfor linking a front-end executable program against @R{}, see @kbd{R CMD\nconfig --help} for details.\n\nTo check for an external BLAS library using the @code{ACX_BLAS} macro\nfrom the official Autoconf Macro Archive, one can simply do\n\n@example\n@group\nF77=`\"$@{R_HOME@}/bin/R\" CMD config F77`\nAC_PROG_F77\nFLIBS=`\"$@{R_HOME@}/bin/R\" CMD config FLIBS`\nACX_BLAS([], AC_MSG_ERROR([could not find your BLAS library], 1))\n@end group\n@end example\n\nNote that @code{FLIBS} as determined by @R{} must be used to ensure that\nFORTRAN 77 code works on all @R{} platforms.  Calls to the Autoconf macro\n@code{AC_F77_LIBRARY_LDFLAGS}, which would overwrite @code{FLIBS}, must\nnot be used (and hence e.g.@: removed from @code{ACX_BLAS}).  (Recent\nversions of Autoconf in fact allow an already set @code{FLIBS} to\noverride the test for the FORTRAN linker flags.)\n\n\n@strong{N.B.}: If the @command{configure} script creates files, e.g.@:\n@file{src/Makevars}, you do need a @command{cleanup} script to remove\nthem.  Otherwise @command{R CMD build} may ship the files that are\ncreated.  For example, package @CRANpkg{RODBC} has\n\n@example\n#!/bin/sh\n\nrm -f config.* src/Makevars src/config.h\n@end example\n\n@noindent\nAs this example shows, @command{configure} often creates working files\nsuch as @file{config.log}.\n\nIf your configure script needs auxiliary files, it is recommended that\nyou ship them in a @file{tools} directory (as @R{} itself does).\n\nYou should bear in mind that the configure script will not be used on\nWindows systems.  If your package is to be made publicly available,\nplease give enough information for a user on a non-Unix-alike platform\nto configure it manually, or provide a @file{configure.win} script to be\nused on that platform.  (Optionally, there can be a @file{cleanup.win}\nscript.  Both should be shell scripts to be executed by @command{ash},\nwhich is a minimal version of Bourne-style @command{sh}.)  When\n@file{configure.win} is run the environment variables @env{R_HOME}\n(which uses @samp{/} as the file separator), @env{R_ARCH} and Use\n@env{R_ARCH_BIN} will be set.  Use @env{R_ARCH} to decide if this is a\n64-bit build (its value there is @samp{/x64}) and to install DLLs to the\ncorrect place (@file{$@{R_HOME@}/libs$@{R_ARCH@}}).  Use\n@env{R_ARCH_BIN} to find the correct place under the @file{bin}\ndirectory, e.g.@: @file{$@{R_HOME@}/bin$@{R_ARCH_BIN@}/Rscript.exe}.\n\nIn some rare circumstances, the configuration and cleanup scripts need\nto know the location into which the package is being installed.  An\nexample of this is a package that uses C code and creates two shared\nobject/DLLs.  Usually, the object that is dynamically loaded by @R{}\nis linked against the second, dependent, object.  On some systems, we\ncan add the location of this dependent object to the object that is\ndynamically loaded by @R{}.  This means that each user does not have to\nset the value of the @env{LD_LIBRARY_PATH} (or equivalent) environment\nvariable, but that the secondary object is automatically resolved.\nAnother example is when a package installs support files that are\nrequired at run time, and their location is substituted into an @R{}\ndata structure at installation time.\n@vindex R_LIBRARY_DIR\n@vindex R_PACKAGE_DIR\n@vindex R_PACKAGE_NAME\nThe names of the top-level library directory (i.e., specifiable\n@emph{via} the @samp{-l} argument) and the directory of the package\nitself are made available to the installation scripts @emph{via} the two\nshell/environment variables @env{R_LIBRARY_DIR} and @env{R_PACKAGE_DIR}.\nAdditionally, the name of the package (e.g.@: @samp{survival} or\n@samp{MASS}) being installed is available from the environment variable\n@env{R_PACKAGE_NAME}.  (Currently the value of @env{R_PACKAGE_DIR} is\nalways @code{$@{R_LIBRARY_DIR@}/$@{R_PACKAGE_NAME@}}, but this used not to\nbe the case when versioned installs were allowed.  Its main use is in\n@file{configure.win} scripts for the installation path of external\nsoftware's DLLs.)  Note that the value of @env{R_PACKAGE_DIR} may\ncontain spaces and other shell-unfriendly characters, and so should be\nquoted in makefiles and configure scripts.\n\nOne of the more tricky tasks can be to find the headers and libraries of\nexternal software.  One tool which is increasingly available on\nUnix-alikes (but not by default on macOS) to do this is\n@command{pkg-config}.  The @file{configure} script will need to test for\nthe presence of the command itself (see for example package\n@CRANpkg{Cairo}), and if present it can be asked if the software is\ninstalled, of a suitable version and for compilation/linking flags by\ne.g.@:\n\n@example\n$ pkg-config --exists 'QtCore >= 4.0.0'  # check the status\n$ pkg-config --modversion QtCore\n4.7.1\n$ pkg-config --cflags QtCore\n-DQT_SHARED -I/usr/include/QtCore\n$ pkg-config --libs QtCore\n-lQtCore\n@end example\n\n@noindent\nNote that @command{pkg-config --libs} gives the information\nrequired to link against the default version of that library (usually\nthe dynamic one), and @command{pkg-config --static} is needed if the\nstatic library is to be used.\n\nSometimes the name by which the software is known to\n@command{pkg-config} is not what one might expect (e.g.@:\n@samp{gtk+-2.0} even for 2.22).  To get a complete list use\n\n@example\npkg-config --list-all | sort\n@end example\n\n@menu\n* Using Makevars::              \n* Configure example::           \n* Using F95 code::              \n* Using C++11 code::            \n* Using C++14 code::\n* Using C++17 code::\n@end menu\n\n@node Using Makevars, Configure example, Configure and cleanup, Configure and cleanup\n@subsection Using @file{Makevars}\n\n@menu\n* OpenMP support::              \n* Using pthreads::              \n* Compiling in sub-directories::  \n@end menu\n\nSometimes writing your own @file{configure} script can be avoided by\nsupplying a file @file{Makevars}: also one of the most common uses of a\n@file{configure} script is to make @file{Makevars} from\n@file{Makevars.in}.\n\nA @file{Makevars} file is a makefile and is used as one of several\nmakefiles by @command{R CMD SHLIB} (which is called by @command{R CMD\nINSTALL} to compile code in the @file{src} directory).  It should be\nwritten if at all possible in a portable style, in particular (except\nfor @file{Makevars.win}) without the use of GNU extensions.\n\nThe most common use of a @file{Makevars} file is to set additional\npreprocessor options (for example include paths) for C/C++ files\n@emph{via} @code{PKG_CPPFLAGS}, and additional compiler flags by setting\n@code{PKG_CFLAGS}, @code{PKG_CXXFLAGS}, @code{PKG_FFLAGS} or\n@code{PKG_FCFLAGS}, for C, C++, FORTRAN or Fortran 9x respectively\n(@pxref{Creating shared objects}).\n\n@strong{N.B.}: Include paths are preprocessor options, not compiler\noptions, and @strong{must} be set in @code{PKG_CPPFLAGS} as otherwise\nplatform-specific paths (e.g.@: @samp{-I/usr/local/include}) will take\nprecedence.\n\n@file{Makevars} can also be used to set flags for the linker, for\nexample @samp{-L} and @samp{-l} options, @emph{via} @code{PKG_LIBS}.\n\nWhen writing a @file{Makevars} file for a package you intend to\ndistribute, take care to ensure that it is not specific to your\ncompiler: flags such as @option{-O2 -Wall -pedantic} (and all other\n@option{-W} flags: for the Oracle compilers these are used to pass\narguments to compiler phases) are all specific to GCC.\n\nAlso, do not set variables such as @code{CPPFLAGS}, @code{CFLAGS} etc.:\nthese should be settable by users (sites) through appropriate personal\n(site-wide) @file{Makevars} files.\n@ifset UseExternalXrefs\n@xref{Customizing package compilation, , Customizing package compilation,\nR-admin, R Installation and Administration},\n@end ifset\n\nThere are some macros@footnote{in POSIX parlance: GNU @command{make}\ncalls these `make variables'.}  which are set whilst configuring the\nbuilding of @R{} itself and are stored in\n@file{@var{R_HOME}/etc@var{R_ARCH}/Makeconf}.  That makefile is included\nas a @file{Makefile} @emph{after} @file{Makevars[.win]}, and the macros\nit defines can be used in macro assignments and make command lines in\nthe latter.  These include\n\n@table @code\n@item FLIBS\n@vindex FLIBS\nA macro containing the set of libraries need to link FORTRAN code.  This\nmay need to be included in @code{PKG_LIBS}: it will normally be included\nautomatically if the package contains FORTRAN source files.\n\n@item BLAS_LIBS\n@vindex BLAS_LIBS\nA macro containing the BLAS libraries used when building @R{}.  This may\nneed to be included in @code{PKG_LIBS}.  Beware that if it is empty then\nthe @R{} executable will contain all the double-precision and\ndouble-complex BLAS routines, but no single-precision nor complex\nroutines.  If @code{BLAS_LIBS} is included, then @code{FLIBS} also needs\nto be@footnote{at least on Unix-alikes: the Windows build currently\nresolves such dependencies to a static FORTRAN library when\n@file{Rblas.dll} is built.} included following it, as most BLAS\nlibraries are written at least partially in FORTRAN.\n\n@item LAPACK_LIBS\n@vindex LAPACK_LIBS\nA macro containing the LAPACK libraries (and paths where appropriate)\nused when building @R{}.  This may need to be included in\n@code{PKG_LIBS}.  It may point to a dynamic library @code{libRlapack}\nwhich contains the main double-precision LAPACK routines as well as\nthose double-complex LAPACK routines needed to build @R{}, or it may\npoint to an external LAPACK library, or may be empty if an external BLAS\nlibrary also contains LAPACK.\n\n[@code{libRlapack} includes all the double-precision LAPACK routines\nwhich were current in 2003: a list of which routines are included is in\nfile @file{src/modules/lapack/README}. Note that an external LAPACK/BLAS\nlibrary need not do so, as some were `deprecated' (and not compiled by\ndefault) in LAPACK 3.6.0 in late 2015.]\n\nFor portability, the macros @code{BLAS_LIBS} and @code{FLIBS} should\nalways be included @emph{after} @code{LAPACK_LIBS} (and in that order).\n\n@item SAFE_FFLAGS\n@vindex SAFE_FFLAGS\nA macro containing flags which are needed to circumvent\nover-optimization of FORTRAN code: it is typically @samp{-g -O2\n-ffloat-store} on @cputype{ix86} platforms using @command{gfortran}.\nNote that this is @strong{not} an additional flag to be used as part of\n@code{PKG_FFLAGS}, but a replacement for @code{FFLAGS}, and that it is\nintended for the FORTRAN 77 compiler @samp{F77} and not necessarily for\nthe Fortran 90/95 compiler @samp{FC}.  See the example later in this\nsection.\n@end table\n\n@vindex OBJECTS\nSetting certain macros in @file{Makevars} will prevent @command{R CMD\nSHLIB} setting them: in particular if @file{Makevars} sets\n@samp{OBJECTS} it will not be set on the @command{make} command line.\nThis can be useful in conjunction with implicit rules to allow other\ntypes of source code to be compiled and included in the shared object.\nIt can also be used to control the set of files which are compiled,\neither by excluding some files in @file{src} or including some files in\nsubdirectories.  For example\n\n@example\nOBJECTS = 4dfp/endianio.o 4dfp/Getifh.o R4dfp-object.o\n@end example\n\n\nNote that @file{Makevars} should not normally contain targets, as it is\nincluded before the default makefile and @command{make} will call the\nfirst target, intended to be @code{all} in the default makefile.  If you\nreally need to circumvent that, use a suitable (phony) target @code{all}\nbefore any actual targets in @file{Makevars.[win]}: for example package\n@CRANpkg{fastICA} used to have\n\n@example\nPKG_LIBS = @@BLAS_LIBS@@\n\nSLAMC_FFLAGS=$(R_XTRA_FFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(SAFE_FFLAGS)\n\nall: $(SHLIB)\n\nslamc.o: slamc.f\n        $(F77) $(SLAMC_FFLAGS) -c -o slamc.o slamc.f\n@end example\n\n@noindent\nneeded to ensure that the LAPACK routines find some constants without\ninfinite looping.  The Windows equivalent was\n\n@example\nall: $(SHLIB)\n\nslamc.o: slamc.f\n        $(F77) $(SAFE_FFLAGS) -c -o slamc.o slamc.f\n@end example\n\n@noindent\n(since the other macros are all empty on that platform, and @R{}'s\ninternal BLAS was not used).  Note that the first target in\n@file{Makevars} will be called, but for back-compatibility it is best\nnamed @code{all}.\n\nIf you want to create and then link to a library, say using code in a\nsubdirectory, use something like\n\n@example\n.PHONY: all mylibs\n\nall: $(SHLIB)\n$(SHLIB): mylibs\n\nmylibs:\n        (cd subdir; $(MAKE))\n@end example\n\n@noindent\nBe careful to create all the necessary dependencies, as there is no\nguarantee that the dependencies of @code{all} will be run in a\nparticular order (and some of the @acronym{CRAN} build machines use\nmultiple CPUs and parallel makes).  In particular,\n\n@example\nall: mylibs\n@end example\n\n@noindent\ndoes @strong{not} suffice.\n\nNote that on Windows it is required that @file{Makevars[.win]} does\ncreate a DLL: this is needed as it is the only reliable way to ensure\nthat building a DLL succeeded.  If you want to use the @file{src}\ndirectory for some purpose other than building a DLL, use a\n@file{Makefile.win} file.\n\nIt is sometimes useful to have a target @samp{clean} in @file{Makevars}\nor @file{Makevars.win}: this will be used by @command{R CMD build} to\nclean up (a copy of) the package sources.  When it is run by\n@command{build} it will have fewer macros set, in particular not\n@code{$(SHLIB)}, nor @code{$(OBJECTS)} unless set in the file itself.\nIt would also be possible to add tasks to the target @samp{shlib-clean}\nwhich is run by @command{R CMD INSTALL} and @command{R CMD SHLIB} with\noptions @option{--clean} and @option{--preclean}.\n\nIf you want to run @R{} code in @file{Makevars}, e.g.@: to find\nconfiguration information, please do ensure that you use the correct\ncopy of @code{R} or @code{Rscript}: there might not be one in the path\nat all, or it might be the wrong version or architecture.  The correct\nway to do this is @emph{via}\n\n@example\n\"$(R_HOME)/bin$(R_ARCH_BIN)/Rscript\" @var{filename}\n\"$(R_HOME)/bin$(R_ARCH_BIN)/Rscript\" -e '@var{R expression}'\n@end example\n\n@noindent\nwhere @code{$(R_ARCH_BIN)} is only needed currently on Windows.\n\nEnvironment or make variables can be used to select different macros for\n32- and 64-bit code, for example (GNU @command{make} syntax, allowed on\nWindows)\n\n@example\nifeq \"$(WIN)\" \"64\"\nPKG_LIBS = @var{value for 64-bit Windows}\nelse\nPKG_LIBS = @var{value for 32-bit Windows}\nendif\n@end example\n\nOn Windows there is normally a choice between linking to an import\nlibrary or directly to a DLL.  Where possible, the latter is much more\nreliable: import libraries are tied to a specific toolchain, and in\nparticular on 64-bit Windows two different conventions have been\ncommonly used.  So for example instead of\n\n@example\nPKG_LIBS = -L$(XML_DIR)/lib -lxml2\n@end example\n\n@noindent\none can use\n\n@example\nPKG_LIBS = -L$(XML_DIR)/bin -lxml2\n@end example\n\n@noindent\nsince on Windows @code{-lxxx} will look in turn for\n\n@example\nlibxxx.dll.a\nxxx.dll.a\nlibxxx.a\nxxx.lib\nlibxxx.dll\nxxx.dll\n@end example\n\n@noindent\nwhere the first and second are conventionally import libraries, the\nthird and fourth often static libraries (with @code{.lib} intended for\nVisual C++), but might be import libraries.  See for example\n@uref{https://sourceware.org/@/binutils/@/docs-2.20/@/ld/@/WIN32.html#WIN32}.\n\nThe fly in the ointment is that the DLL might not be named\n@file{libxxx.dll}, and in fact on 32-bit Windows there is a\n@file{libxml2.dll} whereas on one build for 64-bit Windows the DLL is\ncalled @file{libxml2-2.dll}.  Using import libraries can cover over\nthese differences but can cause equal difficulties.\n\nIf static libraries are available they can save a lot of problems with\nrun-time finding of DLLs, especially when binary packages are to be\ndistributed and even more when these support both architectures.  Where\nusing DLLs is unavoidable we normally arrange (@emph{via}\n@file{configure.win}) to ship them in the same directory as the package\nDLL.\n\n@node OpenMP support, Using pthreads, Using Makevars, Using Makevars\n@subsubsection OpenMP support\n\n@cindex OpenMP\n\nThere is some support for packages which wish to use\nOpenMP@footnote{@uref{http://www.openmp.org/},\n@uref{https://en.wikipedia.org/@/wiki/@/OpenMP},\n@uref{https://computing.llnl.gov/@/tutorials/@/openMP/}}.  The\n@command{make} macros\n\n@example\nSHLIB_OPENMP_CFLAGS\nSHLIB_OPENMP_CXXFLAGS\nSHLIB_OPENMP_FCFLAGS\nSHLIB_OPENMP_FFLAGS\n@end example\n\n@noindent\nare available for use in @file{src/Makevars} or @file{src/Makevars.win}.\nInclude the appropriate macro in @code{PKG_CFLAGS}, @code{PKG_CPPFLAGS}\nand so on, and also in @code{PKG_LIBS}.  C/C++ code that needs to be\nconditioned on the use of OpenMP can be used inside @code{#ifdef\n_OPENMP}: note that some toolchains used for @R{} (including that of\nmacOS and some others using @command{clang}@footnote{Default builds of\n@command{clang} 3.8.0 and later have support for OpenMP, but the\n@code{libomp} run-time library may not be installed.}) have no OpenMP\nsupport at all, not even @file{omp.h}.\n\nFor example, a package with C code written for OpenMP should have in\n@file{src/Makevars} the lines\n\n@example\nPKG_CFLAGS = $(SHLIB_OPENMP_CFLAGS)\nPKG_LIBS = $(SHLIB_OPENMP_CFLAGS)\n@end example\n\nNote that the macro @code{SHLIB_OPENMP_CXXFLAGS} applies to the default\nC++ compiler and not necessarily to the C++11/14/17 compiler: users of the\nlatter should do their own @command{configure} checks (an example is\navailable in CRAN package @CRANpkg{ARTP2}).\n\nSome care is needed when compilers are from different families which may\nuse different OpenMP runtimes (e.g.@: @command{clang} @emph{vs} GCC\nincluding @command{gfortran}, although it is currently possible to use\nthe @command{clang} runtime with GCC but not @emph{vice versa}).  For a\npackage with Fortran 77 code using OpenMP the appropriate lines are\n\n@example\nPKG_FFLAGS = $(SHLIB_OPENMP_FFLAGS)\nPKG_LIBS = $(SHLIB_OPENMP_CFLAGS)\n@end example\n\n@noindent\nas the C compiler will be used to link the package code (and there is no\nguarantee that this will work everywhere).  (This does not apply to\nFortran 9x code, where @code{SHLIB_OPENMP_FCFLAGS} should be used in\nboth @code{PKG_FCFLAGS} and @code{PKG_LIBS}.)\n\nFor portability, any C/C++ code using the @code{omp_*} functions should\ninclude the @file{omp.h} header: some compilers (but not all) include it\nwhen OpenMP mode is switched on (e.g.@: @emph{via} flag\n@option{-fopenmp}).\n\n@c http://openmp.org/wp/openmp-compilers/\n@c clang 3.8.x reports 201307 but has full suport only for 3.1 (201111)\n@c clang 3.9.x reports 201111 but has all but offloading support of 4.0.\nThere is nothing@footnote{In most implementations the @code{_OPENMP}\nmacro has value a date which can be mapped to an OpenMP version: for\nexample, value @code{201307} is the date of version 4.0 (July\n2013). However this may be used to denote the latest version which is\npartially supported, not that which is fully implemented.}  to say what\nversion of OpenMP is supported: version 3.1 (and much of 4.0) is\nsupported by recent versions@footnote{GCC since 4.7, hence @R{} builds\nfor Windows since @R{} 3.3.0, which also support OpenMP 4.0.} of the\nLinux, Windows and Solaris platforms, but portable packages cannot\nassume that end users have recent versions.@footnote{People do use older\nversions of OSes such as Ubuntu 12.04LTS and Debian Wheezy LTS which\nhave GCC 4.4.}  macOS currently uses Apple builds of @command{clang}\nwith no OpenMP support (even if invoked as @command{gcc} and despite the\n@command{man} page including the flag @option{-fopenmp} for that\ncommand).  @uref{http://www.openmp.org/@/resources/@/openmp-compilers}\ngives some idea of what compilers support what versions.\n\nThe performance of OpenMP varies substantially between platforms.  The\nWindows implementation has substantial overheads@footnote{as did the\nGCC-based Apple implementation, but not the Intel/LLVM OpenMP runtime\non macOS.}, so is only beneficial if quite substantial tasks are run in\nparallel.  Also, on Windows new threads are started with the\ndefault@footnote{Windows default, not MinGW-w64 default.} FPU control\nword, so computations done on OpenMP threads will not make use of\nextended-precision arithmetic which is the default for the main process.\n@c mingw64-public, 2015-02-02.\n@c https://stackoverflow.com/questions/2553725/is-the-fpu-control-word-setting-per-thread-or-per-process\n\nCalling any of the @R{} API from threaded code is `for experts only':\nthey will need to read the source code to determine if it is\nthread-safe.  In particular, code which makes use of the stack-checking\nmechanism must not be called from threaded code.\n\nPackages are not standard-alone programs, and an @R{} process could\ncontain more than one OpenMP-enabled package as well as other components\n(for example, an optimized BLAS) making use of OpenMP.  So careful\nconsideration needs to be given to resource usage.  OpenMP works with\nparallel regions, and for most implementations the default is to use as\nmany threads as `CPUs' for such regions.  Parallel regions can be\nnested, although it is common to use only a single thread below the\nfirst level.  The correctness of the detected number of `CPUs' and the\nassumption that the @R{} process is entitled to use them all are both\ndubious assumptions.  The best way to limit resources is to limit the\noverall number of threads available to OpenMP in the @R{} process: this\ncan be done via environment variable @env{OMP_THREAD_LIMIT}, where\nimplemented.@footnote{Which it was at the time of writing with GCC,\nOracle, Intel and Clang compilers.}  Alternatively, the\nnumber of threads per region can be limited by the environment variable\n@env{OMP_NUM_THREADS} or API call @code{omp_set_num_threads}, or,\nbetter, for the regions in your code as part of their\nspecification. E.g.@: @R{} uses\n@example\n#pragma omp parallel for num_threads(nthreads) @dots{}\n@end example\n@noindent\nThat way you only control your own code and not that of other OpenMP users.\n\n@node Using pthreads, Compiling in sub-directories, OpenMP support, Using Makevars\n@subsubsection Using pthreads\n\nThere is no direct support for the POSIX threads (more commonly known as\n@code{pthreads}): by the time we considered adding it several packages\nwere using it unconditionally so it seems that nowadays it is\nuniversally available on POSIX operating systems (hence not Windows).\n\nFor reasonably recent versions of @command{gcc} and @command{clang} the\ncorrect specification is\n\n@example\nPKG_CPPFLAGS = -pthread\nPKG_LIBS = -pthread\n@end example\n\n@noindent\n(and the plural version is also accepted on some systems/versions).  For\nother platforms the specification is\n\n@example\nPKG_CPPFLAGS = -D_REENTRANT\nPKG_LIBS = -lpthread\n@end example\n@noindent\n(and note that the library name is singular).  This is what\n@option{-pthread} does on all known current platforms (although earlier\nversions of OpenBSD used a different library name).\n\nFor a tutorial see\n@uref{https://computing.llnl.gov/@/tutorials/@/pthreads/}.\n\nPOSIX threads are not normally used on Windows, which has its own native\nconcepts of threads.  However, there are two projects implementing\n@code{pthreads} on top of Windows, @code{pthreads-w32} and\n@code{winpthreads} (part of the MinGW-w64 project).\n\nWhether Windows toolchains implement @code{pthreads} is up to the\ntoolchain provider.  A @command{make} variable\n@code{SHLIB_PTHREAD_FLAGS} is available: this should be included in both\n@code{PKG_CPPFLAGS} (or the Fortran or F9x equivalents) and\n@code{PKG_LIBS}.\n\nThe presence of a working @code{pthreads} implementation cannot be\nunambiguously determined without testing for yourself: however, that\n@samp{_REENTRANT} is defined@footnote{some Windows toolchains had the\ntypo @samp{_REENTRANCE} instead.} in C/C++ code is a good indication.\n\nNote that not all @code{pthreads} implementations are equivalent as parts\nare optional (see\n@uref{http://pubs.opengroup.org/@/onlinepubs/@/009695399/@/basedefs/@/pthread.h.html}):\nfor example, macOS lacks the `Barriers' option.\n\nSee also the comments on thread-safety and performance under OpenMP: on\nall known @R{} platforms OpenMP is implemented @emph{via}\n@code{pthreads} and the known performance issues are in the latter.\n\n@node Compiling in sub-directories,  , Using pthreads, Using Makevars\n@subsubsection Compiling in sub-directories\n\nPackage authors fairly often want to organize code in sub-directories of\n@file{src}, for example if they are including a separate piece of\nexternal software to which this is an @R{} interface.\n\nOne simple way is simply to set @code{OBJECTS} to be all the objects\nthat need to be compiled, including in sub-directories.  For example,\n@acronym{CRAN} package @CRANpkg{RSiena} has\n\n@smallexample\nSOURCES = $(wildcard data/*.cpp network/*.cpp utils/*.cpp model/*.cpp model/*/*.cpp model/*/*/*.cpp)\n\nOBJECTS = siena07utilities.o siena07internals.o siena07setup.o siena07models.o $(SOURCES:.cpp=.o)\n@end smallexample\n\n@noindent\nOne problem with that approach is that unless GNU make extensions are\nused, the source files need to be listed and kept up-to-date.  As in the\nfollowing from @acronym{CRAN} package @CRANpkg{lossDev}:\n\n@smallexample\nOBJECTS.samplers = samplers/ExpandableArray.o samplers/Knots.o \\\n  samplers/RJumpSpline.o samplers/RJumpSplineFactory.o \\\n  samplers/RealSlicerOV.o samplers/SliceFactoryOV.o samplers/MNorm.o\nOBJECTS.distributions = distributions/DSpline.o \\\n  distributions/DChisqrOV.o distributions/DTOV.o \\\n  distributions/DNormOV.o distributions/DUnifOV.o distributions/RScalarDist.o\nOBJECTS.root = RJump.o\n\nOBJECTS = $(OBJECTS.samplers) $(OBJECTS.distributions) $(OBJECTS.root)\n@end smallexample\n\nWhere the subdirectory is self-contained code with a suitable makefile,\nthe best approach is something like\n\n@smallexample\nPKG_LIBS = -LCsdp/lib -lsdp $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)\n\n$(SHLIB): Csdp/lib/libsdp.a\n\nCsdp/lib/libsdp.a:      \n        @@(cd Csdp/lib && $(MAKE) libsdp.a \\\n          CC=\"$(CC)\" CFLAGS=\"$(CFLAGS) $(CPICFLAGS)\" AR=\"$(AR)\" RANLIB=\"$(RANLIB)\")\n@end smallexample\n\n@noindent\nNote the quotes: the macros can contain spaces, e.g.@: @code{CC = \"gcc\n-m64 -std=gnu99\"}.  Several authors have forgotten about parallel makes:\nthe static library in the subdirectory must be made before the shared\nobject (@code{$(SHLIB)}) and so the latter must depend on the former.\nOthers forget the need@footnote{A few OSes (AIX, IRIX, Windows) do not\nneed special flags for such code, but most do---although compilers will\noften generate PIC code when not asked to do so.} for\nposition-independent code.\n\nWe really do not recommend using @file{src/Makefile} instead of\n@file{src/Makevars}, and as the example above shows, it is not\nnecessary.\n\n@node Configure example, Using F95 code, Using Makevars, Configure and cleanup\n@subsection Configure example\n\nIt may be helpful to give an extended example of using a\n@file{configure} script to create a @file{src/Makevars} file: this is\nbased on that in the @CRANpkg{RODBC} package.\n\nThe @file{configure.ac} file follows: @file{configure} is created from\nthis by running @command{autoconf} in the top-level package directory\n(containing @file{configure.ac}).\n\n@quotation\n@c @cartouche\n@smallexample\nAC_INIT([RODBC], 1.1.8) dnl package name, version\n\ndnl A user-specifiable option\nodbc_mgr=\"\"\nAC_ARG_WITH([odbc-manager],\n            AC_HELP_STRING([--with-odbc-manager=MGR],\n                           [specify the ODBC manager, e.g. odbc or iodbc]),\n            [odbc_mgr=$withval])\n\nif test \"$odbc_mgr\" = \"odbc\" ; then\n  AC_PATH_PROGS(ODBC_CONFIG, odbc_config)\nfi\n\ndnl Select an optional include path, from a configure option\ndnl or from an environment variable.\nAC_ARG_WITH([odbc-include],\n            AC_HELP_STRING([--with-odbc-include=INCLUDE_PATH],\n                           [the location of ODBC header files]),\n            [odbc_include_path=$withval])\nRODBC_CPPFLAGS=\"-I.\"\nif test [ -n \"$odbc_include_path\" ] ; then\n   RODBC_CPPFLAGS=\"-I. -I$@{odbc_include_path@}\"\nelse\n  if test [ -n \"$@{ODBC_INCLUDE@}\" ] ; then\n     RODBC_CPPFLAGS=\"-I. -I$@{ODBC_INCLUDE@}\"\n  fi\nfi\n\ndnl ditto for a library path\nAC_ARG_WITH([odbc-lib],\n            AC_HELP_STRING([--with-odbc-lib=LIB_PATH],\n                           [the location of ODBC libraries]),\n            [odbc_lib_path=$withval])\nif test [ -n \"$odbc_lib_path\" ] ; then\n   LIBS=\"-L$odbc_lib_path $@{LIBS@}\"\nelse\n  if test [ -n \"$@{ODBC_LIBS@}\" ] ; then\n     LIBS=\"-L$@{ODBC_LIBS@} $@{LIBS@}\"\n  else\n    if test -n \"$@{ODBC_CONFIG@}\"; then\n      odbc_lib_path=`odbc_config --libs | sed s/-lodbc//`\n      LIBS=\"$@{odbc_lib_path@} $@{LIBS@}\"\n    fi\n  fi\nfi\n\ndnl Now find the compiler and compiler flags to use\n: $@{R_HOME=`R RHOME`@}\nif test -z \"$@{R_HOME@}\"; then\n  echo \"could not determine R_HOME\"\n  exit 1\nfi\nCC=`\"$@{R_HOME@}/bin/R\" CMD config CC`\nCPP=`\"$@{R_HOME@}/bin/R\" CMD config CPP`\nCFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CFLAGS`\nCPPFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CPPFLAGS`\nAC_PROG_CC\nAC_PROG_CPP\n\n\nif test -n \"$@{ODBC_CONFIG@}\"; then\n  RODBC_CPPFLAGS=`odbc_config --cflags`\nfi\nCPPFLAGS=\"$@{CPPFLAGS@} $@{RODBC_CPPFLAGS@}\"\n\ndnl Check the headers can be found\nAC_CHECK_HEADERS(sql.h sqlext.h)\nif test \"$@{ac_cv_header_sql_h@}\" = no ||\n   test \"$@{ac_cv_header_sqlext_h@}\" = no; then\n   AC_MSG_ERROR(\"ODBC headers sql.h and sqlext.h not found\")\nfi\n\ndnl search for a library containing an ODBC function\nif test [ -n \"$@{odbc_mgr@}\" ] ; then\n  AC_SEARCH_LIBS(SQLTables, $@{odbc_mgr@}, ,\n      AC_MSG_ERROR(\"ODBC driver manager $@{odbc_mgr@} not found\"))\nelse\n  AC_SEARCH_LIBS(SQLTables, odbc odbc32 iodbc, ,\n      AC_MSG_ERROR(\"no ODBC driver manager found\"))\nfi\n\ndnl for 64-bit ODBC need SQL[U]LEN, and it is unclear where they are defined.\nAC_CHECK_TYPES([SQLLEN, SQLULEN], , , [# include <sql.h>])\ndnl for unixODBC header\nAC_CHECK_SIZEOF(long, 4)\n\ndnl substitute RODBC_CPPFLAGS and LIBS\nAC_SUBST(RODBC_CPPFLAGS)\nAC_SUBST(LIBS)\nAC_CONFIG_HEADERS([src/config.h])\ndnl and do substitution in the src/Makevars.in and src/config.h\nAC_CONFIG_FILES([src/Makevars])\nAC_OUTPUT\n@end smallexample\n@c @end cartouche\n@end quotation\n\n@noindent\nwhere @file{src/Makevars.in} would be simply\n\n@quotation\n@example\nPKG_CPPFLAGS = @@RODBC_CPPFLAGS@@\nPKG_LIBS = @@LIBS@@\n@end example\n@end quotation\n\nA user can then be advised to specify the location of the ODBC driver\nmanager files by options like (lines broken for easier reading)\n\n@example\nR CMD INSTALL \\\n  --configure-args='--with-odbc-include=/opt/local/include \\\n  --with-odbc-lib=/opt/local/lib --with-odbc-manager=iodbc' \\\n  RODBC\n@end example\n\n@noindent\nor by setting the environment variables @code{ODBC_INCLUDE} and\n@code{ODBC_LIBS}.\n\n@node Using F95 code, Using C++11 code, Configure example, Configure and cleanup\n@subsection Using F95 code\n\n@R{} assumes that source files with extension @file{.f} are FORTRAN 77,\nand passes them to the compiler specified by @samp{F77}.  On most but\nnot all platforms that compiler will accept Fortran 90/95 code: some\nplatforms have a separate Fortran 90/95 compiler and a few (by now quite\nrare@footnote{Cygwin used @command{g77} up to 2011, and some pre-built\nversions of @R{} for Unix OSes still do.}) platforms have no Fortran\n90/95 support.\n\nThis means that portable packages need to be written in correct\nFORTRAN 77, which will also be valid Fortran 95.  See\n@uref{https://developer.R-project.org/@/Portability.html} for reference\nresources.  In particular, @emph{free source form} F95 code is not\nportable.\n\nOn some systems an alternative F95 compiler is available: from the\n@code{gcc} family this might be @command{gfortran} or @command{g95}.\nConfiguring @R{} will try to find a compiler which (from its name)\nappears to be a Fortran 90/95 compiler, and set it in macro @samp{FC}.\nNote that it does not check that such a compiler is fully (or even\npartially) compliant with Fortran 90/95.  Packages making use of Fortran\n90/95 features should use file extension @file{.f90} or @file{.f95} for\nthe source files: the variable @code{PKG_FCFLAGS} specifies any special\nflags to be used.  There is no guarantee that compiled Fortran 90/95\ncode can be mixed with any other type of compiled code, nor that a build\nof @R{} will have support for such packages.\n\nSome (but not) all compilers specified by the @samp{FC} macro will\naccept Fortran 2003 or 2008 code: such code should still use file\nextension @file{.f90} or @file{.f95}.  For platforms using\n@command{gfortran}, you may need to include @option{-std=f2003} or\n@option{-std=f2008} in @code{PKG_FCFLAGS}: the default is `GNU Fortran',\nFortran 95 with non-standard extensions.  The Oracle @command{f95}\ncompiler `accepts some Fortran 2003/8 features' (search for `Oracle\nDeveloper Studio 12.5: Fortran User's Guide' and look for \u00a74.6).\n\nModern versions of Fortran support modules, whereby compiling one source\nfile creates a module file which is then included in others. (Module\nfiles typically have a @file{.mod} extension: they do depend on the\ncompiler used and so should never be included in a package.)  This\ncreates a dependence which @command{make} will not know about and often\ncauses installation with a parallel make to fail.  Thus it is necessary\nto add explicit dependencies to @file{src/Makevars} to tell\n@command{make} the constraints on the order of compilation.  For\nexample, if file @file{iface.f90} creates a module @samp{iface} used by\nfiles @file{cmi.f90} and @file{dmi.f90} then @file{src/Makevars} needs\nto contain something like\n\n@example\ncmi.o dmi.o: iface.o\n@end example\n\n@node Using C++11 code, Using C++14 code, Using F95 code, Configure and cleanup\n@subsection Using C++11 code\n\n@R{} can be built without a C++ compiler although one is available (but\nnot necessarily installed) on all known @R{} platforms.  For full\nportability across platforms, all that can be assumed is approximate\nsupport for the C++98 standard (the widely used @command{g++} deviates\nconsiderably from the standard).  Some compilers have a concept of\n`C++03' (`essentially a bug fix') or `C++ Technical Report 1' (TR1), an\noptional addition to the `C++03' revision which was published in 2007.\nA revised standard was published in 2011 and compilers with pretty much\ncomplete implementations are available.  C++11 added all of the C99\nfeatures which are not otherwise implemented in C++, and C++ compilers\ncommonly accept C99 extensions to C++98.  A minor update@footnote{The\nchanges are linked from\n@uref{https://isocpp.org/@/std/@/standing-documents/@/sd-6-sg10-feature-test-recommendations}.}\nto C++11 (C++14) was published in December 2014.  The latest standard\n(C++17) was published in December 2017, and a further revision (`C++20')\nis in preparation.\n\nWhat standard a C++ compiler aims to support can be hard to determine:\nthe value@footnote{Values @code{199711}, @code{201103L} and\n@code{201402L} are most commonly used for C++98, C++11 and C++14\nrespectively, but some compilers set @code{1L}.} of @code{__cplusplus}\nmay help but some compilers use it to denote a standard which is\npartially supported and some the latest standard which is (almost) fully\nsupported.  As from version 6, @command{g++} defaults to C++14 (with GNU\nextensions): earlier versions aim to support C++03 with many extensions\n(including support for TR1) with version 5 having fairly complete C++14\nsupport enabled by flag @option{-std=gnu++14}.  @command{clang} with its\nnative@footnote{Some distributions, notably Debian, have supplied a\nbuild of @command{clang} with @command{g++}'s headers and library.\nConversely, Apple's command named @command{g++} is based on\n@command{clang} using @code{libc++}.} @code{libc++} headers and library\nhas since version 3.4 included almost all C++14 features, but does not\nsupport TR1.  As from version 6.0.0, @command{clang} defaults to C++14.\n\nSince version 3.1.0, @R{} has provided support for C++11 in packages in\naddition to C++98.  This support is not uniform across platforms as it\ndepends on the capabilities of the compiler (see below).  When @R{} is\nconfigured, it will determine whether the C++ compiler supports C++11\nand which compiler flags, if any, are required to enable C++11 support.\nFor example, recent versions of @command{g++} or @command{clang++}\naccept the compiler flag @option{-std=c++11}, and earlier versions\nsupport a flag @option{-std=c++0x}, but the latter only provided partial\nsupport for the C++11 standard (it later became a deprecated synonym for\n@option{-std=c++11}).\n\nIn order to use C++11 code in a package, the package's @file{Makevars}\nfile (or @file{Makevars.win} on Windows) should include the line\n\n@example\nCXX_STD = CXX11\n@end example\n@noindent\nCompilation and linking will then be done with the C++11 compiler.\n\nPackages without a @file{src/Makevars} or @file{src/Makefile} file may\nspecify that they require C++11 for code in the @file{src} directory by\nincluding @samp{C++11} in the @samp{SystemRequirements} field of the\n@file{DESCRIPTION} file, e.g.\n\n@example\nSystemRequirements: C++11\n@end example\n\nIf a package does have a @file{src/Makevars[.win]} file then setting the\nmake variable @samp{CXX_STD} is preferred, as it allows @command{R CMD\nSHLIB} to work correctly in the package's @file{src} directory.\n\nConversely, to ensure that the C++98 standard is assumed even when this\nis not the compiler default, use\n\n@example\nSystemRequirements: C++98\n@end example\n@noindent\nor\n@example\nCXX_STD = CXX98\n@end example\n\nThe C++11 compiler will be used systematically by R for all C++ code\nif the environment variable @env{USE_CXX11} is defined (with any\nvalue). Hence this environment variable should be defined when invoking\n@command{R CMD SHLIB} in the absence of a @file{Makevars} file (or\n@file{Makevars.win} on Windows) if a C++11 compiler is required.\n\nFurther control over compilation of C++11 code can be obtained by\nspecifying the macros @samp{CXX11} and @samp{CXX11STD} when @R{} is\nconfigured@footnote{For\ndetails of these and related macros, see file @file{config.site} in\nthe @R{} sources.}, or in a personal or site @file{Makevars} file.\n@ifset UseExternalXrefs\n@xref{Customizing package compilation, , Customizing package compilation,\nR-admin, R Installation and Administration}.\n@end ifset\nIf C++11 support is not available then these macros are both empty; if\nit is available by default, @samp{CXX11} defaults to @samp{CXX} and\n@samp{CXX11STD} is empty . Otherwise, @samp{CXX11} defaults to the same\nvalue as the C++ compiler @samp{CXX} and the flag @samp{CXX11STD}\ndefaults to @option{-std=c++11} or similar.  It is possible to specify\n@samp{CXX11} to be a distinct compiler just for C++11--using packages,\ne.g.@: @command{g++} on Solaris.  Note however that different C++\ncompilers (and even different versions of the same compiler) often\ndiffer in their ABI so their outputs can rarely be mixed. By setting\n@samp{CXX11STD} it is also possible to choose a different dialect of the\nstandard such as @option{-std=c++11}.\n\nAs noted above, support for C++11 varies across platforms: on some\nplatforms, it may be possible or necessary to select a different\ncompiler for C++11, @emph{via} personal or site @file{Makevars} files.\n\nThere is no guarantee that C++11 can be used in a package in combination\nwith any other compiled language (even C), as the C++11 compiler may be\nincompatible with the native compilers for the platform.  (There are\nknown problems mixing C++11 with Fortran.)\n\nIf a package using C++11 has a @command{configure} script it is\nessential that it selects the correct compiler, @emph{via} something like\n\n@example\nCXX11=`\"$@{R_HOME@}/bin/R\" CMD config CXX11`\nCXX11STD=`\"$@{R_HOME@}/bin/R\" CMD config CXX11STD`\nCXX=\"$@{CXX11@} $@{CXX11STD@}\"\nCXXFLAGS=`\"$@{R_HOME@}/bin/R\" CMD config CXX11FLAGS`\nAC_LANG(C++)\n@end example\n\n@noindent\n(paying attention to all the quotes required).\n\nIf you want to compile C++11 code in a subdirectory, make sure you pass\ndown the macros to specify that compiler, e.g.@: in @file{src/Makevars}\n@example\nsublibs:\n         @@(cd libs && $(MAKE) \\\n            CXX=\"$(CXX11) $(CXX11STD)\" CXXFLAGS=\"$(CXX11FLAGS) $(CXX11PICFLAGS)\")\n@end example\n\nNote that the mechanisms described here specify C++11 for code compiled\nby @command{R CMD SHLIB} as used by default by @command{R CMD INSTALL}.\nThey do not necessarily apply if there is a @file{src/Makefile} file,\nnor to compilation done in vignettes or @emph{via} other packages.\n\n@node Using C++14 code, Using C++17 code, Using C++11 code, Configure and cleanup\n@subsection Using C++14 code\n\nSupport for a C++14 (where available) has been explicitly added to @R{}\nfrom version 3.4.0. Similar considerations to C++11 apply, except that\nthe variables associated with the C++14 compiler use the prefix\n@samp{CXX14} instead of @samp{CXX11}. Hence to use C++14 code in a\npackage, the package's @file{Makevars} file (or @file{Makevars.win} on\nWindows) should include the line\n@example\nCXX_STD = CXX14\n@end example\n\nIn the absence of a @file{Makevars} file, C++14 support can also be\nrequested by the line:\n@example\nSystemRequirements: C++14\n@end example\n@noindent\nin the @file{DESCRIPTION} file. Finally, the C++14 compiler can be\nused systematically by setting the environment variable @env{USE_CXX14}.\n\nNote that code written for C++11 that emulates features of C++14 will\nnot necessarily compile under a C++14 compiler@footnote{As from @R{}\n3.4.0, @command{configure} attempts to supply a C++14 compiler only if\nexplicitly requested.  However, earlier versions of @R{} will use the\ndefault C++14 mode of @command{g++} 6 and later.}, since the emulation\ntypically leads to a namespace clash.  In order to ensure that the code\nalso compiles under C++14, something like the following should be\ndone:\n@example\n#if __cplusplus >= 201402L\nusing std::make_unique;\n#else\n// your emulation\n#endif\n@end example\n\n@noindent\nCode needing C++14 features would do better to test for their presence\n@emph{via} `SD-6 feature tests'@footnote{See\n@uref{https://isocpp.org/@/std/@/standing-documents/@/sd-6-sg10-feature-test-recommendations}\nor\n@uref{http://en.cppreference.com/@/w/@/cpp/@/experimental/@/feature_test}.\nIt seems a reasonable assumption that any compiler promising some C++14\nconformance will provide these---e.g.@: @command{g++} 4.9.x did but\n4.8.5 did not.}.  That test could be\n\n@example\n#include <memory> // header where this is defined\n#if defined(__cpp_lib_make_unique) && (__cpp_lib_make_unique >= 201304)\nusing std::make_unique;\n#else\n// your emulation\n#endif\n@end example\n\nThe webpage\n@uref{http://en.cppreference.com/@/w/@/cpp/@/compiler_support} gives\nsome information on which compilers are known to support recent C++\nfeatures.  Note that @command{g++} 4.9.x (as used for @R{} on Windows at\nthe time of writing) has only partial C++14 support, and the flag to\nobtain that support is not included in the default Windows build of @R{}\n--- one could try something like\n\n@example\nCXX14=\"$(BINPREF)g++ $(M_ARCH)\"\nCXX14FLAGS=\"-O2 -Wall\" \nCXX14STD=-std=gnu1y \n@end example\n\n@noindent\nin @file{@var{HOME}/.R/Makevars.win}.\n\n\n@node Using C++17 code,  , Using C++14 code, Configure and cleanup\n@subsection Using C++17 code\n\nExperimental support for C++17 has been added to @R{} version 3.4.0. The\n@file{configure} script tests a subset of C++17 features.  @code{clang\n4.0.0} and @code{gcc 7.1} and later versions passed these tests (with\nflag @option{-std=gnu++17} or @option{-std=gnu++1z} chosen by the\n@file{configure} script).  Note that the C++17 feature tests are\nincomplete and are subject to change in future @R{} versions as compiler\nsupport for the standard improves.\n\nThe variables associated with the C++17 compiler use the prefix\n@samp{CXX17}.  Hence to use C++17 code in a package, the package's\n@file{Makevars} file (or @file{Makevars.win} on Windows) should\ninclude the line\n@example\nCXX_STD = CXX17\n@end example\n\nIn the absence of a @file{Makevars} file, C++17 support can also be\nrequested by the line:\n@example\nSystemRequirements: C++17\n@end example\n@noindent\nin the @file{DESCRIPTION} file. Finally, the C++17 compiler can be\nused systematically by setting the environment variable @env{USE_CXX17}.\n\nAs for C++14, feature tests can be used (and probably should be as\ncompiler support is still patchy).\n\nNo C++17 support is enabled in the current default build of @R{} on\nWindows.\n\n@node Checking and building packages, Writing package vignettes, Configure and cleanup, Creating R packages\n@section Checking and building packages\n\nBefore using these tools, please check that your package can be\ninstalled (which checked it can be loaded).  @code{R CMD check} will\n@emph{inter alia} do this, but you may get more detailed error messages\ndoing the install directly.\n\n@menu\n* Checking packages::           \n* Building package tarballs::   \n* Building binary packages::    \n@end menu\n\nIf your package specifies an encoding in its @file{DESCRIPTION} file,\nyou should run these tools in a locale which makes use of that encoding:\nthey may not work at all or may work incorrectly in other locales\n(although UTF-8 locales will most likely work).\n\n@quotation Note\n@code{R CMD check} and @code{R CMD build} run @R{} processes with\n@option{--vanilla} in which none of the user's startup files are read.\nIf you need @env{R_LIBS} set (to find packages in a non-standard\nlibrary) you can set it in the environment: also you can use the check\nand build environment files (as specified by the environment variables\n@env{R_CHECK_ENVIRON} and @env{R_BUILD_ENVIRON}; if unset,\nfiles@footnote{On systems which use sub-architectures,\narchitecture-specific versions such as @file{~/.R/check.Renviron.i386}\ntake precedence.}  @file{~/.R/check.Renviron} and\n@file{~/.R/build.Renviron} are used) to set environment variables when\nusing these utilities.\n@end quotation\n\n@quotation Note to Windows users\n@code{R CMD build} may make use of the Windows toolset (see the ``R\nInstallation and Administration'' manual) if present and in your path,\nand it is required for packages which need it to install (including\nthose with @file{configure.win} or @file{cleanup.win} scripts or a\n@file{src} directory) and e.g.@: need vignettes built.\n\nYou may need to set the environment variable @env{TMPDIR} to point to a\nsuitable writable directory with a path not containing spaces -- use\nforward slashes for the separators.  Also, the directory needs to be on\na case-honouring file system (some network-mounted file systems are\nnot).\n@end quotation\n\n\n@node Checking packages, Building package tarballs, Checking and building packages, Checking and building packages\n@subsection Checking packages\n@cindex Checking packages\n\n@findex R CMD check\nUsing @code{R CMD check}, the @R{} package checker, one can test whether\n@emph{source} @R{} packages work correctly.  It can be run on one or\nmore directories, or compressed package @command{tar} archives with\nextension @file{.tar.gz}, @file{.tgz}, @file{.tar.bz2} or\n@file{.tar.xz}.\n\nIt is strongly recommended that the final checks are run on a\n@command{tar} archive prepared by @command{R CMD build}.\n\nThis runs a series of checks, including\n\n@enumerate\n@item\nThe package is installed.  This will warn about missing cross-references\nand duplicate aliases in help files.\n\n@item\nThe file names are checked to be valid across file systems and supported\noperating system platforms.\n\n@item\nThe files and directories are checked for sufficient permissions\n(Unix-alikes only).\n\n@item\nThe files are checked for binary executables, using a suitable version\nof @command{file} if available@footnote{A suitable @command{file.exe} is\npart of the Windows toolset: it checks for @command{gfile} if a suitable\n@command{file} is not found: the latter is available in the OpenCSW\ncollection for Solaris at @uref{http://www.opencsw.org}.  The source\nrepository is @uref{ftp://ftp.astron.com/pub/file/}.}.  (There may be\nrare false positives.)\n\n@item\nThe @file{DESCRIPTION} file is checked for completeness, and some of its\nentries for correctness.  Unless installation tests are skipped,\nchecking is aborted if the package dependencies cannot be resolved at\nrun time.  (You may need to set @env{R_LIBS} in the environment if\ndependent packages are in a separate library tree.) One check is that\nthe package name is not that of a standard package, nor one of the\ndefunct standard packages (@samp{ctest}, @samp{eda}, @samp{lqs},\n@samp{mle}, @samp{modreg}, @samp{mva}, @samp{nls}, @samp{stepfun} and\n@samp{ts}).  Another check is that all packages mentioned in\n@code{library} or @code{require}s or from which the @file{NAMESPACE}\nfile imports or are called @emph{via} @code{::} or @code{:::} are listed\n(in @samp{Depends}, @samp{Imports}, @samp{Suggests}): this is not an\nexhaustive check of the actual imports.\n\n@item\nAvailable index information (in particular, for demos and vignettes) is\nchecked for completeness.\n\n@item\nThe package subdirectories are checked for suitable file names and for\nnot being empty.  The checks on file names are controlled by the option\n@option{--check-subdirs=@var{value}}.  This defaults to @samp{default},\nwhich runs the checks only if checking a tarball: the default can be\noverridden by specifying the value as @samp{yes} or @samp{no}.  Further,\nthe check on the @file{src} directory is only run if the package\ndoes not contain a @file{configure} script (which corresponds to the\nvalue @samp{yes-maybe}) and there is no @file{src/Makefile} or\n@file{src/Makefile.in}.\n\nTo allow a @file{configure} script to generate suitable files, files\nending in @samp{.in} will be allowed in the @file{R} directory.\n\nA warning is given for directory names that look like @R{} package check\ndirectories -- many packages have been submitted to @acronym{CRAN}\ncontaining these.\n\n@item\nThe @R{} files are checked for syntax errors.  Bytes which are\nnon-@acronym{ASCII} are reported as warnings, but these should be\nregarded as errors unless it is known that the package will always be\nused in the same locale.\n\n@item\nIt is checked that the package can be loaded, first with the usual\ndefault packages and then only with package @pkg{base} already\nloaded. It is checked that the namespace this can be loaded in an empty\nsession with only the @pkg{base} namespace loaded.  (Namespaces and\npackages can be loaded very early in the session, before the default\npackages are available, so packages should work then.)\n\n@item\nThe @R{} files are checked for correct calls to @code{library.dynam}.\nPackage startup functions are checked for correct argument lists and\n(incorrect) calls to functions which modify the search path or\ninappropriately generate messages.  The @R{} code is checked for\npossible problems using @CRANpkg{codetools}.  In addition, it is checked\nwhether S3 methods have all arguments of the corresponding generic, and\nwhether the final argument of replacement functions is called\n@samp{value}.  All foreign function calls (@code{.C}, @code{.Fortran},\n@code{.Call} and @code{.External} calls) are tested to see if they have\na @code{PACKAGE} argument, and if not, whether the appropriate DLL might\nbe deduced from the namespace of the package.  Any other calls are\nreported.  (The check is generous, and users may want to supplement this\nby examining the output of @code{tools::checkFF(\"mypkg\", verbose=TRUE)},\nespecially if the intention were to always use a @code{PACKAGE}\nargument)\n\n@item\nThe @file{Rd} files are checked for correct syntax and metadata,\nincluding the presence of the mandatory fields (@code{\\name}, @code{\\alias},\n@code{\\title} and @code{\\description}).  The @file{Rd} name and\ntitle are checked for being non-empty, and there is a check for missing\ncross-references (links).\n\n@item\nA check is made for missing documentation entries, such as undocumented\nuser-level objects in the package.\n\n@item\nDocumentation for functions, data sets, and S4 classes is checked for\nconsistency with the corresponding code.\n\n@item\nIt is checked whether all function arguments given in @code{\\usage}\nsections of @file{Rd} files are documented in the corresponding\n@code{\\arguments} section.\n\n@item\nThe @file{data} directory is checked for non-@acronym{ASCII} characters\nand for the use of reasonable levels of compression.\n\n@item\nC, C++ and FORTRAN source and header files@footnote{An exception is made\nfor subdirectories with names starting @samp{win} or @samp{Win}.} are\ntested for portable (LF-only) line endings.  If there is a\n@file{Makefile} or @file{Makefile.in} or @file{Makevars} or\n@file{Makevars.in} file under the @file{src} directory, it is checked\nfor portable line endings and the correct use of @samp{$(BLAS_LIBS)} and\n@samp{$(LAPACK_LIBS)}\n\nCompiled code is checked for symbols corresponding to functions which\nmight terminate @R{} or write to @file{stdout}/@file{stderr} instead of\nthe console.  Note that the latter might give false positives in that\nthe symbols might be pulled in with external libraries and could never\nbe called.  Windows@footnote{on most other platforms such runtime\nlibraries are dynamic, but static libraries are currently used on\nWindows because the toolchain is not a standard part of the OS.} users\nshould note that the Fortran and C++ runtime libraries are examples of\nsuch external libraries.\n\n@item\nSome checks are made of the contents of the @file{inst/doc} directory.\nThese always include checking for files that look like leftovers, and if\nsuitable tools (such as @command{qpdf}) are available, checking that the\nPDF documentation is of minimal size.\n\n@item\nThe examples provided by the package's documentation are run.\n(@pxref{Writing R documentation files}, for information on using\n@code{\\examples} to create executable example code.)  If there is a file\n@file{tests/Examples/@var{pkg}-Ex.Rout.save}, the output of running the\nexamples is compared to that file.\n\nOf course, released packages should be able to run at least their own\nexamples.  Each example is run in a `clean' environment (so earlier\nexamples cannot be assumed to have been run), and with the variables\n@code{T} and @code{F} redefined to generate an error unless they are set\nin the example: @xref{Logical vectors, , Logical vectors, R-intro, An\nIntroduction to R}.\n\n@item\nIf the package sources contain a @file{tests} directory then the tests\nspecified in that directory are run.  (Typically they will consist of a\nset of @file{.R} source files and target output files\n@file{.Rout.save}.)  Please note that the comparison will be done in the\nend user's locale, so the target output files should be @acronym{ASCII}\nif at all possible.  (The command line option @code{--test-dir=foo} may\nbe used to specify tests in a non-standard location.  For example,\nunusually slow tests could be placed in @file{inst/slowTests} and then\n@code{R CMD check --test-dir=inst/slowTests} would be used to run them.\nOther names that have been suggested are, for example,\n@file{inst/testWithOracle} for tests that require Oracle to be installed,\n@file{inst/randomTests} for tests which use random values and may\noccasionally fail by chance, etc.)\n\n@item\nThe code in package vignettes (@pxref{Writing package vignettes}) is\nexecuted, and the vignette PDFs re-made from their sources as a check of\ncompleteness of the sources (unless there is a @samp{BuildVignettes}\nfield in the package's @file{DESCRIPTION} file with a false value).  If\nthere is a target output file @file{.Rout.save} in the vignette source\ndirectory, the output from running the code in that vignette is compared\nwith the target output file and any differences are reported (but not\nrecorded in the log file).  (If the vignette sources are in the\ndeprecated location @file{inst/doc}, do mark such target output files to\nnot be installed in @file{.Rinstignore}.)\n\nIf there is an error@footnote{or if option @option{--use-valgrind} is\nused or environment variable @env{_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_}\nis set to a true value or if there are differences from a target output\nfile} in executing the @R{} code in vignette @file{@var{foo.ext}}, a log\nfile @file{@var{foo.ext}.log} is created in the check directory.  The\nvignette PDFs are re-made in a copy of the package sources in the\n@file{vign_test} subdirectory of the check directory, so for further\ninformation on errors look in directory\n@file{@var{pkgname}/vign_test/vignettes}.  (It is only retained if there\nare errors or if environment variable @env{_R_CHECK_CLEAN_VIGN_TEST_} is\nset to a false value.)\n\n@item\nThe PDF version of the package's manual is created (to check that the\n@file{Rd} files can be converted successfully).  This needs @LaTeX{} and\nsuitable fonts and @LaTeX{} packages to be installed.\n@ifset UseExternalXrefs\n@xref{Making the manuals, , Making the manuals,\nR-admin, R Installation and Administration}.\n@end ifset\n@ifclear UseExternalXrefs\nSee the section `Making the manuals' in the `R Installation and\nAdministration' manual' for further details.\n@end ifclear\n\n@end enumerate\n\nAll these tests are run with collation set to the @code{C} locale, and\nfor the examples and tests with environment variable @env{LANGUAGE=en}:\nthis is to minimize differences between platforms.\n\nUse @kbd{R CMD check --help} to obtain more information about the usage\nof the @R{} package checker.  A subset of the checking steps can be\nselected by adding command-line options. It also allows customization by\nsetting environment variables @w{@env{_R_CHECK_*_}} as described in\n@ifset UseExternalXrefs\n@ref{Tools, , Tools, R-ints, R Internals}:\n@end ifset\n@ifclear UseExternalXrefs\n`R Internals':\n@end ifclear\na set of these customizations similar to those used by @acronym{CRAN}\ncan be selected by the option @option{--as-cran} (which works best if\nInternet access is available).  Some Windows users may\nneed to set environment variable @env{R_WIN_NO_JUNCTIONS} to a non-empty\nvalue.  The test of cyclic declarations@footnote{For example, in early\n2014 @CRANpkg{gdata} declared @samp{Imports: gtools} and @CRANpkg{gtools}\ndeclared @samp{Imports: gdata}.}in @file{DESCRIPTION} files needs\nrepositories (including @acronym{CRAN}) set: do this in\n@file{~/.Rprofile}, by e.g.@:\n@example\noptions(repos = c(CRAN=\"https://cran.r-project.org\"))\n@end example\n\nOne check customization which can be revealing is\n@example\n_R_CHECK_CODETOOLS_PROFILE_=\"suppressLocalUnused=FALSE\"\n@end example\n@noindent\nwhich reports unused local assignments.  Not only does this point out\ncomputations which are unnecessary because their results are unused, it\nalso can uncover errors.  (Two such are to intend to update an object by\nassigning a value but mistype its name or assign in the wrong scope,\nfor example using @code{<-} where @code{<<-} was intended.)  This can\ngive false positives, most commonly because of non-standard evaluation\nfor formulae and because the intention is to return objects in the\nenvironment of a function for later use.\n\nComplete checking of a package which contains a file @file{README.md}\nneeds @command{pandoc} installed: see\n@uref{http://johnmacfarlane.net/@/pandoc/@/installing.html}.  This\nshould be reasonably current: at the time of writing @acronym{CRAN} used\nversion 1.12.4.2 to process these files.\n\nYou do need to ensure that the package is checked in a suitable locale\nif it contains non-@acronym{ASCII} characters.  Such packages are likely\nto fail some of the checks in a @code{C} locale, and @command{R CMD\ncheck} will warn if it spots the problem.  You should be able to check\nany package in a UTF-8 locale (if one is available).  Beware that\nalthough a @code{C} locale is rarely used at a console, it may be the\ndefault if logging in remotely or for batch jobs.\n\n@quotation Multiple sub-architectures\nOn systems which support multiple sub-architectures (principally\nWindows), @command{R CMD check} will install and check a package which\ncontains compiled code under all available sub-architectures. (Use\noption @option{--force-multiarch} to force this for packages without\ncompiled code, which are otherwise only checked under the main\nsub-architecture.)  This will run the loading tests, examples and\n@file{tests} directory under each installed sub-architecture in turn,\nand give an error if any fail.  Where environment variables (including\nperhaps @env{PATH}) need to be set differently for each\nsub-architecture, these can be set in architecture-specific files such\nas @file{@var{R_HOME}/etc/i386/Renviron.site}.\n\nAn alternative approach is to use @command{R CMD check --no-multiarch}\nto check the primary sub-architecture, and then to use something like\n@command{R --arch=x86_64 CMD check --extra-arch} or (Windows)\n@command{/path/to/R/bin/x64/Rcmd check --extra-arch} to run for each\nadditional sub-architecture just the checks@footnote{loading, examples,\ntests, running vignette code} which differ by sub-architecture.  (This\napproach is required for packages which are installed by @command{R CMD\nINSTALL --merge-multiarch}.)\n\nWhere packages need additional commands to install all the\nsub-architectures these can be supplied by e.g.@:\n@option{--install-args=--force-biarch}.\n\n@end quotation\n\n\n@node Building package tarballs, Building binary packages, Checking packages, Checking and building packages\n@subsection Building package tarballs\n@cindex Building source packages\n\n@findex R CMD build\n@cindex Package builder\n@cindex tarballs\nPackages may be distributed in source form as ``tarballs''\n(@file{.tar.gz} files) or in binary form. The source form can be\ninstalled on all platforms with suitable tools and is the usual form for\nUnix-like systems; the binary form is platform-specific, and is the more\ncommon distribution form for the Windows and macOS platforms.\n\nUsing @command{R CMD build}, the @R{} package builder, one can build\n@R{} package tarballs from their sources (for example, for subsequent\nrelease).  It is recommended that packages are built for release by the\ncurrent release version of @R{} or @samp{r-patched}, to avoid\ninadvertently picking up new features of a development version of @R{}.\n\nPrior to actually building the package in the standard gzipped tar file\nformat, a few diagnostic checks and cleanups are performed.  In\nparticular, it is tested whether object indices exist and can be assumed\nto be up-to-date, and C, C++ and FORTRAN source files and relevant\nmakefiles in a @file{src} directory are tested and converted to LF\nline-endings if necessary.\n\nRun-time checks whether the package works correctly should be performed\nusing @command{R CMD check} prior to invoking the final build procedure.\n\n@cindex .Rbuildignore file\nTo exclude files from being put into the package, one can specify a list\nof exclude patterns in file @file{.Rbuildignore} in the top-level source\ndirectory.  These patterns should be Perl-like regular expressions (see\nthe help for @code{regexp} in @R{} for the precise details), one per\nline, to be matched case-insensitively against the file and directory\nnames relative to the top-level package source directory.  In addition,\ndirectories from source control systems@footnote{called @file{CVS} or\n@file{.svn} or @file{.arch-ids} or @file{.bzr} or @file{.git} (but not\nfiles called @file{.git}) or @file{.hg}.} or from\n@command{eclipse}@footnote{called @file{.metadata}.}, directories with\nnames ending @file{.Rcheck} or @file{Old} or @file{old} and files\n@file{GNUMakefile}@footnote{which is an error: GNU make uses\n@file{GNUmakefile}.}, @file{Read-and-delete-me} or with base names\nstarting with @samp{.#}, or starting and ending with @samp{#}, or ending\nin @samp{~}, @samp{.bak} or @samp{.swp}, are excluded by default.  In\naddition, those files in the @file{R}, @file{demo} and @file{man}\ndirectories which are flagged by @command{R CMD check} as having invalid\nnames will be excluded.\n\nUse @kbd{R CMD build --help} to obtain more information about the usage\nof the @R{} package builder.\n\n@c DESCRIPTION field BuildVignettes\nUnless @kbd{R CMD build} is invoked with the\n@option{--no-build-vignettes} option (or the package's\n@file{DESCRIPTION} contains @samp{BuildVignettes: no} or similar), it\nwill attempt to (re)build the vignettes (@pxref{Writing package\nvignettes}) in the package.  To do so it installs the current package\ninto a temporary library tree, but any dependent packages need to be\ninstalled in an available library tree (see the Note: at the top of this\nsection).\n\n@c DESCRIPTION field BuildManual\nSimilarly, if the @file{.Rd} documentation files contain any\n@code{\\Sexpr} macros (@pxref{Dynamic pages}), the package will be\ntemporarily installed to execute them.  Post-execution binary copies of\nthose pages containing build-time macros will be saved in\n@file{build/partial.rdb}.  If there are any install-time or render-time\nmacros, a @file{.pdf} version of the package manual will be built and\ninstalled in the @file{build} subdirectory.  (This allows\n@acronym{CRAN} or other repositories to display the manual even if they\nare unable to install the package.)  This can be suppressed by the\noption @option{--no-manual} or if package's @file{DESCRIPTION} contains\n@samp{BuildManual: no} or similar.\n\n@c DESCRIPTION field BuildKeepEmpty\nOne of the checks that @command{R CMD build} runs is for empty source\ndirectories.  These are in most (but not all) cases unintentional, if\nthey are intentional use the option @option{--keep-empty-dirs} (or set\nthe environment variable @env{_R_BUILD_KEEP_EMPTY_DIRS_} to @samp{TRUE},\nor have a @samp{BuildKeepEmpty} field with a true value in the\n@file{DESCRIPTION} file).\n\n@c DESCRIPTION field BuildResaveData\nThe @option{--resave-data} option allows saved images (@file{.rda} and\n@file{.RData} files) in the @file{data} directory to be optimized for\nsize.  It will also compress tabular files and convert @file{.R} files\nto saved images.  It can take values @code{no}, @code{gzip} (the default\nif this option is not supplied, which can be changed by setting the\nenvironment variable @env{_R_BUILD_RESAVE_DATA_}) and @code{best}\n(equivalent to giving it without a value), which chooses the most\neffective compression.  Using @code{best} adds a dependence on @code{R\n(>= 2.10)} to the @file{DESCRIPTION} file if @command{bzip2} or\n@command{xz} compression is selected for any of the files.  If this is\nthought undesirable, @option{--resave-data=gzip} (which is the default\nif that option is not supplied) will do what compression it can with\n@command{gzip}.  A package can control how its data is resaved by\nsupplying a @samp{BuildResaveData} field (with one of the values given\nearlier in this paragraph) in its @file{DESCRIPTION} file.\n\nThe @option{--compact-vignettes} option will run\n@code{tools::compactPDF} over the PDF files in @file{inst/doc} (and its\nsubdirectories) to losslessly compress them.  This is not enabled by\ndefault (it can be selected by environment variable\n@env{_R_BUILD_COMPACT_VIGNETTES_}) and needs @command{qpdf}\n(@uref{http://qpdf.sourceforge.net/}) to be available.\n\nIt can be useful to run @command{R CMD check --check-subdirs=yes} on the\nbuilt tarball as a final check on the contents.\n\nWhere a non-POSIX file system is in use which does not utilize execute\npermissions, some care is needed with permissions.  This applies on\nWindows and to e.g.@: FAT-formatted drives and SMB-mounted file systems\non other OSes.  The `mode' of the file recorded in the tarball will be\nwhatever @code{file.info()} returns.  On Windows this will record only\ndirectories as having execute permission and on other OSes it is likely\nthat all files have reported `mode' @code{0777}.  A particular issue is\npackages being built on Windows which are intended to contain executable\nscripts such as @file{configure} and @file{cleanup}: @command{R CMD\nbuild} ensures those two are recorded with execute permission.\n\nDirectory @file{build} of the package sources is reserved for use by\n@command{R CMD build}: it contains information which may not easily be\ncreated when the package is installed, including index information on\nthe vignettes and, rarely, information on the help pages and perhaps a\ncopy of the PDF reference manual (see above).\n\n@node Building binary packages,  , Building package tarballs, Checking and building packages\n@subsection Building binary packages\n@cindex Building binary packages\n\nBinary packages are compressed copies of installed versions of\npackages.  They contain compiled shared libraries rather than C, C++ or\nFortran source code, and the R functions are included in their installed\nform.  The format and filename are platform-specific; for example, a\nbinary package for Windows is usually supplied as a @file{.zip} file,\nand for the macOS platform the default binary package file extension is\n@file{.tgz}.\n\nThe recommended method of building binary packages is to use\n\n@command{R CMD INSTALL --build pkg}\n@noindent\nwhere @file{pkg} is either the name of a source tarball (in the usual\n@file{.tar.gz} format) or the location of the directory of the package\nsource to be built.  This operates by first installing the package and\nthen packing the installed binaries into the appropriate binary package\nfile for the particular platform.\n\nBy default, @command{R CMD INSTALL --build} will attempt to install the\npackage into the default library tree for the local installation of\n@R{}. This has two implications:\n\n@itemize @bullet\n@item\nIf the installation is successful, it will overwrite any existing installation\nof the same package.\n\n@item\nThe default library tree must have write permission; if not, the package will\nnot install and the binary will not be created.\n\n@end itemize\n\n@noindent\nTo prevent changes to the present working installation or to provide an\ninstall location with write access, create a suitably located directory\nwith write access and use the @command{-l} option to build the package\nin the chosen location.  The usage is then\n\n@command{R CMD INSTALL -l location --build pkg}\n\n@noindent\nwhere @file{location} is the chosen directory with write access. The package\nwill be installed as a subdirectory of @file{location}, and the package binary\nwill be created in the current directory.\n\nOther options for @command{R CMD INSTALL} can be found using @command{R\nCMD INSTALL --help}, and platform-specific details for special cases are\ndiscussed in the platform-specific FAQs.\n\n\n@c In much earlier versions of @R{}, @command{R CMD build --binary} could\n@c build a binary version of a package, but this approach is now deprecated\n@c in favour of @command{R CMD INSTALL --build}.\n\n\nFinally, at least one web-based service is available for building binary\npackages from (checked) source code: WinBuilder (see\n@uref{https://win-builder.R-project.org/}) is able to build Windows\nbinaries. Note that this is intended for developers on other platforms\nwho do not have access to Windows but wish to provide binaries for the\nWindows platform.\n\n@node Writing package vignettes, Package namespaces, Checking and building packages, Creating R packages\n@section Writing package vignettes\n@cindex vignettes\n@cindex Sweave\n\n@menu\n* Encodings and vignettes::     \n* Non-Sweave vignettes::        \n@end menu\n\nIn addition to the help files in @file{Rd} format, @R{} packages allow\nthe inclusion of documents in arbitrary other formats.  The standard\nlocation for these is subdirectory @file{inst/doc} of a source package,\nthe contents will be copied to subdirectory @file{doc} when the package\nis installed.  Pointers from package help indices to the installed\ndocuments are automatically created.  Documents in @file{inst/doc} can\nbe in arbitrary format, however we strongly recommend providing them in\nPDF format, so users on almost all platforms can easily read them.  To\nensure that they can be accessed from a browser (as an @HTML{} index is\nprovided), the file names should start with an @acronym{ASCII} letter\nand be comprised entirely of @acronym{ASCII} letters or digits or hyphen\nor underscore.\n\nA special case is @emph{package vignettes}.  Vignettes are documents in\nPDF or @HTML{} format obtained from plain text literate source files\nfrom which @R{} knows how to extract @R{} code and create output (in\nPDF/@HTML{} or intermediate @LaTeX{}).  Vignette engines do this work,\nusing ``tangle'' and ``weave'' functions respectively.  Sweave, provided\nby the R distribution, is the default engine.  Since @R{} version 3.0.0,\nother vignette engines besides Sweave are supported; see @ref{Non-Sweave\nvignettes}.\n\nPackage vignettes have their sources in subdirectory @file{vignettes} of\nthe package sources.  Note that the location of the vignette sources\nonly affects @command{R CMD build} and @command{R CMD check}: the\ntarball built by @command{R CMD build} includes in @file{inst/doc} the\ncomponents intended to be installed.\n\nSweave vignette sources are normally given the file extension\n@file{.Rnw} or @file{.Rtex}, but for historical reasons\nextensions@footnote{and to avoid problems with case-insensitive file\nsystems, lower-case versions of all these extensions.} @file{.Snw} and\n@file{.Stex} are also recognized.  Sweave allows the integration of\n@LaTeX{} documents: see the @code{Sweave} help page in @R{} and the\n@code{Sweave} vignette in package @pkg{utils} for details on the\nsource document format.\n\nPackage vignettes are tested by @code{R CMD check} by executing all @R{}\ncode chunks they contain (except those marked for non-evaluation, e.g.,\nwith option @code{eval=FALSE} for Sweave).  The @R{} working directory\nfor all vignette tests in @code{R CMD check} is a @emph{copy} of the\nvignette source directory.  Make sure all files needed to run the @R{}\ncode in the vignette (data sets, @dots{}) are accessible by either\nplacing them in the @file{inst/doc} hierarchy of the source package or\nby using calls to @code{system.file()}.  All other files needed to\nre-make the vignettes (such as @LaTeX{} style files, Bib@TeX{} input\nfiles and files for any figures not created by running the code in the\nvignette) must be in the vignette source directory.  @code{R CMD check} \nwill check that vignette production has succeeded by comparing\nmodification times of output files in @file{inst/doc} with\nthe source in @file{vignettes}.\n\n@code{R CMD build} will automatically@footnote{unless inhibited by using\n@samp{BuildVignettes: no} in the @file{DESCRIPTION} file.} create the\n(PDF or @HTML{} versions of the) vignettes in @file{inst/doc} for\ndistribution with the package sources.  By including the vignette\noutputs in the package sources it is not necessary that these can be\nre-built at install time, i.e., the package author can use private @R{}\npackages, screen snapshots and @LaTeX{} extensions which are only\navailable on his machine.@footnote{provided the conditions of the\npackage's license are met: many, including @acronym{CRAN}, see the\nomission of source components as incompatible with an Open Source\nlicense.}\n\nBy default @code{R CMD build} will run @code{Sweave} on all Sweave\nvignette source files in @file{vignettes}.  If @file{Makefile} is found\nin the vignette source directory, then @code{R CMD build} will try to\nrun @command{make} after the @code{Sweave} runs, otherwise\n@code{texi2pdf} is run on each @file{.tex} file produced.\n\nThe first target in the @file{Makefile} should take care of both\ncreation of PDF/@HTML{} files and cleaning up afterwards (including\nafter @code{Sweave}), i.e., delete all files that shall not appear in\nthe final package archive.  Note that if the @code{make} step runs @R{}\nit needs to be careful to respect the environment values of @env{R_LIBS}\nand @env{R_HOME}@footnote{@code{R_HOME/bin} is prepended to the\n@env{PATH} so that references to @command{R} or @command{Rscript} in the\n@file{Makefile} do make use of the currently running version of @R{}.}.\nFinally, if there is a @file{Makefile} and it has a @samp{clean:}\ntarget, @command{make clean} is run.\n\nAll the usual @emph{caveats} about including a @file{Makefile} apply.\nIt must be portable (no @acronym{GNU} extensions), use LF line endings\nand must work correctly with a parallel @command{make}: too many authors\nhave written things like\n\n@example\n## BAD EXAMPLE\nall: pdf clean\n\npdf: ABC-intro.pdf ABC-details.pdf\n\n%.pdf:  %.tex\n        texi2dvi --pdf $*\n\nclean:\n        rm *.tex ABC-details-*.pdf\n@end example\n\n@noindent\nwhich will start removing the source files whilst @command{pdflatex} is\nworking.\n\nMetadata lines can be placed in the source file, preferably in @LaTeX{}\ncomments in the preamble.  One such is a @code{\\VignetteIndexEntry} of\nthe form\n@example\n%\\VignetteIndexEntry@{Using Animal@}\n@end example\n@noindent\nOthers you may see are @code{\\VignettePackage} (currently ignored),\n@code{\\VignetteDepends} and @code{\\VignetteKeyword} (which replaced\n@code{\\VignetteKeywords}).  These are processed at package installation\ntime to create the saved data frame @file{Meta/vignette.rds}, but only\nthe @code{\\VignetteIndexEntry} and @code{\\VignetteKeyword} statements\nare currently used.  The @code{\\VignetteEngine} statement\nis described in @ref{Non-Sweave vignettes}.\n\nAt install time an @HTML{} index for all vignettes in the package is\nautomatically created from the @code{\\VignetteIndexEntry} statements\nunless a file @file{index.html} exists in directory\n@file{inst/doc}. This index is linked from the @HTML{} help index for\nthe package.  If you do supply a @file{inst/doc/index.html} file it\nshould contain relative links only to files under the installed\n@file{doc} directory, or perhaps (not really an index) to @HTML{} help\nfiles or to the @file{DESCRIPTION} file, and be valid @HTML{} as\nconfirmed via the @uref{https://validator.w3.org, W3C Markup Validation\nService} or @uref{https://validator.nu/, Validator.nu}.\n\nSweave/Stangle allows the document to specify the @code{split=TRUE}\noption to create a single @R{} file for each code chunk: this will not\nwork for vignettes where it is assumed that each vignette source\ngenerates a single file with the vignette extension replaced by\n@file{.R}.\n\nDo watch that PDFs are not too large -- one in a @acronym{CRAN} package\nwas 72MB!  This is usually caused by the inclusion of overly detailed\nfigures, which will not render well in PDF viewers.  Sometimes it is\nmuch better to generate fairly high resolution bitmap (PNG, JPEG)\nfigures and include those in the PDF document.\n\n@cindex .install_extras file\nWhen @command{R CMD build} builds the vignettes, it copies these and\nthe vignette sources from directory @file{vignettes} to @file{inst/doc}.\nTo install any other files from the @file{vignettes} directory, include\na file @file{vignettes/.install_extras} which specifies these as\nPerl-like regular expressions on one or more lines.  (See the\ndescription of the @file{.Rinstignore} file for full details.)\n\n\n@node Encodings and vignettes, Non-Sweave vignettes, Writing package vignettes, Writing package vignettes\n@subsection Encodings and vignettes\n\nVignettes will in general include descriptive text, @R{} input, @R{}\noutput and figures, @LaTeX{} include files and bibliographic references.\nAs any of these may contain non-@acronym{ASCII} characters, the handling\nof encodings can become very complicated.\n\nThe vignette source file should be written in @acronym{ASCII} or contain\na declaration of the encoding (see below).  This applies even to\ncomments within the source file, since vignette engines process comments\nto look for options and metadata lines.  When an engine's weave and\ntangle functions are called on the vignette source, it will be converted\nto the encoding of the current @R{} session.\n\n@code{Stangle()} will produce an @R{} code file in the current locale's\nencoding: for a non-@acronym{ASCII} vignette what that is is recorded in a\ncomment at the top of the file.\n\n@code{Sweave()} will produce a @file{.tex} file in the current\nencoding, or in UTF-8 if that is declared.  Non-@acronym{ASCII} encodings\nneed to be declared to @LaTeX{} via a line like\n@example\n\\usepackage[utf8]@{inputenc@}\n@end example\n@noindent\n(It is also possible to use the more recent @samp{inputenx} @LaTeX{}\npackage.) For files where this line is not needed (e.g. chapters\nincluded within the body of a larger document, or non-Sweave\nvignettes), the encoding may be declared using a comment like\n@example\n%\\VignetteEncoding@{UTF-8@}\n@end example\n@noindent\nIf the encoding is UTF-8, this can also be declared using\nthe declaration\n@example\n%\\SweaveUTF8\n@end example\n@noindent\nIf no declaration is given in the vignette, it will be assumed to be\nin the encoding declared for the package.  If there is no encoding\ndeclared in either place, then it is an error to use non-@acronym{ASCII}\ncharacters in the vignette.\n\nIn any case, be aware that @LaTeX{} may require the @samp{usepackage}\ndeclaration.\n\n@code{Sweave()} will also parse and evaluate the @R{} code in each\nchunk.  The @R{} output will also be in the current locale (or @acronym{UTF-8}\nif so declared), and should\nbe covered by the @samp{inputenc} declaration.  One thing people often\nforget is that the @R{} output may not be @acronym{ASCII} even for\n@acronym{ASCII} @R{} sources, for many possible reasons.  One common one\nis the use of `fancy' quotes: see the @R{} help on @code{sQuote}: note\ncarefully that it is not portable to declare UTF-8 or CP1252 to cover\nsuch quotes, as their encoding will depend on the locale used to run\n@code{Sweave()}:  this can be circumvented by setting\n@code{options(useFancyQuotes=\"UTF-8\")} in the vignette.\n\nThe final issue is the encoding of figures -- this applies only to PDF\nfigures and not PNG etc.  The PDF figures will contain declarations for\ntheir encoding, but the Sweave option @code{pdf.encoding} may need to be\nset appropriately: see the help for the @code{pdf()} graphics device.\n\nAs a real example of the complexities, consider the @CRANpkg{fortunes}\npackage version @samp{1.4-0}.  That package did not have a declared\nencoding, and its vignette was in @acronym{ASCII}.  However, the data it\ndisplays are read from a UTF-8 CSV file and will be assumed to be in the\ncurrent encoding, so @file{fortunes.tex} will be in UTF-8 in any locale.\nHad @code{read.table} been told the data were UTF-8, @file{fortunes.tex}\nwould have been in the locale's encoding.\n\n@node Non-Sweave vignettes,  , Encodings and vignettes, Writing package vignettes\n@subsection Non-Sweave vignettes\n\nVignettes in formats other than Sweave are supported @emph{via}\n``vignette engines''.  For example @CRANpkg{knitr} version 1.1 or later\ncan create @file{.tex} files from a variation on Sweave format, and\n@file{.html} files from a variation on ``markdown'' format. These\nengines replace the @code{Sweave()} function with other functions to\nconvert vignette source files into @LaTeX{} files for processing into\n@file{.pdf}, or directly into @file{.pdf} or @file{.html} files. The\n@code{Stangle()} function is replaced with a function that extracts the\n@R{} source from a vignette.\n\n@R{} recognizes non-Sweave vignettes using filename extensions specified\nby the engine.  For example, the @CRANpkg{knitr} package supports\nthe extension @file{.Rmd} (standing for\n``R markdown'').  The user indicates the vignette engine\nwithin the vignette source using a @code{\\VignetteEngine} line, for example\n@example\n%\\VignetteEngine@{knitr::knitr@}\n@end example\n@noindent\nThis specifies the name of a package and an engine to use in place of\nSweave in processing the vignette.  As @code{Sweave} is the only engine\nsupplied with the @R{} distribution, the package providing any other\nengine must be specified in the @samp{VignetteBuilder} field of the\npackage @file{DESCRIPTION} file, and also specified in the\n@samp{Suggests}, @samp{Imports} or @samp{Depends} field (since its\nnamespace must be available to build or check your package).  If more\nthan one package is specified as a builder, they will be searched in the\norder given there.  The @pkg{utils} package is always implicitly\nappended to the list of builder packages, but may be included earlier\nto change the search order.\n\nNote that a package with non-Sweave vignettes should always have a\n@samp{VignetteBuilder} field in the @file{DESCRIPTION} file, since this\nis how @command{R CMD check} recognizes that there are vignettes to be\nchecked: packages listed there are required when the package is checked.\n\nThe vignette engine can produce @file{.tex}, @file{.pdf}, or @file{.html}\nfiles as output.  If it produces @file{.tex} files, @R{} will\ncall @code{texi2pdf} to convert them to @file{.pdf} for display\nto the user (unless there is a @file{Makefile} in the @file{vignettes}\ndirectory).\n\nPackage writers who would like to supply vignette engines need\nto register those engines in the package @code{.onLoad} function.\nFor example, that function could make the call\n@example\ntools::vignetteEngine(\"knitr\", weave = vweave, tangle = vtangle,\n                      pattern = \"[.]Rmd$\", package = \"knitr\")\n@end example\n@noindent\n(The actual registration in @CRANpkg{knitr} is more complicated, because\nit supports other input formats.)  See the @code{?tools::vignetteEngine}\nhelp topic for details on engine registration.\n\n\n@node Package namespaces, Writing portable packages, Writing package vignettes, Creating R packages\n@section Package namespaces\n@cindex namespaces\n\n@R{} has a namespace management system for code in packages.  This\nsystem allows the package writer to specify which variables in the\npackage should be @emph{exported} to make them available to package\nusers, and which variables should be @emph{imported} from other\npackages.\n\nThe namespace for a package is specified by the\n@file{NAMESPACE} file in the top level package directory.  This file\ncontains @emph{namespace directives} describing the imports and exports\nof the namespace.  Additional directives register any shared objects to\nbe loaded and any S3-style methods that are provided.  Note that\nalthough the file looks like @R{} code (and often has @R{}-style\ncomments) it is not processed as @R{} code.  Only very simple\nconditional processing of @code{if} statements is implemented.\n\nPackages are loaded and attached to the search path by calling\n@code{library} or @code{require}.  Only the exported variables are\nplaced in the attached frame.  Loading a package that imports variables\nfrom other packages will cause these other packages to be loaded as well\n(unless they have already been loaded), but they will @emph{not} be\nplaced on the search path by these implicit loads.  Thus code in the\npackage can only depend on objects in its own namespace and its imports\n(including the @pkg{base} namespace) being visible@footnote{Note that\nlazy-loaded datasets are @emph{not} in the package's namespace so need\nto be accessed @emph{via} @code{::}, e.g.@:\n@code{survival::survexp.us}.}.\n\nNamespaces are @emph{sealed} once they are loaded.  Sealing means that\nimports and exports cannot be changed and that internal variable\nbindings cannot be changed.  Sealing allows a simpler implementation\nstrategy for the namespace mechanism.  Sealing also allows code\nanalysis and compilation tools to accurately identify the definition\ncorresponding to a global variable reference in a function body.\n\nThe namespace controls the search strategy for variables used by\nfunctions in the package.  If not found locally, @R{} searches the\npackage namespace first, then the imports, then the base namespace and\nthen the normal search path.\n\n\n@menu\n* Specifying imports and exports::  \n* Registering S3 methods::      \n* Load hooks::                  \n* useDynLib::                   \n* An example::                  \n* Namespaces with S4 classes and methods::  \n@end menu\n\n\n@node Specifying imports and exports, Registering S3 methods, Package namespaces, Package namespaces\n@subsection Specifying imports and exports\n\nExports are specified using the @code{export} directive in the\n@file{NAMESPACE} file.  A directive of the form\n\n@findex export\n@example\nexport(f, g)\n@end example\n\n@noindent\nspecifies that the variables @code{f} and @code{g} are to be exported.\n(Note that variable names may be quoted, and reserved words and\nnon-standard names such as @code{[<-.fractions} must be.)\n\nFor packages with many variables to export it may be more convenient to\nspecify the names to export with a regular expression using\n@code{exportPattern}.  The directive\n\n@findex exportPattern\n@example\nexportPattern(\"^[^\\\\.]\")\n@end example\n\n@noindent\nexports all variables that do not start with a period.  However, such\nbroad patterns are not recommended for production code: it is better to\nlist all exports or use narrowly-defined groups.  (This pattern applies\nto S4 classes.)  Beware of patterns which include names starting with a\nperiod: some of these are internal-only variables and should never be\nexported, e.g.@: @samp{.__S3MethodsTable__.} (and the code nowadays\nexcludes known cases).\n\nPackages implicitly import the base namespace.\nVariables exported from other packages with namespaces need to be\nimported explicitly using the directives @code{import} and\n@code{importFrom}.  The @code{import} directive imports all exported\nvariables from the specified package(s).  Thus the directives\n\n@findex import\n@example\nimport(foo, bar)\n@end example\n\n@noindent\nspecifies that all exported variables in the packages @pkg{foo} and\n@pkg{bar} are to be imported.  If only some of the exported variables\nfrom a package are needed, then they can be imported using\n@code{importFrom}.  The directive\n\n@findex importFrom\n@example\nimportFrom(foo, f, g)\n@end example\n\n@noindent\nspecifies that the exported variables @code{f} and @code{g} of the\npackage @pkg{foo} are to be imported.  Using @code{importFrom}\nselectively rather than @code{import} is good practice and recommended\nnotably when importing from packages with more than a dozen exports.\n\nTo import every symbol from a package but for a few exceptions,\npass the @code{except} argument to @code{import}. The directive\n\n@example\nimport(foo, except=c(bar, baz))\n@end example\n\n@noindent\nimports every symbol from @pkg{foo} except @code{bar} and\n@code{baz}. The value of @code{except} should evaluate to something\ncoercible to a character vector, after substituting each symbol for\nits corresponding string.\n\nIt is possible to export variables from a namespace which it has\nimported from other namespaces: this has to be done explicitly and not\n@emph{via} @code{exportPattern}.\n\nIf a package only needs a few objects from another package it can use a\nfully qualified variable reference in the code instead of a formal\nimport.  A fully qualified reference to the function @code{f} in package\n@pkg{foo} is of the form @code{foo::f}.  This is slightly less efficient\nthan a formal import and also loses the advantage of recording all\ndependencies in the @file{NAMESPACE} file (but they still need to be\nrecorded in the @file{DESCRIPTION} file).  Evaluating @code{foo::f} will\ncause package @pkg{foo} to be loaded, but not attached, if it was not\nloaded already---this can be an advantage in delaying the loading of a\nrarely used package.\n\nUsing @code{foo:::f} instead of @code{foo::f} allows access to\nunexported objects.  This is generally not recommended, as the\nsemantics of unexported objects may be changed by the package author\nin routine maintenance.\n\n@node Registering S3 methods, Load hooks, Specifying imports and exports, Package namespaces\n@subsection Registering S3 methods\n\nThe standard method for S3-style @code{UseMethod} dispatching might fail\nto locate methods defined in a package that is imported but not attached\nto the search path.  To ensure that these methods are available the\npackages defining the methods should ensure that the generics are\nimported and register the methods using @code{S3method} directives.  If\na package defines a function @code{print.foo} intended to be used as a\n@code{print} method for class @code{foo}, then the directive\n\n@findex S3method\n@example\nS3method(print, foo)\n@end example\n\n@noindent\nensures that the method is registered and available for @code{UseMethod}\ndispatch, and the function @code{print.foo} does not need to be exported.\nSince the generic @code{print} is defined in @pkg{base} it does not need\nto be imported explicitly.\n\n(Note that function and class names may be quoted, and reserved words\nand non-standard names such as @code{[<-} and @code{function} must\nbe.)\n\nIt is possible to specify a third argument to S3method, the function to\nbe used as the method, for example\n\n@example\nS3method(print, check_so_symbols, .print.via.format)\n@end example\n\n@noindent\nwhen @code{print.check_so_symbols} is not needed.\n\n@node Load hooks, useDynLib, Registering S3 methods, Package namespaces\n@subsection Load hooks\n\n@findex .onLoad\n@findex .onAttach\nThere are a number of hooks called as packages are loaded, attached,\ndetached, and unloaded.  See @code{help(\".onLoad\")} for more details.\n\nSince loading and attaching are distinct operations, separate hooks are\nprovided for each.  These hook functions are called @code{.onLoad} and\n@code{.onAttach}.  They both take arguments@footnote{they will be called\nwith two unnamed arguments, in that order.} @code{libname} and\n@code{pkgname}; they should be defined in the namespace but not\nexported.\n\n@findex .onUnload\n@findex .onDetach\n@findex .Last.lib\nPackages can use a @code{.onDetach} or @code{.Last.lib} function\n(provided the latter is exported from the namespace) when @code{detach}\nis called on the package.  It is called with a single argument, the full\npath to the installed package.  There is also a hook @code{.onUnload}\nwhich is called when the namespace is unloaded (@emph{via} a call to\n@code{unloadNamespace}, perhaps called by @code{detach(unload = TRUE)})\nwith argument the full path to the installed package's directory.\n@code{.onUnload} and @code{.onDetach} should be defined in the namespace\nand not exported, but @code{.Last.lib} does need to be exported.\n\nPackages are not likely to need @code{.onAttach} (except perhaps for a\nstart-up banner); code to set options and load shared objects should be\nplaced in a @code{.onLoad} function, or use made of the @code{useDynLib}\ndirective described next.\n\nUser-level hooks are also available: see the help on function\n@code{setHook}.\n\nThese hooks are often used incorrectly.  People forget to export\n@code{.Last.lib}.   Compiled code should be loaded in @code{.onLoad} (or\n@emph{via} a @code{useDynLb} directive: see below) and unloaded in\n@code{.onUnload}.  Do remember that a package's namespace can be loaded\nwithout the namespace being attached (e.g. by @code{pkgname::fun}) and\nthat a package can be detached and re-attached whilst its namespace\nremains loaded.\n\n@node useDynLib, An example, Load hooks, Package namespaces\n@subsection useDynLib\n\nA @file{NAMESPACE} file can contain one or more @code{useDynLib}\ndirectives which allows shared objects that need to be\nloaded.@footnote{NB: this will only be read in all versions of @R{} if\nthe package contains @R{} code in a @file{R} directory.}  The directive\n\n@findex useDynLib\n@example\nuseDynLib(foo)\n@end example\n\n@noindent\nregisters the shared object @code{foo}@footnote{Note that this is the\nbasename of the shared object, and the appropriate extension (@file{.so}\nor @file{.dll}) will be added.} for loading with @code{library.dynam}.\nLoading of registered object(s) occurs after the package code has been\nloaded and before running the load hook function.  Packages that would\nonly need a load hook function to load a shared object can use the\n@code{useDynLib} directive instead.\n\nThe @code{useDynLib} directive also accepts the names of the native\nroutines that are to be used in @R{} @emph{via} the @code{.C}, @code{.Call},\n@code{.Fortran} and @code{.External} interface functions.  These are given as\nadditional arguments to the directive, for example,\n\n@example\nuseDynLib(foo, myRoutine, myOtherRoutine)\n@end example\n\nBy specifying these names in the @code{useDynLib} directive, the native\nsymbols are resolved when the package is loaded and @R{} variables\nidentifying these symbols are added to the package's namespace with\nthese names.  These can be used in the @code{.C}, @code{.Call},\n@code{.Fortran} and @code{.External} calls in place of the name of the\nroutine and the @code{PACKAGE} argument.  For instance, we can call the\nroutine @code{myRoutine} from @R{} with the code\n\n@example\n .Call(myRoutine, x, y)\n@end example\n\n@noindent\nrather than\n\n@example\n .Call(\"myRoutine\", x, y, PACKAGE = \"foo\")\n@end example\n\nThere are at least two benefits to this approach.  Firstly, the symbol\nlookup is done just once for each symbol rather than each time the\nroutine is invoked.  Secondly, this removes any ambiguity in resolving\nsymbols that might be present in several compiled DLLs.  However, this\napproach is nowadays deprecated in favour of supplying registration\ninformation (see below).\n\nIn some circumstances, there will already be an @R{} variable in the\npackage with the same name as a native symbol. For example, we may have\nan @R{} function in the package named @code{myRoutine}.  In this case,\nit is necessary to map the native symbol to a different @R{} variable\nname. This can be done in the @code{useDynLib} directive by using named\narguments. For instance, to map the native symbol name @code{myRoutine}\nto the @R{} variable @code{myRoutine_sym}, we would use\n\n@example\nuseDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)\n@end example\n\nWe could then call that routine from @R{} using the command\n\n@example\n .Call(myRoutine_sym, x, y)\n@end example\n\nSymbols without explicit names are assigned to the @R{} variable with\nthat name.\n\nIn some cases, it may be preferable not to create @R{} variables in the\npackage's namespace that identify the native routines.  It may be too\ncostly to compute these for many routines when the package is loaded\nif many of these routines are not likely to be used.  In this case,\none can still perform the symbol resolution correctly using the DLL,\nbut do this each time the routine is called.  Given a reference to the\nDLL as an @R{} variable, say @code{dll}, we can call the routine\n@code{myRoutine} using the expression\n\n@example\n .Call(dll$myRoutine, x, y)\n@end example\n\nThe @code{$} operator resolves the routine with the given name in the\nDLL using a call to @code{getNativeSymbol}.  This is the same\ncomputation as above where we resolve the symbol when the package is\nloaded. The only difference is that this is done each time in the case\nof @code{dll$myRoutine}.\n\nIn order to use this dynamic approach (e.g., @code{dll$myRoutine}), one\nneeds the reference to the DLL as an @R{} variable in the package.  The\nDLL can be assigned to a variable by using the @code{variable =\ndllName} format used above for mapping symbols to @R{} variables.  For\nexample, if we wanted to assign the DLL reference for the DLL\n@code{foo} in the example above to the variable @code{myDLL}, we would\nuse the following directive in the @file{NAMESPACE} file:\n\n@example\nmyDLL = useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)\n@end example\n\nThen, the @R{} variable @code{myDLL} is in the package's namespace and\navailable for calls such as @code{myDLL$dynRoutine} to access routines\nthat are not explicitly resolved at load time.\n\nIf the package has registration information (see @ref{Registering native\nroutines}), then we can use that directly rather than specifying the\nlist of symbols again in the @code{useDynLib} directive in the\n@file{NAMESPACE} file.  Each routine in the registration information is\nspecified by giving a name by which the routine is to be specified along\nwith the address of the routine and any information about the number and\ntype of the parameters.  Using the @code{.registration} argument of\n@code{useDynLib}, we can instruct the namespace mechanism to create\n@R{} variables for these symbols.  For example, suppose we have the\nfollowing registration information for a DLL named @code{myDLL}:\n\n@example\nstatic R_NativePrimitiveArgType foo_t[] = @{\n    REALSXP, INTSXP, STRSXP, LGLSXP\n@};\n\nstatic const R_CMethodDef cMethods[] = @{\n   @{\"foo\", (DL_FUNC) &foo, 4, foo_t@},\n   @{\"bar_sym\", (DL_FUNC) &bar, 0@},\n   @{NULL, NULL, 0, NULL@}\n@};\n\nstatic const R_CallMethodDef callMethods[] = @{\n   @{\"R_call_sym\", (DL_FUNC) &R_call, 4@},\n   @{\"R_version_sym\", (DL_FUNC) &R_version, 0@},\n   @{NULL, NULL, 0@}\n@};\n@end example\n\nThen, the directive in the @file{NAMESPACE} file\n\n@example\nuseDynLib(myDLL, .registration = TRUE)\n@end example\n\n@noindent\ncauses the DLL to be loaded and also for the @R{} variables @code{foo},\n@code{bar_sym}, @code{R_call_sym} and @code{R_version_sym} to be\ndefined in the package's namespace.\n\nNote that the names for the @R{} variables are taken from the entry in\nthe registration information and do not need to be the same as the name\nof the native routine.  This allows the creator of the registration\ninformation to map the native symbols to non-conflicting variable names\nin @R{}, e.g.@: @code{R_version} to @code{R_version_sym} for use in an\n@R{} function such as\n\n@example\nR_version <- function()\n@{\n  .Call(R_version_sym)\n@}\n@end example\n\nUsing argument @code{.fixes} allows an automatic prefix to be added to\nthe registered symbols, which can be useful when working with an\nexisting package.  For example, package @CRANpkg{KernSmooth} has\n\n@example\nuseDynLib(KernSmooth, .registration = TRUE, .fixes = \"F_\")\n@end example\n\n@noindent\nwhich makes the @R{} variables corresponding to the FORTRAN symbols\n@code{F_bkde} and so on, and so avoid clashes with @R{} code in the\nnamespace.\n\n@strong{NB}: Using these arguments for a package which does not register\nnative symbols merely slows down the package loading (although at the\ntime of writing 90 @acronym{CRAN} packages did so).  Once symbols are\nregistered, check that the corresponding @R{} variables are not\naccidentally exported by a pattern in the @file{NAMESPACE} file.\n\n\n@node An example, Namespaces with S4 classes and methods, useDynLib, Package namespaces\n@subsection An example\n\nAs an example consider two packages named @pkg{foo} and @pkg{bar}.  The\n@R{} code for package @pkg{foo} in file @file{foo.R} is\n\n@quotation\n@cartouche\n@example\nx <- 1\nf <- function(y) c(x,y)\nfoo <- function(x) .Call(\"foo\", x, PACKAGE=\"foo\")\nprint.foo <- function(x, ...) cat(\"<a foo>\\n\")\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nSome C code defines a C function compiled into DLL @code{foo} (with an\nappropriate extension).  The @file{NAMESPACE} file for this package is\n\n@quotation\n@cartouche\n@example\nuseDynLib(foo)\nexport(f, foo)\nS3method(print, foo)\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nThe second package @pkg{bar} has code file @file{bar.R}\n\n@quotation\n@cartouche\n@example\nc <- function(...) sum(...)\ng <- function(y) f(c(y, 7))\nh <- function(y) y+9\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nand @file{NAMESPACE} file\n\n@quotation\n@cartouche\n@example\nimport(foo)\nexport(g, h)\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nCalling @code{library(bar)} loads @pkg{bar} and attaches its exports to\nthe search path.  Package @pkg{foo} is also loaded but not attached to\nthe search path.  A call to @code{g} produces\n\n@example\n> g(6)\n[1]  1 13\n@end example\n\n@noindent\nThis is consistent with the definitions of @code{c} in the two settings:\nin @pkg{bar} the function @code{c} is defined to be equivalent to\n@code{sum}, but in @pkg{foo} the variable @code{c} refers to the\nstandard function @code{c} in @pkg{base}.\n\n@node Namespaces with S4 classes and methods,  , An example, Package namespaces\n@subsection Namespaces with S4 classes and methods\n\nSome additional steps are needed for packages which make use of formal\n(S4-style) classes and methods (unless these are purely used\ninternally).  The package should have @code{Depends: methods} in its\n@file{DESCRIPTION} file@footnote{This was necessary at least prior to\n@R{} 3.0.2 as the @pkg{methods} package looked for its own @R{} code on\nthe search path.} and @code{import(methods)} or\n@code{importFrom(methods, ...)} plus any classes and methods which are\nto be exported need to be declared in the @file{NAMESPACE} file.  For\nexample, the @pkg{stats4} package has\n\n@findex exportClasses\n@findex exportMethods\n\n@example\nexport(mle) # exporting methods implicitly exports the generic\nimportFrom(\"graphics\", plot)\nimportFrom(\"stats\", optim, qchisq)\n## For these, we define methods or (AIC, BIC, nobs) an implicit generic:\nimportFrom(\"stats\", AIC, BIC, coef, confint, logLik, nobs, profile,\n           update, vcov)\nexportClasses(mle, profile.mle, summary.mle)\n## All methods for imported generics:\nexportMethods(coef, confint, logLik, plot, profile, summary,\n              show, update, vcov)\n## implicit generics which do not have any methods here\nexport(AIC, BIC, nobs)\n@end example\n\n@findex exportPattern\n@findex exportClassPattern\n@noindent\nAll S4 classes to be used outside the package need to be listed in an\n@code{exportClasses} directive. Alternatively, they can be specified\nusing @code{exportClassPattern}@footnote{This defaults to the same\npattern as @code{exportPattern}: use something like\n@code{exportClassPattern(\"^$\")} to override this.} in the same style as\nfor @code{exportPattern}.  To export methods for generics from other\npackages an @code{exportMethods} directive can be used.\n\nNote that exporting methods on a generic in the namespace will also\nexport the generic, and exporting a generic in the namespace will also\nexport its methods.  If the generic function is not local to this\npackage, either because it was imported as a generic function or because\nthe non-generic version has been made generic solely to add S4 methods\nto it (as for functions such as @code{plot} in the example above), it\ncan be declared @emph{via} either or both of @code{export} or\n@code{exportMethods}, but the latter is clearer (and is used in the\n@pkg{stats4} example above).  In particular, for primitive functions\nthere is no generic function, so @code{export} would export the\nprimitive, which makes no sense.  On the other hand, if the generic is\nlocal to this package, it is more natural to export the function itself\nusing @code{export()}, and this @emph{must} be done if an implicit\ngeneric is created without setting any methods for it (as is the case\nfor @code{AIC} in @pkg{stats4}).\n\nA non-local generic function is only exported to ensure that calls to\nthe function will dispatch the methods from this package (and that is\nnot done or required when the methods are for primitive functions).  For\nthis reason, you do not need to document such implicitly created generic\nfunctions, and @code{undoc} in package @pkg{tools} will not report them.\n\nIf a package uses S4 classes and methods exported from another package,\nbut does not import the entire namespace of the other\npackage@footnote{if it does, there will be opaque warnings about\nreplacing imports if the classes/methods are also imported.}, it needs\nto import the classes and methods explicitly, with directives\n\n@findex importClassesFrom\n@findex importMethodsFrom\n\n@example\nimportClassesFrom(package, ...)\nimportMethodsFrom(package, ...)\n@end example\n\n@noindent\nlisting the classes and functions with methods respectively.  Suppose we\nhad two small packages @pkg{A} and @pkg{B} with @pkg{B} using @pkg{A}.\nThen they could have @code{NAMESPACE} files\n\n@quotation\n@cartouche\n@example\nexport(f1, ng1)\nexportMethods(\"[\")\nexportClasses(c1)\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nand\n\n@quotation\n@cartouche\n@example\nimportFrom(A, ng1)\nimportClassesFrom(A, c1)\nimportMethodsFrom(A, f1)\nexport(f4, f5)\nexportMethods(f6, \"[\")\nexportClasses(c1, c2)\n@end example\n@end cartouche\n@end quotation\n\n@noindent\nrespectively.\n\nNote that @code{importMethodsFrom} will also import any generics defined\nin the namespace on those methods.\n\nIt is important if you export S4 methods that the corresponding generics\nare available.  You may for example need to import @code{plot} from\n@pkg{graphics} to make visible a function to be converted into its\nimplicit generic.  But it is better practice to make use of the generics\nexported by @pkg{stats4} as this enables multiple packages to\nunambiguously set methods on those generics.\n\n@node Writing portable packages, Diagnostic messages, Package namespaces, Creating R packages\n@section Writing portable packages\n\nThis section contains advice on writing packages to be used on multiple\nplatforms or for distribution (for example to be submitted to a package\nrepository such as @acronym{CRAN}).\n\n@menu\n* PDF size::                    \n* Check timing::                \n* Encoding issues::             \n* Portable C and C++ code::     \n* Binary distribution::         \n@end menu\n\nPortable packages should have simple file names: use only alphanumeric\n@acronym{ASCII} characters and period (@code{.}), and avoid those names\nnot allowed under Windows which are mentioned above.\n\nMany of the graphics devices are platform-specific: even @code{X11()}\n(aka @code{x11()}) which although emulated on Windows may not be\navailable on a Unix-alike (and is not the preferred screen device on OS\nX).  It is rarely necessary for package code or examples to open a new\ndevice, but if essential,@footnote{People use @code{dev.new()} to open a\ndevice at a particular size: that is not portable but using\n@code{dev.new(noRStudioGD = TRUE)} helps.} use @code{dev.new()}.\n\nUse @command{R CMD build} to make the release @file{.tar.gz} file.\n\n@command{R CMD check} provides a basic set of checks, but often further\nproblems emerge when people try to install and use packages submitted to\n@acronym{CRAN} -- many of these involve compiled code.  Here are some\nfurther checks that you can do to make your package more portable.\n\n@itemize\n\n@item\nIf your package has a @file{configure} script, provide a\n@file{configure.win} script to be used on Windows (an empty file if no\nactions are needed).\n\n@item\nIf your package has a @file{Makevars} or @file{Makefile} file, make sure\nthat you use only portable make features.  Such files should be\nLF-terminated@footnote{Solaris @command{make} does not accept\nCRLF-terminated Makefiles; Solaris warns about and some other\n@command{make}s ignore incomplete final lines.} (including the final\nline of the file) and not make use of GNU extensions.  (The POSIX\nspecification is available at\n@uref{http://pubs.opengroup.org/@/onlinepubs/@/9699919799/@/utilities/@/make.html};\nanything not documented there should be regarded as an extension to be\navoided.  Further advice can be found at\n@uref{https://www.gnu.org/@/software/@/autoconf/@/manual/@/autoconf.html#Portable-Make}.                                )\nCommonly misused GNU extensions are conditional inclusions (@code{ifeq}\nand the like), @code{$@{shell ...@}}, @code{$@{wildcard ...@}} and\nsimilar, and the use of @code{+=}@footnote{This was apparently\nintroduced in SunOS 4, and is available elsewhere @emph{provided} it is\nsurrounded by spaces.} and @code{:=}.  Also, the use of @code{$<} other\nthan in implicit rules is a GNU extension, as is the @code{$^} macro.\nUnfortunately makefiles which use GNU extensions often run on other\nplatforms but do not have the intended results.\n\nThe use of @code{$@{shell ...@}} can be avoided by using backticks, e.g.@:\n\n@example\nPKG_CPPFLAGS = `gsl-config --cflags`\n@end example\n\n@noindent\nwhich works in all versions of @command{make} known@footnote{GNU make,\nBSD make formerly in FreeBSD and macOS, AT&T make as implemented on\nSolaris, @command{pmake} in FreeBSD, `Distributed Make' (@code{dmake}),\npart of Oracle Studio and available in other versions.} to be used with\n@R{}.\n\nIf you really must require GNU make, declare it in the @file{DESCRIPTION}\nfile by\n\n@example\nSystemRequirements: GNU make\n@end example\n\n@noindent\nand ensure that you use the value of environment variable @env{MAKE}\n(and not just @command{make}) in your scripts.  (On some platforms GNU\nmake is available under a name such as @command{gmake}, and there\n@code{SystemRequirements} is used to set @env{MAKE}.)\n\nIf you only need GNU make for parts of the package which are rarely\nneeded (for example to create bibliography files under\n@file{vignettes}), use a file called @file{GNUmakefile} rather than\n@file{Makefile} as GNU make (only) will use the former.\n\nSince the only viable make for Windows is GNU make, it is permissible to\nuse GNU extensions in files @file{Makevars.win} or @file{Makefile.win}.\n\n@item\nBash extensions also need to be avoided in shell scripts, including\nexpressions in Makefiles (which are passed to the shell for processing).\nSome @R{} platforms use strict@footnote{For example, @command{test}\noptions @option{-a} and @option{-e} are not portable, and not supported\nin the AT&T Bourne shell used on Solaris 10/11, even though they are in\nthe 2008 POSIX standard.  Nor does Solaris support @samp{$(@var{cmd})}.}\nBourne shells: the @R{} toolset on Windows and some Unix-alike OSes use\n@command{ash} (@uref{https://en.wikipedia.org/@/wiki/@/Almquist_shell}),\na rather minimal shell with few builtins.  Beware of assuming that all\nthe POSIX command-line utilities are available, especially on Windows\nwhere only a minimal set is provided for use with @R{}.\n@ifset UseExternalXrefs\n(@xref{The command line tools, , The command line tools,\nR-admin, R Installation and Administration}.)\n@end ifset\nOne particular issue is the use of @command{echo}, for which two\nbehaviours are allowed\n(@uref{http://pubs.opengroup.org/@/onlinepubs/@/9699919799/@/utilities/@/echo.html})\nand both occur as defaults on @R{} platforms: portable applications\nshould not use @option{-n} (as the first argument) nor escape\nsequences. Another common issue is the construction\n@example\nexport FOO=value\n@end example\n@noindent\nwhich is bash-specific (first set the variable then export it by name).\n\n@item\nMake use of the abilities of your compilers to check the\nstandards-conformance of your code.  For example, @command{gcc} and\n@command{gfortran}@footnote{@uref{http://fortranwiki.org/@/fortran/@/show/Modernizing+Old+Fortran}\nmay help explain some of the warnings from @command{gfortran -Wall\n-pedantic}.}  can be used with options @option{-Wall -pedantic} to alert\nyou to potential problems.  This is particularly important for C++,\nwhere @code{g++ -Wall -pedantic} will alert you to the use of some of\nthe GNU extensions which fail to compile on most other C++ compilers. If\n@R{} was not configured accordingly, one can achieve this @emph{via}\npersonal @file{Makevars} files.\n@ifset UseExternalXrefs\n@xref{Customizing package compilation, , Customizing package compilation,\nR-admin, R Installation and Administration},\n@end ifset\n\nPortable C++ code needs to follow the 1998 standard (and not use\nfeatures from C99), or to specify a C++11 compiler (see @ref{Using C++11\ncode}) where available (which is not the case on all @R{} platforms).\n\nIf you use FORTRAN 77, @code{ftnchek}\n(@uref{http://www.dsm.fordham.edu/@/~ftnchek/}) provides thorough testing\nof conformance to the standard.\n\nIf using Fortran 9x with the GNU compiler, use the flags\n@option{-std=f95 -Wall -pedantic} which reject most GNU extensions and\nfeatures from later standards.\n\n@R{} has tested that @code{DOUBLE COMPLEX} works (although an extension\nto the Fortran standards) and so is preferred to @code{COMPLEX*16}.\n(Fortran 9x code can use something like\n@code{COMPLEX(KIND=KIND(0.0D0))}@footnote{See\n@uref{http://people.ds.cam.ac.uk/nmm1/fortran/paper_07.pdf}.}.)\n\n\nNot all common @R{} platforms conform to the expected standards, e.g.@:\nC99 for C code.  One common area of problems is the @code{*printf}\nfunctions where Windows does not support @code{%lld}, @code{%Lf} and\nsimilar formats (and has its own formats such as @code{%I64d} for 64-bit\nintegers).  It is very rare to need to output such types, and 64-bit\nintegers can usually be converted to doubles for output.  However, the\nC11 standard (section 7.8.1) includes @code{PRIxNN}\nmacros@footnote{These are optional because the corresponding types are,\nbut must be provided if the types are.} in C header @file{inttypes.h}\n(for example @code{PRId64}) so the portable approach is to test for\nthese and if not available provide emulations in the package.\n\n@item\n@command{R CMD check} performs some checks for non-portable\ncompiler/linker flags in @file{src/Makevars}.  However, it cannot check\nthe meaning of such flags, and some are commonly accepted but with\ncompiler-specific meanings.  There are other non-portable flags which\nare not checked, nor are @file{src/Makefile} files and makefiles in\nsub-directories.  As a comment in the code says\n\n@quotation\nIt is hard to think of anything apart from @option{-I*} and @option{-D*}\nthat is safe for general use @dots{}\n@end quotation\n\n@noindent\nalthough @option{-pthread} is pretty close to portable.  (Option\n@option{-U} is portable but little use on the command line as it will\nonly cancel built-in defines (not portable) and those defined earlier on\nthe command line (@R{} does not use any).)\n\nPeople have used @command{configure} to customize @file{src/Makevars},\nincluding for specific compilers.  This is unsafe for several reasons.\nFirst, unintended compilers might meet the check---for example, several\ncompilers other than GCC identify themselves as `GCC' whilst being only\npartially conformant.  Second, future versions of compilers may behave\ndifferently (including updates to quite old series) so for example\n@option{-Werror} (and specializations) can make a package\nnon-installable under a future version.  Third, using flags to suppress\ndiagnostic messages can hide important information for debugging on a\nplatform not tested by the package maintainer.  (@command{R CMD check}\ncan optionally report on unsafe flags which were used.)\n\n@item\nDo be very careful with passing arguments between @R{}, C and\n@acronym{FORTRAN} code.  In particular, @code{long} in C will be 32-bit\non some @R{} platforms (including 64-bit Windows), but 64-bit on most\nmodern Unix and Linux platforms.  It is rather unlikely that the use of\n@code{long} in C code has been thought through: if you need a longer\ntype than @code{int} you should use a configure test for a C99/C++11\ntype such as @code{int_fast64_t} (and failing that, @code{long long}\n@footnote{but note that @code{long long} is not a standard C++98 type,\nand C++ compilers set up for strict checking will reject it.}) and\ntypedef your own type to be @code{long} or @code{long long}, or use\nanother suitable type (such as @code{size_t}).\n\nIt is not safe to assume that @code{long} and pointer types are the same\nsize, and they are not on 64-bit Windows.  If you need to convert\npointers to and from integers use the C99/C++11 integer types\n@code{intptr_t} and @code{uintptr_t} (which are defined in the header\n@code{<stdint.h>} and are not required to be implemented by the C99\nstandard but are used in C code by @R{} itself).\n\nNote that @code{integer} in @acronym{FORTRAN} corresponds to @code{int}\nin C on all @R{} platforms.\n\n@item\nUnder no circumstances should your compiled code ever call @code{abort}\nor @code{exit}@footnote{or where supported the variants @code{_Exit} and\n@code{_exit}.}: these terminate the user's @R{} process, quite possibly\nincluding all his unsaved work.  One usage that could call @code{abort}\nis the @code{assert} macro in C or C++ functions, which should never be\nactive in production code.  The normal way to ensure that is to define\nthe macro @code{NDEBUG}, and @command{R CMD INSTALL} does so as part of\nthe compilation flags.  If you wish to use @code{assert} during\ndevelopment. you can include @code{-UNDEBUG} in @code{PKG_CPPFLAGS}.\nNote that your own @file{src/Makefile} or makefiles in sub-directories\nmay also need to define @code{NDEBUG}.\n\nThis applies not only to your own code but to any external software you\ncompile in or link to.\n\n@item\nCompiled code should not write to @file{stdout} or @file{stderr} and C++\nand Fortran I/O should not be used.  As with the previous item such\ncalls may come from external software and may never be called, but\npackage authors are often mistaken about that.\n\n@item\nCompiled code should not call the system random number generators such\nas @code{rand}, @code{drand48} and @code{random}@footnote{This and\n@code{srandom} are in any case not portable.  They are in POSIX but not\nin the C99 standard, and not available on Windows.}, but rather use the\ninterfaces to @R{}'s RNGs described in @ref{Random numbers}.  In\nparticular, if more than one package initializes the system RNG (e.g.@:\n@emph{via} @code{srand}), they will interfere with each other.\n\nNor should the C++11 random number library be used, nor any other\nthird-party random number generators such as those in GSL.\n\n@item\nErrors in memory allocation and reading/writing outside arrays are very\ncommon causes of crashes (e.g., segfaults) on some machines.\nSee @ref{Checking memory access} for tools which can be used to look for this.\n\n@item\nMany platforms will allow unsatisfied entry points in compiled code, but\nwill crash the application (here @R{}) if they are ever used.  Some\n(notably Windows) will not.  Looking at the output of\n\n@example\nnm -pg mypkg.so\n@end example\n\n@noindent\nand checking if any of the symbols marked @code{U} is unexpected is a\ngood way to avoid this.\n\n@item\nLinkers have a lot of freedom in how to resolve entry points in\ndynamically-loaded code, so the results may differ by platform.  One\narea that has caused grief is packages including copies of standard\nsystem software such as @code{libz} (especially those already linked\ninto @R{}).  In the case in point, entry point @code{gzgets} was\nsometimes resolved against the old version compiled into the package,\nsometimes against the copy compiled into @R{} and sometimes against the\nsystem dynamic library.  The only safe solution is to rename the entry\npoints in the copy in the package.  We have even seen problems with\nentry point name @code{myprintf}, which is a system entry\npoint@footnote{in @file{libselinux}.} on some Linux systems.\n\n@item\nConflicts between symbols in DLLs are handled in very platform-specific\nways.  Good ways to avoid trouble are to make as many symbols as\npossible static (check with @code{nm -pg}), and to use names which are\nclearly tied to your package (which also helps users if anything does go\nwrong).  Note that symbol names starting with @code{R_} are regarded as\npart of @R{}'s namespace and should not be used in packages.\n\n@item\nIt is good practice for DLLs to register their symbols\n(@pxref{Registering native routines}), restrict visibility\n(@pxref{Controlling visibility}) and not allow symbol search\n(@pxref{Registering native routines}).  It should be possible for a DLL\nto have only one visible symbol, @code{R_init_@var{pkgname}}, on\nsuitable platforms@footnote{At least Linux and Windows, but not macOS.},\nwhich would completely avoid symbol conflicts.\n\n@item\nIt is not portable to call compiled code in @R{} or other packages\n@emph{via} @code{.Internal}, @code{.C}, @code{.Fortran}, @code{.Call} or\n@code{.External}, since such interfaces are subject to change without\nnotice and will probably result in your code terminating the @R{}\nprocess.\n\n@item\nDo not use (hard or symbolic) file links in your package sources.\nWhere possible @command{R CMD build} will replace them by copies.\n\n@item\nIf you do not yourself have a Windows system, consider submitting your\nsource package to WinBuilder (@uref{https://win-builder.r-project.org/})\nbefore distribution.\n\n@item\nIt is bad practice for package code to alter the search path using\n@code{library}, @code{require} or @code{attach} and this often does not\nwork as intended.  For alternatives, see @ref{Suggested packages} and\n@code{with}.\n\n@item\nExamples can be run interactively @emph{via} @code{example} as well as\nin batch mode when checking.  So they should behave appropriately in\nboth scenarios, conditioning by @code{interactive()} the parts which\nneed an operator or observer.  For instance, progress\nbars@footnote{except perhaps the simplest kind as used by\n@code{download.file()} in non-interactive use.} are only appropriate in\ninteractive use, as is displaying help pages or calling @code{View()}\n(see below).\n\n@item\nBe careful with the order of entries in macros such as @code{PKG_LIBS}.\nSome linkers will re-order the entries, and behaviour can differ between\ndynamic and static libraries.  Generally @option{-L} options should\nprecede@footnote{Whereas the GNU linker reorders so @option{-L} options\nare processed first, the Solaris one does not.} the libraries (typically\nspecified by @option{-l} options) to be found from those directories,\nand libraries are searched once in the order they are specified.  Not\nall linkers allow a space after @option{-L} .\n\n@item\nCare is needed with the use of @code{LinkingTo}.  This puts one or more\ndirectories on the include search path ahead of system headers but\n(prior to @R{} 3.4.0) after those specified in the @code{CPPFLAGS} macro\nof the @R{} build (which normally includes @code{-I/usr/local/include},\nbut most platforms ignore that and include it with the system headers).\n\nAny confusion would be avoided by having @code{LinkingTo} headers in a\ndirectory named after the package.  In any case, name conflicts of\nheaders and directories under package @file{include} directories should\nbe avoided, both between packages and between a package and system and\nthird-party software.\n\n@item\nThe @command{ar} utility is often used in makefiles to make static\nlibraries.  Its modifier @code{u} is defined by POSIX but is disabled in\nGNU @command{ar} on some recent Linux distributions which use\n`deterministic mode'.  The safest way to make a static library is to first\nremove any existing file of that name then use @command{ar -cr} and then\n@command{ranlib} if needed (which is system-dependent: on most\nsystems@footnote{some versions of macOS did not.} @command{ar} always\nmaintains a symbol table).  The POSIX standard says options should be\npreceded by a hyphen (as in @option{-cr}), although most OSes accept\nthem without.\n@c flowWorkspace failed on macOS in Mar 2016 because a wildcard spec was empty\nNote that on some systems @command{ar -cr} must have at least one file\nspecified.\n\n@item\nSome people have a need to set a locale.  Locale names are not portable,\nand e.g.@: @samp{fr_FR.utf8} is commonly used on Linux but not accepted on\neither Solaris or macOS.  @samp{fr_FR.UTF-8} is more portable, being\naccepted on recent Linux, AIX, FreeBSD, macOS and Solaris (at least).\nHowever, some Linux distributions micro-package, so locales defined by\n@pkg{glibc} (including these examples) may not be installed.\n\n@item\nAvoid spaces in file names, not least as they can cause difficulties for\nexternal tools.  A recent example was a package with a @CRANpkg{knitr}\nvignette that used spaces in plot names: this caused some versions of\n@command{pandoc} to fail with a baffling error message.\n@c msmtools in June 2016 failed with pandoc 1.12 but not 1.16.\n\nNon-ASCII filenames can also cause problems (particularly in non-UTF-8\nlocales).\n\n@item\nMake sure that any version requirement for Java code is both declared in\nthe @samp{SystemRequirements} field and tested at runtime (not least as\nthe Java installation when the package is installed might not be the\nsame as when the package is run and will not be for binary packages).\nJava 8 is available for fewer platforms than Java 7, and Java 9 for\nfewer still (at the time of writing, only @cputype{x86_64} Linux, macOS,\n64-bit Windows and 64-bit Sparc Solaris from Oracle).\n\nWhen specifying a minimum Java version please use the official version\nnames, which are (confusingly)\n@example\n1.1 1.2 1.3 1.4 5.0 6 7 8 9 10\n@end example\n@noindent\nand supposedly will in 2018 move to a year.month scheme such as @samp{18.9}.\n\nA suitable test for packages using @CRANpkg{rJava} would be something like\n@example\n.jinit()\njv <- .jcall(\"java/lang/System\", \"S\", \"getProperty\", \"java.runtime.version\")\nif(substr(jv, 1L, 2L) == \"1.\") @{\n  jvn <- as.numeric(paste0(strsplit(jv, \"[.]\")[[1L]][1:2], collapse = \".\"))\n  if(jvn < 1.8) stop(\"Java >= 8 is needed for this package but not available\")\n@}\n@end example\n@noindent\n(Java 9 changed the format of this string, and Java 10 gives @code{jv}\nas something like @samp{10+46}.)\n\nNote too that the compiler used to produce a @code{jar} can impose a minimum\nJava version, often resulting in an arcane message like\n\n@example\njava.lang.UnsupportedClassVersionError: ... Unsupported major.minor version 52.0\n@end example\n@noindent\n(Where @uref{https://en.wikipedia.org/@/wiki/@/Java_class_file} maps\nclass-file version numbers to Java versions.)  Compile with something\nlike @command{javac -target 1.6} to ensure this is avoided. (As from\nJava 8, @command{javac} defaults to compiling for Java 8.)  Note this\nalso applies to packages distributing compiled Java code (such as\n@pkg{jgraph}) produced by others, so their requirements need to be\nchecked (they are often not documented accurately) and accounted for.\nThe class-file version can in principle be checked @emph{via}\ncommand-line utility @command{javap}, if necessary after extracting the\n@file{.class} files from a @file{.jar} archive.\n\nSome packages have stated a requirement on a particular JDK, but a\npackage should only be requiring a JRE unless providing its own Java\ninterface.\n\n@item\nA package with a hard-to-satisfy system requirement is by definition not\nportable, annoyingly so if this is not declared in the\n@samp{SystemRequirements} field.  The most common example is the use of\n@command{pandoc}, which is only available for a very limited range of\nplatforms (and has onerous requirements to install from source) and has\ncapabilities@footnote{For example, the ability to handle @samp{https://}\nURLs, which even the build in some major Linux distributions in 2018 did\nnot possess.  Further, Linux and macOS builds from late 2017 with\n@samp{https://} support were unable to download from some sites using or\nredirecting to @samp{https://} URLs.} that vary by build but are not\ndocumented.\n\nUsage of external commands should always be conditional on a test for\nexistence (perhaps using @code{Sys.which}), as well as declared in the\n@samp{SystemRequirements} field.\n\nAn external command can be a (possibly optional) requirement for an\nimported or suggested package but needed for examples or tests in the\npackage itself.  Such usages should always be declared and conditional.\n\n@item\nBe sure to use portable encoding names: none of @code{utf8}, @code{mac}\nand @code{macroman} are.  See the help for @code{file} for more details.\n\n\n@item\nDo not invoke @R{} by plain @command{R}, @command{Rscript} or (on\nWindows) @command{Rterm} in your examples, tests, vignettes, makefiles\nor other scripts.  As pointed out in several places earlier in this\nmanual, use something like\n@example\n\"$(R_HOME)/bin/Rscript\"\n\"$(R_HOME)/bin$(R_ARCH_BIN)/Rterm\"\n@end example\nwith appropriate quotes (as, although not recommended, @env{R_HOME} can\ncontain spaces).\n\n@item\nDo not use @env{R_HOME} in makefiles except when passing them to the shell.\nSpecifically, do not use @env{R_HOME} in the argument to @code{include},\nas @env{R_HOME} can contain spaces. Quoting the argument to @code{include}\ndoes not help.  GNU @command{make}'s @code{include} accepts spaces when\nescaped using backslashes (GNU @command{make} syntax required):\n\n@example\n## WARNING: requires GNU make (allowed on Windows)\nsp =\nsp +=\nsq = $(subst $(sp),\\ ,$1)\ninclude $(call sq,$@{R_HOME@}/etc$@{R_ARCH@}/Makeconf)\n@end example\n \nA portable and the recommended way to avoid the problem of spaces in\n@code{$@{R_HOME@}} is using option @code{-f} of @command{make}.  This is\neasy to do with recursive invocation of @command{make}, which is also the\nonly usual situation when @env{R_HOME} is needed in the argument for\n@code{include}.\n\n@example\n$(MAKE) -f \"$@{R_HOME@}/etc$@{R_ARCH@}/Makeconf\" -f Makefile.inner\n@end example\n@end itemize\n\n\nDo be careful in what your tests (and examples) actually test.  Bad\npractice seen in distributed packages include:\n\n@itemize\n\n@item\nIt is not reasonable to test the time taken by a command: you cannot\nknow how fast or how heavily loaded an @R{} platform might be.  At best\nyou can test a ratio of times, and even that is fraught with\ndifficulties and not advisable: the just-in-time compiler (JIT) and the GC\nmay trigger at unpredictable times, following heuristics that may change\nwithout notice.\n\n@item\nDo not test the exact format of @R{} messages (from @R{} itself or from\nother packages): They change, and they can be translated.\n\nPackages have even tested the exact format of system error messages,\nwhich are platform-dependent and perhaps locale-dependent.\n\n@item\nIf you use functions such as @code{View}, remember that in testing there\nis no one to look at the output.  It is better to use something like one of\n@example\nif(interactive()) View(obj) else print(head(obj))\nif(interactive()) View(obj) else str(obj)\n@end example\n\n@item\nOnly test the accuracy of results if you have done a formal error\nanalysis.  Things such as checking that probabilities numerically sum to\none are silly: numerical tests should always have a tolerance.  That the\ntests on your platform achieve a particular tolerance says little about\nother platforms.  @R{} is configured by default to make use of long\ndoubles where available, but they may not be available or be too slow\nfor routine use.  Most @R{} platforms use @cputype{ix86} or\n@cputype{x86_64} CPUs: these may use extended precision registers on some\nbut not all of their FPU instructions.  Thus the achieved precision can\ndepend on the compiler version and optimization flags---our experience\nis that 32-bit builds tend to be less precise than 64-bit ones.  But not\nall platforms use those CPUs, and not all@footnote{Not doing so is the\ndefault on Windows, overridden for the @R{} executables.  It is also the\ndefault on some Solaris compilers.} which use them configure them to\nallow the use of extended precision.  In particular, ARM CPUs do not\n(currently) have extended precision nor long doubles, and long double\nwas 64-bit on HP/PA Linux.\n\nIf you must try to establish a tolerance empirically, configure and\nbuild @R{} with @option{--disable-long-double} and use appropriate\ncompiler flags (such as @option{-ffloat-store} and\n@option{-fexcess-precision=standard} for @command{gcc}, depending on the\nCPU type@footnote{These are not needed for the default compiler settings\non @cputype{x86_64} but are likely to be needed on @cputype{ix86}.}) to\nmitigate the effects of extended-precision calculations.\n\nTests which involve random inputs or non-deterministic algorithms should\nnormally set a seed or be tested for many seeds.\n\n@end itemize\n\n@node PDF size, Check timing, Writing portable packages, Writing portable packages\n@subsection PDF size\n\nThere are a several tools available to reduce the size of PDF files:\noften the size can be reduced substantially with no or minimal loss in\nquality. Not only do large files take up space: they can stress the PDF\nviewer and take many minutes to print (if they can be printed at all).\n\n@command{qpdf} (@uref{http://qpdf.sourceforge.net/}) can compress\nlosslessly.  It is fairly readily available (e.g.@: it has binaries for\nWindows and packages in Debian/Ubuntu/Fedora, and is installed as part\nof the @acronym{CRAN} macOS distribution of @R{}).  @command{R CMD build}\nhas an option to run @command{qpdf} over PDF files under @file{inst/doc}\nand replace them if at least 10Kb and 10% is saved.  The full path to\nthe @command{qpdf} command can be supplied as environment variable\n@env{R_QPDF} (and is on the @acronym{CRAN} binary of @R{} for macOS).  It seems\nMiKTeX does not use PDF object compression and so @command{qpdf} can\nreduce considerably the files it outputs: MiKTeX can be overridden by\ncode in the preamble of an Sweave or @LaTeX{} file --- see how this is\ndone for the @R{} reference manual at\n@uref{https://svn.r-project.org/@/R/@/trunk/@/doc/@/manual/@/refman.top}.\n\nOther tools can reduce the size of PDFs containing bitmap images at\nexcessively high resolution.  These are often best re-generated (for\nexample @code{Sweave} defaults to 300 ppi, and 100--150 is more\nappropriate for a package manual).  These tools include Adobe Acrobat\n(not Reader), Apple's Preview@footnote{Select `Save as', and select\n`Reduce file size' from the `Quartz filter' menu': this can be accessed\nin other ways, for example by Automator.}  and Ghostscript (which\nconverts PDF to PDF by\n\n@example\nps2pdf @var{options} -dAutoRotatePages=/None @var{in}.pdf @var{out}.pdf\n@end example\n\n@noindent\nand suitable options might be\n\n@example\n-dPDFSETTINGS=/ebook\n-dPDFSETTINGS=/screen\n@end example\n\n@noindent\n; see @uref{http://www.ghostscript.com/@/doc/@/current/@/Ps2pdf.htm} for\nmore such and consider all the options for image downsampling).  There\nhave been examples in @acronym{CRAN} packages for which Ghostscript 9.06\nand later produced much better reductions than 9.05 or earlier.\n\nWe come across occasionally large PDF files containing excessively\ncomplicated figures using PDF vector graphics: such figures are often\nbest redesigned or failing that, output as PNG files.\n\nOption @option{--compact-vignettes} to @command{R CMD build} defaults to\nvalue @samp{qpdf}: use @samp{both} to try harder to reduce the size,\nprovided you have Ghostscript available (see the help for\n@code{tools::compactPDF}).\n\n@node Check timing, Encoding issues, PDF size, Writing portable packages\n@subsection Check timing\n\nThere are several ways to find out where time is being spent in the\ncheck process.  Start by setting the environment variable\n@env{_R_CHECK_TIMINGS_} to @samp{0}.  This will report the total CPU\ntimes (not Windows) and elapsed times for installation and running\nexamples, tests and vignettes, under each sub-architecture if\nappropriate.  For tests and vignettes, it reports the time for each as\nwell as the total.\n\nSetting @env{_R_CHECK_TIMINGS_} to a positive value sets a threshold (in\nseconds elapsed time) for reporting timings.\n\nIf you need to look in more detail at the timings for examples, use\noption @option{--timings} to @command{R CMD check} (this is set by\n@option{--as-cran}).  This adds a summary to the check output for all\nthe examples with CPU or elapsed time of more than 5 seconds.  It\nproduces a file @file{@var{mypkg}.Rcheck/@var{mypkg}-Ex.timings}\ncontaining timings for each help file: it is a tab-delimited file which\ncan be read into @R{} for further analysis.\n\nTimings for the tests and vignette runs are given at the bottom of the\ncorresponding log file: note that log files for successful vignette runs\nare only retained if environment variable\n@env{_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_} is set to a true value.\n\n\n@node Encoding issues, Portable C and C++ code, Check timing, Writing portable packages\n@subsection Encoding issues\n\nCare is needed if your package contains non-@acronym{ASCII} text, and in\nparticular if it is intended to be used in more than one locale.  It is\npossible to mark the encoding used in the @file{DESCRIPTION} file and in\n@file{.Rd} files, as discussed elsewhere in this manual.\n\nFirst, consider carefully if you really need non-@acronym{ASCII} text.\nMany users of @R{} will only be able to view correctly text in their\nnative language group (e.g.@: Western European, Eastern European,\nSimplified Chinese) and @acronym{ASCII}.@footnote{except perhaps some\nspecial characters such as backslash and hash which may be taken over\nfor currency symbols.}.  Other characters may not be rendered at all,\nrendered incorrectly, or cause your @R{} code to give an error.  For\n@file{.Rd} documentation, marking the encoding and including\n@acronym{ASCII} transliterations is likely to do a reasonable job.  The\nset of characters which is commonly supported is wider than it used to\nbe around 2000, but non-Latin alphabets (Greek, Russian, Georgian,\n@dots{}) are still often problematic and those with double-width\ncharacters (Chinese, Japanese, Korean) often need specialist fonts to\nrender correctly.\n\nSeveral @acronym{CRAN} packages have messages in their @R{} code in French (and a\nfew in German).  A better way to tackle this is to use the\ninternationalization facilities discussed elsewhere in this manual.\n\nFunction @code{showNonASCIIfile} in package @pkg{tools} can help in\nfinding non-@acronym{ASCII} bytes in files.\n\nThere is a portable way to have arbitrary text in character strings\n(only) in your @R{} code, which is to supply them in Unicode as\n@code{\\uxxxx} escapes.  If there are any characters not in the current\nencoding the parser will encode the character string as UTF-8 and mark\nit as such.  This applies also to character strings in datasets: they\ncan be prepared using @code{\\uxxxx} escapes or encoded in UTF-8 in a\nUTF-8 locale, or even converted to UTF-8 via @samp{iconv()}.  If you do\nthis, make sure you have @samp{R (>= 2.10)} (or later) in the\n@samp{Depends} field of the @file{DESCRIPTION} file.\n\n@R{} sessions running in non-UTF-8 locales will if possible re-encode\nsuch strings for display (and this is done by @command{RGui} on Windows,\nfor example).  Suitable fonts will need to be selected or made\navailable@footnote{Typically on a Unix-alike this is done by telling\n@command{fontconfig} where to find suitable fonts to select glyphs\nfrom.}  both for the console/terminal and graphics devices such as\n@samp{X11()} and @samp{windows()}.  Using @samp{postscript} or\n@samp{pdf} will choose a default 8-bit encoding depending on the\nlanguage of the UTF-8 locale, and your users would need to be told how\nto select the @samp{encoding} argument.\n\nIf you want to run @command{R CMD check} on a Unix-alike over a package\nthat sets a package encoding in its @file{DESCRIPTION} file @emph{and do\nnot use a UTF-8 locale} you may need to specify a suitable locale\n@emph{via} environment variable @env{R_ENCODING_LOCALES}.  The default\nis equivalent to the value\n\n@example\n\"latin1=en_US:latin2=pl_PL:UTF-8=en_US.UTF-8:latin9=fr_FR.iso885915@@euro\"\n@end example\n\n@noindent\n(which is appropriate for a system based on @code{glibc}: macOS requires\n@code{latin9=fr_FR.ISO8859-15}) except that if the current locale is\nUTF-8 then the package code is translated to UTF-8 for syntax checking,\nso it is strongly recommended to check in a UTF-8 locale.\n\n@node Portable C and C++ code, Binary distribution, Encoding issues, Writing portable packages\n@subsection Portable C and C++ code\n\nWriting portable C and C++ code is mainly a matter of observing the\nstandards (C99, C++98 or where declared C++11/14/17) and testing that\nextensions (such as POSIX functions) are supported.\n\nNote that the `TR1' C++ extensions are not part of any of these\nstandards and the @code{<tr1/@var{name}>} headers are not supplied by some of\nthe compilers used for @R{}, including on macOS.  (Use the C++11\nversions instead.)\n\nNote too that the POSIX standards only require recently-defined\nfunctions to be declared if certain macros are defined with large enough\nvalues, and on some compiler/OS combinations@footnote{This is seen on\nLinux, Solaris and FreeBSD, although each has other ways to turn on all\nextensions, e.g.@: defining @code{_GNU_SOURCE}, @code{__EXTENSIONS__} or\n@code{_BSD_SOURCE}: the GCC compilers by default define\n@code{_GNU_SOURCE} unless a strict standard such as @option{-std=c99} is\nused.  On macOS extensions are declared unless one of these macros is\ngiven too small a value.} they are not declared otherwise.  So you may\nneed to include something like one of @footnote{Solaris 10 does not\nrecognize this value of @code{_POSIX_C_SOURCE}, nor values of\n@code{_XOPEN_SOURCE} beyond 600 (700 corresponds to POSIX 2008).\nFurther, the value of 500 is not allowed in C99 mode, @R{}'s default for\nC code.}\n@example\n#define _XOPEN_SOURCE 600\n@end example\n@noindent\nor\n@example\n#ifdef __GLIBC__\n# define _POSIX_C_SOURCE 200809L\n#endif\n@end example\n@noindent\nbefore @emph{any} headers.  (@code{strdup} and @code{strncasecmp} are\ntwo such functions.)\n\nHowever, some common errors are worth pointing out here.  It can be\nhelpful to look up functions at\n@uref{http://www.cplusplus.com/reference/} or\n@uref{http://en.cppreference.com/w/} and compare what is defined in the\nvarious standards.\n\nBoth the compiler and OS (@emph{via} system header files, which may\ndiffer by architecture even for nominally the same OS) affect the\ncompilability of C/C++ code.  Compilers from the GCC, @command{clang},\nIntel and Oracle Studio suites are routinely used with @R{}, and both\n@command{clang} and Oracle have more than one implementation of C++\nheaders and library.  The range of possibilities makes comprehensive\nempirical checking impossible, and regrettably compilers are patchy at\nbest on warning about non-standard code.\n\n@itemize\n@item\nMathematical functions such as @code{sqrt} are defined in C++ for\nfloating-point arguments.  It is legitimate in C++ to overload these\nwith versions for types @code{float}, @code{double}, @code{long double}\nand possibly more.  This means that calling @code{sqrt} on an integer\ntype may have `overloading ambiguity' as it could be promoted to any of\nthe supported floating-point types: this is commonly seen on Solaris,\nbut for @code{pow} also seen on macOS.  (C++98 has an overload for\n@code{std::pow(<double>, <int>)}, but this may not be visible from the\nmain namespace.  C++11 requires additional overloads for integer types,\nand ambiguous overloads are more common in C++11 (and later) compiler\nmodes.)\n\nA not-uncommonly-seen problem is to mistakenly call @code{floor(x/y)} or\n@code{ceil(x/y)} for @code{int} arguments @code{x} and @code{y}.  Since\n@code{x/y} does integer division, the result is an @code{int} and\n`overloading ambiguity' may be reported.  Some people have (pointlessly)\ncalled @code{floor} and @code{ceil} on integer arguments, which may have\nan `overloading ambiguity'.\n\nA surprising common misuse is things like @code{pow(10, -3)}: this\nshould be the constant @code{1e-3}.\n\n@item\nFunction @code{fabs} is defined only for floating-point types, except in\nC++11 which has overloads for @code{std::fabs} in @file{<cmath>} for\ninteger types.  Function @code{abs} is defined in C99's\n@file{<stdlib.h>} for @code{int} and in C++98's @file{<cstdlib>} for\ninteger types, overloaded in @file{<cmath>} for floating-point types.\nC++11 has additional overloads for @code{std::abs} in @file{<cmath>} for\ninteger types.  The effect of calling @code{abs} with a floating-point\ntype is implementation-specific: it may truncate to an integer.\n\n@item\nFunctions/macros such as @code{isnan}, @code{isinf} and @code{isfinite}\nare not required by C++98: where compilers support them they may be only\nin the @code{std} namespace or only in the main namespace.  There is no\nway to make use of these functions which works with all C++ compilers\ncurrently in use on @R{} platforms: use @R{}'s versions such as\n@code{ISNAN} and @code{R_FINITE} instead.\n\nIf you must use them in C++11, beware that some\ncompilers@footnote{E.g. @command{gcc 5.3} in C++11 mode.} provide both\n@code{std::isnan} and @code{::isnan}, so using\n\n@example\nusing namespace std;\n@end example\n\n@noindent\nmay cause `overloading ambiguity' and you must use @code{std::isnan}\n@emph{etc} explicitly.\n\nIt is an error (and make little sense, although has been seen) to call\nthese functions for integer arguments: a few compilers give a compilation\nerror.\n\n@item\nThe GNU C/C++ compilers support a large number of non-portable\nextensions.  For example, @code{INFINITY} (which is in C99 but not\nC++98), for which @R{} provides the portable @code{R_PosInf} (and\n@code{R_NegInf} for @code{-INFINITY}).  And @code{NAN} is just one NaN\nvalue: in @R{} code @code{NA_REAL} is usually what is intended, but\n@code{R_NaN} is also available.\n\nSome (but not all) extensions are listed at\n@uref{https://gcc.gnu.org/@/onlinedocs/@/gcc/@/C-Extensions.html} and\n@uref{https://gcc.gnu.org/@/onlinedocs/@/gcc/@/C_002b_002b-Extensions.html}.\n\nOther GNU extensions which have bitten package writers is the use of\nnon-portable characters such as @samp{$} in identifiers and use of C++\nheaders under @file{ext}.\n\nThe GNU Fortran compiler also supports a large number of non-portable\nextensions, the most commonly encountered one being\n@code{ISNAN}@footnote{There is a portable way to do this in Fortran 2003\n(@code{ieee_is_nan()} in module @code{ieee_arithmetic}), but ironically\nthat is not supported in the commonly-used versions 4.x of GNU Fortran.\nA pretty robust alternative is to test @code{if(my_var /= my_var)}.}.\nSome are listed at\n@uref{https://gcc.gnu.org/@/onlinedocs/@/gfortran/@/Extensions-implemented-in-GNU-Fortran.html}.\nOne that frequently catches package writers is that it allows\nout-of-order declarations: in standard-conformant Fortran variables must\nbe declared (explicitly or implicitly) before use in other declarations\nsuch as dimensions.\n\n@item\nIncluding C-style headers in C++ code is not portable.  Including the\nlegacy header@footnote{which often is the same as the header included by\nthe C compiler, but some compilers have wrappers for some of the C\nheaders.} @file{math.h} in C++ code may conflict with @file{cmath} which\nmay be included by other headers.  This is particularly problematic with\nC++11 compilers, as functions like @code{sqrt} and @code{isnan} are\ndefined for @code{double} arguments in @file{math.h} and for a range of\ntypes including @code{double} in @file{cmath}.  Similar issues have been\nseen for @file{stdlib.h} and @file{cstdlib}.  Including the C++ version\nfirst used to be a sufficient workaround but for some 2016 compilers\nonly one could be included.\n\n@item\nVariable-length arrays are C99, not supported by C++98 nor by the C++\ncompilers in use with @R{} on some platforms.\n\n@item\nBe careful to include the headers which define the functions you use.\nSome compilers/OSes include other system headers in their headers which\nare not required by the standards, and so code may compile on such\nsystems and not on others.  (A prominent example is the C++11 header\n@code{<random>} which is indirectly included by @code{<algorithm>} by\n@command{g++}.  Another issue is the C header @code{<time.h>} which is\nincluded by other headers on Linux and Windows but not macOS nor\nSolaris.)\n\nNote that @code{malloc}, @code{calloc}, @code{realloc} and @code{free}\nare defined by C99 in the header @file{stdlib.h} and (in the\n@code{std::} namespace) by C++ header @file{cstdlib}.  Some earlier\nimplementations used a header @file{malloc.h}, but that is not portable\nand does not exist on macOS.\n\nThis also applies to types such as @code{ssize_t}.  The POSIX standards\nsay that is declared in headers @code{unistd.h} and @code{sys/types.h},\nand the latter is often included indirectly by other headers on some\nbut not all systems.\n\nSimilarly for constants: for example @code{SIZE_MAX} is defined in\n@code{stdint.h} alongside @code{size_t} (according to the C99 standard:\nit is not part of C++98).\n\n@item\nFor C++ code, be careful to specify namespaces where needed.  Many\nfunctions are defined by the standards to be in the @code{std}\nnamespace, but @command{g++} puts many such also in the C++ main\nnamespace.  One way to do so is to use declarations such as\n@example\nusing std::floor;\n@end example\n@noindent\nbut it is usually preferable to use explicit namespace prefixes in the code.\n\nExamples seen in @acronym{CRAN} packages include\n@example\nabs acos atan calloc ceil div exp fabs floor fmod free log malloc memcpy\nmemset pow printf qsort round sin sprintf sqrt strcmp strcpy strerror\nstrlen strncmp strtol tan trunc\n@end example\n\n@item\n@c including clang as from 4.0.0\nSome C++ compilers refuse to compile constructs such as\n@example\n      if(ptr > 0) @{ ....@}\n@end example\n@noindent\nwhich compares a pointer to the integer @code{0}.  This could just use\n@code{if(ptr)} (pointer addresses cannot be negative) but if needed\npointers can be tested against @code{nullptr} (C++11 and later) or\n@code{NULL}.\n\n@c gcc6 accepts it, gcc5 does not, it seems.\nNote that although @code{nullptr} was only introduced in C++11, some\ncompilers accept it in C++98 mode (but most do not).\n\n@item\nMacros defined by the compiler/OS can cause problems.  Identifiers\nstarting with an underscore followed by an upper-case letter or another\nunderscore are reserved for system macros and should not be used in\nportable code (including not as guards in C/C++ headers).  Other macros,\ntypically upper-case, may be defined by the compiler or system headers\nand can cause problems.\n@c http://lists.x.org/archives/xorg-devel/2013-November/038808.html\nThe most common issue involves the names of the Intel CPU registers such\nas @code{CS}, @code{DS}, @code{ES}, @code{FS}, @code{GS} and @code{SS}\n(and more with longer abbreviations) defined on i586/x64 Solaris in\n@file{<sys/regset.h>} and often included indirectly by @file{<stdlib.h>}\nand other core headers.  Further examples are @code{ERR},\n@code{LITTLE_ENDIAN}, @code{zero} and @code{I} (which is defined in\nSolaris' @file{<complex.h>} as a compiler intrinsic for the imaginary\nunit).  Some of these can be avoided by defining @code{_POSIX_C_SOURCE}\nbefore including any system headers, but it is better to only use\nall-upper-case names which have a unique prefix such as the package name.\n\n@item\n@code{typedef}s in OS headers can conflict with those in the package:\nexamples include @code{ulong} on several OSes and @code{index_t} and\n@code{single} on Solaris.  (Note that these may conflict with other uses\nas identifiers, e.g.@: defining a C++ function called @code{single}.)\n@c as done by package Emcdf in June 2017.\n\n@item\nIf you use OpenMP, check carefully that you have followed the advice in\nthe subsection on @ref{OpenMP support}.  In particular, any use of\nOpenMP in C/C++ code will need to use\n@example\n#ifdef _OPENMP\n# include <omp.h>\n#endif\n@end example\n@noindent\nAny use of OpenMP functions, e.g.@: @code{omp_set_num_threads}, also\nneeds to be conditioned.\n\nAnd do not hardcode @option{-lgomp}: not only is that specific to the\nGCC family of compilers, using the correct linker flag often sets up the\nrun-time path to the library.\n\n@item\nPackage authors commonly assume things are part of C99 when they are\nnot: the most common example is POSIX function @code{strdup}.  The most\ncommon C library on Linux, @code{glibc}, will hide the declarations of\nsuch extensions unless a `feature-test macro' is defined @strong{before}\n(almost) any system header is included.  So for @code{strdup} you need\n@example\n#define _POSIX_C_SOURCE 200809L\n...\n#include <string.h>\n...\nstrdup call(s)\n@end example\n@noindent\nwhere the appropriate value can be found by @command{man strdup} on\nLinux.  (Use of @code{strncasecmp} is similar.)\n\nHowever, modes of @command{gcc} with `GNU EXTENSIONS' (which are the\ndefault, either @option{-std=gnu99} or @option{-std=gnu11}) declare\nenough macros to ensure that missing declarations are rarely seen.\n\nThis applies also to constants such as @code{M_PI} and @code{M_LN2},\nwhich are part of the X/Open standard: to use these define\n@code{_XOPEN_SOURCE} before including any headers, or include the @R{}\nheader @file{Rmath.h}.\n\n@item\nSimilarly, package authors commonly assume things are part of C++ when\nthey were introduced in C++11 if at all.  Recent examples from\n@acronym{CRAN} packages include the C99/C++11 functions\n@example\nerf expm1 fmin fmax lgamma lround loglp round snprintf strcasecmp trunc\n@end example\n@noindent\n(all of which are in the @code{std} namespace in C++11) and the POSIX\nfunctions @code{strdup} and @code{strncasecmp} and constants @code{M_PI}\nand @code{M_LN2} (see the previous item).  @R{} has long provided\n@code{fmax2}, @code{fmin2}, @code{fround}, @code{ftrunc},\n@code{lgammafn} and many of the X/Open constants, declared in header\n@file{Rmath.h}.  Uses of @code{erf} can be replaced by @code{pnorm} (see\nthe @R{} help page for the latter).\n\n@item\nUsing @code{alloca} portably is tricky: it is neither an ISO C nor a\nPOSIX function.  An adequately portable preamble is\n@example\n#ifdef __GNUC__\n/* Includes GCC, clang and Intel compilers */\n# undef alloca\n# define alloca(x) __builtin_alloca((x))\n#elif defined(__sun) || defined(_AIX)\n/* this is necessary (and sufficient) for Solaris 10 and AIX 6: */\n# include <alloca.h>\n#endif\n@end example\n\n@item\nCompiler writers feel free to implement features from later standards\nthan the one specified (if any), so for example they may implement or\nwarn on C++11, C++14 or even C++17 features.  Portable code will not use\nsuch features -- it can be hard to know what they are but the most\ncommon warnings are\n@example\n'register' storage class specifier is deprecated and incompatible with C++17\n\nISO C++11 does not allow conversion from string literal to 'char *'\n@end example\n@noindent\n(where conversion should be to @code{const char *}).  Keyword\n@code{register} was not mentioned in C++98, deprecated in C++11 and\nremoved in C++17.\n\n@item\nBe careful about including C headers in C++ code.  Issues include\n@itemize\n@item\nUse of the @code{register} storage class specifier (see the previous\nitem).\n@item\nThe C99 keyword @code{restrict} is not part of@footnote{it is allowed\nbut ignored in system headers.} any C++ standard and is rejected by some\nC++ compilers.\n@c but package treatSens attempted to use it.\n@c http://stackoverflow.com/questions/6434549/does-c11-add-the-c99-restrict-specifier-if-not-why-not\n@item\nInclusion by such headers of C-style headers such as @file{math.h} (see above).\n@end itemize\n@noindent\nThe most portable way to interface to other software with a C API is to\nuse C code (which can normally be mixed with C++ code in a package).\n\n@end itemize\n\nSome additional information for C++ is available at\n@uref{http://journal.r-project.org/@/archive/@/2011-2/@/RJournal_2011-2_Plummer.pdf}\nby Martyn Plummer.\n\n@node Binary distribution,  , Portable C and C++ code, Writing portable packages\n@subsection Binary distribution\n\nIf you want to distribute a binary version of a package on Windows or OS\nX, there are further checks you need to do to check it is portable: it\nis all too easy to depend on external software on your own machine that\nother users will not have.\n\nFor Windows, check what other DLLs your package's DLL depends on\n(`imports' from in the DLL tools' parlance).  A convenient GUI-based\ntool to do so is `Dependency Walker'\n(@uref{http://www.dependencywalker.com/}) for both 32-bit and 64-bit\nDLLs -- note that this will report as missing links to @R{}'s own DLLs\nsuch as @file{R.dll} and @file{Rblas.dll}.  For 32-bit DLLs only, the\ncommand-line tool @command{pedump.exe -i} (in @file{Rtools*.exe}) can be\nused, and for the brave, the @command{objdump} tool in the appropriate\ntoolchain will also reveal what DLLs are imported from.  If you use a\ntoolchain other than one provided by the @R{} developers or use your own\nmakefiles, watch out in particular for dependencies on the toolchain's\nruntime DLLs such as @file{libgfortran}, @file{libstdc++} and\n@file{libgcc_s}.\n\nFor macOS, using @code{R CMD otool -L} on the package's shared object(s)\nin the @file{libs} directory will show what they depend on: watch for\nany dependencies in @file{/usr/local/lib} or\n@file{/usr/local/gfortran/lib}, notably @file{libgfortran.?.dylib} and\n@file{libquadmath.0.dylib}.\n\nMany people (including the @acronym{CRAN} package repository) will not\naccept source packages containing binary files as the latter are a\nsecurity risk.  If you want to distribute a source package which needs\nexternal software on Windows or macOS, options include\n@itemize\n@item\nTo arrange for installation of the package to download the\nadditional software from a URL, as e.g.@: package @CRANpkg{Cairo} does.\n\n@item\n(For @acronym{CRAN}.)\nTo negotiate with Uwe Ligges to host the additional components on\nWinBuilder, and write a @file{configure.win} file to install them.\n\n@end itemize\n\n@noindent\nBe aware that license requirements will need to be met so you may need\nto supply the sources for the additional components (and will if your\npackage has a GPL-like license).\n\n\n@node Diagnostic messages, Internationalization, Writing portable packages, Creating R packages\n@section Diagnostic messages\n\nDiagnostic messages can be made available for translation, so it is\nimportant to write them in a consistent style.  Using the tools\ndescribed in the next section to extract all the messages can give a\nuseful overview of your consistency (or lack of it).\nSome guidelines follow.\n\n@itemize\n@item\nMessages are sentence fragments, and not viewed in isolation.  So it is\nconventional not to capitalize the first word and not to end with a\nperiod (or other punctuation).\n\n@item\nTry not to split up messages into small pieces.  In C error messages use\na single format string containing all English words in the messages.\n\nIn @R{} error messages do not construct a message with @code{paste} (such\nmessages will not be translated) but @emph{via} multiple arguments to\n@code{stop} or @code{warning}, or @emph{via} @code{gettextf}.\n\n@item\nDo not use colloquialisms such as ``can't'' and ``don't''.\n\n@item\nConventionally single quotation marks are used for quotations such as\n\n@example\n'ord' must be a positive integer, at most the number of knots\n@end example\n\n@noindent\nand double quotation marks when referring to an @R{} character string or\na class, such as\n\n@example\n'format' must be \"normal\" or \"short\" - using \"normal\"\n@end example\n\nSince @acronym{ASCII} does not contain directional quotation marks, it\nis best to use @samp{'} and let the translator (including automatic\ntranslation) use directional quotations where available.  The range of\nquotation styles is immense: unfortunately we cannot reproduce them in a\nportable @code{texinfo} document.  But as a taster, some languages use\n`up' and `down' (comma) quotes rather than left or right quotes, and\nsome use guillemets (and some use what Adobe calls `guillemotleft' to\nstart and others use it to end).\n\nIn @R{} messages it is also possible to use @code{sQuote} or @code{dQuote} as in\n\n@example\n        stop(gettextf(\"object must be of class %s or %s\",\n                      dQuote(\"manova\"), dQuote(\"maov\")),\n             domain = NA)\n@end example\n\n@item\nOccasionally messages need to be singular or plural (and in other\nlanguages there may be no such concept or several plural forms --\nSlovenian has four).  So avoid constructions such as was once used in\n@code{library}\n\n@example\nif((length(nopkgs) > 0) && !missing(lib.loc)) @{\n    if(length(nopkgs) > 1)\n        warning(\"libraries \",\n                paste(sQuote(nopkgs), collapse = \", \"),\n                \" contain no packages\")\n    else\n        warning(\"library \", paste(sQuote(nopkgs)),\n                \" contains no package\")\n@}\n@end example\n\n@noindent\nand was replaced by\n\n@example\nif((length(nopkgs) > 0) && !missing(lib.loc)) @{\n    pkglist <- paste(sQuote(nopkgs), collapse = \", \")\n    msg <- sprintf(ngettext(length(nopkgs),\n                            \"library %s contains no packages\",\n                            \"libraries %s contain no packages\",\n                            domain = \"R-base\"),\n                   pkglist)\n    warning(msg, domain=NA)\n@}\n@end example\n\n@noindent\nNote that it is much better to have complete clauses as here, since\nin another language one might need to say\n`There is no package in library %s' or\n`There are no packages in libraries %s'.\n\n@end itemize\n\n@node Internationalization, CITATION files, Diagnostic messages, Creating R packages\n@section Internationalization\n\nThere are mechanisms to translate the @R{}- and C-level error and warning\nmessages.  There are only available if @R{} is compiled with NLS support\n(which is requested by @command{configure} option @option{--enable-nls},\nthe default).\n\nThe procedures make use of @code{msgfmt} and @code{xgettext} which are\npart of @acronym{GNU} @code{gettext} and this will need to be installed:\nWindows users can find pre-compiled binaries at\n@uref{https://www.stats.ox.ac.uk/@/pub/@/Rtools/@/goodies/@/gettext-tools.zip}.\n\n@menu\n* C-level messages::            \n* R messages::                  \n* Preparing translations::      \n@end menu\n\n@node C-level messages, R messages, Internationalization, Internationalization\n@subsection C-level messages\n\nThe process of enabling translations is\n\n@itemize\n@item\nIn a header file that will be included in all the C (or C++ or Objective\nC/C++) files containing messages that should be translated, declare\n\n@example\n#include <R.h>  /* to include Rconfig.h */\n\n#ifdef ENABLE_NLS\n#include <libintl.h>\n#define _(String) dgettext (\"@var{pkg}\", String)\n/* replace @var{pkg} as appropriate */\n#else\n#define _(String) (String)\n#endif\n@end example\n\n@item\nFor each message that should be translated, wrap it in @code{_(...)},\nfor example\n\n@example\nerror(_(\"'ord' must be a positive integer\"));\n@end example\n\nIf you want to use different messages for singular and plural forms, you\nneed to add\n\n@example\n#ifndef ENABLE_NLS\n#define dngettext(pkg, String, StringP, N) (N > 1 ? StringP : String)\n#endif\n@end example\n\n@noindent\nand mark strings by\n\n@example\ndngettext(\"@var{pkg}\", @var{<singular string>}, @var{<plural string>}, n)\n@end example\n\n@item\nIn the package's @file{src} directory run\n\n@example\nxgettext --keyword=_ -o @var{pkg}.pot *.c\n@end example\n\n@end itemize\n\nThe file @file{src/@var{pkg}.pot} is the template file, and\nconventionally this is shipped as @file{po/@var{pkg}.pot}.\n\n@node R messages, Preparing translations, C-level messages, Internationalization\n@subsection R messages\n\nMechanisms are also available to support the automatic translation of\n@R{} @code{stop}, @code{warning} and @code{message} messages.  They make\nuse of message catalogs in the same way as C-level messages, but using\ndomain @code{R-@var{pkg}} rather than @code{@var{pkg}}.  Translation of\ncharacter strings inside @code{stop}, @code{warning} and @code{message}\ncalls is automatically enabled, as well as other messages enclosed in\ncalls to @code{gettext} or @code{gettextf}.  (To suppress this, use\nargument @code{domain=NA}.)\n\nTools to prepare the @file{R-@var{pkg}.pot} file are provided in package\n@pkg{tools}: @code{xgettext2pot} will prepare a file from all strings\noccurring inside @code{gettext}/@code{gettextf}, @code{stop},\n@code{warning} and @code{message} calls.  Some of these are likely to be\nspurious and so the file is likely to need manual editing.\n@code{xgettext} extracts the actual calls and so is more useful when\ntidying up error messages.\n\nThe @R{} function @code{ngettext} provides an interface to the C\nfunction of the same name: see example in the previous section.  It is\nsafest to use @code{domain=\"R-@var{pkg}\"} explicitly in calls to\n@code{ngettext}, and necessary for earlier versions of @R{} unless they\nare calls directly from a function in the package.\n\n\n@node Preparing translations,  , R messages, Internationalization\n@subsection Preparing translations\n\nOnce the template files have been created, translations can be made.\nConventional translations have file extension @file{.po} and are placed\nin the @file{po} subdirectory of the package with a name that is either\n@samp{@var{ll}.po} or @samp{R-@var{ll}.po} for translations of the C and @R{}\nmessages respectively to language with code @samp{@var{ll}}.\n\n@ifset UseExternalXrefs\n@xref{Localization of messages, , Localization of messages, R-admin,\nR Installation and Administration}, for details of language codes.\n@end ifset\n@ifclear UseExternalXrefs\nSee `Localization of messages' in `R Installation and Administration',\nfor details of language codes.\n@end ifclear\n\nThere is an @R{} function, @code{update_pkg_po} in package @pkg{tools},\nto automate much of the maintenance of message translations.  See its\nhelp for what it does in detail.\n\nIf this is called on a package with no existing translations, it creates\nthe directory @file{@var{pkgdir}/po}, creates a template file of @R{}\nmessages, @file{@var{pkgdir}/po/R-@var{pkg}.pot}, within it, creates the\n@samp{en@@quot} translation and installs that.  (The @samp{en@@quot}\npseudo-language interprets quotes in their directional forms in suitable\n(e.g.@: UTF-8) locales.)\n\nIf the package has C source files in its @file{src} directory\nthat are marked for translation, use\n\n@example\ntouch @var{pkgdir}/po/@var{pkg}.pot\n@end example\n\n@noindent\nto create a dummy template file, then call @code{update_pkg_po} again\n(this can also be done before it is called for the first time).\n\nWhen translations to new languages are added in the @file{@var{pkgdir}/po}\ndirectory, running the same command will check and then\ninstall the translations.\n\nIf the package sources are updated, the same command will update the\ntemplate files, merge the changes into the translation @file{.po} files\nand then installed the updated translations.  You will often see that\nmerging marks translations as `fuzzy' and this is reported in the\ncoverage statistics.  As fuzzy translations are @emph{not} used, this is\nan indication that the translation files need human attention.\n\nThe merged translations are run through @code{tools::checkPofile} to\ncheck that C-style formats are used correctly: if not the mismatches are\nreported and the broken translations are not installed.\n\nThis function needs the GNU @command{gettext-tools} installed and on the\npath: see its help page.\n\n\n@findex CITATION\n@cindex citation\n@node CITATION files, Package types, Internationalization, Creating R packages\n@section CITATION files\n\nAn installed file named @file{CITATION} will be used by the\n@code{citation()} function.  (It should be in the @file{inst}\nsubdirectory of the package sources.)\n\nThe @file{CITATION} file is parsed as @R{} code (in the package's\ndeclared encoding, or in @acronym{ASCII} if none is declared).  If no\nsuch file is present, @code{citation} auto-generates citation\ninformation from the package @file{DESCRIPTION} metadata, and an example\nof what that would look like as a @file{CITATION} file can be seen in\nrecommended package @CRANpkg{nlme} (see below): recommended packages\n@CRANpkg{boot}, @CRANpkg{cluster} and @CRANpkg{mgcv} have further\nexamples.\n\nA @file{CITATION} file will contain calls to function @code{bibentry}.\n\nHere is that for @CRANpkg{nlme}:\n\n@example\nyear <- sub(\"-.*\", \"\", meta$Date)\nnote <- sprintf(\"R package version %s\", meta$Version)\n\nbibentry(bibtype = \"Manual\",\n         title = \"@{nlme@}: Linear and Nonlinear Mixed Effects Models\",\n         author = c(person(\"Jose\", \"Pinheiro\"),\n                    person(\"Douglas\", \"Bates\"),\n                    person(\"Saikat\", \"DebRoy\"),\n                    person(\"Deepayan\", \"Sarkar\"),\n                    person(\"R Core Team\")),\n         year = year,\n         note = note,\n         url = \"https://CRAN.R-project.org/package=nlme\")\n@end example\n\nNote the way that information that may need to be updated is picked up\nfrom object @code{meta}, a parsed version of the @file{DESCRIPTION} file\n-- it is tempting to hardcode such information, but it normally then\ngets outdated.  See @code{?bibentry} for further details of the\ninformation which can be provided.\n\nIn case a bibentry contains @LaTeX{} markup (e.g., for accented\ncharacters or mathematical symbols), it may be necessary to provide a\ntext representation to be used for printing via the @code{textVersion}\nargument to @code{bibentry}.  E.g., earlier versions of\n@CRANpkg{nlme} additionally used\n\n@example\n         textVersion =\n         paste0(\"Jose Pinheiro, Douglas Bates, Saikat DebRoy,\",\n                \"Deepayan Sarkar and the R Core Team (\",\n                year,\n                \"). nlme: Linear and Nonlinear Mixed Effects Models. \",\n                note, \".\")\n@end example\n\nThe @file{CITATION} file should itself produce no output when\n@code{source}-d.\n\nIt is desirable (and essential for @acronym{CRAN}) that the\n@file{CITATION} file does not contain calls to functions such as\n@code{packageDescription} which assume the package is installed in a\nlibrary tree on the package search path.\n\n@node Package types, Services, CITATION files, Creating R packages\n@section Package types\n\nThe @file{DESCRIPTION} file has an optional field @code{Type} which if\nmissing is assumed to be @samp{Package}, the sort of extension discussed\nso far in this chapter.  Currently one other type is recognized; there\nused also to be a @samp{Translation} type.\n\n@menu\n* Frontend::                    \n@end menu\n\n@node Frontend,  , Package types, Package types\n@subsection Frontend\n\nThis is a rather general mechanism, designed for adding new front-ends\nsuch as the former @pkg{gnomeGUI} package (see the @file{Archive} area on\n@acronym{CRAN}).  If a @file{configure} file is found in the top-level\ndirectory of the package it is executed, and then if a @file{Makefile}\nis found (often generated by @file{configure}), @code{make} is called.\nIf @code{R CMD INSTALL --clean} is used @code{make clean} is called.  No\nother action is taken.\n\n@code{R CMD build} can package up this type of extension, but @code{R\nCMD check} will check the type and skip it.\n\nMany packages of this type need write permission for the @R{}\ninstallation directory.\n\n@node Services,  , Package types, Creating R packages\n@section Services\n\nSeveral members of the @R{} project have set up services to assist those\nwriting @R{} packages, particularly those intended for public\ndistribution.\n\n@uref{https://win-builder.r-project.org, win-builder.r-project.org}\noffers the automated preparation of (32/64-bit) Windows binaries from\nwell-tested source packages.\n\nR-Forge (@uref{https://R-Forge.r-project.org, R-Forge.r-project.org}) and\nRForge (@uref{https://www.rforge.net, www.rforge.net}) are similar\nservices with similar names.  Both provide source-code management\nthrough SVN, daily building and checking, mailing lists and a repository\nthat can be accessed @emph{via} @code{install.packages} (they can be\nselected by @code{setRepositories} and the GUI menus that use it).\nPackage developers have the opportunity to present their work on the\nbasis of project websites or news announcements.  Mailing lists, forums\nor wikis provide useRs with convenient instruments for discussions and\nfor exchanging information between developers and/or interested useRs.\n\n\n@node Writing R documentation files, Tidying and profiling R code, Creating R packages, Top\n@chapter Writing R documentation files\n@cindex Documentation, writing\n\n@menu\n* Rd format::                   \n* Sectioning::                  \n* Marking text::                \n* Lists and tables::            \n* Cross-references::            \n* Mathematics::                 \n* Figures::                     \n* Insertions::                  \n* Indices::                     \n* Platform-specific sections::  \n* Conditional text::            \n* Dynamic pages::               \n* User-defined macros::         \n* Encoding::                    \n* Processing documentation files::  \n* Editing Rd files::            \n@end menu\n\n@node Rd format, Sectioning, Writing R documentation files, Writing R documentation files\n@section Rd format\n\n@R{} objects are documented in files written in ``@R{} documentation''\n(Rd) format, a simple markup language much of which closely resembles\n(La)@TeX{}, which can be processed into a variety of formats,\nincluding @LaTeX{}, @HTML{} and plain text.  The translation is\ncarried out by functions in the @pkg{tools} package called by the\nscript @command{Rdconv} in @file{@var{R_HOME}/bin} and by the\ninstallation scripts for packages.\n\n@c 1324 as of 2011-01-16\nThe @R{} distribution contains more than 1300 such files which can be\nfound in the @file{src/library/@var{pkg}/man} directories of the @R{}\nsource tree, where @var{pkg} stands for one of the standard packages\nwhich are included in the @R{} distribution.\n\nAs an example, let us look at a simplified version of\n@file{src/library/base/man/load.Rd} which documents the @R{} function\n@code{load}.\n\n@quotation\n@cartouche\n@smallexample\n% File src/library/base/man/load.Rd\n\\name@{load@}\n\\alias@{load@}\n\\title@{Reload Saved Datasets@}\n\\description@{\n  Reload the datasets written to a file with the function\n  \\code@{save@}.\n@}\n\\usage@{\nload(file, envir = parent.frame())\n@}\n\\arguments@{\n  \\item@{file@}@{a connection or a character string giving the\n    name of the file to load.@}\n  \\item@{envir@}@{the environment where the data should be\n    loaded.@}\n@}\n\\seealso@{\n  \\code@{\\link@{save@}@}.\n@}\n\\examples@{\n## save all data\nsave(list = ls(), file= \"all.RData\")\n\n## restore the saved values to the current environment\nload(\"all.RData\")\n\n## restore the saved values to the workspace\nload(\"all.RData\", .GlobalEnv)\n@}\n\\keyword@{file@}\n@end smallexample\n@end cartouche\n@end quotation\n\nAn @file{Rd} file consists of three parts.  The header gives basic\ninformation about the name of the file, the topics documented, a title,\na short textual description and @R{} usage information for the objects\ndocumented.  The body gives further information (for example, on the\nfunction's arguments and return value, as in the above example).\nFinally, there is an optional footer with keyword information.  The\nheader is mandatory.\n\nInformation is given within a series of @emph{sections} with standard\nnames (and user-defined sections are also allowed).  Unless otherwise\nspecified@footnote{e.g.@: @code{\\alias}, @code{\\keyword} and\n@code{\\note} sections.} these should occur only once in an @file{Rd}\nfile (in any order), and the processing software will retain only the\nfirst occurrence of a standard section in the file, with a warning.\n\nSee @uref{https://developer.r-project.org/Rds.html, ``Guidelines for Rd\nfiles''} for guidelines for writing documentation in @file{Rd} format\nwhich should be useful for package writers.\n@findex prompt\nThe @R{}\ngeneric function @code{prompt} is used to construct a bare-bones @file{Rd}\nfile ready for manual editing.  Methods are defined for documenting\nfunctions (which fill in the proper function and argument names) and\ndata frames.  There are also functions @code{promptData},\n@code{promptPackage}, @code{promptClass}, and @code{promptMethods} for\nother types of @file{Rd} file.\n\nThe general syntax of @file{Rd} files is summarized below.  For a detailed\ntechnical discussion of current @file{Rd} syntax, see\n@uref{https://developer.r-project.org/parseRd.pdf, ``Parsing Rd files''}.\n\n@file{Rd} files consist of four types of text input.  The most common\nis @LaTeX{}-like, with the backslash used as a prefix on markup\n(e.g. @code{\\alias}), and braces used to indicate arguments\n(e.g. @code{@{load@}}).  The least common type of text is `verbatim'\ntext, where no markup other than the comment marker (@code{%}) is\nprocessed.  There is also a rare variant of `verbatim' text\n(used in @code{\\eqn}, @code{\\deqn}, @code{\\figure},\nand @code{\\newcommand}) where comment markers need not be escaped.\nThe final type is @R{}-like, intended for @R{} code, but allowing some\nembedded macros.  Quoted strings within @R{}-like text are handled\nspecially: regular character escapes such as @code{\\n} may be entered\nas-is.  Only markup starting with @code{\\l} (e.g.  @code{\\link}) or\n@code{\\v} (e.g. @code{\\var}) will be recognized within quoted strings.\nThe rarely used vertical tab @code{\\v} must be entered as @code{\\\\v}.\n\nEach macro defines the input type for its argument.  For example, the\nfile initially uses @LaTeX{}-like syntax, and this is also used in the\n@code{\\description} section, but the @code{\\usage} section uses\n@R{}-like syntax, and the @code{\\alias} macro uses `verbatim' syntax.\nComments run from a percent symbol @code{%} to the end of the line in\nall types of text except the rare `verbatim' variant\n(as on the first line of the @code{load} example).\n\nBecause backslashes, braces and percent symbols have special meaning, to\nenter them into text sometimes requires escapes using a backslash.  In\ngeneral balanced braces do not need to be escaped, but percent symbols\nalways do, except in the `verbatim' variant.\nFor the complete list of macros and rules for escapes, see\n@uref{https://developer.r-project.org/parseRd.pdf, ``Parsing Rd files''}.\n\n@menu\n* Documenting functions::       \n* Documenting data sets::       \n* Documenting S4 classes and methods::  \n* Documenting packages::        \n@end menu\n\n@node Documenting functions, Documenting data sets, Rd format, Rd format\n@subsection Documenting functions\n\nThe basic markup commands used for documenting @R{} objects (in\nparticular, functions) are given in this subsection.\n\n@table @code\n@item \\name@{@var{name}@}\n@findex \\name\n@var{name} typically@footnote{There can be exceptions: for example\n@file{Rd} files are not allowed to start with a dot, and have to be\nuniquely named on a case-insensitive file system.} is the basename of\nthe @file{Rd} file containing the documentation.  It is the ``name'' of\nthe @file{Rd} object represented by the file and has to be unique in a\npackage.  To avoid problems with indexing the package manual, it may not\n@c Problems seen in 2.13.x but not 2.14.0\ncontain @samp{!}  @samp{|} nor @samp{@@}, and to avoid possible problems\nwith the @HTML{} help system it should not contain @samp{/} nor a space.\n(@LaTeX{} special characters are allowed, but may not be collated\ncorrectly in the index.)  There can only be one @code{\\name} entry in a\nfile, and it must not contain any markup.  Entries in the package manual\nwill be in alphabetic@footnote{in the current locale, and with special\ntreatment for @LaTeX{} special characters and with any\n@samp{@var{pkgname}-package} topic moved to the top of the list.} order\nof the @code{\\name} entries.\n\n@item \\alias@{@var{topic}@}\n@findex \\alias\nThe @code{\\alias} sections specify all ``topics'' the file documents.\nThis information is collected into index data bases for lookup by the\non-line (plain text and @HTML{}) help systems.  The @var{topic} can\ncontain spaces, but (for historical reasons) leading and trailing spaces\nwill be stripped.  Percent and left brace need to be escaped by\na backslash.\n\nThere may be several @code{\\alias} entries.  Quite often it is\nconvenient to document several @R{} objects in one file.  For example,\nfile @file{Normal.Rd} documents the density, distribution function,\nquantile function and generation of random variates for the normal\ndistribution, and hence starts with\n\n@example\n@group\n\\name@{Normal@}\n\\alias@{Normal@}\n\\alias@{dnorm@}\n\\alias@{pnorm@}\n\\alias@{qnorm@}\n\\alias@{rnorm@}\n@end group\n@end example\n\n@noindent\nAlso, it is often convenient to have several different ways to refer to\nan @R{} object, and an @code{\\alias} does not need to be the name of an\nobject.\n\nNote that the @code{\\name} is not necessarily a topic documented, and if\nso desired it needs to have an explicit @code{\\alias} entry (as in this\nexample).\n\n@item \\title@{@var{Title}@}\n@findex \\title\nTitle information for the @file{Rd} file.  This should be capitalized\nand not end in a period; try to limit its length to at most 65\ncharacters for widest compatibility.\n\nMarkup is supported in the text, but use of characters other than\nEnglish text and punctuation (e.g., @samp{<}) may limit portability.\n\nThere must be one (and only one) @code{\\title} section in a help file.\n\n@item \\description@{@dots{}@}\n@findex \\description\nA short description of what the function(s) do(es) (one paragraph, a few\nlines only).  (If a description is too long and cannot easily be\nshortened, the file probably tries to document too much at once.)\nThis is mandatory except for package-overview files.\n\n@item \\usage@{@var{fun}(@var{arg1}, @var{arg2}, @dots{})@}\n@findex \\usage\nOne or more lines showing the synopsis of the function(s) and variables\ndocumented in the file.  These are set in typewriter font.  This is an\n@R{}-like command.\n\nThe usage information specified should match the function definition\n@emph{exactly} (such that automatic checking for consistency between\ncode and documentation is possible).\n\nIt is no longer advisable to use @code{\\synopsis} for the actual\nsynopsis and show modified synopses in the @code{\\usage}.  Support for\n@code{\\synopsis} will be removed in \\R 3.1.0.  To indicate that a\nfunction can be used in several different ways, depending on the named\narguments specified, use section @code{\\details}.  E.g.,\n@file{abline.Rd} contains\n\n@example\n@group\n\\details@{\n  Typical usages are\n\\preformatted@{abline(a, b, untf = FALSE, \\dots)\n......\n@}\n@end group\n@end example\n\n@findex \\method\nUse @code{\\method@{@var{generic}@}@{@var{class}@}} to indicate the name\nof an S3 method for the generic function @var{generic} for objects\ninheriting from class @code{\"@var{class}\"}.  In the printed versions,\nthis will come out as @var{generic} (reflecting the understanding that\nmethods should not be invoked directly but @emph{via} method dispatch), but\n@code{codoc()} and other QC tools always have access to the full name.\n\nFor example, @file{print.ts.Rd} contains\n\n@example\n@group\n\\usage@{\n\\method@{print@}@{ts@}(x, calendar, \\dots)\n@}\n@end group\n@end example\n\n@noindent\nwhich will print as\n\n@example\n@group\nUsage:\n\n     ## S3 method for class 'ts':\n     print(x, calendar, ...)\n@end group\n@end example\n\nUsage for replacement functions should be given in the style of\n@code{dim(x) <- value} rather than explicitly indicating the name of the\nreplacement function (@w{@code{\"dim<-\"}} in the above).  Similarly, one\ncan use @code{\\method@{@var{generic}@}@{@var{class}@}(@var{arglist}) <-\nvalue} to indicate the usage of an S3 replacement method for the generic\nreplacement function @code{\"@var{generic}<-\"} for objects inheriting\nfrom class @code{\"@var{class}\"}.\n\nUsage for S3 methods for extracting or replacing parts of an object, S3\nmethods for members of the Ops group, and S3 methods for user-defined\n(binary) infix operators (@samp{%@var{xxx}%}) follows the above rules,\nusing the appropriate function names.  E.g., @file{Extract.factor.Rd}\ncontains\n\n@example\n@group\n\\usage@{\n\\method@{[@}@{factor@}(x, \\dots, drop = FALSE)\n\\method@{[[@}@{factor@}(x, \\dots)\n\\method@{[@}@{factor@}(x, \\dots) <- value\n@}\n@end group\n@end example\n\n@noindent\nwhich will print as\n\n@example\n@group\nUsage:\n\n     ## S3 method for class 'factor':\n     x[..., drop = FALSE]\n     ## S3 method for class 'factor':\n     x[[...]]\n     ## S3 replacement method for class 'factor':\n     x[...] <- value\n@end group\n@end example\n\n@findex \\S3method\n@code{\\S3method} is accepted as an alternative to @code{\\method}.\n\n@item \\arguments@{@dots{}@}\n@findex \\arguments\nDescription of the function's arguments, using an entry of the form\n\n@example\n\\item@{@var{arg_i}@}@{@var{Description of arg_i}.@}\n@end example\n\n@noindent for each element of the argument list.  (Note that there is\nno whitespace between the three parts of the entry.) There may be\noptional text outside the @code{\\item} entries, for example to give\ngeneral information about groups of parameters.\n\n\n@item \\details@{@dots{}@}\n@findex \\details\nA detailed if possible precise description of the functionality\nprovided, extending the basic information in the @code{\\description}\nslot.\n\n@item \\value@{@dots{}@}\n@findex \\value\nDescription of the function's return value.\n\nIf a list with multiple values is returned, you can use entries of the\nform\n\n@example\n\\item@{@var{comp_i}@}@{@var{Description of comp_i}.@}\n@end example\n\n@noindent\nfor each component of the list returned.  Optional text may\nprecede@footnote{Text between or after list items is discouraged.} this\nlist (see for example the help for @code{rle}).  Note that @code{\\value}\nis implicitly a @code{\\describe} environment, so that environment should\nnot be used for listing components, just individual @code{\\item@{@}@{@}}\nentries.\n\n@item \\references@{@dots{}@}\n@findex \\references\nA section with references to the literature.  Use @code{\\url@{@}} or\n@code{\\href@{@}@{@}} for web pointers.\n\n@item \\note@{...@}\n@findex \\note\nUse this for a special note you want to have pointed out.  Multiple\n@code{\\note} sections are allowed, but might be confusing to the end users.\n\nFor example, @file{pie.Rd} contains\n\n@example\n@group\n\\note@{\n  Pie charts are a very bad way of displaying information.\n  The eye is good at judging linear measures and bad at\n  judging relative areas.\n  ......\n@}\n@end group\n@end example\n\n@item \\author@{@dots{}@}\n@findex \\author\nInformation about the author(s) of the @file{Rd} file.  Use\n@code{\\email@{@}} without extra delimiters (such as @samp{( )} or\n@samp{< >}) to specify email addresses, or @code{\\url@{@}} or\n@code{\\href@{@}@{@}} for web pointers.\n\n@item \\seealso@{@dots{}@}\n@findex \\seealso\nPointers to related @R{} objects, using @code{\\code@{\\link@{...@}@}} to\nrefer to them (@code{\\code} is the correct markup for @R{} object names,\nand @code{\\link} produces hyperlinks in output formats which support\nthis.  @xref{Marking text}, and @ref{Cross-references}).\n\n@findex \\examples\n@item \\examples@{@dots{}@}\nExamples of how to use the function.  Code in this section is set\nin typewriter font without reformatting and is run by\n@code{example()} unless marked otherwise (see below).\n\nExamples are not only useful for documentation purposes, but also\nprovide test code used for diagnostic checking of @R{} code.  By\ndefault, text inside @code{\\examples@{@}} will be displayed in the\noutput of the help page and run by @code{example()} and by @code{R CMD\ncheck}.  You can use @code{\\dontrun@{@}}\n@findex \\dontrun\nfor text that should only be shown, but not run, and\n@code{\\dontshow@{@}}\n@findex \\dontshow\nfor extra commands for testing that should not be shown to users, but\nwill be run by @code{example()}.  (Previously this was called\n@code{\\testonly}, and that is still accepted.)\n\nText inside @code{\\dontrun@{@}} is `verbatim', but the other parts\nof the @code{\\examples} section are @R{}-like text.\n\nFor example,\n\n@example\n@group\nx <- runif(10)       # @r{Shown and run.}\n\\dontrun@{plot(x)@}    # @r{Only shown.}\n\\dontshow@{log(x)@}    # @r{Only run.}\n@end group\n@end example\n\nThus, example code not included in @code{\\dontrun} must be executable!\nIn addition, it should not use any system-specific features or require\nspecial facilities (such as Internet access or write permission to\nspecific directories).  Text included in @code{\\dontrun} is indicated by\ncomments in the processed help files: it need not be valid @R{} code but\nthe escapes must still be used for @code{%}, @code{\\} and unpaired\nbraces as in other `verbatim' text.\n\nExample code must be capable of being run by @code{example}, which uses\n@code{source}.  This means that it should not access @file{stdin},\ne.g.@: to @code{scan()} data from the example file.\n\nData needed for making the examples executable can be obtained by random\nnumber generation (for example, @code{x <- rnorm(100)}), or by using\nstandard data sets listed by @code{data()} (see @code{?data} for more\ninfo).\n\nFinally, there is @code{\\donttest}, used (at the beginning of a separate\nline) to mark code that should be run by @code{example()} but not by\n@code{R CMD check} (by default: the option @option{--run-donttest} can\nbe used).  This should be needed only occasionally but can be used for\ncode which might fail in circumstances that are hard to test for, for\nexample in some locales.  (Use e.g. @code{capabilities()} or\n@code{nzchar(Sys.which(\"someprogram\"))} to test for features needed in\nthe examples wherever possible, and you can also use @code{try()} or\n@code{tryCatch()}.  Use @code{interactive()} to condition examples which\nneed someone to interact with.)  Note that code included in\n@code{\\donttest} must be correct @R{} code, and any packages used should\nbe declared in the @file{DESCRIPTION} file.  It is good practice to\ninclude a comment in the @code{\\donttest} section explaining why it is\nneeded.\n\nAs from @R{} 3.4.0, output from code between comments\n@example\n## IGNORE_RDIFF_BEGIN\n## IGNORE_RDIFF_END\n@end example\n@noindent\nis ignored when comparing check output to reference output (a\n@file{-Ex.Rout.save} file).\n\n@findex \\keyword\n@item \\keyword@{@var{key}@}\nThere can be zero or more @code{\\keyword} sections per file.\nEach @code{\\keyword} section should specify a single keyword, preferably\none of the standard keywords as listed in file @file{KEYWORDS} in the\n@R{} documentation directory (default @file{@var{R_HOME}/doc}).  Use\ne.g.@: @code{RShowDoc(\"KEYWORDS\")} to inspect the standard keywords from\nwithin @R{}.  There can be more than one @code{\\keyword} entry if the @R{}\nobject being documented falls into more than one category, or none.\n\nDo strongly consider using @code{\\concept} (@pxref{Indices}) instead of\n@code{\\keyword} if you are about to use more than very few non-standard\nkeywords.\n\nThe special keyword @samp{internal} marks a page of internal objects\nthat are not part of the package's API.  If the help page for object\n@code{foo} has keyword @samp{internal}, then @code{help(foo)} gives this\nhelp page, but @code{foo} is excluded from several object indices,\nincluding the alphabetical list of objects in the @HTML{} help system.\n\n@code{help.search()} can search by keyword, including user-defined\nvalues: however the `Search Engine & Keywords' @HTML{} page accessed\n@emph{via} @code{help.start()} provides single-click access only to a\npre-defined list of keywords.\n@end table\n\n\n@node Documenting data sets, Documenting S4 classes and methods, Documenting functions, Rd format\n@subsection Documenting data sets\n\nThe structure of @file{Rd} files which document @R{} data sets is slightly\ndifferent.  Sections such as @code{\\arguments} and @code{\\value} are not\nneeded but the format and source of the data should be explained.\n\nAs an example, let us look at @file{src/library/datasets/man/rivers.Rd}\nwhich documents the standard @R{} data set @code{rivers}.\n\n@quotation\n@cartouche\n@smallexample\n\\name@{rivers@}\n\\docType@{data@}\n\\alias@{rivers@}\n\\title@{Lengths of Major North American Rivers@}\n\\description@{\n  This data set gives the lengths (in miles) of 141 \\dQuote@{major@}\n  rivers in North America, as compiled by the US Geological\n  Survey.\n@}\n\\usage@{rivers@}\n\\format@{A vector containing 141 observations.@}\n\\source@{World Almanac and Book of Facts, 1975, page 406.@}\n\\references@{\n  McNeil, D. R. (1977) \\emph@{Interactive Data Analysis@}.\n  New York: Wiley.\n@}\n\\keyword@{datasets@}\n@end smallexample\n@end cartouche\n@end quotation\n\nThis uses the following additional markup commands.\n\n@table @code\n@item \\docType@{@dots{}@}\nIndicates the ``type'' of the documentation object.  Always @samp{data}\nfor data sets, and @samp{package} for @file{@var{pkg}-package.Rd}\noverview files.  Documentation for S4 methods and classes uses\n@samp{methods} (from @code{promptMethods()}) and @samp{class} (from\n@code{promptClass()}).\n\n@item \\format@{@dots{}@}\n@findex \\format\nA description of the format of the data set (as a vector, matrix, data\nframe, time series, @dots{}).  For matrices and data frames this should\ngive a description of each column, preferably as a list or table.\n@xref{Lists and tables}, for more information.\n\n@item \\source@{@dots{}@}\n@findex \\source\nDetails of the original source (a reference or @acronym{URL},\n@pxref{Specifying URLs}).  In addition, section @code{\\references} could\ngive secondary sources and usages.\n@end table\n\nNote also that when documenting data set @var{bar},\n\n@itemize @bullet\n@item\nThe @code{\\usage} entry is always @code{@var{bar}} or (for packages\nwhich do not use lazy-loading of data) @code{data(@var{bar})}.  (In\nparticular, only document a @emph{single} data object per @file{Rd} file.)\n@item\nThe @code{\\keyword} entry should always be @samp{datasets}.\n@end itemize\n\nIf @code{@var{bar}} is a data frame, documenting it as a data set can\nbe initiated @emph{via} @code{prompt(@var{bar})}.  Otherwise, the @code{promptData}\nfunction may be used.\n\n@node Documenting S4 classes and methods, Documenting packages, Documenting data sets, Rd format\n@subsection Documenting S4 classes and methods\n\nThere are special ways to use the @samp{?}  operator, namely\n@samp{class?@var{topic}} and @samp{methods?@var{topic}}, to access\ndocumentation for S4 classes and methods, respectively.  This mechanism\ndepends on conventions for the topic names used in @code{\\alias}\nentries.  The topic names for S4 classes and methods respectively are of\nthe form\n\n@example\n@var{class}-class\n@var{generic},@var{signature_list}-method\n@end example\n\n@noindent\nwhere @var{signature_list} contains the names of the classes in the\nsignature of the method (without quotes) separated by @samp{,} (without\nwhitespace), with @samp{ANY} used for arguments without an explicit\nspecification.  E.g., @samp{genericFunction-class} is the topic name for\ndocumentation for the S4 class @code{\"genericFunction\"}, and\n@samp{coerce,ANY,NULL-method} is the topic name for documentation for\nthe S4 method for @code{coerce} for signature @code{c(\"ANY\", \"NULL\")}.\n\nSkeletons of documentation for S4 classes and methods can be generated\nby using the functions @code{promptClass()} and @code{promptMethods()}\nfrom package @pkg{methods}.  If it is necessary or desired to provide an\nexplicit function declaration (in a @code{\\usage} section) for an S4\nmethod (e.g., if it has ``surprising arguments'' to be mentioned\nexplicitly), one can use the special markup\n\n@example\n\\S4method@{@var{generic}@}@{@var{signature_list}@}(@var{argument_list})\n@end example\n\n@noindent\n(e.g., @samp{\\S4method@{coerce@}@{ANY,NULL@}(from, to)}).\n\nTo make full use of the potential of the on-line documentation system,\nall user-visible S4 classes and methods in a package should at least\nhave a suitable @code{\\alias} entry in one of the package's @file{Rd} files.\nIf a package has methods for a function defined originally somewhere\nelse, and does not change the underlying default method for the\nfunction, the package is responsible for documenting the methods it\ncreates, but not for the function itself or the default method.\n\nAn S4 replacement method is documented in the same way as an S3 one: see\nthe description of  @code{\\method} in @ref{Documenting functions}.\n\n\nSee @kbd{help(\"Documentation\", package = \"methods\")} for more\ninformation on using and creating on-line documentation for S4 classes and\nmethods.\n\n@node Documenting packages,  , Documenting S4 classes and methods, Rd format\n@subsection Documenting packages\n\nPackages may have an overview help page with an @code{\\alias}\n@code{@var{pkgname}-package}, e.g.@: @samp{utils-package} for the\n@pkg{utils} package, when @code{package?@var{pkgname}} will open that\nhelp page.  If a topic named @code{@var{pkgname}} does not exist in\nanother @file{Rd} file, it is helpful to use this as an additional\n@code{\\alias}.\n\nSkeletons of documentation for a package can be generated using the\nfunction @code{promptPackage()}.  If the @code{final = LIBS} argument\nis used, then the @file{Rd} file will be generated in final form, containing\nthe information that would be produced up to\n@code{library(help = @var{pkgname})}.  Otherwise (the default) comments\nwill be inserted giving suggestions for content.\n\nApart from the mandatory @code{\\name} and @code{\\title} and the\n@code{@var{pkgname}-package} alias, the only requirement for the package\noverview page is that it include a @code{\\docType@{package@}} statement.\nAll other content is optional.  We suggest that it should be a short\noverview, to give a reader unfamiliar with the package enough\ninformation to get started.  More extensive documentation is better\nplaced into a package vignette (@pxref{Writing package vignettes}) and\nreferenced from this page, or into individual man pages for the\nfunctions, datasets, or classes.\n\n@node Sectioning, Marking text, Rd format, Writing R documentation files\n@section Sectioning\n\nTo begin a new paragraph or leave a blank line in an example, just\ninsert an empty line (as in (La)@TeX{}).  To break a line, use\n@code{\\cr}.\n@findex \\cr\n\nIn addition to the predefined sections (such as @code{\\description@{@}},\n@code{\\value@{@}}, etc.), you can ``define'' arbitrary ones by\n@code{\\section@{@var{section_title}@}@{@dots{}@}}.\n@findex \\section\nFor example\n\n@example\n\\section@{Warning@}@{\n  You must not call this function unless @dots{}\n@}\n@end example\n\n@noindent\nFor consistency with the pre-assigned sections, the section name (the\nfirst argument to @code{\\section}) should be capitalized (but not all\nupper case).  Whitespace between the first and second braced expressions\nis not allowed.  Markup (e.g.@: @code{\\code}) within the section title\nmay cause problems with the latex conversion (depending on the version\nof macro packages such as @samp{hyperref}) and so should be avoided.\n\nThe @code{\\subsection} macro takes arguments in the same format as\n@code{\\section}, but is used within a section, so it may be used to\nnest subsections within sections or other subsections.  There is no\npredefined limit on the nesting level, but formatting is not designed\nfor more than 3 levels (i.e. subsections within subsections within\nsections).\n\nNote that additional named sections are always inserted at a fixed\nposition in the output (before @code{\\note}, @code{\\seealso} and the\nexamples), no matter where they appear in the input (but in the same\norder amongst themselves as in the input).\n\n\n@node Marking text, Lists and tables, Sectioning, Writing R documentation files\n@section Marking text\n@cindex Marking text in documentation\n\nThe following logical markup commands are available for emphasizing or\nquoting text.\n\n@table @code\n@item \\emph@{@var{text}@}\n@findex \\emph\n@itemx \\strong@{@var{text}@}\n@findex \\strong\nEmphasize @var{text} using @emph{italic} and @strong{bold} font if\npossible; @code{\\strong} is regarded as stronger (more emphatic).\n\n@item \\bold@{@var{text}@}\n@findex \\bold\nSet @var{text} in @b{bold} font where possible.\n\n@item \\sQuote@{@var{text}@}\n@findex \\sQuote\n@itemx \\dQuote@{@var{text}@}\n@findex \\dQuote\nPortably single or double quote @var{text} (without hard-wiring the\ncharacters used for quotation marks).\n@end table\n\nEach of the above commands takes @LaTeX{}-like input, so other macros\nmay be used within @var{text}.\n\nThe following logical markup commands are available for indicating\nspecific kinds of text.  Except as noted, these take `verbatim' text\ninput, and so other macros may not be used within them.  Some characters\nwill need to be escaped (@pxref{Insertions}).\n\n@table @code\n@item \\code@{@var{text}@}\n@findex \\code\nIndicate text that is a literal example of a piece of an @R{} program,\ne.g., a fragment of @R{} code or the name of an @R{} object.  Text is\nentered in @R{}-like syntax, and displayed using @code{typewriter} font\nwhere possible.  Macros @code{\\var} and @code{\\link} are interpreted within\n@var{text}.\n\n@item \\preformatted@{@var{text}@}\n@findex \\preformatted\nIndicate text that is a literal example of a piece of a program.  Text\nis displayed using @code{typewriter} font where possible.  Formatting,\ne.g.@: line breaks, is preserved.  (Note that this includes a line break\nafter the initial @{, so typically text should start on the same line as\nthe command.)\n\nDue to limitations in @LaTeX{} as of this writing, this macro may not be\nnested within other markup macros other than @code{\\dQuote} and\n@code{\\sQuote}, as errors or bad formatting may result.\n\n@item \\kbd@{@var{keyboard-characters}@}\n@findex \\kbd\nIndicate keyboard input, using @kbd{slanted typewriter} font if\npossible, so users can distinguish the characters they are supposed to\ntype from computer output.  Text is entered `verbatim'.\n\n@item \\samp@{@var{text}@}\n@findex \\samp\nIndicate text that is a literal example of a sequence of characters,\nentered `verbatim'.  No wrapping or reformatting will occur.  Displayed\nusing @code{typewriter} font where possible.\n\n\n@item \\verb@{@var{text}@}\n@findex \\verb\nIndicate text that is a literal example of a sequence of characters,\nwith no interpretation of e.g.@: @code{\\var}, but which will be included\nwithin word-wrapped text.  Displayed using @code{typewriter} font if\npossible.\n\n@item \\pkg@{@var{package_name}@}\n@findex \\pkg\nIndicate the name of an @R{} package.  @LaTeX{}-like.\n\n@item \\file@{@var{file_name}@}\n@findex \\file\nIndicate the name of a file.  Text is @LaTeX{}-like, so backslash needs\nto be escaped.  Displayed using a distinct font where possible.\n\n@item \\email@{@var{email_address}@}\n@findex \\email\nIndicate an electronic mail address.  @LaTeX{}-like, will be rendered as\na hyperlink in @HTML{} and PDF conversion.  Displayed using\n@code{typewriter} font where possible.\n\n@item \\url@{@var{uniform_resource_locator}@}\n@findex \\url\nIndicate a uniform resource locator (@acronym{URL}) for the World Wide\nWeb.  The argument is handled as `verbatim' text (with percent and\nbraces escaped by backslash), and rendered as a hyperlink in @HTML{} and\nPDF conversion.  Linefeeds are removed, and leading and trailing\nwhitespace@footnote{as defined by the @R{} function @code{trimws}.} is\nremoved. @xref{Specifying URLs}.\n\nDisplayed using @code{typewriter} font where possible.\n\n@item \\href@{@var{uniform_resource_locator}@}@{@var{text}@}\n@findex \\href\nIndicate a hyperlink to the World Wide Web. The first argument is\nhandled as `verbatim' text (with percent and braces escaped by\nbackslash) and is used as the @acronym{URL} in the hyperlink, with the\nsecond argument of @LaTeX{}-like text displayed to the user.  Linefeeds\nare removed from the first argument, and leading and trailing whitespace\nis removed.\n\nNote that RFC3986-encoded URLs (e.g.@: using @samp{\\%28VS.85\\%29} in\nplace of @samp{(VS.85)}) may not work correctly in versions of @R{}\nbefore 3.1.3 and are best avoided---use @code{URLdecode()} to decode\nthem.\n\n@item \\var@{@var{metasyntactic_variable}@}\n@findex \\var\nIndicate a metasyntactic variable.  In some cases this will be rendered\ndistinctly, e.g.@: in italic, but not in all@footnote{Currently it is\nrendered differently only in @HTML{} conversions, and @LaTeX{} conversion\noutside @samp{\\usage} and @samp{\\examples} environments.}. @LaTeX{}-like.\n@item \\env@{@var{environment_variable}@}\n@findex \\env\nIndicate an environment variable. `Verbatim'.\nDisplayed using @code{typewriter} font where possible\n@item \\option@{@var{option}@}\n@findex \\option\nIndicate a command-line option.  `Verbatim'.\nDisplayed using @code{typewriter} font where possible.\n@item \\command@{@var{command_name}@}\n@findex \\command\nIndicate the name of a command. @LaTeX{}-like, so @code{\\var} is\ninterpreted.  Displayed using @code{typewriter} font where possible.\n@item \\dfn@{@var{term}@}\n@findex \\dfn\nIndicate the introductory or defining use of a term. @LaTeX{}-like.\n@item \\cite@{@var{reference}@}\n@findex \\cite\nIndicate a reference without a direct cross-reference @emph{via} @code{\\link}\n(@pxref{Cross-references}), such as the name of a book. @LaTeX{}-like.\n@item \\acronym@{@var{acronym}@}\n@findex \\acronym\nIndicate an acronym (an abbreviation written in all capital letters),\nsuch as @acronym{GNU}. @LaTeX{}-like.\n@end table\n\n\n@node Lists and tables, Cross-references, Marking text, Writing R documentation files\n@section Lists and tables\n@cindex Lists and tables in documentation\n\n@findex \\itemize\n@findex \\enumerate\nThe @code{\\itemize} and @code{\\enumerate} commands take a single\nargument, within which there may be one or more @code{\\item} commands.\nThe text following each @code{\\item} is formatted as one or more\nparagraphs, suitably indented and with the first paragraph marked with a\nbullet point (@code{\\itemize}) or a number (@code{\\enumerate}).\n\nNote that unlike argument lists, @code{\\item} in these formats is\nfollowed by a space and the text (not enclosed in braces).  For example\n\n@example\n  \\enumerate@{\n    \\item A database consists of one or more records, each with one or\n    more named fields.\n    \\item Regular lines start with a non-whitespace character.\n    \\item Records are separated by one or more empty lines.\n  @}\n@end example\n\n@code{\\itemize} and @code{\\enumerate} commands may be nested.\n\n@findex \\describe\nThe @code{\\describe} command is similar to @code{\\itemize} but allows\ninitial labels to be specified.  Each @code{\\item} takes two arguments,\nthe label and the body of the item, in exactly the same way as an\nargument or value @code{\\item}.  @code{\\describe} commands are mapped to\n@code{<DL>} lists in @HTML{} and @code{\\description} lists in @LaTeX{}.\n\n@findex \\tabular\nThe @code{\\tabular} command takes two arguments.  The first gives for\neach of the columns the required alignment (@samp{l} for\nleft-justification, @samp{r} for right-justification or @samp{c} for\ncentring.)  The second argument consists of an arbitrary number of\nlines separated by @code{\\cr}, and with fields separated by @code{\\tab}.\nFor example:\n\n@example\n@group\n  \\tabular@{rlll@}@{\n    [,1] \\tab Ozone   \\tab numeric \\tab Ozone (ppb)\\cr\n    [,2] \\tab Solar.R \\tab numeric \\tab Solar R (lang)\\cr\n    [,3] \\tab Wind    \\tab numeric \\tab Wind (mph)\\cr\n    [,4] \\tab Temp    \\tab numeric \\tab Temperature (degrees F)\\cr\n    [,5] \\tab Month   \\tab numeric \\tab Month (1--12)\\cr\n    [,6] \\tab Day     \\tab numeric \\tab Day of month (1--31)\n  @}\n@end group\n@end example\n\n@noindent\nThere must be the same number of fields on each line as there are\nalignments in the first argument, and they must be non-empty (but can\ncontain only spaces).  (There is no whitespace between @code{\\tabular}\nand the first argument, nor between the two arguments.)\n\n@node Cross-references, Mathematics, Lists and tables, Writing R documentation files\n@section Cross-references\n@cindex Cross-references in documentation\n\n@findex \\link\nThe markup @code{\\link@{@var{foo}@}} (usually in the combination\n@code{\\code@{\\link@{@var{foo}@}@}}) produces a hyperlink to the help for\n@var{foo}.  Here @var{foo} is a @emph{topic}, that is the argument of\n@code{\\alias} markup in another @file{Rd} file (possibly in another package).\nHyperlinks are supported in some of the formats to which @file{Rd} files are\nconverted, for example @HTML{} and PDF, but ignored in others, e.g.@:\nthe text format.\n\nOne main usage of @code{\\link} is in the @code{\\seealso} section of the\nhelp page, @pxref{Rd format}.\n\nNote that whereas leading and trailing spaces are stripped when\nextracting a topic from a @code{\\alias}, they are not stripped when\nlooking up the topic of a @code{\\link}.\n\n@cindex \\linkS4class\nYou can specify a link to a different topic than its name by\n@code{\\link[=@var{dest}]@{@var{name}@}} which links to topic @var{dest}\nwith name @var{name}.  This can be used to refer to the documentation\nfor S3/4 classes, for example @code{\\code@{\"\\link[=abc-class]@{abc@}\"@}}\nwould be a way to refer to the documentation of an S4 class @code{\"abc\"}\ndefined in your package, and\n@code{\\code@{\"\\link[=terms.object]@{terms@}\"@}} to the S3 @code{\"terms\"}\nclass (in package @pkg{stats}).  To make these easy to read in the\nsource file, @code{\\code@{\"\\linkS4class@{abc@}\"@}} expands to the form\ngiven above.\n\nThere are two other forms of optional argument specified as\n@code{\\link[@var{pkg}]@{@var{foo}@}} and\n@code{\\link[@var{pkg:bar}]@{@var{foo}@}} to link to the package\n@pkg{@var{pkg}}, to @emph{files} @file{@var{foo}.html} and\n@file{@var{bar}.html} respectively.  These are rarely needed, perhaps to\nrefer to not-yet-installed packages (but there the @HTML{} help system\nwill resolve the link at run time) or in the normally undesirable event\nthat more than one package offers help on a topic@footnote{a common\nexample in @acronym{CRAN} packages is @code{\\link[mgcv]@{gam@}}.} (in\nwhich case the present package has precedence so this is only needed to\nrefer to other packages).  They are currently only used in @HTML{} help\n(and ignored for hyperlinks in @LaTeX{} conversions of help pages), and\nlink to the file rather than the topic (since there is no way to know\nwhich topics are in which files in an uninstalled package).  The\n@strong{only} reason to use these forms for base and recommended\npackages is to force a reference to a package that might be further down\nthe search path.  Because they have been frequently misused, the @HTML{}\nhelp system looks for topic @code{@var{foo}} in package @pkg{@var{pkg}}\nif it does not find file @file{@var{foo}.html}.\n\n@node Mathematics, Figures, Cross-references, Writing R documentation files\n@section Mathematics\n@cindex Mathematics in documentation\n@findex \\eqn\n@findex \\deqn\n\nMathematical formulae should be set beautifully for printed\ndocumentation yet we still want something useful for text and @HTML{}\nonline help.  To this end, the two commands\n@code{\\eqn@{@var{latex}@}@{@var{ascii}@}} and\n@code{\\deqn@{@var{latex}@}@{@var{ascii}@}} are used.  Whereas @code{\\eqn}\nis used for ``inline'' formulae (corresponding to @TeX{}'s\n@code{$@dots{}$}), @code{\\deqn} gives ``displayed equations'' (as in\n@LaTeX{}'s @code{displaymath} environment, or @TeX{}'s\n@code{$$@dots{}$$}).  Both arguments are treated as `verbatim' text.\n\nBoth commands can also be used as @code{\\eqn@{@var{latexascii}@}} (only\n@emph{one} argument) which then is used for both @var{latex} and\n@var{ascii}.  No whitespace is allowed between command and the first\nargument, nor between the first and second arguments.\n\nThe following example is from @file{Poisson.Rd}:\n\n@example\n@group\n  \\deqn@{p(x) = \\frac@{\\lambda^x e^@{-\\lambda@}@}@{x!@}@}@{%\n        p(x) = \\lambda^x exp(-\\lambda)/x!@}\n  for \\eqn@{x = 0, 1, 2, \\ldots@}.\n@end group\n@end example\n\n@iftex\nFor the @LaTeX{} manual, this becomes\n@c: Name-and-shame for Brian Diggs:\n@c: this is TeXinfo markup, not the result of the conversions.\n@quotation\n@cartouche\n@tex\n$$ p(x) = \\lambda^x\\ {e^{-\\lambda} \\over x!} $$\nfor $x = 0, 1, 2, \\ldots$.\n@end tex\n@end cartouche\n@end quotation\n@end iftex\n\nFor text on-line help we get\n\n@quotation\n@cartouche\n@example\n    p(x) = lambda^x exp(-lambda)/x!\n\nfor x = 0, 1, 2, ....\n@end example\n@end cartouche\n@end quotation\n\nGreek letters (both cases) will be rendered in @HTML{} if preceded by a\nbackslash, @code{\\dots} and @code{\\ldots} will be rendered as ellipses\nand @code{\\sqrt}, @code{\\ge} and @code{\\le} as mathematical symbols.\n\nNote that only basic @LaTeX{} can be used, there being no provision to\nspecify @LaTeX{} style files such as the AMS extensions.\n\n@node Figures, Insertions, Mathematics, Writing R documentation files\n@section Figures\n@cindex Figures in documentation\n@findex \\figure\n\nTo include figures in help pages, use the @code{\\figure} markup.  There\nare three forms.\n\nThe two commonly used simple forms are @code{\\figure@{@var{filename}@}}\nand @code{\\figure@{@var{filename}@}@{@var{alternate text}@}}.  This will\ninclude a copy of the figure in either @HTML{} or @LaTeX{} output.  In text\noutput, the alternate text will be displayed instead.  (When the second\nargument is omitted, the filename will be used.)  Both the filename and\nthe alternate text will be parsed verbatim, and should not include\nspecial characters that are significant in @HTML{} or @LaTeX{}.\n\nThe expert form is @code{\\figure@{@var{filename}@}@{options:\n@var{string}@}}.  (The word @samp{options:} must be typed exactly as\nshown and followed by at least one space.)  In this form, the\n@var{string} is copied into the @HTML{} @code{img} tag as attributes\nfollowing the @code{src} attribute, or into the second argument of the\n@code{\\Figure} macro in @LaTeX{}, which by default is used as options to\nan @code{\\includegraphics} call.  As it is unlikely that any single\nstring would suffice for both display modes, the expert form would\nnormally be wrapped in conditionals.  It is up to the author to make\nsure that legal @HTML{}/@LaTeX{} is used.  For example, to include a\nlogo in both @HTML{} (using the simple form) and @LaTeX{} (using the\nexpert form), the following could be used:\n\n@example\n\\if@{html@}@{\\figure@{Rlogo.svg@}@{options: width=100 alt=\"R logo\"@}@}\n\\if@{latex@}@{\\figure@{Rlogo.pdf@}@{options: width=0.5in@}@}\n@end example\n\nThe files containing the figures should be stored in the directory\n@file{man/figures}.  Files with extensions @file{.jpg}, @file{.jpeg},\n@file{.pdf}, @file{.png} and @file{.svg} from that directory will be\ncopied to the @file{help/figures} directory at install time. (Figures in\nPDF format will not display in most @HTML{} browsers, but might be the\nbest choice in reference manuals.)  Specify the filename relative to\n@file{man/figures} in the @code{\\figure} directive.\n\n@node Insertions, Indices, Figures, Writing R documentation files\n@section Insertions\n\n@findex \\R\nUse @code{\\R} for the @R{} system itself.  Use @code{\\dots}\n@findex \\dots\nfor the dots in function argument lists @samp{@dots{}}, and\n@code{\\ldots}\n@findex \\ldots\nfor ellipsis dots in ordinary text.@footnote{There is only a fine\ndistinction between @code{\\dots} and @code{\\ldots}.  It is technically\nincorrect to use @code{\\ldots} in code blocks and @code{tools::checkRd}\nwill warn about this---on the other hand the current converters treat\nthem the same way in code blocks, and elsewhere apart from the small\ndistinction between the two in @LaTeX{}.}  These can be followed by\n@code{@{@}}, and should be unless followed by whitespace.\n\nAfter an unescaped @samp{%}, you can put your own comments regarding the\nhelp text.  The rest of the line (but not the newline at the end) will\nbe completely disregarded.  Therefore, you can also use it to make part\nof the ``help'' invisible.\n\nYou can produce a backslash (@samp{\\}) by escaping it by another\nbackslash.  (Note that @code{\\cr} is used for generating line breaks.)\n\nThe ``comment'' character @samp{%} and unpaired braces@footnote{See the\nexamples section in the file @file{Paren.Rd} for an example.}\n@emph{almost always} need to be escaped by @samp{\\}, and @samp{\\\\} can\nbe used for backslash and needs to be when there are two or more adjacent\nbackslashes.  In @R{}-like code quoted strings are handled slightly\ndifferently; see @uref{https://developer.r-project.org/parseRd.pdf,\n``Parsing Rd files''} for details -- in particular braces should not be\nescaped in quoted strings.\n\nAll of @samp{% @{ @} \\} should be escaped in @LaTeX{}-like text.\n\n@findex \\enc\nText which might need to be represented differently in different\nencodings should be marked by @code{\\enc}, e.g.@:\n@code{\\enc@{J@\"oreskog@}@{Joreskog@}} (with no whitespace between the\nbraces) where the first argument will be used where encodings are\nallowed and the second should be @acronym{ASCII} (and is used for e.g.@:\nthe text conversion in locales that cannot represent the encoded form).\n(This is intended to be used for individual words, not whole sentences\nor paragraphs.)\n\n@node Indices, Platform-specific sections, Insertions, Writing R documentation files\n@section Indices\n@cindex Indices\n\nThe @code{\\alias} command (@pxref{Documenting functions}) is used to\nspecify the ``topics'' documented, which should include @emph{all} @R{}\nobjects in a package such as functions and variables, data sets, and S4\nclasses and methods (@pxref{Documenting S4 classes and methods}).  The\non-line help system searches the index data base consisting of all\nalias topics.\n\n@findex \\concept\nIn addition, it is possible to provide ``concept index entries'' using\n@code{\\concept}, which can be used for @code{help.search()} lookups.\nE.g., file @file{cor.test.Rd} in the standard package @pkg{stats}\ncontains\n\n@example\n\\concept@{Kendall correlation coefficient@}\n\\concept@{Pearson correlation coefficient@}\n\\concept@{Spearman correlation coefficient@}\n@end example\n\n@noindent\nso that e.g.@: @kbd{??Spearman} will succeed in finding the\nhelp page for the test for association between paired samples using\nSpearman's @eqn{\\rho, rho}.\n\n\n(Note that @code{help.search()} only uses ``sections'' of documentation\nobjects with no additional markup.)\n\nIf you want to cross reference such items from other help files @emph{via}\n@code{\\link}, you need to use @code{\\alias} and not @code{\\concept}.\n\n\n@node  Platform-specific sections, Conditional text, Indices, Writing R documentation files\n@section Platform-specific documentation\n@cindex Platform-specific documentation\n\nSometimes the documentation needs to differ by platform.  Currently two\nOS-specific options are available, @samp{unix} and @samp{windows}, and\nlines in the help source file can be enclosed in\n\n@example\n@group\n#ifdef @var{OS}\n   ...\n#endif\n@end group\n@end example\n\n@noindent\nor\n\n@example\n@group\n#ifndef @var{OS}\n   ...\n#endif\n@end group\n@end example\n\n@noindent\nfor OS-specific inclusion or exclusion.  Such blocks should not be\nnested, and should be entirely within a block (that, is between the\nopening and closing brace of a section or item), or at top-level contain\none or more complete sections.\n\nIf the differences between platforms are extensive or the @R{} objects\ndocumented are only relevant to one platform, platform-specific @file{Rd} files\ncan be put in a @file{unix} or @file{windows} subdirectory.\n\n@node  Conditional text, Dynamic pages, Platform-specific sections, Writing R documentation files\n@section Conditional text\n@cindex conditionals\n@findex \\if\n@findex \\ifelse\n@findex \\out\n\nOccasionally the best content for one output format is different from\nthe best content for another.  For this situation, the\n@code{\\if@{@var{format}@}@{@var{text}@}} or\n@code{\\ifelse@{@var{format}@}@{@var{text}@}@{@var{alternate}@}} markup\nis used.  Here @var{format} is a comma separated list of formats in\nwhich the @var{text} should be rendered.  The @var{alternate} will be\nrendered if the format does not match.  Both @var{text} and\n@var{alternate} may be any sequence of text and markup.\n\nCurrently the following formats are recognized:  @code{example},\n@code{html}, @code{latex} and @code{text}.  These select output for\nthe corresponding targets. (Note that @code{example} refers to\nextracted example code rather than the displayed example in some other\nformat.)  Also accepted are @code{TRUE} (matching all formats) and\n@code{FALSE} (matching no formats).  These could be the output\nof the @code{\\Sexpr} macro (@pxref{Dynamic pages}).\n\nThe @code{\\out@{@var{literal}@}} macro would usually be used within\nthe @var{text} part of @code{\\if@{@var{format}@}@{@var{text}@}}.  It\ncauses the renderer to output the literal text exactly, with no\nattempt to escape special characters.  For example, use\nthe following to output the markup necessary to display the Greek letter in\n@LaTeX{} or @HTML{}, and the text string @code{alpha} in other formats:\n@example\n\\ifelse@{latex@}@{\\out@{$\\alpha$@}@}@{\\ifelse@{html@}@{\\out@{&alpha;@}@}@{alpha@}@}\n@end example\n\n@node Dynamic pages, User-defined macros, Conditional text, Writing R documentation files\n@section Dynamic pages\n@cindex dynamic pages\n@findex \\Sexpr\n@findex \\RdOpts\n\nTwo macros supporting dynamically generated man pages are @code{\\Sexpr}\nand @code{\\RdOpts}.  These are modelled after Sweave, and are intended\nto contain executable @R{} expressions in the @file{Rd} file.\n\nThe main argument to @code{\\Sexpr} must be valid @R{} code that can be\nexecuted. It may also take options in square brackets before the main\nargument. Depending on the options, the code may be executed at\npackage build time, package install time, or man page rendering time.\n\nThe options follow the same format as in Sweave, but different options\nare supported.  Currently the allowed options and their defaults are:\n\n@itemize @bullet\n@item @code{eval=TRUE}\nWhether the @R{} code should be evaluated.\n\n@item @code{echo=FALSE}\nWhether the @R{} code should be echoed.  If @code{TRUE}, a display will\nbe given in a preformatted block.  For example,\n@code{\\Sexpr[echo=TRUE]@{ x <- 1 @}} will be displayed as\n@example\n> x <- 1\n@end example\n\n@item @code{keep.source=TRUE}\nWhether to keep the author's formatting when displaying the\ncode, or throw it away and use a deparsed version.\n\n@item @code{results=text}\nHow should the results be displayed?  The possibilities\nare:\n\n@itemize @minus\n@item @code{results=text}\nApply @code{as.character()} to the result of the code, and insert it\nas a text element.\n\n@item @code{results=verbatim}\nPrint the results of the code just as if it was executed at the console,\nand include the printed results verbatim.  (Invisible results will not print.)\n\n@item @code{results=rd}\nThe result is assumed to be a character vector containing markup to be\npassed to @code{parse_Rd()}, with the result inserted in place.  This\ncould be used to insert computed aliases, for instance.\n@code{parse_Rd()} is called first with @code{fragment = FALSE} to allow\na single Rd section macro to be inserted.  If that fails, it is called\nagain with @code{fragment = TRUE}, the older behavior.\n\n@item @code{results=hide}\nInsert no output.\n@end itemize\n\n@item @code{strip.white=TRUE}\nRemove leading and trailing white space from each line of\noutput if @code{strip.white=TRUE}.  With\n@code{strip.white=all}, also remove blank lines.\n\n@item @code{stage=install}\nControl when this macro is run.  Possible values are\n@itemize @minus\n@item @code{stage=build}\nThe macro is run when building a source tarball.\n\n@item @code{stage=install}\nThe macro is run when installing from source.\n\n@item @code{stage=render}\nThe macro is run when displaying the help page.\n@end itemize\n\nConditionals such as @code{#ifdef}\n(@pxref{Platform-specific sections}) are applied after the\n@code{build} macros but before the @code{install} macros.  In some\nsituations (e.g. installing directly from a source directory without a\ntarball, or building a binary package) the above description is not\nliterally accurate, but authors can rely on the sequence being\n@code{build}, @code{#ifdef}, @code{install}, @code{render}, with all\nstages executed.\n\nCode is only run once in each stage, so a @code{\\Sexpr[results=rd]}\nmacro can output an @code{\\Sexpr} macro designed for a later stage,\nbut not for the current one or any earlier stage.\n\n@item @code{width, height, fig}\nThese options are currently allowed but ignored.\n@end itemize\n\nThe @code{\\RdOpts} macro is used to set new defaults for options to apply\nto following uses of @code{\\Sexpr}.\n\nFor more details, see the online document\n@uref{https://developer.r-project.org/parseRd.pdf, ``Parsing Rd files''}.\n\n@node User-defined macros, Encoding, Dynamic pages, Writing R documentation files\n@section User-defined macros\n@cindex user-defined macros\n@findex \\newcommand\n@findex \\renewcommand\n\nThe @code{\\newcommand} and @code{\\renewcommand} macros allow new macros\nto be defined within an Rd file.  These are similar but not identical to\nthe same-named @LaTeX{} macros.\n\nThey each take two arguments which are parsed verbatim.  The first is\nthe name of the new macro including the initial backslash, and the second\nis the macro definition.  As in @LaTeX{}, @code{\\newcommand} requires that the\nnew macro not have been previously defined, whereas @code{\\renewcommand}\nallows existing macros (including all built-in ones) to be replaced.\n(As from version 3.2.0, this test is disabled by default, but may\nbe enabled by setting the environment variable @env{_WARN_DUPLICATE_RD_MACROS_}\nto a true value.)\n\nAlso as in @LaTeX{}, the new macro may be defined to take arguments,\nand numeric placeholders such as @code{#1} are used in the macro\ndefinition. However, unlike @LaTeX{}, the number of arguments is\ndetermined automatically from the highest placeholder number seen in\nthe macro definition.  For example, a macro definition containing\n@code{#1} and @code{#3} (but no other placeholders) will define a\nthree argument macro (whose second argument will be ignored). As in\n@LaTeX{}, at most 9 arguments may be defined. If the @code{#}\ncharacter is followed by a non-digit it will have no special\nsignificance.  All arguments to user-defined macros will be parsed as\nverbatim text, and simple text-substitution will be used to replace\nthe place-holders, after which the replacement text will be parsed.\n\nAs of @R{} version 3.2.0, a number of macros are defined in the file\n@file{share/Rd/macros/system.Rd} of the @R{} source or home\ndirectory, and these will normally be available in all @file{.Rd} files.\nFor example, that file contains the definition\n@example\n\\newcommand@{\\PR@}@{\\Sexpr[results=rd]@{tools:::Rd_expr_PR(#1)@}@}\n@end example\n@noindent\nwhich defines @code{\\PR} to be a single argument macro; then code\n(typically used in the @file{NEWS.Rd} file) like\n@example\n\\PR@{1234@}\n@end example\n@noindent\nwill expand to\n@example\n\\Sexpr[results=rd]@{tools:::Rd_expr_PR(1234)@}\n@end example\n@noindent\nwhen parsed.  \n\nSome macros that might be of general use are:\n@ftable @code\n@item \\CRANpkg@{@var{pkg}@}\nA package on CRAN\n\n@item \\sspace\nA single space (used after a period that does not end a sentence).\n\n@item \\doi@{@var{numbers}@}\nA digital object identifier (DOI).\n@end ftable\nSee the @file{system.Rd} file in @file{share/Rd/macros} for more details\nand macro definitions, including macros @code{\\packageTitle},\n@code{\\packageDescription}, @code{\\packageAuthor}, @code{\\packageMaintainer},\n@code{\\packageDESCRIPTION} and @code{\\packageIndices}.\n@findex @code{\\packageTitle}\n@findex @code{\\packageDescription}\n@findex @code{\\packageAuthor}\n@findex @code{\\packageMaintainer}\n@findex @code{\\packageDESCRIPTION}\n@findex @code{\\packageIndices}\n\n\nPackages may also define their own common macros; these would be stored\nin an @file{.Rd} file in @file{man/macros} in the package source and\nwill be installed into @file{help/macros} when the package is installed.\nA package may also use the macros from a different package by listing\nthe other package in the @samp{RdMacros} field in the @file{DESCRIPTION}\nfile.\n\n\n\n@node Encoding, Processing documentation files, User-defined macros, Writing R documentation files\n@section Encoding\n@cindex encoding\n\nRd files are text files and so it is impossible to deduce the encoding\nthey are written in unless @acronym{ASCII}: files with 8-bit characters\ncould be UTF-8, Latin-1, Latin-9, KOI8-R, EUC-JP, @emph{etc}.  So an\n@code{\\encoding@{@}} section must be used to specify the encoding if it\nis not @acronym{ASCII}.  (The @code{\\encoding@{@}} section must be on a\nline by itself, and in particular one containing no non-@acronym{ASCII}\ncharacters.  The encoding declared in the @file{DESCRIPTION} file will\nbe used if none is declared in the file.)  The @file{Rd} files are\nconverted to UTF-8 before parsing and so the preferred encoding for the\nfiles themselves is now UTF-8.\n\nWherever possible, avoid non-@acronym{ASCII} chars in @file{Rd} files, and\neven symbols such as @samp{<}, @samp{>}, @samp{$}, @samp{^}, @samp{&},\n@samp{|}, @samp{@@}, @samp{~}, and @samp{*} outside `verbatim'\nenvironments (since they may disappear in fonts designed to render\ntext).  (Function @code{showNonASCIIfile} in package @pkg{tools} can help\nin finding non-@acronym{ASCII} bytes in the files.)\n\nFor convenience, encoding names @samp{latin1} and @samp{latin2} are\nalways recognized: these and @samp{UTF-8} are likely to work fairly\nwidely.  However, this does not mean that all characters in UTF-8 will\nbe recognized, and the coverage of non-Latin characters@footnote{@R{}\n2.9.0 added support for UTF-8 Cyrillic characters in @LaTeX{}, but on\nsome OSes this will need Cyrillic support added to @LaTeX{}, so\nenvironment variable @env{_R_CYRILLIC_TEX_} may need to be set to a\nnon-empty value to enable this.} is fairly low.  Using @LaTeX{}\n@code{inputenx} (see @code{?Rd2pdf} in @R{}) will give greater coverage\nof UTF-8.\n\nThe @code{\\enc} command (@pxref{Insertions}) can be used to provide\ntransliterations which will be used in conversions that do not support\nthe declared encoding.\n\nThe @LaTeX{} conversion converts the file to UTF-8 from the declared\nencoding, and includes a\n\n@example\n\\inputencoding@{utf8@}\n@end example\n\n@noindent\ncommand, and this needs to be matched by a suitable invocation of the\n@command{\\usepackage@{inputenc@}} command.  The @R{} utility @command{R\nCMD Rd2pdf} looks at the converted code and includes the encodings used:\nit might for example use\n\n@example\n\\usepackage[utf8]@{inputenc@}\n@end example\n\n@noindent\n(Use of @code{utf8} as an encoding requires @LaTeX{} dated 2003/12/01 or\nlater.  Also, the use of Cyrillic characters in @samp{UTF-8} appears to\nalso need @samp{\\usepackage[T2A]@{fontenc@}}, and @command{R CMD Rd2pdf}\nincludes this conditionally on the file @file{t2aenc.def} being present\nand environment variable @env{_R_CYRILLIC_TEX_} being set.)\n\nNote that this mechanism works best with Latin letters: the coverage of\nUTF-8 in @LaTeX{} is quite low.\n\n\n\n@node Processing documentation files, Editing Rd files, Encoding, Writing R documentation files\n@section Processing documentation files\n@cindex Processing Rd format\n\nThere are several commands to process Rd files from the system command\nline.\n\n@findex R CMD Rdconv\nUsing @code{R CMD Rdconv} one can convert @R{} documentation format to\nother formats, or extract the executable examples for run-time testing.\nThe currently supported conversions are to plain text, @HTML{} and\n@LaTeX{} as well as extraction of the examples.\n\n@findex R CMD Rd2pdf\n@code{R CMD Rd2pdf} generates PDF output from documentation in @file{Rd}\nfiles, which can be specified either explicitly or by the path to a\ndirectory with the sources of a package.  In the latter case, a\nreference manual for all documented objects in the package is created,\nincluding the information in the @file{DESCRIPTION} files.\n\n@findex R CMD Sweave\n@findex R CMD Stangle\n@code{R CMD Sweave} and @code{R CMD Stangle} process vignette-like\ndocumentation files (e.g. Sweave vignettes with extension\n@samp{.Snw} or @samp{.Rnw}, or other non-Sweave vignettes).\n@code{R CMD Stangle} is used to extract the @R{} code fragments.\n\nThe exact usage and a detailed list of available options for all of\nthese commands can be obtained by running @code{R CMD @var{command}\n--help}, e.g., @kbd{R CMD Rdconv --help}.  All available commands can be\nlisted using @kbd{R --help} (or @kbd{Rcmd --help} under Windows).\n\nAll of these work under Windows.  You may need to have installed the\nthe tools to build packages from source as described in the ``R\nInstallation and Administration'' manual, although typically all that is\nneeded is a @LaTeX{} installation.\n\n@node Editing Rd files,  , Processing documentation files, Writing R documentation files\n@section Editing Rd files\n@cindex Editing Rd files\n\nIt can be very helpful to prepare @file{.Rd} files using a editor which\nknows about their syntax and will highlight commands, indent to show the\nstructure and detect mis-matched braces, and so on.\n\nThe system most commonly used for this is some version of\n@command{Emacs} (including @command{XEmacs}) with the @acronym{ESS}\npackage (@uref{https://ESS.R-project.org/}: it is often is installed with\n@command{Emacs} but may need to be loaded, or even installed,\nseparately).\n\nAnother is the Eclipse IDE with the Stat-ET plugin\n(@uref{http://www.walware.de/goto/statet}), and (on Windows only)\nTinn-R (@uref{http://sourceforge.net/@/projects/@/tinn-r/}).\n\nPeople have also used @LaTeX{} mode in a editor, as @file{.Rd} files are\nrather similar to @LaTeX{} files.\n\nSome @R{} front-ends provide editing support for  @file{.Rd} files, for\nexample RStudio (@uref{https://rstudio.org/}).\n\n@node Tidying and profiling R code, Debugging, Writing R documentation files, Top\n@chapter Tidying and profiling R code\n\n@menu\n* Tidying R code::              \n* Profiling R code for speed::  \n* Profiling R code for memory use::  \n* Profiling compiled code::     \n@end menu\n\n@R{} code which is worth preserving in a package and perhaps making\navailable for others to use is worth documenting, tidying up and perhaps\noptimizing. The last two of these activities are the subject of this\nchapter.\n\n@node Tidying R code, Profiling R code for speed, Tidying and profiling R code, Tidying and profiling R code\n@section Tidying R code\n@cindex Tidying R code\n\n@R{} treats function code loaded from packages and code entered by users\ndifferently.  By default code entered by users has the source code stored\ninternally, and when the function is listed, the original source is\nreproduced.  Loading code from a package (by default) discards the\nsource code, and the function listing is re-created from the parse tree\nof the function.\n\nNormally keeping the source code is a good idea, and in particular it\navoids comments being removed from the source.  However, we can make\nuse of the ability to re-create a function listing from its parse tree\nto produce a tidy version of the function, for example with consistent\nindentation and spaces around operators.  If the original source\ndoes not follow the standard format this tidied version can be much\neasier to read.\n\nWe can subvert the keeping of source in two ways.\n\n@enumerate\n@item\nThe option @code{keep.source} can be set to @code{FALSE} before the code\nis loaded into @R{}.\n@item\nThe stored source code can be removed by calling the @code{removeSource()}\nfunction, for example by\n\n@example\nmyfun <- removeSource(myfun)\n@end example\n\n@end enumerate\n\n@noindent\nIn each case if we then list the function we will get the standard\nlayout.\n\nSuppose we have a file of functions @file{myfuns.R} that we want to\ntidy up.  Create a file @file{tidy.R} containing\n\n@example\n@group\nsource(\"myfuns.R\", keep.source = FALSE)\ndump(ls(all = TRUE), file = \"new.myfuns.R\")\n@end group\n@end example\n\n@noindent\nand run @R{} with this as the source file, for example by @kbd{R\n--vanilla < tidy.R} or by pasting into an @R{} session.  Then the file\n@file{new.myfuns.R} will contain the functions in alphabetical order in\nthe standard layout.  Warning:  comments in your functions will be lost.\n\nThe standard format provides a good starting point for further tidying.\nAlthough the deparsing cannot do so, we recommend the consistent use of\nthe preferred assignment operator @samp{<-} (rather than @samp{=}) for\nassignment.  Many package authors use a version of Emacs (on a\nUnix-alike or Windows) to edit @R{} code, using the ESS[S] mode of the\n@acronym{ESS} Emacs package.  See @ref{R coding standards, , R coding\nstandards, R-ints, R Internals} for style options within the ESS[S] mode\nrecommended for the source code of @R{} itself.\n\n\n\n@node Profiling R code for speed, Profiling R code for memory use, Tidying R code, Tidying and profiling R code\n@section Profiling R code for speed\n@cindex Profiling\n@findex Rprof\n\nIt is possible to profile @R{} code on Windows and most@footnote{@R{}\nhas to be built to enable this, but the option\n@option{--enable-R-profiling} is the default.} Unix-alike versions of\n@R{}.\n\nThe command @command{Rprof} is used to control profiling, and its help\npage can be consulted for full details.  Profiling works by recording\nat fixed intervals@footnote{For Unix-alikes these are intervals of CPU\ntime, and for Windows of elapsed time.} (by default every 20 msecs)\nwhich line in which @R{} function is being used, and recording the\nresults in a file (default @file{Rprof.out} in the working directory).\nThen the function @code{summaryRprof} or the command-line utility\n@code{R CMD Rprof @var{Rprof.out}} can be used to summarize the\nactivity.\n\nAs an example, consider the following code (from Venables & Ripley,\n2002, pp. 225--6).\n\n@smallexample\n@group\nlibrary(MASS); library(boot)\nstorm.fm <- nls(Time ~ b*Viscosity/(Wt - c), stormer,\n                start = c(b=30.401, c=2.2183))\nst <- cbind(stormer, fit=fitted(storm.fm))\nstorm.bf <- function(rs, i) @{\n    st$Time <-  st$fit + rs[i]\n    tmp <- nls(Time ~ (b * Viscosity)/(Wt - c), st,\n               start = coef(storm.fm))\n    tmp$m$getAllPars()\n@}\nrs <- scale(resid(storm.fm), scale = FALSE) # remove the mean\nRprof(\"boot.out\")\nstorm.boot <- boot(rs, storm.bf, R = 4999) # slow enough to profile\nRprof(NULL)\n@end group\n@end smallexample\n\n@noindent\nHaving run this we can summarize the results by\n\n@smallexample\n@group\nR CMD Rprof boot.out\n\nEach sample represents 0.02 seconds.\nTotal run time: 22.52 seconds.\n\nTotal seconds: time spent in function and callees.\nSelf seconds: time spent in function alone.\n@end group\n\n@group\n   %       total       %        self\n total    seconds     self    seconds    name\n 100.0     25.22       0.2      0.04     \"boot\"\n  99.8     25.18       0.6      0.16     \"statistic\"\n  96.3     24.30       4.0      1.02     \"nls\"\n  33.9      8.56       2.2      0.56     \"<Anonymous>\"\n  32.4      8.18       1.4      0.36     \"eval\"\n  31.8      8.02       1.4      0.34     \".Call\"\n  28.6      7.22       0.0      0.00     \"eval.parent\"\n  28.5      7.18       0.3      0.08     \"model.frame\"\n  28.1      7.10       3.5      0.88     \"model.frame.default\"\n  17.4      4.38       0.7      0.18     \"sapply\"\n  15.0      3.78       3.2      0.80     \"nlsModel\"\n  12.5      3.16       1.8      0.46     \"lapply\"\n  12.3      3.10       2.7      0.68     \"assign\"\n ...\n@end group\n\n@group\n   %        self        %      total\n  self    seconds     total   seconds    name\n   5.7      1.44       7.5      1.88     \"inherits\"\n   4.0      1.02      96.3     24.30     \"nls\"\n   3.6      0.92       3.6      0.92     \"$\"\n   3.5      0.88      28.1      7.10     \"model.frame.default\"\n   3.2      0.80      15.0      3.78     \"nlsModel\"\n   2.8      0.70       9.8      2.46     \"qr.coef\"\n   2.7      0.68      12.3      3.10     \"assign\"\n   2.5      0.64       2.5      0.64     \".Fortran\"\n   2.5      0.62       7.1      1.80     \"qr.default\"\n   2.2      0.56      33.9      8.56     \"<Anonymous>\"\n   2.1      0.54       5.9      1.48     \"unlist\"\n   2.1      0.52       7.9      2.00     \"FUN\"\n  ...\n@end group\n@end smallexample\n\n@noindent\nThis often produces\nsurprising results and can be used to identify bottlenecks or pieces of\n@R{} code that could benefit from being replaced by compiled code.\n\nTwo warnings: profiling does impose a small performance penalty, and the\noutput files can be very large if long runs are profiled at the default\nsampling interval.\n\nProfiling short runs can sometimes give misleading results.  @R{} from\ntime to time performs @emph{garbage collection} to reclaim unused\nmemory, and this takes an appreciable amount of time which profiling\nwill charge to whichever function happens to provoke it.  It may be\nuseful to compare profiling code immediately after a call to @code{gc()}\nwith a profiling run without a preceding call to @code{gc}.\n\nMore detailed analysis of the output can be achieved by the tools in the\n@acronym{CRAN} packages @CRANpkg{proftools} and @CRANpkg{profr}: in\nparticular these allow call graphs to be studied.\n\n@node Profiling R code for memory use, Profiling compiled code, Profiling R code for speed, Tidying and profiling R code\n@section Profiling R code for memory use\n@cindex Profiling\n@cindex Memory use\n\nMeasuring memory use in @R{} code is useful either when the code takes\nmore memory than is conveniently available or when memory allocation and\ncopying of objects is responsible for slow code. There are three ways to\nprofile memory use over time in @R{} code. All three require @R{} to\nhave been compiled with @option{--enable-memory-profiling}, which is not\nthe default, but is currently used for the macOS and Windows binary\ndistributions. All can be misleading, for different reasons.\n\nIn understanding the memory profiles it is useful to know a little more\nabout @R{}'s memory allocation. Looking at the results of @code{gc()}\nshows a division of memory into @code{Vcells} used to store the contents\nof vectors and @code{Ncells} used to store everything else, including\nall the administrative overhead for vectors such as type and length\ninformation.  In fact the vector contents are divided into two\npools. Memory for small vectors (by default 128 bytes or less) is\nobtained in large chunks and then parcelled out by @R{}; memory for\nlarger vectors is obtained directly from the operating system.\n\nSome memory allocation is obvious in interpreted code, for example,\n\n@smallexample\ny <- x + 1\n@end smallexample\n\n@noindent\nallocates memory for a new vector @code{y}. Other memory allocation is\nless obvious and occurs because @code{R} is forced to make good on its\npromise of `call-by-value' argument passing.  When an argument is\npassed to a function it is not immediately copied. Copying occurs (if\nnecessary) only when the argument is modified.  This can lead to\nsurprising memory use. For example, in the `survey' package we have\n\n@smallexample\nprint.svycoxph <- function (x, ...)\n@{\n    print(x$survey.design, varnames = FALSE, design.summaries = FALSE, ...)\n    x$call <- x$printcall\n    NextMethod()\n@}\n@end smallexample\n\n@noindent\nIt may not be obvious that the assignment to @code{x$call} will cause\nthe entire object @code{x} to be copied.  This copying to preserve the\ncall-by-value illusion is usually done by the internal C function\n@code{duplicate}.\n\nThe main reason that memory-use profiling is difficult is garbage\ncollection. Memory is allocated at well-defined times in an @R{}\nprogram, but is freed whenever the garbage collector happens to run.\n\n@menu\n* Memory statistics from Rprof::  \n* Tracking memory allocations::  \n* Tracing copies of an object::  \n@end menu\n\n@node Memory statistics from Rprof, Tracking memory allocations, Profiling R code for memory use, Profiling R code for memory use\n@subsection Memory statistics from @code{Rprof}\n@findex Rprof\n@findex summaryRprof\n\nThe sampling profiler @code{Rprof} described in the previous section can\nbe given the option @code{memory.profiling=TRUE}. It then writes out the\ntotal @R{} memory allocation in small vectors, large vectors, and cons\ncells or nodes at each sampling interval. It also writes out the number\nof calls to the internal function @code{duplicate}, which is called to\ncopy @R{} objects. @code{summaryRprof} provides summaries of this\ninformation.  The main reason that this can be misleading is that the\nmemory use is attributed to the function running at the end of the\nsampling interval. A second reason is that garbage collection can make\nthe amount of memory in use decrease, so a function appears to use\nlittle memory.  Running under @code{gctorture} helps with both problems:\nit slows down the code to effectively increase the sampling frequency\nand it makes each garbage collection release a smaller amount of memory.\nChanging the memory limits with @code{mem.limits()} may also be useful,\nto see how the code would run under different memory conditions.\n\n@node Tracking memory allocations, Tracing copies of an object, Memory statistics from Rprof, Profiling R code for memory use\n@subsection Tracking memory allocations\n@findex Rprofmem\n\nThe second method of memory profiling uses a memory-allocation\nprofiler, @code{Rprofmem()}, which writes out a stack trace to an\noutput file every time a large vector is allocated (with a\nuser-specified threshold for `large') or a new page of memory is\nallocated for the @R{} heap. Summary functions for this output are still\nbeing designed.\n\nRunning the example from the previous section with\n\n@smallexample\n> Rprofmem(\"boot.memprof\",threshold=1000)\n> storm.boot <- boot(rs, storm.bf, R = 4999)\n> Rprofmem(NULL)\n@end smallexample\n\n@noindent\nshows that apart from some initial and final work in @code{boot} there\nare no vector allocations over 1000 bytes.\n\n@node  Tracing copies of an object,  , Tracking memory allocations, Profiling R code for memory use\n@subsection Tracing copies of an object\n@findex tracemem\n@findex untracemem\n\nThe third method of memory profiling involves tracing copies made of a\nspecific (presumably large) @R{} object. Calling @code{tracemem} on an\nobject marks it so that a message is printed to standard output when\nthe object is copied @emph{via} @code{duplicate} or coercion to another type,\nor when a new object of the same size is created in arithmetic\noperations. The main reason that this can be misleading is that\ncopying of subsets or components of an object is not tracked. It may\nbe helpful to use @code{tracemem} on these components.\n\n\nIn the example above we can run @code{tracemem} on the data frame\n@code{st}\n\n@smallexample\n> tracemem(st)\n[1] \"<0x9abd5e0>\"\n> storm.boot <- boot(rs, storm.bf, R = 4)\nmemtrace[0x9abd5e0->0x92a6d08]: statistic boot\nmemtrace[0x92a6d08->0x92a6d80]: $<-.data.frame $<- statistic boot\nmemtrace[0x92a6d80->0x92a6df8]: $<-.data.frame $<- statistic boot\nmemtrace[0x9abd5e0->0x9271318]: statistic boot\nmemtrace[0x9271318->0x9271390]: $<-.data.frame $<- statistic boot\nmemtrace[0x9271390->0x9271408]: $<-.data.frame $<- statistic boot\nmemtrace[0x9abd5e0->0x914f558]: statistic boot\nmemtrace[0x914f558->0x914f5f8]: $<-.data.frame $<- statistic boot\nmemtrace[0x914f5f8->0x914f670]: $<-.data.frame $<- statistic boot\nmemtrace[0x9abd5e0->0x972cbf0]: statistic boot\nmemtrace[0x972cbf0->0x972cc68]: $<-.data.frame $<- statistic boot\nmemtrace[0x972cc68->0x972cd08]: $<-.data.frame $<- statistic boot\nmemtrace[0x9abd5e0->0x98ead98]: statistic boot\nmemtrace[0x98ead98->0x98eae10]: $<-.data.frame $<- statistic boot\nmemtrace[0x98eae10->0x98eae88]: $<-.data.frame $<- statistic boot\n@end smallexample\n\n@noindent\nThe object is duplicated fifteen times, three times for each of the\n@code{R+1} calls to @code{storm.bf}.  This is surprising, since none of the duplications happen inside @code{nls}. Stepping through @code{storm.bf} in the debugger shows that all three happen in the line\n\n@smallexample\nst$Time <- st$fit + rs[i]\n@end smallexample\n\nData frames are slower than matrices and this is an example of why.\nUsing @code{tracemem(st$Viscosity)} does not reveal any additional\ncopying.\n\n@node Profiling compiled code,  , Profiling R code for memory use, Tidying and profiling R code\n@section Profiling compiled code\n@cindex Profiling\n\nProfiling compiled code is highly system-specific, but this section\ncontains some hints gleaned from various @R{} users.  Some methods need\nto be different for a compiled executable and for dynamic/shared\nlibraries/objects as used by @R{} packages.  We know of no good way to\nprofile DLLs on Windows.\n\n@menu\n* Linux::                       \n* Solaris::                     \n* macOS::                       \n@end menu\n\n@node Linux, Solaris, Profiling compiled code, Profiling compiled code\n@subsection Linux\n\nOptions include using @command{sprof} for a shared object, and\n@command{oprofile} (see @uref{http://oprofile.sourceforge.net/}) and\n@command{perf} (see\n@uref{https://perf.wiki.kernel.org/@/index.php/@/Tutorial}) for any\nexecutable or shared object.\n\n@subsubsection sprof\n\nYou can select shared objects to be profiled with @command{sprof} by\nsetting the environment variable @env{LD_PROFILE}.  For example\n\n@example\n% setenv LD_PROFILE /path/to/R_HOME/library/stats/libs/stats.so\nR\n... run the boot example\n% sprof /path/to/R_HOME/library/stats/libs/stats.so \\\n  /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile\n\nFlat profile:\n\nEach sample counts as 0.01 seconds.\n  %   cumulative   self              self     total\n time   seconds   seconds    calls  us/call  us/call  name\n 76.19      0.32     0.32        0     0.00           numeric_deriv\n 16.67      0.39     0.07        0     0.00           nls_iter\n  7.14      0.42     0.03        0     0.00           getListElement\n\nrm /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile\n... to clean up ...\n@end example\n\nIt is possible that root access is needed to create the directories used\nfor the profile data.\n\n@subsubsection oprofile and operf\n\nThe @command{oprofile} project has two modes of operation.  In what is\nnow called `legacy' mode, it is uses a daemon to collect information on\na process (see below).  Since version 0.9.8 (August 2012), the preferred\nmode is to use @command{operf}, so we discuss that first.  The modes\ndiffer in how the profiling data is collected: it is analysed by tools\nsuch as @command{opreport} and @command{oppannote} in both.\n\nHere is an example on @code{x86_64} Linux using @R{} 3.0.2.  File\n@file{pvec.R} contains the part of the examples from @code{pvec} in\npackage @pkg{parallel}:\n@example\nlibrary(parallel)\nN <- 1e6\ndates <- sprintf('%04d-%02d-%02d', as.integer(2000+rnorm(N)),\n                 as.integer(runif(N, 1, 12)), as.integer(runif(N, 1, 28)))\nsystem.time(a <- as.POSIXct(dates, format = \"%Y-%m-%d\"))\n@end example\n@noindent\nwith timings from the final step\n@example\n   user  system elapsed\n  0.371   0.237   0.612\n@end example\n\n@R{}-level profiling by @code{Rprof} shows\n@example\n                     self.time self.pct total.time total.pct\n\"strptime\"                1.70    41.06       1.70     41.06\n\"as.POSIXct.POSIXlt\"      1.40    33.82       1.42     34.30\n\"sprintf\"                 0.74    17.87       0.98     23.67\n...\n@end example\n@noindent\nso the conversion from character to @code{POSIXlt} takes most of the\ntime.\n\nThis can be run under @command{operf} and analysed by\n@example\noperf R -f pvec.R\nopreport\nopreport -l /path/to/R_HOME/bin/exec/R\nopannotate --source /path/to/R_HOME/bin/exec/R\n## And for the system time\nopreport -l /lib64/libc.so.6\n@end example\n@noindent\nThe first report shows where (which library etc) the time was spent:\n@example\nCPU_CLK_UNHALT...|\n  samples|      %|\n------------------\n   166761 99.9161 Rdev\n        CPU_CLK_UNHALT...|\n          samples|      %|\n        ------------------\n            70586 42.3276 no-vmlinux\n            56963 34.1585 libc-2.16.so\n            36922 22.1407 R\n             1584  0.9499 stats.so\n              624  0.3742 libm-2.16.so\n...\n@end example\n\n@noindent\nThe rest of the output is voluminous, and only extracts are shown below.\n\nMost of the time within @R{} is spent in\n@example\nsamples  %        image name symbol name\n10397    28.5123  R           R_gc_internal\n5683     15.5848  R           do_sprintf\n3036      8.3258  R           do_asPOSIXct\n2427      6.6557  R           do_strptime\n2421      6.6392  R           Rf_mkCharLenCE\n1480      4.0587  R           w_strptime_internal\n1202      3.2963  R           Rf_qnorm5\n1165      3.1948  R           unif_rand\n675       1.8511  R           mktime0\n617       1.6920  R           makelt\n617       1.6920  R           validate_tm\n584       1.6015  R           day_of_the_week\n...\n@end example\n@noindent\n@command{opannotate} shows that 31% of the time in @R{} is spent in\n@file{memory.c}, 21% in @file{datetime.c} and 7% in @file{Rstrptime.h}.\nThe analysis for @file{libc} showed that calls to @code{wcsftime}\ndominated, so those calls were cached for @R{} 3.0.3: the time spent in\n@code{no-vmlinux} (the kernel) was reduced dramatically.\n\nOn platforms which support it, call graphs can be produced by\n@command{opcontrol --callgraph} if collected via @command{operf\n--callgraph}.\n\nThe profiling data is by default stored in sub-directory\n@file{oprofile_data} of the current directory, which can be removed at\nthe end of the session.\n\nAnother example, from @CRANpkg{sm} version 2.2-5.4.  The example for\n@code{sm.variogram} took a long time:\n@example\nsystem.time(example(sm.variogram))\n...\n   user  system elapsed\n  5.543   3.202   8.785\n@end example\n\n@noindent\nincluding a lot of system time.  Profiling just the slow part, the\nsecond plot, showed\n\n@example\n  samples|      %|\n------------------\n   381845 99.9885 R\n        CPU_CLK_UNHALT...|\n          samples|      %|\n        ------------------\n           187484 49.0995 sm.so\n           169627 44.4230 no-vmlinux\n            12636  3.3092 libgfortran.so.3.0.0\n             6455  1.6905 R\n@end example\n\n@noindent\nso the system time was almost all in the Linux kernel.  It is possible\nto dig deeper if you have a matching uncompressed kernel with debug\nsymbols to specify @emph{via} @option{--vmlinux}: we did not.\n\nIn `legacy' mode @code{oprofile} works by running a daemon which\ncollects information.  The daemon must be started as root, e.g.\n\n@example\n% su\n% opcontrol --no-vmlinux\n% (optional, some platforms) opcontrol --callgraph=5\n% opcontrol --start\n% exit\n@end example\n\nThen as a user\n\n@example\n% R\n... run the boot example\n% opcontrol --dump\n% opreport -l /path/to/R_HOME/library/stats/libs/stats.so\n...\nsamples  %        symbol name\n1623     75.5939  anonymous symbol from section .plt\n349      16.2552  numeric_deriv\n113       5.2632  nls_iter\n62        2.8878  getListElement\n% opreport -l /path/to/R_HOME/bin/exec/R\n...\nsamples  %        symbol name\n76052    11.9912  Rf_eval\n54670     8.6198  Rf_findVarInFrame3\n37814     5.9622  Rf_allocVector\n31489     4.9649  Rf_duplicate\n28221     4.4496  Rf_protect\n26485     4.1759  Rf_cons\n23650     3.7289  Rf_matchArgs\n21088     3.3250  Rf_findFun\n19995     3.1526  findVarLocInFrame\n14871     2.3447  Rf_evalList\n13794     2.1749  R_Newhashpjw\n13522     2.1320  R_gc_internal\n...\n@end example\n\nShutting down the profiler and clearing the records needs to be done as\nroot.\n\n\n@node Solaris, macOS, Linux, Profiling compiled code\n@subsection Solaris\n\nOn 64-bit (only) Solaris, the standard profiling tool @command{gprof}\ncollects information from shared objects compiled with @option{-pg}.\n\n@node macOS,  , Solaris, Profiling compiled code\n@subsection macOS\n\nDevelopers have recommended @command{sample} (or @command{Sampler.app},\nwhich is a GUI version), @command{Shark} (in version of @code{Xcode}\nup to those for Snow Leopard), and @command{Instruments} (part of\n@code{Xcode}, see\n@uref{https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html}).\n\n\n@node Debugging, System and foreign language interfaces, Tidying and profiling R code, Top\n@chapter Debugging\n\nThis chapter covers the debugging of @R{} extensions, starting with the\nways to get useful error information and moving on to how to deal with\nerrors that crash @R{}.  For those who prefer other styles there are\ncontributed packages such as @CRANpkg{debug} on @acronym{CRAN}\n(described in an article in\n@uref{https://CRAN.R-project.org/@/doc/@/Rnews/@/Rnews_2003-3.pdf, R-News\n3/3}).  (There are notes from 2002 provided by Roger Peng at\n@uref{http://www.biostat.jhsph.edu/@/~rpeng/@/docs/@/R-debug-tools.pdf}\nwhich provide complementary examples to those given here.)\n\n@menu\n* Browsing::                    \n* Debugging R code::            \n* Checking memory access::      \n* Debugging compiled code::     \n@end menu\n\n\n@node Browsing, Debugging R code, Debugging, Debugging\n@section Browsing\n\n@findex browser\nMost of the @R{}-level debugging facilities are based around the\nbuilt-in browser.  This can be used directly by inserting a call to\n@code{browser()} into the code of a function (for example, using\n@code{fix(my_function)} ).  When code execution reaches that point in\nthe function, control returns to the @R{} console with a special prompt.\nFor example\n\n@example\n> fix(summary.data.frame) ## insert browser() call after for() loop\n> summary(women)\nCalled from: summary.data.frame(women)\nBrowse[1]> ls()\n [1] \"digits\" \"i\"      \"lbs\"    \"lw\"     \"maxsum\" \"nm\"     \"nr\"     \"nv\"\n [9] \"object\" \"sms\"    \"z\"\nBrowse[1]> maxsum\n[1] 7\nBrowse[1]>\n     height         weight\n Min.   :58.0   Min.   :115.0\n 1st Qu.:61.5   1st Qu.:124.5\n Median :65.0   Median :135.0\n Mean   :65.0   Mean   :136.7\n 3rd Qu.:68.5   3rd Qu.:148.0\n Max.   :72.0   Max.   :164.0\n> rm(summary.data.frame)\n@end example\n\n@noindent\nAt the browser prompt one can enter any @R{} expression, so for example\n@code{ls()} lists the objects in the current frame, and entering the\nname of an object will@footnote{With the exceptions of the commands\nlisted below: an object of such a name can be printed @emph{via} an\nexplicit call to @code{print}.} print it.  The following commands are\nalso accepted\n\n@itemize @bullet\n@item @code{n}\n\nEnter `step-through' mode.  In this mode, hitting return executes the\nnext line of code (more precisely one line and any continuation lines).\nTyping @code{c} will continue to the end of the current context, e.g.@:\nto the end of the current loop or function.\n\n@item @code{c}\n\nIn normal mode, this quits the browser and continues execution, and just\nreturn works in the same way.  @code{cont} is a synonym.\n\n@item @code{where}\n\nThis prints the call stack.  For example\n\n@example\n> summary(women)\nCalled from: summary.data.frame(women)\nBrowse[1]> where\nwhere 1: summary.data.frame(women)\nwhere 2: summary(women)\n\nBrowse[1]>\n@end example\n\n@item @code{Q}\n\nQuit both the browser and the current expression, and return to the\ntop-level prompt.\n@end itemize\n\nErrors in code executed at the browser prompt will normally return\ncontrol to the browser prompt.  Objects can be altered by assignment,\nand will keep their changed values when the browser is exited.  If\nreally necessary, objects can be assigned to the workspace from the\nbrowser prompt (by using @code{<<-} if the name is not already in\nscope).\n\n@node Debugging R code, Checking memory access, Browsing, Debugging\n@section Debugging R code\n\n@findex traceback\nSuppose your @R{} program gives an error message.  The first thing to\nfind out is what @R{} was doing at the time of the error, and the most\nuseful tool is @code{traceback()}.  We suggest that this is run whenever\nthe cause of the error is not immediately obvious.  Daily, errors are\nreported to the @R{} mailing lists as being in some package when\n@code{traceback()} would show that the error was being reported by some\nother package or base @R{}.  Here is an example from the regression\nsuite.\n\n@smallexample\n> success <- c(13,12,11,14,14,11,13,11,12)\n> failure <- c(0,0,0,0,0,0,0,2,2)\n> resp <- cbind(success, failure)\n> predictor <- c(0, 5^(0:7))\n> glm(resp ~ 0+predictor, family = binomial(link=\"log\"))\nError: no valid set of coefficients has been found: please supply starting values\n> traceback()\n3: stop(\"no valid set of coefficients has been found: please supply\n         starting values\", call. = FALSE)\n2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,\n       mustart = mustart, offset = offset, family = family, control = control,\n       intercept = attr(mt, \"intercept\") > 0)\n1: glm(resp ~ 0 + predictor, family = binomial(link =\"log\"))\n@end smallexample\n\n@noindent\nThe calls to the active frames are given in reverse order (starting with\nthe innermost).  So we see the error message comes from an explicit\ncheck in @code{glm.fit}.  (@code{traceback()} shows you all the lines of\nthe function calls, which can be limited by setting @code{option}\n@option{\"deparse.max.lines\"}.)\n\nSometimes the traceback will indicate that the error was detected inside\ncompiled code, for example (from @code{?nls})\n\n@smallexample\nError in nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE) :\n        step factor 0.000488281 reduced below 'minFactor' of 0.000976563\n>  traceback()\n2: .Call(R_nls_iter, m, ctrl, trace)\n1: nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE)\n@end smallexample\n\n@noindent\nThis will be the case if the innermost call is to @code{.C},\n@code{.Fortran}, @code{.Call}, @code{.External} or @code{.Internal}, but\nas it is also possible for such code to evaluate @R{} expressions, this\nneed not be the innermost call, as in\n\n@smallexample\n> traceback()\n9: gm(a, b, x)\n8: .Call(R_numeric_deriv, expr, theta, rho, dir)\n7: numericDeriv(form[[3]], names(ind), env)\n6: getRHS()\n5: assign(\"rhs\", getRHS(), envir = thisEnv)\n4: assign(\"resid\", .swts * (lhs - assign(\"rhs\", getRHS(), envir = thisEnv)),\n       envir = thisEnv)\n3: function (newPars)\n   @{\n       setPars(newPars)\n       assign(\"resid\", .swts * (lhs - assign(\"rhs\", getRHS(), envir = thisEnv)),\n           envir = thisEnv)\n       assign(\"dev\", sum(resid^2), envir = thisEnv)\n       assign(\"QR\", qr(.swts * attr(rhs, \"gradient\")), envir = thisEnv)\n       return(QR$rank < min(dim(QR$qr)))\n   @}(c(-0.00760232418963883, 1.00119632515036))\n2: .Call(R_nls_iter, m, ctrl, trace)\n1: nls(yeps ~ gm(a, b, x), start = list(a = 0.12345, b = 0.54321))\n@end smallexample\n\nOccasionally @code{traceback()} does not help, and this can be the case\nif S4 method dispatch is involved.  Consider the following example\n\n@example\n> xyd <- new(\"xyloc\", x=runif(20), y=runif(20))\nError in as.environment(pkg) : no item called \"package:S4nswv\"\non the search list\nError in initialize(value, ...) : S language method selection got\nan error when called from internal dispatch for function 'initialize'\n> traceback()\n2: initialize(value, ...)\n1: new(\"xyloc\", x = runif(20), y = runif(20))\n@end example\n\n@noindent\nwhich does not help much, as there is no call to @code{as.environment}\nin @code{initialize} (and the note ``called from internal dispatch''\ntells us so).  In this case we searched the @R{} sources for the quoted\ncall, which occurred in only one place,\n@code{methods:::.asEnvironmentPackage}.  So now we knew where the\nerror was occurring.  (This was an unusually opaque example.)\n\nThe error message\n\n@example\nevaluation nested too deeply: infinite recursion / options(expressions=)?\n@end example\n\n@noindent\ncan be hard to handle with the default value (5000).  Unless you know\nthat there actually is deep recursion going on, it can help to set\nsomething like\n\n@example\noptions(expressions=500)\n@end example\n\n@noindent \nand re-run the example showing the error.\n\nSometimes there is warning that clearly is the precursor to some later\nerror, but it is not obvious where it is coming from.  Setting\n@command{options(warn = 2)} (which turns warnings into errors) can help here.\n\nOnce we have located the error, we have some choices.  One way to proceed\nis to find out more about what was happening at the time of the crash by\nlooking a @emph{post-mortem} dump.  To do so, set\n@findex dump.frames\n@command{options(error=dump.frames)} and run the code again.  Then invoke\n@command{debugger()} and explore the dump.  Continuing our example:\n\n@smallexample\n> options(error = dump.frames)\n> glm(resp ~ 0 + predictor, family = binomial(link =\"log\"))\nError: no valid set of coefficients has been found: please supply starting values\n@end smallexample\n\n@noindent\nwhich is the same as before, but an object called @code{last.dump} has\nappeared in the workspace.  (Such objects can be large, so remove it\nwhen it is no longer needed.)  We can examine this at a later time by\ncalling the function @code{debugger}.\n@findex debugger\n\n@smallexample\n> debugger()\nMessage:  Error: no valid set of coefficients has been found: please supply starting values\nAvailable environments had calls:\n1: glm(resp ~ 0 + predictor, family = binomial(link = \"log\"))\n2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart, mus\n3: stop(\"no valid set of coefficients has been found: please supply starting values\nEnter an environment number, or 0 to exit  Selection:\n@end smallexample\n\n@noindent\nwhich gives the same sequence of calls as @code{traceback}, but in\nouter-first order and with only the first line of the call, truncated to\nthe current width.  However, we can now examine in more detail what was\nhappening at the time of the error.  Selecting an environment opens the\nbrowser in that frame.  So we select the function call which spawned the\nerror message, and explore some of the variables (and execute two\nfunction calls).\n\n@smallexample\nEnter an environment number, or 0 to exit  Selection: 2\nBrowsing in the environment with call:\n   glm.fit(x = X, y = Y, weights = weights, start = start, etas\nCalled from: debugger.look(ind)\nBrowse[1]> ls()\n [1] \"aic\"        \"boundary\"   \"coefold\"    \"control\"    \"conv\"\n [6] \"dev\"        \"dev.resids\" \"devold\"     \"EMPTY\"      \"eta\"\n[11] \"etastart\"   \"family\"     \"fit\"        \"good\"       \"intercept\"\n[16] \"iter\"       \"linkinv\"    \"mu\"         \"mu.eta\"     \"mu.eta.val\"\n[21] \"mustart\"    \"n\"          \"ngoodobs\"   \"nobs\"       \"nvars\"\n[26] \"offset\"     \"start\"      \"valideta\"   \"validmu\"    \"variance\"\n[31] \"varmu\"      \"w\"          \"weights\"    \"x\"          \"xnames\"\n[36] \"y\"          \"ynames\"     \"z\"\nBrowse[1]> eta\n            1             2             3             4             5\n 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04\n            6             7             8             9\n-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01\nBrowse[1]> valideta(eta)\n[1] TRUE\nBrowse[1]> mu\n        1         2         3         4         5         6         7         8\n1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755\n        9\n0.8397616\nBrowse[1]> validmu(mu)\n[1] FALSE\nBrowse[1]> c\nAvailable environments had calls:\n1: glm(resp ~ 0 + predictor, family = binomial(link = \"log\"))\n2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart\n3: stop(\"no valid set of coefficients has been found: please supply starting v\n\nEnter an environment number, or 0 to exit  Selection: 0\n> rm(last.dump)\n@end smallexample\n\nBecause @code{last.dump} can be looked at later or even in another @R{}\nsession, post-mortem debugging is possible even for batch usage of @R{}.\nWe do need to arrange for the dump to be saved: this can be done either\nusing the command-line flag @option{--save} to save the workspace at the\nend of the run, or @emph{via} a setting such as\n\n@example\n> options(error = quote(@{dump.frames(to.file=TRUE); q()@}))\n@end example\n\n@noindent\nSee the help on @code{dump.frames} for further options and a worked\nexample.\n\n@findex recover\nAn alternative error action is to use the function @command{recover()}:\n\n@smallexample\n> options(error = recover)\n> glm(resp ~ 0 + predictor, family = binomial(link = \"log\"))\nError: no valid set of coefficients has been found: please supply starting values\n\nEnter a frame number, or 0 to exit\n\n1: glm(resp ~ 0 + predictor, family = binomial(link = \"log\"))\n2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart\n\nSelection:\n@end smallexample\n\n@noindent\nwhich is very similar to @code{dump.frames}.  However, we can examine\nthe state of the program directly, without dumping and re-loading the\ndump.  As its help page says, @code{recover} can be routinely used as\nthe error action in place of @code{dump.calls} and @code{dump.frames},\nsince it behaves like @code{dump.frames} in non-interactive use.\n\n\n@findex debug\nPost-mortem debugging is good for finding out exactly what went wrong,\nbut not necessarily why.  An alternative approach is to take a closer\nlook at what was happening just before the error, and a good way to do\nthat is to use @command{debug}.  This inserts a call to the browser\nat the beginning of the function, starting in step-through mode.  So in\nour example we could use\n\n@smallexample\n> debug(glm.fit)\n> glm(resp ~ 0 + predictor, family = binomial(link =\"log\"))\ndebugging in: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,\n    mustart = mustart, offset = offset, family = family, control = control,\n    intercept = attr(mt, \"intercept\") > 0)\ndebug: @{\n## lists the whole function\nBrowse[1]>\ndebug: x <- as.matrix(x)\n...\nBrowse[1]> start\n[1] -2.235357e-06\ndebug: eta <- drop(x %*% start)\nBrowse[1]> eta\n            1             2             3             4             5\n 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04\n            6             7             8             9\n-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01\nBrowse[1]>\ndebug: mu <- linkinv(eta <- eta + offset)\nBrowse[1]> mu\n        1         2         3         4         5         6         7         8\n1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755\n        9\n0.8397616\n@end smallexample\n\n@noindent\n(The prompt @code{Browse[1]>} indicates that this is the first level of\nbrowsing: it is possible to step into another function that is itself\nbeing debugged or contains a call to @code{browser()}.)\n\n@code{debug} can be used for hidden functions and S3 methods by\ne.g.@: @code{debug(stats:::predict.Arima)}.  (It cannot be used for S4\nmethods, but an alternative is given on the help page for @code{debug}.)\nSometimes you want to debug a function defined inside another function,\ne.g.@: the function @code{arimafn} defined inside @code{arima}.  To do so,\nset @code{debug} on the outer function (here @code{arima}) and\nstep through it until the inner function has been defined.  Then\ncall @code{debug} on the inner function (and use @code{c} to get out of\nstep-through mode in the outer function).\n\n@findex undebug\nTo remove debugging of a function, call @code{undebug} with the argument\npreviously given to @code{debug}; debugging otherwise lasts for the rest\nof the @R{} session (or until the function is edited or otherwise\nreplaced).\n\n@findex trace\n@code{trace} can be used to temporarily insert debugging code into a\nfunction, for example to insert a call to @code{browser()} just before\nthe point of the error.  To return to our running example\n\n@example\n## first get a numbered listing of the expressions of the function\n> page(as.list(body(glm.fit)), method=\"print\")\n> trace(glm.fit, browser, at=22)\nTracing function \"glm.fit\" in package \"stats\"\n[1] \"glm.fit\"\n> glm(resp ~ 0 + predictor, family = binomial(link =\"log\"))\nTracing glm.fit(x = X, y = Y, weights = weights, start = start,\n   etastart = etastart,  .... step 22\nCalled from: eval(expr, envir, enclos)\nBrowse[1]> n\n## and single-step from here.\n> untrace(glm.fit)\n@end example\n@noindent\nFor your own functions, it may be as easy to use @code{fix} to insert\ntemporary code, but @code{trace} can help with functions in a namespace\n(as can @code{fixInNamespace}).  Alternatively, use\n@code{trace(,edit=TRUE)} to insert code visually.\n\n\n@node Checking memory access, Debugging compiled code, Debugging R code, Debugging\n@section Checking memory access\n\nErrors in memory allocation and reading/writing outside arrays are very\ncommon causes of crashes (e.g.,@: segfaults) on some machines.  Often\nthe crash appears long after the invalid memory access: in particular\ndamage to the structures which @R{} itself has allocated may only become\napparent at the next garbage collection (or even at later garbage\ncollections after objects have been deleted).\n\nNote that memory access errors may be seen with LAPACK, BLAS, OpenMP and\nJava-using packages: some at least of these seem to be intentional, and\nsome are related to passing characters to Fortran.\n\nSome of these tools can detect mismatched allocation and deallocation.\nC++ programmers should note that memory allocated by @code{new []} must\nbe freed by @code{delete []}, other uses of @code{new} by @code{delete},\nand memory allocated by @code{malloc}, @code{calloc} and @code{realloc}\nby @code{free}.  Some platforms will tolerate mismatches (perhaps with\nmemory leaks) but others will segfault.\n\n@menu\n* Using gctorture::             \n* Using valgrind::              \n* Using Address Sanitizer::     \n* Using Undefined Behaviour Sanitizer::  \n* Other analyses with `clang'::  \n* Using `Dr. Memory'::          \n* Fortran array bounds checking::  \n@end menu\n\n@node Using gctorture, Using valgrind, Checking memory access, Checking memory access\n@subsection Using gctorture\n\n@findex gctorture\nWe can help to detect memory problems in @R{} objects earlier by running\ngarbage collection as often as possible.  This is achieved by\n@code{gctorture(TRUE)}, which as described on its help page\n\n@quotation\nProvokes garbage collection on (nearly) every memory allocation.\nIntended to ferret out memory protection bugs.  Also makes @R{} run\n@emph{very} slowly, unfortunately.\n@end quotation\n\n@noindent\nThe reference to `memory protection' is to missing C-level calls to\n@code{PROTECT}/@code{UNPROTECT} (@pxref{Garbage Collection}) which if\nmissing allow @R{} objects to be garbage-collected when they are still\nin use.  But it can also help with other memory-related errors.\n\nNormally running under @code{gctorture(TRUE)} will just produce a crash\nearlier in the @R{} program, hopefully close to the actual cause. See\nthe next section for how to decipher such crashes.\n\nIt is possible to run all the examples, tests and vignettes covered by\n@code{R CMD check} under @code{gctorture(TRUE)} by using the option\n@option{--use-gct}.\n\nThe function @code{gctorture2} provides more refined control over the GC\ntorture process.  Its arguments @code{step}, @code{wait} and\n@code{inhibit_release} are documented on its help page.  Environment\nvariables can also be used at the start of the @R{} session to turn on\nGC torture: @env{R_GCTORTURE} corresponds to the @code{step} argument to\n@code{gctorture2}, @env{R_GCTORTURE_WAIT} to @code{wait}, and\n@env{R_GCTORTURE_INHIBIT_RELEASE} to @code{inhibit_release}.\n\nIf @R{} is configured with @option{--enable-strict-barrier} then a\nvariety of tests for the integrity of the write barrier are enabled.  In\naddition tests to help detect protect issues are enabled:\n\n@itemize @bullet\n\n@item\nAll GCs are full GCs.\n\n@item\nNew nodes in small node pages are marked as @code{NEWSXP} on creation.\n\n@item\nAfter a GC all free nodes that are not of type @code{NEWSXP} are marked\nas type @code{FREESXP} and their previous type is recorded.\n\n@item\nMost calls to accessor functions check their @code{SEXP} inputs and\n@code{SEXP} outputs and signal an error if a @code{FREESXP} is found.\nThe address of the node and the old type are included in the error\nmessage.\n\n@end itemize\n\n@code{R CMD check --use-gct} can be set to use\n@code{gctorture2(@var{n})} rather than @code{gctorture(TRUE)} by setting\nenvironment variable @env{_R_CHECK_GCT_N_} to a positive integer value\nto be used as @code{@var{n}}.\n\nUsed with a debugger and with @code{gctorture} or @code{gctorture2} this\nmechanism can be helpful in isolating memory protect problems.\n\n\n@node Using valgrind, Using Address Sanitizer, Using gctorture, Checking memory access\n@subsection Using valgrind\n\nIf you have access to Linux on a common CPU type or supported versions\nof macOS or Solaris you can use @code{valgrind}\n(@uref{http://www.valgrind.org/}, pronounced to rhyme with `tinned') to\ncheck for possible problems.  To run some examples under @code{valgrind}\nuse something like\n\n@example\nR -d valgrind --vanilla < mypkg-Ex.R\nR -d \"valgrind --tool=memcheck --leak-check=full\" --vanilla < mypkg-Ex.R\n@end example\n\n@noindent\nwhere @file{mypkg-Ex.R} is a set of examples, e.g.@: the file created in\n@file{mypkg.Rcheck} by @code{R CMD check}.  Occasionally this reports\nmemory reads of `uninitialised values' that are the result of compiler\noptimization, so can be worth checking under an unoptimized compile: for\nmaximal information use a build with debugging symbols.  We know there\nwill be some small memory leaks from @code{readline} and @R{} itself ---\nthese are memory areas that are in use right up to the end of the @R{}\nsession.  Expect this to run around 20x slower than without\n@code{valgrind}, and in some cases much slower than that.  Several\nversions of @code{valgrind} were not happy with some optimized BLASes\nthat use @acronym{CPU}-specific instructions so you may need to build a\nversion of @R{} specifically to use with @code{valgrind}.\n\nOn platforms where @code{valgrind} is installed you can build a version\nof @R{} with extra instrumentation to help @code{valgrind} detect errors\nin the use of memory allocated from the @R{} heap.  The\n@command{configure} option is\n@option{--with-valgrind-instrumentation=@var{level}}, where @var{level}\nis 0, 1 or 2.  Level 0 is the default and does not add anything.\nLevel 1 will detect some uses@footnote{Those in some numeric, logical,\ninteger, raw, complex vectors and in memory allocated by\n@code{R_alloc}.} of uninitialised memory and has little impact on speed\n(compared to level 0). Level 2 will detect many other memory-use\nbugs@footnote{including using the data sections of @R{} vectors after\nthey are freed.}  but make @R{} much slower when running under\n@code{valgrind}.  Using this in conjunction with @code{gctorture} can be\neven more effective (and even slower).\n\nAn example of @code{valgrind} output is\n@smallexample\n==12539== Invalid read of size 4\n==12539==    at 0x1CDF6CBE: csc_compTr (Mutils.c:273)\n==12539==    by 0x1CE07E1E: tsc_transpose (dtCMatrix.c:25)\n==12539==    by 0x80A67A7: do_dotcall (dotcode.c:858)\n==12539==    by 0x80CACE2: Rf_eval (eval.c:400)\n==12539==    by 0x80CB5AF: R_execClosure (eval.c:658)\n==12539==    by 0x80CB98E: R_execMethod (eval.c:760)\n==12539==    by 0x1B93DEFA: R_standardGeneric (methods_list_dispatch.c:624)\n==12539==    by 0x810262E: do_standardGeneric (objects.c:1012)\n==12539==    by 0x80CAD23: Rf_eval (eval.c:403)\n==12539==    by 0x80CB2F0: Rf_applyClosure (eval.c:573)\n==12539==    by 0x80CADCC: Rf_eval (eval.c:414)\n==12539==    by 0x80CAA03: Rf_eval (eval.c:362)\n==12539==  Address 0x1C0D2EA8 is 280 bytes inside a block of size 1996 alloc'd\n==12539==    at 0x1B9008D1: malloc (vg_replace_malloc.c:149)\n==12539==    by 0x80F1B34: GetNewPage (memory.c:610)\n==12539==    by 0x80F7515: Rf_allocVector (memory.c:1915)\n...\n@end smallexample\n@noindent\nThis example is from an instrumented version of @R{}, while tracking\ndown a bug in the @CRANpkg{Matrix} package in 2006.  The first line\nindicates that @R{} has tried to read 4 bytes from a memory address that\nit does not have access to. This is followed by a C stack trace showing\nwhere the error occurred. Next is a description of the memory that was\naccessed. It is inside a block allocated by @code{malloc}, called from\n@code{GetNewPage}, that is, in the internal @R{} heap.  Since this\nmemory all belongs to @R{}, @code{valgrind} would not (and did not)\ndetect the problem in an uninstrumented build of @R{}.  In this example\nthe stack trace was enough to isolate and fix the bug, which was in\n@code{tsc_transpose}, and in this example running under\n@code{gctorture()} did not provide any additional information.  When the\nstack trace is not sufficiently informative the option\n@option{--db-attach=yes} to @code{valgrind} may be helpful.  This starts\na post-mortem debugger (by default @code{gdb}) so that variables in the\nC code can be inspected (@pxref{Inspecting R objects}).\n\n@command{valgrind} is good at spotting the use of uninitialized values:\nuse option @option{--track-origins=yes} to show where these originated\nfrom.  What it cannot detect is the misuse of arrays allocated on the\nstack: this includes C automatic variables and some@footnote{small\nfixed-size arrays by default in @command{gfortran}, for example.}\nFortran arrays.\n\nIt is possible to run all the examples, tests and vignettes covered by\n@code{R CMD check} under @code{valgrind} by using the option\n@option{--use-valgrind}.  If you do this you will need to select the\n@code{valgrind} options some other way, for example by having a\n@file{~/.valgrindrc} file containing\n\n@example\n--leak-check=full\n--track-origins=yes\n@end example\n\n@noindent\nor setting the environment variable @env{VALGRIND_OPTS}.\n\nOn macOS you may need to ensure that debugging symbols are made available\n(so @command{valgrind} reports line numbers in files).  This can usually\nbe done with the @command{valgrind} option @option{--dsymutil=yes} to\nask for the symbols to be dumped when the @file{.so} file is loaded.\nThis will not work where packages are installed into a system area (such\nas the @file{R.framework}) and can be slow.  Installing packages with\n@command{R CMD INSTALL --dsym} installs the dumped symbols.  (This can\nalso be done by setting environment variable @env{PKG_MAKE_DSYM} to a\nnon-empty value before the @command{INSTALL}.)\n\nThis section has described the use of @command{memtest}, the default\n(and most useful) of @code{valgrind}'s tools.  There are others\ndescribed in its documentation: @command{helgrind} can be useful for\nthreaded programs.\n\n@node Using Address Sanitizer, Using Undefined Behaviour Sanitizer, Using valgrind, Checking memory access\n@subsection Using the Address Sanitizer\n\n@command{AddressSanitizer} (`ASan') is a tool with similar aims to the\nmemory checker in @command{valgrind}.  It is available with suitable\nbuilds@footnote{currently on Linux and macOS (including the builds from\nXcode 7 and later), with some support for Solaris.  On some platforms\nthe runtime library, @pkg{libasan}, needs to be installed separately,\nand for checking C++ you may also need @pkg{libubsan}.} of @command{gcc}\nand @command{clang} on common Linux and macOS platforms.  See\n@uref{https://clang.llvm.org/@/docs/@/UsersManual.html#controlling-code-generation},\n@uref{https://clang.llvm.org/@/docs/@/AddressSanitizer.html} and\n@uref{https://code.google.com/@/p/@/address-sanitizer/}.\n\nMore thorough checks of C++ code are done if the C++ library has been\n`annotated': at the time of writing this applied to @code{std::vector}\nin @code{libc++} for use with @command{clang} and gives rise to\n@samp{container-overflow}@footnote{see\n@uref{http://llvm.org/devmtg/2014-04/PDFs/LightningTalks/EuroLLVM%202014%20--%20container%20overflow.pdf}.}\nreports.\n\nIt requires code to have been compiled @emph{and linked} with\n@option{-fsanitize=address} and compiling with @code{-fno-omit-frame-pointer}\nwill give more legible reports.  It has a runtime penalty of 2--3x,\nextended compilation times and uses substantially more memory, often\n1--2GB, at run time.  On 64-bit platforms it reserves (but does not\nallocate) 16--20TB of virtual memory: restrictive shell settings can\ncause problems.\n\nBy comparison with @command{valgrind}, ASan can\ndetect misuse of stack and global variables but not the use of\nuninitialized memory.\n\nRecent versions return symbolic addresses for the location of the error\nprovided @command{llvm-symbolizer}@footnote{part of the LLVM project and\nin distributed in @code{llvm} RPMs and @code{.deb}s on Linux.  It is not\ncurrently shipped by Apple.} is on the path: if it is available but not\non the path or has been renamed@footnote{as Ubuntu is said to do.}, one\ncan use an environment variable, e.g.@:\n\n@example\nASAN_SYMBOLIZER_PATH=/path/to/llvm-symbolizer\n@end example\n\n@noindent\nAn alternative is to pipe the output through\n@command{asan_symbolize.py}@footnote{installed on some Linux systems as\n@command{asan_symbolize}, and obtainable from\n@uref{https://llvm.org/@/svn/@/llvm-project/@/compiler-rt/@/trunk/@/lib/@/asan/scripts/@/asan_symbolize.py}:\nit makes use of @command{llvm-symbolizer} if available.} and perhaps\nthen (for compiled C++ code) @command{c++filt}.  (On macOS, you may need\nto run @command{dsymutil} to get line-number reports.)\n\nThe simplest way to make use of this is to build a version of @R{} with\nsomething like\n\n@example\nCC=\"gcc -std=gnu99 -fsanitize=address\"\nCFLAGS=\"-fno-omit-frame-pointer -g -O2 -Wall -pedantic -mtune=native\"\n@end example\n\n@noindent\nwhich will ensure that the @code{libasan} run-time library is compiled\ninto the @R{} executable.  However this check can be enabled on a\nper-package basis by using a @file{~/.R/Makevars} file like\n@example\nCC = gcc -std=gnu99 -fsanitize=address -fno-omit-frame-pointer\nCXX = g++ -fsanitize=address -fno-omit-frame-pointer\nF77 = gfortran -fsanitize=address\nFC = gfortran -fsanitize=address\n@end example\n@noindent\n(Note that @code{-fsanitize=address} has to be part of the compiler\nspecification to ensure it is used for linking.  These settings will not\nbe honoured by packages which ignore @file{~/.R/Makevars}.)  It will\nbe necessary to build @R{} with\n\n@example\nMAIN_LDFLAGS = -fsanitize=address\n@end example\n\n@noindent\nto link the runtime libraries into the @R{} executable if it was not\nspecified as part of @samp{CC} when @R{} was built.  (For some builds\nwithout OpenMP, @option{-pthread} is also required.)\n\nFor options available @emph{via} the environment variable\n@env{ASAN_OPTIONS} see\n@uref{https://code.google.com/@/p/@/address-sanitizer/@/wiki/@/AddressSanitizerFLags}.\nWith @command{gcc} additional control is available @emph{via} the\n@option{--param} flag: see its @command{man} page.\n\nFor more detailed information on an error, @R{} can be run under a\ndebugger with a breakpoint set before the address sanitizer report is\nproduced: for @command{gdb} or @command{lldb} you could use\n@example\nbreak __asan_report_error\n@end example\n@noindent\n(See\n@uref{https://code.google.com/@/p/@/address-sanitizer/@/wiki@//AddressSanitizer#gdb}.)\n\nRecent versions@footnote{including @command{gcc} 7.1 and @command{clang}\n4.0.0: for @command{gcc} it is implied by @option{-fsanitize=address}.}\nadded the flag @option{-fsanitize-address-use-after-scope}: see\n@uref{https://github.com/@/google/@/sanitizers/@/wiki/@/AddressSanitizerUseAfterScope}.\n\nOne of the checks done by ASAN is that @code{malloc/free} and in C++\n@code{new/delete} and @code{new[]/delete[]} are used consistently\n(rather than say @code{free} being used to dealloc memory allocated by\n@code{new[]}).  This matters on some systems but not all: unfortunately\non some of those where it does not matter, system libraries@footnote{for\nexample, X11/GL libraries on Linux, seen when checking package\n@CRANpkg{rgl} and some others using it---a workaround is to set\nenvironment variable @env{RGL_USE_NULL=true}.} are not consistent.  The\ncheck can be suppressed by including @samp{alloc_dealloc_mismatch=0} in\n@env{ASAN_OPTIONS}.\n\n@menu\n* Using Leak Sanitizer::        \n@end menu\n\n@node Using Leak Sanitizer,  , Using Address Sanitizer, Using Address Sanitizer\n@subsubsection Using the Leak Sanitizer\n\nFor @code{x86_64} Linux there is a leak sanitizer, `LSan': see\n@uref{https://code.google.com/@/p/@/address-sanitizer/@/wiki/@/LeakSanitizer}.\nThis is available on recent versions of @code{gcc} and @code{clang}, and\nwhere available is compiled in as part of ASan.\n\nOne way to invoke this from an ASan-enabled build is by the environment\nvariable\n\n@example\nASAN_OPTIONS='detect_leaks=1'\n@end example\n@noindent\nHowever, this was made the default as from @command{clang} 3.5 and\n@command{gcc} 5.1.0.\n\nWhen LSan is enabled, leaks give the process a failure error status (by\ndefault @code{23}).  For an @R{} package this means the @R{} process,\nand as the parser retains some memory to the end of the process, if @R{}\nitself was built against ASan, all runs will have a failure error status\n(which may include running @R{} as part of building @R{} itself).\n\nTo disable this, allocation-mismatch checking and some strict C++\nchecking use\n\n@example\nsetenv ASAN_OPTIONS 'alloc_dealloc_mismatch=0:detect_leaks=0:detect_odr_violation=0'\n@end example\n\nLSan also has a `stand-alone' mode where it is compiled in using\n@option{-fsanitize=leak} and avoids the run-time overhead of ASan.\n\n@node Using Undefined Behaviour Sanitizer, Other analyses with `clang', Using Address Sanitizer, Checking memory access\n@subsection Using the Undefined Behaviour Sanitizer\n\n`Undefined behaviour' is where the language standard does not require\nparticular behaviour from the compiler.  Examples include division by\nzero (where for doubles @R{} requires the\n@acronym{ISO}/@acronym{IEC}@tie{}60559 behaviour but C/C++ do not), use\nof zero-length arrays, shifts too far for signed types (e.g.@: @code{int\nx, y; y = x << 31;}), out-of-range coercion, invalid C++ casts and\nmis-alignment.  Not uncommon examples of out-of-range coercion in @R{}\npackages are attempts to coerce a @code{NaN} or infinity to type\n@code{int} or @code{NA_INTEGER} to an unsigned type such as\n@code{size_t}.  Also common is @code{y[x - 1]} forgetting that @code{x}\nmight be @code{NA_INTEGER}.\n\n`UBSanitizer' is a tool for C/C++ source code selected by\n@option{-fsanitize=undefined} in suitable builds@footnote{On some\nplatforms the runtime library, @pkg{libubsan}, needs to be installed\nseparately.} of @command{clang} and GCC.  Its (main) runtime library is\nlinked into each package's DLL, so it is less often needed to be\nincluded in @env{MAIN_LDFLAGS}.\n\nThis sanitizer can be combined with the Address Sanitizer by\n@option{-fsanitize=undefined,address} (where both are supported).\n\nFiner control of what is checked can be achieved by other options: for\n@command{clang} see\n@uref{https://clang.llvm.org/@/docs/@/UsersManual.html#controlling-code-generation}.@footnote{or\nthe user manual for your version of @command{clang}, e.g.@: (the paths\nhave differed for some versions)\n@uref{http://llvm.org/@/releases/@/4.0.0/@/tools/@/clang/@/docs/@/UsersManual.html}.}\nThe current set for @command{clang} is (on a single line):\n@example\n-fsanitize=alignment,bool,bounds,enum,float-cast-overflow,\nfloat-divide-by-zero,function,integer-divide-by-zero,nonnull-attribute,\nnull,object-size,pointer-overflow,return,returns-nonnull-attribute,shift,\nsigned-integer-overflow,unreachable,unsigned-integer-overflow,vla-bound,vptr\n@end example\n\n@noindent\n(plus the more specific versions @code{shift-base} and\n@code{shift-exponent}) a subset of which could be combined with\n@code{address}, or use something like\n\n@example\n-fsanitize=undefined -fno-sanitize=float-divide-by-zero\n@end example\n\n@noindent\nOptions @code{function}, @code{return} and @code{vptr} apply only to C++: to\nuse @code{vptr} its run-time library needs to be linked into the main\n@R{} executable by building the latter with something like\n@example\nMAIN_LD=\"clang++ -fsanitize=undefined\"\n@end example\n@noindent\nOption @code{float-divide-by-zero} is undesirable for use with @R{}\nwhich allow such divisions as part of @acronym{IEC}@tie{}60559\narithmetic.\n\nSee\n@uref{https://gcc.gnu.org/@/onlinedocs/@/gcc/@/Instrumentation-Options.html}\n(or the manual for your version of GCC, installed or @emph{via}\n@uref{https://gcc.gnu.org/@/onlinedocs/}: look for `Program\nInstrumentation Options') for the options supported by GCC: 6 and 7 support\n@example\n-fsanitize=alignment,bool,bounds,enum,integer-divide-by-zero,\nnonnull-attribute,null,object-size,return,returns-nonnull-attribute,\nshift,signed-integer-overflow,unreachable,vla-bound,vptr\n@end example\n@noindent\nplus the more specific versions @code{shift-base} and\n@code{shift-exponent} and non-default options\n@example\nbound-strict,float-cast-overflow,float-divide-by-zero\n@end example\n@noindent\nwhere @code{float-divide-by-zero} is not desirable for @R{} uses and\n@code{bounds-strict} is an extension of @code{bounds}.\n@c At the time of writing the @code{object-size}\n@c and @code{vptr} checks produced many warnings on GCC's own C++ headers,\n@c so should be disabled.\n\nFrom GCC 8 @code{signed-integer-overflow} will no longer be a default\npart of @option{-fsanitize=undefined}, but can be specified separately.\nIt adds options @option{-fsanitize=pointer-overflow} an\n@option{-fsanitize=builtin}.\n\nOther useful flags include\n@example\n-no-fsanitize-recover\n@end example\n\n@noindent\nwhich causes the first report to be fatal (it always is for the\n@code{unreachable} and @code{return} suboptions).  For more detailed\ninformation on where the runtime error occurs, @R{} can be run under a\ndebugger with a breakpoint set before the sanitizer report is produced:\nfor @command{gdb} or @command{lldb} you could use\n@example\nbreak __ubsan_handle_float_cast_overflow\nbreak __ubsan_handle_float_cast_overflow_abort\n@end example\n@noindent\nor similar (there are handlers for each type of undefined behaviour).\n\nThere are also the compiler flags @option{-fcatch-undefined-behavior}\nand @option{-ftrapv}, said to be more reliable in @command{clang} than\n@command{gcc}.\n\nFor more details on the topic see\n@uref{http://blog.regehr.org/archives/213} and\n@uref{http://blog.llvm.org/@/2011/@/05/@/what-every-c-programmer-should-know.html}\n(which has 3 parts).\n\nIt may or may not be possible to build @R{} itself with\n@option{-fsanitize=undefined}: when last tried it worked with\n@command{clang} but there were problems with OpenMP-using code with\n@command{gcc}.\n\n\n@node Other analyses with `clang', Using `Dr. Memory', Using Undefined Behaviour Sanitizer, Checking memory access\n@subsection Other analyses with `clang'\n\nRecent versions of @command{clang} on @cputype{x86_64} Linux have\n`ThreadSanitizer' (@uref{https://code.google.com/@/p/@/thread-sanitizer/}),\na `data race detector for C/C++ programs', and `MemorySanitizer'\n(@uref{https://clang.llvm.org/@/docs/@/MemorySanitizer.html},\n@uref{https://code.google.com/@/p/@/memory-sanitizer/@/wiki/@/MemorySanitizer})\nfor the detection of uninitialized memory.  Both are based on and\nprovide similar functionality to tools in @command{valgrind}.\n\n@command{clang} has a `Static Analyser' which can be run on the source\nfiles during compilation: see @uref{https://clang-analyzer.llvm.org/}.\n\n@node Using `Dr. Memory', Fortran array bounds checking, Other analyses with `clang', Checking memory access\n@subsection Using `Dr. Memory'\n\n`Dr. Memory' from @uref{http://www.drmemory.org/} is a memory checker\nfor (currently) 32-bit Windows, Linux and macOS with similar aims to\n@command{valgrind}.  It works with unmodified executables@footnote{but\nworks better if inlining and frame pointer optimizations are disabled.}\nand detects memory access errors, uninitialized reads and memory leaks.\n\n@node Fortran array bounds checking,  , Using `Dr. Memory', Checking memory access\n@subsection Fortran array bounds checking\n\nMost of the Fortran compilers used with @R{} allow code to be compiled\nwith checking of array bounds: for example @command{gfortran} has option\n@option{-fbounds-check} and Oracle Studio has @option{-C}.  This will\ngive an error when the upper or lower bound is exceeded, e.g.\n@example\nAt line 97 of file .../src/appl/dqrdc2.f\nFortran runtime error: Index '1' of dimension 1 of array 'x' above upper bound of 0\n@end example\n\nOne does need to be aware that lazy programmers often specify Fortran\ndimensions as @code{1} rather than @code{*} or a real bound and these\nwill be reported.\n\nIt is easy to arrange to use this check on just the code in your\npackage: add to @file{~/.R/Makevars} something like (for\n@command{gfortran})\n@example\nFCFLAGS = -g -O2 -mtune=native -fbounds-check\nFFLAGS = -g -O2 -mtune=native -fbounds-check\n@end example\n\n@noindent\nwhen you run @command{R CMD check}.\n\nThis may report incorrectly errors with the way that Fortran character\nvariables are passed, particularly when Fortran subroutines are called\nfrom C code.  This may include the use of BLAS and LAPACK subroutines in\n@R{}, so it is not advisable to build @R{} itself with bounds checking\n(and may not even be possible as these subroutines are called during the\n@R{} build).\n\n\n@node Debugging compiled code,  , Checking memory access, Debugging\n@section Debugging compiled code\n@cindex Debugging\n\n\nSooner or later programmers will be faced with the need to debug\ncompiled code loaded into @R{}.  This section is geared to platforms\nusing @command{gdb} with code compiled by @code{gcc}, but similar things\nare possible with other debuggers such as @command{lldb}\n(@uref{http://lldb.llvm.org/}, used on macOS) and Sun's @command{dbx}:\nsome debuggers have graphical front-ends available.\n\nConsider first `crashes', that is when @R{} terminated unexpectedly with\nan illegal memory access (a `segfault' or `bus error'), illegal\ninstruction or similar.  Unix-alike versions of @R{} use a signal\nhandler which aims to give some basic information.  For example\n\n@example\n *** caught segfault ***\naddress 0x20000028, cause 'memory not mapped'\n\nTraceback:\n 1: .identC(class1[[1]], class2)\n 2: possibleExtends(class(sloti), classi, ClassDef2 = getClassDef(classi,\nwhere = where))\n 3: validObject(t(cu))\n 4: stopifnot(validObject(cu <- as(tu, \"dtCMatrix\")), validObject(t(cu)),\nvalidObject(t(tu)))\n\nPossible actions:\n1: abort (with core dump)\n2: normal R exit\n3: exit R without saving workspace\n4: exit R saving workspace\nSelection: 3\n@end example\n\n@noindent\nSince the @R{} process may be damaged, the only really safe options are\nthe first or third.  (Note that a core dump is only produced where\nenabled: a common default in a shell is to limit its size to 0, thereby\ndisabling it.)\n\nA fairly common cause of such crashes is a package which uses @code{.C}\nor @code{.Fortran} and writes beyond (at either end) one of the\narguments it is passed.  There is a good way to detect this: using\n@code{options(CBoundsCheck = TRUE)} (which can be selected @emph{via}\nthe environment variable @env{R_C_BOUNDS_CHECK=yes)} changes the way\n@code{.C} and @code{.Fortran} work to check if the compiled code writes\nin the 64 bytes at either end of an argument.\n\nAnother cause of a `crash' is to overrun the C stack.  @R{} tries to\ntrack that in its own code, but it may happen in third-party compiled\ncode.  For modern POSIX-compliant OSes @R{} can safely catch that and\nreturn to the top-level prompt, so one gets something like\n\n@example\n> .C(\"aaa\")\nError: segfault from C stack overflow\n>\n@end example\n\n@noindent\nHowever, C stack overflows are fatal under Windows and normally defeat\nattempts at debugging on that platform.  Further, the size of the stack\nis set when @R{} is compiled, whereas on POSIX OSes it can be set in the\nshell from which @R{} is launched.\n\nIf you have a crash which gives a core dump you can use something like\n\n@example\ngdb /path/to/R/bin/exec/R core.12345\n@end example\n\n@noindent\nto examine the core dump.  If core dumps are disabled or to catch errors\nthat do not generate a dump one can run @R{} directly under a debugger\nby for example\n\n@example\n$ R -d gdb --vanilla\n...\ngdb> run\n@end example\n\n@noindent\nat which point @R{} will run normally, and hopefully the debugger will\ncatch the error and return to its prompt.  This can also be used to\ncatch infinite loops or interrupt very long-running code.  For a simple\nexample\n\n@example\n> for(i in 1:1e7) x <- rnorm(100)\n[hit Ctrl-C]\nProgram received signal SIGINT, Interrupt.\n0x00397682 in _int_free () from /lib/tls/libc.so.6\n(gdb) where\n#0  0x00397682 in _int_free () from /lib/tls/libc.so.6\n#1  0x00397eba in free () from /lib/tls/libc.so.6\n#2  0xb7cf2551 in R_gc_internal (size_needed=313)\n    at /users/ripley/R/svn/R-devel/src/main/memory.c:743\n#3  0xb7cf3617 in Rf_allocVector (type=13, length=626)\n    at /users/ripley/R/svn/R-devel/src/main/memory.c:1906\n#4  0xb7c3f6d3 in PutRNGstate ()\n    at /users/ripley/R/svn/R-devel/src/main/RNG.c:351\n#5  0xb7d6c0a5 in do_random2 (call=0x94bf7d4, op=0x92580e8, args=0x9698f98,\n    rho=0x9698f28) at /users/ripley/R/svn/R-devel/src/main/random.c:183\n...\n@end example\n\nIn many cases it is possible to attach a debugger to a running process:\nthis is helpful if an alternative front-end is in use or to investigate\na task that seems to be taking far too long.  This is done by something\nlike\n\n@example\ngdb -p @var{pid}\n@end example\n\n@noindent\nwhere @code{@var{pid}} is the id of the @R{} executable or front-end.\nThis stops the process so its state can be examined: use @code{continue}\nto resume execution.\n\nSome ``tricks'' worth knowing follow:\n\n@menu\n* Finding entry points::        \n* Inspecting R objects::        \n@end menu\n\n@node Finding entry points, Inspecting R objects, Debugging compiled code, Debugging compiled code\n@subsection Finding entry points in dynamically loaded code\n\nUnder most compilation environments, compiled code dynamically loaded\ninto @R{} cannot have breakpoints set within it until it is loaded.  To\nuse a symbolic debugger on such dynamically loaded code under\nUnix-alikes use\n\n@itemize @bullet\n@item\nCall the debugger on the @R{} executable, for example by @kbd{R -d gdb}.\n@item\nStart @R{}.\n@item\nAt the @R{} prompt, use @code{dyn.load} or @code{library} to load your\nshared object.\n@item\nSend an interrupt signal.  This will put you back to the debugger\nprompt.\n@item\nSet the breakpoints in your code.\n@item\nContinue execution of @R{} by typing @kbd{signal 0@key{RET}}.\n@end itemize\n\nUnder Windows signals may not be able to be used, and if so the procedure is\nmore complicated.  See the rw-FAQ.\n\n\n@node Inspecting R objects,  , Finding entry points, Debugging compiled code\n@subsection Inspecting R objects when debugging\n@cindex Inspecting R objects when debugging\n\nThe key to inspecting @R{} objects from compiled code is the function\n@code{PrintValue(SEXP @var{s})} which uses the normal @R{} printing\nmechanisms to print the @R{} object pointed to by @var{s}, or the safer\nversion @code{R_PV(SEXP @var{s})} which will only print `objects'.\n\nOne way to make use of @code{PrintValue} is to insert suitable calls\ninto the code to be debugged.\n\nAnother way is to call @code{R_PV} from the symbolic debugger.\n(@code{PrintValue} is hidden as @code{Rf_PrintValue}.)  For example,\nfrom @code{gdb} we can use\n\n@example\n(gdb) p R_PV(ab)\n@end example\n\n@noindent\nusing the object @code{ab} from the convolution example, if we have\nplaced a suitable breakpoint in the convolution C code.\n\nTo examine an arbitrary @R{} object we need to work a little harder.\nFor example, let\n\n@example\nR> DF <- data.frame(a = 1:3, b = 4:6)\n@end example\n\n@noindent\nBy setting a breakpoint at @code{do_get} and typing @kbd{get(\"DF\")} at\nthe @R{} prompt, one can find out the address in memory of @code{DF}, for\nexample\n\n@example\n@group\nValue returned is $1 = (SEXPREC *) 0x40583e1c\n(gdb) p *$1\n$2 = @{\n  sxpinfo = @{type = 19, obj = 1, named = 1, gp = 0,\n    mark = 0, debug = 0, trace = 0, = 0@},\n  attrib = 0x40583e80,\n  u = @{\n    vecsxp = @{\n      length = 2,\n      type = @{c = 0x40634700 \"0>X@@D>X@@0>X@@\", i = 0x40634700,\n        f = 0x40634700, z = 0x40634700, s = 0x40634700@},\n      truelength = 1075851272,\n    @},\n    primsxp = @{offset = 2@},\n    symsxp = @{pname = 0x2, value = 0x40634700, internal = 0x40203008@},\n    listsxp = @{carval = 0x2, cdrval = 0x40634700, tagval = 0x40203008@},\n    envsxp = @{frame = 0x2, enclos = 0x40634700@},\n    closxp = @{formals = 0x2, body = 0x40634700, env = 0x40203008@},\n    promsxp = @{value = 0x2, expr = 0x40634700, env = 0x40203008@}\n  @}\n@}\n@end group\n@end example\n\n@noindent\n(Debugger output reformatted for better legibility).\n\nUsing @code{R_PV()} one can ``inspect'' the values of the various\nelements of the SEXP, for example,\n\n@example\n@group\n(gdb) p R_PV($1->attrib)\n$names\n[1] \"a\" \"b\"\n\n$row.names\n[1] \"1\" \"2\" \"3\"\n\n$class\n[1] \"data.frame\"\n\n$3 = void\n@end group\n@end example\n\nTo find out where exactly the corresponding information is stored, one\nneeds to go ``deeper'':\n\n@example\n@group\n(gdb) set $a = $1->attrib\n(gdb) p $a->u.listsxp.tagval->u.symsxp.pname->u.vecsxp.type.c\n$4 = 0x405d40e8 \"names\"\n(gdb) p $a->u.listsxp.carval->u.vecsxp.type.s[1]->u.vecsxp.type.c\n$5 = 0x40634378 \"b\"\n(gdb) p $1->u.vecsxp.type.s[0]->u.vecsxp.type.i[0]\n$6 = 1\n(gdb) p $1->u.vecsxp.type.s[1]->u.vecsxp.type.i[1]\n$7 = 5\n@end group\n@end example\n\nAnother alternative is the @code{R_inspect} function which shows the\nlow-level structure of the objects recursively (addresses differ from\nthe above as this example is created on another machine):\n\n@example\n@group\n(gdb) p R_inspect($1)\n@@100954d18 19 VECSXP g0c2 [OBJ,NAM(2),ATT] (len=2, tl=0)\n  @@100954d50 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 1,2,3\n  @@100954d88 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 4,5,6\nATTRIB:\n  @@102a70140 02 LISTSXP g0c0 []\n    TAG: @@10083c478 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] \"names\"\n    @@100954dc0 16 STRSXP g0c2 [NAM(2)] (len=2, tl=0)\n      @@10099df28 09 CHARSXP g0c1 [MARK,gp=0x21] \"a\"\n      @@10095e518 09 CHARSXP g0c1 [MARK,gp=0x21] \"b\"\n    TAG: @@100859e60 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] \"row.names\"\n    @@102a6f868 13 INTSXP g0c1 [NAM(2)] (len=2, tl=1) -2147483648,-3\n    TAG: @@10083c948 01 SYMSXP g0c0 [MARK,gp=0x4000] \"class\"\n    @@102a6f838 16 STRSXP g0c1 [NAM(2)] (len=1, tl=1)\n      @@1008c6d48 09 CHARSXP g0c2 [MARK,gp=0x21,ATT] \"data.frame\"\n@end group\n@end example\n\nIn general the representation of each object follows the format:\n\n@smallexample\n@@<address> <type-nr> <type-name> <gc-info> [<flags>] ...\n@end smallexample\n\nFor a more fine-grained control over the depth of the recursion\nand the output of vectors @code{R_inspect3} takes additional two character()\nparameters: maximum depth and the maximal number of elements that will\nbe printed for scalar vectors. The defaults in @code{R_inspect} are\ncurrently -1 (no limit) and 5 respectively.\n\n\n@node System and foreign language interfaces, The R API, Debugging, Top\n@chapter System and foreign language interfaces\n\n@menu\n* Operating system access::     \n* Interface functions .C and .Fortran::  \n* dyn.load and dyn.unload::     \n* Registering native routines::  \n* Creating shared objects::     \n* Interfacing C++ code::        \n* Fortran I/O::                 \n* Linking to other packages::   \n* Handling R objects in C::     \n* Interface functions .Call and .External::  \n* Evaluating R expressions from C::  \n* Parsing R code from C::       \n* External pointers and weak references::  \n* Vector accessor functions::   \n* Character encoding issues::   \n@end menu\n\n@node  Operating system access, Interface functions .C and .Fortran, System and foreign language interfaces, System and foreign language interfaces\n@section  Operating system access\n@cindex Operating system access\n\nAccess to operating system functions is @emph{via} the @R{} functions\n@code{system} and @code{system2}.\n@findex system\n@findex system2\nThe details will differ by platform (see the on-line help), and about\nall that can safely be assumed is that the first argument will be a\nstring @code{command} that will be passed for execution (not necessarily\nby a shell) and the second argument to @code{system} will be\n@code{internal} which if true will collect the output of the command\ninto an @R{} character vector.\n\nOn POSIX-compliant OSes these commands pass a command-line to a shell:\nWindows is not POSIX-compliant and there is a separate function\n@code{shell} to do so.\n\nThe function @code{system.time}\n@findex system.time\nis available for timing.  Timing on child processes is only available on\nUnix-alikes, and may not be reliable there.\n\n@node Interface functions .C and .Fortran, dyn.load and dyn.unload, Operating system access, System and foreign language interfaces\n@section Interface functions @code{.C} and @code{.Fortran}\n@cindex Interfaces to compiled code\n\n@findex .C\n@findex .Fortran\n\nThese two functions provide an interface to compiled code that has been\nlinked into @R{}, either at build time or @emph{via} @code{dyn.load}\n(@pxref{dyn.load and dyn.unload}).  They are primarily intended for\ncompiled C and FORTRAN 77 code respectively, but the @code{.C} function\ncan be used with other languages which can generate C interfaces, for\nexample C++ (@pxref{Interfacing C++ code}).\n\nThe first argument to each function is a character string specifying the\nsymbol name as known@footnote{possibly after some platform-specific\ntranslation, e.g.@: adding leading or trailing underscores.} to C or\nFORTRAN, that is the function or subroutine name.  (That the symbol is\nloaded can be tested by, for example, @code{is.loaded(\"cg\")}.  Use the\nname you pass to @code{.C} or @code{.Fortran} rather than the translated\nsymbol name.)\n\nThere can be up to 65 further arguments giving @R{} objects to be passed\nto compiled code.  Normally these are copied before being passed in, and\ncopied again to an @R{} list object when the compiled code returns.  If\nthe arguments are given names, these are used as names for the\ncomponents in the returned list object (but not passed to the compiled\ncode).\n\nThe following table gives the mapping between the modes of @R{} atomic\nvectors and the types of arguments to a C function or FORTRAN\nsubroutine.\n\n@quotation\n@multitable {RRR storage.mode} {RRR unsigned char * RR} {DOUBLE PRECISION}\n@headitem @R{} storage mode @tab  C type  @tab   FORTRAN type\n@item @code{logical}   @tab @code{int *}     @tab @code{INTEGER}\n@item @code{integer}   @tab @code{int *}     @tab @code{INTEGER}\n@item @code{double}    @tab @code{double *}  @tab @code{DOUBLE PRECISION}\n@item @code{complex}   @tab @code{Rcomplex *} @tab @code{DOUBLE COMPLEX}\n@item @code{character} @tab @code{char **}   @tab @code{CHARACTER*255}\n@item @code{raw}       @tab @code{unsigned char *}    @tab none\n@end multitable\n@end quotation\n\n@noindent\nDo please note the first two.  On the 64-bit Unix/Linux/macOS platforms,\n@code{long} is 64-bit whereas @code{int} and @code{INTEGER} are 32-bit.\nCode ported from S-PLUS (which uses @code{long *} for @code{logical} and\n@code{integer}) will not work on all 64-bit platforms (although it may\nappear to work on some, including Windows).  Note also that if your\ncompiled code is a mixture of C functions and FORTRAN subprograms the\nargument types must match as given in the table above.\n\nC type @code{Rcomplex} is a structure with @code{double} members\n@code{r} and @code{i} defined in the header file @file{R_ext/Complex.h}\nincluded by @file{R.h}.  (On most platforms this is stored in a way\ncompatible with the C99 @code{double complex} type: however, it may not\nbe possible to pass @code{Rcomplex} to a C99 function expecting a\n@code{double complex} argument.  Nor need it be compatible with a C++\n@code{complex} type.  Moreover, the compatibility can depends on the\noptimization level set for the compiler.)\n\nOnly a single character string can be passed to or from FORTRAN, and the\nsuccess of this is compiler-dependent.  Other @R{} objects can be passed\nto @code{.C}, but it is much better to use one of the other interfaces.\n\nIt is possible to pass numeric vectors of storage mode @code{double} to\nC as @code{float *} or to FORTRAN as @code{REAL} by setting the\nattribute @code{Csingle}, most conveniently by using the @R{} functions\n@code{as.single}, @code{single} or @code{mode}.  This is intended only\nto be used to aid interfacing existing C or FORTRAN code.\n\nLogical values are sent as @code{0} (@code{FALSE}), @code{1}\n(@code{TRUE}) or @code{INT_MIN = -2147483648} (@code{NA}, but only if\n@code{NAOK} is true), and the compiled code should return one of these\nthree values.  (Non-zero values other than @code{INT_MIN} are mapped to\n@code{TRUE}.)\n\nUnless formal argument @code{NAOK} is true, all the other arguments are\nchecked for missing values @code{NA} and for the @acronym{IEEE} special\nvalues @code{NaN}, @code{Inf} and @code{-Inf}, and the presence of any\nof these generates an error.  If it is true, these values are passed\nunchecked.\n\nArgument @code{PACKAGE} confines the search for the symbol name to a\nspecific shared object (or use @code{\"base\"} for code compiled into\n@R{}).  Its use is highly desirable, as there is no way to avoid two\npackage writers using the same symbol name, and such name clashes are\nnormally sufficient to cause @R{} to crash.  (If it is not present and\nthe call is from the body of a function defined in a package namespace,\nthe shared object loaded by the first (if any) @code{useDynLib}\ndirective will be used.  \n@c However, prior to @R{} 2.15.2 the detection of the correct namespace is\n@c unreliable and you are strongly recommended to use the @code{PACKAGE}\n@c argument for packages to be used with earlier versions of @R{}.\n\nNote that the compiled code should not return anything except through\nits arguments: C functions should be of type @code{void} and FORTRAN\nsubprograms should be subroutines.\n\nTo fix ideas, let us consider a very simple example which convolves two\nfinite sequences. (This is hard to do fast in interpreted @R{} code, but\neasy in C code.)  We could do this using @code{.C} by\n\n@example\n@group\nvoid convolve(double *a, int *na, double *b, int *nb, double *ab)\n@{\n    int nab = *na + *nb - 1;\n\n    for(int i = 0; i < nab; i++)\n        ab[i] = 0.0;\n    for(int i = 0; i < *na; i++)\n        for(int j = 0; j < *nb; j++)\n            ab[i + j] += a[i] * b[j];\n@}\n@end group\n@end example\n\n@noindent\ncalled from @R{} by\n\n@example\n@group\nconv <- function(a, b)\n    .C(\"convolve\",\n       as.double(a),\n       as.integer(length(a)),\n       as.double(b),\n       as.integer(length(b)),\n       ab = double(length(a) + length(b) - 1))$ab\n@end group\n@end example\n\nNote that we take care to coerce all the arguments to the correct @R{}\nstorage mode before calling @code{.C}; mistakes in matching the types\ncan lead to wrong results or hard-to-catch errors.\n\nSpecial care is needed in handling @code{character} vector arguments in\nC (or C++).  On entry the contents of the elements are duplicated and\nassigned to the elements of a @code{char **} array, and on exit the\nelements of the C array are copied to create new elements of a character\nvector.  This means that the contents of the character strings of the\n@code{char **} array can be changed, including to @code{\\0} to shorten\nthe string, but the strings cannot be lengthened.  It is\npossible@footnote{Note that this is then not checked for over-runs by\noption @code{CBoundsCheck = TRUE}.} to allocate a new string @emph{via}\n@code{R_alloc} and replace an entry in the @code{char **} array by the\nnew string.  However, when character vectors are used other than in a\nread-only way, the @code{.Call} interface is much to be preferred.\n\nPassing character strings to FORTRAN code needs even more care, and\nshould be avoided where possible.  Only the first element of the\ncharacter vector is passed in, as a fixed-length (255) character array.\nUp to 255 characters are passed back to a length-one character vector.\nHow well this works (or even if it works at all) depends on the C and\nFORTRAN compilers on each platform (including on their options).  Often\nwhat is being passed to FORTRAN is one of a small set of possible values\n(a factor in @R{} terms) which could alternatively be passed as an\ninteger code: similarly FORTRAN code that wants to generate diagnostic\nmessages can pass an integer code to a C or @R{} wrapper which will\nconvert it to a character string.\n\nIt is possible to pass some @R{} objects other than atomic vectors via\n@code{.C}, but this is only supported for historical compatibility: use\nthe @code{.Call} or @code{.External} interfaces for such objects.  Any\nC/C++ code that includes @file{Rinternals.h} should be called via\n@code{.Call} or @code{.External}.\n\n@node dyn.load and dyn.unload, Registering native routines, Interface functions .C and .Fortran, System and foreign language interfaces\n@section @code{dyn.load} and @code{dyn.unload}\n@cindex Dynamic loading\n\n@findex dyn.load\n@findex dyn.unload\n\nCompiled code to be used with @R{} is loaded as a shared object\n(Unix-alikes including macOS, @pxref{Creating shared objects} for more\ninformation) or DLL (Windows).\n\nThe shared object/DLL is loaded by @code{dyn.load} and unloaded by\n@code{dyn.unload}.  Unloading is not normally necessary, but it is\nneeded to allow the DLL to be re-built on some platforms, including\nWindows.\n\nThe first argument to both functions is a character string giving the\npath to the object.  Programmers should not assume a specific file\nextension for the object/DLL (such as @file{.so}) but use a construction\nlike\n\n@example\nfile.path(path1, path2, paste0(\"mylib\", .Platform$dynlib.ext))\n@end example\n\n@noindent\nfor platform independence.  On Unix-alike systems the path supplied to\n@code{dyn.load} can be an absolute path, one relative to the current\ndirectory or, if it starts with @samp{~}, relative to the user's home\ndirectory.\n\nLoading is most often done automatically based on the @code{useDynLib()}\ndeclaration in the @file{NAMESPACE} file, but may be done\nexplicitly @emph{via} a call to @code{library.dynam}.\n@findex library.dynam\nThis has the form\n\n@example\nlibrary.dynam(\"libname\", package, lib.loc)\n@end example\n\n@noindent\nwhere @code{libname} is the object/DLL name @emph{with the extension\nomitted}.  Note that the first argument, @code{chname}, should\n@strong{not} be @code{package} since this will not work if the package\nis installed under another name.\n\nUnder some Unix-alike systems there is a choice of how the symbols are\nresolved when the object is loaded, governed by the arguments\n@code{local} and @code{now}.  Only use these if really necessary: in\nparticular using @code{now=FALSE} and then calling an unresolved symbol\nwill terminate @R{} unceremoniously.\n\n@R{} provides a way of executing some code automatically when a object/DLL\nis either loaded or unloaded.  This can be used, for example, to\nregister native routines with @R{}'s dynamic symbol mechanism, initialize\nsome data in the native code, or initialize a third party library.  On\nloading a DLL, @R{} will look for a routine within that DLL named\n@code{R_init_@var{lib}} where @var{lib} is the name of the DLL file with\nthe extension removed.  For example, in the command\n\n@example\nlibrary.dynam(\"mylib\", package, lib.loc)\n@end example\n\n@noindent\nR looks for the symbol named @code{R_init_mylib}.  Similarly, when\nunloading the object, @R{} looks for a routine named\n@code{R_unload_@var{lib}}, e.g., @code{R_unload_mylib}.  In either case,\nif the routine is present, @R{} will invoke it and pass it a single\nargument describing the DLL.  This is a value of type @code{DllInfo}\nwhich is defined in the @file{Rdynload.h} file in the @file{R_ext}\ndirectory.\n\nNote that there are some implicit restrictions on this mechanism as the\nbasename of the DLL needs to be both a valid file name and valid as part\nof a C entry point (e.g.@: it cannot contain @samp{.}): for portable\ncode it is best to confine DLL names to be @acronym{ASCII} alphanumeric\nplus underscore.  If entry point @code{R_init_@var{lib}} is not found it\nis also looked for with @samp{.} replaced by @samp{_}.\n\n\nThe following example shows templates for the initialization and\nunload routines for the @code{mylib} DLL.\n\n@quotation\n@cartouche\n@example\n#include <R_ext/Rdynload.h>\n\nvoid\nR_init_mylib(DllInfo *info)\n@{\n  /* Register routines,\n     allocate resources. */\n@}\n\nvoid\nR_unload_mylib(DllInfo *info)\n@{\n  /* Release resources. */\n@}\n@end example\n@end cartouche\n@end quotation\n\nIf a shared object/DLL is loaded more than once the most recent version\nis used.@footnote{Strictly this is OS-specific, but no exceptions have\nbeen seen for many years.}  More generally, if the same symbol name\nappears in several shared objects, the most recently loaded occurrence\nis used.  The @code{PACKAGE} argument and registration (see the next\nsection) provide good ways to avoid any ambiguity in which occurrence is\nmeant.\n\nOn Unix-alikes the paths used to resolve dynamically linked dependent\nlibraries are fixed (for security reasons) when the process is launched,\nso @code{dyn.load} will only look for such libraries in the locations\nset by the @file{R} shell script (@emph{via} @file{etc/ldpaths}) and in\nthe OS-specific defaults.\n\nWindows allows more control (and less security) over where dependent\nDLLs are looked for.  On all versions this includes the @env{PATH}\nenvironment variable, but with lowest priority: note that it does not\ninclude the directory from which the DLL was loaded.  It is possible to\nadd a single path with quite high priority @emph{via} the @code{DLLpath}\nargument to @code{dyn.load}.  This is (by default) used by\n@code{library.dynam} to include the package's @file{libs/i386} or\n@file{libs/x64} directory in the DLL search path.\n\n\n@node Registering native routines, Creating shared objects, dyn.load and dyn.unload, System and foreign language interfaces\n@section Registering native routines\n@cindex Registering native routines\n\n@menu\n* Speed considerations::        \n* Converting a package to use registration::  \n* Linking to native routines in other packages::  \n@end menu\n\nBy `native' routine, we mean an entry point in compiled code.\n\nIn calls to @code{.C}, @code{.Call}, @code{.Fortran} and\n@code{.External}, @R{} must locate the specified native routine by\nlooking in the appropriate shared object/DLL.  By default, @R{} uses the\noperating-system-specific dynamic loader to lookup the symbol in\nall@footnote{For calls from within a namespace the search is confined to\nthe DLL loaded for that package.} loaded DLLs and the @R{} executable\nor libraries it is linked to.  Alternatively, the author of the DLL can\nexplicitly register routines with @R{} and use a single,\nplatform-independent mechanism for finding the routines in the DLL.  One\ncan use this registration mechanism to provide additional information\nabout a routine, including the number and type of the arguments, and\nalso make it available to @R{} programmers under a different name.\n@c No sign of this in 15 years ....\n@c In the future, registration may be used to\n@c implement a form of ``secure'' or limited native access.\n\nRegistering routines has two main advantages: it provides a\nfaster@footnote{For unregistered entry points the OS's @code{dlsym}\nroutine is used to find addresses.  Its performance varies considerably\nby OS and even in the best case it will need to search a much larger\nsymbol table than, say, the table of @code{.Call} entry points.} way to\nfind the address of the entry point @emph{via} tables stored in the DLL\nat compilation time, and it provides a run-time check that the entry\npoint is called with the right number of arguments and, optionally, the\nright argument types.\n\n@findex R_registerRoutines\nTo register routines with @R{}, one calls the C routine\n@code{R_registerRoutines}.  This is typically done when the DLL is first\nloaded within the initialization routine @code{R_init_@var{dll name}}\ndescribed in @ref{dyn.load and dyn.unload}.  @code{R_registerRoutines}\ntakes 5 arguments.  The first is the @code{DllInfo} object passed by\n@R{} to the initialization routine. This is where @R{} stores the\ninformation about the methods.  The remaining 4 arguments are arrays\ndescribing the routines for each of the 4 different interfaces:\n@code{.C}, @code{.Call}, @code{.Fortran} and @code{.External}.  Each\nargument is a @code{NULL}-terminated array of the element types given in\nthe following table:\n\n@quotation\n@multitable {@code{.External  }} {@code{R_ExternalMethodDef}}\n@item @code{.C} @tab @code{R_CMethodDef}\n@item @code{.Call} @tab @code{R_CallMethodDef}\n@item @code{.Fortran} @tab @code{R_FortranMethodDef}\n@item @code{.External} @tab @code{R_ExternalMethodDef}\n@end multitable\n@end quotation\n\nCurrently, the @code{R_ExternalMethodDef} type is the same as\n@code{R_CallMethodDef} type and contains fields for the name of the\nroutine by which it can be accessed in @R{}, a pointer to the actual\nnative symbol (i.e., the routine itself), and the number of arguments\nthe routine expects to be passed from @R{}. For example, if we had a\nroutine named @code{myCall} defined as\n\n@example\nSEXP myCall(SEXP a, SEXP b, SEXP c);\n@end example\n\n@noindent\nwe would describe this as\n\n@example\nstatic const R_CallMethodDef callMethods[]  = @{\n  @{\"myCall\", (DL_FUNC) &myCall, 3@},\n  @{NULL, NULL, 0@}\n@};\n@end example\n\n@noindent\nalong with any other routines for the @code{.Call} interface. For\nroutines with a variable number of arguments invoked @emph{via} the\n@code{.External} interface, one specifies @code{-1} for the number of\narguments which tells @R{} not to check the actual number passed.\n\nRoutines for use with the @code{.C} and @code{.Fortran} interfaces are\ndescribed with similar data structures, but which have two additional\nfields for describing the type and ``style'' of each argument.  Each of\nthese can be omitted. However, if specified, each should be an array\nwith the same number of elements as the number of parameters for the\nroutine.  The types array should contain the @code{SEXP} types\ndescribing the expected type of the argument. (Technically, the elements\nof the types array are of type @code{R_NativePrimitiveArgType} which is\njust an unsigned integer.)  The @R{} types and corresponding type\nidentifiers are provided in the following table:\n\n@quotation\n@multitable {@code{character  }} {@code{SINGLESXP}}\n@item @code{numeric} @tab @code{REALSXP}\n@item @code{integer} @tab @code{INTSXP}\n@item @code{logical} @tab @code{LGLSXP}\n@item @code{single} @tab @code{SINGLESXP}\n@item @code{character} @tab @code{STRSXP}\n@item @code{list} @tab @code{VECSXP}\n@end multitable\n@end quotation\n\nConsider a C routine, @code{myC}, declared as\n\n@example\nvoid myC(double *x, int *n, char **names, int *status);\n@end example\n\nWe would register it as\n\n@example\n@group\nstatic R_NativePrimitiveArgType myC_t[] = @{\n    REALSXP, INTSXP, STRSXP, LGLSXP\n@};\n\nstatic const R_CMethodDef cMethods[] = @{\n   @{\"myC\", (DL_FUNC) &myC, 4, myC_t@},\n   @{NULL, NULL, 0, NULL@}\n@};\n@end group\n@end example\n\n@c Never implemented ....\n@c One can also specify whether each argument is used simply as input, or\n@c as output, or as both input and output.  The style field in the\n@c description of a method is used for this.  The purpose is to\n@c allow@footnote{but this is not currently done.} @R{} to transfer values\n@c more efficiently across the @R{}-C/FORTRAN interface by avoiding copying\n@c values when it is not necessary. Typically, one omits this information\n@c in the registration data.\n\nNote that @code{.Fortran} entry points are mapped to lowercase, so\nregistration should use lowercase only.\n\nHaving created the arrays describing each routine, the last step is to\nactually register them with @R{}.  We do this by calling\n@code{R_registerRoutines}.  For example, if we have the descriptions\nabove for the routines accessed by the @code{.C} and @code{.Call}\nwe would use the following code:\n\n@example\nvoid\nR_init_myLib(DllInfo *info)\n@{\n   R_registerRoutines(info, cMethods, callMethods, NULL, NULL);\n@}\n@end example\n\nThis routine will be invoked when @R{} loads the shared object/DLL named\n@code{myLib}.  The last two arguments in the call to\n@code{R_registerRoutines} are for the routines accessed by\n@code{.Fortran} and @code{.External} interfaces.  In our example, these\nare given as @code{NULL} since we have no routines of these types.\n\nWhen @R{} unloads a shared object/DLL, its registrations are removed.\nThere is no other facility for unregistering a symbol.\n\nExamples of registering routines can be found in the different packages\nin the @R{} source tree (e.g., @pkg{stats} and @pkg{graphics}).  Also,\nthere is a brief, high-level introduction in @emph{R News} (volume 1/3,\nSeptember 2001, pages 20--23,\n@uref{https://www.r-project.org/@/doc/@/Rnews/Rnews_2001-3.pdf}).\n\nOnce routines are registered, they can be referred to as @R{} objects if\nthis is arranged in the @code{useDynLib} call in the package's\n@file{NAMESPACE} file (see @ref{useDynLib}).  So for example the\n@pkg{stats} package has\n@example\n# Refer to all C/Fortran routines by their name prefixed by C_\nuseDynLib(stats, .registration = TRUE, .fixes = \"C_\")\n@end example\n\n@noindent\nin its @file{NAMESPACE} file, and then @code{ansari.test}'s default\nmethods can contain\n@example\n        pansari <- function(q, m, n)\n            .C(C_pansari, as.integer(length(q)), p = as.double(q),\n                as.integer(m), as.integer(n))$p\n@end example\n\n@noindent\nThis avoids the overhead of looking up an entry point each time it is\nused, and ensures that the entry point in the package is the one used\n(without a @code{PACKAGE = \"pkg\"} argument).\n\n@code{R_init_} routines are often of the form\n@example\nvoid attribute_visible R_init_mypkg(DllInfo *dll)\n@{\n    R_registerRoutines(dll, CEntries, CallEntries, FortEntries,\n                       ExternalEntries);\n    R_useDynamicSymbols(dll, FALSE);\n    R_forceSymbols(dll, TRUE);\n...\n@}\n@end example\n\n@noindent\n@findex R_useDynamicSymbols\n@findex R_forceSymbols\nThe @code{R_useDynamicSymbols} call says the DLL is not to be searched\nfor entry points specified by character strings so @code{.C} etc calls\nwill only find registered symbols: the @code{R_forceSymbols} call only\nallows @code{.C} etc calls which specify entry points by @R{} objects\nsuch as @code{C_pansari} (and not by character strings).  Each provides\nsome protection against accidentally finding your entry points when\npeople supply a character string without a package, and avoids slowing\ndown such searches.  Routine @code{R_forceSymbols} is available from\n@R{} 3.0.0, so packages using it should have a dependency on at least\n@samp{R (>= 3.0.0)}.  (For the visibility attribute @pxref{Controlling\nvisibility}.)\n\nIn more detail, if a package @code{mypkg} contains entry points\n@code{reg} and @code{unreg} and the first is registered as a 0-argument\n@code{.Call} routine, we could use (from code in the package)\n\n@example\n.Call(\"reg\")\n.Call(\"unreg\")\n@end example\n\n@noindent\nWithout or with registration, these will both work.  If\n@code{R_init_mypkg} calls @code{R_useDynamicSymbols(dll, FALSE)}, only\nthe first will work.  If in addition to registration the\n@file{NAMESPACE} file contains\n\n@example\nuseDynLib(mypkg, .registration = TRUE, .fixes = \"C_\")\n@end example\n\n@noindent\nthen we can call @code{.Call(C_reg)}.  Finally, if @code{R_init_mypkg}\nalso calls @code{R_forceSymbols(dll, TRUE)}, only @code{.Call(C_reg)}\nwill work (and not @code{.Call(\"reg\")}).  This is usually what we want:\nit ensures that all of our own @code{.Call} calls go directly to the\nintended code in our package and that no one else accidentally finds our\nentry points.  (Should someone need to call our code from outside the\npackage, for example for debugging, they can use\n@code{.Call(mypkg:::C_reg)}.)\n\n\n@node Speed considerations, Converting a package to use registration, Registering native routines, Registering native routines\n@subsection Speed considerations\n\nSometimes registering native routines or using a @code{PACKAGE} argument\ncan make a large difference.  The results can depend quite markedly on\nthe OS (and even if it is 32- or 64-bit), on the version of @R{} and\nwhat else is loaded into @R{} at the time.\n\nTo fix ideas, first consider @code{x86_64} OS 10.7 and @R{} 2.15.2.  A\nsimple @code{.Call} function might be\n@example\nfoo <- function(x) .Call(\"foo\", x)\n@end example\n@noindent\nwith C code\n@example\n@group\n#include <Rinternals.h>\n\nSEXP foo(SEXP x)\n@{\n    return x;\n@}\n@end group\n@end example\nIf we compile with by @command{R CMD SHLIB foo.c}, load the code by\n@code{dyn.load(\"foo.so\")} and run @code{foo(pi)} it took around 22\nmicroseconds (us). Specifying the DLL by\n@example\nfoo2 <- function(x) .Call(\"foo\", x, PACKAGE = \"foo\")\n@end example\n@noindent\nreduced the time to 1.7 us.\n\nNow consider making these functions part of a package whose\n@file{NAMESPACE} file uses @code{useDynlib(foo)}.  This immediately\nreduces the running time as @code{\"foo\"} will be preferentially looked\nfor @file{foo.dll}.  Without specifying @code{PACKAGE} it took about 5\nus (it needs to fathom out the appropriate DLL each time it is invoked\nbut it does not need to search all DLLs), and with the @code{PACKAGE}\nargument it is again about 1.7 us.\n\nNext suppose the package has registered the native routine @code{foo}.\nThen @code{foo()} still has to find the appropriate DLL but can get to\nthe entry point in the DLL faster, in about 4.2 us.  And @code{foo2()}\nnow takes about 1 us.  If we register the symbols in the\n@file{NAMESPACE} file and use\n@example\nfoo3 <- function(x) .Call(C_foo, x)\n@end example\n@noindent\nthen the address for the native routine is looked up just once when the\npackage is loaded, and @code{foo3(pi)} takes about 0.8 us.\n\nVersions using @code{.C()} rather than @code{.Call()} took about 0.2 us\nlonger.\n\nThese are all quite small differences, but C routines are not uncommonly\ninvoked millions of times for run times of a few microseconds each, and\nthose doing such things may wish to be aware of the differences.\n\nOn Linux and Solaris there is a smaller overhead in looking up\nsymbols.\n\nSymbol lookup on Windows used to be far slower, so @R{} maintains a\nsmall cache.  If the cache is currently empty enough that the symbol can\nbe stored in the cache then the performance is similar to Linux and\nSolaris: if not it may be slower.  @R{}'s own code always uses\nregistered symbols and so these never contribute to the cache: however\nmany other packages do rely on symbol lookup.\n\nIn more recent versions of @R{} all the standard packages register\nnative symbols and do not allow symbol search, so in a new session\n@code{foo()} can only look in @file{foo.so} and may be as fast as\n@code{foo2()}.  This will no longer apply when many contributed packages\nare loaded, and generally those last loaded are searched first.  For\nexample, consider @R{} 3.3.2 on x86_64 Linux.  In an empty @R{} session,\nboth @code{foo()} and @code{foo2()} took about 0.75 us; however after\npackages @CRANpkg{igraph} and @CRANpkg{spatstat} had been loaded (which\nloaded another 12 DLLs), @code{foo()} took 3.6 us but @code{foo2()}\nstill took about 0.80 us.  Using registration in a package reduced this\nto 0.55 us and @code{foo3()} took 0.40 us, times which were unchanged\nwhen further packages were loaded.\n\n@node Converting a package to use registration, Linking to native routines in other packages, Speed considerations, Registering native routines\n@subsection Example: converting a package to use registration\n\nThe @pkg{splines} package was converted to use symbol registration in\n2001, but we can use it as an example@footnote{Because it is a standard\npackage, one would need to rename it before attempting to reproduce the\naccount here.} of what needs to be done for a small package.\n\n@itemize\n\n@item\nFind the relevant entry points.\nThis is somewhat OS-specific, but something like the following should be\npossible at the OS command-line\n\n@example\n@group\nnm -g /path/to/splines.so | grep \" T \"\n0000000000002670 T _spline_basis\n0000000000001ec0 T _spline_value\n@end group\n@end example\n\n@noindent\nThis indicates that there are two relevant entry points. (They may or\nmay not have a leading underscore, as here. Fortran entry points will\nhave a trailing underscore.)  Check in the @R{} code that they are\ncalled by the package and how: in this case they are used by\n@code{.Call}.\n\nAlternatively, examine the package's @R{} code for all @code{.C},\n@code{.Fortran}, @code{.Call} and @code{.External} calls.\n\n@item\nConstruct the registration table.  First write skeleton registration\ncode, conventionally in file @file{src/init.c} (or at the end of the\nonly C source file in the package: if included in a C++ file the\n@samp{R_init} function would need to be declared @code{extern \"C\"}):\n\n@example\n@group\n#include <stdlib.h> // for NULL\n#include <R_ext/Rdynload.h>\n\n#define CALLDEF(name, n)  @{#name, (DL_FUNC) &name, n@}\n\nstatic const R_CallMethodDef R_CallDef[] = @{\n   CALLDEF(spline_basis, ?),\n   CALLDEF(spline_value, ?),\n   @{NULL, NULL, 0@}\n@};\n\nvoid R_init_splines(DllInfo *dll)\n@{\n    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);\n@}\n@end group\n@end example\n\n@noindent\nand then replace the @code{?} in the skeleton with the actual numbers of\narguments.  You will need to add declarations (also known as\n`prototypes') of the functions unless appending to the only C source\nfile.  Some packages will already have these in a header file, or you\ncould create one and include it in @file{init.c}, for example\n@file{splines.h} containing\n\n@smallexample\n@group\n#include <Rinternals.h> // for SEXP\nextern SEXP spline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs);\nextern SEXP spline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv);\n@end group\n@end smallexample\n@noindent\nTools are available to extract declarations, at least for C and C++\ncode: see the help file for\n@code{package_native_routine_registration_skeleton} in package\n@pkg{tools}. Here we could have used\n@example\ncproto -I/path/to/R/include -e splines.c\n@end example\n\nFor examples of registering other types of calls, see packages\n@pkg{graphics} and @pkg{stats}.  In particular, when registering entry\npoints for @code{.Fortran} one needs declarations as if called from C,\nsuch as\n\n@example\n@group\n#include <R_ext/RS.h>\nvoid F77_NAME(supsmu)(int *n, double *x, double *y,\n                      double *w, int *iper, double *span, double *alpha,\n                      double *smo, double *sc, double *edf);\n@end group\n@end example\n\nOne can get away with inaccurate argument lists in the declarations: it\nis easy to specify the arguments for @code{.Call} (all @code{SEXP}) and\n@code{.External} (one @code{SEXP}) and as the arguments for @code{.C}\nand @code{.Fortran} are all pointers, specifying them as @code{void *}\nsuffices. (For most platforms one can omit all the arguments.)\n\n@item\n(Optional but highly recommended.)  Restrict @code{.Call} etc to use the\nsymbols you chose to register by editing @file{src/init.c} to contain\n\n@example\n@group\nvoid R_init_splines(DllInfo *dll)\n@{\n    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);\n    R_useDynamicSymbols(dll, FALSE);\n@}\n@end group\n@end example\n\n@end itemize\n\nA skeleton for the steps so far can be made using\n@code{package_native_routine_registration_skeleton} in package\n@pkg{tools}.  This will optionally create declarations based on the\nusage in the @R{} code.\n\nThe remaining steps are optional but recommended.\n\n@itemize\n@item\nEdit the @file{NAMESPACE} file to create @R{} objects for the registered\nsymbols:\n\n@example\nuseDynLib(splines, .registration = TRUE, .fixes = \"C_\")\n@end example\n\n@item\nFind all the relevant calls in the @R{} code and edit them to use the\n@R{} objects.  This entailed changing the lines\n\n@smallexample\ntemp <- .Call(\"spline_basis\", knots, ord, x, derivs, PACKAGE = \"splines\")\ny[accept] <- .Call(\"spline_value\", knots, coeff, ord, x[accept], deriv, PACKAGE = \"splines\")\ny = .Call(\"spline_value\", knots, coef(object), ord, x, deriv, PACKAGE = \"splines\")\n@end smallexample\n@noindent\nto\n\n@smallexample\ntemp <- .Call(C_spline_basis, knots, ord, x, derivs)\ny[accept] <- .Call(C_spline_value, knots, coeff, ord, x[accept], deriv)\ny = .Call(C_spline_value, knots, coef(object), ord, x, deriv)\n@end smallexample\n\nCheck that there is no @code{exportPattern} directive which\nunintentionally exports the newly created @R{} objects.\n\n@item\nRestrict @code{.Call} to use the @R{} symbols by editing\n@file{src/init.c} to contain\n\n@example\n@group\nvoid R_init_splines(DllInfo *dll)\n@{\n    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);\n    R_useDynamicSymbols(dll, FALSE);\n    R_forceSymbols(dll, TRUE);\n@}\n@end group\n@end example\n\n@item\nConsider visibility.  On some OSes we can hide entry points from the\nloader, which precludes any possible name clashes and calling them\naccidentally (usually with incorrect arguments and crashing the @R{}\nprocess). If we repeat the first step we now see\n\n@example\n@group\nnm -g /path/to/splines.so | grep \" T \"\n0000000000002e00 T _R_init_splines\n00000000000025e0 T _spline_basis\n0000000000001e20 T _spline_value\n@end group\n@end example\n\n@noindent\nIf there were any entry points not intended to be used by the package we\nshould try to avoid exporting them, for example by making them\n@code{static}.  Now that the two relevant entry points are only accessed\n@emph{via} the registration table, we can hide them.  There are two ways\nto do so on some Unix-alikes.  We can hide individual entry points\n@emph{via}\n\n@example\n@group\n#include <R_ext/Visibility.h>\n\nSEXP attribute_hidden\nspline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs)\n@dots{}\n\nSEXP attribute_hidden\nspline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv)\n@dots{}\n@end group\n@end example\n\n@noindent\nAlternatively, we can change the default visibility for all C symbols by\nincluding\n\n@example\nPKG_CFLAGS = $(C_VISIBILITY)\n@end example\n\n@noindent\nin @file{src/Makevars}, and then we need to allow registration by\ndeclaring @code{R_init_splines} to be visible:\n\n@example\n@group\n#include <R_ext/Visibility.h>\n\nvoid attribute_visible\nR_init_splines(DllInfo *dll)\n@dots{}\n@end group\n@end example\n\n@noindent\n@xref{Controlling visibility} for more details, including using Fortran\ncode and ways to restrict visibility on Windows.\n\n@item\nWe end up with a file @file{src/init.c} containing\n\n@quotation\n@cartouche\n@example\n#include <stdlib.h>\n#include <R_ext/Rdynload.h>\n#include <R_ext/Visibility.h>  // optional\n\n#include \"splines.h\"\n\n#define CALLDEF(name, n)  @{#name, (DL_FUNC) &name, n@}\n\nstatic const R_CallMethodDef R_CallDef[] = @{\n    CALLDEF(spline_basis, 4),\n    CALLDEF(spline_value, 5),\n    @{NULL, NULL, 0@}\n@};\n\nvoid\nattribute_visible  // optional\nR_init_splines(DllInfo *dll)\n@{\n    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);\n    R_useDynamicSymbols(dll, FALSE);\n    R_forceSymbols(dll, TRUE);\n@}\n@end example\n@end cartouche\n@end quotation\n\n@end itemize\n\n@node Linking to native routines in other packages,  , Converting a package to use registration, Registering native routines\n@subsection Linking to native routines in other packages\n\nIn addition to registering C routines to be called by @R{}, it can at\ntimes be useful for one package to make some of its C routines available\nto be called by C code in another package.  The interface consists of\ntwo routines declared in header @file{R_ext/Rdynload.h} as\n\n@findex R_RegisterCCallable\n@findex R_GetCCallable\n@example\nvoid R_RegisterCCallable(const char *package, const char *name,\n                         DL_FUNC fptr);\nDL_FUNC R_GetCCallable(const char *package, const char *name);\n@end example\n\nA package @pkg{packA} that wants to make a C routine @code{myCfun}\navailable to C code in other packages would include the call\n\n@example\nR_RegisterCCallable(\"packA\", \"myCfun\", myCfun);\n@end example\n@noindent\nin its initialization function @code{R_init_packA}.  A package\n@pkg{packB} that wants to use this routine would retrieve the function\npointer with a call of the form\n\n@example\np_myCfun = R_GetCCallable(\"packA\", \"myCfun\");\n@end example\n\nThe author of @pkg{packB} is responsible for ensuring that\n@code{p_myCfun} has an appropriate declaration. In the future @R{} may\nprovide some automated tools to simplify exporting larger numbers of\nroutines.\n\nA package that wishes to make use of header files in other packages\nneeds to declare them as a comma-separated list in the field\n@samp{LinkingTo} in the @file{DESCRIPTION} file.  This then arranges\nfor the @file{include} directories in the installed linked-to packages\nto be added to the include paths for C and C++ code.\n\nIt must specify@footnote{whether or not @samp{LinkingTo} is used.}\n@samp{Imports} or @samp{Depends} of those packages, for they have to be\nloaded@footnote{so there needs to be a corresponding @code{import} or\n@code{importFrom} entry in the @file{NAMESPACE} file.} prior to this one\n(so the path to their compiled code has been registered).\n\n\n@acronym{CRAN} examples of the use of this mechanism include @CRANpkg{coxme}\nlinking to @CRANpkg{bdsmatrix} and @CRANpkg{xts} linking to\n@CRANpkg{zoo}.\n\n@node Creating shared objects, Interfacing C++ code, Registering native routines, System and foreign language interfaces\n@section Creating shared objects\n@cindex Creating shared objects\n@findex R CMD SHLIB\n\nShared objects for loading into @R{} can be created using @command{R CMD\nSHLIB}.  This accepts as arguments a list of files which must be object\nfiles (with extension @file{.o}) or sources for C, C++, FORTRAN 77,\nFortran 9x, Objective C or Objective C++ (with extensions @file{.c},\n@file{.cc} or @file{.cpp}, @file{.f}, @file{.f90} or @file{.f95},\n@file{.m}, and @file{.mm} or @file{.M}, respectively), or commands to be\npassed to the linker.  See @kbd{R CMD SHLIB --help} (or the @R{} help\nfor @code{SHLIB}) for usage information.\n\nIf compiling the source files does not work ``out of the box'', you can\nspecify additional flags by setting some of the variables\n@vindex PKG_CPPFLAGS\n@code{PKG_CPPFLAGS} (for the C preprocessor, typically @samp{-I} flags),\n@vindex PKG_CFLAGS\n@vindex PKG_CXXFLAGS\n@vindex PKG_FFLAGS\n@vindex PKG_FCFLAGS\n@vindex PKG_OBJCFLAGS\n@vindex PKG_OBJCXXFLAGS\n@code{PKG_CFLAGS}, @code{PKG_CXXFLAGS}, @code{PKG_FFLAGS},\n@code{PKG_FCFLAGS}, @code{PKG_OBJCFLAGS}, and @code{PKG_OBJCXXFLAGS}\n(for the C, C++, FORTRAN 77, Fortran 9x, Objective C, and Objective C++\ncompilers, respectively) in the file @file{Makevars} in the compilation\ndirectory (or, of course, create the object files directly from the\ncommand line).\n@vindex PKG_LIBS\nSimilarly, variable @code{PKG_LIBS} in @file{Makevars} can be used for\nadditional @samp{-l} and @samp{-L} flags to be passed to the linker when\nbuilding the shared object. (Supplying linker commands as arguments to\n@code{R CMD SHLIB} will take precedence over @code{PKG_LIBS} in\n@file{Makevars}.)\n\n@vindex OBJECTS\nIt is possible to arrange to include compiled code from other languages\nby setting the macro @samp{OBJECTS} in file @file{Makevars}, together\nwith suitable rules to make the objects.\n\nFlags that are already set (for example in file\n@file{etc@var{R_ARCH}/Makeconf}) can be overridden by the environment\nvariable @env{MAKEFLAGS} (at least for systems using a POSIX-compliant\n@code{make}), as in (Bourne shell syntax)\n\n@example\nMAKEFLAGS=\"CFLAGS=-O3\" R CMD SHLIB *.c\n@end example\n\nIt is also possible to set such variables in personal @file{Makevars}\nfiles, which are read after the local @file{Makevars} and the system\nmakefiles or in a site-wide @file{Makevars.site} file.\n@ifset UseExternalXrefs\n@xref{Customizing package compilation, , Customizing package compilation,\nR-admin, R Installation and Administration},\n@end ifset\n\n\nNote that as @command{R CMD SHLIB} uses Make, it will not remake a shared\nobject just because the flags have changed, and if @file{test.c} and\n@file{test.f} both exist in the current directory\n\n@example\nR CMD SHLIB test.f\n@end example\n\n@noindent\nwill compile @file{test.c}!\n\n\nIf the @file{src} subdirectory of an add-on package contains source code\nwith one of the extensions listed above or a file @file{Makevars} but\n@strong{not} a file @file{Makefile}, @command{R CMD INSTALL} creates a\nshared object (for loading into @R{} through @code{useDynlib} in the\n@file{NAMESPACE}, or in the @code{.onLoad} function of the package)\nusing the @command{R CMD SHLIB} mechanism.  If file @file{Makevars}\nexists it is read first, then the system makefile and then any personal\n@file{Makevars} files.\n\nIf the @file{src} subdirectory of package contains a file\n@file{Makefile}, this is used by @command{R CMD INSTALL} in place of the\n@code{R CMD SHLIB} mechanism.  @command{make} is called with makefiles\n@file{@var{R_HOME}/etc@var{R_ARCH}/Makeconf}, @file{src/Makefile} and\nany personal @file{Makevars} files (in that order).  The first target\nfound in @file{src/Makefile} is used.\n\nIt is better to make use of a @file{Makevars} file rather than a\n@file{Makefile}: the latter should be needed only exceptionally.\n\n@c Not so clearcut on case-insensitive file systems.\n@c Note that whereas @code{R CMD INSTALL} makes use of a @file{Makefile},\n@c @code{R CMD SHLIB} does not.  The file must be named @file{Makefile},\n@c not for example @file{makefile} nor @file{GNUmakefile}.\n\nUnder Windows the same commands work, but @file{Makevars.win} will be\nused in preference to @file{Makevars}, and only @file{src/Makefile.win}\nwill be used by @code{R CMD INSTALL} with @file{src/Makefile} being\nignored.  For past experiences of building DLLs with a variety of\ncompilers, see file @samp{README.packages}.  \nUnder Windows you can supply an exports definitions file called\n@file{@var{dllname}-win.def}: otherwise all entry points in objects (but\nnot libraries) supplied to @code{R CMD SHLIB} will be exported from the\nDLL.  An example is @file{stats-win.def} for the @pkg{stats} package: a\n@acronym{CRAN} example in package @CRANpkg{fastICA}.\n\nIf you feel tempted to read the source code and subvert these\nmechanisms, please resist.  Far too much developer time has been wasted\nin chasing down errors caused by failures to follow this documentation,\nand even more by package authors demanding explanations as to why their\npackages no longer work.\n@c Jasjeet Singh Sekhon: this is your moment of infamy.\nIn particular, undocumented environment or @command{make} variables are\nnot for use by package writers and are subject to change without notice.\n\n@node Interfacing C++ code, Fortran I/O, Creating shared objects, System and foreign language interfaces\n@section Interfacing C++ code\n@cindex Interfacing C++ code\n@cindex C++ code, interfacing\n\nSuppose we have the following hypothetical C++ library, consisting of\nthe two files @file{X.h} and @file{X.cpp}, and implementing the two\nclasses @code{X} and @code{Y} which we want to use in @R{}.\n\n@quotation\n@cartouche\n@example\n// X.h\n\nclass X @{\npublic: X (); ~X ();\n@};\n\nclass Y @{\npublic: Y (); ~Y ();\n@};\n@end example\n@end cartouche\n@end quotation\n\n@quotation\n@cartouche\n@example\n// X.cpp\n\n#include <R.h>\n#include \"X.h\"\n\nstatic Y y;\n\nX::X()  @{ REprintf(\"constructor X\\n\"); @}\nX::~X() @{ REprintf(\"destructor X\\n\");  @}\nY::Y()  @{ REprintf(\"constructor Y\\n\"); @}\nY::~Y() @{ REprintf(\"destructor Y\\n\");  @}\n@end example\n@end cartouche\n@end quotation\n\nTo use with @R{}, the only thing we have to do is writing a wrapper\nfunction and ensuring that the function is enclosed in\n\n@example\n@group\nextern \"C\" @{\n\n@}\n@end group\n@end example\n\nFor example,\n\n@quotation\n@cartouche\n@example\n// X_main.cpp:\n\n#include \"X.h\"\n\nextern \"C\" @{\n\nvoid X_main () @{\n  X x;\n@}\n\n@} // extern \"C\"\n@end example\n@end cartouche\n@end quotation\n\nCompiling and linking should be done with the C++ compiler-linker\n(rather than the C compiler-linker or the linker itself); otherwise, the\nC++ initialization code (and hence the constructor of the static\nvariable @code{Y}) are not called.  On a properly configured system, one\ncan simply use\n\n@example\nR CMD SHLIB X.cpp X_main.cpp\n@end example\n\n@noindent\nto create the shared object, typically @file{X.so} (the file name\nextension may be different on your platform).  Now starting @R{} yields\n\n@example\n@group\nR version 2.14.1 Patched (2012-01-16 r58124)\nCopyright (C) 2012 The R Foundation for Statistical Computing\n...\nType    \"q()\" to quit R.\n@end group\n\n@group\nR> dyn.load(paste(\"X\", .Platform$dynlib.ext, sep = \"\"))\nconstructor Y\nR> .C(\"X_main\")\nconstructor X\ndestructor X\nlist()\nR> q()\nSave workspace image? [y/n/c]: y\ndestructor Y\n@end group\n@end example\n\nThe @R{} for Windows @acronym{FAQ} (@file{rw-FAQ}) contains details of how\nto compile this example under Windows.\n\nEarlier versions of this example used C++ iostreams: this is best\navoided.  There is no guarantee that the output will appear in the @R{}\nconsole, and indeed it will not on the @R{} for Windows console.  Use\n@R{} code or the C entry points (@pxref{Printing}) for all I/O if at all\npossible.  Examples have been seen where merely loading a DLL that\ncontained calls to C++ I/O upset @R{}'s own C I/O (for example by\nresetting buffers on open files).\n\nMost @R{} header files can be included within C++ programs but they\nshould @strong{not} be included within an @code{extern \"C\"} block (as\nthey include system headers@footnote{Even including C system headers in\nsuch a block has caused compilation errors.}).  The inclusion of system\nheaders in C++ changed in @R{} 3.3.0@footnote{with an exception for the\nSolaris C++ compiler, removed in @R{} 3.4.0.}, so if you care about\nearlier versions of @R{} please check your package there.\n\nLegacy header @file{S.h} cannot be used with C++.\n\n@subsection External C++ code\n\nQuite a lot of external C++ software is header-only (e.g.@: most of the\nBoost `libraries' including all those supplied by package @CRANpkg{BH},\nand most of Armadillo as supplied by package @CRANpkg{RcppArmadillo})\nand so is compiled when an @R{} package which uses it is installed.\nThis causes few problems.\n\nA small number of external libraries used in @R{} packages have a C++\ninterface to a library of compiled code, e.g.@: packages @CRANpkg{rgdal}\nand @CRANpkg{rjags}.  This raises many more problems!  The C++ interface\nuses name-mangling and the\nABI@footnote{@uref{https://en.wikipedia.org/@/wiki/@/Application_binary_interface}.}\nmay depend on the compiler, version and even C++ defines@footnote{For\nexample, @samp{_GLIBCXX_USE_CXX11_ABI} in @command{g++} 5.1 and later:\n@uref{https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html}.},\nso requires the package C++ code to be compiled in exactly the same way\nas the library (and what that was is often undocumented).  Examples\ninclude use of @command{g++} @emph{vs} @command{clang++} or Solaris'\n@command{CC}, and the two ABIs available for C++11 in @command{g++} with\ndifferent defaults for GCC 4.9 and 5.x in some Linux distributions.\n\nEven fewer external libraries use C++ internally but present a C\ninterface, such as @CRANpkg{rgeos}.  These require the C++ runtime\nlibrary to be linked into the package's shared object/DLL, and this is\nbest done by including a dummy C++ file in the package sources.\n\nThere is a recent trend to link to the C++ interfaces offered by C\nsoftware such as @pkg{hdf5}, @pkg{pcre} and @pkg{ImageMagick}.  Their C\ninterfaces are much preferred for portability (and can be used from C++\ncode).  Also, the C++ interfaces are often optional in the software\nbuild or packaged separately and so users installing from package\nsources are far less likely to already have them installed.\n\n\n@node Fortran I/O, Linking to other packages, Interfacing C++ code, System and foreign language interfaces\n@section Fortran I/O\n\nWe have already warned against the use of C++ iostreams not least\nbecause output is not guaranteed to appear on the @R{} console, and this\nwarning applies equally to Fortran (77 or 9x) output to units @code{*}\nand @code{6}. @xref{Printing from FORTRAN}, which describes workarounds.\n\nIn the past most Fortran compilers implemented I/O on top of the C I/O\nsystem and so the two interworked successfully.  This was true of\n@command{g77}, but it is less true of @command{gfortran} as used in\n@command{gcc} 4 and later.  In particular, any package that makes use of\nFortran I/O will when compiled on Windows interfere with C I/O: when the\nFortran I/O support code is initialized (typically when the package is\nloaded) the C @code{stdout} and @code{stderr} are switched to LF line\nendings.  (Function @code{init} in file\n@file{src/modules/lapack/init_win.c} shows how to mitigate this.  In a\npackage this would look something like\n@example\n#ifdef _WIN32\n# include <fcntl.h>\n#endif\n\nvoid R_init_mypkgname(DllInfo *dll)\n@{\n    // Native symbol registration calls\n\n#ifdef _WIN32\n    // gfortran I/O initialization sets these to _O_BINARY\n    setmode(1, _O_TEXT); /* stdout */\n    setmode(2, _O_TEXT); /* stderr */\n#endif\n@}\n@end example\n@noindent\nin the file used for native symbol registration.)\n\n\n@node Linking to other packages, Handling R objects in C, Fortran I/O, System and foreign language interfaces\n@section Linking to other packages\n\nIt is not in general possible to link a DLL in package @pkg{packA} to a\nDLL provided by package @pkg{packB} (for the security reasons mentioned\nin @ref{dyn.load and dyn.unload}, and also because some platforms\ndistinguish between shared objects and dynamic libraries), but it is on\nWindows.\n\nNote that there can be tricky versioning issues here, as package\n@pkg{packB} could be re-installed after package @pkg{packA} --- it is\ndesirable that the API provided by package @pkg{packB} remains\nbackwards-compatible.\n\nShipping a static library in package @pkg{packB} for other packages to\nlink to avoids most of the difficulties.\n\n@menu\n* Unix-alikes::                 \n* Windows::                     \n@end menu\n\n@node Unix-alikes, Windows, Linking to other packages, Linking to other packages\n@subsection Unix-alikes\n\nIt is possible to link a shared object in package @pkg{packA} to a\nlibrary provided by package @pkg{packB} under limited circumstances\non a Unix-alike OS.  There are severe portability issues, so this is not\nrecommended for a distributed package.\n\nThis is easiest if @pkg{packB} provides a static library\n@file{packB/lib/libpackB.a}.  (Note using directory @file{lib} rather\nthan @file{libs} is conventional, and architecture-specific\nsub-directories may be needed and are assumed in the sample code\nbelow. The code in the static library will need to be compiled with\n@code{PIC} flags on platforms where it matters.)  Then as the code from\npackage @pkg{packB} is incorporated when package @pkg{packA} is\ninstalled, we only need to find the static library at install time for\npackage @pkg{packA}.  The only issue is to find package @pkg{packB}, and\nfor that we can ask @R{} by something like (long lines broken for\ndisplay here)\n\n@example\nPKGB_PATH=`echo 'library(packB);\n  cat(system.file(\"lib\",  package=\"packB\", mustWork=TRUE))' \\\n | \"$@{R_HOME@}/bin/R\" --vanilla --slave`\nPKG_LIBS=\"$(PKGB_PATH)$(R_ARCH)/libpackB.a\"\n@end example\n\nFor a dynamic library @file{packB/lib/libpackB.so}\n(@file{packB/lib/libpackB.dylib} on macOS: note that you cannot link to\na shared object, @file{.so}, on that platform) we could use\n\n@example\nPKGB_PATH=`echo 'library(packB);\n  cat(system.file(\"lib\", package=\"packB\", mustWork=TRUE))' \\\n | \"$@{R_HOME@}/bin/R\" --vanilla --slave`\nPKG_LIBS=-L\"$(PKGB_PATH)$(R_ARCH)\" -lpackB\n@end example\n\n@noindent\nThis will work for installation, but very likely not when package\n@code{packB} is loaded, as the path to package @pkg{packB}'s @file{lib}\ndirectory is not in the @command{ld.so}@footnote{@command{dyld} on macOS,\nand @env{DYLD_LIBRARY_PATHS} below.}  search path.  You can arrange to\nput it there @strong{before} @R{} is launched by setting (on some\nplatforms) @env{LD_RUN_PATH} or @env{LD_LIBRARY_PATH} or adding to the\n@command{ld.so} cache (see @command{man ldconfig}).  On platforms that\nsupport it, the path to the directory containing the dynamic library can\nbe hardcoded at install time (which assumes that the location of package\n@pkg{packB} will not be changed nor the package updated to a changed\nAPI).  On systems with the @command{gcc} or @command{clang} and the\n@acronym{GNU} linker (e.g.@: Linux) and some others this can be done by\ne.g.@:\n\n@example\nPKGB_PATH=`echo 'library(packB);\n  cat(system.file(\"lib\", package=\"packB\", mustWork=TRUE)))' \\\n | \"$@{R_HOME@}/bin/R\" --vanilla --slave`\nPKG_LIBS=-L\"$(PKGB_PATH)$(R_ARCH)\" -Wl,-rpath,\"$(PKGB_PATH)$(R_ARCH)\" -lpackB\n@end example\n\n@noindent\nSome other systems (e.g.@: Solaris with its native linker) use\n@option{-Rdir} rather than @option{-rpath,dir} (and this is accepted by\nthe compiler as well as the linker).\n\nIt may be possible to figure out what is required semi-automatically\nfrom the result of @command{R CMD libtool --config} (look for\n@samp{hardcode}).\n\nMaking headers provided by package @pkg{packB} available to the code to\nbe compiled in package @pkg{packA} can be done by the @code{LinkingTo}\nmechanism (@pxref{Registering native routines}).\n\n\n@node Windows,  , Unix-alikes, Linking to other packages\n@subsection Windows\n\nSuppose package @pkg{packA} wants to make use of compiled code provided\nby @pkg{packB} in DLL @file{packB/libs/exB.dll}, possibly the package's\nDLL @file{packB/libs/packB.dll}.  (This can be extended to linking to\nmore than one package in a similar way.)  There are three issues to be\naddressed:\n\n@itemize\n\n@item\nMaking headers provided by package @pkg{packB} available to the code to\nbe compiled in package @pkg{packA}.\n\nThis is done by the @code{LinkingTo} mechanism (@pxref{Registering native\nroutines}).\n\n@item preparing @code{packA.dll} to link to @file{packB/libs/exB.dll}.\n\nThis needs an entry in @file{Makevars.win} of the form\n\n@example\nPKG_LIBS= -L<something> -lexB\n@end example\n@noindent\nand one possibility is that @code{<something>} is the path to the\ninstalled @file{pkgB/libs} directory.  To find that we need to ask @R{}\nwhere it is by something like\n\n@example\nPKGB_PATH=`echo 'library(packB);\n  cat(system.file(\"libs\", package=\"packB\", mustWork=TRUE))' \\\n | rterm --vanilla --slave`\nPKG_LIBS= -L\"$(PKGB_PATH)$(R_ARCH)\" -lexB\n@end example\n\nAnother possibility is to use an import library, shipping with package\n@pkg{packA} an exports file @file{exB.def}.  Then @file{Makevars.win}\ncould contain\n\n@example\nPKG_LIBS= -L. -lexB\n\nall: $(SHLIB) before\n\nbefore: libexB.dll.a\nlibexB.dll.a: exB.def\n@end example\n@noindent\nand then installing package @pkg{packA} will make and use the import\nlibrary for @file{exB.dll}.  (One way to prepare the exports file is to\nuse @file{pexports.exe}.)\n\n@item loading @file{packA.dll} which depends on @file{exB.dll}.\n\nIf @code{exB.dll} was used by package @pkg{packB} (because it is in fact\n@file{packB.dll} or @file{packB.dll} depends on it) and @pkg{packB} has\nbeen loaded before @pkg{packA}, then nothing more needs to be done as\n@file{exB.dll} will already be loaded into the @R{} executable.  (This\nis the most common scenario.)\n\nMore generally, we can use the @code{DLLpath} argument to\n@code{library.dynam} to ensure that @code{exB.dll} is found, for example\nby setting\n\n@example\nlibrary.dynam(\"packA\", pkg, lib,\n              DLLpath = system.file(\"libs\", package=\"packB\"))\n@end example\n\nNote that @code{DLLpath} can only set one path, and so for linking to\ntwo or more packages you would need to resort to setting environment\nvariable @env{PATH}.\n\n@end itemize\n\n@node Handling R objects in C, Interface functions .Call and .External, Linking to other packages, System and foreign language interfaces\n@section Handling R objects in C\n@cindex Handling R objects in C\n\nUsing C code to speed up the execution of an @R{} function is often very\nfruitful.  Traditionally this has been done @emph{via} the @code{.C}\nfunction in @R{}.  However, if a user wants to write C code using\ninternal @R{} data structures, then that can be done using the\n@code{.Call} and @code{.External} functions.  The syntax for the calling\nfunction in @R{} in each case is similar to that of @code{.C}, but the\ntwo functions have different C interfaces.  Generally the @code{.Call}\ninterface is simpler to use, but @code{.External} is a little more\ngeneral.\n@findex .Call\n@findex .External\n\nA call to @code{.Call} is very similar to @code{.C}, for example\n\n@example\n.Call(\"convolve2\", a, b)\n@end example\n\n@noindent\nThe first argument should be a character string giving a C symbol name\nof code that has already been loaded into @R{}.  Up to 65 @R{} objects\ncan passed as arguments.  The C side of the interface is\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP convolve2(SEXP a, SEXP b)\n ...\n@end group\n@end example\n\nA call to @code{.External} is almost identical\n\n@example\n.External(\"convolveE\", a, b)\n@end example\n\n@noindent\nbut the C side of the interface is different, having only one argument\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP convolveE(SEXP args)\n ...\n@end group\n@end example\n\n@noindent\nHere @code{args} is a @code{LISTSXP}, a Lisp-style pairlist from which\nthe arguments can be extracted.\n\nIn each case the @R{} objects are available for manipulation @emph{via}\na set of functions and macros defined in the header file\n@file{Rinternals.h} or some @Sl{}-compatibility macros@footnote{That is,\nsimilar to those defined in @Sl{} version 4 from the 1990s: these are\nnot kept up to date and are not recommended for new projects.  Prior to\n@R{} 3.3.0 it was not compatible with defining @code{R_NO_REMAP}.} defined\nin @file{Rdefines.h}.  See @ref{Interface functions .Call and .External}\nfor details on @code{.Call} and @code{.External}.\n\nBefore you decide to use @code{.Call} or @code{.External}, you should\nlook at other alternatives.  First, consider working in interpreted @R{}\ncode; if this is fast enough, this is normally the best option.  You\nshould also see if using @code{.C} is enough.  If the task to be\nperformed in C is simple enough involving only atomic vectors and\nrequiring no call to @R{}, @code{.C} suffices. A great deal of useful\ncode was written using just @code{.C} before @code{.Call} and\n@code{.External} were available.  These interfaces allow much more\ncontrol, but they also impose much greater responsibilities so need to\nbe used with care.  Neither @code{.Call} nor @code{.External} copy their\narguments: you should treat arguments you receive through these\ninterfaces as read-only.\n\nTo handle @R{} objects from within C code we use the macros and functions\nthat have been used to implement the core parts of @R{}.  A\npublic@footnote{ @pxref{The R API}: note that these are not all part of\nthe API.}  subset of these is defined in the header file\n@file{Rinternals.h} in the directory @file{@var{R_INCLUDE_DIR}} (default\n@file{@var{R_HOME}/include}) that should be available on any @R{}\ninstallation.\n\nA substantial amount of @R{}, including the standard packages, is\nimplemented using the functions and macros described here, so the @R{}\nsource code provides a rich source of examples and ``how to do it'': do\nmake use of the source code for inspirational examples.\n\nIt is necessary to know something about how @R{} objects are handled in\nC code.  All the @R{} objects you will deal with will be handled with\nthe type @dfn{SEXP}@footnote{SEXP is an acronym for @emph{S}imple\n@emph{EXP}ression, common in LISP-like language syntaxes.}, which is a\npointer to a structure with typedef @code{SEXPREC}.  Think of this\nstructure as a @emph{variant type} that can handle all the usual types\nof @R{} objects, that is vectors of various modes, functions,\nenvironments, language objects and so on.  The details are given later\nin this section and in @ref{R Internal Structures, , R Internal\nStructures, R-ints, R Internals}, but for most\npurposes the programmer does not need to know them.  Think rather of a\nmodel such as that used by Visual Basic, in which @R{} objects are\nhanded around in C code (as they are in interpreted @R{} code) as the\nvariant type, and the appropriate part is extracted for, for example,\nnumerical calculations, only when it is needed.  As in interpreted @R{}\ncode, much use is made of coercion to force the variant object to the\nright type.\n\n@menu\n* Garbage Collection::          \n* Allocating storage::          \n* Details of R types::          \n* Attributes::                  \n* Classes::                     \n* Handling lists::              \n* Handling character data::     \n* Finding and setting variables::  \n* Some convenience functions::  \n* Named objects and copying::   \n@end menu\n\n@node Garbage Collection, Allocating storage, Handling R objects in C, Handling R objects in C\n@subsection Handling the effects of garbage collection\n@cindex Garbage collection\n\n@findex PROTECT\n@findex UNPROTECT\n\nWe need to know a little about the way @R{} handles memory allocation.\nThe memory allocated for @R{} objects is not freed by the user; instead,\nthe memory is from time to time @dfn{garbage collected}.  That is, some\nor all of the allocated memory not being used is freed or marked as\nre-usable.\n\nThe @R{} object types are represented by a C structure defined by a\ntypedef @code{SEXPREC} in @file{Rinternals.h}.  It contains several\nthings among which are pointers to data blocks and to other\n@code{SEXPREC}s.  A @code{SEXP} is simply a pointer to a @code{SEXPREC}.\n\nIf you create an @R{} object in your C code, you must tell @R{} that you\nare using the object by using the @code{PROTECT} macro on a pointer to\nthe object. This tells @R{} that the object is in use so it is not\ndestroyed during garbage collection.  Notice that it is the object which\nis protected, not the pointer variable.  It is a common mistake to\nbelieve that if you invoked @code{PROTECT(@var{p})} at some point then\n@var{p} is protected from then on, but that is not true once a new\nobject is assigned to @var{p}.\n\nProtecting an @R{} object automatically protects all the @R{} objects\npointed to in the corresponding @code{SEXPREC}, for example all elements\nof a protected list are automatically protected.\n\nThe programmer is solely responsible for housekeeping the calls to\n@code{PROTECT}.  There is a corresponding macro @code{UNPROTECT} that\ntakes as argument an @code{int} giving the number of objects to\nunprotect when they are no longer needed.  The protection mechanism is\nstack-based, so @code{UNPROTECT(@var{n})} unprotects the last @var{n}\nobjects which were protected.  The calls to @code{PROTECT} and\n@code{UNPROTECT} must balance when the user's code returns.  @R{} will\nwarn about @code{\"stack imbalance in .Call\"} (or @code{.External}) if\nthe housekeeping is wrong.\n\nHere is a small example of creating an @R{} numeric vector in C code:\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\n    SEXP ab;\n      ....\n    ab = PROTECT(allocVector(REALSXP, 2));\n    REAL(ab)[0] = 123.45;\n    REAL(ab)[1] = 67.89;\n    UNPROTECT(1);\n@end group\n@end example\n\nNow, the reader may ask how the @R{} object could possibly get removed\nduring those manipulations, as it is just our C code that is running.\nAs it happens, we can do without the protection in this example, but in\ngeneral we do not know (nor want to know) what is hiding behind the @R{}\nmacros and functions we use, and any of them might cause memory to be\nallocated, hence garbage collection and hence our object @code{ab} to be\nremoved. It is usually wise to err on the side of caution and assume\nthat any of the @R{} macros and functions might remove the object.\n\nIn some cases it is necessary to keep better track of whether protection\nis really needed.  Be particularly aware of situations where a large\nnumber of objects are generated.  The pointer protection stack has a\nfixed size (default 10,000) and can become full.  It is not a good idea\nthen to just @code{PROTECT} everything in sight and @code{UNPROTECT}\nseveral thousand objects at the end. It will almost invariably be\npossible to either assign the objects as part of another object (which\nautomatically protects them) or unprotect them immediately after use.\n\nProtection is not needed for objects which @R{} already knows are in\nuse.  In particular, this applies to function arguments.\n\nThere is a less-used macro @code{UNPROTECT_PTR(@var{s})} that unprotects\nthe object pointed to by the @code{SEXP} @var{s}, even if it is not the\ntop item on the pointer protection stack. This is rarely needed outside\nthe parser (the @R{} sources currently have three examples, one in\n@file{src/main/plot3d.c}).\n@findex UNPROTECT_PTR\n\nSometimes an object is changed (for example duplicated, coerced or\ngrown) yet the current value needs to be protected.  For these cases\n@code{PROTECT_WITH_INDEX} saves an index of the protection location that\ncan be used to replace the protected value using @code{REPROTECT}.\n@findex PROTECT_WITH_INDEX\n@findex REPROTECT\nFor example (from the internal code for @code{optim})\n\n@example\n    PROTECT_INDEX ipx;\n\n    ....\n    PROTECT_WITH_INDEX(s = eval(OS->R_fcall, OS->R_env), &ipx);\n    REPROTECT(s = coerceVector(s, REALSXP), ipx);\n@end example\n\nNote that it is dangerous to mix @code{UNPROTECT_PTR} with\n@code{PROTECT_WITH_INDEX}, as the former changes the protection\nlocations of objects that were protected after the one being\nunprotected.\n\n@findex R_PreserveObject\n@findex R_ReleaseObject\nThere is another way to avoid the affects of garbage collection: a call\nto @code{R_PreserveObject} adds an object to an internal list of objects\nnot to be collects, and a subsequent call to @code{R_ReleaseObject}\nremoves it from that list.  This provides a way for objects which are\nnot returned as part of @R{} objects to be protected across calls to\ncompiled code: on the other hand it becomes the user's responsibility to\nrelease them when they are no longer needed (and this often requires the\nuse of a finalizer).  It is less efficient that the normal protection\nmechanism, and should be used sparingly.\n\n@node Allocating storage, Details of R types, Garbage Collection, Handling R objects in C\n@subsection Allocating storage\n@cindex Allocating storage\n\nFor many purposes it is sufficient to allocate @R{} objects and\nmanipulate those.  There are quite a few @code{alloc@var{Xxx}} functions\ndefined in @file{Rinternals.h}---you may want to explore them.\n\n@findex allocVector\nOne that is commonly used is @code{allocVector}, the C-level equivalent\nof @R{}-level @code{vector()} and its wrappers such as @code{integer()}\nand @code{character()}.  One distinction is that whereas the @R{}\nfunctions always initialize the elements of the vector,\n@code{allocVector} only does so for lists, expressions and character\nvectors (the cases where the elements are themselves @R{} objects).\n\nIf storage is required for C objects during the calculations this is\nbest allocating by calling @code{R_alloc}; @pxref{Memory allocation}.\nAll of these memory allocation routines do their own error-checking, so\nthe programmer may assume that they will raise an error and not return\nif the memory cannot be allocated.\n\n@node Details of R types, Attributes, Allocating storage, Handling R objects in C\n@subsection Details of R types\n@cindex Details of R types\n\nUsers of the @file{Rinternals.h} macros will need to know how the @R{}\ntypes are known internally.  The different @R{} data types are\nrepresented in C by @dfn{SEXPTYPE}.  Some of these are familiar from\n@R{} and some are internal data types.  The usual @R{} object modes are\ngiven in the table.\n\n@quotation\n@multitable {SEXPTYPE} {numeric with storage mode integer integer}\n@headitem SEXPTYPE @tab @R{} equivalent\n@item @code{REALSXP}  @tab numeric with storage mode @code{double}\n@item @code{INTSXP}   @tab integer\n@item @code{CPLXSXP}  @tab complex\n@item @code{LGLSXP}   @tab logical\n@item @code{STRSXP}   @tab character\n@item @code{VECSXP}   @tab list (generic vector)\n@item @code{LISTSXP}  @tab pairlist\n@item @code{DOTSXP}   @tab a @samp{@dots{}} object\n@item @code{NILSXP}   @tab NULL\n@item @code{SYMSXP}   @tab name/symbol\n@item @code{CLOSXP}   @tab function or function closure\n@item @code{ENVSXP}   @tab environment\n@end multitable\n@end quotation\n\n@noindent\nAmong the important internal @code{SEXPTYPE}s are @code{LANGSXP},\n@code{CHARSXP}, @code{PROMSXP}, etc.  (@strong{N.B.}: although it is\npossible to return objects of internal types, it is unsafe to do so as\nassumptions are made about how they are handled which may be violated at\nuser-level evaluation.)  More details are given in @ref{R Internal\nStructures, , R Internal Structures, R-ints, R Internals}.\n\nUnless you are very sure about the type of the arguments, the code\nshould check the data types.  Sometimes it may also be necessary to\ncheck data types of objects created by evaluating an @R{} expression in\nthe C code.  You can use functions like @code{isReal}, @code{isInteger}\nand @code{isString} to do type checking.  See the header file\n@file{Rinternals.h} for definitions of other such functions.  All of\nthese take a @code{SEXP} as argument and return 1 or 0 to indicate\n@var{TRUE} or @var{FALSE}.\n\nWhat happens if the @code{SEXP} is not of the correct type?  Sometimes\nyou have no other option except to generate an error.  You can use the\nfunction @code{error} for this.  It is usually better to coerce the\nobject to the correct type.  For example, if you find that an\n@code{SEXP} is of the type @code{INTEGER}, but you need a @code{REAL}\nobject, you can change the type by using\n\n@example\n@var{newSexp} = PROTECT(coerceVector(@var{oldSexp}, REALSXP));\n@end example\n\n@noindent\nProtection is needed as a new @emph{object} is created; the object\nformerly pointed to by the @code{SEXP} is still protected but now\nunused.@footnote{If no coercion was required, @code{coerceVector} would\nhave passed the old object through unchanged.}\n\nAll the coercion functions do their own error-checking, and generate\n@code{NA}s with a warning or stop with an error as appropriate.\n\nNote that these coercion functions are @emph{not} the same as calling\n@code{as.numeric} (and so on) in @R{} code, as they do not dispatch on\nthe class of the object.  Thus it is normally preferable to do the\ncoercion in the calling @R{} code.\n\nSo far we have only seen how to create and coerce @R{} objects from C\ncode, and how to extract the numeric data from numeric @R{} vectors.\nThese can suffice to take us a long way in interfacing @R{} objects to\nnumerical algorithms, but we may need to know a little more to create\nuseful return objects.\n\n@node Attributes, Classes, Details of R types, Handling R objects in C\n@subsection Attributes\n@cindex Attributes\n\nMany @R{} objects have attributes: some of the most useful are classes\nand the @code{dim} and @code{dimnames} that mark objects as matrices or\narrays.  It can also be helpful to work with the @code{names} attribute\nof vectors.\n\nTo illustrate this, let us write code to take the outer product of two\nvectors (which @code{outer} and @code{%o%} already do).  As usual the\n@R{} code is simple\n\n@example\nout <- function(x, y)\n@{\n    storage.mode(x) <- storage.mode(y) <- \"double\"\n    .Call(\"out\", x, y)\n@}\n@end example\n\n@noindent\nwhere we expect @code{x} and @code{y} to be numeric vectors (possibly\ninteger), possibly with names.  This time we do the coercion in the\ncalling @R{} code.\n\nC code to do the computations is\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP out(SEXP x, SEXP y)\n@{\n    int nx = length(x), ny = length(y);\n    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));\n    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);\n    for(int i = 0; i < nx; i++) @{\n        double tmp = rx[i];\n        for(int j = 0; j < ny; j++)\n            rans[i + nx*j] = tmp * ry[j];\n    @}\n    UNPROTECT(1);\n    return ans;\n@}\n@end group\n@end example\n\n@noindent\nNote the way @code{REAL} is used: as it is a function call it can be\nconsiderably faster to store the result and index that.\n\nHowever, we would like to set the @code{dimnames} of the result.  We can use\n\n@example\n#include <R.h>\n#include <Rinternals.h>\n\n@group\nSEXP out(SEXP x, SEXP y)\n@{\n    int nx = length(x), ny = length(y);\n    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));\n    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);\n\n    for(int i = 0; i < nx; i++) @{\n      double tmp = rx[i];\n      for(int j = 0; j < ny; j++)\n        rans[i + nx*j] = tmp * ry[j];\n    @}\n\n    SEXP dimnames = PROTECT(allocVector(VECSXP, 2));\n    SET_VECTOR_ELT(dimnames, 0, getAttrib(x, R_NamesSymbol));\n    SET_VECTOR_ELT(dimnames, 1, getAttrib(y, R_NamesSymbol));\n    setAttrib(ans, R_DimNamesSymbol, dimnames);\n@end group\n\n@group\n    UNPROTECT(2);\n    return ans;\n@}\n@end group\n@end example\n\nThis example introduces several new features.  The @code{getAttrib} and\n@code{setAttrib}\n@findex getAttrib\n@findex setAttrib\nfunctions get and set individual attributes.  Their second argument is a\n@code{SEXP} defining the name in the symbol table of the attribute we\nwant; these and many such symbols are defined in the header file\n@file{Rinternals.h}.\n\nThere are shortcuts here too: the functions @code{namesgets},\n@code{dimgets} and @code{dimnamesgets} are the internal versions of the\ndefault methods of @code{names<-}, @code{dim<-} and @code{dimnames<-}\n(for vectors and arrays), and there are functions such as\n@code{GetMatrixDimnames} and @code{GetArrayDimnames}.\n\nWhat happens if we want to add an attribute that is not pre-defined? We\nneed to add a symbol for it @emph{via} a call to\n@findex install\n@code{install}.  Suppose for illustration we wanted to add an attribute\n@code{\"version\"} with value @code{3.0}.  We could use\n\n@example\n@group\n    SEXP version;\n    version = PROTECT(allocVector(REALSXP, 1));\n    REAL(version)[0] = 3.0;\n    setAttrib(ans, install(\"version\"), version);\n    UNPROTECT(1);\n@end group\n@end example\n\nUsing @code{install} when it is not needed is harmless and provides a\nsimple way to retrieve the symbol from the symbol table if it is already\ninstalled. However, the lookup takes a non-trivial amount of time, so\nconsider code such as\n\n@example\nstatic SEXP VerSymbol = NULL;\n...\n    if (VerSymbol == NULL) VerSymbol = install(\"version\");\n@end example\n\n@noindent\nif it is to be done frequently.\n\nThis example can be simplified by another convenience function:\n\n@example\n@group\n    SEXP version = PROTECT(ScalarReal(3.0));\n    setAttrib(ans, install(\"version\"), version);\n    UNPROTECT(1);\n@end group\n@end example\n\n\n@node Classes, Handling lists, Attributes, Handling R objects in C\n@subsection Classes\n@cindex Classes\n\nIn @R{} the class is just the attribute named @code{\"class\"} so it can\nbe handled as such, but there is a shortcut @code{classgets}.  Suppose\nwe want to give the return value in our example the class @code{\"mat\"}.\nWe can use\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n      ....\n    SEXP ans, dim, dimnames, class;\n      ....\n    class = PROTECT(allocVector(STRSXP, 1));\n    SET_STRING_ELT(class, 0, mkChar(\"mat\"));\n    classgets(ans, class);\n    UNPROTECT(4);\n    return ans;\n@}\n@end group\n@end example\n\n@noindent\nAs the value is a character vector, we have to know how to create that\nfrom a C character array, which we do using the function\n@code{mkChar}.\n\n@node Handling lists, Handling character data, Classes, Handling R objects in C\n@subsection Handling lists\n@cindex Handling lists\n\nSome care is needed with lists, as @R{} moved early on from using\nLISP-like lists (now called ``pairlists'') to S-like generic vectors.\nAs a result, the appropriate test for an object of mode @code{list} is\n@code{isNewList}, and we need @code{allocVector(VECSXP, @var{n}}) and\n@emph{not} @code{allocList(@var{n})}.\n\nList elements can be retrieved or set by direct access to the elements\nof the generic vector.  Suppose we have a list object\n\n@example\na <- list(f = 1, g = 2, h = 3)\n@end example\n\n@noindent\nThen we can access @code{a$g} as @code{a[[2]]} by\n\n@example\n@group\n    double g;\n      ....\n    g = REAL(VECTOR_ELT(a, 1))[0];\n@end group\n@end example\n\nThis can rapidly become tedious, and the following function (based on\none in package @pkg{stats}) is very useful:\n\n@example\n@group\n/* get the list element named str, or return NULL */\n\nSEXP getListElement(SEXP list, const char *str)\n@{\n    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);\n@end group\n\n@group\n    for (int i = 0; i < length(list); i++)\n        if(strcmp(CHAR(STRING_ELT(names, i)), str) == 0) @{\n           elmt = VECTOR_ELT(list, i);\n           break;\n        @}\n    return elmt;\n@}\n@end group\n@end example\n\n@noindent\nand enables us to say\n\n@example\n@group\n  double g;\n  g = REAL(getListElement(a, \"g\"))[0];\n@end group\n@end example\n\n@node Handling character data, Finding and setting variables, Handling lists, Handling R objects in C\n@subsection Handling character data\n@cindex handling character data\n\nR character vectors are stored as @code{STRSXP}s, a vector type like\n@code{VECSXP} where every element is of type @code{CHARSXP}.  The\n@code{CHARSXP} elements of @code{STRSXP}s are accessed using\n@code{STRING_ELT} and @code{SET_STRING_ELT}.\n\n@code{CHARSXP}s are read-only objects and must never be modified.  In\nparticular, the C-style string contained in a @code{CHARSXP} should be\ntreated as read-only and for this reason the @code{CHAR} function used\nto access the character data of a @code{CHARSXP} returns @code{(const\nchar *)} (this also allows compilers to issue warnings about improper\nuse).  Since @code{CHARSXP}s are immutable, the same @code{CHARSXP} can\nbe shared by any @code{STRSXP} needing an element representing the same\nstring. @R{} maintains a global cache of @code{CHARSXP}s so that there\nis only ever one @code{CHARSXP} representing a given string in memory.\n\n@findex mkChar\n@findex mkCharLen\nYou can obtain a @code{CHARSXP} by calling @code{mkChar} and providing a\nnul-terminated C-style string.  This function will return a pre-existing\n@code{CHARSXP} if one with a matching string already exists, otherwise\nit will create a new one and add it to the cache before returning it to\nyou.   The variant @code{mkCharLen} can be used to create a\n@code{CHARSXP} from part of a buffer and will ensure null-termination.\n\nNote that @R{} character strings are restricted to @code{2^31 - 1}\nbytes, and hence so should the input to @code{mkChar} be (C allows\nlonger strings on 64-bit platforms).\n\n@node Finding and setting variables, Some convenience functions, Handling character data, Handling R objects in C\n@subsection Finding and setting variables\n@cindex Finding variables\n@cindex Setting variables\n\nIt will be usual that all the @R{} objects needed in our C computations\nare passed as arguments to @code{.Call} or @code{.External}, but it is\npossible to find the values of @R{} objects from within the C given\ntheir names.  The following code is the equivalent of @code{get(name,\nenvir = rho)}.\n\n@example\n@group\nSEXP getvar(SEXP name, SEXP rho)\n@{\n    SEXP ans;\n\n    if(!isString(name) || length(name) != 1)\n        error(\"name is not a single string\");\n    if(!isEnvironment(rho))\n        error(\"rho should be an environment\");\n    ans = findVar(installChar(STRING_ELT(name, 0)), rho);\n    Rprintf(\"first value is %f\\n\", REAL(ans)[0]);\n    return R_NilValue;\n@}\n@end group\n@end example\n\nThe main work is done by\n@findex findVar\n@code{findVar}, but to use it we need to install @code{name} as a name\nin the symbol table.  As we wanted the value for internal use, we return\n@code{NULL}.\n\nSimilar functions with syntax\n\n@example\n@group\nvoid defineVar(SEXP symbol, SEXP value, SEXP rho)\nvoid setVar(SEXP symbol, SEXP value, SEXP rho)\n@end group\n@end example\n@findex defineVar\n@findex setVar\n\n@noindent\ncan be used to assign values to @R{} variables.  @code{defineVar}\ncreates a new binding or changes the value of an existing binding in the\nspecified environment frame; it is the analogue of @code{assign(symbol,\nvalue, envir = rho, inherits = FALSE)}, but unlike @code{assign},\n@code{defineVar} does not make a copy of the object\n@code{value}.@footnote{You can assign a @emph{copy} of the object in the\nenvironment frame @code{rho} using @code{defineVar(symbol,\nduplicate(value), rho)}).}  @code{setVar} searches for an existing\nbinding for @code{symbol} in @code{rho} or its enclosing environments.\nIf a binding is found, its value is changed to @code{value}.  Otherwise,\na new binding with the specified value is created in the global\nenvironment.  This corresponds to @code{assign(symbol, value, envir =\nrho, inherits = TRUE)}.\n\n@node Some convenience functions, Named objects and copying, Finding and setting variables, Handling R objects in C\n@subsection Some convenience functions\n\nSome operations are done so frequently that there are convenience\nfunctions to handle them. (All these are provided via the header file\n@file{Rinternals.h}.)\n\nSuppose we wanted to pass a single logical argument\n@code{ignore_quotes}: we could use\n\n@example\n    int ign = asLogical(ignore_quotes);\n    if(ign == NA_LOGICAL) error(\"'ignore_quotes' must be TRUE or FALSE\");\n@end example\n\n@noindent\nwhich will do any coercion needed (at least from a vector argument), and\nreturn @code{NA_LOGICAL} if the value passed was @code{NA} or coercion\nfailed.  There are also @code{asInteger}, @code{asReal} and\n@code{asComplex}.  The function @code{asChar} returns a @code{CHARSXP}.\nAll of these functions ignore any elements of an input vector after the\nfirst.\n\nTo return a length-one real vector we can use\n\n@example\n    double x;\n\n    ...\n    return ScalarReal(x);\n@end example\n\n@noindent\nand there are versions of this for all the atomic vector types (those for\na length-one character vector being @code{ScalarString} with argument a\n@code{CHARSXP} and @code{mkString} with argument @code{const char *}).\n\nSome of the @code{is@var{XXXX}} functions differ from their apparent\n@R{}-level counterparts: for example @code{isVector} is true for any\natomic vector type (@code{isVectorAtomic}) and for lists and expressions\n(@code{isVectorList}) (with no check on attributes).  @code{isMatrix} is\na test of a length-2 @code{\"dim\"} attribute.\n\nThere are a series of small macros/functions to help construct pairlists\nand language objects (whose internal structures just differ by\n@code{SEXPTYPE}).  Function @code{CONS(u, v)} is the basic building\nblock: it constructs a pairlist from @code{u} followed by @code{v}\n(which is a pairlist or @code{R_NilValue}).  @code{LCONS} is a variant\nthat constructs a language object.  Functions @code{list1} to\n@code{list6} construct a pairlist from one to six items, and\n@code{lang1} to @code{lang6} do the same for a language object (a\nfunction to call plus zero to five arguments).  Functions @code{elt} and\n@code{lastElt} find the @var{i}th element and the last element of a\npairlist, and @code{nthcdr} returns a pointer to the @var{n}th position\nin the pairlist (whose @code{CAR} is the @var{n}th item).\n\nFunctions @code{str2type} and @code{type2str} map @R{}\nlength-one character strings to and from @code{SEXPTYPE} numbers, and\n@code{type2char} maps numbers to C character strings.\n\n@comment Want to encourage use of some of the more stable and useful R_*\n@comment and Rf_* functions:\n@menu\n* Semi-internal convenience functions::  \n@end menu\n\n@node Semi-internal convenience functions,  , Some convenience functions, Some convenience functions\n@subsubsection Semi-internal convenience functions\n\nThere is quite a collection of functions that may be used in your C code\n@emph{if} you are willing to adapt to rare ``API'' changes.\nThese typically contain ``workhorses'' of their @R{} counterparts.\n\nFunctions @code{any_duplicated} and @code{any_duplicated3} are fast\nversions of @R{}'s @code{any(duplicated(.))}.\n\nFunction @code{R_compute_identical} corresponds to @R{}'s @code{identical} function.\n\n\n@node Named objects and copying,  , Some convenience functions, Handling R objects in C\n@subsection Named objects and copying\n@findex duplicate\n@cindex Copying objects\n\nWhen assignments are done in @R{} such as\n\n@example\nx <- 1:10\ny <- x\n@end example\n\n@noindent\nthe named object is not necessarily copied, so after those two\nassignments @code{y} and @code{x} are bound to the same @code{SEXPREC}\n(the structure a @code{SEXP} points to).  This means that any code which\nalters one of them has to make a copy before modifying the copy if the\nusual @R{} semantics are to apply.  Note that whereas @code{.C} and\n@code{.Fortran} do copy their arguments (unless the dangerous @code{dup\n= FALSE} is used), @code{.Call} and @code{.External} do not.  So\n@code{duplicate} is commonly called on arguments to @code{.Call} before\nmodifying them.\n\nHowever, at least some of this copying is unneeded.  In the first\nassignment shown, @code{x <- 1:10}, @R{} first creates an object with\nvalue @code{1:10} and then assigns it to @code{x} but if @code{x} is\nmodified no copy is necessary as the temporary object with value\n@code{1:10} cannot be referred to again.  @R{} distinguishes between\nnamed and unnamed objects @emph{via} a field in a @code{SEXPREC} that\ncan be accessed @emph{via} the macros @code{NAMED} and @code{SET_NAMED}.  This\ncan take values\n\n@table @code\n@item 0\nThe object is not bound to any symbol\n@item 1\nThe object has been bound to exactly one symbol\n@item >= 2\nThe object has potentially been bound to two or more symbols, and one\nshould act as if another variable is currently bound to this value.\nThe maximal value is @code{NAMEDMAX}.\n@end table\n\n@noindent\nNote the past tenses: @R{} does not do full reference counting and there\nmay currently be fewer bindings.\n\nIt is safe to modify the value of any @code{SEXP} for which\n@code{NAMED(foo)} is zero, and if @code{NAMED(foo)} is two or more, the\nvalue should be duplicated (@emph{via} a call to @code{duplicate})\nbefore any modification.  Note that it is the responsibility of the\nauthor of the code making the modification to do the duplication, even\nif it is @code{x} whose value is being modified after @code{y <- x}.\n\nThe case @code{NAMED(foo) == 1} allows some optimization, but it can be\nignored (and duplication done whenever @code{NAMED(foo) > 0}).  (This\noptimization is not currently usable in user code.)  It is intended\nfor use within replacement functions.  Suppose we used\n\n@example\nx <- 1:10\nfoo(x) <- 3\n@end example\n\n@noindent\nwhich is computed as\n\n@example\nx <- 1:10\nx <- \"foo<-\"(x, 3)\n@end example\n\n@noindent\nThen inside @code{\"foo<-\"} the object pointing to the current value of\n@code{x} will have @code{NAMED(foo)} as one, and it would be safe to\nmodify it as the only symbol bound to it is @code{x} and that will be\nrebound immediately.  (Provided the remaining code in @code{\"foo<-\"}\nmake no reference to @code{x}, and no one is going to attempt a direct\ncall such as @code{y <- \"foo<-\"(x)}.)\n\nThis mechanism is likely to be replaced in future versions of @R{}. To\nsupport future changes, package code should use the macros\n@code{MAYBE_REFERENCED}, @code{MAYBE_SHARED}, and\n@code{MARK_NOT_MUTABLE}. These currently correspond to\n\n@table@code\n@item MAYBE_REFERENCED(x)\n@code{NAMED(x) > 0}\n@item MAYBE_SHARED(x)\n@code{NAMED(x) > 1}\n@item MARK_NOT_MUTABLE(x)\n@code{SET_NAMED(x, NAMEDMAX)}\n@end table\n\n@c commented out as people misread this as general.\n@c Currently all arguments to a @code{.Call} call will have @code{NAMED}\n@c set to 2 or higher and so users must assume that they need to be duplicated\n@c before alteration.\n\n@node Interface functions .Call and .External, Evaluating R expressions from C, Handling R objects in C, System and foreign language interfaces\n@section Interface functions @code{.Call} and @code{.External}\n@cindex Interfaces to compiled code\n\nIn this section we consider the details of the @R{}/C interfaces.\n\nThese two interfaces have almost the same functionality. @code{.Call} is\nbased on the interface of the same name in @Sl{} version 4, and\n@code{.External} is based on @R{}'s @code{.Internal}.  @code{.External}\nis more complex but allows a variable number of arguments.\n\n@menu\n* Calling .Call::               \n* Calling .External::           \n* Missing and special values::  \n@end menu\n\n@node Calling .Call, Calling .External, Interface functions .Call and .External, Interface functions .Call and .External\n@subsection Calling @code{.Call}\n\n@findex .Call\n\nLet us convert our finite convolution example to use @code{.Call}.  The\ncalling function in @R{} is\n\n@example\nconv <- function(a, b) .Call(\"convolve2\", a, b)\n@end example\n\n@noindent\nwhich could hardly be simpler, but as we shall see all the type\ncoercion is transferred to the C code, which is\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP convolve2(SEXP a, SEXP b)\n@{\n    int na, nb, nab;\n    double *xa, *xb, *xab;\n    SEXP ab;\n\n    a = PROTECT(coerceVector(a, REALSXP));\n    b = PROTECT(coerceVector(b, REALSXP));\n    na = length(a); nb = length(b); nab = na + nb - 1;\n    ab = PROTECT(allocVector(REALSXP, nab));\n    xa = REAL(a); xb = REAL(b); xab = REAL(ab);\n    for(int i = 0; i < nab; i++) xab[i] = 0.0;\n    for(int i = 0; i < na; i++)\n        for(int j = 0; j < nb; j++) xab[i + j] += xa[i] * xb[j];\n    UNPROTECT(3);\n    return ab;\n@}\n@end group\n@end example\n\n@node Calling .External, Missing and special values, Calling .Call, Interface functions .Call and .External\n@subsection Calling @code{.External}\n\n@findex .External\n\nWe can use the same example to illustrate @code{.External}.  The @R{}\ncode changes only by replacing @code{.Call} by @code{.External}\n\n@example\nconv <- function(a, b) .External(\"convolveE\", a, b)\n@end example\n\n@noindent\nbut the main change is how the arguments are passed to the C code, this\ntime as a single SEXP.  The only change to the C code is how we handle\nthe arguments.\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n\nSEXP convolveE(SEXP args)\n@{\n    int i, j, na, nb, nab;\n    double *xa, *xb, *xab;\n    SEXP a, b, ab;\n\n    a = PROTECT(coerceVector(CADR(args), REALSXP));\n    b = PROTECT(coerceVector(CADDR(args), REALSXP));\n    ...\n@}\n@end group\n@end example\n\n@noindent\nOnce again we do not need to protect the arguments, as in the @R{} side\nof the interface they are objects that are already in use.  The macros\n\n@example\n@group\n  first = CADR(args);\n  second = CADDR(args);\n  third = CADDDR(args);\n  fourth = CAD4R(args);\n@end group\n@end example\n\n@noindent\nprovide convenient ways to access the first four arguments.  More\ngenerally we can use the\n@findex CAR\n@findex CDR\n@code{CDR} and @code{CAR} macros as in\n\n@example\n@group\n  args = CDR(args); a = CAR(args);\n  args = CDR(args); b = CAR(args);\n@end group\n@end example\n\n@noindent\nwhich clearly allows us to extract an unlimited number of arguments\n(whereas @code{.Call} has a limit, albeit at 65 not a small one).\n\nMore usefully, the @code{.External} interface provides an easy way to\nhandle calls with a variable number of arguments, as @code{length(args)}\nwill give the number of arguments supplied (of which the first is\nignored).  We may need to know the names (`tags') given to the actual\narguments, which we can by using the @code{TAG} macro and using\nsomething like the following example, that prints the names and the first\nvalue of its arguments if they are vector types.\n\n@example\n@group\nSEXP showArgs(SEXP args)\n@{\n    args = CDR(args); /* skip 'name' */\n    for(int i = 0; args != R_NilValue; i++, args = CDR(args)) @{\n        const char *name =\n            isNull(TAG(args)) ? \"\" : CHAR(PRINTNAME(TAG(args)));\n        SEXP el = CAR(args);\n        if (length(el) == 0) @{\n            Rprintf(\"[%d] '%s' R type, length 0\\n\", i+1, name);\n           continue;\n        @}\n@end group\n@group\n        switch(TYPEOF(el)) @{\n        case REALSXP:\n            Rprintf(\"[%d] '%s' %f\\n\", i+1, name, REAL(el)[0]);\n            break;\n@end group\n@group\n        case LGLSXP:\n        case INTSXP:\n            Rprintf(\"[%d] '%s' %d\\n\", i+1, name, INTEGER(el)[0]);\n            break;\n@end group\n@group\n        case CPLXSXP:\n        @{\n            Rcomplex cpl = COMPLEX(el)[0];\n            Rprintf(\"[%d] '%s' %f + %fi\\n\", i+1, name, cpl.r, cpl.i);\n        @}\n            break;\n@end group\n@group\n        case STRSXP:\n            Rprintf(\"[%d] '%s' %s\\n\", i+1, name,\n                   CHAR(STRING_ELT(el, 0)));\n           break;\n@end group\n@group\n        default:\n            Rprintf(\"[%d] '%s' R type\\n\", i+1, name);\n       @}\n    @}\n    return R_NilValue;\n@}\n@end group\n@end example\n\nThis can be called by the wrapper function\n\n@example\nshowArgs <- function(...) invisible(.External(\"showArgs\", ...))\n@end example\n\n@noindent\nNote that this style of programming is convenient but not necessary, as\nan alternative style is\n\n@example\nshowArgs1 <- function(...) invisible(.Call(\"showArgs1\", list(...)))\n@end example\n\n@noindent\nThe (very similar) C code is in the scripts.\n\n@node Missing and special values,  , Calling .External, Interface functions .Call and .External\n@subsection Missing and special values\n@cindex Missing values\n@cindex IEEE special values\n\nOne piece of error-checking the @code{.C} call does (unless @code{NAOK}\nis true) is to check for missing (@code{NA}) and @acronym{IEEE} special\nvalues (@code{Inf}, @code{-Inf} and @code{NaN}) and give an error if any\nare found.  With the @code{.Call} interface these will be passed to our\ncode.  In this example the special values are no problem, as\n@acronym{IEC60559} arithmetic will handle them correctly.  In the current\nimplementation this is also true of @code{NA} as it is a type of\n@code{NaN}, but it is unwise to rely on such details.  Thus we will\nre-write the code to handle @code{NA}s using macros defined in\n@file{R_ext/Arith.h} included by @file{R.h}.\n\nThe code changes are the same in any of the versions of @code{convolve2}\nor @code{convolveE}:\n\n@example\n@group\n    ...\n  for(int i = 0; i < na; i++)\n    for(int j = 0; j < nb; j++)\n        if(ISNA(xa[i]) || ISNA(xb[j]) || ISNA(xab[i + j]))\n            xab[i + j] = NA_REAL;\n        else\n            xab[i + j] += xa[i] * xb[j];\n    ...\n@end group\n@end example\n\n@findex ISNA\n@findex ISNAN\n\nNote that the @code{ISNA} macro, and the similar macros @code{ISNAN}\n(which checks for @code{NaN} or @code{NA}) and @code{R_FINITE} (which is\nfalse for @code{NA} and all the special values), only apply to numeric\nvalues of type @code{double}.  Missingness of integers, logicals and\ncharacter strings can be tested by equality to the constants\n@code{NA_INTEGER}, @code{NA_LOGICAL} and @code{NA_STRING}.  These and\n@code{NA_REAL} can be used to set elements of @R{} vectors to @code{NA}.\n\nThe constants @code{R_NaN}, @code{R_PosInf} and @code{R_NegInf} can be\nused to set @code{double}s to the special values.\n\n@node Evaluating R expressions from C, Parsing R code from C, Interface functions .Call and .External, System and foreign language interfaces\n@section Evaluating R expressions from C\n@cindex Evaluating R expressions from C\n\nThe main function we will use is\n\n@example\nSEXP eval(SEXP expr, SEXP rho);\n@end example\n\n@noindent\nthe equivalent of the interpreted @R{} code @code{eval(expr, envir =\nrho)} (so @code{rho} must be an environment), although we can also make\nuse of @code{findVar}, @code{defineVar} and @code{findFun} (which\nrestricts the search to functions).\n\nTo see how this might be applied, here is a simplified internal version\nof @code{lapply} for expressions, used as\n\n@example\n@group\na <- list(a = 1:5, b = rnorm(10), test = runif(100))\n.Call(\"lapply\", a, quote(sum(x)), new.env())\n@end group\n@end example\n\n@noindent\nwith C code\n\n@example\n@group\nSEXP lapply(SEXP list, SEXP expr, SEXP rho)\n@{\n    int n = length(list);\n    SEXP ans;\n\n    if(!isNewList(list)) error(\"'list' must be a list\");\n    if(!isEnvironment(rho)) error(\"'rho' should be an environment\");\n    ans = PROTECT(allocVector(VECSXP, n));\n    for(int i = 0; i < n; i++) @{\n        defineVar(install(\"x\"), VECTOR_ELT(list, i), rho);\n        SET_VECTOR_ELT(ans, i, eval(expr, rho));\n    @}\n    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));\n    UNPROTECT(1);\n    return ans;\n@}\n@end group\n@end example\n\nIt would be closer to @code{lapply} if we could pass in a function\nrather than an expression.  One way to do this is @emph{via} interpreted\n@R{} code as in the next example, but it is possible (if somewhat\nobscure) to do this in C code.  The following is based on the code in\n@file{src/main/optimize.c}.\n\n@example\n@group\nSEXP lapply2(SEXP list, SEXP fn, SEXP rho)\n@{\n    int n = length(list);\n    SEXP R_fcall, ans;\n\n    if(!isNewList(list)) error(\"'list' must be a list\");\n    if(!isFunction(fn)) error(\"'fn' must be a function\");\n    if(!isEnvironment(rho)) error(\"'rho' should be an environment\");\n    R_fcall = PROTECT(lang2(fn, R_NilValue));\n    ans = PROTECT(allocVector(VECSXP, n));\n    for(int i = 0; i < n; i++) @{\n        SETCADR(R_fcall, VECTOR_ELT(list, i));\n        SET_VECTOR_ELT(ans, i, eval(R_fcall, rho));\n    @}\n    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));\n    UNPROTECT(2);\n    return ans;\n@}\n@end group\n@end example\n\n@noindent\nused by\n\n@example\n.Call(\"lapply2\", a, sum, new.env())\n@end example\n\n@noindent\nFunction @code{lang2} creates an executable pairlist of two elements, but\nthis will only be clear to those with a knowledge of a LISP-like\nlanguage.\n\nAs a more comprehensive example of constructing an @R{} call in C code\nand evaluating, consider the following fragment of\n@code{printAttributes} in @file{src/main/print.c}.\n\n@example\n    /* Need to construct a call to\n       print(CAR(a), digits=digits)\n       based on the R_print structure, then eval(call, env).\n       See do_docall for the template for this sort of thing.\n    */\n    SEXP s, t;\n    t = s = PROTECT(allocList(3));\n    SET_TYPEOF(s, LANGSXP);\n    SETCAR(t, install(\"print\")); t = CDR(t);\n    SETCAR(t,  CAR(a)); t = CDR(t);\n    SETCAR(t, ScalarInteger(digits));\n    SET_TAG(t, install(\"digits\"));\n    eval(s, env);\n    UNPROTECT(1);\n@end example\n\n@noindent\nAt this point @code{CAR(a)} is the @R{} object to be printed, the\ncurrent attribute.  There are three steps: the call is constructed as\na pairlist of length 3, the list is filled in, and the expression\nrepresented by the pairlist is evaluated.\n\nA pairlist is quite distinct from a generic vector list, the only\nuser-visible form of list in @R{}.  A pairlist is a linked list (with\n@code{CDR(t)} computing the next entry), with items (accessed by\n@code{CAR(t)}) and names or tags (set by @code{SET_TAG}).  In this call\nthere are to be three items, a symbol (pointing to the function to be\ncalled) and two argument values, the first unnamed and the second named.\nSetting the type to @code{LANGSXP} makes this a call which can be evaluated.\n\n@menu\n* Zero-finding::                \n* Calculating numerical derivatives::  \n@end menu\n\n@node Zero-finding, Calculating numerical derivatives, Evaluating R expressions from C, Evaluating R expressions from C\n@subsection Zero-finding\n@cindex Zero-finding\n\nIn this section we re-work the example of Becker, Chambers & Wilks (1988,\npp.~205--10) on finding a zero of a univariate function.  The @R{} code\nand an example are\n\n@example\nzero <- function(f, guesses, tol = 1e-7) @{\n    f.check <- function(x) @{\n        x <- f(x)\n        if(!is.numeric(x)) stop(\"Need a numeric result\")\n        as.double(x)\n    @}\n    .Call(\"zero\", body(f.check), as.double(guesses), as.double(tol),\n          new.env())\n@}\n\ncube1 <- function(x) (x^2 + 1) * (x - 1.5)\nzero(cube1, c(0, 5))\n@end example\n\n@noindent\nwhere this time we do the coercion and error-checking in the @R{} code.\nThe C code is\n\n@example\n@group\nSEXP mkans(double x)\n@{\n    // no need for PROTECT() here, as REAL(.) does not allocate:\n    SEXP ans = allocVector(REALSXP, 1);\n    REAL(ans)[0] = x;\n    return ans;\n@}\n@end group\n\n@group\ndouble feval(double x, SEXP f, SEXP rho)\n@{\n    // a version with (too) much PROTECT()ion .. \"better safe than sorry\"\n    SEXP symbol, value;\n    PROTECT(symbol = install(\"x\"));\n    PROTECT(value = mkans(x));\n    defineVar(symbol, value, rho);\n    UNPROTECT(2);\n    return(REAL(eval(f, rho))[0]);\n@}\n@end group\n\n@group\nSEXP zero(SEXP f, SEXP guesses, SEXP stol, SEXP rho)\n@{\n    double x0 = REAL(guesses)[0], x1 = REAL(guesses)[1],\n           tol = REAL(stol)[0];\n    double f0, f1, fc, xc;\n@end group\n\n@group\n    if(tol <= 0.0) error(\"non-positive tol value\");\n    f0 = feval(x0, f, rho); f1 = feval(x1, f, rho);\n    if(f0 == 0.0) return mkans(x0);\n    if(f1 == 0.0) return mkans(x1);\n    if(f0*f1 > 0.0) error(\"x[0] and x[1] have the same sign\");\n@end group\n\n@group\n    for(;;) @{\n        xc = 0.5*(x0+x1);\n        if(fabs(x0-x1) < tol) return  mkans(xc);\n        fc = feval(xc, f, rho);\n        if(fc == 0) return  mkans(xc);\n        if(f0*fc > 0.0) @{\n            x0 = xc; f0 = fc;\n        @} else @{\n            x1 = xc; f1 = fc;\n        @}\n    @}\n@}\n@end group\n@end example\n\n@node Calculating numerical derivatives,  , Zero-finding, Evaluating R expressions from C\n@subsection Calculating numerical derivatives\n@cindex Numerical derivatives\n\nWe will use a longer example (by Saikat DebRoy) to illustrate the use of\nevaluation and @code{.External}.  This calculates numerical derivatives,\nsomething that could be done as effectively in interpreted @R{} code but\nmay be needed as part of a larger C calculation.\n\nAn interpreted @R{} version and an example are\n\n@example\n@group\nnumeric.deriv <- function(expr, theta, rho=sys.frame(sys.parent()))\n@{\n    eps <- sqrt(.Machine$double.eps)\n    ans <- eval(substitute(expr), rho)\n    grad <- matrix(, length(ans), length(theta),\n                   dimnames=list(NULL, theta))\n    for (i in seq_along(theta)) @{\n        old <- get(theta[i], envir=rho)\n        delta <- eps * max(1, abs(old))\n        assign(theta[i], old+delta, envir=rho)\n        ans1 <- eval(substitute(expr), rho)\n        assign(theta[i], old, envir=rho)\n        grad[, i] <- (ans1 - ans)/delta\n    @}\n    attr(ans, \"gradient\") <- grad\n    ans\n@}\nomega <- 1:5; x <- 1; y <- 2\nnumeric.deriv(sin(omega*x*y), c(\"x\", \"y\"))\n@end group\n@end example\n\n@noindent\nwhere @code{expr} is an expression, @code{theta} a character vector of\nvariable names and @code{rho} the environment to be used.\n\nFor the compiled version the call from @R{} will be\n\n@example\n.External(\"numeric_deriv\", @var{expr}, @var{theta}, @var{rho})\n@end example\n\n@noindent\nwith example usage\n\n@example\n.External(\"numeric_deriv\", quote(sin(omega*x*y)),\n          c(\"x\", \"y\"), .GlobalEnv)\n@end example\n\n@noindent\nNote the need to quote the expression to stop it being evaluated in the\ncaller.\n\nHere is the complete C code which we will explain section by section.\n\n@example\n@group\n#include <R.h> /* for DOUBLE_EPS */\n#include <Rinternals.h>\n\nSEXP numeric_deriv(SEXP args)\n@{\n    SEXP theta, expr, rho, ans, ans1, gradient, par, dimnames;\n    double tt, xx, delta, eps = sqrt(DOUBLE_EPS), *rgr, *rans;\n    int i, start;\n@end group\n\n@group\n    expr = CADR(args);\n    if(!isString(theta = CADDR(args)))\n        error(\"theta should be of type character\");\n    if(!isEnvironment(rho = CADDDR(args)))\n        error(\"rho should be an environment\");\n@end group\n\n@group\n    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));\n    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));\n    rgr = REAL(gradient); rans = REAL(ans);\n@end group\n\n@group\n    for(i = 0, start = 0; i < LENGTH(theta); i++, start += LENGTH(ans)) @{\n        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));\n        tt = REAL(par)[0];\n        xx = fabs(tt);\n        delta = (xx < 1) ? eps : xx*eps;\n        REAL(par)[0] += delta;\n        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));\n        for(int j = 0; j < LENGTH(ans); j++)\n            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;\n        REAL(par)[0] = tt;\n        UNPROTECT(2); /* par, ans1 */\n    @}\n@end group\n\n@group\n    dimnames = PROTECT(allocVector(VECSXP, 2));\n    SET_VECTOR_ELT(dimnames, 1,  theta);\n    dimnamesgets(gradient, dimnames);\n    setAttrib(ans, install(\"gradient\"), gradient);\n    UNPROTECT(3); /* ans  gradient  dimnames */\n    return ans;\n@}\n@end group\n@end example\n\nThe code to handle the arguments is\n\n@example\n@group\n    expr = CADR(args);\n    if(!isString(theta = CADDR(args)))\n        error(\"theta should be of type character\");\n    if(!isEnvironment(rho = CADDDR(args)))\n        error(\"rho should be an environment\");\n@end group\n@end example\n\n@noindent\nNote that we check for correct types of @code{theta} and @code{rho} but\ndo not check the type of @code{expr}.  That is because @code{eval} can\nhandle many types of @R{} objects other than @code{EXPRSXP}.  There is\nno useful coercion we can do, so we stop with an error message if the\narguments are not of the correct mode.\n\nThe first step in the code is to evaluate the expression in the\nenvironment @code{rho}, by\n\n@example\n    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));\n@end example\n\n@noindent\nWe then allocate space for the calculated derivative by\n\n@example\n    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));\n@end example\n\n@noindent\nThe first argument to @code{allocMatrix} gives the @code{SEXPTYPE} of\nthe matrix: here we want it to be @code{REALSXP}.  The other two\narguments are the numbers of rows and columns.  (Note that @code{LENGTH}\nis intended to be used for vectors: @code{length} is more generally\napplicable.)\n\n@example\n@group\n    for(i = 0, start = 0; i < LENGTH(theta); i++, start += LENGTH(ans)) @{\n        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));\n@end group\n@end example\n\n@noindent\nHere, we are entering a for loop.  We loop through each of the\nvariables.  In the @code{for} loop, we first create a symbol\ncorresponding to the @code{i}'th element of the @code{STRSXP}\n@code{theta}.  Here, @code{STRING_ELT(theta, i)} accesses the\n@code{i}'th element of the @code{STRSXP} @code{theta}.  Macro\n@code{CHAR()} extracts the actual character\nrepresentation@footnote{@pxref{Character encoding issues} for why this\nmight not be what is required.} of it: it returns a pointer.  We then\ninstall the name and use @code{findVar} to find its value.\n\n@example\n@group\n        tt = REAL(par)[0];\n        xx = fabs(tt);\n        delta = (xx < 1) ? eps : xx*eps;\n        REAL(par)[0] += delta;\n        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));\n@end group\n@end example\n\n@noindent\nWe first extract the real value of the parameter, then calculate\n@code{delta}, the increment to be used for approximating the numerical\nderivative.  Then we change the value stored in @code{par} (in\nenvironment @code{rho}) by @code{delta} and evaluate @code{expr} in\nenvironment @code{rho} again.  Because we are directly dealing with\noriginal @R{} memory locations here, @R{} does the evaluation for the\nchanged parameter value.\n\n@example\n@group\n        for(int j = 0; j < LENGTH(ans); j++)\n            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;\n        REAL(par)[0] = tt;\n        UNPROTECT(2);\n    @}\n@end group\n@end example\n\n@noindent\nNow, we compute the @code{i}'th column of the gradient matrix.  Note how\nit is accessed: @R{} stores matrices by column (like FORTRAN).\n\n@example\n@group\n    dimnames = PROTECT(allocVector(VECSXP, 2));\n    SET_VECTOR_ELT(dimnames, 1, theta);\n    dimnamesgets(gradient, dimnames);\n    setAttrib(ans, install(\"gradient\"), gradient);\n    UNPROTECT(3);\n    return ans;\n@}\n@end group\n@end example\n\n@noindent\nFirst we add column names to the gradient matrix.  This is done by\nallocating a list (a @code{VECSXP}) whose first element, the row names,\nis @code{NULL} (the default) and the second element, the column names,\nis set as @code{theta}.  This list is then assigned as the attribute\nhaving the symbol @code{R_DimNamesSymbol}.  Finally we set the gradient\nmatrix as the gradient attribute of @code{ans}, unprotect the remaining\nprotected locations and return the answer @code{ans}.\n\n@node Parsing R code from C, External pointers and weak references, Evaluating R expressions from C, System and foreign language interfaces\n@section Parsing R code from C\n@cindex Parsing R code from C\n\nSuppose an @R{} extension want to accept an @R{} expression from the\nuser and evaluate it.  The previous section covered evaluation, but the\nexpression will be entered as text and needs to be parsed first.  A\nsmall part of @R{}'s parse interface is declared in header file\n@file{R_ext/Parse.h}@footnote{This is only guaranteed to show the\ncurrent interface: it is liable to change.}.\n\nAn example of the usage can be found in the (example) Windows package\n@pkg{windlgs} included in the @R{} source tree.  The essential part is\n\n@example\n@group\n#include <R.h>\n#include <Rinternals.h>\n#include <R_ext/Parse.h>\n\nSEXP menu_ttest3()\n@{\n    char cmd[256];\n    SEXP cmdSexp, cmdexpr, ans = R_NilValue;\n    ParseStatus status;\n   ...\n    if(done == 1) @{\n        cmdSexp = PROTECT(allocVector(STRSXP, 1));\n        SET_STRING_ELT(cmdSexp, 0, mkChar(cmd));\n        cmdexpr = PROTECT(R_ParseVector(cmdSexp, -1, &status, R_NilValue));\n        if (status != PARSE_OK) @{\n            UNPROTECT(2);\n            error(\"invalid call %s\", cmd);\n        @}\n        /* Loop is needed here as EXPSEXP will be of length > 1 */\n        for(int i = 0; i < length(cmdexpr); i++)\n            ans = eval(VECTOR_ELT(cmdexpr, i), R_GlobalEnv);\n        UNPROTECT(2);\n    @}\n    return ans;\n@}\n@end group\n@end example\n@noindent\nNote that a single line of text may give rise to more than one @R{}\nexpression.\n\n@findex R_ParseVector\n@code{R_ParseVector} is essentially the code used to implement\n@code{parse(text=)} at @R{} level.  The first argument is a character\nvector (corresponding to @code{text}) and the second the maximal\nnumber of expressions to parse (corresponding to @code{n}).  The third\nargument is a pointer to a variable of an enumeration type, and it is\nnormal (as @code{parse} does) to regard all values other than\n@code{PARSE_OK} as an error.  Other values which might be returned are\n@code{PARSE_INCOMPLETE} (an incomplete expression was found) and\n@code{PARSE_ERROR} (a syntax error), in both cases the value returned\nbeing @code{R_NilValue}. The fourth argument is a length one character\nvector to be used as a filename in error messages, a @code{srcfile}\nobject or the @R{} @code{NULL} object (as in the example above). If a\n@code{srcfile} object was used, a @code{srcref} attribute would be\nattached to the result, containing a list of @code{srcref} objects of\nthe same length as the expression, to allow it to be echoed with its\noriginal formatting.\n\n@menu\n* Accessing source references::  \n@end menu\n\n@node Accessing source references,  , Parsing R code from C, Parsing R code from C\n@subsection Accessing source references\n\nThe source references added by the parser are recorded by @R{}'s evaluator\nas it evaluates code. Two functions\nmake these available to debuggers running C code:\n@findex R_Srcref\n@findex R_GetCurrentSrcref\n@findex R_GetSrcFilename\n\n@example\nSEXP R_GetCurrentSrcref(int skip);\n@end example\n\nThis function checks @code{R_Srcref} and the current evaluation stack\nfor entries that contain source reference information.  The\n@code{skip} argument tells how many source references to skip before\nreturning the @code{SEXP} of the @code{srcref} object, counting from\nthe top of the stack.  If @code{skip < 0}, @code{abs(skip)} locations\nare counted up from the bottom of the stack. If too few or no source\nreferences are found, @code{NULL} is returned.\n\n@example\nSEXP R_GetSrcFilename(SEXP srcref);\n@end example\n\nThis function extracts the filename from the source reference for\ndisplay, returning a length 1 character vector containing the\nfilename.  If no name is found, @code{\"\"} is returned.\n\n@node External pointers and weak references, Vector accessor functions, Parsing R code from C, System and foreign language interfaces\n@section External pointers and weak references\n\nThe @code{SEXPTYPE}s @code{EXTPTRSXP} and @code{WEAKREFSXP} can be\nencountered at @R{} level, but are created in C code.\n\n@cindex external pointer\nExternal pointer @code{SEXP}s are intended to handle references to C\nstructures such as `handles', and are used for this purpose in package\n@CRANpkg{RODBC} for example.  They are unusual in their copying semantics in\nthat when an @R{} object is copied, the external pointer object is not\nduplicated.  (For this reason external pointers should only be used as\npart of an object with normal semantics, for example an attribute or an\nelement of a list.)\n\nAn external pointer is created by\n\n@example\nSEXP R_MakeExternalPtr(void *p, SEXP tag, SEXP prot);\n@end example\n\n@noindent\nwhere @code{p} is the pointer (and hence this cannot portably be a\nfunction pointer), and @code{tag} and @code{prot} are references to\nordinary @R{} objects which will remain in existence (be protected from\ngarbage collection) for the lifetime of the external pointer object.  A\nuseful convention is to use the @code{tag} field for some form of type\nidentification and the @code{prot} field for protecting the memory that\nthe external pointer represents, if that memory is allocated from the\n@R{} heap.  Both @code{tag} and @code{prot} can be @code{R_NilValue},\nand often are.\n\nAn alternative way as from @R{} 3.4.0 to create an external pointer from\na function pointer is\n\n@example\ntypedef void * (*R_DL_FUNC)();\nSEXP R_MakeExternalPtrFn(R_DL_FUNC p, SEXP tag, SEXP prot);\n@end example\n\n\nThe elements of an external pointer can be accessed and set @emph{via}\n\n@example\nvoid *R_ExternalPtrAddr(SEXP s);\nDL_FUNC R_ExternalPtrAddrFn(SEXP s);\nSEXP R_ExternalPtrTag(SEXP s);\nSEXP R_ExternalPtrProtected(SEXP s);\nvoid R_ClearExternalPtr(SEXP s);\nvoid R_SetExternalPtrAddr(SEXP s, void *p);\nvoid R_SetExternalPtrTag(SEXP s, SEXP tag);\nvoid R_SetExternalPtrProtected(SEXP s, SEXP p);\n@end example\n\n@noindent\nClearing a pointer sets its value to the C @code{NULL} pointer.\n\n@cindex finalizer\nAn external pointer object can have a @emph{finalizer}, a piece of code\nto be run when the object is garbage collected.  This can be @R{} code\nor C code, and the various interfaces are, respectively.\n\n@example\nvoid R_RegisterFinalizerEx(SEXP s, SEXP fun, Rboolean onexit);\n\ntypedef void (*R_CFinalizer_t)(SEXP);\nvoid R_RegisterCFinalizerEx(SEXP s, R_CFinalizer_t fun, Rboolean onexit);\n@end example\n\n@noindent\nThe @R{} function indicated by @code{fun} should be a function of a\nsingle argument, the object to be finalized.  @R{} does not perform a\ngarbage collection when shutting down, and the @code{onexit} argument of\nthe extended forms can be used to ask that the finalizer be run during a\nnormal shutdown of the @R{} session.  It is suggested that it is good\npractice to clear the pointer on finalization.\n\nThe only @R{} level function for interacting with external pointers is\n@code{reg.finalizer} which can be used to set a finalizer.\n\nIt is probably not a good idea to allow an external pointer to be\n@code{save}d and then reloaded, but if this happens the pointer will be\nset to the C @code{NULL} pointer.\n\nFinalizers can be run at many places in the code base and much of it,\nincluding the @R{} interpreter, is not re-entrant.  So great care is\nneeded in choosing the code to be run in a finalizer.  Finalizers are\nmarked to be run at garbage collection but only run at a somewhat safe\npoint thereafter.\n\n@cindex weak reference\nWeak references are used to allow the programmer to maintain information\non entities without preventing the garbage collection of the entities\nonce they become unreachable.\n\nA weak reference contains a key and a value.  The value is reachable is\nif it either reachable directly or @emph{via} weak references with reachable\nkeys.  Once a value is determined to be unreachable during garbage\ncollection, the key and value are set to @code{R_NilValue} and the\nfinalizer will be run later in the garbage collection.\n\nWeak reference objects are created by one of\n\n@example\nSEXP R_MakeWeakRef(SEXP key, SEXP val, SEXP fin, Rboolean onexit);\nSEXP R_MakeWeakRefC(SEXP key, SEXP val, R_CFinalizer_t fin,\n                    Rboolean onexit);\n@end example\n\n@noindent\nwhere the @R{} or C finalizer are specified in exactly the same way as\nfor an external pointer object (whose finalization interface is\nimplemented @emph{via} weak references).\n\nThe parts can be accessed @emph{via}\n\n@example\nSEXP R_WeakRefKey(SEXP w);\nSEXP R_WeakRefValue(SEXP w);\nvoid R_RunWeakRefFinalizer(SEXP w);\n@end example\n\nA toy example of the use of weak references can be found at\n@uref{https://homepage.stat.uiowa.edu/~luke/R/references/weakfinex.html},\nbut that is used to add finalizers to external pointers which can now be\ndone more directly.  At the time of writing no @acronym{CRAN} or\nBioconductor package uses weak references.\n\n\n@menu\n* An external pointer example::  \n@end menu\n\n@node An external pointer example,  , External pointers and weak references, External pointers and weak references\n@subsection An example\n\nPackage @CRANpkg{RODBC} uses external pointers to maintain its\n@emph{channels}, connections to databases.  There can be several\nconnections open at once, and the status information for each is stored\nin a C structure (pointed to by @code{thisHandle} in the code extract\nbelow) that is returned @emph{via} an external pointer as part of the RODBC\n`channel' (as the @code{\"handle_ptr\"} attribute).  The external pointer\nis created by\n\n@example\n    SEXP ans, ptr;\n    ans = PROTECT(allocVector(INTSXP, 1));\n    ptr = R_MakeExternalPtr(thisHandle, install(\"RODBC_channel\"), R_NilValue);\n    PROTECT(ptr);\n    R_RegisterCFinalizerEx(ptr, chanFinalizer, TRUE);\n            ...\n    /* return the channel no */\n    INTEGER(ans)[0] = nChannels;\n    /* and the connection string as an attribute */\n    setAttrib(ans, install(\"connection.string\"), constr);\n    setAttrib(ans, install(\"handle_ptr\"), ptr);\n    UNPROTECT(3);\n    return ans;\n@end example\n\n@noindent\nNote the symbol given to identify the usage of the external pointer, and\nthe use of the finalizer.  Since the final argument when registering the\nfinalizer is @code{TRUE}, the finalizer will be run at the end of the\n@R{} session (unless it crashes).  This is used to close and clean up\nthe connection to the database.  The finalizer code is simply\n\n@example\nstatic void chanFinalizer(SEXP ptr)\n@{\n    if(!R_ExternalPtrAddr(ptr)) return;\n    inRODBCClose(R_ExternalPtrAddr(ptr));\n    R_ClearExternalPtr(ptr); /* not really needed */\n@}\n@end example\n\n@noindent\nClearing the pointer and checking for a @code{NULL} pointer avoids any\npossibility of attempting to close an already-closed channel.\n\n@R{}'s connections provide another example of using external pointers,\nin that case purely to be able to use a finalizer to close and destroy the\nconnection if it is no longer is use.\n\n@node Vector accessor functions, Character encoding issues, External pointers and weak references, System and foreign language interfaces\n@section Vector accessor functions\n\nThe vector accessors like @code{REAL} and @code{INTEGER} and\n@code{VECTOR_ELT} are @emph{functions} when used in @R{} extensions.\n(For efficiency they are macros when used in the @R{} source code, apart\nfrom @code{SET_STRING_ELT} and @code{SET_VECTOR_ELT} which are always\nfunctions.)\n\nThe accessor functions check that they are being used on an appropriate\ntype of @code{SEXP}.\n\nIf efficiency is essential, the macro versions of the accessors can be\nobtained by defining @samp{USE_RINTERNALS} before including\n@file{Rinternals.h}.  If you find it necessary to do so, please do test\nthat your code compiles without @samp{USE_RINTERNALS} defined, as this\nprovides a stricter test that the accessors have been used correctly.\nNote too that the use of @samp{USE_RINTERNALS} when the header is\nincluded in C++ code is not supported: doing so may use C99 features\nwhich are not necessarily supported by the C++ compiler.  Nor is use\nwith @file{Rdefines.h} supported.\n\n@node Character encoding issues,  , Vector accessor functions, System and foreign language interfaces\n@section Character encoding issues\n\n@findex translateChar\n@findex translateCharUTF8\n@code{CHARSXP}s can be marked as coming from a known encoding (Latin-1\nor UTF-8).  This is mainly intended for human-readable output, and most\npackages can just treat such @code{CHARSXP}s as a whole.  However, if\nthey need to be interpreted as characters or output at C level then it\nwould normally be correct to ensure that they are converted to the\nencoding of the current locale: this can be done by accessing the data\nin the @code{CHARSXP} by @code{translateChar} rather than by\n@code{CHAR}.  If re-encoding is needed this allocates memory with\n@code{R_alloc} which thus persists to the end of the\n@code{.Call}/@code{.External} call unless @code{vmaxset} is used\n(@pxref{Transient storage allocation}).\n\nThere is a similar function @code{translateCharUTF8} which converts to\nUTF-8: this has the advantage that a faithful translation is almost\nalways possible (whereas only a few languages can be represented in the\nencoding of the current locale unless that is UTF-8).\n\n@findex getCharCE\n@findex mkCharCE\nThere is a public interface to the encoding marked on @code{CHARXSXPs}\n@emph{via}\n\n@example\ntypedef enum @{CE_NATIVE, CE_UTF8, CE_LATIN1, CE_SYMBOL, CE_ANY@} cetype_t;\ncetype_t getCharCE(SEXP);\nSEXP mkCharCE(const char *, cetype_t);\n@end example\n\n@noindent\nOnly @code{CE_UTF8} and @code{CE_LATIN1} are marked on @code{CHARSXPs}\n(and so @code{Rf_getCharCE} will only return one of the first three),\nand these should only be used on non-@acronym{ASCII} strings.  Value\n@code{CE_SYMBOL} is used internally to indicate Adobe Symbol encoding.\nValue @code{CE_ANY} is used to indicate a character string that will not\nneed re-encoding -- this is used for character strings known to be in\n@acronym{ASCII}, and can also be used as an input parameter where the\nintention is that the string is treated as a series of bytes.  (See the\ncomments under @code{mkChar} about the length of input allowed.)\n\nFunction\n\n@findex reEnc\n@example\nconst char *reEnc(const char *x, cetype_t ce_in, cetype_t ce_out,\n                  int subst);\n@end example\n\n@noindent\ncan be used to re-encode character strings: like @code{translateChar} it\nreturns a string allocated by @code{R_alloc}.  This can translate from\n@code{CE_SYMBOL} to @code{CE_UTF8}, but not conversely.  Argument\n@code{subst} controls what to do with untranslatable characters or\ninvalid input: this is done byte-by-byte with @code{1} indicates to\noutput hex of the form @code{<a0>}, and @code{2} to replace by @code{.},\nwith any other value causing the byte to produce no output.\n\n@findex mkCharLenCE\nThere is also\n\n@example\nSEXP mkCharLenCE(const char *, size_t, cetype_t);\n@end example\n\n@noindent\nto create marked character strings of a given length.\n\n\n@node The R API, Generic functions and methods, System and foreign language interfaces, Top\n@chapter The R @acronym{API}: entry points for C code\n\n@menu\n* Memory allocation::           \n* Error signaling::              \n* Random numbers::              \n* Missing and IEEE values::     \n* Printing::                    \n* Calling C from FORTRAN and vice versa::  \n* Numerical analysis subroutines::  \n* Optimization::                \n* Integration::                 \n* Utility functions::           \n* Re-encoding::                 \n* Condition handling and cleanup code::\n* Allowing interrupts::         \n* Platform and version information::  \n* Inlining C functions::        \n* Controlling visibility::      \n* Standalone Mathlib::          \n* Organization of header files::  \n@end menu\n\nThere are a large number of entry points in the @R{} executable/DLL that\ncan be called from C code (and some that can be called from FORTRAN\ncode).  Only those documented here are stable enough that they will only\nbe changed with considerable notice.\n\nThe recommended procedure to use these is to include the header file\n@file{R.h} in your C code by\n\n@example\n#include <R.h>\n@end example\n\n@noindent\nThis will include several other header files from the directory\n@file{@var{R_INCLUDE_DIR}/R_ext}, and there are other header files\nthere that can be included too, but many of the features they contain\nshould be regarded as undocumented and unstable.\n\nMost of these header files, including all those included by @file{R.h},\ncan be used from C++ code.\n\n@quotation Note\nBecause @R{} re-maps many of its external names to avoid clashes with\nuser code, it is @emph{essential} to include the appropriate header\nfiles when using these entry points.\n@end quotation\n\nThis remapping can cause problems@footnote{Known problems are redefining\n@code{LENGTH}, @code{error}, @code{length}, @code{vector} and\n@code{warning}}, and can be eliminated by defining @code{R_NO_REMAP} and\nprepending @samp{Rf_} to @emph{all} the function names used from\n@file{Rinternals.h} and @file{R_ext/Error.h}.  These problems can\nusually be avoided by including other headers (such as system headers\nand those for external software used by the package) before @file{R.h}.\n\nWe can classify the entry points as\n\n@table @emph\n@item API\nEntry points which are documented in this manual and declared in an\ninstalled header file.  These can be used in distributed packages and\nwill only be changed after deprecation.\n\n@item public\nEntry points declared in an installed header file that are exported\non all @R{} platforms but are not documented and subject to change\nwithout notice.\n\n@item private\nEntry points that are used when building @R{} and exported on all @R{}\nplatforms but are not declared in the installed header files.\nDo not use these in distributed code.\n\n@item hidden\nEntry points that are where possible (Windows and some modern Unix-alike\ncompilers/loaders when using @R{} as a shared library) not exported.\n@end table\n\n@node Memory allocation, Error signaling, The R API, The R API\n@section Memory allocation\n@cindex Memory allocation from C\n\n@menu\n* Transient storage allocation::  \n* User-controlled memory::      \n@end menu\n\nThere are two types of memory allocation available to the C programmer,\none in which @R{} manages the clean-up and the other in which user\nhas full control (and responsibility).\n\n@node Transient storage allocation, User-controlled memory, Memory allocation, Memory allocation\n@subsection Transient storage allocation\n@findex R_alloc\n@findex R_allocLD\n@findex S_alloc\n@findex S_realloc\n@findex vmaxget\n@findex vmaxset\n\nHere @R{} will reclaim the memory at the end of the call to @code{.C},\n@code{.Call} or @code{.External}.  Use\n\n@example\nchar *R_alloc(size_t @var{n}, int @var{size})\n@end example\n\n@noindent\nwhich allocates @var{n} units of @var{size} bytes each.  A typical usage\n(from package @pkg{stats}) is\n\n@example\nx = (int *) R_alloc(nrows(merge)+2, sizeof(int));\n@end example\n\n@noindent\n(@code{size_t} is defined in @file{stddef.h} which the header defining\n@code{R_alloc} includes.)\n\nThere is a similar call, @code{S_alloc} (for compatibility with older\nversions of @Sl{}) which zeroes the memory allocated,\n\n@example\nchar *S_alloc(long @var{n}, int @var{size})\n@end example\n\n@noindent\nand\n\n@example\nchar *S_realloc(char *@var{p}, long @var{new}, long @var{old}, int @var{size})\n@end example\n\n@noindent\nwhich changes the allocation size from @var{old} to @var{new} units, and\nzeroes the additional units.\n\nFor compatibility with current versions of @Sl{}, header @file{S.h}\n(only) defines wrapper macros equivalent to\n\n@example\ntype* Salloc(long @var{n}, int @var{type})\ntype* Srealloc(char *@var{p}, long @var{new}, long @var{old}, int @var{type})\n@end example\n\nThis memory is taken from the heap, and released at the end of the\n@code{.C}, @code{.Call} or @code{.External} call.  Users can also manage\nit, by noting the current position with a call to @code{vmaxget} and\nsubsequently clearing memory allocated by a call to @code{vmaxset}. An\nexample might be\n\n@example\nvoid *vmax = vmaxget()\n// a loop involving the use of R_alloc at each iteration\nvmaxset(vmax)\n@end example\n\n@noindent\nThis is only recommended for experts.\n\nNote that this memory will be freed on error or user interrupt\n(if allowed: @pxref{Allowing interrupts}).\n\nThe memory returned is only guaranteed to be aligned as required for\n@code{double} pointers: take precautions if casting to a pointer which\nneeds more.  There is also\n\n@example\nlong double *R_allocLD(size_t @var{n})\n@end example\n\n@noindent\nwhich is guaranteed to have the 16-byte alignment needed for @code{long\ndouble} pointers on some platforms.\n\n\nThese functions should only be used in code called by @code{.C} etc,\nnever from front-ends.  They are not thread-safe.\n\n@node User-controlled memory,  , Transient storage allocation, Memory allocation\n@subsection User-controlled memory\n@findex Calloc\n@findex Realloc\n@findex Free\n\nThe other form of memory allocation is an interface to @code{malloc},\nthe interface providing @R{} error signaling.  This memory lasts until\nfreed by the user and is additional to the memory allocated for the @R{}\nworkspace.\n\nThe interface functions are\n\n@example\n@group\n@var{type}* Calloc(size_t @var{n}, @var{type})\n@var{type}* Realloc(@var{any} *@var{p}, size_t @var{n}, @var{type})\nvoid Free(@var{any} *@var{p})\n@end group\n@end example\n\n@noindent\nproviding analogues of @code{calloc}, @code{realloc} and @code{free}.\nIf there is an error during allocation it is handled by @R{}, so if\nthese routines return the memory has been successfully allocated or\nfreed.  @code{Free} will set the pointer @var{p} to @code{NULL}.  (Some\nbut not all versions of @Sl{} do so.)\n\nUsers should arrange to @code{Free} this memory when no longer needed,\nincluding on error or user interrupt.  This can often be done most\nconveniently from an @code{on.exit} action in the calling @R{} function\n-- see @code{pwilcox} for an example.\n\nDo not assume that memory allocated by @code{Calloc}/@code{Realloc}\ncomes from the same pool as used by @code{malloc}: in particular do not\nuse @code{free} or @code{strdup} with it.\n\nMemory obtained by these functions should be aligned in the same way as\n@code{malloc}, that is `suitably aligned for any kind of variable'.\n\nThese entry points need to be prefixed by @code{R_} if\n@code{STRICT_R_HEADERS} has been defined.\n\n\n@node Error signaling, Random numbers, Memory allocation, The R API\n@section Error signaling\n@cindex Error signaling from C\n\nThe basic error signaling routines are the equivalents of @code{stop} and\n@code{warning} in @R{} code, and use the same interface.\n\n@example\n@group\nvoid error(const char * @var{format}, ...);\nvoid warning(const char * @var{format}, ...);\n@end group\n@end example\n\n@noindent\nThese have the same call sequences as calls to @code{printf}, but in the\nsimplest case can be called with a single character string argument\ngiving the error message. (Don't do this if the string contains @samp{%}\nor might otherwise be interpreted as a format.)\n\nIf @code{STRICT_R_HEADERS} is not defined there is also an\n@Sl{}-compatibility interface which uses calls of the form\n\n@example\n@group\nPROBLEM ...... ERROR\nMESSAGE ...... WARN\nPROBLEM ...... RECOVER(NULL_ENTRY)\nMESSAGE ...... WARNING(NULL_ENTRY)\n@end group\n@end example\n\n@noindent\nthe last two being the forms available in all @Sl{} versions.  Here\n@samp{......} is a set of arguments to @code{printf}, so can be a string\nor a format string followed by arguments separated by commas.\n\n@menu\n* Error signaling from FORTRAN::  \n@end menu\n\n@node Error signaling from FORTRAN,  , Error signaling, Error signaling\n@subsection Error signaling from FORTRAN\n@cindex Error signaling from FORTRAN\n\nThere are two interface function provided to call @code{error} and\n@code{warning} from FORTRAN code, in each case with a simple character\nstring argument.  They are defined as\n\n@example\n@group\nsubroutine rexit(@var{message})\nsubroutine rwarn(@var{message})\n@end group\n@end example\n\nMessages of more than 255 characters are truncated, with a warning.\n\n\n@node Random numbers, Missing and IEEE values, Error signaling, The R API\n@section Random number generation\n@cindex Random numbers in C\n@findex unif_rand\n@findex norm_rand\n@findex exp_rand\n@findex GetRNGstate\n@findex PutRNGstate\n@findex .Random.seed\n@findex seed_in\n@findex seed_out\n\nThe interface to @R{}'s internal random number generation routines is\n\n@example\n@group\ndouble unif_rand();\ndouble norm_rand();\ndouble exp_rand();\n@end group\n@end example\n\n@noindent\ngiving one uniform, normal or exponential pseudo-random variate.\nHowever, before these are used, the user must call\n\n@example\nGetRNGstate();\n@end example\n\n@noindent\nand after all the required variates have been generated, call\n\n@example\nPutRNGstate();\n@end example\n\n@noindent\nThese essentially read in (or create) @code{.Random.seed} and write it\nout after use.\n\nFile @file{S.h} defines @code{seed_in} and @code{seed_out} for\n@Sl{}-compatibility rather than @code{GetRNGstate} and\n@code{PutRNGstate}.  These take a @code{long *} argument which is\nignored.\n\nThe random number generator is private to @R{}; there is no way to\nselect the kind of RNG or set the seed except by evaluating calls to the\n@R{} functions.\n\nThe C code behind @R{}'s @code{r@var{xxx}} functions can be accessed by\nincluding the header file @file{Rmath.h}; @xref{Distribution\nfunctions}.  Those calls generate a single variate and should also be\nenclosed in calls to @code{GetRNGstate} and @code{PutRNGstate}.\n\n@c MM: FIXME   void rmultinom() is different, returning a vector!\n\n@node Missing and IEEE values, Printing, Random numbers, The R API\n@section Missing and @acronym{IEEE} special values\n@cindex Missing values\n@cindex IEEE special values\n@findex ISNA\n@findex ISNAN\n@findex R_FINITE\n@findex R_IsNaN\n@findex R_PosInf\n@findex R_NegInf\n@findex NA_REAL\n\nA set of functions is provided to test for @code{NA}, @code{Inf},\n@code{-Inf} and @code{NaN}.  These functions are accessed @emph{via} macros:\n\n@example\n@group\nISNA(@var{x})        @r{True for R's @code{NA} only}\nISNAN(@var{x})       @r{True for R's @code{NA} and @acronym{IEEE} @code{NaN}}\nR_FINITE(@var{x})    @r{False for @code{Inf}, @code{-Inf}, @code{NA}, @code{NaN}}\n@end group\n@end example\n\n@noindent\nand @emph{via} function @code{R_IsNaN} which is true for @code{NaN} but not\n@code{NA}.\n\nDo use @code{R_FINITE} rather than @code{isfinite} or @code{finite}; the\nlatter is often mendacious and @code{isfinite} is only available on a\nsome platforms, on which @code{R_FINITE} is a macro expanding to\n@code{isfinite}.\n\nCurrently in C code @code{ISNAN} is a macro calling @code{isnan}.\n(Since this gives problems on some C++ systems, if the @R{} headers is\ncalled from C++ code a function call is used.)\n\nYou can check for @code{Inf} or @code{-Inf} by testing equality to\n@code{R_PosInf} or @code{R_NegInf}, and set (but not test) an @code{NA}\nas @code{NA_REAL}.\n\nAll of the above apply to @emph{double} variables only.  For integer\nvariables there is a variable accessed by the macro @code{NA_INTEGER}\nwhich can used to set or test for missingness.\n\n\n@node Printing, Calling C from FORTRAN and vice versa, Missing and IEEE values, The R API\n@section Printing\n@cindex Printing from C\n@findex Rprintf\n@findex REprintf\n@findex Rvprintf\n@findex REvprintf\n\nThe most useful function for printing from a C routine compiled into\n@R{} is @code{Rprintf}.  This is used in exactly the same way as\n@code{printf}, but is guaranteed to write to @R{}'s output (which might\nbe a @acronym{GUI} console rather than a file, and can be re-directed by\n@code{sink}).  It is wise to write complete lines (including the\n@code{\"\\n\"}) before returning to @R{}.  It is defined in\n@file{R_ext/Print.h}.\n\nThe function @code{REprintf} is similar but writes on the error stream\n(@code{stderr}) which may or may not be different from the standard\noutput stream.\n\nFunctions @code{Rvprintf} and @code{REvprintf} are analogues using the\n@code{vprintf} interface.  Because that is a C99@footnote{also part of\nC++11.} interface, they are only defined by @file{R_ext/Print.h} in C++\ncode if the macro @code{R_USE_C99_IN_CXX} is defined when it is\nincluded.\n\nAnother circumstance when it may be important to use these functions is\nwhen using parallel computation on a cluster of computational nodes, as\ntheir output will be re-directed/logged appropriately.\n\n@menu\n* Printing from FORTRAN::       \n@end menu\n\n@node Printing from FORTRAN,  , Printing, Printing\n@subsection Printing from FORTRAN\n@cindex Printing from FORTRAN\n\nOn many systems FORTRAN @code{write} and @code{print} statements can be\nused, but the output may not interleave well with that of C, and will be\ninvisible on @acronym{GUI} interfaces.  They are not portable and best\navoided.\n\nThree subroutines are provided to ease the output of information from\nFORTRAN code.\n\n@example\n@group\nsubroutine dblepr(@var{label}, @var{nchar}, @var{data}, @var{ndata})\nsubroutine realpr(@var{label}, @var{nchar}, @var{data}, @var{ndata})\nsubroutine intpr (@var{label}, @var{nchar}, @var{data}, @var{ndata})\n@end group\n@end example\n\n@noindent\nHere @var{label} is a character label of up to 255 characters,\n@var{nchar} is its length (which can be @code{-1} if the whole label is\nto be used), and @var{data} is an array of length at least @var{ndata}\nof the appropriate type (@code{double precision}, @code{real} and\n@code{integer} respectively).  These routines print the label on one\nline and then print @var{data} as if it were an @R{} vector on\nsubsequent line(s).  They work with zero @var{ndata}, and so can be used\nto print a label alone.\n\n@node Calling C from FORTRAN and vice versa, Numerical analysis subroutines, Printing, The R API\n@section Calling C from FORTRAN and vice versa\n@cindex Calling C from FORTRAN and vice versa\n\nNaming conventions for symbols generated by FORTRAN differ by platform:\nit is not safe to assume that FORTRAN names appear to C with a trailing\nunderscore.  To help cover up the platform-specific differences there is\na set of macros that should be used.\n\n@table @code\n@item F77_SUB(@var{name})\nto define a function in C to be called from FORTRAN\n@item F77_NAME(@var{name})\nto declare a FORTRAN routine in C before use\n@item F77_CALL(@var{name})\nto call a FORTRAN routine from C\n@item F77_COMDECL(@var{name})\nto declare a FORTRAN common block in C\n@item F77_COM(@var{name})\nto access a FORTRAN common block from C\n@end table\n\nOn most current platforms these are all the same, but it is unwise to\nrely on this.  Note that names with underscores are not legal in FORTRAN\n77, and are not portably handled by the above macros.  (Also, all\nFORTRAN names for use by @R{} are lower case, but this is not enforced\nby the macros.)\n\nFor example, suppose we want to call R's normal random numbers from\nFORTRAN.  We need a C wrapper along the lines of\n\n@cindex Random numbers in FORTRAN\n@example\n@group\n#include <R.h>\n\nvoid F77_SUB(rndstart)(void) @{ GetRNGstate(); @}\nvoid F77_SUB(rndend)(void) @{ PutRNGstate(); @}\ndouble F77_SUB(normrnd)(void) @{ return norm_rand(); @}\n@end group\n@end example\n\n@noindent\nto be called from FORTRAN as in\n\n@example\n@group\n      subroutine testit()\n      double precision normrnd, x\n      call rndstart()\n      x = normrnd()\n      call dblepr(\"X was\", 5, x, 1)\n      call rndend()\n      end\n@end group\n@end example\n\n@noindent\nNote that this is not guaranteed to be portable, for the return\nconventions might not be compatible between the C and FORTRAN compilers\nused.  (Passing values @emph{via} arguments is safer.)\n\nThe standard packages, for example @pkg{stats}, are a rich source of\nfurther examples.\n\nPassing character strings from C to FORTRAN 77 or @emph{vice versa} is\nnot portable (and to Fortran 90 or later is even less so).  We have\nfound that it helps to ensure that a C string to be passed is followed\nby several @code{nul}s (and not just the one needed as a C terminator).\nBut for maximal portability character strings in FORTRAN should be\navoided.\n\n\n@node Numerical analysis subroutines, Optimization, Calling C from FORTRAN and vice versa, The R API\n@section Numerical analysis subroutines\n@cindex Numerical analysis subroutines from C\n\n@R{} contains a large number of mathematical functions for its own use,\nfor example numerical linear algebra computations and special functions.\n\nThe header files @file{R_ext/BLAS.h}, @file{R_ext/Lapack.h} and\n@file{R_ext/Linpack.h} contains declarations of the BLAS, LAPACK and\nLINPACK linear algebra functions included in @R{}.  These are expressed\nas calls to FORTRAN subroutines, and they will also be usable from\nusers' FORTRAN code.  Although not part of the official @acronym{API},\nthis set of subroutines is unlikely to change (but might be\nsupplemented).\n\nThe header file @file{Rmath.h} lists many other functions that are\navailable and documented in the following subsections. Many of these are\nC interfaces to the code behind @R{} functions, so the @R{} function\ndocumentation may give further details.\n\n@menu\n* Distribution functions::      \n* Mathematical functions::      \n* Numerical Utilities::         \n* Mathematical constants::      \n@end menu\n\n@node Distribution functions, Mathematical functions, Numerical analysis subroutines, Numerical analysis subroutines\n@subsection Distribution functions\n@cindex  Distribution functions from C\n\nThe routines used to calculate densities, cumulative distribution\nfunctions and quantile functions for the standard statistical\ndistributions are available as entry points.\n\nThe arguments for the entry points follow the pattern of those for the\nnormal distribution:\n\n@example\n@group\ndouble dnorm(double @var{x}, double @var{mu}, double @var{sigma}, int @var{give_log});\ndouble pnorm(double @var{x}, double @var{mu}, double @var{sigma}, int @var{lower_tail},\n             int @var{give_log});\ndouble qnorm(double @var{p}, double @var{mu}, double @var{sigma}, int @var{lower_tail},\n             int @var{log_p});\ndouble rnorm(double @var{mu}, double @var{sigma});\n@end group\n@end example\n\n@noindent\nThat is, the first argument gives the position for the density and CDF\nand probability for the quantile function, followed by the\ndistribution's parameters.  Argument @var{lower_tail} should be\n@code{TRUE} (or @code{1}) for normal use, but can be @code{FALSE} (or\n@code{0}) if the probability of the upper tail is desired or specified.\n\nFinally, @var{give_log} should be non-zero if the result is required on\nlog scale, and @var{log_p} should be non-zero if @var{p} has been\nspecified on log scale.\n\nNote that you directly get the cumulative (or ``integrated'')\n@emph{hazard} function, @eqn{H(t) = - \\log(1 - F(t)), H(t) = - log(1 -\nF(t))}, by using\n\n@example\n- p@var{dist}(t, ..., /*lower_tail = */ FALSE, /* give_log = */ TRUE)\n@end example\n\n@noindent\nor shorter (and more cryptic) @code{- p@var{dist}(t, ..., 0, 1)}.\n@cindex cumulative hazard\n\nThe random-variate generation routine @code{rnorm} returns one normal\nvariate. @xref{Random numbers}, for the protocol in using the\nrandom-variate routines.\n@cindex Random numbers in C\n\nNote that these argument sequences are (apart from the names and that\n@code{rnorm} has no @var{n}) mainly the same as the corresponding @R{}\nfunctions of the same name, so the documentation of the @R{} functions\ncan be used.  Note that the exponential and gamma distributions are\nparametrized by @code{scale} rather than @code{rate}.\n\n\nFor reference, the following table gives the basic name (to be prefixed\nby @samp{d}, @samp{p}, @samp{q} or @samp{r} apart from the exceptions\nnoted) and distribution-specific arguments for the complete set of\ndistributions.\n\n@quotation\n@multitable @columnfractions .28 .22 .30\n@item beta @tab @code{beta} @tab @code{a}, @code{b}\n@item non-central beta @tab @code{nbeta} @tab @code{a}, @code{b}, @code{ncp}\n@c in R shape1, shape2, ncp\n@item binomial @tab @code{binom} @tab @code{n}, @code{p}\n@item Cauchy @tab @code{cauchy} @tab @code{location}, @code{scale}\n@item chi-squared @tab @code{chisq} @tab @code{df}\n@item non-central chi-squared @tab @code{nchisq} @tab @code{df}, @code{ncp}\n@item exponential @tab @code{exp} @tab @code{scale} (and @strong{not} @code{rate})\n@item F @tab @code{f} @tab @code{n1}, @code{n2}\n@item non-central F @tab @code{nf} @tab @code{n1}, @code{n2}, @code{ncp}\n@item gamma @tab @code{gamma} @tab @code{shape}, @code{scale}\n@item geometric @tab @code{geom} @tab @code{p}\n@item hypergeometric @tab @code{hyper} @tab @code{NR}, @code{NB}, @code{n}\n@c in R m, n, k\n@item logistic @tab @code{logis} @tab @code{location}, @code{scale}\n@item lognormal @tab @code{lnorm} @tab @code{logmean}, @code{logsd}\n@item negative binomial @tab @code{nbinom} @tab @code{size}, @code{prob}\n@item normal @tab @code{norm} @tab @code{mu}, @code{sigma}\n@item Poisson @tab @code{pois} @tab @code{lambda}\n@item Student's t @tab @code{t} @tab @code{n}\n@item non-central t @tab @code{nt} @tab @code{df}, @code{delta}\n@item Studentized range @tab @code{tukey} (*) @tab @code{rr}, @code{cc}, @code{df}\n@c in R nranges, nmeans, df\n@item uniform @tab @code{unif} @tab @code{a}, @code{b}\n@c in R min, max\n@item Weibull @tab @code{weibull} @tab @code{shape}, @code{scale}\n@item Wilcoxon rank sum @tab @code{wilcox} @tab @code{m}, @code{n}\n@item Wilcoxon signed rank @tab @code{signrank} @tab @code{n}\n@end multitable\n@end quotation\n\n@noindent\nEntries marked with an asterisk only have @samp{p} and @samp{q}\nfunctions available, and none of the non-central distributions have\n@samp{r} functions.  After a call to @code{dwilcox}, @code{pwilcox} or\n@code{qwilcox} the function @code{wilcox_free()} should be called, and\nsimilarly for the signed rank functions.\n\n(If remapping is suppressed, the Normal distribution names are\n@code{Rf_dnorm4}, @code{Rf_pnorm5} and @code{Rf_qnorm5}.)\n\nFor the negative binomial distribution (@samp{nbinom}), in addition to the\n@code{(size, prob)} parametrization, the alternative @code{(size, mu)}\nparametrization is provided as well by functions @samp{[dpqr]nbinom_mu()},\nsee @kbd{?NegBinomial} in @R{}.\n\nFunctions @code{dpois_raw(x, *)} and @code{dbinom_raw(x, *)} are versions of the\nPoisson and binomial probability mass functions which work continuously in\n@code{x}, whereas @code{dbinom(x,*)} and @code{dpois(x,*)} only return non\nzero values for integer @code{x}.\n@example\n@group\ndouble dbinom_raw(double x, double n, double p, double q, int give_log)\ndouble dpois_raw (double x, double lambda, int give_log)\n@end group\n@end example\nNote that @code{dbinom_raw()} gets both @eqn{p, p} and @eqn{q = 1-p, q = 1-p} which\nmay be advantageous when one of them is close to @eqn{1, 1}.\n\n\n@node Mathematical functions, Numerical Utilities, Distribution functions, Numerical analysis subroutines\n@subsection Mathematical functions\n\n@findex gammafn\n@findex lgammafn\n@findex digamma\n@findex trigamma\n@findex tetragamma\n@findex pentagamma\n@findex psigamma\n@cindex Gamma function\n@deftypefun double gammafn (double @var{x})\n@deftypefunx double lgammafn (double @var{x})\n@deftypefunx double digamma (double @var{x})\n@deftypefunx double trigamma (double @var{x})\n@deftypefunx double tetragamma (double @var{x})\n@deftypefunx double pentagamma (double @var{x})\n@deftypefunx double psigamma (double @var{x}, double @var{deriv})\nThe Gamma function, the natural logarithm of its absolute value and\nfirst four derivatives and the n-th derivative of Psi, the digamma\nfunction, which is the derivative of @code{lgammafn}. In other words,\n@code{digamma(x)} is the same as @code{psigamma(x,0)},\n@code{trigamma(x) == psigamma(x,1)}, etc.\n@end deftypefun\n\n@findex beta\n@findex lbeta\n@cindex Beta function\n@deftypefun double beta (double @var{a}, double @var{b})\n@deftypefunx double lbeta (double @var{a}, double @var{b})\nThe (complete) Beta function and its natural logarithm.\n@end deftypefun\n\n@findex choose\n@findex lchoose\n@deftypefun double choose (double @var{n}, double @var{k})\n@deftypefunx double lchoose (double @var{n}, double @var{k})\nThe number of combinations of @var{k} items chosen from from @var{n} and\nthe natural logarithm of its absolute value, generalized to arbitrary real\n@var{n}.  @var{k} is rounded to the nearest integer (with a warning if\nneeded).\n@end deftypefun\n\n@findex bessel_i\n@findex bessel_j\n@findex bessel_k\n@findex bessel_y\n@cindex Bessel functions\n@deftypefun double bessel_i (double @var{x}, double @var{nu}, double @var{expo})\n@deftypefunx double bessel_j (double @var{x}, double @var{nu})\n@deftypefunx double bessel_k (double @var{x}, double @var{nu}, double @var{expo})\n@deftypefunx double bessel_y (double @var{x}, double @var{nu})\nBessel functions of types I, J, K and Y with index @var{nu}.  For\n@code{bessel_i} and @code{bessel_k} there is the option to return\n@w{exp(-@var{x}) I(@var{x}; @var{nu})} or @w{exp(@var{x}) K(@var{x};\n@var{nu})} if @var{expo} is 2. (Use @code{@var{expo} == 1} for unscaled\nvalues.)\n@end deftypefun\n\n\n@node Numerical Utilities, Mathematical constants, Mathematical functions, Numerical analysis subroutines\n@subsection Numerical Utilities\nThere are a few other numerical utility functions available as entry points.\n\n\n@deftypefun double R_pow (double @var{x}, double @var{y})\n@deftypefunx double R_pow_di (double @var{x}, int @var{i})\n@code{R_pow(@var{x}, @var{y})} and @code{R_pow_di(@var{x}, @var{i})}\ncompute @code{@var{x}^@var{y}} and @code{@var{x}^@var{i}}, respectively\nusing @code{R_FINITE} checks and returning the proper result (the same\nas @R{}) for the cases where @var{x}, @var{y} or @var{i} are 0 or\nmissing or infinite or @code{NaN}.\n@end deftypefun\n\n@deftypefun double log1p (double @var{x})\nComputes @code{log(1 + @var{x})} (@emph{log 1 @b{p}lus x}), accurately\neven for small @var{x}, i.e., @eqn{|x| \\ll 1, |x| << 1}.\n\nThis should be provided by your platform, in which case it is not\nincluded in @file{Rmath.h}, but is (probably) in @file{math.h} which\n@file{Rmath.h} includes (except under C++, so it may not be declared for\nC++98).\n@end deftypefun\n\n@deftypefun double log1pmx (double @var{x})\nComputes @code{log(1 + @var{x}) - @var{x}} (@emph{log 1 @b{p}lus x @b{m}inus @b{x}}),\naccurately even for small @var{x}, i.e., @eqn{|x| \\ll 1, |x| << 1}.\n@end deftypefun\n\n@deftypefun double log1pexp (double @var{x})\nComputes @code{log(1 + exp(@var{x}))} (@emph{log 1 @b{p}lus @b{exp}}),\naccurately, notably for large @var{x}, e.g., @eqn{x > 720, x > 720}.\n@end deftypefun\n\n@c  log1mexp(.) to come\n\n@deftypefun double expm1 (double @var{x})\nComputes @code{exp(@var{x}) - 1} (@emph{exp x @b{m}inus 1}), accurately\neven for small @var{x}, i.e., @eqn{|x| \\ll 1, |x| << 1}.\n\nThis should be provided by your platform, in which case it is not\nincluded in @file{Rmath.h}, but is (probably) in @file{math.h} which\n@file{Rmath.h} includes (except under C++, so it may not be declared for\nC++98).\n@end deftypefun\n\n@deftypefun double lgamma1p (double @var{x})\nComputes @code{log(gamma(@var{x} + 1))} (@emph{log(gamma(1 @b{p}lus x))}),\naccurately even for small @var{x}, i.e., @eqn{0 < x < 0.5, 0 < x < 0.5}.\n@end deftypefun\n\n@deftypefun double cospi (double @var{x})\nComputes @code{cos(pi * x)} (where @code{pi} is 3.14159...),\naccurately, notably for half integer @var{x}.\n\nThis might be provided by your platform@footnote{It is an optional C11\nextension.}, in which case it is not included in @file{Rmath.h}, but is\nin @file{math.h} which @file{Rmath.h} includes.  (Ensure that\nneither @file{math.h} nor @file{cmath} is included before\n@file{Rmath.h} or define\n@example\n#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1\n@end example\n@noindent\nbefore the first inclusion.)\n@end deftypefun\n\n@deftypefun double sinpi (double @var{x})\nComputes @code{sin(pi * x)} accurately, notably for (half) integer @var{x}.\n\nThis might be provided by your platform, in which case it is not\nincluded in @file{Rmath.h}, but is in @file{math.h} which @file{Rmath.h}\nincludes (but see the comments for @code{cospi}).\n@end deftypefun\n\n@deftypefun double tanpi (double @var{x})\nComputes @code{tan(pi * x)} accurately, notably for (half) integer @var{x}.\n\nThis might be provided by your platform, in which case it is not included\nin @file{Rmath.h}, but is in @file{math.h} which @file{Rmath.h} includes\n(but see the comments for @code{cospi}).\n@end deftypefun\n\n@deftypefun double logspace_add (double @var{logx}, double @var{logy})\n@deftypefunx double logspace_sub (double @var{logx}, double @var{logy})\n@deftypefunx double logspace_sum (const double* @var{logx}, int @var{n})\nCompute the log of a sum or difference from logs of terms, i.e., ``x +\ny'' as @code{log (exp(@var{logx}) + exp(@var{logy}))} and ``x - y'' as\n@code{log (exp(@var{logx}) - exp(@var{logy}))},\nand ``sum_i x[i]'' as @code{log (sum[i = 1:@var{n} exp(@var{logx}[i])] )}\nwithout causing unnecessary overflows or throwing away too much accuracy.\n@end deftypefun\n\n@deftypefun int imax2 (int @var{x}, int @var{y})\n@deftypefunx int imin2 (int @var{x}, int @var{y})\n@deftypefunx double fmax2 (double @var{x}, double @var{y})\n@deftypefunx double fmin2 (double @var{x}, double @var{y})\nReturn the larger (@code{max}) or smaller (@code{min}) of two integer or\ndouble numbers, respectively.  Note that @code{fmax2} and @code{fmin2}\ndiffer from C99/C++11's @code{fmax} and @code{fmin} when one of the\narguments is a @code{NaN}: these versions return @code{NaN}.\n@end deftypefun\n\n@deftypefun double sign (double @var{x})\nCompute the @emph{signum} function, where sign(@var{x}) is 1, 0, or\n@math{-1}, when @var{x} is positive, 0, or negative, respectively, and\n@code{NaN} if @code{x} is a @code{NaN}.\n@end deftypefun\n\n@deftypefun double fsign (double @var{x}, double @var{y})\nPerforms ``transfer of sign'' and is defined as @eqn{|x| *\n\\hbox{sign}(y), |x| * sign(y)}.\n@end deftypefun\n\n@deftypefun double fprec (double @var{x}, double @var{digits})\nReturns the value of @var{x} rounded to @var{digits} decimal digits\n(after the decimal point).\n\nThis is the function used by @R{}'s @code{signif()}.\n@end deftypefun\n\n@deftypefun double fround (double @var{x}, double @var{digits})\nReturns the value of @var{x} rounded to @var{digits} @emph{significant}\ndecimal digits.\n\nThis is the function used by @R{}'s @code{round()}.  (Note that C99/C++11\nprovide a @code{round} function but C++98 need not.)\n@end deftypefun\n\n@deftypefun double ftrunc (double @var{x})\nReturns the value of @var{x} truncated (to an integer value) towards\nzero.\n\n(Note that C99/C++11 provide a @code{round} function but C++98 need\nnot.)\n@end deftypefun\n\n@node Mathematical constants,  , Numerical Utilities, Numerical analysis subroutines\n@subsection Mathematical constants\n@findex M_E\n@findex M_PI\n@c maybe not all into the index ...\n\n@R{} has a set of commonly used mathematical constants encompassing\nconstants defined by POSIX and usually@footnote{but see the second\nparagraph of @pxref{Portable C and C++ code}.} found in @file{math.h}\n(but maybe not in the C++ header @file{cmath}) and contains further ones\nthat are used in statistical computations.  These are defined to (at\nleast) 30 digits accuracy in @file{Rmath.h}.  The following definitions\nuse @code{ln(x)} for the natural logarithm (@code{log(x)} in @R{}).\n\n@quotation\n@multitable {Name can be long}  {Definition (needs space)}  {0.123456789012345678 ...}\n@headitem Name @tab Definition (@code{ln = log}) @tab round(@emph{value}, 7)\n@c SVID & X/Open Constants -- names from Solaris math.h :\n@item @code{M_E} @tab @math{e} @tab 2.7182818\n@item @code{M_LOG2E} @tab log2(@math{e}) @tab 1.4426950\n@item @code{M_LOG10E} @tab log10(@math{e}) @tab 0.4342945\n@item @code{M_LN2} @tab ln(2) @tab 0.6931472\n@item @code{M_LN10} @tab ln(10) @tab 2.3025851\n@item @code{M_PI} @tab @eqn{\\pi, pi}   @tab 3.1415927\n@item @code{M_PI_2} @tab @eqn{\\pi/2, pi/2} @tab 1.5707963\n@item @code{M_PI_4} @tab @eqn{\\pi/4, pi/4} @tab 0.7853982\n@item @code{M_1_PI} @tab @eqn{1/\\pi, 1/pi} @tab 0.3183099\n@item @code{M_2_PI} @tab @eqn{2/\\pi, 2/pi} @tab 0.6366198\n@item @code{M_2_SQRTPI} @tab 2/sqrt(@eqn{\\pi, pi}) @tab 1.1283792\n@item @code{M_SQRT2} @tab sqrt(2) @tab 1.4142136\n@item @code{M_SQRT1_2} @tab 1/sqrt(2) @tab 0.7071068\n@c R-specific ones\n@item @code{M_SQRT_3} @tab sqrt(3) @tab 1.7320508\n@item @code{M_SQRT_32} @tab sqrt(32) @tab 5.6568542\n@item @code{M_LOG10_2} @tab log10(2) @tab 0.3010300\n@item @code{M_2PI} @tab @eqn{2\\pi, 2*pi} @tab 6.2831853\n@item @code{M_SQRT_PI} @tab sqrt(@eqn{\\pi, pi}) @tab 1.7724539\n@item @code{M_1_SQRT_2PI} @tab 1/sqrt(@eqn{2\\pi, 2*pi}) @tab 0.3989423\n@item @code{M_SQRT_2dPI} @tab sqrt(2/@eqn{\\pi, pi}) @tab 0.7978846\n@item @code{M_LN_SQRT_PI} @tab ln(sqrt(@eqn{\\pi, pi})) @tab 0.5723649\n@item @code{M_LN_SQRT_2PI} @tab ln(sqrt(@eqn{2\\pi, 2*pi})) @tab 0.9189385\n@item @code{M_LN_SQRT_PId2} @tab ln(sqrt(@eqn{\\pi, pi}/2)) @tab 0.2257914\n@end multitable\n@end quotation\n\nThere are a set of constants (@code{PI}, @code{DOUBLE_EPS}) (and so on)\ndefined (unless @code{STRICT_R_HEADERS} is defined) in the included\nheader @file{R_ext/Constants.h}, mainly for compatibility with @Sl{}.\n\n@findex TRUE\n@findex FALSE\nFurther, the included header @file{R_ext/Boolean.h} has enumeration\nconstants @code{TRUE} and @code{FALSE} of type @code{Rboolean} in\norder to provide a way of using ``logical'' variables in C consistently.\nThis can conflict with other software: for example it conflicts with the\nheaders in IJG's @code{jpeg-9} (but not earlier versions).\n\n\n@node Optimization, Integration, Numerical analysis subroutines, The R API\n@section Optimization\n@cindex optimization\n\nThe C code underlying @code{optim} can be accessed directly.  The user\nneeds to supply a function to compute the function to be minimized, of\nthe type\n\n@example\ntypedef double optimfn(int n, double *par, void *ex);\n@end example\n\n@noindent\nwhere the first argument is the number of parameters in the second\nargument.  The third argument is a pointer passed down from the calling\nroutine, normally used to carry auxiliary information.\n\nSome of the methods also require a gradient function\n\n@example\ntypedef void optimgr(int n, double *par, double *gr, void *ex);\n@end example\n\n@noindent\nwhich passes back the gradient in the @code{gr} argument.  No function\nis provided for finite-differencing, nor for approximating the Hessian\nat the result.\n\nThe interfaces (defined in header @file{R_ext/Applic.h}) are\n\n@itemize @bullet\n@item Nelder Mead:\n@findex nmmin\n@example\nvoid nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,\n           int *fail, double abstol, double intol, void *ex,\n           double alpha, double beta, double gamma, int trace,\n           int *fncount, int maxit);\n@end example\n\n@item BFGS:\n@findex vmmin\n@example\nvoid vmmin(int n, double *x, double *Fmin,\n           optimfn fn, optimgr gr, int maxit, int trace,\n           int *mask, double abstol, double reltol, int nREPORT,\n           void *ex, int *fncount, int *grcount, int *fail);\n@end example\n\n@item Conjugate gradients:\n@findex cgmin\n@example\nvoid cgmin(int n, double *xin, double *x, double *Fmin,\n           optimfn fn, optimgr gr, int *fail, double abstol,\n           double intol, void *ex, int type, int trace,\n           int *fncount, int *grcount, int maxit);\n@end example\n\n@item Limited-memory BFGS with bounds:\n@findex lbfgsb\n@example\nvoid lbfgsb(int n, int lmm, double *x, double *lower,\n            double *upper, int *nbd, double *Fmin, optimfn fn,\n            optimgr gr, int *fail, void *ex, double factr,\n            double pgtol, int *fncount, int *grcount,\n            int maxit, char *msg, int trace, int nREPORT);\n@end example\n\n@item Simulated annealing:\n@findex samin\n@example\nvoid samin(int n, double *x, double *Fmin, optimfn fn, int maxit,\n           int tmax, double temp, int trace, void *ex);\n@end example\n\n@end itemize\n\n@noindent\nMany of the arguments are common to the various methods.  @code{n} is\nthe number of parameters, @code{x} or @code{xin} is the starting\nparameters on entry and @code{x} the final parameters on exit, with\nfinal value returned in @code{Fmin}.  Most of the other parameters can\nbe found from the help page for @code{optim}: see the source code\n@file{src/appl/lbfgsb.c} for the values of @code{nbd}, which\nspecifies which bounds are to be used.\n\n\n@node Integration, Utility functions, Optimization, The R API\n@section Integration\n@cindex integration\n\nThe C code underlying @code{integrate} can be accessed directly.  The\nuser needs to supply a @emph{vectorizing} C function to compute the\nfunction to be integrated, of the type\n\n@example\ntypedef void integr_fn(double *x, int n, void *ex);\n@end example\n\n@noindent\nwhere @code{x[]} is both input and output and has length @code{n}, i.e.,\na C function, say @code{fn}, of type @code{integr_fn} must basically do\n@code{for(i in 1:n) x[i] := f(x[i], ex)}.  The vectorization requirement\ncan be used to speed up the integrand instead of calling it @code{n}\ntimes.  Note that in the current implementation built on QUADPACK,\n@code{n} will be either 15 or 21.  The @code{ex} argument is a pointer\npassed down from the calling routine, normally used to carry auxiliary\ninformation.\n\nThere are interfaces (defined in header @file{R_ext/Applic.h}) for\nintegrals over finite and infinite intervals (or ``ranges'' or\n``integration boundaries'').\n\n@itemize @bullet\n@item Finite:\n@findex Rdqags\n@example\nvoid Rdqags(integr_fn f, void *ex, double *a, double *b,\n            double *epsabs, double *epsrel,\n            double *result, double *abserr, int *neval, int *ier,\n            int *limit, int *lenw, int *last,\n            int *iwork, double *work);\n@end example\n\n@item Infinite:\n@findex Rdqagi\n@example\nvoid Rdqagi(integr_fn f, void *ex, double *bound, int *inf,\n            double *epsabs, double *epsrel,\n            double *result, double *abserr, int *neval, int *ier,\n            int *limit, int *lenw, int *last,\n            int *iwork, double *work);\n@end example\n\n@end itemize\n\n@noindent\nOnly the 3rd and 4th argument differ for the two integrators; for the\nfinite range integral using @code{Rdqags}, @code{a} and @code{b} are the\nintegration interval bounds, whereas for an infinite range integral using\n@code{Rdqagi}, @code{bound} is the finite bound of the integration (if\nthe integral is not doubly-infinite) and @code{inf} is a code indicating\nthe kind of integration range,\n\n@table @code\n@item inf = 1\n      corresponds to (bound, +Inf),\n@item inf = -1\n      corresponds to (-Inf, bound),\n@item inf = 2\n      corresponds to (-Inf, +Inf),\n@end table\n\n@code{f} and @code{ex} define the integrand function, see above;\n@code{epsabs} and @code{epsrel} specify the absolute and relative\naccuracy requested, @code{result}, @code{abserr} and @code{last} are the\noutput components @code{value}, @code{abs.err} and @code{subdivisions}\nof the @R{} function integrate, where @code{neval} gives the number of\nintegrand function evaluations, and the error code @code{ier} is\ntranslated to @R{}'s @code{integrate() $ message}, look at that function\ndefinition.  @code{limit} corresponds to @code{integrate(...,\nsubdivisions = *)}.  It seems you should always define the two work\narrays and the length of the second one as\n\n@example\n    lenw = 4 * limit;\n    iwork =   (int *) R_alloc(limit, sizeof(int));\n    work = (double *) R_alloc(lenw,  sizeof(double));\n@end example\n\nThe comments in the source code in @file{src/appl/integrate.c} give\nmore details, particularly about reasons for failure (@code{ier >= 1}).\n\n\n@node Utility functions, Re-encoding, Integration, The R API\n@section Utility functions\n@cindex Sort functions from C\n\n@R{} has a fairly comprehensive set of sort routines which are made\navailable to users' C code.\nThe following is declared in header file @file{Rinternals.h}.\n\n@deftypefun void  R_orderVector (int* @var{indx}, int @var{n}, SEXP @var{arglist}, Rboolean @var{nalast}, Rboolean @var{decreasing})\n@deftypefunx void R_orderVector1 (int* @var{indx}, int @var{n}, SEXP @var{x}, Rboolean @var{nalast}, Rboolean @var{decreasing})\n\n@code{R_orderVector()} corresponds to @R{}'s @code{order(..., na.last, decreasing)}.\nMore specifically, @code{indx <- order(x, y, na.last, decreasing)} corresponds to\n@code{R_orderVector(indx, n, Rf_lang2(x, y), nalast, decreasing)} and for\nthree vectors, @code{Rf_lang3(x,y,z)} is used as @var{arglist}.\n\nBoth @code{R_orderVector} and @code{R_orderVector1} assume the vector\n@code{indx} to be allocated to length @eqn{\\ge n, >= n}.  On return,\n@code{indx[]} contains a permutation of @code{0:(n-1)}, i.e., 0-based C\nindices (and not 1-based @R{} indices, as @R{}'s @code{order()}).\n\nWhen ordering only one vector, @code{R_orderVector1} is faster and\ncorresponds (but is 0-based) to @R{}'s @code{indx <- order(x, na.last,\ndecreasing)}.  It was added in @R{} 3.3.0.\n@end deftypefun\n\nAll other sort routines are declared in header file\n@file{R_ext/Utils.h} (included by @file{R.h}) and include the following.\n\n@deftypefun void R_isort (int* @var{x}, int @var{n})\n@deftypefunx void R_rsort (double* @var{x}, int @var{n})\n@deftypefunx void R_csort (Rcomplex* @var{x}, int @var{n})\n@deftypefunx void rsort_with_index (double* @var{x}, int* @var{index}, int @var{n})\nThe first three sort integer, real (double) and complex data\nrespectively.  (Complex numbers are sorted by the real part first then\nthe imaginary part.)  @code{NA}s are sorted last.\n\n@code{rsort_with_index} sorts on @var{x}, and applies the same\npermutation to @var{index}.  @code{NA}s are sorted last.\n@end deftypefun\n\n@deftypefun void revsort (double* @var{x}, int* @var{index}, int @var{n})\nIs similar to @code{rsort_with_index} but sorts into decreasing order,\nand @code{NA}s are not handled.\n@end deftypefun\n\n@deftypefun void iPsort (int* @var{x}, int @var{n}, int @var{k})\n@deftypefunx void rPsort (double* @var{x}, int @var{n}, int @var{k})\n@deftypefunx void cPsort (Rcomplex* @var{x}, int @var{n}, int @var{k})\nThese all provide (very) partial sorting: they permute @var{x} so that\n@code{@var{x}[@var{k}]} is in the correct place with smaller values to\nthe left, larger ones to the right.\n@end deftypefun\n\n\n@deftypefun  void R_qsort   (double *@var{v}, size_t @var{i}, size_t @var{j})\n@deftypefunx void R_qsort_I (double *@var{v}, int *@var{I}, int @var{i}, int @var{j})\n@deftypefunx void R_qsort_int   (int *@var{iv}, size_t @var{i}, size_t @var{j})\n@deftypefunx void R_qsort_int_I (int *@var{iv}, int *@var{I}, int @var{i}, int @var{j})\n\n\nThese routines sort @code{@var{v}[@var{i}:@var{j}]} or\n@code{@var{iv}[@var{i}:@var{j}]} (using 1-indexing, i.e.,\n@code{@var{v}[1]} is the first element) calling the quicksort algorithm\nas used by @R{}'s @code{sort(v, method = \"quick\")} and documented on the\nhelp page for the @R{} function @code{sort}.  The @code{..._I()}\nversions also return the @code{sort.index()} vector in @code{I}.  Note\nthat the ordering is @emph{not} stable, so tied values may be permuted.\n\nNote that @code{NA}s are not handled (explicitly) and you should\nuse different sorting functions if @code{NA}s can be present.\n@end deftypefun\n\n@deftypefun subroutine qsort4 (double precision @var{v}, integer @var{indx}, integer @var{ii}, integer @var{jj})\n@deftypefunx subroutine qsort3 (double precision @var{v}, integer @var{ii}, integer @var{jj})\n\nThe FORTRAN interface routines for sorting double precision vectors are\n@code{qsort3} and @code{qsort4}, equivalent to @code{R_qsort} and\n@code{R_qsort_I}, respectively.\n@end deftypefun\n\n@deftypefun void R_max_col (double* @var{matrix}, int* @var{nr}, int* @var{nc}, int* @var{maxes}, int* @var{ties_meth})\nGiven the @var{nr} by @var{nc} matrix @code{matrix} in column-major\n(``FORTRAN'')\norder, @code{R_max_col()} returns in @code{@var{maxes}[@var{i}-1]} the\ncolumn number of the maximal element in the @var{i}-th row (the same as\n@R{}'s @code{max.col()} function).  In the case of ties (multiple maxima),\n@code{*ties_meth} is an integer code in @code{1:3} determining the method:\n1 = ``random'', 2 = ``first'' and 3 = ``last''.\nSee @R{}'s help page @code{?max.col}.\n@end deftypefun\n\n@deftypefun int findInterval (double* @var{xt}, int @var{n}, double @var{x}, Rboolean @var{rightmost_closed}, Rboolean @var{all_inside}, int @var{ilo}, int* @var{mflag})\n@deftypefunx int findInterval2(double* @var{xt}, int @var{n}, double @var{x}, Rboolean @var{rightmost_closed}, Rboolean @var{all_inside}, Rboolean @var{left_open}, int @var{ilo}, int* @var{mflag})\nGiven the ordered vector @var{xt} of length @var{n}, return the interval\nor index of @var{x} in @code{@var{xt}[]}, typically max(@math{i}; @eqn{1\n\\le i \\le @var{n}, 1 <= i <= @var{n}} & @math{@var{xt}[i]} @eqn{\\le, <=}\n@var{x}) where we use 1-indexing as in @R{} and FORTRAN (but not C).  If\n@var{rightmost_closed} is true, also returns @math{@var{n}-1} if @var{x}\nequals @math{@var{xt}[@var{n}]}.  If @var{all_inside} is not 0, the\nresult is coerced to lie in @code{1:(@var{n}-1)} even when @var{x} is\noutside the @var{xt}[] range.  On return, @code{*@var{mflag}} equals\n@math{-1} if @var{x} < @var{xt}[1], @math{+1} if @var{x} >=\n@var{xt}[@var{n}], and 0 otherwise.\n\nThe algorithm is particularly fast when @var{ilo} is set to the last\nresult of @code{findInterval()} and @var{x} is a value of a sequence which\nis increasing or decreasing for subsequent calls.\n\n@code{findInterval2()} is a generalization of @code{findInterval()},\nwith an extra @code{Rboolean} argument @var{left_open}.  Setting\n@code{left_open = TRUE} basically replaces all left-closed right-open\nintervals @eqn{[s, t)} by left-open ones @eqn{(s, t]}, see the help page\nof @R{} function @code{findInterval} for details.\n\nThere is also an @code{F77_CALL(interv)()} version of\n@code{findInterval()} with the same arguments, but all pointers.\n@end deftypefun\n\nA system-independent interface to produce the name of a temporary\nfile is provided as\n\n@deftypefun {char *} R_tmpnam (const char *@var{prefix}, const char *@var{tmpdir})\n@deftypefunx {char *} R_tmpnam2 (const char *@var{prefix}, const char *@var{tmpdir}, const char *@var{fileext})\nReturn a pathname for a temporary file with name beginning with\n@var{prefix} and ending with @var{fileext} in directory @var{tmpdir}.\nA @code{NULL} prefix or extension is replaced by @code{\"\"}.  Note that\nthe return value is @code{malloc}ed and should be @code{free}d when no\nlonger needed (unlike the system call @code{tmpnam}).\n@end deftypefun\n\n@c ----\n\nThere is also the internal function used to expand file names in several\n@R{} functions, and called directly by @code{path.expand}.\n\n@deftypefun {const char *} R_ExpandFileName (const char *@var{fn})\nExpand a path name @var{fn} by replacing a leading tilde by the user's\nhome directory (if defined).  The precise meaning is platform-specific;\nit will usually be taken from the environment variable @env{HOME} if\nthis is defined.\n@end deftypefun\n\nFor historical reasons there are FORTRAN interfaces to functions\n@code{D1MACH} and @code{I1MACH}.  These can be called from C code as\ne.g.@: @code{F77_CALL(d1mach)(4)}.  Note that these are emulations of\nthe original functions by Fox, Hall and Schryer on NetLib at\n@uref{http://www.netlib.org/slatec/src/} for IEC 60559 arithmetic\n(required by @R{}).\n\n@node Re-encoding, Condition handling and cleanup code, Utility functions, The R API\n@section Re-encoding\n\n@R{} has its own C-level interface to the encoding conversion\ncapabilities provided by @code{iconv} because there are\nincompatibilities between the declarations in different implementations\nof @code{iconv}.\n\nThese are declared in header file @file{R_ext/Riconv.h}.\n\n@deftypefun {void *} Riconv_open (const char *@var{to}, const char *@var{from})\n@end deftypefun\nSet up a pointer to an encoding object to be used to convert between two\nencodings: @code{\"\"} indicates the current locale.\n\n@deftypefun size_t Riconv (void *@var{cd}, const char **@var{inbuf}, size_t *@var{inbytesleft}, char  **@var{outbuf}, size_t *@var{outbytesleft})\n@end deftypefun\nConvert as much as possible of @code{inbuf} to @code{outbuf}.  Initially\nthe @code{int} variables indicate the number of bytes available in the\nbuffers, and they are updated (and the @code{char} pointers are updated\nto point to the next free byte in the buffer).  The return value is the\nnumber of characters converted, or @code{(size_t)-1} (beware:\n@code{size_t} is usually an unsigned type).  It should be safe to assume\nthat an error condition sets @code{errno} to one of @code{E2BIG} (the\noutput buffer is full), @code{EILSEQ} (the input cannot be converted,\nand might be invalid in the encoding specified) or @code{EINVAL} (the\ninput does not end with a complete multi-byte character).\n\n@deftypefun int Riconv_close (void * @var{cd})\n@end deftypefun\nFree the resources of an encoding object.\n\n\n@node Condition handling and cleanup code, Allowing interrupts, Re-encoding, The R API\n@section Condition handling and cleanup code\n@cindex Condition handling\n@cindex Cleanup code\n@cindex Error handling\n\nTwo functions are available for establishing condition handlers from\nwithin C code:\n\n@example\n#include <Rinternals.h>\n\nSEXP R_tryCatchError(SEXP (*fun)(void *data), void *data,\n\t\t     SEXP (*hndlr)(SEXP cond, void *hdata), void *hdata);\n\nSEXP R_tryCatch(SEXP (*fun)(void *data), void *data,\n\t\tSEXP,\n\t\tSEXP (*hndlr)(SEXP cond, void *hdata), void *hdata,\n\t\tvoid (*clean)(void *cdata), void *cdata);\n@end example\n\n@code{R_tryCatchError} establishes an exiting handler for conditions\ninheriting form class @code{error}.\n\n@code{R_tryCatch} can be used to establish a handler for other\nconditions and to register a cleanup action. The conditions to be\nhandled are specified as a character vector (@code{STRSXP}).\nA @code{NULL} pointer can be passed as @code{fun} or @code{clean}\nif condition handling or cleanup are not needed.\n\nThese are currently implemented using the R-level @code{tryCatch}\nmechanism so are subject to some overhead.\n\nThe function @code{R_UnwindProtect} can be used to ensure that a cleanup\naction takes place on ordinary return as well as on a non-local transfer\nof control, which R implements as a @code{longjmp}.\n\n@example\nSEXP R_UnwindProtect(SEXP (*fun)(void *data), void *data,\n                     void (*clean)(void *data, Rboolean jump), void *cdata,\n                     SEXP cont);\n@end example\n\n@code{R_UnwindProtect} can be used in two ways.  The simper usage,\nsuitable for use in C code, passes @code{NULL} for the @code{cont}\nargument.  @code{R_UnwindProtect} will call @code{fun(data)}.  If\n@code{fun} returns a value, then @code{R_UnwindProtect} calls\n@code{clean(cleandata, FALSE)} before returning the value returned by\n@code{fun}. If @code{fun} executes a non-local transfer of control, then\n@code{clean(cleandata, TRUE)} is called, and the non-local transfer of\ncontrol is resumed.\n\nThe second use pattern, suitable to support C++ stack unwinding, uses\ntwo additional functions:\n\n@example\nSEXP R_MakeUnwindCont();\nvoid NORET R_ContinueUnwind(SEXP cont);\n@end example\n\n@code{R_MakeUnwindCont} allocates a @emph{continuation token}\n@code{cont} to pass to @code{R_UnwindProtect}. This token should be\nprotected with @code{PROTECT} before calling\n@code{R_UnwindProtect}. When the @code{clean} function is called with\n@code{jump == TRUE}, indicating that R is executing a non-local transfer\nof control, it can throw a C++ exception to a C++ @code{catch} outside\nthe C++ code to be unwound, and then use the continuation token in the a\ncall @code{R_ContinueUnwind(cont)} to resume the non-local transfer of\ncontrol within R.\n\n\n@node Allowing interrupts, Platform and version information, Condition handling and cleanup code, The R API\n@section Allowing interrupts\n@cindex Interrupts\n\nNo port of @R{} can be interrupted whilst running long computations in\ncompiled code, so programmers should make provision for the code to be\ninterrupted at suitable points by calling from C\n\n@example\n#include <R_ext/Utils.h>\n\nvoid R_CheckUserInterrupt(void);\n@end example\n\n@noindent\nand from FORTRAN\n\n@example\nsubroutine rchkusr()\n@end example\n\nThese check if the user has requested an interrupt, and if so branch to\n@R{}'s error signaling functions.\n\nNote that it is possible that the code behind one of the entry points\ndefined here if called from your C or FORTRAN code could be interruptible\nor generate an error and so not return to your code.\n\n\n@node Platform and version information, Inlining C functions, Allowing interrupts, The R API\n@section Platform and version information\n@cindex Version information from C\n@cindex OpenMP\n@findex R_Version\n\nThe header files define @code{USING_R}, which can be used to test if\nthe code is indeed being used with @R{}.\n\nHeader file @file{Rconfig.h} (included by @file{R.h}) is used to define\nplatform-specific macros that are mainly for use in other header files.\nThe macro @code{WORDS_BIGENDIAN} is defined on\nbig-endian@footnote{@uref{https://en.wikipedia.org/@/wiki/@/Endianness}.}\nsystems (e.g.@: most OSes on Sparc and PowerPC hardware) and not on\nlittle-endian systems (nowadays all the commoner @R{} platforms).  It\ncan be useful when manipulating binary files.  NB: these macros apply\nonly to the C compiler used to build @R{}, not necessarily to another C\nor C++ compiler.\n\nHeader file @file{Rversion.h} (@strong{not} included by @file{R.h})\ndefines a macro @code{R_VERSION} giving the version number encoded as an\ninteger, plus a macro @code{R_Version} to do the encoding.  This can be\nused to test if the version of @R{} is late enough, or to include\nback-compatibility features.  For protection against very old versions\nof @R{} which did not have this macro, use a construction such as\n\n@example\n@group\n#if defined(R_VERSION) && R_VERSION >= R_Version(3, 1, 0)\n  ...\n#endif\n@end group\n@end example\n\nMore detailed information is available in the macros @code{R_MAJOR},\n@code{R_MINOR}, @code{R_YEAR}, @code{R_MONTH} and @code{R_DAY}: see the\nheader file @file{Rversion.h} for their format.  Note that the minor\nversion includes the patchlevel (as in @samp{2.2}).\n\nPackages which use @code{alloca} need to ensure it is defined: as it is\npart of neither C nor POSIX there is no standard way to do so.  One can\nuse\n\n@example\n#include <Rconfig.h> // for HAVE_ALLOCA_H\n#ifdef __GNUC__\n// this covers gcc, clang, icc\n# undef alloca\n# define alloca(x) __builtin_alloca((x))\n#elif defined(HAVE_ALLOCA_H)\n// needed for native compilers on Solaris and AIX\n# include <alloca.h>\n#endif\n@end example\n\n@noindent\n(and this should be included before standard C headers such as\n@file{stdlib.h}, since on some platforms these include @file{malloc.h}\nwhich may have a conflicting definition), which suffices for known @R{}\nplatforms.\n\n@node Inlining C functions, Controlling visibility, Platform and version information, The R API\n@section Inlining C functions\n@findex R_INLINE\n\nThe C99 keyword @code{inline} should be recognized by all compilers\nnowadays used to build @R{}.  Portable code which might be used with\nearlier versions of @R{} can be written using the macro @code{R_INLINE}\n(defined in file @file{Rconfig.h} included by @file{R.h}), as for\nexample from package @CRANpkg{cluster}\n\n@example\n#include <R.h>\n\nstatic R_INLINE int ind_2(int l, int j)\n@{\n...\n@}\n@end example\n\nBe aware that using inlining with functions in more than one compilation\nunit is almost impossible to do portably, see\n@uref{http://www.greenend.org.uk/@/rjk/@/2003/@/03/@/inline.html}, so this usage\nis for @code{static} functions as in the example.  All the @R{}\nconfigure code has checked is that @code{R_INLINE} can be used in a\nsingle C file with the compiler used to build @R{}.  We recommend that\npackages making extensive use of inlining include their own configure\ncode.\n\n@node Controlling visibility, Standalone Mathlib, Inlining C functions, The R API\n@section Controlling visibility\n@cindex Visibility\n\nHeader @file{R_ext/Visibility.h} has some definitions for controlling the\nvisibility of entry points.  These are only effective when\n@samp{HAVE_VISIBILITY_ATTRIBUTE} is defined -- this is checked when @R{}\nis configured and recorded in header @file{Rconfig.h} (included by\n@file{R_ext/Visibility.h}).  It is often defined on modern Unix-alikes\nwith a recent compiler@footnote{It is defined by the Intel compilers,\nbut also hides unsatisfied references and so cannot be used with @R{}.\nIt is not supported by the AIX nor Solaris compilers.}, but not\nsupported on macOS nor Windows.  Minimizing the visibility of symbols in\na shared library will both speed up its loading (unlikely to be\nsignificant) and reduce the possibility of linking to other entry points\nof the same name.\n\nC/C++ entry points prefixed by @code{attribute_hidden} will not be\nvisible in the shared object.  There is no comparable mechanism for\nFORTRAN entry points, but there is a more comprehensive scheme used by,\nfor example package @pkg{stats}.  Most compilers which allow control of\nvisibility will allow control of visibility for all symbols @emph{via} a flag,\nand where known the flag is encapsulated in the macros\n@samp{C_VISIBILITY} and @code{F77_VISIBILITY} for C and FORTRAN\ncompilers.  These are defined in @file{etc/Makeconf} and so available\nfor normal compilation of package code.  For example,\n@file{src/Makevars} could include\n\n@example\nPKG_CFLAGS=$(C_VISIBILITY)\nPKG_FFLAGS=$(F77_VISIBILITY)\n@end example\n\nThis would end up with @strong{no} visible entry points, which would be\npointless.  However, the effect of the flags can be overridden by using\nthe @code{attribute_visible} prefix.  A shared object which registers\nits entry points needs only for have one visible entry point, its\ninitializer, so for example package @pkg{stats} has\n\n@example\nvoid attribute_visible R_init_stats(DllInfo *dll)\n@{\n    R_registerRoutines(dll, CEntries, CallEntries, FortEntries, NULL);\n    R_useDynamicSymbols(dll, FALSE);\n...\n@}\n@end example\n\nThe visibility mechanism is not available on Windows, but there is an\nequally effective way to control which entry points are visible, by\nsupplying a definitions file\n@file{@var{pkgnme}/src/@var{pkgname}-win.def}: only entry points\nlisted in that file will be visible.  Again using @pkg{stats} as an\nexample, it has\n\n@example\nLIBRARY stats.dll\nEXPORTS\n R_init_stats\n@end example\n\n@node Standalone Mathlib, Organization of header files, Controlling visibility, The R API\n@section Using these functions in your own C code\n\nIt is possible to build @code{Mathlib}, the @R{} set of mathematical\nfunctions documented in @file{Rmath.h}, as a standalone library\n@file{libRmath} under both Unix-alikes and Windows.  (This includes the\nfunctions documented in @ref{Numerical analysis subroutines} as from\nthat header file.)\n\nThe library is not built automatically when @R{} is installed, but can\nbe built in the directory @file{src/nmath/standalone} in the @R{}\nsources: see the file @file{README} there.  To use the code in your own\nC program include\n\n@example\n@group\n#define MATHLIB_STANDALONE\n#include <Rmath.h>\n@end group\n@end example\n\n@noindent\nand link against @samp{-lRmath} (and perhaps @samp{-lm}).  There is an\nexample file @file{test.c}.\n\nA little care is needed to use the random-number routines. You will\nneed to supply the uniform random number generator\n\n@example\ndouble unif_rand(void)\n@end example\n\n@noindent\nor use the one supplied (and with a dynamic library or DLL you will have\nto use the one supplied, which is the Marsaglia-multicarry with an entry\npoints\n\n@example\nset_seed(unsigned int, unsigned int)\n@end example\n\n@noindent\nto set its seeds and\n\n@example\nget_seed(unsigned int *, unsigned int *)\n@end example\n\n@noindent\nto read the seeds).\n\n@node Organization of header files,  , Standalone Mathlib, The R API\n@section Organization of header files\n\nThe header files which @R{} installs are in directory\n@file{@var{R_INCLUDE_DIR}} (default @file{@var{R_HOME}/include}).  This\ncurrently includes\n\n@quotation\n@multitable @columnfractions 0.30 0.55\n@item @file{R.h} @tab includes many other files\n@item @file{S.h} @tab different version for code ported from @Sl{}\n@item @file{Rinternals.h} @tab definitions for using @R{}'s internal\nstructures\n@item @file{Rdefines.h} @tab macros for an @Sl{}-like interface to the\nabove (no longer maintained)\n@item @file{Rmath.h} @tab standalone math library\n@item @file{Rversion.h} @tab @R{} version information\n@item @file{Rinterface.h} @tab for add-on front-ends (Unix-alikes only)\n@item @file{Rembedded.h} @tab for add-on front-ends\n@item @file{R_ext/Applic.h} @tab optimization and integration\n@item @file{R_ext/BLAS.h} @tab C definitions for BLAS routines\n@item @file{R_ext/Callbacks.h} @tab C (and R function) top-level task\nhandlers\n@item @file{R_ext/GetX11Image.h} @tab X11Image interface used by package\n@pkg{trkplot}\n@item @file{R_ext/Lapack.h} @tab C definitions for some LAPACK routines\n@item @file{R_ext/Linpack.h} @tab C definitions for some LINPACK\nroutines, not all of which are included in @R{}\n@item @file{R_ext/Parse.h} @tab a small part of @R{}'s parse interface:\nnot part of the stable API.\n@item @file{R_ext/RStartup.h} @tab for add-on front-ends\n@item @file{R_ext/Rdynload.h} @tab needed to register compiled code in\npackages\n@item @file{R_ext/R-ftp-http.h} @tab interface to internal method of\n@code{download.file}\n@item @file{R_ext/Riconv.h} @tab interface to @code{iconv}\n@item @file{R_ext/Visibility.h} @tab definitions controlling visibility\n@item @file{R_ext/eventloop.h} @tab for add-on front-ends and for\npackages that need to share in the @R{} event loops (not Windows)\n@end multitable\n@end quotation\n\nThe following headers are included by @file{R.h}:\n\n@quotation\n@multitable @columnfractions 0.30 0.55\n@item @file{Rconfig.h} @tab configuration info that is made available\n@item @file{R_ext/Arith.h} @tab handling for @code{NA}s, @code{NaN}s,\n@code{Inf}/@code{-Inf}\n@item @file{R_ext/Boolean.h} @tab @code{TRUE}/@code{FALSE} type\n@item @file{R_ext/Complex.h} @tab C typedefs for @R{}'s @code{complex}\n@item @file{R_ext/Constants.h} @tab constants\n@item @file{R_ext/Error.h} @tab error signaling\n@item @file{R_ext/Memory.h} @tab memory allocation\n@item @file{R_ext/Print.h} @tab @code{Rprintf} and variations.\n@item @file{R_ext/RS.h} @tab definitions common to @file{R.h} and\n@file{S.h}, including @code{F77_CALL} etc.\n@item @file{R_ext/Random.h} @tab random number generation\n@item @file{R_ext/Utils.h} @tab sorting and other utilities\n@item @file{R_ext/libextern.h} @tab definitions for exports from\n@file{R.dll} on Windows.\n@end multitable\n@end quotation\n\nThe graphics systems are exposed in headers\n@file{R_ext/GraphicsEngine.h}, @file{R_ext/GraphicsDevice.h} (which it\nincludes) and @file{R_ext/QuartzDevice.h}. Facilities for defining\ncustom connection implementations are provided in\n@file{R_ext/Connections.h}, but make sure you consult the file before\nuse.\n\nLet us re-iterate the advice to include system headers before the @R{}\nheader files, especially @file{Rinternals.h} (included by\n@file{Rdefines.h}) and @file{Rmath.h}, which redefine names which may be\nused in system headers (fewer if @samp{R_NO_REMAP} is defined, or\n@samp{R_NO_REMAP_RMATH} for @file{Rmath.h}).\n\n@node Generic functions and methods, Linking GUIs and other front-ends to R, The R API, Top\n@chapter Generic functions and methods\n@cindex Generic functions\n@cindex Method functions\n\n@R{} programmers will often want to add methods for existing generic\nfunctions, and may want to add new generic functions or make existing\nfunctions generic.  In this chapter we give guidelines for doing so,\nwith examples of the problems caused by not adhering to them.\n\nThis chapter only covers the `informal' class system copied from S3,\nand not with the S4 (formal) methods of package @pkg{methods}.\n\nFirst, a @emph{caveat}: a function named @code{@var{gen}.@var{cl}} will\nbe invoked by the generic @code{@var{gen}} for class @code{@var{cl}}, so\ndo not name functions in this style unless they are intended to be\nmethods.\n\nThe key function for methods is @code{NextMethod}, which dispatches the\nnext method.  It is quite typical for a method function to make a few\nchanges to its arguments, dispatch to the next method, receive the\nresults and modify them a little.  An example is\n\n@example\n@group\nt.data.frame <- function(x)\n@{\n    x <- as.matrix(x)\n    NextMethod(\"t\")\n@}\n@end group\n@end example\n\n@noindent\nNote that the example above works because there is a @emph{next} method,\nthe default method, not that a new method is selected when the class is\nchanged.\n\n@emph{Any} method a programmer writes may be invoked from another method\nby @code{NextMethod}, @emph{with the arguments appropriate to the\nprevious method}.  Further, the programmer cannot predict which method\n@code{NextMethod} will pick (it might be one not yet dreamt of), and the\nend user calling the generic needs to be able to pass arguments to the\nnext method.  For this to work\n\n@quotation\n@emph{A method must have all the arguments of the generic, including\n@code{@dots{}} if the generic does.}\n@end quotation\n\nIt is a grave misunderstanding to think that a method needs only to\naccept the arguments it needs.  The original S version of\n@code{predict.lm} did not have a @code{@dots{}} argument, although\n@code{predict} did.  It soon became clear that @code{predict.glm} needed\nan argument @code{dispersion} to handle over-dispersion.  As\n@code{predict.lm} had neither a @code{dispersion} nor a @code{@dots{}}\nargument, @code{NextMethod} could no longer be used.  (The legacy, two\ndirect calls to @code{predict.lm}, lives on in @code{predict.glm} in\n@R{}, which is based on the workaround for S3 written by Venables &\nRipley.)\n\nFurther, the user is entitled to use positional matching when calling\nthe generic, and the arguments to a method called by @code{UseMethod}\nare those of the call to the generic.  Thus\n\n@quotation\n@emph{A method must have arguments in exactly the same order as the\ngeneric.}\n@end quotation\n\n@noindent\nTo see the scale of this problem, consider the generic function\n@code{scale}, defined as\n\n@example\n@group\nscale <- function (x, center = TRUE, scale = TRUE)\n    UseMethod(\"scale\")\n@end group\n@end example\n\n@noindent\nSuppose an unthinking package writer created methods such as\n\n@example\nscale.foo <- function(x, scale = FALSE, ...) @{ @}\n@end example\n\n@noindent\nThen for @code{x} of class @code{\"foo\"} the calls\n\n@example\n@group\nscale(x, , TRUE)\nscale(x, scale = TRUE)\n@end group\n@end example\n\n@noindent\nwould do most likely do different things, to the justifiable\nconsternation of the end user.\n\nTo add a further twist, which default is used when a user calls\n@code{scale(x)} in our example?  What if\n\n@example\nscale.bar <- function(x, center, scale = TRUE) NextMethod(\"scale\")\n@end example\n\n@noindent\nand @code{x} has class @code{c(\"bar\", \"foo\")}?  It is the default\nspecified in the method that is used, but the default\nspecified in the generic may be the one the user sees.\nThis leads to the recommendation:\n\n@quotation\n@emph{If the generic specifies defaults, all methods should use the same defaults.}\n@end quotation\n\n@noindent\nAn easy way to follow these recommendations is to always keep generics\nsimple, e.g.\n\n@example\nscale <- function(x, ...) UseMethod(\"scale\")\n@end example\n\nOnly add parameters and defaults to the generic if they make sense in\nall possible methods implementing it.\n\n@menu\n* Adding new generics::         \n@end menu\n\n@node Adding new generics,  , Generic functions and methods, Generic functions and methods\n@section Adding new generics\n\nWhen creating a new generic function, bear in mind that its argument\nlist will be the maximal set of arguments for methods, including those\nwritten elsewhere years later.  So choosing a good set of arguments may\nwell be an important design issue, and there need to be good arguments\n@emph{not} to include a @code{@dots{}} argument.\n\nIf a @code{@dots{}} argument is supplied, some thought should be given\nto its position in the argument sequence.  Arguments which follow\n@code{@dots{}} must be named in calls to the function, and they must be\nnamed in full (partial matching is suppressed after @code{@dots{}}).\nFormal arguments before @code{@dots{}} can be partially matched, and so\nmay `swallow' actual arguments intended for @code{@dots{}}.  Although it\nis commonplace to make the @code{@dots{}} argument the last one, that is\nnot always the right choice.\n\nSometimes package writers want to make generic a function in the base\npackage, and request a change in @R{}.  This may be justifiable, but\nmaking a function generic with the old definition as the default method\ndoes have a small performance cost.  It is never necessary, as a package\ncan take over a function in the base package and make it generic by\nsomething like\n\n@example\n@group\nfoo <- function(object, ...) UseMethod(\"foo\")\nfoo.default <- function(object, ...) base::foo(object)\n@end group\n@end example\n\n@noindent\nEarlier versions of this manual suggested assigning @code{foo.default <-\nbase::foo}.  This is @strong{not} a good idea, as it captures the base\nfunction at the time of installation and it might be changed as @R{} is\npatched or updated.\n\nThe same idea can be applied for functions in other packages with namespaces.\n\n@node Linking GUIs and other front-ends to R, Function and variable index, Generic functions and methods, Top\n@chapter Linking GUIs and other front-ends to R\n\nThere are a number of ways to build front-ends to @R{}: we take this to\nmean a GUI or other application that has the ability to submit commands\nto @R{} and perhaps to receive results back (not necessarily in a text\nformat).  There are other routes besides those described here, for\nexample the package @CRANpkg{Rserve} (from @acronym{CRAN}, see also\n@uref{https://www.rforge.net/@/Rserve/}) and connections to Java in\n@samp{JRI} (part of the @CRANpkg{rJava} package on @acronym{CRAN}) and\nthe Omegahat/Bioconductor package @samp{SJava}.\n\nNote that the APIs described in this chapter are only intended to be\nused in an alternative front-end: they are not part of the API made\navailable for @R{} packages and can be dangerous to use in a\nconventional package (although packages may contain alternative\nfront-ends).  Conversely some of the functions from the API (such as\n@code{R_alloc}) should not be used in front-ends.\n\n@menu\n* Embedding R under Unix-alikes::  \n* Embedding R under Windows::   \n@end menu\n\n@node Embedding R under Unix-alikes, Embedding R under Windows, Linking GUIs and other front-ends to R, Linking GUIs and other front-ends to R\n@section Embedding R under Unix-alikes\n\n@R{} can be built as a shared library@footnote{In the parlance of macOS\nthis is a @emph{dynamic} library, and is the normal way to build @R{} on\nthat platform.} if configured with @option{--enable-R-shlib}.  This\nshared library can be used to run @R{} from alternative front-end\nprograms.  We will assume this has been done for the rest of this\nsection.  Also, it can be built as a static library if configured with\n@option{--enable-R-static-lib}, and that can be used in a very similar\nway (at least on Linux: on other platforms one needs to ensure that all\nthe symbols exported by @file{libR.a} are linked into the front-end).\n\nThe command-line @R{} front-end, @file{@var{R_HOME}/bin/exec/R}, is one\nsuch example, and the former @acronym{GNOME} (see package @pkg{gnomeGUI}\non @acronym{CRAN}'s @samp{Archive} area) and macOS consoles are others.\nThe source for @file{@var{R_HOME}/bin/exec/R} is in file\n@file{src/main/Rmain.c} and is very simple\n\n@example\nint Rf_initialize_R(int ac, char **av); /* in ../unix/system.c */\nvoid Rf_mainloop();                     /* in main.c */\n\nextern int R_running_as_main_program;   /* in ../unix/system.c */\n\nint main(int ac, char **av)\n@{\n    R_running_as_main_program = 1;\n    Rf_initialize_R(ac, av);\n    Rf_mainloop(); /* does not return */\n    return 0;\n@}\n@end example\n\n@noindent\nindeed, misleadingly simple.  Remember that\n@file{@var{R_HOME}/bin/exec/R} is run from a shell script\n@file{@var{R_HOME}/bin/R} which sets up the environment for the\nexecutable, and this is used for\n\n@itemize @bullet\n@item\nSetting @env{R_HOME} and checking it is valid, as well as the path\n@env{R_SHARE_DIR} and @env{R_DOC_DIR} to the installed @file{share} and\n@file{doc} directory trees.  Also setting @env{R_ARCH} if needed.\n\n@item\nSetting @env{LD_LIBRARY_PATH} to include the directories used in linking\n@R{}.  This is recorded as the default setting of\n@env{R_LD_LIBRARY_PATH} in the shell script\n@file{@var{R_HOME}/etc@var{R_ARCH}/ldpaths}.\n\n@item\nProcessing some of the arguments, for example to run @R{} under a\ndebugger and to launch alternative front-ends to provide GUIs.\n@end itemize\n\n@noindent\nThe first two of these can be achieved for your front-end by running it\n@emph{via} @command{R CMD}. So, for example\n\n@example\nR CMD /usr/local/lib/R/bin/exec/R\nR CMD exec/R\n@end example\n\n@noindent\nwill both work in a standard @R{} installation. (@command{R CMD} looks\nfirst for executables in @file{@var{R_HOME}/bin}.  These command-lines\nneed modification if a sub-architecture is in use.) If you do not want\nto run your front-end in this way, you need to ensure that @env{R_HOME}\nis set and @env{LD_LIBRARY_PATH} is suitable.  (The latter might well\nbe, but modern Unix/Linux systems do not normally include\n@file{/usr/local/lib} (@file{/usr/local/lib64} on some architectures),\nand @R{} does look there for system components.)\n\nThe other senses in which this example is too simple are that all the\ninternal defaults are used and that control is handed over to the\n@R{} main loop.  There are a number of small examples@footnote{but these\nare not part of the automated test procedures and so little tested.} in the\n@file{tests/Embedding} directory.  These make use of\n@code{Rf_initEmbeddedR} in @file{src/main/Rembedded.c}, and essentially\nuse\n@example\n#include <Rembedded.h>\n\nint main(int ac, char **av)\n@{\n    /* do some setup */\n    Rf_initEmbeddedR(argc, argv);\n    /* do some more setup */\n\n    /* submit some code to R, which is done interactively via\n        run_Rmainloop();\n\n        A possible substitute for a pseudo-console is\n\n        R_ReplDLLinit();\n        while(R_ReplDLLdo1() > 0) @{\n        /* add user actions here if desired */\n       @}\n\n     */\n    Rf_endEmbeddedR(0);\n    /* final tidying up after R is shutdown */\n    return 0;\n@}\n@end example\n\n@noindent\nIf you do not want to pass @R{} arguments, you can fake an @code{argv}\narray, for example by\n\n@example\n    char *argv[]= @{\"REmbeddedPostgres\", \"--silent\"@};\n    Rf_initEmbeddedR(sizeof(argv)/sizeof(argv[0]), argv);\n@end example\n\nHowever, to make a GUI we usually do want to run @code{run_Rmainloop}\nafter setting up various parts of @R{} to talk to our GUI, and arranging\nfor our GUI callbacks to be called during the @R{} mainloop.\n\nOne issue to watch is that on some platforms @code{Rf_initEmbeddedR} and\n@code{Rf_endEmbeddedR} change the settings of the FPU (e.g.@: to allow\nerrors to be trapped and to make use of extended precision registers).\n\nThe standard code sets up a session temporary directory in the usual\nway, @emph{unless} @code{R_TempDir} is set to a non-NULL value before\n@code{Rf_initEmbeddedR} is called.  In that case the value is assumed to\ncontain an existing writable directory (no check is done), and it is not\ncleaned up when @R{} is shut down.\n\n@code{Rf_initEmbeddedR} sets @R{} to be in interactive mode: you can set\n@code{R_Interactive} (defined in @file{Rinterface.h}) subsequently to\nchange this.\n\nNote that @R{} expects to be run with the locale category\n@samp{LC_NUMERIC} set to its default value of @code{C}, and so should\nnot be embedded into an application which changes that.\n\nIt is the user's responsibility to attempt to initialize only once.  To\nprotect the @R{} interpreter, @code{Rf_initialize_R} will exit the\nprocess if re-initialization is attempted.\n\n@menu\n* Compiling against the R library::  \n* Setting R callbacks::         \n* Registering symbols::         \n* Meshing event loops::         \n* Threading issues::            \n@end menu\n\n@node Compiling against the R library, Setting R callbacks, Embedding R under Unix-alikes, Embedding R under Unix-alikes\n@subsection Compiling against the R library\n\nSuitable flags to compile and link against the @R{} (shared or static)\nlibrary can be found by\n\n@example\nR CMD config --cppflags\nR CMD config --ldflags\n@end example\n\n@noindent\n(These apply only to an uninstalled copy or a standard install.)\n\nIf @R{} is installed, @code{pkg-config} is available and neither\nsub-architectures nor a macOS framework have been used, alternatives for\na shared @R{} library are\n\n@example\npkg-config --cflags libR\npkg-config --libs libR\n@end example\n\n@noindent\nand for a static @R{} library\n\n@example\npkg-config --cflags libR\npkg-config --libs --static libR\n@end example\n\n@noindent\n(This may work for an installed OS framework if @code{pkg-config} is\ntaught where to look for @file{libR.pc}: it is installed inside the\nframework.)\n\nHowever, a more comprehensive way is to set up a @file{Makefile} to\ncompile the front-end.  Suppose file @file{myfe.c} is to be compiled to\n@file{myfe}. A suitable @file{Makefile} might be\n\n@example\n## WARNING: does not work when $@{R_HOME@} contains spaces\ninclude $@{R_HOME@}/etc$@{R_ARCH@}/Makeconf\nall: myfe\n\n## The following is not needed, but avoids PIC flags.\nmyfe.o: myfe.c\n        $(CC) $(ALL_CPPFLAGS) $(CFLAGS) -c myfe.c -o $@@\n\n## replace $(LIBR) $(LIBS) by $(STATIC_LIBR) if R was build with a static libR\nmyfe: myfe.o\n        $(MAIN_LINK) -o $@@ myfe.o $(LIBR) $(LIBS)\n@end example\n\n@noindent\ninvoked as\n\n@example\nR CMD make\nR CMD myfe\n@end example\n\nEven though not recommended, @code{$@{R_HOME@}} may contain spaces.  In that\ncase, it cannot be passed as an argument to @code{include} in the makefile. \nInstead, one can instruct @command{make} using the @code{-f} option to\ninclude @file{Makeconf}, for example via recursive invocation of\n@command{make}, see @ref{Writing portable packages}.\n\n@example\nall:\n      $(MAKE) -f \"$@{R_HOME@}/etc$@{R_ARCH@}/Makeconf\" -f Makefile.inner\n@end example\n  \nAdditional flags which @code{$(MAIN_LINK)} includes are, amongst others,\nthose to select OpenMP and @option{--export-dynamic} for the GNU linker\non some platforms.  In principle @code{$(LIBS)} is not needed\nwhen using a shared @R{} library as @file{libR} is linked against\nthose libraries, but some platforms need the executable also linked\nagainst them.\n@c E.g. it seems current Linux needs the executable linked against -lm.\n\n@node Setting R callbacks, Registering symbols, Compiling against the R library, Embedding R under Unix-alikes\n@subsection Setting R callbacks\n\nFor Unix-alikes there is a public header file @file{Rinterface.h} that\nmakes it possible to change the standard callbacks used by @R{} in a\ndocumented way.  This defines pointers (if @code{R_INTERFACE_PTRS} is\ndefined)\n\n@example\nextern void (*ptr_R_Suicide)(const char *);\nextern void (*ptr_R_ShowMessage)(const char *);\nextern int  (*ptr_R_ReadConsole)(const char *, unsigned char *, int, int);\nextern void (*ptr_R_WriteConsole)(const char *, int);\nextern void (*ptr_R_WriteConsoleEx)(const char *, int, int);\nextern void (*ptr_R_ResetConsole)();\nextern void (*ptr_R_FlushConsole)();\nextern void (*ptr_R_ClearerrConsole)();\nextern void (*ptr_R_Busy)(int);\nextern void (*ptr_R_CleanUp)(SA_TYPE, int, int);\nextern int  (*ptr_R_ShowFiles)(int, const char **, const char **,\n                               const char *, Rboolean, const char *);\nextern int  (*ptr_R_ChooseFile)(int, char *, int);\nextern int  (*ptr_R_EditFile)(const char *);\nextern void (*ptr_R_loadhistory)(SEXP, SEXP, SEXP, SEXP);\nextern void (*ptr_R_savehistory)(SEXP, SEXP, SEXP, SEXP);\nextern void (*ptr_R_addhistory)(SEXP, SEXP, SEXP, SEXP);\n// added in R 3.0.0\nextern int  (*ptr_R_EditFiles)(int, const char **, const char **, const char *);\nextern SEXP (*ptr_do_selectlist)(SEXP, SEXP, SEXP, SEXP);\nextern SEXP (*ptr_do_dataentry)(SEXP, SEXP, SEXP, SEXP);\nextern SEXP (*ptr_do_dataviewer)(SEXP, SEXP, SEXP, SEXP);\nextern void (*ptr_R_ProcessEvents)();\n@end example\n\n@noindent\nwhich allow standard @R{} callbacks to be redirected to your GUI.  What\nthese do is generally documented in the file @file{src/unix/system.txt}.\n\n@deftypefun void R_ShowMessage (char *@var{message})\nThis should display the message, which may have multiple lines:  it\nshould be brought to the user's attention immediately.\n@end deftypefun\n\n@deftypefun void R_Busy (int @var{which})\nThis function invokes actions (such as change of cursor) when @R{}\nembarks on an extended computation (@code{@var{which}=1}) and when such\na state terminates (@code{@var{which}=0}).\n@end deftypefun\n\n@deftypefun int R_ReadConsole (const char *@var{prompt}, unsigned char *@var{buf}, @\n  int @var{buflen}, int @var{hist})\n@deftypefunx void R_WriteConsole (const char *@var{buf}, int @var{buflen})\n@deftypefunx void R_WriteConsoleEx (const char *@var{buf}, int @var{buflen}, int @var{otype})\n@deftypefunx void R_ResetConsole ()\n@deftypefunx void R_FlushConsole ()\n@deftypefunx void R_ClearErrConsole ()\n\nThese functions interact with a console.\n\n@code{R_ReadConsole} prints the given prompt at the console and then\ndoes a @code{fgets(3)}--like operation, transferring up to @var{buflen}\ncharacters into the buffer @var{buf}. The last two bytes should be\nset to @samp{\"\\n\\0\"} to preserve sanity.  If @var{hist} is non-zero,\nthen the line should be added to any command history which is being\nmaintained.  The return value is 0 is no input is available and >0\notherwise.\n\n@code{R_WriteConsoleEx} writes the given buffer to the console,\n@var{otype} specifies the output type (regular output or\nwarning/error). Call to @code{R_WriteConsole(buf, buflen)} is equivalent\nto @code{R_WriteConsoleEx(buf, buflen, 0)}. To ensure backward\ncompatibility of the callbacks, @code{ptr_R_WriteConsoleEx} is used only\nif @code{ptr_R_WriteConsole} is set to @code{NULL}.  To ensure that\n@code{stdout()} and @code{stderr()} connections point to the console,\nset the corresponding files to @code{NULL} @emph{via}\n@example\n      R_Outputfile = NULL;\n      R_Consolefile = NULL;\n@end example\n\n@code{R_ResetConsole} is called when the system is reset after an error.\n@code{R_FlushConsole} is called to flush any pending output to the\nsystem console.  @code{R_ClearerrConsole} clears any errors associated\nwith reading from the console.\n@end deftypefun\n\n@deftypefun int R_ShowFiles (int @var{nfile}, const char **@var{file}, @\n  const char **@var{headers}, const char *@var{wtitle}, Rboolean @var{del}, @\n  const char *@var{pager})\n\nThis function is used to display the contents of files.\n@end deftypefun\n\n@deftypefun int R_ChooseFile (int @var{new}, char *@var{buf}, @\n  int @var{len})\n\nChoose a file and return its name in @var{buf} of length @var{len}.\nReturn value is 0 for success, > 0 otherwise.\n@end deftypefun\n\n@deftypefun int R_EditFile (const char *@var{buf})\nSend a file to an editor window.\n@end deftypefun\n\n@deftypefun int R_EditFiles (int @var{nfile}, const char **@var{file}, const char **@var{title}, const char *@var{editor})\nSend @var{nfile} files to an editor, with titles possibly to be used for\nthe editor window(s).\n@end deftypefun\n\n@deftypefun SEXP R_loadhistory (SEXP, SEXP, SEXP, SEXP);\n@deftypefunx SEXP R_savehistory (SEXP, SEXP, SEXP, SEXP);\n@deftypefunx SEXP R_addhistory (SEXP, SEXP, SEXP, SEXP);\n\n@code{.Internal} functions for @code{loadhistory}, @code{savehistory}\nand @code{timestamp}.\n\nIf the console has no history mechanism these can be as\nsimple as\n\n@example\nSEXP R_loadhistory (SEXP call, SEXP op, SEXP args, SEXP env)\n@{\n    errorcall(call, \"loadhistory is not implemented\");\n    return R_NilValue;\n@}\nSEXP R_savehistory (SEXP call, SEXP op , SEXP args, SEXP env)\n@{\n    errorcall(call, \"savehistory is not implemented\");\n    return R_NilValue;\n@}\nSEXP R_addhistory (SEXP call, SEXP op , SEXP args, SEXP env)\n@{\n    return R_NilValue;\n@}\n@end example\n\nThe @code{R_addhistory} function should return silently if no history\nmechanism is present, as a user may be calling @code{timestamp} purely\nto write the time stamp to the console.\n@end deftypefun\n\n@deftypefun void R_Suicide (const char *@var{message})\nThis should abort @R{} as rapidly as possible, displaying the message.\nA possible implementation is\n\n@example\nvoid R_Suicide (const char *message)\n@{\n    char  pp[1024];\n    snprintf(pp, 1024, \"Fatal error: %s\\n\", s);\n    R_ShowMessage(pp);\n    R_CleanUp(SA_SUICIDE, 2, 0);\n@}\n@end example\n@end deftypefun\n\n@deftypefun void R_CleanUp (SA_TYPE @var{saveact}, int @var{status}, @\n  int @var{RunLast})\n\nThis function invokes any actions which occur at system termination.\nIt needs to be quite complex:\n\n@example\n#include <Rinterface.h>\n#include <Rembedded.h>    /* for Rf_KillAllDevices */\n\nvoid R_CleanUp (SA_TYPE saveact, int status, int RunLast)\n@{\n    if(saveact == SA_DEFAULT) saveact = SaveAction;\n    if(saveact == SA_SAVEASK) @{\n       /* ask what to do and set saveact */\n    @}\n    switch (saveact) @{\n    case SA_SAVE:\n        if(runLast) R_dot_Last();\n        if(R_DirtyImage) R_SaveGlobalEnv();\n        /* save the console history in R_HistoryFile */\n        break;\n    case SA_NOSAVE:\n        if(runLast) R_dot_Last();\n        break;\n    case SA_SUICIDE:\n    default:\n        break;\n    @}\n\n    R_RunExitFinalizers();\n    /* clean up after the editor e.g. CleanEd() */\n\n    R_CleanTempDir();\n\n    /* close all the graphics devices */\n    if(saveact != SA_SUICIDE) Rf_KillAllDevices();\n    fpu_setup(FALSE);\n\n    exit(status);\n@}\n@end example\n@end deftypefun\n\nThese callbacks should never be changed in a running @R{} session (and\nhence cannot be called from an extension package).\n\n@deftypefun SEXP R_dataentry (SEXP, SEXP, SEXP, SEXP);\n@deftypefunx SEXP R_dataviewer (SEXP, SEXP, SEXP, SEXP);\n@deftypefunx SEXP R_selectlist (SEXP, SEXP, SEXP, SEXP);\n\n@code{.External} functions for @code{dataentry} (and @code{edit} on\nmatrices and data frames), @code{View} and @code{select.list}.  These\ncan be changed if they are not currently in use.\n@end deftypefun\n\n\n@node Registering symbols, Meshing event loops, Setting R callbacks, Embedding R under Unix-alikes\n@subsection Registering symbols\n\nAn application embedding @R{} needs a different way of registering\nsymbols because it is not a dynamic library loaded by @R{} as would be\nthe case with a package.  Therefore @R{} reserves a special\n@code{DllInfo} entry for the embedding application such that it can\nregister symbols to be used with @code{.C}, @code{.Call} etc.  This\nentry can be obtained by calling @code{getEmbeddingDllInfo}, so a\ntypical use is\n\n@example\nDllInfo *info = R_getEmbeddingDllInfo();\nR_registerRoutines(info, cMethods, callMethods, NULL, NULL);\n@end example\n\nThe native routines defined by @code{cMethods} and @code{callMethods}\nshould be present in the embedding application.  See @ref{Registering\nnative routines} for details on registering symbols in general.\n\n\n@node Meshing event loops, Threading issues, Registering symbols, Embedding R under Unix-alikes\n@subsection Meshing event loops\n\nOne of the most difficult issues in interfacing @R{} to a front-end is\nthe handling of event loops, at least if a single thread is used.  @R{}\nuses events and timers for\n\n@itemize\n@item\nRunning X11 windows such as the graphics device and data editor, and\ninteracting with them (e.g., using @code{locator()}).\n\n@item\nSupporting Tcl/Tk events for the @pkg{tcltk} package (for at least the\nX11 version of Tk).\n\n@item\nPreparing input.\n\n@item\nTiming operations, for example for profiling @R{} code and\n@code{Sys.sleep()}.\n\n@item\nInterrupts, where permitted.\n@end itemize\n\n@noindent\nSpecifically, the Unix-alike command-line version of @R{} runs separate\nevent loops for\n\n@itemize\n@item\nPreparing input at the console command-line, in file\n@file{src/unix/sys-unix.c}.\n\n@item\nWaiting for a response from a socket in the internal functions\nunderlying FTP and HTTP transfers in @code{download.file()} and for\ndirect socket access, in files\n@file{src/@/modules/@/internet/@/nanoftp.c},\n@file{src/@/modules/@/internet/@/nanohttp.c} and\n@file{src/@/modules/@/internet/@/Rsock.c}\n\n@item\nMouse and window events when displaying the X11-based dataentry window,\nin file @file{src/modules/X11/dataentry.c}.  This is regarded as\n@emph{modal}, and no other events are serviced whilst it is active.\n@end itemize\n\nThere is a protocol for adding event handlers to the first two types of\nevent loops, using types and functions declared in the header\n@file{R_ext/eventloop.h} and described in comments in file\n@file{src/unix/sys-std.c}.  It is possible to add (or remove) an input\nhandler for events on a particular file descriptor, or to set a polling\ninterval (@emph{via} @code{R_wait_usec}) and a function to be called\nperiodically @emph{via} @code{R_PolledEvents}: the polling mechanism is used by\nthe @pkg{tcltk} package.\n\nIt is not intended that these facilities are used by packages, but if\nthey are needed exceptionally, the package should ensure that it cleans\nup and removes its handlers when its namespace is unloaded.  Note that\nthe header @file{sys/select.h} is needed@footnote{At least according to\nPOSIX 2004 and later.  Earlier standards prescribed @file{sys/time.h}\nand HP-UX continued to use that: @file{R_ext/eventloop.h} will include\nit from @R{} 3.4.0 if @code{HAVE_SYS_TIME_H} is defined.}: users should\ncheck this is available and define @code{HAVE_SYS_SELECT_H} before\nincluding @file{R_ext/eventloop.h}. (It is often the case that another\nheader will include @file{sys/select.h} before @file{eventloop.h} is\nprocessed, but this should not be relied on.)\n\nAn alternative front-end needs both to make provision for other @R{}\nevents whilst waiting for input, and to ensure that it is not frozen out\nduring events of the second type.  The ability to add a polled handler\nas @code{R_timeout_handler} is used by the @pkg{tcltk} package.\n\n\n@node Threading issues,  , Meshing event loops, Embedding R under Unix-alikes\n@subsection Threading issues\n\nEmbedded @R{} is designed to be run in the main thread, and all the\ntesting is done in that context.  There is a potential issue with the\nstack-checking mechanism where threads are involved.  This uses two\nvariables declared in @file{Rinterface.h} (if @code{CSTACK_DEFNS} is\ndefined) as\n\n@example\nextern uintptr_t R_CStackLimit; /* C stack limit */\nextern uintptr_t R_CStackStart; /* Initial stack address */\n@end example\n\n@noindent\nNote that @code{uintptr_t} is an optional C99 type for which a\nsubstitute is defined in @R{}, so your code needs to define\n@code{HAVE_UINTPTR_T} appropriately.  To do so, test if the type is\ndefined in C header @file{stdint.h} or C++ header @file{cstdint} and if\nso include the header and define @code{HAVE_UINTPTR_T} before including\n@file{Rinterface.h}.  (As from @R{} 3.4.0 for C code one can simply\ninclude @file{Rconfig.h}, possibly @emph{via} @file{R.h}, and for C++11\ncode @file{Rinterface.h} will include the header @file{cstdint}.)\n\nThese will be set@footnote{at least on platforms where the values are\navailable, that is having @code{getrlimit} and on Linux or having\n@code{sysctl} supporting @code{KERN_USRSTACK}, including FreeBSD and OS\nX.} when @code{Rf_initialize_R} is called, to values appropriate to the\nmain thread.  Stack-checking can be disabled by setting\n@code{R_CStackLimit = (uintptr_t)-1} immediately after\n@code{Rf_initialize_R} is called, but it is better to if possible set\nappropriate values.  (What these are and how to determine them are\nOS-specific, and the stack size limit may differ for secondary threads.\nIf you have a choice of stack size, at least 10Mb is recommended.)\n\nYou may also want to consider how signals are handled: @R{} sets signal\nhandlers for several signals, including @code{SIGINT}, @code{SIGSEGV},\n@code{SIGPIPE}, @code{SIGUSR1} and @code{SIGUSR2}, but these can all be\nsuppressed by setting the variable @code{R_SignalHandlers} (declared in\n@file{Rinterface.h}) to @code{0}.\n\nNote that these variables must not be changed by an @R{}\n@strong{package}: a package should not call @R{} internals which\nmakes use of the stack-checking mechanism on a secondary thread.\n\n@node Embedding R under Windows,  , Embedding R under Unix-alikes, Linking GUIs and other front-ends to R\n@section Embedding R under Windows\n\nAll Windows interfaces to @R{} call entry points in the DLL\n@file{R.dll}, directly or indirectly.  Simpler applications may find it\neasier to use the indirect route @emph{via} @acronym{(D)COM}.\n\n@menu\n* Using (D)COM::                \n* Calling R.dll directly::      \n* Finding R_HOME::              \n@end menu\n\n@node Using (D)COM, Calling R.dll directly, Embedding R under Windows, Embedding R under Windows\n@subsection Using (D)COM\n\n@acronym{(D)COM} is a standard Windows mechanism used for communication\nbetween Windows applications.  One application (here @R{}) is run as COM\nserver which offers services to clients, here the front-end calling\napplication.  The services are described in a `Type Library' and are\n(more or less) language-independent, so the calling application can be\nwritten in C or C++ or Visual Basic or Perl or Python and so on.\nThe `D' in (D)COM refers to `distributed', as the client and server can\nbe running on different machines.\n\nThe basic @R{} distribution is not a (D)COM server, but two addons are\ncurrently available that interface directly with @R{} and provide a\n(D)COM server:\n@itemize\n@item\nThere is a (D)COM server called @code{StatConnector} written by Thomas\nBaier available @emph{via} @uref{http://sunsite.univie.ac.at/rcom/},\nwhich works with @R{} packages to support transfer of data to and from\n@R{} and remote execution of @R{} commands, as well as embedding of an\n@R{} graphics window.\n\nRecent versions have usage restrictions.\n\n@item\nAnother (D)COM server, @code{RDCOMServer}, may be available from Omegahat,\n@uref{http://www.omegahat.net/}.  Its philosophy is discussed in\n@uref{http://www.omegahat.net/@/RDCOMServer/@/Docs/@/Paradigm.html} and is\nvery different from the purpose of this section.\n@end itemize\n@node Calling R.dll directly, Finding R_HOME, Using (D)COM, Embedding R under Windows\n@subsection Calling R.dll directly\n\nThe @code{R} DLL is mainly written in C and has @code{_cdecl} entry\npoints.  Calling it directly will be tricky except from C code (or C++\nwith a little care).\n\nThere is a version of the Unix-alike interface calling\n\n@example\nint Rf_initEmbeddedR(int ac, char **av);\nvoid Rf_endEmbeddedR(int fatal);\n@end example\n\n@noindent\nwhich is an entry point in @file{R.dll}.  Examples of its use (and a\nsuitable @file{Makefile.win}) can be found in the @file{tests/Embedding}\ndirectory of the sources.  You may need to ensure that\n@file{@var{R_HOME}/bin} is in your @env{PATH} so the @R{} DLLs are found.\n\nExamples of calling @file{R.dll} directly are provided in the directory\n@file{src/@/gnuwin32/@/front-ends}, including a simple command-line\nfront end @file{rtest.c} whose code is\n\n@smallexample\n#define Win32\n#include <windows.h>\n#include <stdio.h>\n#include <Rversion.h>\n#define LibExtern __declspec(dllimport) extern\n#include <Rembedded.h>\n#include <R_ext/RStartup.h>\n/* for askok and askyesnocancel */\n#include <graphapp.h>\n\n/* for signal-handling code */\n#include <psignal.h>\n\n/* simple input, simple output */\n\n/* This version blocks all events: a real one needs to call ProcessEvents\n   frequently. See rterm.c and ../system.c for one approach using\n   a separate thread for input.\n*/\nint myReadConsole(const char *prompt, char *buf, int len, int addtohistory)\n@{\n    fputs(prompt, stdout);\n    fflush(stdout);\n    if(fgets(buf, len, stdin)) return 1; else return 0;\n@}\n\nvoid myWriteConsole(const char *buf, int len)\n@{\n    printf(\"%s\", buf);\n@}\n\nvoid myCallBack(void)\n@{\n    /* called during i/o, eval, graphics in ProcessEvents */\n@}\n\nvoid myBusy(int which)\n@{\n    /* set a busy cursor ... if which = 1, unset if which = 0 */\n@}\n\nstatic void my_onintr(int sig) @{ UserBreak = 1; @}\n\nint main (int argc, char **argv)\n@{\n    structRstart rp;\n    Rstart Rp = &rp;\n    char Rversion[25], *RHome;\n\n    sprintf(Rversion, \"%s.%s\", R_MAJOR, R_MINOR);\n    if(strcmp(getDLLVersion(), Rversion) != 0) @{\n        fprintf(stderr, \"Error: R.DLL version does not match\\n\");\n        exit(1);\n    @}\n\n    R_setStartTime();\n    R_DefParams(Rp);\n    if((RHome = get_R_HOME()) == NULL) @{\n        fprintf(stderr, \"R_HOME must be set in the environment or Registry\\n\");\n        exit(1);\n    @}\n    Rp->rhome = RHome;\n    Rp->home = getRUser();\n    Rp->CharacterMode = LinkDLL;\n    Rp->ReadConsole = myReadConsole;\n    Rp->WriteConsole = myWriteConsole;\n    Rp->CallBack = myCallBack;\n    Rp->ShowMessage = askok;\n    Rp->YesNoCancel = askyesnocancel;\n    Rp->Busy = myBusy;\n\n    Rp->R_Quiet = TRUE;        /* Default is FALSE */\n    Rp->R_Interactive = FALSE; /* Default is TRUE */\n    Rp->RestoreAction = SA_RESTORE;\n    Rp->SaveAction = SA_NOSAVE;\n    R_SetParams(Rp);\n    R_set_command_line_arguments(argc, argv);\n\n    FlushConsoleInputBuffer(GetStdHandle(STD_INPUT_HANDLE));\n\n    signal(SIGBREAK, my_onintr);\n    GA_initapp(0, 0);\n    readconsolecfg();\n    setup_Rmainloop();\n#ifdef SIMPLE_CASE\n    run_Rmainloop();\n#else\n    R_ReplDLLinit();\n    while(R_ReplDLLdo1() > 0) @{\n/* add user actions here if desired */\n    @}\n/* only get here on EOF (not q()) */\n#endif\n    Rf_endEmbeddedR(0);\n    return 0;\n@}\n@end smallexample\n\nThe ideas are\n\n@itemize\n@item\nCheck that the front-end and the linked @file{R.dll} match -- other\nfront-ends may allow a looser match.\n\n@item\nFind and set the @R{} home directory and the user's home directory.  The\nformer may be available from the Windows Registry: it will be in\n@code{HKEY_LOCAL_MACHINE\\Software\\R-core\\R\\InstallPath} from an\nadministrative install and\n@code{HKEY_CURRENT_USER\\Software\\R-core\\R\\InstallPath} otherwise, if\nselected during installation (as it is by default).\n\n@item\nDefine startup conditions and callbacks @emph{via} the @code{Rstart} structure.\n@code{R_DefParams} sets the defaults, and @code{R_SetParams} sets\nupdated values.\n\n@item\nRecord the command-line arguments used by\n@code{R_set_command_line_arguments} for use by the @R{} function\n@code{commandArgs()}.\n\n@item\nSet up the signal handler and the basic user interface.\n\n@item\nRun the main @R{} loop, possibly with our actions intermeshed.\n\n@item\nArrange to clean up.\n@end itemize\n\nAn underlying theme is the need to keep the GUI `alive', and this has\nnot been done in this example.  The @R{} callback @code{R_ProcessEvents}\nneeds to be called frequently to ensure that Windows events in @R{}\nwindows are handled expeditiously.  Conversely, @R{} needs to allow the\nGUI code (which is running in the same process) to update itself as\nneeded -- two ways are provided to allow this:\n\n@itemize\n@item\n@code{R_ProcessEvents} calls the callback registered by\n@code{Rp->callback}.  A version of this is used to run package Tcl/Tk\nfor @pkg{tcltk} under Windows, for the code is\n\n@example\nvoid R_ProcessEvents(void)\n@{\n    while (peekevent()) doevent(); /* Windows events for GraphApp */\n    if (UserBreak) @{ UserBreak = FALSE; onintr(); @}\n    R_CallBackHook();\n    if(R_tcldo) R_tcldo();\n@}\n@end example\n\n@item\nThe mainloop can be split up to allow the calling application to take\nsome action after each line of input has been dealt with: see the\nalternative code below @code{#ifdef SIMPLE_CASE}.\n@end itemize\n\nIt may be that no @R{} GraphApp windows need to be considered, although\nthese include pagers, the @code{windows()} graphics device, the @R{}\ndata and script editors and various popups such as @code{choose.file()}\nand @code{select.list()}.  It would be possible to replace all of these,\nbut it seems easier to allow GraphApp to handle most of them.\n\nIt is possible to run @R{} in a GUI in a single thread (as\n@file{RGui.exe} shows) but it will normally be easier@footnote{An\nattempt to use only threads in the late 1990s failed to work correctly\nunder Windows 95, the predominant version of Windows at that time.} to\nuse multiple threads.\n\nNote that @R{}'s own front ends use a stack size of 10Mb, whereas MinGW\nexecutables default to 2Mb, and Visual C++ ones to 1Mb.  The latter\nstack sizes are too small for a number of @R{} applications, so\ngeneral-purpose front-ends should use a larger stack size.\n\n\n@node Finding R_HOME,  , Calling R.dll directly, Embedding R under Windows\n@subsection Finding R_HOME\n\nBoth applications which embed @R{} and those which use a @code{system}\ncall to invoke @R{} (as @command{Rscript.exe}, @command{Rterm.exe} or\n@command{R.exe}) need to be able to find the @R{} @file{bin} directory.\nThe simplest way to do so is the ask the user to set an environment\nvariable @env{R_HOME} and use that, but naive users may be flummoxed as\nto how to do so or what value to use.\n\nThe @R{} for Windows installers have for a long time allowed the value\nof @code{R_HOME} to be recorded in the Windows Registry: this is\noptional but selected by default.  @emph{Where} it is recorded has\nchanged over the years to allow for multiple versions of @R{} to be\ninstalled at once, and to allow 32- and 64-bit versions of @R{} to be\ninstalled on the same machine.\n\nThe basic Registry location is @code{Software\\R-core\\R}.  For an\nadministrative install this is under @code{HKEY_LOCAL_MACHINE} and on a\n64-bit OS @code{HKEY_LOCAL_MACHINE\\Software\\R-core\\R} is by default\nredirected for a 32-bit application, so a 32-bit application will see\nthe information for the last 32-bit install, and a 64-bit application\nthat for the last 64-bit install.  For a personal install, the\ninformation is under @code{HKEY_CURRENT_USER\\Software\\R-core\\R} which is\nseen by both 32-bit and 64-bit applications and so records the last\ninstall of either architecture.  To circumvent this, there are locations\n@code{Software\\R-core\\R32} and @code{Software\\R-core\\R64} which always\nrefer to one architecture.\n\nWhen @R{} is installed and recording is not disabled then two string\nvalues are written at that location for keys @code{InstallPath} and\n@code{Current Version}, and these keys are removed when @R{} is\nuninstalled.  To allow information about other installed versions to be\nretained, there is also a key named something like @code{3.0.0} or\n@code{3.0.0 patched} or @code{3.1.0 Pre-release} with a value for\n@code{InstallPath}.\n\nSo a comprehensive algorithm to search for @code{R_HOME} is something\nlike\n\n@itemize\n@item\nDecide which of personal or administrative installs should have\nprecedence.  There are arguments both ways: we find that with roaming\nprofiles that @code{HKEY_CURRENT_USER\\Software} often gets reverted to\nan earlier version.  Do the following for one or both of\n@code{HKEY_CURRENT_USER} and @code{HKEY_LOCAL_MACHINE}.\n\n@item\nIf the desired architecture is known, look in @code{Software\\R-core\\R32}\nor @code{Software\\R-core\\R64}, and if that does not exist or the\narchitecture is immaterial, in @code{Software\\R-core\\R}.\n\n@item\nIf key @code{InstallPath} exists then this is @code{R_HOME} (recorded\nusing backslashes).  If it does not, look for version-specific keys like\n@code{2.11.0 alpha}, pick the latest (which is of itself a complicated\nalgorithm as @code{2.11.0 patched > 2.11.0 > 2.11.0 alpha > 2.8.1}) and\nuse its value for @code{InstallPath}.\n@end itemize\n\n@node Function and variable index, Concept index, Linking GUIs and other front-ends to R, Top\n@unnumbered Function and variable index\n\n@printindex vr\n\n@node Concept index,  , Function and variable index, Top\n@unnumbered Concept index\n\n@printindex cp\n\n@bye\n\n@c Local Variables: ***\n@c mode: TeXinfo ***\n@c End: ***\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/nmath/dnt.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/main/g_cntrlify.h",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/parallel/inst/doc/parallel.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/parallel/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/parallel/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/parallel/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/parallel/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/moveline.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/saveload.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/displaylist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/plotexample.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/sharing.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/grid.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/viewports.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/locndimn.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/grobs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/frame.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/rotated.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/interactive.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/inst/doc/nonfinite.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grid/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/Matrix_1.2-14.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/foreign.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/rpart.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/foreign_0.8-70.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/MASS.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/nnet.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/spatial_7.3-11.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/class_7.3-14.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/survival_2.41-3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/lattice_0.20-35.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/rpart_4.1-13.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/lattice.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/KernSmooth_2.23-15.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/mgcv.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/class.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/mgcv_1.8-23.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/codetools_0.2-15.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/boot_1.3-20.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/cluster.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/cluster_2.0.7-1.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/nlme.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/spatial.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/codetools.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/survival.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/nlme_3.1-137.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/MASS_7.3-49.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/nnet_7.3-12.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/Matrix.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/KernSmooth.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/Recommended/boot.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats4/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats4/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/utils/R/sysdata.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/utils/inst/doc/Sweave.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/utils/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/utils/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/utils/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-it.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-zh_TW.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/base/po/RGui-de.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/compiler/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/es/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/es/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/es/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fa/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/tr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/nn/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/nn/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/de/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/da/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/en/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/it/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/methods/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/methods/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/methods/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/methods/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/datasets/data/UScitiesD.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/datasets/data/crimtab.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/datasets/data/npk.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/datasets/data/CO2.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/mai.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/mai.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/pch.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/oma.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/pch.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/graphics/man/figures/oma.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/tests/hills.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/tests/anorexia.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/tests/birthwt.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/stats/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/inst/afm/ArialMT-BoldItalic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/inst/afm/ArialMT-Italic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/inst/afm/ArialMT.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/inst/afm/ArialMT-Bold.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/inst/icc/srgb.flate",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/grDevices/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tcltk/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tcltk/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tcltk/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tcltk/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/R/sysdata.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/tools/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/splines/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/splines/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/splines/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/library/splines/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/e_pow.S",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/installer/ChineseTraditional.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/installer/R.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/installer/ChineseSimplified.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/installer/Korean.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/gnuwin32/front-ends/R.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/extra/tzone/zoneinfo.zip",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/src/extra/tre/tre-match-parallel.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/WinUnicode.dat",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/reg-plot.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/utf8-regex.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/arima.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/reg-plot-latin1.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/nanbug.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/reg-tests-2.Rout.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tests/reg-tests-1a.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/share/dictionaries/en_stats.rds",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/share/java/getsp.class",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/tools/help2man.pl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/NEWS.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/up.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/left.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/right.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/Rlogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/html/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/hist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/QQ.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/fig11.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/ecdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/QQ.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/hist.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/fig11.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/ice.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/fig12.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/fig12.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/ice.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.5.0-qhe6yx7yqq6cgi6n4uswewtkyfnlwg2g/spack-src/doc/manual/images/ecdf.pdf"
    ],
    "total_files": 4161
}