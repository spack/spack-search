{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/configure.ac": "dnl Template file for GNU Autoconf\ndnl Copyright (C) 1995-1997, 2001, 2007-2014, 2018-2019 Free Software\ndnl Foundation, Inc.\n\ndnl This program is free software; you can redistribute it and/or modify\ndnl it under the terms of the GNU General Public License as published by\ndnl the Free Software Foundation; either version 3 of the License, or\ndnl (at your option) any later version.\n\ndnl This program is distributed in the hope that it will be useful,\ndnl but WITHOUT ANY WARRANTY; without even the implied warranty of\ndnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\ndnl GNU General Public License for more details.\n\ndnl You should have received a copy of the GNU General Public License\ndnl along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ndnl Additional permission under GNU GPL version 3 section 7\n\ndnl If you modify this program, or any covered work, by linking or\ndnl combining it with the OpenSSL project's OpenSSL library (or a\ndnl modified version of that library), containing parts covered by the\ndnl terms of the OpenSSL or SSLeay licenses, the Free Software Foundation\ndnl grants you additional permission to convey the resulting work.\ndnl Corresponding Source for a non-source form of such a combination\ndnl shall include the source code for the parts of OpenSSL used as well\ndnl as that of the covered work.\n\ndnl\ndnl Process this file with autoconf to produce a configure script.\ndnl\n\nAC_INIT([wget],\n        m4_esyscmd([build-aux/git-version-gen .tarball-version]),\n\t[bug-wget@gnu.org])\nAC_PREREQ(2.63)\n\ndnl\ndnl What version of Wget are we building?\ndnl\nAC_MSG_NOTICE([configuring for GNU Wget $PACKAGE_VERSION])\n\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([build-aux])\n\nAC_CONFIG_SRCDIR([src/wget.h])\n\ndnl\ndnl Automake setup\ndnl\nAM_INIT_AUTOMAKE([1.9])\n\ndnl\ndnl Get canonical host\ndnl\nAC_CANONICAL_HOST\nAC_DEFINE_UNQUOTED([OS_TYPE], \"$host_os\",\n                   [Define to be the name of the operating system.])\n\ndnl Non-verbose make\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\ndnl\ndnl Process External Libraries\ndnl\n\ndnl Libpsl: Public Suffix List checking\nAC_ARG_WITH([libpsl],\n  [AS_HELP_STRING([--without-libpsl], [disable support for libpsl cookie checking.])])\n\ndnl SSL: Configure SSL backend to use\nAC_ARG_WITH([ssl],\n  [AS_HELP_STRING([--with-ssl={gnutls,openssl}], [specify SSL backend. GNU TLS is the default.])])\n\ndnl Zlib: Configure use of zlib for compression\nAC_ARG_WITH([zlib],\n  [AS_HELP_STRING([--without-zlib], [disable zlib.])])\n\ndnl Metalink: Configure use of the Metalink library\nAC_ARG_WITH([metalink],\n  [AS_HELP_STRING([--with-metalink], [enable support for metalinks.])])\n\ndnl C-Ares: Configure use of the c-ares library for DNS lookup\nAC_ARG_WITH(cares, AS_HELP_STRING([--with-cares], [enable support for C-Ares DNS lookup.]), with_cares=$withval, with_cares=no)\n\ndnl\ndnl Process features\ndnl\n\nAC_ARG_ENABLE([fuzzing],\n  [AS_HELP_STRING([--enable-fuzzing], [Turn on fuzzing build (for developers)])],\n  [enable_fuzzing=yes;\n   AC_SUBST([LIB_FUZZING_ENGINE])\n   AC_DEFINE([FUZZING], 1, [Define to 1 if this is a fuzzing build])\n  ], [enable_fuzzing=no; LIB_FUZZING_ENGINE=\"\"])\n#FUZZ_LIBS=$LIBS\n#if test $enable_fuzzing = \"yes\"; then\n#  OLD_LIBS=$LIBS\n#  AC_SEARCH_LIBS([dlsym], [dl dld])\n#  FUZZ_LIBS=$LIBS\n#  LIBS=$OLD_LIBS\n#fi\n#AC_SUBST([FUZZ_LIBS])\nAM_CONDITIONAL([FUZZING], [test \"$enable_fuzzing\" = \"yes\"])\n\ndnl needed for some fuzzers\nOLD_LIBS=\"$LIBS\"\nAC_SEARCH_LIBS([dlopen], [dl dld])\nif [[ \"${ac_cv_search_dlopen#-l}\" != \"${ac_cv_search_dlopen}\" ]]; then\n  FUZZ_LIBS=\"${ac_cv_search_dlopen}\"\n  AC_SUBST([FUZZ_LIBS])\nfi\nLIBS=\"$OLD_LIBS\"\n\ndnl Opie: Support for opie s/key FTP logins\nAC_ARG_ENABLE([opie],\n  [AS_HELP_STRING([--disable-opie], [disable support for opie or s/key FTP login])],\n  [ENABLE_OPIE=$enableval],\n  [ENABLE_OPIE=yes])\n\nAS_IF([test \"x$ENABLE_OPIE\" = xyes],\n  [AC_DEFINE([ENABLE_OPIE], [1], [Define if you want Opie support for FTP compiled in.])],\n  []\n)\n\n\ndnl Digest: Support for HTTP Digest Authentication\nAC_ARG_ENABLE([digest],\n  [AS_HELP_STRING([--disable-digest], [disable support for HTTP digest authorization])],\n  [ENABLE_DIGEST=$enableval],\n  [ENABLE_DIGEST=yes])\n\nAS_IF([test \"x$ENABLE_DIGEST\" = xyes],\n  [AC_DEFINE([ENABLE_DIGEST], [1], [Define if you want the HTTP Digest Authorization compiled in.])],\n  []\n)\n\n\ndnl NTLM: Support for HTTP NTLM Authentication\nAC_ARG_ENABLE([ntlm],\n  [AS_HELP_STRING([--disable-ntlm], [disable support for NTLM authorization])],\n  [ENABLE_NTLM=$enableval],\n  [ENABLE_NTLM=auto]\n)\n\n\ndnl Debug: Support for printing debugging output\nAC_ARG_ENABLE([debug],\n  [AS_HELP_STRING([--disable-debug], [disable support for debugging output])],\n  [ENABLE_DEBUG=$enableval],\n  [ENABLE_DEBUG=yes])\n\nAS_IF([test \"x$ENABLE_DEBUG\" = xyes],\n  [AC_DEFINE([ENABLE_DEBUG], [1], [Define if you want the debug output support compiled in.])],\n  []\n)\n\ndnl Valgrind-tests: Should test suite be run under valgrind?\nAC_ARG_ENABLE(valgrind-tests,\n  [AS_HELP_STRING([--enable-valgrind-tests], [enable using Valgrind for tests])],\n  [ENABLE_VALGRIND=$enableval],\n  [ENABLE_VALGRIND=no])\n\nAS_IF([test \"x$ENABLE_VALGRIND\" != xno], [\n  AC_CHECK_PROG(HAVE_VALGRIND, valgrind, yes, no)\n  AS_IF([test \"x$HAVE_VALGRIND\" = xyes], [\n    VALGRIND_TESTS=\"1\"\n    AC_SUBST(VALGRIND_TESTS)\n    VALGRIND_INFO=\"Test suite will be run under Valgrind\"\n  ], [\n    VALGRIND_INFO=\"Valgrind not found\"\n  ])\n], [\n  VALGRIND_INFO=\"Valgrind testing not enabled\"\n])\n\nAC_ARG_ENABLE(assert,\n  [AS_HELP_STRING([--enable-assert], [enable assertions in code base])],\n  [ENABLE_ASSERTION=$enableval],\n  [ENABLE_ASSERTION=no]\n)\n\nAS_IF([test \"x$ENABLE_ASSERTION\" != xyes], [\n  CFLAGS=\"-DNDEBUG $CFLAGS\"\n  ],\n  [])\n\ndnl\ndnl Find the compiler\ndnl\n\ndnl We want these before the checks, so the checks can modify their values.\ntest -z \"$CFLAGS\"  && CFLAGS= auto_cflags=1\ntest -z \"$CC\" && cc_specified=yes\n\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_AIX\n\ngl_EARLY\n\ndnl\ndnl Find python3\ndnl\nAM_PATH_PYTHON([3.0],,[:])\nAM_CONDITIONAL([HAVE_PYTHON3], [test \"$PYTHON\" != :])\n\ndnl\ndnl Gettext\ndnl\nAM_GNU_GETTEXT([external],[need-ngettext])\nAM_GNU_GETTEXT_VERSION([0.17])\n\nAC_PROG_RANLIB\n\nAC_PROG_LEX\n\ndnl Turn on optimization by default.  Specifically:\ndnl\ndnl if the user hasn't specified CFLAGS, then\ndnl   if compiler is gcc, then\ndnl     use -O2 and some warning flags\ndnl   else\ndnl     use os-specific flags or -O\ndnl\ndnl For these tests, the system considers clang to be gcc\nif test -n \"$auto_cflags\"; then\n  if test -n \"$GCC\"; then\n    CFLAGS=\"$CFLAGS -O2 -Wall -Wextra\"\n  else\n    case \"$host_os\" in\n      *hpux*)  CFLAGS=\"$CFLAGS +O3\"                      ;;\n      *ultrix* | *osf*) CFLAGS=\"$CFLAGS -O -Olimit 2000\" ;;\n      *)       CFLAGS=\"$CFLAGS -O\" ;;\n    esac\n  fi\nfi\n\ndnl\ndnl Checks for basic compiler characteristics.\ndnl\nAC_C_CONST\nAC_C_INLINE\nAC_C_VOLATILE\n\ndnl Check for basic headers, even though we expect them to exist and\ndnl #include them unconditionally in the code.  Their detection is\ndnl still needed because test programs used by Autoconf macros check.\ndnl Without the checks they will fail to be included in test programs,\ndnl which will subsequently fail.\nAC_HEADER_STDC\n\ndnl Check for large file support.  This check needs to come fairly\ndnl early because it could (in principle) affect whether functions and\ndnl headers are available, whether they work, etc.\nAC_SYS_LARGEFILE\nAC_CHECK_SIZEOF(off_t)\n\ndnl\ndnl Checks for system header files that might be missing.\ndnl\nAC_HEADER_STDBOOL\nAC_CHECK_HEADERS(unistd.h sys/time.h)\nAC_CHECK_HEADERS(termios.h sys/ioctl.h sys/select.h utime.h sys/utime.h)\nAC_CHECK_HEADERS(stdint.h inttypes.h pwd.h wchar.h dlfcn.h)\n\nAC_CHECK_DECLS(h_errno,,,[#include <netdb.h>])\n\ndnl\ndnl Check sizes of integer types.  These are used to find n-bit\ndnl integral types on older systems that fail to provide intN_t and\ndnl uintN_t typedefs.\ndnl\nAC_CHECK_SIZEOF([short])\nAC_CHECK_SIZEOF([int])\nAC_CHECK_SIZEOF([long])\nAC_CHECK_SIZEOF([long long])\nAC_CHECK_SIZEOF([void *])\n\ndnl\ndnl Checks for non-universal or system-specific types.\ndnl\nAC_TYPE_SIZE_T\nAC_TYPE_PID_T\nAC_CHECK_TYPES([uint32_t, uintptr_t, intptr_t, int64_t])\nAC_CHECK_TYPES(sig_atomic_t, [], [], [\n#include <stdio.h>\n#include <sys/types.h>\n#include <inttypes.h>\n#include <signal.h>\n])\n\n# gnulib, AM_ICONV should be placed before gl_INIT\nAM_ICONV\ngl_INIT\n\ndnl\ndnl Checks for library functions.\ndnl\nAC_FUNC_MMAP\nAC_FUNC_FSEEKO\nAC_CHECK_FUNCS(strptime timegm vsnprintf vasprintf drand48 pathconf)\nAC_CHECK_FUNCS(strtoll usleep ftello sigblock sigsetjmp memrchr wcwidth mbtowc)\nAC_CHECK_FUNCS(sleep symlink utime strlcpy random fmemopen)\n\nif test x\"$ENABLE_OPIE\" = xyes; then\n  AC_LIBOBJ([ftp-opie])\nfi\n\ndnl We expect to have these functions on Unix-like systems configure\ndnl runs on.  The defines are provided to get them in config.h.in so\ndnl Wget can still be ported to non-Unix systems (such as Windows)\ndnl that lack some of these functions.\nAC_DEFINE([HAVE_STRCASECMP], 1, [Define to 1 if you have the `strcasecmp' function.])\nAC_DEFINE([HAVE_STRNCASECMP], 1, [Define to 1 if you have the `strncasecmp' function.])\nAC_DEFINE([HAVE_STRDUP], 1, [Define to 1 if you have the `strdup' function.])\nAC_DEFINE([HAVE_ISATTY], 1, [Define to 1 if you have the `isatty' function.])\n\ndnl Deal with specific hosts\ncase $host_os in\n  *mingw32* )\n    LIBS+=' -lws2_32'\n    AC_LIBOBJ([mswindows])\n    ;;\nesac\n\n\ndnl\ndnl Checks for libraries.\ndnl\n\nPKG_PROG_PKG_CONFIG\n\nAS_IF([test \"x$with_libpsl\" != xno], [\n  PKG_CHECK_MODULES([LIBPSL], libpsl, [\n    with_libpsl=yes\n    # correct $LIBPSL_LIBS (in libpsl <= 0.6.0)\n    AS_IF([test \"x$LIBPSL_LIBS\" = \"x-llibpsl \"], [LIBPSL_LIBS=\"-lpsl\"])\n    LIBS=\"$LIBPSL_LIBS $LIBS\"\n    CFLAGS=\"$LIBPSL_CFLAGS $CFLAGS\"\n    AC_DEFINE([HAVE_LIBPSL], [1], [PSL support enabled])\n  ], [\n    AC_SEARCH_LIBS(psl_builtin, psl,\n      [with_libpsl=yes; AC_DEFINE([HAVE_LIBPSL], [1], [PSL support enabled])],\n      [with_libpsl=no;  AC_MSG_WARN(*** libpsl was not found. Fallback to builtin cookie checking.)])\n  ])\n])\n\nAS_IF([test x\"$with_libpsl\" = xyes], [\n  AC_CHECK_FUNCS(psl_latest)\n])\n\nAS_IF([test x\"$with_zlib\" != xno], [\n  with_zlib=yes\n  PKG_CHECK_MODULES([ZLIB], zlib, [\n    LIBS=\"$ZLIB_LIBS $LIBS\"\n    CFLAGS=\"$ZLIB_CFLAGS $CFLAGS\"\n    AC_DEFINE([HAVE_LIBZ], [1], [Define if using zlib.])\n  ], [\n    AC_CHECK_LIB(z, compress)\n  ])\n])\n\nAS_IF([test x\"$with_ssl\" = xopenssl], [\n  if [test x\"$with_libssl_prefix\" = x]; then\n    PKG_CHECK_MODULES([OPENSSL], [openssl], [\n      AC_MSG_NOTICE([compiling in support for SSL via OpenSSL])\n      AC_LIBOBJ([openssl])\n      LIBS=\"$OPENSSL_LIBS $LIBS\"\n      CFLAGS=\"$OPENSSL_CFLAGS -DHAVE_LIBSSL $CFLAGS\"\n      LIBSSL=\" \" # ntlm check below wants this\n      AC_CHECK_FUNCS([RAND_egd])\n      AC_DEFINE([HAVE_LIBSSL], [1], [Define if using openssl.])\n      ssl_found=yes\n    ])\n  fi\n  if [test x\"$ssl_found\" != xyes]; then\n    dnl As of this writing (OpenSSL 0.9.6), the libcrypto shared library\n    dnl doesn't record its dependency on libdl, so we need to make sure\n    dnl -ldl ends up in LIBS on systems that have it.  Most OSes use\n    dnl dlopen(), but HP-UX uses shl_load().\n    AC_CHECK_LIB(dl, dlopen, [], [\n      AC_CHECK_LIB(dl, shl_load)\n    ])\n\n    ssl_found=no\n    case $host_os in\n      *mingw32* )\n        dnl prefer link to openssl dlls if possible. if not then fallback on static libs. if not then error\n\n        AC_CHECK_LIB(eay32, EVP_MD_CTX_init)\n        if test x\"$ac_cv_lib_eay32_EVP_MD_CTX_init\" != xno\n        then\n          AC_CHECK_LIB(ssl32, SSL_connect, [\n            ssl_found=yes\n            AC_MSG_NOTICE([Enabling support for SSL via OpenSSL (shared)])\n            AC_LIBOBJ([openssl])\n            LIBS=\"${LIBS} -lssl32\"\n            AC_DEFINE([HAVE_LIBSSL32], [1], [Define to 1 if you have the `ssl32' library (-lssl32).])\n          ],\n          AC_MSG_ERROR([openssl not found: shared lib eay32 found but ssl32 not found]))\n\n        else\n          LIBS+=' -lgdi32'\n          dnl fallback and test static libs\n        fi\n        dnl add zdll lib as dep for above tests?\n      ;;\n    esac\n\n    AS_IF([test x$ssl_found != xyes], [\n      dnl Now actually check for -lssl if it wasn't already found\n      AC_LIB_HAVE_LINKFLAGS([ssl], [crypto], [\n#include <openssl/ssl.h>\n#include <openssl/x509.h>\n#include <openssl/err.h>\n#include <openssl/rand.h>\n#include <openssl/des.h>\n#include <openssl/md4.h>\n#include <openssl/md5.h>\n      ], [SSL_library_init ()])\n      if test x\"$LIBSSL\" != x\n      then\n        ssl_found=yes\n        AC_MSG_NOTICE([compiling in support for SSL via OpenSSL])\n        AC_LIBOBJ([openssl])\n        LIBS=\"$LIBSSL $LIBS\"\n        AC_CHECK_FUNCS([RAND_egd])\n      elif test x\"$with_ssl\" != x\n      then\n        AC_MSG_ERROR([--with-ssl=openssl was given, but SSL is not available.])\n      fi\n    ])\n  fi\n], [\n  # --with-ssl is not openssl: check if it's no\n  AS_IF([test x\"$with_ssl\" != xno], [\n    dnl default is -lgnutls\n    with_ssl=gnutls\n\n    dnl Now actually check for -lgnutls\n    if [test x\"$with_libgnutls_prefix\" = x]; then\n      PKG_CHECK_MODULES([GNUTLS], [gnutls], [\n        AC_MSG_NOTICE([compiling in support for SSL via GnuTLS])\n        AC_LIBOBJ([gnutls])\n        LIBS=\"$GNUTLS_LIBS $LIBS\"\n        CFLAGS=\"$GNUTLS_CFLAGS -DHAVE_LIBGNUTLS $CFLAGS\"\n        AC_DEFINE([HAVE_LIBGNUTLS], [1], [Define if using gnutls.])\n        ssl_found=yes\n      ])\n    fi\n    if [test x\"$ssl_found\" != xyes]; then\n      AC_LIB_HAVE_LINKFLAGS([gnutls], [], [\n#include <gnutls/gnutls.h>\n      ], [gnutls_global_init()])\n      if test x\"$LIBGNUTLS\" != x\n      then\n        ssl_found=yes\n        AC_MSG_NOTICE([compiling in support for SSL via GnuTLS])\n        AC_LIBOBJ([gnutls])\n        LIBS=\"$LIBGNUTLS $LIBS\"\n      else\n        AC_MSG_ERROR([GnuTLS has not been found. Use --with-ssl=openssl if you explicitly want OpenSSL.])\n      fi\n    fi\n\n    AC_CHECK_FUNCS(gnutls_priority_set_direct)\n  ]) # endif: --with-ssl != no?\n]) # endif: --with-ssl == openssl?\n\ndnl Enable NTLM if requested and if SSL is available.\nif test x\"$LIBSSL\" != x || test \"$ac_cv_lib_ssl32_SSL_connect\" = yes\nthen\n  if test x\"$ENABLE_NTLM\" != xno\n  then\n    ENABLE_NTLM=yes\n    AC_DEFINE([ENABLE_NTLM], 1,\n     [Define if you want the NTLM authorization support compiled in.])\n    AC_LIBOBJ([http-ntlm])\n  fi\nelse\n  AC_CHECK_LIB(nettle, nettle_md4_init, [HAVE_NETTLE=yes], [HAVE_NETTLE=no; AC_MSG_WARN(*** libnettle was not found. You will not be able to use NTLM)])\n\n  if test x\"$HAVE_NETTLE\" = xyes\n  then\n    AC_SUBST(NETTLE_LIBS, \"-lnettle\")\n    AC_DEFINE([HAVE_NETTLE], [1], [Use libnettle])\n    if test x\"$ENABLE_NTLM\" != xno\n    then\n      ENABLE_NTLM=yes\n      AC_DEFINE([ENABLE_NTLM], 1,\n       [Define if you want the NTLM authorization support compiled in.])\n      AC_LIBOBJ([http-ntlm])\n      LIBS=\"$NETTLE_LIBS $LIBS\"\n    fi\n  else\n    dnl If SSL is unavailable and the user explicitly requested NTLM,\n    dnl abort.\n    if test x\"$ENABLE_NTLM\" = xyes\n    then\n      AC_MSG_ERROR([NTLM authorization requested and SSL not enabled; aborting])\n    fi\n  fi\nfi\n\ndnl **********************************************************************\ndnl Checks for IPv6\ndnl **********************************************************************\n\ndnl\ndnl We test for IPv6 by checking, in turn, for availability of\ndnl presence of the INET6 address/protocol family and the existence of\ndnl struct sockaddr_in6.  If any of them is missing, IPv6 is disabled,\ndnl and the code reverts to old-style gethostbyname.\ndnl\ndnl If --enable-ipv6 is explicitly specified on the configure command\ndnl line, we check for IPv6 and abort if not found.  If --disable-ipv6\ndnl is specified, we disable IPv6 and don't check for it.  The default\ndnl is to autodetect IPv6 and use it where available.\ndnl\n\nAC_ARG_ENABLE(ipv6,\n  AC_HELP_STRING([--disable-ipv6],[disable IPv6 support]),\n  [case \"${enable_ipv6}\" in\n    no)\n      AC_MSG_NOTICE([disabling IPv6 at user request])\n      dnl Disable IPv6 checking\n      ipv6=no\n      ;;\n    yes)\n      dnl IPv6 explicitly enabled: force its use (abort if unavailable).\n      ipv6=yes\n      force_ipv6=yes\n      ;;\n    auto)\n      dnl Auto-detect IPv6, i.e. check for IPv6, but don't force it.\n      ipv6=yes\n      ;;\n    *)\n      AC_MSG_ERROR([Invalid --enable-ipv6 argument \\`$enable_ipv6'])\n      ;;\n    esac\n  ], [\n    dnl If nothing is specified, assume auto-detection.\n    ipv6=yes\n  ]\n)\n\nif test \"X$ipv6\" = \"Xyes\"; then\n  PROTO_INET6([], [\n    AC_MSG_NOTICE([Disabling IPv6 support: your system does not support the PF_INET6 protocol family])\n    ipv6=no\n  ])\nfi\n\nif test \"X$ipv6\" = \"Xyes\"; then\n  TYPE_STRUCT_SOCKADDR_IN6([],[\n    AC_MSG_NOTICE([Disabling IPv6 support: your system does not support \\`struct sockaddr_in6'])\n    ipv6=no\n  ])\n  if test \"X$ipv6\" = \"Xyes\"; then\n    WGET_STRUCT_SOCKADDR_STORAGE\n    MEMBER_SIN6_SCOPE_ID\n  fi\nfi\n\nif test \"X$ipv6\" = \"Xyes\"; then\n  AC_DEFINE([ENABLE_IPV6], 1, [Define if IPv6 support is enabled.])\n  AC_MSG_NOTICE([Enabling support for IPv6.])\nelif test \"x$force_ipv6\" = \"xyes\"; then\n  AC_MSG_ERROR([IPv6 support requested but not found; aborting])\nfi\n\ndnl\ndnl Find makeinfo.  We used to provide support for Emacs processing\ndnl Texinfo using `emacs -batch -eval ...' where makeinfo is\ndnl unavailable, but that broke with the addition of makeinfo-specific\ndnl command-line options, such as `-I'.  Now we depend on makeinfo to\ndnl build the Info documentation.\ndnl\n\nAC_CHECK_PROGS(MAKEINFO, [makeinfo], [true])\n\ndnl\ndnl Find perl and pod2man\ndnl\n\nAC_PATH_PROGS(PERL, [perl5 perl], no)\nAC_PATH_PROG(POD2MAN, pod2man, no)\n\nif test \"x${POD2MAN}\" = xno; then\n  COMMENT_IF_NO_POD2MAN=\"# \"\nelse\n  COMMENT_IF_NO_POD2MAN=\nfi\nAC_SUBST(COMMENT_IF_NO_POD2MAN)\n\n\ndnl\ndnl Check for IDN/IRIs\ndnl\n\nAC_ARG_ENABLE(iri,\n  AC_HELP_STRING([--disable-iri],[disable IDN/IRIs support]),\n  [case \"${enable_iri}\" in\n    no)\n      dnl Disable IRIs checking\n      AC_MSG_NOTICE([disabling IRIs at user request])\n      iri=no\n      ;;\n    yes)\n      dnl IRIs explicitly enabled\n      iri=yes\n      force_iri=yes\n      ;;\n    auto)\n      dnl Auto-detect IRI\n      iri=yes\n      ;;\n    *)\n      AC_MSG_ERROR([Invalid --enable-iri argument \\`$enable_iri'])\n      ;;\n    esac\n  ], [\n    dnl If nothing is specified, assume auto-detection\n    iri=yes\n  ]\n)\n\nAS_IF([test \"X$iri\" != \"Xno\"],[\n  if test \"X$am_cv_func_iconv\" != \"Xyes\"; then\n    iri=no\n    if test \"X$force_iri\" = \"Xyes\"; then\n      AC_MSG_ERROR([Libiconv is required for IRIs support])\n    else\n      AC_MSG_NOTICE([disabling IRIs because libiconv wasn't found])\n    fi\n  fi\n])\n\nAC_ARG_WITH(libidn, AC_HELP_STRING([--with-libidn=[DIR]],\n                                   [Support IDN2008/IRIs (needs GNU libidn2 + libunicode)]),\n                                   libidn=$withval, libidn=\"\")\nif test \"X$iri\" != \"Xno\"; then\n  AS_IF([test \"x$with_libidn2\" != xno], [\n    AC_SEARCH_LIBS(idn2_lookup_u8, idn2,\n      [with_libidn2=yes; AC_DEFINE([ENABLE_IRI], 1, [Define if IRI support is enabled.])],\n      [with_libidn2=no; iri=no; AC_MSG_WARN(*** LIBIDN2 was not found. You will not be able to use IDN2008 support)])\n\n#    AS_IF([test \"x$with_libidn2\" = xyes], [\n#      AC_SEARCH_LIBS(u8_tolower, unistring,\n#        [AC_DEFINE([ENABLE_IRI], 1, [Define if IRI support is enabled.])],\n#        [iri=no; AC_MSG_WARN(*** LIBUNISTRING was not found. You will not be able to use IDN2008 support)])\n#    ])\n  ])\nfi\n\ndnl\ndnl Check for UUID\ndnl\n\nAC_ARG_WITH(libuuid, AC_HELP_STRING([--without-libuuid],\n                                    [Generate UUIDs for WARC files via libuuid]))\n\nAS_IF([test \"x$with_libuuid\" = xyes], [\n  # libuuid was explicitly requested\n  PKG_CHECK_MODULES([UUID], uuid, [\n    LIBS=\"$UUID_LIBS $LIBS\"\n    CFLAGS=\"$UUID_CFLAGS $CFLAGS\"\n    uuid_mode=1\n  ], [\n    AC_SEARCH_LIBS(uuid_generate, uuid,\n      [uuid_mode=1],\n      [AC_MSG_ERROR(*** libuuid was explicitly requested but wasn't found.)])\n  ])\n], [test \"x$with_libuuid\" = xno], [\n  # libuuid was explicitly *not* requested\n  AC_CHECK_HEADER(uuid.h,\n    AC_CHECK_FUNC(uuid_create, [uuid_mode=2]))\n], [\n  # default:\n  AC_CHECK_HEADER(uuid.h, [\n    AC_CHECK_FUNC(uuid_create, [uuid_mode=2])\n  ], [\n    AC_CHECK_HEADER(uuid/uuid.h,\n      AC_SEARCH_LIBS(uuid_generate, uuid, [uuid_mode=1]))\n  ])\n])\n\nAS_IF([test \"x$uuid_mode\" = x1], [\n  AC_DEFINE([HAVE_LIBUUID], [1], [Define if using libuuid.])\n], [test \"x$uuid_mode\" = x2], [\n  AC_DEFINE([HAVE_UUID_CREATE], 1, [Define if uuid_create is available.])\n])\n\ndnl\ndnl Check for PCRE2 / PCRE\ndnl\n\nAC_ARG_ENABLE(pcre2, AC_HELP_STRING([--disable-pcre2],\n                                   [Disable PCRE2 style regular expressions]))\nAC_ARG_ENABLE(pcre, AC_HELP_STRING([--disable-pcre],\n                                   [Disable PCRE style regular expressions]))\n\nAS_IF([test \"X$enable_pcre2\" != \"Xno\"],[\n  enable_pcre2=no\n  PKG_CHECK_MODULES([PCRE2], libpcre2-8, [\n    CFLAGS=\"$PCRE2_CFLAGS $CFLAGS\"\n    LIBS=\"$PCRE2_LIBS $LIBS\"\n    AC_DEFINE([HAVE_LIBPCRE2], [1], [Define if libpcre2 is available.])\n    enable_pcre2=yes\n  ], [\n    AC_CHECK_HEADER(pcre2.h, [\n      AC_CHECK_LIB(pcre2-8, pcre2_compile_8, [\n        LIBS=\"${LIBS} -lpcre2-8\"\n        AC_DEFINE([HAVE_LIBPCRE2], 1, [Define if libpcre2 is available.])\n        enable_pcre2=yes\n      ])\n    ])\n  ])\n])\n\nAS_IF([test \"X$enable_pcre\" != \"Xno\" && test \"X$enable_pcre2\" != \"Xyes\"],[\n  PKG_CHECK_MODULES([PCRE], libpcre, [\n    CFLAGS=\"$PCRE_CFLAGS $CFLAGS\"\n    AC_CHECK_HEADER(pcre.h, [\n      LIBS=\"$PCRE_LIBS $LIBS\"\n      AC_DEFINE([HAVE_LIBPCRE], [1], [Define if libpcre is available.])\n      enable_pcre=yes\n    ])\n  ], [\n    AC_CHECK_HEADER(pcre.h, [\n      AC_CHECK_LIB(pcre, pcre_compile, [\n        LIBS=\"${LIBS} -lpcre\"\n        AC_DEFINE([HAVE_LIBPCRE], 1, [Define if libpcre is available.])\n      ])\n    ])\n  ])\n])\n\nAS_IF([test \"X$enable_pcre2\" = Xyes], [PCRE_INFO=\"yes, via libpcre2\"], [test \"X$enable_pcre\" = Xyes], [PCRE_INFO=\"yes, via libpcre\"], [PCRE_INFO=no])\n\ndnl\ndnl Check for libcares (resolver library)\ndnl\n\nAS_IF([test \"X$with_cares\" = \"Xyes\"],[\n  PKG_CHECK_MODULES([CARES], libcares, [\n    CFLAGS=\"$CARES_CFLAGS $CFLAGS\"\n    AC_CHECK_HEADER(ares.h, [\n      LIBS=\"$CARES_LIBS $LIBS\"\n      AC_DEFINE([HAVE_LIBCARES], [1], [Define if libcares is available.])\n      RESOLVER_INFO=\"libcares, --bind-dns-address and --dns-servers available\"\n    ])\n  ], [\n    AC_CHECK_HEADER(ares.h, [\n      AC_CHECK_LIB(cares, ares_set_local_ip4, [\n        LIBS=\"-lcares ${LIBS}\"\n        AC_DEFINE([HAVE_LIBCARES], 1, [Define if libcares is available.])\n        RESOLVER_INFO=\"libcares, --bind-dns-address and --dns-servers available\"\n      ])\n    ])\n  ])\n], [\n  RESOLVER_INFO=\"libc, --bind-dns-address and --dns-servers not available\"\n])\n\ndnl\ndnl Check for libmetalink\ndnl\nAS_IF([test x\"$with_metalink\" != xno], [\n  PKG_CHECK_MODULES([METALINK], libmetalink, [\n      LIBS=\"$METALINK_LIBS $LIBS\"\n      CFLAGS=\"$METALINK_CFLAGS $CFLAGS\"\n      AC_DEFINE([HAVE_METALINK], [1], [Define if using metalink.])\n      with_metalink=yes\n    ], [\n      with_metalink=no\n    ])\n\n  have_gpg=no\n  AS_IF([test x\"$with_metalink\" = xyes], [\n    dnl\n    dnl Check for GPGME\n    dnl\n    m4_ifdef([AM_PATH_GPGME], [\n      AM_PATH_GPGME([], [\n        # Put libgpgme to the end of the library list since it introduces a -L linker flags.\n        # That -L might break the build if there are two different version of\n        # a library (e.g. GnuTLS) in /usr/local and in the system directory.\n        LIBS=\"$LIBS $GPGME_LIBS\"\n        CFLAGS=\"$GPGME_CFLAGS $CFLAGS\"\n        AC_DEFINE([HAVE_GPGME], [1], [Define if GPGME is available.])\n        have_gpg=yes\n      ])\n    ])\n  ])\n])\n\ndnl\ndnl Extended Attribute support\ndnl\n\nAC_ARG_ENABLE([xattr],\n  [AS_HELP_STRING([--disable-xattr], [disable support for POSIX Extended Attributes])],\n  [ENABLE_XATTR=$enableval],\n  [ENABLE_XATTR=yes])\n\ncase \"$host_os\" in\n  *linux* | *darwin*) xattr_syscalls=\"fsetxattr\" ;;\n  freebsd*)           xattr_syscalls=\"extattr_set_fd\" ;;\n  *)  AC_MSG_NOTICE([Disabling Extended Attribute support: your system is not known to support extended attributes.])\n      ENABLE_XATTR=no\nesac\n\nif test \"X${ENABLE_XATTR}\" = \"Xyes\"; then\n  AC_CHECK_FUNCS([$xattr_syscalls], [], [\n    AC_MSG_NOTICE([Disabling Extended Attribute support: your system does not support $xattr_syscalls])\n    ENABLE_XATTR=no\n  ])\nfi\n\ntest \"X${ENABLE_XATTR}\" = \"Xyes\" && AC_DEFINE([ENABLE_XATTR], 1,\n    [Define if you want file meta-data storing into POSIX Extended Attributes compiled in.])\n\ndnl Needed by src/Makefile.am\nAM_CONDITIONAL([IRI_IS_ENABLED], [test \"X$iri\" != \"Xno\"])\nAM_CONDITIONAL([WITH_SSL], [test \"X$with_ssl\" != \"Xno\"])\nAM_CONDITIONAL([METALINK_IS_ENABLED], [test \"X$with_metalink\" != \"Xno\"])\nAM_CONDITIONAL([WITH_XATTR], [test \"X$ENABLE_XATTR\" != \"Xno\"])\n\ndnl\ndnl Create output\ndnl\nAC_CONFIG_FILES([Makefile src/Makefile doc/Makefile util/Makefile\n                 po/Makefile.in tests/Makefile fuzz/Makefile\n                 lib/Makefile testenv/Makefile\n                 tests/certs/interca.conf tests/certs/rootca.conf])\nAC_CONFIG_HEADERS([src/config.h])\nAC_OUTPUT\n\nAC_MSG_NOTICE([Summary of build options:\n\n  Version:           $PACKAGE_VERSION\n  Host OS:           $host_os\n  Install prefix:    $prefix\n  Compiler:          $CC\n  CFlags:            $CFLAGS $CPPFLAGS\n  LDFlags:           $LDFLAGS\n  Libs:              $LIBS\n  SSL:               $with_ssl\n  Zlib:              $with_zlib\n  PSL:               $with_libpsl\n  PCRE:              $PCRE_INFO\n  Digest:            $ENABLE_DIGEST\n  NTLM:              $ENABLE_NTLM\n  OPIE:              $ENABLE_OPIE\n  POSIX xattr:       $ENABLE_XATTR\n  Debugging:         $ENABLE_DEBUG\n  Assertions:        $ENABLE_ASSERTION\n  Valgrind:          $VALGRIND_INFO\n  Metalink:          $with_metalink\n  Resolver:          $RESOLVER_INFO\n  GPGME:             $have_gpg\n  IRI:               $iri\n  Fuzzing build:     $enable_fuzzing, $LIB_FUZZING_ENGINE\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/fuzz/wget_ftpls_fuzzer.c": "/*\n * Copyright (c) 2017-2019 Free Software Foundation, Inc.\n *\n * This file is part of GNU Wget.\n *\n * GNU Wget is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * GNU Wget is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Wget.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <dirent.h> // opendir, readdir\n#include <stdint.h> // uint8_t\n#include <stdio.h>  // fmemopen\n#include <string.h>  // strncmp\n#include <stdlib.h>  // free\n#include <fcntl.h>  // open flags\n#include <unistd.h>  // close\n#include <setjmp.h> // longjmp, setjmp\n\n#include \"wget.h\"\n#undef fopen_wgetrc\n\n#ifdef __cplusplus\n  extern \"C\" {\n#endif\n  #include \"ftp.h\"\n\n  // declarations for wget internal functions\n  int main_wget(int argc, const char **argv);\n  void cleanup(void);\n  FILE *fopen_wget(const char *pathname, const char *mode);\n  FILE *fopen_wgetrc(const char *pathname, const char *mode);\n  void exit_wget(int status);\n#ifdef __cplusplus\n  }\n#endif\n\n#include \"fuzzer.h\"\n\nFILE *fopen_wget(const char *pathname, const char *mode)\n{\n\treturn fopen(\"/dev/null\", mode);\n}\n\nFILE *fopen_wgetrc(const char *pathname, const char *mode)\n{\n\treturn NULL;\n}\n\nstatic int do_jump;\nstatic jmp_buf jmpbuf;\n#ifdef FUZZING\nvoid exit_wget(int status)\n{\n\tlongjmp(jmpbuf, 1);\n}\n#elif defined HAVE_DLFCN_H\n#include <dlfcn.h> // dlsym\n#ifndef RTLD_NEXT\n#define RTLD_NEXT RTLD_GLOBAL\n#endif\nvoid exit(int status)\n{\n\tif (do_jump) {\n\t\tlongjmp(jmpbuf, 1);\n\t} else {\n\t\tvoid (*libc_exit)(int) = (void(*)(int)) dlsym (RTLD_NEXT, \"exit\");\n\t\tlibc_exit(status);\n\t}\n}\n#endif\n\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n{\n#ifdef HAVE_FMEMOPEN\n\tFILE *fp;\n\tstruct fileinfo *fi;\n\n\tif (size > 4096) // same as max_len = ... in .options file\n\t\treturn 0;\n\n\tfp = fmemopen((void *) data, size, \"r\");\n\tif (!fp) return 0;\n\n\tCLOSE_STDERR\n\n\tdo_jump = 1;\n\n\tif (setjmp(jmpbuf))\n\t\tgoto done;\n\n\tfi = ftp_parse_ls_fp(fp, ST_UNIX);\n\tfreefileinfo(fi);\n\trewind(fp);\n\n\tfi = ftp_parse_ls_fp(fp, ST_VMS);\n\tfreefileinfo(fi);\n\trewind(fp);\n\n\tfi = ftp_parse_ls_fp(fp, ST_WINNT);\n\tfreefileinfo(fi);\n\trewind(fp);\n\n\tfi = ftp_parse_ls_fp(fp, ST_MACOS);\n\ndone:\n\tfreefileinfo(fi);\n\tfclose(fp);\n\n\tdo_jump = 0;\n\n\tRESTORE_STDERR\n#endif\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/fuzz/wget_css_fuzzer.c": "/*\n * Copyright (c) 2017-2019 Free Software Foundation, Inc.\n *\n * This file is part of GNU Wget.\n *\n * GNU Wget is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * GNU Wget is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Wget.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <dirent.h> // opendir, readdir\n#include <stdint.h> // uint8_t\n#include <stdio.h>  // fmemopen\n#include <string.h>  // strncmp\n#include <stdlib.h>  // free\n#include <fcntl.h>  // open flags\n#include <unistd.h>  // close\n#include <setjmp.h> // longjmp, setjmp\n\n#include \"wget.h\"\n#undef fopen_wgetrc\n\n#ifdef __cplusplus\n  extern \"C\" {\n#endif\n  #include \"html-url.h\"\n  #include \"css-url.h\"\n\n  // declarations for wget internal functions\n  int main_wget(int argc, const char **argv);\n  void cleanup(void);\n  FILE *fopen_wget(const char *pathname, const char *mode);\n  FILE *fopen_wgetrc(const char *pathname, const char *mode);\n  void exit_wget(int status);\n#ifdef __cplusplus\n  }\n#endif\n\n#include \"fuzzer.h\"\n\nstatic const uint8_t *g_data;\nstatic size_t g_size;\n\nFILE *fopen_wget(const char *pathname, const char *mode)\n{\n\treturn fopen(\"/dev/null\", mode);\n}\n\nFILE *fopen_wgetrc(const char *pathname, const char *mode)\n{\n#ifdef HAVE_FMEMOPEN\n\treturn fmemopen((void *) g_data, g_size, mode);\n#else\n\treturn NULL;\n#endif\n}\n\nstatic int do_jump;\nstatic jmp_buf jmpbuf;\n#ifdef FUZZING\nvoid exit_wget(int status)\n{\n\tlongjmp(jmpbuf, 1);\n}\n#elif defined HAVE_DLFCN_H\n#include <dlfcn.h> // dlsym\n#ifndef RTLD_NEXT\n#define RTLD_NEXT RTLD_GLOBAL\n#endif\nvoid exit(int status)\n{\n\tif (do_jump) {\n\t\tlongjmp(jmpbuf, 1);\n\t} else {\n\t\tvoid (*libc_exit)(int) = (void(*)(int)) dlsym (RTLD_NEXT, \"exit\");\n\t\tlibc_exit(status);\n\t}\n}\n#endif\n\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n{\n\tif (size > 4096) // same as max_len = ... in .options file\n\t\treturn 0;\n\n\tstruct map_context ctx = {\n\t\t.text = (char *) data,\n\t\t.parent_base = strdup(\"https://x.y\"),\n\t\t.document_file = NULL,\n\t};\n\n\tCLOSE_STDERR\n\n\tdo_jump = 1;\n\n\tif (setjmp(jmpbuf))\n\t\tgoto done;\n\n\tget_urls_css(&ctx, 0, size);\n\tfree_urlpos(ctx.head);\n\tfree((void *) ctx.parent_base);\n\ndone:\n\tdo_jump = 0;\n\n\tRESTORE_STDERR\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/fuzz/wget_netrc_fuzzer.c": "/*\n * Copyright (c) 2017-2019 Free Software Foundation, Inc.\n *\n * This file is part of GNU Wget.\n *\n * GNU Wget is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * GNU Wget is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Wget.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <stdint.h> // uint8_t\n#include <stdio.h>  // fmemopen\n#include <string.h>  // strncmp\n#include <stdlib.h>  // free\n#include <setjmp.h> // longjmp, setjmp\n#include <fcntl.h>  // open flags\n#include <unistd.h>  // close\n\n#include \"wget.h\"\n#undef fopen_wgetrc\n\n#ifdef __cplusplus\n  extern \"C\" {\n#endif\n  #include \"netrc.h\"\n\n  // declarations for wget internal functions\n  int main_wget(int argc, const char **argv);\n  void cleanup(void);\n  FILE *fopen_wget(const char *pathname, const char *mode);\n  FILE *fopen_wgetrc(const char *pathname, const char *mode);\n  void exit_wget(int status);\n#ifdef __cplusplus\n  }\n#endif\n\n#include \"fuzzer.h\"\n\nFILE *fopen_wget(const char *pathname, const char *mode)\n{\n\treturn fopen(\"/dev/null\", mode);\n}\n\nFILE *fopen_wgetrc(const char *pathname, const char *mode)\n{\n\treturn NULL;\n}\n\nstatic int do_jump;\nstatic jmp_buf jmpbuf;\n#ifdef FUZZING\nvoid exit_wget(int status)\n{\n\tlongjmp(jmpbuf, 1);\n}\n#elif defined HAVE_DLFCN_H\n#include <dlfcn.h> // dlsym\n#ifndef RTLD_NEXT\n#define RTLD_NEXT RTLD_GLOBAL\n#endif\nvoid exit(int status)\n{\n\tif (do_jump) {\n\t\tlongjmp(jmpbuf, 1);\n\t} else {\n\t\tvoid (*libc_exit)(int) = (void(*)(int)) dlsym (RTLD_NEXT, \"exit\");\n\t\tlibc_exit(status);\n\t}\n}\n#endif\n\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n{\n#ifdef HAVE_FMEMOPEN\n\tFILE *fp;\n\tstruct fileinfo *fi;\n\tconst char *user = NULL, *pw = NULL;\n\n\tif (size > 4096) // same as max_len = ... in .options file\n\t\treturn 0;\n\n\tfp = fmemopen((void *) data, size, \"r\");\n\tif (!fp) return 0;\n\n\tCLOSE_STDERR\n\n\tdo_jump = 1;\n\n\tif (setjmp(jmpbuf))\n\t\tgoto done;\n\n\topt.netrc = 1;\n\n\tuser = NULL; // get first entry\n\tsearch_netrc(\"x\", &user, &pw, 1, fp);\n\tnetrc_cleanup();\n\n\tuser = \"u\"; // get entry for user 'u'\n\tsearch_netrc(\"x\", &user, &pw, 1, fp);\n\ndone:\n\tnetrc_cleanup();\n\n\tfclose(fp);\n\n\tdo_jump = 0;\n\n\tRESTORE_STDERR\n\n#endif\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/fuzz/wget_options_fuzzer.c": "/*\n * Copyright (c) 2017-2019 Free Software Foundation, Inc.\n *\n * This file is part of GNU Wget.\n *\n * GNU Wget is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * GNU Wget is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Wget.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <dirent.h> // opendir, readdir\n#include <stdint.h> // uint8_t\n#include <stdio.h>  // fmemopen\n#include <string.h>  // strncmp\n#include <fcntl.h>  // open flags\n#include <unistd.h>  // close\n#include <setjmp.h> // longjmp, setjmp\n\n#ifdef  __cplusplus\n  extern \"C\" {\n#endif\n  // declarations for wget internal functions\n  int main_wget(int argc, const char **argv);\n  void cleanup(void);\n  FILE *fopen_wget(const char *pathname, const char *mode);\n  FILE *fopen_wgetrc(const char *pathname, const char *mode);\n  void exit_wget(int status);\n#ifdef __cplusplus\n  }\n#endif\n\n#include \"fuzzer.h\"\n\nstatic const uint8_t *g_data;\nstatic size_t g_size;\n\nFILE *fopen_wget(const char *pathname, const char *mode)\n{\n\treturn fopen(\"/dev/null\", mode);\n}\n\nFILE *fopen_wgetrc(const char *pathname, const char *mode)\n{\n#ifdef HAVE_FMEMOPEN\n\treturn fmemopen((void *) g_data, g_size, mode);\n#else\n\treturn NULL;\n#endif\n}\n\nstatic int do_jump;\nstatic jmp_buf jmpbuf;\n#ifdef FUZZING\nvoid exit_wget(int status)\n{\n\tlongjmp(jmpbuf, 1);\n}\n#elif defined HAVE_DLFCN_H\n#include <dlfcn.h> // dlsym\n#ifndef RTLD_NEXT\n#define RTLD_NEXT RTLD_GLOBAL\n#endif\nvoid exit(int status)\n{\n\tif (do_jump) {\n\t\tlongjmp(jmpbuf, 1);\n\t} else {\n\t\tvoid (*libc_exit)(int) = (void(*)(int)) dlsym (RTLD_NEXT, \"exit\");\n\t\tlibc_exit(status);\n\t}\n}\n#endif\n\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n{\n\tstatic const char *argv[] = { \"wget\", \"-q\" };\n\n\tif (size > 2048) // same as max_len = ... in .options file\n\t\treturn 0;\n\n\tg_data = data;\n\tg_size = size;\n\n\tCLOSE_STDERR\n\n\tdo_jump = 1;\n\n\tif (setjmp(jmpbuf))\n\t\tgoto done;\n\n\tmain_wget(sizeof(argv)/sizeof(argv[0]), argv);\n\ndone:\n\tcleanup();\n\n\tdo_jump = 0;\n\n\tRESTORE_STDERR\n\n\treturn 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/lt.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/sr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/bg.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ga.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/et.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/hr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/he.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/uk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/sl.po",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/pt_BR.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/sl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/en_GB.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ja.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/pt.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/eu.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/he.po",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/de.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/be.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/nl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/eo.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/hu.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/sk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/nb.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/cs.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/pl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/gl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/el.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/zh_TW.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/it.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ca.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/ru.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-wget-1.20.3-bum6zeaezbuqjhudzphcsyb4avkiizhj/spack-src/testenv/certs/server-pubkey.der"
    ],
    "total_files": 1055
}