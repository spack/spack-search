{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/plugin.c": "/*  plugin.c -- low-level path parsing and plugin functions.\n\n    Copyright (C) 2015 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#include <config.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#include <dirent.h>\n#include <dlfcn.h>\n\n#include \"hts_internal.h\"\n#include \"htslib/kstring.h\"\n\n#ifndef PLUGINPATH\n#define PLUGINPATH \"\"\n#endif\n\nstatic DIR *open_nextdir(struct hts_path_itr *itr)\n{\n    DIR *dir;\n\n    while (1) {\n        const char *colon = strchr(itr->pathdir, ':');\n        if (colon == NULL) return NULL;\n\n        itr->entry.l = 0;\n        kputsn(itr->pathdir, colon - itr->pathdir, &itr->entry);\n        itr->pathdir = &colon[1];\n        if (itr->entry.l == 0) continue;\n\n        dir = opendir(itr->entry.s);\n        if (dir) break;\n\n        if (hts_verbose >= 4)\n            fprintf(stderr,\n                    \"[W::hts_path_itr] can't scan directory \\\"%s\\\": %s\\n\",\n                    itr->entry.s, strerror(errno));\n    }\n\n    if (itr->entry.s[itr->entry.l-1] != '/') kputc('/', &itr->entry);\n    itr->entry_dir_l = itr->entry.l;\n    return dir;\n}\n\nvoid hts_path_itr_setup(struct hts_path_itr *itr, const char *path,\n        const char *builtin_path, const char *prefix, size_t prefix_len,\n        const char *suffix, size_t suffix_len)\n{\n    itr->prefix = prefix;\n    itr->prefix_len = prefix_len;\n\n    if (suffix) itr->suffix = suffix, itr->suffix_len = suffix_len;\n    else itr->suffix = PLUGIN_EXT, itr->suffix_len = strlen(PLUGIN_EXT);\n\n    itr->path.l = itr->path.m = 0; itr->path.s = NULL;\n    itr->entry.l = itr->entry.m = 0; itr->entry.s = NULL;\n\n    if (! builtin_path) builtin_path = PLUGINPATH;\n    if (! path) {\n        path = getenv(\"HTS_PATH\");\n        if (! path) path = \"\";\n    }\n\n    while (1) {\n        size_t len = strcspn(path, \":\");\n        if (len == 0) kputs(builtin_path, &itr->path);\n        else kputsn(path, len, &itr->path);\n        kputc(':', &itr->path);\n\n        path += len;\n        if (*path == ':') path++;\n        else break;\n    }\n\n    // Note that ':' now terminates entries rather than separates them\n    itr->pathdir = itr->path.s;\n    itr->dirv = open_nextdir(itr);\n}\n\nconst char *hts_path_itr_next(struct hts_path_itr *itr)\n{\n    while (itr->dirv) {\n        struct dirent *e;\n        while ((e = readdir((DIR *) itr->dirv)) != NULL) {\n            size_t d_name_len = strlen(e->d_name);\n            if (strncmp(e->d_name, itr->prefix, itr->prefix_len) == 0 &&\n                d_name_len >= itr->suffix_len &&\n                strncmp(e->d_name + d_name_len - itr->suffix_len, itr->suffix,\n                        itr->suffix_len) == 0) {\n                itr->entry.l = itr->entry_dir_l;\n                kputs(e->d_name, &itr->entry);\n                return itr->entry.s;\n            }\n        }\n\n        closedir((DIR *) itr->dirv);\n        itr->dirv = open_nextdir(itr);\n    }\n\n    itr->pathdir = NULL;\n    free(itr->path.s); itr->path.s = NULL;\n    free(itr->entry.s); itr->entry.s = NULL;\n    return NULL;\n}\n\n\n#ifndef RTLD_NOLOAD\n#define RTLD_NOLOAD 0\n#endif\n\nvoid *load_plugin(void **pluginp, const char *filename, const char *symbol)\n{\n    void *lib = dlopen(filename, RTLD_NOW | RTLD_LOCAL);\n    if (lib == NULL) goto error;\n\n    void *sym = dlsym(lib, symbol);\n    if (sym == NULL) {\n        // Reopen the plugin with RTLD_GLOBAL and check for uniquified symbol\n        void *libg = dlopen(filename, RTLD_NOLOAD | RTLD_NOW | RTLD_GLOBAL);\n        if (libg == NULL) goto error;\n        dlclose(lib);\n        lib = libg;\n\n        kstring_t symbolg = { 0, 0, NULL };\n        kputs(symbol, &symbolg);\n        kputc('_', &symbolg);\n        const char *slash = strrchr(filename, '/');\n        const char *basename = slash? slash+1 : filename;\n        kputsn(basename, strcspn(basename, \".-+\"), &symbolg);\n\n        sym = dlsym(lib, symbolg.s);\n        free(symbolg.s);\n        if (sym == NULL) goto error;\n    }\n\n    *pluginp = lib;\n    return sym;\n\nerror:\n    if (hts_verbose >= 4)\n        fprintf(stderr, \"[W::%s] can't load plugin \\\"%s\\\": %s\\n\",\n                __func__, filename, dlerror());\n    if (lib) dlclose(lib);\n    return NULL;\n}\n\nvoid *plugin_sym(void *plugin, const char *name, const char **errmsg)\n{\n    void *sym = dlsym(plugin, name);\n    if (sym == NULL) *errmsg = dlerror();\n    return sym;\n}\n\nvoid close_plugin(void *plugin)\n{\n    if (dlclose(plugin) != 0) {\n        if (hts_verbose >= 4)\n            fprintf(stderr, \"[W::%s] dlclose() failed: %s\\n\",\n                    __func__, dlerror());\n    }\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/test/xx#large_aux_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/test/auxf#values_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/test/bgziptest.txt.gz.gzi",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/test/ce#5b_java.cram",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/src/htslib-1.7/test/bgziptest.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/.git/objects/pack/pack-74c9fee79f6064d4e43bb4f014c80f1c952c27e9.pack",
        "/tmp/vanessa/spack-stage/spack-stage-r-rhtslib-1.18.1-vgk5qt3wqpgbsubbb3hvyejmkdtbksmx/spack-src/.git/objects/pack/pack-74c9fee79f6064d4e43bb4f014c80f1c952c27e9.idx"
    ],
    "total_files": 248
}