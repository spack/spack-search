{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/NEWS.pre-1-3": "Overview of Changes in GLib 1.2.1:\n\n* g_realloc() fix for SunOS (please report further problems).\n* Continued the never ending fix vendetta regarding getpwuid(),\n  this time AIX has been the culprit.\n* Upgrade to libtool 1.2f\n* Miscellaneous other buglets fixed.\n\nWhat's new in GLib 1.2.0 (since GLib 1.0.x):\n\n* GLib is distributed seperatedly from Gtk+\n* Win32 Portability\n* Threading support\n* GModule mechanism (implemented in an extra library) which wraps dynamic\n  object code loading facilities in a portable manner\n* GIOChannel structure to encapsulate the IPC mechanism\n* GQuarks and datasets\n* GRelations for n-way mapping of certain data\n* An n-way tree implementation\n* GDate functionality for calendar date manipulations\n* GAllocator type and associated functions\n* Added generic callback maintenance functions (ghook)\n* Generic functions for TAB completions\n* Endian defines (G_*_ENDIAN)\n* g_log() mechanism for logging of messages at different log levels\n* Generic main-loop mechanism\n* New glib-config helper script\n* Many more API extensions\n\nOverview of Changes in GLib 1.1.16:\n\n* Allocate smaller pools of memory for glists, gslists, gnodes\n* Bug Fixes\n\nOverview of Changes in GLib 1.1.15:\n\n* HPUX 11 thread system detection should now work\n* Release the main loop lock around calls to prepare() and\n  check() so it is not held over user code\n* A few Win32 fixups\n\nOverview of Changes in GLib 1.1.14:\n\n* Check for dlsym() in system libraries and -dl\n* FreeBSD portability fixes\n* Random bug fixes and autoconf/automake changes\n\nOverview of Changes in GLib 1.1.13:\n\n* Removed alloca() based function and macro variants again.\n* Improved thread related configure tests.\n* GSource destruction fixups.\n* Fixed up idle function removal based on user_data pointer.\n* Advanced Win32 portability.\n* Enforced GSource's check(), prepare() and dispatch() constrains,\n  loop recursions may only happen from dispatch(), and check() as well\n  as prepare() are called while the main_loop lock is being held.\n* GLib development now requires GNU autoconf 2.13, GNU automake 1.4\n  and GNU libtool 1.2d.\n* Lots of random portability and bug fixes.\n\nOverview of Changes in GLib 1.1.12:\n\n* Added alloca functions/macros: g_strdup_a, g_strconcat3_a, g_alloca,\n  g_new_a, g_new0_a\n* New tests structure.  Type 'make check' on your system to run them.\n* Avoid unnecessary extra hook referencing in g_hook_list_marshal\n\nOverview of Changes in GLib 1.1.11:\n\n* provide defaults for POLL sysdefs\n* g_main_is_running: new function to check whether a main loop has been quitted\n* a few other enhancement/fixes\n\nOverview of Changes in GLib 1.1.9:\n\n* Check for pthread_attr_init in all cases, Digital Unix 4 requires this\n* For G_LOCK_DECLARE_*, if !G_THREADS_ENABLED, eat trailing semicolon better\n* Changed g_main_poll_(add|remove) to g_main_(add|remove)_poll\n\nOverview of Changes in GLib 1.1.8:\n\n* Added threading support\n  - The ability to specify a set of functions to be used for\n    locking at runtime.\n  - Default implementations of locking functions for pthreads,\n    Solaris threads, and (experimentally) NSPR.\n  - All static variables should now properly locked.\n  - Enhancements to the generic main-loop mechanism to be thread-safe.\n    (It is used for the main-loop in GTK+ as of GTK+-1.1.8)\n* Portability fixes.\n\nOverview of Changes in GLib 1.1.7:\n\n* Removed multiple define from glibconfig.h\n\nOverview of Changes in GLib 1.1.6:\n\n* New GDate functionality for calendar date manipulations (g_date_*)\n* New GAllocator type and associated functions\n* New functions g_slist_copy and g_list_copy to duplicate a list with all\n  its data pointers.\n* New function g_array_insert_vals and new macro g_array_insert_val to\n  insert elements at an arbitrary index\n* GAllocators used for glist, gslist, gnode node allocations\n* Incremental freezing in ghash\n* New function g_hook_list_marshal_check to eventually destroy hooks after\n  they got marshalled\n* Revised GIOChannel to provide generic virtual-function based interface\n* Added generic main-loop abstraction\n* Removed GListAllocator type and its g_*_allocator_*() function variants\n* Bug fixes\n\nOverview of Changes in GLib 1.1.5:\n\n* Win32 portability\n* GIOChannel structure to encapsulate the IPC mechanism \n* Reimplemented endian stuff, using inline asm for x86\n* New functions:\n  - g_strescape: escapes backslashes\n  - g_path_is_absolute and g_path_skip_root\n  - g_getenv: expands environment variables that contain references \n    to other environment variables\n  - g_scanner_sync_file_offset: rewind the filedescriptor to the current\n    buffer position and blow the file read ahead buffer\n  - g_array_remove_index: remove an entry, preserving the order\n  - g_array_remove_index_fast: remove an entry, order might be distorted\n  - g_ptr_array_remove: remove an entry, preserving the order \n  - g_ptr_array_remove_fast: remove an entry, order might be distorted\n  - g_byte_array_remove_index: wrapper for g_array_remove_index\n  - g_byte_array_remove_index_fast: wrapper for g_array_remove_index_fast\n  - g_strncasecmp: modeled closely after g_strcasecmp\n  - g_list_sort, g_slist_sort: to merge sort GLists and GSLists\n* New macros:\n  - G_DIR_SEPARATOR, G_DIR_SEPARATOR_S: platform-dependant file name\n    syntax elements\n  - G_SEARCHPATH_SEPARATOR, G_SEARCHPATH_SEPARATOR_S: platform-dependant\n    search path syntax conventions\n  - G_STRUCT_OFFSET, G_STRUCT_MEMBER_P, G_STRUCT_MEMBER: for handling\n    structure fields through their offsets\n* Removed G_ENUM, G_FLAGS, G_NV, and G_SV macros\n* Bug fixes\n\nOverview of Changes in GLib 1.1.4:\n\n* Added generic callback maintenance functions (ghook)\n* New endian defines (G_*_ENDIAN)\n* New string join/split/free routines \n* Fixes\n\nOverview of Changes in GLib 1.1.3:\n\n* New GModule mechanism (implemented in an extra library) which wraps dynamic\n  object code loading facilities in a portable manner.\n* glib-config features extra \"glib\" (old behaviour remains) and \"gmodule\"\n  (add libgmodule.so to the --libs output) arguments now. this can also\n  be specified as fourth argument to the AM_PATH_GLIB() macro.\n* Overhaul of the `inline' autoconfiguration stuff, so inlining should be\n  sufficiently supported on all systems that allow inlining now.\n* New g_log() mechanism for logging of messages at different log levels,\n  associated with certain log domains (define -DG_LOG_DOMAIN for your library).\n* New inline functions for bit masks tests.\n* GNode macros (and functions) now return the newly allocated node.\n* New macro G_VA_COPY() to work around va_list copying oddities on some\n  platforms. the non-static g_vsprintf() function vanished in favour of\n  a publically exported g_strdup_vprintf().\n  People that used the former g_vsprintf() would definitely want to read the\n  associated ChangeLog entries (grep for printf).\n* New utility functions:\n  g_strndup(), g_on_error_query(), g_on_error_stack_trace(), g_strdup_printf(),\n  g_strdup_vprintf(), g_printf_string_upper_bound(), g_spaced_primes_closest(),\n  g_strnfill(), g_memdup(). \n* Overhaul of the array implementations, this contains some source incompatible\n  changes. Again, the ChangeLog is much more informative (grep for garray.c).\n* The internals of the g_dataset mechanism are now exported through the\n  new g_datalist_* API (this is also the underlying implementation for the\n  keyed data of GtkObjects).\n* New function g_atexit(), use of the ATEXIT() macro is discouraged.\n* Better configure checks for ansi compliance.\n* Libtool update to version 1.2b.\n* Lotsa bug fixes and cleanups as always ;)\n\nOverview of Changes in GLib 1.1.2:\n\n* Fixed packaging mistake which occured in 1.1.1\n* fix 64-bitness in g_prints in glibtest\n\nWhat is new in GLib 1.1.1:\n\n* An n-way tree implementation is provided now, based on the GNode structure.\n* Bugfix for pointer arrays.\n\nWhat is new in GLib 1.1.0:\n\n* GLib is distributed seperatedly from Gtk+ now and uses a sophisticated\n  shared library versioning scheme to deal with interface and binary\n  incompatibilities.\n* There is a glib-config helper script installed now.\n* Fixups all over the place.\n* gboolean is now a gint, not a gchar anymore.\n* API extensions for GList and GSList.\n* New g_str*() functions for simple string handling.\n* GScanner extensions for scope, warning and error handling.\n* Minor performance improvements for GMemChunks.\n* Implementations of GQuarks and datasets (similar to GtkObjects data\n  mechansim, but works for generic memory locations).\n* More convenience macros for GNU C function arguments.\n* Const correction all over the place, including a new pointer type\n  gconstpointer.\n* Generic functions for TAB completions.\n* GRelations for n-way mapping of certain data.\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/configure.ac": "# Process this file with autoconf to produce a configure script.\nAC_PREREQ([2.62])\n\ndnl ***********************************\ndnl *** include special GLib macros ***\ndnl ***********************************\n\nm4_define(glib_configure_ac)\n\n#\n# The following version number definitions apply to GLib, GModule, GObject,\n# GThread and GIO as a whole, so if changes occurred in any of them, they are\n# all treated with the same interface and binary age.\n#\n# Making releases:\n#   glib_micro_version += 1;\n#   glib_interface_age += 1;\n#   glib_binary_age += 1;\n# if any functions have been added, set glib_interface_age to 0.\n# if backwards compatibility has been broken,\n# set glib_binary_age _and_ glib_interface_age to 0.\n#\n# remember to add a GLIB_VERSION_2_xx macro every time the minor version is\n# bumped, as well as the GLIB_DEPRECATED_IN and GLIB_AVAILABLE_IN macros\n# for that version - see gversion.h for further information.\n#\n# in easier to understand terms:\n#\n# <mclasen> on the stable branch, interface age == micro\n# <mclasen> on the unstable (ie master), interface age = 0\n\nm4_define([glib_major_version], [2])\nm4_define([glib_minor_version], [58])\nm4_define([glib_micro_version], [3])\nm4_define([glib_interface_age], [3])\nm4_define([glib_binary_age],\n          [m4_eval(100 * glib_minor_version + glib_micro_version)])\nm4_define([glib_version],\n          [glib_major_version.glib_minor_version.glib_micro_version])\n\n# libtool version related macros\nm4_define([glib_lt_release], [glib_major_version.glib_minor_version])\nm4_define([glib_lt_current],\n          [m4_eval(100 * glib_minor_version + glib_micro_version - glib_interface_age)])\nm4_define([glib_lt_revision], [glib_interface_age])\nm4_define([glib_lt_age], [m4_eval(glib_binary_age - glib_interface_age)])\nm4_define([glib_lt_current_minus_age],\n          [m4_eval(glib_lt_current - glib_lt_age)])\n\n# if the minor version number is odd, then we want debugging.  Otherwise\n# we only want minimal debugging support.\nm4_define([glib_debug_default],\n          [m4_if(m4_eval(glib_minor_version % 2), [1], [yes], [minimum])])dnl\n\n\nAC_INIT(glib, [glib_version],\n        [https://gitlab.gnome.org/GNOME/glib/issues/new])\n\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_SRCDIR([glib/glib.h])\nAC_CONFIG_MACRO_DIR([m4macros])\n\n# Save this value here, since automake will set cflags later\ncflags_set=${CFLAGS:+set}\n\nAM_INIT_AUTOMAKE([1.13.3 -Wno-portability no-define no-dist-gzip dist-xz tar-ustar subdir-objects])\nAM_MAINTAINER_MODE([enable])\n\n# Support silent build rules. Disable\n# by either passing --disable-silent-rules to configure or passing V=1\n# to make\nAM_SILENT_RULES([yes])\n\nGLIB_MAJOR_VERSION=glib_major_version\nGLIB_MINOR_VERSION=glib_minor_version\nGLIB_MICRO_VERSION=glib_micro_version\nGLIB_INTERFACE_AGE=glib_interface_age\nGLIB_BINARY_AGE=glib_binary_age\nGLIB_VERSION=glib_version\n\nAC_SUBST(GLIB_MAJOR_VERSION)\nAC_SUBST(GLIB_MINOR_VERSION)\nAC_SUBST(GLIB_MICRO_VERSION)\nAC_SUBST(GLIB_VERSION)\nAC_SUBST(GLIB_INTERFACE_AGE)\nAC_SUBST(GLIB_BINARY_AGE)\n\nAC_DEFINE(GLIB_MAJOR_VERSION, [glib_major_version],\n\t  [Define to the GLIB major version])\nAC_DEFINE(GLIB_MINOR_VERSION, [glib_minor_version],\n\t  [Define to the GLIB minor version])\nAC_DEFINE(GLIB_MICRO_VERSION, [glib_micro_version],\n\t  [Define to the GLIB micro version])\nAC_DEFINE(GLIB_INTERFACE_AGE, [glib_interface_age],\n\t  [Define to the GLIB interface age])\nAC_DEFINE(GLIB_BINARY_AGE, [glib_binary_age],\n\t  [Define to the GLIB binary age])\n\n# libtool versioning\nLT_RELEASE=glib_lt_release\nLT_CURRENT=glib_lt_current\nLT_REVISION=glib_lt_revision\nLT_AGE=glib_lt_age\nLT_CURRENT_MINUS_AGE=glib_lt_current_minus_age\nAC_SUBST(LT_RELEASE)\nAC_SUBST(LT_CURRENT)\nAC_SUBST(LT_REVISION)\nAC_SUBST(LT_AGE)\nAC_SUBST(LT_CURRENT_MINUS_AGE)\n\ndnl Checks for programs.\nAC_PROG_CC\nAC_PROG_CPP\nAC_USE_SYSTEM_EXTENSIONS\n\nAM_CONDITIONAL(HAVE_GCC, [test \"$GCC\" = \"yes\"])\n\nAC_CANONICAL_HOST\n\ndnl\n\nAC_MSG_CHECKING([for Win32])\nLIB_EXE_MACHINE_FLAG=X86\ncase \"$host\" in\n  *-*-mingw*)\n    glib_native_win32=yes\n    glib_pid_type='void *'\n    glib_pid_format='p'\n    glib_pollfd_format='%#x'\n    glib_dir_separator='\\\\\\\\'\n    glib_searchpath_separator=';'\n    glib_cv_stack_grows=no\n    # Unfortunately the mingw implementations of C99-style snprintf and vsnprintf\n    # don't seem to be quite good enough, at least not in mingw-runtime-3.14.\n    # (Sorry, I don't know exactly what is the problem, but it is related to\n    # floating point formatting and decimal point vs. comma.)\n    # The simple tests in AC_FUNC_VSNPRINTF_C99 and AC_FUNC_SNPRINTF_C99 aren't\n    # rigorous enough to notice, though.\n    # So preset the autoconf cache variables.\n    ac_cv_func_vsnprintf_c99=no\n    ac_cv_func_snprintf_c99=no\n    case \"$host\" in\n    x86_64-*-*)\n      LIB_EXE_MACHINE_FLAG=X64\n      glib_pollfd_format='%#llx'\n      ;;\n    esac\n\n    AC_DEFINE([_WIN32_WINNT], [0x0601], [Target the Windows 7 API])\n    ;;\n  *)\n    glib_native_win32=no\n    glib_pid_type=int\n    glib_pid_format='i'\n    glib_pollfd_format='%d'\n    glib_dir_separator='/'\n    glib_searchpath_separator=':'\n    ;;\nesac\ncase $host in\n  *-*-linux*)\n    glib_os_linux=yes\n    ;;\nesac\n\nAC_MSG_RESULT([$glib_native_win32])\n\nAC_MSG_CHECKING([for the Android])\ncase $host in\n  *android*)\n    glib_native_android=\"yes\"\n    ;;\n  *)\n    glib_native_android=\"no\"\n    ;;\nesac\nAC_MSG_RESULT([$glib_native_android])\n\nAC_SUBST(LIB_EXE_MACHINE_FLAG)\n\nglib_have_carbon=no\nAC_MSG_CHECKING([for Mac OS X Carbon support])\nAC_TRY_CPP([\n#include <Carbon/Carbon.h>\n#include <CoreServices/CoreServices.h>\n], glib_have_carbon=yes)\n\nAC_MSG_RESULT([$glib_have_carbon])\n\nglib_have_cocoa=no\nAC_MSG_CHECKING([for Mac OS X Cocoa support])\nAC_TRY_CPP([\n#include <Cocoa/Cocoa.h>\n#ifdef GNUSTEP_BASE_VERSION\n#error \"Detected GNUstep, not Cocoa\"\n#endif\n], glib_have_cocoa=yes)\n\nAC_MSG_RESULT([$glib_have_cocoa])\n\nAM_CONDITIONAL(OS_WIN32, [test \"$glib_native_win32\" = \"yes\"])\nAM_CONDITIONAL(OS_WIN32_X64, [test \"$LIB_EXE_MACHINE_FLAG\" = \"X64\"])\nAM_CONDITIONAL(OS_UNIX, [test \"$glib_native_win32\" != \"yes\"])\nAM_CONDITIONAL(OS_LINUX, [test \"$glib_os_linux\" = \"yes\"])\nAM_CONDITIONAL(OS_CARBON, [test \"$glib_have_carbon\" = \"yes\"])\nAM_CONDITIONAL(OS_COCOA, [test \"$glib_have_cocoa\" = \"yes\"])\n\nAS_IF([test \"$glib_native_win32\" = \"yes\"], [\n  AC_CHECK_TOOL(WINDRES, windres, no)\n  if test \"$WINDRES\" = no; then\n    AC_MSG_ERROR([*** Could not find an implementation of windres in your PATH.])\n  fi\n  AC_CHECK_TOOL(NM, nm, no)\n  if test \"$NM\" = no; then\n    AC_MSG_ERROR([*** Could not find an implementation of nm in your PATH.])\n  fi\n  AC_CHECK_TOOL(RANLIB, ranlib, :)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, :)\n  AC_CHECK_PROG(ms_librarian, [lib.exe], [yes], [no])\n])\nAM_CONDITIONAL(MS_LIB_AVAILABLE, [test x$ms_librarian = xyes])\n\nAS_IF([test \"x$glib_have_carbon\" = \"xyes\"], [\n  AC_DEFINE(HAVE_CARBON, 1, [define to 1 if Carbon is available])\n  CARBON_LIBS=\"-Wl,-framework,Carbon\"\n  LDFLAGS=\"$LDFLAGS $CARBON_LIBS\"\n], [CARBON_LIBS=\"\"])\n\nAC_SUBST([CARBON_LIBS])\nac_cv_have_os_x_9_or_later=\"no\"\nAS_IF([test \"x$glib_have_cocoa\" = \"xyes\"], [\n  AC_DEFINE(HAVE_COCOA, 1, [define to 1 if Cocoa is available])\n  COCOA_LIBS=\"-Wl,-framework,Foundation -Wl,-framework,AppKit\"\n  LDFLAGS=\"$LDFLAGS $COCOA_LIBS\"\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <AvailabilityMacros.h>\n#if MAC_OS_X_VERSION_MIN_REQUIRED < 1090\n#error Compiling for minimum OS X version before 10.9\n#endif\n  ]])],[ac_cv_have_os_x_9_or_later=\"yes\"])\n], [COCOA_LIBS=\"\"])\nAM_CONDITIONAL([MAC_OS_X_9], [test \"x$ac_cv_have_os_x_9_or_later\" = xyes])\nAC_SUBST([COCOA_LIBS])\n\ndnl declare --enable-* args and collect ac_help strings\nAC_ARG_ENABLE(debug,\n              AS_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@],\n                             [turn on debugging @<:@default=glib_debug_default@:>@]),,\n              enable_debug=glib_debug_default)\n\nGLIB_TESTS\n\ndnl location to install runtime libraries, e.g. ../../lib to install\ndnl to /lib if libdir is /usr/lib\nAC_ARG_WITH(runtime-libdir,\n           [AS_HELP_STRING([--with-runtime-libdir=RELPATH],\n                           [install runtime libraries relative to libdir])],\n           [],\n\t   [with_runtime_libdir=\"\"])\nGLIB_RUNTIME_LIBDIR=\"$with_runtime_libdir\"\nAC_SUBST(GLIB_RUNTIME_LIBDIR)\nAM_CONDITIONAL(HAVE_GLIB_RUNTIME_LIBDIR, [test \"x$with_runtime_libdir\" != \"x\"])\n\ndnl Check for a working C++ compiler, but do not bail out, if none is found.\nAC_CHECK_TOOLS(CXX, [$CCC c++ g++ gcc CC cxx cc++ cl], [gcc])\nAC_LANG_SAVE\nAC_LANG_CPLUSPLUS\nAC_TRY_COMPILE(,[class a { int b; } c;], ,CXX=)\nAM_CONDITIONAL(HAVE_CXX, [test \"$CXX\" != \"\"])\nAC_LANG_RESTORE\n\nAM_PROG_CC_C_O\nAC_PROG_INSTALL\n\nAC_SYS_LARGEFILE\n\nPKG_PROG_PKG_CONFIG(0.16)\n\nif test \"x$enable_debug\" = \"xyes\"; then\n  if test \"x$cflags_set\" != \"x\" ; then\n      case \" $CFLAGS \" in\n      *[[\\ \\\t]]-g[[\\ \\\t]]*) ;;\n      *) CFLAGS=\"$CFLAGS -g\" ;;\n      esac\n  fi\n  GLIB_DEBUG_FLAGS=\"-DG_ENABLE_DEBUG\"\nelse\n  GLIB_DEBUG_FLAGS=\"-DG_DISABLE_CAST_CHECKS\"\n\n  if test \"x$enable_debug\" = \"xno\"; then\n    GLIB_DEBUG_FLAGS=\"$GLIB_DEBUG_FLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS\"\n  fi\nfi\n\n# Ensure MSVC-compatible struct packing convention is used when\n# compiling for Win32 with gcc.\n# What flag to depends on gcc version: gcc3 uses \"-mms-bitfields\", while\n# gcc2 uses \"-fnative-struct\".\nif test x\"$glib_native_win32\" = xyes; then\n  if test x\"$GCC\" = xyes; then\n    msnative_struct=''\n    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])\n    if test -z \"$ac_cv_prog_CC\"; then\n      our_gcc=\"$CC\"\n    else\n      our_gcc=\"$ac_cv_prog_CC\"\n    fi\n    case `$our_gcc --version | sed -e 's,\\..*,.,' -e q` in\n      2.)\n\tif $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then\n\t  msnative_struct='-fnative-struct'\n\tfi\n\t;;\n      *)\n\tif $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then\n\t  msnative_struct='-mms-bitfields'\n\tfi\n\t;;\n    esac\n    if test x\"$msnative_struct\" = x ; then\n      AC_MSG_RESULT([no way])\n      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])\n    else\n      CFLAGS=\"$CFLAGS $msnative_struct\"\n      AC_MSG_RESULT([${msnative_struct}])\n    fi\n  fi\nfi\nGLIB_EXTRA_CFLAGS=\"${msnative_struct}\"\nAC_SUBST(GLIB_EXTRA_CFLAGS)\n\nAC_EXEEXT\n\nAC_PROG_AWK\n\n# option to specify python interpreter to use; this just sets $PYTHON, so that\n# we will fallback to reading $PYTHON if --with-python is not given, and\n# python.m4 will get the expected input\nAC_ARG_WITH(python,\n            AS_HELP_STRING([--with-python=PATH],\n                           [Path to Python interpreter; searches $PATH if only a program name is given; if not given, searches for a few standard names such as \"python3\" or \"python2\"]),\n            [PYTHON=\"$withval\"], [])\nif test x\"$PYTHON\" = xyes; then\n  AC_MSG_ERROR([--with-python option requires a path or program argument])\nfi\nAM_PATH_PYTHON(2.7,,PYTHON=\"python2.7\")\n\n\ndnl ***********************\ndnl *** Tests for iconv ***\ndnl ***********************\ndnl\ndnl We do this before the gettext checks, to avoid distortion\n\ndnl On Windows we use a native implementation\n\nAS_IF([ test x\"$glib_native_win32\" = xyes], [\n  with_libiconv=native\n], [\n  AC_ARG_WITH(libiconv,\n\t      [AS_HELP_STRING([--with-libiconv=@<:@no/gnu/native@:>@],\n\t\t\t      [use the libiconv library])],,\n\t      [with_libiconv=maybe])\n\n  found_iconv=no\n  case $with_libiconv in\n    maybe)\n      # Check in the C library first\n      AC_CHECK_FUNC(iconv_open, [with_libiconv=no; found_iconv=yes])\n      # Check if we have GNU libiconv\n      if test $found_iconv = \"no\"; then\n\tAC_CHECK_LIB(iconv, libiconv_open, [with_libiconv=gnu; found_iconv=yes])\n      fi\n      # Check if we have a iconv in -liconv, possibly from vendor\n      if test $found_iconv = \"no\"; then\n\tAC_CHECK_LIB(iconv, iconv_open, [with_libiconv=native; found_iconv=yes])\n      fi\n      ;;\n    no)\n      AC_CHECK_FUNC(iconv_open, [with_libiconv=no; found_iconv=yes])\n      ;;\n    gnu|yes)\n      AC_CHECK_LIB(iconv, libiconv_open, [with_libiconv=gnu; found_iconv=yes])\n      ;;\n    native)\n      AC_CHECK_LIB(iconv, iconv_open, [with_libiconv=native; found_iconv=yes])\n      ;;\n  esac\n\n  if test \"x$found_iconv\" = \"xno\" ; then\n     AC_MSG_ERROR([*** No iconv() implementation found in C library or libiconv])\n  fi\n])\n\ndnl\ndnl zlib support\ndnl\nPKG_CHECK_MODULES([ZLIB], [zlib], [found_zlib=yes], [found_zlib=no])\nAS_IF([test \"x$found_zlib\" = \"xno\"], [\n  AC_CHECK_LIB(z, inflate, [AC_CHECK_HEADER(zlib.h, found_zlib=yes)])\n  if test \"x$found_zlib\" = \"xno\" ; then\n    AC_MSG_ERROR([*** Working zlib library and headers not found ***])\n  fi\n  ZLIB_LIBS='-lz'\n  AC_SUBST(ZLIB_LIBS)\n])\n\nPKG_CHECK_MODULES(LIBFFI, [libffi >= 3.0.0])\nAC_SUBST(LIBFFI_CFLAGS)\nAC_SUBST(LIBFFI_LIBS)\n\ndnl\ndnl gettext support\ndnl\n\nALL_LINGUAS=\"`grep -v '^#' \"$srcdir/po/LINGUAS\" | tr '\\n' ' '`\"\nAC_SUBST([CONFIG_STATUS_DEPENDENCIES],['$(top_srcdir)/po/LINGUAS'])\nGLIB_GNU_GETTEXT\n\nif test \"$gt_cv_have_gettext\" != \"yes\" ; then\n  AC_MSG_ERROR([\n*** You must have either have gettext support in your C library, or use the\n*** GNU gettext library. (http://www.gnu.org/software/gettext/gettext.html)\n])\nfi\n\nLIBS=\"$INTLLIBS $LIBS\"\n\nGETTEXT_PACKAGE=glib20\nAC_SUBST(GETTEXT_PACKAGE)\nAC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, [\"$GETTEXT_PACKAGE\"], \n  [Define the gettext package to be used])\n\nGLIB_DEFINE_LOCALEDIR(GLIB_LOCALE_DIR)\n\ndnl\ndnl Now we are done with gettext checks, figure out ICONV_LIBS\ndnl\n\nAS_IF([test x\"$glib_native_win32\" != xyes], [\n  if test x$with_libiconv != xno ; then\n    case \" $INTLLIBS \" in\n    *[[\\ \\\t]]-liconv[[\\ \\\t]]*) ;;\n    *) ICONV_LIBS=\"-liconv\" ;;\n    esac\n  fi\n])\nAC_SUBST(ICONV_LIBS)\n\ncase $with_libiconv in\n  gnu)\n    AC_DEFINE(USE_LIBICONV_GNU, 1, [Using GNU libiconv])\n    ;;\n  native)\n    AC_DEFINE(USE_LIBICONV_NATIVE, 1, [Using a native implementation of iconv in a separate library])\n    ;;\nesac\n\ndnl Initialize libtool\nLT_PREREQ([2.2])\nLT_INIT([disable-static win32-dll])\ndnl when using libtool 2.x create libtool early, because it's used in configure\nm4_ifdef([LT_OUTPUT], [LT_OUTPUT])\n\n\nAS_IF([test \"$glib_native_win32\" = \"yes\"], [\n  if test x$enable_static = xyes -a x$enable_shared = xyes; then\n    AC_MSG_ERROR([Can not build both shared and static at the same time on Windows.])\n  fi\n  if test x$enable_static = xyes; then\n    glib_win32_static_compilation=yes\n    GLIB_WIN32_STATIC_COMPILATION_DEFINE=\"#define GLIB_STATIC_COMPILATION 1\n#define GOBJECT_STATIC_COMPILATION 1\"\n    AC_SUBST(GLIB_WIN32_STATIC_COMPILATION_DEFINE)\n  fi\n])\nAM_CONDITIONAL(OS_WIN32_AND_DLL_COMPILATION, [test x$glib_native_win32 = xyes -a x$glib_win32_static_compilation != xyes])\n\n# Checks for library functions.\nAC_CHECK_FUNCS(mmap posix_memalign memalign valloc fsync pipe2 issetugid)\nAC_CHECK_FUNCS(timegm gmtime_r posix_spawn)\nAC_FUNC_STRERROR_R()\n\nAC_CHECK_SIZEOF(char)\nAC_CHECK_SIZEOF(short)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(void *)\nAC_CHECK_SIZEOF(long long)\n\nAC_CACHE_CHECK([for sig_atomic_t], ac_cv_type_sig_atomic_t,\n  [AC_TRY_LINK([#include <signal.h>\n     #include <sys/types.h>\n     sig_atomic_t val = 42;],\n    [return val == 42 ? 0 : 1],\n   ac_cv_type_sig_atomic_t=yes,\n   ac_cv_type_sig_atomic_t=no)])\nif test x$ac_cv_type_sig_atomic_t = xyes; then\n   AC_DEFINE(HAVE_SIG_ATOMIC_T, 1,\n     [Define if you have the 'sig_atomic_t' type.])\nfi\n\nif test x$ac_cv_sizeof_long = x8 || test x$ac_cv_sizeof_long_long = x8 ; then\n  :\nelse\n  AC_MSG_ERROR([\n*** GLib requires a 64 bit type. You might want to consider\n*** using the GNU C compiler.\n])\nfi\n\nAS_IF([test x$ac_cv_sizeof_long_long = x8], [\n\t# long long is a 64 bit integer.\n\tAC_MSG_CHECKING(for format to printf and scanf a guint64)\n\tAC_CACHE_VAL(glib_cv_long_long_format,[\n\t\tfor format in ll q; do\n\t\t  AC_TRY_RUN([#include <stdio.h>  \n\t\t\tint main()\n\t\t\t{\n\t\t\t  long long b, a = -0x3AFAFAFAFAFAFAFALL;\n\t\t\t  char buffer[1000];\n\t\t\t  sprintf (buffer, \"%${format}u\", a);\n  \t\t\t  sscanf (buffer, \"%${format}u\", &b);\n\t\t\t  exit (b!=a);\n\t\t\t}\n\t\t\t],\n\t\t\t[glib_cv_long_long_format=${format}\n\t\t\tbreak],\n\t\t\t[],[:])\n\t\tdone])\n\tAS_IF([ test -n \"$glib_cv_long_long_format\"], [\n\t  AC_MSG_RESULT(%${glib_cv_long_long_format}u)\n\t], [AC_MSG_RESULT(none)])\n])\n\ndnl\ndnl check in which direction the stack grows\ndnl\nAC_CACHE_CHECK([for growing stack pointer],glib_cv_stack_grows,[\n        AC_TRY_RUN([\n\tvolatile int *a = 0, *b = 0;\n\tvoid f (int i) { volatile int x = 5; if (i == 0) b = &x; else f (i - 1); }\n\tint main () { volatile int y = 7; a = &y; f (100); return b > a ? 0 : 1; }\n       \t],\n\tglib_cv_stack_grows=yes\n        ,\n\tglib_cv_stack_grows=no\n        ,)\n])\n\n# check for flavours of varargs macros\nAC_MSG_CHECKING(for ISO C99 varargs macros in C)\nAC_TRY_COMPILE([],[\nint a(int p1, int p2, int p3);\n#define call_a(...) a(1,__VA_ARGS__)\ncall_a(2,3);\n],g_have_iso_c_varargs=yes,g_have_iso_c_varargs=no)\nAC_MSG_RESULT($g_have_iso_c_varargs)\n\nAC_MSG_CHECKING(for ISO C99 varargs macros in C++)\nAS_IF([test \"$CXX\" = \"\"], [\ndnl No C++ compiler\n  g_have_iso_cxx_varargs=no\nelse\n  AC_LANG_CPLUSPLUS\n  AC_TRY_COMPILE([],[\nint a(int p1, int p2, int p3);\n#define call_a(...) a(1,__VA_ARGS__)\ncall_a(2,3);\n],g_have_iso_cxx_varargs=yes,g_have_iso_cxx_varargs=no)\n  AC_LANG_C\n])\nAC_MSG_RESULT($g_have_iso_cxx_varargs)\n\nAC_MSG_CHECKING(for GNUC varargs macros)\nAC_TRY_COMPILE([],[\nint a(int p1, int p2, int p3);\n#define call_a(params...) a(1,params)\ncall_a(2,3);\n],g_have_gnuc_varargs=yes,g_have_gnuc_varargs=no)\nAC_MSG_RESULT($g_have_gnuc_varargs)\n\n# check for GNUC visibility support\nAC_MSG_CHECKING(for GNUC visibility attribute)\nGLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\nvoid\n__attribute__ ((visibility (\"hidden\")))\n     f_hidden (void)\n{\n}\nvoid\n__attribute__ ((visibility (\"internal\")))\n     f_internal (void)\n{\n}\nvoid\n__attribute__ ((visibility (\"protected\")))\n     f_protected (void)\n{\n}\nvoid\n__attribute__ ((visibility (\"default\")))\n     f_default (void)\n{\n}\nint main (void)\n{\n\tf_hidden();\n\tf_internal();\n\tf_protected();\n\tf_default();\n\treturn 0;\n}\n]])],g_have_gnuc_visibility=yes,g_have_gnuc_visibility=no)\nAC_MSG_RESULT($g_have_gnuc_visibility)\nAM_CONDITIONAL(HAVE_GNUC_VISIBILITY, [test x$g_have_gnuc_visibility = xyes])\n\nAC_MSG_CHECKING([whether using Sun Studio C compiler])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#if defined(__SUNPRO_C) || (__SUNPRO_C >= 0x550)\n#else\n# include \"error: this is not Sun Studio.\"\n#endif\n]], [[]])], [ g_have_sunstudio_visibility=yes ], [ g_have_sunstudio_visibility=no ])\nAC_MSG_RESULT($g_have_sunstudio_visibility)\nAM_CONDITIONAL(HAVE_SUNSTUDIO_VISIBILITY, [test x$g_have_sunstudio_visibility = xyes])\n\n# check for bytesex stuff\nAC_C_BIGENDIAN\nif test x$ac_cv_c_bigendian = xuniversal ; then\n  AC_MSG_ERROR([Universal builds not supported: see https://bugzilla.gnome.org/show_bug.cgi?id=742548])\nfi\n\n\n# check for header files\nAC_CHECK_HEADERS([sys/param.h sys/resource.h mach/mach_time.h])\nAC_CHECK_HEADERS([sys/select.h stdint.h inttypes.h sched.h malloc.h])\nAC_CHECK_HEADERS([sys/vfs.h sys/vmount.h sys/statfs.h sys/statvfs.h sys/filio.h sys/auxv.h])\nAC_CHECK_HEADERS([mntent.h sys/mnttab.h sys/vfstab.h sys/mntctl.h fstab.h])\nAC_CHECK_HEADERS([linux/magic.h])\nAC_CHECK_HEADERS([termios.h])\nAC_CHECK_HEADERS([alloca.h])\nAC_CHECK_HEADERS([spawn.h])\n\n# Some versions of MSC lack these\nAC_CHECK_HEADERS([dirent.h sys/time.h])\n\n# We don't care about this, but we need to keep including it in\n# glibconfig.h for backward compatibility\nAC_CHECK_HEADERS([values.h])\n\nAC_CHECK_HEADERS([sys/mount.h sys/sysctl.h], [], [],\n[#if HAVE_SYS_PARAM_H\n #include <sys/param.h>\n #endif\n])\nAC_CHECK_FUNCS(sysctlbyname)\n\nAC_HEADER_MAJOR\nAS_IF([test \"$ac_cv_header_sys_types_h_makedev\" = \"yes\"],\n      [AC_DEFINE([MAJOR_IN_TYPES], [1], [Define to 1 if `major', `minor', and `makedev' are declared in <sys/types.h>.])])\nAC_CHECK_HEADERS([xlocale.h])\n\n# check for structure fields\nAC_CHECK_MEMBERS([struct stat.st_mtimensec, struct stat.st_mtim.tv_nsec, struct stat.st_atimensec, struct stat.st_atim.tv_nsec, struct stat.st_ctimensec, struct stat.st_ctim.tv_nsec, struct stat.st_birthtime, struct stat.st_birthtimensec, struct stat.st_birthtim, struct stat.st_birthtim.tv_nsec])\nAC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct statfs.f_fstypename, struct statfs.f_bavail],,, [#include <sys/types.h>\n#include <sys/stat.h>\n#ifdef G_OS_UNIX\n#include <unistd.h>\n#endif\n#ifdef HAVE_SYS_STATFS_H\n#include <sys/statfs.h>\n#endif\n#ifdef HAVE_SYS_PARAM_H\n#include <sys/param.h>\n#endif\n#ifdef HAVE_SYS_MOUNT_H\n#include <sys/mount.h>\n#endif])\n# struct statvfs.f_basetype is available on Solaris but not for Linux. \nAC_CHECK_MEMBERS([struct statvfs.f_basetype],,, [#include <sys/statvfs.h>])\nAC_CHECK_MEMBERS([struct statvfs.f_fstypename],,, [#include <sys/statvfs.h>])\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,[#include <time.h>])\n\nAC_STRUCT_DIRENT_D_TYPE\n\n# Checks for libcharset\nAM_LANGINFO_CODESET\ngl_GLIBC21\nAC_ARG_WITH(charsetalias-dir,\n            AS_HELP_STRING([--with-charsetalias-dir=DIR], [directory for charset.alias file [LIBDIR]]),\n           [],\n           [with_charsetalias_dir='${libdir}'])\nGLIB_CHARSETALIAS_DIR=$with_charsetalias_dir\nAC_SUBST(GLIB_CHARSETALIAS_DIR)\n\n# check additional type sizes\nAC_CHECK_SIZEOF(size_t)\n\ndnl Try to figure out whether gsize should be long or int\nAC_MSG_CHECKING([for the appropriate definition for size_t])\n\ncase $ac_cv_sizeof_size_t in\n  $ac_cv_sizeof_short) \n      glib_size_type=short\n      ;;\n  $ac_cv_sizeof_int) \n      glib_size_type=int\n      ;;\n  $ac_cv_sizeof_long) \n      glib_size_type=long\n      ;;\n  $ac_cv_sizeof_long_long)\n      glib_size_type='long long'\n      ;;\n  *)  AC_MSG_ERROR([No type matching size_t in size])\n      ;;\nesac\n\ndnl If int/long are the same size, we see which one produces\ndnl warnings when used in the location as size_t. (This matters\ndnl on AIX with xlc)\ndnl\nAS_IF([test $ac_cv_sizeof_size_t = $ac_cv_sizeof_int &&\n       test $ac_cv_sizeof_size_t = $ac_cv_sizeof_long], [\n  GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc89\n#endif\n#include <stddef.h> \nint main ()\n{\n  size_t s = 1;\n  unsigned int *size_int = &s;\n  return (int)*size_int;\n}\n    ]])],glib_size_type=int,\n      [GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc89\n#endif\n#include <stddef.h> \nint main ()\n{\n   size_t s = 1;\n   unsigned long *size_long = &s;\n   return (int)*size_long;\n}\n        ]])],glib_size_type=long)])\n])\n\nAC_MSG_RESULT(unsigned $glib_size_type)\n\nAC_CHECK_SIZEOF(ssize_t)\n\ndnl Try to figure out whether gssize should be long or int\nAC_MSG_CHECKING([for the appropriate definition for ssize_t])\n\ncase $ac_cv_sizeof_ssize_t in\n  $ac_cv_sizeof_short) \n      glib_ssize_type=short\n      ;;\n  $ac_cv_sizeof_int) \n      glib_ssize_type=int\n      ;;\n  $ac_cv_sizeof_long) \n      glib_ssize_type=long\n      ;;\n  $ac_cv_sizeof_long_long)\n      glib_ssize_type='long long'\n      ;;\n  *)  AC_MSG_ERROR([No type matching ssize_t in size])\n      ;;\nesac\n\ndnl If int/long are the same size, we see which one produces\ndnl warnings when used in the location as ssize_t. (This matters\ndnl on Android where ssize_t is long and size_t is unsigned int)\ndnl\nAS_IF([test $ac_cv_sizeof_ssize_t = $ac_cv_sizeof_int &&\n       test $ac_cv_sizeof_ssize_t = $ac_cv_sizeof_long], [\n  GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc89\n#endif\n#include <stddef.h>\n#ifdef HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#include <sys/types.h>\nint main ()\n{\n  ssize_t s = 1;\n  int *size_int = &s;\n  return (int)*size_int;\n}\n    ]])],glib_ssize_type=int,\n      [GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc89\n#endif\n#include <stddef.h> \n#ifdef HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#include <sys/types.h>\nint main ()\n{\n   ssize_t s = 1;\n   long *size_long = &s;\n   return (int)*size_long;\n}\n        ]])],glib_ssize_type=long)])\n])\n\nAC_MSG_RESULT($glib_ssize_type)\n\ndnl Some platforms (Apple) hard-code int64_t to long long instead of\ndnl using long on 64-bit architectures. This can cause type mismatch\ndnl warnings when trying to interface with code using the standard\ndnl library type. Test for the warnings and set gint64 to whichever\ndnl works.\ndnl\nAS_IF([test $ac_cv_sizeof_long_long = $ac_cv_sizeof_long], [\n  GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc99\n#endif\n#include <stdint.h>\n#include <stdio.h>\nint main ()\n{\n  int64_t i1 = 1;\n  long *i2 = &i1;\n  return 1;\n}\n    ]])],[ glib_cv_int64_t=long ],\n      [GLIB_CHECK_COMPILE_WARNINGS([AC_LANG_SOURCE([[\n#if defined(_AIX) && !defined(__GNUC__)\n#pragma options langlvl=stdc99\n#endif\n#include <stdint.h>\n#include <stdio.h>\nint main ()\n{\n  int64_t i1 = 1;\n  long long *i2 = &i1;\n  return 1;\n}\n        ]])],[ glib_cv_int64_t=long_long ])])\n])\n\n# Check for some functions\nAC_CHECK_FUNCS(lstat strsignal vsnprintf stpcpy strcasecmp strncasecmp poll vasprintf setenv unsetenv getc_unlocked readlink symlink fdwalk mkostemp link)\nAC_CHECK_FUNCS(lchmod lchown fchmod fchown utimes getresuid)\nAC_CHECK_FUNCS(getmntent_r setmntent endmntent hasmntopt getfsstat getvfsstat fallocate)\ncase $host_os in aix*) ac_cv_func_splice=no ;; esac # AIX splice() is something else\nAC_CHECK_FUNCS(splice)\nAC_CHECK_FUNCS(prlimit)\n\n# To avoid finding a compatibility unusable statfs, which typically\n# successfully compiles, but warns to use the newer statvfs interface:\nAS_IF([test $ac_cv_header_sys_statvfs_h = yes], [AC_CHECK_FUNCS([statvfs])])\nAS_IF([test $ac_cv_header_sys_statfs_h  = yes -o $ac_cv_header_sys_mount_h = yes], [AC_CHECK_FUNCS([statfs])])\n\nAC_MSG_CHECKING([whether to use statfs or statvfs])\n# Some systems have both statfs and statvfs, pick the most \"native\" for these\nAS_IF([test x$ac_cv_func_statfs = xyes && test x$ac_cv_func_statvfs = xyes],\n   [\n   # on solaris and irix, statfs doesn't even have the f_bavail field\n   AS_IF([test x$ac_cv_member_struct_statfs_f_bavail = xno],\n      [ac_cv_func_statfs=no],\n   # else, at least on linux, statfs is the actual syscall\n      [ac_cv_func_statvfs=no])\n   ])\n\nAS_IF([test x$ac_cv_func_statfs = xyes],\n      [\n         AC_DEFINE([USE_STATFS], [1], [Define to use statfs()])\n         AC_MSG_RESULT([statfs])\n      ],\n      [test x$ac_cv_func_statvfs = xyes],\n      [\n         AC_DEFINE([USE_STATVFS], [1], [Define to use statvfs()])\n         AC_MSG_RESULT([statvfs])\n      ],\n      [  AC_MSG_RESULT([neither])])\n\nAC_CHECK_HEADERS(crt_externs.h)\nAC_CHECK_FUNCS(_NSGetEnviron)\n\nAC_CHECK_FUNCS(newlocale uselocale strtod_l strtoll_l strtoull_l)\n\n# Internet address families\nif test $glib_native_win32 = yes; then\n  glib_inet_includes=[\"\n#include <winsock2.h>\n  \"]\nelse\n  glib_inet_includes=[\"\n#include <sys/types.h>\n#include <sys/socket.h>\n  \"]\nfi\n\nglib_failed=false\nGLIB_CHECK_VALUE(AF_INET, $glib_inet_includes, glib_failed=true)\nGLIB_CHECK_VALUE(AF_INET6, $glib_inet_includes, glib_failed=true)\n# winsock defines this even though it doesn't support it\nGLIB_CHECK_VALUE(AF_UNIX, $glib_inet_includes, glib_failed=true)\nif $glib_failed ; then\n  AC_MSG_ERROR([Could not determine values for AF_INET* constants])\nfi\n\nglib_failed=false\nGLIB_CHECK_VALUE(MSG_PEEK, $glib_inet_includes, glib_failed=true)\nGLIB_CHECK_VALUE(MSG_OOB, $glib_inet_includes, glib_failed=true)\nGLIB_CHECK_VALUE(MSG_DONTROUTE, $glib_inet_includes, glib_failed=true)\nif $glib_failed ; then\n  AC_MSG_ERROR([Could not determine values for MSG_* constants])\nfi\n\nAC_CHECK_FUNCS(endservent if_nametoindex if_indextoname sendmmsg recvmmsg)\n\nAC_MSG_CHECKING([for SIOCGIFADDR])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n    [[\n        #include <sys/ioctl.h>\n        #include <net/if.h>\n    ]],\n    [[\n        struct ifreq ifr;\n        ioctl(0, SIOCGIFADDR, &ifr);\n    ]])], [\n        AC_MSG_RESULT(yes)\n        AC_DEFINE(HAVE_SIOCGIFADDR, 1, [SIOCGIFADDR is available])\n    ], [\n        AC_MSG_RESULT(no)\n])\n\n# See https://bugzilla.gnome.org/show_bug.cgi?id=740791\nAS_IF([test $glib_native_android = yes], [\n  AC_MSG_CHECKING([if ip_mreq_source.imr_interface has s_addr member])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n      [[\n          #include <netinet/in.h>\n      ]],\n      [[\n          struct ip_mreq_source mc_req_src;\n          mc_req_src.imr_interface.s_addr = 0;\n      ]])], [\n          AC_MSG_RESULT(yes)\n      ], [\n          AC_MSG_RESULT(no)\n          AC_DEFINE(BROKEN_IP_MREQ_SOURCE_STRUCT, 1, [struct ip_mreq_source definition is broken on Android NDK <= r16])\n  ])])\n\nAS_IF([test $glib_native_win32 = yes], [\n  # <wspiapi.h> in the Windows SDK and in mingw-w64 has wrappers for\n  # inline workarounds for getaddrinfo, getnameinfo and freeaddrinfo if\n  # they aren't present at run-time (on Windows 2000).\n  AC_CHECK_HEADER([wspiapi.h], [WSPIAPI_INCLUDE=\"#include <wspiapi.h>\"])\n  AC_SUBST(WSPIAPI_INCLUDE)\n], [\n  # Android does not have C_IN in public headers, we define it wherever necessary\n  AS_IF([test $glib_native_android != yes], [\n    AC_MSG_CHECKING([if arpa/nameser_compat.h is needed])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <sys/types.h>\n                                        #include <arpa/nameser.h>],\n                                       [int qclass = C_IN;])],\n                      [AC_MSG_RESULT([no])],\n                      [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <sys/types.h>\n                                                           #include <arpa/nameser.h>\n                                                           #include <arpa/nameser_compat.h>],\n                                                          [int qclass = C_IN;])],\n                                         [AC_MSG_RESULT([yes])\n                                          NAMESER_COMPAT_INCLUDE=\"#include <arpa/nameser_compat.h>\"],\n                                         [AC_MSG_ERROR([could not compile test program either way])])])])\n  AC_SUBST(NAMESER_COMPAT_INCLUDE)\n\n  # We can't just use AC_CHECK_FUNC/AC_CHECK_LIB here. Bug 586150\n  NETWORK_LIBS=\"\"\n  AC_MSG_CHECKING([for res_query])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n\t       res_query(\"test\", 0, 0, (void *)0, 0);\n              ],[AC_MSG_RESULT([yes])],\n              [save_libs=\"$LIBS\"\n               LIBS=\"-lresolv $LIBS\"\n               AC_TRY_LINK([#include <sys/types.h>\n\t\t\t    #include <netinet/in.h>\n\t\t\t    #include <arpa/nameser.h>\n\t\t\t    #include <resolv.h>\n\t\t\t   ],[\n\t\t\t    res_query(\"test\", 0, 0, (void *)0, 0);\n\t\t\t   ],[AC_MSG_RESULT([in -lresolv])\n                              NETWORK_LIBS=\"-lresolv $NETWORK_LIBS\"],\n                           [LIBS=\"-lbind $save_libs\"\n                            AC_TRY_LINK([#include <resolv.h>],\n                                        [res_query(\"test\", 0, 0, (void *)0, 0);],\n                                        [AC_MSG_RESULT([in -lbind])\n                                         NETWORK_LIBS=\"-lbind $NETWORK_LIBS\"],\n                                        [AC_MSG_ERROR(not found)])])\n               LIBS=\"$save_libs\"])\n  AC_CHECK_FUNC(socket, :, AC_CHECK_LIB(socket, socket,\n\t\t\t\t        [NETWORK_LIBS=\"-lsocket $NETWORK_LIBS\"],\n\t\t\t\t        [AC_MSG_ERROR(Could not find socket())]))\n  save_libs=\"$LIBS\"\n  LIBS=\"$LIBS $NETWORK_LIBS\"\n\n  AC_MSG_CHECKING([for res_init])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n\t       res_init();\n              ],[AC_MSG_RESULT([yes])\n\t         AC_DEFINE(HAVE_RES_INIT, 1, [Define to 1 if you have the 'res_init' function.])\n\t      ],[AC_MSG_RESULT([no])])\n\n  AC_MSG_CHECKING([for res_nclose])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n               struct __res_state res;\n\t       res_nclose(&res);\n              ],[AC_MSG_RESULT([yes])\n\t         AC_DEFINE(HAVE_RES_NCLOSE, 1, [Define to 1 if you have the 'res_nclose' function.])\n\t      ],[AC_MSG_RESULT([no])])\n\n  AC_MSG_CHECKING([for res_ndestroy])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n               struct __res_state res;\n\t       res_ndestroy(&res);\n              ],[AC_MSG_RESULT([yes])\n\t         AC_DEFINE(HAVE_RES_NDESTROY, 1, [Define to 1 if you have the 'res_ndestroy' function.])\n\t      ],[AC_MSG_RESULT([no])])\n\n  AC_MSG_CHECKING([for res_ninit])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n               struct __res_state res;\n\t       res_ninit(&res);\n              ],[AC_MSG_RESULT([yes])\n\t         AC_DEFINE(HAVE_RES_NINIT, 1, [Define to 1 if you have the 'res_ninit' function.])\n\t      ],[AC_MSG_RESULT([no])])\n\n  AC_MSG_CHECKING([for res_nquery])\n  AC_TRY_LINK([#include <sys/types.h>\n\t       #include <netinet/in.h>\n\t       #include <arpa/nameser.h>\n\t       #include <resolv.h>\n              ],[\n               struct __res_state res;\n\t       res_nquery(&res, \"test\", 0, 0, (void *)0, 0);\n              ],[AC_MSG_RESULT([yes])\n\t         AC_DEFINE(HAVE_RES_NQUERY, 1, [Define to 1 if you have the 'res_nquery' function.])\n\t      ],[AC_MSG_RESULT([no])])\n  LIBS=\"$save_libs\"\n])\nAC_SUBST(NETWORK_LIBS)\n\nAC_CHECK_HEADER([linux/netlink.h],\n\t\t[AC_DEFINE(HAVE_NETLINK, 1, [We have AF_NETLINK sockets])],,\n\t\t[#include <sys/socket.h>])\nAM_CONDITIONAL(HAVE_NETLINK, [test \"$ac_cv_header_linux_netlink_h\" = \"yes\"])\n\nAC_CHECK_TYPE([struct ip_mreqn], [\n              AC_DEFINE(HAVE_IP_MREQN,, [Define if we have struct ip_mreqn])],,\n              [#include <netinet/in.h>])\n\ncase $host in\n  *-*-solaris* )\n     AC_DEFINE(_XOPEN_SOURCE_EXTENDED, 1, Needed to get declarations for msg_control and msg_controllen on Solaris)\n     AC_DEFINE(_XOPEN_SOURCE,          2, Needed to get declarations for msg_control and msg_controllen on Solaris)\n     AC_DEFINE(__EXTENSIONS__,         1, Needed to get declarations for msg_control and msg_controllen on Solaris)\n     ;;\nesac\n\ndnl\ndnl if statfs() takes 2 arguments (Posix) or 4 (Solaris)\ndnl\nAS_IF([test \"$ac_cv_func_statfs\" = yes], [\n  AC_MSG_CHECKING([number of arguments to statfs()])\n  AC_TRY_COMPILE([#include <unistd.h>\n  #ifdef HAVE_SYS_PARAM_H\n  #include <sys/param.h>\n  #endif\n  #ifdef HAVE_SYS_VFS_H\n  #include <sys/vfs.h>\n  #endif\n  #ifdef HAVE_SYS_MOUNT_H\n  #include <sys/mount.h>\n  #endif\n  #ifdef HAVE_SYS_STATFS_H\n  #include <sys/statfs.h>\n  #endif], [struct statfs st;\n  statfs(\"/\", &st);],[\n    AC_MSG_RESULT([2])\n    AC_DEFINE(STATFS_ARGS, 2, [Number of arguments to statfs()])],[\n    AC_TRY_COMPILE([#include <unistd.h>\n  #ifdef HAVE_SYS_PARAM_H\n  #include <sys/param.h>\n  #endif\n  #ifdef HAVE_SYS_VFS_H\n  #include <sys/vfs.h>\n  #endif\n  #ifdef HAVE_SYS_MOUNT_H\n  #include <sys/mount.h>\n  #endif\n  #ifdef HAVE_SYS_STATFS_H\n  #include <sys/statfs.h>\n  #endif], [struct statfs st;\n  statfs(\"/\", &st, sizeof (st), 0);],[\n      AC_MSG_RESULT([4])\n      AC_DEFINE(STATFS_ARGS, 4, [Number of arguments to statfs()])],[\n      AC_MSG_RESULT(unknown)\n      AC_MSG_ERROR([unable to determine number of arguments to statfs()])])])\n])\n\ndnl\ndnl open takes O_DIRECTORY as an option\ndnl\nAC_MSG_CHECKING([open() option O_DIRECTORY])\nAC_TRY_COMPILE([#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>],\n[open(0, O_DIRECTORY, 0);],[\n\tAC_MSG_RESULT([yes])\n\tAC_DEFINE(HAVE_OPEN_O_DIRECTORY, 1, [open option O_DIRECTORY])],[\n\tAC_MSG_RESULT([no])])\n\n#\n# Check whether to use an included printf\n#\nAC_FUNC_VSNPRINTF_C99\nAC_FUNC_PRINTF_UNIX98\n\nAC_ARG_ENABLE(included-printf,\n              [AS_HELP_STRING([--enable-included-printf],\n                              [use included printf [default=auto]])],\n              enable_included_printf=\"$enableval\")\n\nneed_included_printf=no\nif test \"x$enable_included_printf\" = \"xyes\" ; then\n  need_included_printf=yes\nfi\nif test \"$ac_cv_func_vsnprintf_c99\" != \"yes\" ; then\n  need_included_printf=yes\nfi\nif test \"$ac_cv_func_printf_unix98\" != \"yes\" ; then\n  need_included_printf=yes\nfi\nif test \"x$ac_cv_sizeof_long_long\" = \"x8\" &&\n   test -z \"$glib_cv_long_long_format\" ; then\n  need_included_printf=yes\nfi\n\nif test \"x$enable_included_printf\" = \"xno\" && \n   test \"x$need_included_printf\" = \"xyes\" ; then\n  AC_MSG_ERROR([\n*** Your C library's printf doesn't appear to have the features that\n*** GLib needs, but you specified --enable-included-printf=no.])\nfi\n\nenable_included_printf=$need_included_printf\n\nAM_CONDITIONAL(HAVE_GOOD_PRINTF, test \"$enable_included_printf\" != \"yes\")\nAS_IF([test \"$enable_included_printf\" != \"yes\"], [\n  AC_DEFINE(HAVE_GOOD_PRINTF,1,[define to use system printf])\n], [\n  if test -z \"$glib_cv_long_long_format\" ; then\n    glib_cv_long_long_format=\"ll\"\n  fi\n  AC_DEFINE(HAVE_VASPRINTF,1)\n])\n\n# Checks needed for gnulib vasnprintf\nbh_C_SIGNED\njm_AC_TYPE_LONG_LONG\ngt_TYPE_LONGDOUBLE\ngt_TYPE_WCHAR_T\ngt_TYPE_WINT_T\nAC_TYPE_SIZE_T\nAC_CHECK_TYPES(ptrdiff_t)\njm_AC_TYPE_INTMAX_T\nAC_CHECK_FUNCS([snprintf strnlen wcslen wcsnlen mbrtowc wcrtomb])\nAC_FUNC_SNPRINTF_C99\n\ndnl Check for nl_langinfo and CODESET\nAC_LANG_SAVE\nAC_LANG_C\nAC_CACHE_CHECK([for nl_langinfo (CODESET)],glib_cv_langinfo_codeset,[\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n                       [char *codeset = nl_langinfo (CODESET);])],\n                [glib_cv_langinfo_codeset=yes],\n                [glib_cv_langinfo_codeset=no])])\nif test x$glib_cv_langinfo_codeset = xyes; then\n  AC_DEFINE(HAVE_CODESET,1,[Have nl_langinfo (CODESET)])\nfi\n\ndnl Check for nl_langinfo and LC_TIME parts that are needed in gdatetime.c\nAC_CACHE_CHECK([for nl_langinfo (PM_STR)],glib_cv_langinfo_time,[\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n                 [char *str;\n                 str = nl_langinfo (PM_STR);\n                 str = nl_langinfo (D_T_FMT);\n                 str = nl_langinfo (D_FMT);\n                 str = nl_langinfo (T_FMT);\n                 str = nl_langinfo (T_FMT_AMPM);\n                 str = nl_langinfo (MON_1);\n                 str = nl_langinfo (ABMON_12);\n                 str = nl_langinfo (DAY_1);\n                 str = nl_langinfo (ABDAY_7);])],\n                [glib_cv_langinfo_time=yes],\n                [glib_cv_langinfo_time=no])])\nif test x$glib_cv_langinfo_time = xyes; then\n  AC_DEFINE(HAVE_LANGINFO_TIME,1,[Have nl_langinfo (PM_STR)])\nfi\n\ndnl Check for nl_langinfo and _NL_CTYPE_OUTDIGITn_MB\nAC_CACHE_CHECK([for nl_langinfo (_NL_CTYPE_OUTDIGITn_MB)], glib_cv_langinfo_outdigit,[\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n                [char *str;\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT0_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT1_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT2_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT3_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT4_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT5_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT6_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT7_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT8_MB);\n                 str = nl_langinfo (_NL_CTYPE_OUTDIGIT9_MB);])],\n                [glib_cv_langinfo_outdigit=yes],\n                [glib_cv_langinfo_outdigit=no])])\nif test x$glib_cv_langinfo_outdigit = xyes; then\n  AC_DEFINE(HAVE_LANGINFO_OUTDIGIT,1,[Have nl_langinfo (_NL_CTYPE_OUTDIGITn_MB)])\nfi\n\ndnl Check for nl_langinfo and ALTMON_n\nAC_CACHE_CHECK([for nl_langinfo (ALTMON_n)], glib_cv_langinfo_altmon,[\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n                [char *str;\n                 str = nl_langinfo (ALTMON_1);\n                 str = nl_langinfo (ALTMON_2);\n                 str = nl_langinfo (ALTMON_3);\n                 str = nl_langinfo (ALTMON_4);\n                 str = nl_langinfo (ALTMON_5);\n                 str = nl_langinfo (ALTMON_6);\n                 str = nl_langinfo (ALTMON_7);\n                 str = nl_langinfo (ALTMON_8);\n                 str = nl_langinfo (ALTMON_9);\n                 str = nl_langinfo (ALTMON_10);\n                 str = nl_langinfo (ALTMON_11);\n                 str = nl_langinfo (ALTMON_12);])],\n                [glib_cv_langinfo_altmon=yes],\n                [glib_cv_langinfo_altmon=no])])\nif test x$glib_cv_langinfo_altmon = xyes; then\n  AC_DEFINE(HAVE_LANGINFO_ALTMON,1,[Have nl_langinfo (ALTMON_n)])\nfi\n\ndnl Check for nl_langinfo and _NL_ABALTMON_n\nAC_CACHE_CHECK([for nl_langinfo (_NL_ABALTMON_n)], glib_cv_langinfo_abaltmon,[\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n                [char *str;\n                 str = nl_langinfo (_NL_ABALTMON_1);\n                 str = nl_langinfo (_NL_ABALTMON_2);\n                 str = nl_langinfo (_NL_ABALTMON_3);\n                 str = nl_langinfo (_NL_ABALTMON_4);\n                 str = nl_langinfo (_NL_ABALTMON_5);\n                 str = nl_langinfo (_NL_ABALTMON_6);\n                 str = nl_langinfo (_NL_ABALTMON_7);\n                 str = nl_langinfo (_NL_ABALTMON_8);\n                 str = nl_langinfo (_NL_ABALTMON_9);\n                 str = nl_langinfo (_NL_ABALTMON_10);\n                 str = nl_langinfo (_NL_ABALTMON_11);\n                 str = nl_langinfo (_NL_ABALTMON_12);])],\n                [glib_cv_langinfo_abaltmon=yes],\n                [glib_cv_langinfo_abaltmon=no])])\nif test x$glib_cv_langinfo_abaltmon = xyes; then\n  AC_DEFINE(HAVE_LANGINFO_ABALTMON,1,[Have nl_langinfo (_NL_ABALTMON_n)])\nfi\nAC_LANG_RESTORE\n\n\ndnl ****************************************\ndnl *** strlcpy/strlcat                  ***\ndnl ****************************************\n# Check for strlcpy\nAC_CACHE_CHECK([for OpenBSD strlcpy/strlcat],glib_cv_have_strlcpy,[\nAC_TRY_RUN([#include <stdlib.h>\n#include <string.h>\nint main() {\n  char p[10];\n  (void) strlcpy (p, \"hi\", 10);\n  if (strlcat (p, \"bye\", 0) != 3) \n    return 1;\n  return 0;\n}], glib_cv_have_strlcpy=yes, \n    glib_cv_have_strlcpy=no,\n    glib_cv_have_strlcpy=no)])\nif test \"$glib_cv_have_strlcpy\" = \"yes\"; then\n    AC_DEFINE(HAVE_STRLCPY,1,[Have functions strlcpy and strlcat])\nfi\n  \n\ndnl **********************\ndnl *** va_copy checks ***\ndnl **********************\ndnl we currently check for all three va_copy possibilities, so we get\ndnl all results in config.log for bug reports.\nAC_CACHE_CHECK([for an implementation of va_copy()],glib_cv_va_copy,[\n\tAC_LINK_IFELSE([AC_LANG_SOURCE([[#include <stdarg.h>\n#include <stdlib.h>\n\tvoid f (int i, ...) {\n\tva_list args1, args2;\n\tva_start (args1, i);\n\tva_copy (args2, args1);\n\tif (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)\n\t  exit (1);\n\tva_end (args1); va_end (args2);\n\t}\n\tint main() {\n\t  f (0, 42);\n\t  return 0;\n\t}]])],\n\t[glib_cv_va_copy=yes],\n\t[glib_cv_va_copy=no])\n])\nAC_CACHE_CHECK([for an implementation of __va_copy()],glib_cv___va_copy,[\n\tAC_LINK_IFELSE([AC_LANG_SOURCE([[#include <stdarg.h>\n#include <stdlib.h>\n\tvoid f (int i, ...) {\n\tva_list args1, args2;\n\tva_start (args1, i);\n\t__va_copy (args2, args1);\n\tif (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)\n\t  exit (1);\n\tva_end (args1); va_end (args2);\n\t}\n\tint main() {\n\t  f (0, 42);\n\t  return 0;\n\t}]])],\n\t[glib_cv___va_copy=yes],\n\t[glib_cv___va_copy=no])\n])\n\nif test \"x$glib_cv_va_copy\" = \"xyes\"; then\n  g_va_copy_func=va_copy\nelse if test \"x$glib_cv___va_copy\" = \"xyes\"; then\n  g_va_copy_func=__va_copy\nfi\nfi\n\nif test -n \"$g_va_copy_func\"; then\n  AC_DEFINE_UNQUOTED(G_VA_COPY,$g_va_copy_func,[A 'va_copy' style function])\nfi\n\nAC_CACHE_CHECK([whether va_lists can be copied by value],glib_cv_va_val_copy,[\n\tAC_TRY_RUN([#include <stdarg.h>\n#include <stdlib.h> \n\tvoid f (int i, ...) {\n\tva_list args1, args2;\n\tva_start (args1, i);\n\targs2 = args1;\n\tif (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)\n\t  exit (1);\n\tva_end (args1); va_end (args2);\n\t}\n\tint main() {\n\t  f (0, 42);\n\t  return 0;\n\t}],\n\t[glib_cv_va_val_copy=yes],\n\t[glib_cv_va_val_copy=no],\n\t[glib_cv_va_val_copy=yes])\n])\n\nAS_IF([ test \"x$glib_cv_va_val_copy\" = \"xno\"], [\n  AC_DEFINE(G_VA_COPY_AS_ARRAY,1, ['va_lists' cannot be copies as values])\n])\n\ndnl ***********************\ndnl *** g_module checks ***\ndnl ***********************\nG_MODULE_LIBS=\nG_MODULE_LIBS_EXTRA=\nG_MODULE_PLUGIN_LIBS=\nif test x\"$glib_native_win32\" = xyes; then\n  dnl No use for this on Win32\n  G_MODULE_LDFLAGS=\nelse\n  export SED\n  eval G_MODULE_LDFLAGS=$export_dynamic_flag_spec\nfi\ndnl G_MODULE_IMPL= don't reset, so cmd-line can override\nG_MODULE_NEED_USCORE=0\nG_MODULE_BROKEN_RTLD_GLOBAL=0\nG_MODULE_HAVE_DLERROR=0\ndnl *** force native WIN32 shared lib loader \nif test -z \"$G_MODULE_IMPL\"; then\n  case \"$host\" in\n  *-*-mingw*|*-*-cygwin*) G_MODULE_IMPL=G_MODULE_IMPL_WIN32 ;;\n  esac\nfi\ndnl *** force native AIX library loader\ndnl *** dlopen() filepath must be of the form /path/libname.a(libname.so)\nif test -z \"$G_MODULE_IMPL\"; then\n  case \"$host\" in\n  *-*-aix*) G_MODULE_IMPL=G_MODULE_IMPL_AR ;;\n  esac\nfi\ndnl *** dlopen() and dlsym() in system libraries\nAS_IF([ test -z \"$G_MODULE_IMPL\"], [\n\tAC_CHECK_FUNC(dlopen,\n\t\t      [AC_CHECK_FUNC(dlsym,\n\t\t\t             [G_MODULE_IMPL=G_MODULE_IMPL_DL],[])],\n\t\t      [])\n])\ndnl *** NSLinkModule (dyld) in system libraries (Darwin)\nAS_IF([ test -z \"$G_MODULE_IMPL\" ], [\n \tAC_CHECK_FUNC(NSLinkModule,\n\t\t      [G_MODULE_IMPL=G_MODULE_IMPL_DYLD\n\t\t       G_MODULE_NEED_USCORE=1],\n\t\t      [])\n])\ndnl *** dlopen() and dlsym() in libdl\nAS_IF([ test -z \"$G_MODULE_IMPL\"], [\n\tAC_CHECK_LIB(dl, dlopen,\n\t\t     [AC_CHECK_LIB(dl, dlsym,\n\t\t\t           [G_MODULE_LIBS=-ldl\n\t\t                   G_MODULE_IMPL=G_MODULE_IMPL_DL],[])],\n\t\t     [])\n])\ndnl *** additional checks for G_MODULE_IMPL_DL\nAS_IF([ test \"$G_MODULE_IMPL\" = \"G_MODULE_IMPL_DL\" ], [\n\tLIBS_orig=\"$LIBS\"\n\tLDFLAGS_orig=\"$LDFLAGS\"\n\tLIBS=\"$G_MODULE_LIBS $LIBS\"\n\tLDFLAGS=\"$LDFLAGS $G_MODULE_LDFLAGS\"\ndnl *** check for OSF1/5.0 RTLD_GLOBAL brokenness\n\techo \"void glib_plugin_test(void) { }\" > plugin.c\n\t${SHELL} ./libtool --mode=compile --tag=CC ${CC} ${CFLAGS} \\\n\t\t${CPPFLAGS} -c -o plugin.lo plugin.c >/dev/null 2>&1\n\t${SHELL} ./libtool --mode=link --tag=CC ${CC} ${CFLAGS} \\\n\t\t${LDFLAGS} -module -o plugin.la -export-dynamic \\\n\t\t-shrext \".o\" -avoid-version plugin.lo \\\n\t\t-rpath /dont/care >/dev/null 2>&1\n\tAC_CACHE_CHECK([for RTLD_GLOBAL brokenness],\n\t\tglib_cv_rtldglobal_broken,[\n\t\tAC_TRY_RUN([\n#include <dlfcn.h>\n#ifndef RTLD_GLOBAL\n#  define RTLD_GLOBAL 0\n#endif\n#ifndef RTLD_LAZY\n#  define RTLD_LAZY 0\n#endif\nint glib_plugin_test;\nint main () {\n    void *handle, *global, *local;\n    global = &glib_plugin_test;\n    handle = dlopen (\"./$objdir/plugin.o\", RTLD_GLOBAL | RTLD_LAZY);\n    if (!handle) return 0;\n    local = dlsym (handle, \"glib_plugin_test\");\n    return global == local;\n}                       ],\n\t\t\t[glib_cv_rtldglobal_broken=no],\n\t\t\t[glib_cv_rtldglobal_broken=yes],\n\t\t\t[glib_cv_rtldglobal_broken=no])\n\t\trm -f plugin.c plugin.o plugin.lo plugin.la ${objdir}/plugin.*\n\t\trmdir ${objdir} 2>/dev/null\n\t])\n\tif test \"x$glib_cv_rtldglobal_broken\" = \"xyes\"; then\n  \t\tG_MODULE_BROKEN_RTLD_GLOBAL=1\n\telse\n  \t\tG_MODULE_BROKEN_RTLD_GLOBAL=0\n\tfi\ndnl *** check whether we need preceeding underscores\n\tAC_CACHE_CHECK([for preceeding underscore in symbols],\n\t\tglib_cv_uscore,[\n\t\tAC_TRY_RUN([#include <dlfcn.h>\n                int glib_underscore_test (void) { return 42; }\n\t\tint main() {\n\t\t  void *f1 = (void*)0, *f2 = (void*)0, *handle;\n\t\t  handle = dlopen ((void*)0, 0);\n\t\t  if (handle) {\n\t\t    f1 = dlsym (handle, \"glib_underscore_test\");\n\t\t    f2 = dlsym (handle, \"_glib_underscore_test\");\n\t\t  } return (!f2 || f1);\n\t\t}],\n\t\t\t[glib_cv_uscore=yes],\n\t\t\t[glib_cv_uscore=no],\n\t\t\t[])\n\t\trm -f plugin.c plugin.$ac_objext plugin.lo\n\t])\n        GLIB_ASSERT_SET(glib_cv_uscore)\n\tif test \"x$glib_cv_uscore\" = \"xyes\"; then\n  \t\tG_MODULE_NEED_USCORE=1\n\telse\n  \t\tG_MODULE_NEED_USCORE=0\n\tfi\n\n        AC_CHECK_DECL([RTLD_LAZY],\n                      [AC_DEFINE(HAVE_RTLD_LAZY, 1, [Define to 1 if RTLD_LAZY is available])],\n                      [], [[#include <dlfcn.h>]])\n        AC_CHECK_DECL([RTLD_NOW],\n                      [AC_DEFINE(HAVE_RTLD_NOW, 1, [Define to 1 if RTLD_NOW is available])],\n                      [], [[#include <dlfcn.h>]])\n        AC_CHECK_DECL([RTLD_GLOBAL],\n                      [AC_DEFINE(HAVE_RTLD_GLOBAL, 1, [Define to 1 if RTLD_GLOBAL is available])],\n                      [], [[#include <dlfcn.h>]])\n\n\tLDFLAGS=\"$LDFLAGS_orig\"\ndnl *** check for having dlerror()\n\tAC_CHECK_FUNC(dlerror,\n\t\t[G_MODULE_HAVE_DLERROR=1],\n\t\t[G_MODULE_HAVE_DLERROR=0])\n\tLIBS=\"$LIBS_orig\"\n])\ndnl *** done, have we got an implementation?\nif test -z \"$G_MODULE_IMPL\"; then\n\tG_MODULE_IMPL=0\n        G_MODULE_SUPPORTED=false\nelse\n        G_MODULE_SUPPORTED=true\nfi\n\nAC_MSG_CHECKING(for the suffix of module shared libraries)\nexport SED\nmodule=yes eval std_shrext=$shrext_cmds\n# chop the initial dot\nglib_gmodule_suffix=`echo $std_shrext | sed 's/^\\.//'`\nAC_MSG_RESULT(.$glib_gmodule_suffix)\n# any reason it may fail?\nif test \"x$glib_gmodule_suffix\" = x; then\n\tAC_MSG_ERROR(Cannot determine shared library suffix from libtool)\nfi\n \nAC_SUBST(G_MODULE_SUPPORTED)\nAC_SUBST(G_MODULE_IMPL)\nAC_SUBST(G_MODULE_LIBS)\nAC_SUBST(G_MODULE_LIBS_EXTRA)\nAC_SUBST(G_MODULE_PLUGIN_LIBS)\nAC_SUBST(G_MODULE_LDFLAGS)\nAC_SUBST(G_MODULE_HAVE_DLERROR)\nAC_SUBST(G_MODULE_BROKEN_RTLD_GLOBAL)\nAC_SUBST(G_MODULE_NEED_USCORE)\nAC_SUBST(GLIB_DEBUG_FLAGS)\n\ndnl **********************\ndnl *** g_spawn checks ***\ndnl **********************\n\nAC_MSG_CHECKING(for gspawn implementation)\ncase \"$host\" in\n  *-*-mingw*)\n    g_spawn_impl=win32\n    ;;\n  *)\n    g_spawn_impl=unix\n    ;;    \nesac\nAC_MSG_RESULT($g_spawn_impl)\nAM_CONDITIONAL(G_SPAWN_WIN32, [test \"$g_spawn_impl\" = \"win32\"])\n\ndnl *************************\ndnl *** GIOChannel checks ***\ndnl *************************\n\nAC_MSG_CHECKING(for GIOChannel implementation)\ncase \"$host\" in\n  *-*-mingw*)\n    g_io_channel_impl=win32\n    ;;\n  *)\n    g_io_channel_impl=unix\n    ;;    \nesac\nAC_MSG_RESULT($g_io_channel_impl)\nAM_CONDITIONAL(G_IO_CHANNEL_WIN32, [test \"$g_io_channel_impl\" = \"win32\"])\n\ndnl *********************************\ndnl *** Directory for GIO modules ***\ndnl *********************************\n\nAC_ARG_WITH(gio-module-dir,\n           [AS_HELP_STRING([--with-gio-module-dir=DIR],\n                           [load gio modules from this directory [LIBDIR/gio/modules]])],\n           [],\n\t   [with_gio_module_dir='${libdir}/gio/modules'])\nGIO_MODULE_DIR=$with_gio_module_dir\nAC_SUBST(GIO_MODULE_DIR)\n\ndnl **********************************\ndnl *** Check for libselinux (GIO) ***\ndnl **********************************\nAC_ARG_ENABLE(selinux,\n              AS_HELP_STRING([--disable-selinux],\n                             [build without selinux support]))\nmsg_selinux=no\nSELINUX_LIBS=\nAS_IF([ test \"x$enable_selinux\" != \"xno\"], [\n\n AC_CHECK_LIB(selinux, is_selinux_enabled,\n   [AC_CHECK_HEADERS(selinux/selinux.h,\n     [AC_CHECK_LIB(selinux, lgetfilecon_raw, \n       [AC_DEFINE(HAVE_SELINUX, 1, [Define to 1 if libselinux is available])\n        SELINUX_LIBS=\"-lselinux\"\n        msg_selinux=yes])\n     ])\n   ])\n])\nAC_SUBST(SELINUX_LIBS)\n\ndnl *****************************\ndnl ** Check for inotify (GIO) **\ndnl *****************************\ninotify_support=no\nAC_CHECK_HEADERS([sys/inotify.h],\n[\n  AC_CHECK_FUNCS(inotify_init1, [inotify_support=yes], [inotify_support=no])\n])\n\nAM_CONDITIONAL(HAVE_INOTIFY, [test \"$inotify_support\" = \"yes\"])\n\ndnl ****************************\ndnl ** Check for kqueue (GIO) **\ndnl ****************************\nkqueue_support=no\nAC_CHECK_HEADERS([sys/event.h],\n[\n\tAC_CHECK_FUNCS(kqueue kevent, [kqueue_support=yes])\n])\n\nAM_CONDITIONAL(HAVE_KQUEUE, [test \"$kqueue_support\" = \"yes\"])\n\ndnl ****************************\ndnl *** Checks for FAM (GIO) ***\ndnl ****************************\n\nshould_disable_fam=no\n\nAC_ARG_ENABLE(fam,\n              AS_HELP_STRING([--disable-fam],\n                             [don't use fam for file system monitoring]),\n                         [\n                                if test \"x$enable_fam\" = \"xno\"; then\n                                        should_disable_fam=yes\n                                fi\n                         ]\n                         )\nfam_support=no\nFAM_LIBS=\nif test \"x$should_disable_fam\" = \"xno\"; then\nAC_CHECK_LIB(fam, FAMOpen,\n  [AC_CHECK_HEADERS(fam.h,\n    [AC_CHECK_LIB(fam, FAMNoExists,\n     \t\t  AC_DEFINE(HAVE_FAM_NO_EXISTS, [], [Define if we have FAMNoExists in fam]))\n     FAM_LIBS=\"-lfam\"]\n     fam_support=yes,\n    AC_MSG_WARN(*** FAM support will not be built (header files not found) ***))],\n  AC_MSG_WARN(*** FAM support will not be built (FAM library not found) ***))\nAC_SUBST(FAM_LIBS)\nfi\nAM_CONDITIONAL(HAVE_FAM, [test \"$fam_support\" = \"yes\"])\n\n\ndnl *****************************\ndnl *** Check for xattr (GIO) ***\ndnl *****************************\nAC_ARG_ENABLE(xattr,\n              AS_HELP_STRING([--disable-xattr], [build without xattr support]))\nmsg_xattr=no\nXATTR_LIBS=\nAS_IF([ test \"x$enable_xattr\" != \"xno\"], [\n\ndnl either glibc or libattr can provide xattr support\n\ndnl for both of them, we check for getxattr being in\ndnl the library and a valid xattr header.\n\ndnl try glibc\n AC_CHECK_LIB(c, getxattr,\n   [AC_CHECK_HEADERS(sys/xattr.h,\n     [AC_DEFINE(HAVE_XATTR, 1, [Define to 1 if xattr is available])\n      msg_xattr=yes])\n   ])\n\n  AS_IF([ test \"x$msg_xattr\" != \"xyes\"], [\ndnl   failure. try libattr\n   AC_CHECK_LIB(attr, getxattr,\n      [AC_CHECK_HEADERS(attr/xattr.h,\n       [AC_DEFINE(HAVE_XATTR, 1, [Define to 1 if xattr is available])\n        XATTR_LIBS=\"-lattr\"\n        msg_xattr=yes])\n      ])\n  ])\n\n  AS_IF([ test \"x$msg_xattr\" = \"xyes\"], [\n    AC_MSG_CHECKING([for XATTR_NOFOLLOW])\n    AC_TRY_COMPILE([\n      #include <stdio.h>\n      #ifdef HAVE_SYS_TYPES_H\n      #include <sys/types.h>\n      #endif\n      #ifdef HAVE_SYS_XATTR_H\n      #include <sys/xattr.h>\n      #elif HAVE_ATTR_XATTR_H\n      #include <attr/xattr.h>\n      #endif\n    ],\n    [ssize_t len = getxattr(\"\", \"\", NULL, 0, 0, XATTR_NOFOLLOW);],\n    [\n      AC_DEFINE([HAVE_XATTR_NOFOLLOW], [1], [Define to 1 if xattr API uses XATTR_NOFOLLOW])\n      AC_MSG_RESULT([yes])\n    ],\n    [AC_MSG_RESULT([no])]\n    )\n  ])\n])\nAC_SUBST(XATTR_LIBS)\n\ndnl ************************\ndnl *** check for libelf ***\ndnl ************************\nAC_ARG_ENABLE(libelf,\n              AS_HELP_STRING([--disable-libelf], [build without libelf support]))\nAS_IF([ test \"x$enable_libelf\" != \"xno\"],[\nPKG_CHECK_MODULES([LIBELF], [libelf >= 0.8.12], [have_libelf=yes], [have_libelf=maybe])\nAS_IF([ test $have_libelf = maybe ], [\n  glib_save_LIBS=$LIBS\n  AC_CHECK_LIB([elf], [elf_begin], [:], [have_libelf=no])\n  AC_CHECK_LIB([elf], [elf_getshdrstrndx], [:], [have_libelf=no])\n  AC_CHECK_LIB([elf], [elf_getshdrnum], [:], [have_libelf=no])\n  AC_CHECK_HEADER([libelf.h], [:], [have_libelf=no])\n  LIBS=$glib_save_LIBS\n\n  if test $have_libelf != no; then\n    LIBELF_LIBS=-lelf\n    have_libelf=yes\n  fi\n])\n])\n\nif test x$have_libelf = xyes; then\n  AC_DEFINE(HAVE_LIBELF, 1, [Define if libelf is available])\nfi\n\ndnl ************************\ndnl *** check for libmount ***\ndnl ************************\n\ndnl The fallback code doesn't really implement the same behaviors - e.g.\ndnl so on linux we want to require libmount unless specifically disabled\ndnl\nenable_libmount_default=${glib_os_linux:-no}\nAC_ARG_ENABLE(libmount,\n              [AS_HELP_STRING([--enable-libmount],\n                              [build with libmount support [default for Linux]])],,\n              [enable_libmount=$enable_libmount_default])\nAS_IF([ test \"x$enable_libmount\" = \"xyes\"],[\nPKG_CHECK_MODULES([LIBMOUNT], [mount >= 2.23], [have_libmount=yes], [have_libmount=no])\nif test $have_libmount = no ; then\n   AC_MSG_ERROR([*** Could not find libmount])\nfi\n])\n\nif test x$have_libmount = xyes; then\n  LIBMOUNT_REQUIRES=\"mount >= 2.23\"\n  AC_DEFINE(HAVE_LIBMOUNT, 1, [Define if libmount is available])\nelse\n  LIBMOUNT_REQUIRES=\"\"\nfi\nAM_CONDITIONAL(HAVE_LIBMOUNT, [test x$have_libmount = xyes])\nAC_SUBST([LIBMOUNT_REQUIRES])\n\ndnl ****************************************\ndnl *** platform dependent source checks ***\ndnl ****************************************\n\nAC_MSG_CHECKING([whether to compile timeloop])\ncase \"$host\" in\n  *-*-cygwin*|*-*-mingw*|*-*-minix)\n    enable_timeloop=no\n    ;;\n  *)\n    enable_timeloop=yes\n    ;;    \nesac\nAC_MSG_RESULT($enable_timeloop)\nAM_CONDITIONAL(ENABLE_TIMELOOP, test x$enable_timeloop = xyes)\n\nAC_MSG_CHECKING([if building for some Win32 platform])\ncase \"$host\" in\n  *-*-mingw*|*-*-cygwin*)\n    platform_win32=yes\n    ;;\n  *)\n    platform_win32=no\n    ;;\nesac\nAC_MSG_RESULT($platform_win32)\nAM_CONDITIONAL(PLATFORM_WIN32, test x$platform_win32 = xyes)\n\ndnl ***********************\ndnl *** g_thread checks ***\ndnl ***********************\n\nAC_ARG_WITH(threads,\n           [AS_HELP_STRING([--with-threads=@<:@posix/win32@:>@],\n                           [specify a thread implementation to use])],\n           [],\n           [with_threads=yes])\n\ndnl error and warning message\ndnl *************************\n\nTHREAD_NO_IMPLEMENTATION=\"No thread implementation found.\"\n\nFLAG_DOES_NOT_WORK=\"I can't find the MACRO to enable thread safety on your\n                platform (normally it's \"_REENTRANT\"). I'll not use any flag on\n                compilation now, but then your programs might not work.\n                Please provide information on how it is done on your system.\"\n\nLIBS_NOT_FOUND_1=\"I can't find the libraries for the thread implementation\n                 \"\n\nLIBS_NOT_FOUND_2=\". Please choose another thread implementation or\n                  provide information on your thread implementation.\"\n\nFUNC_NO_GETPWUID_R=\"the 'g_get_(user_name|real_name|home_dir|tmp_dir)'\n\t\tfunctions will not be MT-safe during their first call because\n\t\tthere is no working 'getpwuid_r' on your system.\"\n\nFUNC_NO_LOCALTIME_R=\"the 'g_date_set_time' function will not be MT-safe\n\t\tbecause there is no 'localtime_r' on your system.\"\n\nAIX_COMPILE_INFO=\"AIX's C compiler needs to be called by a different name, when\n\t\tlinking threaded applications. As GLib cannot do that \n\t\tautomatically, you will get an linking error every time you are\n\t\tnot using the right compiler. In that case you have to relink \n\t\twith the right compiler. Ususally just '_r' is appended \n\t\tto the compiler name.\"\n\ndnl determination of thread implementation\ndnl ***************************************\n\nAC_MSG_CHECKING(for thread implementation)\n\nhave_threads=no\nAS_IF([ test \"x$with_threads\" = xyes || test \"x$with_threads\" = xposix], [\n        AS_IF([ test \"x$have_threads\" = xno], [\n                AC_TRY_COMPILE([#include <pthread.h>],\n\t\t\t[pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;],\n\t\t\thave_threads=posix)\n\t])\n\t# Tru64Unix requires -pthread to find pthread.h. See #103020\n\tif test \"x$have_threads\" = xno; then\n\t\tglib_save_CPPFLAGS=\"$CPPFLAGS\"\n\t\tCPPFLAGS=\"$CPPFLAGS -pthread\"\n\t\tAC_TRY_COMPILE([#include <pthread.h>],\n\t\t       [pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;],\n\t\t       have_threads=posix)\n\t\tCPPFLAGS=\"$glib_save_CPPFLAGS\"\n        fi\n])\nif test \"x$with_threads\" = xyes || test \"x$with_threads\" = xwin32; then\n        case $host in\n                *-*-mingw*)\n                have_threads=win32\n                ;;\n        esac\nfi\n\nif test \"x$have_threads\" = xno; then\n        AC_MSG_RESULT(none available)\n        AC_MSG_ERROR($THREAD_NO_IMPLEMENTATION)\nelse\n        AC_MSG_RESULT($have_threads)\nfi\n\n\ndnl determination of G_THREAD_CFLAGS\ndnl ********************************\n\nG_THREAD_LIBS=\nG_THREAD_LIBS_EXTRA=\nG_THREAD_CFLAGS=\n\ndnl\ndnl Test program for basic POSIX threads functionality\ndnl\nm4_define([glib_thread_test],[\n#include <pthread.h> \nint check_me = 0;\nvoid* func(void* data) {check_me = 42; return &check_me;}\nint main()\n { pthread_t t; \n   void *ret;\n   pthread_create (&t, $1, func, 0);\n   pthread_join (t, &ret);\n   return (check_me != 42 || ret != &check_me);\n}])\n\nAS_IF([ test x\"$have_threads\" = xposix], [\n  # First we test for posix, whether -pthread or -pthreads do the trick as \n  # both CPPFLAG and LIBS. \n  # One of them does for most gcc versions and some other platforms/compilers\n  # too and could be considered as the canonical way to go. \n  case $host in\n    *-*-cygwin*|*-*-darwin*)\n       # skip cygwin and darwin -pthread or -pthreads test\n       ;;\n    *-solaris*)\n      # These compiler/linker flags work with both Sun Studio and gcc\n      # Sun Studio expands -mt to -D_REENTRANT and -lthread\n      # gcc expands -pthreads to -D_REENTRANT -D_PTHREADS -lpthread\n      G_THREAD_CFLAGS=\"-D_REENTRANT -D_PTHREADS\"\n      G_THREAD_LIBS=\"-lpthread -lthread\"\n      ;;\n    *)\n      for flag in pthread pthreads mt; do\n        glib_save_CFLAGS=\"$CFLAGS\"\n        CFLAGS=\"$CFLAGS -$flag\"\n        AC_TRY_RUN(glib_thread_test(0),\n                   glib_flag_works=yes,\n                   glib_flag_works=no,\n                   [AC_LINK_IFELSE([AC_LANG_SOURCE(glib_thread_test(0))],\n                                   glib_flag_works=yes,\n                                   glib_flag_works=no)])\n        CFLAGS=\"$glib_save_CFLAGS\"\n        if test $glib_flag_works = yes ; then\n           G_THREAD_CFLAGS=-$flag\n        G_THREAD_LIBS=-$flag\n        break;\n        fi\n      done\n       ;;\n  esac\n])\n\nAS_IF([ test x\"$G_THREAD_CFLAGS\" = x], [\n\n  # The canonical -pthread[s] does not work. Try something different.\n\n  case $host in\n\t*-aix*)\n\t\tif test x\"$GCC\" = xyes; then\n\t\t\t# GCC 3.0 and above needs -pthread. \n\t\t\t# Should be coverd by the case above.\n\t\t\t# GCC 2.x and below needs -mthreads\n\t\t\tG_THREAD_CFLAGS=\"-mthreads\"\t\t\n\t\t\tG_THREAD_LIBS=$G_THREAD_CFLAGS\n\t\telse \n\t\t\t# We are probably using the aix compiler. Normaly a \n\t\t\t# program would have to be compiled with the _r variant\n\t\t\t# of the corresponding compiler, but we as GLib cannot \n\t\t\t# do that: but the good news is that for compiling the\n\t\t\t# only difference is the added -D_THREAD_SAFE compile \n\t\t\t# option. This is according to the \"C for AIX User's \n\t\t\t# Guide\".\n\t\t\tG_THREAD_CFLAGS=\"-D_THREAD_SAFE\"\n\t\tfi\n\t\t;;\n\t*-sysv5uw7*) # UnixWare 7 \n\t\t# We are not using gcc with -pthread. Catched above.\n\t\tG_THREAD_CFLAGS=\"-Kthread\"\n\t\tG_THREAD_LIBS=$G_THREAD_CFLAGS\n\t\t;;\n\t*-mingw*)\n\t\t# No flag needed when using MSVCRT.DLL\n\t\tG_THREAD_CFLAGS=\"\"\n\t\t;;\n\t*)\n\t\tG_THREAD_CFLAGS=\"-D_REENTRANT\" # good default guess otherwise\n\t\t;;\n  esac\n])\n\n# if we are not finding the localtime_r function, then we probably are\n# not using the proper multithread flag\n\nglib_save_CPPFLAGS=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $G_THREAD_CFLAGS\"\n\n# First we test, whether localtime_r is declared in time.h\n# directly. Then we test whether a macro localtime_r exists, in\n# which case localtime_r in the test program is replaced and thus\n# if we still find localtime_r in the output, it is not defined as \n# a macro.\n\nAC_EGREP_CPP([[^a-zA-Z1-9_]localtime_r[^a-zA-Z1-9_]], [#include <time.h>], ,\n  [AC_EGREP_CPP([[^a-zA-Z1-9_]localtime_r[^a-zA-Z1-9_]], [#include <time.h> \n\t\t\t\t\t\t\t   localtime_r(a,b)],\n  \t\t   AC_MSG_WARN($FLAG_DOES_NOT_WORK))])\n\nCPPFLAGS=\"$glib_save_CPPFLAGS\"\n\nAC_MSG_CHECKING(thread related cflags)\nAC_MSG_RESULT($G_THREAD_CFLAGS)\nCPPFLAGS=\"$CPPFLAGS $G_THREAD_CFLAGS\"\n\ndnl determination of G_THREAD_LIBS\ndnl ******************************\n\nAS_IF([test x$have_threads = xposix], [\n\t  glib_save_CPPFLAGS=\"$CPPFLAGS\"\n\t  CPPFLAGS=\"$CPPFLAGS $GTHREAD_COMPILE_IMPL_DEFINES\"\n          AS_IF([ test x\"$G_THREAD_LIBS\" = x ], [\n            case $host in\n              *-aix*)\n                # We are not using gcc (would have set G_THREAD_LIBS) and thus \n                # probably using the aix compiler.\n\t\tAC_MSG_WARN($AIX_COMPILE_INFO)\n                ;;\n              *)\n                G_THREAD_LIBS=error\n\t        glib_save_LIBS=\"$LIBS\"\n\t        for thread_lib in \"\" pthread pthread32 pthreads thread; do\n\t\t\tif test x\"$thread_lib\" = x; then\n\t\t\t\tadd_thread_lib=\"\"\n\t\t\t\tIN=\"\"\n\t\t\telse\n\t\t\t\tadd_thread_lib=\"-l$thread_lib\"\n\t\t\t\tIN=\" in -l$thread_lib\"\n\t\t\tfi\n\t\t\tif test x\"$have_threads\" = xposix; then\n\t\t\t\tdefattr=0\n\t\t\telse\n\t\t\t\tdefattr=pthread_attr_default\n\t\t\tfi\n\t\t\t\n\t\t\tLIBS=\"$add_thread_lib $glib_save_LIBS\"\n\t\t\t\n\t\t\tAC_MSG_CHECKING(for pthread_create/pthread_join$IN)\n\t\t\tAC_TRY_RUN(glib_thread_test($defattr),\n                                   glib_result=yes,\n                                   glib_result=no,\n                                   [AC_LINK_IFELSE([AC_LANG_SOURCE(glib_thread_test($defattr))],\n                                                   glib_result=yes,\n                                                   glib_result=no)])\n                        AC_MSG_RESULT($glib_result)\n\t\t\t\n                        if test \"$glib_result\" = \"yes\" ; then\n\t\t\t  G_THREAD_LIBS=\"$add_thread_lib\"\n                          break\n                        fi\n\t\tdone\n\t\tif test \"x$G_THREAD_LIBS\" = xerror; then\n\t\t  AC_MSG_ERROR($LIBS_NOT_FOUND_1$have_threads$LIBS_NOT_FOUND_2)\n\t\tfi \n\t\tLIBS=\"$glib_save_LIBS\"\n                ;;\n            esac\n\t  ])\n\n\t  g_threads_impl=\"POSIX\"\n          AC_DEFINE([THREADS_POSIX], [1], [Use pthreads])\n\t  AC_SUBST(GTHREAD_COMPILE_IMPL_DEFINES)\n          CPPFLAGS=\"$glib_save_CPPFLAGS\"\n], [test x$have_threads = xwin32], [\n           AC_DEFINE([THREADS_WIN32], [1], [Use w32 threads])\n\t   g_threads_impl=\"WIN32\"\n], [\n\t   g_threads_impl=\"NONE\"\n           G_THREAD_LIBS=error\n])\nAM_CONDITIONAL(THREADS_POSIX, [test \"$g_threads_impl\" = \"POSIX\"])\nAM_CONDITIONAL(THREADS_WIN32, [test \"$g_threads_impl\" = \"WIN32\"])\n\nif test \"x$G_THREAD_LIBS\" = xerror; then\n        AC_MSG_ERROR($LIBS_NOT_FOUND_1$have_threads$LIBS_NOT_FOUND_2)\nfi\n\nAC_MSG_CHECKING(thread related libraries)\nAC_MSG_RESULT($G_THREAD_LIBS)\n\ndnl check for mt safe function variants and some posix functions\ndnl ************************************************************\n\nglib_save_LIBS=\"$LIBS\"\n# we are not doing the following for now, as this might require glib \n# to always be linked with the thread libs on some platforms. \n# LIBS=\"$LIBS $G_THREAD_LIBS\"\nAC_CHECK_FUNCS(localtime_r gmtime_r getpwuid_r getgrgid_r)\n\nLIBS=\"$G_THREAD_LIBS $LIBS\"\nAS_IF([ test x\"$have_threads\" = xposix], [\n        glib_save_CPPFLAGS=\"$CPPFLAGS\"\n        CPPFLAGS=\"$CPPFLAGS $GTHREAD_COMPILE_IMPL_DEFINES\"\n        # This is not AC_CHECK_FUNC to also work with function\n        # name mangling in header files.\n        AC_MSG_CHECKING(for pthread_attr_setstacksize)\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [pthread_attr_t t; pthread_attr_setstacksize(&t,0)])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_ATTR_SETSTACKSIZE,1,\n                [Have function pthread_attr_setstacksize])],\n            [AC_MSG_RESULT(no)])\n        AC_MSG_CHECKING(for pthread_condattr_setclock)\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [pthread_condattr_t a; pthread_condattr_setclock(&a,0)])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_CONDATTR_SETCLOCK,1,\n                [Have function pthread_condattr_setclock])],\n            [AC_MSG_RESULT(no)])\n        AC_MSG_CHECKING(for pthread_cond_timedwait_relative_np)\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [pthread_cond_timedwait_relative_np(NULL, NULL, NULL)])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE_NP,1,\n                [Have function pthread_cond_timedwait_relative_np])],\n            [AC_MSG_RESULT(no)])\n        dnl Sets thread names on OS X 10.6, iOS 3.2 (and higher)\n        AC_MSG_CHECKING(for pthread_setname_np(const char*))\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [pthread_setname_np(\"example\")])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_SETNAME_NP_WITHOUT_TID,1,\n                [Have function pthread_setname_np(const char*)])],\n            [AC_MSG_RESULT(no)])\n        dnl Sets thread names on Solaris 11.3 & higher\n        AC_MSG_CHECKING(for pthread_setname_np(pthread_t, const char*))\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [pthread_setname_np(pthread_self(), \"example\")])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_SETNAME_NP_WITH_TID,1,\n                [Have function pthread_setname_np(pthread_t, const char*)])],\n            [AC_MSG_RESULT(no)])\n        AC_MSG_CHECKING(for pthread_getname_np(pthread_t, name, len))\n        AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM(\n                [#include <pthread.h>],\n                [[char name[16]; pthread_getname_np(pthread_self(), name, 16);]])],\n            [AC_MSG_RESULT(yes)\n             AC_DEFINE(HAVE_PTHREAD_GETNAME_NP,1,\n                [Have function pthread_getname_np(pthread_t, name, len)])],\n            [AC_MSG_RESULT(no)])\n        CPPFLAGS=\"$glib_save_CPPFLAGS\"\n])\n\nLIBS=\"$glib_save_LIBS\"\n\n# now spit out all the warnings.\nif test \"$ac_cv_func_getpwuid_r\" != \"yes\"; then\n\tAC_MSG_WARN($FUNC_NO_GETPWUID_R)\nfi\nif test \"$ac_cv_func_localtime_r\" != \"yes\"; then\n\tAC_MSG_WARN($FUNC_NO_LOCALTIME_R)\nfi\n\n#\n# Hack to deal with:\n# \n#  a) GCC < 3.3 for Linux doesn't include -lpthread when\n#     building shared libraries with linux.\n#  b) FreeBSD doesn't do this either.\n#\ncase $host in\n  *android*)\n    G_THREAD_LIBS_FOR_GTHREAD=\"$G_THREAD_LIBS\"\n    ;;\n  *-*-freebsd*|*-*-linux*)\n    G_THREAD_LIBS_FOR_GTHREAD=\"`echo $G_THREAD_LIBS | sed s/-pthread/-lpthread/`\"\n    ;;\n  *)\n    G_THREAD_LIBS_FOR_GTHREAD=\"$G_THREAD_LIBS\"\n    ;;\nesac\n\nAC_SUBST(G_THREAD_CFLAGS)\nAC_SUBST(G_THREAD_LIBS)\nAC_SUBST(G_THREAD_LIBS_FOR_GTHREAD)\nAC_SUBST(G_THREAD_LIBS_EXTRA)\n\nAC_CHECK_FUNCS(clock_gettime, [], [\n  AC_CHECK_LIB(rt, clock_gettime, [\n    G_THREAD_LIBS=\"$G_THREAD_LIBS -lrt\"\n    G_THREAD_LIBS_FOR_GTHREAD=\"$G_THREAD_LIBS_FOR_GTHREAD -lrt\"\n  ])\n])\n\n\ndnl ************************\ndnl *** g_atomic_* tests ***\ndnl ************************\n\ndnl We need to decide at configure time if GLib will use real atomic\ndnl operations (\"lock free\") or emulated ones with a mutex.  This is\ndnl because we must put this information in glibconfig.h so we know if\ndnl it is safe or not to inline using compiler intrinsics directly from\ndnl the header.\ndnl\ndnl We also publish the information via G_ATOMIC_LOCK_FREE in case the\ndnl user is interested in knowing if they can use the atomic ops across\ndnl processes.\ndnl\ndnl We can currently support the atomic ops natively when building GLib\ndnl with recent versions of GCC or MSVC.  MSVC doesn't run ./configure,\ndnl so we skip that case here and define G_ATOMIC_LOCK_FREE exactly when\ndnl we are using GCC (and not mingw*).\ndnl\ndnl Note that the atomic ops are only available with GCC on x86 when\ndnl using -march=i486 or higher.  If we detect that the atomic ops are\ndnl not available but would be available given the right flags, we want\ndnl to abort and advise the user to fix their CFLAGS.  It's better to do\ndnl that then to silently fall back on emulated atomic ops just because\ndnl the user had the wrong build environment.\n\ndnl We may add other compilers here in the future...\n\nAC_CACHE_CHECK([for lock-free atomic intrinsics], glib_cv_g_atomic_lock_free, [\n  case $host in\n    *-*-mingw*)\n      glib_cv_g_atomic_lock_free=yes\n      ;;\n    *)\n      AC_TRY_LINK([],\n                     [volatile int atomic = 2;\\\n                      __sync_bool_compare_and_swap (&atomic, 2, 3);],\n                     [glib_cv_g_atomic_lock_free=yes],\n                     [glib_cv_g_atomic_lock_free=no])\n      if test \"$glib_cv_g_atomic_lock_free\" = \"no\"; then\n        SAVE_CFLAGS=\"${CFLAGS}\"\n        CFLAGS=\"-march=i486\"\n        AC_TRY_LINK([],\n                       [volatile int atomic = 2;\\\n                        __sync_bool_compare_and_swap (&atomic, 2, 3);],\n                       [AC_MSG_ERROR([GLib must be built with -march=i486 or later.])],\n                       [])\n        CFLAGS=\"${SAVE_CFLAGS}\"\n      fi\n      ;;\n  esac])\n\n\ncase $host in\n  *-*-mingw*)\n    ;;\n  *)\n    # Some compilers support atomic operations but do not define\n    # __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4, like clang\n    if test x\"$glib_cv_g_atomic_lock_free\" = xyes; then\n      AC_TRY_LINK([],\n                     [__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4;],\n                     [],\n                     [AC_DEFINE(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4, 1, [ compiler supports atomic operations])])\n    fi\n    ;;\n esac\n\ndnl We need a more robust approach here...\ncase $host_cpu in\n  i?86|x86_64|s390|s390x|arm*|crisv32*|etrax*)\n    glib_memory_barrier_needed=no\n    ;;\n  sparc*|alpha*|powerpc*|ia64)\n    glib_memory_barrier_needed=yes\n    ;;\n  *)\n    glib_memory_barrier_needed=yes\n    ;;\nesac\n\ndnl ************************\ndnl ** Check for futex(2) **\ndnl ************************\nAC_CACHE_CHECK(for futex(2) system call,\n    glib_cv_futex,AC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n#include <linux/futex.h>\n#include <sys/syscall.h>\n#include <unistd.h>\n],[\n  syscall (__NR_futex, NULL, FUTEX_WAKE, FUTEX_WAIT);\n])],glib_cv_futex=yes,glib_cv_futex=no))\nif test x\"$glib_cv_futex\" = xyes; then\n  AC_DEFINE(HAVE_FUTEX, 1, [we have the futex(2) system call])\nfi\n\nAC_CACHE_CHECK(for eventfd(2) system call,\n    glib_cv_eventfd,AC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n#include <sys/eventfd.h>\n#include <unistd.h>\n],[\n  eventfd (0, EFD_CLOEXEC);\n])],glib_cv_eventfd=yes,glib_cv_eventfd=no))\nif test x\"$glib_cv_eventfd\" = x\"yes\"; then\n  AC_DEFINE(HAVE_EVENTFD, 1, [we have the eventfd(2) system call])\nfi\nAM_CONDITIONAL(HAVE_EVENTFD, [test \"$glib_cv_eventfd\" = \"yes\"])\n\ndnl ****************************************\ndnl *** GLib POLL* compatibility defines ***\ndnl ****************************************\n\nglib_poll_includes=[\"\n#include <sys/types.h>\n#include <poll.h>\n\"]\n\nAS_IF([ test $ac_cv_header_sys_types_h = yes &&\n   test $ac_cv_func_poll = yes ], [\n  glib_failed=false\n  GLIB_CHECK_VALUE(POLLIN, $glib_poll_includes, glib_failed=true)\n  GLIB_CHECK_VALUE(POLLOUT, $glib_poll_includes, glib_failed=true)\n  GLIB_CHECK_VALUE(POLLPRI, $glib_poll_includes, glib_failed=true)\n  GLIB_CHECK_VALUE(POLLERR, $glib_poll_includes, glib_failed=true)\n  GLIB_CHECK_VALUE(POLLHUP, $glib_poll_includes, glib_failed=true)\n  GLIB_CHECK_VALUE(POLLNVAL, $glib_poll_includes, glib_failed=true)\n  if $glib_failed ; then\n    AC_MSG_ERROR([Could not determine values for POLL* constants])\n  fi\n], [\n  glib_cv_value_POLLIN=1\n  glib_cv_value_POLLOUT=4\n  glib_cv_value_POLLPRI=2\n  glib_cv_value_POLLERR=8\n  glib_cv_value_POLLHUP=16\n  glib_cv_value_POLLNVAL=32\n])\n\nAC_MSG_CHECKING([for broken poll])\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n\t#include <stdlib.h>\n\t#include <fcntl.h>\n\t#include <poll.h>\n\tint main(void) {\n\t  struct pollfd fds[1];\n\t  int fd;\n\t  fd = open(\"/dev/null\", 1);\n\t  fds[0].fd = fd;\n\t  fds[0].events = POLLIN;\n\t  fds[0].revents = 0;\n\t  if (poll(fds, 1, 0) < 0 || (fds[0].revents & POLLNVAL) != 0) {\n\t\texit(1);  /* Does not work for devices -- fail */\n\t  }\n\t  exit(0);\n\t}]])],\n  [broken_poll=no],\n  [broken_poll=yes\n   AC_DEFINE(BROKEN_POLL,1,[poll doesn't work on devices])],\n  [broken_poll=\"no (cross compiling)\"])\nAC_MSG_RESULT($broken_poll)\n\ndnl *********************\ndnl *** GRegex checks ***\ndnl *********************\n\nPCRE_REQUIRED_VERSION=8.31\n\n# Check if we should use the internal or the system-supplied pcre\nAC_ARG_WITH(pcre,\n            [AS_HELP_STRING([--with-pcre=@<:@internal/system@:>@],\n                            [whether to use system PCRE [default=system]])],\n            [],\n            [with_pcre=system])\n\nAM_CONDITIONAL(USE_SYSTEM_PCRE, [test \"x$with_pcre\" = xsystem])\n\nAS_IF([ test \"x$with_pcre\" = xsystem], [\n  PKG_CHECK_MODULES(PCRE,\n                    libpcre >= $PCRE_REQUIRED_VERSION)\n  AC_CACHE_CHECK([for Unicode support in PCRE],glib_cv_pcre_has_unicode,[\n                  glib_save_CFLAGS=\"$CFLAGS\"\n                  glib_save_LIBS=\"$LIBS\"\n                  CFLAGS=\"$CFLAGS $PCRE_CFLAGS\" LIBS=\"$PCRE_LIBS\"\n                  AC_TRY_RUN([#include <pcre.h>\n                              int main () {\n                                int support;\n                                pcre_config (PCRE_CONFIG_UTF8, &support);\n                                if (!support)\n                                  return 1;\n                                pcre_config (PCRE_CONFIG_UNICODE_PROPERTIES, &support);\n                                if (!support)\n                                  return 1;\n                                return 0;\n                              }],\n                  glib_cv_pcre_has_unicode=yes,\n                  glib_cv_pcre_has_unicode=no,\n                  glib_cv_pcre_has_unicode=yes)\n                  CFLAGS=\"$glib_save_CFLAGS\"\n                  LIBS=\"$glib_save_LIBS\"\n      ])\n  if test \"$glib_cv_pcre_has_unicode\" = \"no\"; then\n    AC_MSG_ERROR([*** The system-supplied PCRE does not support Unicode properties or UTF-8.])\n  fi\n  AC_SUBST(PCRE_CFLAGS)\n  AC_SUBST(PCRE_LIBS)\n  AC_DEFINE(USE_SYSTEM_PCRE, [], [using the system-supplied PCRE library])\n  PCRE_REQUIRES=libpcre\n  AC_SUBST(PCRE_REQUIRES)\n], [\n  # If using gcc 4 pass -Wno-pointer-sign when compiling the internal PCRE\n  AS_IF([ test x\"$GCC\" = xyes], [\n    AC_MSG_CHECKING([whether compiler understands -Wno-pointer-sign])\n    save_CFLAGS=\"$CFLAGS\"\n    CFLAGS=\"$CFLAGS -Wno-pointer-sign\"\n    AC_TRY_COMPILE([],[],[PCRE_WARN_CFLAGS=\"$PCRE_WARN_CFLAGS -Wno-pointer-sign\"\n                          AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)])\n    CFLAGS=\"$save_CFLAGS\"\n  ])\n])\nAC_SUBST(PCRE_WARN_CFLAGS)\n\ndnl **********************\ndnl *** Win32 API libs ***\ndnl **********************\n\ncase $host in\n  *-*-cygwin*)\n\tG_LIBS_EXTRA=\"-luser32 -lkernel32\"\n    ;;\n  *-*-mingw*)\n\tG_LIBS_EXTRA=\"-lws2_32 -lole32 -lwinmm -lshlwapi\"\n    ;;\n  *)\n\tG_LIBS_EXTRA=\"\"\n    ;;\nesac\nAC_SUBST(G_LIBS_EXTRA)\n\ndnl If the system doesn't define EILSEQ, we should define EILSEQ ourselves\ndnl since we need it for g_iconv()\n\nAC_MSG_CHECKING([for EILSEQ])\nAC_TRY_COMPILE([\n#include <errno.h>\n],\n[\nint error = EILSEQ;\n], have_eilseq=yes, have_eilseq=no);\nAC_MSG_RESULT($have_eilseq)\n\ndnl Add a conditional we can use when cross-compiling, so we avoid running\ndnl binaries\nAM_CONDITIONAL(CROSS_COMPILING, test $cross_compiling = yes)\n\ndnl **************************\ndnl *** Checks for gtk-doc ***\ndnl **************************\n# gtkdocize greps for ^GTK_DOC_CHECK and parses it, so you need to have\n# it on it's own line.\nm4_ifdef([GTK_DOC_CHECK], [\nGTK_DOC_CHECK([1.20], [--flavour no-tmpl])\n],[\nAM_CONDITIONAL([ENABLE_GTK_DOC],[false])\n])\n\nAC_ARG_ENABLE(man,\n              [AS_HELP_STRING([--enable-man],\n                              [generate man pages [default=auto]])],,\n              enable_man=maybe)\n\nAS_IF([test \"$enable_man\" != no], [\n  AC_PATH_PROG([XSLTPROC], [xsltproc])\n  AS_IF([test -z \"$XSLTPROC\"], [\n    AS_IF([test \"$enable_man\" = yes], [\n      AC_MSG_ERROR([xsltproc is required for --enable-man])\n    ])\n    enable_man=no\n  ])\n])\n\nAS_IF([ test \"$enable_man\" != no ], [\n  dnl check for DocBook DTD in the local catalog\n  JH_CHECK_XML_CATALOG([-//OASIS//DTD DocBook XML V4.1.2//EN],\n     [DocBook XML DTD V4.1.2], [have_docbook_dtd=yes], [have_docbook_dtd=no])\n  AS_IF([test \"$have_docbook_dtd\" != yes], [\n    AS_IF([test \"$enable_man\" = yes ], [\n      AC_MSG_ERROR([DocBook DTD is required for --enable-man])\n    ])\n    enable_man=no\n  ])\n])\n\nAS_IF([test \"$enable_man\" != no], [\n  dnl check for DocBook XSL stylesheets in the local catalog\n  JH_CHECK_XML_CATALOG([http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl],\n     [DocBook XSL Stylesheets], [have_docbook_style=yes],[have_docbook_style=no])\n  AS_IF([ test \"$have_docbook_style\" != yes ], [\n    AS_IF([ test \"$enable_man\" = yes ], [\n      AC_MSG_ERROR([DocBook XSL Stylesheets are required for --enable-man])\n    ])\n    enable_man=no\n  ])\n])\n\nAM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n\nAC_MSG_CHECKING([whether to generate man pages])\nAS_IF([ test \"$enable_man\" != no ], [\n  AC_MSG_RESULT([yes])\n], [\n  AC_MSG_RESULT([no])\n])\n\ndnl\ndnl Tracing\ndnl\n\nAC_ARG_ENABLE([dtrace],\n             [AS_HELP_STRING([--enable-dtrace],\n                              [include tracing support for dtrace])])\nhave_dtrace=no\nAC_MSG_CHECKING([whether to include dtrace tracing support])\nAS_IF([ test \"x$enable_dtrace\" != xno], [\n  if test x$glib_have_carbon = xyes; then\n    AC_MSG_RESULT([no (not yet compatible with MacOS dtrace)])\n  else \n    AC_MSG_RESULT([yes])\n    AC_CHECK_PROGS(DTRACE, dtrace)\n    if test -z \"$DTRACE\"; then\n      if test \"x$enable_dtrace\" = xyes; then\n        AC_MSG_ERROR([dtrace not found])\n      fi\n    else\n      AC_CHECK_HEADER([sys/sdt.h],have_dtrace=yes,\n                      [if test \"x$enable_dtrace\" = xyes; then\n                        AC_MSG_ERROR([dtrace support needs sys/sdt.h header])\n                       fi])\n    fi\n  fi\n], [\n  AC_MSG_RESULT([no])\n])\nif test \"x$have_dtrace\" = xyes; then\n  AC_DEFINE([HAVE_DTRACE], [1], [Define to 1 if using dtrace probes.])\nfi\nAM_CONDITIONAL([ENABLE_DTRACE], [test x$have_dtrace = xyes ])\n\nAC_MSG_CHECKING([whether to include systemtap tracing support])\nAC_ARG_ENABLE([systemtap],\n             [AS_HELP_STRING([--enable-systemtap],\n                              [include tracing support for systemtap])])\nhave_systemtap=no\nif test \"x$enable_systemtap\" != xno -a \"x$have_dtrace\" = xyes; then\n  have_systemtap=yes\nfi\nAC_MSG_RESULT(${have_systemtap})\n\nAM_CONDITIONAL([ENABLE_SYSTEMTAP], [test x$have_systemtap = xyes])\n\nAC_ARG_WITH([tapset-install-dir],\n            AS_HELP_STRING([--with-tapset-install-dir=DIR],\n                            [path where systemtap tapsets are installed [DATADIR/systemtap/tapset/HOST_CPU]]),\n            [if test \"x${withval}\" = x; then\n\t       ABS_TAPSET_DIR=\"\\$(datadir)/systemtap/tapset/${host_cpu}\"\n\t     else\n\t       ABS_TAPSET_DIR=\"${withval}\"\n\t      fi],\n\t    [ABS_TAPSET_DIR=\"\\$(datadir)/systemtap/tapset/${host_cpu}\"])\nAC_SUBST(ABS_TAPSET_DIR)\n\ndnl ************************************\ndnl *** Enable lcov coverage reports ***\ndnl ************************************\n\nAC_ARG_ENABLE(coverage,\n  AS_HELP_STRING([--enable-coverage],\n\t\t [enable coverage testing with gcov]),\n  [use_gcov=$enableval], [use_gcov=no])\n\nAS_IF([ test \"x$use_gcov\" = \"xyes\"], [\n  dnl we need gcc:\n  if test \"$GCC\" != \"yes\"; then\n    AC_MSG_ERROR([GCC is required for --enable-coverage])\n  fi\n\n  dnl Check if ccache is being used\n  AC_CHECK_PROG(SHTOOL, shtool, shtool)\n  case `$SHTOOL path $CC` in\n    *ccache*[)] gcc_ccache=yes;;\n    *[)] gcc_ccache=no;;\n  esac\n\n  if test \"$gcc_ccache\" = \"yes\" && (test -z \"$CCACHE_DISABLE\" || test \"$CCACHE_DISABLE\" != \"1\"); then\n    AC_MSG_ERROR([ccache must be disabled when --enable-coverage option is used. You can disable ccache by setting environment variable CCACHE_DISABLE=1.])\n  fi\n\n  ltp_version_list=\"1.6 1.7 1.8 1.9 1.10 1.12\"\n  AC_CHECK_PROG(LTP, lcov, lcov)\n  AC_CHECK_PROG(LTP_GENHTML, genhtml, genhtml)\n\n  AS_IF([ test \"$LTP\" ], [\n    AC_CACHE_CHECK([for ltp version], glib_cv_ltp_version, [\n      glib_cv_ltp_version=invalid\n      ltp_version=`$LTP -v 2>/dev/null | $SED -e 's/^.* //'`\n      for ltp_check_version in $ltp_version_list; do\n        if test \"$ltp_version\" = \"$ltp_check_version\"; then\n          glib_cv_ltp_version=\"$ltp_check_version (ok)\"\n        fi\n      done\n    ])\n  ], [\n    ltp_msg=\"To enable code coverage reporting you must have one of the following LTP versions installed: $ltp_version_list\"\n    AC_MSG_ERROR([$ltp_msg])\n  ])\n\n  case $glib_cv_ltp_version in\n    \"\"|invalid[)]\n      ltp_msg=\"You must have one of the following versions of LTP: $ltp_version_list (found: $ltp_version).\"\n      AC_MSG_ERROR([$ltp_msg])\n      LTP=\"exit 0;\"\n      ;;\n  esac\n\n  if test -z \"$LTP_GENHTML\"; then\n    AC_MSG_ERROR([Could not find genhtml from the LTP package])\n  fi\n\n  dnl Remove all optimization flags from CFLAGS\n  changequote({,})\n  CFLAGS=`echo \"$CFLAGS\" | $SED -e 's/-O[0-9]*//g'`\n  changequote([,])\n\n  dnl Add the special gcc flags\n  CFLAGS=\"$CFLAGS -O0 -fprofile-arcs -ftest-coverage\"\n  LDFLAGS=\"$LDFLAGS -lgcov\"\n])\n\ndnl *******************************\ndnl *** Disable strict aliasing ***\ndnl *******************************\ndnl See https://bugzilla.gnome.org/show_bug.cgi?id=791622\nAS_IF([test \"${GCC}\" = \"yes\"],[\n  CFLAGS=\"$CFLAGS -fno-strict-aliasing\"\n])\n\ndnl ******************************\ndnl *** output the whole stuff ***\ndnl ******************************\n\ndnl this section will only be run if config.status is invoked with no\ndnl arguments, or with \"glib/glibconfig.h\" as an argument.\nAC_CONFIG_COMMANDS([glib/glibconfig.h],\n[\n\toutfile=glib/glibconfig.h-tmp\n\tcat > $outfile <<\\_______EOF\n/* glibconfig.h\n *\n * This is a generated file.  Please modify 'configure.ac'\n */\n\n#ifndef __GLIBCONFIG_H__\n#define __GLIBCONFIG_H__\n\n#include <glib/gmacros.h>\n\n_______EOF\n\n\techo '#include <limits.h>' >> $outfile\n\techo '#include <float.h>' >> $outfile\n\tif test x$glib_values_h = xyes; then\n\t  echo '#include <values.h>' >> $outfile\n\tfi\n\tif test \"$glib_header_alloca_h\" = \"yes\"; then\n\t  echo '#define GLIB_HAVE_ALLOCA_H' >> $outfile\n\tfi\n\tif test x$glib_included_printf != xyes; then\n          echo \"\n/* Specifies that GLib's g_print*() functions wrap the\n * system printf functions.  This is useful to know, for example,\n * when using glibc's register_printf_function().\n */\" >> $outfile\n\t  echo '#define GLIB_USING_SYSTEM_PRINTF' >> $outfile\n\tfi\n\n\tcat >> $outfile <<_______EOF\n\nG_BEGIN_DECLS\n\n#define G_MINFLOAT\tFLT_MIN\n#define G_MAXFLOAT\tFLT_MAX\n#define G_MINDOUBLE\tDBL_MIN\n#define G_MAXDOUBLE\tDBL_MAX\n#define G_MINSHORT\tSHRT_MIN\n#define G_MAXSHORT\tSHRT_MAX\n#define G_MAXUSHORT\tUSHRT_MAX\n#define G_MININT\tINT_MIN\n#define G_MAXINT\tINT_MAX\n#define G_MAXUINT\tUINT_MAX\n#define G_MINLONG\tLONG_MIN\n#define G_MAXLONG\tLONG_MAX\n#define G_MAXULONG\tULONG_MAX\n\n_______EOF\n\n\n\t### this should always be true in a modern C/C++ compiler\n\t### and is statically asserted by glib-init.c\n\tcat >>$outfile <<_______EOF\ntypedef signed char gint8;\ntypedef unsigned char guint8;\n_______EOF\n\n\n\tif test -n \"$gint16\"; then\n\t  cat >>$outfile <<_______EOF\ntypedef signed $gint16 gint16;\ntypedef unsigned $gint16 guint16;\n#define G_GINT16_MODIFIER $gint16_modifier\n#define G_GINT16_FORMAT $gint16_format\n#define G_GUINT16_FORMAT $guint16_format\n_______EOF\n\tfi\n\n\n\tif test -n \"$gint32\"; then\n\t  cat >>$outfile <<_______EOF\ntypedef signed $gint32 gint32;\ntypedef unsigned $gint32 guint32;\n#define G_GINT32_MODIFIER $gint32_modifier\n#define G_GINT32_FORMAT $gint32_format\n#define G_GUINT32_FORMAT $guint32_format\n_______EOF\n\tfi\n\n\tcat >>$outfile <<_______EOF\n#define G_HAVE_GINT64 1          /* deprecated, always true */\n\n${glib_extension}typedef signed $gint64 gint64;\n${glib_extension}typedef unsigned $gint64 guint64;\n\n#define G_GINT64_CONSTANT(val)\t$gint64_constant\n#define G_GUINT64_CONSTANT(val)\t$guint64_constant\n_______EOF\n\n\tif test x$gint64_format != x ; then\n\t  cat >>$outfile <<_______EOF\n#define G_GINT64_MODIFIER $gint64_modifier\n#define G_GINT64_FORMAT $gint64_format\n#define G_GUINT64_FORMAT $guint64_format\n_______EOF\n        else\n\t  cat >>$outfile <<_______EOF\n#undef G_GINT64_MODIFIER\n#undef G_GINT64_FORMAT\n#undef G_GUINT64_FORMAT\n_______EOF\n        fi           \n\n        cat >>$outfile <<_______EOF\n\n#define GLIB_SIZEOF_VOID_P $glib_void_p\n#define GLIB_SIZEOF_LONG   $glib_long\n#define GLIB_SIZEOF_SIZE_T $glib_size_t\n#define GLIB_SIZEOF_SSIZE_T $glib_ssize_t\n\n_______EOF\n\n        cat >>$outfile <<_______EOF\ntypedef signed $glib_ssize_type_define gssize;\ntypedef unsigned $glib_size_type_define gsize;\n#define G_GSIZE_MODIFIER $gsize_modifier\n#define G_GSSIZE_MODIFIER $gssize_modifier\n#define G_GSIZE_FORMAT $gsize_format\n#define G_GSSIZE_FORMAT $gssize_format\n\n#define G_MAXSIZE\tG_MAXU$glib_msize_type\n#define G_MINSSIZE\tG_MIN$glib_mssize_type\n#define G_MAXSSIZE\tG_MAX$glib_mssize_type\n\ntypedef gint64 goffset;\n#define G_MINOFFSET\tG_MININT64\n#define G_MAXOFFSET\tG_MAXINT64\n\n#define G_GOFFSET_MODIFIER      G_GINT64_MODIFIER\n#define G_GOFFSET_FORMAT        G_GINT64_FORMAT\n#define G_GOFFSET_CONSTANT(val) G_GINT64_CONSTANT(val)\n\n#define G_POLLFD_FORMAT $g_pollfd_format\n\n_______EOF\n\n\tif test -z \"$glib_unknown_void_p\"; then\n\t  cat >>$outfile <<_______EOF\n\n#define GPOINTER_TO_INT(p)\t((gint)  ${glib_gpi_cast} (p))\n#define GPOINTER_TO_UINT(p)\t((guint) ${glib_gpui_cast} (p))\n\n#define GINT_TO_POINTER(i)\t((gpointer) ${glib_gpi_cast} (i))\n#define GUINT_TO_POINTER(u)\t((gpointer) ${glib_gpui_cast} (u))\n\ntypedef signed $glib_intptr_type_define gintptr;\ntypedef unsigned $glib_intptr_type_define guintptr;\n\n#define G_GINTPTR_MODIFIER      $gintptr_modifier\n#define G_GINTPTR_FORMAT        $gintptr_format\n#define G_GUINTPTR_FORMAT       $guintptr_format\n_______EOF\n\telse\n\t  echo '#error SIZEOF_VOID_P unknown - This should never happen' >>$outfile\n\tfi\n\n\n\n\tcat >>$outfile <<_______EOF\n#ifndef G_DISABLE_DEPRECATED\n#define g_ATEXIT(proc)\t(atexit (proc))\n#define g_memmove(dest,src,len) G_STMT_START { memmove ((dest), (src), (len)); } G_STMT_END\n#endif\n$glib_defines\n$glib_os\n$glib_static_compilation\n\n$glib_vacopy\n\n_______EOF\n\n\tif test x$g_have_iso_c_varargs = xyes ; then\n\t\tcat >>$outfile <<_______EOF\n#ifndef __cplusplus\n# define G_HAVE_ISO_VARARGS 1\n#endif\n_______EOF\n\tfi\n\tif test x$g_have_iso_cxx_varargs = xyes ; then\n\t\tcat >>$outfile <<_______EOF\n#ifdef __cplusplus\n# define G_HAVE_ISO_VARARGS 1\n#endif\n_______EOF\n\tfi\n\tif test x$g_have_gnuc_varargs = xyes ; then\n\t\tcat >>$outfile <<_______EOF\n\n/* gcc-2.95.x supports both gnu style and ISO varargs, but if -ansi\n * is passed ISO vararg support is turned off, and there is no work\n * around to turn it on, so we unconditionally turn it off.\n */\n#if __GNUC__ == 2 && __GNUC_MINOR__ == 95\n#  undef G_HAVE_ISO_VARARGS\n#endif\n\n#define G_HAVE_GNUC_VARARGS 1\n_______EOF\n\tfi\n\n\tcase x$g_stack_grows in\n\txyes) echo \"#define G_HAVE_GROWING_STACK 1\" >>$outfile ;;\n\t*)    echo \"#define G_HAVE_GROWING_STACK 0\" >>$outfile ;;\n\tesac\n\n\n\techo >>$outfile\n\tif test x$g_have_eilseq = xno; then\n\t\tcat >>$outfile <<_______EOF\n#ifndef EILSEQ\n/* On some pre-C99 systems, EILSEQ is not defined.\n * The correspondence between this and the corresponding definition\n * in libiconv is essential.\n */\n#  define EILSEQ ENOENT\n#endif\n_______EOF\n\n\tfi\n\n\tif test x$g_have_gnuc_visibility = xyes; then\n\t\tcat >>$outfile <<_______EOF\n#define G_HAVE_GNUC_VISIBILITY 1\n_______EOF\n\tfi\n\t\tcat >>$outfile <<_______EOF\n#if defined(__SUNPRO_C) && (__SUNPRO_C >= 0x590)\n#define G_GNUC_INTERNAL __attribute__((visibility(\"hidden\")))\n#elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x550)\n#define G_GNUC_INTERNAL __hidden\n#elif defined (__GNUC__) && defined (G_HAVE_GNUC_VISIBILITY)\n#define G_GNUC_INTERNAL __attribute__((visibility(\"hidden\")))\n#else\n#define G_GNUC_INTERNAL\n#endif \n_______EOF\n\n\techo >>$outfile\n\tcat >>$outfile <<_______EOF\n#define G_THREADS_ENABLED\n#define G_THREADS_IMPL_$g_threads_impl_def\n_______EOF\n\n\tif test x\"$g_memory_barrier_needed\" != xno; then\n\t  echo >>$outfile\n\t  echo \"#define G_ATOMIC_OP_MEMORY_BARRIER_NEEDED 1\" >>$outfile\n\tfi\n\tif test x\"$g_atomic_lock_free\" = xyes; then\n          echo >>$outfile\n          echo \"#define G_ATOMIC_LOCK_FREE\" >>$outfile\n        fi\n\techo >>$outfile\n\tg_bit_sizes=\"16 32 64\"\n\tfor bits in $g_bit_sizes; do\n\t  cat >>$outfile <<_______EOF\n#define GINT${bits}_TO_${g_bs_native}(val)\t((gint${bits}) (val))\n#define GUINT${bits}_TO_${g_bs_native}(val)\t((guint${bits}) (val))\n#define GINT${bits}_TO_${g_bs_alien}(val)\t((gint${bits}) GUINT${bits}_SWAP_LE_BE (val))\n#define GUINT${bits}_TO_${g_bs_alien}(val)\t(GUINT${bits}_SWAP_LE_BE (val))\n_______EOF\n\tdone\n\n\tcat >>$outfile <<_______EOF\n#define GLONG_TO_LE(val)\t((glong) GINT${glongbits}_TO_LE (val))\n#define GULONG_TO_LE(val)\t((gulong) GUINT${glongbits}_TO_LE (val))\n#define GLONG_TO_BE(val)\t((glong) GINT${glongbits}_TO_BE (val))\n#define GULONG_TO_BE(val)\t((gulong) GUINT${glongbits}_TO_BE (val))\n#define GINT_TO_LE(val)\t\t((gint) GINT${gintbits}_TO_LE (val))\n#define GUINT_TO_LE(val)\t((guint) GUINT${gintbits}_TO_LE (val))\n#define GINT_TO_BE(val)\t\t((gint) GINT${gintbits}_TO_BE (val))\n#define GUINT_TO_BE(val)\t((guint) GUINT${gintbits}_TO_BE (val))\n#define GSIZE_TO_LE(val)\t((gsize) GUINT${gsizebits}_TO_LE (val))\n#define GSSIZE_TO_LE(val)\t((gssize) GINT${gssizebits}_TO_LE (val))\n#define GSIZE_TO_BE(val)\t((gsize) GUINT${gsizebits}_TO_BE (val))\n#define GSSIZE_TO_BE(val)\t((gssize) GINT${gssizebits}_TO_BE (val))\n#define G_BYTE_ORDER $g_byte_order\n\n#define GLIB_SYSDEF_POLLIN =$g_pollin\n#define GLIB_SYSDEF_POLLOUT =$g_pollout\n#define GLIB_SYSDEF_POLLPRI =$g_pollpri\n#define GLIB_SYSDEF_POLLHUP =$g_pollhup\n#define GLIB_SYSDEF_POLLERR =$g_pollerr\n#define GLIB_SYSDEF_POLLNVAL =$g_pollnval\n\n#define G_MODULE_SUFFIX \"$g_module_suffix\"\n\ntypedef $g_pid_type GPid;\n#define G_PID_FORMAT $g_pid_format\n\n#define GLIB_SYSDEF_AF_UNIX $g_af_unix\n#define GLIB_SYSDEF_AF_INET $g_af_inet\n#define GLIB_SYSDEF_AF_INET6 $g_af_inet6\n\n#define GLIB_SYSDEF_MSG_OOB $g_msg_oob\n#define GLIB_SYSDEF_MSG_PEEK $g_msg_peek\n#define GLIB_SYSDEF_MSG_DONTROUTE $g_msg_dontroute\n\n#define G_DIR_SEPARATOR '$g_dir_separator'\n#define G_DIR_SEPARATOR_S \"$g_dir_separator\"\n#define G_SEARCHPATH_SEPARATOR '$g_searchpath_separator'\n#define G_SEARCHPATH_SEPARATOR_S \"$g_searchpath_separator\"\n\nG_END_DECLS\n\n#endif /* __GLIBCONFIG_H__ */\n_______EOF\n\n\n\tif cmp -s $outfile glib/glibconfig.h; then\n\t  AC_MSG_NOTICE([glib/glibconfig.h is unchanged])\n\t  rm -f $outfile\n\telse\n\t  mv $outfile glib/glibconfig.h\n\tfi\n],[\n\n# Note that if two cases are the same, case goes with the first one.\n# Note also that this is inside an AC_OUTPUT_COMMAND.  We do not depend\n# on variable expansion in case labels.  Look at the generated config.status\n# for a hint.\n\nif test x$ac_cv_header_alloca_h = xyes ; then\n  glib_header_alloca_h=yes\nfi\n\nif test x$enable_included_printf = xyes ; then\n  glib_included_printf=yes\nfi\n\ncase 2 in\n$ac_cv_sizeof_short)\t\t\n  gint16=short\n  gint16_modifier='\"h\"'\n  gint16_format='\"hi\"'\n  guint16_format='\"hu\"'\n  ;;\n$ac_cv_sizeof_int)\t\t\n  gint16=int\n  gint16_modifier='\"\"'\n  gint16_format='\"i\"'\n  guint16_format='\"u\"'\n  ;;\nesac\ncase 4 in\n$ac_cv_sizeof_short)\t\t\n  gint32=short\n  gint32_modifier='\"h\"'\n  gint32_format='\"hi\"'\n  guint32_format='\"hu\"'\n  ;;\n$ac_cv_sizeof_int)\t\t\n  gint32=int\n  gint32_modifier='\"\"'\n  gint32_format='\"i\"'\n  guint32_format='\"u\"'\n  ;;\n$ac_cv_sizeof_long)\t\t\n  gint32=long\n  gint32_modifier='\"l\"'\n  gint32_format='\"li\"'\n  guint32_format='\"lu\"'\n  ;;\nesac\ncase 8 in\n$ac_cv_sizeof_int)\n  gint64=int\n  gint64_modifier='\"\"'\n  gint64_format='\"i\"'\n  guint64_format='\"u\"'\n  glib_extension=\n  gint64_constant='(val)'\n  guint64_constant='(val)'\n  ;;\n$ac_cv_sizeof_long)\n  if test \"x$glib_cv_int64_t\" = \"xlong_long\"; then\n    gint64='long long'\n    if test -n \"$glib_cv_long_long_format\"; then\n      gint64_modifier='\"'$glib_cv_long_long_format'\"'\n      gint64_format='\"'$glib_cv_long_long_format'i\"'\n      guint64_format='\"'$glib_cv_long_long_format'u\"'\n    fi\n    glib_extension='G_GNUC_EXTENSION '\n    gint64_constant='(G_GNUC_EXTENSION (val##LL))'\n    guint64_constant='(G_GNUC_EXTENSION (val##ULL))'\n  else\n    gint64=long\n    gint64_modifier='\"l\"'\n    gint64_format='\"li\"'\n    guint64_format='\"lu\"'\n    glib_extension=\n    gint64_constant='(val##L)'\n    guint64_constant='(val##UL)'\n  fi\n  ;;\n$ac_cv_sizeof_long_long)\n  gint64='long long'\n  if test -n \"$glib_cv_long_long_format\"; then\n    gint64_modifier='\"'$glib_cv_long_long_format'\"'\n    gint64_format='\"'$glib_cv_long_long_format'i\"'\n    guint64_format='\"'$glib_cv_long_long_format'u\"'\n  fi\n  glib_extension='G_GNUC_EXTENSION '\n  gint64_constant='(G_GNUC_EXTENSION (val##LL))'\n  guint64_constant='(G_GNUC_EXTENSION (val##ULL))'\n  ;;\nesac\nglib_size_t=$ac_cv_sizeof_size_t\nglib_ssize_t=$ac_cv_sizeof_ssize_t\nglib_size_type_define=\"$glib_size_type\"\nglib_ssize_type_define=\"$glib_ssize_type\"\nglib_void_p=$ac_cv_sizeof_void_p\nglib_long=$ac_cv_sizeof_long\n\ncase \"$glib_size_type\" in\nshort)\n  gsize_modifier='\"h\"'\n  gsize_format='\"hu\"'\n  glib_msize_type='SHRT'\n  ;;\nint)\n  gsize_modifier='\"\"'\n  gsize_format='\"u\"'\n  glib_msize_type='INT'\n  ;;\nlong)\n  gsize_modifier='\"l\"'\n  gsize_format='\"lu\"'\n  glib_msize_type='LONG'\n  ;;\n\"long long\")\n  gsize_modifier='\"ll\"'\n  gsize_format='\"llu\"'\n  glib_msize_type='INT64'\n  ;;\nesac\n\ncase \"$glib_ssize_type\" in\nshort)\n  gssize_modifier='\"h\"'\n  gssize_format='\"hi\"'\n  glib_mssize_type='SHRT'\n  ;;\nint)\n  gssize_modifier='\"\"'\n  gssize_format='\"i\"'\n  glib_mssize_type='INT'\n  ;;\nlong)\n  gssize_modifier='\"l\"'\n  gssize_format='\"li\"'\n  glib_mssize_type='LONG'\n  ;;\n\"long long\")\n  gssize_modifier='\"ll\"'\n  gssize_format='\"lli\"'\n  glib_mssize_type='INT64'\n  ;;\nesac\n\ngintbits=`expr $ac_cv_sizeof_int \\* 8`\nglongbits=`expr $ac_cv_sizeof_long \\* 8`\ngsizebits=`expr $ac_cv_sizeof_size_t \\* 8`\ngssizebits=`expr $ac_cv_sizeof_ssize_t \\* 8`\n\ncase $ac_cv_sizeof_void_p in\n$ac_cv_sizeof_int)\n  glib_intptr_type_define=int\n  gintptr_modifier='\"\"'\n  gintptr_format='\"i\"'\n  guintptr_format='\"u\"'\n  glib_gpi_cast='(gint)'\n  glib_gpui_cast='(guint)'\n  ;;\n$ac_cv_sizeof_long)\n  glib_intptr_type_define=long\n  gintptr_modifier='\"l\"'\n  gintptr_format='\"li\"'\n  guintptr_format='\"lu\"'\n  glib_gpi_cast='(glong)'\n  glib_gpui_cast='(gulong)'\n  ;;\n$ac_cv_sizeof_long_long)\n  glib_intptr_type_define='long long'\n  gintptr_modifier='\"ll\"'\n  gintptr_format='\"lli\"'\n  guintptr_format='\"llu\"'\n  glib_gpi_cast='(gint64)'\n  glib_gpui_cast='(guint64)'\n  ;;\n*)\n  glib_unknown_void_p=yes\n  ;;\nesac\n\n\nglib_defines=\"\n#define GLIB_MAJOR_VERSION $GLIB_MAJOR_VERSION\n#define GLIB_MINOR_VERSION $GLIB_MINOR_VERSION\n#define GLIB_MICRO_VERSION $GLIB_MICRO_VERSION\n\"\n\ncase xyes in\nx$glib_cv_va_copy)\tglib_vacopy='#define G_VA_COPY\tva_copy' ;;\nx$glib_cv___va_copy)\tglib_vacopy='#define G_VA_COPY\t__va_copy' ;;\n*)\t\t\tglib_vacopy=''\nesac\n\nif test x$glib_cv_va_val_copy = xno; then\n  glib_vacopy=\"\\$glib_vacopy\n#define G_VA_COPY_AS_ARRAY 1\"\nfi\n\ng_have_gnuc_varargs=$g_have_gnuc_varargs\ng_have_iso_c_varargs=$g_have_iso_c_varargs\ng_have_iso_cxx_varargs=$g_have_iso_cxx_varargs\n\ng_have_gnuc_visibility=$g_have_gnuc_visibility\ng_have_sunstudio_visibility=$g_have_sunstudio_visibility\n\nif test x$ac_cv_c_bigendian = xyes; then\n  g_byte_order=G_BIG_ENDIAN\n  g_bs_native=BE\n  g_bs_alien=LE\nelse\n  g_byte_order=G_LITTLE_ENDIAN\n  g_bs_native=LE\n  g_bs_alien=BE\nfi\n\ng_pollin=$glib_cv_value_POLLIN\ng_pollout=$glib_cv_value_POLLOUT\ng_pollpri=$glib_cv_value_POLLPRI\ng_pollhup=$glib_cv_value_POLLHUP\ng_pollerr=$glib_cv_value_POLLERR\ng_pollnval=$glib_cv_value_POLLNVAL\n\n# If a family is not found on the system, define that family to\n# a negative value, picking a different one for each undefined\n# family (-1 for AF_UNIX, -2 for the next one, -3 ...)\n# This is needed because glib-mkenums doesn't handle optional\n# values in enums, and thus we have to have all existing values\n# defined in the enum.\nif test \"x$glib_cv_value_AF_UNIX\" != \"x\"; then\n  g_af_unix=$glib_cv_value_AF_UNIX\nelse\n  g_af_unix=-1\nfi\ng_af_inet=$glib_cv_value_AF_INET\ng_af_inet6=$glib_cv_value_AF_INET6\n\ng_msg_peek=$glib_cv_value_MSG_PEEK\ng_msg_oob=$glib_cv_value_MSG_OOB\ng_msg_dontroute=$glib_cv_value_MSG_DONTROUTE\n\ng_stack_grows=$glib_cv_stack_grows\n\ng_have_eilseq=$have_eilseq\n\ng_threads_impl_def=$g_threads_impl\n\ng_atomic_lock_free=\"$glib_cv_g_atomic_lock_free\"\ng_memory_barrier_needed=\"$glib_memory_barrier_needed\"\ng_gcc_atomic_ops=\"$glib_cv_gcc_has_builtin_atomic_operations\"\n\ng_module_suffix=\"$glib_gmodule_suffix\"\ng_dir_separator=\"$glib_dir_separator\"\ng_searchpath_separator=\"$glib_searchpath_separator\"\n\ng_pid_type=\"$glib_pid_type\"\ng_pid_format=\"\\\"$glib_pid_format\\\"\"\ng_pollfd_format=\"\\\"$glib_pollfd_format\\\"\"\n\ncase $host in\n  *-*-cygwin*)\n    glib_os=\"#define G_OS_UNIX\n#define G_PLATFORM_WIN32\n#define G_WITH_CYGWIN\"\n    ;;\n  *-*-mingw*)\n    glib_os=\"#define G_OS_WIN32\n#define G_PLATFORM_WIN32\"\n    ;;\n  *)\n    glib_os=\"#define G_OS_UNIX\"\n    ;;\nesac\nglib_static_compilation=\"\"\nif test x$glib_win32_static_compilation = xyes; then\n  glib_static_compilation=\"#define GLIB_STATIC_COMPILATION 1\n#define GOBJECT_STATIC_COMPILATION 1\"\nfi\n])\n\n# Redo enough to get guint32 and guint64 for the alignment checks below\ncase 4 in\n$ac_cv_sizeof_short)\n  gint32=short\n  ;;\n$ac_cv_sizeof_int)\n  gint32=int\n  ;;\n$ac_cv_sizeof_long)\n  gint32=long\n  ;;\nesac\ncase 8 in\n$ac_cv_sizeof_int)\n  gint64=int\n  ;;\n$ac_cv_sizeof_long)\n  gint64=long\n  ;;\n$ac_cv_sizeof_long_long)\n  gint64='long long'\n  ;;\nesac\n\nAC_CHECK_TYPE([guint32],,,[typedef unsigned $gint32 guint32;])\nAC_CHECK_ALIGNOF([guint32], [AC_INCLUDES_DEFAULT\ntypedef unsigned $gint32 guint32;])\nAC_CHECK_TYPE([guint64],,,[typedef unsigned $gint64 guint64;])\nAC_CHECK_ALIGNOF([guint64], [AC_INCLUDES_DEFAULT\ntypedef unsigned $gint64 guint64;])\nAC_CHECK_TYPE([unsigned long])\nAC_CHECK_ALIGNOF([unsigned long])\n\n# Check for libdbus1 - Optional - is only used in the GDBus test cases\n#\n# 1.2.14 required for dbus_message_set_serial\nPKG_CHECK_MODULES(DBUS1,\n     dbus-1 >= 1.2.14,\n     [AC_DEFINE(HAVE_DBUS1, 1, [Define if dbus-1 is available]) have_dbus1=yes],\n     have_dbus1=no)\nAC_SUBST(DBUS1_CFLAGS)\nAC_SUBST(DBUS1_LIBS)\nAM_CONDITIONAL(HAVE_DBUS1, [test \"x$have_dbus1\" = \"xyes\"])\n\nAC_CHECK_PROGS([DBUS_DAEMON], [dbus-daemon])\nAM_CONDITIONAL([HAVE_DBUS_DAEMON], [test x$DBUS_DAEMON = xdbus-daemon ])\n\n# Check whether MSVC toolset is explicitly set\nAM_CONDITIONAL(MSVC_BASE_NO_TOOLSET_SET, [test x$MSVC_BASE_TOOLSET = x])\nAM_CONDITIONAL(MSVC_NO_TOOLSET_SET, [test x$MSVC_TOOLSET = x])\n\ndnl\ndnl Check for -Bsymbolic-functions linker flag used to avoid\ndnl intra-library PLT jumps, if available.\ndnl\n\nAC_ARG_ENABLE(Bsymbolic,\n              [AS_HELP_STRING([--disable-Bsymbolic],\n                              [avoid linking with -Bsymbolic])],,\n              [SAVED_LDFLAGS=\"${LDFLAGS}\" SAVED_LIBS=\"${LIBS}\"\n               AC_MSG_CHECKING([for -Bsymbolic-functions linker flag])\n               LDFLAGS=-Wl,-Bsymbolic-functions\n               LIBS=\n               AC_TRY_LINK([], [return 0],\n                           AC_MSG_RESULT(yes)\n                           enable_Bsymbolic=yes,\n                           AC_MSG_RESULT(no)\n                           enable_Bsymbolic=no)\n               LDFLAGS=\"${SAVED_LDFLAGS}\" LIBS=\"${SAVED_LIBS}\"])\n\nif test \"x${enable_Bsymbolic}\" = \"xyes\"; then\n  GLIB_LINK_FLAGS=-Wl,-Bsymbolic-functions\nfi\n\ndnl\ndnl Check for -z,nodelete linker flag: the type system assumes that\ndnl libgobject stays loaded for the lifetime of the process.\ndnl Since ld.bfd does not treat wrong -z options as fatal by default,\ndnl we also try to check for the --fatal-warnings linker flag if\ndnl auto-detecting.\ndnl\n\nSAVED_CFLAGS=\"${CFLAGS}\" SAVED_LDFLAGS=\"${LDFLAGS}\" SAVED_LIBS=\"${LIBS}\"\nAC_MSG_CHECKING([for --fatal-warnings linker flag])\nCFLAGS=\"${SAVED_CFLAGS} ${shared_flag:- -shared}\"\nLDFLAGS=-Wl,--fatal-warnings\nLIBS=\nAC_TRY_LINK([], [return 0],\n            AC_MSG_RESULT(yes)\n            [ldflags_fatal=-Wl,--fatal-warnings],\n            AC_MSG_RESULT(no)\n            ldflags_fatal=)\n\nAC_MSG_CHECKING([for -z,nodelete linker flag])\nLDFLAGS=\"$ldflags_fatal -Wl,-z,nodelete\"\nAC_TRY_LINK([], [return 0],\n            AC_MSG_RESULT(yes)\n            enable_znodelete=yes,\n            AC_MSG_RESULT(no)\n            enable_znodelete=no)\nCFLAGS=\"${SAVED_CFLAGS}\" LDFLAGS=\"${SAVED_LDFLAGS}\" LIBS=\"${SAVED_LIBS}\"\n\nif test \"x${enable_znodelete}\" = \"xyes\"; then\n  GLIB_LINK_FLAGS=\"$GLIB_LINK_FLAGS -Wl,-z,nodelete\"\nfi\n\nAC_SUBST(GLIB_LINK_FLAGS)\n\ndnl\ndnl Check for -fvisibility=hidden to determine if we can do GNU-style\ndnl visibility attributes for symbol export control\ndnl\nGLIB_HIDDEN_VISIBILITY_CFLAGS=\"\"\ncase \"$host\" in\n  *-*-mingw*)\n    dnl on mingw32 we do -fvisibility=hidden and __declspec(dllexport)\n    AC_DEFINE([_GLIB_EXTERN], [__attribute__((visibility(\"default\"))) __declspec(dllexport) extern],\n              [defines how to decorate public symbols while building])\n    CFLAGS=\"${CFLAGS} -fvisibility=hidden\"\n    ;;\n  *)\n    dnl on other compilers, check if we can do -fvisibility=hidden\n    SAVED_CFLAGS=\"${CFLAGS}\"\n    CFLAGS=\"-fvisibility=hidden\"\n    AC_MSG_CHECKING([for -fvisibility=hidden compiler flag])\n    AC_TRY_COMPILE([], [return 0],\n                   AC_MSG_RESULT(yes)\n                   enable_fvisibility_hidden=yes,\n                   AC_MSG_RESULT(no)\n                   enable_fvisibility_hidden=no)\n    CFLAGS=\"${SAVED_CFLAGS}\"\n\n    AS_IF([test \"${enable_fvisibility_hidden}\" = \"yes\"], [\n      AC_DEFINE([_GLIB_EXTERN], [__attribute__((visibility(\"default\"))) extern],\n                [defines how to decorate public symbols while building])\n      GLIB_HIDDEN_VISIBILITY_CFLAGS=\"-fvisibility=hidden\"\n    ])\n    ;;\nesac\nAC_SUBST(GLIB_HIDDEN_VISIBILITY_CFLAGS)\n\ndnl Compiler flags; macro originates from systemd\ndnl See https://bugzilla.gnome.org/show_bug.cgi?id=608953\nAC_ARG_ENABLE(compile-warnings,\n              [AS_HELP_STRING([--disable-compile-warnings],\n                              [Don't use builtin compiler warnings])],,\n\t\t\t      enable_compile_warnings=yes)\nAS_IF([test \"x$enable_compile_warnings\" != xno], [\n  CC_CHECK_FLAGS_APPEND([GLIB_WARN_CFLAGS], [CFLAGS], [\\\n   -Wall -Wstrict-prototypes -Wduplicated-branches -Wmisleading-indentation \\\n   -Wno-bad-function-cast \\\n   -Werror=declaration-after-statement \\\n   -Werror=missing-prototypes -Werror=implicit-function-declaration \\\n   -Werror=pointer-arith -Werror=init-self \\\n   -Werror=format=2 -Werror=missing-include-dirs])\n])\nAC_SUBST(GLIB_WARN_CFLAGS)\n\n#\n# Define variables corresponding to the correct include paths to use for\n# in-tree building.\n#\n\n# for config.h:\nconfig_h_INCLUDES='-I$(top_builddir)'\nAC_SUBST(config_h_INCLUDES)\n\n# glib:\n#   config.h\n#   $(top_builddir)/glib: for glibconfig.h\n#   $(top_srcdir)/glib:   for glib.h\n#   $(top_srcdir):        for everything\nglib_INCLUDES='$(config_h_INCLUDES) -I$(top_builddir)/glib -I$(top_srcdir)/glib -I$(top_srcdir)'\nAC_SUBST(glib_INCLUDES)\n\n# gobject:\n#   same as glib\ngobject_INCLUDES='$(glib_INCLUDES)'\nAC_SUBST(gobject_INCLUDES)\n\n# gmodule:\n#   glib includes\n#   $(top_srcdir)/gmodule: for gmodule.h\ngmodule_INCLUDES='$(glib_INCLUDES) -I$(top_srcdir)/gmodule'\nAC_SUBST(gmodule_INCLUDES)\n\n# gio:\n#   same as gmodule\ngio_INCLUDES='$(gmodule_INCLUDES)'\nAC_SUBST(gio_INCLUDES)\n\n\nAC_CONFIG_FILES([\nglib-2.0.pc\ngmodule-2.0.pc\ngmodule-export-2.0.pc\ngmodule-no-export-2.0.pc\ngthread-2.0.pc\ngobject-2.0.pc\ngio-2.0.pc\ngio-unix-2.0.pc\ngio-windows-2.0.pc\nglib-gettextize\nMakefile\nbuild/Makefile\nbuild/win32/Makefile\nbuild/win32/dirent/Makefile\nglib/Makefile\nglib/libcharset/Makefile\nglib/gnulib/Makefile\nglib/pcre/Makefile\nglib/update-pcre/Makefile\nglib/tests/Makefile\ngmodule/Makefile\ngmodule/gmoduleconf.h\ngobject/Makefile\ngobject/glib-genmarshal\ngobject/glib-mkenums\ngobject/tests/Makefile\ngthread/Makefile\ngio/Makefile\ngio/gdbus-2.0/codegen/Makefile\ngio/gdbus-2.0/codegen/config.py\ngio/gnetworking.h\ngio/xdgmime/Makefile\ngio/inotify/Makefile\ngio/kqueue/Makefile\ngio/fam/Makefile\ngio/win32/Makefile\ngio/tests/Makefile\ngio/tests/gdbus-object-manager-example/Makefile\ngio/tests/services/Makefile\ngio/tests/services/org.gtk.GDBus.Examples.ObjectManager.service\ngio/tests/modules/Makefile\npo/Makefile.in\ndocs/Makefile\ndocs/reference/Makefile\ndocs/reference/glib/Makefile\ndocs/reference/glib/version.xml\ndocs/reference/gobject/Makefile\ndocs/reference/gobject/version.xml\ndocs/reference/gio/Makefile\ndocs/reference/gio/version.xml\ntests/Makefile\ntests/gobject/Makefile\ntests/refcount/Makefile\nm4macros/Makefile\nsubprojects/Makefile\n])\n\n# We need this command because the configure script will not preserve\n# the same attributes of the template files\nAC_CONFIG_COMMANDS([chmod-scripts],\n[chmod 0755 glib-gettextize\nchmod 0755 gobject/glib-genmarshal\nchmod 0755 gobject/glib-mkenums])\n\n# we want to invoke this macro solely so that the config.status script\n# and automake generated makefiles know about these generated files.\n# They are only needed to distcheck the package\nif false; then\n  AC_CONFIG_FILES([\n    INSTALL\n    glib/glib.rc\n    gmodule/gmodule.rc\n    gobject/gobject.rc\n    gthread/gthread.rc\n    gio/gio.rc\n  ])\nfi\n\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/ChangeLog.pre-1-2": "Sun Feb 21 22:11:51 CST 1999  Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.2.0\n\n\t* AUTHORS: updated\n\nWed Feb 24 00:08:42 CST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n\t* *.[ch]: inserted additional note to look for ChangeLog and\n\t  AUTHORS file for a log of modifications.\n\nSun Feb 21 14:01:00 1999  Dr Mike <drmike@redhat.com>\n\n\t* Made specfile generated, tweaked slightly\n\t\nThu Feb 18 08:24:12 1999  Tim Janik  <timj@gtk.org>\n\n\t* gmem.c (g_realloc): plugged a memory leak, reported by Koen D'Hondt\n\t<ripley@xs4all.nl> on 15 Oct 1998. allocate inital block from realloc.\n\n1999-02-17  Elliot Lee  <sopwith@redhat.com>\n\n\t* glib.spec: Do --enable-debug=no for the .rpm's.\n\nWed Feb 17 17:04:06 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* config.h.win32: Must define HAVE_PTHREAD_GETSPECIFIC_POSIX.\n\nTue Feb 16 14:08:59 CST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n\t* NEWS\n\t  README\n\t  INSTALL\n\t  config.h.win32\n\t  configure.in\n\t  glib.spec\n\t  glibconfig.h.win32\n\t  docs/glib-config.1: version=1.1.16 \n\n\t* Released GLib 1.1.16\n\n1999-02-15  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* glib.h, glibconfig.h.win32, configure.in: Changed signature of\n\tall g_static_mutex_* functions to take a pointer rather than the\n\tstruct itself. This is not an issue at the moment, because those\n\tfuncs are really macros, but is it un'G'ish and might fall on our\n\tfeet in the future.\n\nMon Feb 15 07:45:54 1999  Tim Janik  <timj@gtk.org>\n\n\t* configure.in (--enable-debug): default to yes for development trees.\n\nMon Feb 15 06:18:58 1999  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: return guints instead of gints for g_hash_table_size\n\tand g_hash_table_foreach_remove.\n\nWed Feb 10 12:01:42 1999  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: don't reset G_MODULE_IMPL, so it can be overridden\n\tfrom the command line.\n\n1999-02-10  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* glib.h: s/G_LOCK_DECLARE/G_LOCK_DEFINE/ throuhout glib. Added\n\tG_LOCK_EXTERN macro to declare a lock externally.\n\nWed Feb 10 06:20:30 1999  Tim Janik  <timj@gtk.org>\n\n\t* gmutex.c (g_static_private_set): invoke destroy notifier when\n\toverwriting values, initialize new array fields with NULL.\n\t(g_static_private_free_data): do not skip destroy notification for\n\tdata == NULL.\n\n\t* gutils.c (g_direct_equal): compare pointer values directly instead\n\tof just their guint values which is a loosing conversion for\n\tsizeof(gpointer)==8 systems.\n\t(g_get_any_init): restructured code so we don't use endless loops like\n\twhile (1), which boil down to an ugly alias for goto.\n\tstrip ,.* from the real name.\n\nFebruary 9, 1999 sopwith@redhat.com\n\n\t. glist.c, gnode.c, gslist.c: allocate pools of 128 items instead\n\tof 1024 items.\n\n1999-02-08  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in, acconfig.h: Changed the test for getpwuid_r to\n\texclude those systems (i.e. IRIX), that set ENOSYS after the call.\n\tTest, if pthread_getspecific is posix like or something different,\n\tas on PCThreads.\t\n\nSun Feb  7 21:56:00 1999  Owen Taylor  <otaylor@redhat.com>\n\n\t* gmem.c (g_mem_profile): Copy all elements\n\tof the allocations[] array, including the last.\n\t(Pointed out by \"Matthew W. Samsonoff\" <mws7323@osfmail.isc.rit.edu>)\n\t\n1999-02-05  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Make the error message in case of a broken thread\n\tsystem a bit more informative.\n\n\t* gutils.c (g_get_any_init): Changed the error logic again, now\n\tonly leaving the memory doubling loop, when success is reached or\n\twhen the user isn't found or when the buffer is 32k big,\n\tadditionally now getpwuid will be run, if getpwuid_r didn't work\n\tout properly. A warning is issued however.\n\nThu Feb 04 20:42:24 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* glibconfig.h.win32 config.h.win32: Update GLIB_MICRO_VERSION.\n\n1999-02-04  Christopher Blizzard  <blizzard@redhat.com>\n\n\t* glib.spec (Packager): Change my email address\n\nThu Feb  4 01:45:01 PST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n\t* ChangeLog\n\t  NEWS\n\t  README\n\t  configure.in\n\t  glib.spec\n\t  docs/glib-config.1: version=1.1.15\n\n\t* Released GLib 1.1.15\n\nTue Feb 02 00:08:54 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* gmessages.c (g_log_default_handler): (Win32:) Don't call\n \tensure_stdout_valid (which would open an unneeded console window)\n \tif we're calling a logging function.  Define ensure_stdout_valid\n \tas an empty macro on Unix.\n\n\t* gutils.c (g_get_any_init): (Win32:) Trust HOME first if defined,\n\tthen try HOMEDRIVE and HOMEPATH.\n\nMon Feb  1 19:04:28 1999  Owen Taylor  <otaylor@redhat.com>\n\n\t* gmain.c (g_main_iterate): Release the main_loop\n\t lock around calls to prepare() and check() so\n\t that we are not holding the main loop lock\n\t over user code.\n\n1999-01-30  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Moved the check for MT safe function variants\n\tafter the determination of the MT cflags and use them there.\n\n1999-01-29  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Fixed typo. Now HPUX 11 thread system detection\n\tshould work.\n\n\t* gutils.c (g_get_any_init): Changed initial bufsize to 64. Should\n\tsolve some problems out there.\n\nWed Jan 27 23:21:50 CST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n\t* INSTALL\n\t  NEWS\n\t  README\n\t  configure.in\n\t  glib.spec\n\t  docs/glib-config.1: version=1.1.14\n\n\t* Released GLib 1.1.14\n\n1999-01-28  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Simplified configure.in test for posix threads,\n\tsystems, that provide /usr/include/pthread.h should also have the\n\tposix thread library. This is to avoid writing down all the tests\n\ttwice. New test for thread system on HPUX 11. Info from Matt\n\tNottingham <matt@sar.dera.gov.uk>.\n\nWed Jan 27 20:39:49 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* acinclude.m4: Xsed isn't valid here, don't use it\n\n\t* ltmain.sh\n\t* ltconfig: better file magic regexp for Linux libs\n\n\t* gmodule/Makefile.am: arg, noinst_LTLIBRARIES doesn't make shared\n\tlibs, revert my previous change to this file\n\n\t* docs/texinfo.tex: add it so automake doesn't whine\n\nWed Jan 27 01:57:19 1999  Tim Janik  <timj@gtk.org>\n\n\t* configure.in (G_MODULE_HAVE_DLERROR): applied patch from Andrej\n\tBorsenkow <borsenkow.msk@sni.de> to also check for dlsym() in system\n\tlibraries and -ldl, to catch systems that provide dlopen() in libc\n\tand dlsym() in libdl. this is at least the case for Reliant UNIX\n\t5.44 (labeling itself as SINIX).\n\nTue Jan 26 13:39:22 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: don't use backquotes in warning text\n\n1999-01-26  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gdate.c (g_date_set_time): Removed the #warning about MT\n\tunsafety without localtime_r.\n\n\t* configure.in: Moved it here.\n\nMon Jan 25 10:07:53 1999  Raph Levien  <raph@gimp.org>\n\n\t* configure.in: (#define G_THREADS_IMPL...) Changed the #define,\n\tadding the G_THREADS_IMPL_ prefix to $g_threads_impl_def because\n\tit looked wrong to me and was breaking gimp compile.\n\nMon Jan 25 15:34:43 1999  Timur Bakeyev <mc@bat.ru>\n\n\t* configure.in, gstrfuncs.c: Inverted logic of NO_SYS_SYGLIST_DECL -\n\tnow it's normal (see 1999-01-19 Josh MacDonald). Also, remove from\n\t#include <signal.h> wrapper NO_SYS_SYGLIST - *sys_syglist[] declara-\n\ttion hides there.\n\n1999-01-25  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Do not use the thread libs, when searching for\n\tsome functions, as this might require glib to always be linked\n\twith the thread libs on some platforms.\n\n\t* gutils.c (g_get_any_init): Don't set errno to zero and use it\n\tonly as the error code, if the function returned a value less\n\t0. It might happen, that the call succeeds, even though the errno\n\tis set during the call (i.e. it first looks for a passwd file,\n\twhich is not found). Submitted by Michael Natterer\n\t<mitschel@cs.tu-berlin.de>. BTW: Sorry for all the mess with that\n\t`getpwuid_r' change, but it had to be done once.\n\nSun Jan 24 10:33:30 1999  Tim Janik  <timj@gtk.org>\n\n\t* gutils.c (g_get_any_init): reverted raja's changes, since they leaked\n\ta struct passwd contents buffer and for the rest mostly substituted a\n\twhile loop with a bunch of gotos.\n\trestored the getpwuid() code to what we had after my recent clean ups\n\t(\"Sat Jan 23 02:14:28 1999 Tim Janik\"), module yosh's recent changes.\n\tto feature solaris behaviour of directly returning errno, we don't\n\tmodify error anymore if it's > 0 and simply reset errno.\n\tdon't reset g_home_dir for !NATIVE_WIN32 && !NATIVE_WIN32.\n\n1999-01-24  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* gutils.c \n\t(g_get_any_init) [HAVE_GETPWUID_R && HAVE_GETPWUID_R_POSIX]: \n\tHopefully got the error handling for `getpwuid_r' right.\n\t(g_get_any_init) [HAVE_GETPWUID_R && !HAVE_GETPWUID_R_POSIX]:\n\tFix typo (change `pw == NULL' to `pw != NULL').\n\t\nSun Jan 24 00:36:22 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* ghash.c:\n\t- Revert previous \"fix\" (which really just did things a\n\t  different way).\n\t- (g_hash_table_remove): Don't need to support multiple values\n\t  for a single key.\n\n\t* tests/hash-test.c:\n\tAdd test where hash function always returns a single value.\n\tAdd beginnings of tests for g_hash_table_foreach[_remove] and\n\tg_hash_table_remove.\n\nSat Jan 23 20:40:06 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* gutils.c: removed the #warning about MT without getpwuid_r\n\n\t* configure.in: and moved it here\n\nSat Jan 23 22:45:59 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* ghash.c (g_hash_table_lookup_node, g_hash_table_lookup,\n\t\t   g_hash_table_insert, g_hash_table_remove,\n\t\t   g_hash_table_lookup_extended):\n\t  - Fixed bug that overwrote nodes in hash buckets instead of\n\t    adding them to the hash bucket node list.\n\t    Hash tables now work as advertised.\n\n\t(g_hash_table_resize):\n\t  - Use g_new0 instead of manual init.\n\t  - Space out code a bit for readability.\n\n\t(g_hash_nodes_destroy):\n\t  - Replaced \"if (!hash_node) return;\" with\n\t    \"if (hash_node) {do stuff}\".\n\t    Testing takes up less code space than explicit call to\n\t    'return' before end of function.  (look at gcc -S)\n\n\tUpdated module header copyright to 1999.\n\tNew module macro G_HASH_BUCKET for (table,key)->bucket lookups.\n\n\t* tests/hash-test.c:\n\t- Add two new tests, one with strings as the keys and values, and\n\t  one with ints as the keys and values.  Tests indirect (strings)\n\t  and direct (ints) hashing.\n\t- Cleanup unused junk left over from testglib.c.\n\t- Converted a g_print call to g_assert_not_reached.\n\t- Updated copyright to 1999.\n\n\t* testglib.c, tests/string-test.c:\n\t- Init 'tmp_string' var to NULL, silencing uninit-var warning.\n\n1999-01-23  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* gutils.c (g_get_any_init) [HAVE_GETPWUID_R]:\n\tRewrite not to look at `errno' if library call succeeds, since\n\t`errno' is not reset to 0.\n\t\nSat Jan 23 16:17:04 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* glibconfig.h.win32: Update the magic values for\n\tpthread_mutex_t size and initializer bytes to match the\n\tlatest version of pthreads for Win32.\n\nSat Jan 23 02:14:28 1999  Tim Janik  <timj@gtk.org>\n\n\t* gutils.c (g_get_any_init): cleaned up the errno mess for\n\tGETPWUID. we especially don't want to g_error() out here!\n\tthe warning for G_THREADS_ENABLED and !HAVE_GETPWUID_R isn't\n\tgcc related.\n\tif !HAVE_PWD_H and !NATIVE_WIN32, g_free the home dir before\n\tresetting it to NULL, why are we doing this anyways?\n\treordered code a bit so we always provide defaults (except\n\tfor g_home_dir).\n\nThu Jan 21 12:40:11 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* tests/{Makefile.am, string-test.c, strfunc-test.c}:\n\tSeparate string and strfunc tests, working towards goal of\n\thaving separate test for each of the GLib modules.\n\tAdd a couple GString length tests.\n\nThu Jan 21 09:36:05 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* configure.in:\n\tUse AC_PREREQ not AC_REQUIRE for autoconf version test.\n\n1999-01-21  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gutils.c (g_get_any_init): Changed error handling again, as the\n\terror is not always set in errno, it is the return value on some\n\tsystems. What an evil world.\n\nThu Jan 21 05:35:20 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* gstrfuncs.c: Include signal.h only when the signal names will be\n\tneeded.\n\nWed Jan 20 22:09:59 EST 1999 Mandrake <mandrake@mandrake.net>\n\n\t* configure.in / Makefile.am : made some adjustments for automake 1.4\n\tand autoconf 2.13 (per suggestions made by  Raja R Harinath\n\t<harinath@cs.umn.edu>)\n\nWed Jan 20 20:33:14 EST 1999 Mandrake <mandrake@mandrake.net>\n\n\t* autogen.sh: automake 1.4 and libtool 1.2d notices.\n\t(maybe I'll write an actual test for automake 1.4 later)\n\nWed Jan 20 15:05:25 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* HACKING: new file\n\n\t* Makefile.am: since we require automake 1.4 now, ditch the build\n\ttop-level first and just use SUBDIRS\n\n\t* gmodule/Makefile.am: use noinst_LTLIBRARIES instead of overriding\n\tthe install rule\n\nWed Jan 20 16:16:01 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* gutils.c (g_get_any_init):\n\tRevert previous patch, move error value set line down to proper\n\tplace.  Caught by Elliot Lee <sopwith@redhat.com>.\n\nWed Jan 20 20:48:58 GMT 1999  Adam D. Moss  <adam@gimp.org>\n\n\t* gutils.c (g_get_any_init): All gtk apps were broken\n\there on my setup.  I changed the error to a warning to at\n\tleast get things limping.\n\n1999-01-20  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gutils.c (g_get_any_init): Use getpwuid_r with the right\n\tsignature, if available.\n\n\t* configure.in, acconfig.h: Test for existance of getpwuid_r and\n\tits signature.\n\nTue Jan 19 20:52:43 1999  Tor Lillqvist  <tml@iki.fi>\n\t\n\t* Makefile.am (EXTRA_DIST): Add new Win32 files.\n\n\t* README.win32: Describe the conditional compilation macros.\n\n\t* makefile.lcc: Removed.\n\n1999-01-19  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Moved test for localtime_r and rand_r to a place\n\tafter the determination of the G_THREAD_LIBS and use them for\n\tfinding those functions, necessary on systems with a different C\n\tlibrary libc_r for threaded progs, like FreeBSD 2.2.x. Info from\n\tTimur Bakeyev <mc@bat.ru>.\n\nTue Jan 19 00:44:24 1999  Josh MacDonald  <jmacd@axis.hip.berkeley.edu>\n\n\t* gstrfuncs.c (g_strsignal): The \"extern char* sys_siglist\"\n\tdeclaration breaks systems with different declarations, like\n\tmine (FreeBSD).  So, I added a configuration variable to decide\n\twhether the declaration is neccesary.  Change also appears on\n\tline 275 of configure.in.\n\nSun Jan 17 17:13:54 CST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.13\n\n\t* README:\n\t  INSTALL:\n\t  docs/glib-config: ver=1.1.13\n\nMon Jan 18 00:02:46 1999  Tim Janik  <timj@gtk.org>\n\n\t* NEWS: updates for 1.1.13.\n\nSun Jan 17 17:15:59 1999  Tim Janik  <timj@gtk.org>\n\n\t* gtree.c (g_tree_traverse): removed assertion about rtree->root being\n\tNULL, so this function can be applied to unpopulated trees as well, fix\n\tprovided by Simon Kagedal <sika8225@csd.uu.se>.\n\nSun Jan 17 11:17:19 1999 Christopher Blizzard  <blizzard@appliedtheory.com>\n\n\t* glib.spec: add packager address\n\nSun Jan 17 11:10:05 1999 Christopher Blizzard  <blizzard@appliedtheory.com>\n\n\t* glib.spec: increment version number to 1.1.13\n\nSun Jan 17 16:14:03 1999  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (g_error): if !defined (G_LOG_DOMAIN) define G_LOG_DOMAIN as\n\t((gchar*) 0) instead of ((void*) 0) to silence egcs C++ mode, reported\n\tby Seth Alves <alves@hungry.com>.\n\nSun Jan 17 14:13:52 1999  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: added a define G_HOOK_DEFERRED_DESTROY, to substitute a noop\n\tGHookList.hook_destroy function.\n\n\t* ghook.c (g_hook_destroy_link): don't really call hook_destroy if it\n\tis G_HOOK_DEFERRED_DESTROY. for the case where we invoke hook->destroy()\n\twe now clean up the hook completely afterwards, i.e. data, func and\n\tdestroy are immediately set to NULL and hook_free can't play with that\n\tvalues anymore.\n\n\t* gmain.c (g_source_add): set hook_destroy to G_HOOK_DEFERRED_DESTROY,\n\tinstead of using an ugly _noop() hack, this is to avoid an uneccessary\n\tfunction invocation. set hook_free to g_source_destroy_func, this way\n\twe always invoke the destroy notifiers for user_data and source_data\n\tafter execution of dispatch(). thus, g_source_destroy_func() will always\n\tbe called within the main_loop lock (this wasn't really assured\n\tbefore), and can release and reaquire the look around destroy notifier\n\tinvocation.\n\nSun Jan 17 11:01:40 1999  Tor Lillqvist  <tml@iki.fi>\n\n\t* config.h.win32 glibconfig.h.win32: Increment version number here\n \talso.\n\nSun Jan 17 05:12:17 1999  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: incremented version number to 1.1.13, bin age 0,\n\tinterface age 0.\n\n\t* glib.h: added hook_destroy member to struct _GHookList.\n\n\t* ghook.c (g_hook_destroy_link): if the hook_list defines a hook_destroy\n\tfunction, use that to marshal hook destruction notifiers.\n\n\t* gmain.c: removed g_source_free_func and added g_source_destroy_func,\n\twhich marshalls the user_data and source_data destructors of sources\n\toutside of the main_loop lock.\n\tremoved GIdleData struct since its sole member callback can be passed\n\tas source_data directly.\n\tadded a gboolean return value to all g_source_remove* functions,\n\tindicating whether the source could be removed, because these functions\n\tdon't issue warnings upon unseccessful removals themselves. this way at\n\tleast the caller gets a chance to warn upon failing removals.\n\t(g_main_iterate): set in_check_or_prepare around calls to check() or\n\tprepare().\n\t(g_main_pending): simply return FALSE if called from within check() or\n\tprepare().\n\t(g_main_iteration): issue a warning if called from within check() or\n\tprepare() and bail out with FALSE.\n\t(g_main_run): likewise.\n\t(g_source_remove_by_funcs_user_data): new function to remove sources by\n\tuser data and function table.\n\t(g_idle_remove_by_data): new function to really remove idles only, since\n\tg_source_remove_by_user_data would remove timeouts or other sources as\n\twell.\n\n1999-01-16  Tor Lillqvist  <tml@iki.fi>\n\n\t* Merge in current Win32 version:\n\n\t* README.win32: More text.\n\n\t* config.h.win32 glibconfig.h.win32: Update to match the\n\tcorresponding generated files on Unix.\n\n\t* makefile.msc: Update with new source files, and gthread\n \tlibrary. Use the compiler flag -MD instead of using -D_DLL and\n\t/nodefaultlib:libc msvcrt.lib in the link phase.\n\n\t* glib.def: Update to include new functions, drop removed ones.\n\n\t* glib.h: Add comments about main loop and polling on Win32. (In\n\tgeneral, it's only for the GIMP's use.) Add Win32 IO Channel\n\tfunctions. Remove the obsoleted old IO Channel stuff (which was\n\tin #if 0 already).\n\n\t* giowin32.c: New file.\n\n\t* gmain.c: Include config.h, conditionalize <sys/time.h>\n \tinclusion.  Add g_poll implementation for Win32 (only for the\n \tGIMP's needs for now, it's hard or even impossible to be as clean\n \tand generic as on Unix). Implement g_get_current_time on Win32. If\n \tthreads aren't supported, don't try to wake up main thread's\n \tloop. On Win32, use a semaphore and not a pipe to wake up the main\n \tloop.\n\n\t* gmessages.c: On Win32, allocate a console window if the standard\n\toutput handle is invalid before writing to stdout, and reopen stdout\n\tto that console window.\n\n\t* giochannel.c: Conditionalize unistd.h inclusion. Some indentation\n\tcleanup.\n\n\t* gstrfuncs.c: Include <signal.h>.\n\n\t* gutils.c: On Win32, also check the HOMEDRIVE and HOMEPATH\n\tenvironment variables.\n\nSun Jan 17 01:06:38 1999 Timur Bakeyev <mc@bat.ru>\n\n\t* configure.in: Add support for FreeBSD 2.2.x macro _THREAD_SAFE.\n\nWed Jan 13 11:27:24 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: don't use inline for !__GNUC__ case with g_warning,\n\tg_error, and g_message wrappers since some compilers throw\n\taway arguments in this case\n\nTue Jan 12 21:59:14 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* acinclude.m4\n\t* ltconfig\n\t* ltmain.sh: upgrade to libtool 1.2d (with fixes for irix6 and osf)\n\n\t* testglib.c: removed unused cruft\n\nTue Jan 12 09:57:06 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* gdate.c: #warning isn't portable, check for gcc\n\n1999-01-12  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n        * gdate.c: Include config.h to get HAVE_LOCALTIME_R macro.\n\n        * configure.in: Moved function check back to the place, they've\n        been before.\n\n1999-01-11  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* gstrfuncs.c:\n\tDo not use vasprintf.\n\n\t* configure.in, glib.h, testglib.c, tests/.cvsignore,\n\t  tests/Makefile.am, tests/alloca-test.c:\n\tDo not use alloca.\n\n1999-01-11  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Test for localtime_r only after including the\n\tright MT enabling CFLAGS (i.e. -D_REENTRANT on most systems).\n\n\t* configure.in: Find right thread system on DG/UX. Thanks to Marc\n\tJ. Fraioli <fraioli@dg-rtp.dg.com> for hint. Finally removed the\n\tstuff for -fstack-check, that didnt work anyway.\n\n\t* gdate.c (g_date_set_time): Emit warning, if no localtime_r\n\tfunction is available on thread enabled systems. Define ptm only,\n\tif really needed, and assert on it.\n\nSat Jan  9 15:08:44 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* testglib.c:\n\tMake all aux functions static.\n\n\t* tests/Makefile.am, tests/dirname-test.c, tests/type-test.c:\n\tNew tests dirname-test and type-test, from testglib.\n\nSat Jan  9 13:53:00 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* configure.in:\n\tAdd checks for vasprintf, localtime_r.\n\n\t* gdate.c (g_date_set_time):\n\tUse localtime if localtime_r is not available.\n\n\t* gstrfuncs.c (g_strdup_vprintf):\n\tUse glibc vasprintf if possible; it's a bit faster than using\n\tGLib routines, and makes output code a bit smaller.\n\n\t* acconfig.h:\n\tRemove HAVE_VSNPRINTF and HAVE_VPRINTF.  autoheader picks these\n\tup automatically and puts them in config.h.in.\n\nThu Jan  7 15:14:08 1999  Owen Taylor  <otaylor@redhat.com>\n\n\t* gmain.c (g_source_free_func): Call the source-specific\n\tfree function when the hook is freed not when it\n\tis destroyed; this fixes a bug where a timeout destroyed\n\tfrom itself would access already freed data.\n\n1999-01-07  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gutils.c (g_get_any_init): Here we must replace getpwuid by\n\tgetpwuid_r, but as I do not know how for now, I just made a FIXME\n\tnote ;-)\n\n\t* gdate.c (g_date_set_time): localtime --> localtime_r to make it\n\tthread safe.\n\n\t* configure.in: We do not need to check for broken solaris mutex\n\tintitializer any longer. Provide a macro to show the used thread\n\timplementation. Not nice, but this is needed until thread support\n\tis completed here inside glib.\n\nTue Jan  5 12:23:52 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: ditch whitespace before GLIB_SYSDEFS #includes,\n\tthe # needs to be in column 1\n\n\t* gthread/testgthread.c: cleanups\n\n\t* tests/node-test.c: #include unistd.h for exit()\n\n1999-01-04  Andrew T. Veliath  <andrewtv@usa.net>\n\n\t* glib.h (g_array_insert_val): fix macro to be shorthand of\n\tg_array_insert_vals.\n\nMon Jan  4 15:35:29 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* acglib.m4: some echos interpret \\n's and some don't. Deal with\n\taccordingly.\n\nMon Jan  4 20:58:50 1999  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c: eliminated extraneous \"register\" qualifiers in variable\n\tdeclarations.\n\n\t* gmain.c: #undef events and revents which may have been defined in\n \tsys/poll.h for SVR3,4 compatibility on some AIX systems. fix been\n\tprovided by Philippe Defert <Philippe.Defert@cern.ch>.\n\nMon Jan  4 14:38:11 1999  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: adjusted the g_strdup_a, g_strndup_a and g_strconcat3_a macros\n\tso their arguments get only evaluated once. changed g_strconcat3_a to\n\thave the same semantics as g_strconcat, i.e. if a certain argument is\n \tNULL, the rest of the parameter list is skipped.\n\n\t* tests/alloca-test.c: removed #if/#endif G_HAVE_ALLOCA, we need to be\n \table to compile on all systems. added test for g_strconcat() semantics.\n\n\t* we need a alloca() replacement for !G_HAVE_ALLOCA rsn!\n\nMon Jan  4 02:58:13 CST 1999 Shawn T. Amundson <amundson@gtk.org>\n\n        * Released GLib 1.1.12\n\n        * INSTALL:\n          NEWS:\n          README:\n          configure.in:\n\t  glib.spec:\n          docs/glib-config.1: version=1.1.12\n\n\t* tests/Makefile.am: fixed so it works properly with\n\t  builddir and srcdir.\n\nSun Jan  3 01:38:14 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* tests/Makefile.am:\n\tadd array-test.c, tree-test.c\n\n\t* tests/array-test.c, tests/tree-test.c:\n\tNew module, tests array family\n\n\t* tests/hash-test.c, tests/list-test.c, tests/slist-test.c,\n\t  tests/string-test.c, tests/node-test.c:\n\tClean out cruft left over from testglib.\n\nSat Jan  2 22:42:25 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* Makefile.am, configure.in, tests/*:\n\tAdded 'make check' tests, based on testglib code.\n\nSat Jan  2 19:52:45 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* glib.h, testglib.c:\n\tAdded g_alloca, g_new_a, g_new0_a macros.\n\nSat Jan  2 16:45:44 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* testglib.c: Added g_strdup_printf check.\n\nFri Jan  1 21:58:40 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* glib.h:\n\t(g_strdup_a, g_strndup_a): Handle NULL strings like g_strdup.\n\ts/g_strconcat_a/g_strconcat3_a/ to reflect fixed number of args\n\n\t* testglib.c:\n\tAdded g_strdup, g_strconcat checks.\n\tAdded str==NULL checks for alloca string macros.\n\ts/g_strconcat_a/g_strconcat3_a/\n\nFri Jan  1 18:30:41 PST 1999 Manish Singh <yosh@gimp.org>\n\n\t* testglib.c: made the alloca tests follow the testglib style\n\n\t* Makefile.am: minor cleanups, mostly cosmetic\n\nFri Jan  1 20:43:19 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* glib.h: added g_strndup_a macro\n\n\t* testglib.c:\n\tAdded tests for new alloca-based string routines.\n\tReformatted a couple strings.\n\nSat Jan  2 02:20:59 1999  Tim Janik  <timj@gtk.org>\n\n\t* ghook.c:\n\t(g_hook_list_invoke):\n\t(g_hook_list_invoke_check):\n\t(g_hook_list_marshal_check):\n\t(g_hook_list_marshal): avoid unneccessary extra hook referencing (the\n\texplicit hook referencing became unneccessarry with my changes from\n\tMon Dec 21 21:48:29 1998).\n\n\t* gmain.c (g_main_iterate): fixed reference counting leaks with\n \tpremature loop aborts.\n\nFri Jan  1 22:47:44 1999  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c (g_scanner_unexp_token): handle G_TOKEN_IDENTIFIER_NULL\n\tas G_TOKEN_IDENTIFIER.\n\nFri Jan  1 17:09:19 EST 1999  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* configure.in, glib.h:\n\tAdded two new alloca-based function macros, g_strdup_a and\n\tg_strconcat_a.\tThese are stack-based and much faster than\n\ttheir g_malloc-based counterparts.  Kudos to Ulrich Drepper\n\tfor help on this one.\n\nWed Dec 30 18:24:57 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n        * Released GLib 1.1.11\n\n        * INSTALL:\n          NEWS:\n          README:\n          configure.in:\n          docs/glib-config.1: version=1.1.11\n\n1998-12-30  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* glib.h (G[U]INT64_FROM_{LE,BE}):\n\tDefine to G[U]INT64_TO_{LE,BE}, not G[U]INT32_TO_{LE,BE}.\n\nFri Dec 25 19:56:33 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* acglib.m4\n\t* configure.in: provide defaults for POLL sysdefs, simple enums\n\tdon't work with bitwise logic. Reported by Daniel Skarda\n\t<0rfelyus@atrey.karlin.mff.cuni.cz>\n\nWed Dec 23 00:43:25 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* INSTALL:\n\t  NEWS:\n\t  README:\n\t  configure.in:\n\t  docs/glib-config.1: version=1.1.10\n\nWed Dec 23 04:18:11 1998  George Lebl  <jirka@5z.com>\n\n\t* gmain.c: (g_get_current_time) don't cast to timeval since\n\t  timeval is for some reason not always a struct of longs, weird\n\nTue Dec 22 10:32:11 1998  Tim Janik  <timj@gtk.org>\n\n\t* ghook.c (g_hook_first_valid): fixed buglet that could cause bogus\n\twarnings.\n\nMon Dec 21 21:48:29 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gmain.c: there was a reference count race for hooks during invocation\n\tloops. since all (known) hook loop implementations, do currently start\n\tout with g_hook_first_valid() and iterate with g_hook_next_valid(),\n\tg_hook_first_valid() will now return a referenced hook, and\n\tg_hook_next_valid() will \"eat\" that, and eventually transfer it to\n\tthe next hook. <sigh> unfortunately this requires g_hook_next_valid()\n \tto take the hook_list as additional argument.\n\n\t* gmain.c (g_main_iterate): adjusted callers of g_hook_next_valid().\n\nMon Dec 21 03:48:04 1998  Tim Janik  <timj@gtk.org>\n\n\t* gmain.c (g_main_iterate): default initialize source_timeout with -1\n\tso we have a sane timeout value if (*prpare) doesn't set it.\n\nSat Dec 19 16:56:02 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* glib.h gmain.c (G_PRIORITY_LOW): Add #defines defining\n\tscale of priorities.\n\nSat Dec 19 16:56:02 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* gmain.c (g_main_poll): Allocate space for pollfd's\n\t_after_ adding poll wake-up-pipe record.\n\n\t* gmain.c (g_main_add_poll): Changed name\n\tof internal function g_main_add_poll_unlocked()\n\tback from the non-sensical g_main_add_unlocking_poll().\n\nSat Dec 19 06:25:55 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.m4: fixed a minor bug that would let configures bail out\n\tif the MODULES argument contained newlines.\n\n\t* acglib.m4: new file to be included by configure.in. it holds\n\tspecial GLIB_ autoconfiguration macros, eventually some of the\n\teasier ones should be moved into glib.m4, e.g. GLIB_IF_VAR_EQ,\n\tGLIB_STR_CONTAINS or GLIB_ADD_TO_VAR.\n\nSat Dec 19 04:27:17 1998  Tim Janik  <timj@gtk.org>\n\n\t* fixed up sys/poll.h and sys/types.h inclusions.\n\nSat Dec 19 03:10:50 1998  Tim Janik  <timj@gtk.org>\n\n\t* fixed up gthread includes, cleaned up glibconfig.h a little bit.\n\nFri Dec 18 12:51:39 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* gmain.c: Fix errors in computation of timeout\n\texpiration times > 1sec.\n\n1998-12-18  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in (have_threads): Changed the last pthread_cond_init\n\tto pthread_attr_init.\n\nFri Dec 18 00:03:17 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gmain.c:\n\t(g_main_is_running): new function to check whether a main loop has been\n\tquitted.\n\t(g_main_new): added a gboolean argument to determine whether the loop\n\tshould be considered initially running or not. however, g_main_run ()\n \twill still reset the main loops running state to TRUE upon initial\n \tentrance.\n\n\t* gmain.c:\n \t(g_main_iterate): documented this function's purpose in 5 steps.\n \tfor step 2), flag sources as G_SOURCE_READY even if !dispatch and\n\tcheck G_SOURCE_READY prior to (*prepare), so we don't call (*prepare)\n \ton them multiple times.\n\nThu Dec 17 23:43:47 1998  Tim Janik  <timj@gtk.org>\n\n\t* gmain.c (g_main_add_poll): reordered arguments, so GPollFD* comes\n\tfirst, <sigh> (sorry Snorfle, i should have let you know in the first\n \tplace).\n\t(g_main_dispatch): stack G_HOOK_FLAG_IN_CALL flags. call source's\n\tdestructor when destroying a source.\n\n1998-12-17  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* garray.c (g_ptr_array_remove_index): Fixed size in g_memmove,\n\treported by Alexander Larsson <alla@lysator.liu.se>.\n\n\t* gmem.c: Fixed bug, that made compile fail for -DENABLE_MEM_PROFILE.\n\nWed Dec 16 23:04:26 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.9\n\n\t* INSTALL:\n\t  NEWS:\n\t  README:\n\t  configure.in:\n\t  glib.spec:\n\t  docs/glib-config.1: version=1.1.9\n\nWed Dec 16 22:32:13 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* glib.h:\n\t  giounix.c: s/g_main_poll_add/g_main_remove_add/g\n                     s/g_main_poll_remove/g_main_remove_poll/g\n                     s/g_main_poll_add_unlocking/g_main_add_unlocking_poll/g\n          (from Tim Janik)\n\nWed Dec 16 20:04:10 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: check for pthread_attr_init in all cases, du4\n\tneeds this since most of the other functions are just #defines\n\nThu Dec 17 04:10:49 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (G_LOCK_DECLARE_*): if !G_THREADS_ENABLED, eat the\n\ttrailing semicolon with a bogus function declaration, instead\n\tof with a bogus variable declarations, so we avoid unused\n\tvariable warnings.\n\nWed Dec 16 07:49:16 PST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.8  (CVS tag is GLIB_1_1_8a)\n\n1998-12-16  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* giounix.c (g_io_channel_unix_get_fd): Fixed small bug.\n\n1998-12-16  Joel Becker  <jlbec@ocala.cs.miami.edu>\n\n\t* glib.h, gscanner.c: changed func_data to user_data in\n        g_scanner_scope_symbol_foreach and associated friends, because\n\tAIX headers #define func_data.\n\n1998-12-16  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Fixed stupid bug, that made\n\tg_static_mutex_lock(*mutex) not work as expected.\n\n\t* docs/glib-config.1: Updated to reflect the existence of gthread.\n\n\t* gmain.c (g_main_poll_add_unlocking): Changed\n\tg_main_poll_add_unlocked to g_main_poll_add_unlocking to match\n\tsemantic, (indeed, main_loop must be locked, when calling this\n\tfunction). Removed the unlocking from the end of that function, as\n\tthat is not right. Made a 'HOLDS' comment above the function.\n\nWed Dec 16 03:16:58 1998  Tim Janik  <timj@gtk.org>\n\n        * configure.in: version bump to 1.1.8, binary age 0, interface age 0.\n\n\t* glib.h: changed g_lock() to G_LOCK(), g_unlock() to G_UNLOCK() and\n\tg_trylock() to G_TRYLOCK(), since these are macros that expand to\n\tnothing with --disable-threads.\n\tchanged G_LOCK_DEFINE() to G_LOCK_DECLARE() and introduced\n \tG_LOCK_DECLARE_STATIC() to achive the results of static G_LOCK_DECLARE().\n\tchanged semantics of g_thread_supported to g_thread_supported() so it\n\tcan be used as a function like g_module_supported(). the actuall\n\tdefinition is still a macro that expands into a variable for\n \tperformance reasons though.\n\tvarious indentation and coding style cleanups.\n\n\t* configure.in: added --enable-threads that defaults to yes.\n\n\t* gmutex.c: changed tests g_thread_supported to g_thread_supported (),\n\tchanged variable settings of g_thread_supported\n \tto g_threads_got_initialized.\n\n\tgarray.c:\n\tgcache.c:\n\tgdataset.c:\n\tgdate.c:\n\tghash.c:\n\tglist.c:\n\tgmain.c:\n\tgnode.c:\n\tgslist.c:\n\tgstring.c:\n\tgtree.c:\n\tgutils.c:\n\tchanged s/g_lock/G_LOCK/, s/g_unlock/G_UNLOCK/,\n \ts/static G_LOCK_DEFINE/G_LOCK_DECLARE_STATIC/.\n\nTue Dec 15 23:16:05 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* INSTALL:\n\t  NEWS:\n\t  README\n\t  configure.in:\n\t  glib.spec:\n\t  docs/glib-config.1: Incremented version\n\nWed Dec 16 22:29:48 1998  Joel Becker  <jlbec@ocala.cs.miami.edu>\n\n\t* configure.in: fixed the AIX thread checking.\n\tJust an error on the wildcard.  BTW, -D_THREAD_SAFE\n\tis correct for AIX.\n\nWed Dec 16 02:02:48 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib-config.in (lib_glib): fixed library and flag ordering for\n\t--libs\n\nTue Dec 15 17:17:46 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* glib.h giounix.c giochannel.c: Use an \"inheritance\"\n\tscheme for IO channel memory allocation.h\n\n1998-12-15  Havoc Pennington  <hp@pobox.com>\n\n\t* gdate.c (g_date_prepare_to_parse): Solaris has a broken strftime\n\tthat produced garbage output for the test date I was using to\n\tset up the parser. So use a different date that Solaris seems\n\tto like.\n\n1998-12-15  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: Dont complain, if --without-threads or\n\t--with-threads=none is supplied; Test for pthread_attr_init\n\tinstead of pthread_cond_init, if threads seems to be supported by\n\tstandard glib. (CFLAGS): Use G_THREAD_CFLAGS for compiling of glib\n\tas well.\n\n\t* glib.h, gmutex.c: Changed private to private_key to avoid\n\tproblems when compiling with under C++.\n\n1998-12-15  Jeff Garzik  <jgarzik@Pobox.com>\n\n\t* configure.in:\n\tbugfixes, correctly support --without-threads and friends\n\n\t* gthread/testgthread.c: corrected 64-bitness problem\n\nTue Dec 15 10:40:09 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* gnode.c glist.c gslist.c: Make sure all\n\tcalls to g_node_validate_allocator are within\n\tcurrent_allocator lock, so we have consistency\n\ton that point. (Should not really matter,\n\tbut this way we match the comments)\n\n\t* glist.c (g_list_free_1): Removed some lines\n\tthat should never have been committed. (For\n\tdebugging)\n\n1998-12-11  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gthread/gthread-nspr.c, configure.in: Added new default thread\n\timplementation on top of the mozilla nspr library.\n\n\t* gmem.c, gmessaged.c, gthread/gthread.c, gthread/gthread-*.c:\n\tChanged GStaticMutex and GStaticPrivate in gmem.c and gmessages.c\n\tinto GMutex and GPrivate resp. to make error reporting and use of\n\tgmem possible in most (not all, though) gthread functions. Also\n\tinitialized the modules via new init functions.\n\n\t* configure.in: Fixed syntax bug in definition of type\n\tGStaticMutex.\n\n\t* gthread/testgthread.c: Updated to work with nspr, but see note\n\tthere for remaining problems.\n\n1998-12-10  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gmutex.c, glib.h: Now abort, if a mutex/cond/private is\n\tallocated before the thread system is set up.\n\n\t* gthread/gthread.c (g_thread_init): Removed g_thread_try_init(),\n\tas it is not necessary. Changed the error message. Corrected logic\n\tfor g_thread_use_default_impl.\n\n\t* gmutex.c (g_mutex_init): Keep the thread private data array\n\tafter calling g_thread_init().\n\n1998-12-09  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* gthread/testgthread.c (new_thread): Now also working for posix\n\tthreads; (wait_thread): Now a better implementation, that does not\n\tuse 100% CPU.\n\n\t* Made the thread related code follow GNU coding standard.\n\n\t* Made a comment (HOLDS:) above each function, that expects the\n\tgiven locks to be held.\n\n\t* Changed try_lock to trylock throughout.\n\n\t* glib.c: Eventually removed the #if 0'ed code for old GStaticMutex.\n\n\t* glib.c: Corrected g_trylock macro for G_DEBUG_LOCKS.\n\n\t* gmain.c (g_main_poll_add_unlocked): first take a new poll record\n\tform the poll_free_list.\n\n\t* gmem.c, gstrfuncs.c, gutils.c: Made it MT safe.\n\n\t* gthraed/*.c: Added copyright headers.\n\n\t* gthread/gthread-solaris.c: do not use g_log for errors, as g_log\n\tuses these module and endless recursions might happen, just use a\n\tplain fprintf(stderr,...).\n\n\t* gthread/gthread.c (g_thread_try_init): Call g_mutex_init().\n\n\t* gthread/testgthread.c: updated test program.\n\nTue Dec  8 18:49:56 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* Start at adding thread-safety. (mostly work\n\tof Sebastian Wilhelmi <wilhelmi@ira.uka.de>)\n\n\t- configure.in now looks for a system thread implementation.\n\tCurrently support is included for POSIX threads\n\tand Solaris threads. The default support is built\n\tinto a separate library -lgthread.\n\n\t- The thread implementation can be modified by passing\n\ta vector of functions g_thread_init().\n\n\t- The default or supplied functions are used to\n\timplement a small set of thread functions for\n\tmutexes, condition variables, and thread-private\n\tdata.\n\n\t- GLib now uses these functions to provide thread\n\tsafety. (In the sense that all global static\n\tdata is locked... individual structures must still\n\tbe locked by the caller.)\n\nSat Dec 12 19:08:59 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: always define G_HAVE_INLINE if __cplusplus is\n \tdefined, reported by Wan-Teh Chang <wtc@netscape.com>.\n\nThu Dec 10 21:49:39 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.7\n\n\t* INSTALL:\n\t  NEWS:\n\t  README:\n\t  configure.in:\n\t  glib.spec:\n\t  docs/glib-config.1: Increased version to 1.1.7\n\nWed Dec  9 22:44:44 EST 1998 Joel Becker <jlbec@ocala.cs.miami.edu>\n\n\t* Removed #define of G_COMPILED_WITH_DEBUGGING from glibconfig.h\n\tIt shouldn't be there, and it was causing a double #define.\n        (config.h defines it also)\n\nTue Dec  8 12:18:38 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.6\n\n\t* NEWS: updated\n\nMon Dec  7 23:10:41 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* gmain.c: fixes to #undef HAVE_POLL case\n\n1998-12-02  Havoc Pennington  <hp@pobox.com>\n\n\t* gdate.c (g_date_set_month): If Julian is valid, we have to\n\tupdate the dmy representation before setting the components\n\tof it.\n\t(g_date_set_day): Same.\n\t(g_date_set_year): Same.\n\n1998-12-02  Havoc Pennington  <hp@pobox.com>\n\n\t* testgdate.c, testgdateparser.c: Two new files. This is kind of\n\tugly code, but I want to go ahead and make the tests available.\n\tIt isn't contaminating any other code. :-) Since one of these\n\tis interactive and the other takes a while to run, I've kept\n\tthem separate from testglib for now.\n\t* Makefile.am: Build gdate test programs.\n\n1998-12-02  Havoc Pennington  <hp@pobox.com>\n\n\t* gdate.c (g_date_valid): Rely on GDate::dmy and GDate::Julian\n\tflags, rather than re-checking the validity of the actual\n\tvalues. This should be the correct behavior, the old way was\n\tleftover cruft.\n\n\t* glib.h, gdate.c: Changed MDY to DMY throughout.\n\nSat Nov 28 12:53:47 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* Makefile.am configure.in acconfig.h giochannel.c\n\t  glib.h glist.c gmain.c gutils.c:\n\n        - Revised GIOChannel to provide a generic virtual-function\n  \t  based interface.\n\t- Added unix fd-based GIOChannel's\n\t- Added generic main-loop abstraction\n\t- Added timeouts and idle functions using main-loop abstraction.\n\n1998-12-02  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* glib.h:\n\t* gdate.c: changed `gpointer struct_tm_p' parameter of\n\tg_date_to_struct_tm back to `struct tm *tm' and forward declared\n\t`struct tm' in glib.h; yes, this is nice, we still need not\n\tinclude time.h.\n\nTue Dec  1 23:01:44 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* INSTALL:\n          NEWS:\n\t  README:\n\t  glib.spec:\n\t  docs/glib-config.1: Incremented versions to 1.1.6.\n\nWed Dec  2 02:10:59 1998  Tim Janik  <timj@gtk.org>\n\n\t* gdate.c: s/time_t/GTime/ and s/g_print/g_message/\n\tinclude time.h.\n\n\t* glib.h: removed #include <time.h>, changed time_t paramter of\n \tg_date_set_time() to time_t, changed struct tm parameter of\n\tg_date_to_struct_tm to `gpointer struct_tm_p'. yes, this is not\n\tnice, but including time.h actually breaks a bunch of code.\n\n\t* incremented GLib version to 1.1.6.\n\n1998-11-30  Havoc Pennington  <hp@pobox.com>\n\n\t* gdate.c: New file, implements calendrical calculations.\n\n\t* glib.h: Added declarations for GDate module.\n\nMon Nov 30 07:12:10 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* ghook.c: added g_hook_list_marshal_check() to eventually destroy\n\thooks after they got marshalled.\n\nSun Nov 29 17:31:43 EST 1998  Jeff Garzik  <jgarzik@pobox.com>\n\n\t* configure.in, Makefile.am, gmodule/Makefile.am:\n\tPut -DFOO stuff into Makefile.am INCLUDES.\n\nSun Nov 29 14:17:09 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: put debug -DFOO stuff into CPPFLAGS, not CFLAGS,\n\tso CFLAGS can be overridden at make time properly\n\nSat Nov 28 01:23:25 1998  Tim Janik  <timj@gtk.org>\n\n\t* ghash.c: implemented incremental freezing facility.\n\nThu Nov 26 01:36:20 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* ghash.c: reverted the g_hash_table_set_key_freefunc() addition,\n\tsince it's to specialized and needs to be resolved in a generic\n\tfashion.\n\nTue Nov 24 18:57:59 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* applied glib-tml-981120-0, change log appended below.\n\n\t* glibconfig.h.win32: passthrough 64-bit constants unchanged, VC++\n\tinfers them\n\nFri Nov 20 22:26:43 1998  Tor Lillqvist  <tml@iki.fi>\n\n        * glib.h: Moved MSC pragmas from glib.h to glibconfig.h.win32.\n        peer_offset field in WIN32 part of GIOChannel removed, need_wakeups\n        added. Added \"extern\" to __declspec(dllimport).\n\n        * gutils.c: Initialise need_wakeups.\n\n        * glibconfig.h.win32: Pragmas moved here. Define G_GINT64_CONSTANT.\n\n        * gmodule/gmodule.def: Added g_module_build_path.\n\n        * gscanner.c: (g_scanner_cur_value) Move initailisation of v\n        to before its use.\n\n        * glib.def: Added g_(s)list_sort.\n\n        * makefile.msc: A few more comments.\n\nTue Nov 24 14:05:47 EST 1998\tMichael K. Johnson <johnsonm@redhat.com>\n\n\t* glib.h: added GFreeFunc and g_hash_table_set_key_freefunc()\n\tprototype.\n\t* ghash.c: added g_hash_table_set_key_freefunc() implementation.\n\tModified the prototypes of the functions g_hash_node_destroy() and\n\tg_hash_nodes_destroy(), and changed the functions that call them\n\tto match the new definitions.\n\tThis changes no external interfaces, and should create no binary\n\tor source incompatibilities.  It does add a member to the\n\tGHashTable structure.\n\nTue Nov 24 09:40:00 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: removed the GListAllocator type and its g_*_allocator_*()\n \tfunction variants (which weren't working anyways) in favour of a\n \tgeneric GAllocator type. new functions:\n\tg_allocator_new, g_allocator_free, g_slist_push_allocator,\n\tg_slist_pop_allocator, g_list_push_allocator, g_list_pop_allocator,\n\tg_node_push_allocator and g_node_pop_allocator.\n\n\t* gstring.c: removed bogus slist allocator code.\n\t* gtree.c: maintain own list of free tree nodes and don't waste\n\tGSLists for that, removed bogus slist allocator code.\n\t* glist.c: use GAllocators for node allocation.\n\t* gslist.c: use GAllocators for node allocation.\n\t* gnode.c: use GAllocators for node allocation.\n\n\t* gdataset.c: cleanups wrt automatic initialization.\n\nMon Nov 23 10:03:58 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* glib.h garray.[ch]: added g_array_insert_vals() to\n\tinsert elements at an arbitrary index, and\n\tg_array_insert_val() macro.\n\nSun Nov 22 17:07:03 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gslist.c: new function g_slist_copy() to duplicate a list with all its\n\tdata pointers.\n\t* glist.c: new function g_list_copy.\n\nSat Nov 21 14:57:39 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* INSTALL:\n\t  NEWS:\n\t  README:\n\t  configure.in:\n\t  glib.spec: Updated to version 1.1.5\n\n\t* Released GLib 1.1.5\n\nWed Nov 18 1998 Elliot Lee <sopwith@redhat.com>\n\n\t* gdataset.c: There was a code path into g_data_set_internal\n\t  through a function (g_datalist_id_set_full). Neither function\n\t  checked for g_dataset_init having been run, but\n\t  g_data_set_internal used the memchunk. I added\n\t  a check into g_data_set_internal so it will do the\n\t  initialization if needed. (There's probably a better way.)\n\nMon Nov 16 07:48:06 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (g_bit_nth_msf): fixed off-by-one error, so we don't waste\n\ta loop iteration if (-1) was passed, reported by Andreas Bombe\n \t<andreas.bombe@munich.netsurf.de>.\n\nFri Nov 13 15:17:34 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* glist.c gslist.c glib.h: Added g_list_sort() and\n\tg_slist_sort() to merge sort GLists and GSLists.\n\tSubmitted by Sven Over <sven.over@ob.kamp.net>\n\tover a year ago!\n\n\t* testglib.c: Test the new sort functions.\n\nWed Nov 11 23:23:22 EST 1998 Jeff Garzik <jgarzik@pobox.com>\n\n\t* Makefile.am : INCLUDES is the right way to add to CFLAGS, not\n\tDEFS.  Also there are bugs with '+=' in makefiles.\n\tGot rid of DEFS line by moving G_LOG_DOMAIN setting into INCLUDES.\n\tRemoved redundant -I from INCLUDES.\n\nWed Nov 11 18:11:24 EST 1998 Gregory McLean <gregm@comstar.net>\n\n\t* docs/*.sgml : Batch of new documentation that should be easier\n\tto maintain and extend. Plus generate whatever sort of doc file\n\tyou would like. I didn't change the Makefile stuff as I'm not sure\n\twhat default doc type people want. Oh and this is all DocBook format.\n\tEnjoy!\n\nTue Nov 10 17:12:45 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: use __extension__ for long long on gcc >= 2.8 and\n\tegcs, and provide a G_GINT64_CONSTANT wrapper so -ansi -pedantic\n\tcompiles clean.\n\n\t* glib.h: make the endian x86 asm __const__ so the compiler can do\n\tbetter optimizations. Also remove the cc clobber, these shouldn't\n\tbe changing condition codes. Ditch some redundant casts. Add an\n\toptimization for 64-bit endian conversions in x86. Use constant\n\twrapper for the generic method.\n\n\t* testglib.c: use constant wrappers for 64-bit constants\n\n1998-11-04  Phil Schwan  <pschwan@cmu.edu>\n\n\t* configure.in: Added 'strncasecmp' to the list of functions to be\n\tsearched for.\n\t* glib.h: Added a prototype for 'g_strncasecmp'\n\t* gstrfuncs.c: (g_strncasecmp) new function modeled closely after\n\t'g_strcasecmp'\n\nWed Nov  4 15:06:44 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* config.h.win32 (new file)\n\t* glibconfig.h.win32\n\t* glib.def\n\t* makefile.msc: applied glib-tml-981104, win32 sync\n\n1998-11-03  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* glib.h:\n\t* garray.c:\n\t(g_array_remove_index): new function for removing an entry from an\n\tarray while preserving the order\n\t(g_array_remove_index_fast): new function for removing an entry\n\tfrom an array. the order might be distorted\n\t(g_ptr_array_remove_index_fast, g_ptr_array_remove_fast): new\n\tfunctions; working similiar to the above. (they have the semantic\n\tof the old g_ptr_array_remove[_index] functions)\n\t(g_ptr_array_remove_index, g_ptr_array_remove): new semantic. now\n\tthe order of the elements in the array is not changed\n\t(g_byte_array_remove_index, g_byte_array_remove_index_fast): new\n\tfunctions; byte_array wrapper for g_array_remove_index[_fast]\n\nSun Nov  1 23:00:18 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h\n\t* configure.in: endian macros defined using the glibconfig.h\n\tmechanism now\n\n\t* ghook.c: casts for GHookFunc and GHookCheckFunc to avoid warnings\n\nSat Oct 31 20:14:22 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* applied glib-tml-981101-1 patch from Tor Lillqvist (ChangeLog\n\tentry appended below)\n\n\t* testglib.c\n\t* gstrfuncs.c\n\t* glib.h: use G_HAVE_GINT64, since HAVE_GINT64 is gone\n\n\t* gmessages.c\n\t* gscanner.c: #include <config.h> in here too, for HAVE_UNISTD_H\n\n1998-11-01 Tor Lillqvist <tml@iki.fi>\n\n\t* glib.def: Added the new functions.\n\n\t* gutils.c:\n\t(g_getenv): Better implementation on Win32. No loop necessary.\n\t(g_get_any_init): Use P_tmpdir if defined as tmp directory. Don't\n\tset home dir always to NULL on Win32.  Don't use tmp directory as\n\tlast resort home directory, but return NULL if no home\n\tdirectory is known (application must check).\n\n\t* makefile.msc: Better touch command, just COPYing a single file\n\tsets the timestamp from that file, which isn't what touching should\n\tdo.\n\n1998-10-31  Raja R Harinath  <harinath@cs.umn.edu>\n\n\tLand glib-rrh-19981025-0.patch.\n\t* Makefile.am (glibconfig.h): New rule.\n\t(stamp-gc-h): New rule.  Generate `glibconfig.h'.\n\t* configure.in (AM_CONFIG_HEADER): It is now `config.h'.\n\t(HAVE_BROKEN_WCTYPE): On Solaris, look for iswalnum in -lw before\n\tconcluding \"broken wctype\".\n\t(glibconfig.h): Use AC_OUTPUT_COMMANDS to put generation code into\n\tconfig.status.\n\t* glib.h: Remove a lot of tests and defines.  All these have been\n\tmoved to `configure.in (glibconfig.h)'.\n\t* gerror.c: Include <config.h>.\n\t* gmem.c: Likewise.\n\t* gstrfuncs.c: Likewise.\n\t* gutils.c: Likewise.\n\nSat Oct 31 05:08:26 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: removed old G_ENUM(), G_FLAGS(), G_NV() and G_SV() macros.\n\tadded macros G_STRUCT_OFFSET(), G_STRUCT_MEMBER_P() and\n \tG_STRUCT_MEMBER() for handling structure fields through their offsets.\n\t(struct _GHookList): added a hook_free function member, that can be used\n\tto free additional fields in derived hook structures.\n\tg_hook_free(): if hook_list->hook_free != NULL, call this function prior\n\tto freeing the hook. (this functionality should have been there in the\n\tfirst place, it just got forgotten as an implementation detail).\n\nWed Oct 28 00:49:32 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: G_BREAKPOINT for alpha from Robert Wilhelm\n\t<robert@physiol.med.tu-muenchen.de>\n\nTue Oct 27 07:25:53 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gscanner.c:\n\t(g_scanner_sync_file_offset): new function for file input.\n\trewind the filedescriptor to the current buffer position and blow\n \tthe file read ahead buffer. usefull for third party uses of our\n \tfiledescriptor, which hooks onto the current scanning position.\n\t(this became neccessary with the implementation of buffered\n\treads).\n\t(g_scanner_input_file):\n\t(g_scanner_input_text): automatically blow the read ahead buffer.\n\t(g_scanner_get_char): blow the read ahead buffer when the end of\n\tinput is reached, i.e. a '\\000' char is read.\n\nTue Oct 27 00:27:31 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: get rid of duplicate #g_htonl and friends in the\n\tNATIVE_WIN32 part\n\nMon Oct 26 22:42:01 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glibconfig.h.win32\n\t* gutils.c\n\t* makefile.msc: win32 patch from Tor Lillqvist (glib-tml-981027-0),\n\tfixes some minor win32 buglets\n\nMon Oct 26 22:12:03 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: reimplemented the endian stuff, using inline asm\n\tfor x86. #define g_htonl and friends.\n\n\t* testglib.c: new tests for the endian stuff\n\n\t* configure.in: care for AIX in gmodule linker flags test (from\n\tJoel Becker <jlbec@raleigh.ibm.com>). Check $host_os for linux\n\tinstead of existance of /usr/include/linux\n\n\t* gutils.c: buh-bye evil warning. Thou hast been #ifdef'd out\n\tof thine existance!\n\nTue Oct 27 03:00:50 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: removed dummy structure definitions for struct _GCache,\n \t_GTree, _GTimer, _GMemChunk, _GListAllocator and _GStringChunk.\n\n\t* gutils.c: implement glib's inline functions _after_ all include\n \tstatements have been processed.\n\tremoved Tor's MAXPATHLEN check since there already was one supplied\n\tfurther down in this file.\n\t(LibMain): special cased the #ifdef __LCC__ case for NATIVE_WIN32,\n \tsince lcc maybe used on other platforms as well. why in hell is this\n\tstuff required?\n\t(g_get_any_init): for windows, if the user name is supplied, use it as\n\trealname also.\n\tin general, if there is no homedir specified, use the tmpdir that\n\twe already figured.\n\n\t* gtimer.c (g_timer_elapsed): changed a g_assert() statement to\n \tg_return_if_fail().\n\n\t* applied glib-tml-981020-0.patch for WIN32 portability, added some\n\tcomments and g_return_if_fail() statements, minor indentation fixes.\n\tChangeLog entry from Tor Lillqvist is appended.\n\n\t* glib.h (struct dirent): use lower case structure members.\n\n\t* glib.h:\n\t* makefile.lcc:\n\t* makefile.msc:\n\ts/COMPILING_GLIB/GLIB_COMPILATION/\n\n1998-10-20: Tor Lillqvist <tml@iki.fi>\n\n\t* README.win32 glib.def gmodule.def\n\t* glibconfig.h.win32 gmodule/gmoduleconf.h.win32:\n\tNew files for the Windows port. The .def files list exported\n\tsymbols for the Microsoft linker and compatibles.\n\n\t* configure.in:\n\tAdded checks for some platform-dependent headers: pwd.h sys/param.h\n\tsys/select.h sys/time.h sys/times.h unistd.h, and the function lstat.\n\n\t* gerror.c:\n\tConditionalized inclusion of system-dependent headers. Changes\n\tfor Windows: no gdb to do a stack trace. Just call abort().\n\n\t* glib.h:\n\tChanges for Windows:\n\n\tAdded macros G_DIR_SEPARATOR, G_DIR_SEPARATOR_S for\n\tplatform-dependent file name syntax elements. Added macros\n\tG_SEARCHPATH_SEPARATOR, G_SEARCHPATH_SEPARATOR_S for\n\tplatform-dependent search path syntax conventions.\n\n\tAdded pragmas for Microsoft C to make it more pedantic.\n\n\tMarked GLib's global variables for export from DLL.\n\n\tAdded the function g_strescape that escapes backslashes.\n\n\tAdded functions g_path_is_absolute and g_path_skip_root to\n\thandle platform-dependent file name syntax.\n\n\tAdded the function g_getenv that expands environment variables\n\tthat contain references to other environment variables, as is\n\ttypical on Windows NT.\n\n\tAdded the GIOChannel structure which is used to encapsulate the\n\tIPC mechanism used by the GIMP's plug-ins, and possibly other\n\tthings later. On Unix a GIOChannel encapsulates just a file\n\tdescriptor. On Windows it contains a file handle from _pipe() and a\n\tfew other things related to the implementation of gdk_input_add\n\tand GIMP plug-in communication. Subject to change.\n\n\tRemoved duplicate declarations of the version variables.\n\n\tFor the Microsoft compiler, declare own implementation of\n\tftruncate and the <dirent.h> functions.\n\n\t* gmem.c:\n\tDefine a symbolic name  for the profiling table size.\n\n\t* gmessages.c:\n\tConditionalized inclusion of unistd.h. On Windows, output using\n\tstdio to stdout.\n\n\t* gscanner.c:\n\tConditionalized inclusion of unistd.h. Added changes for\n\tMicrosoft C. Added CR to the skipped character set. Added small\n\tworkaround for MSC compiler bug in g_scanner_cur_value.\n\n\t* gstrfuncs.c:\n\tAdded the function g_strescape, which escapes the backslash\n\tcharacter. Needed especially when printing Windows filenames.\n\n\t* gtimer.c:\n\tConditionalized inclusion of unistd.h and sys/time.h. Added\n\timplementations for Windows.\n\n\t* gutils.c:\n\tConditionalized inclusion of platform-dependent headers. Use\n\tthe platform-independent file name syntax macros.\n\tConditionalize code on platform-dependent features. Added the\n\tfunctions g_path_is_absolute g_path_skip_root and g_getenv.\n\tAdded the GIOChannel-related functions. Added\n\tcompiler-dependent Unix compatibility functions for Windows.\n\n\t* makefile.lcc makefile.msc:\n\tNew files. Compiler-specific makefiles for LCC-Win32 and\n\tMicrosoft C. Only Microsoft C is actually supported currently.\n\n\t* testglib.c:\n\tAdded pathname check cases for Windows. Added workaround for\n\tbug in the Microsoft runtime library. Improved some tests a bit.\n\nSun Oct 25 01:24:01 CST 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.4\n\n\t* docs/Makefile.am:\n\t* docs/.cvsignore\n\t* docs/glib-config.1:\n\t* docs/glib.texi: Moved docs from gtk and created glib-config.1\n\tfrom gtk-config.1 in gtk\n\n\t* configure.in:\n\t* Makefile.am:\n\t* sanity_check: added in docs directory, change rule 'release'\n\tto 'snapshot' and created a new 'release' rule for doing the\n\tdistribution.  Added in a 'sanity' rule.\n\n\t* NEWS:\n\t* README:\n\t* INSTALL: Updated for the release\n\nSun Oct 25 07:30:10 1998  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c:\n\t(g_scanner_peek_next_char):\n \t(g_scanner_get_char): no more characters are available if read() returns\n \tanything less than 1, not only on 0 return.\n\n\t* glib.h:\n\t* gstrfuncs.c: final API cleanup of string arrays to suit sopwith's\n\targument order requirements.\n \t(g_strsplit): renamed from g_str_array_split().\n\t(g_strjoinv): renamed from g_str_array_joinv(), string array is\n\tnow passed as last parameter. removed `const' qualifier from string\n\tarray pointer (again).\n\t(g_strjoin): new function from sopwith to concatenate strings with\n\tan additional seperator.\n\t(g_strfreev): renamed from g_str_array_free.\n\nSat Oct 24 22:23:04 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* gnode.c: small fix to g_node_children_foreach to make it work right.\n\tFrom Paco Moya <paco@cadnotebk17.eecs.berkeley.edu>\n\nWed Oct 21 19:22:58 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in (G_MODULE_HAVE_DLERROR): reverted part of the changes\n \tfrom Sebastian Wilhelmi (1998-10-20). don't specify a specific loading\n\tbehaviour (i.e. RTLD_NOW) when we are not sure whether it is supplied.\n\tchanged the return value from (!f2 && f1) to (!f2 || f1) so we default\n\tto not needing an underscore. reverted the extra plugin.c building,\n\tbecause .lo files are not ELF libraries, this can't work. This needs\n\tfurther investigation on Solaris...\n\nWed Oct 21 17:03:05 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gstrfuncs.c: API cleanups of the new g_str* functions for consistency\n \twith the existing naming scheme for g_str* functions. grouped the g_str*\n\tfunctions that will return a newly allocated string seperatedly. all of\n\tthe in_place arguments were skipped, the caller is supposed to pass a\n\tg_strdup()ed string if he wants to retrive a new copy. indentation and\n\tcoding style fixups. added some g_return_if_fail() statements.\n\tstring array functions are prefixed with g_str_array_.\n\t(g_strdelimit): return the modified string like all other g_str*\n \tfunctions, that operate in place.\n\t(g_strchug): renamed from g_str_chug(), removed in_place argument.\n\t(g_strchomp): renamed from g_str_chomp(), removed in_place argument.\n\t(g_strstrip): renamed from g_str_strip(), removed in_place argument.\n\t(g_str_array_join): renamed from g_strconcatv(), since it actually\n \toperates on a string array and has totaly different semantics from\n\tg_strconcat(). check for separator != NULL, don't segfault if the first\n \tstring is NULL. removed the `const' from the string array that's passed,\n\tso users can operate on gchar** string arrays.\n\t(g_str_array_split): renamed from g_str_split() because we actually\n \tproduce a string array. reimplemented this function for efficiency.\n\tremoved macro aliases g_str_joinv and g_str_join.\n\n1998-10-20  Elliot Lee  <sopwith@redhat.com>\n\n\t* glib.h, gstrfuncs.c: Move string join/split/free routines from\n \tlibgnome/gnome-string, rename, and add g_str_chug.\n\n1998-10-20  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* configure.in: made the check for needed _ in module's func-names\n\twork on solaris. (G_MODULE_NEED_USCORE must be set outside\n\tAC_CACHE_VAL, dlopen(0,0) refused to work on solaris).\n\nTue Oct 20 03:32:58 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in\n\t* acconfig.h: added test for endianness\n\n\t* glib.h: #define endian macros for system and some conversions\n\tbetween byte order\n\nThu Oct  8 06:47:27 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gdataset.c: removed functions g_dataset_id_set_destroy and\n\tg_datalist_id_set_destroy and macros g_dataset_set_destroy and\n\tg_datalist_set_destroy.\n\tadded new functions g_dataset_id_remove_no_notify and\n\tg_datalist_id_remove_no_notify plus associated macros\n\tg_dataset_remove_no_notify and g_datalist_remove_no_notify, which\n \twill remove a certain data portion without invocation of its destroy\n \tnotifier, this should only be used in very controled circumstances.\n\nWed Oct  7 05:31:24 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\tremoved the #pragma } statement after extern \"C\" {. use\n \t(c-set-offset 'inextern-lang 0) to fixup emacs cc-mode indentation.\n\n\t* glib.h:\n\t* ghook.c: API and code cleanups. changed the G_HOOK_ACTIVE and\n \tG_HOOK_IN_CALL enum vals to G_HOOK_FLAG_ACTIVE and G_HOOK_FLAG_IN_CALL.\n\tchanged the G_HOOK_IS_ACTIVE() and G_HOOK_IS_IN_CALL() macros to\n\tG_HOOK_ACTIVE() and G_HOOK_IN_CALL().\n\tfixed the g_hook_find* functions, so they iterate over non-active\n\thooks as well.\n\t(g_hook_first_valid):\n\t(g_hook_next_valid): added an extra argument gboolean may_be_in_call,\n\twhich indicates whether G_HOOK_IN_CALL() hooks are considered valid\n\tor not. these two functions are meant as iterators for the hook list\n\tinvocation, so they need to a) provide functionality to implement\n\tmay_recurse bahaviour and b) only walk active hooks.\n\nTue Oct  6 14:29:47 1998  Tim Janik  <timj@gtk.org>\n\n\t* gmem.c (g_malloc0): fixed memory offsett when ENABLE_MEM_CHECK is\n\tdefined and ENABLE_MEM_PROFILE is not (patch from Martin Pool\n \t<mbp@wistful.humbug.org.au>).\n\nSat Oct  3 01:18:10 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* ghook.c:\n\t(g_hook_list_invoke):\n\t(g_hook_list_invoke):\n\t(g_hook_list_marshal): properly handle the first valid hook to call,\n\tit maybe IN_CALL already.\n\t(g_hook_list_marshal): minor name change.\n\nFri Oct  2 23:21:21 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* ghook.c: renamed GHook.id to GHook.hook_id so we don't get troubles\n\twith ObjC which reserves \"id\" as a keyword (Raja R Harinath\n \t<harinath@cs.umn.edu>).\n\nWed Sep 30 10:53:03 1998  Tim Janik  <timj@gtk.org>\n\n\t* Makefile.am: added ghook.c.\n\n\t* glib.h:\n \t* ghook.c: generic callback maintenance functions.\n\n\t* glib.h: define G_GNUC_UNUSED.\n\nFri Sep 25 00:04:37 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: version bump to 1.1.4, binary age 0, interface age 0.\n\n\t* glib.h (struct _GScanner): dumped peeked_char and text_len in favour\n \tof *text_end and *buffer for buffered read()s.\n\n\t* gscanner.c: changed peeking and retrival of next character so we\n\thave buffered reads. fixed minor bug with number parsing error\n\treporting. made some static!!! variables local ones (why did we use\n \tstatic temporary variables in the lowlevel tokenization code anyways?).\n\nMon Sep 21 23:23:10 CDT 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.3\n\nMon Sep 21 07:43:13 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: added g_renew() which works as g_new() for g_realloc().\n\nMon Sep 21 02:22:12 1998  Tim Janik  <timj@gtk.org>\n\n\t* NEWS file update for upcoming release of GLib + GModule\n\tversion 1.1.3, binary age 0, interface age 0. (GModule uses\n\tthe same version numbers as GLib.)\n\n\t* glib.h: swap the inclusion of of float.h and limits.h to work\n\taround a egcs 1.1 oddity on Solaris 2.5.1 (fix provided by\n\tPer Abrahamsen  <abraham@dina.kvl.dk>).\n\n\t* glib.h:\n\t* gscanner.c: renamed the GValue union to GTokenValue, this should\n\tnot affect source compatibility in most cases.\n\n\t* ghash.c: added some g_return_if_fail() statements. make\n \tg_hash_table_lookup_node() an inline function so we save an extra\n\tfunction invocation on lookups.\n\nSun Sep 20 18:21:46 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* ltmain.sh: Patch to libtool-1.2b to make --disable-static\n\twork.\n\nSun Sep 20 02:09:44 1998  Josh MacDonald  <jmacd@axis.hip.berkeley.edu>\n\n\t* glib.h: New function g_hash_table_foreach_remove is similar to\n \tg_hash_table_foreach, but the callback's return value indicates\n \twhether to remove the element (if TRUE) or not (if FALSE).\n\tReturns the number of elements deleted.\n\nFri Sep 18 11:31:50 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h\n\t* gstrfuncs.c: added g_memdup implementation\n\nFri Sep 18 18:46:14 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gdataset.c: make the datalists a safe type (not using a generic\n\tgpointer) by expecting a GData* argument in the g_datalist functions.\n\tprovide g_dataset_foreach() and g_datalist_foreach() functions that\n \tallow a GDataForeachFunc function to walk the data lists.\n\t(g_dataset_destroy_internal): made this function truely reentrant (i.e.\n\tcan be called from within destroy notifiers as well).\n\tthe *_foreach functions are _not_ reentrant (unless all the other\n\tdataset and datalist functions).\n\nFri Sep 18 03:41:20 1998  Tim Janik  <timj@gtk.org>\n\n\t* gtree.c (g_tree_new): check for key_compare_func != NULL (reported\n\tby Michal Kara).\n\nThu Sep 17 18:55:46 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* config.h.in: removed from repository\n\n\t* install-sh\n\t* missing\n\t* mkinstalldirs: updated to latest automake version\n\nThu Sep 17 06:36:25 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gdataset.c: implemented g_datalist_* along the lines of g_dataset,\n\tbut operates on an opaque gpointer *datalist; pointer, e.g. for the\n\timplementation of GtkObject named data.\n\twe cache a certain portion of the already freed data entries now, to\n \tgain a slight performance improve with data reallocation.\n\nTue Sep 15 14:57:30 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* Makefile.am glib-config.in l*: Update to libtool-1.2b,\n\tchange library versioning scheme to drop LT_RELEASE\n\tfrom the -l line, while keeping it in the soname.\n\nFri Sep 11 02:11:46 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: explicitely include the prototypes for inline functions\n\tto cure gcc warnings for -Wmissing-prototypes.\n\nWed Sep  9 02:52:04 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: added -posix check for NeXTStep\n\nTue Sep  8 05:04:06 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: abandon the use of ATEXIT(), we keep the fallback\n\tmacros for backwards compatibility. people ought to use g_atexit().\n\n\t* gutils.c (g_atexit): new function to take over the implementation\n\tof ATEXIT. this function is guarranteed to succeed, similar to\n\tg_malloc().\n\nMon Sep  7 20:07:38 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: comment the -std1 check and save LIBS properly\n\nMon Sep  7 07:53:21 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: check for all three inline keywords individually.\n\n\t* glib.h: inlining hassle. for compilers that don't allow the `inline'\n \tkeyword, mostly because of strict ANSI C compliance or dumbness, we try\n \tto fall back to either `__inline__' or `__inline'.\n\twe define G_CAN_INLINE, if the compiler seems to be actually *capable*\n \tto do function inlining, in which case inline function bodys do make\n \tsense. we also define G_INLINE_FUNC to properly export the function\n \tprototypes if no inlinig can be performed. we special case most of the\n \tstuff, so inline functions can have a normal implementation by defining\n \tG_INLINE_FUNC to extern and G_CAN_INLINE to 1.\n\n\t* ltconfig: (compiler PIC flag test): special case linux for non\n\taout systems to honour lcc's position independant code (cases\n\t\"linux*aout)\" and \"linux*)\" got added). (this needs to go into\n\tlibtool which does an advanced test, checking for __LCC__).\n\n\t* autogen.sh: take $CC=lcc into account by invoking automake with\n\t--include-deps so lcc isn't scared by gcc's auto-dependancy\n\tgeneration code. care about $ACLOCAL_FLAGS. optionally feature\n\tautoheader.\n\n\t* minor fixups in other places to cure some of lcc's warnings.\n\nSun Sep  6 19:08:53 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* configure.in: added -std1 check for ANSI compliance (from gtk)\n\nSun Sep  6 12:31:50 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: provide proper ATEXIT behavior on NeXTStep by !atexit\n\nSat Sep  5 18:03:36 1998  Tom Tromey  <tromey@cygnus.com>\n\n\t* gutils.c (GLIB_INLINE): Define.\n\t* glib.h (GLIB_INLINE): New define.\n\t(g_bit_nth_msf): Use it.  Also, add prototype.\n\t(g_bit_storage): Likewise.\n\t(g_bit_storage): Likewise.\n\nSat Sep  5 04:40:02 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t(g_chunk_new0): use g_mem_chunk_alloc0() to allocate the memchunk,\n\tso the correct size of the memchunk is allocated with 0's and not\n\ta memory portion of the size of the desired type.\n\n\t* gmem.c: new function g_mem_chunk_alloc0() which will initialize\n\ta memory area allocated with g_mem_chunk_alloc() with 0's.\n\nWed Sep  2 19:13:28 1998  Owen Taylor  <otaylor@redhat.com>\n\n\t* garray.c glib.h (g_array_[ap/pre]pend_vals): make\n\tdata argument const.\n\nWed Aug 26 06:32:40 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gstrfuncs.c: new function g_strnfill() to return a new string\n\tof specified length, filled with a specific character.\n\nTue Sep  1 23:46:31 1998  Josh MacDonald  <jmacd@axis.hip.berkeley.edu>\n\n\t* testglib.c (main): Update the array tests.  Reduce the number of\n\titerations for the prepend test from 10000 to 100 since it is\n\tO(n^2) and was taking longer than I would like to wait.\n\n\t* garray.c: I've worked on the GArray interface, mostly.  It was\n \tseriously broken before and I hate to do it, but this is going to\n \tbreak some code.  It is important to do this now, because more and\n \tmore people are starting to use glib and the interface was both\n \tbroken and inconsistent.  First, rename the _truncate functions of\n \tboth the GArray and GPtrArray classes to _set_size, since this\n \tfunction can also be used to extend the arrays.  GArray now\n \taccepts two more initialization arguments: clear and element_size.\n  \tInstead of providing the type to each access function, the array\n \tnow stores the element size.  Clear, if set, causes the library to\n \tzero element's memory as the array expands.  The major broken-ness\n \there was that array->len was in bytes, not elements.  Now, since\n \tthe array knows its element size, array->len is correct and I have\n \tremoved the g_array_length macro.  The only macro which now\n \taccepts the type as an argument is g_array_index, which casts the\n \telement to the right type--this interface does not change.  The\n \tappend and prepend functions simply need the types removed.\n  \tg_ptr_array_remove_index now returns the removed element.\n\n\t* gprimes.c (g_spaced_primes_closest): Move this function out of\n \tghash.c and rename it from g_hash_closest_prime.  Fix the primes\n \tso that they are actually prime (they weren't all -- isn't that\n \tnice?).\n\nMon Aug 24 02:08:56 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n \t* gstring.c:\n\t* gstrfuncs.c:\n \t(g_vsprintf): removed this function which was not publically\n\texported in glib.h. to export it, it should have been named\n \tdifferently in the first place, since its semantics differ from\n \tvsprintf(). apart from that, it was a possible cause for\n\tproblems since it worked on a previously allocated memory area and\n\twas used in a lot places of glib. exporting it would have been a\n\tguararant for problems with threaded programs.\n\t(g_printf_string_upper_bound): exported this function to return\n\ta string size, guarranteed to be big enough to hold the fully\n \texpanded format+args string. added 'q', 'L' and 'll' flag handling.\n \tin fact, the newly allocated area is in most cases much bigger than\n \trequired.\n\t(g_strdup_vprintf()): new function returning a newly allocated string\n \tcontaining the contents of *format and associated args (size is\n\tcalculated with g_printf_string_upper_bound()).\n\t(g_strdup_printf): new function which wraps g_strdup_vprintf().\n\n\t* configure.in: check for va_copy() or __va_copy() alternatively.\n\tcheck whether va_lists can be copyied by value.\n\n\t* glib.h: provide a definition for G_VA_COPY.\n\n\t* glib.h:\n\t* gmessages.c:\n \t(g_logv):\n\t(g_vsnprintf):\n\tpass va_lists by value, not by reference, since this causes problems\n\ton platforms that implement va_list as as arrays. internaly, use\n\tG_VA_COPY (new_arg, org_arg); va_end (new_arg); to produce a second\n\tva_list variable, if multiple passes are required. changed all\n\tcallers.\n\n\t* glib.h:\n\t* gerror.h:\n\trenamed g_debug() to g_on_error_query(), cleaned up a bit.\n\trenamed g_stack_trace() to g_on_error_stack_trace() since both\n\tfunctions cluttered different namespaces.\n\tthere is an appropriate comment in glib.h now that explains the\n\tunix and gdb specific dependencies of both functions.\n\tremoved g_attach_process().\n\tg_on_error_stack_trace() should probably be handled with caution,\n\ti've seem several different linux versions (2.0.x) become unstable\n\tafter invocation of this function.\n\n1998-08-18: Elliot Lee <sopwith@redhat.com>\n\n\t* In gmem.c, add the ability to exclude memory chunks from the\n \t  memory profiling information.\n\nTue Aug 18 18:23:09 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h\n\t* gstrfuncs.c: added g_strndup\n\nTue Aug 18 04:40:17 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gmessages.c: new function g_log_set_always_fatal() to set an\n\tadditional fatal_mask for log levels that are considered to be fatal\n\tglobally (required by gtk). since this mask is not domain-associated,\n\tit is restricted to the log levels, introduced by glib itself.\n\n\t* gmem.c:\n\t* grel.c:\n\t* gtree.c (g_tree_node_check):\n\tdon't use g_print() calls for informational/debugging output,\n\tbut log all this stuff through g_log() with G_LOG_LEVEL_INFO.\n\tlibraries shouldn't use printf(), g_print() or g_printerr() at all.\n\nTue Aug 18 02:46:44 1998  Tim Janik  <timj@gtk.org>\n\n\n\t* glib.h (__STRICT_ANSI__): if __STRICT_ANSI__ is defined, make\n\t`inline' a noop, since strict ANSI rules don't permit `inline'.\n\nMon Aug 17 15:21:42 1998  Tim Janik  <timj@gtk.org>\n\n\t* grel.c: made private functions static.\n\nSun Aug 16 23:23:46 CDT 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* gmodule/Makefile.am: added gmodule-dl.c and gmodule-dld.c to\n\t  EXTRA_DIST\n\t* glib.spec: version = 1.1.3\n\nMon Aug 17 01:46:14 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.m4: feature an extra MODULES parameter, so glib-config can\n\tbe invoked with the \"gmodule\" argument.\n\n\t* glib.h: changed the log level to G_LOG_LEVEL_CRITICAL for all\n \tg_return*_if_fail statements, and made them issue a message\n\tlike \"assertion `%s' failed\".\n\n\t* gmessages.c (g_logv): ugh, don't pass log_domain as NULL to\n \tg_log_find_domain.\n\nSun Aug 16 20:28:27 1998  Tim Janik  <timj@gtk.org>\n\n        * version bump to 1.1.3, binary age 0, interface age 0.\n\n\t* glib.h: be nice to platforms that don't have gint64 and don't\n\tissue #warning on every compilation. since glib doesn't require\n\tgint64 itself, packages that need gint64 should test for this\n \tthemselves.\n\n\t* glib.h:\n\t* gutils.c: added a new function g_vsnprintf().\n\nSun Aug 16 Elliot Lee\n\n\tglib.h: #error out if we don't recognize the SIZEOF_VOID_P\n\t        #warning if no gint64\n\nFri Aug 14 16:41:53 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: added static inline functions for bit mask tests:\n\tg_bit_nth_lsf, g_bit_nth_msf and g_bit_storage.\n\nFri Aug 13 14:23:37 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gmessages.c:\n\trevised the message handling system, which is now based on a new\n \tmechanism g_log*. most of the assertment macros got adapted to\n\tfeature the new g_log() call with an additional specification of\n\tthe log level in a preprocessor macro G_LOG_DOMAIN. if G_LOG_DOMAIN\n\tis undefined upon the includion of glib.h, it'll be defined with a\n\tvalue of (NULL) and thus preserves the original bahaviour for\n\twarning and error messages. the message handler setting functions\n\tfor g_warning, g_error and g_message are only provided for backwards\n\tcompatibility and might get removed somewhen.\n\n\t* Makefile.am: feature the G_LOG_DOMAIN macro to set the log domain\n\tto \"GLib\" upon compilation. we currently have to add this definition\n\tto the DEFS variable.\n\t* testglib.c: we need an ugly #undef G_LOG_DOMAIN at the start\n\tof this file currently, since automake doesn't support per target\n\t_CFLAGS yet.\n\n\t* glib.h: changed some gints to gbooleans, made a few const corrections,\n\tremoved some superfluous G_STMT_START{}G_STMT_END wrappers, added some\n\tin other required places.\n\n\t* gnode.c:\n \t(g_node_prepend):\n\t(g_node_insert_before):\n\t(g_node_insert):\n\t(g_node_append_data):\n\t(g_node_prepend_data):\n\t(g_node_insert_data_before):\n\t(g_node_insert_data):\n\t(g_node_append):\n\treturn (node), so these macros/functions can be usefully chained with\n\tg_node_new().\n\nMon Aug 10 17:56:11 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: it's GTime now, and it's back!\n\nMon Aug 10 02:17:19 1998  Tim Janik  <timj@gtk.org>\n\n\t* Makefile.am: minor hack to cause SUBDIRS (gmodule) to be build\n\tlast. we do this by making all-recursive-am depend on all-am.\n\nSun Aug  9 15:56:11 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: added GModule checks. generate files in gmodule/.\n\t* glib-config.in: support library specifications `glib' and `gmodule'.\n\t* Makefile.am: feature the gmodule/ subdir.\n\nWed Aug  5 10:04:29 PDT 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.2\n\nWed Aug 05 01:15:36 1998  George Lebl  <jirka@5z.com>\n\n\t* testglib.c: fix 64-bitness in g_prints, sizeof doesn't\n\t  seem to return int so I cast it for printing, probably\n\t  just cosmetic\n\nTue Aug  4 19:54:06 PDT 1998 Shawn T. Amundson <amundson@gkt.org>\n\n\t* Released GLib 1.1.1\n\nTue Aug  4 15:17:54 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: version bump to 1.1.1, binary age 1, interface age 0.\n\t* NEWS: updates.\n\t* README: updates.\n\t* INSTALL: updates and fixes.\n\t* COPYING: include the GNU LGPL, rather than shipping an empty file.\n\t* AUTHORS: listed original authors here, and added people who made\n\tsignificant improvements to glib.\n\n\t* glib.h:\n\t* gutils.c: implement g_get_current_dir() which returns a newly\n\tallocated string, instead of a g_getcwd() variant that operates\n\ton a static buffer.\n\texport glib_interface_age and glib_binary_age.\n\tas a convenience, macro definitions have been added for\n \tg_node_insert_data, g_node_insert_data_before, g_node_append_data and\n\tg_node_prepend_data.\n\n\t* testglib.c: minor cleanups, print current dir.\n\nMon Aug  3 16:02:26 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gnode.c: change order of gpointer data; field in struct _GNode to\n\tbe partly binary compatible with GList and GSList.\n\n1998-08-03  Sebastian Wilhelmi  <wilhelmi@ira.uka.de>\n\n\t* garray.c (g_ptr_array_remove_index): bugfix: index check for\n\tarray has been wrong.\n\nFri Jul 31 22:17:05 1998  Tim Janik  <timj@gtk.org>\n\n\t* testglib.c (g_node_test): added a GNode test.\n\nFri Jul 31 09:08:16 1998  Tim Janik  <timj@gtk.org>\n\n\t* Makefile.am: compile gnode.c.\n\n\t* glib.h:\n\t* gnode.c: added implementation of n-way trees.\n\n\t* gtree.c (g_tree_traverse): added a warning to the switch() statement\n\twhich says that G_LEVEL_ORDER is not implemented.\n\nMon Jul 27 00:17:30 CDT 1998 Shawn T. Amundson <amundson@gtk.org>\n\n\t* Released GLib 1.1.0\n\nMon Jul 27 01:02:27 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: #if 0'ed out the GTime definition, until it is definitively\n \tneeded. #if 0'ed out the g_getcwd() version, because it is the wrong\n \timplementation.\n\nSat Jul 25 16:09:00 1998  Mark Crichton <crichton@expert.cc.purdue.edu>\n\n\t* glib.h: gtime changed to g_time.  gtime is used in\n\t/usr/include/time.h in NetBSD, causing multiple headaches.\n\tIf this isn't the right way of fixing it.... ;)\n\nThu Jul 23 00:29:14 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gscanner.c: new functions to make a scanner scope sensitive wrt\n \tsymbol lookups.\n\tg_scanner_scope_foreach_symbol, g_scanner_scope_lookup_symbol,\n\tg_scanner_scope_remove_symbol, g_scanner_scope_add_symbol and\n\tg_scanner_set_scope.\n\tg_scanner_add_symbol, g_scanner_remove_symbol and\n \tg_scanner_foreach_symbol are now aliases for scope 0.\n\nMon Jul 20 23:05:34 1998  George Lebl  <jirka@5z.com>\n\n\t* glib.h: typo fixed for alphas for gint64\n\nTue Jul 14 09:05:18 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gutils.c: new fuction g_dirname() which returns a newlly\n\tallocated string.\n\nFri Jul 10 06:33:43 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h:\n\t* gutils.h: added a bunch of utility/wrapper functions:\n\tg_basename(), g_getcwd(), g_get_user_name(), g_get_real_name(),\n\tg_get_home_dir(), g_get_tmp_dir(), g_get_prgname() and g_set_prgname().\n\n\t* gutils.c: removed all g_str* functions.\n\t* gstrfuncs.c: moved the bunch g_str* functions from gutils.c in this\n\tplace. this file shall never include <unistd.h> to avoid clashes for\n\tsome of the g_str* functions on some OSes.\n\nFri Jul 10 00:29:03 EEST 1998 Lauri Alanko <nether@gimp.org>\n\n\t* glib.h:\n\t* ghash.c: Renamed g_hash_table_lookup_full to\n\tg_hash_table_lookup_extended to conform with naming conventions.\n\nTue Jul  7 03:18:58 EEST 1998 Lauri Alanko <nether@gimp.org>\n\n\t* glib.h:\n\t* ghash.c: Generic cleanup, added a function:\n\t(g_hash_table_lookup_full): Return whether the lookup succeeded,\n\tand also retrieve the key and value. This allows one to\n\tdistinguish between failed lookup and finding a NULL, and also\n\tallows one to free a key in the hash.\n\nMon Jul  6 10:12:05 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* ltconfig: fix for properly detecting shared lib support on\n\tSunPro cc (taken from libtool 1.2.a)\n\nSat Jul  4 13:38:52 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h: added g_array_length\n\nTue Jun 30 11:58:25 1998  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c (g_scanner_unexp_token): take symbol_2_token into\n\taccount. react on valid/invalid string pairs.\n\nSat Jun 27 21:55:46 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.m4: ftp.glib.org -> ftp.gtk.org, since glib.org isn't\n\tours. ;)\n\nFri Jun 19 03:11:02 1998  Tim Janik  <timj@gtk.org>\n\n\t* gdataset.c: removed g_dataset_try_key, g_dataset_force_id and\n \tg_dataset_retrive_key in favour of GQuarks.\n\ta GQuark is an numeric id wich is associated with a certain string.\n\t(g_quark_try_string): try to get the quark associated with this string,\n \tif the lookup failed return 0.\n\t(g_quark_from_string): get the associated quark for a string, if there\n \tisn't currently a GQuark associated with this string, then allocate a\n \tnew quark and return that.\n\t(g_quark_from_static_string): like the above function, but the string\n \tisn't strdup()ed to save memory.\n\t(g_quark_to_string): get the string that is associated with a certain\n\tGQuark.\n\n\t* gdataset.c (g_dataset_id_set_data_full): invoke the destroy function\n\t_after_ the new data has been setup.\n\nThu Jun 18 02:35:21 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* glib.h: Changed messages for g_return_[val]_if_fail to\n\tbe somewhat more clear: assertion \"blah\" failed.\n\n1998-06-18  Federico Mena Quintero  <federico@nuclecu.unam.mx>\n\n\t* testglib.c (main): Use GINT_TO_POINTER casts to remove compiler\n\twarnings.\n\n\t* grel.c: #include <string.h>\n\nFri Jun 12 15:39:06 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (GScanner): cleanups of the structure fields (binary\n\tincompatible).\n\nFri Jun 12 00:39:28 1998  Josh MacDonald  <jmacd@icw.EECS.Berkeley.EDU>\n\n\t* glib.h: add new hash and equal functions g_int_*.  complement\n\tg_direct_hash with g_direct_equal.\n\n\t* grel.c: new file, GRelations implement tuples of N-N mappings.\n\tA comment in glib.h briefly describes the interface.\n\n\t* ghash.c: new function, g_hash_table_size\n\n\t* glib.h: new typedefs, gsize, gssize, gtime.\n\n\t* garray.c: new functions implementing a simplified GArray.  This\n\tGPtrArray is an array of gpointers and has functions to add and\n\tremove elements, much like java.lang.Vector.\n\n\t* garray.c: new functions for the single-byte special case of\n\tGArray.  The functions g_byte_array* operate on arrays of bytes.\n\tInternally, a GArray is used.\n\n\t* testglib.c: tests for g_ptr_array, g_byte_array, and g_relation...\n\n1998-06-11  Federico Mena Quintero  <federico@nuclecu.unam.mx>\n\n\t* gdataset.c: #include <string.h>\n\nThu Jun 11 04:15:31 1998  Tim Janik  <timj@gtk.org>\n\n        * glib.h:\n        * gdataset.c: new function g_dataset_retrive_key. adjusted prealloc\n        sizes, to take up less space on initial allocation.\n\n1998-06-10  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* acinclude.m4: New file.  Contains `libtool.m4' from libtool-1.2,\n\tthe version from which glib's libtool forked.  Needed for people\n\twho use post-1.2 alphas of libtool.\n\t* configure.in (enable_mem_check, enable_mem_profile): Replace\n\t`echo -n' with AC_MSG_CHECKING.\n\t(fd_set): Explain test for `fd_set' better.\n\nWed Jun 10 19:29:51 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* Makefile.am glib.m4 configure.in:\n\n\tMoved out from GTK+; added AM_PATH_GLIB macro.\n\nWed Jun 10 12:56:07 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* glib.h: renamed g_const_pointer => gconstpointer\n\nTue Jun  9 17:47:33 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* glib.h: Remove #error - HP/UX.\n\nSat May 23 19:00:01 1998  Owen Taylor  <otaylor@gtk.org>\n  [ Combination of:\n     gtk-rrh-980412-0.patch (Raja R Harinath <harinath@cs.umn.edu>)\n     gtk-jbuhler-980516-0 (Jeremy Buhler <jbuhler@cs.washington.edu>) ]\n\n\t* glib.h ghash.c gstring.c gdataset.c gutils.c:\n\t- Added new typedef g_const_pointer; expunged all incorrect\n\t  uses of 'const gpointer'.\n\t- Fixed up warnings that that created,\n\t- Changed GHashFunc and GCompareFunc to take g_const_pointer\n\t  arguments. (Necessary, but will cause warnings in existing\n\t  code until fixed)\n\t- Added other new const in harmless positions.\n\nMon Jun  8 01:06:47 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: added enum-helper macros for code generation.\n\tadded G_BREAKPOINT().\n\nSat Jun  6 14:09:22 PDT 1998 Manish Singh <yosh@gimp.org>\n\n\t* gmem.c: commented out MEM_PROFILE and MEM_CHECK, causing weird\n\tproblems\n\nWed Jun  3 06:19:42 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (g_chunk_new0): convenience macro, for allocating small chunks\n\tlike g_chunk_new() with additional 0 initialization.\n\nMon Jun  1 04:43:27 1998  Tim Janik  <timj@gtk.org>\n\n\t* ghash.c (g_hash_table_insert): wrote a comment describing why\n\ta hash node's key should not also get replaced when overriding\n \tprevious entries.\n\nTue May 26 18:30:06 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (g_string_sized_new): new function to controll the preallocated\n\tsize of a GString.\n\n\t* glib.h (g_strreversed): new function to reverse a string.\n\nMon May 18 22:14:39 1998  Owen Taylor  <otaylor@gtk.org>\n(Yasuhiro SHIRASAKI <joke@awa.tohoku.ac.jp> : gtk-joke-980517-0.patch)\n\n\t* gutils.c: Restored a missing prototype for g_vsprintf.\n\nWed May 20 05:02:26 1998  Tim Janik  <timj@gtk.org>\n\n        * glib.h: conditionally define NULL, FALSE and TRUE.\n        (g_mem_chunk_create): new convenience macro as a short hand for\n        g_mem_chunk_new().\n        (g_chunk_free): new convenience macro to be consistent with g_chunk_new.\n\nTue, 19 May 1998 09:00:02 +0200  Paolo Molaro <lupus@debian.org>\n\n\t* gcompletion.c: generic functions for com<TAB>pletion...\n\nSun May 17 10:48:27 1998  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c (g_scanner_unexp_token): provide usefull default\n \tspecifications for identifier_spec and symbol_spec.\n\n\t* glib.h: new functions g_slist_nth_data and g_list_nth_data to return\n \tthe data of the nth element in the list.\n\nFri May 15 22:31:49 1998  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c (g_scanner_unexp_token): removed spurious va_end(args)\n \tthat for some reason didn't produce a compiler warning on my machine\n \t(is va_end defined to nothing for i386?).\n\nFri May 15 12:32:08 1998  rodo  <doulik@karlin.mff.cuni.cz>\n\n\t* gscanner.c: replaced some snprintf with g_snprintf\n\nFri May 15 00:56:59 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: further support for gcc function attributes: G_GNUC_FORMAT,\n\tG_GNUC_NORETURN and G_GNUC_CONST.\n\n\t* gscanner.c (g_scanner_stat_mode): changed stat() to lstat().\n\t(g_scanner_msg_handler): \"\\n\" at end of line!\n\t(g_scanner_foreach_symbol): new function to iterate over the symbol\n \ttable (GScanner does value-wrapping).\n\nThu May 14 04:14:12 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h: typedef gint gboolean;\n\tthis is needed to provide portability with big-endian platforms (e.g.\n\ttry sizeof(bool) for c++ on big-endians - it's 4).\n\tthis is also needed to maintain some_union.d_gint==some_union.d_gboolean.\n \tplus, gint to gboolean casts and vice versa need to be possible without\n \tloss.\n\nTue May 12 19:22:58 1998  Owen Taylor  <otaylor@gtk.org>\n\n \t* glib/glib.h: Added macros G[U]INT_TO_POINTER() and\n\tGPOINTER_TO_[U]INT for storing small integers integers\n\tinside pointers.\n\n\t* glib/testglib.c: Print sizeof() results\n\tas g_print(\"%ld\", (glong)sizeof(foo)), to deal with\n\tsize_t being long on Alpha's.\n\nTue May 12 16:54:15 1998  Owen Taylor  <otaylor@gtk.org>\n\t(James A <jamesa@demon.net> : gtk-jamesa-980511-4.patch)\n\n\t* glib.h gstring.c gmessages.c: Added some missing\n\tconst to arguments.\n\n\t* gutils.c (g_strsignal.c): Added missing return statements.\n\nMon May 11 21:11:54 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* gutils.c gmessages.c: Moved g_error, g_warning, g_message and\n\tg_print from gutils.c to new file gmessages.c, to avoid having to\n\tinclude <unistd.h> in gutils.c which was causing problems for the\n\tg_strsignal implementation on FreeBSD boxes.\n\nMon May 11 09:53:43 1998  Tim Janik  <timj@gtk.org>\n\n\t* configure.in: preserve automake CFLAGS.\n\n\t* Makefile.am: fully rename the created library to libglib-1.1.la.\n\tthis means we need to change certain portions of the Makefile.am on\n\tmajor/minor version bumps.\n\n\t* ltmain.sh: the -release option is not required anymore.\n\n        * glib.h: provide G_GNUC_FUNCTION and G_GNUC_PRETTY_FUNCTION to\n\tavoid conditionals. unconditionally define NULL, TRUE, FALSE, MAX,\n\tMIN, ABS and CLAMP, these macros might be screwed from other headers.\n\nMon May 11 01:44:10 1998  Tim Janik  <timj@gtk.org>\n\n\t* gdataset.c: new file, gdatasets implement the object data\n\tmechanism from GtkObject. a generic data pointer is associated with\n\ta certain location and a key id.\n\nSat May  9 20:08:12 1998  Owen Taylor  <otaylor@gtk.org>\n\n        * glib/gmem.c: Experimentally restore GMemChunk\n        to its primeval state - where mem areas are\n        freed incrementally instead of searching the tree\n        every time a mem area is completely empty. Also,\n        always keep one mem chunk around. (Reduced calls\n        to malloc() a lot, but doesn't really improve\n        performance significiantly)\n\nThu May  7 08:17:28 1998  Tim Janik  <timj@gtk.org>\n\n\t* glib.h (G_GNUC_PRINTF):\n\t(G_GNUC_SCANF): macros to facilitate the printf/scanf format argument\n\tchecking of gcc.\n\n\t* gstring.c: const corrections, string!=NULL checks at function entry.\n\t(g_string_down): new function for tolower(3) conversion.\n\t(g_string_up): new function for toupper(3) conversion.\n\n\t* gutils.c: const corrections.\n\t(g_strdown): g_string_down() counterpart.\n\t(g_strup): g_string_up() counterpart.\n\n\t* gscanner.c (g_scanner_unexp_token):\n \t(g_scanner_error):\n\t(g_scanner_warn): new functions to let a scanner put out warnings\n \tor errors, especially to react on unexpected tokens.\n\n\t* gslist.c:\n \t(g_slist_index): find out about about the position of a\n\tcertain data pointer.\n \t(g_slist_position): find out about about the position of a\n\tcertain node.\n\n\t* glist.c:\n \t(g_list_index): find out about about the position of a\n\tcertain data pointer.\n\nThu May  7 05:14:19 1998  Tim Janik  <timj@gtk.org>\n\n\t* ltmain.sh: added a new commandline flag -postfix similar to -release,\n\tbut will immediately change the library name.\n\n\t* Makefile.am: specify -postfix and -version-info\n\n\t* configure.in: version bump to 1.1.0. added GLIB_INTERFACE_AGE and\n\tGLIB_BINARY_AGE. calculate LT_* variables for libtool.\n\nFri May  1 16:36:08 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* gutils.c: (g_strcasecmp). Check for isupper before\n\ttaking tolower, and account for macroized tolower.\n\n\t* gutils.c (g_error): Check for recursion.\n\n1998-04-27  Elliot Lee  <sopwith@cuc.ml.org>\n\n\t* glist.c (g_list_position): New function to find the position of\n\ta link in a list - should be the inverse of g_list_nth(), but\n\thaven't tested it so poof.\n\nThu Apr 30 21:41:30 1998  Owen Taylor  <otaylor@gtk.org>\n\n\t* gstring.c : Check arguments more carefully,\n\t(gtk-draco-980423-1.patch; ramsey@rhrk.uni-kl.de)\n\nTue Apr  7 19:36:48 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gutils.c (g_direct_compare): Removed, because that's what\n\ta NULL comparison function means. And it wasn't 64 bit safe.\n\nMon Apr  6 18:43:25 1998  Tim Janik  <timj@gtk.org>\n\n\t* gscanner.c (g_scanner_get_token_ll): fixed a bug that caused floats\n\tof the format \".xxx\" to be parsed as \"xxx\".\n\nFri Apr  3 20:36:35 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gutils.c (g_parse_debug_string): Make debug string\n\tparsine case-insensitive\n\nFri Apr  3 17:03:18 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* gstring.c: corrected possible overrun when inserting into\n\tGStrings (thanks Elrond)\n\nFri Apr  3 18:05:45 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* testglib.c: Removed literal german from strings\n\tto appease SGI compiler.\n\nThu Mar 26 20:47:21 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* configure.in glib glibconfig.h.in: Add test for atexit/on_exit -\n\tuse on_exit if atexit not found in definition of ATEXIT.\n\nWed Mar 25 15:23:37 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* Makefile.am: Switched glibconfig.h rule from HEADERS\n\tto DATA, so that it is not added to DISTFILES\n\nWed Mar 18 22:27:08 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* garray.c: g_rarray_truncate length done correctly\n\nSun Mar 15 07:13:34 1998  Tim Janik  <timj@gimp.org>\n\n\t* gutils.c: changed *_handler variables to be named glib_*_handler,\n\tso you can easily access them from gdb.\n\nSat Mar 14 17:47:43 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* Makefile.am: Don't refer to current directory as $(top_builddir)\n\tto avoid confusing non-gmakes\n\nSat Mar 14 01:37:35 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* Makefile.am (configincludedir): Moved glibconfig.h to\n          $(pkglibdir)/include\n\nTue Mar 10 02:03:12 1998  Tim Janik  <timj@gimp.org>\n\n\t* gscanner.c (g_scanner_destroy_symbol_table_entry): new function to\n\tfree symbol table entries upon destruction\n \t(gtk-gronlund-980309-0.patch.gz).\n\nMon Mar  9 15:02:21 1998  Tim Janik  <timj@gimp.org>\n\n\t* glib.h: changed *_length functions to return guint.\n\tchanged *_nth functions to take guint as argument.\n\n\t* glist.c: adapted g_list_length and g_list_length.\n\n\t* gslist.c: adapted g_slist_length and g_slist_length.\n\nMon Mar  2 17:51:18 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* glib.h gutils.c : changed g_strcasecmp\n\t  to take gchar* not guchar*\n\n\t* testglib.c: Remove trailing ; after functions\n\nSun Mar  1 19:04:40 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* glib.h gstring.c: Added g_string_insert[_c]()\n\t  and g_string_erase().\n\n\t  From: Stefan Wille  <1wille@vsys1.informatik.uni-hamburg.de>\n\nMon Feb 16 23:05:06 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* glist.c (g_list_insert_sorted): Changed function\n\t  so elements are always inserted, even if they compare\n\t  equal with another.\n\nThu Feb 12 22:48:11 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gstring.c glib.h: removed deprecated g_string_equal\n\t  and g_string_hash.\n\nTue Feb 10 13:04:36 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* configure.in: Add check to see if the C library's\n\t  iswalnum can actually be used. (Not true for\n\t  Linux libc-5.4.38)\n\nSat Feb  7 11:48:09 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gstring.c gutils.c: added some additional consts in\n\t  appropriate places to remove a warning\n\nSat Feb  7 11:15:54 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gutils.c: include <ctype.h> for tolower()\n\nFri Jan 30 23:57:17 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* added and autoconfigured in a new utility function\n\tg_strcasecmp\n\nWed Jan 28 23:53:27 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glist.c\n\t* gslist.c\n\t* testglib.c: the sort functions compared backwards. Fixed\n\t* glib.h: list iterator macros now check for NULL pointers\n\nTue Jan 27 09:46:57 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* gstring.c: g_string_prepend and g_string_prepend_c had\n\tinterchanged src and dest parameters for g_memmove. Fixed.\n\nTue Jan 27 01:38:52 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* gslist.c: fixed a really, really lame error. g_slist_insert\n\tdidn't hook the data in! Reworked the routine to reflect the\n\tfunctionality of g_list\n\nWed Jan 21 01:13:25 1998  Tim Janik  <timj@psynet.net>\n\n\t* Applied patch from (Raja R Harinath <harinath@cs.umn.edu>)\n\t  to add function g_snprintf.\n        * configure.in (AC_CHECK_FUNCS): Check for vsnprintf.\n        * glib.h: Add prototype for g_snprintf.\n        * glibconfig.h.in: Add HAVE_VSNPRINTF.\n        * gutils.c (g_snprintf): new function.\n\nSat Jan 17 23:52:40 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* gstring.{c,h} gscanner.c:\n\t   renamed g_string_equal => g_str_equal\n\t   renamed g_string_hash => g_str_hash\n\t  And const corrected. Old functions left in for now.\n\nFri Jan  9 20:03:46 1998  Tim Janik  <timj@psynet.net>\n\n\t* gutils.c (g_strerror): changed message for EAGAIN from\n\t\"no more processes\" to \"try again\" since EAGAIN is used with\n\tfunctions else than fork().\n\n\t* gscanner.c (g_scanner_get_token_ll): use strtol() instead of\n\tstrtoul() to avoid conflicts with solaris.\n\n\t* merged the glib portions from Jan 2 to Jan 7 out of gtk+/ChangeLog\n \tinto this file.\n\nWed Jan  7 02:14:30 PST 1998 Manish Singh <yosh@gimp.org>\n\n\t* glib.h:\n\t* glist.c:\n\t* gslist.c:\n\t* testglib.c: Added g_[s]list_insert_sorted function\n\tand appropriate tests in testglib\n\nSat Jan  3 20:23:25 1998  Owen Taylor  <owt1@cornell.edu>\n\n\t* glib.h: Changed guint32 -> guint for bitfields.\n\t(Bitfields must be int or unsigned int?)\n\nFri Jan  2 23:52 PST 1998 Jay Painter <jpaint@serv.net>\n\n\t* glib_pre1.h:\n\t* glib_pre2.h:\n\t* glib.h: reverted glibconfig.h and glib.h files back to the\n\tway they were before my ugly hack.\n\n\t* gscanner.c: removed inlines from clist and gscanner\n\nTue Dec 23 02:49:51 1997  Tim Janik  <timj@psynet.net>\n\n\t* gscanner.c: new file for GScanner: Flexible lexical scanner for\n \tgeneral purpose.\n\t* glib_pre2.h: added GScanner includes. added g_strconcat and g_strtod.\n\tgutils.c (g_strconcat): new function for string concatenation of NULL\n \tterminated parameter list.\n\t(g_strtod): new function to perform best string to double conversion\n\twith or without consideration of the current locale.\n\nMon Dec 15 19:33:58 1997  Tim Janik  <timj@psynet.net>\n\n\t* glist.c: minor optimizations:\n \t(g_list_append): `if' optimized for common code path, commented out\n \tunneccessary `assert', saved one variable assignment.\n\t(g_list_prepend): saved two (conditioned) variable assignment.\n\t(g_list_insert): saved one  (conditioned) variable assignment,\n\tsaved one variable assignment.\n\t(g_list_remove): `if' optimized for common code path, saved two\n\tvariable assignments by using `g_list_free_1' (which is even\n \tfaster) instead of `g_list_free'.\n\t(g_list_reverse): saved allocation of one variable, saved one\n\tvariable assignment.\n\nWed Dec 10 23:27:20 1997  Tim Janik  <timj@psynet.net>\n\n\t* glib_pre1.h:\n\t* glib_pre2.h:\n\t* glib.h: this file now gets concatenated by makeglib_h from\n\tglib_pre1.h and glib_pre2.h to merge in glibconfig.h wich got\n\tcreated by configure (done by Jay Painter).\n\n\t* glib_pre2.h: the g_assert*() and g_return_*_fail() macros\n\tare wrapped by G_STMT_START and G_STMT_END now, to avoid conflicts\n\twhen used within if (...) g_macro(); else ... conditionals.\n\nTue Dec 17 13:14:07 1996  Peter Mattis  <pmattis@charnley.HIP.Berkeley.EDU>\n\n\t* glib.h: Changed 'g_return_if_fail' and 'g_return_val_if_fail' to\n\tnot call 'g_string' but to simply stringify the\n\texpression. Calling 'g_string' causes the expression to be\n\texpanded which is undesired.\n\nSun Dec  1 01:30:48 1996  Peter Mattis  <pmattis@charnley.HIP.Berkeley.EDU>\n\n\t* Started ChangeLog\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gmodule/gmodule-ar.c": "/* GMODULE - GLIB wrapper code for dynamic module loading\n * Copyright (C) 1998, 2000 Tim Janik\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n/* \n * MT safe\n */\n\n/* because we are compatible with archive format only since AIX 4.3 */\n\n#define __AR_BIG__\n\n#include \"config.h\"\n\n#include <ar.h>\n#include <stdlib.h>\n\n#include <dlfcn.h>\n\n/* --- functions --- */\nstatic gchar*\nfetch_dlerror (gboolean replace_null)\n{\n  gchar *msg = dlerror ();\n\n  /* make sure we always return an error message != NULL, if\n   * expected to do so. */\n\n  if (!msg && replace_null)\n    return \"unknown dl-error\";\n\n  return msg;\n}\n\nstatic gchar* _g_module_get_member(const gchar* file_name)\n{\n  gchar* member = NULL;\n  struct fl_hdr file_header;\n  struct ar_hdr ar_header;\n  long first_member;\n  long name_len;\n  int fd;\n\n  fd = open(file_name, O_RDONLY);\n  if (fd == -1)\n    return NULL;\n\n  if (read(fd, (void*)&file_header, FL_HSZ) != FL_HSZ)\n    goto exit;\n\n  if (strncmp(file_header.fl_magic, AIAMAGBIG, SAIAMAG) != 0)\n    goto exit;\n\n  /* read first archive file member header */\n\n  first_member = atol(file_header.fl_fstmoff);\n\n  if (lseek(fd, first_member, SEEK_SET) != first_member)\n    goto exit;\n\n  if (read(fd, (void*)&ar_header, AR_HSZ - 2) != AR_HSZ - 2)\n    goto exit;\n\n  /* read member name */\n\n  name_len = atol(ar_header.ar_namlen);\n\n  member = g_malloc(name_len+1);\n  if (!member)\n    goto exit;\n\n  if (read(fd, (void*)member, name_len) != name_len)\n    {\n      g_free(member);\n      member = NULL;\n      goto exit;\n    }\n\n  member[name_len] = 0;\n\nexit:\n  close(fd);\n\n  return member;\n}\n\nstatic gpointer\n_g_module_open (const gchar *file_name,\n\t\tgboolean     bind_lazy,\n\t\tgboolean     bind_local)\n{\n  gpointer handle;\n  gchar* member;\n  gchar* full_name;\n\n  /* extract name of first member of archive */\n\n  member = _g_module_get_member (file_name);\n  if (member != NULL)\n    {\n      full_name = g_strconcat (file_name, \"(\", member, \")\", NULL);\n      g_free (member);\n    }\n  else\n    full_name = g_strdup (file_name);\n  \n  handle = dlopen (full_name, \n\t\t   (bind_local ? RTLD_LOCAL : RTLD_GLOBAL) | RTLD_MEMBER | (bind_lazy ? RTLD_LAZY : RTLD_NOW));\n\n  g_free (full_name);\n\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic gpointer\n_g_module_self (void)\n{\n  gpointer handle;\n\n  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic void\n_g_module_close (gpointer handle,\n\t\t gboolean is_unref)\n{\n  /* are there any systems out there that have dlopen()/dlclose()\n   * without a reference count implementation?\n   */\n  is_unref |= 1;\n  \n  if (is_unref)\n    {\n      if (dlclose (handle) != 0)\n\tg_module_set_error (fetch_dlerror (TRUE));\n    }\n}\n\nstatic gpointer\n_g_module_symbol (gpointer     handle,\n\t\t  const gchar *symbol_name)\n{\n  gpointer p;\n  \n  p = dlsym (handle, symbol_name);\n  if (!p)\n    g_module_set_error (fetch_dlerror (FALSE));\n  \n  return p;\n}\n\nstatic gchar*\n_g_module_build_path (const gchar *directory,\n\t\t      const gchar *module_name)\n{\n  if (directory && *directory) {\n    if (strncmp (module_name, \"lib\", 3) == 0)\n      return g_strconcat (directory, \"/\", module_name, NULL);\n    else\n      return g_strconcat (directory, \"/lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n  } else if (strncmp (module_name, \"lib\", 3) == 0)\n    return g_strdup (module_name);\n  else\n    return g_strconcat (\"lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gmodule/meson.build": "gmoduleconf_conf = configuration_data()\n\ng_module_need_uscore = 0\ng_module_broken_rtld_global = 0\ng_module_have_dlerror = 0\n\nlibdl_dep = [ ]\ng_module_lib_args = [ ]\ng_module_impl = ''\n\ndlopen_dlsym_test_code = '''\n#include <dlfcn.h>\nint glib_underscore_test (void) { return 42; }\nint main (int argc, char ** argv) {\n  void *f1 = (void*)0, *f2 = (void*)0, *handle;\n  handle = dlopen ((void*)0, 0);\n  if (handle) {\n    f1 = dlsym (handle, \"glib_underscore_test\");\n    f2 = dlsym (handle, \"_glib_underscore_test\");\n  }\n  return (!f2 || f1);\n}'''\n\n# On Windows force native WIN32 shared lib loader\nif host_system == 'windows'\n  g_module_impl = 'G_MODULE_IMPL_WIN32'\n# Force native AIX library loader\n# dlopen() filepath must be of the form /path/libname.a(libname.so)\nelif host_system == 'aix'\n  g_module_impl = 'G_MODULE_IMPL_AR'\nelif cc.links(dlopen_dlsym_test_code, name : 'dlopen() and dlsym() in system libraries')\n  g_module_impl = 'G_MODULE_IMPL_DL'\n# NSLinkModule (dyld) in system libraries (Darwin)\nelif cc.has_function('NSLinkModule')\n  g_module_impl = 'G_MODULE_IMPL_DYLD'\n  g_module_need_uscore = 1\nelif cc.links(dlopen_dlsym_test_code, args : '-ldl', name : 'dlopen() and dlsym() in libdl')\n  g_module_impl = 'G_MODULE_IMPL_DL'\n  libdl_dep = cc.find_library('dl')\n  g_module_lib_args = '-ldl'\nendif\n\n# additional checks for G_MODULE_IMPL_DL\nif g_module_impl == 'G_MODULE_IMPL_DL'\n  # FIXME: check for OSF1/5.0 RTLD_GLOBAL brokenness (is this still relevant?)\n\n  # Check whether we need preceding underscores\n  if cc.get_id() == 'msvc'\n    message('Building for MSVC: assuming that symbols are prefixed with underscore')\n    g_module_need_uscore = 1\n  elif meson.has_exe_wrapper()\n    # FIXME: communicate result via stdout instead of return value, so non-0 return is not printed in bold red\n    rres = cc.run(dlopen_dlsym_test_code,\n                  args : g_module_lib_args,\n                  name : 'dlsym() preceding underscores')\n    if host_system == 'windows' or rres.returncode() == 0\n      g_module_need_uscore = 1\n    endif\n  else\n    message('Cross-compiling: assuming that symbols aren\\'t prefixed with underscore')\n    g_module_need_uscore = 0\n  endif\n\n  if cc.has_function('dlerror', args : g_module_lib_args)\n    g_module_have_dlerror = 1\n  endif\nendif\n\n# Done, have we got an implementation?\nif g_module_impl == ''\n  g_module_impl = '0'\n  message('WARNING: No suitable GModule implementation found!')\nendif\n\ngmoduleconf_conf.set('G_MODULE_IMPL', g_module_impl)\ngmoduleconf_conf.set('G_MODULE_SUPPORTED', g_module_impl != '0')\ngmoduleconf_conf.set('G_MODULE_HAVE_DLERROR', g_module_have_dlerror)\ngmoduleconf_conf.set('G_MODULE_NEED_USCORE', g_module_need_uscore)\ngmoduleconf_conf.set('G_MODULE_BROKEN_RTLD_GLOBAL', g_module_broken_rtld_global)\n\ngmoduleconf_h = configure_file(input : 'gmoduleconf.h.in',\n                               output : 'gmoduleconf.h',\n                               configuration : gmoduleconf_conf)\n\ninstall_headers(['gmodule.h'], subdir : 'glib-2.0')\n\ngmodule_sources = ['gmodule.c']\nif host_system == 'windows'\n  gmodule_win_rc = configure_file(\n    input: 'gmodule.rc.in',\n    output: 'gmodule.rc',\n    configuration: glibconfig_conf,\n  )\n  gmodule_win_res = windows.compile_resources(gmodule_win_rc)\n  gmodule_sources += [gmodule_win_res]\nendif\n\nlibgmodule = library('gmodule-2.0',\n  sources : gmodule_sources,\n  version : library_version,\n  soversion : soversion,\n  install : true,\n  include_directories : [configinc, gmoduleinc],\n  dependencies : [libdl_dep, libglib_dep],\n  c_args : ['-DG_LOG_DOMAIN=\"GModule\"', '-DG_DISABLE_DEPRECATED'] + glib_hidden_visibility_args,\n  link_args : [glib_link_flags],\n)\n\nsupported_var = 'gmodule_supported=@0@'.format(g_module_impl != '0')\n\npkg.generate(libraries : [libgmodule, thread_dep],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-no-export-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\npkg.generate(libraries : [libgmodule, export_dynamic_ldflags],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-export-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\npkg.generate(libraries : [libgmodule, export_dynamic_ldflags],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\nlibgmodule_dep = declare_dependency(link_with : libgmodule,\n  include_directories : gmoduleinc)\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gmodule/gmodule-dl.c": "/* GMODULE - GLIB wrapper code for dynamic module loading\n * Copyright (C) 1998, 2000 Tim Janik\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * Modified by the GLib Team and others 1997-2000.  See the AUTHORS\n * file for a list of people on the GLib Team.  See the ChangeLog\n * files for a list of changes.  These files are distributed with\n * GLib at ftp://ftp.gtk.org/pub/gtk/. \n */\n\n/* \n * MT safe\n */\n#include \"config.h\"\n\n#include <dlfcn.h>\n\n/* Perl includes <nlist.h> and <link.h> instead of <dlfcn.h> on some systmes? */\n\n\n/* dlerror() is not implemented on all systems\n */\n#ifndef\tG_MODULE_HAVE_DLERROR\n#  ifdef __NetBSD__\n#    define dlerror()\tg_strerror (errno)\n#  else /* !__NetBSD__ */\n/* could we rely on errno's state here? */\n#    define dlerror()\t\"unknown dl-error\"\n#  endif /* !__NetBSD__ */\n#endif\t/* G_MODULE_HAVE_DLERROR */\n\n/* some flags are missing on some systems, so we provide\n * harmless defaults.\n * The Perl sources say, RTLD_LAZY needs to be defined as (1),\n * at least for Solaris 1.\n *\n * Mandatory:\n * RTLD_LAZY   - resolve undefined symbols as code from the dynamic library\n *\t\t is executed.\n * RTLD_NOW    - resolve all undefined symbols before dlopen returns, and fail\n *\t\t if this cannot be done.\n * Optionally:\n * RTLD_GLOBAL - the external symbols defined in the library will be made\n *\t\t available to subsequently loaded libraries.\n */\n#ifndef\tHAVE_RTLD_LAZY\n#define\tRTLD_LAZY\t1\n#endif\t/* RTLD_LAZY */\n#ifndef\tHAVE_RTLD_NOW\n#define\tRTLD_NOW\t0\n#endif\t/* RTLD_NOW */\n/* some systems (OSF1 V5.0) have broken RTLD_GLOBAL linkage */\n#ifdef G_MODULE_BROKEN_RTLD_GLOBAL\n#undef\tRTLD_GLOBAL\n#undef\tHAVE_RTLD_GLOBAL\n#endif /* G_MODULE_BROKEN_RTLD_GLOBAL */\n#ifndef\tHAVE_RTLD_GLOBAL\n#define\tRTLD_GLOBAL\t0\n#endif\t/* RTLD_GLOBAL */\n\n\n/* --- functions --- */\nstatic gchar*\nfetch_dlerror (gboolean replace_null)\n{\n  gchar *msg = dlerror ();\n\n  /* make sure we always return an error message != NULL, if\n   * expected to do so. */\n\n  if (!msg && replace_null)\n    return \"unknown dl-error\";\n\n  return msg;\n}\n\nstatic gpointer\n_g_module_open (const gchar *file_name,\n\t\tgboolean     bind_lazy,\n\t\tgboolean     bind_local)\n{\n  gpointer handle;\n  \n  handle = dlopen (file_name,\n\t\t   (bind_local ? 0 : RTLD_GLOBAL) | (bind_lazy ? RTLD_LAZY : RTLD_NOW));\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic gpointer\n_g_module_self (void)\n{\n  gpointer handle;\n  \n  /* to query symbols from the program itself, special link options\n   * are required on some systems.\n   */\n\n  /* On Android 32 bit (i.e. not __LP64__), dlopen(NULL)\n   * does not work reliable and generally no symbols are found\n   * at all. RTLD_DEFAULT works though.\n   * On Android 64 bit, dlopen(NULL) seems to work but dlsym(handle)\n   * always returns 'undefined symbol'. Only if RTLD_DEFAULT or \n   * NULL is given, dlsym returns an appropriate pointer.\n   */\n#if defined(__BIONIC__)\n  handle = RTLD_DEFAULT;\n#else\n  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);\n#endif\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic void\n_g_module_close (gpointer handle,\n\t\t gboolean is_unref)\n{\n  /* are there any systems out there that have dlopen()/dlclose()\n   * without a reference count implementation?\n   *\n   * See above for the Android special case\n   */\n#if defined(__BIONIC__)\n  is_unref = (handle != RTLD_DEFAULT);\n#else\n  is_unref |= 1;\n#endif\n\n  if (is_unref)\n    {\n      if (dlclose (handle) != 0)\n\tg_module_set_error (fetch_dlerror (TRUE));\n    }\n}\n\nstatic gpointer\n_g_module_symbol (gpointer     handle,\n\t\t  const gchar *symbol_name)\n{\n  gpointer p;\n  gchar *msg;\n\n  fetch_dlerror (FALSE);\n  p = dlsym (handle, symbol_name);\n  msg = fetch_dlerror (FALSE);\n  if (msg)\n    g_module_set_error (msg);\n  \n  return p;\n}\n\nstatic gchar*\n_g_module_build_path (const gchar *directory,\n\t\t      const gchar *module_name)\n{\n  if (directory && *directory) {\n    if (strncmp (module_name, \"lib\", 3) == 0)\n      return g_strconcat (directory, \"/\", module_name, NULL);\n    else\n      return g_strconcat (directory, \"/lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n  } else if (strncmp (module_name, \"lib\", 3) == 0)\n    return g_strdup (module_name);\n  else\n    return g_strconcat (\"lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/ChangeLog.pre-2-0",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/tests/utf8.txt",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-41.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-3.expected",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-2.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-52.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-41.expected",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-50.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-3.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/glib/tests/markups/fail-53.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/empty-key.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/bad-header.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/uri-mismatch.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/huge-chunk-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/valid-no-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/no-text-data.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/header-only.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/mtime-zero.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/valid.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/header-and-chunk-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/gio/tests/thumbnails/overlong-value.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/glib/mainloop-states.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/glib/mainloop-states.gif",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/glib/file-name-encodings.sxd",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/glib/file-name-encodings.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/gio/menu-model.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/gio/menu-example.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/gio/gvfs-overview.odg",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/gio/gvfs-overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.58.3-xgzw5qkdawtoaddom7k2obcfqlfaq6sz/spack-src/docs/reference/gobject/images/glue.png"
    ],
    "total_files": 1882
}