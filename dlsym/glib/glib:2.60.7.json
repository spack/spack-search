{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/NEWS.pre-1-3": "Overview of Changes in GLib 1.2.1:\n\n* g_realloc() fix for SunOS (please report further problems).\n* Continued the never ending fix vendetta regarding getpwuid(),\n  this time AIX has been the culprit.\n* Upgrade to libtool 1.2f\n* Miscellaneous other buglets fixed.\n\nWhat's new in GLib 1.2.0 (since GLib 1.0.x):\n\n* GLib is distributed seperatedly from Gtk+\n* Win32 Portability\n* Threading support\n* GModule mechanism (implemented in an extra library) which wraps dynamic\n  object code loading facilities in a portable manner\n* GIOChannel structure to encapsulate the IPC mechanism\n* GQuarks and datasets\n* GRelations for n-way mapping of certain data\n* An n-way tree implementation\n* GDate functionality for calendar date manipulations\n* GAllocator type and associated functions\n* Added generic callback maintenance functions (ghook)\n* Generic functions for TAB completions\n* Endian defines (G_*_ENDIAN)\n* g_log() mechanism for logging of messages at different log levels\n* Generic main-loop mechanism\n* New glib-config helper script\n* Many more API extensions\n\nOverview of Changes in GLib 1.1.16:\n\n* Allocate smaller pools of memory for glists, gslists, gnodes\n* Bug Fixes\n\nOverview of Changes in GLib 1.1.15:\n\n* HPUX 11 thread system detection should now work\n* Release the main loop lock around calls to prepare() and\n  check() so it is not held over user code\n* A few Win32 fixups\n\nOverview of Changes in GLib 1.1.14:\n\n* Check for dlsym() in system libraries and -dl\n* FreeBSD portability fixes\n* Random bug fixes and autoconf/automake changes\n\nOverview of Changes in GLib 1.1.13:\n\n* Removed alloca() based function and macro variants again.\n* Improved thread related configure tests.\n* GSource destruction fixups.\n* Fixed up idle function removal based on user_data pointer.\n* Advanced Win32 portability.\n* Enforced GSource's check(), prepare() and dispatch() constrains,\n  loop recursions may only happen from dispatch(), and check() as well\n  as prepare() are called while the main_loop lock is being held.\n* GLib development now requires GNU autoconf 2.13, GNU automake 1.4\n  and GNU libtool 1.2d.\n* Lots of random portability and bug fixes.\n\nOverview of Changes in GLib 1.1.12:\n\n* Added alloca functions/macros: g_strdup_a, g_strconcat3_a, g_alloca,\n  g_new_a, g_new0_a\n* New tests structure.  Type 'make check' on your system to run them.\n* Avoid unnecessary extra hook referencing in g_hook_list_marshal\n\nOverview of Changes in GLib 1.1.11:\n\n* provide defaults for POLL sysdefs\n* g_main_is_running: new function to check whether a main loop has been quitted\n* a few other enhancement/fixes\n\nOverview of Changes in GLib 1.1.9:\n\n* Check for pthread_attr_init in all cases, Digital Unix 4 requires this\n* For G_LOCK_DECLARE_*, if !G_THREADS_ENABLED, eat trailing semicolon better\n* Changed g_main_poll_(add|remove) to g_main_(add|remove)_poll\n\nOverview of Changes in GLib 1.1.8:\n\n* Added threading support\n  - The ability to specify a set of functions to be used for\n    locking at runtime.\n  - Default implementations of locking functions for pthreads,\n    Solaris threads, and (experimentally) NSPR.\n  - All static variables should now properly locked.\n  - Enhancements to the generic main-loop mechanism to be thread-safe.\n    (It is used for the main-loop in GTK+ as of GTK+-1.1.8)\n* Portability fixes.\n\nOverview of Changes in GLib 1.1.7:\n\n* Removed multiple define from glibconfig.h\n\nOverview of Changes in GLib 1.1.6:\n\n* New GDate functionality for calendar date manipulations (g_date_*)\n* New GAllocator type and associated functions\n* New functions g_slist_copy and g_list_copy to duplicate a list with all\n  its data pointers.\n* New function g_array_insert_vals and new macro g_array_insert_val to\n  insert elements at an arbitrary index\n* GAllocators used for glist, gslist, gnode node allocations\n* Incremental freezing in ghash\n* New function g_hook_list_marshal_check to eventually destroy hooks after\n  they got marshalled\n* Revised GIOChannel to provide generic virtual-function based interface\n* Added generic main-loop abstraction\n* Removed GListAllocator type and its g_*_allocator_*() function variants\n* Bug fixes\n\nOverview of Changes in GLib 1.1.5:\n\n* Win32 portability\n* GIOChannel structure to encapsulate the IPC mechanism \n* Reimplemented endian stuff, using inline asm for x86\n* New functions:\n  - g_strescape: escapes backslashes\n  - g_path_is_absolute and g_path_skip_root\n  - g_getenv: expands environment variables that contain references \n    to other environment variables\n  - g_scanner_sync_file_offset: rewind the filedescriptor to the current\n    buffer position and blow the file read ahead buffer\n  - g_array_remove_index: remove an entry, preserving the order\n  - g_array_remove_index_fast: remove an entry, order might be distorted\n  - g_ptr_array_remove: remove an entry, preserving the order \n  - g_ptr_array_remove_fast: remove an entry, order might be distorted\n  - g_byte_array_remove_index: wrapper for g_array_remove_index\n  - g_byte_array_remove_index_fast: wrapper for g_array_remove_index_fast\n  - g_strncasecmp: modeled closely after g_strcasecmp\n  - g_list_sort, g_slist_sort: to merge sort GLists and GSLists\n* New macros:\n  - G_DIR_SEPARATOR, G_DIR_SEPARATOR_S: platform-dependant file name\n    syntax elements\n  - G_SEARCHPATH_SEPARATOR, G_SEARCHPATH_SEPARATOR_S: platform-dependant\n    search path syntax conventions\n  - G_STRUCT_OFFSET, G_STRUCT_MEMBER_P, G_STRUCT_MEMBER: for handling\n    structure fields through their offsets\n* Removed G_ENUM, G_FLAGS, G_NV, and G_SV macros\n* Bug fixes\n\nOverview of Changes in GLib 1.1.4:\n\n* Added generic callback maintenance functions (ghook)\n* New endian defines (G_*_ENDIAN)\n* New string join/split/free routines \n* Fixes\n\nOverview of Changes in GLib 1.1.3:\n\n* New GModule mechanism (implemented in an extra library) which wraps dynamic\n  object code loading facilities in a portable manner.\n* glib-config features extra \"glib\" (old behaviour remains) and \"gmodule\"\n  (add libgmodule.so to the --libs output) arguments now. this can also\n  be specified as fourth argument to the AM_PATH_GLIB() macro.\n* Overhaul of the `inline' autoconfiguration stuff, so inlining should be\n  sufficiently supported on all systems that allow inlining now.\n* New g_log() mechanism for logging of messages at different log levels,\n  associated with certain log domains (define -DG_LOG_DOMAIN for your library).\n* New inline functions for bit masks tests.\n* GNode macros (and functions) now return the newly allocated node.\n* New macro G_VA_COPY() to work around va_list copying oddities on some\n  platforms. the non-static g_vsprintf() function vanished in favour of\n  a publically exported g_strdup_vprintf().\n  People that used the former g_vsprintf() would definitely want to read the\n  associated ChangeLog entries (grep for printf).\n* New utility functions:\n  g_strndup(), g_on_error_query(), g_on_error_stack_trace(), g_strdup_printf(),\n  g_strdup_vprintf(), g_printf_string_upper_bound(), g_spaced_primes_closest(),\n  g_strnfill(), g_memdup(). \n* Overhaul of the array implementations, this contains some source incompatible\n  changes. Again, the ChangeLog is much more informative (grep for garray.c).\n* The internals of the g_dataset mechanism are now exported through the\n  new g_datalist_* API (this is also the underlying implementation for the\n  keyed data of GtkObjects).\n* New function g_atexit(), use of the ATEXIT() macro is discouraged.\n* Better configure checks for ansi compliance.\n* Libtool update to version 1.2b.\n* Lotsa bug fixes and cleanups as always ;)\n\nOverview of Changes in GLib 1.1.2:\n\n* Fixed packaging mistake which occured in 1.1.1\n* fix 64-bitness in g_prints in glibtest\n\nWhat is new in GLib 1.1.1:\n\n* An n-way tree implementation is provided now, based on the GNode structure.\n* Bugfix for pointer arrays.\n\nWhat is new in GLib 1.1.0:\n\n* GLib is distributed seperatedly from Gtk+ now and uses a sophisticated\n  shared library versioning scheme to deal with interface and binary\n  incompatibilities.\n* There is a glib-config helper script installed now.\n* Fixups all over the place.\n* gboolean is now a gint, not a gchar anymore.\n* API extensions for GList and GSList.\n* New g_str*() functions for simple string handling.\n* GScanner extensions for scope, warning and error handling.\n* Minor performance improvements for GMemChunks.\n* Implementations of GQuarks and datasets (similar to GtkObjects data\n  mechansim, but works for generic memory locations).\n* More convenience macros for GNU C function arguments.\n* Const correction all over the place, including a new pointer type\n  gconstpointer.\n* Generic functions for TAB completions.\n* GRelations for n-way mapping of certain data.\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gmodule/gmodule-ar.c": "/* GMODULE - GLIB wrapper code for dynamic module loading\n * Copyright (C) 1998, 2000 Tim Janik\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n/* \n * MT safe\n */\n\n/* because we are compatible with archive format only since AIX 4.3 */\n\n#define __AR_BIG__\n\n#include \"config.h\"\n\n#include <ar.h>\n#include <stdlib.h>\n\n#include <dlfcn.h>\n\n/* --- functions --- */\nstatic gchar*\nfetch_dlerror (gboolean replace_null)\n{\n  gchar *msg = dlerror ();\n\n  /* make sure we always return an error message != NULL, if\n   * expected to do so. */\n\n  if (!msg && replace_null)\n    return \"unknown dl-error\";\n\n  return msg;\n}\n\nstatic gchar* _g_module_get_member(const gchar* file_name)\n{\n  gchar* member = NULL;\n  struct fl_hdr file_header;\n  struct ar_hdr ar_header;\n  long first_member;\n  long name_len;\n  int fd;\n\n  fd = open(file_name, O_RDONLY);\n  if (fd == -1)\n    return NULL;\n\n  if (read(fd, (void*)&file_header, FL_HSZ) != FL_HSZ)\n    goto exit;\n\n  if (strncmp(file_header.fl_magic, AIAMAGBIG, SAIAMAG) != 0)\n    goto exit;\n\n  /* read first archive file member header */\n\n  first_member = atol(file_header.fl_fstmoff);\n\n  if (lseek(fd, first_member, SEEK_SET) != first_member)\n    goto exit;\n\n  if (read(fd, (void*)&ar_header, AR_HSZ - 2) != AR_HSZ - 2)\n    goto exit;\n\n  /* read member name */\n\n  name_len = atol(ar_header.ar_namlen);\n\n  member = g_malloc(name_len+1);\n  if (!member)\n    goto exit;\n\n  if (read(fd, (void*)member, name_len) != name_len)\n    {\n      g_free(member);\n      member = NULL;\n      goto exit;\n    }\n\n  member[name_len] = 0;\n\nexit:\n  close(fd);\n\n  return member;\n}\n\nstatic gpointer\n_g_module_open (const gchar *file_name,\n\t\tgboolean     bind_lazy,\n\t\tgboolean     bind_local)\n{\n  gpointer handle;\n  gchar* member;\n  gchar* full_name;\n\n  /* extract name of first member of archive */\n\n  member = _g_module_get_member (file_name);\n  if (member != NULL)\n    {\n      full_name = g_strconcat (file_name, \"(\", member, \")\", NULL);\n      g_free (member);\n    }\n  else\n    full_name = g_strdup (file_name);\n  \n  handle = dlopen (full_name, \n\t\t   (bind_local ? RTLD_LOCAL : RTLD_GLOBAL) | RTLD_MEMBER | (bind_lazy ? RTLD_LAZY : RTLD_NOW));\n\n  g_free (full_name);\n\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic gpointer\n_g_module_self (void)\n{\n  gpointer handle;\n\n  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic void\n_g_module_close (gpointer handle,\n\t\t gboolean is_unref)\n{\n  /* are there any systems out there that have dlopen()/dlclose()\n   * without a reference count implementation?\n   */\n  is_unref |= 1;\n  \n  if (is_unref)\n    {\n      if (dlclose (handle) != 0)\n\tg_module_set_error (fetch_dlerror (TRUE));\n    }\n}\n\nstatic gpointer\n_g_module_symbol (gpointer     handle,\n\t\t  const gchar *symbol_name)\n{\n  gpointer p;\n  \n  p = dlsym (handle, symbol_name);\n  if (!p)\n    g_module_set_error (fetch_dlerror (FALSE));\n  \n  return p;\n}\n\nstatic gchar*\n_g_module_build_path (const gchar *directory,\n\t\t      const gchar *module_name)\n{\n  if (directory && *directory) {\n    if (strncmp (module_name, \"lib\", 3) == 0)\n      return g_strconcat (directory, \"/\", module_name, NULL);\n    else\n      return g_strconcat (directory, \"/lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n  } else if (strncmp (module_name, \"lib\", 3) == 0)\n    return g_strdup (module_name);\n  else\n    return g_strconcat (\"lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gmodule/meson.build": "gmoduleconf_conf = configuration_data()\n\ng_module_need_uscore = 0\ng_module_broken_rtld_global = 0\ng_module_have_dlerror = 0\n\nlibdl_dep = [ ]\ng_module_lib_args = [ ]\ng_module_impl = ''\n\ndlopen_dlsym_test_code = '''\n#include <dlfcn.h>\nint glib_underscore_test (void) { return 42; }\nint main (int argc, char ** argv) {\n  void *f1 = (void*)0, *f2 = (void*)0, *handle;\n  handle = dlopen ((void*)0, 0);\n  if (handle) {\n    f1 = dlsym (handle, \"glib_underscore_test\");\n    f2 = dlsym (handle, \"_glib_underscore_test\");\n  }\n  return (!f2 || f1);\n}'''\n\n# On Windows force native WIN32 shared lib loader\nif host_system == 'windows'\n  g_module_impl = 'G_MODULE_IMPL_WIN32'\n# Force native AIX library loader\n# dlopen() filepath must be of the form /path/libname.a(libname.so)\nelif host_system == 'aix'\n  g_module_impl = 'G_MODULE_IMPL_AR'\nelif cc.links(dlopen_dlsym_test_code, name : 'dlopen() and dlsym() in system libraries')\n  g_module_impl = 'G_MODULE_IMPL_DL'\n# NSLinkModule (dyld) in system libraries (Darwin)\nelif cc.has_function('NSLinkModule')\n  g_module_impl = 'G_MODULE_IMPL_DYLD'\n  g_module_need_uscore = 1\nelif cc.links(dlopen_dlsym_test_code, args : '-ldl', name : 'dlopen() and dlsym() in libdl')\n  g_module_impl = 'G_MODULE_IMPL_DL'\n  libdl_dep = cc.find_library('dl')\n  g_module_lib_args = '-ldl'\nendif\n\n# additional checks for G_MODULE_IMPL_DL\nif g_module_impl == 'G_MODULE_IMPL_DL'\n  # FIXME: check for OSF1/5.0 RTLD_GLOBAL brokenness (is this still relevant?)\n\n  # Check whether we need preceding underscores\n  if cc.get_id() == 'msvc'\n    message('Building for MSVC: assuming that symbols are prefixed with underscore')\n    g_module_need_uscore = 1\n  elif meson.has_exe_wrapper()\n    # FIXME: communicate result via stdout instead of return value, so non-0 return is not printed in bold red\n    rres = cc.run(dlopen_dlsym_test_code,\n                  args : g_module_lib_args,\n                  name : 'dlsym() preceding underscores')\n    if host_system == 'windows' or rres.returncode() == 0\n      g_module_need_uscore = 1\n    endif\n  else\n    message('Cross-compiling: assuming that symbols aren\\'t prefixed with underscore')\n    g_module_need_uscore = 0\n  endif\n\n  if cc.has_function('dlerror', args : g_module_lib_args)\n    g_module_have_dlerror = 1\n  endif\nendif\n\n# Done, have we got an implementation?\nif g_module_impl == ''\n  g_module_impl = '0'\n  message('WARNING: No suitable GModule implementation found!')\nendif\n\ngmoduleconf_conf.set('G_MODULE_IMPL', g_module_impl)\ngmoduleconf_conf.set('G_MODULE_SUPPORTED', g_module_impl != '0')\ngmoduleconf_conf.set('G_MODULE_HAVE_DLERROR', g_module_have_dlerror)\ngmoduleconf_conf.set('G_MODULE_NEED_USCORE', g_module_need_uscore)\ngmoduleconf_conf.set('G_MODULE_BROKEN_RTLD_GLOBAL', g_module_broken_rtld_global)\n\ngmoduleconf_h = configure_file(input : 'gmoduleconf.h.in',\n                               output : 'gmoduleconf.h',\n                               configuration : gmoduleconf_conf)\n\ninstall_headers(['gmodule.h'], subdir : 'glib-2.0')\n\ngmodule_sources = ['gmodule.c']\nif host_system == 'windows'\n  gmodule_win_rc = configure_file(\n    input: 'gmodule.rc.in',\n    output: 'gmodule.rc',\n    configuration: glibconfig_conf,\n  )\n  gmodule_win_res = windows.compile_resources(gmodule_win_rc)\n  gmodule_sources += [gmodule_win_res]\nendif\n\nlibgmodule = library('gmodule-2.0',\n  sources : gmodule_sources,\n  version : library_version,\n  soversion : soversion,\n  darwin_versions : darwin_versions,\n  install : true,\n  include_directories : [configinc, gmoduleinc],\n  dependencies : [libdl_dep, libglib_dep],\n  c_args : ['-DG_LOG_DOMAIN=\"GModule\"', '-DG_DISABLE_DEPRECATED'] + glib_hidden_visibility_args,\n  link_args : [glib_link_flags],\n)\n\nsupported_var = 'gmodule_supported=@0@'.format(g_module_impl != '0')\n\npkg.generate(libgmodule,\n  libraries : [thread_dep],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-no-export-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\npkg.generate(libraries : [libgmodule, export_dynamic_ldflags],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-export-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\npkg.generate(libraries : [libgmodule, export_dynamic_ldflags],\n  requires : ['glib-2.0'],\n  version : glib_version,\n  variables : [supported_var],\n  install_dir : glib_pkgconfigreldir,\n  filebase : 'gmodule-2.0',\n  name : 'GModule',\n  description : 'Dynamic module loader for GLib',\n)\n\nlibgmodule_dep = declare_dependency(link_with : libgmodule,\n  include_directories : [gmoduleinc],\n  dependencies : [libglib_dep])\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gmodule/gmodule-dl.c": "/* GMODULE - GLIB wrapper code for dynamic module loading\n * Copyright (C) 1998, 2000 Tim Janik\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * Modified by the GLib Team and others 1997-2000.  See the AUTHORS\n * file for a list of people on the GLib Team.  See the ChangeLog\n * files for a list of changes.  These files are distributed with\n * GLib at ftp://ftp.gtk.org/pub/gtk/. \n */\n\n/* \n * MT safe\n */\n#include \"config.h\"\n\n#include <dlfcn.h>\n\n/* Perl includes <nlist.h> and <link.h> instead of <dlfcn.h> on some systmes? */\n\n\n/* dlerror() is not implemented on all systems\n */\n#ifndef\tG_MODULE_HAVE_DLERROR\n#  ifdef __NetBSD__\n#    define dlerror()\tg_strerror (errno)\n#  else /* !__NetBSD__ */\n/* could we rely on errno's state here? */\n#    define dlerror()\t\"unknown dl-error\"\n#  endif /* !__NetBSD__ */\n#endif\t/* G_MODULE_HAVE_DLERROR */\n\n/* some flags are missing on some systems, so we provide\n * harmless defaults.\n * The Perl sources say, RTLD_LAZY needs to be defined as (1),\n * at least for Solaris 1.\n *\n * Mandatory:\n * RTLD_LAZY   - resolve undefined symbols as code from the dynamic library\n *\t\t is executed.\n * RTLD_NOW    - resolve all undefined symbols before dlopen returns, and fail\n *\t\t if this cannot be done.\n * Optionally:\n * RTLD_GLOBAL - the external symbols defined in the library will be made\n *\t\t available to subsequently loaded libraries.\n */\n#ifndef\tHAVE_RTLD_LAZY\n#define\tRTLD_LAZY\t1\n#endif\t/* RTLD_LAZY */\n#ifndef\tHAVE_RTLD_NOW\n#define\tRTLD_NOW\t0\n#endif\t/* RTLD_NOW */\n/* some systems (OSF1 V5.0) have broken RTLD_GLOBAL linkage */\n#ifdef G_MODULE_BROKEN_RTLD_GLOBAL\n#undef\tRTLD_GLOBAL\n#undef\tHAVE_RTLD_GLOBAL\n#endif /* G_MODULE_BROKEN_RTLD_GLOBAL */\n#ifndef\tHAVE_RTLD_GLOBAL\n#define\tRTLD_GLOBAL\t0\n#endif\t/* RTLD_GLOBAL */\n\n\n/* --- functions --- */\nstatic gchar*\nfetch_dlerror (gboolean replace_null)\n{\n  gchar *msg = dlerror ();\n\n  /* make sure we always return an error message != NULL, if\n   * expected to do so. */\n\n  if (!msg && replace_null)\n    return \"unknown dl-error\";\n\n  return msg;\n}\n\nstatic gpointer\n_g_module_open (const gchar *file_name,\n\t\tgboolean     bind_lazy,\n\t\tgboolean     bind_local)\n{\n  gpointer handle;\n  \n  handle = dlopen (file_name,\n\t\t   (bind_local ? 0 : RTLD_GLOBAL) | (bind_lazy ? RTLD_LAZY : RTLD_NOW));\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic gpointer\n_g_module_self (void)\n{\n  gpointer handle;\n  \n  /* to query symbols from the program itself, special link options\n   * are required on some systems.\n   */\n\n  /* On Android 32 bit (i.e. not __LP64__), dlopen(NULL)\n   * does not work reliable and generally no symbols are found\n   * at all. RTLD_DEFAULT works though.\n   * On Android 64 bit, dlopen(NULL) seems to work but dlsym(handle)\n   * always returns 'undefined symbol'. Only if RTLD_DEFAULT or \n   * NULL is given, dlsym returns an appropriate pointer.\n   */\n#if defined(__BIONIC__)\n  handle = RTLD_DEFAULT;\n#else\n  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);\n#endif\n  if (!handle)\n    g_module_set_error (fetch_dlerror (TRUE));\n  \n  return handle;\n}\n\nstatic void\n_g_module_close (gpointer handle,\n\t\t gboolean is_unref)\n{\n  /* are there any systems out there that have dlopen()/dlclose()\n   * without a reference count implementation?\n   *\n   * See above for the Android special case\n   */\n#if defined(__BIONIC__)\n  is_unref = (handle != RTLD_DEFAULT);\n#else\n  is_unref |= 1;\n#endif\n\n  if (is_unref)\n    {\n      if (dlclose (handle) != 0)\n\tg_module_set_error (fetch_dlerror (TRUE));\n    }\n}\n\nstatic gpointer\n_g_module_symbol (gpointer     handle,\n\t\t  const gchar *symbol_name)\n{\n  gpointer p;\n  gchar *msg;\n\n  fetch_dlerror (FALSE);\n  p = dlsym (handle, symbol_name);\n  msg = fetch_dlerror (FALSE);\n  if (msg)\n    g_module_set_error (msg);\n  \n  return p;\n}\n\nstatic gchar*\n_g_module_build_path (const gchar *directory,\n\t\t      const gchar *module_name)\n{\n  if (directory && *directory) {\n    if (strncmp (module_name, \"lib\", 3) == 0)\n      return g_strconcat (directory, \"/\", module_name, NULL);\n    else\n      return g_strconcat (directory, \"/lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n  } else if (strncmp (module_name, \"lib\", 3) == 0)\n    return g_strdup (module_name);\n  else\n    return g_strconcat (\"lib\", module_name, \".\" G_MODULE_SUFFIX, NULL);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/slow-connect-preload.c": "/* GIO - GLib Input, Output and Streaming Library\n *\n * Copyright (C) 2018 Igalia S.L.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General\n * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <stdio.h>\n#include <dlfcn.h>\n\n/* This is used in gsocketclient-slow.c used to test\n * and get coverage on how GSocketClient reacts to\n * slow connections.\n */\nint\nconnect (int                    sockfd,\n         const struct sockaddr *addr,\n         socklen_t              addrlen)\n{\n  static int (*real_connect)(int, const struct sockaddr *, socklen_t);\n\n  if (real_connect == NULL)\n    real_connect = dlsym (RTLD_NEXT, \"connect\");\n\n  /* This is long enough for multiple connection attempts to be done\n   * in parallel given that their timeout is 250ms */\n  usleep (600 * 1000);\n  return real_connect (sockfd, addr, addrlen);\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/tests/utf8.txt",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-41.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-3.expected",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-2.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-52.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-41.expected",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-50.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-3.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/glib/tests/markups/fail-53.gmarkup",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/empty-key.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/bad-header.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/uri-mismatch.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/huge-chunk-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/valid-no-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/no-text-data.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/header-only.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/mtime-zero.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/valid.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/header-and-chunk-size.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/gio/tests/thumbnails/overlong-value.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/glib/mainloop-states.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/glib/mainloop-states.gif",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/glib/file-name-encodings.sxd",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/glib/file-name-encodings.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/gio/menu-model.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/gio/menu-example.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/gio/gvfs-overview.odg",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/gio/gvfs-overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-glib-2.60.7-3vxw7xlnb3u62mvg4jipx4jqjvbbawxy/spack-src/docs/reference/gobject/images/glue.png"
    ],
    "total_files": 1859
}