{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hsakmt-roct-3.10.0-umpr3n6nbgdavr3diyvwwk5xmte4z2t6/spack-src/tests/reopen/kmtreopen.c": "#include <dlfcn.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <hsakmt.h>\n\nHSAKMT_STATUS HSAKMTAPI (*pfn_hsaKmtOpenKFD)(void);\nHSAKMT_STATUS HSAKMTAPI (*pfn_hsaKmtCloseKFD)(void);\nHSAKMT_STATUS HSAKMTAPI (*pfn_hsaKmtGetVersion)(HsaVersionInfo* VersionInfo);\nHSAKMT_STATUS HSAKMTAPI (*pfn_hsaKmtAcquireSystemProperties)(HsaSystemProperties* SystemProperties);\nHSAKMT_STATUS HSAKMTAPI (*pfn_hsaKmtReleaseSystemProperties)(void);\n\nHsaVersionInfo g_versionInfo;\nHsaSystemProperties g_systemProperties;\n\nstatic void hsa_perror(const char *s, HSAKMT_STATUS status)\n{\n    static const char *errorStrings[] = {\n        [HSAKMT_STATUS_SUCCESS] = \"Success\",\n        [HSAKMT_STATUS_ERROR] = \"General error\",\n        [HSAKMT_STATUS_DRIVER_MISMATCH] = \"Driver mismatch\",\n        [HSAKMT_STATUS_INVALID_PARAMETER] = \"Invalid parameter\",\n        [HSAKMT_STATUS_INVALID_HANDLE] = \"Invalid handle\",\n        [HSAKMT_STATUS_INVALID_NODE_UNIT] = \"Invalid node or unit\",\n        [HSAKMT_STATUS_NO_MEMORY] = \"No memory\",\n        [HSAKMT_STATUS_BUFFER_TOO_SMALL] = \"Buffer too small\",\n        [HSAKMT_STATUS_NOT_IMPLEMENTED] = \"Not implemented\",\n        [HSAKMT_STATUS_NOT_SUPPORTED] = \"Not supported\",\n        [HSAKMT_STATUS_UNAVAILABLE] = \"Unavailable\",\n        [HSAKMT_STATUS_KERNEL_IO_CHANNEL_NOT_OPENED] = \"Kernel IO channel not opened\",\n        [HSAKMT_STATUS_KERNEL_COMMUNICATION_ERROR] = \"Kernel communication error\",\n        [HSAKMT_STATUS_KERNEL_ALREADY_OPENED] = \"Kernel already opened\",\n        [HSAKMT_STATUS_HSAMMU_UNAVAILABLE] = \"HSA MMU unavailable\",\n        [HSAKMT_STATUS_WAIT_FAILURE] = \"Wait failure\",\n        [HSAKMT_STATUS_WAIT_TIMEOUT] = \"Wait timeout\",\n        [HSAKMT_STATUS_MEMORY_ALREADY_REGISTERED] = \"Memory already registered\",\n        [HSAKMT_STATUS_MEMORY_NOT_REGISTERED] = \"Memory not registered\",\n        [HSAKMT_STATUS_MEMORY_ALIGNMENT] = \"Memory alignment error\"\n    };\n\n    if (status >= 0 && status <= HSAKMT_STATUS_MEMORY_ALIGNMENT)\n        fprintf(stderr, \"%s: %s\\n\", s, errorStrings[status]);\n    else\n        fprintf(stderr, \"%s: Unknown error %d\\n\", s, status);\n}\n\n#define HSA_CHECK_RETURN(call) do {             \\\n        HSAKMT_STATUS __ret;                    \\\n        printf(\"  Calling %s\\n\", #call);        \\\n        __ret = pfn_##call;                     \\\n        if (__ret != HSAKMT_STATUS_SUCCESS) {   \\\n            hsa_perror(#call, __ret);           \\\n            return __ret;                       \\\n        }                                       \\\n    } while(0)\n\n#define HSA_DLSYM(handle, func) do {                            \\\n        pfn_##func = dlsym(handle, #func);                      \\\n        if (pfn_##func == NULL) {                               \\\n            fprintf(stderr, \"dlsym failed: %s\\n\", dlerror());   \\\n            return HSAKMT_STATUS_ERROR;                         \\\n        }                                                       \\\n    } while(0)\n\nstatic int runTest(void *handle)\n{\n    HSA_DLSYM(handle, hsaKmtOpenKFD);\n    HSA_DLSYM(handle, hsaKmtCloseKFD);\n    HSA_DLSYM(handle, hsaKmtGetVersion);\n    HSA_DLSYM(handle, hsaKmtAcquireSystemProperties);\n    HSA_DLSYM(handle, hsaKmtReleaseSystemProperties);\n\n    HSA_CHECK_RETURN(hsaKmtOpenKFD());\n    HSA_CHECK_RETURN(hsaKmtGetVersion(&g_versionInfo));\n    HSA_CHECK_RETURN(hsaKmtAcquireSystemProperties(&g_systemProperties));\n\n    HSA_CHECK_RETURN(hsaKmtReleaseSystemProperties());\n    HSA_CHECK_RETURN(hsaKmtCloseKFD());\n\n    return HSAKMT_STATUS_SUCCESS;\n}\n\nint main(int argc, char *argv[])\n{\n    void *handle;\n    int i;\n\n    for (i = 0; i < 5; i++) {\n        printf(\"Iteration %d:\\n  Loading libhsakmt.so\\n\", i+1);\n\n        handle = dlopen(\"libhsakmt.so\", RTLD_LAZY);\n        if (handle == NULL) {\n            fprintf(stderr, \"dlopen failed: %s\\n\", dlerror());\n            exit(1);\n        }\n\n        if (runTest(handle) != HSAKMT_STATUS_SUCCESS)\n            exit(1);\n\n        printf(\"  Unloading libhsakmt.so\\n\");\n        if (dlclose(handle) != 0) {\n            fprintf(stderr, \"dlclose failed: %s\\n\", dlerror());\n            exit(1);\n        }\n    }\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hsakmt-roct-3.10.0-umpr3n6nbgdavr3diyvwwk5xmte4z2t6/spack-src/tests/kfdtest/sp3/libamdsp3.a"
    ],
    "total_files": 146
}