{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/common/putilimp.h": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 1997-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : putilimp.h\n*\n*   Date        Name        Description\n*   10/17/04    grhoten     Move internal functions from putil.h to this file.\n******************************************************************************\n*/\n\n#ifndef PUTILIMP_H\n#define PUTILIMP_H\n\n#include \"unicode/utypes.h\"\n#include \"unicode/putil.h\"\n\n/**\n * \\def U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC\n * Nearly all CPUs and compilers implement a right-shift of a signed integer\n * as an Arithmetic Shift Right which copies the sign bit (the Most Significant Bit (MSB))\n * into the vacated bits (sign extension).\n * For example, (int32_t)0xfff5fff3>>4 becomes 0xffff5fff and -1>>1=-1.\n *\n * This can be useful for storing a signed value in the upper bits\n * and another bit field in the lower bits.\n * The signed value can be retrieved by simple right-shifting.\n *\n * This is consistent with the Java language.\n *\n * However, the C standard allows compilers to implement a right-shift of a signed integer\n * as a Logical Shift Right which copies a 0 into the vacated bits.\n * For example, (int32_t)0xfff5fff3>>4 becomes 0x0fff5fff and -1>>1=0x7fffffff.\n *\n * Code that depends on the natural behavior should be guarded with this macro,\n * with an alternate path for unusual platforms.\n * @internal\n */\n#ifdef U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC\n    /* Use the predefined value. */\n#else\n    /*\n     * Nearly all CPUs & compilers implement a right-shift of a signed integer\n     * as an Arithmetic Shift Right (with sign extension).\n     */\n#   define U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC 1\n#endif\n\n/** Define this to 1 if your platform supports IEEE 754 floating point,\n   to 0 if it does not. */\n#ifndef IEEE_754\n#   define IEEE_754 1\n#endif\n\n/**\n * uintptr_t is an optional part of the standard definitions in stdint.h.\n * The opengroup.org documentation for stdint.h says\n * \"On XSI-conformant systems, the intptr_t and uintptr_t types are required;\n * otherwise, they are optional.\"\n * We assume that when uintptr_t is defined, UINTPTR_MAX is defined as well.\n *\n * Do not use ptrdiff_t since it is signed. size_t is unsigned.\n */\n/* TODO: This check fails on some z environments. Filed a ticket #9357 for this. */\n#if !defined(__intptr_t_defined) && !defined(UINTPTR_MAX) && (U_PLATFORM != U_PF_OS390)\ntypedef size_t uintptr_t;\n#endif\n\n/*===========================================================================*/\n/** @{ Information about POSIX support                                       */\n/*===========================================================================*/\n\n#ifdef U_HAVE_NL_LANGINFO_CODESET\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API || U_PLATFORM == U_PF_ANDROID || U_PLATFORM == U_PF_QNX\n#   define U_HAVE_NL_LANGINFO_CODESET 0\n#else\n#   define U_HAVE_NL_LANGINFO_CODESET 1\n#endif\n\n#ifdef U_NL_LANGINFO_CODESET\n    /* Use the predefined value. */\n#elif !U_HAVE_NL_LANGINFO_CODESET\n#   define U_NL_LANGINFO_CODESET -1\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_NL_LANGINFO_CODESET CODESET\n#endif\n\n#if defined(U_TZSET) || defined(U_HAVE_TZSET)\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    // UWP doesn't support tzset or environment variables for tz\n#if U_PLATFORM_HAS_WINUWP_API == 0\n#   define U_TZSET _tzset\n#endif\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_TZSET tzset\n#endif\n\n#if defined(U_TIMEZONE) || defined(U_HAVE_TIMEZONE)\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_ANDROID\n#   define U_TIMEZONE timezone\n#elif defined(__UCLIBC__)\n    // uClibc does not have __timezone or _timezone.\n#elif defined(_NEWLIB_VERSION)\n#   define U_TIMEZONE _timezone\n#elif defined(__GLIBC__)\n    // glibc\n#   define U_TIMEZONE __timezone\n#elif U_PLATFORM_IS_LINUX_BASED\n    // not defined\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_TIMEZONE _timezone\n#elif U_PLATFORM == U_PF_BSD && !defined(__NetBSD__)\n   /* not defined */\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#elif U_PLATFORM == U_PF_IPHONE\n   /* not defined */\n#else\n#   define U_TIMEZONE timezone\n#endif\n\n#if defined(U_TZNAME) || defined(U_HAVE_TZNAME)\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    /* not usable on all windows platforms */\n#if U_PLATFORM_HAS_WINUWP_API == 0\n#   define U_TZNAME _tzname\n#endif\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_TZNAME tzname\n#endif\n\n#ifdef U_HAVE_MMAP\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_MMAP 0\n#else\n#   define U_HAVE_MMAP 1\n#endif\n\n#ifdef U_HAVE_POPEN\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_POPEN 0\n#elif U_PLATFORM == U_PF_OS400\n#   define U_HAVE_POPEN 0\n#else\n#   define U_HAVE_POPEN 1\n#endif\n\n/**\n * \\def U_HAVE_DIRENT_H\n * Defines whether dirent.h is available.\n * @internal\n */\n#ifdef U_HAVE_DIRENT_H\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_DIRENT_H 0\n#else\n#   define U_HAVE_DIRENT_H 1\n#endif\n\n/** @} */\n\n/*===========================================================================*/\n/** @{ GCC built in functions for atomic memory operations                   */\n/*===========================================================================*/\n\n/**\n * \\def U_HAVE_GCC_ATOMICS\n * @internal\n */\n#ifdef U_HAVE_GCC_ATOMICS\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_MINGW\n    #define U_HAVE_GCC_ATOMICS 0\n#elif U_GCC_MAJOR_MINOR >= 404 || defined(__clang__)\n    /* TODO: Intel icc and IBM xlc on AIX also support gcc atomics.  (Intel originated them.)\n     *       Add them for these compilers.\n     * Note: Clang sets __GNUC__ defines for version 4.2, so misses the 4.4 test here.\n     */\n#   define U_HAVE_GCC_ATOMICS 1\n#else\n#   define U_HAVE_GCC_ATOMICS 0\n#endif\n\n/** @} */\n\n/**\n * \\def U_HAVE_STD_ATOMICS\n * Defines whether to use the C++11 std::atomic functions.\n * If false, ICU will fall back to compiler or platform specific alternatives.\n * Note: support for these fall back options for atomics will be removed in a future version\n *       of ICU, and the use of C++ 11 atomics will be required.\n * @internal\n */\n#ifdef U_HAVE_STD_ATOMICS\n    /* Use the predefined value. */\n#else\n#    define U_HAVE_STD_ATOMICS 1\n#endif\n\n/**\n *  \\def U_HAVE_CLANG_ATOMICS\n *  Defines whether Clang c11 style built-in atomics are available.\n *  These are used in preference to gcc atomics when both are available.\n */\n#ifdef U_HAVE_CLANG_ATOMICS\n    /* Use the predefined value. */\n#elif __has_builtin(__c11_atomic_load) && \\\n    __has_builtin(__c11_atomic_store) && \\\n    __has_builtin(__c11_atomic_fetch_add) && \\\n    __has_builtin(__c11_atomic_fetch_sub)\n#    define U_HAVE_CLANG_ATOMICS 1\n#else\n#    define U_HAVE_CLANG_ATOMICS 0\n#endif\n\n\n/**\n * \\def U_HAVE_STD_MUTEX\n * Defines whether to use the C++11 std::mutex functions.\n * If false, ICU will fall back to compiler or platform specific alternatives.\n * std::mutex is preferred, and used by default unless this setting is overridden.\n * Note: support for other options for mutexes will be removed in a future version\n *       of ICU, and the use of std::mutex will be required.\n * @internal\n */\n#ifdef U_HAVE_STD_MUTEX\n    /* Use the predefined value. */\n#else\n#    define U_HAVE_STD_MUTEX 1\n#endif\n\n/*===========================================================================*/\n/** @{ Programs used by ICU code                                             */\n/*===========================================================================*/\n\n/**\n * \\def U_MAKE_IS_NMAKE\n * Defines whether the \"make\" program is Windows nmake.\n */\n#ifdef U_MAKE_IS_NMAKE\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_WINDOWS\n#   define U_MAKE_IS_NMAKE 1\n#else\n#   define U_MAKE_IS_NMAKE 0\n#endif\n\n/** @} */\n\n/*==========================================================================*/\n/* Platform utilities                                                       */\n/*==========================================================================*/\n\n/**\n * Platform utilities isolates the platform dependencies of the\n * library.  For each platform which this code is ported to, these\n * functions may have to be re-implemented.\n */\n\n/**\n * Floating point utility to determine if a double is Not a Number (NaN).\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isNaN(double d);\n/**\n * Floating point utility to determine if a double has an infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isInfinite(double d);\n/**\n * Floating point utility to determine if a double has a positive infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isPositiveInfinity(double d);\n/**\n * Floating point utility to determine if a double has a negative infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isNegativeInfinity(double d);\n/**\n * Floating point utility that returns a Not a Number (NaN) value.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_getNaN(void);\n/**\n * Floating point utility that returns an infinite value.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_getInfinity(void);\n\n/**\n * Floating point utility to truncate a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_trunc(double d);\n/**\n * Floating point utility to calculate the floor of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_floor(double d);\n/**\n * Floating point utility to calculate the ceiling of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_ceil(double d);\n/**\n * Floating point utility to calculate the absolute value of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fabs(double d);\n/**\n * Floating point utility to calculate the fractional and integer parts of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_modf(double d, double* pinteger);\n/**\n * Floating point utility to calculate the remainder of a double divided by another double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmod(double d, double y);\n/**\n * Floating point utility to calculate d to the power of exponent (d^exponent).\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_pow(double d, double exponent);\n/**\n * Floating point utility to calculate 10 to the power of exponent (10^exponent).\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_pow10(int32_t exponent);\n/**\n * Floating point utility to calculate the maximum value of two doubles.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmax(double d, double y);\n/**\n * Floating point utility to calculate the minimum value of two doubles.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmin(double d, double y);\n/**\n * Private utility to calculate the maximum value of two integers.\n * @internal\n */\nU_INTERNAL int32_t U_EXPORT2 uprv_max(int32_t d, int32_t y);\n/**\n * Private utility to calculate the minimum value of two integers.\n * @internal\n */\nU_INTERNAL int32_t U_EXPORT2 uprv_min(int32_t d, int32_t y);\n\n#if U_IS_BIG_ENDIAN\n#   define uprv_isNegative(number) (*((signed char *)&(number))<0)\n#else\n#   define uprv_isNegative(number) (*((signed char *)&(number)+sizeof(number)-1)<0)\n#endif\n\n/**\n * Return the largest positive number that can be represented by an integer\n * type of arbitrary bit length.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_maxMantissa(void);\n\n/**\n * Floating point utility to calculate the logarithm of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_log(double d);\n\n/**\n * Does common notion of rounding e.g. uprv_floor(x + 0.5);\n * @param x the double number\n * @return the rounded double\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_round(double x);\n\n/**\n * Adds the signed integers a and b, storing the result in res.\n * Checks for signed integer overflow.\n * Similar to the GCC/Clang extension __builtin_add_overflow\n *\n * @param a The first operand.\n * @param b The second operand.\n * @param res a + b\n * @return true if overflow occurred; false if no overflow occurred.\n * @internal\n */\nU_INTERNAL UBool U_EXPORT2 uprv_add32_overflow(int32_t a, int32_t b, int32_t* res);\n\n/**\n * Multiplies the signed integers a and b, storing the result in res.\n * Checks for signed integer overflow.\n * Similar to the GCC/Clang extension __builtin_mul_overflow\n *\n * @param a The first multiplicand.\n * @param b The second multiplicand.\n * @param res a * b\n * @return true if overflow occurred; false if no overflow occurred.\n * @internal\n */\nU_INTERNAL UBool U_EXPORT2 uprv_mul32_overflow(int32_t a, int32_t b, int32_t* res);\n\n#if 0\n/**\n * Returns the number of digits after the decimal point in a double number x.\n *\n * @param x the double number\n * @return the number of digits after the decimal point in a double number x.\n * @internal\n */\n/*U_INTERNAL int32_t  U_EXPORT2 uprv_digitsAfterDecimal(double x);*/\n#endif\n\n#if !U_CHARSET_IS_UTF8\n/**\n * Please use ucnv_getDefaultName() instead.\n * Return the default codepage for this platform and locale.\n * This function can call setlocale() on Unix platforms. Please read the\n * platform documentation on setlocale() before calling this function.\n * @return the default codepage for this platform \n * @internal\n */\nU_INTERNAL const char*  U_EXPORT2 uprv_getDefaultCodepage(void);\n#endif\n\n/**\n * Please use uloc_getDefault() instead.\n * Return the default locale ID string by querying the system, or\n *     zero if one cannot be found. \n * This function can call setlocale() on Unix platforms. Please read the\n * platform documentation on setlocale() before calling this function.\n * @return the default locale ID string\n * @internal\n */\nU_INTERNAL const char*  U_EXPORT2 uprv_getDefaultLocaleID(void);\n\n/**\n * Time zone utilities\n *\n * Wrappers for C runtime library functions relating to timezones.\n * The t_tzset() function (similar to tzset) uses the current setting\n * of the environment variable TZ to assign values to three global\n * variables: daylight, timezone, and tzname. These variables have the\n * following meanings, and are declared in &lt;time.h&gt;.\n *\n *   daylight   Nonzero if daylight-saving-time zone (DST) is specified\n *              in TZ; otherwise, 0. Default value is 1.\n *   timezone   Difference in seconds between coordinated universal\n *              time and local time. E.g., -28,800 for PST (GMT-8hrs)\n *   tzname(0)  Three-letter time-zone name derived from TZ environment\n *              variable. E.g., \"PST\".\n *   tzname(1)  Three-letter DST zone name derived from TZ environment\n *              variable.  E.g., \"PDT\". If DST zone is omitted from TZ,\n *              tzname(1) is an empty string.\n *\n * Notes: For example, to set the TZ environment variable to correspond\n * to the current time zone in Germany, you can use one of the\n * following statements:\n *\n *   set TZ=GST1GDT\n *   set TZ=GST+1GDT\n *\n * If the TZ value is not set, t_tzset() attempts to use the time zone\n * information specified by the operating system. Under Windows NT\n * and Windows 95, this information is specified in the Control Panel's\n * Date/Time application.\n * @internal\n */\nU_INTERNAL void     U_EXPORT2 uprv_tzset(void);\n\n/**\n * Difference in seconds between coordinated universal\n * time and local time. E.g., -28,800 for PST (GMT-8hrs)\n * @return the difference in seconds between coordinated universal time and local time.\n * @internal\n */\nU_INTERNAL int32_t  U_EXPORT2 uprv_timezone(void);\n\n/**\n *   tzname(0)  Three-letter time-zone name derived from TZ environment\n *              variable. E.g., \"PST\".\n *   tzname(1)  Three-letter DST zone name derived from TZ environment\n *              variable.  E.g., \"PDT\". If DST zone is omitted from TZ,\n *              tzname(1) is an empty string.\n * @internal\n */\nU_INTERNAL const char* U_EXPORT2 uprv_tzname(int n);\n\n/**\n * Reset the global tzname cache.\n * @internal\n */\nU_INTERNAL void uprv_tzname_clear_cache();\n\n/**\n * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.\n * This function is affected by 'faketime' and should be the bottleneck for all user-visible ICU time functions.\n * @return the UTC time measured in milliseconds\n * @internal\n */\nU_INTERNAL UDate U_EXPORT2 uprv_getUTCtime(void);\n\n/**\n * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.\n * This function is not affected by 'faketime', so it should only be used by low level test functions- not by anything that\n * exposes time to the end user.\n * @return the UTC time measured in milliseconds\n * @internal\n */\nU_INTERNAL UDate U_EXPORT2 uprv_getRawUTCtime(void);\n\n/**\n * Determine whether a pathname is absolute or not, as defined by the platform.\n * @param path Pathname to test\n * @return TRUE if the path is absolute\n * @internal (ICU 3.0)\n */\nU_INTERNAL UBool U_EXPORT2 uprv_pathIsAbsolute(const char *path);\n\n/**\n * Use U_MAX_PTR instead of this function.\n * @param void pointer to test\n * @return the largest possible pointer greater than the base\n * @internal (ICU 3.8)\n */\nU_INTERNAL void * U_EXPORT2 uprv_maximumPtr(void *base);\n\n/**\n * Maximum value of a (void*) - use to indicate the limit of an 'infinite' buffer.\n * In fact, buffer sizes must not exceed 2GB so that the difference between\n * the buffer limit and the buffer start can be expressed in an int32_t.\n *\n * The definition of U_MAX_PTR must fulfill the following conditions:\n * - return the largest possible pointer greater than base\n * - return a valid pointer according to the machine architecture (AS/400, 64-bit, etc.)\n * - avoid wrapping around at high addresses\n * - make sure that the returned pointer is not farther from base than 0x7fffffff bytes\n *\n * @param base The beginning of a buffer to find the maximum offset from\n * @internal\n */\n#ifndef U_MAX_PTR\n#  if U_PLATFORM == U_PF_OS390 && !defined(_LP64)\n    /* We have 31-bit pointers. */\n#    define U_MAX_PTR(base) ((void *)0x7fffffff)\n#  elif U_PLATFORM == U_PF_OS400\n#    define U_MAX_PTR(base) uprv_maximumPtr((void *)base)\n#  elif 0\n    /*\n     * For platforms where pointers are scalar values (which is normal, but unlike i5/OS)\n     * but that do not define uintptr_t.\n     *\n     * However, this does not work on modern compilers:\n     * The C++ standard does not define pointer overflow, and allows compilers to\n     * assume that p+u>p for any pointer p and any integer u>0.\n     * Thus, modern compilers optimize away the \">\" comparison.\n     * (See ICU tickets #7187 and #8096.)\n     */\n#    define U_MAX_PTR(base) \\\n    ((void *)(((char *)(base)+0x7fffffffu) > (char *)(base) \\\n        ? ((char *)(base)+0x7fffffffu) \\\n        : (char *)-1))\n#  else\n    /* Default version. C++ standard compliant for scalar pointers. */\n#    define U_MAX_PTR(base) \\\n    ((void *)(((uintptr_t)(base)+0x7fffffffu) > (uintptr_t)(base) \\\n        ? ((uintptr_t)(base)+0x7fffffffu) \\\n        : (uintptr_t)-1))\n#  endif\n#endif\n\n\n#ifdef __cplusplus\n/**\n * Pin a buffer capacity such that doing pointer arithmetic\n * on the destination pointer and capacity cannot overflow.\n *\n * The pinned capacity must fulfill the following conditions (for positive capacities):\n *   - dest + capacity is a valid pointer according to the machine arcitecture (AS/400, 64-bit, etc.)\n *   - (dest + capacity) >= dest\n *   - The size (in bytes) of T[capacity] does not exceed 0x7fffffff\n *\n * @param dest the destination buffer pointer.\n * @param capacity the requested buffer capacity, in units of type T.\n * @return the pinned capacity.\n * @internal\n */\ntemplate <typename T>\ninline int32_t pinCapacity(T *dest, int32_t capacity) {\n    if (capacity <= 0) { return capacity; }\n\n    uintptr_t destInt = (uintptr_t)dest;\n    uintptr_t maxInt;\n\n#  if U_PLATFORM == U_PF_OS390 && !defined(_LP64)\n    // We have 31-bit pointers.\n    maxInt = 0x7fffffff;\n#  elif U_PLATFORM == U_PF_OS400\n    maxInt = (uintptr_t)uprv_maximumPtr((void *)dest);\n#  else\n    maxInt = destInt + 0x7fffffffu;\n    if (maxInt < destInt) {\n        // Less than 2GB to the end of the address space.\n        // Pin to that to prevent address overflow.\n        maxInt = (uintptr_t)-1;\n    }\n#  endif\n\n    uintptr_t maxBytes = maxInt - destInt;  // max. 2GB\n    int32_t maxCapacity = (int32_t)(maxBytes / sizeof(T));\n    return capacity <= maxCapacity ? capacity : maxCapacity;\n}\n#endif   // __cplusplus\n\n/*  Dynamic Library Functions */\n\ntypedef void (UVoidFunction)(void);\n\n#if U_ENABLE_DYLOAD\n/**\n * Load a library\n * @internal (ICU 4.4)\n */\nU_INTERNAL void * U_EXPORT2 uprv_dl_open(const char *libName, UErrorCode *status);\n\n/**\n * Close a library\n * @internal (ICU 4.4)\n */\nU_INTERNAL void U_EXPORT2 uprv_dl_close( void *lib, UErrorCode *status);\n\n/**\n * Extract a symbol from a library (function)\n * @internal (ICU 4.8)\n */\nU_INTERNAL UVoidFunction* U_EXPORT2 uprv_dlsym_func( void *lib, const char *symbolName, UErrorCode *status);\n\n/**\n * Extract a symbol from a library (function)\n * Not implemented, no clients.\n * @internal\n */\n/* U_INTERNAL void * U_EXPORT2 uprv_dlsym_data( void *lib, const char *symbolName, UErrorCode *status); */\n\n#endif\n\n/**\n * Define malloc and related functions\n * @internal\n */\n#if U_PLATFORM == U_PF_OS400\n# define uprv_default_malloc(x) _C_TS_malloc(x)\n# define uprv_default_realloc(x,y) _C_TS_realloc(x,y)\n# define uprv_default_free(x) _C_TS_free(x)\n/* also _C_TS_calloc(x) */\n#else\n/* C defaults */\n# define uprv_default_malloc(x) malloc(x)\n# define uprv_default_realloc(x,y) realloc(x,y)\n# define uprv_default_free(x) free(x)\n#endif\n\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/common/putil.cpp": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 1997-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : putil.c (previously putil.cpp and ptypes.cpp)\n*\n*   Date        Name        Description\n*   04/14/97    aliu        Creation.\n*   04/24/97    aliu        Added getDefaultDataDirectory() and\n*                            getDefaultLocaleID().\n*   04/28/97    aliu        Rewritten to assume Unix and apply general methods\n*                            for assumed case.  Non-UNIX platforms must be\n*                            special-cased.  Rewrote numeric methods dealing\n*                            with NaN and Infinity to be platform independent\n*                             over all IEEE 754 platforms.\n*   05/13/97    aliu        Restored sign of timezone\n*                            (semantics are hours West of GMT)\n*   06/16/98    erm         Added IEEE_754 stuff, cleaned up isInfinite, isNan,\n*                             nextDouble..\n*   07/22/98    stephen     Added remainder, max, min, trunc\n*   08/13/98    stephen     Added isNegativeInfinity, isPositiveInfinity\n*   08/24/98    stephen     Added longBitsFromDouble\n*   09/08/98    stephen     Minor changes for Mac Port\n*   03/02/99    stephen     Removed openFile().  Added AS400 support.\n*                            Fixed EBCDIC tables\n*   04/15/99    stephen     Converted to C.\n*   06/28/99    stephen     Removed mutex locking in u_isBigEndian().\n*   08/04/99    jeffrey R.  Added OS/2 changes\n*   11/15/99    helena      Integrated S/390 IEEE support.\n*   04/26/01    Barry N.    OS/400 support for uprv_getDefaultLocaleID\n*   08/15/01    Steven H.   OS/400 support for uprv_getDefaultCodepage\n*   01/03/08    Steven L.   Fake Time Support\n******************************************************************************\n*/\n\n// Defines _XOPEN_SOURCE for access to POSIX functions.\n// Must be before any other #includes.\n#include \"uposixdefs.h\"\n\n// First, the platform type. Need this for U_PLATFORM.\n#include \"unicode/platform.h\"\n\n#if U_PLATFORM == U_PF_MINGW && defined __STRICT_ANSI__\n/* tzset isn't defined in strict ANSI on MinGW. */\n#undef __STRICT_ANSI__\n#endif\n\n/*\n * Cygwin with GCC requires inclusion of time.h after the above disabling strict asci mode statement.\n */\n#include <time.h>\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#include <sys/time.h>\n#endif\n\n/* include the rest of the ICU headers */\n#include \"unicode/putil.h\"\n#include \"unicode/ustring.h\"\n#include \"putilimp.h\"\n#include \"uassert.h\"\n#include \"umutex.h\"\n#include \"cmemory.h\"\n#include \"cstring.h\"\n#include \"locmap.h\"\n#include \"ucln_cmn.h\"\n#include \"charstr.h\"\n\n/* Include standard headers. */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <locale.h>\n#include <float.h>\n\n#ifndef U_COMMON_IMPLEMENTATION\n#error U_COMMON_IMPLEMENTATION not set - must be set for all ICU source files in common/ - see http://userguide.icu-project.org/howtouseicu\n#endif\n\n\n/* include system headers */\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /*\n     * TODO: U_PLATFORM_USES_ONLY_WIN32_API includes MinGW.\n     * Should Cygwin be included as well (U_PLATFORM_HAS_WIN32_API)\n     * to use native APIs as much as possible?\n     */\n#ifndef WIN32_LEAN_AND_MEAN\n#   define WIN32_LEAN_AND_MEAN\n#endif\n#   define VC_EXTRALEAN\n#   define NOUSER\n#   define NOSERVICE\n#   define NOIME\n#   define NOMCX\n#   include <windows.h>\n#   include \"unicode/uloc.h\"\n#   include \"wintz.h\"\n#elif U_PLATFORM == U_PF_OS400\n#   include <float.h>\n#   include <qusec.h>       /* error code structure */\n#   include <qusrjobi.h>\n#   include <qliept.h>      /* EPT_CALL macro  - this include must be after all other \"QSYSINCs\" */\n#   include <mih/testptr.h> /* For uprv_maximumPtr */\n#elif U_PLATFORM == U_PF_OS390\n#   include \"unicode/ucnv.h\"   /* Needed for UCNV_SWAP_LFNL_OPTION_STRING */\n#elif U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS\n#   include <limits.h>\n#   include <unistd.h>\n#   if U_PLATFORM == U_PF_SOLARIS\n#       ifndef _XPG4_2\n#           define _XPG4_2\n#       endif\n#   endif\n#elif U_PLATFORM == U_PF_QNX\n#   include <sys/neutrino.h>\n#endif\n\n/*\n * Only include langinfo.h if we have a way to get the codeset. If we later\n * depend on more feature, we can test on U_HAVE_NL_LANGINFO.\n *\n */\n\n#if U_HAVE_NL_LANGINFO_CODESET\n#include <langinfo.h>\n#endif\n\n/**\n * Simple things (presence of functions, etc) should just go in configure.in and be added to\n * icucfg.h via autoheader.\n */\n#if U_PLATFORM_IMPLEMENTS_POSIX\n#   if U_PLATFORM == U_PF_OS400\n#    define HAVE_DLFCN_H 0\n#    define HAVE_DLOPEN 0\n#   else\n#   ifndef HAVE_DLFCN_H\n#    define HAVE_DLFCN_H 1\n#   endif\n#   ifndef HAVE_DLOPEN\n#    define HAVE_DLOPEN 1\n#   endif\n#   endif\n#   ifndef HAVE_GETTIMEOFDAY\n#    define HAVE_GETTIMEOFDAY 1\n#   endif\n#else\n#   define HAVE_DLFCN_H 0\n#   define HAVE_DLOPEN 0\n#   define HAVE_GETTIMEOFDAY 0\n#endif\n\nU_NAMESPACE_USE\n\n/* Define the extension for data files, again... */\n#define DATA_TYPE \"dat\"\n\n/* Leave this copyright notice here! */\nstatic const char copyright[] = U_COPYRIGHT_STRING;\n\n/* floating point implementations ------------------------------------------- */\n\n/* We return QNAN rather than SNAN*/\n#define SIGN 0x80000000U\n\n/* Make it easy to define certain types of constants */\ntypedef union {\n    int64_t i64; /* This must be defined first in order to allow the initialization to work. This is a C89 feature. */\n    double d64;\n} BitPatternConversion;\nstatic const BitPatternConversion gNan = { (int64_t) INT64_C(0x7FF8000000000000) };\nstatic const BitPatternConversion gInf = { (int64_t) INT64_C(0x7FF0000000000000) };\n\n/*---------------------------------------------------------------------------\n  Platform utilities\n  Our general strategy is to assume we're on a POSIX platform.  Platforms which\n  are non-POSIX must declare themselves so.  The default POSIX implementation\n  will sometimes work for non-POSIX platforms as well (e.g., the NaN-related\n  functions).\n  ---------------------------------------------------------------------------*/\n\n#if U_PLATFORM_USES_ONLY_WIN32_API || U_PLATFORM == U_PF_OS400\n#   undef U_POSIX_LOCALE\n#else\n#   define U_POSIX_LOCALE    1\n#endif\n\n/*\n    WARNING! u_topNBytesOfDouble and u_bottomNBytesOfDouble\n    can't be properly optimized by the gcc compiler sometimes (i.e. gcc 3.2).\n*/\n#if !IEEE_754\nstatic char*\nu_topNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)d;\n#else\n    return (char*)(d + 1) - n;\n#endif\n}\n\nstatic char*\nu_bottomNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)(d + 1) - n;\n#else\n    return (char*)d;\n#endif\n}\n#endif   /* !IEEE_754 */\n\n#if IEEE_754\nstatic UBool\nu_signBit(double d) {\n    uint8_t hiByte;\n#if U_IS_BIG_ENDIAN\n    hiByte = *(uint8_t *)&d;\n#else\n    hiByte = *(((uint8_t *)&d) + sizeof(double) - 1);\n#endif\n    return (hiByte & 0x80) != 0;\n}\n#endif\n\n\n\n#if defined (U_DEBUG_FAKETIME)\n/* Override the clock to test things without having to move the system clock.\n * Assumes POSIX gettimeofday() will function\n */\nUDate fakeClock_t0 = 0; /** Time to start the clock from **/\nUDate fakeClock_dt = 0; /** Offset (fake time - real time) **/\nUBool fakeClock_set = FALSE; /** True if fake clock has spun up **/\n\nstatic UDate getUTCtime_real() {\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n}\n\nstatic UDate getUTCtime_fake() {\n    static UMutex fakeClockMutex = U_MUTEX_INTIALIZER;\n    umtx_lock(&fakeClockMutex);\n    if(!fakeClock_set) {\n        UDate real = getUTCtime_real();\n        const char *fake_start = getenv(\"U_FAKETIME_START\");\n        if((fake_start!=NULL) && (fake_start[0]!=0)) {\n            sscanf(fake_start,\"%lf\",&fakeClock_t0);\n            fakeClock_dt = fakeClock_t0 - real;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, so the ICU clock will start at a preset value\\n\"\n                    \"env variable U_FAKETIME_START=%.0f (%s) for an offset of %.0f ms from the current time %.0f\\n\",\n                    fakeClock_t0, fake_start, fakeClock_dt, real);\n        } else {\n          fakeClock_dt = 0;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, but U_FAKETIME_START was not set.\\n\"\n                    \"Set U_FAKETIME_START to the number of milliseconds since 1/1/1970 to set the ICU clock.\\n\");\n        }\n        fakeClock_set = TRUE;\n    }\n    umtx_unlock(&fakeClockMutex);\n\n    return getUTCtime_real() + fakeClock_dt;\n}\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\ntypedef union {\n    int64_t int64;\n    FILETIME fileTime;\n} FileTimeConversion;   /* This is like a ULARGE_INTEGER */\n\n/* Number of 100 nanoseconds from 1/1/1601 to 1/1/1970 */\n#define EPOCH_BIAS  INT64_C(116444736000000000)\n#define HECTONANOSECOND_PER_MILLISECOND   10000\n\n#endif\n\n/*---------------------------------------------------------------------------\n  Universal Implementations\n  These are designed to work on all platforms.  Try these, and if they\n  don't work on your platform, then special case your platform with new\n  implementations.\n---------------------------------------------------------------------------*/\n\nU_CAPI UDate U_EXPORT2\nuprv_getUTCtime()\n{\n#if defined(U_DEBUG_FAKETIME)\n    return getUTCtime_fake(); /* Hook for overriding the clock */\n#else\n    return uprv_getRawUTCtime();\n#endif\n}\n\n/* Return UTC (GMT) time measured in milliseconds since 0:00 on 1/1/70.*/\nU_CAPI UDate U_EXPORT2\nuprv_getRawUTCtime()\n{\n#if U_PLATFORM_USES_ONLY_WIN32_API\n\n    FileTimeConversion winTime;\n    GetSystemTimeAsFileTime(&winTime.fileTime);\n    return (UDate)((winTime.int64 - EPOCH_BIAS) / HECTONANOSECOND_PER_MILLISECOND);\n#else\n\n#if HAVE_GETTIMEOFDAY\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n#else\n    time_t epochtime;\n    time(&epochtime);\n    return (UDate)epochtime * U_MILLIS_PER_SECOND;\n#endif\n\n#endif\n}\n\n/*-----------------------------------------------------------------------------\n  IEEE 754\n  These methods detect and return NaN and infinity values for doubles\n  conforming to IEEE 754.  Platforms which support this standard include X86,\n  Mac 680x0, Mac PowerPC, AIX RS/6000, and most others.\n  If this doesn't work on your platform, you have non-IEEE floating-point, and\n  will need to code your own versions.  A naive implementation is to return 0.0\n  for getNaN and getInfinity, and false for isNaN and isInfinite.\n  ---------------------------------------------------------------------------*/\n\nU_CAPI UBool U_EXPORT2\nuprv_isNaN(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is 0x7FF0000000000000U. Anything greater than that is a NaN */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) > gInf.i64);\n\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits & 0x7F080000L) == 0x7F080000L) &&\n      (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return number != number;\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isInfinite(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is exactly 0x7FF0000000000000U. */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) == gInf.i64);\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits  & ~SIGN) == 0x70FF0000L) && (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return number == (2.0 * number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isPositiveInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number > 0 && uprv_isInfinite(number));\n#else\n    return uprv_isInfinite(number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isNegativeInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number < 0 && uprv_isInfinite(number));\n\n#else\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    return((highBits & SIGN) && uprv_isInfinite(number));\n\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getNaN()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gNan.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getInfinity()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gInf.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_floor(double x)\n{\n    return floor(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_ceil(double x)\n{\n    return ceil(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_round(double x)\n{\n    return uprv_floor(x + 0.5);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fabs(double x)\n{\n    return fabs(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_modf(double x, double* y)\n{\n    return modf(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmod(double x, double y)\n{\n    return fmod(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow(double x, double y)\n{\n    /* This is declared as \"double pow(double x, double y)\" */\n    return pow(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow10(int32_t x)\n{\n    return pow(10.0, (double)x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmax(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(x))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? x : y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmin(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(y))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? y : x);\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_add32_overflow(int32_t a, int32_t b, int32_t* res) {\n    // NOTE: Some compilers (GCC, Clang) have primitives available, like __builtin_add_overflow.\n    // This function could be optimized by calling one of those primitives.\n    auto a64 = static_cast<int64_t>(a);\n    auto b64 = static_cast<int64_t>(b);\n    int64_t res64 = a64 + b64;\n    *res = static_cast<int32_t>(res64);\n    return res64 != *res;\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_mul32_overflow(int32_t a, int32_t b, int32_t* res) {\n    // NOTE: Some compilers (GCC, Clang) have primitives available, like __builtin_mul_overflow.\n    // This function could be optimized by calling one of those primitives.\n    auto a64 = static_cast<int64_t>(a);\n    auto b64 = static_cast<int64_t>(b);\n    int64_t res64 = a64 * b64;\n    *res = static_cast<int32_t>(res64);\n    return res64 != *res;\n}\n\n/**\n * Truncates the given double.\n * trunc(3.3) = 3.0, trunc (-3.3) = -3.0\n * This is different than calling floor() or ceil():\n * floor(3.3) = 3, floor(-3.3) = -4\n * ceil(3.3) = 4, ceil(-3.3) = -3\n */\nU_CAPI double U_EXPORT2\nuprv_trunc(double d)\n{\n#if IEEE_754\n    /* handle error cases*/\n    if(uprv_isNaN(d))\n        return uprv_getNaN();\n    if(uprv_isInfinite(d))\n        return uprv_getInfinity();\n\n    if(u_signBit(d))    /* Signbit() picks up -0.0;  d<0 does not. */\n        return ceil(d);\n    else\n        return floor(d);\n\n#else\n    return d >= 0 ? floor(d) : ceil(d);\n\n#endif\n}\n\n/**\n * Return the largest positive number that can be represented by an integer\n * type of arbitrary bit length.\n */\nU_CAPI double U_EXPORT2\nuprv_maxMantissa(void)\n{\n    return pow(2.0, DBL_MANT_DIG + 1.0) - 1.0;\n}\n\nU_CAPI double U_EXPORT2\nuprv_log(double d)\n{\n    return log(d);\n}\n\nU_CAPI void * U_EXPORT2\nuprv_maximumPtr(void * base)\n{\n#if U_PLATFORM == U_PF_OS400\n    /*\n     * With the provided function we should never be out of range of a given segment\n     * (a traditional/typical segment that is).  Our segments have 5 bytes for the\n     * id and 3 bytes for the offset.  The key is that the casting takes care of\n     * only retrieving the offset portion minus x1000.  Hence, the smallest offset\n     * seen in a program is x001000 and when casted to an int would be 0.\n     * That's why we can only add 0xffefff.  Otherwise, we would exceed the segment.\n     *\n     * Currently, 16MB is the current addressing limitation on i5/OS if the activation is\n     * non-TERASPACE.  If it is TERASPACE it is 2GB - 4k(header information).\n     * This function determines the activation based on the pointer that is passed in and\n     * calculates the appropriate maximum available size for\n     * each pointer type (TERASPACE and non-TERASPACE)\n     *\n     * Unlike other operating systems, the pointer model isn't determined at\n     * compile time on i5/OS.\n     */\n    if ((base != NULL) && (_TESTPTR(base, _C_TERASPACE_CHECK))) {\n        /* if it is a TERASPACE pointer the max is 2GB - 4k */\n        return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0x7fffefff)));\n    }\n    /* otherwise 16MB since NULL ptr is not checkable or the ptr is not TERASPACE */\n    return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0xffefff)));\n\n#else\n    return U_MAX_PTR(base);\n#endif\n}\n\n/*---------------------------------------------------------------------------\n  Platform-specific Implementations\n  Try these, and if they don't work on your platform, then special case your\n  platform with new implementations.\n  ---------------------------------------------------------------------------*/\n\n/* Generic time zone layer -------------------------------------------------- */\n\n/* Time zone utilities */\nU_CAPI void U_EXPORT2\nuprv_tzset()\n{\n#if defined(U_TZSET)\n    U_TZSET();\n#else\n    /* no initialization*/\n#endif\n}\n\nU_CAPI int32_t U_EXPORT2\nuprv_timezone()\n{\n#ifdef U_TIMEZONE\n    return U_TIMEZONE;\n#else\n    time_t t, t1, t2;\n    struct tm tmrec;\n    int32_t tdiff = 0;\n\n    time(&t);\n    uprv_memcpy( &tmrec, localtime(&t), sizeof(tmrec) );\n#if U_PLATFORM != U_PF_IPHONE\n    UBool dst_checked = (tmrec.tm_isdst != 0); /* daylight savings time is checked*/\n#endif\n    t1 = mktime(&tmrec);                 /* local time in seconds*/\n    uprv_memcpy( &tmrec, gmtime(&t), sizeof(tmrec) );\n    t2 = mktime(&tmrec);                 /* GMT (or UTC) in seconds*/\n    tdiff = t2 - t1;\n\n#if U_PLATFORM != U_PF_IPHONE\n    /* imitate NT behaviour, which returns same timezone offset to GMT for\n       winter and summer.\n       This does not work on all platforms. For instance, on glibc on Linux\n       and on Mac OS 10.5, tdiff calculated above remains the same\n       regardless of whether DST is in effect or not. iOS is another\n       platform where this does not work. Linux + glibc and Mac OS 10.5\n       have U_TIMEZONE defined so that this code is not reached.\n    */\n    if (dst_checked)\n        tdiff += 3600;\n#endif\n    return tdiff;\n#endif\n}\n\n/* Note that U_TZNAME does *not* have to be tzname, but if it is,\n   some platforms need to have it declared here. */\n\n#if defined(U_TZNAME) && (U_PLATFORM == U_PF_IRIX || U_PLATFORM_IS_DARWIN_BASED)\n/* RS6000 and others reject char **tzname.  */\nextern U_IMPORT char *U_TZNAME[];\n#endif\n\n#if !UCONFIG_NO_FILE_IO && ((U_PLATFORM_IS_DARWIN_BASED && (U_PLATFORM != U_PF_IPHONE || defined(U_TIMEZONE))) || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS)\n/* These platforms are likely to use Olson timezone IDs. */\n/* common targets of the symbolic link at TZDEFAULT are:\n * \"/usr/share/zoneinfo/<olsonID>\" default, older Linux distros, macOS to 10.12\n * \"../usr/share/zoneinfo/<olsonID>\" newer Linux distros: Red Hat Enterprise Linux 7, Ubuntu 16, SuSe Linux 12\n * \"/usr/share/lib/zoneinfo/<olsonID>\" Solaris\n * \"../usr/share/lib/zoneinfo/<olsonID>\" Solaris\n * \"/var/db/timezone/zoneinfo/<olsonID>\" macOS 10.13\n * To avoid checking lots of paths, just check that the target path\n * before the <olsonID> ends with \"/zoneinfo/\", and the <olsonID> is valid.\n */\n\n#define CHECK_LOCALTIME_LINK 1\n#if U_PLATFORM_IS_DARWIN_BASED\n#include <tzfile.h>\n#define TZZONEINFO      (TZDIR \"/\")\n#elif U_PLATFORM == U_PF_SOLARIS\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/lib/zoneinfo/\"\n#define TZ_ENV_CHECK    \"localtime\"\n#else\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/zoneinfo/\"\n#endif\n#define TZZONEINFOTAIL  \"/zoneinfo/\"\n#if U_HAVE_DIRENT_H\n#define TZFILE_SKIP     \"posixrules\" /* tz file to skip when searching. */\n/* Some Linux distributions have 'localtime' in /usr/share/zoneinfo\n   symlinked to /etc/localtime, which makes searchForTZFile return\n   'localtime' when it's the first match. */\n#define TZFILE_SKIP2    \"localtime\"\n#define SEARCH_TZFILE\n#include <dirent.h>  /* Needed to search through system timezone files */\n#endif\nstatic char gTimeZoneBuffer[PATH_MAX];\nstatic char *gTimeZoneBufferPtr = NULL;\n#endif\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#define isNonDigit(ch) (ch < '0' || '9' < ch)\nstatic UBool isValidOlsonID(const char *id) {\n    int32_t idx = 0;\n\n    /* Determine if this is something like Iceland (Olson ID)\n    or AST4ADT (non-Olson ID) */\n    while (id[idx] && isNonDigit(id[idx]) && id[idx] != ',') {\n        idx++;\n    }\n\n    /* If we went through the whole string, then it might be okay.\n    The timezone is sometimes set to \"CST-7CDT\", \"CST6CDT5,J129,J131/19:30\",\n    \"GRNLNDST3GRNLNDDT\" or similar, so we cannot use it.\n    The rest of the time it could be an Olson ID. George */\n    return (UBool)(id[idx] == 0\n        || uprv_strcmp(id, \"PST8PDT\") == 0\n        || uprv_strcmp(id, \"MST7MDT\") == 0\n        || uprv_strcmp(id, \"CST6CDT\") == 0\n        || uprv_strcmp(id, \"EST5EDT\") == 0);\n}\n\n/* On some Unix-like OS, 'posix' subdirectory in\n   /usr/share/zoneinfo replicates the top-level contents. 'right'\n   subdirectory has the same set of files, but individual files\n   are different from those in the top-level directory or 'posix'\n   because 'right' has files for TAI (Int'l Atomic Time) while 'posix'\n   has files for UTC.\n   When the first match for /etc/localtime is in either of them\n   (usually in posix because 'right' has different file contents),\n   or TZ environment variable points to one of them, createTimeZone\n   fails because, say, 'posix/America/New_York' is not an Olson\n   timezone id ('America/New_York' is). So, we have to skip\n   'posix/' and 'right/' at the beginning. */\nstatic void skipZoneIDPrefix(const char** id) {\n    if (uprv_strncmp(*id, \"posix/\", 6) == 0\n        || uprv_strncmp(*id, \"right/\", 6) == 0)\n    {\n        *id += 6;\n    }\n}\n#endif\n\n#if defined(U_TZNAME) && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#define CONVERT_HOURS_TO_SECONDS(offset) (int32_t)(offset*3600)\ntypedef struct OffsetZoneMapping {\n    int32_t offsetSeconds;\n    int32_t daylightType; /* 0=U_DAYLIGHT_NONE, 1=daylight in June-U_DAYLIGHT_JUNE, 2=daylight in December=U_DAYLIGHT_DECEMBER*/\n    const char *stdID;\n    const char *dstID;\n    const char *olsonID;\n} OffsetZoneMapping;\n\nenum { U_DAYLIGHT_NONE=0,U_DAYLIGHT_JUNE=1,U_DAYLIGHT_DECEMBER=2 };\n\n/*\nThis list tries to disambiguate a set of abbreviated timezone IDs and offsets\nand maps it to an Olson ID.\nBefore adding anything to this list, take a look at\nicu/source/tools/tzcode/tz.alias\nSometimes no daylight savings (0) is important to define due to aliases.\nThis list can be tested with icu/source/test/compat/tzone.pl\nMore values could be added to daylightType to increase precision.\n*/\nstatic const struct OffsetZoneMapping OFFSET_ZONE_MAPPINGS[] = {\n    {-45900, 2, \"CHAST\", \"CHADT\", \"Pacific/Chatham\"},\n    {-43200, 1, \"PETT\", \"PETST\", \"Asia/Kamchatka\"},\n    {-43200, 2, \"NZST\", \"NZDT\", \"Pacific/Auckland\"},\n    {-43200, 1, \"ANAT\", \"ANAST\", \"Asia/Anadyr\"},\n    {-39600, 1, \"MAGT\", \"MAGST\", \"Asia/Magadan\"},\n    {-37800, 2, \"LHST\", \"LHST\", \"Australia/Lord_Howe\"},\n    {-36000, 2, \"EST\", \"EST\", \"Australia/Sydney\"},\n    {-36000, 1, \"SAKT\", \"SAKST\", \"Asia/Sakhalin\"},\n    {-36000, 1, \"VLAT\", \"VLAST\", \"Asia/Vladivostok\"},\n    {-34200, 2, \"CST\", \"CST\", \"Australia/South\"},\n    {-32400, 1, \"YAKT\", \"YAKST\", \"Asia/Yakutsk\"},\n    {-32400, 1, \"CHOT\", \"CHOST\", \"Asia/Choibalsan\"},\n    {-31500, 2, \"CWST\", \"CWST\", \"Australia/Eucla\"},\n    {-28800, 1, \"IRKT\", \"IRKST\", \"Asia/Irkutsk\"},\n    {-28800, 1, \"ULAT\", \"ULAST\", \"Asia/Ulaanbaatar\"},\n    {-28800, 2, \"WST\", \"WST\", \"Australia/West\"},\n    {-25200, 1, \"HOVT\", \"HOVST\", \"Asia/Hovd\"},\n    {-25200, 1, \"KRAT\", \"KRAST\", \"Asia/Krasnoyarsk\"},\n    {-21600, 1, \"NOVT\", \"NOVST\", \"Asia/Novosibirsk\"},\n    {-21600, 1, \"OMST\", \"OMSST\", \"Asia/Omsk\"},\n    {-18000, 1, \"YEKT\", \"YEKST\", \"Asia/Yekaterinburg\"},\n    {-14400, 1, \"SAMT\", \"SAMST\", \"Europe/Samara\"},\n    {-14400, 1, \"AMT\", \"AMST\", \"Asia/Yerevan\"},\n    {-14400, 1, \"AZT\", \"AZST\", \"Asia/Baku\"},\n    {-10800, 1, \"AST\", \"ADT\", \"Asia/Baghdad\"},\n    {-10800, 1, \"MSK\", \"MSD\", \"Europe/Moscow\"},\n    {-10800, 1, \"VOLT\", \"VOLST\", \"Europe/Volgograd\"},\n    {-7200, 0, \"EET\", \"CEST\", \"Africa/Tripoli\"},\n    {-7200, 1, \"EET\", \"EEST\", \"Europe/Athens\"}, /* Conflicts with Africa/Cairo */\n    {-7200, 1, \"IST\", \"IDT\", \"Asia/Jerusalem\"},\n    {-3600, 0, \"CET\", \"WEST\", \"Africa/Algiers\"},\n    {-3600, 2, \"WAT\", \"WAST\", \"Africa/Windhoek\"},\n    {0, 1, \"GMT\", \"IST\", \"Europe/Dublin\"},\n    {0, 1, \"GMT\", \"BST\", \"Europe/London\"},\n    {0, 0, \"WET\", \"WEST\", \"Africa/Casablanca\"},\n    {0, 0, \"WET\", \"WET\", \"Africa/El_Aaiun\"},\n    {3600, 1, \"AZOT\", \"AZOST\", \"Atlantic/Azores\"},\n    {3600, 1, \"EGT\", \"EGST\", \"America/Scoresbysund\"},\n    {10800, 1, \"PMST\", \"PMDT\", \"America/Miquelon\"},\n    {10800, 2, \"UYT\", \"UYST\", \"America/Montevideo\"},\n    {10800, 1, \"WGT\", \"WGST\", \"America/Godthab\"},\n    {10800, 2, \"BRT\", \"BRST\", \"Brazil/East\"},\n    {12600, 1, \"NST\", \"NDT\", \"America/St_Johns\"},\n    {14400, 1, \"AST\", \"ADT\", \"Canada/Atlantic\"},\n    {14400, 2, \"AMT\", \"AMST\", \"America/Cuiaba\"},\n    {14400, 2, \"CLT\", \"CLST\", \"Chile/Continental\"},\n    {14400, 2, \"FKT\", \"FKST\", \"Atlantic/Stanley\"},\n    {14400, 2, \"PYT\", \"PYST\", \"America/Asuncion\"},\n    {18000, 1, \"CST\", \"CDT\", \"America/Havana\"},\n    {18000, 1, \"EST\", \"EDT\", \"US/Eastern\"}, /* Conflicts with America/Grand_Turk */\n    {21600, 2, \"EAST\", \"EASST\", \"Chile/EasterIsland\"},\n    {21600, 0, \"CST\", \"MDT\", \"Canada/Saskatchewan\"},\n    {21600, 0, \"CST\", \"CDT\", \"America/Guatemala\"},\n    {21600, 1, \"CST\", \"CDT\", \"US/Central\"}, /* Conflicts with Mexico/General */\n    {25200, 1, \"MST\", \"MDT\", \"US/Mountain\"}, /* Conflicts with Mexico/BajaSur */\n    {28800, 0, \"PST\", \"PST\", \"Pacific/Pitcairn\"},\n    {28800, 1, \"PST\", \"PDT\", \"US/Pacific\"}, /* Conflicts with Mexico/BajaNorte */\n    {32400, 1, \"AKST\", \"AKDT\", \"US/Alaska\"},\n    {36000, 1, \"HAST\", \"HADT\", \"US/Aleutian\"}\n};\n\n/*#define DEBUG_TZNAME*/\n\nstatic const char* remapShortTimeZone(const char *stdID, const char *dstID, int32_t daylightType, int32_t offset)\n{\n    int32_t idx;\n#ifdef DEBUG_TZNAME\n    fprintf(stderr, \"TZ=%s std=%s dst=%s daylight=%d offset=%d\\n\", getenv(\"TZ\"), stdID, dstID, daylightType, offset);\n#endif\n    for (idx = 0; idx < UPRV_LENGTHOF(OFFSET_ZONE_MAPPINGS); idx++)\n    {\n        if (offset == OFFSET_ZONE_MAPPINGS[idx].offsetSeconds\n            && daylightType == OFFSET_ZONE_MAPPINGS[idx].daylightType\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].stdID, stdID) == 0\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].dstID, dstID) == 0)\n        {\n            return OFFSET_ZONE_MAPPINGS[idx].olsonID;\n        }\n    }\n    return NULL;\n}\n#endif\n\n#ifdef SEARCH_TZFILE\n#define MAX_READ_SIZE 512\n\ntypedef struct DefaultTZInfo {\n    char* defaultTZBuffer;\n    int64_t defaultTZFileSize;\n    FILE* defaultTZFilePtr;\n    UBool defaultTZstatus;\n    int32_t defaultTZPosition;\n} DefaultTZInfo;\n\n/*\n * This method compares the two files given to see if they are a match.\n * It is currently use to compare two TZ files.\n */\nstatic UBool compareBinaryFiles(const char* defaultTZFileName, const char* TZFileName, DefaultTZInfo* tzInfo) {\n    FILE* file; \n    int64_t sizeFile;\n    int64_t sizeFileLeft;\n    int32_t sizeFileRead;\n    int32_t sizeFileToRead;\n    char bufferFile[MAX_READ_SIZE];\n    UBool result = TRUE;\n\n    if (tzInfo->defaultTZFilePtr == NULL) {\n        tzInfo->defaultTZFilePtr = fopen(defaultTZFileName, \"r\");\n    }\n    file = fopen(TZFileName, \"r\");\n\n    tzInfo->defaultTZPosition = 0; /* reset position to begin search */\n\n    if (file != NULL && tzInfo->defaultTZFilePtr != NULL) {\n        /* First check that the file size are equal. */\n        if (tzInfo->defaultTZFileSize == 0) {\n            fseek(tzInfo->defaultTZFilePtr, 0, SEEK_END);\n            tzInfo->defaultTZFileSize = ftell(tzInfo->defaultTZFilePtr);\n        }\n        fseek(file, 0, SEEK_END);\n        sizeFile = ftell(file);\n        sizeFileLeft = sizeFile;\n\n        if (sizeFile != tzInfo->defaultTZFileSize) {\n            result = FALSE;\n        } else {\n            /* Store the data from the files in seperate buffers and\n             * compare each byte to determine equality.\n             */\n            if (tzInfo->defaultTZBuffer == NULL) {\n                rewind(tzInfo->defaultTZFilePtr);\n                tzInfo->defaultTZBuffer = (char*)uprv_malloc(sizeof(char) * tzInfo->defaultTZFileSize);\n                sizeFileRead = fread(tzInfo->defaultTZBuffer, 1, tzInfo->defaultTZFileSize, tzInfo->defaultTZFilePtr);\n            }\n            rewind(file);\n            while(sizeFileLeft > 0) {\n                uprv_memset(bufferFile, 0, MAX_READ_SIZE);\n                sizeFileToRead = sizeFileLeft < MAX_READ_SIZE ? sizeFileLeft : MAX_READ_SIZE;\n\n                sizeFileRead = fread(bufferFile, 1, sizeFileToRead, file);\n                if (memcmp(tzInfo->defaultTZBuffer + tzInfo->defaultTZPosition, bufferFile, sizeFileRead) != 0) {\n                    result = FALSE;\n                    break;\n                }\n                sizeFileLeft -= sizeFileRead;\n                tzInfo->defaultTZPosition += sizeFileRead;\n            }\n        }\n    } else {\n        result = FALSE;\n    }\n\n    if (file != NULL) {\n        fclose(file);\n    }\n\n    return result;\n}\n\n\n/* dirent also lists two entries: \".\" and \"..\" that we can safely ignore. */\n#define SKIP1 \".\"\n#define SKIP2 \"..\"\nstatic UBool U_CALLCONV putil_cleanup(void);\nstatic CharString *gSearchTZFileResult = NULL;\n\n/*\n * This method recursively traverses the directory given for a matching TZ file and returns the first match.\n * This function is not thread safe - it uses a global, gSearchTZFileResult, to hold its results.\n */\nstatic char* searchForTZFile(const char* path, DefaultTZInfo* tzInfo) {\n    DIR* dirp = NULL;\n    struct dirent* dirEntry = NULL;\n    char* result = NULL;\n    UErrorCode status = U_ZERO_ERROR;\n\n    /* Save the current path */\n    CharString curpath(path, -1, status);\n    if (U_FAILURE(status)) {\n        goto cleanupAndReturn;\n    }\n\n    dirp = opendir(path);\n    if (dirp == NULL) {\n        goto cleanupAndReturn;\n    }\n\n    if (gSearchTZFileResult == NULL) {\n        gSearchTZFileResult = new CharString;\n        if (gSearchTZFileResult == NULL) {\n            goto cleanupAndReturn;\n        }\n        ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n    }\n\n    /* Check each entry in the directory. */\n    while((dirEntry = readdir(dirp)) != NULL) {\n        const char* dirName = dirEntry->d_name;\n        if (uprv_strcmp(dirName, SKIP1) != 0 && uprv_strcmp(dirName, SKIP2) != 0\n            && uprv_strcmp(TZFILE_SKIP, dirName) != 0 && uprv_strcmp(TZFILE_SKIP2, dirName) != 0) {\n            /* Create a newpath with the new entry to test each entry in the directory. */\n            CharString newpath(curpath, status);\n            newpath.append(dirName, -1, status);\n            if (U_FAILURE(status)) {\n                break;\n            }\n\n            DIR* subDirp = NULL;\n            if ((subDirp = opendir(newpath.data())) != NULL) {\n                /* If this new path is a directory, make a recursive call with the newpath. */\n                closedir(subDirp);\n                newpath.append('/', status);\n                if (U_FAILURE(status)) {\n                    break;\n                }\n                result = searchForTZFile(newpath.data(), tzInfo);\n                /*\n                 Have to get out here. Otherwise, we'd keep looking\n                 and return the first match in the top-level directory\n                 if there's a match in the top-level. If not, this function\n                 would return NULL and set gTimeZoneBufferPtr to NULL in initDefault().\n                 It worked without this in most cases because we have a fallback of calling\n                 localtime_r to figure out the default timezone.\n                */\n                if (result != NULL)\n                    break;\n            } else {\n                if(compareBinaryFiles(TZDEFAULT, newpath.data(), tzInfo)) {\n                    int32_t amountToSkip = sizeof(TZZONEINFO) - 1;\n                    if (amountToSkip > newpath.length()) {\n                        amountToSkip = newpath.length();\n                    }\n                    const char* zoneid = newpath.data() + amountToSkip;\n                    skipZoneIDPrefix(&zoneid);\n                    gSearchTZFileResult->clear();\n                    gSearchTZFileResult->append(zoneid, -1, status);\n                    if (U_FAILURE(status)) {\n                        break;\n                    }\n                    result = gSearchTZFileResult->data();\n                    /* Get out after the first one found. */\n                    break;\n                }\n            }\n        }\n    }\n\n  cleanupAndReturn:\n    if (dirp) {\n        closedir(dirp);\n    }\n    return result;\n}\n#endif\n\nU_CAPI void U_EXPORT2\nuprv_tzname_clear_cache()\n{\n#if defined(CHECK_LOCALTIME_LINK) && !defined(DEBUG_SKIP_LOCALTIME_LINK)\n    gTimeZoneBufferPtr = NULL;\n#endif\n}\n\nU_CAPI const char* U_EXPORT2\nuprv_tzname(int n)\n{\n    (void)n; // Avoid unreferenced parameter warning.\n    const char *tzid = NULL;\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    tzid = uprv_detectWindowsTimeZone();\n\n    if (tzid != NULL) {\n        return tzid;\n    }\n\n#ifndef U_TZNAME\n    // The return value is free'd in timezone.cpp on Windows because\n    // the other code path returns a pointer to a heap location.\n    // If we don't have a name already, then tzname wouldn't be any\n    // better, so just fall back.\n    return uprv_strdup(\"\");\n#endif // !U_TZNAME\n\n#else\n\n/*#if U_PLATFORM_IS_DARWIN_BASED\n    int ret;\n\n    tzid = getenv(\"TZFILE\");\n    if (tzid != NULL) {\n        return tzid;\n    }\n#endif*/\n\n/* This code can be temporarily disabled to test tzname resolution later on. */\n#ifndef DEBUG_TZNAME\n    tzid = getenv(\"TZ\");\n    if (tzid != NULL && isValidOlsonID(tzid)\n#if U_PLATFORM == U_PF_SOLARIS\n    /* When TZ equals localtime on Solaris, check the /etc/localtime file. */\n        && uprv_strcmp(tzid, TZ_ENV_CHECK) != 0\n#endif\n    ) {\n        /* The colon forces tzset() to treat the remainder as zoneinfo path */ \n        if (tzid[0] == ':') { \n            tzid++; \n        } \n        /* This might be a good Olson ID. */\n        skipZoneIDPrefix(&tzid);\n        return tzid;\n    }\n    /* else U_TZNAME will give a better result. */\n#endif\n\n#if defined(CHECK_LOCALTIME_LINK) && !defined(DEBUG_SKIP_LOCALTIME_LINK)\n    /* Caller must handle threading issues */\n    if (gTimeZoneBufferPtr == NULL) {\n        /*\n        This is a trick to look at the name of the link to get the Olson ID\n        because the tzfile contents is underspecified.\n        This isn't guaranteed to work because it may not be a symlink.\n        */\n        int32_t ret = (int32_t)readlink(TZDEFAULT, gTimeZoneBuffer, sizeof(gTimeZoneBuffer)-1);\n        if (0 < ret) {\n            int32_t tzZoneInfoTailLen = uprv_strlen(TZZONEINFOTAIL);\n            gTimeZoneBuffer[ret] = 0;\n            char *  tzZoneInfoTailPtr = uprv_strstr(gTimeZoneBuffer, TZZONEINFOTAIL);\n            \n            if (tzZoneInfoTailPtr != NULL\n                && isValidOlsonID(tzZoneInfoTailPtr + tzZoneInfoTailLen))\n            {\n                return (gTimeZoneBufferPtr = tzZoneInfoTailPtr + tzZoneInfoTailLen);\n            }\n        } else {\n#if defined(SEARCH_TZFILE)\n            DefaultTZInfo* tzInfo = (DefaultTZInfo*)uprv_malloc(sizeof(DefaultTZInfo));\n            if (tzInfo != NULL) {\n                tzInfo->defaultTZBuffer = NULL;\n                tzInfo->defaultTZFileSize = 0;\n                tzInfo->defaultTZFilePtr = NULL;\n                tzInfo->defaultTZstatus = FALSE;\n                tzInfo->defaultTZPosition = 0;\n\n                gTimeZoneBufferPtr = searchForTZFile(TZZONEINFO, tzInfo);\n\n                /* Free previously allocated memory */\n                if (tzInfo->defaultTZBuffer != NULL) {\n                    uprv_free(tzInfo->defaultTZBuffer);\n                }\n                if (tzInfo->defaultTZFilePtr != NULL) {\n                    fclose(tzInfo->defaultTZFilePtr);\n                }\n                uprv_free(tzInfo);\n            }\n\n            if (gTimeZoneBufferPtr != NULL && isValidOlsonID(gTimeZoneBufferPtr)) {\n                return gTimeZoneBufferPtr;\n            }\n#endif\n        }\n    }\n    else {\n        return gTimeZoneBufferPtr;\n    }\n#endif\n#endif\n\n#ifdef U_TZNAME\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /* The return value is free'd in timezone.cpp on Windows because\n     * the other code path returns a pointer to a heap location. */\n    return uprv_strdup(U_TZNAME[n]);\n#else\n    /*\n    U_TZNAME is usually a non-unique abbreviation, which isn't normally usable.\n    So we remap the abbreviation to an olson ID.\n\n    Since Windows exposes a little more timezone information,\n    we normally don't use this code on Windows because\n    uprv_detectWindowsTimeZone should have already given the correct answer.\n    */\n    {\n        struct tm juneSol, decemberSol;\n        int daylightType;\n        static const time_t juneSolstice=1182478260; /*2007-06-21 18:11 UT*/\n        static const time_t decemberSolstice=1198332540; /*2007-12-22 06:09 UT*/\n\n        /* This probing will tell us when daylight savings occurs.  */\n        localtime_r(&juneSolstice, &juneSol);\n        localtime_r(&decemberSolstice, &decemberSol);\n        if(decemberSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_DECEMBER;\n        } else if(juneSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_JUNE;\n        } else {\n          daylightType = U_DAYLIGHT_NONE;\n        }\n        tzid = remapShortTimeZone(U_TZNAME[0], U_TZNAME[1], daylightType, uprv_timezone());\n        if (tzid != NULL) {\n            return tzid;\n        }\n    }\n    return U_TZNAME[n];\n#endif\n#else\n    return \"\";\n#endif\n}\n\n/* Get and set the ICU data directory --------------------------------------- */\n\nstatic icu::UInitOnce gDataDirInitOnce = U_INITONCE_INITIALIZER;\nstatic char *gDataDirectory = NULL;\n\nUInitOnce gTimeZoneFilesInitOnce = U_INITONCE_INITIALIZER;\nstatic CharString *gTimeZoneFilesDirectory = NULL;\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n static const char *gCorrectedPOSIXLocale = NULL; /* Sometimes heap allocated */\n static bool gCorrectedPOSIXLocaleHeapAllocated = false;\n#endif\n\nstatic UBool U_CALLCONV putil_cleanup(void)\n{\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = NULL;\n    gDataDirInitOnce.reset();\n\n    delete gTimeZoneFilesDirectory;\n    gTimeZoneFilesDirectory = NULL;\n    gTimeZoneFilesInitOnce.reset();\n\n#ifdef SEARCH_TZFILE\n    delete gSearchTZFileResult;\n    gSearchTZFileResult = NULL;\n#endif\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n    if (gCorrectedPOSIXLocale && gCorrectedPOSIXLocaleHeapAllocated) {\n        uprv_free(const_cast<char *>(gCorrectedPOSIXLocale));\n        gCorrectedPOSIXLocale = NULL;\n        gCorrectedPOSIXLocaleHeapAllocated = false;\n    }\n#endif\n    return TRUE;\n}\n\n/*\n * Set the data directory.\n *    Make a copy of the passed string, and set the global data dir to point to it.\n */\nU_CAPI void U_EXPORT2\nu_setDataDirectory(const char *directory) {\n    char *newDataDir;\n    int32_t length;\n\n    if(directory==NULL || *directory==0) {\n        /* A small optimization to prevent the malloc and copy when the\n        shared library is used, and this is a way to make sure that NULL\n        is never returned.\n        */\n        newDataDir = (char *)\"\";\n    }\n    else {\n        length=(int32_t)uprv_strlen(directory);\n        newDataDir = (char *)uprv_malloc(length + 2);\n        /* Exit out if newDataDir could not be created. */\n        if (newDataDir == NULL) {\n            return;\n        }\n        uprv_strcpy(newDataDir, directory);\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n        {\n            char *p;\n            while((p = uprv_strchr(newDataDir, U_FILE_ALT_SEP_CHAR)) != NULL) {\n                *p = U_FILE_SEP_CHAR;\n            }\n        }\n#endif\n    }\n\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = newDataDir;\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_pathIsAbsolute(const char *path)\n{\n  if(!path || !*path) {\n    return FALSE;\n  }\n\n  if(*path == U_FILE_SEP_CHAR) {\n    return TRUE;\n  }\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n  if(*path == U_FILE_ALT_SEP_CHAR) {\n    return TRUE;\n  }\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\n  if( (((path[0] >= 'A') && (path[0] <= 'Z')) ||\n       ((path[0] >= 'a') && (path[0] <= 'z'))) &&\n      path[1] == ':' ) {\n    return TRUE;\n  }\n#endif\n\n  return FALSE;\n}\n\n/* Backup setting of ICU_DATA_DIR_PREFIX_ENV_VAR\n   (needed for some Darwin ICU build environments) */\n#if U_PLATFORM_IS_DARWIN_BASED && TARGET_OS_SIMULATOR\n# if !defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n#  define ICU_DATA_DIR_PREFIX_ENV_VAR \"IPHONE_SIMULATOR_ROOT\"\n# endif\n#endif\n\n#if U_PLATFORM_HAS_WINUWP_API != 0\n// Helper function to get the ICU Data Directory under the Windows directory location.\nstatic BOOL U_CALLCONV getIcuDataDirectoryUnderWindowsDirectory(char* directoryBuffer, UINT bufferLength)\n{\n#if defined(ICU_DATA_DIR_WINDOWS)\n    wchar_t windowsPath[MAX_PATH];\n    char windowsPathUtf8[MAX_PATH];\n\n    UINT length = GetSystemWindowsDirectoryW(windowsPath, UPRV_LENGTHOF(windowsPath));\n    if ((length > 0) && (length < (UPRV_LENGTHOF(windowsPath) - 1))) {\n        // Convert UTF-16 to a UTF-8 string.\n        UErrorCode status = U_ZERO_ERROR;\n        int32_t windowsPathUtf8Len = 0;\n        u_strToUTF8(windowsPathUtf8, static_cast<int32_t>(UPRV_LENGTHOF(windowsPathUtf8)),\n            &windowsPathUtf8Len, reinterpret_cast<const UChar*>(windowsPath), -1, &status);\n\n        if (U_SUCCESS(status) && (status != U_STRING_NOT_TERMINATED_WARNING) &&\n            (windowsPathUtf8Len < (UPRV_LENGTHOF(windowsPathUtf8) - 1))) {\n            // Ensure it always has a separator, so we can append the ICU data path.\n            if (windowsPathUtf8[windowsPathUtf8Len - 1] != U_FILE_SEP_CHAR) {\n                windowsPathUtf8[windowsPathUtf8Len++] = U_FILE_SEP_CHAR;\n                windowsPathUtf8[windowsPathUtf8Len] = '\\0';\n            }\n            // Check if the concatenated string will fit.\n            if ((windowsPathUtf8Len + UPRV_LENGTHOF(ICU_DATA_DIR_WINDOWS)) < bufferLength) {\n                uprv_strcpy(directoryBuffer, windowsPathUtf8);\n                uprv_strcat(directoryBuffer, ICU_DATA_DIR_WINDOWS);\n                return TRUE;\n            }\n        }\n    }\n#endif\n\n    return FALSE;\n}\n#endif\n\nstatic void U_CALLCONV dataDirectoryInitFn() {\n    /* If we already have the directory, then return immediately. Will happen if user called\n     * u_setDataDirectory().\n     */\n    if (gDataDirectory) {\n        return;\n    }\n\n    const char *path = NULL;\n#if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n    char datadir_path_buffer[PATH_MAX];\n#endif\n\n    /*\n    When ICU_NO_USER_DATA_OVERRIDE is defined, users aren't allowed to\n    override ICU's data with the ICU_DATA environment variable. This prevents\n    problems where multiple custom copies of ICU's specific version of data\n    are installed on a system. Either the application must define the data\n    directory with u_setDataDirectory, define ICU_DATA_DIR when compiling\n    ICU, set the data with udata_setCommonData or trust that all of the\n    required data is contained in ICU's data library that contains\n    the entry point defined by U_ICUDATA_ENTRY_POINT.\n\n    There may also be some platforms where environment variables\n    are not allowed.\n    */\n#   if !defined(ICU_NO_USER_DATA_OVERRIDE) && !UCONFIG_NO_FILE_IO\n    /* First try to get the environment variable */\n#       if U_PLATFORM_HAS_WINUWP_API == 0  // Windows UWP does not support getenv\n        path=getenv(\"ICU_DATA\");\n#       endif\n#   endif\n\n    /* ICU_DATA_DIR may be set as a compile option.\n     * U_ICU_DATA_DEFAULT_DIR is provided and is set by ICU at compile time\n     * and is used only when data is built in archive mode eliminating the need\n     * for ICU_DATA_DIR to be set. U_ICU_DATA_DEFAULT_DIR is set to the installation\n     * directory of the data dat file. Users should use ICU_DATA_DIR if they want to\n     * set their own path.\n     */\n#if defined(ICU_DATA_DIR) || defined(U_ICU_DATA_DEFAULT_DIR)\n    if(path==NULL || *path==0) {\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        const char *prefix = getenv(ICU_DATA_DIR_PREFIX_ENV_VAR);\n# endif\n# ifdef ICU_DATA_DIR\n        path=ICU_DATA_DIR;\n# else\n        path=U_ICU_DATA_DEFAULT_DIR;\n# endif\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        if (prefix != NULL) {\n            snprintf(datadir_path_buffer, PATH_MAX, \"%s%s\", prefix, path);\n            path=datadir_path_buffer;\n        }\n# endif\n    }\n#endif\n\n#if U_PLATFORM_HAS_WINUWP_API != 0  && defined(ICU_DATA_DIR_WINDOWS)\n    char datadir_path_buffer[MAX_PATH];\n    if (getIcuDataDirectoryUnderWindowsDirectory(datadir_path_buffer, UPRV_LENGTHOF(datadir_path_buffer))) {\n        path = datadir_path_buffer;\n    }\n#endif\n\n    if(path==NULL) {\n        /* It looks really bad, set it to something. */\n        path = \"\";\n    }\n\n    u_setDataDirectory(path);\n    return;\n}\n\nU_CAPI const char * U_EXPORT2\nu_getDataDirectory(void) {\n    umtx_initOnce(gDataDirInitOnce, &dataDirectoryInitFn);\n    return gDataDirectory;\n}\n\nstatic void setTimeZoneFilesDir(const char *path, UErrorCode &status) {\n    if (U_FAILURE(status)) {\n        return;\n    }\n    gTimeZoneFilesDirectory->clear();\n    gTimeZoneFilesDirectory->append(path, status);\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n    char *p = gTimeZoneFilesDirectory->data();\n    while ((p = uprv_strchr(p, U_FILE_ALT_SEP_CHAR)) != NULL) {\n        *p = U_FILE_SEP_CHAR;\n    }\n#endif\n}\n\n#define TO_STRING(x) TO_STRING_2(x) \n#define TO_STRING_2(x) #x\n\nstatic void U_CALLCONV TimeZoneDataDirInitFn(UErrorCode &status) {\n    U_ASSERT(gTimeZoneFilesDirectory == NULL);\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n    gTimeZoneFilesDirectory = new CharString();\n    if (gTimeZoneFilesDirectory == NULL) {\n        status = U_MEMORY_ALLOCATION_ERROR;\n        return;\n    }\n\n    const char *dir = \"\";\n\n#if U_PLATFORM_HAS_WINUWP_API != 0\n    // The UWP version does not support the environment variable setting, but can possibly pick them up from the Windows directory.\n    char datadir_path_buffer[MAX_PATH];\n    if (getIcuDataDirectoryUnderWindowsDirectory(datadir_path_buffer, UPRV_LENGTHOF(datadir_path_buffer))) {\n        dir = datadir_path_buffer;\n    }\n#else\n    dir = getenv(\"ICU_TIMEZONE_FILES_DIR\");\n#endif // U_PLATFORM_HAS_WINUWP_API\n\n#if defined(U_TIMEZONE_FILES_DIR)\n    if (dir == NULL) {\n        // Build time configuration setting.\n        dir = TO_STRING(U_TIMEZONE_FILES_DIR);\n    }\n#endif\n\n    if (dir == NULL) {\n        dir = \"\";\n    }\n\n    setTimeZoneFilesDir(dir, status);\n}\n\n\nU_CAPI const char * U_EXPORT2\nu_getTimeZoneFilesDirectory(UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    return U_SUCCESS(*status) ? gTimeZoneFilesDirectory->data() : \"\";\n}\n\nU_CAPI void U_EXPORT2\nu_setTimeZoneFilesDirectory(const char *path, UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    setTimeZoneFilesDir(path, *status);\n\n    // Note: this function does some extra churn, first setting based on the\n    //       environment, then immediately replacing with the value passed in.\n    //       The logic is simpler that way, and performance shouldn't be an issue.\n}\n\n\n#if U_POSIX_LOCALE\n/* A helper function used by uprv_getPOSIXIDForDefaultLocale and\n * uprv_getPOSIXIDForDefaultCodepage. Returns the posix locale id for\n * LC_CTYPE and LC_MESSAGES. It doesn't support other locale categories.\n */\nstatic const char *uprv_getPOSIXIDForCategory(int category)\n{\n    const char* posixID = NULL;\n    if (category == LC_MESSAGES || category == LC_CTYPE) {\n        /*\n        * On Solaris two different calls to setlocale can result in\n        * different values. Only get this value once.\n        *\n        * We must check this first because an application can set this.\n        *\n        * LC_ALL can't be used because it's platform dependent. The LANG\n        * environment variable seems to affect LC_CTYPE variable by default.\n        * Here is what setlocale(LC_ALL, NULL) can return.\n        * HPUX can return 'C C C C C C C'\n        * Solaris can return /en_US/C/C/C/C/C on the second try.\n        * Linux can return LC_CTYPE=C;LC_NUMERIC=C;...\n        *\n        * The default codepage detection also needs to use LC_CTYPE.\n        *\n        * Do not call setlocale(LC_*, \"\")! Using an empty string instead\n        * of NULL, will modify the libc behavior.\n        */\n        posixID = setlocale(category, NULL);\n        if ((posixID == 0)\n            || (uprv_strcmp(\"C\", posixID) == 0)\n            || (uprv_strcmp(\"POSIX\", posixID) == 0))\n        {\n            /* Maybe we got some garbage.  Try something more reasonable */\n            posixID = getenv(\"LC_ALL\");\n            /* Solaris speaks POSIX -  See IEEE Std 1003.1-2008 \n             * This is needed to properly handle empty env. variables\n             */\n#if U_PLATFORM == U_PF_SOLARIS\n            if ((posixID == 0) || (posixID[0] == '\\0')) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if ((posixID == 0) || (posixID[0] == '\\0')) {\n#else\n            if (posixID == 0) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if (posixID == 0) {\n#endif                    \n                    posixID = getenv(\"LANG\");\n                }\n            }\n        }\n    }\n    if ((posixID==0)\n        || (uprv_strcmp(\"C\", posixID) == 0)\n        || (uprv_strcmp(\"POSIX\", posixID) == 0))\n    {\n        /* Nothing worked.  Give it a nice POSIX default value. */\n        posixID = \"en_US_POSIX\";\n    }\n    return posixID;\n}\n\n/* Return just the POSIX id for the default locale, whatever happens to be in\n * it. It gets the value from LC_MESSAGES and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultLocale(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_MESSAGES);\n    }\n    return posixID;\n}\n\n#if !U_CHARSET_IS_UTF8\n/* Return just the POSIX id for the default codepage, whatever happens to be in\n * it. It gets the value from LC_CTYPE and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultCodepage(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_CTYPE);\n    }\n    return posixID;\n}\n#endif\n#endif\n\n/* NOTE: The caller should handle thread safety */\nU_CAPI const char* U_EXPORT2\nuprv_getDefaultLocaleID()\n{\n#if U_POSIX_LOCALE\n/*\n  Note that:  (a '!' means the ID is improper somehow)\n     LC_ALL  ---->     default_loc          codepage\n--------------------------------------------------------\n     ab.CD             ab                   CD\n     ab@CD             ab__CD               -\n     ab@CD.EF          ab__CD               EF\n\n     ab_CD.EF@GH       ab_CD_GH             EF\n\nSome 'improper' ways to do the same as above:\n  !  ab_CD@GH.EF       ab_CD_GH             EF\n  !  ab_CD.EF@GH.IJ    ab_CD_GH             EF\n  !  ab_CD@ZZ.EF@GH.IJ ab_CD_GH             EF\n\n     _CD@GH            _CD_GH               -\n     _CD.EF@GH         _CD_GH               EF\n\nThe variant cannot have dots in it.\nThe 'rightmost' variant (@xxx) wins.\nThe leftmost codepage (.xxx) wins.\n*/\n    const char* posixID = uprv_getPOSIXIDForDefaultLocale();\n\n    /* Format: (no spaces)\n    ll [ _CC ] [ . MM ] [ @ VV]\n\n      l = lang, C = ctry, M = charmap, V = variant\n    */\n\n    if (gCorrectedPOSIXLocale != nullptr) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    // Copy the ID into owned memory.\n    // Over-allocate in case we replace \"@\" with \"__\".\n    char *correctedPOSIXLocale = static_cast<char *>(uprv_malloc(uprv_strlen(posixID) + 1 + 1));\n    if (correctedPOSIXLocale == nullptr) {\n        return nullptr;\n    }\n    uprv_strcpy(correctedPOSIXLocale, posixID);\n\n    char *limit;\n    if ((limit = uprv_strchr(correctedPOSIXLocale, '.')) != nullptr) {\n        *limit = 0;\n        if ((limit = uprv_strchr(correctedPOSIXLocale, '@')) != nullptr) {\n            *limit = 0;\n        }\n    }\n\n    /* Note that we scan the *uncorrected* ID. */\n    const char *p;\n    if ((p = uprv_strrchr(posixID, '@')) != nullptr) {\n        p++;\n\n        /* Take care of any special cases here.. */\n        if (!uprv_strcmp(p, \"nynorsk\")) {\n            p = \"NY\";\n            /* Don't worry about no__NY. In practice, it won't appear. */\n        }\n\n        if (uprv_strchr(correctedPOSIXLocale,'_') == nullptr) {\n            uprv_strcat(correctedPOSIXLocale, \"__\"); /* aa@b -> aa__b (note this can make the new locale 1 char longer) */\n        }\n        else {\n            uprv_strcat(correctedPOSIXLocale, \"_\"); /* aa_CC@b -> aa_CC_b */\n        }\n\n        const char *q;\n        if ((q = uprv_strchr(p, '.')) != nullptr) {\n            /* How big will the resulting string be? */\n            int32_t len = (int32_t)(uprv_strlen(correctedPOSIXLocale) + (q-p));\n            uprv_strncat(correctedPOSIXLocale, p, q-p);\n            correctedPOSIXLocale[len] = 0;\n        }\n        else {\n            /* Anything following the @ sign */\n            uprv_strcat(correctedPOSIXLocale, p);\n        }\n\n        /* Should there be a map from 'no@nynorsk' -> no_NO_NY here?\n         * How about 'russian' -> 'ru'?\n         * Many of the other locales using ISO codes will be handled by the\n         * canonicalization functions in uloc_getDefault.\n         */\n    }\n\n    if (gCorrectedPOSIXLocale == nullptr) {\n        gCorrectedPOSIXLocale = correctedPOSIXLocale;\n        gCorrectedPOSIXLocaleHeapAllocated = true;\n        ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n        correctedPOSIXLocale = nullptr;\n    }\n    posixID = gCorrectedPOSIXLocale;\n\n    if (correctedPOSIXLocale != nullptr) {  /* Was already set - clean up. */\n        uprv_free(correctedPOSIXLocale);\n    }\n\n    return posixID;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#define POSIX_LOCALE_CAPACITY 64\n    UErrorCode status = U_ZERO_ERROR;\n    char *correctedPOSIXLocale = nullptr;\n\n    // If we have already figured this out just use the cached value\n    if (gCorrectedPOSIXLocale != nullptr) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    // No cached value, need to determine the current value\n    static WCHAR windowsLocale[LOCALE_NAME_MAX_LENGTH] = {};\n    int length = GetLocaleInfoEx(LOCALE_NAME_USER_DEFAULT, LOCALE_SNAME, windowsLocale, LOCALE_NAME_MAX_LENGTH);\n\n    // Now we should have a Windows locale name that needs converted to the POSIX style.\n    if (length > 0) // If length is 0, then the GetLocaleInfoEx failed.\n    {\n        // First we need to go from UTF-16 to char (and also convert from _ to - while we're at it.)\n        char modifiedWindowsLocale[LOCALE_NAME_MAX_LENGTH] = {};\n\n        int32_t i;\n        for (i = 0; i < UPRV_LENGTHOF(modifiedWindowsLocale); i++)\n        {\n            if (windowsLocale[i] == '_')\n            {\n                modifiedWindowsLocale[i] = '-';\n            }\n            else\n            {\n                modifiedWindowsLocale[i] = static_cast<char>(windowsLocale[i]);\n            }\n\n            if (modifiedWindowsLocale[i] == '\\0')\n            {\n                break;\n            }\n        }\n\n        if (i >= UPRV_LENGTHOF(modifiedWindowsLocale))\n        {\n            // Ran out of room, can't really happen, maybe we'll be lucky about a matching\n            // locale when tags are dropped\n            modifiedWindowsLocale[UPRV_LENGTHOF(modifiedWindowsLocale) - 1] = '\\0';\n        }\n\n        // Now normalize the resulting name\n        correctedPOSIXLocale = static_cast<char *>(uprv_malloc(POSIX_LOCALE_CAPACITY + 1));\n        /* TODO: Should we just exit on memory allocation failure? */\n        if (correctedPOSIXLocale)\n        {\n            int32_t posixLen = uloc_canonicalize(modifiedWindowsLocale, correctedPOSIXLocale, POSIX_LOCALE_CAPACITY, &status);\n            if (U_SUCCESS(status))\n            {\n                *(correctedPOSIXLocale + posixLen) = 0;\n                gCorrectedPOSIXLocale = correctedPOSIXLocale;\n                gCorrectedPOSIXLocaleHeapAllocated = true;\n                ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n            }\n            else\n            {\n                uprv_free(correctedPOSIXLocale);\n            }\n        }\n    }\n\n    // If unable to find a locale we can agree upon, use en-US by default\n    if (gCorrectedPOSIXLocale == nullptr) {\n        gCorrectedPOSIXLocale = \"en_US\";\n    }\n    return gCorrectedPOSIXLocale;\n\n#elif U_PLATFORM == U_PF_OS400\n    /* locales are process scoped and are by definition thread safe */\n    static char correctedLocale[64];\n    const  char *localeID = getenv(\"LC_ALL\");\n           char *p;\n\n    if (localeID == NULL)\n        localeID = getenv(\"LANG\");\n    if (localeID == NULL)\n        localeID = setlocale(LC_ALL, NULL);\n    /* Make sure we have something... */\n    if (localeID == NULL)\n        return \"en_US_POSIX\";\n\n    /* Extract the locale name from the path. */\n    if((p = uprv_strrchr(localeID, '/')) != NULL)\n    {\n        /* Increment p to start of locale name. */\n        p++;\n        localeID = p;\n    }\n\n    /* Copy to work location. */\n    uprv_strcpy(correctedLocale, localeID);\n\n    /* Strip off the '.locale' extension. */\n    if((p = uprv_strchr(correctedLocale, '.')) != NULL) {\n        *p = 0;\n    }\n\n    /* Upper case the locale name. */\n    T_CString_toUpperCase(correctedLocale);\n\n    /* See if we are using the POSIX locale.  Any of the\n    * following are equivalent and use the same QLGPGCMA\n    * (POSIX) locale.\n    * QLGPGCMA2 means UCS2\n    * QLGPGCMA_4 means UTF-32\n    * QLGPGCMA_8 means UTF-8\n    */\n    if ((uprv_strcmp(\"C\", correctedLocale) == 0) ||\n        (uprv_strcmp(\"POSIX\", correctedLocale) == 0) ||\n        (uprv_strncmp(\"QLGPGCMA\", correctedLocale, 8) == 0))\n    {\n        uprv_strcpy(correctedLocale, \"en_US_POSIX\");\n    }\n    else\n    {\n        int16_t LocaleLen;\n\n        /* Lower case the lang portion. */\n        for(p = correctedLocale; *p != 0 && *p != '_'; p++)\n        {\n            *p = uprv_tolower(*p);\n        }\n\n        /* Adjust for Euro.  After '_E' add 'URO'. */\n        LocaleLen = uprv_strlen(correctedLocale);\n        if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'E')\n        {\n            uprv_strcat(correctedLocale, \"URO\");\n        }\n\n        /* If using Lotus-based locale then convert to\n         * equivalent non Lotus.\n         */\n        else if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'L')\n        {\n            correctedLocale[LocaleLen - 2] = 0;\n        }\n\n        /* There are separate simplified and traditional\n         * locales called zh_HK_S and zh_HK_T.\n         */\n        else if (uprv_strncmp(correctedLocale, \"zh_HK\", 5) == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_HK\");\n        }\n\n        /* A special zh_CN_GBK locale...\n        */\n        else if (uprv_strcmp(correctedLocale, \"zh_CN_GBK\") == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_CN\");\n        }\n\n    }\n\n    return correctedLocale;\n#endif\n\n}\n\n#if !U_CHARSET_IS_UTF8\n#if U_POSIX_LOCALE\n/*\nDue to various platform differences, one platform may specify a charset,\nwhen they really mean a different charset. Remap the names so that they are\ncompatible with ICU. Only conflicting/ambiguous aliases should be resolved\nhere. Before adding anything to this function, please consider adding unique\nnames to the ICU alias table in the data directory.\n*/\nstatic const char*\nremapPlatformDependentCodepage(const char *locale, const char *name) {\n    if (locale != NULL && *locale == 0) {\n        /* Make sure that an empty locale is handled the same way. */\n        locale = NULL;\n    }\n    if (name == NULL) {\n        return NULL;\n    }\n#if U_PLATFORM == U_PF_AIX\n    if (uprv_strcmp(name, \"IBM-943\") == 0) {\n        /* Use the ASCII compatible ibm-943 */\n        name = \"Shift-JIS\";\n    }\n    else if (uprv_strcmp(name, \"IBM-1252\") == 0) {\n        /* Use the windows-1252 that contains the Euro */\n        name = \"IBM-5348\";\n    }\n#elif U_PLATFORM == U_PF_SOLARIS\n    if (locale != NULL && uprv_strcmp(name, \"EUC\") == 0) {\n        /* Solaris underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"zh_CN\") == 0) {\n            name = \"EUC-CN\";\n        }\n        else if (uprv_strcmp(locale, \"zh_TW\") == 0) {\n            name = \"EUC-TW\";\n        }\n        else if (uprv_strcmp(locale, \"ko_KR\") == 0) {\n            name = \"EUC-KR\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-954 is the best match.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (uprv_strcmp(name, \"646\") == 0) {\n        /*\n         * The default codepage given by Solaris is 646 but the C library routines treat it as if it was\n         * ISO-8859-1 instead of US-ASCII(646).\n         */\n        name = \"ISO-8859-1\";\n    }\n#elif U_PLATFORM_IS_DARWIN_BASED\n    if (locale == NULL && *name == 0) {\n        /*\n        No locale was specified, and an empty name was passed in.\n        This usually indicates that nl_langinfo didn't return valid information.\n        Mac OS X uses UTF-8 by default (especially the locale data and console).\n        */\n        name = \"UTF-8\";\n    }\n    else if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 && uprv_strcmp(name, \"US-ASCII\") == 0) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n#elif U_PLATFORM == U_PF_BSD\n    if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n#elif U_PLATFORM == U_PF_HPUX\n    if (locale != NULL && uprv_strcmp(locale, \"zh_HK\") == 0 && uprv_strcmp(name, \"big5\") == 0) {\n        /* HP decided to extend big5 as hkbig5 even though it's not compatible :-( */\n        /* zh_TW.big5 is not the same charset as zh_HK.big5! */\n        name = \"hkbig5\";\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n#elif U_PLATFORM == U_PF_LINUX\n    if (locale != NULL && uprv_strcmp(name, \"euc\") == 0) {\n        /* Linux underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"korean\") == 0) {\n            name = \"EUC-KR\";\n        }\n        else if (uprv_strcmp(locale, \"japanese\") == 0) {\n            /* See comment below about eucJP */\n            name = \"eucjis\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucjp\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 &&\n            (uprv_strcmp(name, \"ANSI_X3.4-1968\") == 0 || uprv_strcmp(name, \"US-ASCII\") == 0)) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n    /*\n     * Linux returns ANSI_X3.4-1968 for C/POSIX, but the call site takes care of\n     * it by falling back to 'US-ASCII' when NULL is returned from this\n     * function. So, we don't have to worry about it here.\n     */\n#endif\n    /* return NULL when \"\" is passed in */\n    if (*name == 0) {\n        name = NULL;\n    }\n    return name;\n}\n\nstatic const char*\ngetCodepageFromPOSIXID(const char *localeName, char * buffer, int32_t buffCapacity)\n{\n    char localeBuf[100];\n    const char *name = NULL;\n    char *variant = NULL;\n\n    if (localeName != NULL && (name = (uprv_strchr(localeName, '.'))) != NULL) {\n        size_t localeCapacity = uprv_min(sizeof(localeBuf), (name-localeName)+1);\n        uprv_strncpy(localeBuf, localeName, localeCapacity);\n        localeBuf[localeCapacity-1] = 0; /* ensure NULL termination */\n        name = uprv_strncpy(buffer, name+1, buffCapacity);\n        buffer[buffCapacity-1] = 0; /* ensure NULL termination */\n        if ((variant = const_cast<char *>(uprv_strchr(name, '@'))) != NULL) {\n            *variant = 0;\n        }\n        name = remapPlatformDependentCodepage(localeBuf, name);\n    }\n    return name;\n}\n#endif\n\nstatic const char*\nint_getDefaultCodepage()\n{\n#if U_PLATFORM == U_PF_OS400\n    uint32_t ccsid = 37; /* Default to ibm-37 */\n    static char codepage[64];\n    Qwc_JOBI0400_t jobinfo;\n    Qus_EC_t error = { sizeof(Qus_EC_t) }; /* SPI error code */\n\n    EPT_CALL(QUSRJOBI)(&jobinfo, sizeof(jobinfo), \"JOBI0400\",\n        \"*                         \", \"                \", &error);\n\n    if (error.Bytes_Available == 0) {\n        if (jobinfo.Coded_Char_Set_ID != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Coded_Char_Set_ID;\n        }\n        else if (jobinfo.Default_Coded_Char_Set_Id != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Default_Coded_Char_Set_Id;\n        }\n        /* else use the default */\n    }\n    sprintf(codepage,\"ibm-%d\", ccsid);\n    return codepage;\n\n#elif U_PLATFORM == U_PF_OS390\n    static char codepage[64];\n\n    strncpy(codepage, nl_langinfo(CODESET),63-strlen(UCNV_SWAP_LFNL_OPTION_STRING));\n    strcat(codepage,UCNV_SWAP_LFNL_OPTION_STRING);\n    codepage[63] = 0; /* NULL terminate */\n\n    return codepage;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    static char codepage[64];\n    DWORD codepageNumber = 0;\n\n#if U_PLATFORM_HAS_WINUWP_API > 0\n    // UWP doesn't have a direct API to get the default ACP as Microsoft would rather\n    // have folks use Unicode than a \"system\" code page, however this is the same\n    // codepage as the system default locale codepage.  (FWIW, the system locale is\n    // ONLY used for codepage, it should never be used for anything else)\n    GetLocaleInfoEx(LOCALE_NAME_SYSTEM_DEFAULT, LOCALE_IDEFAULTANSICODEPAGE | LOCALE_RETURN_NUMBER,\n        (LPWSTR)&codepageNumber, sizeof(codepageNumber) / sizeof(WCHAR));\n#else\n    // Win32 apps can call GetACP\n    codepageNumber = GetACP();\n#endif\n    // Special case for UTF-8\n    if (codepageNumber == 65001)\n    { \n        return \"UTF-8\";\n    }\n    // Windows codepages can look like windows-1252, so format the found number\n    // the numbers are eclectic, however all valid system code pages, besides UTF-8\n    // are between 3 and 19999\n    if (codepageNumber > 0 && codepageNumber < 20000)\n    {\n        sprintf(codepage, \"windows-%ld\", codepageNumber);\n        return codepage;\n    }\n    // If the codepage number call failed then return UTF-8\n    return \"UTF-8\";\n\n#elif U_POSIX_LOCALE\n    static char codesetName[100];\n    const char *localeName = NULL;\n    const char *name = NULL;\n\n    localeName = uprv_getPOSIXIDForDefaultCodepage();\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    /* On Solaris nl_langinfo returns C locale values unless setlocale\n     * was called earlier.\n     */\n#if (U_HAVE_NL_LANGINFO_CODESET && U_PLATFORM != U_PF_SOLARIS)\n    /* When available, check nl_langinfo first because it usually gives more\n       useful names. It depends on LC_CTYPE.\n       nl_langinfo may use the same buffer as setlocale. */\n    {\n        const char *codeset = nl_langinfo(U_NL_LANGINFO_CODESET);\n#if U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED\n        /*\n         * On Linux and MacOSX, ensure that default codepage for non C/POSIX locale is UTF-8\n         * instead of ASCII.\n         */\n        if (uprv_strcmp(localeName, \"en_US_POSIX\") != 0) {\n            codeset = remapPlatformDependentCodepage(localeName, codeset);\n        } else\n#endif\n        {\n            codeset = remapPlatformDependentCodepage(NULL, codeset);\n        }\n\n        if (codeset != NULL) {\n            uprv_strncpy(codesetName, codeset, sizeof(codesetName));\n            codesetName[sizeof(codesetName)-1] = 0;\n            return codesetName;\n        }\n    }\n#endif\n\n    /* Use setlocale in a nice way, and then check some environment variables.\n       Maybe the application used setlocale already.\n    */\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    name = getCodepageFromPOSIXID(localeName, codesetName, sizeof(codesetName));\n    if (name) {\n        /* if we can find the codeset name from setlocale, return that. */\n        return name;\n    }\n\n    if (*codesetName == 0)\n    {\n        /* Everything failed. Return US ASCII (ISO 646). */\n        (void)uprv_strcpy(codesetName, \"US-ASCII\");\n    }\n    return codesetName;\n#else\n    return \"US-ASCII\";\n#endif\n}\n\n\nU_CAPI const char*  U_EXPORT2\nuprv_getDefaultCodepage()\n{\n    static char const  *name = NULL;\n    umtx_lock(NULL);\n    if (name == NULL) {\n        name = int_getDefaultCodepage();\n    }\n    umtx_unlock(NULL);\n    return name;\n}\n#endif  /* !U_CHARSET_IS_UTF8 */\n\n\n/* end of platform-specific implementation -------------- */\n\n/* version handling --------------------------------------------------------- */\n\nU_CAPI void U_EXPORT2\nu_versionFromString(UVersionInfo versionArray, const char *versionString) {\n    char *end;\n    uint16_t part=0;\n\n    if(versionArray==NULL) {\n        return;\n    }\n\n    if(versionString!=NULL) {\n        for(;;) {\n            versionArray[part]=(uint8_t)uprv_strtoul(versionString, &end, 10);\n            if(end==versionString || ++part==U_MAX_VERSION_LENGTH || *end!=U_VERSION_DELIMITER) {\n                break;\n            }\n            versionString=end+1;\n        }\n    }\n\n    while(part<U_MAX_VERSION_LENGTH) {\n        versionArray[part++]=0;\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionFromUString(UVersionInfo versionArray, const UChar *versionString) {\n    if(versionArray!=NULL && versionString!=NULL) {\n        char versionChars[U_MAX_VERSION_STRING_LENGTH+1];\n        int32_t len = u_strlen(versionString);\n        if(len>U_MAX_VERSION_STRING_LENGTH) {\n            len = U_MAX_VERSION_STRING_LENGTH;\n        }\n        u_UCharsToChars(versionString, versionChars, len);\n        versionChars[len]=0;\n        u_versionFromString(versionArray, versionChars);\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionToString(const UVersionInfo versionArray, char *versionString) {\n    uint16_t count, part;\n    uint8_t field;\n\n    if(versionString==NULL) {\n        return;\n    }\n\n    if(versionArray==NULL) {\n        versionString[0]=0;\n        return;\n    }\n\n    /* count how many fields need to be written */\n    for(count=4; count>0 && versionArray[count-1]==0; --count) {\n    }\n\n    if(count <= 1) {\n        count = 2;\n    }\n\n    /* write the first part */\n    /* write the decimal field value */\n    field=versionArray[0];\n    if(field>=100) {\n        *versionString++=(char)('0'+field/100);\n        field%=100;\n    }\n    if(field>=10) {\n        *versionString++=(char)('0'+field/10);\n        field%=10;\n    }\n    *versionString++=(char)('0'+field);\n\n    /* write the following parts */\n    for(part=1; part<count; ++part) {\n        /* write a dot first */\n        *versionString++=U_VERSION_DELIMITER;\n\n        /* write the decimal field value */\n        field=versionArray[part];\n        if(field>=100) {\n            *versionString++=(char)('0'+field/100);\n            field%=100;\n        }\n        if(field>=10) {\n            *versionString++=(char)('0'+field/10);\n            field%=10;\n        }\n        *versionString++=(char)('0'+field);\n    }\n\n    /* NUL-terminate */\n    *versionString=0;\n}\n\nU_CAPI void U_EXPORT2\nu_getVersion(UVersionInfo versionArray) {\n    (void)copyright;   // Suppress unused variable warning from clang.\n    u_versionFromString(versionArray, U_ICU_VERSION);\n}\n\n/**\n * icucfg.h dependent code \n */\n\n#if U_ENABLE_DYLOAD && HAVE_DLOPEN && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#if HAVE_DLFCN_H\n#ifdef __MVS__\n#ifndef __SUSV3\n#define __SUSV3 1\n#endif\n#endif\n#include <dlfcn.h>\n#endif /* HAVE_DLFCN_H */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  void *ret = NULL;\n  if(U_FAILURE(*status)) return ret;\n  ret =  dlopen(libName, RTLD_NOW|RTLD_GLOBAL);\n  if(ret==NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlopen(%s): %s\\n\", libName, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return ret;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  if(U_FAILURE(*status)) return;\n  dlclose(lib);\n}\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  union {\n      UVoidFunction *fp;\n      void *vp;\n  } uret;\n  uret.fp = NULL;\n  if(U_FAILURE(*status)) return uret.fp;\n  uret.vp = dlsym(lib, sym);\n  if(uret.vp == NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlsym(%p,%s): %s\\n\", lib,sym, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return uret.fp;\n}\n\n#elif U_ENABLE_DYLOAD && U_PLATFORM_USES_ONLY_WIN32_API && !U_PLATFORM_HAS_WINUWP_API\n\n/* Windows API implementation. */\n// Note: UWP does not expose/allow these APIs, so the UWP version gets the null implementation. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  HMODULE lib = NULL;\n  \n  if(U_FAILURE(*status)) return NULL;\n  \n  lib = LoadLibraryA(libName);\n  \n  if(lib==NULL) {\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  \n  return (void*)lib;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  if(U_FAILURE(*status)) return;\n  \n  FreeLibrary(handle);\n  \n  return;\n}\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  UVoidFunction* addr = NULL;\n  \n  if(U_FAILURE(*status) || lib==NULL) return NULL;\n  \n  addr = (UVoidFunction*)GetProcAddress(handle, sym);\n  \n  if(addr==NULL) {\n    DWORD lastError = GetLastError();\n    if(lastError == ERROR_PROC_NOT_FOUND) {\n      *status = U_MISSING_RESOURCE_ERROR;\n    } else {\n      *status = U_UNSUPPORTED_ERROR; /* other unknown error. */\n    }\n  }\n  \n  return addr;\n}\n\n#else\n\n/* No dynamic loading, null (nonexistent) implementation. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n    (void)libName;\n    if(U_FAILURE(*status)) return NULL;\n    *status = U_UNSUPPORTED_ERROR;\n    return NULL;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n    (void)lib;\n    if(U_FAILURE(*status)) return;\n    *status = U_UNSUPPORTED_ERROR;\n    return;\n}\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  (void)lib;\n  (void)sym;\n  if(U_SUCCESS(*status)) {\n    *status = U_UNSUPPORTED_ERROR;\n  }\n  return (UVoidFunction*)NULL;\n}\n\n#endif\n\n/*\n * Hey, Emacs, please set the following:\n *\n * Local Variables:\n * indent-tabs-mode: nil\n * End:\n *\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/common/icuplug.cpp": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 2009-2015, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : icuplug.c\n*\n*   Date         Name        Description\n*   10/29/2009   sl          New.\n******************************************************************************\n*/\n\n#include \"unicode/icuplug.h\"\n\n\n#if UCONFIG_ENABLE_PLUGINS\n\n\n#include \"icuplugimp.h\"\n#include \"cstring.h\"\n#include \"cmemory.h\"\n#include \"putilimp.h\"\n#include \"ucln.h\"\n#include <stdio.h>\n#ifdef __MVS__  /* defined by z/OS compiler */\n#define _POSIX_SOURCE\n#include <cics.h> /* 12 Nov 2011 JAM iscics() function */\n#endif\n#include \"charstr.h\"\n\nusing namespace icu;\n\n#ifndef UPLUG_TRACE\n#define UPLUG_TRACE 0\n#endif\n\n#if UPLUG_TRACE\n#include <stdio.h>\n#define DBG(x) fprintf(stderr, \"%s:%d: \",__FILE__,__LINE__); fprintf x\n#endif\n\n/**\n * Internal structure of an ICU plugin. \n */\n\nstruct UPlugData {\n  UPlugEntrypoint  *entrypoint; /**< plugin entrypoint */\n  uint32_t structSize;    /**< initialized to the size of this structure */\n  uint32_t token;         /**< must be U_PLUG_TOKEN */\n  void *lib;              /**< plugin library, or NULL */\n  char libName[UPLUG_NAME_MAX];   /**< library name */\n  char sym[UPLUG_NAME_MAX];        /**< plugin symbol, or NULL */\n  char config[UPLUG_NAME_MAX];     /**< configuration data */\n  void *context;          /**< user context data */\n  char name[UPLUG_NAME_MAX];   /**< name of plugin */\n  UPlugLevel  level; /**< level of plugin */\n  UBool   awaitingLoad; /**< TRUE if the plugin is awaiting a load call */\n  UBool   dontUnload; /**< TRUE if plugin must stay resident (leak plugin and lib) */\n  UErrorCode pluginStatus; /**< status code of plugin */\n};\n\n\n\n#define UPLUG_LIBRARY_INITIAL_COUNT 8\n#define UPLUG_PLUGIN_INITIAL_COUNT 12\n\n/**\n * Remove an item\n * @param list the full list\n * @param listSize the number of entries in the list\n * @param memberSize the size of one member\n * @param itemToRemove the item number of the member\n * @return the new listsize \n */\nstatic int32_t uplug_removeEntryAt(void *list, int32_t listSize, int32_t memberSize, int32_t itemToRemove) {\n  uint8_t *bytePtr = (uint8_t *)list;\n    \n  /* get rid of some bad cases first */\n  if(listSize<1) {\n    return listSize;\n  }\n    \n  /* is there anything to move? */\n  if(listSize > itemToRemove+1) {\n    memmove(bytePtr+(itemToRemove*memberSize), bytePtr+((itemToRemove+1)*memberSize), memberSize);\n  }\n    \n  return listSize-1;\n}\n\n\n\n\n#if U_ENABLE_DYLOAD\n/**\n * Library management. Internal. \n * @internal\n */\nstruct UPlugLibrary;\n\n/**\n * Library management. Internal. \n * @internal\n */\ntypedef struct UPlugLibrary {\n  void *lib;                           /**< library ptr */\n  char name[UPLUG_NAME_MAX]; /**< library name */\n  uint32_t ref;                        /**< reference count */\n} UPlugLibrary;\n\nstatic UPlugLibrary   staticLibraryList[UPLUG_LIBRARY_INITIAL_COUNT];\nstatic UPlugLibrary * libraryList = staticLibraryList;\nstatic int32_t libraryCount = 0;\nstatic int32_t libraryMax = UPLUG_LIBRARY_INITIAL_COUNT;\n\n/**\n * Search for a library. Doesn't lock\n * @param libName libname to search for\n * @return the library's struct\n */\nstatic int32_t searchForLibraryName(const char *libName) {\n  int32_t i;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(!uprv_strcmp(libName, libraryList[i].name)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nstatic int32_t searchForLibrary(void *lib) {\n  int32_t i;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(lib==libraryList[i].lib) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nU_INTERNAL char * U_EXPORT2\nuplug_findLibrary(void *lib, UErrorCode *status) {\n  int32_t libEnt;\n  char *ret = NULL;\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n  libEnt = searchForLibrary(lib);\n  if(libEnt!=-1) { \n    ret = libraryList[libEnt].name;\n  } else {\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return ret;\n}\n\nU_INTERNAL void * U_EXPORT2\nuplug_openLibrary(const char *libName, UErrorCode *status) {\n  int32_t libEntry = -1;\n  void *lib = NULL;\n    \n  if(U_FAILURE(*status)) return NULL;\n\n  libEntry = searchForLibraryName(libName);\n  if(libEntry == -1) {\n    libEntry = libraryCount++;\n    if(libraryCount >= libraryMax) {\n      /* Ran out of library slots. Statically allocated because we can't depend on allocating memory.. */\n      *status = U_MEMORY_ALLOCATION_ERROR;\n#if UPLUG_TRACE\n      DBG((stderr, \"uplug_openLibrary() - out of library slots (max %d)\\n\", libraryMax));\n#endif\n      return NULL;\n    }\n    /* Some operating systems don't want \n       DL operations from multiple threads. */\n    libraryList[libEntry].lib = uprv_dl_open(libName, status);\n#if UPLUG_TRACE\n    DBG((stderr, \"uplug_openLibrary(%s,%s) libEntry %d, lib %p\\n\", libName, u_errorName(*status), libEntry, lib));\n#endif\n        \n    if(libraryList[libEntry].lib == NULL || U_FAILURE(*status)) {\n      /* cleanup. */\n      libraryList[libEntry].lib = NULL; /* failure with open */\n      libraryList[libEntry].name[0] = 0;\n#if UPLUG_TRACE\n      DBG((stderr, \"uplug_openLibrary(%s,%s) libEntry %d, lib %p\\n\", libName, u_errorName(*status), libEntry, lib));\n#endif\n      /* no need to free - just won't increase the count. */\n      libraryCount--;\n    } else { /* is it still there? */\n      /* link it in */\n      uprv_strncpy(libraryList[libEntry].name,libName,UPLUG_NAME_MAX);\n      libraryList[libEntry].ref=1;\n      lib = libraryList[libEntry].lib;\n    }\n\n  } else {\n    lib = libraryList[libEntry].lib;\n    libraryList[libEntry].ref++;\n  }\n  return lib;\n}\n\nU_INTERNAL void U_EXPORT2\nuplug_closeLibrary(void *lib, UErrorCode *status) {\n  int32_t i;\n    \n#if UPLUG_TRACE\n  DBG((stderr, \"uplug_closeLibrary(%p,%s) list %p\\n\", lib, u_errorName(*status), (void*)libraryList));\n#endif\n  if(U_FAILURE(*status)) return;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(lib==libraryList[i].lib) {\n      if(--(libraryList[i].ref) == 0) {\n        uprv_dl_close(libraryList[i].lib, status);\n        libraryCount = uplug_removeEntryAt(libraryList, libraryCount, sizeof(*libraryList), i);\n      }\n      return;\n    }\n  }\n  *status = U_INTERNAL_PROGRAM_ERROR; /* could not find the entry! */\n}\n\n#endif\n\nstatic UPlugData pluginList[UPLUG_PLUGIN_INITIAL_COUNT];\nstatic int32_t pluginCount = 0;\n\n\n\n  \nstatic int32_t uplug_pluginNumber(UPlugData* d) {\n  UPlugData *pastPlug = &pluginList[pluginCount];\n  if(d<=pluginList) {\n    return 0;\n  } else if(d>=pastPlug) {\n    return pluginCount;\n  } else {\n    return (d-pluginList)/sizeof(pluginList[0]);\n  }\n}\n\n\nU_CAPI UPlugData * U_EXPORT2\nuplug_nextPlug(UPlugData *prior) {\n  if(prior==NULL) {\n    return pluginList;\n  } else {\n    UPlugData *nextPlug = &prior[1];\n    UPlugData *pastPlug = &pluginList[pluginCount];\n    \n    if(nextPlug>=pastPlug) {\n      return NULL;\n    } else {\n      return nextPlug;\n    }\n  }\n}\n\n\n\n/**\n * Call the plugin with some params\n */\nstatic void uplug_callPlug(UPlugData *plug, UPlugReason reason, UErrorCode *status) {\n  UPlugTokenReturn token;\n  if(plug==NULL||U_FAILURE(*status)) {\n    return;\n  }\n  token = (*(plug->entrypoint))(plug, reason, status);\n  if(token!=UPLUG_TOKEN) {\n    *status = U_INTERNAL_PROGRAM_ERROR;\n  }\n}\n\n\nstatic void uplug_unloadPlug(UPlugData *plug, UErrorCode *status) {\n  if(plug->awaitingLoad) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return; \n  }\n  if(U_SUCCESS(plug->pluginStatus)) {\n    /* Don't unload a plug which has a failing load status - means it didn't actually load. */\n    uplug_callPlug(plug, UPLUG_REASON_UNLOAD, status);\n  }\n}\n\nstatic void uplug_queryPlug(UPlugData *plug, UErrorCode *status) {\n  if(!plug->awaitingLoad || !(plug->level == UPLUG_LEVEL_UNKNOWN) ) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return; \n  }\n  plug->level = UPLUG_LEVEL_INVALID;\n  uplug_callPlug(plug, UPLUG_REASON_QUERY, status);\n  if(U_SUCCESS(*status)) { \n    if(plug->level == UPLUG_LEVEL_INVALID) {\n      plug->pluginStatus = U_PLUGIN_DIDNT_SET_LEVEL;\n      plug->awaitingLoad = FALSE;\n    }\n  } else {\n    plug->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n    plug->awaitingLoad = FALSE;\n  }\n}\n\n\nstatic void uplug_loadPlug(UPlugData *plug, UErrorCode *status) {\n  if(U_FAILURE(*status)) {\n    return;\n  }\n  if(!plug->awaitingLoad || (plug->level < UPLUG_LEVEL_LOW) ) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return;\n  }\n  uplug_callPlug(plug, UPLUG_REASON_LOAD, status);\n  plug->awaitingLoad = FALSE;\n  if(!U_SUCCESS(*status)) {\n    plug->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n  }\n}\n\nstatic UPlugData *uplug_allocateEmptyPlug(UErrorCode *status)\n{\n  UPlugData *plug = NULL;\n\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n\n  if(pluginCount == UPLUG_PLUGIN_INITIAL_COUNT) {\n    *status = U_MEMORY_ALLOCATION_ERROR;\n    return NULL;\n  }\n\n  plug = &pluginList[pluginCount++];\n\n  plug->token = UPLUG_TOKEN;\n  plug->structSize = sizeof(UPlugData);\n  plug->name[0]=0;\n  plug->level = UPLUG_LEVEL_UNKNOWN; /* initialize to null state */\n  plug->awaitingLoad = TRUE;\n  plug->dontUnload = FALSE;\n  plug->pluginStatus = U_ZERO_ERROR;\n  plug->libName[0] = 0;\n  plug->config[0]=0;\n  plug->sym[0]=0;\n  plug->lib=NULL;\n  plug->entrypoint=NULL;\n\n\n  return plug;\n}\n\nstatic UPlugData *uplug_allocatePlug(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *symName,\n                                     UErrorCode *status) {\n  UPlugData *plug = uplug_allocateEmptyPlug(status);\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n\n  if(config!=NULL) {\n    uprv_strncpy(plug->config, config, UPLUG_NAME_MAX);\n  } else {\n    plug->config[0] = 0;\n  }\n    \n  if(symName!=NULL) {\n    uprv_strncpy(plug->sym, symName, UPLUG_NAME_MAX);\n  } else {\n    plug->sym[0] = 0;\n  }\n    \n  plug->entrypoint = entrypoint;\n  plug->lib = lib;\n  uplug_queryPlug(plug, status);\n    \n  return plug;\n}\n\nstatic void uplug_deallocatePlug(UPlugData *plug, UErrorCode *status) {\n  UErrorCode subStatus = U_ZERO_ERROR;\n  if(!plug->dontUnload) {\n#if U_ENABLE_DYLOAD\n    uplug_closeLibrary(plug->lib, &subStatus);\n#endif\n  }\n  plug->lib = NULL;\n  if(U_SUCCESS(*status) && U_FAILURE(subStatus)) {\n    *status = subStatus;\n  }\n  /* shift plugins up and decrement count. */\n  if(U_SUCCESS(*status)) {\n    /* all ok- remove. */\n    pluginCount = uplug_removeEntryAt(pluginList, pluginCount, sizeof(plug[0]), uplug_pluginNumber(plug));\n  } else {\n    /* not ok- leave as a message. */\n    plug->awaitingLoad=FALSE;\n    plug->entrypoint=0;\n    plug->dontUnload=TRUE;\n  }\n}\n\nstatic void uplug_doUnloadPlug(UPlugData *plugToRemove, UErrorCode *status) {\n  if(plugToRemove != NULL) {\n    uplug_unloadPlug(plugToRemove, status);\n    uplug_deallocatePlug(plugToRemove, status);\n  }\n}\n\nU_CAPI void U_EXPORT2\nuplug_removePlug(UPlugData *plug, UErrorCode *status)  {\n  UPlugData *cursor = NULL;\n  UPlugData *plugToRemove = NULL;\n  if(U_FAILURE(*status)) return;\n    \n  for(cursor=pluginList;cursor!=NULL;) {\n    if(cursor==plug) {\n      plugToRemove = plug;\n      cursor=NULL;\n    } else {\n      cursor = uplug_nextPlug(cursor);\n    }\n  }\n    \n  uplug_doUnloadPlug(plugToRemove, status);\n}\n\n\n\n\nU_CAPI void U_EXPORT2 \nuplug_setPlugNoUnload(UPlugData *data, UBool dontUnload)\n{\n  data->dontUnload = dontUnload;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setPlugLevel(UPlugData *data, UPlugLevel level) {\n  data->level = level;\n}\n\n\nU_CAPI UPlugLevel U_EXPORT2\nuplug_getPlugLevel(UPlugData *data) {\n  return data->level;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setPlugName(UPlugData *data, const char *name) {\n  uprv_strncpy(data->name, name, UPLUG_NAME_MAX);\n}\n\n\nU_CAPI const char * U_EXPORT2\nuplug_getPlugName(UPlugData *data) {\n  return data->name;\n}\n\n\nU_CAPI const char * U_EXPORT2\nuplug_getSymbolName(UPlugData *data) {\n  return data->sym;\n}\n\nU_CAPI const char * U_EXPORT2\nuplug_getLibraryName(UPlugData *data, UErrorCode *status) {\n  if(data->libName[0]) {\n    return data->libName;\n  } else {\n#if U_ENABLE_DYLOAD\n    return uplug_findLibrary(data->lib, status);\n#else\n    return NULL;\n#endif\n  }\n}\n\nU_CAPI void * U_EXPORT2\nuplug_getLibrary(UPlugData *data) {\n  return data->lib;\n}\n\nU_CAPI void * U_EXPORT2\nuplug_getContext(UPlugData *data) {\n  return data->context;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setContext(UPlugData *data, void *context) {\n  data->context = context;\n}\n\nU_CAPI const char* U_EXPORT2\nuplug_getConfiguration(UPlugData *data) {\n  return data->config;\n}\n\nU_INTERNAL UPlugData* U_EXPORT2\nuplug_getPlugInternal(int32_t n) { \n  if(n <0 || n >= pluginCount) {\n    return NULL;\n  } else { \n    return &(pluginList[n]);\n  }\n}\n\n\nU_CAPI UErrorCode U_EXPORT2\nuplug_getPlugLoadStatus(UPlugData *plug) {\n  return plug->pluginStatus;\n}\n\n\n\n\n/**\n * Initialize a plugin fron an entrypoint and library - but don't load it.\n */\nstatic UPlugData* uplug_initPlugFromEntrypointAndLibrary(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *sym,\n                                                         UErrorCode *status) {\n  UPlugData *plug = NULL;\n\n  plug = uplug_allocatePlug(entrypoint, config, lib, sym, status);\n\n  if(U_SUCCESS(*status)) {\n    return plug;\n  } else {\n    uplug_deallocatePlug(plug, status);\n    return NULL;\n  }\n}\n\nU_CAPI UPlugData* U_EXPORT2\nuplug_loadPlugFromEntrypoint(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status) {\n  UPlugData* plug = uplug_initPlugFromEntrypointAndLibrary(entrypoint, config, NULL, NULL, status);\n  uplug_loadPlug(plug, status);\n  return plug;\n}\n\n#if U_ENABLE_DYLOAD\n\nstatic UPlugData* \nuplug_initErrorPlug(const char *libName, const char *sym, const char *config, const char *nameOrError, UErrorCode loadStatus, UErrorCode *status)\n{\n  UPlugData *plug = uplug_allocateEmptyPlug(status);\n  if(U_FAILURE(*status)) return NULL;\n\n  plug->pluginStatus = loadStatus;\n  plug->awaitingLoad = FALSE; /* Won't load. */\n  plug->dontUnload = TRUE; /* cannot unload. */\n\n  if(sym!=NULL) {\n    uprv_strncpy(plug->sym, sym, UPLUG_NAME_MAX);\n  }\n\n  if(libName!=NULL) {\n    uprv_strncpy(plug->libName, libName, UPLUG_NAME_MAX);\n  }\n\n  if(nameOrError!=NULL) {\n    uprv_strncpy(plug->name, nameOrError, UPLUG_NAME_MAX);\n  }\n\n  if(config!=NULL) {\n    uprv_strncpy(plug->config, config, UPLUG_NAME_MAX);\n  }\n\n  return plug;\n}\n\n/**\n * Fetch a plugin from DLL, and then initialize it from a library- but don't load it.\n */\nstatic UPlugData* \nuplug_initPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) {\n  void *lib = NULL;\n  UPlugData *plug = NULL;\n  if(U_FAILURE(*status)) { return NULL; }\n  lib = uplug_openLibrary(libName, status);\n  if(lib!=NULL && U_SUCCESS(*status)) {\n    UPlugEntrypoint *entrypoint = NULL;\n    entrypoint = (UPlugEntrypoint*)uprv_dlsym_func(lib, sym, status);\n\n    if(entrypoint!=NULL&&U_SUCCESS(*status)) {\n      plug = uplug_initPlugFromEntrypointAndLibrary(entrypoint, config, lib, sym, status);\n      if(plug!=NULL&&U_SUCCESS(*status)) {\n        plug->lib = lib; /* plug takes ownership of library */\n        lib = NULL; /* library is now owned by plugin. */\n      }\n    } else {\n      UErrorCode subStatus = U_ZERO_ERROR;\n      plug = uplug_initErrorPlug(libName,sym,config,\"ERROR: Could not load entrypoint\",(lib==NULL)?U_MISSING_RESOURCE_ERROR:*status,&subStatus);\n    }\n    if(lib!=NULL) { /* still need to close the lib */\n      UErrorCode subStatus = U_ZERO_ERROR;\n      uplug_closeLibrary(lib, &subStatus); /* don't care here */\n    }\n  } else {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    plug = uplug_initErrorPlug(libName,sym,config,\"ERROR: could not load library\",(lib==NULL)?U_MISSING_RESOURCE_ERROR:*status,&subStatus);\n  }\n  return plug;\n}\n\nU_CAPI UPlugData* U_EXPORT2\nuplug_loadPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) { \n  UPlugData *plug = NULL;\n  if(U_FAILURE(*status)) { return NULL; }\n  plug = uplug_initPlugFromLibrary(libName, sym, config, status);\n  uplug_loadPlug(plug, status);\n\n  return plug;\n}\n\n#endif\n\nstatic UPlugLevel gCurrentLevel = UPLUG_LEVEL_LOW;\n\nU_CAPI UPlugLevel U_EXPORT2 uplug_getCurrentLevel() {\n  return gCurrentLevel;\n}\n\nstatic UBool U_CALLCONV uplug_cleanup(void)\n{\n  int32_t i;\n    \n  UPlugData *pluginToRemove;\n  /* cleanup plugs */\n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    pluginToRemove = &pluginList[i];\n    /* unload and deallocate */\n    uplug_doUnloadPlug(pluginToRemove, &subStatus);\n  }\n  /* close other held libs? */\n  gCurrentLevel = UPLUG_LEVEL_LOW;\n  return TRUE;\n}\n\n#if U_ENABLE_DYLOAD\n\nstatic void uplug_loadWaitingPlugs(UErrorCode *status) {\n  int32_t i;\n  UPlugLevel currentLevel = uplug_getCurrentLevel();\n    \n  if(U_FAILURE(*status)) {\n    return;\n  }\n#if UPLUG_TRACE\n  DBG((stderr,  \"uplug_loadWaitingPlugs() Level: %d\\n\", currentLevel));\n#endif\n  /* pass #1: low level plugs */\n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    UPlugData *pluginToLoad = &pluginList[i];\n    if(pluginToLoad->awaitingLoad) {\n      if(pluginToLoad->level == UPLUG_LEVEL_LOW) {\n        if(currentLevel > UPLUG_LEVEL_LOW) {\n          pluginToLoad->pluginStatus = U_PLUGIN_TOO_HIGH;\n        } else {\n          UPlugLevel newLevel;\n          uplug_loadPlug(pluginToLoad, &subStatus);\n          newLevel = uplug_getCurrentLevel();\n          if(newLevel > currentLevel) {\n            pluginToLoad->pluginStatus = U_PLUGIN_CHANGED_LEVEL_WARNING;\n            currentLevel = newLevel;\n          }\n        }\n        pluginToLoad->awaitingLoad = FALSE;\n      } \n    }\n  }    \n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    UPlugData *pluginToLoad = &pluginList[i];\n        \n    if(pluginToLoad->awaitingLoad) {\n      if(pluginToLoad->level == UPLUG_LEVEL_INVALID) { \n        pluginToLoad->pluginStatus = U_PLUGIN_DIDNT_SET_LEVEL;\n      } else if(pluginToLoad->level == UPLUG_LEVEL_UNKNOWN) {\n        pluginToLoad->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n      } else {\n        uplug_loadPlug(pluginToLoad, &subStatus);\n      }\n      pluginToLoad->awaitingLoad = FALSE;\n    }\n  }\n    \n#if UPLUG_TRACE\n  DBG((stderr,  \" Done Loading Plugs. Level: %d\\n\", (int32_t)uplug_getCurrentLevel()));\n#endif\n}\n\n/* Name of the plugin config file */\nstatic char plugin_file[2048] = \"\";\n#endif\n\nU_INTERNAL const char* U_EXPORT2\nuplug_getPluginFile() {\n#if U_ENABLE_DYLOAD && !UCONFIG_NO_FILE_IO\n  return plugin_file;\n#else\n  return NULL;\n#endif\n}\n\n\n//  uplug_init()  is called first thing from u_init().\n\nU_CAPI void U_EXPORT2\nuplug_init(UErrorCode *status) {\n#if !U_ENABLE_DYLOAD\n  (void)status; /* unused */\n#elif !UCONFIG_NO_FILE_IO\n  CharString plugin_dir;\n  const char *env = getenv(\"ICU_PLUGINS\");\n\n  if(U_FAILURE(*status)) return;\n  if(env != NULL) {\n    plugin_dir.append(env, -1, *status);\n  }\n  if(U_FAILURE(*status)) return;\n\n#if defined(DEFAULT_ICU_PLUGINS) \n  if(plugin_dir.isEmpty()) {\n    plugin_dir.append(DEFAULT_ICU_PLUGINS, -1, *status);\n  }\n#endif\n\n#if UPLUG_TRACE\n  DBG((stderr, \"ICU_PLUGINS=%s\\n\", plugin_dir.data()));\n#endif\n\n  if(!plugin_dir.isEmpty()) {\n    FILE *f;\n        \n    CharString pluginFile;\n#ifdef OS390BATCH\n/* There are potentially a lot of ways to implement a plugin directory on OS390/zOS  */\n/* Keeping in mind that unauthorized file access is logged, monitored, and enforced  */\n/* I've chosen to open a DDNAME if BATCH and leave it alone for (presumably) UNIX    */\n/* System Services.  Alternative techniques might be allocating a member in          */\n/* SYS1.PARMLIB or setting an environment variable \"ICU_PLUGIN_PATH\" (?).  The       */\n/* DDNAME can be connected to a file in the HFS if need be.                          */\n\n    pluginFile.append(\"//DD:ICUPLUG\", -1, *status);        /* JAM 20 Oct 2011 */\n#else\n    pluginFile.append(plugin_dir, *status);\n    pluginFile.append(U_FILE_SEP_STRING, -1, *status);\n    pluginFile.append(\"icuplugins\", -1, *status);\n    pluginFile.append(U_ICU_VERSION_SHORT, -1, *status);\n    pluginFile.append(\".txt\", -1, *status);\n#endif\n\n#if UPLUG_TRACE\n    DBG((stderr, \"status=%s\\n\", u_errorName(*status)));\n#endif\n\n    if(U_FAILURE(*status)) {\n      return;\n    }\n    if((size_t)pluginFile.length() > (sizeof(plugin_file)-1)) {\n      *status = U_BUFFER_OVERFLOW_ERROR;\n#if UPLUG_TRACE\n      DBG((stderr, \"status=%s\\n\", u_errorName(*status)));\n#endif\n      return;\n    }\n    \n    /* plugin_file is not used for processing - it is only used \n       so that uplug_getPluginFile() works (i.e. icuinfo)\n    */\n    uprv_strncpy(plugin_file, pluginFile.data(), sizeof(plugin_file));\n        \n#if UPLUG_TRACE\n    DBG((stderr, \"pluginfile= %s len %d/%d\\n\", plugin_file, (int)strlen(plugin_file), (int)sizeof(plugin_file)));\n#endif\n        \n#ifdef __MVS__\n    if (iscics()) /* 12 Nov 2011 JAM */\n    {\n        f = NULL;\n    }\n    else\n#endif\n    {\n        f = fopen(pluginFile.data(), \"r\");\n    }\n\n    if(f != NULL) {\n      char linebuf[1024];\n      char *p, *libName=NULL, *symName=NULL, *config=NULL;\n      int32_t line = 0;\n            \n            \n      while(fgets(linebuf,1023,f)) {\n        line++;\n\n        if(!*linebuf || *linebuf=='#') {\n          continue;\n        } else {\n          p = linebuf;\n          while(*p&&isspace((int)*p))\n            p++;\n          if(!*p || *p=='#') continue;\n          libName = p;\n          while(*p&&!isspace((int)*p)) {\n            p++;\n          }\n          if(!*p || *p=='#') continue; /* no tab after libname */\n          *p=0; /* end of libname */\n          p++;\n          while(*p&&isspace((int)*p)) {\n            p++;\n          }\n          if(!*p||*p=='#') continue; /* no symname after libname +tab */\n          symName = p;\n          while(*p&&!isspace((int)*p)) {\n            p++;\n          }\n                    \n          if(*p) { /* has config */\n            *p=0;\n            ++p;\n            while(*p&&isspace((int)*p)) {\n              p++;\n            }\n            if(*p) {\n              config = p;\n            }\n          }\n                    \n          /* chop whitespace at the end of the config */\n          if(config!=NULL&&*config!=0) {\n            p = config+strlen(config);\n            while(p>config&&isspace((int)*(--p))) {\n              *p=0;\n            }\n          }\n                \n          /* OK, we're good. */\n          { \n            UErrorCode subStatus = U_ZERO_ERROR;\n            UPlugData *plug = uplug_initPlugFromLibrary(libName, symName, config, &subStatus);\n            if(U_FAILURE(subStatus) && U_SUCCESS(*status)) {\n              *status = subStatus;\n            }\n#if UPLUG_TRACE\n            DBG((stderr, \"PLUGIN libName=[%s], sym=[%s], config=[%s]\\n\", libName, symName, config));\n            DBG((stderr, \" -> %p, %s\\n\", (void*)plug, u_errorName(subStatus)));\n#else\n            (void)plug; /* unused */\n#endif\n          }\n        }\n      }\n      fclose(f);\n    } else {\n#if UPLUG_TRACE\n      DBG((stderr, \"Can't open plugin file %s\\n\", plugin_file));\n#endif\n    }\n  }\n  uplug_loadWaitingPlugs(status);\n#endif /* U_ENABLE_DYLOAD */\n  gCurrentLevel = UPLUG_LEVEL_HIGH;\n  ucln_registerCleanup(UCLN_UPLUG, uplug_cleanup);\n}\n\n#endif\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/common/unicode/urename.h": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n*******************************************************************************\n*   Copyright (C) 2002-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*******************************************************************************\n*\n*   file name:  urename.h\n*   encoding:   UTF-8\n*   tab size:   8 (not used)\n*   indentation:4\n*\n*   Created by: Perl script tools/genren.pl written by Vladimir Weinstein\n*\n*  Contains data for renaming ICU exports.\n*  Gets included by umachine.h\n*\n*  THIS FILE IS MACHINE-GENERATED, DON'T PLAY WITH IT IF YOU DON'T KNOW WHAT\n*  YOU ARE DOING, OTHERWISE VERY BAD THINGS WILL HAPPEN!\n*/\n\n#ifndef URENAME_H\n#define URENAME_H\n\n/* U_DISABLE_RENAMING can be defined in the following ways:\n *   - when running configure, e.g.\n *        runConfigureICU Linux --disable-renaming\n *   - by changing the default setting of U_DISABLE_RENAMING in uconfig.h\n */\n\n#include \"unicode/uconfig.h\"\n\n#if !U_DISABLE_RENAMING\n\n// Disable Renaming for Visual Studio's IntelliSense feature, so that 'Go-to-Definition' (F12) will work.\n#if !(defined(_MSC_VER) && defined(__INTELLISENSE__))\n\n/* We need the U_ICU_ENTRY_POINT_RENAME definition. There's a default one in unicode/uvernum.h we can use, but we will give\n   the platform a chance to define it first.\n   Normally (if utypes.h or umachine.h was included first) this will not be necessary as it will already be defined.\n */\n\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#include \"unicode/umachine.h\"\n#endif\n\n/* If we still don't have U_ICU_ENTRY_POINT_RENAME use the default. */\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#include \"unicode/uvernum.h\"\n#endif\n\n/* Error out before the following defines cause very strange and unexpected code breakage */\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#error U_ICU_ENTRY_POINT_RENAME is not defined - cannot continue. Consider defining U_DISABLE_RENAMING if renaming should not be used.\n#endif\n\n\n/* C exports renaming data */\n\n#define T_CString_int64ToString U_ICU_ENTRY_POINT_RENAME(T_CString_int64ToString)\n#define T_CString_integerToString U_ICU_ENTRY_POINT_RENAME(T_CString_integerToString)\n#define T_CString_stringToInteger U_ICU_ENTRY_POINT_RENAME(T_CString_stringToInteger)\n#define T_CString_toLowerCase U_ICU_ENTRY_POINT_RENAME(T_CString_toLowerCase)\n#define T_CString_toUpperCase U_ICU_ENTRY_POINT_RENAME(T_CString_toUpperCase)\n#define UCNV_FROM_U_CALLBACK_ESCAPE U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_ESCAPE)\n#define UCNV_FROM_U_CALLBACK_SKIP U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_SKIP)\n#define UCNV_FROM_U_CALLBACK_STOP U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_STOP)\n#define UCNV_FROM_U_CALLBACK_SUBSTITUTE U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_SUBSTITUTE)\n#define UCNV_TO_U_CALLBACK_ESCAPE U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_ESCAPE)\n#define UCNV_TO_U_CALLBACK_SKIP U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_SKIP)\n#define UCNV_TO_U_CALLBACK_STOP U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_STOP)\n#define UCNV_TO_U_CALLBACK_SUBSTITUTE U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_SUBSTITUTE)\n#define UDataMemory_createNewInstance U_ICU_ENTRY_POINT_RENAME(UDataMemory_createNewInstance)\n#define UDataMemory_init U_ICU_ENTRY_POINT_RENAME(UDataMemory_init)\n#define UDataMemory_isLoaded U_ICU_ENTRY_POINT_RENAME(UDataMemory_isLoaded)\n#define UDataMemory_normalizeDataPointer U_ICU_ENTRY_POINT_RENAME(UDataMemory_normalizeDataPointer)\n#define UDataMemory_setData U_ICU_ENTRY_POINT_RENAME(UDataMemory_setData)\n#define UDatamemory_assign U_ICU_ENTRY_POINT_RENAME(UDatamemory_assign)\n#define _ASCIIData U_ICU_ENTRY_POINT_RENAME(_ASCIIData)\n#define _Bocu1Data U_ICU_ENTRY_POINT_RENAME(_Bocu1Data)\n#define _CESU8Data U_ICU_ENTRY_POINT_RENAME(_CESU8Data)\n#define _CompoundTextData U_ICU_ENTRY_POINT_RENAME(_CompoundTextData)\n#define _HZData U_ICU_ENTRY_POINT_RENAME(_HZData)\n#define _IMAPData U_ICU_ENTRY_POINT_RENAME(_IMAPData)\n#define _ISCIIData U_ICU_ENTRY_POINT_RENAME(_ISCIIData)\n#define _ISO2022Data U_ICU_ENTRY_POINT_RENAME(_ISO2022Data)\n#define _LMBCSData1 U_ICU_ENTRY_POINT_RENAME(_LMBCSData1)\n#define _LMBCSData11 U_ICU_ENTRY_POINT_RENAME(_LMBCSData11)\n#define _LMBCSData16 U_ICU_ENTRY_POINT_RENAME(_LMBCSData16)\n#define _LMBCSData17 U_ICU_ENTRY_POINT_RENAME(_LMBCSData17)\n#define _LMBCSData18 U_ICU_ENTRY_POINT_RENAME(_LMBCSData18)\n#define _LMBCSData19 U_ICU_ENTRY_POINT_RENAME(_LMBCSData19)\n#define _LMBCSData2 U_ICU_ENTRY_POINT_RENAME(_LMBCSData2)\n#define _LMBCSData3 U_ICU_ENTRY_POINT_RENAME(_LMBCSData3)\n#define _LMBCSData4 U_ICU_ENTRY_POINT_RENAME(_LMBCSData4)\n#define _LMBCSData5 U_ICU_ENTRY_POINT_RENAME(_LMBCSData5)\n#define _LMBCSData6 U_ICU_ENTRY_POINT_RENAME(_LMBCSData6)\n#define _LMBCSData8 U_ICU_ENTRY_POINT_RENAME(_LMBCSData8)\n#define _Latin1Data U_ICU_ENTRY_POINT_RENAME(_Latin1Data)\n#define _MBCSData U_ICU_ENTRY_POINT_RENAME(_MBCSData)\n#define _SCSUData U_ICU_ENTRY_POINT_RENAME(_SCSUData)\n#define _UTF16BEData U_ICU_ENTRY_POINT_RENAME(_UTF16BEData)\n#define _UTF16Data U_ICU_ENTRY_POINT_RENAME(_UTF16Data)\n#define _UTF16LEData U_ICU_ENTRY_POINT_RENAME(_UTF16LEData)\n#define _UTF16v2Data U_ICU_ENTRY_POINT_RENAME(_UTF16v2Data)\n#define _UTF32BEData U_ICU_ENTRY_POINT_RENAME(_UTF32BEData)\n#define _UTF32Data U_ICU_ENTRY_POINT_RENAME(_UTF32Data)\n#define _UTF32LEData U_ICU_ENTRY_POINT_RENAME(_UTF32LEData)\n#define _UTF7Data U_ICU_ENTRY_POINT_RENAME(_UTF7Data)\n#define _UTF8Data U_ICU_ENTRY_POINT_RENAME(_UTF8Data)\n#define _isUnicodeLocaleTypeSubtag U_ICU_ENTRY_POINT_RENAME(_isUnicodeLocaleTypeSubtag)\n#define allowedHourFormatsCleanup U_ICU_ENTRY_POINT_RENAME(allowedHourFormatsCleanup)\n#define cmemory_cleanup U_ICU_ENTRY_POINT_RENAME(cmemory_cleanup)\n#define dayPeriodRulesCleanup U_ICU_ENTRY_POINT_RENAME(dayPeriodRulesCleanup)\n#define deleteAllowedHourFormats U_ICU_ENTRY_POINT_RENAME(deleteAllowedHourFormats)\n#define gTimeZoneFilesInitOnce U_ICU_ENTRY_POINT_RENAME(gTimeZoneFilesInitOnce)\n#define initNumsysNames U_ICU_ENTRY_POINT_RENAME(initNumsysNames)\n#define izrule_clone U_ICU_ENTRY_POINT_RENAME(izrule_clone)\n#define izrule_close U_ICU_ENTRY_POINT_RENAME(izrule_close)\n#define izrule_equals U_ICU_ENTRY_POINT_RENAME(izrule_equals)\n#define izrule_getDSTSavings U_ICU_ENTRY_POINT_RENAME(izrule_getDSTSavings)\n#define izrule_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(izrule_getDynamicClassID)\n#define izrule_getFinalStart U_ICU_ENTRY_POINT_RENAME(izrule_getFinalStart)\n#define izrule_getFirstStart U_ICU_ENTRY_POINT_RENAME(izrule_getFirstStart)\n#define izrule_getName U_ICU_ENTRY_POINT_RENAME(izrule_getName)\n#define izrule_getNextStart U_ICU_ENTRY_POINT_RENAME(izrule_getNextStart)\n#define izrule_getPreviousStart U_ICU_ENTRY_POINT_RENAME(izrule_getPreviousStart)\n#define izrule_getRawOffset U_ICU_ENTRY_POINT_RENAME(izrule_getRawOffset)\n#define izrule_getStaticClassID U_ICU_ENTRY_POINT_RENAME(izrule_getStaticClassID)\n#define izrule_isEquivalentTo U_ICU_ENTRY_POINT_RENAME(izrule_isEquivalentTo)\n#define izrule_open U_ICU_ENTRY_POINT_RENAME(izrule_open)\n#define locale_getKeywords U_ICU_ENTRY_POINT_RENAME(locale_getKeywords)\n#define locale_getKeywordsStart U_ICU_ENTRY_POINT_RENAME(locale_getKeywordsStart)\n#define locale_get_default U_ICU_ENTRY_POINT_RENAME(locale_get_default)\n#define locale_set_default U_ICU_ENTRY_POINT_RENAME(locale_set_default)\n#define numSysCleanup U_ICU_ENTRY_POINT_RENAME(numSysCleanup)\n#define pl_addFontRun U_ICU_ENTRY_POINT_RENAME(pl_addFontRun)\n#define pl_addLocaleRun U_ICU_ENTRY_POINT_RENAME(pl_addLocaleRun)\n#define pl_addValueRun U_ICU_ENTRY_POINT_RENAME(pl_addValueRun)\n#define pl_close U_ICU_ENTRY_POINT_RENAME(pl_close)\n#define pl_closeFontRuns U_ICU_ENTRY_POINT_RENAME(pl_closeFontRuns)\n#define pl_closeLine U_ICU_ENTRY_POINT_RENAME(pl_closeLine)\n#define pl_closeLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_closeLocaleRuns)\n#define pl_closeValueRuns U_ICU_ENTRY_POINT_RENAME(pl_closeValueRuns)\n#define pl_countLineRuns U_ICU_ENTRY_POINT_RENAME(pl_countLineRuns)\n#define pl_create U_ICU_ENTRY_POINT_RENAME(pl_create)\n#define pl_getAscent U_ICU_ENTRY_POINT_RENAME(pl_getAscent)\n#define pl_getDescent U_ICU_ENTRY_POINT_RENAME(pl_getDescent)\n#define pl_getFontRunCount U_ICU_ENTRY_POINT_RENAME(pl_getFontRunCount)\n#define pl_getFontRunFont U_ICU_ENTRY_POINT_RENAME(pl_getFontRunFont)\n#define pl_getFontRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getFontRunLastLimit)\n#define pl_getFontRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getFontRunLimit)\n#define pl_getLeading U_ICU_ENTRY_POINT_RENAME(pl_getLeading)\n#define pl_getLineAscent U_ICU_ENTRY_POINT_RENAME(pl_getLineAscent)\n#define pl_getLineDescent U_ICU_ENTRY_POINT_RENAME(pl_getLineDescent)\n#define pl_getLineLeading U_ICU_ENTRY_POINT_RENAME(pl_getLineLeading)\n#define pl_getLineVisualRun U_ICU_ENTRY_POINT_RENAME(pl_getLineVisualRun)\n#define pl_getLineWidth U_ICU_ENTRY_POINT_RENAME(pl_getLineWidth)\n#define pl_getLocaleRunCount U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunCount)\n#define pl_getLocaleRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLastLimit)\n#define pl_getLocaleRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLimit)\n#define pl_getLocaleRunLocale U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLocale)\n#define pl_getParagraphLevel U_ICU_ENTRY_POINT_RENAME(pl_getParagraphLevel)\n#define pl_getTextDirection U_ICU_ENTRY_POINT_RENAME(pl_getTextDirection)\n#define pl_getValueRunCount U_ICU_ENTRY_POINT_RENAME(pl_getValueRunCount)\n#define pl_getValueRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getValueRunLastLimit)\n#define pl_getValueRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getValueRunLimit)\n#define pl_getValueRunValue U_ICU_ENTRY_POINT_RENAME(pl_getValueRunValue)\n#define pl_getVisualRunAscent U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunAscent)\n#define pl_getVisualRunDescent U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunDescent)\n#define pl_getVisualRunDirection U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunDirection)\n#define pl_getVisualRunFont U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunFont)\n#define pl_getVisualRunGlyphCount U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphCount)\n#define pl_getVisualRunGlyphToCharMap U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphToCharMap)\n#define pl_getVisualRunGlyphs U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphs)\n#define pl_getVisualRunLeading U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunLeading)\n#define pl_getVisualRunPositions U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunPositions)\n#define pl_isComplex U_ICU_ENTRY_POINT_RENAME(pl_isComplex)\n#define pl_nextLine U_ICU_ENTRY_POINT_RENAME(pl_nextLine)\n#define pl_openEmptyFontRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyFontRuns)\n#define pl_openEmptyLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyLocaleRuns)\n#define pl_openEmptyValueRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyValueRuns)\n#define pl_openFontRuns U_ICU_ENTRY_POINT_RENAME(pl_openFontRuns)\n#define pl_openLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_openLocaleRuns)\n#define pl_openValueRuns U_ICU_ENTRY_POINT_RENAME(pl_openValueRuns)\n#define pl_reflow U_ICU_ENTRY_POINT_RENAME(pl_reflow)\n#define pl_resetFontRuns U_ICU_ENTRY_POINT_RENAME(pl_resetFontRuns)\n#define pl_resetLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_resetLocaleRuns)\n#define pl_resetValueRuns U_ICU_ENTRY_POINT_RENAME(pl_resetValueRuns)\n#define res_countArrayItems U_ICU_ENTRY_POINT_RENAME(res_countArrayItems)\n#define res_findResource U_ICU_ENTRY_POINT_RENAME(res_findResource)\n#define res_getAlias U_ICU_ENTRY_POINT_RENAME(res_getAlias)\n#define res_getArrayItem U_ICU_ENTRY_POINT_RENAME(res_getArrayItem)\n#define res_getBinary U_ICU_ENTRY_POINT_RENAME(res_getBinary)\n#define res_getIntVector U_ICU_ENTRY_POINT_RENAME(res_getIntVector)\n#define res_getPublicType U_ICU_ENTRY_POINT_RENAME(res_getPublicType)\n#define res_getResource U_ICU_ENTRY_POINT_RENAME(res_getResource)\n#define res_getString U_ICU_ENTRY_POINT_RENAME(res_getString)\n#define res_getTableItemByIndex U_ICU_ENTRY_POINT_RENAME(res_getTableItemByIndex)\n#define res_getTableItemByKey U_ICU_ENTRY_POINT_RENAME(res_getTableItemByKey)\n#define res_load U_ICU_ENTRY_POINT_RENAME(res_load)\n#define res_read U_ICU_ENTRY_POINT_RENAME(res_read)\n#define res_unload U_ICU_ENTRY_POINT_RENAME(res_unload)\n#define u_UCharsToChars U_ICU_ENTRY_POINT_RENAME(u_UCharsToChars)\n#define u_austrcpy U_ICU_ENTRY_POINT_RENAME(u_austrcpy)\n#define u_austrncpy U_ICU_ENTRY_POINT_RENAME(u_austrncpy)\n#define u_caseInsensitivePrefixMatch U_ICU_ENTRY_POINT_RENAME(u_caseInsensitivePrefixMatch)\n#define u_catclose U_ICU_ENTRY_POINT_RENAME(u_catclose)\n#define u_catgets U_ICU_ENTRY_POINT_RENAME(u_catgets)\n#define u_catopen U_ICU_ENTRY_POINT_RENAME(u_catopen)\n#define u_charAge U_ICU_ENTRY_POINT_RENAME(u_charAge)\n#define u_charDigitValue U_ICU_ENTRY_POINT_RENAME(u_charDigitValue)\n#define u_charDirection U_ICU_ENTRY_POINT_RENAME(u_charDirection)\n#define u_charFromName U_ICU_ENTRY_POINT_RENAME(u_charFromName)\n#define u_charMirror U_ICU_ENTRY_POINT_RENAME(u_charMirror)\n#define u_charName U_ICU_ENTRY_POINT_RENAME(u_charName)\n#define u_charType U_ICU_ENTRY_POINT_RENAME(u_charType)\n#define u_charsToUChars U_ICU_ENTRY_POINT_RENAME(u_charsToUChars)\n#define u_cleanup U_ICU_ENTRY_POINT_RENAME(u_cleanup)\n#define u_countChar32 U_ICU_ENTRY_POINT_RENAME(u_countChar32)\n#define u_digit U_ICU_ENTRY_POINT_RENAME(u_digit)\n#define u_enumCharNames U_ICU_ENTRY_POINT_RENAME(u_enumCharNames)\n#define u_enumCharTypes U_ICU_ENTRY_POINT_RENAME(u_enumCharTypes)\n#define u_errorName U_ICU_ENTRY_POINT_RENAME(u_errorName)\n#define u_fadopt U_ICU_ENTRY_POINT_RENAME(u_fadopt)\n#define u_fclose U_ICU_ENTRY_POINT_RENAME(u_fclose)\n#define u_feof U_ICU_ENTRY_POINT_RENAME(u_feof)\n#define u_fflush U_ICU_ENTRY_POINT_RENAME(u_fflush)\n#define u_fgetConverter U_ICU_ENTRY_POINT_RENAME(u_fgetConverter)\n#define u_fgetNumberFormat U_ICU_ENTRY_POINT_RENAME(u_fgetNumberFormat)\n#define u_fgetc U_ICU_ENTRY_POINT_RENAME(u_fgetc)\n#define u_fgetcodepage U_ICU_ENTRY_POINT_RENAME(u_fgetcodepage)\n#define u_fgetcx U_ICU_ENTRY_POINT_RENAME(u_fgetcx)\n#define u_fgetfile U_ICU_ENTRY_POINT_RENAME(u_fgetfile)\n#define u_fgetlocale U_ICU_ENTRY_POINT_RENAME(u_fgetlocale)\n#define u_fgets U_ICU_ENTRY_POINT_RENAME(u_fgets)\n#define u_file_read U_ICU_ENTRY_POINT_RENAME(u_file_read)\n#define u_file_write U_ICU_ENTRY_POINT_RENAME(u_file_write)\n#define u_file_write_flush U_ICU_ENTRY_POINT_RENAME(u_file_write_flush)\n#define u_finit U_ICU_ENTRY_POINT_RENAME(u_finit)\n#define u_flushDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_flushDefaultConverter)\n#define u_foldCase U_ICU_ENTRY_POINT_RENAME(u_foldCase)\n#define u_fopen U_ICU_ENTRY_POINT_RENAME(u_fopen)\n#define u_fopen_u U_ICU_ENTRY_POINT_RENAME(u_fopen_u)\n#define u_forDigit U_ICU_ENTRY_POINT_RENAME(u_forDigit)\n#define u_formatMessage U_ICU_ENTRY_POINT_RENAME(u_formatMessage)\n#define u_formatMessageWithError U_ICU_ENTRY_POINT_RENAME(u_formatMessageWithError)\n#define u_fprintf U_ICU_ENTRY_POINT_RENAME(u_fprintf)\n#define u_fprintf_u U_ICU_ENTRY_POINT_RENAME(u_fprintf_u)\n#define u_fputc U_ICU_ENTRY_POINT_RENAME(u_fputc)\n#define u_fputs U_ICU_ENTRY_POINT_RENAME(u_fputs)\n#define u_frewind U_ICU_ENTRY_POINT_RENAME(u_frewind)\n#define u_fscanf U_ICU_ENTRY_POINT_RENAME(u_fscanf)\n#define u_fscanf_u U_ICU_ENTRY_POINT_RENAME(u_fscanf_u)\n#define u_fsetcodepage U_ICU_ENTRY_POINT_RENAME(u_fsetcodepage)\n#define u_fsetlocale U_ICU_ENTRY_POINT_RENAME(u_fsetlocale)\n#define u_fsettransliterator U_ICU_ENTRY_POINT_RENAME(u_fsettransliterator)\n#define u_fstropen U_ICU_ENTRY_POINT_RENAME(u_fstropen)\n#define u_fungetc U_ICU_ENTRY_POINT_RENAME(u_fungetc)\n#define u_getBidiPairedBracket U_ICU_ENTRY_POINT_RENAME(u_getBidiPairedBracket)\n#define u_getBinaryPropertySet U_ICU_ENTRY_POINT_RENAME(u_getBinaryPropertySet)\n#define u_getCombiningClass U_ICU_ENTRY_POINT_RENAME(u_getCombiningClass)\n#define u_getDataDirectory U_ICU_ENTRY_POINT_RENAME(u_getDataDirectory)\n#define u_getDataVersion U_ICU_ENTRY_POINT_RENAME(u_getDataVersion)\n#define u_getDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_getDefaultConverter)\n#define u_getFC_NFKC_Closure U_ICU_ENTRY_POINT_RENAME(u_getFC_NFKC_Closure)\n#define u_getISOComment U_ICU_ENTRY_POINT_RENAME(u_getISOComment)\n#define u_getIntPropertyMap U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyMap)\n#define u_getIntPropertyMaxValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyMaxValue)\n#define u_getIntPropertyMinValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyMinValue)\n#define u_getIntPropertyValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyValue)\n#define u_getMainProperties U_ICU_ENTRY_POINT_RENAME(u_getMainProperties)\n#define u_getNumericValue U_ICU_ENTRY_POINT_RENAME(u_getNumericValue)\n#define u_getPropertyEnum U_ICU_ENTRY_POINT_RENAME(u_getPropertyEnum)\n#define u_getPropertyName U_ICU_ENTRY_POINT_RENAME(u_getPropertyName)\n#define u_getPropertyValueEnum U_ICU_ENTRY_POINT_RENAME(u_getPropertyValueEnum)\n#define u_getPropertyValueName U_ICU_ENTRY_POINT_RENAME(u_getPropertyValueName)\n#define u_getTimeZoneFilesDirectory U_ICU_ENTRY_POINT_RENAME(u_getTimeZoneFilesDirectory)\n#define u_getUnicodeProperties U_ICU_ENTRY_POINT_RENAME(u_getUnicodeProperties)\n#define u_getUnicodeVersion U_ICU_ENTRY_POINT_RENAME(u_getUnicodeVersion)\n#define u_getVersion U_ICU_ENTRY_POINT_RENAME(u_getVersion)\n#define u_get_stdout U_ICU_ENTRY_POINT_RENAME(u_get_stdout)\n#define u_hasBinaryProperty U_ICU_ENTRY_POINT_RENAME(u_hasBinaryProperty)\n#define u_init U_ICU_ENTRY_POINT_RENAME(u_init)\n#define u_isIDIgnorable U_ICU_ENTRY_POINT_RENAME(u_isIDIgnorable)\n#define u_isIDPart U_ICU_ENTRY_POINT_RENAME(u_isIDPart)\n#define u_isIDStart U_ICU_ENTRY_POINT_RENAME(u_isIDStart)\n#define u_isISOControl U_ICU_ENTRY_POINT_RENAME(u_isISOControl)\n#define u_isJavaIDPart U_ICU_ENTRY_POINT_RENAME(u_isJavaIDPart)\n#define u_isJavaIDStart U_ICU_ENTRY_POINT_RENAME(u_isJavaIDStart)\n#define u_isJavaSpaceChar U_ICU_ENTRY_POINT_RENAME(u_isJavaSpaceChar)\n#define u_isMirrored U_ICU_ENTRY_POINT_RENAME(u_isMirrored)\n#define u_isUAlphabetic U_ICU_ENTRY_POINT_RENAME(u_isUAlphabetic)\n#define u_isULowercase U_ICU_ENTRY_POINT_RENAME(u_isULowercase)\n#define u_isUUppercase U_ICU_ENTRY_POINT_RENAME(u_isUUppercase)\n#define u_isUWhiteSpace U_ICU_ENTRY_POINT_RENAME(u_isUWhiteSpace)\n#define u_isWhitespace U_ICU_ENTRY_POINT_RENAME(u_isWhitespace)\n#define u_isalnum U_ICU_ENTRY_POINT_RENAME(u_isalnum)\n#define u_isalnumPOSIX U_ICU_ENTRY_POINT_RENAME(u_isalnumPOSIX)\n#define u_isalpha U_ICU_ENTRY_POINT_RENAME(u_isalpha)\n#define u_isbase U_ICU_ENTRY_POINT_RENAME(u_isbase)\n#define u_isblank U_ICU_ENTRY_POINT_RENAME(u_isblank)\n#define u_iscntrl U_ICU_ENTRY_POINT_RENAME(u_iscntrl)\n#define u_isdefined U_ICU_ENTRY_POINT_RENAME(u_isdefined)\n#define u_isdigit U_ICU_ENTRY_POINT_RENAME(u_isdigit)\n#define u_isgraph U_ICU_ENTRY_POINT_RENAME(u_isgraph)\n#define u_isgraphPOSIX U_ICU_ENTRY_POINT_RENAME(u_isgraphPOSIX)\n#define u_islower U_ICU_ENTRY_POINT_RENAME(u_islower)\n#define u_isprint U_ICU_ENTRY_POINT_RENAME(u_isprint)\n#define u_isprintPOSIX U_ICU_ENTRY_POINT_RENAME(u_isprintPOSIX)\n#define u_ispunct U_ICU_ENTRY_POINT_RENAME(u_ispunct)\n#define u_isspace U_ICU_ENTRY_POINT_RENAME(u_isspace)\n#define u_istitle U_ICU_ENTRY_POINT_RENAME(u_istitle)\n#define u_isupper U_ICU_ENTRY_POINT_RENAME(u_isupper)\n#define u_isxdigit U_ICU_ENTRY_POINT_RENAME(u_isxdigit)\n#define u_locbund_close U_ICU_ENTRY_POINT_RENAME(u_locbund_close)\n#define u_locbund_getNumberFormat U_ICU_ENTRY_POINT_RENAME(u_locbund_getNumberFormat)\n#define u_locbund_init U_ICU_ENTRY_POINT_RENAME(u_locbund_init)\n#define u_memcasecmp U_ICU_ENTRY_POINT_RENAME(u_memcasecmp)\n#define u_memchr U_ICU_ENTRY_POINT_RENAME(u_memchr)\n#define u_memchr32 U_ICU_ENTRY_POINT_RENAME(u_memchr32)\n#define u_memcmp U_ICU_ENTRY_POINT_RENAME(u_memcmp)\n#define u_memcmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_memcmpCodePointOrder)\n#define u_memcpy U_ICU_ENTRY_POINT_RENAME(u_memcpy)\n#define u_memmove U_ICU_ENTRY_POINT_RENAME(u_memmove)\n#define u_memrchr U_ICU_ENTRY_POINT_RENAME(u_memrchr)\n#define u_memrchr32 U_ICU_ENTRY_POINT_RENAME(u_memrchr32)\n#define u_memset U_ICU_ENTRY_POINT_RENAME(u_memset)\n#define u_parseMessage U_ICU_ENTRY_POINT_RENAME(u_parseMessage)\n#define u_parseMessageWithError U_ICU_ENTRY_POINT_RENAME(u_parseMessageWithError)\n#define u_printf U_ICU_ENTRY_POINT_RENAME(u_printf)\n#define u_printf_parse U_ICU_ENTRY_POINT_RENAME(u_printf_parse)\n#define u_printf_u U_ICU_ENTRY_POINT_RENAME(u_printf_u)\n#define u_releaseDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_releaseDefaultConverter)\n#define u_scanf_parse U_ICU_ENTRY_POINT_RENAME(u_scanf_parse)\n#define u_setAtomicIncDecFunctions U_ICU_ENTRY_POINT_RENAME(u_setAtomicIncDecFunctions)\n#define u_setDataDirectory U_ICU_ENTRY_POINT_RENAME(u_setDataDirectory)\n#define u_setMemoryFunctions U_ICU_ENTRY_POINT_RENAME(u_setMemoryFunctions)\n#define u_setMutexFunctions U_ICU_ENTRY_POINT_RENAME(u_setMutexFunctions)\n#define u_setTimeZoneFilesDirectory U_ICU_ENTRY_POINT_RENAME(u_setTimeZoneFilesDirectory)\n#define u_shapeArabic U_ICU_ENTRY_POINT_RENAME(u_shapeArabic)\n#define u_snprintf U_ICU_ENTRY_POINT_RENAME(u_snprintf)\n#define u_snprintf_u U_ICU_ENTRY_POINT_RENAME(u_snprintf_u)\n#define u_sprintf U_ICU_ENTRY_POINT_RENAME(u_sprintf)\n#define u_sprintf_u U_ICU_ENTRY_POINT_RENAME(u_sprintf_u)\n#define u_sscanf U_ICU_ENTRY_POINT_RENAME(u_sscanf)\n#define u_sscanf_u U_ICU_ENTRY_POINT_RENAME(u_sscanf_u)\n#define u_strCaseCompare U_ICU_ENTRY_POINT_RENAME(u_strCaseCompare)\n#define u_strCompare U_ICU_ENTRY_POINT_RENAME(u_strCompare)\n#define u_strCompareIter U_ICU_ENTRY_POINT_RENAME(u_strCompareIter)\n#define u_strFindFirst U_ICU_ENTRY_POINT_RENAME(u_strFindFirst)\n#define u_strFindLast U_ICU_ENTRY_POINT_RENAME(u_strFindLast)\n#define u_strFoldCase U_ICU_ENTRY_POINT_RENAME(u_strFoldCase)\n#define u_strFromJavaModifiedUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromJavaModifiedUTF8WithSub)\n#define u_strFromPunycode U_ICU_ENTRY_POINT_RENAME(u_strFromPunycode)\n#define u_strFromUTF32 U_ICU_ENTRY_POINT_RENAME(u_strFromUTF32)\n#define u_strFromUTF32WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromUTF32WithSub)\n#define u_strFromUTF8 U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8)\n#define u_strFromUTF8Lenient U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8Lenient)\n#define u_strFromUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8WithSub)\n#define u_strFromWCS U_ICU_ENTRY_POINT_RENAME(u_strFromWCS)\n#define u_strHasMoreChar32Than U_ICU_ENTRY_POINT_RENAME(u_strHasMoreChar32Than)\n#define u_strToJavaModifiedUTF8 U_ICU_ENTRY_POINT_RENAME(u_strToJavaModifiedUTF8)\n#define u_strToLower U_ICU_ENTRY_POINT_RENAME(u_strToLower)\n#define u_strToPunycode U_ICU_ENTRY_POINT_RENAME(u_strToPunycode)\n#define u_strToTitle U_ICU_ENTRY_POINT_RENAME(u_strToTitle)\n#define u_strToUTF32 U_ICU_ENTRY_POINT_RENAME(u_strToUTF32)\n#define u_strToUTF32WithSub U_ICU_ENTRY_POINT_RENAME(u_strToUTF32WithSub)\n#define u_strToUTF8 U_ICU_ENTRY_POINT_RENAME(u_strToUTF8)\n#define u_strToUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strToUTF8WithSub)\n#define u_strToUpper U_ICU_ENTRY_POINT_RENAME(u_strToUpper)\n#define u_strToWCS U_ICU_ENTRY_POINT_RENAME(u_strToWCS)\n#define u_strcasecmp U_ICU_ENTRY_POINT_RENAME(u_strcasecmp)\n#define u_strcat U_ICU_ENTRY_POINT_RENAME(u_strcat)\n#define u_strchr U_ICU_ENTRY_POINT_RENAME(u_strchr)\n#define u_strchr32 U_ICU_ENTRY_POINT_RENAME(u_strchr32)\n#define u_strcmp U_ICU_ENTRY_POINT_RENAME(u_strcmp)\n#define u_strcmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_strcmpCodePointOrder)\n#define u_strcmpFold U_ICU_ENTRY_POINT_RENAME(u_strcmpFold)\n#define u_strcpy U_ICU_ENTRY_POINT_RENAME(u_strcpy)\n#define u_strcspn U_ICU_ENTRY_POINT_RENAME(u_strcspn)\n#define u_strlen U_ICU_ENTRY_POINT_RENAME(u_strlen)\n#define u_strncasecmp U_ICU_ENTRY_POINT_RENAME(u_strncasecmp)\n#define u_strncat U_ICU_ENTRY_POINT_RENAME(u_strncat)\n#define u_strncmp U_ICU_ENTRY_POINT_RENAME(u_strncmp)\n#define u_strncmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_strncmpCodePointOrder)\n#define u_strncpy U_ICU_ENTRY_POINT_RENAME(u_strncpy)\n#define u_strpbrk U_ICU_ENTRY_POINT_RENAME(u_strpbrk)\n#define u_strrchr U_ICU_ENTRY_POINT_RENAME(u_strrchr)\n#define u_strrchr32 U_ICU_ENTRY_POINT_RENAME(u_strrchr32)\n#define u_strrstr U_ICU_ENTRY_POINT_RENAME(u_strrstr)\n#define u_strspn U_ICU_ENTRY_POINT_RENAME(u_strspn)\n#define u_strstr U_ICU_ENTRY_POINT_RENAME(u_strstr)\n#define u_strtok_r U_ICU_ENTRY_POINT_RENAME(u_strtok_r)\n#define u_terminateChars U_ICU_ENTRY_POINT_RENAME(u_terminateChars)\n#define u_terminateUChar32s U_ICU_ENTRY_POINT_RENAME(u_terminateUChar32s)\n#define u_terminateUChars U_ICU_ENTRY_POINT_RENAME(u_terminateUChars)\n#define u_terminateWChars U_ICU_ENTRY_POINT_RENAME(u_terminateWChars)\n#define u_tolower U_ICU_ENTRY_POINT_RENAME(u_tolower)\n#define u_totitle U_ICU_ENTRY_POINT_RENAME(u_totitle)\n#define u_toupper U_ICU_ENTRY_POINT_RENAME(u_toupper)\n#define u_uastrcpy U_ICU_ENTRY_POINT_RENAME(u_uastrcpy)\n#define u_uastrncpy U_ICU_ENTRY_POINT_RENAME(u_uastrncpy)\n#define u_unescape U_ICU_ENTRY_POINT_RENAME(u_unescape)\n#define u_unescapeAt U_ICU_ENTRY_POINT_RENAME(u_unescapeAt)\n#define u_versionFromString U_ICU_ENTRY_POINT_RENAME(u_versionFromString)\n#define u_versionFromUString U_ICU_ENTRY_POINT_RENAME(u_versionFromUString)\n#define u_versionToString U_ICU_ENTRY_POINT_RENAME(u_versionToString)\n#define u_vformatMessage U_ICU_ENTRY_POINT_RENAME(u_vformatMessage)\n#define u_vformatMessageWithError U_ICU_ENTRY_POINT_RENAME(u_vformatMessageWithError)\n#define u_vfprintf U_ICU_ENTRY_POINT_RENAME(u_vfprintf)\n#define u_vfprintf_u U_ICU_ENTRY_POINT_RENAME(u_vfprintf_u)\n#define u_vfscanf U_ICU_ENTRY_POINT_RENAME(u_vfscanf)\n#define u_vfscanf_u U_ICU_ENTRY_POINT_RENAME(u_vfscanf_u)\n#define u_vparseMessage U_ICU_ENTRY_POINT_RENAME(u_vparseMessage)\n#define u_vparseMessageWithError U_ICU_ENTRY_POINT_RENAME(u_vparseMessageWithError)\n#define u_vsnprintf U_ICU_ENTRY_POINT_RENAME(u_vsnprintf)\n#define u_vsnprintf_u U_ICU_ENTRY_POINT_RENAME(u_vsnprintf_u)\n#define u_vsprintf U_ICU_ENTRY_POINT_RENAME(u_vsprintf)\n#define u_vsprintf_u U_ICU_ENTRY_POINT_RENAME(u_vsprintf_u)\n#define u_vsscanf U_ICU_ENTRY_POINT_RENAME(u_vsscanf)\n#define u_vsscanf_u U_ICU_ENTRY_POINT_RENAME(u_vsscanf_u)\n#define u_writeIdenticalLevelRun U_ICU_ENTRY_POINT_RENAME(u_writeIdenticalLevelRun)\n#define ubidi_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(ubidi_addPropertyStarts)\n#define ubidi_close U_ICU_ENTRY_POINT_RENAME(ubidi_close)\n#define ubidi_countParagraphs U_ICU_ENTRY_POINT_RENAME(ubidi_countParagraphs)\n#define ubidi_countRuns U_ICU_ENTRY_POINT_RENAME(ubidi_countRuns)\n#define ubidi_getBaseDirection U_ICU_ENTRY_POINT_RENAME(ubidi_getBaseDirection)\n#define ubidi_getClass U_ICU_ENTRY_POINT_RENAME(ubidi_getClass)\n#define ubidi_getClassCallback U_ICU_ENTRY_POINT_RENAME(ubidi_getClassCallback)\n#define ubidi_getCustomizedClass U_ICU_ENTRY_POINT_RENAME(ubidi_getCustomizedClass)\n#define ubidi_getDirection U_ICU_ENTRY_POINT_RENAME(ubidi_getDirection)\n#define ubidi_getJoiningGroup U_ICU_ENTRY_POINT_RENAME(ubidi_getJoiningGroup)\n#define ubidi_getJoiningType U_ICU_ENTRY_POINT_RENAME(ubidi_getJoiningType)\n#define ubidi_getLength U_ICU_ENTRY_POINT_RENAME(ubidi_getLength)\n#define ubidi_getLevelAt U_ICU_ENTRY_POINT_RENAME(ubidi_getLevelAt)\n#define ubidi_getLevels U_ICU_ENTRY_POINT_RENAME(ubidi_getLevels)\n#define ubidi_getLogicalIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalIndex)\n#define ubidi_getLogicalMap U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalMap)\n#define ubidi_getLogicalRun U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalRun)\n#define ubidi_getMaxValue U_ICU_ENTRY_POINT_RENAME(ubidi_getMaxValue)\n#define ubidi_getMemory U_ICU_ENTRY_POINT_RENAME(ubidi_getMemory)\n#define ubidi_getMirror U_ICU_ENTRY_POINT_RENAME(ubidi_getMirror)\n#define ubidi_getPairedBracket U_ICU_ENTRY_POINT_RENAME(ubidi_getPairedBracket)\n#define ubidi_getPairedBracketType U_ICU_ENTRY_POINT_RENAME(ubidi_getPairedBracketType)\n#define ubidi_getParaLevel U_ICU_ENTRY_POINT_RENAME(ubidi_getParaLevel)\n#define ubidi_getParaLevelAtIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getParaLevelAtIndex)\n#define ubidi_getParagraph U_ICU_ENTRY_POINT_RENAME(ubidi_getParagraph)\n#define ubidi_getParagraphByIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getParagraphByIndex)\n#define ubidi_getProcessedLength U_ICU_ENTRY_POINT_RENAME(ubidi_getProcessedLength)\n#define ubidi_getReorderingMode U_ICU_ENTRY_POINT_RENAME(ubidi_getReorderingMode)\n#define ubidi_getReorderingOptions U_ICU_ENTRY_POINT_RENAME(ubidi_getReorderingOptions)\n#define ubidi_getResultLength U_ICU_ENTRY_POINT_RENAME(ubidi_getResultLength)\n#define ubidi_getRuns U_ICU_ENTRY_POINT_RENAME(ubidi_getRuns)\n#define ubidi_getText U_ICU_ENTRY_POINT_RENAME(ubidi_getText)\n#define ubidi_getVisualIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualIndex)\n#define ubidi_getVisualMap U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualMap)\n#define ubidi_getVisualRun U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualRun)\n#define ubidi_invertMap U_ICU_ENTRY_POINT_RENAME(ubidi_invertMap)\n#define ubidi_isBidiControl U_ICU_ENTRY_POINT_RENAME(ubidi_isBidiControl)\n#define ubidi_isInverse U_ICU_ENTRY_POINT_RENAME(ubidi_isInverse)\n#define ubidi_isJoinControl U_ICU_ENTRY_POINT_RENAME(ubidi_isJoinControl)\n#define ubidi_isMirrored U_ICU_ENTRY_POINT_RENAME(ubidi_isMirrored)\n#define ubidi_isOrderParagraphsLTR U_ICU_ENTRY_POINT_RENAME(ubidi_isOrderParagraphsLTR)\n#define ubidi_open U_ICU_ENTRY_POINT_RENAME(ubidi_open)\n#define ubidi_openSized U_ICU_ENTRY_POINT_RENAME(ubidi_openSized)\n#define ubidi_orderParagraphsLTR U_ICU_ENTRY_POINT_RENAME(ubidi_orderParagraphsLTR)\n#define ubidi_reorderLogical U_ICU_ENTRY_POINT_RENAME(ubidi_reorderLogical)\n#define ubidi_reorderVisual U_ICU_ENTRY_POINT_RENAME(ubidi_reorderVisual)\n#define ubidi_setClassCallback U_ICU_ENTRY_POINT_RENAME(ubidi_setClassCallback)\n#define ubidi_setContext U_ICU_ENTRY_POINT_RENAME(ubidi_setContext)\n#define ubidi_setInverse U_ICU_ENTRY_POINT_RENAME(ubidi_setInverse)\n#define ubidi_setLine U_ICU_ENTRY_POINT_RENAME(ubidi_setLine)\n#define ubidi_setPara U_ICU_ENTRY_POINT_RENAME(ubidi_setPara)\n#define ubidi_setReorderingMode U_ICU_ENTRY_POINT_RENAME(ubidi_setReorderingMode)\n#define ubidi_setReorderingOptions U_ICU_ENTRY_POINT_RENAME(ubidi_setReorderingOptions)\n#define ubidi_writeReordered U_ICU_ENTRY_POINT_RENAME(ubidi_writeReordered)\n#define ubidi_writeReverse U_ICU_ENTRY_POINT_RENAME(ubidi_writeReverse)\n#define ubiditransform_close U_ICU_ENTRY_POINT_RENAME(ubiditransform_close)\n#define ubiditransform_open U_ICU_ENTRY_POINT_RENAME(ubiditransform_open)\n#define ubiditransform_transform U_ICU_ENTRY_POINT_RENAME(ubiditransform_transform)\n#define ublock_getCode U_ICU_ENTRY_POINT_RENAME(ublock_getCode)\n#define ubrk_close U_ICU_ENTRY_POINT_RENAME(ubrk_close)\n#define ubrk_countAvailable U_ICU_ENTRY_POINT_RENAME(ubrk_countAvailable)\n#define ubrk_current U_ICU_ENTRY_POINT_RENAME(ubrk_current)\n#define ubrk_first U_ICU_ENTRY_POINT_RENAME(ubrk_first)\n#define ubrk_following U_ICU_ENTRY_POINT_RENAME(ubrk_following)\n#define ubrk_getAvailable U_ICU_ENTRY_POINT_RENAME(ubrk_getAvailable)\n#define ubrk_getBinaryRules U_ICU_ENTRY_POINT_RENAME(ubrk_getBinaryRules)\n#define ubrk_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ubrk_getLocaleByType)\n#define ubrk_getRuleStatus U_ICU_ENTRY_POINT_RENAME(ubrk_getRuleStatus)\n#define ubrk_getRuleStatusVec U_ICU_ENTRY_POINT_RENAME(ubrk_getRuleStatusVec)\n#define ubrk_isBoundary U_ICU_ENTRY_POINT_RENAME(ubrk_isBoundary)\n#define ubrk_last U_ICU_ENTRY_POINT_RENAME(ubrk_last)\n#define ubrk_next U_ICU_ENTRY_POINT_RENAME(ubrk_next)\n#define ubrk_open U_ICU_ENTRY_POINT_RENAME(ubrk_open)\n#define ubrk_openBinaryRules U_ICU_ENTRY_POINT_RENAME(ubrk_openBinaryRules)\n#define ubrk_openRules U_ICU_ENTRY_POINT_RENAME(ubrk_openRules)\n#define ubrk_preceding U_ICU_ENTRY_POINT_RENAME(ubrk_preceding)\n#define ubrk_previous U_ICU_ENTRY_POINT_RENAME(ubrk_previous)\n#define ubrk_refreshUText U_ICU_ENTRY_POINT_RENAME(ubrk_refreshUText)\n#define ubrk_safeClone U_ICU_ENTRY_POINT_RENAME(ubrk_safeClone)\n#define ubrk_setText U_ICU_ENTRY_POINT_RENAME(ubrk_setText)\n#define ubrk_setUText U_ICU_ENTRY_POINT_RENAME(ubrk_setUText)\n#define ubrk_swap U_ICU_ENTRY_POINT_RENAME(ubrk_swap)\n#define ucache_compareKeys U_ICU_ENTRY_POINT_RENAME(ucache_compareKeys)\n#define ucache_deleteKey U_ICU_ENTRY_POINT_RENAME(ucache_deleteKey)\n#define ucache_hashKeys U_ICU_ENTRY_POINT_RENAME(ucache_hashKeys)\n#define ucal_add U_ICU_ENTRY_POINT_RENAME(ucal_add)\n#define ucal_clear U_ICU_ENTRY_POINT_RENAME(ucal_clear)\n#define ucal_clearField U_ICU_ENTRY_POINT_RENAME(ucal_clearField)\n#define ucal_clone U_ICU_ENTRY_POINT_RENAME(ucal_clone)\n#define ucal_close U_ICU_ENTRY_POINT_RENAME(ucal_close)\n#define ucal_countAvailable U_ICU_ENTRY_POINT_RENAME(ucal_countAvailable)\n#define ucal_equivalentTo U_ICU_ENTRY_POINT_RENAME(ucal_equivalentTo)\n#define ucal_get U_ICU_ENTRY_POINT_RENAME(ucal_get)\n#define ucal_getAttribute U_ICU_ENTRY_POINT_RENAME(ucal_getAttribute)\n#define ucal_getAvailable U_ICU_ENTRY_POINT_RENAME(ucal_getAvailable)\n#define ucal_getCanonicalTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getCanonicalTimeZoneID)\n#define ucal_getDSTSavings U_ICU_ENTRY_POINT_RENAME(ucal_getDSTSavings)\n#define ucal_getDayOfWeekType U_ICU_ENTRY_POINT_RENAME(ucal_getDayOfWeekType)\n#define ucal_getDefaultTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_getDefaultTimeZone)\n#define ucal_getFieldDifference U_ICU_ENTRY_POINT_RENAME(ucal_getFieldDifference)\n#define ucal_getGregorianChange U_ICU_ENTRY_POINT_RENAME(ucal_getGregorianChange)\n#define ucal_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucal_getKeywordValuesForLocale)\n#define ucal_getLimit U_ICU_ENTRY_POINT_RENAME(ucal_getLimit)\n#define ucal_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ucal_getLocaleByType)\n#define ucal_getMillis U_ICU_ENTRY_POINT_RENAME(ucal_getMillis)\n#define ucal_getNow U_ICU_ENTRY_POINT_RENAME(ucal_getNow)\n#define ucal_getTZDataVersion U_ICU_ENTRY_POINT_RENAME(ucal_getTZDataVersion)\n#define ucal_getTimeZoneDisplayName U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneDisplayName)\n#define ucal_getTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneID)\n#define ucal_getTimeZoneIDForWindowsID U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneIDForWindowsID)\n#define ucal_getTimeZoneTransitionDate U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneTransitionDate)\n#define ucal_getType U_ICU_ENTRY_POINT_RENAME(ucal_getType)\n#define ucal_getWeekendTransition U_ICU_ENTRY_POINT_RENAME(ucal_getWeekendTransition)\n#define ucal_getWindowsTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getWindowsTimeZoneID)\n#define ucal_inDaylightTime U_ICU_ENTRY_POINT_RENAME(ucal_inDaylightTime)\n#define ucal_isSet U_ICU_ENTRY_POINT_RENAME(ucal_isSet)\n#define ucal_isWeekend U_ICU_ENTRY_POINT_RENAME(ucal_isWeekend)\n#define ucal_open U_ICU_ENTRY_POINT_RENAME(ucal_open)\n#define ucal_openCountryTimeZones U_ICU_ENTRY_POINT_RENAME(ucal_openCountryTimeZones)\n#define ucal_openTimeZoneIDEnumeration U_ICU_ENTRY_POINT_RENAME(ucal_openTimeZoneIDEnumeration)\n#define ucal_openTimeZones U_ICU_ENTRY_POINT_RENAME(ucal_openTimeZones)\n#define ucal_roll U_ICU_ENTRY_POINT_RENAME(ucal_roll)\n#define ucal_set U_ICU_ENTRY_POINT_RENAME(ucal_set)\n#define ucal_setAttribute U_ICU_ENTRY_POINT_RENAME(ucal_setAttribute)\n#define ucal_setDate U_ICU_ENTRY_POINT_RENAME(ucal_setDate)\n#define ucal_setDateTime U_ICU_ENTRY_POINT_RENAME(ucal_setDateTime)\n#define ucal_setDefaultTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_setDefaultTimeZone)\n#define ucal_setGregorianChange U_ICU_ENTRY_POINT_RENAME(ucal_setGregorianChange)\n#define ucal_setMillis U_ICU_ENTRY_POINT_RENAME(ucal_setMillis)\n#define ucal_setTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_setTimeZone)\n#define ucase_addCaseClosure U_ICU_ENTRY_POINT_RENAME(ucase_addCaseClosure)\n#define ucase_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(ucase_addPropertyStarts)\n#define ucase_addStringCaseClosure U_ICU_ENTRY_POINT_RENAME(ucase_addStringCaseClosure)\n#define ucase_fold U_ICU_ENTRY_POINT_RENAME(ucase_fold)\n#define ucase_getCaseLocale U_ICU_ENTRY_POINT_RENAME(ucase_getCaseLocale)\n#define ucase_getTrie U_ICU_ENTRY_POINT_RENAME(ucase_getTrie)\n#define ucase_getType U_ICU_ENTRY_POINT_RENAME(ucase_getType)\n#define ucase_getTypeOrIgnorable U_ICU_ENTRY_POINT_RENAME(ucase_getTypeOrIgnorable)\n#define ucase_hasBinaryProperty U_ICU_ENTRY_POINT_RENAME(ucase_hasBinaryProperty)\n#define ucase_isCaseSensitive U_ICU_ENTRY_POINT_RENAME(ucase_isCaseSensitive)\n#define ucase_isSoftDotted U_ICU_ENTRY_POINT_RENAME(ucase_isSoftDotted)\n#define ucase_toFullFolding U_ICU_ENTRY_POINT_RENAME(ucase_toFullFolding)\n#define ucase_toFullLower U_ICU_ENTRY_POINT_RENAME(ucase_toFullLower)\n#define ucase_toFullTitle U_ICU_ENTRY_POINT_RENAME(ucase_toFullTitle)\n#define ucase_toFullUpper U_ICU_ENTRY_POINT_RENAME(ucase_toFullUpper)\n#define ucase_tolower U_ICU_ENTRY_POINT_RENAME(ucase_tolower)\n#define ucase_totitle U_ICU_ENTRY_POINT_RENAME(ucase_totitle)\n#define ucase_toupper U_ICU_ENTRY_POINT_RENAME(ucase_toupper)\n#define ucasemap_close U_ICU_ENTRY_POINT_RENAME(ucasemap_close)\n#define ucasemap_getBreakIterator U_ICU_ENTRY_POINT_RENAME(ucasemap_getBreakIterator)\n#define ucasemap_getLocale U_ICU_ENTRY_POINT_RENAME(ucasemap_getLocale)\n#define ucasemap_getOptions U_ICU_ENTRY_POINT_RENAME(ucasemap_getOptions)\n#define ucasemap_internalUTF8ToTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_internalUTF8ToTitle)\n#define ucasemap_mapUTF8 U_ICU_ENTRY_POINT_RENAME(ucasemap_mapUTF8)\n#define ucasemap_open U_ICU_ENTRY_POINT_RENAME(ucasemap_open)\n#define ucasemap_setBreakIterator U_ICU_ENTRY_POINT_RENAME(ucasemap_setBreakIterator)\n#define ucasemap_setLocale U_ICU_ENTRY_POINT_RENAME(ucasemap_setLocale)\n#define ucasemap_setOptions U_ICU_ENTRY_POINT_RENAME(ucasemap_setOptions)\n#define ucasemap_toTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_toTitle)\n#define ucasemap_utf8FoldCase U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8FoldCase)\n#define ucasemap_utf8ToLower U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToLower)\n#define ucasemap_utf8ToTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToTitle)\n#define ucasemap_utf8ToUpper U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToUpper)\n#define ucfpos_close U_ICU_ENTRY_POINT_RENAME(ucfpos_close)\n#define ucfpos_constrainCategory U_ICU_ENTRY_POINT_RENAME(ucfpos_constrainCategory)\n#define ucfpos_constrainField U_ICU_ENTRY_POINT_RENAME(ucfpos_constrainField)\n#define ucfpos_getCategory U_ICU_ENTRY_POINT_RENAME(ucfpos_getCategory)\n#define ucfpos_getField U_ICU_ENTRY_POINT_RENAME(ucfpos_getField)\n#define ucfpos_getIndexes U_ICU_ENTRY_POINT_RENAME(ucfpos_getIndexes)\n#define ucfpos_getInt64IterationContext U_ICU_ENTRY_POINT_RENAME(ucfpos_getInt64IterationContext)\n#define ucfpos_matchesField U_ICU_ENTRY_POINT_RENAME(ucfpos_matchesField)\n#define ucfpos_open U_ICU_ENTRY_POINT_RENAME(ucfpos_open)\n#define ucfpos_reset U_ICU_ENTRY_POINT_RENAME(ucfpos_reset)\n#define ucfpos_setInt64IterationContext U_ICU_ENTRY_POINT_RENAME(ucfpos_setInt64IterationContext)\n#define ucfpos_setState U_ICU_ENTRY_POINT_RENAME(ucfpos_setState)\n#define uchar_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(uchar_addPropertyStarts)\n#define uchar_swapNames U_ICU_ENTRY_POINT_RENAME(uchar_swapNames)\n#define ucln_cleanupOne U_ICU_ENTRY_POINT_RENAME(ucln_cleanupOne)\n#define ucln_common_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_common_registerCleanup)\n#define ucln_i18n_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_i18n_registerCleanup)\n#define ucln_io_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_io_registerCleanup)\n#define ucln_lib_cleanup U_ICU_ENTRY_POINT_RENAME(ucln_lib_cleanup)\n#define ucln_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_registerCleanup)\n#define ucnv_MBCSFromUChar32 U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSFromUChar32)\n#define ucnv_MBCSFromUnicodeWithOffsets U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSFromUnicodeWithOffsets)\n#define ucnv_MBCSGetFilteredUnicodeSetForUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetFilteredUnicodeSetForUnicode)\n#define ucnv_MBCSGetType U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetType)\n#define ucnv_MBCSGetUnicodeSetForUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetUnicodeSetForUnicode)\n#define ucnv_MBCSIsLeadByte U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSIsLeadByte)\n#define ucnv_MBCSSimpleGetNextUChar U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSSimpleGetNextUChar)\n#define ucnv_MBCSToUnicodeWithOffsets U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSToUnicodeWithOffsets)\n#define ucnv_bld_countAvailableConverters U_ICU_ENTRY_POINT_RENAME(ucnv_bld_countAvailableConverters)\n#define ucnv_bld_getAvailableConverter U_ICU_ENTRY_POINT_RENAME(ucnv_bld_getAvailableConverter)\n#define ucnv_canCreateConverter U_ICU_ENTRY_POINT_RENAME(ucnv_canCreateConverter)\n#define ucnv_cbFromUWriteBytes U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteBytes)\n#define ucnv_cbFromUWriteSub U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteSub)\n#define ucnv_cbFromUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteUChars)\n#define ucnv_cbToUWriteSub U_ICU_ENTRY_POINT_RENAME(ucnv_cbToUWriteSub)\n#define ucnv_cbToUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_cbToUWriteUChars)\n#define ucnv_close U_ICU_ENTRY_POINT_RENAME(ucnv_close)\n#define ucnv_compareNames U_ICU_ENTRY_POINT_RENAME(ucnv_compareNames)\n#define ucnv_convert U_ICU_ENTRY_POINT_RENAME(ucnv_convert)\n#define ucnv_convertEx U_ICU_ENTRY_POINT_RENAME(ucnv_convertEx)\n#define ucnv_countAliases U_ICU_ENTRY_POINT_RENAME(ucnv_countAliases)\n#define ucnv_countAvailable U_ICU_ENTRY_POINT_RENAME(ucnv_countAvailable)\n#define ucnv_countStandards U_ICU_ENTRY_POINT_RENAME(ucnv_countStandards)\n#define ucnv_createAlgorithmicConverter U_ICU_ENTRY_POINT_RENAME(ucnv_createAlgorithmicConverter)\n#define ucnv_createConverter U_ICU_ENTRY_POINT_RENAME(ucnv_createConverter)\n#define ucnv_createConverterFromPackage U_ICU_ENTRY_POINT_RENAME(ucnv_createConverterFromPackage)\n#define ucnv_createConverterFromSharedData U_ICU_ENTRY_POINT_RENAME(ucnv_createConverterFromSharedData)\n#define ucnv_detectUnicodeSignature U_ICU_ENTRY_POINT_RENAME(ucnv_detectUnicodeSignature)\n#define ucnv_enableCleanup U_ICU_ENTRY_POINT_RENAME(ucnv_enableCleanup)\n#define ucnv_extContinueMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extContinueMatchFromU)\n#define ucnv_extContinueMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extContinueMatchToU)\n#define ucnv_extGetUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_extGetUnicodeSet)\n#define ucnv_extInitialMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extInitialMatchFromU)\n#define ucnv_extInitialMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extInitialMatchToU)\n#define ucnv_extSimpleMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extSimpleMatchFromU)\n#define ucnv_extSimpleMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extSimpleMatchToU)\n#define ucnv_fixFileSeparator U_ICU_ENTRY_POINT_RENAME(ucnv_fixFileSeparator)\n#define ucnv_flushCache U_ICU_ENTRY_POINT_RENAME(ucnv_flushCache)\n#define ucnv_fromAlgorithmic U_ICU_ENTRY_POINT_RENAME(ucnv_fromAlgorithmic)\n#define ucnv_fromUChars U_ICU_ENTRY_POINT_RENAME(ucnv_fromUChars)\n#define ucnv_fromUCountPending U_ICU_ENTRY_POINT_RENAME(ucnv_fromUCountPending)\n#define ucnv_fromUWriteBytes U_ICU_ENTRY_POINT_RENAME(ucnv_fromUWriteBytes)\n#define ucnv_fromUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode)\n#define ucnv_fromUnicode_UTF8 U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode_UTF8)\n#define ucnv_fromUnicode_UTF8_OFFSETS_LOGIC U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode_UTF8_OFFSETS_LOGIC)\n#define ucnv_getAlias U_ICU_ENTRY_POINT_RENAME(ucnv_getAlias)\n#define ucnv_getAliases U_ICU_ENTRY_POINT_RENAME(ucnv_getAliases)\n#define ucnv_getAvailableName U_ICU_ENTRY_POINT_RENAME(ucnv_getAvailableName)\n#define ucnv_getCCSID U_ICU_ENTRY_POINT_RENAME(ucnv_getCCSID)\n#define ucnv_getCanonicalName U_ICU_ENTRY_POINT_RENAME(ucnv_getCanonicalName)\n#define ucnv_getCompleteUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getCompleteUnicodeSet)\n#define ucnv_getDefaultName U_ICU_ENTRY_POINT_RENAME(ucnv_getDefaultName)\n#define ucnv_getDisplayName U_ICU_ENTRY_POINT_RENAME(ucnv_getDisplayName)\n#define ucnv_getFromUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_getFromUCallBack)\n#define ucnv_getInvalidChars U_ICU_ENTRY_POINT_RENAME(ucnv_getInvalidChars)\n#define ucnv_getInvalidUChars U_ICU_ENTRY_POINT_RENAME(ucnv_getInvalidUChars)\n#define ucnv_getMaxCharSize U_ICU_ENTRY_POINT_RENAME(ucnv_getMaxCharSize)\n#define ucnv_getMinCharSize U_ICU_ENTRY_POINT_RENAME(ucnv_getMinCharSize)\n#define ucnv_getName U_ICU_ENTRY_POINT_RENAME(ucnv_getName)\n#define ucnv_getNextUChar U_ICU_ENTRY_POINT_RENAME(ucnv_getNextUChar)\n#define ucnv_getNonSurrogateUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getNonSurrogateUnicodeSet)\n#define ucnv_getPlatform U_ICU_ENTRY_POINT_RENAME(ucnv_getPlatform)\n#define ucnv_getStandard U_ICU_ENTRY_POINT_RENAME(ucnv_getStandard)\n#define ucnv_getStandardName U_ICU_ENTRY_POINT_RENAME(ucnv_getStandardName)\n#define ucnv_getStarters U_ICU_ENTRY_POINT_RENAME(ucnv_getStarters)\n#define ucnv_getSubstChars U_ICU_ENTRY_POINT_RENAME(ucnv_getSubstChars)\n#define ucnv_getToUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_getToUCallBack)\n#define ucnv_getType U_ICU_ENTRY_POINT_RENAME(ucnv_getType)\n#define ucnv_getUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getUnicodeSet)\n#define ucnv_incrementRefCount U_ICU_ENTRY_POINT_RENAME(ucnv_incrementRefCount)\n#define ucnv_io_countKnownConverters U_ICU_ENTRY_POINT_RENAME(ucnv_io_countKnownConverters)\n#define ucnv_io_getConverterName U_ICU_ENTRY_POINT_RENAME(ucnv_io_getConverterName)\n#define ucnv_io_stripASCIIForCompare U_ICU_ENTRY_POINT_RENAME(ucnv_io_stripASCIIForCompare)\n#define ucnv_io_stripEBCDICForCompare U_ICU_ENTRY_POINT_RENAME(ucnv_io_stripEBCDICForCompare)\n#define ucnv_isAmbiguous U_ICU_ENTRY_POINT_RENAME(ucnv_isAmbiguous)\n#define ucnv_isFixedWidth U_ICU_ENTRY_POINT_RENAME(ucnv_isFixedWidth)\n#define ucnv_load U_ICU_ENTRY_POINT_RENAME(ucnv_load)\n#define ucnv_loadSharedData U_ICU_ENTRY_POINT_RENAME(ucnv_loadSharedData)\n#define ucnv_open U_ICU_ENTRY_POINT_RENAME(ucnv_open)\n#define ucnv_openAllNames U_ICU_ENTRY_POINT_RENAME(ucnv_openAllNames)\n#define ucnv_openCCSID U_ICU_ENTRY_POINT_RENAME(ucnv_openCCSID)\n#define ucnv_openPackage U_ICU_ENTRY_POINT_RENAME(ucnv_openPackage)\n#define ucnv_openStandardNames U_ICU_ENTRY_POINT_RENAME(ucnv_openStandardNames)\n#define ucnv_openU U_ICU_ENTRY_POINT_RENAME(ucnv_openU)\n#define ucnv_reset U_ICU_ENTRY_POINT_RENAME(ucnv_reset)\n#define ucnv_resetFromUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_resetFromUnicode)\n#define ucnv_resetToUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_resetToUnicode)\n#define ucnv_safeClone U_ICU_ENTRY_POINT_RENAME(ucnv_safeClone)\n#define ucnv_setDefaultName U_ICU_ENTRY_POINT_RENAME(ucnv_setDefaultName)\n#define ucnv_setFallback U_ICU_ENTRY_POINT_RENAME(ucnv_setFallback)\n#define ucnv_setFromUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_setFromUCallBack)\n#define ucnv_setSubstChars U_ICU_ENTRY_POINT_RENAME(ucnv_setSubstChars)\n#define ucnv_setSubstString U_ICU_ENTRY_POINT_RENAME(ucnv_setSubstString)\n#define ucnv_setToUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_setToUCallBack)\n#define ucnv_swap U_ICU_ENTRY_POINT_RENAME(ucnv_swap)\n#define ucnv_swapAliases U_ICU_ENTRY_POINT_RENAME(ucnv_swapAliases)\n#define ucnv_toAlgorithmic U_ICU_ENTRY_POINT_RENAME(ucnv_toAlgorithmic)\n#define ucnv_toUChars U_ICU_ENTRY_POINT_RENAME(ucnv_toUChars)\n#define ucnv_toUCountPending U_ICU_ENTRY_POINT_RENAME(ucnv_toUCountPending)\n#define ucnv_toUWriteCodePoint U_ICU_ENTRY_POINT_RENAME(ucnv_toUWriteCodePoint)\n#define ucnv_toUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_toUWriteUChars)\n#define ucnv_toUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_toUnicode)\n#define ucnv_unload U_ICU_ENTRY_POINT_RENAME(ucnv_unload)\n#define ucnv_unloadSharedDataIfReady U_ICU_ENTRY_POINT_RENAME(ucnv_unloadSharedDataIfReady)\n#define ucnv_usesFallback U_ICU_ENTRY_POINT_RENAME(ucnv_usesFallback)\n#define ucnvsel_close U_ICU_ENTRY_POINT_RENAME(ucnvsel_close)\n#define ucnvsel_open U_ICU_ENTRY_POINT_RENAME(ucnvsel_open)\n#define ucnvsel_openFromSerialized U_ICU_ENTRY_POINT_RENAME(ucnvsel_openFromSerialized)\n#define ucnvsel_selectForString U_ICU_ENTRY_POINT_RENAME(ucnvsel_selectForString)\n#define ucnvsel_selectForUTF8 U_ICU_ENTRY_POINT_RENAME(ucnvsel_selectForUTF8)\n#define ucnvsel_serialize U_ICU_ENTRY_POINT_RENAME(ucnvsel_serialize)\n#define ucol_cloneBinary U_ICU_ENTRY_POINT_RENAME(ucol_cloneBinary)\n#define ucol_close U_ICU_ENTRY_POINT_RENAME(ucol_close)\n#define ucol_closeElements U_ICU_ENTRY_POINT_RENAME(ucol_closeElements)\n#define ucol_countAvailable U_ICU_ENTRY_POINT_RENAME(ucol_countAvailable)\n#define ucol_equal U_ICU_ENTRY_POINT_RENAME(ucol_equal)\n#define ucol_equals U_ICU_ENTRY_POINT_RENAME(ucol_equals)\n#define ucol_getAttribute U_ICU_ENTRY_POINT_RENAME(ucol_getAttribute)\n#define ucol_getAvailable U_ICU_ENTRY_POINT_RENAME(ucol_getAvailable)\n#define ucol_getBound U_ICU_ENTRY_POINT_RENAME(ucol_getBound)\n#define ucol_getContractions U_ICU_ENTRY_POINT_RENAME(ucol_getContractions)\n#define ucol_getContractionsAndExpansions U_ICU_ENTRY_POINT_RENAME(ucol_getContractionsAndExpansions)\n#define ucol_getDisplayName U_ICU_ENTRY_POINT_RENAME(ucol_getDisplayName)\n#define ucol_getEquivalentReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_getEquivalentReorderCodes)\n#define ucol_getFunctionalEquivalent U_ICU_ENTRY_POINT_RENAME(ucol_getFunctionalEquivalent)\n#define ucol_getKeywordValues U_ICU_ENTRY_POINT_RENAME(ucol_getKeywordValues)\n#define ucol_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucol_getKeywordValuesForLocale)\n#define ucol_getKeywords U_ICU_ENTRY_POINT_RENAME(ucol_getKeywords)\n#define ucol_getLocale U_ICU_ENTRY_POINT_RENAME(ucol_getLocale)\n#define ucol_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ucol_getLocaleByType)\n#define ucol_getMaxExpansion U_ICU_ENTRY_POINT_RENAME(ucol_getMaxExpansion)\n#define ucol_getMaxVariable U_ICU_ENTRY_POINT_RENAME(ucol_getMaxVariable)\n#define ucol_getOffset U_ICU_ENTRY_POINT_RENAME(ucol_getOffset)\n#define ucol_getReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_getReorderCodes)\n#define ucol_getRules U_ICU_ENTRY_POINT_RENAME(ucol_getRules)\n#define ucol_getRulesEx U_ICU_ENTRY_POINT_RENAME(ucol_getRulesEx)\n#define ucol_getShortDefinitionString U_ICU_ENTRY_POINT_RENAME(ucol_getShortDefinitionString)\n#define ucol_getSortKey U_ICU_ENTRY_POINT_RENAME(ucol_getSortKey)\n#define ucol_getStrength U_ICU_ENTRY_POINT_RENAME(ucol_getStrength)\n#define ucol_getTailoredSet U_ICU_ENTRY_POINT_RENAME(ucol_getTailoredSet)\n#define ucol_getUCAVersion U_ICU_ENTRY_POINT_RENAME(ucol_getUCAVersion)\n#define ucol_getUnsafeSet U_ICU_ENTRY_POINT_RENAME(ucol_getUnsafeSet)\n#define ucol_getVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_getVariableTop)\n#define ucol_getVersion U_ICU_ENTRY_POINT_RENAME(ucol_getVersion)\n#define ucol_greater U_ICU_ENTRY_POINT_RENAME(ucol_greater)\n#define ucol_greaterOrEqual U_ICU_ENTRY_POINT_RENAME(ucol_greaterOrEqual)\n#define ucol_keyHashCode U_ICU_ENTRY_POINT_RENAME(ucol_keyHashCode)\n#define ucol_looksLikeCollationBinary U_ICU_ENTRY_POINT_RENAME(ucol_looksLikeCollationBinary)\n#define ucol_mergeSortkeys U_ICU_ENTRY_POINT_RENAME(ucol_mergeSortkeys)\n#define ucol_next U_ICU_ENTRY_POINT_RENAME(ucol_next)\n#define ucol_nextSortKeyPart U_ICU_ENTRY_POINT_RENAME(ucol_nextSortKeyPart)\n#define ucol_normalizeShortDefinitionString U_ICU_ENTRY_POINT_RENAME(ucol_normalizeShortDefinitionString)\n#define ucol_open U_ICU_ENTRY_POINT_RENAME(ucol_open)\n#define ucol_openAvailableLocales U_ICU_ENTRY_POINT_RENAME(ucol_openAvailableLocales)\n#define ucol_openBinary U_ICU_ENTRY_POINT_RENAME(ucol_openBinary)\n#define ucol_openElements U_ICU_ENTRY_POINT_RENAME(ucol_openElements)\n#define ucol_openFromShortString U_ICU_ENTRY_POINT_RENAME(ucol_openFromShortString)\n#define ucol_openRules U_ICU_ENTRY_POINT_RENAME(ucol_openRules)\n#define ucol_prepareShortStringOpen U_ICU_ENTRY_POINT_RENAME(ucol_prepareShortStringOpen)\n#define ucol_previous U_ICU_ENTRY_POINT_RENAME(ucol_previous)\n#define ucol_primaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_primaryOrder)\n#define ucol_reset U_ICU_ENTRY_POINT_RENAME(ucol_reset)\n#define ucol_restoreVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_restoreVariableTop)\n#define ucol_safeClone U_ICU_ENTRY_POINT_RENAME(ucol_safeClone)\n#define ucol_secondaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_secondaryOrder)\n#define ucol_setAttribute U_ICU_ENTRY_POINT_RENAME(ucol_setAttribute)\n#define ucol_setMaxVariable U_ICU_ENTRY_POINT_RENAME(ucol_setMaxVariable)\n#define ucol_setOffset U_ICU_ENTRY_POINT_RENAME(ucol_setOffset)\n#define ucol_setReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_setReorderCodes)\n#define ucol_setStrength U_ICU_ENTRY_POINT_RENAME(ucol_setStrength)\n#define ucol_setText U_ICU_ENTRY_POINT_RENAME(ucol_setText)\n#define ucol_setVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_setVariableTop)\n#define ucol_strcoll U_ICU_ENTRY_POINT_RENAME(ucol_strcoll)\n#define ucol_strcollIter U_ICU_ENTRY_POINT_RENAME(ucol_strcollIter)\n#define ucol_strcollUTF8 U_ICU_ENTRY_POINT_RENAME(ucol_strcollUTF8)\n#define ucol_swap U_ICU_ENTRY_POINT_RENAME(ucol_swap)\n#define ucol_swapInverseUCA U_ICU_ENTRY_POINT_RENAME(ucol_swapInverseUCA)\n#define ucol_tertiaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_tertiaryOrder)\n#define ucpmap_get U_ICU_ENTRY_POINT_RENAME(ucpmap_get)\n#define ucpmap_getRange U_ICU_ENTRY_POINT_RENAME(ucpmap_getRange)\n#define ucptrie_close U_ICU_ENTRY_POINT_RENAME(ucptrie_close)\n#define ucptrie_get U_ICU_ENTRY_POINT_RENAME(ucptrie_get)\n#define ucptrie_getRange U_ICU_ENTRY_POINT_RENAME(ucptrie_getRange)\n#define ucptrie_getType U_ICU_ENTRY_POINT_RENAME(ucptrie_getType)\n#define ucptrie_getValueWidth U_ICU_ENTRY_POINT_RENAME(ucptrie_getValueWidth)\n#define ucptrie_internalGetRange U_ICU_ENTRY_POINT_RENAME(ucptrie_internalGetRange)\n#define ucptrie_internalSmallIndex U_ICU_ENTRY_POINT_RENAME(ucptrie_internalSmallIndex)\n#define ucptrie_internalSmallU8Index U_ICU_ENTRY_POINT_RENAME(ucptrie_internalSmallU8Index)\n#define ucptrie_internalU8PrevIndex U_ICU_ENTRY_POINT_RENAME(ucptrie_internalU8PrevIndex)\n#define ucptrie_openFromBinary U_ICU_ENTRY_POINT_RENAME(ucptrie_openFromBinary)\n#define ucptrie_swap U_ICU_ENTRY_POINT_RENAME(ucptrie_swap)\n#define ucptrie_toBinary U_ICU_ENTRY_POINT_RENAME(ucptrie_toBinary)\n#define ucsdet_close U_ICU_ENTRY_POINT_RENAME(ucsdet_close)\n#define ucsdet_detect U_ICU_ENTRY_POINT_RENAME(ucsdet_detect)\n#define ucsdet_detectAll U_ICU_ENTRY_POINT_RENAME(ucsdet_detectAll)\n#define ucsdet_enableInputFilter U_ICU_ENTRY_POINT_RENAME(ucsdet_enableInputFilter)\n#define ucsdet_getAllDetectableCharsets U_ICU_ENTRY_POINT_RENAME(ucsdet_getAllDetectableCharsets)\n#define ucsdet_getConfidence U_ICU_ENTRY_POINT_RENAME(ucsdet_getConfidence)\n#define ucsdet_getDetectableCharsets U_ICU_ENTRY_POINT_RENAME(ucsdet_getDetectableCharsets)\n#define ucsdet_getLanguage U_ICU_ENTRY_POINT_RENAME(ucsdet_getLanguage)\n#define ucsdet_getName U_ICU_ENTRY_POINT_RENAME(ucsdet_getName)\n#define ucsdet_getUChars U_ICU_ENTRY_POINT_RENAME(ucsdet_getUChars)\n#define ucsdet_isInputFilterEnabled U_ICU_ENTRY_POINT_RENAME(ucsdet_isInputFilterEnabled)\n#define ucsdet_open U_ICU_ENTRY_POINT_RENAME(ucsdet_open)\n#define ucsdet_setDeclaredEncoding U_ICU_ENTRY_POINT_RENAME(ucsdet_setDeclaredEncoding)\n#define ucsdet_setDetectableCharset U_ICU_ENTRY_POINT_RENAME(ucsdet_setDetectableCharset)\n#define ucsdet_setText U_ICU_ENTRY_POINT_RENAME(ucsdet_setText)\n#define ucurr_countCurrencies U_ICU_ENTRY_POINT_RENAME(ucurr_countCurrencies)\n#define ucurr_forLocale U_ICU_ENTRY_POINT_RENAME(ucurr_forLocale)\n#define ucurr_forLocaleAndDate U_ICU_ENTRY_POINT_RENAME(ucurr_forLocaleAndDate)\n#define ucurr_getDefaultFractionDigits U_ICU_ENTRY_POINT_RENAME(ucurr_getDefaultFractionDigits)\n#define ucurr_getDefaultFractionDigitsForUsage U_ICU_ENTRY_POINT_RENAME(ucurr_getDefaultFractionDigitsForUsage)\n#define ucurr_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucurr_getKeywordValuesForLocale)\n#define ucurr_getName U_ICU_ENTRY_POINT_RENAME(ucurr_getName)\n#define ucurr_getNumericCode U_ICU_ENTRY_POINT_RENAME(ucurr_getNumericCode)\n#define ucurr_getPluralName U_ICU_ENTRY_POINT_RENAME(ucurr_getPluralName)\n#define ucurr_getRoundingIncrement U_ICU_ENTRY_POINT_RENAME(ucurr_getRoundingIncrement)\n#define ucurr_getRoundingIncrementForUsage U_ICU_ENTRY_POINT_RENAME(ucurr_getRoundingIncrementForUsage)\n#define ucurr_isAvailable U_ICU_ENTRY_POINT_RENAME(ucurr_isAvailable)\n#define ucurr_openISOCurrencies U_ICU_ENTRY_POINT_RENAME(ucurr_openISOCurrencies)\n#define ucurr_register U_ICU_ENTRY_POINT_RENAME(ucurr_register)\n#define ucurr_unregister U_ICU_ENTRY_POINT_RENAME(ucurr_unregister)\n#define udat_adoptNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_adoptNumberFormat)\n#define udat_adoptNumberFormatForFields U_ICU_ENTRY_POINT_RENAME(udat_adoptNumberFormatForFields)\n#define udat_applyPattern U_ICU_ENTRY_POINT_RENAME(udat_applyPattern)\n#define udat_applyPatternRelative U_ICU_ENTRY_POINT_RENAME(udat_applyPatternRelative)\n#define udat_clone U_ICU_ENTRY_POINT_RENAME(udat_clone)\n#define udat_close U_ICU_ENTRY_POINT_RENAME(udat_close)\n#define udat_countAvailable U_ICU_ENTRY_POINT_RENAME(udat_countAvailable)\n#define udat_countSymbols U_ICU_ENTRY_POINT_RENAME(udat_countSymbols)\n#define udat_format U_ICU_ENTRY_POINT_RENAME(udat_format)\n#define udat_formatCalendar U_ICU_ENTRY_POINT_RENAME(udat_formatCalendar)\n#define udat_formatCalendarForFields U_ICU_ENTRY_POINT_RENAME(udat_formatCalendarForFields)\n#define udat_formatForFields U_ICU_ENTRY_POINT_RENAME(udat_formatForFields)\n#define udat_get2DigitYearStart U_ICU_ENTRY_POINT_RENAME(udat_get2DigitYearStart)\n#define udat_getAvailable U_ICU_ENTRY_POINT_RENAME(udat_getAvailable)\n#define udat_getBooleanAttribute U_ICU_ENTRY_POINT_RENAME(udat_getBooleanAttribute)\n#define udat_getCalendar U_ICU_ENTRY_POINT_RENAME(udat_getCalendar)\n#define udat_getContext U_ICU_ENTRY_POINT_RENAME(udat_getContext)\n#define udat_getLocaleByType U_ICU_ENTRY_POINT_RENAME(udat_getLocaleByType)\n#define udat_getNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_getNumberFormat)\n#define udat_getNumberFormatForField U_ICU_ENTRY_POINT_RENAME(udat_getNumberFormatForField)\n#define udat_getSymbols U_ICU_ENTRY_POINT_RENAME(udat_getSymbols)\n#define udat_isLenient U_ICU_ENTRY_POINT_RENAME(udat_isLenient)\n#define udat_open U_ICU_ENTRY_POINT_RENAME(udat_open)\n#define udat_parse U_ICU_ENTRY_POINT_RENAME(udat_parse)\n#define udat_parseCalendar U_ICU_ENTRY_POINT_RENAME(udat_parseCalendar)\n#define udat_registerOpener U_ICU_ENTRY_POINT_RENAME(udat_registerOpener)\n#define udat_set2DigitYearStart U_ICU_ENTRY_POINT_RENAME(udat_set2DigitYearStart)\n#define udat_setBooleanAttribute U_ICU_ENTRY_POINT_RENAME(udat_setBooleanAttribute)\n#define udat_setCalendar U_ICU_ENTRY_POINT_RENAME(udat_setCalendar)\n#define udat_setContext U_ICU_ENTRY_POINT_RENAME(udat_setContext)\n#define udat_setLenient U_ICU_ENTRY_POINT_RENAME(udat_setLenient)\n#define udat_setNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_setNumberFormat)\n#define udat_setSymbols U_ICU_ENTRY_POINT_RENAME(udat_setSymbols)\n#define udat_toCalendarDateField U_ICU_ENTRY_POINT_RENAME(udat_toCalendarDateField)\n#define udat_toPattern U_ICU_ENTRY_POINT_RENAME(udat_toPattern)\n#define udat_toPatternRelativeDate U_ICU_ENTRY_POINT_RENAME(udat_toPatternRelativeDate)\n#define udat_toPatternRelativeTime U_ICU_ENTRY_POINT_RENAME(udat_toPatternRelativeTime)\n#define udat_unregisterOpener U_ICU_ENTRY_POINT_RENAME(udat_unregisterOpener)\n#define udata_checkCommonData U_ICU_ENTRY_POINT_RENAME(udata_checkCommonData)\n#define udata_close U_ICU_ENTRY_POINT_RENAME(udata_close)\n#define udata_closeSwapper U_ICU_ENTRY_POINT_RENAME(udata_closeSwapper)\n#define udata_getHeaderSize U_ICU_ENTRY_POINT_RENAME(udata_getHeaderSize)\n#define udata_getInfo U_ICU_ENTRY_POINT_RENAME(udata_getInfo)\n#define udata_getInfoSize U_ICU_ENTRY_POINT_RENAME(udata_getInfoSize)\n#define udata_getLength U_ICU_ENTRY_POINT_RENAME(udata_getLength)\n#define udata_getMemory U_ICU_ENTRY_POINT_RENAME(udata_getMemory)\n#define udata_getRawMemory U_ICU_ENTRY_POINT_RENAME(udata_getRawMemory)\n#define udata_open U_ICU_ENTRY_POINT_RENAME(udata_open)\n#define udata_openChoice U_ICU_ENTRY_POINT_RENAME(udata_openChoice)\n#define udata_openSwapper U_ICU_ENTRY_POINT_RENAME(udata_openSwapper)\n#define udata_openSwapperForInputData U_ICU_ENTRY_POINT_RENAME(udata_openSwapperForInputData)\n#define udata_printError U_ICU_ENTRY_POINT_RENAME(udata_printError)\n#define udata_readInt16 U_ICU_ENTRY_POINT_RENAME(udata_readInt16)\n#define udata_readInt32 U_ICU_ENTRY_POINT_RENAME(udata_readInt32)\n#define udata_setAppData U_ICU_ENTRY_POINT_RENAME(udata_setAppData)\n#define udata_setCommonData U_ICU_ENTRY_POINT_RENAME(udata_setCommonData)\n#define udata_setFileAccess U_ICU_ENTRY_POINT_RENAME(udata_setFileAccess)\n#define udata_swapDataHeader U_ICU_ENTRY_POINT_RENAME(udata_swapDataHeader)\n#define udata_swapInvStringBlock U_ICU_ENTRY_POINT_RENAME(udata_swapInvStringBlock)\n#define udatpg_addPattern U_ICU_ENTRY_POINT_RENAME(udatpg_addPattern)\n#define udatpg_clone U_ICU_ENTRY_POINT_RENAME(udatpg_clone)\n#define udatpg_close U_ICU_ENTRY_POINT_RENAME(udatpg_close)\n#define udatpg_getAppendItemFormat U_ICU_ENTRY_POINT_RENAME(udatpg_getAppendItemFormat)\n#define udatpg_getAppendItemName U_ICU_ENTRY_POINT_RENAME(udatpg_getAppendItemName)\n#define udatpg_getBaseSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getBaseSkeleton)\n#define udatpg_getBestPattern U_ICU_ENTRY_POINT_RENAME(udatpg_getBestPattern)\n#define udatpg_getBestPatternWithOptions U_ICU_ENTRY_POINT_RENAME(udatpg_getBestPatternWithOptions)\n#define udatpg_getDateTimeFormat U_ICU_ENTRY_POINT_RENAME(udatpg_getDateTimeFormat)\n#define udatpg_getDecimal U_ICU_ENTRY_POINT_RENAME(udatpg_getDecimal)\n#define udatpg_getFieldDisplayName U_ICU_ENTRY_POINT_RENAME(udatpg_getFieldDisplayName)\n#define udatpg_getPatternForSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getPatternForSkeleton)\n#define udatpg_getSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getSkeleton)\n#define udatpg_open U_ICU_ENTRY_POINT_RENAME(udatpg_open)\n#define udatpg_openBaseSkeletons U_ICU_ENTRY_POINT_RENAME(udatpg_openBaseSkeletons)\n#define udatpg_openEmpty U_ICU_ENTRY_POINT_RENAME(udatpg_openEmpty)\n#define udatpg_openSkeletons U_ICU_ENTRY_POINT_RENAME(udatpg_openSkeletons)\n#define udatpg_replaceFieldTypes U_ICU_ENTRY_POINT_RENAME(udatpg_replaceFieldTypes)\n#define udatpg_replaceFieldTypesWithOptions U_ICU_ENTRY_POINT_RENAME(udatpg_replaceFieldTypesWithOptions)\n#define udatpg_setAppendItemFormat U_ICU_ENTRY_POINT_RENAME(udatpg_setAppendItemFormat)\n#define udatpg_setAppendItemName U_ICU_ENTRY_POINT_RENAME(udatpg_setAppendItemName)\n#define udatpg_setDateTimeFormat U_ICU_ENTRY_POINT_RENAME(udatpg_setDateTimeFormat)\n#define udatpg_setDecimal U_ICU_ENTRY_POINT_RENAME(udatpg_setDecimal)\n#define udict_swap U_ICU_ENTRY_POINT_RENAME(udict_swap)\n#define udtitvfmt_close U_ICU_ENTRY_POINT_RENAME(udtitvfmt_close)\n#define udtitvfmt_closeResult U_ICU_ENTRY_POINT_RENAME(udtitvfmt_closeResult)\n#define udtitvfmt_format U_ICU_ENTRY_POINT_RENAME(udtitvfmt_format)\n#define udtitvfmt_formatToResult U_ICU_ENTRY_POINT_RENAME(udtitvfmt_formatToResult)\n#define udtitvfmt_open U_ICU_ENTRY_POINT_RENAME(udtitvfmt_open)\n#define udtitvfmt_openResult U_ICU_ENTRY_POINT_RENAME(udtitvfmt_openResult)\n#define udtitvfmt_resultAsValue U_ICU_ENTRY_POINT_RENAME(udtitvfmt_resultAsValue)\n#define uenum_close U_ICU_ENTRY_POINT_RENAME(uenum_close)\n#define uenum_count U_ICU_ENTRY_POINT_RENAME(uenum_count)\n#define uenum_next U_ICU_ENTRY_POINT_RENAME(uenum_next)\n#define uenum_nextDefault U_ICU_ENTRY_POINT_RENAME(uenum_nextDefault)\n#define uenum_openCharStringsEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openCharStringsEnumeration)\n#define uenum_openFromStringEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openFromStringEnumeration)\n#define uenum_openUCharStringsEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openUCharStringsEnumeration)\n#define uenum_reset U_ICU_ENTRY_POINT_RENAME(uenum_reset)\n#define uenum_unext U_ICU_ENTRY_POINT_RENAME(uenum_unext)\n#define uenum_unextDefault U_ICU_ENTRY_POINT_RENAME(uenum_unextDefault)\n#define ufieldpositer_close U_ICU_ENTRY_POINT_RENAME(ufieldpositer_close)\n#define ufieldpositer_next U_ICU_ENTRY_POINT_RENAME(ufieldpositer_next)\n#define ufieldpositer_open U_ICU_ENTRY_POINT_RENAME(ufieldpositer_open)\n#define ufile_close_translit U_ICU_ENTRY_POINT_RENAME(ufile_close_translit)\n#define ufile_fill_uchar_buffer U_ICU_ENTRY_POINT_RENAME(ufile_fill_uchar_buffer)\n#define ufile_flush_io U_ICU_ENTRY_POINT_RENAME(ufile_flush_io)\n#define ufile_flush_translit U_ICU_ENTRY_POINT_RENAME(ufile_flush_translit)\n#define ufile_getch U_ICU_ENTRY_POINT_RENAME(ufile_getch)\n#define ufile_getch32 U_ICU_ENTRY_POINT_RENAME(ufile_getch32)\n#define ufmt_64tou U_ICU_ENTRY_POINT_RENAME(ufmt_64tou)\n#define ufmt_close U_ICU_ENTRY_POINT_RENAME(ufmt_close)\n#define ufmt_defaultCPToUnicode U_ICU_ENTRY_POINT_RENAME(ufmt_defaultCPToUnicode)\n#define ufmt_digitvalue U_ICU_ENTRY_POINT_RENAME(ufmt_digitvalue)\n#define ufmt_getArrayItemByIndex U_ICU_ENTRY_POINT_RENAME(ufmt_getArrayItemByIndex)\n#define ufmt_getArrayLength U_ICU_ENTRY_POINT_RENAME(ufmt_getArrayLength)\n#define ufmt_getDate U_ICU_ENTRY_POINT_RENAME(ufmt_getDate)\n#define ufmt_getDecNumChars U_ICU_ENTRY_POINT_RENAME(ufmt_getDecNumChars)\n#define ufmt_getDouble U_ICU_ENTRY_POINT_RENAME(ufmt_getDouble)\n#define ufmt_getInt64 U_ICU_ENTRY_POINT_RENAME(ufmt_getInt64)\n#define ufmt_getLong U_ICU_ENTRY_POINT_RENAME(ufmt_getLong)\n#define ufmt_getObject U_ICU_ENTRY_POINT_RENAME(ufmt_getObject)\n#define ufmt_getType U_ICU_ENTRY_POINT_RENAME(ufmt_getType)\n#define ufmt_getUChars U_ICU_ENTRY_POINT_RENAME(ufmt_getUChars)\n#define ufmt_isNumeric U_ICU_ENTRY_POINT_RENAME(ufmt_isNumeric)\n#define ufmt_isdigit U_ICU_ENTRY_POINT_RENAME(ufmt_isdigit)\n#define ufmt_open U_ICU_ENTRY_POINT_RENAME(ufmt_open)\n#define ufmt_ptou U_ICU_ENTRY_POINT_RENAME(ufmt_ptou)\n#define ufmt_uto64 U_ICU_ENTRY_POINT_RENAME(ufmt_uto64)\n#define ufmt_utop U_ICU_ENTRY_POINT_RENAME(ufmt_utop)\n#define ufmtval_getString U_ICU_ENTRY_POINT_RENAME(ufmtval_getString)\n#define ufmtval_nextPosition U_ICU_ENTRY_POINT_RENAME(ufmtval_nextPosition)\n#define ugender_getInstance U_ICU_ENTRY_POINT_RENAME(ugender_getInstance)\n#define ugender_getListGender U_ICU_ENTRY_POINT_RENAME(ugender_getListGender)\n#define uhash_close U_ICU_ENTRY_POINT_RENAME(uhash_close)\n#define uhash_compareCaselessUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_compareCaselessUnicodeString)\n#define uhash_compareChars U_ICU_ENTRY_POINT_RENAME(uhash_compareChars)\n#define uhash_compareIChars U_ICU_ENTRY_POINT_RENAME(uhash_compareIChars)\n#define uhash_compareLong U_ICU_ENTRY_POINT_RENAME(uhash_compareLong)\n#define uhash_compareScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_compareScriptSet)\n#define uhash_compareUChars U_ICU_ENTRY_POINT_RENAME(uhash_compareUChars)\n#define uhash_compareUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_compareUnicodeString)\n#define uhash_count U_ICU_ENTRY_POINT_RENAME(uhash_count)\n#define uhash_deleteHashtable U_ICU_ENTRY_POINT_RENAME(uhash_deleteHashtable)\n#define uhash_deleteScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_deleteScriptSet)\n#define uhash_equals U_ICU_ENTRY_POINT_RENAME(uhash_equals)\n#define uhash_equalsScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_equalsScriptSet)\n#define uhash_find U_ICU_ENTRY_POINT_RENAME(uhash_find)\n#define uhash_get U_ICU_ENTRY_POINT_RENAME(uhash_get)\n#define uhash_geti U_ICU_ENTRY_POINT_RENAME(uhash_geti)\n#define uhash_hashCaselessUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_hashCaselessUnicodeString)\n#define uhash_hashChars U_ICU_ENTRY_POINT_RENAME(uhash_hashChars)\n#define uhash_hashIChars U_ICU_ENTRY_POINT_RENAME(uhash_hashIChars)\n#define uhash_hashLong U_ICU_ENTRY_POINT_RENAME(uhash_hashLong)\n#define uhash_hashScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_hashScriptSet)\n#define uhash_hashUChars U_ICU_ENTRY_POINT_RENAME(uhash_hashUChars)\n#define uhash_hashUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_hashUnicodeString)\n#define uhash_iget U_ICU_ENTRY_POINT_RENAME(uhash_iget)\n#define uhash_igeti U_ICU_ENTRY_POINT_RENAME(uhash_igeti)\n#define uhash_init U_ICU_ENTRY_POINT_RENAME(uhash_init)\n#define uhash_initSize U_ICU_ENTRY_POINT_RENAME(uhash_initSize)\n#define uhash_iput U_ICU_ENTRY_POINT_RENAME(uhash_iput)\n#define uhash_iputi U_ICU_ENTRY_POINT_RENAME(uhash_iputi)\n#define uhash_iremove U_ICU_ENTRY_POINT_RENAME(uhash_iremove)\n#define uhash_iremovei U_ICU_ENTRY_POINT_RENAME(uhash_iremovei)\n#define uhash_nextElement U_ICU_ENTRY_POINT_RENAME(uhash_nextElement)\n#define uhash_open U_ICU_ENTRY_POINT_RENAME(uhash_open)\n#define uhash_openSize U_ICU_ENTRY_POINT_RENAME(uhash_openSize)\n#define uhash_put U_ICU_ENTRY_POINT_RENAME(uhash_put)\n#define uhash_puti U_ICU_ENTRY_POINT_RENAME(uhash_puti)\n#define uhash_remove U_ICU_ENTRY_POINT_RENAME(uhash_remove)\n#define uhash_removeAll U_ICU_ENTRY_POINT_RENAME(uhash_removeAll)\n#define uhash_removeElement U_ICU_ENTRY_POINT_RENAME(uhash_removeElement)\n#define uhash_removei U_ICU_ENTRY_POINT_RENAME(uhash_removei)\n#define uhash_setKeyComparator U_ICU_ENTRY_POINT_RENAME(uhash_setKeyComparator)\n#define uhash_setKeyDeleter U_ICU_ENTRY_POINT_RENAME(uhash_setKeyDeleter)\n#define uhash_setKeyHasher U_ICU_ENTRY_POINT_RENAME(uhash_setKeyHasher)\n#define uhash_setResizePolicy U_ICU_ENTRY_POINT_RENAME(uhash_setResizePolicy)\n#define uhash_setValueComparator U_ICU_ENTRY_POINT_RENAME(uhash_setValueComparator)\n#define uhash_setValueDeleter U_ICU_ENTRY_POINT_RENAME(uhash_setValueDeleter)\n#define uidna_IDNToASCII U_ICU_ENTRY_POINT_RENAME(uidna_IDNToASCII)\n#define uidna_IDNToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_IDNToUnicode)\n#define uidna_close U_ICU_ENTRY_POINT_RENAME(uidna_close)\n#define uidna_compare U_ICU_ENTRY_POINT_RENAME(uidna_compare)\n#define uidna_labelToASCII U_ICU_ENTRY_POINT_RENAME(uidna_labelToASCII)\n#define uidna_labelToASCII_UTF8 U_ICU_ENTRY_POINT_RENAME(uidna_labelToASCII_UTF8)\n#define uidna_labelToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_labelToUnicode)\n#define uidna_labelToUnicodeUTF8 U_ICU_ENTRY_POINT_RENAME(uidna_labelToUnicodeUTF8)\n#define uidna_nameToASCII U_ICU_ENTRY_POINT_RENAME(uidna_nameToASCII)\n#define uidna_nameToASCII_UTF8 U_ICU_ENTRY_POINT_RENAME(uidna_nameToASCII_UTF8)\n#define uidna_nameToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_nameToUnicode)\n#define uidna_nameToUnicodeUTF8 U_ICU_ENTRY_POINT_RENAME(uidna_nameToUnicodeUTF8)\n#define uidna_openUTS46 U_ICU_ENTRY_POINT_RENAME(uidna_openUTS46)\n#define uidna_toASCII U_ICU_ENTRY_POINT_RENAME(uidna_toASCII)\n#define uidna_toUnicode U_ICU_ENTRY_POINT_RENAME(uidna_toUnicode)\n#define uiter_current32 U_ICU_ENTRY_POINT_RENAME(uiter_current32)\n#define uiter_getState U_ICU_ENTRY_POINT_RENAME(uiter_getState)\n#define uiter_next32 U_ICU_ENTRY_POINT_RENAME(uiter_next32)\n#define uiter_previous32 U_ICU_ENTRY_POINT_RENAME(uiter_previous32)\n#define uiter_setCharacterIterator U_ICU_ENTRY_POINT_RENAME(uiter_setCharacterIterator)\n#define uiter_setReplaceable U_ICU_ENTRY_POINT_RENAME(uiter_setReplaceable)\n#define uiter_setState U_ICU_ENTRY_POINT_RENAME(uiter_setState)\n#define uiter_setString U_ICU_ENTRY_POINT_RENAME(uiter_setString)\n#define uiter_setUTF16BE U_ICU_ENTRY_POINT_RENAME(uiter_setUTF16BE)\n#define uiter_setUTF8 U_ICU_ENTRY_POINT_RENAME(uiter_setUTF8)\n#define uldn_close U_ICU_ENTRY_POINT_RENAME(uldn_close)\n#define uldn_getContext U_ICU_ENTRY_POINT_RENAME(uldn_getContext)\n#define uldn_getDialectHandling U_ICU_ENTRY_POINT_RENAME(uldn_getDialectHandling)\n#define uldn_getLocale U_ICU_ENTRY_POINT_RENAME(uldn_getLocale)\n#define uldn_keyDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_keyDisplayName)\n#define uldn_keyValueDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_keyValueDisplayName)\n#define uldn_languageDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_languageDisplayName)\n#define uldn_localeDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_localeDisplayName)\n#define uldn_open U_ICU_ENTRY_POINT_RENAME(uldn_open)\n#define uldn_openForContext U_ICU_ENTRY_POINT_RENAME(uldn_openForContext)\n#define uldn_regionDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_regionDisplayName)\n#define uldn_scriptCodeDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_scriptCodeDisplayName)\n#define uldn_scriptDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_scriptDisplayName)\n#define uldn_variantDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_variantDisplayName)\n#define ulist_addItemBeginList U_ICU_ENTRY_POINT_RENAME(ulist_addItemBeginList)\n#define ulist_addItemEndList U_ICU_ENTRY_POINT_RENAME(ulist_addItemEndList)\n#define ulist_close_keyword_values_iterator U_ICU_ENTRY_POINT_RENAME(ulist_close_keyword_values_iterator)\n#define ulist_containsString U_ICU_ENTRY_POINT_RENAME(ulist_containsString)\n#define ulist_count_keyword_values U_ICU_ENTRY_POINT_RENAME(ulist_count_keyword_values)\n#define ulist_createEmptyList U_ICU_ENTRY_POINT_RENAME(ulist_createEmptyList)\n#define ulist_deleteList U_ICU_ENTRY_POINT_RENAME(ulist_deleteList)\n#define ulist_getListFromEnum U_ICU_ENTRY_POINT_RENAME(ulist_getListFromEnum)\n#define ulist_getListSize U_ICU_ENTRY_POINT_RENAME(ulist_getListSize)\n#define ulist_getNext U_ICU_ENTRY_POINT_RENAME(ulist_getNext)\n#define ulist_next_keyword_value U_ICU_ENTRY_POINT_RENAME(ulist_next_keyword_value)\n#define ulist_removeString U_ICU_ENTRY_POINT_RENAME(ulist_removeString)\n#define ulist_resetList U_ICU_ENTRY_POINT_RENAME(ulist_resetList)\n#define ulist_reset_keyword_values_iterator U_ICU_ENTRY_POINT_RENAME(ulist_reset_keyword_values_iterator)\n#define ulistfmt_close U_ICU_ENTRY_POINT_RENAME(ulistfmt_close)\n#define ulistfmt_closeResult U_ICU_ENTRY_POINT_RENAME(ulistfmt_closeResult)\n#define ulistfmt_format U_ICU_ENTRY_POINT_RENAME(ulistfmt_format)\n#define ulistfmt_formatStringsToResult U_ICU_ENTRY_POINT_RENAME(ulistfmt_formatStringsToResult)\n#define ulistfmt_open U_ICU_ENTRY_POINT_RENAME(ulistfmt_open)\n#define ulistfmt_openResult U_ICU_ENTRY_POINT_RENAME(ulistfmt_openResult)\n#define ulistfmt_resultAsValue U_ICU_ENTRY_POINT_RENAME(ulistfmt_resultAsValue)\n#define uloc_acceptLanguage U_ICU_ENTRY_POINT_RENAME(uloc_acceptLanguage)\n#define uloc_acceptLanguageFromHTTP U_ICU_ENTRY_POINT_RENAME(uloc_acceptLanguageFromHTTP)\n#define uloc_addLikelySubtags U_ICU_ENTRY_POINT_RENAME(uloc_addLikelySubtags)\n#define uloc_canonicalize U_ICU_ENTRY_POINT_RENAME(uloc_canonicalize)\n#define uloc_countAvailable U_ICU_ENTRY_POINT_RENAME(uloc_countAvailable)\n#define uloc_forLanguageTag U_ICU_ENTRY_POINT_RENAME(uloc_forLanguageTag)\n#define uloc_getAvailable U_ICU_ENTRY_POINT_RENAME(uloc_getAvailable)\n#define uloc_getBaseName U_ICU_ENTRY_POINT_RENAME(uloc_getBaseName)\n#define uloc_getCharacterOrientation U_ICU_ENTRY_POINT_RENAME(uloc_getCharacterOrientation)\n#define uloc_getCountry U_ICU_ENTRY_POINT_RENAME(uloc_getCountry)\n#define uloc_getCurrentCountryID U_ICU_ENTRY_POINT_RENAME(uloc_getCurrentCountryID)\n#define uloc_getCurrentLanguageID U_ICU_ENTRY_POINT_RENAME(uloc_getCurrentLanguageID)\n#define uloc_getDefault U_ICU_ENTRY_POINT_RENAME(uloc_getDefault)\n#define uloc_getDisplayCountry U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayCountry)\n#define uloc_getDisplayKeyword U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayKeyword)\n#define uloc_getDisplayKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayKeywordValue)\n#define uloc_getDisplayLanguage U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayLanguage)\n#define uloc_getDisplayName U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayName)\n#define uloc_getDisplayScript U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayScript)\n#define uloc_getDisplayScriptInContext U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayScriptInContext)\n#define uloc_getDisplayVariant U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayVariant)\n#define uloc_getISO3Country U_ICU_ENTRY_POINT_RENAME(uloc_getISO3Country)\n#define uloc_getISO3Language U_ICU_ENTRY_POINT_RENAME(uloc_getISO3Language)\n#define uloc_getISOCountries U_ICU_ENTRY_POINT_RENAME(uloc_getISOCountries)\n#define uloc_getISOLanguages U_ICU_ENTRY_POINT_RENAME(uloc_getISOLanguages)\n#define uloc_getKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_getKeywordValue)\n#define uloc_getLCID U_ICU_ENTRY_POINT_RENAME(uloc_getLCID)\n#define uloc_getLanguage U_ICU_ENTRY_POINT_RENAME(uloc_getLanguage)\n#define uloc_getLineOrientation U_ICU_ENTRY_POINT_RENAME(uloc_getLineOrientation)\n#define uloc_getLocaleForLCID U_ICU_ENTRY_POINT_RENAME(uloc_getLocaleForLCID)\n#define uloc_getName U_ICU_ENTRY_POINT_RENAME(uloc_getName)\n#define uloc_getParent U_ICU_ENTRY_POINT_RENAME(uloc_getParent)\n#define uloc_getScript U_ICU_ENTRY_POINT_RENAME(uloc_getScript)\n#define uloc_getTableStringWithFallback U_ICU_ENTRY_POINT_RENAME(uloc_getTableStringWithFallback)\n#define uloc_getVariant U_ICU_ENTRY_POINT_RENAME(uloc_getVariant)\n#define uloc_isRightToLeft U_ICU_ENTRY_POINT_RENAME(uloc_isRightToLeft)\n#define uloc_minimizeSubtags U_ICU_ENTRY_POINT_RENAME(uloc_minimizeSubtags)\n#define uloc_openKeywordList U_ICU_ENTRY_POINT_RENAME(uloc_openKeywordList)\n#define uloc_openKeywords U_ICU_ENTRY_POINT_RENAME(uloc_openKeywords)\n#define uloc_setDefault U_ICU_ENTRY_POINT_RENAME(uloc_setDefault)\n#define uloc_setKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_setKeywordValue)\n#define uloc_toLanguageTag U_ICU_ENTRY_POINT_RENAME(uloc_toLanguageTag)\n#define uloc_toLegacyKey U_ICU_ENTRY_POINT_RENAME(uloc_toLegacyKey)\n#define uloc_toLegacyType U_ICU_ENTRY_POINT_RENAME(uloc_toLegacyType)\n#define uloc_toUnicodeLocaleKey U_ICU_ENTRY_POINT_RENAME(uloc_toUnicodeLocaleKey)\n#define uloc_toUnicodeLocaleType U_ICU_ENTRY_POINT_RENAME(uloc_toUnicodeLocaleType)\n#define ulocdata_close U_ICU_ENTRY_POINT_RENAME(ulocdata_close)\n#define ulocdata_getCLDRVersion U_ICU_ENTRY_POINT_RENAME(ulocdata_getCLDRVersion)\n#define ulocdata_getDelimiter U_ICU_ENTRY_POINT_RENAME(ulocdata_getDelimiter)\n#define ulocdata_getExemplarSet U_ICU_ENTRY_POINT_RENAME(ulocdata_getExemplarSet)\n#define ulocdata_getLocaleDisplayPattern U_ICU_ENTRY_POINT_RENAME(ulocdata_getLocaleDisplayPattern)\n#define ulocdata_getLocaleSeparator U_ICU_ENTRY_POINT_RENAME(ulocdata_getLocaleSeparator)\n#define ulocdata_getMeasurementSystem U_ICU_ENTRY_POINT_RENAME(ulocdata_getMeasurementSystem)\n#define ulocdata_getNoSubstitute U_ICU_ENTRY_POINT_RENAME(ulocdata_getNoSubstitute)\n#define ulocdata_getPaperSize U_ICU_ENTRY_POINT_RENAME(ulocdata_getPaperSize)\n#define ulocdata_open U_ICU_ENTRY_POINT_RENAME(ulocdata_open)\n#define ulocdata_setNoSubstitute U_ICU_ENTRY_POINT_RENAME(ulocdata_setNoSubstitute)\n#define ulocimp_addLikelySubtags U_ICU_ENTRY_POINT_RENAME(ulocimp_addLikelySubtags)\n#define ulocimp_forLanguageTag U_ICU_ENTRY_POINT_RENAME(ulocimp_forLanguageTag)\n#define ulocimp_getCountry U_ICU_ENTRY_POINT_RENAME(ulocimp_getCountry)\n#define ulocimp_getLanguage U_ICU_ENTRY_POINT_RENAME(ulocimp_getLanguage)\n#define ulocimp_getRegionForSupplementalData U_ICU_ENTRY_POINT_RENAME(ulocimp_getRegionForSupplementalData)\n#define ulocimp_getScript U_ICU_ENTRY_POINT_RENAME(ulocimp_getScript)\n#define ulocimp_minimizeSubtags U_ICU_ENTRY_POINT_RENAME(ulocimp_minimizeSubtags)\n#define ulocimp_toBcpKey U_ICU_ENTRY_POINT_RENAME(ulocimp_toBcpKey)\n#define ulocimp_toBcpType U_ICU_ENTRY_POINT_RENAME(ulocimp_toBcpType)\n#define ulocimp_toLanguageTag U_ICU_ENTRY_POINT_RENAME(ulocimp_toLanguageTag)\n#define ulocimp_toLegacyKey U_ICU_ENTRY_POINT_RENAME(ulocimp_toLegacyKey)\n#define ulocimp_toLegacyType U_ICU_ENTRY_POINT_RENAME(ulocimp_toLegacyType)\n#define ultag_isExtensionSubtags U_ICU_ENTRY_POINT_RENAME(ultag_isExtensionSubtags)\n#define ultag_isLanguageSubtag U_ICU_ENTRY_POINT_RENAME(ultag_isLanguageSubtag)\n#define ultag_isPrivateuseValueSubtags U_ICU_ENTRY_POINT_RENAME(ultag_isPrivateuseValueSubtags)\n#define ultag_isRegionSubtag U_ICU_ENTRY_POINT_RENAME(ultag_isRegionSubtag)\n#define ultag_isScriptSubtag U_ICU_ENTRY_POINT_RENAME(ultag_isScriptSubtag)\n#define ultag_isTransformedExtensionSubtags U_ICU_ENTRY_POINT_RENAME(ultag_isTransformedExtensionSubtags)\n#define ultag_isUnicodeExtensionSubtags U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeExtensionSubtags)\n#define ultag_isUnicodeLocaleAttribute U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleAttribute)\n#define ultag_isUnicodeLocaleAttributes U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleAttributes)\n#define ultag_isUnicodeLocaleKey U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleKey)\n#define ultag_isUnicodeLocaleType U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleType)\n#define ultag_isVariantSubtags U_ICU_ENTRY_POINT_RENAME(ultag_isVariantSubtags)\n#define umsg_applyPattern U_ICU_ENTRY_POINT_RENAME(umsg_applyPattern)\n#define umsg_autoQuoteApostrophe U_ICU_ENTRY_POINT_RENAME(umsg_autoQuoteApostrophe)\n#define umsg_clone U_ICU_ENTRY_POINT_RENAME(umsg_clone)\n#define umsg_close U_ICU_ENTRY_POINT_RENAME(umsg_close)\n#define umsg_format U_ICU_ENTRY_POINT_RENAME(umsg_format)\n#define umsg_getLocale U_ICU_ENTRY_POINT_RENAME(umsg_getLocale)\n#define umsg_open U_ICU_ENTRY_POINT_RENAME(umsg_open)\n#define umsg_parse U_ICU_ENTRY_POINT_RENAME(umsg_parse)\n#define umsg_setLocale U_ICU_ENTRY_POINT_RENAME(umsg_setLocale)\n#define umsg_toPattern U_ICU_ENTRY_POINT_RENAME(umsg_toPattern)\n#define umsg_vformat U_ICU_ENTRY_POINT_RENAME(umsg_vformat)\n#define umsg_vparse U_ICU_ENTRY_POINT_RENAME(umsg_vparse)\n#define umtx_condBroadcast U_ICU_ENTRY_POINT_RENAME(umtx_condBroadcast)\n#define umtx_condSignal U_ICU_ENTRY_POINT_RENAME(umtx_condSignal)\n#define umtx_condWait U_ICU_ENTRY_POINT_RENAME(umtx_condWait)\n#define umtx_lock U_ICU_ENTRY_POINT_RENAME(umtx_lock)\n#define umtx_unlock U_ICU_ENTRY_POINT_RENAME(umtx_unlock)\n#define umutablecptrie_buildImmutable U_ICU_ENTRY_POINT_RENAME(umutablecptrie_buildImmutable)\n#define umutablecptrie_clone U_ICU_ENTRY_POINT_RENAME(umutablecptrie_clone)\n#define umutablecptrie_close U_ICU_ENTRY_POINT_RENAME(umutablecptrie_close)\n#define umutablecptrie_fromUCPMap U_ICU_ENTRY_POINT_RENAME(umutablecptrie_fromUCPMap)\n#define umutablecptrie_fromUCPTrie U_ICU_ENTRY_POINT_RENAME(umutablecptrie_fromUCPTrie)\n#define umutablecptrie_get U_ICU_ENTRY_POINT_RENAME(umutablecptrie_get)\n#define umutablecptrie_getRange U_ICU_ENTRY_POINT_RENAME(umutablecptrie_getRange)\n#define umutablecptrie_open U_ICU_ENTRY_POINT_RENAME(umutablecptrie_open)\n#define umutablecptrie_set U_ICU_ENTRY_POINT_RENAME(umutablecptrie_set)\n#define umutablecptrie_setRange U_ICU_ENTRY_POINT_RENAME(umutablecptrie_setRange)\n#define uniset_getUnicode32Instance U_ICU_ENTRY_POINT_RENAME(uniset_getUnicode32Instance)\n#define unorm2_append U_ICU_ENTRY_POINT_RENAME(unorm2_append)\n#define unorm2_close U_ICU_ENTRY_POINT_RENAME(unorm2_close)\n#define unorm2_composePair U_ICU_ENTRY_POINT_RENAME(unorm2_composePair)\n#define unorm2_getCombiningClass U_ICU_ENTRY_POINT_RENAME(unorm2_getCombiningClass)\n#define unorm2_getDecomposition U_ICU_ENTRY_POINT_RENAME(unorm2_getDecomposition)\n#define unorm2_getInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getInstance)\n#define unorm2_getNFCInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFCInstance)\n#define unorm2_getNFDInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFDInstance)\n#define unorm2_getNFKCCasefoldInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKCCasefoldInstance)\n#define unorm2_getNFKCInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKCInstance)\n#define unorm2_getNFKDInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKDInstance)\n#define unorm2_getRawDecomposition U_ICU_ENTRY_POINT_RENAME(unorm2_getRawDecomposition)\n#define unorm2_hasBoundaryAfter U_ICU_ENTRY_POINT_RENAME(unorm2_hasBoundaryAfter)\n#define unorm2_hasBoundaryBefore U_ICU_ENTRY_POINT_RENAME(unorm2_hasBoundaryBefore)\n#define unorm2_isInert U_ICU_ENTRY_POINT_RENAME(unorm2_isInert)\n#define unorm2_isNormalized U_ICU_ENTRY_POINT_RENAME(unorm2_isNormalized)\n#define unorm2_normalize U_ICU_ENTRY_POINT_RENAME(unorm2_normalize)\n#define unorm2_normalizeSecondAndAppend U_ICU_ENTRY_POINT_RENAME(unorm2_normalizeSecondAndAppend)\n#define unorm2_openFiltered U_ICU_ENTRY_POINT_RENAME(unorm2_openFiltered)\n#define unorm2_quickCheck U_ICU_ENTRY_POINT_RENAME(unorm2_quickCheck)\n#define unorm2_spanQuickCheckYes U_ICU_ENTRY_POINT_RENAME(unorm2_spanQuickCheckYes)\n#define unorm2_swap U_ICU_ENTRY_POINT_RENAME(unorm2_swap)\n#define unorm_compare U_ICU_ENTRY_POINT_RENAME(unorm_compare)\n#define unorm_concatenate U_ICU_ENTRY_POINT_RENAME(unorm_concatenate)\n#define unorm_getFCD16 U_ICU_ENTRY_POINT_RENAME(unorm_getFCD16)\n#define unorm_getQuickCheck U_ICU_ENTRY_POINT_RENAME(unorm_getQuickCheck)\n#define unorm_isNormalized U_ICU_ENTRY_POINT_RENAME(unorm_isNormalized)\n#define unorm_isNormalizedWithOptions U_ICU_ENTRY_POINT_RENAME(unorm_isNormalizedWithOptions)\n#define unorm_next U_ICU_ENTRY_POINT_RENAME(unorm_next)\n#define unorm_normalize U_ICU_ENTRY_POINT_RENAME(unorm_normalize)\n#define unorm_previous U_ICU_ENTRY_POINT_RENAME(unorm_previous)\n#define unorm_quickCheck U_ICU_ENTRY_POINT_RENAME(unorm_quickCheck)\n#define unorm_quickCheckWithOptions U_ICU_ENTRY_POINT_RENAME(unorm_quickCheckWithOptions)\n#define unum_applyPattern U_ICU_ENTRY_POINT_RENAME(unum_applyPattern)\n#define unum_clone U_ICU_ENTRY_POINT_RENAME(unum_clone)\n#define unum_close U_ICU_ENTRY_POINT_RENAME(unum_close)\n#define unum_countAvailable U_ICU_ENTRY_POINT_RENAME(unum_countAvailable)\n#define unum_format U_ICU_ENTRY_POINT_RENAME(unum_format)\n#define unum_formatDecimal U_ICU_ENTRY_POINT_RENAME(unum_formatDecimal)\n#define unum_formatDouble U_ICU_ENTRY_POINT_RENAME(unum_formatDouble)\n#define unum_formatDoubleCurrency U_ICU_ENTRY_POINT_RENAME(unum_formatDoubleCurrency)\n#define unum_formatDoubleForFields U_ICU_ENTRY_POINT_RENAME(unum_formatDoubleForFields)\n#define unum_formatInt64 U_ICU_ENTRY_POINT_RENAME(unum_formatInt64)\n#define unum_formatUFormattable U_ICU_ENTRY_POINT_RENAME(unum_formatUFormattable)\n#define unum_getAttribute U_ICU_ENTRY_POINT_RENAME(unum_getAttribute)\n#define unum_getAvailable U_ICU_ENTRY_POINT_RENAME(unum_getAvailable)\n#define unum_getContext U_ICU_ENTRY_POINT_RENAME(unum_getContext)\n#define unum_getDoubleAttribute U_ICU_ENTRY_POINT_RENAME(unum_getDoubleAttribute)\n#define unum_getLocaleByType U_ICU_ENTRY_POINT_RENAME(unum_getLocaleByType)\n#define unum_getSymbol U_ICU_ENTRY_POINT_RENAME(unum_getSymbol)\n#define unum_getTextAttribute U_ICU_ENTRY_POINT_RENAME(unum_getTextAttribute)\n#define unum_open U_ICU_ENTRY_POINT_RENAME(unum_open)\n#define unum_parse U_ICU_ENTRY_POINT_RENAME(unum_parse)\n#define unum_parseDecimal U_ICU_ENTRY_POINT_RENAME(unum_parseDecimal)\n#define unum_parseDouble U_ICU_ENTRY_POINT_RENAME(unum_parseDouble)\n#define unum_parseDoubleCurrency U_ICU_ENTRY_POINT_RENAME(unum_parseDoubleCurrency)\n#define unum_parseInt64 U_ICU_ENTRY_POINT_RENAME(unum_parseInt64)\n#define unum_parseToUFormattable U_ICU_ENTRY_POINT_RENAME(unum_parseToUFormattable)\n#define unum_setAttribute U_ICU_ENTRY_POINT_RENAME(unum_setAttribute)\n#define unum_setContext U_ICU_ENTRY_POINT_RENAME(unum_setContext)\n#define unum_setDoubleAttribute U_ICU_ENTRY_POINT_RENAME(unum_setDoubleAttribute)\n#define unum_setSymbol U_ICU_ENTRY_POINT_RENAME(unum_setSymbol)\n#define unum_setTextAttribute U_ICU_ENTRY_POINT_RENAME(unum_setTextAttribute)\n#define unum_toPattern U_ICU_ENTRY_POINT_RENAME(unum_toPattern)\n#define unumf_close U_ICU_ENTRY_POINT_RENAME(unumf_close)\n#define unumf_closeResult U_ICU_ENTRY_POINT_RENAME(unumf_closeResult)\n#define unumf_formatDecimal U_ICU_ENTRY_POINT_RENAME(unumf_formatDecimal)\n#define unumf_formatDouble U_ICU_ENTRY_POINT_RENAME(unumf_formatDouble)\n#define unumf_formatInt U_ICU_ENTRY_POINT_RENAME(unumf_formatInt)\n#define unumf_openForSkeletonAndLocale U_ICU_ENTRY_POINT_RENAME(unumf_openForSkeletonAndLocale)\n#define unumf_openForSkeletonAndLocaleWithError U_ICU_ENTRY_POINT_RENAME(unumf_openForSkeletonAndLocaleWithError)\n#define unumf_openResult U_ICU_ENTRY_POINT_RENAME(unumf_openResult)\n#define unumf_resultAsValue U_ICU_ENTRY_POINT_RENAME(unumf_resultAsValue)\n#define unumf_resultGetAllFieldPositions U_ICU_ENTRY_POINT_RENAME(unumf_resultGetAllFieldPositions)\n#define unumf_resultNextFieldPosition U_ICU_ENTRY_POINT_RENAME(unumf_resultNextFieldPosition)\n#define unumf_resultToString U_ICU_ENTRY_POINT_RENAME(unumf_resultToString)\n#define unumsys_close U_ICU_ENTRY_POINT_RENAME(unumsys_close)\n#define unumsys_getDescription U_ICU_ENTRY_POINT_RENAME(unumsys_getDescription)\n#define unumsys_getName U_ICU_ENTRY_POINT_RENAME(unumsys_getName)\n#define unumsys_getRadix U_ICU_ENTRY_POINT_RENAME(unumsys_getRadix)\n#define unumsys_isAlgorithmic U_ICU_ENTRY_POINT_RENAME(unumsys_isAlgorithmic)\n#define unumsys_open U_ICU_ENTRY_POINT_RENAME(unumsys_open)\n#define unumsys_openAvailableNames U_ICU_ENTRY_POINT_RENAME(unumsys_openAvailableNames)\n#define unumsys_openByName U_ICU_ENTRY_POINT_RENAME(unumsys_openByName)\n#define uplrules_close U_ICU_ENTRY_POINT_RENAME(uplrules_close)\n#define uplrules_getKeywords U_ICU_ENTRY_POINT_RENAME(uplrules_getKeywords)\n#define uplrules_open U_ICU_ENTRY_POINT_RENAME(uplrules_open)\n#define uplrules_openForType U_ICU_ENTRY_POINT_RENAME(uplrules_openForType)\n#define uplrules_select U_ICU_ENTRY_POINT_RENAME(uplrules_select)\n#define uplrules_selectFormatted U_ICU_ENTRY_POINT_RENAME(uplrules_selectFormatted)\n#define uplrules_selectWithFormat U_ICU_ENTRY_POINT_RENAME(uplrules_selectWithFormat)\n#define uplug_closeLibrary U_ICU_ENTRY_POINT_RENAME(uplug_closeLibrary)\n#define uplug_findLibrary U_ICU_ENTRY_POINT_RENAME(uplug_findLibrary)\n#define uplug_getConfiguration U_ICU_ENTRY_POINT_RENAME(uplug_getConfiguration)\n#define uplug_getContext U_ICU_ENTRY_POINT_RENAME(uplug_getContext)\n#define uplug_getCurrentLevel U_ICU_ENTRY_POINT_RENAME(uplug_getCurrentLevel)\n#define uplug_getLibrary U_ICU_ENTRY_POINT_RENAME(uplug_getLibrary)\n#define uplug_getLibraryName U_ICU_ENTRY_POINT_RENAME(uplug_getLibraryName)\n#define uplug_getPlugInternal U_ICU_ENTRY_POINT_RENAME(uplug_getPlugInternal)\n#define uplug_getPlugLevel U_ICU_ENTRY_POINT_RENAME(uplug_getPlugLevel)\n#define uplug_getPlugLoadStatus U_ICU_ENTRY_POINT_RENAME(uplug_getPlugLoadStatus)\n#define uplug_getPlugName U_ICU_ENTRY_POINT_RENAME(uplug_getPlugName)\n#define uplug_getPluginFile U_ICU_ENTRY_POINT_RENAME(uplug_getPluginFile)\n#define uplug_getSymbolName U_ICU_ENTRY_POINT_RENAME(uplug_getSymbolName)\n#define uplug_init U_ICU_ENTRY_POINT_RENAME(uplug_init)\n#define uplug_loadPlugFromEntrypoint U_ICU_ENTRY_POINT_RENAME(uplug_loadPlugFromEntrypoint)\n#define uplug_loadPlugFromLibrary U_ICU_ENTRY_POINT_RENAME(uplug_loadPlugFromLibrary)\n#define uplug_nextPlug U_ICU_ENTRY_POINT_RENAME(uplug_nextPlug)\n#define uplug_openLibrary U_ICU_ENTRY_POINT_RENAME(uplug_openLibrary)\n#define uplug_removePlug U_ICU_ENTRY_POINT_RENAME(uplug_removePlug)\n#define uplug_setContext U_ICU_ENTRY_POINT_RENAME(uplug_setContext)\n#define uplug_setPlugLevel U_ICU_ENTRY_POINT_RENAME(uplug_setPlugLevel)\n#define uplug_setPlugName U_ICU_ENTRY_POINT_RENAME(uplug_setPlugName)\n#define uplug_setPlugNoUnload U_ICU_ENTRY_POINT_RENAME(uplug_setPlugNoUnload)\n#define uprops_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(uprops_addPropertyStarts)\n#define uprops_getSource U_ICU_ENTRY_POINT_RENAME(uprops_getSource)\n#define upropsvec_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(upropsvec_addPropertyStarts)\n#define uprv_add32_overflow U_ICU_ENTRY_POINT_RENAME(uprv_add32_overflow)\n#define uprv_aestrncpy U_ICU_ENTRY_POINT_RENAME(uprv_aestrncpy)\n#define uprv_asciiFromEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_asciiFromEbcdic)\n#define uprv_asciitolower U_ICU_ENTRY_POINT_RENAME(uprv_asciitolower)\n#define uprv_calloc U_ICU_ENTRY_POINT_RENAME(uprv_calloc)\n#define uprv_ceil U_ICU_ENTRY_POINT_RENAME(uprv_ceil)\n#define uprv_compareASCIIPropertyNames U_ICU_ENTRY_POINT_RENAME(uprv_compareASCIIPropertyNames)\n#define uprv_compareEBCDICPropertyNames U_ICU_ENTRY_POINT_RENAME(uprv_compareEBCDICPropertyNames)\n#define uprv_compareInvAscii U_ICU_ENTRY_POINT_RENAME(uprv_compareInvAscii)\n#define uprv_compareInvEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_compareInvEbcdic)\n#define uprv_compareInvEbcdicAsAscii U_ICU_ENTRY_POINT_RENAME(uprv_compareInvEbcdicAsAscii)\n#define uprv_convertToLCID U_ICU_ENTRY_POINT_RENAME(uprv_convertToLCID)\n#define uprv_convertToLCIDPlatform U_ICU_ENTRY_POINT_RENAME(uprv_convertToLCIDPlatform)\n#define uprv_convertToPosix U_ICU_ENTRY_POINT_RENAME(uprv_convertToPosix)\n#define uprv_copyAscii U_ICU_ENTRY_POINT_RENAME(uprv_copyAscii)\n#define uprv_copyEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_copyEbcdic)\n#define uprv_currencyLeads U_ICU_ENTRY_POINT_RENAME(uprv_currencyLeads)\n#define uprv_decContextClearStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextClearStatus)\n#define uprv_decContextDefault U_ICU_ENTRY_POINT_RENAME(uprv_decContextDefault)\n#define uprv_decContextGetRounding U_ICU_ENTRY_POINT_RENAME(uprv_decContextGetRounding)\n#define uprv_decContextGetStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextGetStatus)\n#define uprv_decContextRestoreStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextRestoreStatus)\n#define uprv_decContextSaveStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextSaveStatus)\n#define uprv_decContextSetRounding U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetRounding)\n#define uprv_decContextSetStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatus)\n#define uprv_decContextSetStatusFromString U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusFromString)\n#define uprv_decContextSetStatusFromStringQuiet U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusFromStringQuiet)\n#define uprv_decContextSetStatusQuiet U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusQuiet)\n#define uprv_decContextStatusToString U_ICU_ENTRY_POINT_RENAME(uprv_decContextStatusToString)\n#define uprv_decContextTestSavedStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextTestSavedStatus)\n#define uprv_decContextTestStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextTestStatus)\n#define uprv_decContextZeroStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextZeroStatus)\n#define uprv_decNumberAbs U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAbs)\n#define uprv_decNumberAdd U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAdd)\n#define uprv_decNumberAnd U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAnd)\n#define uprv_decNumberClass U_ICU_ENTRY_POINT_RENAME(uprv_decNumberClass)\n#define uprv_decNumberClassToString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberClassToString)\n#define uprv_decNumberCompare U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompare)\n#define uprv_decNumberCompareSignal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareSignal)\n#define uprv_decNumberCompareTotal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareTotal)\n#define uprv_decNumberCompareTotalMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareTotalMag)\n#define uprv_decNumberCopy U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopy)\n#define uprv_decNumberCopyAbs U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopyAbs)\n#define uprv_decNumberCopyNegate U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopyNegate)\n#define uprv_decNumberCopySign U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopySign)\n#define uprv_decNumberDivide U_ICU_ENTRY_POINT_RENAME(uprv_decNumberDivide)\n#define uprv_decNumberDivideInteger U_ICU_ENTRY_POINT_RENAME(uprv_decNumberDivideInteger)\n#define uprv_decNumberExp U_ICU_ENTRY_POINT_RENAME(uprv_decNumberExp)\n#define uprv_decNumberFMA U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFMA)\n#define uprv_decNumberFromInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromInt32)\n#define uprv_decNumberFromString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromString)\n#define uprv_decNumberFromUInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromUInt32)\n#define uprv_decNumberGetBCD U_ICU_ENTRY_POINT_RENAME(uprv_decNumberGetBCD)\n#define uprv_decNumberInvert U_ICU_ENTRY_POINT_RENAME(uprv_decNumberInvert)\n#define uprv_decNumberIsNormal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberIsNormal)\n#define uprv_decNumberIsSubnormal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberIsSubnormal)\n#define uprv_decNumberLn U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLn)\n#define uprv_decNumberLog10 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLog10)\n#define uprv_decNumberLogB U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLogB)\n#define uprv_decNumberMax U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMax)\n#define uprv_decNumberMaxMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMaxMag)\n#define uprv_decNumberMin U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMin)\n#define uprv_decNumberMinMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMinMag)\n#define uprv_decNumberMinus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMinus)\n#define uprv_decNumberMultiply U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMultiply)\n#define uprv_decNumberNextMinus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextMinus)\n#define uprv_decNumberNextPlus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextPlus)\n#define uprv_decNumberNextToward U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextToward)\n#define uprv_decNumberNormalize U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNormalize)\n#define uprv_decNumberOr U_ICU_ENTRY_POINT_RENAME(uprv_decNumberOr)\n#define uprv_decNumberPlus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberPlus)\n#define uprv_decNumberPower U_ICU_ENTRY_POINT_RENAME(uprv_decNumberPower)\n#define uprv_decNumberQuantize U_ICU_ENTRY_POINT_RENAME(uprv_decNumberQuantize)\n#define uprv_decNumberReduce U_ICU_ENTRY_POINT_RENAME(uprv_decNumberReduce)\n#define uprv_decNumberRemainder U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRemainder)\n#define uprv_decNumberRemainderNear U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRemainderNear)\n#define uprv_decNumberRescale U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRescale)\n#define uprv_decNumberRotate U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRotate)\n#define uprv_decNumberSameQuantum U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSameQuantum)\n#define uprv_decNumberScaleB U_ICU_ENTRY_POINT_RENAME(uprv_decNumberScaleB)\n#define uprv_decNumberSetBCD U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSetBCD)\n#define uprv_decNumberShift U_ICU_ENTRY_POINT_RENAME(uprv_decNumberShift)\n#define uprv_decNumberSquareRoot U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSquareRoot)\n#define uprv_decNumberSubtract U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSubtract)\n#define uprv_decNumberToEngString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToEngString)\n#define uprv_decNumberToInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToInt32)\n#define uprv_decNumberToIntegralExact U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToIntegralExact)\n#define uprv_decNumberToIntegralValue U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToIntegralValue)\n#define uprv_decNumberToString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToString)\n#define uprv_decNumberToUInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToUInt32)\n#define uprv_decNumberTrim U_ICU_ENTRY_POINT_RENAME(uprv_decNumberTrim)\n#define uprv_decNumberVersion U_ICU_ENTRY_POINT_RENAME(uprv_decNumberVersion)\n#define uprv_decNumberXor U_ICU_ENTRY_POINT_RENAME(uprv_decNumberXor)\n#define uprv_decNumberZero U_ICU_ENTRY_POINT_RENAME(uprv_decNumberZero)\n#define uprv_deleteConditionalCE32 U_ICU_ENTRY_POINT_RENAME(uprv_deleteConditionalCE32)\n#define uprv_deleteUObject U_ICU_ENTRY_POINT_RENAME(uprv_deleteUObject)\n#define uprv_dl_close U_ICU_ENTRY_POINT_RENAME(uprv_dl_close)\n#define uprv_dl_open U_ICU_ENTRY_POINT_RENAME(uprv_dl_open)\n#define uprv_dlsym_func U_ICU_ENTRY_POINT_RENAME(uprv_dlsym_func)\n#define uprv_eastrncpy U_ICU_ENTRY_POINT_RENAME(uprv_eastrncpy)\n#define uprv_ebcdicFromAscii U_ICU_ENTRY_POINT_RENAME(uprv_ebcdicFromAscii)\n#define uprv_ebcdicToLowercaseAscii U_ICU_ENTRY_POINT_RENAME(uprv_ebcdicToLowercaseAscii)\n#define uprv_ebcdictolower U_ICU_ENTRY_POINT_RENAME(uprv_ebcdictolower)\n#define uprv_fabs U_ICU_ENTRY_POINT_RENAME(uprv_fabs)\n#define uprv_floor U_ICU_ENTRY_POINT_RENAME(uprv_floor)\n#define uprv_fmax U_ICU_ENTRY_POINT_RENAME(uprv_fmax)\n#define uprv_fmin U_ICU_ENTRY_POINT_RENAME(uprv_fmin)\n#define uprv_fmod U_ICU_ENTRY_POINT_RENAME(uprv_fmod)\n#define uprv_free U_ICU_ENTRY_POINT_RENAME(uprv_free)\n#define uprv_getCharNameCharacters U_ICU_ENTRY_POINT_RENAME(uprv_getCharNameCharacters)\n#define uprv_getDefaultLocaleID U_ICU_ENTRY_POINT_RENAME(uprv_getDefaultLocaleID)\n#define uprv_getInfinity U_ICU_ENTRY_POINT_RENAME(uprv_getInfinity)\n#define uprv_getMaxCharNameLength U_ICU_ENTRY_POINT_RENAME(uprv_getMaxCharNameLength)\n#define uprv_getMaxValues U_ICU_ENTRY_POINT_RENAME(uprv_getMaxValues)\n#define uprv_getNaN U_ICU_ENTRY_POINT_RENAME(uprv_getNaN)\n#define uprv_getRawUTCtime U_ICU_ENTRY_POINT_RENAME(uprv_getRawUTCtime)\n#define uprv_getStaticCurrencyName U_ICU_ENTRY_POINT_RENAME(uprv_getStaticCurrencyName)\n#define uprv_getUTCtime U_ICU_ENTRY_POINT_RENAME(uprv_getUTCtime)\n#define uprv_int32Comparator U_ICU_ENTRY_POINT_RENAME(uprv_int32Comparator)\n#define uprv_isASCIILetter U_ICU_ENTRY_POINT_RENAME(uprv_isASCIILetter)\n#define uprv_isInfinite U_ICU_ENTRY_POINT_RENAME(uprv_isInfinite)\n#define uprv_isInvariantString U_ICU_ENTRY_POINT_RENAME(uprv_isInvariantString)\n#define uprv_isInvariantUString U_ICU_ENTRY_POINT_RENAME(uprv_isInvariantUString)\n#define uprv_isNaN U_ICU_ENTRY_POINT_RENAME(uprv_isNaN)\n#define uprv_isNegativeInfinity U_ICU_ENTRY_POINT_RENAME(uprv_isNegativeInfinity)\n#define uprv_isPositiveInfinity U_ICU_ENTRY_POINT_RENAME(uprv_isPositiveInfinity)\n#define uprv_itou U_ICU_ENTRY_POINT_RENAME(uprv_itou)\n#define uprv_log U_ICU_ENTRY_POINT_RENAME(uprv_log)\n#define uprv_malloc U_ICU_ENTRY_POINT_RENAME(uprv_malloc)\n#define uprv_mapFile U_ICU_ENTRY_POINT_RENAME(uprv_mapFile)\n#define uprv_max U_ICU_ENTRY_POINT_RENAME(uprv_max)\n#define uprv_maxMantissa U_ICU_ENTRY_POINT_RENAME(uprv_maxMantissa)\n#define uprv_maximumPtr U_ICU_ENTRY_POINT_RENAME(uprv_maximumPtr)\n#define uprv_min U_ICU_ENTRY_POINT_RENAME(uprv_min)\n#define uprv_modf U_ICU_ENTRY_POINT_RENAME(uprv_modf)\n#define uprv_mul32_overflow U_ICU_ENTRY_POINT_RENAME(uprv_mul32_overflow)\n#define uprv_parseCurrency U_ICU_ENTRY_POINT_RENAME(uprv_parseCurrency)\n#define uprv_pathIsAbsolute U_ICU_ENTRY_POINT_RENAME(uprv_pathIsAbsolute)\n#define uprv_pow U_ICU_ENTRY_POINT_RENAME(uprv_pow)\n#define uprv_pow10 U_ICU_ENTRY_POINT_RENAME(uprv_pow10)\n#define uprv_realloc U_ICU_ENTRY_POINT_RENAME(uprv_realloc)\n#define uprv_round U_ICU_ENTRY_POINT_RENAME(uprv_round)\n#define uprv_sortArray U_ICU_ENTRY_POINT_RENAME(uprv_sortArray)\n#define uprv_stableBinarySearch U_ICU_ENTRY_POINT_RENAME(uprv_stableBinarySearch)\n#define uprv_strCompare U_ICU_ENTRY_POINT_RENAME(uprv_strCompare)\n#define uprv_strdup U_ICU_ENTRY_POINT_RENAME(uprv_strdup)\n#define uprv_stricmp U_ICU_ENTRY_POINT_RENAME(uprv_stricmp)\n#define uprv_strndup U_ICU_ENTRY_POINT_RENAME(uprv_strndup)\n#define uprv_strnicmp U_ICU_ENTRY_POINT_RENAME(uprv_strnicmp)\n#define uprv_syntaxError U_ICU_ENTRY_POINT_RENAME(uprv_syntaxError)\n#define uprv_timezone U_ICU_ENTRY_POINT_RENAME(uprv_timezone)\n#define uprv_toupper U_ICU_ENTRY_POINT_RENAME(uprv_toupper)\n#define uprv_trunc U_ICU_ENTRY_POINT_RENAME(uprv_trunc)\n#define uprv_tzname U_ICU_ENTRY_POINT_RENAME(uprv_tzname)\n#define uprv_tzname_clear_cache U_ICU_ENTRY_POINT_RENAME(uprv_tzname_clear_cache)\n#define uprv_tzset U_ICU_ENTRY_POINT_RENAME(uprv_tzset)\n#define uprv_uint16Comparator U_ICU_ENTRY_POINT_RENAME(uprv_uint16Comparator)\n#define uprv_uint32Comparator U_ICU_ENTRY_POINT_RENAME(uprv_uint32Comparator)\n#define uprv_unmapFile U_ICU_ENTRY_POINT_RENAME(uprv_unmapFile)\n#define upvec_cloneArray U_ICU_ENTRY_POINT_RENAME(upvec_cloneArray)\n#define upvec_close U_ICU_ENTRY_POINT_RENAME(upvec_close)\n#define upvec_compact U_ICU_ENTRY_POINT_RENAME(upvec_compact)\n#define upvec_compactToUTrie2Handler U_ICU_ENTRY_POINT_RENAME(upvec_compactToUTrie2Handler)\n#define upvec_compactToUTrie2WithRowIndexes U_ICU_ENTRY_POINT_RENAME(upvec_compactToUTrie2WithRowIndexes)\n#define upvec_getArray U_ICU_ENTRY_POINT_RENAME(upvec_getArray)\n#define upvec_getRow U_ICU_ENTRY_POINT_RENAME(upvec_getRow)\n#define upvec_getValue U_ICU_ENTRY_POINT_RENAME(upvec_getValue)\n#define upvec_open U_ICU_ENTRY_POINT_RENAME(upvec_open)\n#define upvec_setValue U_ICU_ENTRY_POINT_RENAME(upvec_setValue)\n#define uregex_appendReplacement U_ICU_ENTRY_POINT_RENAME(uregex_appendReplacement)\n#define uregex_appendReplacementUText U_ICU_ENTRY_POINT_RENAME(uregex_appendReplacementUText)\n#define uregex_appendTail U_ICU_ENTRY_POINT_RENAME(uregex_appendTail)\n#define uregex_appendTailUText U_ICU_ENTRY_POINT_RENAME(uregex_appendTailUText)\n#define uregex_clone U_ICU_ENTRY_POINT_RENAME(uregex_clone)\n#define uregex_close U_ICU_ENTRY_POINT_RENAME(uregex_close)\n#define uregex_end U_ICU_ENTRY_POINT_RENAME(uregex_end)\n#define uregex_end64 U_ICU_ENTRY_POINT_RENAME(uregex_end64)\n#define uregex_find U_ICU_ENTRY_POINT_RENAME(uregex_find)\n#define uregex_find64 U_ICU_ENTRY_POINT_RENAME(uregex_find64)\n#define uregex_findNext U_ICU_ENTRY_POINT_RENAME(uregex_findNext)\n#define uregex_flags U_ICU_ENTRY_POINT_RENAME(uregex_flags)\n#define uregex_getFindProgressCallback U_ICU_ENTRY_POINT_RENAME(uregex_getFindProgressCallback)\n#define uregex_getMatchCallback U_ICU_ENTRY_POINT_RENAME(uregex_getMatchCallback)\n#define uregex_getStackLimit U_ICU_ENTRY_POINT_RENAME(uregex_getStackLimit)\n#define uregex_getText U_ICU_ENTRY_POINT_RENAME(uregex_getText)\n#define uregex_getTimeLimit U_ICU_ENTRY_POINT_RENAME(uregex_getTimeLimit)\n#define uregex_getUText U_ICU_ENTRY_POINT_RENAME(uregex_getUText)\n#define uregex_group U_ICU_ENTRY_POINT_RENAME(uregex_group)\n#define uregex_groupCount U_ICU_ENTRY_POINT_RENAME(uregex_groupCount)\n#define uregex_groupNumberFromCName U_ICU_ENTRY_POINT_RENAME(uregex_groupNumberFromCName)\n#define uregex_groupNumberFromName U_ICU_ENTRY_POINT_RENAME(uregex_groupNumberFromName)\n#define uregex_groupUText U_ICU_ENTRY_POINT_RENAME(uregex_groupUText)\n#define uregex_hasAnchoringBounds U_ICU_ENTRY_POINT_RENAME(uregex_hasAnchoringBounds)\n#define uregex_hasTransparentBounds U_ICU_ENTRY_POINT_RENAME(uregex_hasTransparentBounds)\n#define uregex_hitEnd U_ICU_ENTRY_POINT_RENAME(uregex_hitEnd)\n#define uregex_lookingAt U_ICU_ENTRY_POINT_RENAME(uregex_lookingAt)\n#define uregex_lookingAt64 U_ICU_ENTRY_POINT_RENAME(uregex_lookingAt64)\n#define uregex_matches U_ICU_ENTRY_POINT_RENAME(uregex_matches)\n#define uregex_matches64 U_ICU_ENTRY_POINT_RENAME(uregex_matches64)\n#define uregex_open U_ICU_ENTRY_POINT_RENAME(uregex_open)\n#define uregex_openC U_ICU_ENTRY_POINT_RENAME(uregex_openC)\n#define uregex_openUText U_ICU_ENTRY_POINT_RENAME(uregex_openUText)\n#define uregex_pattern U_ICU_ENTRY_POINT_RENAME(uregex_pattern)\n#define uregex_patternUText U_ICU_ENTRY_POINT_RENAME(uregex_patternUText)\n#define uregex_refreshUText U_ICU_ENTRY_POINT_RENAME(uregex_refreshUText)\n#define uregex_regionEnd U_ICU_ENTRY_POINT_RENAME(uregex_regionEnd)\n#define uregex_regionEnd64 U_ICU_ENTRY_POINT_RENAME(uregex_regionEnd64)\n#define uregex_regionStart U_ICU_ENTRY_POINT_RENAME(uregex_regionStart)\n#define uregex_regionStart64 U_ICU_ENTRY_POINT_RENAME(uregex_regionStart64)\n#define uregex_replaceAll U_ICU_ENTRY_POINT_RENAME(uregex_replaceAll)\n#define uregex_replaceAllUText U_ICU_ENTRY_POINT_RENAME(uregex_replaceAllUText)\n#define uregex_replaceFirst U_ICU_ENTRY_POINT_RENAME(uregex_replaceFirst)\n#define uregex_replaceFirstUText U_ICU_ENTRY_POINT_RENAME(uregex_replaceFirstUText)\n#define uregex_requireEnd U_ICU_ENTRY_POINT_RENAME(uregex_requireEnd)\n#define uregex_reset U_ICU_ENTRY_POINT_RENAME(uregex_reset)\n#define uregex_reset64 U_ICU_ENTRY_POINT_RENAME(uregex_reset64)\n#define uregex_setFindProgressCallback U_ICU_ENTRY_POINT_RENAME(uregex_setFindProgressCallback)\n#define uregex_setMatchCallback U_ICU_ENTRY_POINT_RENAME(uregex_setMatchCallback)\n#define uregex_setRegion U_ICU_ENTRY_POINT_RENAME(uregex_setRegion)\n#define uregex_setRegion64 U_ICU_ENTRY_POINT_RENAME(uregex_setRegion64)\n#define uregex_setRegionAndStart U_ICU_ENTRY_POINT_RENAME(uregex_setRegionAndStart)\n#define uregex_setStackLimit U_ICU_ENTRY_POINT_RENAME(uregex_setStackLimit)\n#define uregex_setText U_ICU_ENTRY_POINT_RENAME(uregex_setText)\n#define uregex_setTimeLimit U_ICU_ENTRY_POINT_RENAME(uregex_setTimeLimit)\n#define uregex_setUText U_ICU_ENTRY_POINT_RENAME(uregex_setUText)\n#define uregex_split U_ICU_ENTRY_POINT_RENAME(uregex_split)\n#define uregex_splitUText U_ICU_ENTRY_POINT_RENAME(uregex_splitUText)\n#define uregex_start U_ICU_ENTRY_POINT_RENAME(uregex_start)\n#define uregex_start64 U_ICU_ENTRY_POINT_RENAME(uregex_start64)\n#define uregex_ucstr_unescape_charAt U_ICU_ENTRY_POINT_RENAME(uregex_ucstr_unescape_charAt)\n#define uregex_useAnchoringBounds U_ICU_ENTRY_POINT_RENAME(uregex_useAnchoringBounds)\n#define uregex_useTransparentBounds U_ICU_ENTRY_POINT_RENAME(uregex_useTransparentBounds)\n#define uregex_utext_unescape_charAt U_ICU_ENTRY_POINT_RENAME(uregex_utext_unescape_charAt)\n#define uregion_areEqual U_ICU_ENTRY_POINT_RENAME(uregion_areEqual)\n#define uregion_contains U_ICU_ENTRY_POINT_RENAME(uregion_contains)\n#define uregion_getAvailable U_ICU_ENTRY_POINT_RENAME(uregion_getAvailable)\n#define uregion_getContainedRegions U_ICU_ENTRY_POINT_RENAME(uregion_getContainedRegions)\n#define uregion_getContainedRegionsOfType U_ICU_ENTRY_POINT_RENAME(uregion_getContainedRegionsOfType)\n#define uregion_getContainingRegion U_ICU_ENTRY_POINT_RENAME(uregion_getContainingRegion)\n#define uregion_getContainingRegionOfType U_ICU_ENTRY_POINT_RENAME(uregion_getContainingRegionOfType)\n#define uregion_getNumericCode U_ICU_ENTRY_POINT_RENAME(uregion_getNumericCode)\n#define uregion_getPreferredValues U_ICU_ENTRY_POINT_RENAME(uregion_getPreferredValues)\n#define uregion_getRegionCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionCode)\n#define uregion_getRegionFromCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionFromCode)\n#define uregion_getRegionFromNumericCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionFromNumericCode)\n#define uregion_getType U_ICU_ENTRY_POINT_RENAME(uregion_getType)\n#define ureldatefmt_close U_ICU_ENTRY_POINT_RENAME(ureldatefmt_close)\n#define ureldatefmt_closeResult U_ICU_ENTRY_POINT_RENAME(ureldatefmt_closeResult)\n#define ureldatefmt_combineDateAndTime U_ICU_ENTRY_POINT_RENAME(ureldatefmt_combineDateAndTime)\n#define ureldatefmt_format U_ICU_ENTRY_POINT_RENAME(ureldatefmt_format)\n#define ureldatefmt_formatNumeric U_ICU_ENTRY_POINT_RENAME(ureldatefmt_formatNumeric)\n#define ureldatefmt_formatNumericToResult U_ICU_ENTRY_POINT_RENAME(ureldatefmt_formatNumericToResult)\n#define ureldatefmt_formatToResult U_ICU_ENTRY_POINT_RENAME(ureldatefmt_formatToResult)\n#define ureldatefmt_open U_ICU_ENTRY_POINT_RENAME(ureldatefmt_open)\n#define ureldatefmt_openResult U_ICU_ENTRY_POINT_RENAME(ureldatefmt_openResult)\n#define ureldatefmt_resultAsValue U_ICU_ENTRY_POINT_RENAME(ureldatefmt_resultAsValue)\n#define ures_close U_ICU_ENTRY_POINT_RENAME(ures_close)\n#define ures_copyResb U_ICU_ENTRY_POINT_RENAME(ures_copyResb)\n#define ures_countArrayItems U_ICU_ENTRY_POINT_RENAME(ures_countArrayItems)\n#define ures_findResource U_ICU_ENTRY_POINT_RENAME(ures_findResource)\n#define ures_findSubResource U_ICU_ENTRY_POINT_RENAME(ures_findSubResource)\n#define ures_getAllItemsWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getAllItemsWithFallback)\n#define ures_getBinary U_ICU_ENTRY_POINT_RENAME(ures_getBinary)\n#define ures_getByIndex U_ICU_ENTRY_POINT_RENAME(ures_getByIndex)\n#define ures_getByKey U_ICU_ENTRY_POINT_RENAME(ures_getByKey)\n#define ures_getByKeyWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getByKeyWithFallback)\n#define ures_getFunctionalEquivalent U_ICU_ENTRY_POINT_RENAME(ures_getFunctionalEquivalent)\n#define ures_getInt U_ICU_ENTRY_POINT_RENAME(ures_getInt)\n#define ures_getIntVector U_ICU_ENTRY_POINT_RENAME(ures_getIntVector)\n#define ures_getKey U_ICU_ENTRY_POINT_RENAME(ures_getKey)\n#define ures_getKeywordValues U_ICU_ENTRY_POINT_RENAME(ures_getKeywordValues)\n#define ures_getLocale U_ICU_ENTRY_POINT_RENAME(ures_getLocale)\n#define ures_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ures_getLocaleByType)\n#define ures_getLocaleInternal U_ICU_ENTRY_POINT_RENAME(ures_getLocaleInternal)\n#define ures_getName U_ICU_ENTRY_POINT_RENAME(ures_getName)\n#define ures_getNextResource U_ICU_ENTRY_POINT_RENAME(ures_getNextResource)\n#define ures_getNextString U_ICU_ENTRY_POINT_RENAME(ures_getNextString)\n#define ures_getSize U_ICU_ENTRY_POINT_RENAME(ures_getSize)\n#define ures_getString U_ICU_ENTRY_POINT_RENAME(ures_getString)\n#define ures_getStringByIndex U_ICU_ENTRY_POINT_RENAME(ures_getStringByIndex)\n#define ures_getStringByKey U_ICU_ENTRY_POINT_RENAME(ures_getStringByKey)\n#define ures_getStringByKeyWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getStringByKeyWithFallback)\n#define ures_getType U_ICU_ENTRY_POINT_RENAME(ures_getType)\n#define ures_getUInt U_ICU_ENTRY_POINT_RENAME(ures_getUInt)\n#define ures_getUTF8String U_ICU_ENTRY_POINT_RENAME(ures_getUTF8String)\n#define ures_getUTF8StringByIndex U_ICU_ENTRY_POINT_RENAME(ures_getUTF8StringByIndex)\n#define ures_getUTF8StringByKey U_ICU_ENTRY_POINT_RENAME(ures_getUTF8StringByKey)\n#define ures_getVersion U_ICU_ENTRY_POINT_RENAME(ures_getVersion)\n#define ures_getVersionByKey U_ICU_ENTRY_POINT_RENAME(ures_getVersionByKey)\n#define ures_getVersionNumber U_ICU_ENTRY_POINT_RENAME(ures_getVersionNumber)\n#define ures_getVersionNumberInternal U_ICU_ENTRY_POINT_RENAME(ures_getVersionNumberInternal)\n#define ures_hasNext U_ICU_ENTRY_POINT_RENAME(ures_hasNext)\n#define ures_initStackObject U_ICU_ENTRY_POINT_RENAME(ures_initStackObject)\n#define ures_open U_ICU_ENTRY_POINT_RENAME(ures_open)\n#define ures_openAvailableLocales U_ICU_ENTRY_POINT_RENAME(ures_openAvailableLocales)\n#define ures_openDirect U_ICU_ENTRY_POINT_RENAME(ures_openDirect)\n#define ures_openDirectFillIn U_ICU_ENTRY_POINT_RENAME(ures_openDirectFillIn)\n#define ures_openFillIn U_ICU_ENTRY_POINT_RENAME(ures_openFillIn)\n#define ures_openNoDefault U_ICU_ENTRY_POINT_RENAME(ures_openNoDefault)\n#define ures_openU U_ICU_ENTRY_POINT_RENAME(ures_openU)\n#define ures_resetIterator U_ICU_ENTRY_POINT_RENAME(ures_resetIterator)\n#define ures_swap U_ICU_ENTRY_POINT_RENAME(ures_swap)\n#define uscript_breaksBetweenLetters U_ICU_ENTRY_POINT_RENAME(uscript_breaksBetweenLetters)\n#define uscript_closeRun U_ICU_ENTRY_POINT_RENAME(uscript_closeRun)\n#define uscript_getCode U_ICU_ENTRY_POINT_RENAME(uscript_getCode)\n#define uscript_getName U_ICU_ENTRY_POINT_RENAME(uscript_getName)\n#define uscript_getSampleString U_ICU_ENTRY_POINT_RENAME(uscript_getSampleString)\n#define uscript_getSampleUnicodeString U_ICU_ENTRY_POINT_RENAME(uscript_getSampleUnicodeString)\n#define uscript_getScript U_ICU_ENTRY_POINT_RENAME(uscript_getScript)\n#define uscript_getScriptExtensions U_ICU_ENTRY_POINT_RENAME(uscript_getScriptExtensions)\n#define uscript_getShortName U_ICU_ENTRY_POINT_RENAME(uscript_getShortName)\n#define uscript_getUsage U_ICU_ENTRY_POINT_RENAME(uscript_getUsage)\n#define uscript_hasScript U_ICU_ENTRY_POINT_RENAME(uscript_hasScript)\n#define uscript_isCased U_ICU_ENTRY_POINT_RENAME(uscript_isCased)\n#define uscript_isRightToLeft U_ICU_ENTRY_POINT_RENAME(uscript_isRightToLeft)\n#define uscript_nextRun U_ICU_ENTRY_POINT_RENAME(uscript_nextRun)\n#define uscript_openRun U_ICU_ENTRY_POINT_RENAME(uscript_openRun)\n#define uscript_resetRun U_ICU_ENTRY_POINT_RENAME(uscript_resetRun)\n#define uscript_setRunText U_ICU_ENTRY_POINT_RENAME(uscript_setRunText)\n#define usearch_close U_ICU_ENTRY_POINT_RENAME(usearch_close)\n#define usearch_first U_ICU_ENTRY_POINT_RENAME(usearch_first)\n#define usearch_following U_ICU_ENTRY_POINT_RENAME(usearch_following)\n#define usearch_getAttribute U_ICU_ENTRY_POINT_RENAME(usearch_getAttribute)\n#define usearch_getBreakIterator U_ICU_ENTRY_POINT_RENAME(usearch_getBreakIterator)\n#define usearch_getCollator U_ICU_ENTRY_POINT_RENAME(usearch_getCollator)\n#define usearch_getMatchedLength U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedLength)\n#define usearch_getMatchedStart U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedStart)\n#define usearch_getMatchedText U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedText)\n#define usearch_getOffset U_ICU_ENTRY_POINT_RENAME(usearch_getOffset)\n#define usearch_getPattern U_ICU_ENTRY_POINT_RENAME(usearch_getPattern)\n#define usearch_getText U_ICU_ENTRY_POINT_RENAME(usearch_getText)\n#define usearch_handleNextCanonical U_ICU_ENTRY_POINT_RENAME(usearch_handleNextCanonical)\n#define usearch_handleNextExact U_ICU_ENTRY_POINT_RENAME(usearch_handleNextExact)\n#define usearch_handlePreviousCanonical U_ICU_ENTRY_POINT_RENAME(usearch_handlePreviousCanonical)\n#define usearch_handlePreviousExact U_ICU_ENTRY_POINT_RENAME(usearch_handlePreviousExact)\n#define usearch_last U_ICU_ENTRY_POINT_RENAME(usearch_last)\n#define usearch_next U_ICU_ENTRY_POINT_RENAME(usearch_next)\n#define usearch_open U_ICU_ENTRY_POINT_RENAME(usearch_open)\n#define usearch_openFromCollator U_ICU_ENTRY_POINT_RENAME(usearch_openFromCollator)\n#define usearch_preceding U_ICU_ENTRY_POINT_RENAME(usearch_preceding)\n#define usearch_previous U_ICU_ENTRY_POINT_RENAME(usearch_previous)\n#define usearch_reset U_ICU_ENTRY_POINT_RENAME(usearch_reset)\n#define usearch_search U_ICU_ENTRY_POINT_RENAME(usearch_search)\n#define usearch_searchBackwards U_ICU_ENTRY_POINT_RENAME(usearch_searchBackwards)\n#define usearch_setAttribute U_ICU_ENTRY_POINT_RENAME(usearch_setAttribute)\n#define usearch_setBreakIterator U_ICU_ENTRY_POINT_RENAME(usearch_setBreakIterator)\n#define usearch_setCollator U_ICU_ENTRY_POINT_RENAME(usearch_setCollator)\n#define usearch_setOffset U_ICU_ENTRY_POINT_RENAME(usearch_setOffset)\n#define usearch_setPattern U_ICU_ENTRY_POINT_RENAME(usearch_setPattern)\n#define usearch_setText U_ICU_ENTRY_POINT_RENAME(usearch_setText)\n#define uset_add U_ICU_ENTRY_POINT_RENAME(uset_add)\n#define uset_addAll U_ICU_ENTRY_POINT_RENAME(uset_addAll)\n#define uset_addAllCodePoints U_ICU_ENTRY_POINT_RENAME(uset_addAllCodePoints)\n#define uset_addRange U_ICU_ENTRY_POINT_RENAME(uset_addRange)\n#define uset_addString U_ICU_ENTRY_POINT_RENAME(uset_addString)\n#define uset_applyIntPropertyValue U_ICU_ENTRY_POINT_RENAME(uset_applyIntPropertyValue)\n#define uset_applyPattern U_ICU_ENTRY_POINT_RENAME(uset_applyPattern)\n#define uset_applyPropertyAlias U_ICU_ENTRY_POINT_RENAME(uset_applyPropertyAlias)\n#define uset_charAt U_ICU_ENTRY_POINT_RENAME(uset_charAt)\n#define uset_clear U_ICU_ENTRY_POINT_RENAME(uset_clear)\n#define uset_clone U_ICU_ENTRY_POINT_RENAME(uset_clone)\n#define uset_cloneAsThawed U_ICU_ENTRY_POINT_RENAME(uset_cloneAsThawed)\n#define uset_close U_ICU_ENTRY_POINT_RENAME(uset_close)\n#define uset_closeOver U_ICU_ENTRY_POINT_RENAME(uset_closeOver)\n#define uset_compact U_ICU_ENTRY_POINT_RENAME(uset_compact)\n#define uset_complement U_ICU_ENTRY_POINT_RENAME(uset_complement)\n#define uset_complementAll U_ICU_ENTRY_POINT_RENAME(uset_complementAll)\n#define uset_contains U_ICU_ENTRY_POINT_RENAME(uset_contains)\n#define uset_containsAll U_ICU_ENTRY_POINT_RENAME(uset_containsAll)\n#define uset_containsAllCodePoints U_ICU_ENTRY_POINT_RENAME(uset_containsAllCodePoints)\n#define uset_containsNone U_ICU_ENTRY_POINT_RENAME(uset_containsNone)\n#define uset_containsRange U_ICU_ENTRY_POINT_RENAME(uset_containsRange)\n#define uset_containsSome U_ICU_ENTRY_POINT_RENAME(uset_containsSome)\n#define uset_containsString U_ICU_ENTRY_POINT_RENAME(uset_containsString)\n#define uset_equals U_ICU_ENTRY_POINT_RENAME(uset_equals)\n#define uset_freeze U_ICU_ENTRY_POINT_RENAME(uset_freeze)\n#define uset_getItem U_ICU_ENTRY_POINT_RENAME(uset_getItem)\n#define uset_getItemCount U_ICU_ENTRY_POINT_RENAME(uset_getItemCount)\n#define uset_getSerializedRange U_ICU_ENTRY_POINT_RENAME(uset_getSerializedRange)\n#define uset_getSerializedRangeCount U_ICU_ENTRY_POINT_RENAME(uset_getSerializedRangeCount)\n#define uset_getSerializedSet U_ICU_ENTRY_POINT_RENAME(uset_getSerializedSet)\n#define uset_indexOf U_ICU_ENTRY_POINT_RENAME(uset_indexOf)\n#define uset_isEmpty U_ICU_ENTRY_POINT_RENAME(uset_isEmpty)\n#define uset_isFrozen U_ICU_ENTRY_POINT_RENAME(uset_isFrozen)\n#define uset_open U_ICU_ENTRY_POINT_RENAME(uset_open)\n#define uset_openEmpty U_ICU_ENTRY_POINT_RENAME(uset_openEmpty)\n#define uset_openPattern U_ICU_ENTRY_POINT_RENAME(uset_openPattern)\n#define uset_openPatternOptions U_ICU_ENTRY_POINT_RENAME(uset_openPatternOptions)\n#define uset_remove U_ICU_ENTRY_POINT_RENAME(uset_remove)\n#define uset_removeAll U_ICU_ENTRY_POINT_RENAME(uset_removeAll)\n#define uset_removeAllStrings U_ICU_ENTRY_POINT_RENAME(uset_removeAllStrings)\n#define uset_removeRange U_ICU_ENTRY_POINT_RENAME(uset_removeRange)\n#define uset_removeString U_ICU_ENTRY_POINT_RENAME(uset_removeString)\n#define uset_resemblesPattern U_ICU_ENTRY_POINT_RENAME(uset_resemblesPattern)\n#define uset_retain U_ICU_ENTRY_POINT_RENAME(uset_retain)\n#define uset_retainAll U_ICU_ENTRY_POINT_RENAME(uset_retainAll)\n#define uset_serialize U_ICU_ENTRY_POINT_RENAME(uset_serialize)\n#define uset_serializedContains U_ICU_ENTRY_POINT_RENAME(uset_serializedContains)\n#define uset_set U_ICU_ENTRY_POINT_RENAME(uset_set)\n#define uset_setSerializedToOne U_ICU_ENTRY_POINT_RENAME(uset_setSerializedToOne)\n#define uset_size U_ICU_ENTRY_POINT_RENAME(uset_size)\n#define uset_span U_ICU_ENTRY_POINT_RENAME(uset_span)\n#define uset_spanBack U_ICU_ENTRY_POINT_RENAME(uset_spanBack)\n#define uset_spanBackUTF8 U_ICU_ENTRY_POINT_RENAME(uset_spanBackUTF8)\n#define uset_spanUTF8 U_ICU_ENTRY_POINT_RENAME(uset_spanUTF8)\n#define uset_toPattern U_ICU_ENTRY_POINT_RENAME(uset_toPattern)\n#define uspoof_areConfusable U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusable)\n#define uspoof_areConfusableUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusableUTF8)\n#define uspoof_areConfusableUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusableUnicodeString)\n#define uspoof_check U_ICU_ENTRY_POINT_RENAME(uspoof_check)\n#define uspoof_check2 U_ICU_ENTRY_POINT_RENAME(uspoof_check2)\n#define uspoof_check2UTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_check2UTF8)\n#define uspoof_check2UnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_check2UnicodeString)\n#define uspoof_checkUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_checkUTF8)\n#define uspoof_checkUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_checkUnicodeString)\n#define uspoof_clone U_ICU_ENTRY_POINT_RENAME(uspoof_clone)\n#define uspoof_close U_ICU_ENTRY_POINT_RENAME(uspoof_close)\n#define uspoof_closeCheckResult U_ICU_ENTRY_POINT_RENAME(uspoof_closeCheckResult)\n#define uspoof_getAllowedChars U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedChars)\n#define uspoof_getAllowedLocales U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedLocales)\n#define uspoof_getAllowedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedUnicodeSet)\n#define uspoof_getCheckResultChecks U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultChecks)\n#define uspoof_getCheckResultNumerics U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultNumerics)\n#define uspoof_getCheckResultRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultRestrictionLevel)\n#define uspoof_getChecks U_ICU_ENTRY_POINT_RENAME(uspoof_getChecks)\n#define uspoof_getInclusionSet U_ICU_ENTRY_POINT_RENAME(uspoof_getInclusionSet)\n#define uspoof_getInclusionUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getInclusionUnicodeSet)\n#define uspoof_getRecommendedSet U_ICU_ENTRY_POINT_RENAME(uspoof_getRecommendedSet)\n#define uspoof_getRecommendedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getRecommendedUnicodeSet)\n#define uspoof_getRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_getRestrictionLevel)\n#define uspoof_getSkeleton U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeleton)\n#define uspoof_getSkeletonUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeletonUTF8)\n#define uspoof_getSkeletonUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeletonUnicodeString)\n#define uspoof_internalInitStatics U_ICU_ENTRY_POINT_RENAME(uspoof_internalInitStatics)\n#define uspoof_open U_ICU_ENTRY_POINT_RENAME(uspoof_open)\n#define uspoof_openCheckResult U_ICU_ENTRY_POINT_RENAME(uspoof_openCheckResult)\n#define uspoof_openFromSerialized U_ICU_ENTRY_POINT_RENAME(uspoof_openFromSerialized)\n#define uspoof_openFromSource U_ICU_ENTRY_POINT_RENAME(uspoof_openFromSource)\n#define uspoof_serialize U_ICU_ENTRY_POINT_RENAME(uspoof_serialize)\n#define uspoof_setAllowedChars U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedChars)\n#define uspoof_setAllowedLocales U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedLocales)\n#define uspoof_setAllowedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedUnicodeSet)\n#define uspoof_setChecks U_ICU_ENTRY_POINT_RENAME(uspoof_setChecks)\n#define uspoof_setRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_setRestrictionLevel)\n#define uspoof_swap U_ICU_ENTRY_POINT_RENAME(uspoof_swap)\n#define usprep_close U_ICU_ENTRY_POINT_RENAME(usprep_close)\n#define usprep_open U_ICU_ENTRY_POINT_RENAME(usprep_open)\n#define usprep_openByType U_ICU_ENTRY_POINT_RENAME(usprep_openByType)\n#define usprep_prepare U_ICU_ENTRY_POINT_RENAME(usprep_prepare)\n#define usprep_swap U_ICU_ENTRY_POINT_RENAME(usprep_swap)\n#define ustr_hashCharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashCharsN)\n#define ustr_hashICharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashICharsN)\n#define ustr_hashUCharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashUCharsN)\n#define ustrcase_getCaseLocale U_ICU_ENTRY_POINT_RENAME(ustrcase_getCaseLocale)\n#define ustrcase_getTitleBreakIterator U_ICU_ENTRY_POINT_RENAME(ustrcase_getTitleBreakIterator)\n#define ustrcase_internalFold U_ICU_ENTRY_POINT_RENAME(ustrcase_internalFold)\n#define ustrcase_internalToLower U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToLower)\n#define ustrcase_internalToTitle U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToTitle)\n#define ustrcase_internalToUpper U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToUpper)\n#define ustrcase_map U_ICU_ENTRY_POINT_RENAME(ustrcase_map)\n#define ustrcase_mapWithOverlap U_ICU_ENTRY_POINT_RENAME(ustrcase_mapWithOverlap)\n#define utext_char32At U_ICU_ENTRY_POINT_RENAME(utext_char32At)\n#define utext_clone U_ICU_ENTRY_POINT_RENAME(utext_clone)\n#define utext_close U_ICU_ENTRY_POINT_RENAME(utext_close)\n#define utext_copy U_ICU_ENTRY_POINT_RENAME(utext_copy)\n#define utext_current32 U_ICU_ENTRY_POINT_RENAME(utext_current32)\n#define utext_equals U_ICU_ENTRY_POINT_RENAME(utext_equals)\n#define utext_extract U_ICU_ENTRY_POINT_RENAME(utext_extract)\n#define utext_freeze U_ICU_ENTRY_POINT_RENAME(utext_freeze)\n#define utext_getNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_getNativeIndex)\n#define utext_getPreviousNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_getPreviousNativeIndex)\n#define utext_hasMetaData U_ICU_ENTRY_POINT_RENAME(utext_hasMetaData)\n#define utext_isLengthExpensive U_ICU_ENTRY_POINT_RENAME(utext_isLengthExpensive)\n#define utext_isWritable U_ICU_ENTRY_POINT_RENAME(utext_isWritable)\n#define utext_moveIndex32 U_ICU_ENTRY_POINT_RENAME(utext_moveIndex32)\n#define utext_nativeLength U_ICU_ENTRY_POINT_RENAME(utext_nativeLength)\n#define utext_next32 U_ICU_ENTRY_POINT_RENAME(utext_next32)\n#define utext_next32From U_ICU_ENTRY_POINT_RENAME(utext_next32From)\n#define utext_openCharacterIterator U_ICU_ENTRY_POINT_RENAME(utext_openCharacterIterator)\n#define utext_openConstUnicodeString U_ICU_ENTRY_POINT_RENAME(utext_openConstUnicodeString)\n#define utext_openReplaceable U_ICU_ENTRY_POINT_RENAME(utext_openReplaceable)\n#define utext_openUChars U_ICU_ENTRY_POINT_RENAME(utext_openUChars)\n#define utext_openUTF8 U_ICU_ENTRY_POINT_RENAME(utext_openUTF8)\n#define utext_openUnicodeString U_ICU_ENTRY_POINT_RENAME(utext_openUnicodeString)\n#define utext_previous32 U_ICU_ENTRY_POINT_RENAME(utext_previous32)\n#define utext_previous32From U_ICU_ENTRY_POINT_RENAME(utext_previous32From)\n#define utext_replace U_ICU_ENTRY_POINT_RENAME(utext_replace)\n#define utext_setNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_setNativeIndex)\n#define utext_setup U_ICU_ENTRY_POINT_RENAME(utext_setup)\n#define utf8_appendCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_appendCharSafeBody)\n#define utf8_back1SafeBody U_ICU_ENTRY_POINT_RENAME(utf8_back1SafeBody)\n#define utf8_countTrailBytes U_ICU_ENTRY_POINT_RENAME(utf8_countTrailBytes)\n#define utf8_nextCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_nextCharSafeBody)\n#define utf8_prevCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_prevCharSafeBody)\n#define utmscale_fromInt64 U_ICU_ENTRY_POINT_RENAME(utmscale_fromInt64)\n#define utmscale_getTimeScaleValue U_ICU_ENTRY_POINT_RENAME(utmscale_getTimeScaleValue)\n#define utmscale_toInt64 U_ICU_ENTRY_POINT_RENAME(utmscale_toInt64)\n#define utrace_cleanup U_ICU_ENTRY_POINT_RENAME(utrace_cleanup)\n#define utrace_data U_ICU_ENTRY_POINT_RENAME(utrace_data)\n#define utrace_entry U_ICU_ENTRY_POINT_RENAME(utrace_entry)\n#define utrace_exit U_ICU_ENTRY_POINT_RENAME(utrace_exit)\n#define utrace_format U_ICU_ENTRY_POINT_RENAME(utrace_format)\n#define utrace_functionName U_ICU_ENTRY_POINT_RENAME(utrace_functionName)\n#define utrace_getFunctions U_ICU_ENTRY_POINT_RENAME(utrace_getFunctions)\n#define utrace_getLevel U_ICU_ENTRY_POINT_RENAME(utrace_getLevel)\n#define utrace_setFunctions U_ICU_ENTRY_POINT_RENAME(utrace_setFunctions)\n#define utrace_setLevel U_ICU_ENTRY_POINT_RENAME(utrace_setLevel)\n#define utrace_vformat U_ICU_ENTRY_POINT_RENAME(utrace_vformat)\n#define utrans_clone U_ICU_ENTRY_POINT_RENAME(utrans_clone)\n#define utrans_close U_ICU_ENTRY_POINT_RENAME(utrans_close)\n#define utrans_countAvailableIDs U_ICU_ENTRY_POINT_RENAME(utrans_countAvailableIDs)\n#define utrans_getAvailableID U_ICU_ENTRY_POINT_RENAME(utrans_getAvailableID)\n#define utrans_getID U_ICU_ENTRY_POINT_RENAME(utrans_getID)\n#define utrans_getSourceSet U_ICU_ENTRY_POINT_RENAME(utrans_getSourceSet)\n#define utrans_getUnicodeID U_ICU_ENTRY_POINT_RENAME(utrans_getUnicodeID)\n#define utrans_open U_ICU_ENTRY_POINT_RENAME(utrans_open)\n#define utrans_openIDs U_ICU_ENTRY_POINT_RENAME(utrans_openIDs)\n#define utrans_openInverse U_ICU_ENTRY_POINT_RENAME(utrans_openInverse)\n#define utrans_openU U_ICU_ENTRY_POINT_RENAME(utrans_openU)\n#define utrans_register U_ICU_ENTRY_POINT_RENAME(utrans_register)\n#define utrans_rep_caseContextIterator U_ICU_ENTRY_POINT_RENAME(utrans_rep_caseContextIterator)\n#define utrans_setFilter U_ICU_ENTRY_POINT_RENAME(utrans_setFilter)\n#define utrans_stripRules U_ICU_ENTRY_POINT_RENAME(utrans_stripRules)\n#define utrans_toRules U_ICU_ENTRY_POINT_RENAME(utrans_toRules)\n#define utrans_trans U_ICU_ENTRY_POINT_RENAME(utrans_trans)\n#define utrans_transIncremental U_ICU_ENTRY_POINT_RENAME(utrans_transIncremental)\n#define utrans_transIncrementalUChars U_ICU_ENTRY_POINT_RENAME(utrans_transIncrementalUChars)\n#define utrans_transUChars U_ICU_ENTRY_POINT_RENAME(utrans_transUChars)\n#define utrans_transliterator_cleanup U_ICU_ENTRY_POINT_RENAME(utrans_transliterator_cleanup)\n#define utrans_unregister U_ICU_ENTRY_POINT_RENAME(utrans_unregister)\n#define utrans_unregisterID U_ICU_ENTRY_POINT_RENAME(utrans_unregisterID)\n#define utrie2_clone U_ICU_ENTRY_POINT_RENAME(utrie2_clone)\n#define utrie2_cloneAsThawed U_ICU_ENTRY_POINT_RENAME(utrie2_cloneAsThawed)\n#define utrie2_close U_ICU_ENTRY_POINT_RENAME(utrie2_close)\n#define utrie2_enum U_ICU_ENTRY_POINT_RENAME(utrie2_enum)\n#define utrie2_enumForLeadSurrogate U_ICU_ENTRY_POINT_RENAME(utrie2_enumForLeadSurrogate)\n#define utrie2_freeze U_ICU_ENTRY_POINT_RENAME(utrie2_freeze)\n#define utrie2_fromUTrie U_ICU_ENTRY_POINT_RENAME(utrie2_fromUTrie)\n#define utrie2_get32 U_ICU_ENTRY_POINT_RENAME(utrie2_get32)\n#define utrie2_get32FromLeadSurrogateCodeUnit U_ICU_ENTRY_POINT_RENAME(utrie2_get32FromLeadSurrogateCodeUnit)\n#define utrie2_internalU8NextIndex U_ICU_ENTRY_POINT_RENAME(utrie2_internalU8NextIndex)\n#define utrie2_internalU8PrevIndex U_ICU_ENTRY_POINT_RENAME(utrie2_internalU8PrevIndex)\n#define utrie2_isFrozen U_ICU_ENTRY_POINT_RENAME(utrie2_isFrozen)\n#define utrie2_open U_ICU_ENTRY_POINT_RENAME(utrie2_open)\n#define utrie2_openDummy U_ICU_ENTRY_POINT_RENAME(utrie2_openDummy)\n#define utrie2_openFromSerialized U_ICU_ENTRY_POINT_RENAME(utrie2_openFromSerialized)\n#define utrie2_serialize U_ICU_ENTRY_POINT_RENAME(utrie2_serialize)\n#define utrie2_set32 U_ICU_ENTRY_POINT_RENAME(utrie2_set32)\n#define utrie2_set32ForLeadSurrogateCodeUnit U_ICU_ENTRY_POINT_RENAME(utrie2_set32ForLeadSurrogateCodeUnit)\n#define utrie2_setRange32 U_ICU_ENTRY_POINT_RENAME(utrie2_setRange32)\n#define utrie2_swap U_ICU_ENTRY_POINT_RENAME(utrie2_swap)\n#define utrie_clone U_ICU_ENTRY_POINT_RENAME(utrie_clone)\n#define utrie_close U_ICU_ENTRY_POINT_RENAME(utrie_close)\n#define utrie_defaultGetFoldingOffset U_ICU_ENTRY_POINT_RENAME(utrie_defaultGetFoldingOffset)\n#define utrie_enum U_ICU_ENTRY_POINT_RENAME(utrie_enum)\n#define utrie_get32 U_ICU_ENTRY_POINT_RENAME(utrie_get32)\n#define utrie_getData U_ICU_ENTRY_POINT_RENAME(utrie_getData)\n#define utrie_open U_ICU_ENTRY_POINT_RENAME(utrie_open)\n#define utrie_serialize U_ICU_ENTRY_POINT_RENAME(utrie_serialize)\n#define utrie_set32 U_ICU_ENTRY_POINT_RENAME(utrie_set32)\n#define utrie_setRange32 U_ICU_ENTRY_POINT_RENAME(utrie_setRange32)\n#define utrie_swap U_ICU_ENTRY_POINT_RENAME(utrie_swap)\n#define utrie_swapAnyVersion U_ICU_ENTRY_POINT_RENAME(utrie_swapAnyVersion)\n#define utrie_unserialize U_ICU_ENTRY_POINT_RENAME(utrie_unserialize)\n#define utrie_unserializeDummy U_ICU_ENTRY_POINT_RENAME(utrie_unserializeDummy)\n#define vzone_clone U_ICU_ENTRY_POINT_RENAME(vzone_clone)\n#define vzone_close U_ICU_ENTRY_POINT_RENAME(vzone_close)\n#define vzone_countTransitionRules U_ICU_ENTRY_POINT_RENAME(vzone_countTransitionRules)\n#define vzone_equals U_ICU_ENTRY_POINT_RENAME(vzone_equals)\n#define vzone_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(vzone_getDynamicClassID)\n#define vzone_getLastModified U_ICU_ENTRY_POINT_RENAME(vzone_getLastModified)\n#define vzone_getNextTransition U_ICU_ENTRY_POINT_RENAME(vzone_getNextTransition)\n#define vzone_getOffset U_ICU_ENTRY_POINT_RENAME(vzone_getOffset)\n#define vzone_getOffset2 U_ICU_ENTRY_POINT_RENAME(vzone_getOffset2)\n#define vzone_getOffset3 U_ICU_ENTRY_POINT_RENAME(vzone_getOffset3)\n#define vzone_getPreviousTransition U_ICU_ENTRY_POINT_RENAME(vzone_getPreviousTransition)\n#define vzone_getRawOffset U_ICU_ENTRY_POINT_RENAME(vzone_getRawOffset)\n#define vzone_getStaticClassID U_ICU_ENTRY_POINT_RENAME(vzone_getStaticClassID)\n#define vzone_getTZURL U_ICU_ENTRY_POINT_RENAME(vzone_getTZURL)\n#define vzone_hasSameRules U_ICU_ENTRY_POINT_RENAME(vzone_hasSameRules)\n#define vzone_inDaylightTime U_ICU_ENTRY_POINT_RENAME(vzone_inDaylightTime)\n#define vzone_openData U_ICU_ENTRY_POINT_RENAME(vzone_openData)\n#define vzone_openID U_ICU_ENTRY_POINT_RENAME(vzone_openID)\n#define vzone_setLastModified U_ICU_ENTRY_POINT_RENAME(vzone_setLastModified)\n#define vzone_setRawOffset U_ICU_ENTRY_POINT_RENAME(vzone_setRawOffset)\n#define vzone_setTZURL U_ICU_ENTRY_POINT_RENAME(vzone_setTZURL)\n#define vzone_useDaylightTime U_ICU_ENTRY_POINT_RENAME(vzone_useDaylightTime)\n#define vzone_write U_ICU_ENTRY_POINT_RENAME(vzone_write)\n#define vzone_writeFromStart U_ICU_ENTRY_POINT_RENAME(vzone_writeFromStart)\n#define vzone_writeSimple U_ICU_ENTRY_POINT_RENAME(vzone_writeSimple)\n#define zrule_close U_ICU_ENTRY_POINT_RENAME(zrule_close)\n#define zrule_equals U_ICU_ENTRY_POINT_RENAME(zrule_equals)\n#define zrule_getDSTSavings U_ICU_ENTRY_POINT_RENAME(zrule_getDSTSavings)\n#define zrule_getName U_ICU_ENTRY_POINT_RENAME(zrule_getName)\n#define zrule_getRawOffset U_ICU_ENTRY_POINT_RENAME(zrule_getRawOffset)\n#define zrule_isEquivalentTo U_ICU_ENTRY_POINT_RENAME(zrule_isEquivalentTo)\n#define ztrans_adoptFrom U_ICU_ENTRY_POINT_RENAME(ztrans_adoptFrom)\n#define ztrans_adoptTo U_ICU_ENTRY_POINT_RENAME(ztrans_adoptTo)\n#define ztrans_clone U_ICU_ENTRY_POINT_RENAME(ztrans_clone)\n#define ztrans_close U_ICU_ENTRY_POINT_RENAME(ztrans_close)\n#define ztrans_equals U_ICU_ENTRY_POINT_RENAME(ztrans_equals)\n#define ztrans_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(ztrans_getDynamicClassID)\n#define ztrans_getFrom U_ICU_ENTRY_POINT_RENAME(ztrans_getFrom)\n#define ztrans_getStaticClassID U_ICU_ENTRY_POINT_RENAME(ztrans_getStaticClassID)\n#define ztrans_getTime U_ICU_ENTRY_POINT_RENAME(ztrans_getTime)\n#define ztrans_getTo U_ICU_ENTRY_POINT_RENAME(ztrans_getTo)\n#define ztrans_open U_ICU_ENTRY_POINT_RENAME(ztrans_open)\n#define ztrans_openEmpty U_ICU_ENTRY_POINT_RENAME(ztrans_openEmpty)\n#define ztrans_setFrom U_ICU_ENTRY_POINT_RENAME(ztrans_setFrom)\n#define ztrans_setTime U_ICU_ENTRY_POINT_RENAME(ztrans_setTime)\n#define ztrans_setTo U_ICU_ENTRY_POINT_RENAME(ztrans_setTo)\n\n#endif /* !(defined(_MSC_VER) && defined(__INTELLISENSE__)) */\n#endif /* U_DISABLE_RENAMING */\n#endif /* URENAME_H */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/depstest/dependencies.txt": "# -*- icu-dependencies -*-\n# Copyright (C) 2016 and later: Unicode, Inc. and others.\n# License & terms of use: http://www.unicode.org/copyright.html\n# Copyright (C) 2011-2016, International Business Machines\n# Corporation and others. All Rights Reserved.\n#\n# file name: dependencies.txt\n#\n# created on: 2011may26\n# created by: Markus W. Scherer\n#\n# See http://site.icu-project.org/processes/release/tasks/healthy-code#TOC-Check-library-dependencies\n\n# Standard library symbols used by ICU --------------------------------------- #\n\nsystem_symbols:\n  deps\n    # C\n    PIC system_misc system_debug malloc_functions ubsan\n    c_strings c_string_formatting\n    int_functions floating_point trigonometry\n    stdlib_qsort\n    pthread system_locale\n    stdio_input stdio_output file_io readlink_function dir_io mmap_functions dlfcn\n    # C++\n    cplusplus iostream\n    std_mutex\n\ngroup: PIC\n    # Position-Independent Code (-fPIC) requires a Global Offset Table.\n    _GLOBAL_OFFSET_TABLE_\n\ngroup: system_misc\n    abort\n\ngroup: system_debug\n    __assert_fail __stack_chk_fail\n\ngroup: malloc_functions\n    free malloc realloc\n\ngroup: std_mutex\n    std::condition_variable::notify_one()\n    std::condition_variable::wait(std::unique_lock<std::mutex>&)\n    std::condition_variable::notify_all()\n    std::condition_variable::condition_variable()\n    std::condition_variable::~condition_variable()\n    std::condition_variable_any::condition_variable_any()\n    std::condition_variable_any::~condition_variable_any()\n\ngroup: ubsan\n    # UBSan=UndefinedBehaviorSanitizer, clang -fsanitize=bounds\n    __ubsan_handle_out_of_bounds\n\ngroup: c_strings\n    isspace isdigit\n    __ctype_b_loc  # for <ctype.h>\n    # We must not use tolower and toupper because they are system-locale-sensitive (Turkish i).\n    strlen strchr strrchr strstr strcmp strncmp strcpy strncpy strcat strncat\n    memchr memcmp memcpy memmove memset\n    # Additional symbols in an optimized build.\n    __strcpy_chk __strncpy_chk __strcat_chk __strncat_chk\n    __rawmemchr __memcpy_chk __memmove_chk __memset_chk\n\ngroup: c_string_formatting\n    atoi atol strtod strtod_l strtol strtoul\n    sprintf snprintf\n    # Additional symbols in an optimized build.\n    __sprintf_chk\n\ngroup: int_functions\n    div\n\ngroup: floating_point\n    abs fabs floor ceil modf fmod log pow round sqrt trunc\n\ngroup: trigonometry\n    acos asin atan atan2 cos sin tan\n    # Additional symbols in an optimized build.\n    sincos\n\ngroup: stdlib_qsort\n    qsort\n\ngroup: pthread\n    pthread_mutex_init pthread_mutex_destroy pthread_mutex_lock pthread_mutex_unlock\n    pthread_cond_wait pthread_cond_broadcast pthread_cond_signal\n\ngroup: system_locale\n    getenv\n    nl_langinfo setlocale newlocale freelocale\n    gettimeofday localtime_r tzname tzset __timezone\n\ngroup: stdio_input\n    fopen fclose fgets fread fseek ftell rewind feof fileno\n    # Additional symbols in an optimized build.\n    __fgets_chk __fread_chk\n\ngroup: stdio_output\n    fflush fwrite\n    stdout\n\ngroup: file_io\n    open close stat\n    # Additional symbols in an optimized build.\n    __xstat\n\ngroup: readlink_function\n    readlink  # putil.cpp uprv_tzname() calls this in a hack to get the time zone name\n\ngroup: dir_io\n    opendir closedir readdir  # for a hack to get the time zone name\n\ngroup: mmap_functions  # for memory-mapped data loading\n    mmap munmap\n\ngroup: dlfcn\n    dlopen dlclose dlsym  # called by putil.o only for icuplug.o\n\ngroup: cplusplus\n    __dynamic_cast\n    # The compiler generates references to the global operator delete\n    # even when no code actually uses it.\n    # ICU must not _use_ the global operator delete.\n    \"operator delete(void*)\"\n    # ICU also must not use the global operator new.\n    # \"operator new[](unsigned long)\"\n\n    # _Unwind_Resume is related to exceptions:\n    # \"A call to this routine is inserted as the end of a landing pad that performs cleanup,\n    # but does not resume normal execution. It causes unwinding to proceed further.\"\n    # (Linux Standard Base Specification 1.3)\n    # Even though ICU does not actually use (nor handle) exceptions.\n    _Unwind_Resume\n    # std::terminate() looks similar to _Unwind_Resume:\n    # \"Calls the current terminate handler.\"\n    std::terminate()\n\ngroup: iostream\n    \"std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)\"\n    \"std::basic_ios<char, std::char_traits<char> >::eof() const\"\n    \"std::basic_ios<char, std::char_traits<char> >::fail() const\"\n    \"std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)\"\n    std::ios_base::Init::Init()\n    std::ios_base::Init::~Init()\n    std::istream::get()\n    std::istream::putback(char)\n    # Additional symbols in an optimized build.\n    \"std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)\"\n\n# ICU common library --------------------------------------------------------- #\n\nlibrary: stubdata\n    stubdata.o  # Exports icudt48_dat.\n\nlibrary: common\n    # All files in the common library are listed in its dependencies.\n  deps\n    # Libraries and groups that the common library depends on.\n    pluralmap\n    date_interval\n    breakiterator\n    uts46 filterednormalizer2 normalizer2 loadednormalizer2 canonical_iterator\n    normlzr unormcmp unorm\n    idna2003 stringprep\n    stringenumeration\n    unistr_props unistr_case unistr_case_locale unistr_titlecase_brkiter unistr_cnv\n    cstr\n    uniset_core uniset_props uniset_closure usetiter uset uset_props\n    static_unicode_sets\n    uiter edits\n    ucasemap ucasemap_titlecase_brkiter script_runs\n    uprops ubidi_props ucase uscript uscript_props characterproperties\n    ubidi ushape ubiditransform\n    resourcebundle service_registration resbund_cnv ures_cnv icudataver ucat\n    currency\n    locale_display_names2\n    conversion converter_selector ucnv_set ucnvdisp\n    messagepattern simpleformatter\n    icu_utility icu_utility_with_props\n    ustr_wcs\n    unifiedcache\n    ucharstriebuilder ucharstrieiterator\n    bytestriebuilder bytestrieiterator\n    hashtable uhash uvector uvector32 uvector64 ulist\n    propsvec utrie2 utrie2_builder ucptrie umutablecptrie utrie_swap\n    sort\n    uinit utypes errorcode\n    icuplug\n    platform\n    localebuilder\n\ngroup: pluralmap\n    # TODO: Move to i18n library, ticket #11926.\n    pluralmap.o\n  deps\n    platform\n\ngroup: date_interval  # class DateInterval\n    dtintrv.o\n  deps\n    platform\n\ngroup: breakiterator\n    # We could try to split off a breakiterator_builder group,\n    # but we still need uniset_props for code like in the ThaiBreakEngine constructor\n    # which does\n    #   fThaiWordSet.applyPattern(UNICODE_STRING_SIMPLE(\"[[:Thai:]&[:LineBreak=SA:]]\"), status)\n    brkiter.o brkeng.o ubrk.o\n    rbbi.o rbbinode.o rbbiscan.o rbbisetb.o rbbistbl.o rbbitblb.o\n    rbbidata.o rbbirb.o rbbi_cache.o\n    dictionarydata.o dictbe.o\n    # BreakIterator::makeInstance() factory implementation makes for circular dependency\n    # between BreakIterator base and FilteredBreakIteratorBuilder.\n    filteredbrk.o\n  deps\n    resourcebundle service_registration\n    schriter utext uniset_core uniset_props\n    uhash ustack utrie2_builder\n    ucharstrie bytestrie\n    ucharstriebuilder  # for filteredbrk.o\n    normlzr  # for dictbe.o, should switch to Normalizer2\n    uvector32 # for dictbe.o\n\ngroup: unormcmp  # unorm_compare()\n    unormcmp.o\n  deps\n    filterednormalizer2\n    uniset_props  # for uniset_getUnicode32Instance()\n    ucase\n\ngroup: unorm  # old normalization C API\n    unorm.o\n  deps\n    filterednormalizer2\n    uniset_props  # for uniset_getUnicode32Instance()\n    uiter\n\ngroup: normlzr  # old Normalizer C++ class\n    normlzr.o\n  deps\n    filterednormalizer2\n    uniset_props  # for uniset_getUnicode32Instance()\n    schriter\n\ngroup: uts46\n    uts46.o\n  deps\n    normalizer2 loadednormalizer2 punycode\n    uchar  # for u_charType() (via U_GET_GC_MASK(c))\n    ubidi_props  # for u_charDirection() & ubidi_getJoiningType()\n    bytestream\n\ngroup: filterednormalizer2\n    filterednormalizer2.o\n  deps\n    normalizer2\n\ngroup: idna2003\n    uidna.o\n  deps\n    stringprep punycode\n\ngroup: stringprep\n    usprep.o\n  deps\n    unorm  # could change to use filterednormalizer2 directly for Unicode 3.2 normalization\n    normalizer2\n    ubidi_props utrie\n\ngroup: canonical_iterator\n    caniter.o\n  deps\n    normalizer2 usetiter\n\ngroup: loadednormalizer2\n    loadednormalizer2impl.o\n  deps\n    normalizer2\n\ngroup: normalizer2\n    normalizer2.o\n    normalizer2impl.o\n  deps\n    uniset_core\n    bytestream bytesinkutil  # for UTF-8 output\n    umutablecptrie  # for building CanonIterData & FCD\n    utrie_swap  # TODO(ICU-20170): move unorm2_swap() to a separate file\n    uvector  # for building CanonIterData\n    uhash  # for the instance cache\n    udata\n\ngroup: punycode\n    punycode.o\n  deps\n    platform\n\ngroup: static_unicode_sets\n    static_unicode_sets.o\n  deps\n    resourcebundle uniset_props\n\ngroup: uset_props\n    uset_props.o\n  deps\n    uniset_closure uniset_props uniset_core\n\ngroup: uset\n    uset.o\n  deps\n    uniset_core\n\ngroup: uniset_closure\n    uniset_closure.o\n  deps\n    uniset_core unistr_case_locale unistr_titlecase_brkiter\n\ngroup: uniset_props\n    uniset_props.o ruleiter.o\n  deps\n    uniset_core uprops unistr_case characterproperties\n    parsepos\n    resourcebundle\n    propname unames\n\ngroup: parsepos\n    parsepos.o\n  deps\n    platform\n\ngroup: usetiter  # UnicodeSetIterator\n    usetiter.o\n  deps\n    uniset_core\n\ngroup: uniset_core\n    unifilt.o unifunct.o\n    uniset.o bmpset.o unisetspan.o\n  deps\n    patternprops\n    icu_utility\n    uvector\n\ngroup: icu_utility_with_props\n    util_props.o\n  deps\n    icu_utility uchar ucase\n\ngroup: icu_utility\n    util.o\n  deps\n    patternprops platform\n\ngroup: utext\n    utext.o\n  deps\n    ucase\n\ngroup: stringenumeration\n    ustrenum.o uenum.o\n  deps\n    platform\n\ngroup: schriter\n    schriter.o\n    # The UCharCharacterIterator implements virtual void getText(UnicodeString& result)\n    # so it depends on UnicodeString, therefore it makes little sense to split\n    # schriter and uchriter into separate groups.\n    uchriter.o\n  deps\n    chariter\n\ngroup: chariter\n    chariter.o\n  deps\n    platform\n\ngroup: uiter\n    uiter.o\n  deps\n    platform\n\ngroup: unistr_cnv\n    unistr_cnv.o\n  deps\n    conversion\n\ngroup: cstr\n    cstr.o\n  deps\n    unistr_cnv\n\ngroup: uscript\n    uscript.o  # uscript_getCode() accepts a locale ID and loads its script code data\n  deps\n    propname resourcebundle\n\ngroup: uscript_props  # script metadata properties\n    uscript_props.o\n  deps\n    platform\n\ngroup: uprops\n    uprops.o\n  deps\n    normalizer2 loadednormalizer2\n    uchar\n    ubidi_props\n    unistr_case ustring_case  # only for case folding\n    ucase\n\ngroup: characterproperties\n    characterproperties.o\n  deps\n    uprops\n    uniset_core\n\ngroup: propname\n    propname.o\n  deps\n    bytestrie\n\ngroup: unames\n    unames.o\n  deps\n    uchar udata\n\ngroup: script_runs\n    usc_impl.o\n  deps\n    uchar\n\ngroup: uchar\n    uchar.o\n  deps\n    utrie2\n\ngroup: messagepattern  # for MessageFormat and tools\n    messagepattern.o\n  deps\n    patternprops platform\n\ngroup: simpleformatter\n    simpleformatter.o\n  deps\n    platform\n\ngroup: patternprops\n    patternprops.o\n  deps\n    PIC ubsan\n\ngroup: ushape\n    ushape.o\n  deps\n    ubidi_props\n\ngroup: ubidi\n    ubidi.o ubidiln.o ubidiwrt.o\n  deps\n    ubidi_props\n    uchar  # for doWriteReverse() which uses IS_COMBINING(u_charType(c))\n\ngroup: ubiditransform\n    ubiditransform.o\n  deps\n    ubidi ushape\n\ngroup: ubidi_props\n    ubidi_props.o\n  deps\n    utrie2\n\ngroup: unistr_props\n    unistr_props.o\n  deps\n    uchar platform\n\ngroup: unistr_case_locale\n    unistr_case_locale.o\n  deps\n    unistr_case ustring_case_locale\n\ngroup: unistr_case\n    unistr_case.o\n  deps\n    ustring_case\n\ngroup: unistr_titlecase_brkiter\n    unistr_titlecase_brkiter.o\n  deps\n    ustr_titlecase_brkiter\n\ngroup: ustr_titlecase_brkiter\n    ustr_titlecase_brkiter.o\n  deps\n    breakiterator\n    ustring_case_locale ucase\n\ngroup: edits\n    edits.o\n  deps\n    # Edits::Iterator::toString() calls ICU_Utility::appendNumber()\n    icu_utility\n    platform\n\ngroup: ucasemap_titlecase_brkiter\n    ucasemap_titlecase_brkiter.o\n  deps\n    ucasemap breakiterator utext\n    ustr_titlecase_brkiter  # ustrcase_getTitleBreakIterator()\n\ngroup: ucasemap\n    ucasemap.o\n  deps\n    ustring_case ustring_case_locale\n    bytestream bytesinkutil  # for UTF-8 output\n    resourcebundle  # uloc_getName() etc.\n\ngroup: ustring_case_locale\n    ustrcase_locale.o\n  deps\n    ustring_case\n    resourcebundle  # for uloc_getDefault()\n\ngroup: ustring_case\n    ustrcase.o\n  deps\n    ucase uchar edits\n\ngroup: ucase\n    ucase.o\n  deps\n    utrie2\n\ngroup: uinit\n    uinit.o\n  deps\n    ucnv_io icuplug\n\ngroup: converter_selector\n    ucnvsel.o\n  deps\n    conversion propsvec utrie2_builder utrie_swap uset ucnv_set\n\ngroup: ucnvdisp  # ucnv_getDisplayName()\n    ucnvdisp.o\n  deps\n    conversion resourcebundle\n\ngroup: ucnv_set  # ucnv_getUnicodeSet\n    ucnv_set.o\n  deps\n    uset\n\ngroup: conversion\n    ustr_cnv.o\n    ucnv.o ucnv_cnv.o ucnv_bld.o ucnv_cb.o ucnv_err.o\n    ucnv_ct.o\n    ucnvmbcs.o ucnv_ext.o\n    ucnvhz.o ucnvisci.o ucnv_lmb.o ucnv2022.o\n    ucnvlat1.o ucnv_u7.o ucnv_u8.o ucnv_u16.o ucnv_u32.o\n    ucnvbocu.o ucnvscsu.o\n  deps\n    ucnv_io\n\ngroup: ucnv_io\n    ucnv_io.o\n  deps\n    sort stringenumeration udata\n\ngroup: service_registration\n    serv.o servnotf.o servlkf.o servlk.o servls.o servrbf.o servslkf.o\n    locutil.o\n  deps\n    locale_display_names resourcebundle\n    hashtable uvector\n\ngroup: ucat  # message-catalog-like API\n    ucat.o\n  deps\n    resourcebundle\n\ngroup: locale_display_names\n    locdispnames.o  # Locale.getDisplayName()\n  deps\n    locresdata\n\ngroup: locale_display_names2\n    locdspnm.o  # class LocaleDisplayNames\n  deps\n    resourcebundle currency simpleformatter unistr_titlecase_brkiter uchar\n\ngroup: currency\n    ucurr.o\n  deps\n    resourcebundle ulist ustring_case_locale\n    stdlib_qsort  # for ucurr.o (which does not use ICU's uarrsort.o)\n    static_unicode_sets usetiter\n\ngroup: icudataver  # u_getDataVersion()\n    icudataver.o\n  deps\n    resourcebundle\n\ngroup: locresdata\n    # This was intended to collect locale functions that load resource bundle data.\n    # See the resourcebundle group about what else loads data.\n    locresdata.o\n  deps\n    resourcebundle\n\ngroup: resbund_cnv  # paths are Unicode strings\n    resbund_cnv.o\n  deps\n    conversion resourcebundle ures_cnv\n\ngroup: ures_cnv  # ures_openU, path is a Unicode string\n    ures_cnv.o\n  deps\n    conversion resourcebundle\n\ngroup: resourcebundle\n    resource.o resbund.o uresbund.o uresdata.o\n    locavailable.o\n    # uloc_tag.c and uloc_keytype.cpp convert between\n    # old ICU/LDML/CLDR locale IDs and newer BCP 47 IDs.\n    # They use data from resource bundles for some of the mappings.\n    # We might want to generate .h files for that data, to #include rather than load,\n    # to minimize dependencies from this code.\n    # Then we could separate this higher-level locale ID code from the resource bundle code.\n    uloc.o uloc_tag.o uloc_keytype.o\n    # Even basic locid.cpp via Locale constructors and Locale::getDefault()\n    # depend on canonicalization and data loading.\n    # We can probably only disentangle basic locale ID handling from resource bundle code\n    # by hardcoding all of the locale ID data.\n    locid.o locmap.o wintz.o\n    # Do we need class LocaleBased? http://bugs.icu-project.org/trac/ticket/8608\n    locbased.o\n    loclikely.o\n  deps\n    udata ucol_swp\n    sort stringenumeration uhash uvector\n    uscript_props propname\n    bytesinkutil\n\ngroup: localebuilder\n    localebuilder.o\n  deps\n    resourcebundle\n\ngroup: udata\n    udata.o ucmndata.o udatamem.o\n    umapfile.o\n  deps\n    uhash platform stubdata\n    file_io mmap_functions\n\ngroup: unifiedcache\n    unifiedcache.o\n  deps\n    uhash\n    platform\n\ngroup: ucharstriebuilder\n    ucharstriebuilder.o\n  deps\n    ucharstrie stringtriebuilder sort\n\ngroup: ucharstrieiterator\n    ucharstrieiterator.o\n  deps\n    ucharstrie uvector32\n\ngroup: ucharstrie\n    ucharstrie.o\n  deps\n    platform\n\ngroup: bytestriebuilder\n    bytestriebuilder.o\n  deps\n    bytestrie stringtriebuilder sort\n\ngroup: bytestrieiterator\n    bytestrieiterator.o\n  deps\n    bytestrie uvector32\n\ngroup: bytestrie\n    bytestrie.o\n  deps\n    platform\n\ngroup: stringtriebuilder\n    stringtriebuilder.o\n  deps\n    uhash\n\ngroup: propsvec\n    propsvec.o\n  deps\n    sort utrie2_builder\n\ngroup: utrie_swap\n    utrie_swap.o\n  deps\n    udata\n\ngroup: umutablecptrie\n    umutablecptrie.o\n  deps\n    ucptrie\n\ngroup: ucptrie\n    ucptrie.o\n  deps\n    platform\n\ngroup: utrie2_builder\n    utrie2_builder.o\n  deps\n    platform\n    utrie2\n    utrie  # for utrie2_fromUTrie()\n\ngroup: utrie2  # Try to switch users to ucptrie.\n    utrie2.o\n  deps\n    platform\n\ngroup: utrie  # Callers should use ucptrie instead.\n    utrie.o\n  deps\n    platform\n\ngroup: hashtable  # Maps UnicodeString to value.\n    uhash_us.o\n  deps\n    uhash\n\ngroup: uhash\n    uhash.o\n  deps\n    platform\n\ngroup: ustack\n    ustack.o\n  deps\n    uvector\n\ngroup: uvector\n    uvector.o\n  deps\n    platform\n    sort  # for UVector::sort()\n\ngroup: uvector32\n    uvectr32.o\n  deps\n    platform\n\ngroup: uvector64\n    uvectr64.o\n  deps\n    platform\n\ngroup: ulist\n    ulist.o\n  deps\n    platform\n\ngroup: sort\n    uarrsort.o\n  deps\n    platform\n\ngroup: ustr_wcs\n    ustr_wcs.o\n  deps\n    platform\n\ngroup: bytesinkutil\n    bytesinkutil.o\n  deps\n    bytestream edits\n\ngroup: bytestream\n    bytestream.o\n  deps\n    platform\n\ngroup: icuplug\n    icuplug.o\n  deps\n    platform\n\ngroup: ucol_swp\n    ucol_swp.o\n  deps\n    utrie_swap\n\ngroup: errorcode  # ErrorCode base class\n    errorcode.o\n  deps\n    utypes\n    platform\n\ngroup: utypes  # u_errorName()\n    utypes.o\n  deps\n    ubsan\n\ngroup: platform\n    # Files in the \"platform\" group.\n    cmemory.o uobject.o\n    cstring.o cwchar.o uinvchar.o\n    charstr.o\n    unistr.o  # for CharString::appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode)\n    appendable.o stringpiece.o ustrtrns.o  # for unistr.o\n    ustring.o  # Other platform files really just need u_strlen\n    ustrfmt.o  # uprv_itou\n    utf_impl.o\n    putil.o\n    ucln_cmn.o  # for putil.o which calls ucln_common_registerCleanup\n    udataswp.o  # for uinvchar.o; TODO: move uinvchar.o swapper functions to udataswp.o?\n    umath.o\n    umutex.o sharedobject.o\n    utrace.o\n  deps\n    # The \"platform\" group has no ICU dependencies.\n    PIC system_misc system_debug malloc_functions ubsan\n    c_strings c_string_formatting\n    floating_point pthread system_locale\n    stdio_input readlink_function dir_io\n    dlfcn  # Move related code into icuplug.c?\n    cplusplus\n    std_mutex\n\n# ICU i18n library ----------------------------------------------------------- #\n\nlibrary: i18n\n  deps\n    region localedata genderinfo charset_detector spoof_detection\n    alphabetic_index collation collation_builder string_search\n    dayperiodrules\n    listformatter\n    formatting formattable_cnv regex regex_cnv translit\n    double_conversion number_representation number_output numberformatter numberparser\n    universal_time_scale\n    uclean_i18n\n\ngroup: region\n    region.o uregion.o\n  deps\n    formatting  # Temporary, TODO: Ticket #9982 class Region should use low-level ASCII-integer functions, and probably be moved to the common library.\n    resourcebundle\n    uvector uclean_i18n\n\ngroup: localedata\n    ulocdata.o\n  deps\n    uniset_props resourcebundle\n    uset_props  # TODO: change to using C++ UnicodeSet, remove this dependency\n\ngroup: genderinfo\n    gender.o\n  deps\n    resourcebundle\n    uclean_i18n\n\ngroup: charset_detector\n    csdetect.o csmatch.o csr2022.o csrecog.o csrmbcs.o csrsbcs.o csrucode.o csrutf8.o inputext.o ucsdet.o\n  deps\n    conversion\n    uclean_i18n\n\ngroup: spoof_detection\n    uspoof.o uspoof_build.o uspoof_conf.o uspoof_impl.o scriptset.o\n  deps\n    uniset_props regex unorm uscript\n\ngroup: alphabetic_index\n    alphaindex.o\n  deps\n    collation localedata\n    uclean_i18n\n\ngroup: collation\n    # The collation \"runtime\" code should not depend on the collation_builder code.\n    # For example, loading from resource bundles does not fall back to\n    # building from rules.\n    collation.o collationcompare.o collationdata.o\n    collationdatareader.o collationdatawriter.o\n    collationfastlatin.o collationfcd.o collationiterator.o collationkeys.o\n    collationroot.o collationrootelements.o collationsets.o\n    collationsettings.o collationtailoring.o rulebasedcollator.o\n    uitercollationiterator.o utf16collationiterator.o utf8collationiterator.o\n    bocsu.o coleitr.o coll.o sortkey.o ucol.o\n    ucol_res.o ucol_sit.o ucoleitr.o\n  deps\n    bytestream normalizer2 resourcebundle service_registration unifiedcache\n    ucharstrieiterator uiter ulist uset usetiter uvector32 uvector64 utrie2\n    uclean_i18n propname\n\ngroup: collation_builder\n    collationbuilder.o collationdatabuilder.o collationfastlatinbuilder.o\n    collationruleparser.o collationweights.o\n  deps\n    canonical_iterator collation ucharstriebuilder uset_props\n\ngroup: string_search\n    search.o stsearch.o usearch.o\n  deps\n    breakiterator collation\n\ngroup: dayperiodrules\n    dayperiodrules.o\n  deps\n    resourcebundle uclean_i18n\n\ngroup: listformatter\n    listformatter.o ulistformatter.o\n  deps\n    resourcebundle simpleformatter format uclean_i18n formatted_value_iterimpl\n\ngroup: double_conversion\n    double-conversion.o double-conversion-bignum.o double-conversion-bignum-dtoa.o\n    double-conversion-cached-powers.o double-conversion-diy-fp.o\n    double-conversion-fast-dtoa.o double-conversion-strtod.o\n  deps\n    platform\n\ngroup: number_representation\n    number_decimalquantity.o number_stringbuilder.o numparse_stringsegment.o number_utils.o\n  deps\n    decnumber double_conversion\n    # for trimming whitespace around fields\n    static_unicode_sets\n    # for data loading; that could be split off\n    resourcebundle\n    int_functions\n    ucase uniset_core\n    formatted_value\n\ngroup: number_output\n    # PluralRules and FormattedNumber\n    number_output.o\n    standardplural.o plurrule.o\n  deps\n    # FormattedNumber internals:\n    number_representation format formatted_value_sbimpl\n    # PluralRules internals:\n    unifiedcache\n\ngroup: numberformatter\n    # ICU 60+ NumberFormatter API\n    number_affixutils.o number_asformat.o\n    number_capi.o number_compact.o number_currencysymbols.o\n    number_decimfmtprops.o\n    number_fluent.o number_formatimpl.o\n    number_grouping.o number_integerwidth.o number_longnames.o\n    number_mapper.o number_modifiers.o number_multiplier.o\n    number_notation.o number_padding.o\n    number_patternmodifier.o number_patternstring.o number_rounding.o\n    number_scientific.o number_skeletons.o\n    currpinf.o dcfmtsym.o numsys.o\n    numrange_fluent.o numrange_impl.o\n  deps\n    decnumber double_conversion formattable units\n    number_representation number_output\n    uclean_i18n common\n\ngroup: numberparser\n    numparse_affixes.o numparse_compositions.o numparse_currency.o\n    numparse_decimal.o numparse_impl.o numparse_parsednumber.o\n    numparse_scientific.o numparse_symbols.o\n    numparse_validators.o\n  deps\n    numberformatter\n\ngroup: formatting\n    # TODO: Try to subdivide this ball of wax.\n    # currencyformat\n    curramt.o currfmt.o\n    # pluralrules C API\n    upluralrules.o\n    # decimalformat\n    unumsys.o\n    decimfmt.o compactdecimalformat.o\n    numfmt.o unum.o\n    winnmfmt.o\n    # scientificnumberformatter - would depend on dcfmtsym, so would be circular.\n    scientificnumberformatter.o\n    # rbnf\n    nfrs.o nfrule.o nfsubs.o rbnf.o\n    # measureformat\n    measfmt.o quantityformatter.o\n    # dateformat\n    astro.o buddhcal.o calendar.o cecal.o chnsecal.o coptccal.o dangical.o ethpccal.o\n    gregocal.o gregoimp.o hebrwcal.o indiancal.o islamcal.o japancal.o persncal.o taiwncal.o\n    erarules.o  # mostly for Japanese eras\n    ucal.o\n    basictz.o olsontz.o rbtz.o simpletz.o timezone.o tzrule.o tztrans.o\n    vtzone.o vzone.o wintzimpl.o zonemeta.o zrule.o ztrans.o\n    tzfmt.o tzgnames.o tznames.o tznames_impl.o\n    datefmt.o dtfmtsym.o dtitvfmt.o dtitvinf.o dtptngen.o dtrule.o reldtfmt.o reldatefmt.o\n    smpdtfmt.o smpdtfst.o udateintervalformat.o udatpg.o windtfmt.o\n    udat.o\n    tmunit.o tmutamt.o tmutfmt.o\n    # messageformat\n    choicfmt.o msgfmt.o plurfmt.o selfmt.o umsg.o\n  deps\n    decnumber formattable format units numberformatter numberparser formatted_value_sbimpl\n    listformatter\n    dayperiodrules\n    collation collation_builder  # for rbnf\n    common\n    floating_point  # sqrt() for astro.o\n    trigonometry  # for astro.o\n    sharedbreakiterator # for reldatefmt.o\n    uclean_i18n\n\ngroup: sharedbreakiterator\n    sharedbreakiterator.o\n  deps\n    breakiterator\n\ngroup: units\n    measunit.o currunit.o nounit.o\n  deps\n    stringenumeration\n\ngroup: decnumber\n    decContext.o decNumber.o\n  deps\n    double_conversion uclean_i18n\n\ngroup: formattable\n    fmtable.o\n    measure.o\n  deps\n    decnumber number_representation\n\ngroup: formattable_cnv\n    fmtable_cnv.o\n  deps\n    formattable unistr_cnv conversion\n\ngroup: formatted_value\n    formattedvalue.o\n  deps\n    platform\n\ngroup: formatted_value_iterimpl\n    formattedval_iterimpl.o\n  deps\n    formatted_value format uvector32\n\ngroup: formatted_value_sbimpl\n    formattedval_sbimpl.o\n  deps\n    number_representation\n\ngroup: format\n    format.o fphdlimp.o fpositer.o ufieldpositer.o\n  deps\n    resourcebundle parsepos uvector32\n\ngroup: regex_cnv\n    uregexc.o\n  deps\n    regex unistr_cnv\n\ngroup: regex\n    regexcmp.o regexst.o regextxt.o regeximp.o rematch.o repattrn.o uregex.o\n  deps\n    uniset_closure utext uvector32 uvector64 ustack\n    breakiterator\n    uinit  # TODO: Really needed?\n    uclean_i18n\n\ngroup: translit\n    anytrans.o brktrans.o casetrn.o cpdtrans.o name2uni.o uni2name.o nortrans.o remtrans.o titletrn.o tolowtrn.o toupptrn.o\n    esctrn.o unesctrn.o nultrans.o\n    funcrepl.o quant.o rbt.o rbt_data.o rbt_pars.o rbt_rule.o rbt_set.o strmatch.o strrepl.o translit.o transreg.o tridpars.o utrans.o\n  deps\n    common\n    formatting  # for Transliterator::getDisplayName()\n    uclean_i18n\n\ngroup: universal_time_scale\n    utmscale.o\n  deps\n    ubsan\n\ngroup: uclean_i18n\n    ucln_in.o\n  deps\n    platform\n\n# ICU io library ------------------------------------------------------------- #\n\nlibrary: io\n  deps\n    ustdio ustream uclean_io\n\ngroup: ustdio\n    locbund.o sprintf.o sscanf.o ufile.o ufmt_cmn.o uprintf.o uprntf_p.o uscanf.o uscanf_p.o ustdio.o\n  deps\n    formatting conversion translit\n    uclean_io\n    stdio_output\n\ngroup: ustream\n    ustream.o\n  deps\n    unistr_cnv\n    uchar  # for u_isWhitespace()\n    iostream\n\ngroup: uclean_io\n    ucln_io.o\n  deps\n    platform\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/ISO-8859-2.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/koi8r.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/ISO-8859-3.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/hangul-eucKR.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/danish-ISO-8859-1.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/hania-eucKR.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/eucJP.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/iso8859-1.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/extra/uconv/samples/ibm-37-test.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/nfkc.nrm",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/ulayout.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/nfc.nrm",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/ucase.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/nfkc_cf.nrm",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/uprops.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/icudt64l.dat",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/uts46.nrm",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/pnames.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/ubidi.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/unames.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/coll/ucadata-implicithan.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/data/in/coll/ucadata-unihan.icu",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/uni-text.bin",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/old_l_testtypes.res",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/old_e_testtypes.res",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/TestFont1.otf",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/idna_conf.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/test/testdata/encoded.utf16be",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/samples/uresb/sr.txt",
        "/tmp/vanessa/spack-stage/spack-stage-icu4c-64.1-d72ifeaqffx673hlgow2z3lmkxhgowne/spack-src/source/samples/ucnv/data02.bin"
    ],
    "total_files": 2275
}