{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-easybuild-easyconfigs-3.1.2-urofhq6kkjwlwc6h4bundhoam7bqccmb/spack-src/easybuild/easyconfigs/c/Clang/Clang-3.3-failing-asan-and-tsan-tests.patch": "diff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/allow_user_segv.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/allow_user_segv.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/allow_user_segv.cc\t2013-04-25 12:52:15.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/allow_user_segv.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,42 +0,0 @@\n-// Regression test for\n-// https://code.google.com/p/address-sanitizer/issues/detail?id=180\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && ASAN_OPTIONS=allow_user_segv_handler=true %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && ASAN_OPTIONS=allow_user_segv_handler=true %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && ASAN_OPTIONS=allow_user_segv_handler=true %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && ASAN_OPTIONS=allow_user_segv_handler=true %t 2>&1 | FileCheck %s\n-\n-#include <signal.h>\n-#include <stdio.h>\n-\n-struct sigaction user_sigaction;\n-struct sigaction original_sigaction;\n-\n-void User_OnSIGSEGV(int signum, siginfo_t *siginfo, void *context) {\n-  fprintf(stderr, \"User sigaction called\\n\");\n-  if (original_sigaction.sa_flags | SA_SIGINFO)\n-    original_sigaction.sa_sigaction(signum, siginfo, context);\n-  else\n-    original_sigaction.sa_handler(signum);\n-}\n-\n-int DoSEGV() {\n-  volatile int *x = 0;\n-  return *x;\n-}\n-\n-int main() {\n-  user_sigaction.sa_sigaction = User_OnSIGSEGV;\n-  user_sigaction.sa_flags = SA_SIGINFO;\n-  if (sigaction(SIGSEGV, &user_sigaction, &original_sigaction)) {\n-    perror(\"sigaction\");\n-    return 1;\n-  }\n-  fprintf(stderr, \"User sigaction installed\\n\");\n-  return DoSEGV();\n-}\n-\n-// CHECK: User sigaction installed\n-// CHECK-NEXT: User sigaction called\n-// CHECK-NEXT: ASAN:SIGSEGV\n-// CHECK: AddressSanitizer: SEGV on unknown address\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/blacklist.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/blacklist.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/blacklist.cc\t2012-12-07 23:21:21.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/blacklist.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,44 +0,0 @@\n-// Test the blacklist functionality of ASan\n-\n-// RUN: echo \"fun:*brokenFunction*\" > %tmp\n-// RUN: echo \"global:*badGlobal*\" >> %tmp\n-// RUN: echo \"src:*blacklist-extra.cc\" >> %tmp\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m64 -O0 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m64 -O1 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m64 -O2 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m64 -O3 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m32 -O0 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m32 -O1 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m32 -O2 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-// RUN: %clangxx_asan -fsanitize-blacklist=%tmp -m32 -O3 %s -o %t \\\n-// RUN: %p/Helpers/blacklist-extra.cc && %t 2>&1\n-\n-// badGlobal is accessed improperly, but we blacklisted it.\n-int badGlobal;\n-int readBadGlobal() {\n-  return (&badGlobal)[1];\n-}\n-\n-// A function which is broken, but excluded in the blacklist.\n-int brokenFunction(int argc) {\n-  char x[10] = {0};\n-  return x[argc * 10];  // BOOM\n-}\n-\n-// This function is defined in Helpers/blacklist-extra.cc, a source file which\n-// is blacklisted by name\n-int externalBrokenFunction(int x);\n-\n-int main(int argc, char **argv) {\n-  brokenFunction(argc);\n-  int x = readBadGlobal();\n-  externalBrokenFunction(argc);\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_stack_uaf.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_stack_uaf.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_stack_uaf.cc\t2012-12-21 09:53:59.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_stack_uaf.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,36 +0,0 @@\n-// Check that we can store lots of stack frames if asked to.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t 2>&1\n-// RUN: ASAN_OPTIONS=malloc_context_size=120:redzone=512 %t 2>&1 | \\\n-// RUN: %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t 2>&1\n-// RUN: ASAN_OPTIONS=malloc_context_size=120:redzone=512 %t 2>&1 | \\\n-// RUN: %symbolize | FileCheck %s\n-#include <stdlib.h>\n-#include <stdio.h>\n-\n-template <int depth>\n-struct DeepFree {\n-  static void free(char *x) {\n-    DeepFree<depth - 1>::free(x);\n-  }\n-};\n-\n-template<>\n-struct DeepFree<0> {\n-  static void free(char *x) {\n-    ::free(x);\n-  }\n-};\n-\n-int main() {\n-  char *x = (char*)malloc(10);\n-  // deep_free(x);\n-  DeepFree<200>::free(x);\n-  return x[5];\n-  // CHECK: {{.*ERROR: AddressSanitizer: heap-use-after-free on address}}\n-  // CHECK: DeepFree<36>\n-  // CHECK: DeepFree<98>\n-  // CHECK: DeepFree<115>\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc\t2012-10-15 15:04:58.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_tail_call.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,24 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// CHECK: AddressSanitizer: global-buffer-overflow\n-int global[10];\n-// CHECK: {{#0.*call4}}\n-void __attribute__((noinline)) call4(int i) { global[i+10]++; }\n-// CHECK: {{#1.*call3}}\n-void __attribute__((noinline)) call3(int i) { call4(i); }\n-// CHECK: {{#2.*call2}}\n-void __attribute__((noinline)) call2(int i) { call3(i); }\n-// CHECK: {{#3.*call1}}\n-void __attribute__((noinline)) call1(int i) { call2(i); }\n-// CHECK: {{#4.*main}}\n-int main(int argc, char **argv) {\n-  call1(argc);\n-  return global[0];\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_thread_stack.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_thread_stack.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/deep_thread_stack.cc\t2012-10-15 15:04:58.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/deep_thread_stack.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,61 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <pthread.h>\n-\n-int *x;\n-\n-void *AllocThread(void *arg) {\n-  x = new int;\n-  *x = 42;\n-  return NULL;\n-}\n-\n-void *FreeThread(void *arg) {\n-  delete x;\n-  return NULL;\n-}\n-\n-void *AccessThread(void *arg) {\n-  *x = 43;  // BOOM\n-  return NULL;\n-}\n-\n-typedef void* (*callback_type)(void* arg);\n-\n-void *RunnerThread(void *function) {\n-  pthread_t thread;\n-  pthread_create(&thread, NULL, (callback_type)function, NULL);\n-  pthread_join(thread, NULL);\n-  return NULL;\n-}\n-\n-void RunThread(callback_type function) {\n-  pthread_t runner;\n-  pthread_create(&runner, NULL, RunnerThread, (void*)function);\n-  pthread_join(runner, NULL);\n-}\n-\n-int main(int argc, char *argv[]) {\n-  RunThread(AllocThread);\n-  RunThread(FreeThread);\n-  RunThread(AccessThread);\n-  return (x != 0);\n-}\n-\n-// CHECK: AddressSanitizer: heap-use-after-free\n-// CHECK: WRITE of size 4 at 0x{{.*}} thread T[[ACCESS_THREAD:[0-9]+]]\n-// CHECK: freed by thread T[[FREE_THREAD:[0-9]+]] here:\n-// CHECK: previously allocated by thread T[[ALLOC_THREAD:[0-9]+]] here:\n-// CHECK: Thread T[[ACCESS_THREAD]] created by T[[ACCESS_RUNNER:[0-9]+]] here:\n-// CHECK: Thread T[[ACCESS_RUNNER]] created by T0 here:\n-// CHECK: Thread T[[FREE_THREAD]] created by T[[FREE_RUNNER:[0-9]+]] here:\n-// CHECK: Thread T[[FREE_RUNNER]] created by T0 here:\n-// CHECK: Thread T[[ALLOC_THREAD]] created by T[[ALLOC_RUNNER:[0-9]+]] here:\n-// CHECK: Thread T[[ALLOC_RUNNER]] created by T0 here:\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/dlclose-test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/dlclose-test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/dlclose-test.cc\t2012-08-15 13:26:57.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/dlclose-test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,88 +0,0 @@\n-// Regression test for\n-// http://code.google.com/p/address-sanitizer/issues/detail?id=19\n-// Bug description:\n-// 1. application dlopens foo.so\n-// 2. asan registers all globals from foo.so\n-// 3. application dlcloses foo.so\n-// 4. application mmaps some memory to the location where foo.so was before\n-// 5. application starts using this mmaped memory, but asan still thinks there\n-// are globals.\n-// 6. BOOM\n-\n-// RUN: %clangxx_asan -m64 -O0 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %p/SharedLibs/dlclose-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-\n-#include <assert.h>\n-#include <dlfcn.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <sys/mman.h>\n-\n-#include <string>\n-\n-using std::string;\n-\n-static const int kPageSize = 4096;\n-\n-typedef int *(fun_t)();\n-\n-int main(int argc, char *argv[]) {\n-  string path = string(argv[0]) + \"-so.so\";\n-  printf(\"opening %s ... \\n\", path.c_str());\n-  void *lib = dlopen(path.c_str(), RTLD_NOW);\n-  if (!lib) {\n-    printf(\"error in dlopen(): %s\\n\", dlerror());\n-    return 1;\n-  }\n-  fun_t *get = (fun_t*)dlsym(lib, \"get_address_of_static_var\");\n-  if (!get) {\n-    printf(\"failed dlsym\\n\");\n-    return 1;\n-  }\n-  int *addr = get();\n-  assert(((size_t)addr % 32) == 0);  // should be 32-byte aligned.\n-  printf(\"addr: %p\\n\", addr);\n-  addr[0] = 1;  // make sure we can write there.\n-\n-  // Now dlclose the shared library.\n-  printf(\"attempting to dlclose\\n\");\n-  if (dlclose(lib)) {\n-    printf(\"failed to dlclose\\n\");\n-    return 1;\n-  }\n-  // Now, the page where 'addr' is unmapped. Map it.\n-  size_t page_beg = ((size_t)addr) & ~(kPageSize - 1);\n-  void *res = mmap((void*)(page_beg), kPageSize,\n-                   PROT_READ | PROT_WRITE,\n-                   MAP_PRIVATE | MAP_ANON | MAP_FIXED | MAP_NORESERVE, 0, 0);\n-  if (res == (char*)-1L) {\n-    printf(\"failed to mmap\\n\");\n-    return 1;\n-  }\n-  addr[1] = 2;  // BOOM (if the bug is not fixed).\n-  printf(\"PASS\\n\");\n-  // CHECK: PASS\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/global-overflow.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/global-overflow.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/global-overflow.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/global-overflow.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,25 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <string.h>\n-int main(int argc, char **argv) {\n-  static char XXX[10];\n-  static char YYY[10];\n-  static char ZZZ[10];\n-  memset(XXX, 0, 10);\n-  memset(YYY, 0, 10);\n-  memset(ZZZ, 0, 10);\n-  int res = YYY[argc * 10];  // BOOOM\n-  // CHECK: {{READ of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*global-overflow.cc:}}[[@LINE-2]]\n-  // CHECK: {{0x.* is located 0 bytes to the right of global variable}}\n-  // CHECK:   {{.*YYY.* of size 10}}\n-  res += XXX[argc] + ZZZ[argc];\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/heap-overflow.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/heap-overflow.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/heap-overflow.cc\t2013-01-22 10:14:54.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/heap-overflow.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,36 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-#include <stdlib.h>\n-#include <string.h>\n-int main(int argc, char **argv) {\n-  char *x = (char*)malloc(10 * sizeof(char));\n-  memset(x, 0, 10);\n-  int res = x[argc * 10];  // BOOOM\n-  // CHECK: {{READ of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*heap-overflow.cc:}}[[@LINE-2]]\n-  // CHECK: {{0x.* is located 0 bytes to the right of 10-byte region}}\n-  // CHECK: {{allocated by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*malloc}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*heap-overflow.cc:21}}\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_malloc.*}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*heap-overflow.cc:21}}\n-  free(x);\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-blacklist.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-blacklist.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-blacklist.cc\t2013-04-11 15:21:41.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-blacklist.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,47 +0,0 @@\n-// Test for blacklist functionality of initialization-order checker.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O1 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O2 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O0 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O1 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O2 %s %p/Helpers/initialization-blacklist-extra.cc\\\n-// RUN:   %p/Helpers/initialization-blacklist-extra2.cc \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/initialization-blacklist.txt \\\n-// RUN:   -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-\n-// Function is defined in another TU.\n-int readBadGlobal();\n-int x = readBadGlobal();  // init-order bug.\n-\n-// Function is defined in another TU.\n-int accessBadObject();\n-int y = accessBadObject();  // init-order bug.\n-\n-int readBadSrcGlobal();\n-int z = readBadSrcGlobal();  // init-order bug.\n-\n-int main(int argc, char **argv) {\n-  return argc + x + y + z - 1;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-bug.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-bug.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-bug.cc\t2013-03-14 13:43:03.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-bug.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,46 +0,0 @@\n-// Test to make sure basic initialization order errors are caught.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s %p/Helpers/initialization-bug-extra2.cc -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1 \\\n-// RUN:    | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s %p/Helpers/initialization-bug-extra2.cc -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1 \\\n-// RUN:     | %symbolize | FileCheck %s\n-\n-// Do not test with optimization -- the error may be optimized away.\n-\n-#include <cstdio>\n-\n-// The structure of the test is:\n-// \"x\", \"y\", \"z\" are dynamically initialized globals.\n-// Value of \"x\" depends on \"y\", value of \"y\" depends on \"z\".\n-// \"x\" and \"z\" are defined in this TU, \"y\" is defined in another one.\n-// Thus we shoud stably report initialization order fiasco independently of\n-// the translation unit order.\n-\n-int initZ() {\n-  return 5;\n-}\n-int z = initZ();\n-\n-// 'y' is a dynamically initialized global residing in a different TU.  This\n-// dynamic initializer will read the value of 'y' before main starts.  The\n-// result is undefined behavior, which should be caught by initialization order\n-// checking.\n-extern int y;\n-int __attribute__((noinline)) initX() {\n-  return y + 1;\n-  // CHECK: {{AddressSanitizer: initialization-order-fiasco}}\n-  // CHECK: {{READ of size .* at 0x.* thread T0}}\n-  // CHECK: {{0x.* is located 0 bytes inside of global variable .*(y|z).*}}\n-}\n-\n-// This initializer begins our initialization order problems.\n-static int x = initX();\n-\n-int main() {\n-  // ASan should have caused an exit before main runs.\n-  printf(\"PASS\\n\");\n-  // CHECK-NOT: PASS\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-constexpr.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-constexpr.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-constexpr.cc\t2013-04-05 09:51:49.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-constexpr.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,43 +0,0 @@\n-// Constexpr:\n-// We need to check that a global variable initialized with a constexpr\n-// constructor can be accessed during dynamic initialization (as a constexpr\n-// constructor implies that it was initialized during constant initialization,\n-// not dynamic initialization).\n-\n-// RUN: %clangxx_asan -m64 -O0 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O1 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O2 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O3 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O0 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O1 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O2 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O3 %s %p/Helpers/initialization-constexpr-extra.cc\\\n-// RUN:   --std=c++11 -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-\n-class Integer {\n-  private:\n-  int value;\n-\n-  public:\n-  constexpr Integer(int x = 0) : value(x) {}\n-  int getValue() {return value;}\n-};\n-Integer coolestInteger(42);\n-int getCoolestInteger() { return coolestInteger.getValue(); }\n-\n-int main() { return 0; }\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-nobug.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-nobug.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/initialization-nobug.cc\t2013-04-05 09:51:49.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/initialization-nobug.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,56 +0,0 @@\n-// A collection of various initializers which shouldn't trip up initialization\n-// order checking.  If successful, this will just return 0.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O1 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O2 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m64 -O3 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O0 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O1 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O2 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-// RUN: %clangxx_asan -m32 -O3 %s %p/Helpers/initialization-nobug-extra.cc -fsanitize=init-order -o %t\n-// RUN: ASAN_OPTIONS=check_initialization_order=true %t 2>&1\n-\n-// Simple access:\n-// Make sure that accessing a global in the same TU is safe\n-\n-bool condition = true;\n-int initializeSameTU() {\n-  return condition ? 0x2a : 052;\n-}\n-int sameTU = initializeSameTU();\n-\n-// Linker initialized:\n-// Check that access to linker initialized globals originating from a different\n-// TU's initializer is safe.\n-\n-int A = (1 << 1) + (1 << 3) + (1 << 5), B;\n-int getAB() {\n-  return A * B;\n-}\n-\n-// Function local statics:\n-// Check that access to function local statics originating from a different\n-// TU's initializer is safe.\n-\n-int countCalls() {\n-  static int calls;\n-  return ++calls;\n-}\n-\n-// Trivial constructor, non-trivial destructor.\n-struct StructWithDtor {\n-  ~StructWithDtor() { }\n-  int value;\n-};\n-StructWithDtor struct_with_dtor;\n-int getStructWithDtorValue() { return struct_with_dtor.value; }\n-\n-int main() { return 0; }\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/large_func_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/large_func_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/large_func_test.cc\t2013-02-21 17:54:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/large_func_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,63 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-#include <stdlib.h>\n-__attribute__((noinline))\n-static void LargeFunction(int *x, int zero) {\n-  x[0]++;\n-  x[1]++;\n-  x[2]++;\n-  x[3]++;\n-  x[4]++;\n-  x[5]++;\n-  x[6]++;\n-  x[7]++;\n-  x[8]++;\n-  x[9]++;\n-\n-  // CHECK: {{.*ERROR: AddressSanitizer: heap-buffer-overflow on address}}\n-  // CHECK:   {{0x.* at pc 0x.* bp 0x.* sp 0x.*}}\n-  // CHECK: {{READ of size 4 at 0x.* thread T0}}\n-  x[zero + 103]++;  // we should report this exact line\n-  // atos incorrectly extracts the symbol name for the static functions on\n-  // Darwin.\n-  // CHECK-Linux:  {{#0 0x.* in LargeFunction.*large_func_test.cc:}}[[@LINE-3]]\n-  // CHECK-Darwin: {{#0 0x.* in .*LargeFunction.*large_func_test.cc}}:[[@LINE-4]]\n-\n-  x[10]++;\n-  x[11]++;\n-  x[12]++;\n-  x[13]++;\n-  x[14]++;\n-  x[15]++;\n-  x[16]++;\n-  x[17]++;\n-  x[18]++;\n-  x[19]++;\n-}\n-\n-int main(int argc, char **argv) {\n-  int *x = new int[100];\n-  LargeFunction(x, argc - 1);\n-  // CHECK: {{    #1 0x.* in _?main .*large_func_test.cc:}}[[@LINE-1]]\n-  // CHECK: {{0x.* is located 12 bytes to the right of 400-byte region}}\n-  // CHECK: {{allocated by thread T0 here:}}\n-  // CHECK-Linux: {{    #0 0x.* in operator new.*}}\n-  // CHECK-Darwin: {{    #0 0x.* in .*_Zna.*}}\n-  // CHECK: {{    #1 0x.* in _?main .*large_func_test.cc:}}[[@LINE-7]]\n-  delete x;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/clone_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/clone_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/clone_test.cc\t2012-08-29 17:48:14.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/clone_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,48 +0,0 @@\n-// Regression test for:\n-// http://code.google.com/p/address-sanitizer/issues/detail?id=37\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t | FileCheck %s\n-\n-#include <stdio.h>\n-#include <sched.h>\n-#include <sys/syscall.h>\n-#include <sys/types.h>\n-#include <sys/wait.h>\n-#include <unistd.h>\n-\n-int Child(void *arg) {\n-  char x[32] = {0};  // Stack gets poisoned.\n-  printf(\"Child:  %p\\n\", x);\n-  _exit(1);  // NoReturn, stack will remain unpoisoned unless we do something.\n-}\n-\n-int main(int argc, char **argv) {\n-  const int kStackSize = 1 << 20;\n-  char child_stack[kStackSize + 1];\n-  char *sp = child_stack + kStackSize;  // Stack grows down.\n-  printf(\"Parent: %p\\n\", sp);\n-  pid_t clone_pid = clone(Child, sp, CLONE_FILES | CLONE_VM, NULL, 0, 0, 0);\n-  int status;\n-  pid_t wait_result = waitpid(clone_pid, &status, __WCLONE);\n-  if (wait_result < 0) {\n-    perror(\"waitpid\");\n-    return 0;\n-  }\n-  if (wait_result == clone_pid && WIFEXITED(status)) {\n-    // Make sure the child stack was indeed unpoisoned.\n-    for (int i = 0; i < kStackSize; i++)\n-      child_stack[i] = i;\n-    int ret = child_stack[argc - 1];\n-    printf(\"PASSED\\n\");\n-    // CHECK: PASSED\n-    return ret;\n-  }\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/glob.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/glob.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/glob.cc\t2013-04-09 13:35:13.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/glob.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,30 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t %p 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t %p 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t %p 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t %p 2>&1 | FileCheck %s\n-\n-#include <assert.h>\n-#include <glob.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <errno.h>\n-#include <string>\n-\n-\n-int main(int argc, char *argv[]) {\n-  std::string path = argv[1];\n-  std::string pattern = path + \"/glob_test_root/*a\";\n-  printf(\"pattern: %s\\n\", pattern.c_str());\n-\n-  glob_t globbuf;\n-  int res = glob(pattern.c_str(), 0, 0, &globbuf);\n-\n-  printf(\"%d %s\\n\", errno, strerror(errno));\n-  assert(res == 0);\n-  assert(globbuf.gl_pathc == 2);\n-  printf(\"%zu\\n\", strlen(globbuf.gl_pathv[0]));\n-  printf(\"%zu\\n\", strlen(globbuf.gl_pathv[1]));\n-  printf(\"PASS\\n\");\n-  // CHECK: PASS\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/heavy_uar_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/heavy_uar_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/heavy_uar_test.cc\t2013-04-11 20:27:02.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/heavy_uar_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,55 +0,0 @@\n-// RUN: %clangxx_asan -fsanitize=use-after-return -m64 -O0 %s -o %t && \\\n-// RUN:   %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -fsanitize=use-after-return -m64 -O2 %s -o %t && \\\n-// RUN:   %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -fsanitize=use-after-return -m32 -O2 %s -o %t && \\\n-// RUN:   %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include <stdlib.h>\n-\n-__attribute__((noinline))\n-char *pretend_to_do_something(char *x) {\n-  __asm__ __volatile__(\"\" : : \"r\" (x) : \"memory\");\n-  return x;\n-}\n-\n-__attribute__((noinline))\n-char *LeakStack() {\n-  char x[1024];\n-  memset(x, 0, sizeof(x));\n-  return pretend_to_do_something(x);\n-}\n-\n-template<size_t kFrameSize>\n-__attribute__((noinline))\n-void RecuriveFunctionWithStackFrame(int depth) {\n-  if (depth <= 0) return;\n-  char x[kFrameSize];\n-  x[0] = depth;\n-  pretend_to_do_something(x);\n-  RecuriveFunctionWithStackFrame<kFrameSize>(depth - 1);\n-}\n-\n-int main(int argc, char **argv) {\n-  int n_iter = argc >= 2 ? atoi(argv[1]) : 1000;\n-  int depth  = argc >= 3 ? atoi(argv[2]) : 500;\n-  for (int i = 0; i < n_iter; i++) {\n-    RecuriveFunctionWithStackFrame<10>(depth);\n-    RecuriveFunctionWithStackFrame<100>(depth);\n-    RecuriveFunctionWithStackFrame<500>(depth);\n-    RecuriveFunctionWithStackFrame<1024>(depth);\n-    RecuriveFunctionWithStackFrame<2000>(depth);\n-    RecuriveFunctionWithStackFrame<5000>(depth);\n-    RecuriveFunctionWithStackFrame<10000>(depth);\n-  }\n-  char *stale_stack = LeakStack();\n-  RecuriveFunctionWithStackFrame<1024>(10);\n-  stale_stack[100]++;\n-  // CHECK: ERROR: AddressSanitizer: stack-use-after-return on address\n-  // CHECK: is located in stack of thread T0 at offset 132 in frame\n-  // CHECK:  in LeakStack(){{.*}}heavy_uar_test.cc:\n-  // CHECK: [32, 1056) 'x'\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_failure_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_failure_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_failure_test.cc\t2012-08-15 13:26:57.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_failure_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,26 +0,0 @@\n-// If user provides his own libc functions, ASan doesn't\n-// intercept these functions.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <stdlib.h>\n-#include <stdio.h>\n-\n-extern \"C\" long strtol(const char *nptr, char **endptr, int base) {\n-  fprintf(stderr, \"my_strtol_interceptor\\n\");\n-  return 0;\n-}\n-\n-int main() {\n-  char *x = (char*)malloc(10 * sizeof(char));\n-  free(x);\n-  return (int)strtol(x, 0, 10);\n-  // CHECK: my_strtol_interceptor\n-  // CHECK-NOT: heap-use-after-free\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_malloc_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_malloc_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_malloc_test.cc\t2012-08-15 13:26:57.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_malloc_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,27 +0,0 @@\n-// ASan interceptor can be accessed with __interceptor_ prefix.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-extern \"C\" void *__interceptor_malloc(size_t size);\n-extern \"C\" void *malloc(size_t size) {\n-  write(2, \"malloc call\\n\", sizeof(\"malloc call\\n\") - 1);\n-  return __interceptor_malloc(size);\n-}\n-\n-int main() {\n-  char *x = (char*)malloc(10 * sizeof(char));\n-  free(x);\n-  return (int)strtol(x, 0, 10);\n-  // CHECK: malloc call\n-  // CHECK: heap-use-after-free\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_test.cc\t2012-08-15 13:26:57.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/interception_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,26 +0,0 @@\n-// ASan interceptor can be accessed with __interceptor_ prefix.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <stdlib.h>\n-#include <stdio.h>\n-\n-extern \"C\" long __interceptor_strtol(const char *nptr, char **endptr, int base);\n-extern \"C\" long strtol(const char *nptr, char **endptr, int base) {\n-  fprintf(stderr, \"my_strtol_interceptor\\n\");\n-  return __interceptor_strtol(nptr, endptr, base);\n-}\n-\n-int main() {\n-  char *x = (char*)malloc(10 * sizeof(char));\n-  free(x);\n-  return (int)strtol(x, 0, 10);\n-  // CHECK: my_strtol_interceptor\n-  // CHECK: heap-use-after-free\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/swapcontext_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/swapcontext_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/swapcontext_test.cc\t2012-11-23 12:20:54.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/swapcontext_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,66 +0,0 @@\n-// Check that ASan plays well with easy cases of makecontext/swapcontext.\n-\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | FileCheck %s\n-\n-#include <stdio.h>\n-#include <ucontext.h>\n-#include <unistd.h>\n-\n-ucontext_t orig_context;\n-ucontext_t child_context;\n-\n-void Child(int mode) {\n-  char x[32] = {0};  // Stack gets poisoned.\n-  printf(\"Child: %p\\n\", x);\n-  // (a) Do nothing, just return to parent function.\n-  // (b) Jump into the original function. Stack remains poisoned unless we do\n-  //     something.\n-  if (mode == 1) {\n-    if (swapcontext(&child_context, &orig_context) < 0) {\n-      perror(\"swapcontext\");\n-      _exit(0);\n-    }\n-  }\n-}\n-\n-int Run(int arg, int mode) {\n-  const int kStackSize = 1 << 20;\n-  char child_stack[kStackSize + 1];\n-  printf(\"Child stack: %p\\n\", child_stack);\n-  // Setup child context.\n-  getcontext(&child_context);\n-  child_context.uc_stack.ss_sp = child_stack;\n-  child_context.uc_stack.ss_size = kStackSize / 2;\n-  if (mode == 0) {\n-    child_context.uc_link = &orig_context;\n-  }\n-  makecontext(&child_context, (void (*)())Child, 1, mode);\n-  if (swapcontext(&orig_context, &child_context) < 0) {\n-    perror(\"swapcontext\");\n-    return 0;\n-  }\n-  // Touch childs's stack to make sure it's unpoisoned.\n-  for (int i = 0; i < kStackSize; i++) {\n-    child_stack[i] = i;\n-  }\n-  return child_stack[arg];\n-}\n-\n-int main(int argc, char **argv) {\n-  // CHECK: WARNING: ASan doesn't fully support makecontext/swapcontext\n-  int ret = 0;\n-  ret += Run(argc - 1, 0);\n-  printf(\"Test1 passed\\n\");\n-  // CHECK: Test1 passed\n-  ret += Run(argc - 1, 1);\n-  printf(\"Test2 passed\\n\");\n-  // CHECK: Test2 passed\n-  return ret;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/zero-base-shadow.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/zero-base-shadow.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/Linux/zero-base-shadow.cc\t2013-04-09 09:08:05.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/Linux/zero-base-shadow.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,28 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-64 < %t.out\n-// RUN: %clangxx_asan -m64 -O1 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-64 < %t.out\n-// RUN: %clangxx_asan -m64 -O2 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-64 < %t.out\n-// RUN: %clangxx_asan -m32 -O0 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-32 < %t.out\n-// RUN: %clangxx_asan -m32 -O1 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-32 < %t.out\n-// RUN: %clangxx_asan -m32 -O2 -fsanitize-address-zero-base-shadow -fPIE -pie %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-32 < %t.out\n-\n-#include <string.h>\n-int main(int argc, char **argv) {\n-  char x[10];\n-  memset(x, 0, 10);\n-  int res = x[argc * 10];  // BOOOM\n-  // CHECK: {{READ of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*zero-base-shadow.cc:}}[[@LINE-2]]\n-  // CHECK: {{Address 0x.* is .* frame}}\n-  // CHECK: main\n-\n-  // Check that shadow for stack memory occupies lower part of address space.\n-  // CHECK-64: =>0x0f\n-  // CHECK-32: =>0x1\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/memcmp_test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/memcmp_test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/memcmp_test.cc\t2012-10-15 15:04:58.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/memcmp_test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,19 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <string.h>\n-int main(int argc, char **argv) {\n-  char a1[] = {argc, 2, 3, 4};\n-  char a2[] = {1, 2*argc, 3, 4};\n-  int res = memcmp(a1, a2, 4 + argc);  // BOOM\n-  // CHECK: AddressSanitizer: stack-buffer-overflow\n-  // CHECK: {{#0.*memcmp}}\n-  // CHECK: {{#1.*main}}\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/null_deref.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/null_deref.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/null_deref.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/null_deref.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,31 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-__attribute__((noinline))\n-static void NullDeref(int *ptr) {\n-  // CHECK: ERROR: AddressSanitizer: SEGV on unknown address\n-  // CHECK:   {{0x0*00028 .*pc 0x.*}}\n-  // CHECK: {{AddressSanitizer can not provide additional info.}}\n-  ptr[10]++;  // BOOM\n-  // atos on Mac cannot extract the symbol name correctly.\n-  // CHECK-Linux: {{    #0 0x.* in NullDeref.*null_deref.cc:}}[[@LINE-2]]\n-  // CHECK-Darwin: {{    #0 0x.* in .*NullDeref.*null_deref.cc:}}[[@LINE-3]]\n-}\n-int main() {\n-  NullDeref((int*)0);\n-  // CHECK: {{    #1 0x.* in _?main.*null_deref.cc:}}[[@LINE-1]]\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/partial_right.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/partial_right.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/partial_right.cc\t2013-02-05 15:32:03.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/partial_right.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,17 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <stdlib.h>\n-int main(int argc, char **argv) {\n-  volatile int *x = (int*)malloc(2*sizeof(int) + 2);\n-  int res = x[2];  // BOOOM\n-  // CHECK: {{READ of size 4 at 0x.* thread T0}}\n-  // CHECK: [[ADDR:0x[01-9a-fa-f]+]] is located 0 bytes to the right of {{.*}}-byte region [{{.*}},{{.*}}[[ADDR]])\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/shared-lib-test.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/shared-lib-test.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/shared-lib-test.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/shared-lib-test.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,54 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %p/SharedLibs/shared-lib-test-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <dlfcn.h>\n-#include <stdio.h>\n-#include <string.h>\n-\n-#include <string>\n-\n-using std::string;\n-\n-typedef void (fun_t)(int x);\n-\n-int main(int argc, char *argv[]) {\n-  string path = string(argv[0]) + \"-so.so\";\n-  printf(\"opening %s ... \\n\", path.c_str());\n-  void *lib = dlopen(path.c_str(), RTLD_NOW);\n-  if (!lib) {\n-    printf(\"error in dlopen(): %s\\n\", dlerror());\n-    return 1;\n-  }\n-  fun_t *inc = (fun_t*)dlsym(lib, \"inc\");\n-  if (!inc) return 1;\n-  printf(\"ok\\n\");\n-  inc(1);\n-  inc(-1);  // BOOM\n-  // CHECK: {{.*ERROR: AddressSanitizer: global-buffer-overflow}}\n-  // CHECK: {{READ of size 4 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.*}}\n-  // CHECK: {{    #1 0x.* in _?main .*shared-lib-test.cc:}}[[@LINE-4]]\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/stack-overflow.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/stack-overflow.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/stack-overflow.cc\t2013-03-22 11:36:24.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/stack-overflow.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,20 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-#include <string.h>\n-int main(int argc, char **argv) {\n-  char x[10];\n-  memset(x, 0, 10);\n-  int res = x[argc * 10];  // BOOOM\n-  // CHECK: {{READ of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*stack-overflow.cc:}}[[@LINE-2]]\n-  // CHECK: {{Address 0x.* is located in stack of thread T0 at offset}}\n-  // CHECK: main\n-  return res;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/strncpy-overflow.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/strncpy-overflow.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/strncpy-overflow.cc\t2013-02-05 15:32:03.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/strncpy-overflow.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,38 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-#include <string.h>\n-#include <stdlib.h>\n-int main(int argc, char **argv) {\n-  char *hello = (char*)malloc(6);\n-  strcpy(hello, \"hello\");\n-  char *short_buffer = (char*)malloc(9);\n-  strncpy(short_buffer, hello, 10);  // BOOM\n-  // CHECK: {{WRITE of size 10 at 0x.* thread T0}}\n-  // CHECK-Linux: {{    #0 0x.* in .*strncpy}}\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_strncpy}}\n-  // CHECK: {{    #1 0x.* in _?main .*strncpy-overflow.cc:}}[[@LINE-4]]\n-  // CHECK: {{0x.* is located 0 bytes to the right of 9-byte region}}\n-  // CHECK: {{allocated by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*malloc}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*strncpy-overflow.cc:}}[[@LINE-10]]\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_malloc.*}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*strncpy-overflow.cc:}}[[@LINE-13]]\n-  return short_buffer[8];\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-free.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-free.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-free.cc\t2013-01-22 10:14:54.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-free.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,43 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-#include <stdlib.h>\n-int main() {\n-  char *x = (char*)malloc(10 * sizeof(char));\n-  free(x);\n-  return x[5];\n-  // CHECK: {{.*ERROR: AddressSanitizer: heap-use-after-free on address}}\n-  // CHECK:   {{0x.* at pc 0x.* bp 0x.* sp 0x.*}}\n-  // CHECK: {{READ of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*use-after-free.cc:22}}\n-  // CHECK: {{0x.* is located 5 bytes inside of 10-byte region .0x.*,0x.*}}\n-  // CHECK: {{freed by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*free}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*use-after-free.cc:21}}\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_free}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*use-after-free.cc:21}}\n-\n-  // CHECK: {{previously allocated by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*malloc}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*use-after-free.cc:20}}\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_malloc.*}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*use-after-free.cc:20}}\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-free-right.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-free-right.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-free-right.cc\t2013-02-11 08:19:24.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-free-right.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,46 +0,0 @@\n-// RUN: %clangxx_asan -m64 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m64 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O0 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O1 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O2 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-// RUN: %clangxx_asan -m32 -O3 %s -o %t && %t 2>&1 | %symbolize > %t.out\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-%os < %t.out\n-\n-// Test use-after-free report in the case when access is at the right border of\n-//  the allocation.\n-\n-#include <stdlib.h>\n-int main() {\n-  volatile char *x = (char*)malloc(sizeof(char));\n-  free((void*)x);\n-  *x = 42;\n-  // CHECK: {{.*ERROR: AddressSanitizer: heap-use-after-free on address}}\n-  // CHECK:   {{0x.* at pc 0x.* bp 0x.* sp 0x.*}}\n-  // CHECK: {{WRITE of size 1 at 0x.* thread T0}}\n-  // CHECK: {{    #0 0x.* in _?main .*use-after-free-right.cc:25}}\n-  // CHECK: {{0x.* is located 0 bytes inside of 1-byte region .0x.*,0x.*}}\n-  // CHECK: {{freed by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*free}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*use-after-free-right.cc:24}}\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_free}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*use-after-free-right.cc:24}}\n-\n-  // CHECK: {{previously allocated by thread T0 here:}}\n-\n-  // CHECK-Linux: {{    #0 0x.* in .*malloc}}\n-  // CHECK-Linux: {{    #1 0x.* in main .*use-after-free-right.cc:23}}\n-\n-  // CHECK-Darwin: {{    #0 0x.* in _?wrap_malloc.*}}\n-  // CHECK-Darwin: {{    #1 0x.* in _?main .*use-after-free-right.cc:23}}\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-scope-inlined.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-scope-inlined.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/use-after-scope-inlined.cc\t2013-03-22 11:36:24.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/use-after-scope-inlined.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,30 +0,0 @@\n-// Test with \"-O2\" only to make sure inlining (leading to use-after-scope)\n-// happens. \"always_inline\" is not enough, as Clang doesn't emit\n-// llvm.lifetime intrinsics at -O0.\n-//\n-// RUN: %clangxx_asan -m64 -O2 -fsanitize=use-after-scope %s -o %t && \\\n-// RUN:     %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -m32 -O2 -fsanitize=use-after-scope %s -o %t && \\\n-// RUN:     %t 2>&1 | %symbolize | FileCheck %s\n-\n-int *arr;\n-\n-__attribute__((always_inline))\n-void inlined(int arg) {\n-  int x[5];\n-  for (int i = 0; i < arg; i++) x[i] = i;\n-  arr = x;\n-}\n-\n-int main(int argc, char *argv[]) {\n-  inlined(argc);\n-  return arr[argc - 1];  // BOOM\n-  // CHECK: ERROR: AddressSanitizer: stack-use-after-scope\n-  // CHECK: READ of size 4 at 0x{{.*}} thread T0\n-  // CHECK:   #0 0x{{.*}} in {{_?}}main\n-  // CHECK:      {{.*}}use-after-scope-inlined.cc:[[@LINE-4]]\n-  // CHECK: Address 0x{{.*}} is located in stack of thread T0 at offset\n-  // CHECK:      [[OFFSET:[^ ]*]] in frame\n-  // CHECK: main\n-  // CHECK:   {{\\[}}[[OFFSET]], {{.*}}) 'x.i'\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/wait.cc llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/wait.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/asan/lit_tests/wait.cc\t2013-04-23 14:36:37.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/asan/lit_tests/wait.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,77 +0,0 @@\n-// RUN: %clangxx_asan -DWAIT -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAITPID -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITPID -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITPID -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITPID -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAITID -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITID -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITID -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAITID -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAIT3 -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3 -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3 -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3 -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAIT4 -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4 -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4 -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4 -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAIT3_RUSAGE -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3_RUSAGE -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3_RUSAGE -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT3_RUSAGE -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-// RUN: %clangxx_asan -DWAIT4_RUSAGE -m64 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4_RUSAGE -m64 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4_RUSAGE -m32 -O0 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-// RUN: %clangxx_asan -DWAIT4_RUSAGE -m32 -O3 %s -o %t && %t 2>&1 | %symbolize | FileCheck %s\n-\n-\n-#include <assert.h>\n-#include <sys/wait.h>\n-#include <unistd.h>\n-\n-int main(int argc, char **argv) {\n-  pid_t pid = fork();\n-  if (pid) { // parent\n-    int x[3];\n-    int *status = x + argc * 3;\n-    int res;\n-#if defined(WAIT)\n-    res = wait(status);\n-#elif defined(WAITPID)\n-    res = waitpid(pid, status, WNOHANG);\n-#elif defined(WAITID)\n-    siginfo_t *si = (siginfo_t*)(x + argc * 3);\n-    res = waitid(P_ALL, 0, si, WEXITED | WNOHANG);\n-#elif defined(WAIT3)\n-    res = wait3(status, WNOHANG, NULL);\n-#elif defined(WAIT4)\n-    res = wait4(pid, status, WNOHANG, NULL);\n-#elif defined(WAIT3_RUSAGE) || defined(WAIT4_RUSAGE)\n-    struct rusage *ru = (struct rusage*)(x + argc * 3);\n-    int good_status;\n-# if defined(WAIT3_RUSAGE)\n-    res = wait3(&good_status, WNOHANG, ru);\n-# elif defined(WAIT4_RUSAGE)\n-    res = wait4(pid, &good_status, WNOHANG, ru);\n-# endif\n-#endif\n-    // CHECK: stack-buffer-overflow\n-    // CHECK: {{WRITE of size .* at 0x.* thread T0}}\n-    // CHECK: {{in .*wait}}\n-    // CHECK: {{in _?main .*wait.cc:}}\n-    // CHECK: is located in stack of thread T0 at offset\n-    // CHECK: {{in _?main}}\n-    return res != -1;\n-  }\n-  // child\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/heap-origin.cc llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/heap-origin.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/heap-origin.cc\t2013-02-11 12:34:26.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/heap-origin.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,33 +0,0 @@\n-// RUN: %clangxx_msan -m64 -O0 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O1 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O2 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O3 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O0 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O1 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O2 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O3 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-\n-#include <stdlib.h>\n-int main(int argc, char **argv) {\n-  char *volatile x = (char*)malloc(5 * sizeof(char));\n-  if (*x)\n-    exit(0);\n-  // CHECK: WARNING: Use of uninitialized value\n-  // CHECK: {{#0 0x.* in main .*heap-origin.cc:}}[[@LINE-3]]\n-\n-  // CHECK-ORIGINS: Uninitialized value was created by a heap allocation\n-  // CHECK-ORIGINS: {{#0 0x.* in .*malloc}}\n-  // CHECK-ORIGINS: {{#1 0x.* in main .*heap-origin.cc:}}[[@LINE-8]]\n-\n-  // CHECK: SUMMARY: MemorySanitizer: use-of-uninitialized-value {{.*heap-origin.cc:.* main}}\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/Linux/glob.cc llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/Linux/glob.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/Linux/glob.cc\t2013-04-09 13:35:13.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/Linux/glob.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,26 +0,0 @@\n-// RUN: %clangxx_msan -m64 -O0 %s -o %t && %t %p 2>&1 | FileCheck %s\n-// RUN: %clangxx_msan -m64 -O3 %s -o %t && %t %p 2>&1 | FileCheck %s\n-\n-#include <assert.h>\n-#include <glob.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <errno.h>\n-\n-int main(int argc, char *argv[]) {\n-  assert(argc == 2);\n-  char buf[1024];\n-  snprintf(buf, sizeof(buf), \"%s/%s\", argv[1], \"glob_test_root/*a\");\n-\n-  glob_t globbuf;\n-  int res = glob(buf, 0, 0, &globbuf);\n-\n-  printf(\"%d %s\\n\", errno, strerror(errno));\n-  assert(res == 0);\n-  assert(globbuf.gl_pathc == 2);\n-  printf(\"%zu\\n\", strlen(globbuf.gl_pathv[0]));\n-  printf(\"%zu\\n\", strlen(globbuf.gl_pathv[1]));\n-  printf(\"PASS\\n\");\n-  // CHECK: PASS\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/no_sanitize_memory_prop.cc llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/no_sanitize_memory_prop.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/no_sanitize_memory_prop.cc\t2013-02-28 12:25:54.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/no_sanitize_memory_prop.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,33 +0,0 @@\n-// RUN: %clangxx_msan -m64 -O0 %s -o %t && %t >%t.out 2>&1\n-// RUN: %clangxx_msan -m64 -O1 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O2 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O3 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-\n-// Test that (no_sanitize_memory) functions propagate shadow.\n-\n-// Note that at -O0 there is no report, because 'x' in 'f' is spilled to the\n-// stack, and then loaded back as a fully initialiazed value (due to\n-// no_sanitize_memory attribute).\n-\n-#include <stdlib.h>\n-#include <stdio.h>\n-\n-__attribute__((noinline))\n-__attribute__((no_sanitize_memory))\n-int f(int x) {\n-  return x;\n-}\n-\n-int main(void) {\n-  int x;\n-  int * volatile p = &x;\n-  int y = f(*p);\n-  // CHECK: WARNING: Use of uninitialized value\n-  // CHECK: {{#0 0x.* in main .*no_sanitize_memory_prop.cc:}}[[@LINE+1]]\n-  if (y)\n-    exit(0);\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/stack-origin.cc llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/stack-origin.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/msan/lit_tests/stack-origin.cc\t2013-02-11 12:34:26.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/msan/lit_tests/stack-origin.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,32 +0,0 @@\n-// RUN: %clangxx_msan -m64 -O0 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O1 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O2 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-// RUN: %clangxx_msan -m64 -O3 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out\n-\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O0 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O1 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O2 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-// RUN: %clangxx_msan -fsanitize-memory-track-origins -m64 -O3 %s -o %t && not %t >%t.out 2>&1\n-// RUN: FileCheck %s < %t.out && FileCheck %s --check-prefix=CHECK-ORIGINS < %t.out\n-\n-#include <stdlib.h>\n-int main(int argc, char **argv) {\n-  int x;\n-  int *volatile p = &x;\n-  if (*p)\n-    exit(0);\n-  // CHECK: WARNING: Use of uninitialized value\n-  // CHECK: {{#0 0x.* in main .*stack-origin.cc:}}[[@LINE-3]]\n-\n-  // CHECK-ORIGINS: Uninitialized value was created by an allocation of 'x' in the stack frame of function 'main'\n-\n-  // CHECK: SUMMARY: MemorySanitizer: use-of-uninitialized-value {{.*stack-origin.cc:.* main}}\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/blacklist.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/blacklist.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/blacklist.cc\t2012-12-28 11:06:26.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/blacklist.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,31 +0,0 @@\n-// Test blacklist functionality for TSan.\n-\n-// RUN: %clangxx_tsan -O1 %s \\\n-// RUN:   -fsanitize-blacklist=%p/Helpers/blacklist.txt \\\n-// RUN:   -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-\n-int Global;\n-\n-void *Thread1(void *x) {\n-  Global++;\n-  return NULL;\n-}\n-\n-void *Blacklisted_Thread2(void *x) {\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Blacklisted_Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  printf(\"PASS\\n\");\n-  return 0;\n-}\n-\n-// CHECK-NOT: ThreadSanitizer: data race\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/load_shared_lib.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/load_shared_lib.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/load_shared_lib.cc\t2013-04-09 09:08:05.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/load_shared_lib.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,44 +0,0 @@\n-// Check that if the list of shared libraries changes between the two race\n-// reports, the second report occurring in a new shared library is still\n-// symbolized correctly.\n-\n-// RUN: %clangxx_tsan -O1 %p/SharedLibs/load_shared_lib-so.cc \\\n-// RUN:     -fPIC -shared -o %t-so.so\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-\n-#include <dlfcn.h>\n-#include <pthread.h>\n-#include <stdio.h>\n-\n-#include <string>\n-\n-int GLOB = 0;\n-\n-void *write_glob(void *unused) {\n-  GLOB++;\n-  return NULL;\n-}\n-\n-void race_two_threads(void *(*access_callback)(void *unused)) {\n-  pthread_t t1, t2;\n-  pthread_create(&t1, NULL, access_callback, NULL);\n-  pthread_create(&t2, NULL, access_callback, NULL);\n-  pthread_join(t1, NULL);\n-  pthread_join(t2, NULL);\n-}\n-\n-int main(int argc, char *argv[]) {\n-  std::string path = std::string(argv[0]) + std::string(\"-so.so\");\n-  race_two_threads(write_glob);\n-  // CHECK: write_glob\n-  void *lib = dlopen(path.c_str(), RTLD_NOW);\n-    if (!lib) {\n-    printf(\"error in dlopen(): %s\\n\", dlerror());\n-    return 1;\n-  }\n-  void *(*write_from_so)(void *unused);\n-  *(void **)&write_from_so = dlsym(lib, \"write_from_so\");\n-  race_two_threads(write_from_so);\n-  // CHECK: write_from_so\n-  return 0;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutex_destroy_locked.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutex_destroy_locked.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutex_destroy_locked.cc\t2013-02-06 15:24:00.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutex_destroy_locked.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,22 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <unistd.h>\n-\n-int main() {\n-  pthread_mutex_t m;\n-  pthread_mutex_init(&m, 0);\n-  pthread_mutex_lock(&m);\n-  pthread_mutex_destroy(&m);\n-  return 0;\n-}\n-\n-// CHECK: WARNING: ThreadSanitizer: destroy of a locked mutex\n-// CHECK:     #0 pthread_mutex_destroy\n-// CHECK:     #1 main\n-// CHECK:   and:\n-// CHECK:     #0 pthread_mutex_lock\n-// CHECK:     #1 main\n-// CHECK:   Mutex {{.*}} created at:\n-// CHECK:     #0 pthread_mutex_init\n-// CHECK:     #1 main\n-// CHECK: SUMMARY: ThreadSanitizer: destroy of a locked mutex{{.*}}main\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset1.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset1.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset1.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset1.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,37 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx;\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(&mtx);\n-  Global++;\n-  pthread_mutex_unlock(&mtx);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T1\n-  // CHECK:                         (mutexes: write [[M1:M[0-9]+]]):\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T2:\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset1.cc:[[@LINE+1]]\n-  pthread_mutex_init(&mtx, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset2.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset2.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset2.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset2.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,37 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx;\n-\n-void *Thread1(void *x) {\n-  pthread_mutex_lock(&mtx);\n-  Global++;\n-  pthread_mutex_unlock(&mtx);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  sleep(1);\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T2:\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T1\n-  // CHECK:                     (mutexes: write [[M1:M[0-9]+]]):\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset2.cc:[[@LINE+1]]\n-  pthread_mutex_init(&mtx, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset3.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset3.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset3.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset3.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,45 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx1;\n-pthread_mutex_t mtx2;\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(&mtx1);\n-  pthread_mutex_lock(&mtx2);\n-  Global++;\n-  pthread_mutex_unlock(&mtx2);\n-  pthread_mutex_unlock(&mtx1);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK: Write of size 4 at {{.*}} by thread T1\n-  // CHECK:               (mutexes: write [[M1:M[0-9]+]], write [[M2:M[0-9]+]]):\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T2:\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset3.cc:[[@LINE+4]]\n-  // CHECK:   Mutex [[M2]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset3.cc:[[@LINE+2]]\n-  pthread_mutex_init(&mtx1, 0);\n-  pthread_mutex_init(&mtx2, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx1);\n-  pthread_mutex_destroy(&mtx2);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset4.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset4.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset4.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset4.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,45 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx1;\n-pthread_mutex_t mtx2;\n-\n-void *Thread1(void *x) {\n-  pthread_mutex_lock(&mtx1);\n-  pthread_mutex_lock(&mtx2);\n-  Global++;\n-  pthread_mutex_unlock(&mtx2);\n-  pthread_mutex_unlock(&mtx1);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  sleep(1);\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T2:\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T1\n-  // CHECK:                 (mutexes: write [[M1:M[0-9]+]], write [[M2:M[0-9]+]]):\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset4.cc:[[@LINE+4]]\n-  // CHECK:   Mutex [[M2]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset4.cc:[[@LINE+2]]\n-  pthread_mutex_init(&mtx1, 0);\n-  pthread_mutex_init(&mtx2, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx1);\n-  pthread_mutex_destroy(&mtx2);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset5.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset5.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset5.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset5.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,46 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx1;\n-pthread_mutex_t mtx2;\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(&mtx1);\n-  Global++;\n-  pthread_mutex_unlock(&mtx1);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  pthread_mutex_lock(&mtx2);\n-  Global--;\n-  pthread_mutex_unlock(&mtx2);\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T1\n-  // CHECK:                              (mutexes: write [[M1:M[0-9]+]]):\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T2\n-  // CHECK:                              (mutexes: write [[M2:M[0-9]+]]):\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset5.cc:[[@LINE+4]]\n-  // CHECK:   Mutex [[M2]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset5.cc:[[@LINE+5]]\n-  pthread_mutex_init(&mtx1, 0);\n-  pthread_mutex_init(&mtx2, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx1);\n-  pthread_mutex_destroy(&mtx2);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset6.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset6.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset6.cc\t2012-12-28 09:38:09.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset6.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,53 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t mtx1;\n-pthread_spinlock_t mtx2;\n-pthread_rwlock_t mtx3;\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(&mtx1);\n-  Global++;\n-  pthread_mutex_unlock(&mtx1);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  pthread_mutex_lock(&mtx1);\n-  pthread_mutex_unlock(&mtx1);\n-  pthread_spin_lock(&mtx2);\n-  pthread_rwlock_rdlock(&mtx3);\n-  Global--;\n-  pthread_spin_unlock(&mtx2);\n-  pthread_rwlock_unlock(&mtx3);\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T1\n-  // CHECK:                          (mutexes: write [[M1:M[0-9]+]]):\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T2\n-  // CHECK:               (mutexes: write [[M2:M[0-9]+]], read [[M3:M[0-9]+]]):\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #1 main {{.*}}/mutexset6.cc:[[@LINE+5]]\n-  // CHECK:   Mutex [[M2]] created at:\n-  // CHECK:     #1 main {{.*}}/mutexset6.cc:[[@LINE+4]]\n-  // CHECK:   Mutex [[M3]] created at:\n-  // CHECK:     #1 main {{.*}}/mutexset6.cc:[[@LINE+3]]\n-  pthread_mutex_init(&mtx1, 0);\n-  pthread_spin_init(&mtx2, 0);\n-  pthread_rwlock_init(&mtx3, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&mtx1);\n-  pthread_spin_destroy(&mtx2);\n-  pthread_rwlock_destroy(&mtx3);\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset8.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset8.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/mutexset8.cc\t2013-04-30 14:00:40.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/mutexset8.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,39 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-pthread_mutex_t *mtx;\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(mtx);\n-  Global++;\n-  pthread_mutex_unlock(mtx);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  // CHECK: WARNING: ThreadSanitizer: data race\n-  // CHECK:   Write of size 4 at {{.*}} by thread T1\n-  // CHECK:                         (mutexes: write [[M1:M[0-9]+]]):\n-  // CHECK:   Previous write of size 4 at {{.*}} by thread T2:\n-  // CHECK:   Mutex [[M1]] created at:\n-  // CHECK:     #0 pthread_mutex_init\n-  // CHECK:     #1 main {{.*}}/mutexset8.cc\n-  mtx = new pthread_mutex_t;\n-  pthread_mutex_init(mtx, 0);\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(mtx);\n-  delete mtx;\n-}\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/race_on_mutex.c llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/race_on_mutex.c\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/race_on_mutex.c\t2013-02-01 12:10:53.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/race_on_mutex.c\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,42 +0,0 @@\n-// RUN: %clang_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <stddef.h>\n-#include <unistd.h>\n-\n-pthread_mutex_t Mtx;\n-int Global;\n-\n-void *Thread1(void *x) {\n-  pthread_mutex_init(&Mtx, 0);\n-  pthread_mutex_lock(&Mtx);\n-  Global = 42;\n-  pthread_mutex_unlock(&Mtx);\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  sleep(1);\n-  pthread_mutex_lock(&Mtx);\n-  Global = 43;\n-  pthread_mutex_unlock(&Mtx);\n-  return NULL;\n-}\n-\n-int main() {\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  pthread_mutex_destroy(&Mtx);\n-  return 0;\n-}\n-\n-// CHECK:      WARNING: ThreadSanitizer: data race\n-// CHECK-NEXT:   Atomic read of size 1 at {{.*}} by thread T2:\n-// CHECK-NEXT:     #0 pthread_mutex_lock\n-// CHECK-NEXT:     #1 Thread2{{.*}} {{.*}}race_on_mutex.c:20{{(:3)?}} ({{.*}})\n-// CHECK:        Previous write of size 1 at {{.*}} by thread T1:\n-// CHECK-NEXT:     #0 pthread_mutex_init {{.*}} ({{.*}})\n-// CHECK-NEXT:     #1 Thread1{{.*}} {{.*}}race_on_mutex.c:11{{(:3)?}} ({{.*}})\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/signal_malloc.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/signal_malloc.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/signal_malloc.cc\t2013-02-06 15:24:00.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/signal_malloc.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,26 +0,0 @@\n-// RUN: %clang_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <signal.h>\n-#include <sys/types.h>\n-#include <unistd.h>\n-\n-static void handler(int, siginfo_t*, void*) {\n-  // CHECK: WARNING: ThreadSanitizer: signal-unsafe call inside of a signal\n-  // CHECK:     #0 malloc\n-  // CHECK:     #{{(1|2)}} handler(int, siginfo{{(_t)?}}*, void*) {{.*}}signal_malloc.cc:[[@LINE+2]]\n-  // CHECK: SUMMARY: ThreadSanitizer: signal-unsafe call inside of a signal{{.*}}handler\n-  volatile char *p = (char*)malloc(1);\n-  p[0] = 0;\n-  free((void*)p);\n-}\n-\n-int main() {\n-  struct sigaction act = {};\n-  act.sa_sigaction = &handler;\n-  sigaction(SIGPROF, &act, 0);\n-  kill(getpid(), SIGPROF);\n-  sleep(1);\n-  return 0;\n-}\n-\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_race.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_race.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_race.cc\t2013-02-06 15:24:00.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_race.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,26 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-\n-int Global;\n-\n-void *Thread1(void *x) {\n-  Global++;\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  Global--;\n-  return NULL;\n-}\n-\n-int main() {\n-  pthread_t t[2];\n-  pthread_create(&t[0], NULL, Thread1, NULL);\n-  pthread_create(&t[1], NULL, Thread2, NULL);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-}\n-\n-// CHECK: WARNING: ThreadSanitizer: data race\n-// CHECK: SUMMARY: ThreadSanitizer: data race{{.*}}Thread\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_stack2.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_stack2.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_stack2.cc\t2012-12-07 10:24:57.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_stack2.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,53 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-\n-void __attribute__((noinline)) foo1() {\n-  Global = 42;\n-}\n-\n-void __attribute__((noinline)) bar1() {\n-  volatile int tmp = 42;\n-  int tmp2 = tmp;\n-  (void)tmp2;\n-  foo1();\n-}\n-\n-void __attribute__((noinline)) foo2() {\n-  volatile int tmp = Global;\n-  int tmp2 = tmp;\n-  (void)tmp2;\n-}\n-\n-void __attribute__((noinline)) bar2() {\n-  volatile int tmp = 42;\n-  int tmp2 = tmp;\n-  (void)tmp2;\n-  foo2();\n-}\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  bar1();\n-  return NULL;\n-}\n-\n-int main() {\n-  pthread_t t;\n-  pthread_create(&t, NULL, Thread1, NULL);\n-  bar2();\n-  pthread_join(t, NULL);\n-}\n-\n-// CHECK:      WARNING: ThreadSanitizer: data race\n-// CHECK-NEXT:   Write of size 4 at {{.*}} by thread T1:\n-// CHECK-NEXT:     #0 foo1{{.*}} {{.*}}simple_stack2.cc:9{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #1 bar1{{.*}} {{.*}}simple_stack2.cc:16{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 Thread1{{.*}} {{.*}}simple_stack2.cc:34{{(:3)?}} ({{.*}})\n-// CHECK:        Previous read of size 4 at {{.*}} by main thread:\n-// CHECK-NEXT:     #0 foo2{{.*}} {{.*}}simple_stack2.cc:20{{(:28)?}} ({{.*}})\n-// CHECK-NEXT:     #1 bar2{{.*}} {{.*}}simple_stack2.cc:29{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 main{{.*}} {{.*}}simple_stack2.cc:41{{(:3)?}} ({{.*}})\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_stack.c llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_stack.c\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/simple_stack.c\t2012-12-17 17:28:15.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/simple_stack.c\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,66 +0,0 @@\n-// RUN: %clang_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <stdio.h>\n-#include <unistd.h>\n-\n-int Global;\n-\n-void __attribute__((noinline)) foo1() {\n-  Global = 42;\n-}\n-\n-void __attribute__((noinline)) bar1() {\n-  volatile int tmp = 42; (void)tmp;\n-  foo1();\n-}\n-\n-void __attribute__((noinline)) foo2() {\n-  volatile int v = Global; (void)v;\n-}\n-\n-void __attribute__((noinline)) bar2() {\n-  volatile int tmp = 42; (void)tmp;\n-  foo2();\n-}\n-\n-void *Thread1(void *x) {\n-  sleep(1);\n-  bar1();\n-  return NULL;\n-}\n-\n-void *Thread2(void *x) {\n-  bar2();\n-  return NULL;\n-}\n-\n-void StartThread(pthread_t *t, void *(*f)(void*)) {\n-  pthread_create(t, NULL, f, NULL);\n-}\n-\n-int main() {\n-  pthread_t t[2];\n-  StartThread(&t[0], Thread1);\n-  StartThread(&t[1], Thread2);\n-  pthread_join(t[0], NULL);\n-  pthread_join(t[1], NULL);\n-  return 0;\n-}\n-\n-// CHECK:      WARNING: ThreadSanitizer: data race\n-// CHECK-NEXT:   Write of size 4 at {{.*}} by thread T1:\n-// CHECK-NEXT:     #0 foo1{{.*}} {{.*}}simple_stack.c:9{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #1 bar1{{.*}} {{.*}}simple_stack.c:14{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 Thread1{{.*}} {{.*}}simple_stack.c:28{{(:3)?}} ({{.*}})\n-// CHECK:        Previous read of size 4 at {{.*}} by thread T2:\n-// CHECK-NEXT:     #0 foo2{{.*}} {{.*}}simple_stack.c:18{{(:26)?}} ({{.*}})\n-// CHECK-NEXT:     #1 bar2{{.*}} {{.*}}simple_stack.c:23{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 Thread2{{.*}} {{.*}}simple_stack.c:33{{(:3)?}} ({{.*}})\n-// CHECK:        Thread T1 (tid={{.*}}, running) created by main thread at:\n-// CHECK-NEXT:     #0 pthread_create {{.*}} ({{.*}})\n-// CHECK-NEXT:     #1 StartThread{{.*}} {{.*}}simple_stack.c:38{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 main{{.*}} {{.*}}simple_stack.c:43{{(:3)?}} ({{.*}})\n-// CHECK:        Thread T2 ({{.*}}) created by main thread at:\n-// CHECK-NEXT:     #0 pthread_create {{.*}} ({{.*}})\n-// CHECK-NEXT:     #1 StartThread{{.*}} {{.*}}simple_stack.c:38{{(:3)?}} ({{.*}})\n-// CHECK-NEXT:     #2 main{{.*}} {{.*}}simple_stack.c:44{{(:3)?}} ({{.*}})\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/thread_leak3.c llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/thread_leak3.c\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/thread_leak3.c\t2013-03-21 17:55:17.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/thread_leak3.c\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,17 +0,0 @@\n-// RUN: %clang_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <unistd.h>\n-\n-void *Thread(void *x) {\n-  return 0;\n-}\n-\n-int main() {\n-  pthread_t t;\n-  pthread_create(&t, 0, Thread, 0);\n-  sleep(1);\n-  return 0;\n-}\n-\n-// CHECK: WARNING: ThreadSanitizer: thread leak\n-// CHECK: SUMMARY: ThreadSanitizer: thread leak{{.*}}main\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/tiny_race.c llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/tiny_race.c\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/tiny_race.c\t2012-09-18 09:23:54.000000000 +0200\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/tiny_race.c\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,15 +0,0 @@\n-// RUN: %clang_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-int Global;\n-void *Thread1(void *x) {\n-  Global = 42;\n-  return x;\n-}\n-int main() {\n-  pthread_t t;\n-  pthread_create(&t, NULL, Thread1, NULL);\n-  Global = 43;\n-  pthread_join(t, NULL);\n-  return Global;\n-}\n-// CHECK: WARNING: ThreadSanitizer: data race\ndiff -urN llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/write_in_reader_lock.cc llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/write_in_reader_lock.cc\n--- llvm-3.3.src.org/projects/compiler-rt/lib/tsan/lit_tests/write_in_reader_lock.cc\t2012-12-07 10:24:57.000000000 +0100\n+++ llvm-3.3.src/projects/compiler-rt/lib/tsan/lit_tests/write_in_reader_lock.cc\t1970-01-01 01:00:00.000000000 +0100\n@@ -1,35 +0,0 @@\n-// RUN: %clangxx_tsan -O1 %s -o %t && %t 2>&1 | FileCheck %s\n-#include <pthread.h>\n-#include <unistd.h>\n-\n-pthread_rwlock_t rwlock;\n-int GLOB;\n-\n-void *Thread1(void *p) {\n-  (void)p;\n-  pthread_rwlock_rdlock(&rwlock);\n-  // Write under reader lock.\n-  sleep(1);\n-  GLOB++;\n-  pthread_rwlock_unlock(&rwlock);\n-  return 0;\n-}\n-\n-int main(int argc, char *argv[]) {\n-  pthread_rwlock_init(&rwlock, NULL);\n-  pthread_rwlock_rdlock(&rwlock);\n-  pthread_t t;\n-  pthread_create(&t, 0, Thread1, 0);\n-  volatile int x = GLOB;\n-  (void)x;\n-  pthread_rwlock_unlock(&rwlock);\n-  pthread_join(t, 0);\n-  pthread_rwlock_destroy(&rwlock);\n-  return 0;\n-}\n-\n-// CHECK: WARNING: ThreadSanitizer: data race\n-// CHECK:   Write of size 4 at {{.*}} by thread T1{{.*}}:\n-// CHECK:     #0 Thread1(void*) {{.*}}write_in_reader_lock.cc:13\n-// CHECK:   Previous read of size 4 at {{.*}} by main thread{{.*}}:\n-// CHECK:     #0 main {{.*}}write_in_reader_lock.cc:23\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-easybuild-easyconfigs-3.1.2-urofhq6kkjwlwc6h4bundhoam7bqccmb/spack-src/easybuild/easyconfigs/l/likwid/pinomp-pthread-overload.patch": "--- src/pthread-overload/pthread-overload.c.orig\t2012-11-29 18:18:45.000000000 +0100\n+++ src/pthread-overload/pthread-overload.c\t2013-02-14 18:52:23.088378033 +0100\n@@ -1,235 +1,243 @@\n+\n /*\n- * =======================================================================================\n- *\n- *      Filename:  pthread-overload.c\n- *\n- *      Description:  Overloaded library for pthread_create call. \n- *                    Implements pinning of threads together with likwid-pin.\n- *\n- *      Version:   3.0\n- *      Released:  29.11.2012\n- *\n- *      Author:  Jan Treibig (jt), jan.treibig@gmail.com\n- *      Project:  likwid\n- *\n- *      Copyright (C) 2012 Jan Treibig \n- *\n- *      This program is free software: you can redistribute it and/or modify it under\n- *      the terms of the GNU General Public License as published by the Free Software\n- *      Foundation, either version 3 of the License, or (at your option) any later\n- *      version.\n- *\n- *      This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- *      WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- *      PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n- *\n- *      You should have received a copy of the GNU General Public License along with\n- *      this program.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- * =======================================================================================\n+ * pthread_create overload function\n+ * Copyleft Michael Meier 2008 - released under GPL v2.\n+ * This will pin every thread that is created except the first one (because\n+ * that seems to be the \"master\" in OpenMP binaries created by Intel\n+ * Compilers).\n+ * It will automatically get its current CPUset from the system and use only\n+ * these CPUs in a round-robin way, so you will most likely want to combine\n+ * this with \"taskset\".\n+ *\n+ * Compile with something like:\n+ *   gcc -Wall -O2 -D_GNU_SOURCE -o ptoverride.so -shared -fPIC -ldl -lpthread ./pthread-overload.c\n+ * Use with something like:\n+ *   LD_PRELOAD=./ptoverride.so OMP_NUM_THREADS=2 taskset -c 0,2 ./youropenmpbinary\n+ *\n+ * If libpthread.so cannot be found, you can specify its location at\n+ * compile-time by adding the following parameter to the compile command:\n+ *   -DLIBPTHREADLOCATION=/where/is/libpthread.so\n+ *\n+ * Advanced users can alter the pinning behaviour to adapt it to different\n+ * OpenMP variants or hybrid programs. Three Environment Variables are\n+ * evaluated by the pinner for that purpose:\n+ *  PINOMP_MASK    is a decimal or hex (with leading 0x) number interpreted\n+ *                 as a bitmask. Threads that have their corresponding bit in\n+ *                 the mask set will not be pinned.\n+ *  PINOMP_SKIP    is a decimal number. The thread with that number will not\n+ *                 be pinned.\n+ *  PINOMP_CPUS    the CPUs to use, in the right order, seperated by commas\n+ *  PINOMP_VERBOSE is a decimal that sets the verbosity of debug output. defaults to 2.\n  */\n \n #include <stdio.h>\n #include <stdlib.h>\n-#include <stdint.h>\n #include <dlfcn.h>\n #include <sched.h>\n-#include <bits/pthreadtypes.h>\n #include <sys/types.h>\n-#include <errno.h>\n #include <dirent.h>\n #include <unistd.h>\n #include <string.h>\n \n-#ifdef COLOR\n-#include <textcolor.h>\n-#endif\n+extern int pthread_setaffinity_np(unsigned long th, int cpusetsize, cpu_set_t * cpuset);\n \n-#define STRINGIFY(x) #x\n-#define TOSTRING(x) STRINGIFY(x)\n-#define LLU_CAST  (unsigned long long)\n-\n-extern int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, const cpu_set_t *cpuset);\n+#define str(x) #x\n \n static char * sosearchpaths[] = {\n-#ifdef LIBPTHREAD\n-    TOSTRING(LIBPTHREAD),\n+#ifdef LIBPTHREADLOCATION\n+\tstr(LIBPTHREADLOCATION),\n #endif\n-    \"/lib64/tls/libpthread.so.0\",/* sles9 x86_64 */  \n-    \"libpthread.so.0\",           /* Ubuntu */\n-    NULL\n+\t\"/lib64/tls/libpthread.so.0\",\t/* sles9 x86_64 */\n+\t\"libpthread.so.0\",\t\t/* Ubuntu and other proper distributions */\n+\tNULL\n };\n+static int verblevel = -1;\n \n-int\n-pthread_create(pthread_t* thread,\n-        const pthread_attr_t* attr,\n-        void* (*start_routine)(void *),\n-        void * arg)\n+int pthread_create(void * thread, void * attr, void * (*start_routine)(void *), void * arg)\n {\n-    void *handle;\n-    char *error;\n-    int (*rptc) (pthread_t *, const pthread_attr_t *, void* (*start_routine)(void *), void *);\n-    int ret;\n-    static int reallpthrindex = 0;\n-    static int npinned = 0;\n-    static int ncalled = 0;\n-    static int silent = 0;\n-    static int pin_ids[MAX_NUM_THREADS];\n-    static uint64_t skipMask = 0;\n-\n-\n-    /* On first entry: Get Evironment Variable and initialize pin_ids */\n-    if (ncalled == 0) \n-    {\n-        char *str = getenv(\"LIKWID_SKIP\");\n-        char *token, *saveptr;\n-        char *delimiter = \",\";\n-        int i = 0;\n-        int ncpus = 0;\n-\n-        str = getenv(\"LIKWID_SKIP\");\n-        if (str != NULL) \n-        {\n-            skipMask = strtoul(str, &str, 10);\n-        }\n-        else \n-        {\n-            printf(\"[pthread wrapper] ERROR: Environment Variabel LIKWID_SKIP not set!\\n\");\n-        }\n-\n-        if ( skipMask == 0 )\n-        {\n-            dlerror();    /* Clear any existing error */\n-            dlsym(RTLD_DEFAULT,\"__kmpc_begin\");\n-\n-            if (( dlerror()) == NULL)  {\n-                skipMask = 0x1;\n-            }\n-        }\n-\n-        if (getenv(\"LIKWID_SILENT\") != NULL)\n-        {\n-            silent = 1;\n-        }\n-        else\n-        {\n-            color_on(BRIGHT, COLOR);\n-        }\n-\n-        if (!silent) \n-        {\n-            printf(\"[pthread wrapper] \");\n-        }\n-\n-        str = getenv(\"LIKWID_PIN\");\n-        if (str != NULL) \n-        {\n-            token = str;\n-            while (token) \n-            {\n-                token = strtok_r(str,delimiter,&saveptr);\n-                str = NULL;\n-                if (token) \n-                {\n-                    ncpus++;\n-                    pin_ids[i++] = strtoul(token, &token, 10);\n-                }\n-            }\n-        }\n-        else \n-        {\n-            printf(\"[pthread wrapper] ERROR: Environment Variabel LIKWID_PIN not set!\\n\");\n-        }\n-\n-        if (!silent) \n-        {\n-            printf(\"[pthread wrapper] PIN_MASK: \");\n-\n-            for (int i=0;i<ncpus;i++) \n-            {\n-                printf(\"%d->%d  \",i,pin_ids[i]); \n-            }\n-            printf(\"\\n\");\n-            printf(\"[pthread wrapper] SKIP MASK: 0x%llX\\n\",LLU_CAST skipMask);\n-        }\n-    } \n-    else\n-    {\n-#ifdef COLOR\n-        if (!silent) \n-        {\n-            color_on(BRIGHT, COLOR);\n-        }\n-#endif\n+  void *handle;\n+  char *error;\n+  int (*rptc) (void *, void *, void * (*start_routine)(void *), void *);\n+  int ret;\n+  static int reallpthrindex = 0;\n+  static int npinned = 0;\n+  static cpu_set_t mask;\n+  static int lastpin = 0;\n+  static pid_t mainpid;\n+  static unsigned long pinningskipmask = 0;\n+  static int useexplicitcpus = 0;\n+  static char * cpustring =  NULL;\n+  static char * curcpustr = NULL;\n+\n+  if (verblevel == -1) {\n+    char * PINOMP_VERBOSE = getenv(\"PINOMP_VERBOSE\");\n+    if (PINOMP_VERBOSE == NULL) {\n+      verblevel = 2;\n+    } else {\n+      verblevel = strtol(PINOMP_VERBOSE, NULL, 10);\n+      if (verblevel < 0) { verblevel = 0; }\n     }\n-\n-    /* Handle dll related stuff */\n-    do \n-    {\n-        handle = dlopen(sosearchpaths[reallpthrindex], RTLD_LAZY);\n-        if (handle) \n-        {\n-            break;\n-        }\n-        if (sosearchpaths[reallpthrindex] != NULL) \n-        {\n-            reallpthrindex++;\n-        }\n+  }\n+  if (npinned == 0) {\n+    char * PINOMP_CPUS = getenv(\"PINOMP_CPUS\");\n+    if (PINOMP_CPUS != NULL) {\n+      cpustring = strdup(PINOMP_CPUS);\n+      curcpustr = cpustring;\n+      useexplicitcpus = 1;\n     }\n-\n-    while (sosearchpaths[reallpthrindex] != NULL);\n-\n-    if (!handle) \n-    {\n-        printf(\"%s\\n\", dlerror());\n-        return -1;\n-    }\n-\n-    dlerror();    /* Clear any existing error */\n-    rptc = dlsym(handle, \"pthread_create\");\n-\n-    if ((error = dlerror()) != NULL)  \n-    {\n-        printf(\"%s\\n\", error);\n-        return -2;\n+    if (pinningskipmask == 0) { /* Could just as well use if (1) ... */\n+      char * PINOMP_MASK = getenv(\"PINOMP_MASK\");\n+      char * PINOMP_SKIP = getenv(\"PINOMP_SKIP\");\n+      if ((PINOMP_MASK == NULL) && (PINOMP_SKIP == NULL)) {\n+        pinningskipmask = 2; /* Default - makes it behave just like before, skipping the first thread */\n+      } else {\n+        if (PINOMP_MASK != NULL) {\n+          unsigned long toskip = strtoul(PINOMP_MASK, NULL, 16); /* accepts both 0x* and decimal on GNU! */\n+          pinningskipmask = toskip;\n+        }\n+        if (PINOMP_SKIP != NULL) {\n+          char * rest = PINOMP_SKIP;\n+          do {\n+            unsigned long toskip = strtoul(rest, &rest, 10);\n+            pinningskipmask |= (1UL << toskip);\n+            if (*rest != '\\0') { rest++; }\n+          } while (*rest != '\\0');\n+        }\n+      }\n+      if (verblevel > 1) {\n+        printf(\"[pthread wrapper] Pinning Skip Mask: 0x%lx\\n\", pinningskipmask);\n+      }\n     }\n-\n-    ret = (*rptc)(thread, attr, start_routine, arg);\n-\n-    /* After thread creation pin the thread */\n-    if (ret == 0) \n-    {\n-        cpu_set_t cpuset;\n-\n-        if ((ncalled<64) && (skipMask&(1ULL<<(ncalled)))) \n-        {\n-            if (!silent) \n-            {\n-                printf(\"\\tthreadid %lu -> SKIP \\n\", *thread);\n+    npinned++;\n+    CPU_ZERO(&mask);\n+    ret = sched_getaffinity(getpid(), sizeof(mask), &mask);\n+    if (ret) {\n+      printf(\"[pthread wrapper] WARNING: sched_get_affinity returned error code %d, cannot pin correctly.\\n\", ret);\n+    } else {\n+      int j;\n+      if (verblevel > 1) {\n+        printf(\"[pthread wrapper] Using CPUs: \");\n+      }\n+      for (j = 0; j < CPU_SETSIZE; j++) {\n+        if (CPU_ISSET(j, &mask)) {\n+          lastpin = j;\n+          if (verblevel > 1) {\n+            printf(\" %d\", j);\n+          }\n+        }\n+      }\n+      if (verblevel > 0) {\n+        printf(\"\\n[pthread wrapper] \");\n+      }\n+      mainpid = getpid();\n+      if ((pinningskipmask & 1UL) != 0) { /* npinned has already been increased so cannot be used! */\n+        if (verblevel > 0) {\n+          printf(\"Main PID: %d -> SKIP!\\n\", mainpid);\n+        }\n+      } else {\n+        cpu_set_t mymask;\n+        int usecpu;\n+        if (useexplicitcpus) {\n+          usecpu = strtoul(curcpustr, &curcpustr, 10);\n+          if ((curcpustr == NULL) || (*curcpustr == '\\0')) {\n+            curcpustr = cpustring;\n+          } else {\n+            curcpustr++;\n+            if ((curcpustr == NULL) || (*curcpustr == '\\0')) {\n+              curcpustr = cpustring;\n             }\n+          }\n+        } else {\n+          usecpu = ((lastpin + 1) % CPU_SETSIZE);\n+          while ((usecpu != lastpin) && (!CPU_ISSET(usecpu, &mask))) {\n+            usecpu = ((usecpu + 1) % CPU_SETSIZE);\n+          }\n+        }\n+        lastpin = usecpu;\n+        CPU_ZERO(&mymask);\n+        CPU_SET(usecpu, &mymask);\n+        if (verblevel > 0) {\n+          printf(\"Main PID: %d -> core %d - \", mainpid, usecpu);\n+        }\n+        if (sched_setaffinity(mainpid, sizeof(mymask), &mymask)) {\n+          perror(\"sched_setaffinity failed\");\n+        } else {\n+          if (verblevel > 0) {\n+            printf(\"OK\\n\");\n+          }\n         }\n-        else \n-        {\n-            CPU_ZERO(&cpuset);\n-            CPU_SET(pin_ids[npinned], &cpuset);\n-\n-            pthread_setaffinity_np(*thread, sizeof(cpu_set_t), &cpuset);\n-\n-            if (!silent)\n-            {\n-                printf(\"\\tthreadid %lu -> core %d - OK\\n\", *thread, pin_ids[npinned]);\n-#ifdef COLOR\n-                color_reset();\n-#endif\n-            }\n-            npinned++;\n+      }\n+    }\n+  }\n+  \n+  if (verblevel > 0) {\n+    printf(\"[pthread wrapper] \");\n+  }\n+  do {\n+    handle = dlopen(sosearchpaths[reallpthrindex], RTLD_LAZY);\n+    if (handle) {\n+      if (verblevel > 1) {\n+        printf(\"[Notice: Using %s] \", sosearchpaths[reallpthrindex]);\n+      }\n+      break;\n+    }\n+    if (sosearchpaths[reallpthrindex] != NULL) {\n+      reallpthrindex++;\n+    }\n+  } while (sosearchpaths[reallpthrindex] != NULL);\n+  if (!handle) {\n+    printf(\"%s\\n\", dlerror());\n+    return -1;\n+  }\n+  dlerror();    /* Clear any existing error */\n+  *(void **) (&rptc) = dlsym(handle, \"pthread_create\");\n+  if ((error = dlerror()) != NULL)  {\n+    printf(\"%s\\n\", error);\n+    return -2;\n+  }\n+  ret = (*rptc)(thread, attr, start_routine, arg);\n+  if (ret == 0) {  /* Successful thread creation. Pin the bastard. */\n+    unsigned long * pid = (unsigned long *)thread;\n+    if ((pinningskipmask & (1UL << npinned)) != 0) {\n+      if (verblevel > 0) {\n+        printf(\"threadid 0x%lx -> SKIP!\\n\", *pid);\n+      }\n+    } else {\n+      cpu_set_t mymask;\n+      int usecpu;\n+      if (useexplicitcpus) {\n+        usecpu = strtoul(curcpustr, &curcpustr, 10);\n+        if ((curcpustr == NULL) || (*curcpustr == '\\0')) {\n+          curcpustr = cpustring;\n+        } else {\n+          curcpustr++;\n+          if ((curcpustr == NULL) || (*curcpustr == '\\0')) {\n+            curcpustr = cpustring;\n+          }\n+        }\n+      } else {\n+        usecpu = ((lastpin + 1) % CPU_SETSIZE);\n+        while ((usecpu != lastpin) && (!CPU_ISSET(usecpu, &mask))) {\n+          usecpu = ((usecpu + 1) % CPU_SETSIZE);\n+        }\n+      }\n+      lastpin = usecpu;\n+      CPU_ZERO(&mymask);\n+      CPU_SET(usecpu, &mymask);\n+      if (verblevel > 0) {\n+        printf(\"threadid 0x%lx -> core %d - \", *pid, usecpu);\n+      }\n+      if (pthread_setaffinity_np(*pid, sizeof(mymask), &mymask)) {\n+        perror(\"pthread_setaffinity_np failed\");\n+      } else {\n+        if (verblevel > 0) {\n+          printf(\"OK\\n\");\n         }\n+      }\n     }\n-\n-    fflush(stdout);\n-    ncalled++;\n-    dlclose(handle);\n-\n-    return ret;\n+  }\n+  npinned++;\n+  dlclose(handle);\n+  return ret;\n }\n \n"
    },
    "skipped": [],
    "total_files": 8518
}