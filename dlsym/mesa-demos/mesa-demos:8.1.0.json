{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/tools/trace/gltrace.py": "#!/usr/bin/env python\n\n# Copyright (C) 2006  Thomas Sondergaard\n# All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# on the rights to use, copy, modify, merge, publish, distribute, sub\n# license, and/or sell copies of the Software, and to permit persons to whom\n# the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice (including the next\n# paragraph) shall be included in all copies or substantial portions of the\n# Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL\n# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n#\n# Authors:\n#    Thomas Sondergaard <ts@medical-insight.com>\n\nimport gl_XML, glX_XML, glX_proto_common, license\nimport sys, getopt, copy, string\n\ndef create_argument_string(parameters):\n\t\"\"\"Create a parameter string from a list of gl_parameters.\"\"\"\n\n\tlist = []\n\tfor p in parameters:\n\t\tif not p.is_padding:\n\t\t\tlist.append( p.name )\n\t#if len(list) == 0: list = [\"void\"]\n\n\treturn string.join(list, \", \")\n\ndef create_logfunc_string(func, name):\n\t\"\"\"Create a parameter string from a list of gl_parameters.\"\"\"\n\n\tlist = []\n\tlist.append('\"gl' + name + '(\"')\n\tsep = None\n\tfor p in func.parameters:\n\t\tif not p.is_padding:\n\t\t\tif (sep):\n\t\t\t\tlist.append(sep)\n\t\t\tlist.append( p.name )\n\t\t\tsep = '\", \"'\n\tlist.append('\");\"')\n\t#if len(list) == 0: list = [\"void\"]\n\n\treturn \"if (config.logCalls) GLTRACE_LOG(\" + string.join(list, \" << \")+\");\";\n\nclass PrintGltrace(glX_proto_common.glx_print_proto): #(gl_XML.gl_print_base):\n\tdef __init__(self):\n\t\tgl_XML.gl_print_base.__init__(self)\n\n\t\tself.name = \"gltrace.py\"\n\t\tself.license = license.bsd_license_template % ( \\\n\"\"\"Copyright 1998-1999 Precision Insight, Inc., Cedar Park, Texas.\n(C) Copyright IBM Corporation 2004\"\"\", \"PRECISION INSIGHT, IBM\")\n\t\t#self.header_tag = \"_INDIRECT_H_\"\n\n\t\tself.last_category = \"\"\n\t\treturn\n\n\n\tdef printRealHeader(self):\n\t\tprint \"\"\"/**\n * \\\\file\n * gl and glX wrappers for tracing\n *\n * \\\\author Thomas Sondergaard <ts@medical-insight.com>\n */\n\"\"\"\n\t\t#self.printVisibility( \"HIDDEN\", \"hidden\" )\n\t\t#self.printFastcall()\n\t\t#self.printNoinline()\n\n\t\tprint \"\"\"\n#include <GL/gl.h>\n#include <GL/glx.h>\n#include <dlfcn.h>\n#include \"gltrace_support.h\"\n\nusing namespace gltrace;\n\nstatic GLenum real_glGetError() {\n  static GLenum (*real_func)(void) = 0;\n  if (!real_func) real_func = (GLenum (*)(void)) dlsym(RTLD_NEXT, \"glGetError\");\n  return real_func();\n}\n\nbool betweenGLBeginEnd = false;\n\nextern \"C\" {\n\n\n__GLXextFuncPtr real_glXGetProcAddressARB(const GLubyte *func_name) {\n  static __GLXextFuncPtr (*real_func)(const GLubyte *func_name) = 0;\n  if (!real_func) real_func = (__GLXextFuncPtr (*)(const GLubyte *func_name)) dlsym(RTLD_NEXT, \"glXGetProcAddressARB\");\n\n  return real_func(func_name);\n}\n\n__GLXextFuncPtr glXGetProcAddressARB(const GLubyte *func_name_ubyte) {\n  std::string func_name =\n    std::string(\"gltrace_\")+reinterpret_cast<const char*>(func_name_ubyte);\n  \n  __GLXextFuncPtr f = (__GLXextFuncPtr) dlsym(RTLD_DEFAULT, func_name.c_str());\n  if (!f) {\n    GLTRACE_LOG(\"warning: Could not resolve '\" << func_name << \"' - function will not be intercepted\");\n    return real_glXGetProcAddressARB(func_name_ubyte);\n  }\n  return f;\n}\n\n\"\"\"\n\n\tdef printRealFooter(self):\n\t\tprint \"} // Extern \\\"C\\\"\"\n\n\tdef printBody(self, api):\n\t\tfor func in api.functionIterateGlx():\n\t\t\tfor func_name in func.entry_points:\n\t\t\t\tfunctionPrefix = \"\"\n\t\t\t\tuse_dlsym = True\n\t\t\t\tif (api.get_category_for_name(func.name)[1] != None):\n\t\t\t\t\tfunctionPrefix = \"gltrace_\"\n\t\t\t\t\tuse_dlsym = False\n\t\t\t\t\n\t\t\t\tprint '%s %sgl%s(%s) {' % (func.return_type, functionPrefix, func_name, func.get_parameter_string())\n\t\t\t\tif (use_dlsym):\n\t\t\t\t\tprint '  static %s (*real_func)(%s) = 0;' % (func.return_type, func.get_parameter_string())\n\t\t\t\t\tprint '  if (!real_func) real_func = (%s (*)(%s)) dlsym(RTLD_NEXT, \"gl%s\");' % (func.return_type, func.get_parameter_string(), func_name)\n\t\t\t\telse: # use glXGetProcAddressArb\n\t\t\t\t\tprint '  static %s (*real_func)(%s) = 0;' % (func.return_type, func.get_parameter_string())\n\t\t\t\t\tprint '  if (!real_func) real_func = (%s (*)(%s)) real_glXGetProcAddressARB((GLubyte *)\"gl%s\");' % (func.return_type, func.get_parameter_string(), func_name)\n\t\t\t\tprint '  ' + create_logfunc_string(func, func_name)\n\t\t\t\tif (func.return_type == \"void\"):\n\t\t\t\t\tprint '  real_func(%s);' % (create_argument_string(func.parameters))\n\t\t\t\telse:\n\t\t\t\t\tprint '  %s retval = real_func(%s);' % (func.return_type, create_argument_string(func.parameters))\n\t\t\t\tif (func.name == \"Begin\"):\n\t\t\t\t\tprint '  betweenGLBeginEnd = true;'\n\t\t\t\telif (func.name == \"End\"):\n\t\t\t\t\tprint '  betweenGLBeginEnd = false;'\n\t\t\t\tprint '  if (!betweenGLBeginEnd && config.checkErrors) {'\n\t\t\t\tprint '    GLenum res;'\n\t\t\t\tprint '    while ((res = real_glGetError ()) != GL_NO_ERROR) '\n\t\t\t\tprint '      GLTRACE_LOG(\"OpenGL Error (\" << res << \"): <\" << gluErrorString(res) << \"> at \" << gltrace::getStackTrace());'\n\t\t\t\tprint '  }'\n\t\t\t\tif (func.return_type != \"void\"):\n\t\t\t\t\tprint \"  return retval;\"\n\t\t\t\tprint '}'\n\n\ndef show_usage():\n\tprint \"Usage: %s [-f input_file_name] [-m output_mode] [-d]\" % sys.argv[0]\n\tprint \"    -m output_mode   Output mode can be one of 'proto', 'init_c' or 'init_h'.\"\n\tprint \"    -d               Enable extra debug information in the generated code.\"\n\tsys.exit(1)\n\n\nif __name__ == '__main__':\n\tfile_name = \"gl_API.xml\"\n\n\ttry:\n\t\t(args, trail) = getopt.getopt(sys.argv[1:], \"f:d\")\n\texcept Exception,e:\n\t\tshow_usage()\n\n\tdebug = 0\n\tfor (arg,val) in args:\n\t\tif arg == \"-f\":\n\t\t\tfile_name = val\n\t\telif arg == \"-d\":\n\t\t\tdebug = 1\n\n\tprinter = PrintGltrace()\n\n\tprinter.debug = debug\n\tapi = gl_XML.parse_GL_API( file_name, glX_XML.glx_item_factory() )\n\n\tprinter.Print( api )\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/redbook/leeds.bin",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_north.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_up.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_east.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_down.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_west.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/objviewer/alpine_south.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/tree3.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/s128.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/tree2.rgba",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/arch.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/girl2.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/terrain.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/reflect.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/girl.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/bw.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/wrs_logo.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/data/tile.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-mesa-demos-8.1.0-xh66dm7ktdux36phv5g5joca47ypccvl/spack-src/src/wgl/rtotex/decal.bmp"
    ],
    "total_files": 1005
}