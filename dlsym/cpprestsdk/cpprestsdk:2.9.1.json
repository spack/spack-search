{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/tests/common/TestRunner/test_module_loader.cpp": "/***\n* Copyright (C) Microsoft. All rights reserved.\n* Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.\n*\n* =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n*/\n#ifdef WIN32\n#include <Windows.h>\n#endif\n\n#include \"test_module_loader.h\"\n#include <iostream>\n\n#ifdef WIN32\n\n// Windows module\nclass windows_module : public test_module\n{\npublic:\n    windows_module(const std::string &dllName) : test_module(dllName), m_hModule(nullptr) {}\n\n    GetTestsFunc get_test_list()\n    {\n        return (GetTestsFunc)GetProcAddress(m_hModule, \"GetTestList\");\n    }\n\nprotected:\n\n    virtual unsigned long load_impl()\n    {\n        // Make sure ends in .dll\n        if(*(m_dllName.end() - 1) != 'l' \n            || *(m_dllName.end() - 2) != 'l' \n            || *(m_dllName.end() - 3) != 'd' \n            || *(m_dllName.end() - 4) != '.')\n        {\n            return (unsigned long)-1;\n        }\n        m_hModule = LoadLibraryA(m_dllName.c_str());\n        if(m_hModule == nullptr)\n        {\n            return GetLastError();\n        }\n        return 0;\n    }\n\n    virtual unsigned long unload_impl()\n    {\n        if(!FreeLibrary(m_hModule))\n        {\n            return GetLastError();\n        }\n        return 0;\n    }\n\n    HMODULE m_hModule;\n\nprivate:\n\twindows_module(const windows_module &);\n\twindows_module & operator=(const windows_module &);\n\n};\n\n#else\n#include \"dlfcn.h\"\n#include <boost/filesystem.hpp>\n\nclass linux_module : public test_module\n{\npublic:\n    linux_module(const std::string &soName) : test_module(soName), m_handle(nullptr) {}\n\n    GetTestsFunc get_test_list()\n    {\n        auto ptr = dlsym(m_handle, \"GetTestList\");\n        if (ptr == nullptr)\n        {\n            std::cerr << \"couldn't find GetTestList\" <<\n#ifdef __APPLE__\n                \" \" << dlerror() <<\n#endif\n                std::endl;\n        }\n        return (GetTestsFunc)ptr;\n    }\n\nprotected:\n\n    virtual unsigned long load_impl()\n    {\n#ifdef __APPLE__\n        auto exe_directory = getcwd(nullptr, 0);\n        auto path = std::string(exe_directory) + \"/\" + m_dllName;\n        free(exe_directory);\n#else\n        auto path = boost::filesystem::initial_path().string() + \"/\" + m_dllName;\n#endif\n\n        m_handle = dlopen(path.c_str(), RTLD_LAZY|RTLD_GLOBAL);\n        if (m_handle == nullptr)\n        {\n            std::cerr << std::string(dlerror()) << std::endl;\n            return -1;\n        }\n        return 0;\n    }\n\n    virtual unsigned long unload_impl()\n    {\n        if (dlclose(m_handle) != 0)\n        {\n            std::cerr << std::string(dlerror()) << std::endl;\n            return -1;\n        }\n        return 0;\n    }\n\n    void* m_handle;\n};\n#endif\n\ntest_module_loader::test_module_loader()\n{\n}\n\ntest_module_loader::~test_module_loader()\n{\n    for(auto iter = m_modules.begin(); iter != m_modules.end(); ++iter)\n    {\n        iter->second->unload();\n        delete iter->second;\n    }\n}\n\nunsigned long test_module_loader::load(const std::string &dllName)\n{\n    // Check if the module is already loaded.\n    if(m_modules.find(dllName) != m_modules.end())\n    {\n        return 0;\n    }\n\n    test_module *pModule;\n#ifdef WIN32\n    pModule = new windows_module(dllName);\n#else\n    pModule = new linux_module(dllName);\n#endif\n\n    // Load dll.\n    const unsigned long error_code = pModule->load();\n    if(error_code != 0)\n    {\n        delete pModule;\n        return error_code;\n    }\n    else\n    {\n        m_modules[dllName] = pModule;\n    }\n    return 0;\n}\n\nUnitTest::TestList g_list;\n\nUnitTest::TestList& test_module_loader::get_test_list(const std::string &dllName)\n{\n    GetTestsFunc getTestsFunc = m_modules[dllName]->get_test_list();\n\n    // If there is no GetTestList function then it must be a dll without any tests.\n    // Simply return an empty TestList.\n    if(getTestsFunc == nullptr)\n    {\n        return g_list;\n    }\n\n    return getTestsFunc();\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/ThirdPartyNotices.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/src/utilities/Resource.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/tests/functional/misc/atl_headers/header_test.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/FacebookDemo/FacebookDemo_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/FacebookDemo/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/FacebookDemo/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/FacebookDemo/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/FacebookDemo/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/BlackJack_UIClient_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Cards.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/OAuth2Live/OAuth2Live_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/OAuth2Live/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/OAuth2Live/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/OAuth2Live/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/OAuth2Live/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/WindowsLiveAuth/WindowsLiveAuth_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/WindowsLiveAuth/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/WindowsLiveAuth/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/WindowsLiveAuth/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/WindowsLiveAuth/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/CasaLens/image/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/CasaLens/image/bing-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.9.1-amea7t6qtacfdi4mfkq55qw56sxfobqh/spack-src/Release/samples/CasaLens/image/wall.jpg"
    ],
    "total_files": 900
}