{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/inputGen/main.cpp": "/* -- LICENSE BEGIN --\n *\n * Copyright (c) 2015-2020, Lawrence Livermore National Security, LLC.\n *\n * Produced at the Lawrence Livermore National Laboratory\n *\n * Written by\n *   Michael Bentley (mikebentley15@gmail.com),\n *   Geof Sawaya (fredricflinstone@gmail.com),\n *   and Ian Briggs (ian.briggs@utah.edu)\n * under the direction of\n *   Ganesh Gopalakrishnan\n *   and Dong H. Ahn.\n *\n * LLNL-CODE-743137\n *\n * All rights reserved.\n *\n * This file is part of FLiT. For details, see\n *   https://pruners.github.io/flit\n * Please also read\n *   https://github.com/PRUNERS/FLiT/blob/master/LICENSE\n *\n * Redistribution and use in source and binary forms, with or\n * without modification, are permitted provided that the following\n * conditions are met:\n *\n * - Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the disclaimer below.\n *\n * - Redistributions in binary form must reproduce the above\n *   copyright notice, this list of conditions and the disclaimer\n *   (as noted below) in the documentation and/or other materials\n *   provided with the distribution.\n *\n * - Neither the name of the LLNS/LLNL nor the names of its\n *   contributors may be used to endorse or promote products derived\n *   from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL\n * SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Additional BSD Notice\n *\n * 1. This notice is required to be provided under our contract\n *    with the U.S. Department of Energy (DOE). This work was\n *    produced at Lawrence Livermore National Laboratory under\n *    Contract No. DE-AC52-07NA27344 with the DOE.\n *\n * 2. Neither the United States Government nor Lawrence Livermore\n *    National Security, LLC nor any of their employees, makes any\n *    warranty, express or implied, or assumes any liability or\n *    responsibility for the accuracy, completeness, or usefulness of\n *    any information, apparatus, product, or process disclosed, or\n *    represents that its use would not infringe privately-owned\n *    rights.\n *\n * 3. Also, reference herein to any specific commercial products,\n *    process, or services by trade name, trademark, manufacturer or\n *    otherwise does not necessarily constitute or imply its\n *    endorsement, recommendation, or favoring by the United States\n *    Government or Lawrence Livermore National Security, LLC. The\n *    views and opinions of authors expressed herein do not\n *    necessarily state or reflect those of the United States\n *    Government or Lawrence Livermore National Security, LLC, and\n *    shall not be used for advertising or product endorsement\n *    purposes.\n *\n * -- LICENSE END --\n */\n\n#include \"helper.h\"\n#include \"groundtruth.h\"\n\n#include <flit/flit.h>\n\n#include <fstream>\n#include <iostream>\n#include <list>\n#include <memory>\n#include <random>\n#include <tuple>\n#include <type_traits>\n#include <typeinfo>\n\n#include <cmath>\n\n#include <dlfcn.h>    // For dlopen(), dlsym() and dlclose()\n\n//TESTRUN_DEFINE(distribution, 3, RandomFloatType::Positive)\n\ntemplate<typename T> const char* testbedSymbolName();\ntemplate<> const char* testbedSymbolName<float>() { return \"runTestbed_float\"; }\ntemplate<> const char* testbedSymbolName<double>() { return \"runTestbed_double\"; }\ntemplate<> const char* testbedSymbolName<long double>() { return \"runTestbed_longdouble\"; }\n\ntemplate<typename T> long double\nrunTestbed(const std::string &testName, const std::vector<T> &inputs) {\n  const char* lib = \"./testbed.so\";\n  const char* symb = testbedSymbolName<T>();\n\n  using TestBedFnc = long double(const std::string&, const std::vector<T>&);\n  auto handle = dlopen(lib,\n      RTLD_NOW | RTLD_LOCAL | RTLD_DEEPBIND);\n  auto testbed = reinterpret_cast<TestBedFnc*>(dlsym(handle, symb));\n  if (testbed == nullptr) {\n    std::cerr << \"Error: could not find symbol \" << symb << \" from \" << lib << std::endl;\n    std::exit(1);\n  }\n  auto retval = testbed(testName, inputs);\n\n  dlclose(handle);\n\n  return retval;\n}\n\n\ntemplate<typename T>\nvoid runTest(std::string testName, uint divergentCount, uint maxTries,\n             RandType rType = RandType::UniformFP) {\n  const std::function<T()> randGen = [rType]() {\n    return generateRandomFloat<T>(RandomFloatType::Positive, rType);\n  };\n\n  std::cout << testName << \"(\" << typeid(T).name() << \"): \"\n            << \"looking for \" << divergentCount << \" divergences, \"\n            << \"max_tries = \" << maxTries\n            << std::endl;\n\n  uint mismatchIdx;\n  std::vector<std::vector<T>> mismatches;\n  for (mismatchIdx = 0;\n       mismatches.size() < divergentCount && mismatchIdx < maxTries;\n       mismatchIdx++)\n  {\n    auto truthRun = runGroundtruth(testName, randGen);\n    auto inputs = truthRun.first;\n    auto truthval = truthRun.second;\n    auto testval = runTestbed(testName, inputs);\n    if (truthval != testval && !(std::isnan(truthval) && std::isnan(testval))) {\n      mismatches.push_back(inputs);\n\n      std::cout << testName << \":   Divergent outputs #\" << mismatches.size() << std::endl;\n      printTestVal(testName, truthval);\n      printTestVal(testName, testval);\n      std::cout << testName << \":   Divergent inputs #\" << mismatches.size() << std::endl;\n      for (auto& val : inputs) {\n        printTestVal(testName, val);\n      }\n    }\n  }\n  std::cout << testName << \"(\" << typeid(T).name() << \"): \"\n            << mismatches.size() << \" Diverging inputs found \"\n            << \"after \" << mismatchIdx << \" iterations:\"\n            << std::endl\n            << std::endl;\n}\n\nvoid runAllPrecisions(const std::string testName, uint divergentCount,\n                      uint maxTries, RandType rType = RandType::UniformFP) {\n  runTest<float>(testName, divergentCount, maxTries, rType);\n  runTest<double>(testName, divergentCount, maxTries, rType);\n  runTest<long double>(testName, divergentCount, maxTries, rType);\n}\n\nstd::vector<std::string> getTestNames() {\n  std::vector<std::string> retval;\n  for (auto entry : flit::getTests()) {\n    retval.push_back(entry.first);\n  }\n  return retval;\n}\n\n/// An RAII class for replacing a stream buffer and restoring in destruction\nclass BufSwap {\npublic:\n  BufSwap(std::ostream& stream, std::streambuf* newbuf)\n    : _stream(stream), _oldbuf(stream.rdbuf()), _newbuf(newbuf)\n  { _stream.rdbuf(_newbuf); }\n\n  ~BufSwap() { _stream.rdbuf(_oldbuf); }\n\nprivate:\n  std::ostream& _stream;\n  std::streambuf* _oldbuf;\n  std::streambuf* _newbuf;\n};\n\n/// All options from command-line parsing are stored here\nstruct ProgramArguments {\n  enum class PrecisionType {\n    Float,\n    Double,\n    LongDouble,\n    All,\n  };\n  PrecisionType type = PrecisionType::Float;\n  RandType randType = RandType::UniformFP;\n  uint maxTries = 1000;\n  bool outputToFile = false;\n  std::string outFilename;\n  uint divergentCount = 10;\n  std::vector<std::string> tests;\n};\nProgramArguments parseArgs(int argCount, char* argList[]);\n\nint main(int argCount, char* argList[]) {\n  auto parsedArgs = parseArgs(argCount, argList);\n\n  auto runner = runAllPrecisions;\n  switch(parsedArgs.type) {\n    case ProgramArguments::PrecisionType::Float:\n      runner = runTest<float>;\n      break;\n    case ProgramArguments::PrecisionType::Double:\n      runner = runTest<double>;\n      break;\n    case ProgramArguments::PrecisionType::LongDouble:\n      runner = runTest<long double>;\n      break;\n    case ProgramArguments::PrecisionType::All:\n      runner = runAllPrecisions;\n      break;\n  }\n\n  // Set the console output to a file if specified\n  std::unique_ptr<std::ofstream> out(nullptr);\n  std::unique_ptr<BufSwap> swapper(nullptr);\n  if (parsedArgs.outputToFile) {\n    out.reset(new std::ofstream(parsedArgs.outFilename));\n    swapper.reset(new BufSwap(std::cout, out->rdbuf()));\n  }\n\n  for (auto test : parsedArgs.tests) {\n    runner(test, parsedArgs.divergentCount, parsedArgs.maxTries,\n           parsedArgs.randType);\n  }\n\n  return 0;\n}\n\nProgramArguments parseArgs(int argCount, char* argList[]) {\n  const char* USAGE_INFO = \"\\n\"\n    \"Usage:\\n\"\n    \"  inputGen [-h]\\n\"\n    \"  inputGen --list-tests\\n\"\n    \"  inputGen [-f|-d|-e|-a] [-m MAX_TRIES] [-i NUM_DIVERGENT_INPUTS] [-o FILENAME]\\n\"\n    \"           [-r RAND_TYPE] (--test TEST_NAME ... | --all-tests)\\n\"\n    \"\\n\"\n    \"Description:\\n\"\n    \"  Runs the particular tests under the optimization given in compilation.  The\\n\"\n    \"  test input is randomly generated floating point numbers.  It runs until the\\n\"\n    \"  number of desired divergences are discovered between the unoptimized code\\n\"\n    \"  and the optimized code.\\n\"\n    \"\\n\"\n    \"Required Arguments:\\n\"\n    \"  One of the following must be used since we need at least one test to run.\\n\"\n    \"  The --test option can be specified more than once to specify more than one\\n\"\n    \"  test.\\n\"\n    \"\\n\"\n    \"  --test TEST_NAME\\n\"\n    \"      The test to run.  For a list of choices, see --list-tests.\\n\"\n    \"\\n\"\n    \"  --all-tests\\n\"\n    \"      Run all tests that are returned from --list-tests.\\n\"\n    \"\\n\"\n    \"Optional Arguments:\\n\"\n    \"\\n\"\n    \"  -f, --float\\n\"\n    \"      Run each test only with float precision.  This is the default.\\n\"\n    \"\\n\"\n    \"  -d, --double\\n\"\n    \"      Run each test only with double precision.\\n\"\n    \"\\n\"\n    \"  -e, --long-double\\n\"\n    \"      Run each test only with extended precision, also called long double.\\n\"\n    \"\\n\"\n    \"  -a, --all-types\\n\"\n    \"      Run each test with all precisions.\\n\"\n    \"\\n\"\n    \"  -i NUM_DIVERGENT_INPUTS, --divergent-input-count NUM_DIVERGEN_INPUTS\\n\"\n    \"      How many divergent inputs to attempt to identify and report.  The\\n\"\n    \"      default value is 10.\\n\"\n    \"\\n\"\n    \"  -m MAX_TRIES, --max-tries MAX_TRIES\\n\"\n    \"      How many tries before giving up on search for the specified numer of\\n\"\n    \"      divergent inputs.  The default value is 1,000.\\n\"\n    \"\\n\"\n    \"  -o FILENAME, --output FILENAME\\n\"\n    \"      Where to output the report.  By default it outputs to stdout.\\n\"\n    \"\\n\"\n    \"  -r RAND_TYPE, --rand-type RAND_TYPE\\n\"\n    \"      The type of random number distribution to use.  Choices are:\\n\"\n    \"      - fp: Uniform over the floating-point number space\\n\"\n    \"      - real: Uniform over the real number line, then projected to\\n\"\n    \"        floating-point space\\n\"\n    \"      The default is \\\"fp\\\".\\n\"\n    \"\\n\"\n    ;\n\n  std::vector<std::string> args;\n  for (decltype(argCount) i = 1; i < argCount; i++) {\n    args.push_back(argList[i]);\n  }\n\n  ProgramArguments parsedArgs;\n\n  auto is_in = [](std::vector<std::string> vec, std::string val) {\n    return std::any_of(vec.begin(), vec.end(),\n        [&val](std::string it) { return it == val; });\n  };\n\n  // Look for help\n  if (is_in(args, \"-h\") || is_in(args, \"--help\")) {\n    std::cout << USAGE_INFO;\n    std::exit(0);\n  }\n\n  // Look for --list-tests\n  if (is_in(args, \"--list-tests\")) {\n    for (auto test : getTestNames()) {\n      std::cout << test << std::endl;\n    }\n    std::exit(0);\n  }\n\n  // Handle any other argument\n  for (decltype(args.size()) i = 0; i < args.size(); i++) {\n    auto& arg = args[i];\n    if (arg == \"-f\" || arg == \"--float\") {\n      parsedArgs.type = ProgramArguments::PrecisionType::Float;\n    } else if (arg == \"-d\" || arg == \"--double\") {\n      parsedArgs.type = ProgramArguments::PrecisionType::Double;\n    } else if (arg == \"-e\" || arg == \"--long-double\") {\n      parsedArgs.type = ProgramArguments::PrecisionType::LongDouble;\n    } else if (arg == \"-a\" || arg == \"--all-types\") {\n      parsedArgs.type = ProgramArguments::PrecisionType::All;\n    } else if (arg == \"-m\" || arg == \"--max-tries\") {\n      auto& nextArg = args[++i];\n      parsedArgs.maxTries = static_cast<uint>(std::stoul(nextArg));\n    } else if (arg == \"-o\" || arg == \"--output\") {\n      auto& nextArg = args[++i];\n      parsedArgs.outputToFile = true;\n      parsedArgs.outFilename = nextArg;\n    } else if (arg == \"-i\" || arg == \"--divergent-input-count\") {\n      auto& nextArg = args[++i];\n      parsedArgs.divergentCount = static_cast<uint>(std::stoul(nextArg));\n    } else if (arg == \"--test\") {\n      auto& nextArg = args[++i];\n      parsedArgs.tests.push_back(nextArg);\n    } else if (arg == \"--all-tests\") {\n      auto allTests = getTestNames();\n      parsedArgs.tests.insert(parsedArgs.tests.end(), allTests.begin(), allTests.end());\n    } else if (arg == \"-r\" || arg == \"--rand-type\") {\n      auto& nextArg = args[++i];\n      if (nextArg == \"fp\") {\n        parsedArgs.randType = RandType::UniformFP;\n      } else if (nextArg == \"real\") {\n        parsedArgs.randType = RandType::UniformReals;\n      } else {\n        std::cerr << \"Error: unrecognized rand-type: \" << nextArg << std::endl;\n        std::cerr << \"  Use the --help option for more information\" << std::endl;\n        exit(1);\n      }\n    } else {\n      std::cerr << \"Error: unrecognized argument: \" << arg << std::endl;\n      std::cerr << \"  Use the --help option for more information\" << std::endl;\n      exit(1);\n    }\n  }\n\n  if (parsedArgs.tests.size() == 0) {\n    std::cerr << \"Error: you need to specify at least one test\" << std::endl;\n    std::cerr << \"  Use the --help option for more information\" << std::endl;\n    std::exit(1);\n  }\n\n  return parsedArgs;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/images/flit-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/images/bisect-search.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/images/flit.png",
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/inputGen/flitHelpers.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/inputGen/InfoStream.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-flit-2.1.0-zhyugrxmdibno33lo3dravbzarxmcwib/spack-src/inputGen/TestBase.cpp"
    ],
    "total_files": 256
}