{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/test/testunusedvar.cpp": "/*\n * Cppcheck - A tool for static C/C++ code analysis\n * Copyright (C) 2007-2015 Daniel Marjam\u00e4ki and Cppcheck team.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\n\n// Check for unused variables..\n\n#include \"testsuite.h\"\n#include \"tokenize.h\"\n#include \"checkunusedvar.h\"\n\n#include <sstream>\nextern std::ostringstream errout;\n\nclass TestUnusedVar : public TestFixture {\npublic:\n    TestUnusedVar() : TestFixture(\"TestUnusedVar\") {\n    }\n\nprivate:\n    void run() {\n        TEST_CASE(emptyclass);  // #5355 - False positive: Variable is not assigned a value.\n        TEST_CASE(emptystruct);  // #5355 - False positive: Variable is not assigned a value.\n\n        TEST_CASE(structmember1);\n        TEST_CASE(structmember2);\n        TEST_CASE(structmember3);\n        TEST_CASE(structmember4);\n        TEST_CASE(structmember5);\n        TEST_CASE(structmember6);\n        TEST_CASE(structmember7);\n        TEST_CASE(structmember8);\n        TEST_CASE(structmember9);  // #2017 - struct is inherited\n        TEST_CASE(structmember_extern); // No false positives for extern structs\n        TEST_CASE(structmember10);\n        TEST_CASE(structmember11); // #4168 - initialization with {} / passed by address to unknown function\n\n        TEST_CASE(localvar1);\n        TEST_CASE(localvar2);\n        TEST_CASE(localvar3);\n        TEST_CASE(localvar4);\n        TEST_CASE(localvar5);\n        TEST_CASE(localvar6);\n        TEST_CASE(localvar7);\n        TEST_CASE(localvar8);\n        TEST_CASE(localvar9); // ticket #1605\n        TEST_CASE(localvar10);\n        TEST_CASE(localvar11);\n        TEST_CASE(localvar12);\n        TEST_CASE(localvar13); // ticket #1640\n        TEST_CASE(localvar14); // ticket #5\n        TEST_CASE(localvar15);\n        TEST_CASE(localvar16); // ticket #1709\n        TEST_CASE(localvar17); // ticket #1720\n        TEST_CASE(localvar18); // ticket #1723\n        TEST_CASE(localvar19); // ticket #1776\n        TEST_CASE(localvar20); // ticket #1799\n        TEST_CASE(localvar21); // ticket #1807\n        TEST_CASE(localvar22); // ticket #1811\n        TEST_CASE(localvar23); // ticket #1808\n        TEST_CASE(localvar24); // ticket #1803\n        TEST_CASE(localvar25); // ticket #1729\n        TEST_CASE(localvar26); // ticket #1894\n        TEST_CASE(localvar27); // ticket #2160\n        TEST_CASE(localvar28); // ticket #2205\n        TEST_CASE(localvar29); // ticket #2206 (array initialization)\n        TEST_CASE(localvar30);\n        TEST_CASE(localvar31); // ticket #2286\n        TEST_CASE(localvar32); // ticket #2330\n        TEST_CASE(localvar33); // ticket #2346\n        TEST_CASE(localvar34); // ticket #2368\n        TEST_CASE(localvar35); // ticket #2535\n        TEST_CASE(localvar36); // ticket #2805\n        TEST_CASE(localvar37); // ticket #3078\n        TEST_CASE(localvar38);\n        TEST_CASE(localvar39); // ticket #3454\n        TEST_CASE(localvar40); // ticket #3473\n        TEST_CASE(localvar41); // ticket #3603\n        TEST_CASE(localvar42); // ticket #3742\n        TEST_CASE(localvar43); // ticket #3602\n        TEST_CASE(localvar44); // ticket #4020\n        TEST_CASE(localvar45); // ticket #4899\n        TEST_CASE(localvar46); // ticket #5491 (C++11 style initialization)\n        TEST_CASE(localvaralias1);\n        TEST_CASE(localvaralias2); // ticket #1637\n        TEST_CASE(localvaralias3); // ticket #1639\n        TEST_CASE(localvaralias4); // ticket #1643\n        TEST_CASE(localvaralias5); // ticket #1647\n        TEST_CASE(localvaralias6); // ticket #1729\n        TEST_CASE(localvaralias7); // ticket #1732\n        TEST_CASE(localvaralias8);\n        TEST_CASE(localvaralias9); // ticket #1996\n        TEST_CASE(localvaralias10); // ticket #2004\n        TEST_CASE(localvaralias11); // ticket #4423 - iterator\n        TEST_CASE(localvaralias12); // ticket #4394\n        TEST_CASE(localvaralias13); // ticket #4487\n        TEST_CASE(localvarasm);\n        TEST_CASE(localvarstatic);\n        TEST_CASE(localvarextern);\n        TEST_CASE(localvardynamic1);\n        TEST_CASE(localvardynamic2); // ticket #2904\n        TEST_CASE(localvardynamic3); // ticket #3467\n        TEST_CASE(localvararray1);  // ticket #2780\n        TEST_CASE(localvararray2);  // ticket #3438\n        TEST_CASE(localvararray3);  // ticket #3980\n        TEST_CASE(localvarstring1);\n        TEST_CASE(localvarstring2); // ticket #2929\n        TEST_CASE(localvarconst1);\n        TEST_CASE(localvarconst2);\n\n        TEST_CASE(localvarthrow); // ticket #3687\n\n        TEST_CASE(localVarStd);\n\n        // Don't give false positives for variables in structs/unions\n        TEST_CASE(localvarStruct1);\n        TEST_CASE(localvarStruct2);\n        TEST_CASE(localvarStruct3);\n        TEST_CASE(localvarStruct5);\n        TEST_CASE(localvarStruct6);\n        TEST_CASE(localvarStructArray);\n\n        TEST_CASE(localvarOp);          // Usage with arithmetic operators\n        TEST_CASE(localvarInvert);      // Usage with inverted variable\n        TEST_CASE(localvarIf);          // Usage in if\n        TEST_CASE(localvarIfElse);      // return tmp1 ? tmp2 : tmp3;\n        TEST_CASE(localvarOpAssign);    // a |= b;\n        TEST_CASE(localvarFor);         // for ( ; var; )\n        TEST_CASE(localvarForEach);     // #4155 - BOOST_FOREACH, hlist_for_each, etc\n        TEST_CASE(localvarShift1);      // 1 >> var\n        TEST_CASE(localvarShift2);      // x = x >> 1\n        TEST_CASE(localvarShift3);      // x << y\n        TEST_CASE(localvarCast);\n        TEST_CASE(localvarClass);\n        TEST_CASE(localvarUnused);\n        TEST_CASE(localvarFunction); // ticket #1799\n        TEST_CASE(localvarIfNOT);    // #3104 - if ( NOT var )\n        TEST_CASE(localvarAnd);      // #3672\n        TEST_CASE(localvarSwitch);   // #3744 - false positive when localvar is used in switch\n        TEST_CASE(localvarNULL);     // #4203 - Setting NULL value is not redundant - it is safe\n        TEST_CASE(localvarUnusedGoto);    // #4447, #4558 goto\n\n        TEST_CASE(localvarCpp11Initialization);\n\n        TEST_CASE(chainedAssignment); // #5466\n\n        TEST_CASE(crash1);\n        TEST_CASE(crash2);\n        TEST_CASE(usingNamespace);     // #4585\n    }\n\n    void checkStructMemberUsage(const char code[]) {\n        // Clear the error buffer..\n        errout.str(\"\");\n\n        Settings settings;\n        settings.addEnabled(\"style\");\n\n        // Tokenize..\n        Tokenizer tokenizer(&settings, this);\n        std::istringstream istr(code);\n        tokenizer.tokenize(istr, \"test.cpp\");\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        checkUnusedVar.checkStructMemberUsage();\n    }\n\n    // #5355 - False positive: Variable is not assigned a value.\n    void emptyclass() {\n        functionVariableUsage(\"class Carla {\\n\"\n                              \"};\\n\"\n                              \"class Fred : Carla {\\n\"\n                              \"};\\n\"\n                              \"void foo() {\\n\"\n                              \"    Fred fred;\\n\"\n                              \"    throw fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    // #5355 - False positive: Variable is not assigned a value.\n    void emptystruct() {\n        functionVariableUsage(\"struct Fred {\\n\"\n                              \"};\\n\"\n                              \"void foo() {\\n\"\n                              \"    Fred fred;\\n\"\n                              \"    throw fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember1() {\n        checkStructMemberUsage(\"struct abc\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) struct or union member 'abc::a' is never used.\\n\"\n                      \"[test.cpp:4]: (style) struct or union member 'abc::b' is never used.\\n\"\n                      \"[test.cpp:5]: (style) struct or union member 'abc::c' is never used.\\n\", errout.str());\n    }\n\n    void structmember2() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    struct ABC abc;\\n\"\n                               \"    int a = abc.a;\\n\"\n                               \"    int b = abc.b;\\n\"\n                               \"    int c = abc.c;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember3() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"static struct ABC abc[] = { {1, 2, 3} };\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    int a = abc[0].a;\\n\"\n                               \"    int b = abc[0].b;\\n\"\n                               \"    int c = abc[0].c;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember4() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    const int a;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ABC abc;\\n\"\n                               \"    if (abc.a == 2);\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember5() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    void reset()\\n\"\n                               \"    {\\n\"\n                               \"        a = 1;\\n\"\n                               \"        b = 2;\\n\"\n                               \"    }\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    struct AB ab;\\n\"\n                               \"    ab.reset();\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember6() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *buf)\\n\"\n                               \"{\\n\"\n                               \"    struct AB *ab = (struct AB *)&buf[10];\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *buf)\\n\"\n                               \"{\\n\"\n                               \"    struct AB *ab = (AB *)&buf[10];\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember7() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(struct AB *ab)\\n\"\n                               \"{\\n\"\n                               \"    ab->a = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(struct AB _shuge *ab)\\n\"\n                               \"{\\n\"\n                               \"    ab->a = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember8() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *ab)\\n\"\n                               \"{\\n\"\n                               \"    ((AB *)ab)->b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember9() {\n        checkStructMemberUsage(\"struct base {\\n\"\n                               \"    int a;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"struct derived : public base {\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember10() {\n        // Fred may have some useful side-effects\n        checkStructMemberUsage(\"struct abc {\\n\"\n                               \"    Fred fred;\\n\"\n                               \"};\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void structmember11() { // #4168\n        checkStructMemberUsage(\"struct abc { int x; };\\n\"\n                               \"struct abc s = {0};\\n\"\n                               \"void f() { do_something(&s); }\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        checkStructMemberUsage(\"struct abc { int x; };\\n\"\n                               \"struct abc s = {0};\\n\"\n                               \"void f() { }\");\n        TODO_ASSERT_EQUALS(\"abc::x is not used\", \"\", errout.str());\n    }\n\n    void structmember_extern() {\n        // extern struct => no false positive\n        checkStructMemberUsage(\"extern struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // global linkage => no false positive\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // static linkage => error message\n        checkStructMemberUsage(\"static struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) struct or union member 'AB::a' is never used.\\n\", errout.str());\n    }\n\n    void functionVariableUsage(const char code[], const char filename[]=\"test.cpp\") {\n        // Clear the error buffer..\n        errout.str(\"\");\n\n        Settings settings;\n        settings.addEnabled(\"style\");\n\n        // Tokenize..\n        Tokenizer tokenizer(&settings, this);\n        std::istringstream istr(code);\n        if (!tokenizer.tokenize(istr, filename))\n            return;\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        checkUnusedVar.checkFunctionVariableUsage();\n    }\n\n    void localvar1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i(0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        // if a is undefined then Cppcheck can't determine if \"int i(a)\" is a\n        // * variable declaration\n        // * function declaration\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int & i = j;\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    const int & i = j;\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int & i(j);\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    const int & i(j);\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * j = 0;\\n\"\n                              \"    int * i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * j = 0;\\n\"\n                              \"    const int * i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i = false;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i;\\n\"\n                              \"    i = fgets();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        // undefined variables are not reported because they may be classes with constructors\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i = 0;\\n\"\n                              \"}\\n\",\n                              \"test.c\");\n        ASSERT_EQUALS(\"[test.c:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = undefined;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S & i = j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S & i = j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined * i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i[10] = { 0 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo(int n)\\n\"\n                              \"{\\n\"\n                              \"    int i[n] = { 0 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char i[10] = \\\"123456789\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i = \\\"123456789\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,a=10,b=20;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a=10,b=20;\\n\"\n                              \"    while(a != 30) {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a=10,b=20;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    } while( a!=30 );\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    for(int i=0; i < 10; i++) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    for(int i=0; i < 10; i++) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"        }\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    do {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo(int j = 0) {\\n\" // #5985 - default function parameters should not affect checking results\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar2() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"bool foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        // undefined variables are not reported because they may be classes with constructors\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\\n\",\n                              \"test.c\");\n        ASSERT_EQUALS(\"[test.c:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"undefined *foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"int *foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"const int *foo()\\n\"\n                              \"{\\n\"\n                              \"    const int * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"struct S *foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"const struct S *foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0], 0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(0, a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(0, a[0], 0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // f() can not write a (not supported yet)\n        functionVariableUsage(\"void f(int i) { }\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is not assigned a value.\\n\",\n                           \"\", errout.str());\n\n        // f() can not write a (not supported yet)\n        functionVariableUsage(\"void f(const int & i) { }\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is not assigned a value.\\n\",\n                           \"\", errout.str());\n\n        // f() writes a\n        functionVariableUsage(\"void f(int & i) { }\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar3() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if ( abc )\\n\"\n                              \"        ;\\n\"\n                              \"    else i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar4() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    f(i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    f(&i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar5() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    b = (char)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar6() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int b[10];\\n\"\n                              \"    for (int i=0;i<10;++i)\\n\"\n                              \"        b[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    int b[10];\\n\"\n                              \"    for (int i=0;i<10;++i)\\n\"\n                              \"        b[i] = ++a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar7() { // ticket 1253\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    i--;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &ii(i);\\n\"\n                              \"    ii--;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &ii=i;\\n\"\n                              \"    ii--;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is not assigned a value.\\n\", errout.str());\n    }\n\n    void localvar8() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i[2];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const int * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct A * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct A * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void foo(int n)\\n\"\n                              \"{\\n\"\n                              \"    int i[n];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"    j = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"double foo()\\n\"\n                              \"{\\n\"\n                              \"    double i = 0.0;\\n\"\n                              \"    const double j = i;\\n\"\n                              \"    return j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    A * i;\\n\"\n                              \"    i->f();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i;\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i = 0;\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i = new char[10];\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i;\\n\"\n                              \"    f(i);\\n\"\n                              \"}\");\n\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    return &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *p = a;\\n\"\n                              \"    for (int i = 0; i < 10; i++)\\n\"\n                              \"        p[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *p = &a[0];\\n\"\n                              \"    for (int i = 0; i < 10; i++)\\n\"\n                              \"        p[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int x;\\n\"\n                              \"    a[0] = 0;\\n\"\n                              \"    x = a[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c;\\n\"\n                              \"    a = b = c = f();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int * foo()\\n\"\n                              \"{\\n\"\n                              \"    return &undefined[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar9() {\n        // ticket #1605\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    for (int i = 0; i < 10; )\\n\"\n                              \"        a[i++] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar10() {\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:7]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x)\\n\"\n                              \"        int i;\\n\"\n                              \"    else\\n\"\n                              \"        int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:7]: (style) Unused variable: i\\n\", errout.str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:7]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i;\\n\"\n                              \"    }\\n\"\n                              \"    i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:9]: (style) Variable 'i' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: i\\n\"\n                      \"[test.cpp:7]: (style) Unused variable: i\\n\", errout.str());\n    }\n\n    void localvar11() {\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    if (x == 1)\\n\"\n                              \"    {\\n\"\n                              \"        a = 123;\\n\"    // redundant assignment\n                              \"        return;\\n\"\n                              \"    }\\n\"\n                              \"    x = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // The variable 'a' is initialized. But the initialized value is\n        // never used. It is only initialized for security reasons.\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    if (x == 1)\\n\"\n                              \"        a = 123;\\n\"\n                              \"    else if (x == 2)\\n\"\n                              \"        a = 456;\\n\"\n                              \"    else\\n\"\n                              \"        return;\\n\"\n                              \"    x = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar12() {\n        // ticket #1574\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c, d, e, f;\\n\"\n                              \"    a = b = c = d = e = f = 0;\\n\"\n                              \"\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'd' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'e' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'f' is assigned a value that is never used.\\n\",\n            errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c = 0;\\n\"\n                              \"    a = b = c;\\n\"\n                              \"\\n\"\n                              \"}\");\n\n        TODO_ASSERT_EQUALS(\n            \"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n            \"[test.cpp:3]: (style) Variable 'c' is assigned a value that is never used.\\n\",\n\n            \"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n            \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\",\n            errout.str());\n    }\n\n    void localvar13() { // ticket #1640\n        functionVariableUsage(\"void foo( OBJECT *obj )\\n\"\n                              \"{\\n\"\n                              \"    int x;\\n\"\n                              \"    x = obj->ySize / 8;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar14() {\n        // ticket #5\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\", errout.str());\n    }\n\n    void localvar15() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    int b[a];\\n\"\n                              \"    b[0] = 0;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    int * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return *b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    const int * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct B * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    struct B * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"const struct B * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    const struct B * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar16() { // ticket #1709\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[5];\\n\"\n                              \"    char *ptr = buf;\\n\"\n                              \"    *(ptr++) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'buf' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[5];\\n\"\n                              \"    char *ptr = buf - 1;\\n\"\n                              \"    *(++ptr) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'buf' is not assigned a value.\\n\", errout.str());\n\n        // #3910\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    char buf[5];\\n\"\n                              \"    char *data[2];\\n\"\n                              \"    data[0] = buf;\\n\"\n                              \"    do_something(data);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    char buf1[5];\\n\"\n                              \"    char buf2[5];\\n\"\n                              \"    char *data[2];\\n\"\n                              \"    data[0] = buf1;\\n\"\n                              \"    data[1] = buf2;\\n\"\n                              \"    do_something(data);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar17() { // ticket #1720\n        // Don't crash when checking the code below!\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct DATA *data;\\n\"\n                              \"    char *k = data->req;\\n\"\n                              \"    char *ptr;\\n\"\n                              \"    char *line_start;\\n\"\n                              \"    ptr = data->buffer;\\n\"\n                              \"    line_start = ptr;\\n\"\n                              \"    data->info = k;\\n\"\n                              \"    line_start = ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:10]: (style) Variable 'line_start' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar18() { // ticket #1723\n        functionVariableUsage(\"A::A(int iValue) {\\n\"\n                              \"    UserDefinedException* pe = new UserDefinedException();\\n\"\n                              \"    throw pe;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar19() { // ticket #1776\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int c;\\n\"\n                              \"    c = *(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'a' is not assigned a value.\\n\"\n                      \"[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar20() { // ticket #1799\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char c1 = 'c';\\n\"\n                              \"    char c2[] = { c1 };\\n\"\n                              \"    a(c2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar21() { // ticket #1807\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buffer[1024];\\n\"\n                              \"    bar((void *)buffer);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar22() { // ticket #1811\n        functionVariableUsage(\"int foo(int u, int v)\\n\"\n                              \"{\\n\"\n                              \"    int h, i;\\n\"\n                              \"    h = 0 ? u : v;\\n\"\n                              \"    i = 1 ? u : v;\\n\"\n                              \"    return h + i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar23() { // ticket #1808\n        functionVariableUsage(\"int foo(int c)\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int b[10];\\n\"\n                              \"    a = b[c] = 0;\\n\"\n                              \"    return a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvar24() { // ticket #1803\n        functionVariableUsage(\"class MyException\\n\"\n                              \"{\\n\"\n                              \"    virtual void raise() const\\n\"\n                              \"    {\\n\"\n                              \"        throw *this;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar25() { // ticket #1729\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    int ppos = 1;\\n\"\n                              \"    int pneg = 0;\\n\"\n                              \"    const char*edge = ppos? \\\" +\\\" : pneg ? \\\" -\\\" : \\\"\\\";\\n\"\n                              \"    printf(\\\"This should be a '+' -> %s\\n\\\", edge);\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar26() { // ticket #1894\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    const Fred &fred = getfred();\\n\"\n                              \"    int *p = fred.x();\\n\"\n                              \"    *p = 0;\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar27() { // ticket #2160\n        functionVariableUsage(\"void f(struct s *ptr) {\\n\"\n                              \"    int param = 1;\\n\"\n                              \"    ptr->param = param++;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar28() { // ticket #2205\n        functionVariableUsage(\"void f(char* buffer, int value) {\\n\"\n                              \"    char* pos = buffer;\\n\"\n                              \"    int size = value;\\n\"\n                              \"    *(int*)pos = size;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar29() { // ticket #2206\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    float s_ranges[] = { 0, 256 };\\n\"\n                              \"    float* ranges[] = { s_ranges };\\n\"\n                              \"    cout << ranges[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar30() { // ticket #2264\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    Engine *engine = e;\\n\"\n                              \"    x->engine = engine->clone();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar31() { // ticket #2286\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x = 0;\\n\"\n                              \"    a.x = x - b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar32() {\n        // ticket #2330 - fstream >> x\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x;\\n\"\n                              \"    fstream &f = getfile();\\n\"\n                              \"    f >> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // ticket #4596 - if (c >>= x) {}\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x;\\n\"\n                              \"    C c;\\n\" // possibly some stream class\n                              \"    if (c >>= x) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x;\\n\"\n                              \"    C c;\\n\"\n                              \"    if (c >>= x) {}\\n\"\n                              \"}\", \"test.c\");\n        TODO_ASSERT_EQUALS(\"[test.c:2]: (style) Variable 'x' is not assigned a value.\\n\",\n                           \"[test.c:2]: (style) Variable 'x' is not assigned a value.\\n\"\n                           \"[test.c:3]: (style) Variable 'c' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void f(int c) {\\n\"\n                              \"    int x;\\n\"\n                              \"    if (c >> x) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'x' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x, y;\\n\"\n                              \"    std::cin >> x >> y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x, y;\\n\"\n                              \"    std::cin >> (x >> y);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'x' is not assigned a value.\\n\"\n                      \"[test.cpp:2]: (style) Variable 'y' is not assigned a value.\\n\", errout.str());\n    }\n\n    void localvar33() { // ticket #2345\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    Abc* abc = getabc();\\n\"\n                              \"    while (0 != (abc = abc->next())) {\\n\"\n                              \"        ++nOldNum;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar34() { // ticket #2368\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    if (false) {\\n\"\n                              \"    } else {\\n\"\n                              \"        j -= i;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar35() { // ticket #2535\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a, b;\\n\"\n                              \"    x(1,a,b);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar36() { // ticket #2805\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int a, b;\\n\"\n                              \"    a = 2 * (b = 3);\\n\"\n                              \"    return a + b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int f() {\\n\" // ticket #4318\n                              \"    int a,b;\\n\"\n                              \"    x(a, b=2);\\n\"  // <- if param2 is passed-by-reference then b might be used in x\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar37() { // ticket #3078\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a = 2;\\n\"\n                              \"    ints.at(a) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar38() {\n        functionVariableUsage(\"std::string f() {\\n\"\n                              \"    const char code[] = \\\"foo\\\";\\n\"\n                              \"    const std::string s1(sizeof_(code));\\n\"\n                              \"    const std::string s2 = sizeof_(code);\\n\"\n                              \"    return(s1+s2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar39() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    foo(x*a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar40() {\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    return x & a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar41() {\n        // #3603 - false positive 'x is assigned a value that is never used'\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int x = 1;\\n\"\n                              \"    int y = FOO::VALUE * x;\\n\"\n                              \"    return y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar42() { // #3742\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncError()\\n\"\n                              \"{\\n\"\n                              \"    const float floatA = 2.2f;\\n\"\n                              \"    const float floatTot = g_float * floatA;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncNoError()\\n\"\n                              \"{\\n\"\n                              \"    const float floatB = 2.2f;\\n\"\n                              \"    const float floatTot = floatB * g_float;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncNoError2()\\n\"\n                              \"{\\n\"\n                              \"    const float floatC = 2.2f;\\n\"\n                              \"    float floatTot = g_float * floatC;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar43() { // ticket #3602 (false positive)\n        functionVariableUsage(\"void bar()\\n\"\n                              \"{\\n\"\n                              \"    int * piArray = NULL;\\n\"\n                              \"    unsigned int uiArrayLength = 2048;\\n\"\n                              \"    unsigned int uiIndex;\\n\"\n                              \"\\n\"\n                              \"    try\\n\"\n                              \"    {\\n\"\n                              \"        piArray = new int[uiArrayLength];\\n\" // Allocate memory\n                              \"    }\\n\"\n                              \"    catch (...)\\n\"\n                              \"    {\\n\"\n                              \"        SOME_MACRO\\n\"\n                              \"        delete [] piArray;\\n\"\n                              \"        return;\\n\"\n                              \"    }\\n\"\n                              \"    for (uiIndex = 0; uiIndex < uiArrayLength; uiIndex++)\\n\"\n                              \"    {\\n\"\n                              \"        piArray[uiIndex] = -1234;\\n\"\n                              \"    }\\n\"\n                              \"    delete [] piArray;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar44() { // #4020 - FP\n        functionVariableUsage(\"void func() {\\n\"\n                              \"    int *sp_mem[2] = { 0x00, 0x00 };\\n\"\n                              \"    int src = 1, dst = 2;\\n\"\n                              \"    sp_mem[(dst + i)][3] = src;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar45() { // #4899 - FP\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    int a = 123;\\n\"\n                              \"    int b = (short)-a;;\\n\"\n                              \"    return b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvar46() { // #5491/#5494/#6301\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int j{i};\\n\"\n                              \"    return j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    std::mutex m;\\n\"\n                              \"    std::unique_lock<std::mutex> l{ m };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    std::shared_lock<std::shared_timed_mutex> lock( m );\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = (char *)&a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = (char *)(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = (const char *)&a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = (const char *)(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = static_cast<char *>(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = static_cast<const char *>(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"void foo(int a)\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = &a;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo(int a)\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = &a;\\n\"\n                              \"        *b = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = (char *)a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = (char *)(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = (const char *)a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = (const char *)(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = static_cast<char *>(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = static_cast<const char *>(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c;\\n\"\n                              \"    *c = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'c' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int c = b[0];\\n\"\n                              \"    x(c);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int c = b[0];\\n\"\n                              \"    x(c);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a[0];\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a[0];\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo(int a[10])\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = a;\\n\"\n                              \"        *b = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    int *d = b;\\n\"\n                              \"    *d = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"    c = a;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:9]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    b[-10] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    b[-10] = 0;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    x = c[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'a' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    c[1] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    c[1] = c[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    int d = c[0];\\n\"\n                              \"    f(d);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'a' is not assigned a value.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\" // #4022 - FP (a is assigned a value that is never used)\n                              \"    int a[2], *b[2];\\n\"\n                              \"    a[0] = 123;\\n\"\n                              \"    b[0] = &a[0];\\n\"\n                              \"    int *d = b[0];\\n\"\n                              \"    return *d;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\" // #4022 - FP (a is assigned a value that is never used)\n                              \"    entry a[2], *b[2];\\n\"\n                              \"    a[0].value = 123;\\n\"\n                              \"    b[0] = &a[0];\\n\"\n                              \"    int d = b[0].value;\\n\"\n                              \"    return d;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = (struct S *)a;\\n\"\n                              \"    s->c[0] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = (struct S *)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    const struct S * s = (const struct S *)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = static_cast<struct S *>(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    const struct S * s = static_cast<const struct S *>(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: a\\n\"\n                      \"[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int c[10];\\n\"\n                              \"    int *d;\\n\"\n                              \"    d = b;\\n\"\n                              \"    d = a;\\n\"\n                              \"    d = c;\\n\"\n                              \"    *d = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: b\\n\"\n                      \"[test.cpp:10]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int c[10];\\n\"\n                              \"    int *d;\\n\"\n                              \"    d = b; *d = 0;\\n\"\n                              \"    d = a; *d = 0;\\n\"\n                              \"    d = c; *d = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n                      \"[test.cpp:9]: (style) Variable 'c' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvaralias2() { // ticket 1637\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a;\\n\"\n                              \"    x(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias3() { // ticket 1639\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    BROWSEINFO    info;\\n\"\n                              \"    char          szDisplayName[MAX_PATH];\\n\"\n                              \"    info.pszDisplayName = szDisplayName;\\n\"\n                              \"    SHBrowseForFolder(&info);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias4() { // ticket 1643\n        functionVariableUsage(\"struct AB { int a; int b; } ab;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct AB { int a; int b; } ab;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"    *a = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct AB { int a; int b; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct AB ab;\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ab' is not assigned a value.\\n\"\n                      \"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct AB { int a; int b; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct AB ab;\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"    *a = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias5() { // ticket 1647\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[0];\\n\"\n                              \"    *p++ = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[1];\\n\"\n                              \"    *p-- = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[0];\\n\"\n                              \"    *++p = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[1];\\n\"\n                              \"    *--p = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias6() { // ticket 1729\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    } else {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: buf\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = buf;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    } else {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: buf\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = buf;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Unused variable: vdata\\n\", errout.str());\n    }\n\n    void localvaralias7() { // ticket 1732\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *c[10];\\n\"\n                              \"    char **cp;\\n\"\n                              \"    cp = c;\\n\"\n                              \"    *cp = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias8() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else {\\n\"\n                              \"        pb = b1;\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else {\\n\"\n                              \"        pb = b1;\\n\"\n                              \"        pb = b2;\\n\"\n                              \"        pb = b3;\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: b1\\n\"\n                      \"[test.cpp:4]: (style) Unused variable: b2\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: b3\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else\\n\"\n                              \"                pb = b4;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else {\\n\"\n                              \"                pb = b1;\\n\"\n                              \"                pb = b4;\\n\"\n                              \"            }\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else {\\n\"\n                              \"                pb = b1;\\n\"\n                              \"                pb = b2;\\n\"\n                              \"                pb = b3;\\n\"\n                              \"                pb = b4;\\n\"\n                              \"            }\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: b1\\n\"\n                      \"[test.cpp:4]: (style) Unused variable: b2\\n\"\n                      \"[test.cpp:5]: (style) Unused variable: b3\\n\", errout.str());\n    }\n\n    void localvaralias9() { // ticket 1996\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Foo foo;\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    ref[0] = 123;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Foo foo;\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    ref[0] = 123;\\n\"\n                              \"}\",\n                              \"test.c\");\n        ASSERT_EQUALS(\"[test.c:5]: (style) Variable 'foo' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvaralias10() { // ticket 2004\n        functionVariableUsage(\"void foo(Foo &foo)\\n\"\n                              \"{\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    int *x = &ref.x();\\n\"\n                              \"    *x = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo(Foo &foo)\\n\"\n                              \"{\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    int *x = &ref.x;\\n\"\n                              \"    *x = 0;\\n\"\n                              \"}\",\n                              \"test.c\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias11() { // #4423 - iterator\n        functionVariableUsage(\"void f(Foo &foo) {\\n\"\n                              \"    std::set<int>::iterator x = foo.dostuff();\\n\"\n                              \"    *(x) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias12() { // #4394\n        functionVariableUsage(\"void f(void) {\\n\"\n                              \"    int a[4];\\n\"\n                              \"    int *b = (int*)((int*)a+1);\\n\"\n                              \"    x(b);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int f(void) {\\n\" // #4628\n                              \"    int x=1,y;\\n\"\n                              \"    y = (x * a) / 100;\\n\"\n                              \"    return y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvaralias13() { // #4487\n        functionVariableUsage(\"void f(char *p) {\\n\"\n                              \"    char a[4];\\n\"\n                              \"    p = a;\\n\"\n                              \"    strcpy(p, \\\"x\\\");\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f(char *p) {\\n\"\n                              \"    char a[4];\\n\"\n                              \"    p = a;\\n\"\n                              \"    strcpy(p, \\\"x\\\");\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"a is assigned value that is never used\", \"\", errout.str());\n    }\n\n    void localvarasm() {\n        functionVariableUsage(\"void foo(int &b)\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    asm();\\n\"\n                              \"    b = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarStruct1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static const struct{ int x, y, w, h; } bounds = {1,2,3,4};\\n\"\n                              \"    return bounds.x + bounds.y + bounds.w + bounds.h;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarStruct2() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct ABC { int a, b, c; };\\n\"\n                              \"    struct ABC abc = { 1, 2, 3 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'abc' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvarStruct3() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 10;\\n\"\n                              \"    union { struct { unsigned char x; }; unsigned char z; };\\n\"\n                              \"    do {\\n\"\n                              \"        func();\\n\"\n                              \"    } while(a--);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: x\\n\"\n                           \"[test.cpp:4]: (style) Unused variable: z\\n\", \"\", errout.str());\n    }\n\n    void localvarStruct5() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return a.i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\\n\",\n                              \"test.c\");\n        ASSERT_EQUALS(\"[test.c:2]: (style) Unused variable: a\\n\", errout.str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return a.i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return a.i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    a.i = 0;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    a.i = 0;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a = { 0 };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a = { 0 };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"class A { int i; public: A(); { } };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\", errout.str());\n\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Unused variable: a\\n\", errout.str());\n\n        functionVariableUsage(\"class A { int i; public: A(); { } };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A { unknown i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class A : public Fred { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class Fred {char c;};\\n\"\n                              \"class A : public Fred { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: a\\n\", errout.str());\n    }\n\n    void localvarStruct6() {\n        functionVariableUsage(\"class Type { };\\n\"\n                              \"class A {\\n\"\n                              \"public:\\n\"\n                              \"    Type & get() { return t; }\\n\"\n                              \"private:\\n\"\n                              \"    Type t;\\n\"\n                              \"};\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarStructArray() {\n        // #3633 - detect that struct array is assigned a value\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    struct X x[10];\\n\"\n                              \"    x[0].a = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvarOp() {\n        const char op[] = \"+-*/%&|^\";\n        for (const char *p = op; *p; ++p) {\n            std::string code(\"int main()\\n\"\n                             \"{\\n\"\n                             \"    int tmp = 10;\\n\"\n                             \"    return 123 \" + std::string(1, *p) + \" tmp;\\n\"\n                             \"}\");\n            functionVariableUsage(code.c_str());\n            ASSERT_EQUALS(\"\", errout.str());\n        }\n    }\n\n    void localvarInvert() {\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    int tmp = 10;\\n\"\n                              \"    return ~tmp;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarIf() {\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    int tmp = 10;\\n\"\n                              \"    if ( tmp )\\n\"\n                              \"        return 1;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarIfElse() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int tmp1 = 1;\\n\"\n                              \"    int tmp2 = 2;\\n\"\n                              \"    int tmp3 = 3;\\n\"\n                              \"    return tmp1 ? tmp2 : tmp3;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarOpAssign() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    int b = 2;\\n\"\n                              \"    a |= b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    (b).x += a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarFor() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    for (;a;);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    for (int i = 0; (pci = cdi_list_get(pciDevices, i)); i++)\\n\"\n                              \"    {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarForEach() { // #4155 - foreach\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int i = -1;\\n\"\n                              \"    int a[] = {1,2,3};\\n\"\n                              \"    FOREACH_X (int x, a) {\\n\"\n                              \"        if (i==x) return x;\\n\"\n                              \"        i = x;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int i = -1;\\n\"\n                              \"    int a[] = {1,2,3};\\n\"\n                              \"    FOREACH_X (int x, a) {\\n\"\n                              \"        i = x;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int i = -1;\\n\"\n                              \"    int a[] = {1,2,3};\\n\"\n                              \"    X (int x, a) {\\n\"\n                              \"        if (i==x) return x;\\n\"\n                              \"        i = x;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        // #4956 - assignment in for_each\n        functionVariableUsage(\"void f(std::vector<int> ints) {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  std::for_each(ints.begin(), ints.end(), [&x](int i){ dostuff(x); x = i; });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f(std::vector<int> ints) {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  std::for_each(ints.begin(), ints.end(), [&x](int i){ x += i; });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\\n\", errout.str());\n\n        // #5154 - MSVC 'for each'\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  std::map<int,int> ints;\\n\"\n                              \"  ints[0]= 1;\\n\"\n                              \"  for each(std::pair<int,int> i in ints) { x += i.first; }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarShift1() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int var = 1;\\n\"\n                              \"    return 1 >> var;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarShift2() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int var = 1;\\n\"\n                              \"    while (var = var >> 1) { }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarShift3() {  // #3509\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    QList<int *> ints;\\n\"\n                              \"    ints << 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo() {\\n\" // #4320\n                              \"    int x;\\n\"\n                              \"    x << 1;\\n\"\n                              \"    return x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarCast() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    int b = static_cast<int>(a);\\n\"\n                              \"    return b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarClass() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    class B : public A {\\n\"\n                              \"        int a;\\n\"\n                              \"        int f() { return a; }\\n\"\n                              \"    } b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarUnused() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((unused));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((unused)) = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((unused)) test;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((unused)) test = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((used));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((used)) test;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarFunction() {\n        functionVariableUsage(\"void check_dlsym(void*& h)\\n\"\n                              \"{\\n\"\n                              \"  typedef void (*function_type) (void);\\n\"\n                              \"  function_type fn;\\n\"\n                              \"  fn = reinterpret_cast<function_type>(dlsym(h, \\\"try_allocation\\\"));\\n\"\n                              \"  fn();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarstatic() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i(0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int j = 0;\\n\"\n                              \"    static int i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"int * foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    static int a[] = { 3, 4, 5, 6 };\\n\"\n                              \"    static int b[] = { 4, 5, 6, 7 };\\n\"\n                              \"    static int c[] = { 5, 6, 7, 8 };\\n\"\n                              \"    b[1] = 1;\\n\"\n                              \"    return x ? a : c;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i = 0;\\n\"\n                              \"    if(i < foo())\\n\"\n                              \"        i += 5;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarextern() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    extern int i;\\n\"\n                              \"    i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvardynamic1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = malloc(16);\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = g_malloc(16);\\n\"\n                              \"    g_free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = kmalloc(16, GFP_KERNEL);\\n\"\n                              \"    kfree(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = vmalloc(16, GFP_KERNEL);\\n\"\n                              \"    vfree(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new ( nothrow ) char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new ( std::nothrow ) char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = malloc(16);\\n\"\n                              \"    ptr[0] = 123;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char[16];\\n\"\n                              \"    ptr[0] = 123;\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int a; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int a; Fred() : a(0) {} };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = malloc(sizeof(Fred));\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    free(fred);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 'fred' is allocated memory that is never used.\\n\", errout.str());\n\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = names[i];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvardynamic2() {\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new (nothrow ) Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new (std::nothrow) Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = new Fred();\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvardynamic3() {\n        // Ticket #3477 - False positive that 'data' is not assigned a value\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int* data = new int[100];\\n\"\n                              \"    int* p = data;\\n\"\n                              \"    for ( int i = 0; i < 10; ++i )\\n\"\n                              \"        p++;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvararray1() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int p[5];\\n\"\n                              \"    *p = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvararray2() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5];\\n\"\n                              \"    p[0][0] = 0;\\n\"\n                              \"    return p[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvararray3() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5];\\n\"\n                              \"    *((int*)p[0]) = 0;\\n\"\n                              \"    return p[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarstring1() { // ticket #1597\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Unused variable: s\\n\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"    s = \\\"foo\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s = \\\"foo\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"std::string foo() {\\n\"\n                              \"    std::string s;\\n\" // Class instances are initialized. Assignment is not necessary\n                              \"    return s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"std::string foo() {\\n\"\n                              \"    std::string s = \\\"foo\\\";\\n\"\n                              \"    return s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarstring2() { // ticket #2929\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"    int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Unused variable: s\\n\"\n                      \"[test.cpp:3]: (style) Unused variable: i\\n\", errout.str());\n    }\n\n    void localvarconst1() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    const bool b = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'b' is assigned a value that is never used.\\n\", errout.str());\n    }\n\n    void localvarconst2() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    const int N = 10;\\n\"\n                              \"    struct X { int x[N]; };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarthrow() { // ticket #3687\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    try {}\"\n                              \"    catch(Foo& bar) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localVarStd() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::string x = foo();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\\n\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<int> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Unused variable: x\\n\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<int> x(100);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\\n\", \"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<MyClass> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2]: (style) Unused variable: x\\n\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<MyClass> x(100);\\n\" // Might have a side-effect\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::lock_guard<MyClass> lock(mutex_);\\n\" // Has a side-effect #4385\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    pLocker = std::shared_ptr<jfxLocker>(new jfxLocker(m_lock, true));\\n\" // Could have side-effects (#4355)\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::mutex m;\\n\"\n                              \"    std::unique_lock<std::mutex> lock(m);\\n\" // #4624\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    // ticket #3104 - false positive when variable is read with \"if (NOT var)\"\n    void localvarIfNOT() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    bool x = foo();\\n\"\n                              \"    if (NOT x) { }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarAnd() { // #3672\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    unsigned flag = 0x1 << i;\\n\"\n                              \"    if (m_errorflags & flag) {\\n\"\n                              \"        return 1;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarSwitch() { // #3744 - false positive when used in switch\n        functionVariableUsage(\"const char *f(int x) {\\n\"\n                              \"    const char a[] = \\\"abc\\\";\\n\"\n                              \"    const char def[] = \\\"def\\\";\\n\"\n                              \"    const char *ptr;\\n\"\n                              \"    switch(x) {\\n\"\n                              \"        case 1:  ptr=a; break;\\n\"\n                              \"        default: ptr=def; break;\\n\"\n                              \"    }\\n\"\n                              \"    return ptr;\\n\"\n                              \"}\");\n\n        // Don't write an error that \"a\" is not used\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarNULL() { // #4203 - Setting NULL value is not redundant - it is safe\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    char *p = malloc(100);\\n\"\n                              \"    foo(p);\\n\"\n                              \"    free(p);\\n\"\n                              \"    p = NULL;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarUnusedGoto() {\n        // #4447\n        functionVariableUsage(\"bool f(const int &i) {\\n\"\n                              \" int X = i;\\n\"\n                              \"label:\\n\"\n                              \" if ( X == 0 ) {\\n\"\n                              \"    X -= 101;\\n\"\n                              \"    return true;\\n\"\n                              \" }\\n\"\n                              \" if ( X < 1001 )  {\\n\"\n                              \"    X += 1;\\n\"\n                              \"    goto label;\\n\"\n                              \" }\\n\"\n                              \" return false;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout.str());\n\n        // #4558\n        functionVariableUsage(\"int f() {\\n\"\n                              \" int i,j=0;\\n\"\n                              \" start:\\n\"\n                              \" i=j;\\n\"\n                              \" i++;\\n\"\n                              \" j=i;\\n\"\n                              \" if (i<3)\\n\"\n                              \"     goto start;\\n\"\n                              \" return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void localvarCpp11Initialization() {\n        // #6160\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int myNewValue{ 3u };\\n\"\n                              \"    myManager.theDummyTable.addRow(UnsignedIndexValue{ myNewValue }, DummyRowData{ false });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void chainedAssignment() {\n        // #5466\n        functionVariableUsage(\"void NotUsed(double* pdD, int n) {\\n\"\n                              \"    double sum = 0.0;\\n\"\n                              \"    for (int i = 0; i<n; ++i)\\n\"\n                              \"        pdD[i] = (sum += pdD[i]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n\n    void crash1() {\n        functionVariableUsage(\"SAL_WNODEPRECATED_DECLARATIONS_PUSH\\n\"\n                              \"void convertToTokenArray() {\\n\"\n                              \"}\\n\"\n                              \"SAL_WNODEPRECATED_DECLARATIONS_POP\"); // #4033\n    }\n\n    void crash2() {\n        functionVariableUsage(\"template<unsigned dim>\\n\"\n                              \"struct Y: Y<dim-1> { };\\n\"\n                              \"template<>\\n\"\n                              \"struct Y<0> {};\\n\"\n                              \"void f() {\\n\"\n                              \"    Y y;\\n\"\n                              \"}\"); // #4695\n    }\n\n    void usingNamespace() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"   using namespace ::com::sun::star::i18n;\\n\"\n                              \"   bool b = false;\\n\"\n                              \"   int j = 0;\\n\"\n                              \"   for (int i = 0; i < 3; i++) {\\n\"\n                              \"          if (!b) {\\n\"\n                              \"             j = 3;\\n\"\n                              \"             b = true;\\n\"\n                              \"          }\\n\"\n                              \"   }\\n\"\n                              \"   return j;\\n\"\n                              \"}\"); // #4585\n        ASSERT_EQUALS(\"\", errout.str());\n    }\n};\n\nREGISTER_TEST(TestUnusedVar)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/win_installer/images/banner.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/win_installer/images/dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/cppcheck.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/applications-system.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/showerrors.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/go-down.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/media-floppy.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/scratchpad.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/view-refresh.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/process-stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/showwarnings.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/showperformance.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/applications-development.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/go-next.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/edit-clear.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/go-previous.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/dialog-error.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/utilities-system-monitor.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/preferences-system.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/showstylewarnings.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/text-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/openproject.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/help-browser.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/go-home.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/dialog-warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppcheck-1.68-7p4cbukevhqihghf75nekurvibfsq5qp/spack-src/gui/images/dialog-information.png"
    ],
    "total_files": 447
}