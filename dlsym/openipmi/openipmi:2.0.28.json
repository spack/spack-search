{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.6 Debian-2.4.6-2\"\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname $scriptversion Debian-2.4.6-2\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/s/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      # -fsanitize=*         Clang/GCC memory and address sanitizer\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*|-fsanitize=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type '$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/swig/OpenIPMI.i": "/*\n * OpenIPMI.i\n *\n * A SWIG interface file for OpenIPMI\n *\n * Author: MontaVista Software, Inc.\n *         Corey Minyard <minyard@mvista.com>\n *         source@mvista.com\n *\n * Copyright 2004 MontaVista Software Inc.\n *\n *  This program is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public License\n *  as published by the Free Software Foundation; either version 2 of\n *  the License, or (at your option) any later version.\n *\n *\n *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED\n *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this program; if not, write to the Free\n *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n */\n\n%module OpenIPMI\n\n%{\n\n#include <config.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\n#ifdef HAVE_GETADDRINFO\n#include <netdb.h>\n#endif\n\n#include <OpenIPMI/ipmiif.h>\n#include <OpenIPMI/ipmi_auth.h>\n#include <OpenIPMI/ipmi_mc.h>\n#include <OpenIPMI/ipmi_fru.h>\n#include <OpenIPMI/ipmi_msgbits.h>\n#include <OpenIPMI/ipmi_conn.h>\n#include <OpenIPMI/ipmi_posix.h>\n#include <OpenIPMI/ipmi_debug.h>\n#include <OpenIPMI/ipmi_user.h>\n#include <OpenIPMI/ipmi_lanparm.h>\n#include <OpenIPMI/ipmi_pef.h>\n#include <OpenIPMI/ipmi_pet.h>\n#include <OpenIPMI/ipmi_sol.h>\n#include <OpenIPMI/ipmi_solparm.h>\n#include <OpenIPMI/ipmi_err.h>\n#include <OpenIPMI/ipmi_cmdlang.h>\n\n#include <signal.h>\n\n/* For ipmi_debug_malloc_cleanup() */\n#include <OpenIPMI/internal/ipmi_malloc.h>\n\n#include \"OpenIPMI.h\"\n\ntypedef struct intarray\n{\n    int *val;\n    int len;\n} intarray;\n\ntypedef struct charbuf\n{\n    char *val;\n    int len;\n} charbuf;\n\nos_handler_t *swig_os_hnd;\n\nstatic int\nnext_parm(char *s, int *start, int *next)\n{\n    while (s[*start] && isspace(s[*start]))\n\t(*start)++;\n    if (!s[*start])\n\treturn EINVAL;\n\n    *next = *start;\n    while (s[*next] && !isspace(s[*next]))\n\t(*next)++;\n    return 0;\n}\n\nstatic int\nnext_colon_parm(char *s, int *start, int *next)\n{\n    while (s[*start] && (s[*start] == ':'))\n\t(*start)++;\n    if (!s[*start])\n\treturn EINVAL;\n\n    *next = *start;\n    while (s[*next] && (s[*next] != ':'))\n\t(*next)++;\n    return 0;\n}\n\nstatic int\nnum_parm(char *s, int len, int *rval)\n{\n    char numstr[10];\n    char *end;\n    int  val;\n\n    if (len > 9)\n\treturn EINVAL;\n    memcpy(numstr, s, len);\n    numstr[len] = '\\0';\n    val = strtoul(numstr, &end, 0);\n    if (*end != '\\0')\n\treturn EINVAL;\n    *rval = val;\n    return 0;\n}\n\nstatic int\nparse_ipmi_addr(char *addr, int lun, ipmi_addr_t *i, unsigned int *addr_len)\n{\n    int start, next;\n    int rv;\n    int num;\n    int len;\n\n    start = 0;\n    rv = next_parm(addr, &start, &next);\n    if (rv)\n\treturn rv;\n    len = next - start;\n\n    if (strncmp(addr+start, \"smi\", len) == 0) {\n\tipmi_system_interface_addr_t *si = (void *) i;\n\n\tsi->addr_type = IPMI_SYSTEM_INTERFACE_ADDR_TYPE;\n\tsi->lun = lun;\n\tstart = next;\n\trv = next_parm(addr, &start, &next);\n\tif (rv)\n\t    return rv;\n\tlen = next - start;\n\trv = num_parm(addr+start, len, &num);\n\tif (rv)\n\t    return rv;\n\tsi->channel = num;\n\t*addr_len = sizeof(*si);\n    } else if (strncmp(addr+start, \"ipmb\", len) == 0) {\n\tipmi_ipmb_addr_t *ipmb = (void *) i;\n\n\tipmb->addr_type = IPMI_IPMB_ADDR_TYPE;\n\tipmb->lun = lun;\n\n\tstart = next;\n\trv = next_parm(addr, &start, &next);\n\tif (rv)\n\t    return rv;\n\tlen = next - start;\n\trv = num_parm(addr+start, len, &num);\n\tif (rv)\n\t    return rv;\n\tipmb->channel = num;\n\n\tstart = next;\n\trv = next_parm(addr, &start, &next);\n\tif (rv)\n\t    return rv;\n\tlen = next - start;\n\trv = num_parm(addr+start, len, &num);\n\tif (rv)\n\t    return rv;\n\tipmb->slave_addr = num;\n\n\t*addr_len = sizeof(*ipmb);\n    } else {\n\treturn EINVAL;\n    }\n\n    return 0;\n}\n\nstatic void\nmake_ipmi_addr(char *out, int max_len, ipmi_addr_t *addr, int addr_len,\n\t       int *lun)\n{\n    if (addr->addr_type == IPMI_SYSTEM_INTERFACE_ADDR_TYPE) {\n\tipmi_system_interface_addr_t *si = (void *) addr;\n\tsnprintf(out, max_len, \"smi %d\", si->channel);\n\t*lun = si->lun;\n    } else if (addr->addr_type == IPMI_IPMB_ADDR_TYPE) {\n\tipmi_ipmb_addr_t *ipmb = (void *) addr;\n\tsnprintf(out, max_len, \"ipmb %d %d\", ipmb->channel, ipmb->slave_addr);\n\t*lun = ipmb->lun;\n    } else {\n\tstrncpy(out, \"unknown\", max_len);\n\t*lun = 0;\n    }\n}\n\nstatic int\nparse_ipmi_data(intarray data, unsigned char *odata,\n\t\tunsigned int max_len,\n\t\tunsigned int *rlen)\n{\n    int i;\n    if (data.len > max_len)\n\treturn E2BIG;\n    for (i=0; i<data.len; i++)\n\todata[i] = data.val[i];\n    *rlen = data.len;\n    return 0;\n}\n\nstatic unsigned char *\nparse_raw_str_data(char *str, unsigned int *length)\n{\n    char *s = str;\n    int  inspace = 1;\n    int  count = 0;\n    int  i;\n    unsigned char *rv;\n    char *endstr;\n\n    while (*s) {\n\tif (inspace && !isspace(*s)) {\n\t    inspace = 0;\n\t    count++;\n\t} else if (!inspace && isspace(*s)) {\n\t    inspace = 1;\n\t}\n\ts++;\n    }\n\n    if (count == 0) {\n\t*length = 0;\n\treturn malloc(1);\n    }\n\n    rv = malloc(count);\n    if (!rv)\n\treturn NULL;\n\n    s = str;\n    i = 0;\n    while ((*s) && (i < count)) {\n\trv[i] = strtoul(s, &endstr, 0);\n\tif (*endstr && (!isspace(*endstr)))\n\t    goto out_err;\n\ti++;\n\ts = endstr;\n    }\n\n    *length = count;\n    return rv;\n\n out_err:\n    free(rv);\n    return NULL;\n}\n\nstatic int\nparse_ip_addr(char *str, struct in_addr *addr)\n{\n#ifdef HAVE_GETADDRINFO\n    struct addrinfo    hints, *res0, *s;\n    struct sockaddr_in *paddr;\n    int                rv;\n \n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = PF_UNSPEC;\n    hints.ai_socktype = SOCK_DGRAM;\n    rv = getaddrinfo(str, \"100\", &hints, &res0);\n    if (rv) {\n\treturn EINVAL;\n    }\n    /* Only get the first ipv4 */\n    s = res0;\n    while (s) {\n\tif (s->ai_family == PF_INET)\n\t    break;\n\ts = s->ai_next;\n    }\n    if (!s) {\n\tfreeaddrinfo(res0);\n\treturn EINVAL;\n    }\n    paddr = (struct sockaddr_in *) s->ai_addr;\n    *addr = paddr->sin_addr;\n    freeaddrinfo(res0);\n    return 0;\n#else\n/* System does not support getaddrinfo, just for IPv4*/\n    struct hostent *ent;\n    ent = gethostbyname(str);\n    if (!ent)\n\treturn EINVAL;\n    memcpy(&addr->s_addr, ent->h_addr_list[0], 4);\n    return 0;\n#endif\n}\n\nstatic int\nparse_mac_addr(char *str, unsigned char *addr)\n{\n    char *s;\n    int  i;\n    char *endstr;\n\n    s = str;\n    while (isspace(*s))\n\ts++;\n    if (! isxdigit(*s))\n\treturn EINVAL;\n    for (i=0; i<5; i++) {\n\taddr[i] = strtoul(s, &endstr, 16);\n\tif (*endstr != ':')\n\t    return EINVAL;\n\ts = endstr+1;\n    }\n    addr[i] = strtoul(s, &endstr, 16);\n    if (*endstr != '\\0')\n\treturn EINVAL;\n    return 0;\n}\n%}\n\n%{\n/* For output returning an array of constant strings */\ntypedef struct strconstarray\n{\n    const char **val;\n    int len;\n} strconstarray;\n\n/* For input only */\ntypedef struct argarray\n{\n    char **val;\n    int len;\n} argarray;\n\n/* For input only */\ntypedef struct iargarray\n{\n    ipmi_args_t **val;\n    int         len;\n} iargarray;\n%}\ntypedef struct strconstarray\n{\n    char **val;\n    int len;\n} strconstarray;\ntypedef struct argarray\n{\n    char **val;\n    int len;\n} argarray;\ntypedef struct iargarray\n{\n    ipmi_args_t **val;\n    int        len;\n} iargarray;\n\n%include \"OpenIPMI_lang.i\"\n\n%nodefault;\n\n%{\nswig_cb_val *swig_log_handler;\n\nvoid\nopenipmi_swig_vlog(os_handler_t *os_handler, const char *format,\n\t\t   enum ipmi_log_type_e log_type, va_list ap)\n{\n    char *pfx = \"\";\n    static char log[1024];\n    static int curr = 0;\n    swig_cb_val *handler = swig_log_handler;\n\n    if (! handler)\n\treturn;\n\n    switch(log_type)\n    {\n    case IPMI_LOG_INFO:\n\tpfx = \"INFO\";\n\tbreak;\n\n    case IPMI_LOG_WARNING:\n\tpfx = \"WARN\";\n\tbreak;\n\n    case IPMI_LOG_SEVERE:\n\tpfx = \"SEVR\";\n\tbreak;\n\n    case IPMI_LOG_FATAL:\n\tpfx = \"FATL\";\n\tbreak;\n\n    case IPMI_LOG_ERR_INFO:\n\tpfx = \"EINF\";\n\tbreak;\n\n    case IPMI_LOG_DEBUG:\n\tpfx = \"DEBG\";\n\tbreak;\n\n    case IPMI_LOG_DEBUG_START:\n    case IPMI_LOG_DEBUG_CONT:\n\tif (curr < sizeof(log))\n\t    curr += vsnprintf(log+curr, sizeof(log)-curr, format, ap);\n\treturn;\n\n    case IPMI_LOG_DEBUG_END:\n\tif (curr < sizeof(log))\n\t    vsnprintf(log+curr, sizeof(log)-curr, format, ap);\n\tpfx = \"DEBG\";\n\tcurr = 0;\n\tgoto plog;\n    }\n\n    vsnprintf(log, sizeof(log), format, ap);\n\n plog:\n    swig_call_cb(handler, \"log\", \"%s%s\", pfx, log);\n}\n\nstatic void\nhandle_domain_cb(ipmi_domain_t *domain, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_cb\", \"%p\", &domain_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n}\n\nstatic void\ndomain_connect_change_handler(ipmi_domain_t *domain,\n\t\t\t      int           err,\n\t\t\t      unsigned int  conn_num,\n\t\t\t      unsigned int  port_num,\n\t\t\t      int           still_connected,\n\t\t\t      void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"conn_change_cb\", \"%p%d%d%d%d\",\n\t\t &domain_ref, err, conn_num, port_num, still_connected);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n}\n\nstatic void\ndomain_connect_change_handler_cl(ipmi_domain_con_cb handler,\n\t\t\t\t void               *handler_data,\n\t\t\t\t void               *cb_data)\n{\n    if (handler != domain_connect_change_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\ndomain_iterate_connections_handler(ipmi_domain_t *domain, int conn,\n\t\t\t\t   void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_iter_connection_cb\", \"%p%d\", &domain_ref, conn);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n}\n\nstatic void\ndomain_event_handler(ipmi_domain_t *domain, ipmi_event_t *event, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    event_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb(cb, \"event_cb\", \"%p%p\", &domain_ref, &event_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref(event_ref);\n}\n\nstatic void\ndomain_event_handler_cl(ipmi_event_handler_cb handler,\n\t\t\tvoid                  *handler_data,\n\t\t\tvoid                  *cb_data)\n{\n    if (handler != domain_event_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\ndomain_mc_updated_handler(enum ipmi_update_e op, ipmi_domain_t *domain,\n\t\t\t  ipmi_mc_t *mc, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    mc_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_update_cb\", \"%s%p%p\",\n\t\t ipmi_update_e_string(op), &domain_ref, &mc_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n}\n\nstatic void\ndomain_mc_updated_handler_cl(ipmi_domain_mc_upd_cb handler,\n\t\t\t     void                  *handler_data,\n\t\t\t     void                  *cb_data)\n{\n    if (handler != domain_mc_updated_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\ndomain_entity_update_handler(enum ipmi_update_e op, ipmi_domain_t *domain,\n\t\t\t      ipmi_entity_t *entity, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    entity_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_update_cb\", \"%s%p%p\",\n\t\t ipmi_update_e_string(op), &domain_ref, &entity_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n}\n\nstatic void\ndomain_entity_update_handler_cl(ipmi_domain_entity_cb handler,\n\t\t\t\tvoid                  *handler_data,\n\t\t\t\tvoid                  *cb_data)\n{\n    if (handler != domain_entity_update_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\ndomain_fully_up(ipmi_domain_t *domain, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_up_cb\", \"%p\", &domain_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nparse_args_iter_help_hnd(const char *name, const char *help, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n\n    swig_call_cb(cb, \"parse_args_iter_help_cb\", \"%s%s\", name, help);\n}\n\nstatic void\ndomain_close_done(void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n\n    swig_call_cb(cb, \"domain_close_done_cb\", \" \");\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\ndomain_iterate_entities_handler(ipmi_entity_t *entity, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    entity_ref;\n\n    domain_ref = swig_make_ref(ipmi_entity_get_domain(entity), ipmi_domain_t);\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"domain_iter_entity_cb\", \"%p%p\",\n\t\t &domain_ref, &entity_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n}\n\nstatic void\nipmb_mc_scan_handler(ipmi_domain_t *domain, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_ipmb_mc_scan_cb\", \"%p%d\", &domain_ref, err);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\ndomain_reread_sels_handler(ipmi_domain_t *domain, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_reread_sels_cb\", \"%p%d\", &domain_ref, err);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n}\n\nstatic int\ndomain_msg_cb(ipmi_domain_t *domain, ipmi_msgi_t *rspi)\n{\n    swig_cb_val   *cb = rspi->data1;\n    swig_ref      domain_ref;\n    ipmi_msg_t    *msg = &rspi->msg;\n    ipmi_addr_t   *addr = &rspi->addr;\n    int           addr_len = rspi->addr_len;\n    char          addr_str[50];\n    int           lun;\n\n    make_ipmi_addr(addr_str, sizeof(addr_str), addr, addr_len, &lun);\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_addr_cmd_cb\", \"%p%s%d%d%d%*s\", &domain_ref,\n\t\t addr_str, lun, msg->netfn, msg->cmd,\n\t\t msg->data_len, msg->data);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    \n    return IPMI_MSG_ITEM_NOT_USED;\n}\n\nstatic void\ndomain_iterate_mcs_handler(ipmi_domain_t *domain, ipmi_mc_t *mc, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    mc_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"domain_iter_mc_cb\", \"%p%p\", &domain_ref, &mc_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n}\n\nstatic void\nfru_written_done(ipmi_domain_t *domain, ipmi_fru_t *fru,\n\t\t int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    fru_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    fru_ref = swig_make_ref_destruct(fru, ipmi_fru_t);\n    /* The FRU is already referenced because of the callback, no need\n       to mess with refcounts. */\n    swig_call_cb(cb, \"fru_written\", \"%p%p%d\", &domain_ref, &fru_ref, err);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref(fru_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nfru_fetched(ipmi_domain_t *domain, ipmi_fru_t *fru, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    swig_ref    fru_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    fru_ref = swig_make_ref_destruct(fru, ipmi_fru_t);\n    /* The FRU is already referenced because of the callback, no need\n       to mess with refcounts. */\n    swig_call_cb(cb, \"fru_fetched\", \"%p%p%d\", &domain_ref, &fru_ref, err);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    swig_free_ref(fru_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nhandle_entity_cb(ipmi_entity_t *entity, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_cb\", \"%p\", &entity_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n}\n\nstatic void\nentity_iterate_entities_handler(ipmi_entity_t *ent1,\n\t\t\t\tipmi_entity_t *ent2,\n\t\t\t\tvoid          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    ent1_ref;\n    swig_ref    ent2_ref;\n\n    ent1_ref = swig_make_ref(ent1, ipmi_entity_t);\n    ent2_ref = swig_make_ref(ent2, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_iter_entities_cb\", \"%p%p\", &ent1_ref, &ent2_ref);\n    swig_free_ref_check(ent2_ref, ipmi_entity_t);\n    swig_free_ref_check(ent1_ref, ipmi_entity_t);\n}\n\nstatic void\nentity_iterate_sensors_handler(ipmi_entity_t *entity,\n\t\t\t       ipmi_sensor_t *sensor,\n\t\t\t       void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    sensor_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"entity_iter_sensors_cb\", \"%p%p\",\n\t\t &entity_ref, &sensor_ref);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n}\n\nstatic void\nentity_iterate_controls_handler(ipmi_entity_t  *entity,\n\t\t\t\tipmi_control_t *control,\n\t\t\t\tvoid           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    control_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    swig_call_cb(cb, \"entity_iter_controls_cb\", \"%p%p\",\n\t\t &entity_ref, &control_ref);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n}\n\nstatic int\nentity_presence_handler(ipmi_entity_t *entity,\n\t\t\tint           present,\n\t\t\tvoid          *cb_data,\n\t\t\tipmi_event_t  *event)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    event_ref;\n    int         rv = IPMI_EVENT_NOT_HANDLED;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb_rv('I', &rv, cb, \"entity_presence_cb\", \"%p%d%p\",\n\t\t    &entity_ref, present, &event_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref(event_ref);\n    return rv;\n}\n\nstatic void\nentity_presence_handler_cl(ipmi_entity_presence_change_cb handler,\n\t\t\t   void                           *handler_data,\n\t\t\t   void                           *cb_data)\n{\n    if (handler != entity_presence_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nentity_sensor_update_handler(enum ipmi_update_e op,\n\t\t\t     ipmi_entity_t      *entity,\n\t\t\t     ipmi_sensor_t      *sensor,\n\t\t\t     void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    sensor_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"entity_sensor_update_cb\", \"%s%p%p\",\n\t\t ipmi_update_e_string(op), &entity_ref, &sensor_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n}\n\nstatic void\nentity_sensor_update_handler_cl(ipmi_entity_sensor_cb handler,\n\t\t\t\t void                  *handler_data,\n\t\t\t\t void                  *cb_data)\n{\n    if (handler != entity_sensor_update_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nentity_control_update_handler(enum ipmi_update_e op,\n\t\t\t      ipmi_entity_t      *entity,\n\t\t\t      ipmi_control_t     *control,\n\t\t\t      void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    control_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    swig_call_cb(cb, \"entity_control_update_cb\", \"%s%p%p\",\n\t\t ipmi_update_e_string(op), &entity_ref, &control_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n}\n\nstatic void\nentity_control_update_handler_cl(ipmi_entity_control_cb handler,\n\t\t\t\t void                  *handler_data,\n\t\t\t\t void                  *cb_data)\n{\n    if (handler != entity_control_update_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nentity_fru_update_handler(enum ipmi_update_e op,\n\t\t\t  ipmi_entity_t      *entity,\n\t\t\t  void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    fru_ref;\n    ipmi_fru_t  *fru;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    fru = ipmi_entity_get_fru(entity);\n    if (fru)\n\tipmi_fru_ref(fru);\n    fru_ref = swig_make_ref_destruct(fru, ipmi_fru_t);\n    swig_call_cb(cb, \"entity_fru_update_cb\", \"%s%p%p\",\n\t\t ipmi_update_e_string(op), &entity_ref, &fru_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref(fru_ref);\n}\n\nstatic void\nentity_fru_update_werr_handler(enum ipmi_update_werr_e op,\n\t\t\t       int                     err,\n\t\t\t       ipmi_entity_t           *entity,\n\t\t\t       void                    *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    fru_ref;\n    ipmi_fru_t  *fru;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    fru = ipmi_entity_get_fru(entity);\n    if (fru)\n\tipmi_fru_ref(fru);\n    fru_ref = swig_make_ref_destruct(fru, ipmi_fru_t);\n    swig_call_cb(cb, \"entity_fru_update_werr_cb\", \"%s%d%p%p\",\n\t\t ipmi_update_werr_e_string(op), err, &entity_ref, &fru_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref(fru_ref);\n}\n\nstatic void\nentity_fru_update_handler_cl(ipmi_entity_fru_cb handler,\n\t\t\t     void               *handler_data,\n\t\t\t     void               *cb_data)\n{\n    if (handler != entity_fru_update_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nentity_fru_update_werr_handler_cl(ipmi_entity_fru_werr_cb handler,\n\t\t\t\t  void                    *handler_data,\n\t\t\t\t  void                    *cb_data)\n{\n    if (handler != entity_fru_update_werr_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic int\nentity_hot_swap_handler(ipmi_entity_t             *entity,\n\t\t\tenum ipmi_hot_swap_states last_state,\n\t\t\tenum ipmi_hot_swap_states curr_state,\n\t\t\tvoid                      *cb_data,\n\t\t\tipmi_event_t              *event)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n    swig_ref    event_ref;\n    int         rv = IPMI_EVENT_NOT_HANDLED;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb_rv('I', &rv,\n\t\t    cb, \"entity_hot_swap_update_cb\", \"%p%s%s%p\", &entity_ref,\n\t\t    ipmi_hot_swap_state_name(last_state),\n\t\t    ipmi_hot_swap_state_name(curr_state),\n\t\t    &event_ref);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    swig_free_ref(event_ref);\n    return rv;\n}\n\nstatic void\nentity_hot_swap_handler_cl(ipmi_entity_hot_swap_cb handler,\n\t\t\t   void                    *handler_data,\n\t\t\t   void                    *cb_data)\n{\n    if (handler != entity_hot_swap_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nentity_get_hot_swap_handler(ipmi_entity_t             *entity,\n\t\t\t    int                       err,\n\t\t\t    enum ipmi_hot_swap_states state,\n\t\t\t    void                      *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_hot_swap_cb\", \"%p%d%s\", &entity_ref,\n\t\t err, ipmi_hot_swap_state_name(state));\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nentity_get_hot_swap_time_handler(ipmi_entity_t  *entity,\n\t\t\t\t int            err,\n\t\t\t\t ipmi_timeout_t time,\n\t\t\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_hot_swap_get_time_cb\", \"%p%d%f\", &entity_ref,\n\t\t err, ((double) time) / 1000000000.0);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nentity_set_hot_swap_time_handler(ipmi_entity_t  *entity,\n\t\t\t\t int            err,\n\t\t\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_hot_swap_set_time_cb\", \"%p%d\", &entity_ref, err);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nentity_activate_handler(ipmi_entity_t  *entity,\n\t\t\tint            err,\n\t\t\tvoid           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    entity_ref;\n\n    entity_ref = swig_make_ref(entity, ipmi_entity_t);\n    swig_call_cb(cb, \"entity_activate_cb\", \"%p%d\", &entity_ref, err);\n    swig_free_ref_check(entity_ref, ipmi_entity_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nhandle_mc_cb(ipmi_mc_t *mc, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_cb\", \"%p\", &mc_ref);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n}\n\nstatic void\nmc_active_handler(ipmi_mc_t  *mc,\n\t\t  int        active,\n\t\t  void       *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_active_cb\", \"%p%d\", &mc_ref, active);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n}\n\nstatic void\nmc_active_handler_cl(ipmi_mc_active_cb handler,\n\t\t     void              *handler_data,\n\t\t     void              *cb_data)\n{\n    if (handler != mc_active_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nmc_fully_up_handler(ipmi_mc_t *mc, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_fully_up_cb\", \"%p\", &mc_ref);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n}\n\nstatic void\nmc_fully_up_handler_cl(ipmi_mc_ptr_cb handler,\n\t\t       void           *handler_data,\n\t\t       void           *cb_data)\n{\n    if (handler != mc_fully_up_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nmc_msg_cb(ipmi_mc_t  *mc,\n\t  ipmi_msg_t *msg,\n\t  void       *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_cmd_cb\", \"%p%d%d%*s\", &mc_ref,\n\t\t msg->netfn, msg->cmd, msg->data_len, msg->data);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_reset_handler(ipmi_mc_t *mc, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_reset_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_events_enable_handler(ipmi_mc_t *mc, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_events_enable_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_get_event_log_enable_handler(ipmi_mc_t *mc, int err, int val, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_get_event_log_enable_cb\", \"%p%d%d\",\n\t\t &mc_ref, err, val);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_set_event_log_enable_handler(ipmi_mc_t *mc, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_set_event_log_enable_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_reread_sensors_handler(ipmi_mc_t *mc, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_reread_sensors_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_reread_sel_handler(ipmi_mc_t *mc, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_reread_sel_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_sel_get_time_cb(ipmi_mc_t     *mc,\n\t\t   int           err,\n\t\t   unsigned long time,\n\t\t   void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_get_sel_time_cb\", \"%p%d%ld\", &mc_ref, err, time);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_channel_get_info(ipmi_mc_t           *mc,\n\t\t    int                 err,\n\t\t    ipmi_channel_info_t *info,\n\t\t    void                *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n    swig_ref    info_ref;\n\n    info = ipmi_channel_info_copy(info);\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    info_ref = swig_make_ref_destruct(info, ipmi_channel_info_t);\n    swig_call_cb(cb, \"mc_channel_got_info_cb\", \"%p%d%p\", &mc_ref, err,\n\t\t &info_ref);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    swig_free_ref(info_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_channel_get_access(ipmi_mc_t             *mc,\n\t\t      int                   err,\n\t\t      ipmi_channel_access_t *info,\n\t\t      void                  *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n    swig_ref    info_ref;\n\n    info = ipmi_channel_access_copy(info);\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    info_ref = swig_make_ref_destruct(info, ipmi_channel_access_t);\n    swig_call_cb(cb, \"mc_channel_got_access_cb\", \"%p%d%p\", &mc_ref, err,\n\t\t &info_ref);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    swig_free_ref(info_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_channel_set_access(ipmi_mc_t *mc,\n\t\t      int       err,\n\t\t      void      *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_channel_set_access_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_channel_got_users(ipmi_mc_t        *mc,\n\t\t     int              err,\n\t\t     ipmi_user_list_t *info,\n\t\t     void             *cb_data)\n{\n    swig_cb_val  *cb = cb_data;\n    swig_ref     mc_ref;\n    swig_ref     *info_ref;\n    int          count;\n    swig_ref     dummy;\n    int          i;\n    unsigned int max, enabled, fixed;\n\n    if (info) {\n\tcount = ipmi_user_list_get_user_count(info);\n\tinfo_ref = malloc(count * sizeof(swig_ref *));\n\tif (!info_ref) {\n\t    count = 0;\n\t    info_ref = &dummy;\n\t}\n    } else {\n\tcount = 0;\n\tinfo_ref = &dummy;\n    }\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    for (i=0; i<count; i++) {\n\tipmi_user_t *user = ipmi_user_list_get_user(info, i);\n\tinfo_ref[i] = swig_make_ref_destruct(user, ipmi_user_t);\n    }\n    ipmi_user_list_get_max_user(info, &max);\n    ipmi_user_list_get_enabled_users(info, &enabled);\n    ipmi_user_list_get_fixed_users(info, &fixed);\n    swig_call_cb(cb, \"mc_channel_got_users_cb\", \"%p%d%d%d%d%*o\", &mc_ref, err,\n\t\t max, enabled, fixed, count, info_ref);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    for (i=0; i<count; i++)\n\tswig_free_ref(info_ref[i]);\n    free(info_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nmc_channel_set_user(ipmi_mc_t *mc,\n\t\t    int       err,\n\t\t    void      *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    mc_ref;\n\n    mc_ref = swig_make_ref(mc, ipmi_mc_t);\n    swig_call_cb(cb, \"mc_channel_set_user_cb\", \"%p%d\", &mc_ref, err);\n    swig_free_ref_check(mc_ref, ipmi_mc_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nhandle_sensor_cb(ipmi_sensor_t *sensor, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_cb\", \"%p\", &sensor_ref);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n}\n\nstatic char *\nthreshold_str(char *s, enum ipmi_thresh_e thresh)\n{\n    if (thresh == IPMI_UPPER_NON_CRITICAL) {\n\t*s = 'u'; s++; *s = 'n'; s++;\n    } else if (thresh == IPMI_UPPER_CRITICAL) {\n\t*s = 'u'; s++; *s = 'c'; s++;\n    } else if (thresh == IPMI_UPPER_NON_RECOVERABLE) {\n\t*s = 'u'; s++; *s = 'r'; s++;\n    } else if (thresh == IPMI_LOWER_NON_CRITICAL) {\n\t*s = 'l'; s++; *s = 'n'; s++;\n    } else if (thresh == IPMI_LOWER_CRITICAL) {\n\t*s = 'l'; s++; *s = 'c'; s++;\n    } else if (thresh == IPMI_LOWER_NON_RECOVERABLE) {\n\t*s = 'l'; s++; *s = 'r'; s++;\n    }\n      \n    return s;\n}\n\nstatic char *\nthreshold_from_str(char *s, int len, enum ipmi_thresh_e *thresh)\n{\n    if (len != 2)\n\treturn NULL;\n\n    if (strncasecmp(s, \"un\", 2) == 0)\n\t*thresh = IPMI_UPPER_NON_CRITICAL;\n    else if (strncasecmp(s, \"uc\", 2) == 0)\n\t*thresh = IPMI_UPPER_CRITICAL;\n    else if (strncasecmp(s, \"ur\", 2) == 0)\n\t*thresh = IPMI_UPPER_NON_RECOVERABLE;\n    else if (strncasecmp(s, \"ln\", 2) == 0)\n\t*thresh = IPMI_LOWER_NON_CRITICAL;\n    else if (strncasecmp(s, \"lc\", 2) == 0)\n\t*thresh = IPMI_LOWER_CRITICAL;\n    else if (strncasecmp(s, \"lr\", 2) == 0)\n\t*thresh = IPMI_LOWER_NON_RECOVERABLE;\n    else\n\treturn NULL;\n    return s+2;\n}\n\nstatic char *\nthreshold_event_str(char                        *s, \n\t\t    enum ipmi_thresh_e          thresh,\n\t\t    enum ipmi_event_value_dir_e value_dir,\n\t\t    enum ipmi_event_dir_e       dir)\n{\n    s = threshold_str(s, thresh);\n    if (value_dir == IPMI_GOING_HIGH) {\n\t*s = 'h'; s++;\n    } else {\n\t*s = 'l'; s++;\n    }\n    if (dir == IPMI_ASSERTION) {\n\t*s = 'a'; s++;\n    } else {\n\t*s = 'd'; s++;\n    }\n    *s = '\\0';\n    return s;\n}\n\nstatic char *\nthreshold_event_from_str(char                        *s,\n\t\t\t int                        len,\n\t\t\t enum ipmi_thresh_e          *thresh,\n\t\t\t enum ipmi_event_value_dir_e *value_dir,\n\t\t\t enum ipmi_event_dir_e       *dir)\n{\n    if (len != 4)\n\treturn NULL;\n\n    s = threshold_from_str(s, 2, thresh);\n\n    if (*s == 'l')\n\t*value_dir = IPMI_GOING_LOW;\n    else if (*s == 'h')\n\t*value_dir = IPMI_GOING_HIGH;\n    else\n\treturn NULL;\n    s++;\n    if (*s == 'a')\n\t*dir = IPMI_ASSERTION;\n    else if (*s == 'd')\n\t*dir = IPMI_DEASSERTION;\n    else\n\treturn NULL;\n    s++;\n    return s;\n}\n\nstatic char *\ndiscrete_event_from_str(char                  *s,\n\t\t\tint                   len,\n\t\t\tint                   *offset,\n\t\t\tenum ipmi_event_dir_e *dir)\n{\n    if ((len < 2) || (len > 3))\n\treturn NULL;\n\n    *offset = strtoul(s, &s, 0);\n    if (*offset >= 15)\n\treturn NULL;\n    if (*s == 'a')\n\t*dir = IPMI_ASSERTION;\n    else if (*s == 'd')\n\t*dir = IPMI_DEASSERTION;\n    else\n\treturn NULL;\n    s++;\n    return s;\n}\n\nstatic char *\ndiscrete_event_str(char                   *s, \n\t\t   int                    offset,\n\t\t   enum ipmi_event_dir_e dir)\n{\n    if (offset >= 100)\n\toffset = 99;\n    if (offset < 0)\n\toffset = 0;\n    s += sprintf(s, \"%d\", offset);\n    if (dir == IPMI_ASSERTION) {\n\t*s = 'a'; s++;\n    } else {\n\t*s = 'd'; s++;\n    }\n    *s = '\\0';\n    return s;\n}\n\nstatic char *\nthreshold_event_state_to_str(ipmi_event_state_t *events)\n{\n    int                         len = 0;\n    char                        *str;\n    enum ipmi_thresh_e          thresh;\n    enum ipmi_event_value_dir_e value_dir;\n    enum ipmi_event_dir_e       dir;\n    char                        *s;\n\n    if (ipmi_event_state_get_events_enabled(events))\n\tlen += strlen(\"events \");\n    if (ipmi_event_state_get_scanning_enabled(events))\n\tlen += strlen(\"scanning \");\n    if (ipmi_event_state_get_busy(events))\n\tlen += strlen(\"busy \");\n\n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tfor (value_dir = IPMI_GOING_LOW;\n\t     value_dir <= IPMI_GOING_HIGH;\n\t     value_dir++)\n\t{\n\t    for (dir = IPMI_ASSERTION;\n\t\t dir <= IPMI_DEASSERTION;\n\t\t dir++)\n\t    {\n\t\tif (ipmi_is_threshold_event_set(events,thresh, value_dir, dir))\n\t\t    len += 5;\n\t    }\n\t}\n    }\n\n    str = malloc(len+1);\n    str[0] = '\\0';\n    \n    if (ipmi_event_state_get_events_enabled(events))\n\tstrcat(str, \"events \");\n    if (ipmi_event_state_get_scanning_enabled(events))\n\tstrcat(str, \"scanning \");\n    if (ipmi_event_state_get_busy(events))\n\tstrcat(str, \"busy \");\n    s = str + strlen(str);\n\n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tfor (value_dir = IPMI_GOING_LOW;\n\t     value_dir <= IPMI_GOING_HIGH;\n\t     value_dir++)\n\t{\n\t    for (dir = IPMI_ASSERTION;\n\t\t dir <= IPMI_DEASSERTION;\n\t\t dir++)\n\t    {\n\t\tif (!ipmi_is_threshold_event_set(events,thresh,value_dir,dir))\n\t\t    continue;\n\n\t\ts = threshold_event_str(s, thresh, value_dir, dir);\n\t\t*s = ' ';\n\t\ts++;\n\t    }\n\t}\n    }\n    *s = '\\0';\n    len = s - str;\n    if (len > 0)\n\tstr[len-1] = '\\0'; /* Remove the final space */\n\n    return str;\n}\n\nstatic int\nstr_to_threshold_event_state(char               *str,\n\t\t\t     ipmi_event_state_t **events)\n{\n    enum ipmi_thresh_e          thresh;\n    enum ipmi_event_value_dir_e value_dir;\n    enum ipmi_event_dir_e       dir;\n    ipmi_event_state_t          *e;\n    int                         start, next;\n    int                         rv;\n\n    e = malloc(ipmi_event_state_size());\n    ipmi_event_state_init(e);\n\n    start = 0;\n    rv = next_parm(str, &start, &next);\n    while (!rv) {\n\tchar *s = str+start;\n\tint  len = next - start;\n\tif (strncasecmp(s, \"events\", len) == 0)\n\t    ipmi_event_state_set_events_enabled(e, 1);\n\telse if (strncasecmp(s, \"scanning\", len) == 0)\n\t    ipmi_event_state_set_scanning_enabled(e, 1);\n\telse if (strncasecmp(s, \"busy\", len) == 0)\n\t    ipmi_event_state_set_busy(e, 1);\n\telse {\n\t    s = threshold_event_from_str(s, len, &thresh, &value_dir, &dir);\n\t    if (!s)\n\t\tgoto out_err;\n\n\t    ipmi_threshold_event_set(e, thresh, value_dir, dir);\n\t}\n\n\tstart = next;\n\trv = next_parm(str, &start, &next);\n    }\n\n    *events = e;\n    return 0;\n\n out_err:\n    free(e);\n    return EINVAL;\n}\n\nstatic char *\ndiscrete_event_state_to_str(ipmi_event_state_t *events)\n{\n    int                   len = 0;\n    char                  *str;\n    int                   offset;\n    enum ipmi_event_dir_e dir;\n    char                  *s;\n\n    if (ipmi_event_state_get_events_enabled(events))\n\tlen += strlen(\"events \");\n    if (ipmi_event_state_get_scanning_enabled(events))\n\tlen += strlen(\"scanning \");\n    if (ipmi_event_state_get_busy(events))\n\tlen += strlen(\"busy \");\n\n    for (offset=0; offset<15; offset++) {\n\tfor (dir = IPMI_ASSERTION;\n\t     dir <= IPMI_DEASSERTION;\n\t     dir++)\n\t{\n\t    if (ipmi_is_discrete_event_set(events, offset, dir))\n\t\t    len += 4;\n\t}\n    }\n\n    str = malloc(len+1);\n    str[0] = '\\0';\n    \n    if (ipmi_event_state_get_events_enabled(events))\n\tstrcat(str, \"events \");\n    if (ipmi_event_state_get_scanning_enabled(events))\n\tstrcat(str, \"scanning \");\n    if (ipmi_event_state_get_busy(events))\n\tstrcat(str, \"busy \");\n    s = str + strlen(str);\n\n    for (offset=0; offset<15; offset++) {\n\tfor (dir = IPMI_ASSERTION;\n\t     dir <= IPMI_DEASSERTION;\n\t     dir++)\n\t{\n\t    if (! ipmi_is_discrete_event_set(events, offset, dir))\n\t\tcontinue;\n\n\t    s = discrete_event_str(s, offset, dir);\n\t    *s = ' ';\n\t    s++;\n\t}\n    }\n    *s = '\\0';\n\n    len = s - str;\n    if (len > 0)\n\tstr[len-1] = '\\0'; /* Remove the final space */\n\n    return str;\n}\n\nstatic int\nstr_to_discrete_event_state(char               *str,\n\t\t\t    ipmi_event_state_t **events)\n{\n    int                   offset;\n    enum ipmi_event_dir_e dir;\n    ipmi_event_state_t    *e;\n    int                   start, next;\n    int                   rv;\n\n    e = malloc(ipmi_event_state_size());\n    ipmi_event_state_init(e);\n\n    start = 0;\n    rv = next_parm(str, &start, &next);\n    while (!rv) {\n\tchar *s = str+start;\n\tint  len = next - start;\n\tif (strncasecmp(s, \"events\", len) == 0)\n\t    ipmi_event_state_set_events_enabled(e, 1);\n\telse if (strncasecmp(s, \"scanning\", len) == 0)\n\t    ipmi_event_state_set_scanning_enabled(e, 1);\n\telse if (strncasecmp(s, \"busy\", len) == 0)\n\t    ipmi_event_state_set_busy(e, 1);\n\telse {\n\t    s = discrete_event_from_str(s, len, &offset, &dir);\n\t    if (!s)\n\t\tgoto out_err;\n\t    ipmi_discrete_event_set(e, offset, dir);\n\t}\n\tstart = next;\n\trv = next_parm(str, &start, &next);\n    }\n\n    *events = e;\n    return 0;\n\n out_err:\n    free(e);\n    return EINVAL;\n}\n\nstatic char *\nthreshold_states_to_str(ipmi_states_t *states)\n{\n    int                len = 0;\n    char               *str;\n    enum ipmi_thresh_e thresh;\n    char               *s;\n\n    if (ipmi_is_event_messages_enabled(states))\n\tlen += strlen(\"events \");\n    if (ipmi_is_sensor_scanning_enabled(states))\n\tlen += strlen(\"scanning \");\n    if (ipmi_is_initial_update_in_progress(states))\n\tlen += strlen(\"busy \");\n\n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tif (ipmi_is_threshold_out_of_range(states, thresh))\n\t    len += 3;\n    }\n\n    str = malloc(len+1);\n    str[0] = '\\0';\n    \n    if (ipmi_is_event_messages_enabled(states))\n\tstrcat(str, \"events \");\n    if (ipmi_is_sensor_scanning_enabled(states))\n\tstrcat(str, \"scanning \");\n    if (ipmi_is_initial_update_in_progress(states))\n\tstrcat(str, \"busy \");\n    s = str + strlen(str);\n\n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tif (!ipmi_is_threshold_out_of_range(states, thresh))\n\t    continue;\n\n\ts = threshold_str(s, thresh);\n\t*s = ' ';\n\ts++;\n    }\n    *s = '\\0';\n\n    len = s - str;\n    if (len > 0)\n\tstr[len-1] = '\\0'; /* Remove the final space */\n\n    return str;\n}\n\nstatic char *\ndiscrete_states_to_str(ipmi_states_t *states)\n{\n    int  len = 0;\n    char *str;\n    int  offset;\n    char *s;\n\n    if (ipmi_is_event_messages_enabled(states))\n\tlen += strlen(\"events \");\n    if (ipmi_is_sensor_scanning_enabled(states))\n\tlen += strlen(\"scanning \");\n    if (ipmi_is_initial_update_in_progress(states))\n\tlen += strlen(\"busy \");\n\n    for (offset=0; offset<15; offset++) {\n\tif (ipmi_is_state_set(states, offset))\n\t    len += 3;\n    }\n\n    str = malloc(len+1);\n    str[0] = '\\0';\n    \n    if (ipmi_is_event_messages_enabled(states))\n\tstrcat(str, \"events \");\n    if (ipmi_is_sensor_scanning_enabled(states))\n\tstrcat(str, \"scanning \");\n    if (ipmi_is_initial_update_in_progress(states))\n\tstrcat(str, \"busy \");\n    s = str + strlen(str);\n\n    for (offset=0; offset<15; offset++) {\n\tif (! ipmi_is_state_set(states, offset))\n\t    continue;\n\n\ts += sprintf(s, \"%d\", offset);\n\t*s = ' ';\n\ts++;\n    }\n    *s = '\\0';\n\n    len = s - str;\n    if (len > 0)\n\tstr[len-1] = '\\0'; /* Remove the final space */\n\n    return str;\n}\n\nstatic char *\nthresholds_to_str(ipmi_thresholds_t *t)\n{\n    int                len = 0;\n    char               *str;\n    enum ipmi_thresh_e thresh;\n    char               dummy[3];\n    char               *s;\n    double             val;\n\n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tif (ipmi_threshold_get(t, thresh, &val) == 0)\n\t    len += snprintf(dummy, 1, \"aa %f:\", val) + 1;\n    }\n\n    str = malloc(len+1);\n    s = str;\n    \n    for (thresh = IPMI_LOWER_NON_CRITICAL;\n\t thresh <= IPMI_UPPER_NON_RECOVERABLE; \n\t thresh++)\n    {\n\tif (ipmi_threshold_get(t, thresh, &val) != 0)\n\t    continue;\n\n\tthreshold_str(dummy, thresh);\n\tdummy[2] = '\\0';\n\n\ts += sprintf(s, \"%s %f:\", dummy, val);\n\t*s = ' ';\n\ts++;\n    }\n    *s = '\\0';\n\n    len = s - str;\n    if (len > 0)\n\tstr[len-2] = '\\0'; /* Remove the final ': ' */\n\n    return str;\n}\n\nstatic int\nstr_to_thresholds(char              *str,\n\t\t  ipmi_sensor_t     *sensor,\n\t\t  ipmi_thresholds_t **thresholds)\n{\n    enum ipmi_thresh_e thresh;\n    ipmi_thresholds_t  *t;\n    int                start, next;\n    int                rv;\n    double             val;\n    int                err = EINVAL;\n\n    t = malloc(ipmi_thresholds_size());\n    ipmi_thresholds_init(t);\n\n    start = 0;\n    rv = next_colon_parm(str, &start, &next);\n    while (!rv) {\n\tchar *s = str+start;\n\tchar *endstr;\n\tint  len = next - start;\n\tif (len < 4)\n\t    goto out_err;\n\n\tif (strncasecmp(s, \"un \", 3) == 0)\n\t    thresh = IPMI_UPPER_NON_CRITICAL;\n\telse if (strncasecmp(s, \"uc \", 3) == 0)\n\t    thresh = IPMI_UPPER_CRITICAL;\n\telse if (strncasecmp(s, \"ur \", 3) == 0)\n\t    thresh = IPMI_UPPER_NON_RECOVERABLE;\n\telse if (strncasecmp(s, \"ln \", 3) == 0)\n\t    thresh = IPMI_LOWER_NON_CRITICAL;\n\telse if (strncasecmp(s, \"lc \", 3) == 0)\n\t    thresh = IPMI_LOWER_CRITICAL;\n\telse if (strncasecmp(s, \"lr \", 3) == 0)\n\t    thresh = IPMI_LOWER_NON_RECOVERABLE;\n\telse\n\t    goto out_err;\n\n\tval = strtod(s+3, &endstr);\n\tif ((*endstr != ':') && (*endstr != '\\0'))\n\t    goto out_err;\n\n\trv = ipmi_threshold_set(t, sensor, thresh, val);\n\tif (rv) {\n\t    err = rv;\n\t    goto out_err;\n\t}\n\tstart = next;\n\trv = next_colon_parm(str, &start, &next);\n    }\n\n    *thresholds = t;\n    return 0;\n\n out_err:\n    free(t);\n    return err;\n}\n\nstatic int\nsensor_threshold_event_handler(ipmi_sensor_t               *sensor,\n\t\t\t       enum ipmi_event_dir_e       dir,\n\t\t\t       enum ipmi_thresh_e          threshold,\n\t\t\t       enum ipmi_event_value_dir_e high_low,\n\t\t\t       enum ipmi_value_present_e   value_present,\n\t\t\t       unsigned int                raw_value,\n\t\t\t       double                      value,\n\t\t\t       void                        *cb_data,\n\t\t\t       ipmi_event_t                *event)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    char        eventstr[5];\n    int         raw_set = 0;\n    int         value_set = 0;\n    swig_ref    event_ref;\n    int         rv = IPMI_EVENT_NOT_HANDLED;\n\n    if (value_present == IPMI_RAW_VALUE_PRESENT)\n\traw_set = 1;\n    if (value_present == IPMI_BOTH_VALUES_PRESENT) {\n\traw_set = 1;\n\tvalue_set = 1;\n    }\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    threshold_event_str(eventstr, threshold, high_low, dir);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb_rv('I', &rv,\n\t\t    cb, \"threshold_event_cb\", \"%p%s%d%d%d%f%p\", &sensor_ref,\n\t\t    eventstr, raw_set, raw_value, value_set, value,\n\t\t    &event_ref);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    swig_free_ref(event_ref);\n    return rv;\n}\n\nstatic void\nsensor_threshold_event_handler_cl(ipmi_sensor_threshold_event_cb handler,\n\t\t\t\t  void                           *handler_data,\n\t\t\t\t  void                           *cb_data)\n{\n    if (handler != sensor_threshold_event_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic int\nsensor_discrete_event_handler(ipmi_sensor_t         *sensor,\n\t\t\t      enum ipmi_event_dir_e dir,\n\t\t\t      int                   offset,\n\t\t\t      int                   severity,\n\t\t\t      int                   prev_severity,\n\t\t\t      void                  *cb_data,\n\t\t\t      ipmi_event_t          *event)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    char        eventstr[5];\n    swig_ref    event_ref;\n    int         rv = IPMI_EVENT_NOT_HANDLED;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    discrete_event_str(eventstr, offset, dir);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb_rv('I', &rv,\n\t\t    cb, \"discrete_event_cb\", \"%p%s%d%d%p\", &sensor_ref,\n\t\t    eventstr, severity, prev_severity, &event_ref);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    swig_free_ref(event_ref);\n    return rv;\n}\n\nstatic void\nsensor_discrete_event_handler_cl(ipmi_sensor_discrete_event_cb handler,\n\t\t\t\t void                          *handler_data,\n\t\t\t\t void                          *cb_data)\n{\n    if (handler != sensor_discrete_event_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\n/*\n * For the event method call_handler to use.\n */\ntypedef struct event_call_handler_data_s\n{\n    ipmi_event_t          *event;\n    swig_cb_val           *handlers_val;\n    ipmi_event_handlers_t *handlers;\n    int                   rv;\n} event_call_handler_data_t;\n\nstatic void event_call_handler_mc_cb(ipmi_mc_t *mc, void *cb_data)\n{\n    event_call_handler_data_t *info = cb_data;\n    ipmi_domain_t             *domain = ipmi_mc_get_domain(mc);\n\n    info->rv = ipmi_event_call_handler(domain, info->handlers,\n\t\t\t\t       info->event, info->handlers_val);\n}\n\n/* A generic callback for a lot of things. */\nstatic void\nsensor_event_enable_handler(ipmi_sensor_t *sensor,\n\t\t\t    int           err,\n\t\t\t    void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_event_enable_cb\", \"%p%d\", &sensor_ref, err);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_get_event_enables_handler(ipmi_sensor_t      *sensor,\n\t\t\t\t int                err,\n\t\t\t\t ipmi_event_state_t *states,\n\t\t\t\t void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    char        *st;\n\n    if (ipmi_sensor_get_event_reading_type(sensor)\n\t== IPMI_EVENT_READING_TYPE_THRESHOLD)\n    {\n\tst = threshold_event_state_to_str(states);\n    } else {\n\tst = discrete_event_state_to_str(states);\n    }\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_get_event_enable_cb\", \"%p%d%s\",\n\t\t &sensor_ref, err, st);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    free(st);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_rearm_handler(ipmi_sensor_t      *sensor,\n\t\t     int                err,\n\t\t     void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_rearm_cb\", \"%p%d\", &sensor_ref, err);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_get_hysteresis_handler(ipmi_sensor_t *sensor,\n\t\t\t      int           err,\n\t\t\t      unsigned int  positive_hysteresis,\n\t\t\t      unsigned int  negative_hysteresis,\n\t\t\t      void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_get_hysteresis_cb\", \"%p%d%d%d\", &sensor_ref, err,\n\t\t positive_hysteresis, negative_hysteresis);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_set_hysteresis_handler(ipmi_sensor_t      *sensor,\n\t\t\t      int                err,\n\t\t\t      void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_set_hysteresis_cb\", \"%p%d\", &sensor_ref, err);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_set_thresholds_handler(ipmi_sensor_t      *sensor,\n\t\t\t      int                err,\n\t\t\t      void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_set_thresholds_cb\", \"%p%d\", &sensor_ref, err);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void sensor_get_thresholds_handler(ipmi_sensor_t     *sensor,\n\t\t\t\t\t  int               err,\n\t\t\t\t\t  ipmi_thresholds_t *th,\n\t\t\t\t\t  void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    char        *thstr = thresholds_to_str(th);\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    swig_call_cb(cb, \"sensor_get_thresholds_cb\", \"%p%d%s\", &sensor_ref, err,\n\t\t thstr);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    free(thstr);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_get_reading_handler(ipmi_sensor_t             *sensor,\n\t\t\t   int                       err,\n\t\t\t   enum ipmi_value_present_e value_present,\n\t\t\t   unsigned int              raw_value,\n\t\t\t   double                    value,\n\t\t\t   ipmi_states_t             *states,\n\t\t\t   void                      *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    int         raw_set = 0;\n    int         value_set = 0;\n    char        *statestr;\n\n    if (value_present == IPMI_RAW_VALUE_PRESENT)\n\traw_set = 1;\n    if (value_present == IPMI_BOTH_VALUES_PRESENT) {\n\traw_set = 1;\n\tvalue_set = 1;\n    }\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    statestr = threshold_states_to_str(states);\n    swig_call_cb(cb, \"threshold_reading_cb\", \"%p%d%d%d%d%f%s\", &sensor_ref,\n\t\t err, raw_set, raw_value, value_set, value, statestr);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    free(statestr);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsensor_get_states_handler(ipmi_sensor_t *sensor,\n\t\t\t  int           err,\n\t\t\t  ipmi_states_t *states,\n\t\t\t  void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    sensor_ref;\n    char        *statestr;\n\n    sensor_ref = swig_make_ref(sensor, ipmi_sensor_t);\n    statestr = discrete_states_to_str(states);\n    swig_call_cb(cb, \"discrete_states_cb\", \"%p%d%s\", &sensor_ref,\n\t\t err, statestr);\n    swig_free_ref_check(sensor_ref, ipmi_sensor_t);\n    free(statestr);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic int\nstr_to_color(char *s, int len, int *color)\n{\n    int i;\n\n    for (i=IPMI_CONTROL_COLOR_BLACK; i<=IPMI_CONTROL_COLOR_ORANGE; i++) {\n\tif (strncasecmp(s, ipmi_get_color_string(i), len) == 0) {\n\t    *color = i;\n\t    return 0;\n\t}\n    }\n\n    return EINVAL;\n}\n\nstatic int\nstr_to_light_setting(char *s, ipmi_light_setting_t **setting)\n{\n    int                  rv;\n    ipmi_light_setting_t *e;\n    int                  start, next;\n    int                  count;\n\n    count = 0;\n    start = 0;\n    rv = next_colon_parm(s, &start, &next);\n    while (!rv) {\n\tstart = next;\n\tcount++;\n\trv = next_colon_parm(s, &start, &next);\n    }\n    if (count == 0)\n\treturn EINVAL;\n\n    e = ipmi_alloc_light_settings(count);\n\n    count = 0;\n    start = 0;\n    rv = next_colon_parm(s, &start, &next);\n    while (!rv) {\n\tint  color, on_time, off_time;\n\tchar *ms;\n\tint  mstart, mnext;\n\tchar *endstr;\n\tchar buf[100];\n\tint  len = next - start;\n\n\tif (len >= 100)\n\t    goto out_err;\n\n\tmemcpy(buf, s+start, len);\n\tbuf[len] = '\\0';\n\n\tms = buf;\n\tmstart = 0;\n\trv = next_parm(ms, &mstart, &mnext);\n\tif (rv)\n\t    goto out_err;\n\tlen = mnext - mstart;\n\tif ((len == 2) && (strncasecmp(ms+mstart, \"lc\", 2) == 0)) {\n\t    rv = ipmi_light_setting_set_local_control(e, count, 1);\n\t    if (rv)\n\t\tgoto out_err;\n\n\t    mstart = mnext;\n\t    rv = next_parm(ms, &mstart, &mnext);\n\t    if (rv)\n\t\tgoto out_err;\n\t}\n\n\trv = str_to_color(ms+mstart, mnext-mstart, &color);\n\tif (rv)\n\t    goto out_err;\n\n\tmstart = mnext;\n\trv = next_parm(ms, &mstart, &mnext);\n\tif (rv)\n\t    goto out_err;\n\ton_time = strtoul(ms+mstart, &endstr, 0);\n\tif (endstr != (ms+mnext))\n\t    goto out_err;\n\n\tmstart = mnext;\n\trv = next_parm(ms, &mstart, &mnext);\n\tif (rv)\n\t    goto out_err;\n\toff_time = strtoul(ms+mstart, &endstr, 0);\n\tif (endstr != (ms+mnext))\n\t    goto out_err;\n\n\trv = ipmi_light_setting_set_color(e, count, color);\n\trv |= ipmi_light_setting_set_on_time(e, count, on_time);\n\trv |= ipmi_light_setting_set_off_time(e, count, off_time);\n\tif (rv)\n\t    goto out_err;\n\n\tcount++;\n\n\tstart = next;\n\trv = next_colon_parm(s, &start, &next);\n    }\n    \n    *setting = e;\n    return 0;\n\n out_err:\n    ipmi_free_light_settings(e);\n    return EINVAL;\n}\n\nstatic char *\nlight_setting_to_str(ipmi_light_setting_t *e)\n{\n    char *s, *str;\n    int  i;\n    int  count = ipmi_light_setting_get_count(e);\n    char dummy[1];\n    int  size = 0;\n\n    for (i = 0; i < count; i++) {\n\tint val;\n\tsize += 1; /* For the colon */\n\tval = 0;\n\tipmi_light_setting_in_local_control(e, i, &val);\n\tif (val)\n\t    size += 3;\n\tval = 0;\n\tipmi_light_setting_get_color(e, i, &val);\n\tsize += strlen(ipmi_get_color_string(val)) + 1;\n\tval = 0;\n\tipmi_light_setting_get_on_time(e, i, &val);\n\tsize += snprintf(dummy, 1, \"%d \", val);\n\tval = 0;\n\tipmi_light_setting_get_off_time(e, i, &val);\n\tsize += snprintf(dummy, 1, \"%d \", val);\n    }\n\n    str = malloc(size + 1);\n    if (!str)\n\treturn NULL;\n    s = str;\n\n    for (i = 0; i < count; i++) {\n\tint val;\n\tconst char *ov;\n\n\tval = 0;\n\tipmi_light_setting_in_local_control(e, i, &val);\n\tif (val) {\n\t    strcpy(s, \"lc \");\n\t    s += 3;\n\t}\n\n\tval = 0;\n\tipmi_light_setting_get_color(e, i, &val);\n\tov = ipmi_get_color_string(val);\n\tstrcpy(s, ov);\n\ts += strlen(ov);\n\t*s = ' ';\n\ts++;\n\n\tval = 0;\n\tipmi_light_setting_get_on_time(e, i, &val);\n\ts += sprintf(s, \"%d \", val);\n\n\tval = 0;\n\tipmi_light_setting_get_off_time(e, i, &val);\n\ts += sprintf(s, \"%d\", val);\n\n\t*s = ':';\n\ts++;\n    }\n    if (s != str) {\n\t/* Remove the final colon. */\n\ts--;\n\t*s = '\\0';\n    } else {\n\t*s = '\\0';\n    }\n\n    return str;\n}\n\nstatic void\nhandle_control_cb(ipmi_control_t *control, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    swig_call_cb(cb, \"control_cb\", \"%p\", &control_ref);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n}\n\nstatic void\ncontrol_val_set_handler(ipmi_control_t *control, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    swig_call_cb(cb, \"control_set_val_cb\", \"%p%d\", &control_ref, err);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\ncontrol_val_get_handler(ipmi_control_t *control, int err, int *val,\n\t\t\tvoid *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    if (err) {\n\t/* On err, value may be NULL */\n\tint dummy;\n\tswig_call_cb(cb, \"control_get_val_cb\", \"%p%d%*p\", &control_ref, err,\n\t\t     1, &dummy);\n    } else {\n\tswig_call_cb(cb, \"control_get_val_cb\", \"%p%d%*p\", &control_ref, err,\n\t\t     ipmi_control_get_num_vals(control), val);\n    }\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\ncontrol_val_get_light_handler(ipmi_control_t *control, int err,\n\t\t\t      ipmi_light_setting_t *val,\n\t\t\t      void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n    char        *str;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    str = light_setting_to_str(val);\n    if (!str)\n\tstr = \"err\";\n    swig_call_cb(cb, \"control_get_light_cb\", \"%p%d%s\", &control_ref, err, str);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\ncontrol_val_get_id_handler(ipmi_control_t *control, int err,\n\t\t\t   unsigned char *val, int length,\n\t\t\t   void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    swig_call_cb(cb, \"control_get_id_cb\", \"%p%d%*s\", &control_ref, err,\n\t\t length, val);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic int\ncontrol_val_event_handler(ipmi_control_t *control, int *valid_vals, int *val,\n\t\t\t  void *cb_data, ipmi_event_t *event)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    control_ref;\n    swig_ref    event_ref;\n    int         rv = IPMI_EVENT_NOT_HANDLED;\n\n    control_ref = swig_make_ref(control, ipmi_control_t);\n    event_ref = swig_make_ref_destruct(ipmi_event_dup(event), ipmi_event_t);\n    swig_call_cb_rv('I', &rv,\n\t\t    cb, \"control_event_val_cb\", \"%p%p%*p%*p\", &control_ref,\n\t\t    &event_ref,\n\t\t    ipmi_control_get_num_vals(control), valid_vals,\n\t\t    ipmi_control_get_num_vals(control), val);\n    swig_free_ref_check(control_ref, ipmi_control_t);\n    swig_free_ref(event_ref);\n    return rv;\n}\n\nstatic void\ncontrol_val_event_handler_cl(ipmi_control_val_event_cb handler,\n\t\t\t     void                      *handler_data,\n\t\t\t     void                      *cb_data)\n{\n    if (handler != control_val_event_handler)\n\treturn;\n    swig_cb_val *handler_val = handler_data;\n    deref_swig_cb_val(handler_val);\n}\n\nstatic void\nlanparm_get_parm(ipmi_lanparm_t *lanparm,\n\t\t int            err,\n\t\t unsigned char  *data,\n\t\t unsigned int   data_len,\n\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    lanparm_ref;\n\n    lanparm_ref = swig_make_ref_destruct(lanparm, ipmi_lanparm_t);\n    swig_call_cb(cb, \"lanparm_got_parm_cb\", \"%p%d%*s\", &lanparm_ref, err,\n\t\t data_len, (char *) data);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(lanparm_ref);\n}\n\nstatic void\nlanparm_set_parm(ipmi_lanparm_t *lanparm,\n\t\t int            err,\n\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    lanparm_ref;\n\n    if (cb) {\n\tlanparm_ref = swig_make_ref_destruct(lanparm, ipmi_lanparm_t);\n\tswig_call_cb(cb, \"lanparm_set_parm_cb\", \"%p%d\", &lanparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(lanparm_ref);\n    }\n}\n\nstatic void\nlanparm_get_config(ipmi_lanparm_t    *lanparm,\n\t\t   int               err,\n\t\t   ipmi_lan_config_t *config,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    lanparm_ref;\n    swig_ref    config_ref;\n\n    lanparm_ref = swig_make_ref_destruct(lanparm, ipmi_lanparm_t);\n    config_ref = swig_make_ref_destruct(config, ipmi_lan_config_t);\n    swig_call_cb(cb, \"lanparm_got_config_cb\", \"%p%d%p\", &lanparm_ref, err,\n\t\t &config_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(lanparm_ref);\n    swig_free_ref(config_ref);\n}\n\nstatic void\nlanparm_set_config(ipmi_lanparm_t    *lanparm,\n\t\t   int               err,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    lanparm_ref;\n\n    if (cb) {\n\tlanparm_ref = swig_make_ref_destruct(lanparm, ipmi_lanparm_t);\n\tswig_call_cb(cb, \"lanparm_set_config_cb\", \"%p%d\", &lanparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(lanparm_ref);\n    }\n}\n\nstatic void\nlanparm_clear_lock(ipmi_lanparm_t    *lanparm,\n\t\t   int               err,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    lanparm_ref;\n\n    if (cb) {\n\tlanparm_ref = swig_make_ref_destruct(lanparm, ipmi_lanparm_t);\n\tswig_call_cb(cb, \"lanparm_clear_lock_cb\", \"%p%d\", &lanparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(lanparm_ref);\n    }\n}\n\nstatic void\nget_pef(ipmi_pef_t *pef, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n\n    pef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n    ipmi_pef_ref(pef);\n    swig_call_cb(cb, \"got_pef_cb\", \"%p%d\", &pef_ref, err);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(pef_ref);\n}\n\nstatic void\npef_get_parm(ipmi_pef_t    *pef,\n\t     int           err,\n\t     unsigned char *data,\n\t     unsigned int  data_len,\n\t     void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n\n    pef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n    swig_call_cb(cb, \"pef_got_parm_cb\", \"%p%d%*s\", &pef_ref, err,\n\t\t data_len, (char *) data);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(pef_ref);\n}\n\nstatic void\npef_set_parm(ipmi_pef_t *pef,\n\t     int        err,\n\t     void       *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n\n    if (cb) {\n\tpef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n\tswig_call_cb(cb, \"pef_set_parm_cb\", \"%p%d\", &pef_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(pef_ref);\n    }\n}\n\nstatic void\npef_get_config(ipmi_pef_t        *pef,\n\t       int               err,\n\t       ipmi_pef_config_t *config,\n\t       void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n    swig_ref    config_ref;\n\n    pef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n    config_ref = swig_make_ref_destruct(config, ipmi_pef_config_t);\n    swig_call_cb(cb, \"pef_got_config_cb\", \"%p%d%p\", &pef_ref, err,\n\t\t &config_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(pef_ref);\n    swig_free_ref(config_ref);\n}\n\nstatic void\npef_set_config(ipmi_pef_t    *pef,\n\t       int           err,\n\t       void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n\n    if (cb) {\n\tpef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n\tswig_call_cb(cb, \"pef_set_config_cb\", \"%p%d\", &pef_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(pef_ref);\n    }\n}\n\nstatic void\npef_clear_lock(ipmi_pef_t    *pef,\n\t       int           err,\n\t       void          *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pef_ref;\n\n    if (cb) {\n\tpef_ref = swig_make_ref_destruct(pef, ipmi_pef_t);\n\tswig_call_cb(cb, \"pef_clear_lock_cb\", \"%p%d\", &pef_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(pef_ref);\n    }\n}\n\nstatic void\nget_pet(ipmi_pet_t *pet, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    pet_ref;\n\n    pet_ref = swig_make_ref_destruct(pet, ipmi_pet_t);\n    ipmi_pet_ref(pet);\n    swig_call_cb(cb, \"got_pet_cb\", \"%p%d\", &pet_ref, err);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(pet_ref);\n}\n\nstatic void\nevent_deleted_handler(ipmi_domain_t *domain, int err, void *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"event_delete_cb\", \"%p%d\", &domain_ref, err);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_connection_state_change_cb(ipmi_sol_conn_t *conn,\n\t\t\t       ipmi_sol_state  state,\n\t\t\t       int             error,\n\t\t\t       void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_connection_state_change\", \"%p%d%d\",\n\t\t &conn_ref, state, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n}\n\n\nstatic int\nsol_data_received_cb(ipmi_sol_conn_t *conn,\n\t\t     const void      *buf,\n\t\t     size_t          count,\n\t\t     void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n    int         rv = 0;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb_rv('i', &rv, cb, \"sol_data_received\", \"%p%*b\",\n\t\t    &conn_ref, count, buf);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    return rv;\n}\n\nstatic void\nsol_break_detected_cb(ipmi_sol_conn_t *conn,\n\t\t      void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_break_detected\", \"%p\", &conn_ref);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n}\n\nstatic void\nsol_bmc_transmit_overrun_cb(ipmi_sol_conn_t *conn,\n\t\t\t    void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_bmc_transmit_overrun\", \"%p\", &conn_ref);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n}\n\nstatic void\nsol_write_complete_cb(ipmi_sol_conn_t *conn,\n\t\t      int             error,\n\t\t      void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_write_complete\", \"%p%d\", &conn_ref, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_send_break_cb(ipmi_sol_conn_t *conn,\n\t\t  int             error,\n\t\t  void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_send_break\", \"%p%d\", &conn_ref, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_set_CTS_assertable_cb(ipmi_sol_conn_t *conn,\n\t\t\t  int             error,\n\t\t\t  void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_set_CTS_assertable\", \"%p%d\", &conn_ref, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_set_DCD_DSR_asserted_cb(ipmi_sol_conn_t *conn,\n\t\t\t    int             error,\n\t\t\t    void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_set_DCD_DSR_asserted\", \"%p%d\", &conn_ref, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_set_RI_asserted_cb(ipmi_sol_conn_t *conn,\n\t\t       int             error,\n\t\t       void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_set_RI_asserted\", \"%p%d\", &conn_ref, error);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsol_flush_complete_cb(ipmi_sol_conn_t *conn,\n\t\t      int             error,\n\t\t      int             queue_selectors_flushed,\n\t\t      void            *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    conn_ref;\n\n    conn_ref = swig_make_ref(conn, ipmi_sol_conn_t);\n    swig_call_cb(cb, \"sol_flush_complete\", \"%p%d%d\", &conn_ref, error,\n\t\t queue_selectors_flushed);\n    swig_free_ref_check(conn_ref, ipmi_sol_conn_t);\n    /* One-time callback */\n    deref_swig_cb_val(cb);\n}\n\nstatic void\nsolparm_get_parm(ipmi_solparm_t *solparm,\n\t\t int            err,\n\t\t unsigned char  *data,\n\t\t unsigned int   data_len,\n\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    solparm_ref;\n\n    solparm_ref = swig_make_ref_destruct(solparm, ipmi_solparm_t);\n    swig_call_cb(cb, \"solparm_got_parm_cb\", \"%p%d%*s\", &solparm_ref, err,\n\t\t data_len, (char *) data);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(solparm_ref);\n}\n\nstatic void\nsolparm_set_parm(ipmi_solparm_t *solparm,\n\t\t int            err,\n\t\t void           *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    solparm_ref;\n\n    if (cb) {\n\tsolparm_ref = swig_make_ref_destruct(solparm, ipmi_solparm_t);\n\tswig_call_cb(cb, \"solparm_set_parm_cb\", \"%p%d\", &solparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(solparm_ref);\n    }\n}\n\nstatic void\nsolparm_get_config(ipmi_solparm_t    *solparm,\n\t\t   int               err,\n\t\t   ipmi_sol_config_t *config,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    solparm_ref;\n    swig_ref    config_ref;\n\n    solparm_ref = swig_make_ref_destruct(solparm, ipmi_solparm_t);\n    config_ref = swig_make_ref_destruct(config, ipmi_sol_config_t);\n    swig_call_cb(cb, \"solparm_got_config_cb\", \"%p%d%p\", &solparm_ref, err,\n\t\t &config_ref);\n    /* One-time call, get rid of the CB. */\n    deref_swig_cb_val(cb);\n    swig_free_ref(solparm_ref);\n    swig_free_ref(config_ref);\n}\n\nstatic void\nsolparm_set_config(ipmi_solparm_t    *solparm,\n\t\t   int               err,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    solparm_ref;\n\n    if (cb) {\n\tsolparm_ref = swig_make_ref_destruct(solparm, ipmi_solparm_t);\n\tswig_call_cb(cb, \"solparm_set_config_cb\", \"%p%d\", &solparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(solparm_ref);\n    }\n}\n\nstatic void\nsolparm_clear_lock(ipmi_solparm_t    *solparm,\n\t\t   int               err,\n\t\t   void              *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    solparm_ref;\n\n    if (cb) {\n\tsolparm_ref = swig_make_ref_destruct(solparm, ipmi_solparm_t);\n\tswig_call_cb(cb, \"solparm_clear_lock_cb\", \"%p%d\", &solparm_ref, err);\n\t/* One-time call, get rid of the CB. */\n\tderef_swig_cb_val(cb);\n\tswig_free_ref(solparm_ref);\n    }\n}\n\n#if defined(HAVE_GLIB) || defined(HAVE_GLIB12)\n#include <OpenIPMI/ipmi_glib.h>\nstatic void\nglib_handle_log(const char *domain,\n\t\tconst char *pfx,\n\t\tconst char *message)\n{\n    swig_cb_val *handler = swig_log_handler;\n\n    if (! handler)\n\treturn;\n\n    swig_call_cb(handler, \"log\", \"%s%s\", pfx, message);\n}\n\n#if defined(HAVE_GLIB) && defined(HAVE_GLIB12)\n#include <dlfcn.h>\n#endif\n\n/*\n * Initialize the OS handler with the glib version.\n */\nos_handler_t *\ninit_glib_shim(char *ver)\n{\n    os_handler_t *swig_os_hnd;\n#if defined(HAVE_GLIB) && defined(HAVE_GLIB12)\n/* Two versions of glib.  Go through special machinations to make this\n   work right.  We can't directly link with glib, we have to dlopen it\n   to get the right version. */\n\n    static char  *olibst = \"libOpenIPMIglib%s.so\";\n    char         dummy[1];\n    char         *name;\n    void         *hndl;\n    os_handler_t *(*get)(int);\n    void         (*setlog)(void (*hndlr)(const char *domain,\n\t\t\t\t\t const char *pfx,\n\t\t\t\t\t const char *msg));\n    int          len;\n\n    len = snprintf(dummy, 1, olibst, ver);\n    name = malloc(len+1);\n    if (!name) {\n\tfprintf(stderr, \"Unable to allocation memory for glib\\n\");\n\tabort();\n    }\n    snprintf(name, len+1, olibst, ver);\n    hndl = dlopen(name, RTLD_LAZY | RTLD_GLOBAL);\n    if (!hndl) {\n\tfprintf(stderr, \"Unable to open the glib library: %s: %s\\n\",\n\t\tname, dlerror());\n\tfree(name);\n\tabort();\n    }\n    free(name);\n    get = dlsym(hndl, \"ipmi_glib_get_os_handler\");\n    if (!get) {\n\tfprintf(stderr,\n\t\t\"Could not find glib function: ipmi_glib_get_os_handler: %s\\n\",\n\t\tdlerror());\n\tabort();\n    }\n    setlog = dlsym(hndl, \"ipmi_glib_set_log_handler\");\n    if (!setlog) {\n\tfprintf(stderr,\n\t\t\"Could not find glib function: ipmi_glib_set_log_handler: %s\\n\",\n\t\tdlerror());\n\tabort();\n    }\n\n    swig_os_hnd = get(0);\n    swig_os_hnd->set_log_handler(swig_os_hnd, openipmi_swig_vlog);\n    ipmi_init(swig_os_hnd);\n    ipmi_cmdlang_init(swig_os_hnd);\n    setlog(glib_handle_log);\n#else\n    swig_os_hnd = ipmi_glib_get_os_handler(0);\n    swig_os_hnd->set_log_handler(swig_os_hnd, openipmi_swig_vlog);\n    ipmi_init(swig_os_hnd);\n    ipmi_cmdlang_init(swig_os_hnd);\n    ipmi_glib_set_log_handler(glib_handle_log);\n#endif\n    return swig_os_hnd;\n}\n#endif\n\n%}\n\ntypedef struct {\n} ipmi_domain_t;\n\ntypedef struct {\n} ipmi_domain_id_t;\n\ntypedef struct {\n} ipmi_args_t;\n\ntypedef struct {\n} ipmi_entity_t;\n\ntypedef struct {\n} ipmi_entity_id_t;\n\ntypedef struct {\n} ipmi_fru_t;\n\ntypedef struct {\n} ipmi_fru_node_t;\n\ntypedef struct {\n} ipmi_mc_t;\n\ntypedef struct {\n} ipmi_mcid_t;\n\ntypedef struct {\n} ipmi_event_t;\n\ntypedef struct {\n} ipmi_sensor_t;\n\ntypedef struct {\n} ipmi_sensor_id_t;\n\ntypedef struct {\n} ipmi_control_t;\n\ntypedef struct {\n} ipmi_control_id_t;\n\ntypedef struct {\n} ipmi_channel_info_t;\n\ntypedef struct {\n} ipmi_channel_access_t;\n\ntypedef struct {\n} ipmi_user_t;\n\ntypedef struct {\n} ipmi_lanparm_t;\n\ntypedef struct {\n} ipmi_lan_config_t;\n\ntypedef struct {\n} ipmi_pef_t;\n\ntypedef struct {\n} ipmi_pef_config_t;\n\ntypedef struct {\n} ipmi_pet_t;\n\ntypedef struct {\n} ipmi_cmdlang_t;\n\ntypedef struct {\n} ipmi_cmdlang_event_t;\n\ntypedef struct {\n} ipmi_sol_conn_t;\n\ntypedef struct {\n} ipmi_sol_config_t;\n\ntypedef struct {\n} ipmi_solparm_t;\n\n%inline %{\nvoid enable_debug_malloc()\n{\n    if (!swig_os_hnd) {\n\tDEBUG_MALLOC_ENABLE();\n    }\n}\n\nvoid enable_debug_msg()\n{\n    DEBUG_MSG_ENABLE();\n}\n\nvoid disable_debug_msg()\n{\n    DEBUG_MSG_DISABLE();\n}\n\nvoid enable_debug_rawmsg()\n{\n    DEBUG_RAWMSG_ENABLE();\n}\n\nvoid disable_debug_rawmsg()\n{\n    DEBUG_RAWMSG_DISABLE();\n}\n\nint\ninit_glib(void)\n{\n#ifdef HAVE_GLIB\n    if (swig_os_hnd)\n\treturn 0;\n#ifdef OpenIPMI_HAVE_INIT_LANG\n    init_lang();\n#endif\n    swig_os_hnd = init_glib_shim(\"\");\n#else\n    return ENOSYS;\n#endif\n}\n\nint\ninit_glib12(void)\n{\n#ifdef HAVE_GLIB12\n    if (swig_os_hnd)\n\treturn 0;\n#ifdef OpenIPMI_HAVE_INIT_LANG\n    init_lang();\n#endif\n    swig_os_hnd = init_glib_shim(\"12\");\n#else\n    return ENOSYS;\n#endif\n}\n\n#if defined(HAVE_TCL)\n#include <OpenIPMI/ipmi_tcl.h>\n#endif\n\nint\ninit_tcl(void)\n{\n#ifdef HAVE_TCL\n    if (swig_os_hnd)\n\treturn 0;\n#ifdef OpenIPMI_HAVE_INIT_LANG\n    init_lang();\n#endif\n    swig_os_hnd = ipmi_tcl_get_os_handler(0);\n    swig_os_hnd->set_log_handler(swig_os_hnd, openipmi_swig_vlog);\n    ipmi_init(swig_os_hnd);\n    ipmi_cmdlang_init(swig_os_hnd);\n    return 0;\n#else\n    return ENOSYS;\n#endif\n}\n\n/*\n * Initialize the OS handler and use the POSIX version.\n */\nint\ninit_posix(void)\n{\n    if (swig_os_hnd)\n\treturn 0;\n#ifdef OpenIPMI_HAVE_INIT_LANG\n    init_lang();\n#endif\n#ifdef USE_POSIX_THREADS\n    swig_os_hnd = ipmi_posix_thread_setup_os_handler(SIGUSR1);\n#else\n    swig_os_hnd = ipmi_posix_setup_os_handler();\n#endif\n    swig_os_hnd->set_log_handler(swig_os_hnd, openipmi_swig_vlog);\n    ipmi_init(swig_os_hnd);\n    ipmi_cmdlang_init(swig_os_hnd);\n    return 0;\n}\n\n/*\n * Initialize the OS handler with the default version.  This is glib\n * if it is present, POSIX if it is not.\n */\nint\ninit(void)\n{\n    int rv;\n\n    if (rv = init_glib())\n        rv = init_posix();\n    return rv;\n}\n\n/*\n * Free up all the memory used by OpenIPMI.\n */\nvoid\nshutdown_everything()\n{\n    IPMI_SWIG_C_CB_ENTRY\n    ipmi_cmdlang_cleanup();\n    ipmi_shutdown();\n    swig_os_hnd->free_os_handler(swig_os_hnd);\n    swig_os_hnd = NULL;\n#ifdef OpenIPMI_HAVE_CLEANUP_LANG\n    void cleanup_lang();\n#endif\n    IPMI_SWIG_C_CB_EXIT\n}\n\n/*\n * Perform one operation.  The first parameter is a timeout in\n * milliseconds.\n */\nvoid\nwait_io(int timeout)\n{\n    struct timeval tv = { (timeout / 1000), ((timeout + 999) % 1000) };\n    IPMI_SWIG_C_BLOCK_ENTRY\n    swig_os_hnd->perform_one_op(swig_os_hnd, &tv);\n    IPMI_SWIG_C_BLOCK_EXIT\n}\n\n%}\n\n/*\n * Error return constants returned by OpenIPMI.\n */\n%constant int ebadf = EBADF;\n%constant int einval = EINVAL;\n%constant int e2big = E2BIG;\n%constant int enomem = ENOMEM;\n%constant int enoent = ENOENT;\n%constant int ecanceled = ECANCELED;\n%constant int enosys = ENOSYS;\n%constant int eexist = EEXIST;\n%constant int eagain = EAGAIN;\n%constant int eperm = EPERM;\n\n/*\n * Return values for event handlers\n */\n%constant int EVENT_NOT_HANDLED = IPMI_EVENT_NOT_HANDLED;\n%constant int EVENT_HANDLED = IPMI_EVENT_HANDLED;\n%constant int EVENT_HANDLED_PASS = IPMI_EVENT_HANDLED_PASS;\n\n/* These two defines simplify the functions that do addition/removal\n   of callbacks.  The type is the object type (domain, entity, etc)\n   and the name is the stuff in the middle of the name, ie\n   (ipmi_<type>_add_<name>_handler.  The function that will be called\n   with the info is <type>_<name>_handler. */\n#define cb_add(type, name, func) \\\n\tint         rv;\t\t\t\t\t\t\t\\\n\tswig_cb_val *handler_val;\t\t\t\t\t\\\n\tIPMI_SWIG_C_CB_ENTRY\t\t\t\t\t\t\\\n\tif (! valid_swig_cb(handler, func))\t\t\t\t\\\n\t    rv = EINVAL;\t\t\t\t\t\t\\\n\telse {\t\t\t\t\t\t\t\t\\\n\t    handler_val = ref_swig_cb(handler, func);\t\t\t\\\n\t    rv = ipmi_ ## type ## _add_ ## name ## _handler\t\t\\\n\t\t (self, type ## _ ## name ## _handler, handler_val);\t\\\n\t    if (rv)\t\t\t\t\t\t\t\\\n\t\tderef_swig_cb_val(handler_val);\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\tIPMI_SWIG_C_CB_EXIT\t\t\t\t\t\t\\\n\treturn rv;\n#define cb_rm(type, name, func) \\\n\tint         rv;\t\t\t\t\t\t\t\\\n\tswig_cb_val *handler_val;\t\t\t\t\t\\\n\tIPMI_SWIG_C_CB_ENTRY\t\t\t\t\t\t\\\n\tif (! valid_swig_cb(handler, func))\t\t\t\t\\\n\t    rv = EINVAL;\t\t\t\t\t\t\\\n\telse {\t\t\t\t\t\t\t\t\\\n\t    handler_val = get_swig_cb(handler, func);\t\t\t\\\n\t    rv = ipmi_ ## type ## _remove_ ## name ##_handler\t\t\\\n\t\t (self, type ## _ ## name ## _handler, handler_val);\t\\\n\t    if (!rv)\t\t\t\t\t\t\t\\\n\t\tderef_swig_cb_val(handler_val);\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\tIPMI_SWIG_C_CB_EXIT\t\t\t\t\t\t\\\n\treturn rv;\n    \n\n/*\n * A bug in swig (default parameters not used in inline) causes this\n * to have to not be in an inline and done the hard way.\n */\n%{\nstatic void\ndomain_cleanup_add(ipmi_domain_t *domain, void *cb_data)\n{\n    ipmi_domain_add_connect_change_handler_cl\n\t(domain, domain_connect_change_handler_cl, NULL);\n}\n\nstatic ipmi_domain_id_t *\nopen_domain(char *name, argarray *args, swig_cb *done, swig_cb *up)\n{\n    int                i, j;\n    int                num_options = 0;\n    ipmi_open_option_t options[10];\n    int                set = 0;\n    ipmi_args_t        *con_parms[2];\n    ipmi_con_t         *con[2];\n    ipmi_domain_id_t   *nd;\n    int                rv;\n    swig_cb_val        *done_val = NULL;\n    swig_cb_val        *up_val = NULL;\n    ipmi_domain_con_cb con_change = NULL;\n    ipmi_domain_ptr_cb domain_up = NULL;\n\n    IPMI_SWIG_C_CB_ENTRY\n    nd = malloc(sizeof(*nd));\n\n    for (i=0; i<args->len; i++) {\n\tif (num_options >= 10) {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out_err;\n\t}\n\n\tif (! ipmi_parse_options(options+num_options, args->val[i]))\n\t    num_options++;\n\telse\n\t    break;\n    }\n\n    rv = ipmi_parse_args(&i, args->len, args->val, &con_parms[set]);\n    if (rv) {\n\tfree(nd);\n\tnd = NULL;\n\tgoto out_err;\n    }\n    set++;\n\n    if (i < args->len) {\n\trv = ipmi_parse_args(&i, args->len, args->val, &con_parms[set]);\n\tif (rv) {\n\t    ipmi_free_args(con_parms[0]);\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out_err;\n\t}\n\tset++;\n    }\n    \n    for (i=0; i<set; i++) {\n\trv = ipmi_args_setup_con(con_parms[i],\n\t\t\t\t swig_os_hnd,\n\t\t\t\t NULL,\n\t\t\t\t &con[i]);\n\tif (rv) {\n\t    for (j=0; j<i; j++)\n\t\tcon[j]->close_connection(con[j]);\n            free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n\n    if (!nil_swig_cb(up)) {\n\tif (valid_swig_cb(up, domain_up_cb)) {\n\t    up_val = ref_swig_cb(up, domain_up_cb);\n\t    domain_up = domain_fully_up;\n\t} else {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    if (!nil_swig_cb(done)){\n\tif (valid_swig_cb(done, conn_change_cb)) {\n\t    done_val = ref_swig_cb(done, conn_change_cb);\n\t    con_change = domain_connect_change_handler;\n\t} else {\n\t    if (domain_up)\n\t\tderef_swig_cb(up);\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    rv = ipmi_open_domain(name, con, set, con_change, done_val,\n\t\t\t  domain_up, up_val,\n\t\t\t  options, num_options, nd);\n    if (rv) {\n\tif (domain_up)\n\t    deref_swig_cb(up);\n\tif (con_change)\n\t    deref_swig_cb(done);\n\tfor (i=0; i<set; i++)\n\t    con[i]->close_connection(con[i]);\n\tfree(nd);\n\tnd = NULL;\n\tgoto out;\n    }\n\n    ipmi_domain_pointer_cb(*nd, domain_cleanup_add, NULL);\n\n out:\n    for (i=0; i<set; i++)\n\tipmi_free_args(con_parms[i]);\n\n out_err:\n    IPMI_SWIG_C_CB_EXIT\n    return nd;\n}\n\nstatic ipmi_domain_id_t *\nopen_domain2(char *name, argarray *args, swig_cb *done, swig_cb *up)\n{\n    int                i, j;\n    int                num_options = 0;\n    ipmi_open_option_t options[10];\n    int                set = 0;\n    ipmi_args_t        *con_parms[2];\n    ipmi_con_t         *con[2];\n    ipmi_domain_id_t   *nd;\n    int                rv;\n    swig_cb_val        *done_val = NULL;\n    swig_cb_val        *up_val = NULL;\n    ipmi_domain_con_cb con_change = NULL;\n    ipmi_domain_ptr_cb domain_up = NULL;\n\n    IPMI_SWIG_C_CB_ENTRY\n    nd = malloc(sizeof(*nd));\n\n    for (i=0; i<args->len; i++) {\n\tif (num_options >= 10) {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out_err;\n\t}\n\n\tif (! ipmi_parse_options(options+num_options, args->val[i]))\n\t    num_options++;\n\telse\n\t    break;\n    }\n\n    rv = ipmi_parse_args2(&i, args->len, args->val, &con_parms[set]);\n    if (rv) {\n\tfree(nd);\n\tnd = NULL;\n\tgoto out_err;\n    }\n    set++;\n\n    if (i < args->len) {\n\trv = ipmi_parse_args2(&i, args->len, args->val, &con_parms[set]);\n\tif (rv) {\n\t    ipmi_free_args(con_parms[0]);\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out_err;\n\t}\n\tset++;\n    }\n\n    for (i=0; i<set; i++) {\n\trv = ipmi_args_setup_con(con_parms[i],\n\t\t\t\t swig_os_hnd,\n\t\t\t\t NULL,\n\t\t\t\t &con[i]);\n\tif (rv) {\n\t    for (j=0; j<i; j++)\n\t\tcon[j]->close_connection(con[j]);\n            free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n\n    if (!nil_swig_cb(up)) {\n\tif (valid_swig_cb(up, domain_up_cb)) {\n\t    up_val = ref_swig_cb(up, domain_up_cb);\n\t    domain_up = domain_fully_up;\n\t} else {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    if (!nil_swig_cb(done)){\n\tif (valid_swig_cb(done, conn_change_cb)) {\n\t    done_val = ref_swig_cb(done, conn_change_cb);\n\t    con_change = domain_connect_change_handler;\n\t} else {\n\t    if (domain_up)\n\t\tderef_swig_cb(up);\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    rv = ipmi_open_domain(name, con, set, con_change, done_val,\n\t\t\t  domain_up, up_val,\n\t\t\t  options, num_options, nd);\n    if (rv) {\n\tif (domain_up)\n\t    deref_swig_cb(up);\n\tif (con_change)\n\t    deref_swig_cb(done);\n\tfor (i=0; i<set; i++)\n\t    con[i]->close_connection(con[i]);\n\tfree(nd);\n\tnd = NULL;\n\tgoto out;\n    }\n\n    ipmi_domain_pointer_cb(*nd, domain_cleanup_add, NULL);\n\n out:\n    for (i=0; i<set; i++)\n\tipmi_free_args(con_parms[i]);\n\n out_err:\n    IPMI_SWIG_C_CB_EXIT\n    return nd;\n}\n\nstatic ipmi_domain_id_t *\nopen_domain3(char *name, argarray *ioptions, iargarray *args,\n\t     swig_cb *done, swig_cb *up)\n{\n    int                i, j;\n    int                num_options = 0;\n    ipmi_open_option_t options[10];\n    int                set = 0;\n    ipmi_con_t         *con[2];\n    ipmi_domain_id_t   *nd;\n    int                rv;\n    swig_cb_val        *done_val = NULL;\n    swig_cb_val        *up_val = NULL;\n    ipmi_domain_con_cb con_change = NULL;\n    ipmi_domain_ptr_cb domain_up = NULL;\n\n    IPMI_SWIG_C_CB_ENTRY\n    nd = malloc(sizeof(*nd));\n\n    for (i=0; i<ioptions->len; i++) {\n\tif (num_options >= 10) {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out_err;\n\t}\n\t\n\tif (! ipmi_parse_options(options+num_options, ioptions->val[i]))\n\t    num_options++;\n\telse\n\t    break;\n    }\n\n    for (i=0; i<args->len; i++) {\n\trv = ipmi_args_setup_con(args->val[i],\n\t\t\t\t swig_os_hnd,\n\t\t\t\t NULL,\n\t\t\t\t &con[i]);\n\tif (rv) {\n\t    for (j=0; j<i; j++)\n\t\tcon[j]->close_connection(con[j]);\n            free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n\tset++;\n    }\n\n    if (!nil_swig_cb(up)) {\n\tif (valid_swig_cb(up, domain_up_cb)) {\n\t    up_val = ref_swig_cb(up, domain_up_cb);\n\t    domain_up = domain_fully_up;\n\t} else {\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    if (!nil_swig_cb(done)){\n\tif (valid_swig_cb(done, conn_change_cb)) {\n\t    done_val = ref_swig_cb(done, conn_change_cb);\n\t    con_change = domain_connect_change_handler;\n\t} else {\n\t    if (domain_up)\n\t\tderef_swig_cb(up);\n\t    free(nd);\n\t    nd = NULL;\n\t    goto out;\n\t}\n    }\n    rv = ipmi_open_domain(name, con, set, con_change, done_val,\n\t\t\t  domain_up, up_val,\n\t\t\t  options, num_options, nd);\n    if (rv) {\n\tif (domain_up)\n\t    deref_swig_cb(up);\n\tif (con_change)\n\t    deref_swig_cb(done);\n\tfor (i=0; i<set; i++)\n\t    con[i]->close_connection(con[i]);\n\tfree(nd);\n\tnd = NULL;\n\tgoto out;\n    }\n\n    ipmi_domain_pointer_cb(*nd, domain_cleanup_add, NULL);\n\n out:\n\n out_err:\n    IPMI_SWIG_C_CB_EXIT\n    return nd;\n}\n\nstatic void\nset_log_handler(swig_cb *handler)\n{\n    swig_cb_val *old_handler = swig_log_handler;\n    IPMI_SWIG_C_CB_ENTRY\n    if (valid_swig_cb(handler, log))\n\tswig_log_handler = ref_swig_cb(handler, log);\n    else\n\tswig_log_handler = NULL;\n    if (old_handler)\n\tderef_swig_cb_val(old_handler);\n    IPMI_SWIG_C_CB_EXIT\n}\n\nstatic const char *\ncolor_string(int color)\n{\n    return ipmi_get_color_string(color);\n}\n\nstatic const char *\nlanparm_parm_to_str(int parm)\n{\n    return ipmi_lanconfig_parm_to_str(parm);\n}\n\nstatic int\nlanconfig_enum_val(int parm, int val, int *nval, const char **sval)\n{\n    return ipmi_lanconfig_enum_val(parm, val, nval, sval);\n}\n\nstatic int\nlanconfig_enum_idx(int parm, int idx, const char **sval)\n{\n    return ipmi_lanconfig_enum_idx(parm, idx, sval);\n}\n\n\nstatic int\nlanparm_str_to_parm(char *str)\n{\n    return ipmi_lanconfig_str_to_parm(str);\n}\n\nstatic const char *\npef_parm_to_str(int parm)\n{\n    return ipmi_pefconfig_parm_to_str(parm);\n}\n\nstatic int\npef_str_to_parm(char *str)\n{\n    return ipmi_pefconfig_str_to_parm(str);\n}\n\nstatic int\npefconfig_enum_val(int parm, int val, int *nval, const char **sval)\n{\n    return ipmi_lanconfig_enum_val(parm, val, nval, sval);\n}\n\nstatic int\npefconfig_enum_idx(int parm, int idx, const char **sval)\n{\n    return ipmi_pefconfig_enum_idx(parm, idx, sval);\n}\n\nstatic const char *\nget_threshold_access_support_string(int val)\n{\n    return ipmi_get_threshold_access_support_string(val);\n}\n\nstatic const char *\nget_hysteresis_support_string(int val)\n{\n    return ipmi_get_hysteresis_support_string(val);\n}\n\nstatic const char *\nget_event_support_string(int val)\n{\n    return ipmi_get_event_support_string(val);\n}\n\nstatic const char *\nchannel_medium_string(int val)\n{\n    return ipmi_channel_medium_string(val);\n}\n\nstatic const char *\nchannel_protocol_string(int val)\n{\n    return ipmi_channel_protocol_string(val);\n}\n\nstatic const char *\nchannel_session_support_string(int val)\n{\n    return ipmi_channel_session_support_string(val);\n}\n\nstatic const char *\nchannel_access_mode_string(int val)\n{\n    return ipmi_channel_access_mode_string(val);\n}\n\nstatic const char *\nprivilege_string(int val)\n{\n    return ipmi_privilege_string(val);\n}\n\nstatic const char *\nauthtype_string(int val)\n{\n    return ipmi_authtype_string(val);\n}\n\nstatic const char *\nsolparm_parm_to_str(int parm)\n{\n    return ipmi_solconfig_parm_to_str(parm);\n}\n\nstatic int\nsolparm_str_to_parm(char *str)\n{\n    return ipmi_solconfig_str_to_parm(str);\n}\n\nstatic int\nsolconfig_enum_val(int parm, int val, int *nval, const char **sval)\n{\n    return ipmi_solconfig_enum_val(parm, val, nval, sval);\n}\n\nstatic int\nsolconfig_enum_idx(int parm, int idx, const char **sval)\n{\n    return ipmi_solconfig_enum_idx(parm, idx, sval);\n}\n\nstatic char *\nget_error_string(unsigned int err)\n{\n    int  len;\n    char *buf;\n\n    len = ipmi_get_error_string_len(err);\n    buf = malloc(len);\n    if (!buf)\n\treturn NULL;\n    ipmi_get_error_string(err, buf, len);\n    return buf;\n}\n\nstatic void\ndomain_change_handler(ipmi_domain_t      *domain,\n\t\t      enum ipmi_update_e op,\n\t\t      void               *cb_data)\n{\n    swig_cb_val *cb = cb_data;\n    swig_ref    domain_ref;\n    domain_ref = swig_make_ref(domain, ipmi_domain_t);\n    swig_call_cb(cb, \"domain_change_cb\", \"%s%p\",\n\t\t ipmi_update_e_string(op), &domain_ref);\n    swig_free_ref_check(domain_ref, ipmi_domain_t);\n}\n\nint\nadd_domain_change_handler(swig_cb *handler)\n{\n    int rv;\n    swig_cb_val *handler_val;\n    IPMI_SWIG_C_CB_ENTRY\n    if (! valid_swig_cb(handler, domain_change_cb)) {\n\trv = EINVAL;\n\tgoto out_err;\n    }\n    handler_val = ref_swig_cb(handler, domain_change_cb);\n    rv = ipmi_domain_add_domain_change_handler(domain_change_handler,\n\t\t\t\t\t       handler_val);\n    if (rv)\n\tderef_swig_cb_val(handler_val);\nout_err:\n    IPMI_SWIG_C_CB_EXIT\n    return rv;\n}\n\nint\nremove_domain_change_handler(swig_cb *handler)\n{\n    int rv;\n    swig_cb_val *handler_val;\n    IPMI_SWIG_C_CB_ENTRY\n    if (! valid_swig_cb(handler, domain_change_cb)) {\n\trv = EINVAL;\n\tgoto out_err;\n    }\n    handler_val = get_swig_cb(handler, domain_change_cb);\n    rv = ipmi_domain_remove_domain_change_handler(domain_change_handler,\n\t\t\t\t\t\t  handler_val);\n    if (!rv)\n\tderef_swig_cb_val(handler_val);\nout_err:\n    IPMI_SWIG_C_CB_EXIT\n    return rv;\n}\n\n%}\n\n%newobject open_domain;\n%newobject open_domain2;\n%newobject open_domain3;\n/*\n * Create a new domain.  The domain will be named with the first parm,\n * the startup arguments are in a reference to a list in the second\n * parm (\\@args), the third parm is a callback object whose\n * conn_change_cb method will be called when the domain has connected\n * (but it may not be fully up yet).  The fourth parameter's\n * domain_up_cb method will be called when the domain is completely up\n * Note that the done method will be kept around and will continue to\n * be called on connection changes.  If you don't want it any more,\n * it must be deregistered with remove_connect_change_handler.\n * Passing in a reference to an undefined value will cause the handlers\n * to not be called.\n * The domain_up_cb methods is called with the following parmeters:\n * <self> <domain>\n * The parameters of the connection change handler are defined in\n * the domain->add_connect_change_handler method.\n * The third and fourth parameters are optional, if not provided\n * or undefined the handler will be ignored.\n *\n * The format of the arguments is the same as described in the\n * ipmi_cmdlang.7 man page for domain open, except the -wait_til_up\n * option is not supported.  See that for more details.  These options\n * allow you to turn on and off various automatic operations that\n * OpenIPMI does, such as scanning SDRs, fetching the SEL, etc.\n */\nipmi_domain_id_t *open_domain(char *name, argarray *args,\n\t\t\t      swig_cb *done = NULL, swig_cb *up = NULL);\n\n/*\n * Like open_domain, but takes the new parameter types and is more\n * flexible.  This is required for RMCP+.\n */\nipmi_domain_id_t *open_domain2(char *name, argarray *args,\n\t\t\t       swig_cb *done = NULL, swig_cb *up = NULL);\n\n/*\n * Like open_domain2, but takes ipmi_args_t.  Works with RMCP+.\n */\nipmi_domain_id_t *open_domain3(char *name, argarray *options,\n\t\t\t       iargarray *args,\n\t\t\t       swig_cb *done = NULL, swig_cb *up = NULL);\n\n/*\n * Iterate through the help for the various connection types used with\n * open_domain2() and open_domain3() and argument parsing and\n * allocating.  This will call the parse_args_iter_help_cb method on\n * the supplied object for each registered connection type.  The\n * parameters are <self> <name> <help>.  This can also be used to find\n * the names of all registered connections.\n */\nvoid parse_args_iter_help(swig_cb *help_cb);\n%{\n    static void parse_args_iter_help(swig_cb *help_cb)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(help_cb, parse_args_iter_help_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(help_cb, parse_args_iter_help_cb);\n\t    ipmi_parse_args_iter_help(parse_args_iter_help_hnd, handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n    }\n%}\n\nconst char *parse_option_help();\n%{\n    static const char *parse_option_help(void)\n    {\n\treturn ipmi_parse_options_help();\n    }\n%}\n\n/*\n * Add a handler whose domain_change_cb method will be called whenever\n * a domain is added or removed.  The handler will be called with the\n * following parameters: <self> added|deleted|changed <domain>\n */\nint add_domain_change_handler(swig_cb *handler);\n\n/*\n * Remove a previously registered domain handler.\n */\nint\nremove_domain_change_handler(swig_cb *handler);\n\n/*\n * Set the handler for OpenIPMI logs.  This is a global value and\n * there is only one, setting it replaces the old one.  The logs will\n * be sent to the \"log\" method of the first parameter.  The log method\n * will receive the following parameters: <self>, <log_level (a\n * string)>, and <log (a string)>.  If the log method is undefined or\n * not provided, the current log handler will be removed.\n */\nvoid set_log_handler(swig_cb *handler = NULL);\n\n\n/*\n * Convert the given color to a string.\n */\nchar *color_string(int color);\n\n/* Convert between lanparm string names and parm numbers. */\nchar *lanparm_parm_to_str(int parm);\nint lanparm_str_to_parm(char *str);\n\n/* Used to discover enum values for lanparms. */\nint lanconfig_enum_val(int parm, int val, int *nval, const char **sval);\nint lanconfig_enum_idx(int parm, int idx, const char **sval);\n\n/* Convert between pef string names and parm numbers. */\nchar *pef_parm_to_str(int parm);\nint pef_str_to_parm(char *str);\n\n/* Used to discover enum values for lanparms. */\nint pefconfig_enum_val(int parm, int val, int *nval, const char **sval);\nint pefconfig_enum_idx(int parm, int idx, const char **sval);\n\n/* Convert between SoL string names and parm numbers. */\nchar *solparm_parm_to_str(int parm);\nint solparm_str_to_parm(char *str);\n\n/* Used to discover enum values for solparms. */\nint solconfig_enum_val(int parm, int val, int *nval, const char **sval);\nint solconfig_enum_idx(int parm, int idx, const char **sval);\n\n/* Convert various sensor values to strings. */\nchar *get_threshold_access_support_string(int val);\nchar *get_hysteresis_support_string(int val);\nchar *get_event_support_string(int val);\n\n/* Convert various channel/mc values to strings. */\nchar *channel_medium_string(int val);\nchar *channel_protocol_string(int val);\nchar *channel_session_support_string(int val);\nchar *channel_access_mode_string(int val);\nchar *privilege_string(int val);\nchar *authtype_string(int val);\n\n%newobject get_error_string;\nchar *get_error_string(unsigned int val);\n\n%constant long long TIMEOUT_FOREVER = IPMI_TIMEOUT_FOREVER;\n\n/*\n * A domain id object.  This object is guaranteed to be valid and\n * can be converted into a domain pointer later.\n */\n%extend ipmi_domain_id_t {\n    ~ipmi_domain_id_t()\n    {\n\tfree(self);\n    }\n\n    /* Compare self with other, return -1 if self<other, 0 if\n       self==other, or 1 if self>other.  */\n    int cmp(ipmi_domain_id_t *other)\n    {\n\treturn ipmi_cmp_domain_id(*self, *other);\n    }\n\n    /*\n     * Convert a domain id to a domain pointer.  The \"domain_cb\" method\n     * will be called on the first parameter with the following parameters:\n     * <self> <domain>\n     */\n    int to_domain(swig_cb *handler)\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, domain_cb))\n\t    rv = EINVAL;\n\telse\n\t    rv = ipmi_domain_pointer_cb(*self, handle_domain_cb,\n\t\t\t\t\tget_swig_cb(handler, domain_cb));\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n/*\n * A domain object.\n */\n%extend ipmi_domain_t {\n    %newobject get_name;\n    /*\n     * Get the name of the domain.\n     */\n    char *get_name()\n    {\n\tchar name[IPMI_DOMAIN_NAME_LEN];\n\n\tipmi_domain_get_name(self, name, sizeof(name));\n\treturn strdup(name);\n    }\n\n    %newobject get_id;\n    /*\n     * Get the ID of the domain so you can hold on to the reference.\n     */\n    ipmi_domain_id_t *get_id()\n    {\n\tipmi_domain_id_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_domain_convert_to_id(self);\n\treturn rv;\n    }\n\n    %newobject get_guid;\n    /*\n     * Get the system GUID for the domain.  Returns NULL if it is not\n     * supported.\n     */\n    char *get_guid()\n    {\n\tchar          *str = NULL;\n\tunsigned char guid[16];\n\n\tif (ipmi_domain_get_guid(self, guid) == 0) {\n\t    str = malloc(16 * 3);\n\t    if (str) {\n\t\tchar *s = str;\n\t\tint  i;\n\t\ts += sprintf(s, \"%2.2x\", guid[0]);\n\t\tfor (i=1; i<16; i++)\n\t\t    s += sprintf(s, \" %2.2x\", guid[i]);\n\t    }\n\t}\n\treturn str;\n    }\n\n    /*\n     * Shut down the connections to the domain and free it up.  The\n     * domain_close_done_cb method for the handler object will be\n     * called with the following parameters: <self>\n     */\n    int close(swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, domain_close_done_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, domain_close_done_cb);\n\t    rv = ipmi_domain_close(self, domain_close_done, handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Add a handler to be called when the connection changes status.\n     * The conn_change_cb method on the first parameter will be\n     * called when the connection changes status with the following\n     * parameters: <self>, <domain>, <errorval>, <connection_number>,\n     * <port_number>, <anything_still_connected>.\n     */\n    int add_connect_change_handler(swig_cb *handler)\n    {\n\t/* cleanup handler is added when the domain is added. */\n\tcb_add(domain, connect_change, conn_change_cb);\n    }\n\n    /*\n     * Remove the connection change handler.\n     */\n    int remove_connect_change_handler(swig_cb *handler)\n    {\n\tcb_rm(domain, connect_change, conn_change_cb);\n    }\n\n    /*\n     * Iterate through all the connections in the object.  The\n     * domain_iter_connection_cb method will be called on the first\n     * parameter for each connection in the domain.  The parameters it\n     * receives will be: <self>, <domain>, <connection (integer)>.\n     */\n    int iterate_connections(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, domain_iter_connection_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, domain_iter_connection_cb);\n\t    ipmi_domain_iterate_connections(self,\n\t\t\t\t\t    domain_iterate_connections_handler,\n\t\t\t\t\t    handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Attempt to activate the given connection.\n     */\n    int activate_connection(int connection)\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = ipmi_domain_activate_connection(self, connection);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Parm 1 is a connection number.  Sets the second parameter to\n     * true if the connection is active, false if not.  Returns an\n     * error value.\n     */\n    int is_connection_active(int connection, unsigned int *active)\n    {\n\treturn ipmi_domain_is_connection_active(self, connection, active);\n    }\n\n    /*\n     * Parm 1 is a connection number.  Sets the second parameter to true\n     * if the connection is up, false if not.  Returns an error value.\n     */\n    int is_connection_up(int connection, unsigned int *up)\n    {\n\treturn ipmi_domain_is_connection_up(self, connection, up);\n    }\n\n    /*\n     * Parm 1 is a connection number.  Sets the second parameter to\n     * the number of ports in the connection.  A connection may have\n     * multiple ports (ie, multiple IP addresses to the same BMC,\n     * whereas a separate connection is a connection to a different\n     * BMC); these functions let you check their status.  Returns an\n     * error value.\n     */\n    int num_connection_ports(int connection, unsigned int *ports)\n    {\n\treturn ipmi_domain_num_connection_ports(self, connection, ports);\n    }\n\n    /*\n     * Parm 1 is a connection number, parm 2 is a port number.  Sets\n     * parm 3 to true if the given port is up, false if not.  Returns\n     * an error value.\n     */\n    int is_connection_port_up(int          connection,\n\t\t\t      int          port,\n\t\t\t      unsigned int *up)\n    {\n\treturn ipmi_domain_is_connection_port_up(self, connection, port, up);\n    }\n\n    %newobject get_port_info;\n    char *get_port_info(int connection, int port)\n    {\n\tint rv;\n\tchar buf[256];\n\tint  len = sizeof(buf);\n\trv = ipmi_domain_get_port_info(self, connection, port, buf, &len);\n\tif (rv)\n\t    return NULL;\n\treturn strdup(buf);\n    }\n\t\t\t\n    %newobject get_connection_args;\n    ipmi_args_t *get_connection_args(int connection)\n    {\n\treturn ipmi_domain_get_connection_args(self, connection);\n    }\n\n    char *get_connection_type(int connection)\n    {\n\treturn ipmi_domain_get_connection_type(self, connection);\n    }\n\n    /*\n     * Add a handler to be called when an entity is added, updated, or\n     * removed. When the entity is updated the entity_update_cb\n     * method on the first parameter will be called with the following\n     * parameters: <self>, added|deleted|changed <domain>, <entity>.\n     */\n    int add_entity_update_handler(swig_cb *handler)\n    {\n\tipmi_domain_add_entity_update_handler_cl\n\t    (self, domain_entity_update_handler_cl, NULL);\n\tcb_add(domain, entity_update, entity_update_cb);\n    }\n\n    /*\n     * Remove the entity change handler.\n     */\n    int remove_entity_update_handler(swig_cb *handler)\n    {\n\tcb_rm(domain, entity_update, entity_update_cb);\n    }\n\n    /*\n     * Iterate through all the entities in the object.  The\n     * domain_iter_entities_cb method will be called on the first\n     * parameter for each entity in the domain.  The parameters it\n     * receives will be: <self> <domain> <entity>.\n     */\n    int iterate_entities(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, domain_iter_entities_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, domain_iter_entities_cb);\n\t    ipmi_domain_iterate_entities(self, domain_iterate_entities_handler,\n\t\t\t\t\t handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Add a handler to be called when an MC is added, updated, or\n     * removed. When the mc is updated the mc_update_cb method on the\n     * first parameter will be called with the following parameters:\n     * <self>, added|deleted|changed <domain>, <mc>.\n     */\n    int add_mc_update_handler(swig_cb *handler)\n    {\n\tipmi_domain_add_mc_updated_handler_cl\n\t    (self, domain_mc_updated_handler_cl, NULL);\n\tcb_add(domain, mc_updated, mc_update_cb);\n    }\n\n    /*\n     * Remove the mc change handler.\n     */\n    int remove_mc_update_handler(swig_cb *handler)\n    {\n\tcb_rm(domain, mc_updated, mc_update_cb);\n    }\n\n    /*\n     * Iterate through all the MCs in the object.  The\n     * domain_iter_mc_cb method will be called on the first parameter for\n     * each mc in the domain.  The parameters it receives will be:\n     * <self> <domain> <mc>.\n     */\n    int iterate_mcs(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, domain_iter_mc_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, domain_iter_mc_cb);\n\t    ipmi_domain_iterate_mcs(self, domain_iterate_mcs_handler,\n\t\t\t\t    handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Return the type of the domain, either unknown, mxp, or atca.\n     * Others may be added later.\n     */\n    const char *get_type()\n    {\n\treturn ipmi_domain_get_type_string(ipmi_domain_get_type(self));\n    }\n\n    /*\n     * Scan all the addresses on the given channel (parm 1) between\n     * (and including) start_addr (parm 2) and end_addr (parm 3) and\n     * call the \"domain_ipmb_mc_scan_cb\" method on the handler (parm4)\n     * with the following parms (if the parm is provided and defined):\n     * <self>, <domain>, <error val>\n     */\n    int start_ipmb_mc_scan(int channel, int start_addr, int end_addr,\n\t\t\t   swig_cb *handler = NULL)\n    {\n\tint            rv;\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_domain_cb domain_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, domain_ipmb_mc_scan_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    domain_cb = ipmb_mc_scan_handler;\n\t    handler_val = ref_swig_cb(handler, domain_ipmb_mc_scan_cb);\n\t}\n\trv = ipmi_start_ipmb_mc_scan(self, channel, start_addr, end_addr,\n\t\t\t\t     domain_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* Scan all IPMB busses for new/lost MCs. */\n    void start_full_ipmb_scan()\n    {\n\tipmi_domain_start_full_ipmb_scan(self);\n    }\n\n    /*\n     * Send a command to a given address (parm 1) with the given lun\n     * (parm 2), netfn (parm 3), command (parm 4).  Parm 5 is the\n     * message data in an array reference.  Parm 6 is the handler, it\n     * will be called with the response.  The addr_cmd_cb method will\n     * be called on the handler handler if it is provided and defined;\n     * its parameters are: <domain> <addr> <lun> <netfn> <cmd>\n     * <response data>\n     */\n    int send_command_addr(char *addr, int lun, int netfn, int cmd,\n\t\t\t  intarray msg_data, swig_cb *handler = NULL)\n    {\n\tint                          rv;\n\tswig_cb_val                  *handler_val = NULL;\n\tipmi_addr_response_handler_t msg_cb = NULL;\n\tipmi_addr_t                  iaddr;\n\tunsigned int                 addr_len;\n\tipmi_msg_t                   msg;\n\tunsigned char                data[MAX_IPMI_DATA_SIZE];\n\tunsigned int                 data_len;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = parse_ipmi_addr(addr, lun, &iaddr, &addr_len);\n\tif (rv)\n\t    goto out_err;\n\n\tmsg.netfn = netfn;\n\tmsg.cmd = cmd;\n\tmsg.data = data;\n\trv = parse_ipmi_data(msg_data, data, sizeof(data), &data_len);\n\tmsg.data_len = data_len;\n\tif (rv)\n\t    goto out_err;\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, addr_cmd_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    msg_cb = domain_msg_cb;\n\t    handler_val = ref_swig_cb(handler, addr_cmd_cb);\n\t}\n\trv = ipmi_send_command_addr(self, &iaddr, addr_len, &msg,\n\t\t\t\t    msg_cb, handler_val, NULL);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Cause the domain to start detecting presence changes.  If parm\n     * 1 is supplied, it tells whether to force all entities to have\n     * their presence checked (if true) or just detect entity presence\n     * for ones that might have changed.\n     */\n    int detect_presence_changes(int force = 0)\n    {\n\treturn ipmi_detect_domain_presence_changes(self, force);\n    }\n\n    /*\n     * Set the time (in seconds) between SEL rescans for all\n     * SELs in the domain\n     */\n    void set_sel_rescan_time(int seconds)\n    {\n\treturn ipmi_domain_set_sel_rescan_time(self, seconds);\n    }\n\n    /*\n     * Get the default SEL rescan time for the domain.\n     */\n    int get_sel_rescan_time()\n    {\n\treturn ipmi_domain_get_sel_rescan_time(self);\n    }\n\n    /*\n     * Set the time (in seconds) between IPMB bus rescans for the\n     * domain.\n     */\n    void set_ipmb_rescan_time(int seconds)\n    {\n\treturn ipmi_domain_set_ipmb_rescan_time(self, seconds);\n    }\n\n    /*\n     * Get the default IPMB rescan time for the domain.\n     */\n    int get_ipmb_rescan_time()\n    {\n\treturn ipmi_domain_get_ipmb_rescan_time(self);\n    }\n\n    /*\n     * Add a handler to be called when a new unhandled event comes\n     * into the domain.  When the event comes in, the event_cb method\n     * on the first parameter will be called with the following\n     * parameters: <self>, <domain>, <event>\n     */\n    int add_event_handler(swig_cb *handler)\n    {\n\tipmi_domain_add_event_handler_cl\n\t    (self, domain_event_handler_cl, NULL);\n\tcb_add(domain, event, event_cb);\n    }\n\n    /*\n     * Remove the event handler.\n     */\n    int remove_event_handler(swig_cb *handler)\n    {\n\tcb_rm(domain, event, event_cb);\n    }\n\n    %newobject first_event;\n    /*\n     * Retrieve the first event from the domain.  Return NULL (undef)\n     * if the event does not exist.\n     */\n    ipmi_event_t *first_event()\n    {\n\treturn ipmi_domain_first_event(self);\n    }\n\n    %newobject last_event;\n    /*\n     * Retrieve the last event from the domain.\n     */\n    ipmi_event_t *last_event()\n    {\n\treturn ipmi_domain_last_event(self);\n    }\n\n    %newobject next_event;\n    /*\n     * Retrieve the event after the given event from the domain.\n     */\n    ipmi_event_t *next_event(ipmi_event_t  *event)\n    {\n\treturn ipmi_domain_next_event(self, event);\n    }\n\n    %newobject prev_event;\n    /*\n     * Retrieve the event before the given event from the domain.\n     */\n    ipmi_event_t *prev_event(ipmi_event_t  *event)\n    {\n\treturn ipmi_domain_prev_event(self, event);\n    }\n\n    /*\n     * Number of live entries in the local SEL copy.\n     */\n    int sel_count()\n    {\n\tint          rv;\n\tunsigned int count;\n\trv = ipmi_domain_sel_count(self, &count);\n\tif (rv)\n\t    return 0;\n\telse\n\t    return count;\n    }\n\n    /*\n     * Number of entries in the the remote SEL.  If an entry has been\n     * deleted in the local copy of the SEL but has not yet finished\n     * being deleted in the remote copy, it will be counted here.\n     */\n    int sel_entries_used()\n    {\n\tint          rv;\n\tunsigned int count;\n\trv = ipmi_domain_sel_entries_used(self, &count);\n\tif (rv)\n\t    return 0;\n\telse\n\t    return count;\n    }\n\n    /*\n     * Reread all SELs in the domain.  The domain_reread_sels_cb\n     * method on the first parameter (if supplied) will be called with\n     * the following values: <domain> <error value>\n     */\n    int reread_sels(swig_cb *handler = NULL)\n    {\n\tint            rv;\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_domain_cb domain_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, domain_reread_sels_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    domain_cb = domain_reread_sels_handler;\n\t    handler_val = ref_swig_cb(handler, domain_reread_sels_cb);\n\t}\n\trv = ipmi_domain_reread_sels(self, domain_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Fetch a FRU with the given parameters.  The first parameter (the object)\n     * is the domain, successive parameters are:\n     *  is_logical - do a logical or physical FRU fetch.\n     *  device_address - The IPMB address of the FRU device.\n     *  device_id - The particular FRU device id to fetch.\n     *  LUN - The LUN to talk to for the device.\n     *  private_bus - for physical FRUs, the bus it is on.\n     *  channel - The channel where the device is located.\n     * If the handler is supplied, then the fru_fetched method on that\n     * will be called upon completion with the handler object as the first\n     * parameter, the domain as the second, the FRU as the third, and an\n     * error value as the fourth.\n     * This returns the FRU, or undefined if a failure occurred.\n     */\n    %newobject fru_alloc;\n    ipmi_fru_t *fru_alloc(int is_logical, int device_address, int device_id,\n\t\t\t  int lun, int private_bus, int channel,\n\t\t\t  swig_cb *handler = NULL)\n    {\n\tipmi_fru_t *fru = NULL;\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\tipmi_fru_cb cb_handler = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, fru_fetched))\n\t\tgoto out_err;\n\t    cb_handler = fru_fetched;\n\t    handler_val = ref_swig_cb(handler, fru_fetched);\n\t}\n\n\trv = ipmi_domain_fru_alloc(self, is_logical, device_address, device_id,\n\t\t\t\t   lun, private_bus, channel, cb_handler,\n\t\t\t\t   handler_val, &fru);\n\tif (rv) {\n\t    if (handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t    fru = NULL;\n\t} else {\n\t    /* We have one ref for the callback already, add a ref for\n\t       the returned value. */\n\t    if (handler_val)\n\t\tipmi_fru_ref(fru);\n\t}\n\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn fru;\n    }\n\n    /*\n     * Allocate a pet object for the domain over the given connection.\n     * The pet is returned.  The ninth parameter is an optional\n     * callback object, the got_pet_cb method will be called on it\n     * when the PET fetch is complete.  It will have the following\n     * parameters: <self> <pet> <err>.  The parameters are:\n     *   int connection: the connection to the domain to set up the PET for\n     *   int channel: the channel number to set the PET for\n     *   char ip_addr: the address to send the traps to\n     *   char mac_addr: the mac address to send the traps to\n     * The rest are the selectors in the various tables, you have to\n     * read the spec and know your system to know how to set them.\n     *   int eft_sel:\n     *   int policy_num:\n     *   int apt_sel:\n     *   int lan_dest_sel:\n     *\n     * Note that you must keep a reference to the pet around, or it will\n     * be automatically destroyed by the garbage collector.\n     */\n    %newobject get_pet;\n    ipmi_pet_t *get_pet(int     connection,\n\t\t\tint     channel,\n\t\t\tchar    *ip_addr,\n\t\t\tchar    *mac_addr,\n\t\t\tint     eft_sel,\n\t\t\tint     policy_num,\n\t\t\tint     apt_sel,\n\t\t\tint     lan_dest_sel,\n\t\t\tswig_cb *handler = NULL)\n    {\n\tint              rv;\n\tipmi_pet_t       *pet = NULL;\n\tswig_cb_val      *handler_val = NULL;\n\tstruct in_addr   ip;\n\tunsigned char    mac[6];\n\tipmi_pet_done_cb done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n        rv = parse_ip_addr(ip_addr, &ip);\n\tif (rv)\n\t    goto out_err;\n\n        rv = parse_mac_addr(mac_addr, mac);\n\tif (rv)\n\t    goto out_err;\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, got_pet_cb))\n\t\tgoto out_err;\n\t    handler_val = ref_swig_cb(handler, got_pet_cb);\n\t    done = get_pet;\n\t}\n\trv = ipmi_pet_create(self, connection, channel, ip, mac, eft_sel,\n\t\t\t     policy_num, apt_sel, lan_dest_sel, get_pet,\n\t\t\t     handler_val, &pet);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn pet;\n    }\n\n    /*\n     * Allocate a SoL object using the given domain's connection.\n     * Note that this does not cause a connection, it just creates an\n     * object for doing an SoL connection.\n     *\n     * The handler val will handle all events from the SOL session.\n     * this means it must implement the following callbacks:\n     *\n     *  sol_connection_state_change <self> <conn> <state> <error>\n     *  sol_data_received <self> <conn> <string>\n     *  sol_break_detected <self> <conn>\n     *  sol_bmc_transmit_overrun <self> <conn>\n     */\n    %newobject create_sol;\n    ipmi_sol_conn_t *create_sol(int connection, swig_cb *handler)\n    {\n\tipmi_con_t      *con;\n\tipmi_sol_conn_t *scon;\n\tint             rv;\n\tswig_cb_val     *handler_val;\n\n\tif (nil_swig_cb(handler))\n\t    return NULL;\n\n\tif (!valid_swig_cb(handler, sol_connection_state_change))\n\t    return NULL;\n\tif (!valid_swig_cb(handler, sol_data_received))\n\t    return NULL;\n\tif (!valid_swig_cb(handler, sol_break_detected))\n\t    return NULL;\n\tif (!valid_swig_cb(handler, sol_bmc_transmit_overrun))\n\t    return NULL;\n\n\tcon = ipmi_domain_get_connection(self, connection);\n\tif (!con)\n\t    return NULL;\n\n\trv = ipmi_sol_create(con, &scon);\n\tif (rv) {\n\t    con->close_connection(con);\n\t    return NULL;\n\t}\n\n\thandler_val = ref_swig_gencb(handler);\n\n\trv = ipmi_sol_register_connection_state_callback\n\t    (scon,\n\t     sol_connection_state_change_cb,\n\t     handler_val);\n\tif (rv)\n\t    goto out_err;\n\n\trv = ipmi_sol_register_data_received_callback\n\t    (scon,\n\t     sol_data_received_cb,\n\t     handler_val);\n\tif (rv)\n\t    goto out_err;\n\n\trv = ipmi_sol_register_break_detected_callback\n\t    (scon,\n\t     sol_break_detected_cb,\n\t     handler_val);\n\tif (rv)\n\t    goto out_err;\n\n\trv = ipmi_sol_register_bmc_transmit_overrun_callback\n\t    (scon,\n\t     sol_bmc_transmit_overrun_cb,\n\t     handler_val);\n\tif (rv)\n\t    goto out_err;\n\n\treturn scon;\n\n    out_err:\n\tderef_swig_cb_val(handler_val);\n\tipmi_sol_free(scon);\n\treturn NULL;\n    }\n}\n\n/*\n * Allocate an args structure of the given connection type, generally\n * \"smi\" or Lan\".\n */\n%newobject alloc_empty_args;\nipmi_args_t *alloc_empty_args(char *con_type);\n%{\n    static ipmi_args_t *\n    alloc_empty_args(char *con_type)\n    {\n\tint         rv;\n\tipmi_args_t *argv;\n\trv = ipmi_args_alloc(con_type, &argv);\n\tif (rv)\n\t    return NULL;\n\treturn argv;\n    }\n%}\n\n/*\n * Parse the array of arguments.  The arguments is a list/array of\n * strings and parsed using the standard algorithms.\n */\n%newobject alloc_parse_args;\nipmi_args_t *alloc_parse_args(argarray *args);\n%{\n    static ipmi_args_t *\n    alloc_parse_args(argarray *args)\n    {\n\tint         rv;\n\tipmi_args_t *argv;\n\tint         i = 0;\n\n\trv = ipmi_parse_args(&i, args->len, args->val, &argv);\n\tif (rv)\n\t    return NULL;\n\treturn argv;\n    }\n%}\n\n%extend ipmi_args_t {\n    ~ipmi_args_t()\n    {\n\tipmi_free_args(self);\n    }\n\n    /*\n     * Return the type of connection, generally \"lan\" or \"smi\".\n     */\n    const char *get_type()\n    {\n\treturn ipmi_args_get_type(self);\n    }\n\n    /*\n     * An args is a set of fields indexed by argnum.  Fetching an\n     * argument returns the name, type, help string, and value.  E2BIG\n     * is returned if argnum is larger than the number of fields.\n     * Type will be either \"str\" for a string or integer or IP address\n     * or other field like that, \"bool\" for a boolean, and \"enum\" for\n     * an enumeration type.  The \"str\" type, obviously, may have\n     * semantics behind it.  The \"bool\" value will be either \"true\" or\n     * \"false\".  For enums, an array of strings is returned as \"range\"\n     * and the value will be one of these strings.\n     */\n    int get_val(int           argnum,\n\t\tconst char    **name,\n\t\tconst char    **type,\n\t\tconst char    **help,\n\t\tchar          **value,\n\t\tstrconstarray *range)\n    {\n\tint        rv;\n\tconst char **irange = NULL;\n\tchar       *ivalue = NULL;\n\n\trv = ipmi_args_get_val(self, argnum, name, type, help,\n\t\t\t       &ivalue, &irange);\n\tif (rv)\n\t    return rv;\n\tif (ivalue) {\n\t    /* Convert it to a normal malloc() so char ** will work. */\n\t    char *ivalue2 = strdup(ivalue);\n\t    ipmi_args_free_str(self, ivalue);\n\t    ivalue = ivalue2;\n\t}\n\t*value = ivalue;\n\tif (irange) {\n\t    int len;\n\t    for (len=0; irange[len]; len++)\n\t\t;\n\t    range->len = len;\n\t    range->val = irange;\n\t}\n\treturn 0;\n    }\n\n    /*\n     * Set the given field.  If name is not NULL, then find the field\n     * by name.  If name is NULL, then argnum is used for the field.\n     * If the value does not match the semantics of the field, an\n     * error is returned.\n     */\n    int set_val(int argnum, const char *name, const char *value)\n    {\n\treturn ipmi_args_set_val(self, argnum, name, value);\n    }\n}\n\n/*\n * A entity id object.  This object is guaranteed to be valid and\n * can be converted into a entity pointer later.\n */\n%extend ipmi_entity_id_t {\n    ~ipmi_entity_id_t()\n    {\n\tfree(self);\n    }\n\n    /* Compare self with other, return -1 if self<other, 0 if\n       self==other, or 1 if self>other.  */\n    int cmp(ipmi_entity_id_t *other)\n    {\n\treturn ipmi_cmp_entity_id(*self, *other);\n    }\n\n    /*\n     * Convert a entity id to a entity pointer.  The \"entity_cb\" method\n     * will be called on the first parameter with the following parameters:\n     * <self> <entity>\n     */\n    int to_entity(swig_cb *handler)\n    {\n\tint rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_cb))\n\t    rv = EINVAL;\n\telse\n\t    rv = ipmi_entity_pointer_cb(*self, handle_entity_cb,\n\t\t\t\t\tget_swig_cb(handler, entity_cb));\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n%constant int ENTITY_ID_UNSPECIFIED = IPMI_ENTITY_ID_UNSPECIFIED;\n%constant int ENTITY_ID_OTHER = IPMI_ENTITY_ID_OTHER;\n%constant int ENTITY_ID_UNKOWN = IPMI_ENTITY_ID_UNKOWN;\n%constant int ENTITY_ID_PROCESSOR = IPMI_ENTITY_ID_PROCESSOR;\n%constant int ENTITY_ID_DISK = IPMI_ENTITY_ID_DISK;\n%constant int ENTITY_ID_PERIPHERAL = IPMI_ENTITY_ID_PERIPHERAL;\n%constant int ENTITY_ID_SYSTEM_MANAGEMENT_MODULE = IPMI_ENTITY_ID_SYSTEM_MANAGEMENT_MODULE;\n%constant int ENTITY_ID_SYSTEM_BOARD = IPMI_ENTITY_ID_SYSTEM_BOARD;\n%constant int ENTITY_ID_MEMORY_MODULE = IPMI_ENTITY_ID_MEMORY_MODULE;\n%constant int ENTITY_ID_PROCESSOR_MODULE = IPMI_ENTITY_ID_PROCESSOR_MODULE;\n%constant int ENTITY_ID_POWER_SUPPLY = IPMI_ENTITY_ID_POWER_SUPPLY;\n%constant int ENTITY_ID_ADD_IN_CARD = IPMI_ENTITY_ID_ADD_IN_CARD;\n%constant int ENTITY_ID_FRONT_PANEL_BOARD = IPMI_ENTITY_ID_FRONT_PANEL_BOARD;\n%constant int ENTITY_ID_BACK_PANEL_BOARD = IPMI_ENTITY_ID_BACK_PANEL_BOARD;\n%constant int ENTITY_ID_POWER_SYSTEM_BOARD = IPMI_ENTITY_ID_POWER_SYSTEM_BOARD;\n%constant int ENTITY_ID_DRIVE_BACKPLANE = IPMI_ENTITY_ID_DRIVE_BACKPLANE;\n%constant int ENTITY_ID_SYSTEM_INTERNAL_EXPANSION_BOARD = IPMI_ENTITY_ID_SYSTEM_INTERNAL_EXPANSION_BOARD;\n%constant int ENTITY_ID_OTHER_SYSTEM_BOARD = IPMI_ENTITY_ID_OTHER_SYSTEM_BOARD;\n%constant int ENTITY_ID_PROCESSOR_BOARD = IPMI_ENTITY_ID_PROCESSOR_BOARD;\n%constant int ENTITY_ID_POWER_UNIT = IPMI_ENTITY_ID_POWER_UNIT;\n%constant int ENTITY_ID_POWER_MODULE = IPMI_ENTITY_ID_POWER_MODULE;\n%constant int ENTITY_ID_POWER_MANAGEMENT_BOARD = IPMI_ENTITY_ID_POWER_MANAGEMENT_BOARD;\n%constant int ENTITY_ID_CHASSIS_BACK_PANEL_BOARD = IPMI_ENTITY_ID_CHASSIS_BACK_PANEL_BOARD;\n%constant int ENTITY_ID_SYSTEM_CHASSIS = IPMI_ENTITY_ID_SYSTEM_CHASSIS;\n%constant int ENTITY_ID_SUB_CHASSIS = IPMI_ENTITY_ID_SUB_CHASSIS;\n%constant int ENTITY_ID_OTHER_CHASSIS_BOARD = IPMI_ENTITY_ID_OTHER_CHASSIS_BOARD;\n%constant int ENTITY_ID_DISK_DRIVE_BAY = IPMI_ENTITY_ID_DISK_DRIVE_BAY;\n%constant int ENTITY_ID_PERIPHERAL_BAY = IPMI_ENTITY_ID_PERIPHERAL_BAY;\n%constant int ENTITY_ID_DEVICE_BAY = IPMI_ENTITY_ID_DEVICE_BAY;\n%constant int ENTITY_ID_FAN_COOLING = IPMI_ENTITY_ID_FAN_COOLING;\n%constant int ENTITY_ID_COOLING_UNIT = IPMI_ENTITY_ID_COOLING_UNIT;\n%constant int ENTITY_ID_CABLE_INTERCONNECT = IPMI_ENTITY_ID_CABLE_INTERCONNECT;\n%constant int ENTITY_ID_MEMORY_DEVICE = IPMI_ENTITY_ID_MEMORY_DEVICE;\n%constant int ENTITY_ID_SYSTEM_MANAGEMENT_SOFTWARE = IPMI_ENTITY_ID_SYSTEM_MANAGEMENT_SOFTWARE;\n%constant int ENTITY_ID_BIOS = IPMI_ENTITY_ID_BIOS;\n%constant int ENTITY_ID_OPERATING_SYSTEM = IPMI_ENTITY_ID_OPERATING_SYSTEM;\n%constant int ENTITY_ID_SYSTEM_BUS = IPMI_ENTITY_ID_SYSTEM_BUS;\n%constant int ENTITY_ID_GROUP = IPMI_ENTITY_ID_GROUP;\n%constant int ENTITY_ID_REMOTE_MGMT_COMM_DEVICE = IPMI_ENTITY_ID_REMOTE_MGMT_COMM_DEVICE;\n%constant int ENTITY_ID_EXTERNAL_ENVIRONMENT = IPMI_ENTITY_ID_EXTERNAL_ENVIRONMENT;\n%constant int ENTITY_ID_BATTERY = IPMI_ENTITY_ID_BATTERY;\n%constant int ENTITY_ID_PROCESSING_BLADE = IPMI_ENTITY_ID_PROCESSING_BLADE;\n%constant int ENTITY_ID_CONNECTIVITY_SWITCH = IPMI_ENTITY_ID_CONNECTIVITY_SWITCH;\n%constant int ENTITY_ID_PROCESSOR_MEMORY_MODULE = IPMI_ENTITY_ID_PROCESSOR_MEMORY_MODULE;\n%constant int ENTITY_ID_IO_MODULE = IPMI_ENTITY_ID_IO_MODULE;\n%constant int ENTITY_ID_PROCESSOR_IO_MODULE = IPMI_ENTITY_ID_PROCESSOR_IO_MODULE;\n%constant int ENTITY_ID_MGMT_CONTROLLER_FIRMWARE = IPMI_ENTITY_ID_MGMT_CONTROLLER_FIRMWARE;\n%constant int ENTITY_ID_IPMI_CHANNEL = IPMI_ENTITY_ID_IPMI_CHANNEL;\n%constant int ENTITY_ID_PCI_BUS = IPMI_ENTITY_ID_PCI_BUS;\n%constant int ENTITY_ID_PCI_EXPRESS_BUS = IPMI_ENTITY_ID_PCI_EXPRESS_BUS;\n%constant int ENTITY_ID_SCSI_BUS = IPMI_ENTITY_ID_SCSI_BUS;\n%constant int ENTITY_ID_SATA_SAS_BUS = IPMI_ENTITY_ID_SATA_SAS_BUS;\n%constant int ENTITY_ID_PROCESSOR_FRONT_SIDE_BUS = IPMI_ENTITY_ID_PROCESSOR_FRONT_SIDE_BUS;\n\n/*\n * An entity object.\n */\n%extend ipmi_entity_t {\n    /*\n     * Get the domain the entity belongs to.\n     */\n    ipmi_domain_t *get_domain()\n    {\n\treturn ipmi_entity_get_domain(self);\n    }\n\n    %newobject get_name;\n    /*\n     * Get the name of an entity.\n     */\n    char *get_name()\n    {\n\tchar name[IPMI_ENTITY_NAME_LEN];\n\n\tipmi_entity_get_name(self, name, sizeof(name));\n\treturn strdup(name);\n    }\n\n    %newobject get_id;\n    /*\n     * Get the id for the entity.\n     */\n    ipmi_entity_id_t *get_id()\n    {\n\tipmi_entity_id_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_entity_convert_to_id(self);\n\treturn rv;\n    }\n\n    /*\n     * Iterate through all the entity's children.  The\n     * entity_iter_entities_cb method will be called on the first\n     * parameter for each child entity of the parent.  The parameters\n     * it receives will be: <self> <parent> <child>.\n     */\n    int iterate_children(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_iter_entities_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, entity_iter_entities_cb);\n\t    ipmi_entity_iterate_children(self, entity_iterate_entities_handler,\n\t\t\t\t\t handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Iterate through all the entity's parents.  The\n     * entity_iter_entities_cb method will be called on the first\n     * parameter for each parent entity of the child.  The parameters\n     * it receives will be: <self> <child> <parent>.\n     */\n    int iterate_parents(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_iter_entities_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, entity_iter_entities_cb);\n\t    ipmi_entity_iterate_parents(self, entity_iterate_entities_handler,\n\t\t\t\t\thandler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Iterate through all the entity's sensors.  The\n     * entity_iter_sensors_cb method will be called on the first\n     * parameter for each sensor of the entity.  The parameters\n     * it receives will be: <self> <entity> <sensor>.\n     */\n    int iterate_sensors(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_iter_sensors_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, entity_iter_sensors_cb);\n\t    ipmi_entity_iterate_sensors(self, entity_iterate_sensors_handler,\n\t\t\t\t\thandler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Iterate through all the entity's controls.  The\n     * entity_iter_controls_cb method will be called on the first\n     * parameter for each control of the entity.  The parameters\n     * it receives will be: <self> <entity> <control>.\n     */\n    int iterate_controls(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv = 0;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_iter_controls_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = get_swig_cb(handler, entity_iter_controls_cb);\n\t    ipmi_entity_iterate_controls(self, entity_iterate_controls_handler,\n\t\t\t\t\t handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Add a handler to be called when an entity's presence\n     * changes. When the presence changes the entity_presence_cb\n     * method on the first parameter will be called with the following\n     * parameters: <self> <entity> <present (boolean integer)> <event>.\n     * The event is optional and may not be present.\n     */\n    int add_presence_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_presence_handler_cl\n\t    (self, entity_presence_handler_cl, NULL);\n\tcb_add(entity, presence, entity_presence_cb);\n    }\n\n    /*\n     * Remove the presence handler.\n     */\n    int remove_presence_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, presence, entity_presence_cb);\n    }\n\n    /*\n     * Add a handler to be called when a sensor in the entity is\n     * added, deleted, or updated.  When the sensor changes the\n     * entity_sensor_update_cb method on the first parameter will be\n     * called with the following parameters: <self>\n     * added|deleted|changed <entity> <sensor>.\n     */\n    int add_sensor_update_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_sensor_update_handler_cl\n\t    (self, entity_sensor_update_handler_cl, NULL);\n\tcb_add(entity, sensor_update, entity_sensor_update_cb);\n    }\n\n    /*\n     * Remove the sensor update handler.\n     */\n    int remove_sensor_update_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, sensor_update, entity_sensor_update_cb);\n    }\n\n    /*\n     * Add a handler to be called when a control in the entity is\n     * added, deleted, or updated.  When the control changes the\n     * entity_control_update_cb method on the first parameter will be\n     * called with the following parameters: <self>\n     * added|deleted|changed <entity> <control>.\n     */\n    int add_control_update_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_control_update_handler_cl\n\t    (self, entity_control_update_handler_cl, NULL);\n\tcb_add(entity, control_update, entity_control_update_cb);\n    }\n\n    /*\n     * Remove the control update handler.\n     */\n    int remove_control_update_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, control_update, entity_control_update_cb);\n    }\n\n    /*\n     * Add a handler to be called when the FRU data in the entity is\n     * added, deleted, or updated.  When the FRU data changes the\n     * entity_fru_update_cb method on the first parameter will be\n     * called with the following parameters: <self>\n     * added|deleted|changed <entity> <fru>.\n     *\n     * Deprecated, use the werr version below so you can get errors\n     * reported.\n     */\n    int add_fru_update_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_fru_update_handler_cl\n\t    (self, entity_fru_update_handler_cl, NULL);\n\tcb_add(entity, fru_update, entity_fru_update_cb);\n    }\n\n    /*\n     * Remove the FRU data update handler.\n     */\n    int remove_fru_update_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, fru_update, entity_fru_update_cb);\n    }\n\n    /*\n     * Add a handler to be called when the FRU data in the entity is\n     * added, deleted, or updated.  When the FRU data changes the\n     * entity_fru_update_werr_cb method on the first parameter will be\n     * called with the following parameters: <self>\n     * added|deleted|changed|error <errnum> <entity> <fru>.\n     */\n    int add_fru_update_werr_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_fru_update_werr_handler_cl\n\t    (self, entity_fru_update_werr_handler_cl, NULL);\n\tcb_add(entity, fru_update_werr, entity_fru_update_werr_cb);\n    }\n\n    /*\n     * Remove the FRU data update handler.\n     */\n    int remove_fru_update_werr_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, fru_update_werr, entity_fru_update_werr_cb);\n    }\n\n    /*\n     * Get the entities type, return \"mc\", \"fru\", \"generic\", or \"unknown\".\n     */\n    char *get_type()\n    {\n\tswitch (ipmi_entity_get_type(self)) {\n\tcase IPMI_ENTITY_MC: return \"mc\";\n\tcase IPMI_ENTITY_FRU: return \"fru\";\n\tcase IPMI_ENTITY_GENERIC: return \"generic\";\n\tdefault: return \"unknown\";\n\t}\n    }\n\n    /*\n     * Returns if the entity has FRU data or not.\n     */\n    int is_fru()\n    {\n\treturn ipmi_entity_get_is_fru(self);\n    }\n\n    %newobject get_id_string;\n    /*\n     * Get the ID string from the SDR\n     */\n    char *get_id_string()\n    {\n\tint length = ipmi_entity_get_id_length(self);\n\tchar *str;\n\tif (length < 2)\n\t    return NULL;\n\tstr = malloc(length);\n\tif (!str)\n\t    return NULL;\n\tipmi_entity_get_id(self, str, length);\n\treturn str;\n    }\n\n    /*\n     * Get the entity id for the entity\n     */\n    int get_entity_id()\n    {\n\treturn ipmi_entity_get_entity_id(self);\n    }\n\n    /*\n     * Get the string representation of the entity id\n     */\n    const char *get_entity_id_string()\n    {\n\treturn ipmi_entity_get_entity_id_string(self);\n    }\n\n    /*\n     * Get the entity instance for the entity\n     */\n    int get_entity_instance()\n    {\n\treturn ipmi_entity_get_entity_instance(self);\n    }\n\n    /*\n     * Get the channel for the entity.  Only valid if the entity\n     * instance is 0x60 or larger.\n     */\n    int get_entity_device_channel()\n    {\n\treturn ipmi_entity_get_device_channel(self);\n    }\n\n    /*\n     * Get the address for the entity.  Only valid if the entity\n     * instance is 0x60 or larger.\n     */\n    int get_entity_device_address()\n    {\n\treturn ipmi_entity_get_device_address(self);\n    }\n\n    /*\n     * Get the FRU data for the entity.  Note that you cannot hold the\n     * FRU data pointer outside the context of where the entity pointer\n     * is valid.\n     */\n    %newobject get_fru;\n    ipmi_fru_t *get_fru()\n    {\n\tipmi_fru_t *fru = ipmi_entity_get_fru(self);\n\tif (fru)\n\t    ipmi_fru_ref(fru);\n\treturn fru;\n    }\n\n    /*\n     * If this returns true, then the presence sensor is always there\n     * for this entity.\n     */\n    int get_presence_sensor_always_there()\n    {\n\treturn ipmi_entity_get_presence_sensor_always_there(self);\n    }\n\n    /*\n     * Returns if the entity has a parent.\n     */\n    int is_child()\n    {\n\treturn ipmi_entity_get_is_child(self);\n    }\n\n    /*\n     * Returns if the entity has a child.\n     */\n    int is_parent()\n    {\n\treturn ipmi_entity_get_is_parent(self);\n    }\n\n    /*\n     * Return the channel from the device locator record.  Valid for\n     * all entities except unknown.\n     */\n    int get_channel()\n    {\n\treturn ipmi_entity_get_channel(self);\n    }\n\n    /*\n     * Return the LUN from the device locator record.  Valid for\n     * all entities except unknown.\n     */\n    int get_lun()\n    {\n\treturn ipmi_entity_get_lun(self);\n    }\n\n    /*\n     * Return the OEM byte from the device locator record.  Valid for\n     * all entities except unknown.\n     */\n    int get_oem()\n    {\n\treturn ipmi_entity_get_oem(self);\n    }\n\n    /*\n     * Return the access address from the device locator record.  Valid for\n     * FRU and generic entities.\n     */\n    int get_access_address()\n    {\n\treturn ipmi_entity_get_access_address(self);\n    }\n\n    /*\n     * Return the private bus id from the device locator record.  Valid for\n     * FRU and generic entities.\n     */\n    int get_private_bus_id()\n    {\n\treturn ipmi_entity_get_private_bus_id(self);\n    }\n\n    /*\n     * Return the device type from the device locator record.  Valid for\n     * FRU and generic entities.\n     */\n    int get_device_type()\n    {\n\treturn ipmi_entity_get_device_type(self);\n    }\n\n    /*\n     * Return the device modifier from the device locator record.\n     * Valid for FRU and generic entities.\n     */\n    int get_device_modifier()\n    {\n\treturn ipmi_entity_get_device_modifier(self);\n    }\n\n    /*\n     * Return the slave address from the device locator record.  Valid for\n     * MC and generic entities.\n     */\n    int get_slave_address()\n    {\n\treturn ipmi_entity_get_slave_address(self);\n    }\n\n    %newobject get_mc_id;\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *mc_id = malloc(sizeof(*mc_id));\n\tint rv;\n\trv = ipmi_entity_get_mc_id(self, mc_id);\n\tif (rv) {\n\t    free(mc_id);\n\t    mc_id = NULL;\n\t}\n\treturn mc_id;\n    }\n    /*\n     * Return if the FRU is logical (from the device locator record).\n     * Valid for FRU entities.\n     */\n    int get_is_logical_fru()\n    {\n\treturn ipmi_entity_get_is_logical_fru(self);\n    }\n\n    /*\n     * Return the device id from the device locator record.  Valid for\n     * FRU entities.\n     */\n    int get_fru_device_id()\n    {\n\treturn ipmi_entity_get_fru_device_id(self);\n    }\n\n    /*\n     * Return the ACPI system power notify required bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_ACPI_system_power_notify_required()\n    {\n\treturn ipmi_entity_get_ACPI_system_power_notify_required(self);\n    }\n\n    /*\n     * Return the ACPI device power notify required bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_ACPI_device_power_notify_required()\n    {\n\treturn ipmi_entity_get_ACPI_device_power_notify_required(self);\n    }\n\n    /*\n     * Return the controller logs init agent errors bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_controller_logs_init_agent_errors()\n    {\n\treturn ipmi_entity_get_controller_logs_init_agent_errors(self);\n    }\n\n    /*\n     * Return the log init agent errors accessing bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_log_init_agent_errors_accessing()\n    {\n\treturn ipmi_entity_get_log_init_agent_errors_accessing(self);\n    }\n\n    /*\n     * Return the global init bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_global_init()\n    {\n\treturn ipmi_entity_get_global_init(self);\n    }\n\n    /*\n     * Return the chassis device bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_chassis_device()\n    {\n\treturn ipmi_entity_get_chassis_device(self);\n    }\n\n    /*\n     * Return the !bridge bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_bridge()\n    {\n\treturn ipmi_entity_get_bridge(self);\n    }\n\n    /*\n     * Return the IPMB event generator bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_IPMB_event_generator()\n    {\n\treturn ipmi_entity_get_IPMB_event_generator(self);\n    }\n\n    /*\n     * Return the IPMB event receiver bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_IPMB_event_receiver()\n    {\n\treturn ipmi_entity_get_IPMB_event_receiver(self);\n    }\n\n    /*\n     * Return the FRU inventory device bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_FRU_inventory_device()\n    {\n\treturn ipmi_entity_get_FRU_inventory_device(self);\n    }\n\n    /*\n     * Return the SEL device bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_SEL_device()\n    {\n\treturn ipmi_entity_get_SEL_device(self);\n    }\n\n    /*\n     * Return the SDR repository device bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_SDR_repository_device()\n    {\n\treturn ipmi_entity_get_SDR_repository_device(self);\n    }\n\n    /*\n     * Return the sensor device bit from the\n     * device locator record.  Valid for MC entities.\n     */\n    int get_sensor_device()\n    {\n\treturn ipmi_entity_get_sensor_device(self);\n    }\n\n    /*\n     * Return the address span from the device locator record.  Valid\n     * for generic entities.\n     */\n    int get_address_span()\n    {\n\treturn ipmi_entity_get_address_span(self);\n    }\n\n    %newobject get_dlr_id;\n    /*\n     * Return the id string from the DLR.\n     */\n    char *get_dlr_id()\n    {\n\t/* FIXME - no unicode handling. */\n\tint len = ipmi_entity_get_id_length(self) + 1;\n\tchar *id = malloc(len);\n\tipmi_entity_get_id(self, id, len);\n\treturn id;\n    }\n\n    /*\n     * Returns true if the entity is present, false if not.\n     */\n    int is_present()\n    {\n\treturn ipmi_entity_is_present(self);\n    }\n\n    /*\n     * Returns the physical slot number, or -1 if there is not\n     * a slot number.\n     */\n    int get_physical_slot_num()\n    {\n\tunsigned int num;\n\tif (ipmi_entity_get_physical_slot_num(self, &num) == 0)\n\t    return num;\n\telse\n\t    return -1;\n    }\n\n    /*\n     * Returns true if the entity is hot-swappable, false if not.\n     */\n    int is_hot_swappable()\n    {\n\treturn ipmi_entity_hot_swappable(self);\n    }\n\n    int supports_managed_hot_swap()\n    {\n\treturn ipmi_entity_supports_managed_hot_swap(self);\n    }\n\n    /*\n     * Add a handler to be called when the hot-swap state for the\n     * entity changes.  When the hot-swap state changes the\n     * entity_hot_swap_update_cb method on the first parameter will be\n     * called with the following parameters: <self> <entity> <old\n     * state> <new state> <event>.  The event is optional and may not\n     * be present.\n     */\n    int add_hot_swap_handler(swig_cb *handler)\n    {\n\tipmi_entity_add_hot_swap_handler_cl\n\t    (self, entity_hot_swap_handler_cl, NULL);\n\tcb_add(entity, hot_swap, entity_hot_swap_update_cb);\n    }\n\n    /*\n     * Remove the hot-swap update handler.\n     */\n    int remove_hot_swap_handler(swig_cb *handler)\n    {\n\tcb_rm(entity, hot_swap, entity_hot_swap_update_cb);\n    }\n\n    /*\n     * Get the current hot-swap state for the entity.  The\n     * entity_hot_swap_cb handler will be called with the following\n     * parameters: <self> <entity> <err> <state>\n     */\n    int get_hot_swap_state(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_hot_swap_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, entity_hot_swap_cb);\n\t    rv = ipmi_entity_get_hot_swap_state(self,\n\t\t\t\t\t\tentity_get_hot_swap_handler,\n\t\t\t\t\t\thandler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* Returns if the entity supports auto-activate. */\n    int supports_auto_activate_time()\n    {\n\treturn ipmi_entity_supports_auto_activate_time(self);\n    }\n\n    /*\n     * Get the current hot-swap activation time for the entity.  The\n     * entity_hot_swap_get_time_cb handler will be called with the\n     * following parameters: <self> <entity> <err> <time>\n     */\n    int get_auto_activate_time(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_hot_swap_get_time_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, entity_hot_swap_get_time_cb);\n\t    rv = ipmi_entity_get_auto_activate_time\n\t\t(self,\n\t\t entity_get_hot_swap_time_handler,\n\t\t handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the current hot-swap activation time for the entity.  The\n     * entity_hot_swap_set_time_cb handler will be called with the\n     * following parameters (if it is supplied): <self> <entity> <err>\n     */\n    int set_auto_activate_time(ipmi_timeout_t auto_act,\n\t\t\t       swig_cb *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_entity_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, entity_hot_swap_set_time_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, entity_hot_swap_set_time_cb);\n\t    done = entity_set_hot_swap_time_handler;\n\t}\n\trv = ipmi_entity_set_auto_activate_time\n\t    (self, auto_act, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* Returns if the entity supports auto-deactivate. */\n    int supports_auto_deactivate_time()\n    {\n\treturn ipmi_entity_supports_auto_deactivate_time(self);\n    }\n\n    /*\n     * Get the current hot-swap deactivation time for the entity.  The\n     * entity_hot_swap_get_time_cb handler will be called with the\n     * following parameters: <self> <entity> <err> <time>\n     */\n    int get_auto_deactivate_time(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, entity_hot_swap_get_time_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, entity_hot_swap_get_time_cb);\n\t    rv = ipmi_entity_get_auto_deactivate_time\n\t\t(self,\n\t\t entity_get_hot_swap_time_handler,\n\t\t handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the current hot-swap deactivation time for the entity.  The\n     * entity_hot_swap_set_time_cb handler will be called with the\n     * following parameters (if it is supplied): <self> <entity> <err>\n     */\n    int set_auto_deactivate_time(ipmi_timeout_t auto_act,\n\t\t\t\t swig_cb        *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_entity_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, entity_hot_swap_set_time_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, entity_hot_swap_set_time_cb);\n\t    done = entity_set_hot_swap_time_handler;\n\t}\n\trv = ipmi_entity_set_auto_deactivate_time\n\t    (self, auto_act, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Cause the entity to move from INACTIVE to ACTIVATION_REQUESTED\n     * state, if possible. If the entity does not support this\n     * operation, this will return ENOSYS and you can move straight\n     * from INACTIVE to ACTIVE state by calling ipmi_entity_activate.\n     * After this is done, the entity_activate_cb handler will be\n     * called with the following parameters (if it is supplied):\n     * <self> <entity> <err>\n     */\n    int set_activation_requested(swig_cb *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_entity_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, entity_activate_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, entity_activate_cb);\n\t    done = entity_activate_handler;\n\t}\n\trv = ipmi_entity_set_activation_requested(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Attempt to activate an entity.  Activate will cause a\n     * transition from INACTIVE to ACTIVE (but only if\n     * ipmi_entity_set_activation_requested() returns ENOSYS), or from\n     * ACTIVATION_REQUESTED to ACTIVE.  After this is done, the\n     * entity_activate_cb handler will be called with the following\n     * parameters (if it is supplied): <self> <entity> <err>\n     */\n    int activate(swig_cb *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_entity_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, entity_activate_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, entity_activate_cb);\n\t    done = entity_activate_handler;\n\t}\n\trv = ipmi_entity_activate(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Attempt to deactivate an entity.  Deactivate will cause a\n     * transition from DEACTIVATION_REQUESTED or ACTIVE to INACTIVE.\n     * After this is done, the entity_activate_cb handler will be\n     * called with the following parameters (if it is supplied):\n     * <self> <entity> <err>\n     */\n    int deactivate(swig_cb *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_entity_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, entity_activate_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, entity_activate_cb);\n\t    done = entity_activate_handler;\n\t}\n\trv = ipmi_entity_deactivate(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Check the state of hot-swap for the entity.  This causes the\n     * local state to be audited against the actual state.\n     */\n    int check_hot_swap_state()\n    {\n\treturn ipmi_entity_check_hot_swap_state(self);\n    }\n\n}\n\n/*\n * A mc id object.  This object is guaranteed to be valid and\n * can be converted into a mc pointer later.\n */\n%extend ipmi_mcid_t {\n    ~ipmi_mcid_t()\n    {\n\tfree(self);\n    }\n\n    /* Compare self with other, return -1 if self<other, 0 if\n       self==other, or 1 if self>other.  */\n    int cmp(ipmi_mcid_t *other)\n    {\n\treturn ipmi_cmp_mc_id(*self, *other);\n    }\n\n    /*\n     * Convert a mc id to a mc pointer.  The \"mc_cb\" method\n     * will be called on the first parameter with the following parameters:\n     * <self> <mc>\n     */\n    int to_mc(swig_cb *handler)\n    {\n\tint rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, mc_cb))\n\t    rv = EINVAL;\n\telse\n\t    rv = ipmi_mc_pointer_cb(*self, handle_mc_cb,\n\t\t\t\t    get_swig_cb(handler, mc_cb));\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n/*\n * An MC object\n */\n%extend ipmi_mc_t {\n    /*\n     * Get the domain the mc belongs to.\n     */\n    ipmi_domain_t *get_domain()\n    {\n\treturn ipmi_mc_get_domain(self);\n    }\n\n    %newobject get_name;\n    /*\n     * Get the name of an mc.\n     */\n    char *get_name()\n    {\n\tchar name[IPMI_MC_NAME_LEN];\n\n\tipmi_mc_get_name(self, name, sizeof(name));\n\treturn strdup(name);\n    }\n\n    %newobject get_id;\n    /*\n     * Get the id for the mc.\n     */\n    ipmi_mcid_t *get_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_mc_convert_to_id(self);\n\treturn rv;\n    }\n\n    %newobject get_guid;\n    /*\n     * Get the GUID for the MC.  Returns NULL if it is not supported.\n     */\n    char *get_guid()\n    {\n\tchar          *str = NULL;\n\tunsigned char guid[16];\n\n\tif (ipmi_mc_get_guid(self, guid) == 0) {\n\t    str = malloc(16 * 3);\n\t    if (str) {\n\t\tchar *s = str;\n\t\tint  i;\n\t\ts += sprintf(s, \"%2.2x\", guid[0]);\n\t\tfor (i=1; i<16; i++)\n\t\t    s += sprintf(s, \" %2.2x\", guid[i]);\n\t    }\n\t}\n\treturn str;\n    }\n\n    /*\n     * Get the provides_device_sdrs from the get device id response\n     * from the MC.\n     */\n    int provides_device_sdrs()\n    {\n\treturn ipmi_mc_provides_device_sdrs(self);\n    }\n\n    /*\n     * Get the device_available bit from the get device id response\n     * from the MC.\n     */\n    int device_available()\n    {\n\treturn ipmi_mc_device_available(self);\n    }\n\n    /*\n     * Get the chassis_support bit from the get device id response\n     * from the MC.\n     */\n    int chassis_support()\n    {\n\treturn ipmi_mc_chassis_support(self);\n    }\n\n    /*\n     * Get the bridge_support bit from the get device id response\n     * from the MC.\n     */\n    int bridge_support()\n    {\n\treturn ipmi_mc_bridge_support(self);\n    }\n\n    /*\n     * Get the ipmb_event_generator_support bit from the get device id response\n     * from the MC.\n     */\n    int ipmb_event_generator_support()\n    {\n\treturn ipmi_mc_ipmb_event_generator_support(self);\n    }\n\n    /*\n     * Get the ipmb_event_receiver_support bit from the get device id response\n     * from the MC.\n     */\n    int ipmb_event_receiver_support()\n    {\n\treturn ipmi_mc_ipmb_event_receiver_support(self);\n    }\n\n    /*\n     * Get the fru_inventory_support bit from the get device id response\n     * from the MC.\n     */\n    int fru_inventory_support()\n    {\n\treturn ipmi_mc_fru_inventory_support(self);\n    }\n\n    /*\n     * Get the sel_device_support bit from the get device id response\n     * from the MC.\n     */\n    int sel_device_support()\n    {\n\treturn ipmi_mc_sel_device_support(self);\n    }\n\n    /*\n     * Get the sdr_repository_support bit from the get device id response\n     * from the MC.\n     */\n    int sdr_repository_support()\n    {\n\treturn ipmi_mc_sdr_repository_support(self);\n    }\n\n    /*\n     * Get the sensor_device_support bit from the get device id response\n     * from the MC.\n     */\n    int sensor_device_support()\n    {\n\treturn ipmi_mc_sensor_device_support(self);\n    }\n\n    /*\n     * Get the device_id from the get device id response\n     * from the MC.\n     */\n    int device_id()\n    {\n\treturn ipmi_mc_device_id(self);\n    }\n\n    /*\n     * Get the device_revision from the get device id response\n     * from the MC.\n     */\n    int device_revision()\n    {\n\treturn ipmi_mc_device_revision(self);\n    }\n\n    /*\n     * Get the major_fw_revision from the get device id response\n     * from the MC.\n     */\n    int major_fw_revision()\n    {\n\treturn ipmi_mc_major_fw_revision(self);\n    }\n\n    /*\n     * Get the minor_fw_revision from the get device id response\n     * from the MC.\n     */\n    int minor_fw_revision()\n    {\n\treturn ipmi_mc_minor_fw_revision(self);\n    }\n\n    /*\n     * Get the major_version from the get device id response\n     * from the MC.\n     */\n    int major_version()\n    {\n\treturn ipmi_mc_major_version(self);\n    }\n\n    /*\n     * Get the minor_version from the get device id response\n     * from the MC.\n     */\n    int minor_version()\n    {\n\treturn ipmi_mc_minor_version(self);\n    }\n\n    /*\n     * Get the manufacturer_id from the get device id response\n     * from the MC.\n     */\n    int manufacturer_id()\n    {\n\treturn ipmi_mc_manufacturer_id(self);\n    }\n\n    /*\n     * Get the product_id from the get device id response\n     * from the MC.\n     */\n    int product_id()\n    {\n\treturn ipmi_mc_product_id(self);\n    }\n\n    /*\n     * Get the auxiliary firmware revision.  This returns a string\n     * with four bytes set.\n     */\n    %newobject aux_fw_revision;\n    char *aux_fw_revision()\n    {\n\tchar *str;\n\tunsigned char data[4];\n\n\tstr = malloc(28);\n\tipmi_mc_aux_fw_revision(self, data);\n\tsnprintf(str, 28,\n\t\t \"0x%2.2x 0x%2.2x 0x%2.2x 0x%2.2x\",\n\t\t data[0], data[1], data[2], data[3]);\n\treturn str;\n    }\n\n    /*\n     * Check to see if the MC is operational in the system.  If this\n     * is return sfalse, then the MC was referred to by an SDR, but it\n     * doesn't really exist (at least not yet).\n     */\n    int is_active()\n    {\n\treturn ipmi_mc_is_active(self);\n    }\n\n    /*\n     * Add a handler to be called when an mc's active state\n     * changes. When the active state changes the mc_active_cb\n     * method on the first parameter will be called with the following\n     * parameters: <self> <mc> <active (boolean integer)>.\n     */\n    int add_active_handler(swig_cb *handler)\n    {\n\tipmi_mc_add_active_handler_cl\n\t    (self, mc_active_handler_cl, NULL);\n\tcb_add(mc, active, mc_active_cb);\n    }\n\n    /*\n     * Remove the presence handler.\n     */\n    int remove_active_handler(swig_cb *handler)\n    {\n\tcb_rm(mc, active, mc_active_cb);\n    }\n\n    /*\n     * Add a handler to be called when an mc has reached fully up\n     * status.  When this happens the mc_fully_up_cb\n     * method on the first parameter will be called with the following\n     * parameters: <self> <mc>.\n     */\n    int add_fully_up_handler(swig_cb *handler)\n    {\n\tipmi_mc_add_fully_up_handler_cl\n\t    (self, mc_fully_up_handler_cl, NULL);\n\tcb_add(mc, fully_up, mc_fully_up_cb);\n    }\n\n    /*\n     * Remove the presence handler.\n     */\n    int remove_fully_up_handler(swig_cb *handler)\n    {\n\tcb_rm(mc, fully_up, mc_fully_up_cb);\n    }\n\n    /*\n     * Send a command to a given MC with the given lun (parm 1), netfn\n     * (parm 2), command (parm 3).  Parm 4 is the message data in an\n     * array reference.  Parm 5 is the handler, it will be called with\n     * the response.  The mc_cmd_cb method will be called on the\n     * handler (if it is supplied); its parameters are: <mc> <netfn> <cmd>\n     * <response data>\n     */\n    int send_command(int       lun,\n\t\t     int       netfn,\n\t\t     int       cmd,\n\t\t     intarray  msg_data,\n\t\t     swig_cb   *handler = NULL)\n    {\n\tint                        rv;\n\tswig_cb_val                *handler_val = NULL;\n\tipmi_mc_response_handler_t msg_cb = NULL;\n\tipmi_msg_t                 msg;\n\tunsigned char              data[MAX_IPMI_DATA_SIZE];\n\tunsigned int               data_len;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tmsg.netfn = netfn;\n\tmsg.cmd = cmd;\n\tmsg.data = data;\n\trv = parse_ipmi_data(msg_data, data, sizeof(data), &data_len);\n\tmsg.data_len = data_len;\n\tif (rv)\n\t    goto out_err;\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_cmd_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    msg_cb = mc_msg_cb;\n\t    handler_val = ref_swig_cb(handler, mc_cmd_cb);\n\t}\n\trv = ipmi_mc_send_command(self, lun, &msg, msg_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n%constant int MC_RESET_COLD = IPMI_MC_RESET_COLD;\n%constant int MC_RESET_WARM = IPMI_MC_RESET_WARM;\n    /*\n     * Reset the MC, either a cold or warm reset depending on the\n     * first parm.  Note that the effects of a reset are not defined\n     * by IPMI, so this might do wierd things.  Some systems do not\n     * support resetting the MC.  This is not a standard control\n     * because there is no entity to hang if from and you don't want\n     * people messing with it unless they really know what they are\n     * doing.  When the reset is complete the mc_reset_cb will be\n     * called on the second parameter of this call (if it is\n     * supplied) with the following parameters: <self> <mc> <err>\n     */\n    int reset(int     reset_type,\n\t      swig_cb *handler = NULL)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_reset_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_reset_cb);\n\t    done = mc_reset_handler;\n\t}\n\trv = ipmi_mc_reset(self, reset_type, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* Get the setting to enable events for the entire MC.  The value\n       returned by the get function is a boolean telling whether\n       events are enabled. */\n    int get_events_enable()\n    {\n\treturn ipmi_mc_get_events_enable(self);\n    }\n\n    /*\n     * Set the setting to enable events for the entire MC.  The \"val\"\n     * passed in as the first parameter is a boolean telling whether\n     * to turn events on (true) or off (false).  When the operation\n     * completes the mc_events_enable_cb will be called on the handler\n     * (if it is supplied) with the following parameters: <self> <mc>\n     * <err>.\n     */\n    int set_events_enable(int     val,\n\t\t\t  swig_cb *handler = NULL)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_events_enable_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_events_enable_cb);\n\t    done = mc_events_enable_handler;\n\t}\n\trv = ipmi_mc_set_events_enable(self, val, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Find out of the event log is enabled.  The\n     * mc_get_event_log_enable_cb will be called on the supplied\n     * handler with the following parms: <self> <mc> <err> <val>\n     */\n    int get_event_log_enable(swig_cb *handler)\n    {\n\tswig_cb_val *handler_val;\n\tint         rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, mc_get_event_log_enable_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, mc_get_event_log_enable_cb);\n\t    \n\t    rv = ipmi_mc_get_event_log_enable(self,\n\t\t\t\t\t      mc_get_event_log_enable_handler,\n\t\t\t\t\t      handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the MC's event log enable.  The mc_set_event_log_enable_cb\n     * will be called on the supplied handler with the following\n     * parms: <self> <mc> <err>\n     */\n    int set_event_log_enable(int val, swig_cb *handler = NULL)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_set_event_log_enable_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_set_event_log_enable_cb);\n\t    done = mc_set_event_log_enable_handler;\n\t}\n\trv = ipmi_mc_set_event_log_enable(self, val, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Reread all the sensors for a given mc.  This will request the\n     * device SDRs for that mc (And only for that MC) and change the\n     * sensors as necessary.  When the operation completes, the\n     * mc_reread_sensors_cb on the first parameter (if supplied) will\n     * be called with the following parms: <self> <mc> <err>.\n     */\n    int reread_sensors(swig_cb *handler = NULL)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_reread_sensors_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_reread_sensors_cb);\n\t    done = mc_reread_sensors_handler;\n\t}\n\trv = ipmi_mc_reread_sensors(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the time between SEL rescans for the MC (and only that MC).\n     * Parm 1 is the time in seconds.\n     */\n    void set_sel_rescan_time(unsigned int seconds)\n    {\n\tipmi_mc_set_sel_rescan_time(self, seconds);\n    }\n\n    /*\n     * Return the current SEL rescan time for the MC.\n     */\n    int get_sel_rescan_time()\n    {\n\treturn ipmi_mc_get_sel_rescan_time(self);\n    }\n\n    /*\n     * Reread the sel for the MC.  When the handler is called, all the\n     * events in the SEL have been fetched into the local copy of the\n     * SEL (with the obvious caveat that this is a distributed system\n     * and other things may have come in after the read has finised).\n     * When this completes, the mc_reread_sel_cb method will be called\n     * on the handler (parm 1, if it is supplied) with the parameters:\n     * <self> <mc> <err>.\n     */\n    int reread_sel(swig_cb *handler = NULL)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_reread_sel_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_reread_sel_cb);\n\t    done = mc_reread_sel_handler;\n\t}\n\trv = ipmi_mc_reread_sel(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Fetch the current time from the SEL.  When the operation\n     * completes, the mc_get_sel_time_cb method will be called on the\n     * first parameter (if it is supplied) with the following\n     * values: <self> <mc> <err> <time>\n     */\n    int get_current_sel_time(swig_cb *handler)\n    {\n\tswig_cb_val     *handler_val = NULL;\n\tsel_get_time_cb done = NULL;\n\tint             rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_get_sel_time_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_get_sel_time_cb);\n\t    done = mc_sel_get_time_cb;\n\t}\n\trv = ipmi_mc_get_current_sel_time(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    %newobject first_event;\n    /*\n     * Retrieve the first event from the MC.  Return NULL (undef)\n     * if the event does not exist.\n     */\n    ipmi_event_t *first_event()\n    {\n\treturn ipmi_mc_first_event(self);\n    }\n\n    %newobject last_event;\n    /*\n     * Retrieve the last event from the MC.\n     */\n    ipmi_event_t *last_event()\n    {\n\treturn ipmi_mc_last_event(self);\n    }\n\n    %newobject next_event;\n    /*\n     * Retrieve the next event from the MC.\n     */\n    ipmi_event_t *next_event(ipmi_event_t *event)\n    {\n\treturn ipmi_mc_next_event(self, event);\n    }\n\n    %newobject prev_event;\n    /*\n     * Retrieve the previous event from the MC.\n     */\n    ipmi_event_t *prev_event(ipmi_event_t *event)\n    {\n\treturn ipmi_mc_prev_event(self, event);\n    }\n\n    %newobject event_by_recid;\n    /*\n     * Retrieve the event with the given record id from the MC.\n     */\n    ipmi_event_t *event_by_recid(int record_id)\n    {\n\treturn ipmi_mc_event_by_recid(self, record_id);\n    }\n\n    /*\n     * The number of live items in the local copy of the MC's SEL.\n     */\n    int sel_count()\n    {\n\treturn ipmi_mc_sel_count(self);\n    }\n\n    /*\n     * Number of entries in the the remote SEL.  If an entry has been\n     * deleted in the local copy of the SEL but has not yet finished\n     * being deleted in the remote copy, it will be counted here.\n     */\n    int sel_entries_used()\n    {\n\treturn ipmi_mc_sel_entries_used(self);\n    }\n\n    /*\n     * The major version of the MC's SEL.\n     */\n    int sel_get_major_version()\n    {\n\treturn ipmi_mc_sel_get_major_version(self);\n    }\n\n    /*\n     * The minor version of the MC's SEL.\n     */\n    int sel_get_minor_version()\n    {\n\treturn ipmi_mc_sel_get_minor_version(self);\n    }\n\n    /*\n     * The number of entries available in the MC's SEL.\n     */\n    int sel_get_num_entries()\n    {\n\treturn ipmi_mc_sel_get_num_entries(self);\n    }\n\n    /*\n     * The number of free bytes available in the MC's SEL.\n     */\n    int sel_get_free_bytes()\n    {\n\treturn ipmi_mc_sel_get_free_bytes(self);\n    }\n\n    /*\n     * Has an overflow occurred since the last SEL operation?\n     */\n    int sel_get_overflow()\n    {\n\treturn ipmi_mc_sel_get_overflow(self);\n    }\n\n    /*\n     * Does the SEL support individual deletes of entries?\n     */\n    int sel_get_supports_delete_sel()\n    {\n\treturn ipmi_mc_sel_get_supports_delete_sel(self);\n    }\n\n    /*\n     * Does the SEL support partial adds of entries?\n     */\n    int sel_get_supports_partial_add_sel()\n    {\n\treturn ipmi_mc_sel_get_supports_partial_add_sel(self);\n    }\n\n    /*\n     * Does the SEL support the reserve protocol?\n     */\n    int sel_get_supports_reserve_sel()\n    {\n\treturn ipmi_mc_sel_get_supports_reserve_sel(self);\n    }\n\n    /*\n     * Does the SEL support getting the SEL allocastion?\n     */\n    int sel_get_supports_get_sel_allocation()\n    {\n\treturn ipmi_mc_sel_get_supports_get_sel_allocation(self);\n    }\n\n    /*\n     * The timestamp of the last time something was added to the SEL.\n     */\n    int sel_get_last_addition_timestamp()\n    {\n\treturn ipmi_mc_sel_get_last_addition_timestamp(self);\n    }\n\n%constant int MAX_USED_CHANNELS = MAX_IPMI_USED_CHANNELS;\n    /*\n     * Get the info for a channel on the MC.  The first parm is the\n     * integer channel number.  The second is the handler object,\n     * the mc_channel_got_info_cb method will be called on it with the\n     * following parameters: <self> <mc> <err> <chan_info>\n     * where chan_info is ipmi_channel_info_t.\n     */\n    int channel_get_info(int channel, swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, mc_channel_got_info_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, mc_channel_got_info_cb);\n\t    rv = ipmi_mc_channel_get_info(self, channel,\n\t\t\t\t\t  mc_channel_get_info, handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the access info for a channel on the MC.  The first parm is\n     * the integer channel number.  The second parm is the type to\n     * set, either \"volatile\" or \"nonvolatile\".  The third is the\n     * handler object, the mc_channel_got_access_cb method will be\n     * called on it with the following parameters: <self> <mc> <err>\n     * <access_info> where access_info is ipmi_channel_access_t.\n     */\n    int channel_get_access(int channel, char *type, swig_cb *handler)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tenum ipmi_set_dest_e dest;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (strcmp(type, \"nonvolatile\") == 0)\n\t    dest = IPMI_SET_DEST_NON_VOLATILE;\n\telse if (strcmp(type, \"volatile\") == 0)\n\t    dest = IPMI_SET_DEST_VOLATILE;\n\telse {\n\t    rv = EINVAL;\n\t    goto out_err;\n\t}\n\n\tif (!valid_swig_cb(handler, mc_channel_got_access_cb)) {\n\t    rv = EINVAL;\n\t    goto out_err;\n\t}\n\thandler_val = ref_swig_cb(handler, mc_channel_got_access_cb);\n\trv = ipmi_mc_channel_get_access(self, channel, dest,\n\t\t\t\t\tmc_channel_get_access, handler_val);\n\tif (rv)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the access info for a channel on the MC, generally from one\n     * that you have previously fetched.  The first parameter is the\n     * access object you with to set the channel to.  The second parm\n     * is the integer channel number.  The third parm is the type to\n     * set, either \"volatile\" or \"nonvolatile\".  The forth is the\n     * handler object, the mc_channel_set_access_cb method will be\n     * called on it with the following parameters: <self> <mc> <err>.\n     */\n    int channel_set_access(ipmi_channel_access_t *access,\n\t\t\t   int                   channel,\n\t\t\t   char                  *type,\n\t\t\t   swig_cb               *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tipmi_mc_done_cb      done = NULL;\n\tenum ipmi_set_dest_e dest;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (strcmp(type, \"nonvolatile\") == 0)\n\t    dest = IPMI_SET_DEST_NON_VOLATILE;\n\telse if (strcmp(type, \"volatile\") == 0)\n\t    dest = IPMI_SET_DEST_VOLATILE;\n\telse {\n\t    rv = EINVAL;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, mc_channel_set_access_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_channel_set_access_cb);\n\t    done = mc_channel_set_access;\n\t}\n\trv = ipmi_mc_channel_set_access(self, channel, dest, access,\n\t\t\t\t\tdone, handler_val);\n\tif (rv)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the user info for a channel on the MC.  The first parameter\n     * is the channel.  The second is the user number; if a valid user\n     * number is passed in, then that user is the only one fetched.\n     * If 0 is passed for the user number, then all users are\n     * fetched.  The third is the handler object, the\n     * mc_channel_got_users_cb method will be called on it with the\n     * following parameters: <self> <mc> <err> <max users>\n     * <enabled users> <fixed users> <user1> [<user2> ...]\n     * where the users are ipmi_user_t objects.\n     */\n    int get_users(int channel, int user, swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, mc_channel_got_users_cb)) \n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, mc_channel_got_users_cb);\n\t    rv = ipmi_mc_get_users(self, channel, user,\n\t\t\t\t   mc_channel_got_users, handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the user info for a channel on the MC.  The first parameter\n     * is the ipmi_user_t object.  The second parameter is the\n     * channel.  The third is the user number; if a valid user number\n     * is passed in, then that user is the only one fetched.  The\n     * fourth is the handler object, the mc_channel_set_user_cb\n     * method will be called on it with the following parameters:\n     * <self> <mc> <err>.  Note that some info is channel-specific.\n     * Just the name and password and enable are global to the MC.\n     */\n    int set_user(ipmi_user_t *userinfo,\n\t\t int         channel,\n\t\t int         usernum,\n\t\t swig_cb     *handler = NULL)\n    {\n\tint             rv;\n\tswig_cb_val     *handler_val = NULL;\n\tipmi_mc_done_cb done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, mc_channel_set_user_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, mc_channel_set_user_cb);\n\t    done = mc_channel_set_user;\n\t}\n\trv = ipmi_mc_set_user(self, channel, usernum, userinfo,\n\t\t\t      done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Allocate a lanparm object for the MC.  The channel is the first\n     * parameter, the lanparm is returned.\n     */\n    %newobject get_lanparm;\n    ipmi_lanparm_t *get_lanparm(int channel)\n    {\n\tint            rv;\n\tipmi_lanparm_t *lp;\n\n\trv = ipmi_lanparm_alloc(self, channel, &lp);\n\tif (rv)\n\t    return NULL;\n\treturn lp;\n    }\n\n    /*\n     * Allocate a pef object for the MC.  The pef object is returned.\n     * The first parameter is an optional callback object, the\n     * got_pef_cb method will be called on it when the PEF fetch is\n     * complete.  It will have the following parameters: <self> <pef>\n     * <err>.  Note that you cannot use the PEF until the fetch is\n     * complete.\n     */\n    %newobject get_pef;\n    ipmi_pef_t *get_pef(swig_cb *handler = NULL)\n    {\n\tint              rv;\n\tipmi_pef_t       *pef = NULL;\n\tswig_cb_val      *handler_val = NULL;\n\tipmi_pef_done_cb done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, got_pef_cb))\n\t\tgoto out_err;\n\t    handler_val = ref_swig_cb(handler, got_pef_cb);\n\t    done = get_pef;\n\t}\n\trv = ipmi_pef_alloc(self, done, handler_val, &pef);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn pef;\n    }\n\n    /*\n     * Allocate a pet object for the MC.  The pet is returned.  The\n     * eighth parameter is an optional callback object, the got_pet_cb\n     * method will be called on it when the PET fetch is complete.  It\n     * will have the following parameters: <self> <pet> <err>.\n     * The parameters are:\n     *   int channel: the channel number to set the PET for\n     *   char ip_addr: the address to send the traps to\n     *   char mac_addr: the mac address to send the traps to\n     * The rest are the selectors in the various tables, you have to\n     * read the spec and know your system to know how to set them.\n     *   int eft_sel:\n     *   int policy_num:\n     *   int apt_sel:\n     *   int lan_dest_sel:\n     *\n     * Note that you must keep a reference to the pet around, or it will\n     * be automatically destroyed by the garbage collector.\n     */\n    %newobject get_pet;\n    ipmi_pet_t *get_pet(int     channel,\n\t\t\tchar    *ip_addr,\n\t\t\tchar    *mac_addr,\n\t\t\tint     eft_sel,\n\t\t\tint     policy_num,\n\t\t\tint     apt_sel,\n\t\t\tint     lan_dest_sel,\n\t\t\tswig_cb *handler = NULL)\n    {\n\tint              rv;\n\tipmi_pet_t       *pet = NULL;\n\tswig_cb_val      *handler_val = NULL;\n\tstruct in_addr   ip;\n\tunsigned char    mac[6];\n\tipmi_pet_done_cb done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n        rv = parse_ip_addr(ip_addr, &ip);\n\tif (rv)\n\t    goto out_err;\n\n        rv = parse_mac_addr(mac_addr, mac);\n\tif (rv)\n\t    goto out_err;\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (!valid_swig_cb(handler, got_pet_cb))\n\t\tgoto out_err;\n\t    handler_val = ref_swig_cb(handler, got_pet_cb);\n\t    done = get_pet;\n\t}\n\trv = ipmi_pet_create_mc(self, channel, ip, mac, eft_sel, policy_num,\n\t\t\t\tapt_sel, lan_dest_sel, done, handler_val,\n\t\t\t\t&pet);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn pet;\n    }\n\n    /*\n     * Allocate a solparm object for the MC.  The channel is the first\n     * parameter, the solparm is returned.\n     */\n    %newobject get_solparm;\n    ipmi_solparm_t *get_solparm(int channel)\n    {\n\tint            rv;\n\tipmi_solparm_t *lp;\n\n\trv = ipmi_solparm_alloc(self, channel, &lp);\n\tif (rv)\n\t    return NULL;\n\treturn lp;\n    }\n}\n\n%extend ipmi_channel_info_t {\n    ~ipmi_channel_info_t()\n    {\n\tipmi_channel_info_free(self);\n    }\n\n    %newobject copy;\n    ipmi_channel_info_t *copy()\n    {\n\treturn ipmi_channel_info_copy(self);\n    }\n\n    int get_channel(int *channel)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_info_get_channel(self, &val);\n\t*channel = val;\n\treturn rv;\n    }\n\n%constant int CHANNEL_MEDIUM_IPMB = IPMI_CHANNEL_MEDIUM_IPMB;\n%constant int CHANNEL_MEDIUM_ICMB_V10 = IPMI_CHANNEL_MEDIUM_ICMB_V10;\n%constant int CHANNEL_MEDIUM_ICMB_V09 = IPMI_CHANNEL_MEDIUM_ICMB_V09;\n%constant int CHANNEL_MEDIUM_8023_LAN = IPMI_CHANNEL_MEDIUM_8023_LAN;\n%constant int CHANNEL_MEDIUM_RS232 = IPMI_CHANNEL_MEDIUM_RS232;\n%constant int CHANNEL_MEDIUM_OTHER_LAN = IPMI_CHANNEL_MEDIUM_OTHER_LAN;\n    %constant int CHANNEL_MEDIUM_PCI_SMBUS = IPMI_CHANNEL_MEDIUM_PCI_SMBUS;\n%constant int CHANNEL_MEDIUM_SMBUS_v1 = IPMI_CHANNEL_MEDIUM_SMBUS_v1;\n%constant int CHANNEL_MEDIUM_SMBUS_v2 = IPMI_CHANNEL_MEDIUM_SMBUS_v2;\n%constant int CHANNEL_MEDIUM_USB_v1 = IPMI_CHANNEL_MEDIUM_USB_v1;\n%constant int CHANNEL_MEDIUM_USB_v2 = IPMI_CHANNEL_MEDIUM_USB_v2;\n%constant int CHANNEL_MEDIUM_SYS_INTF = IPMI_CHANNEL_MEDIUM_SYS_INTF;\n    int get_medium(int *medium)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_info_get_medium(self, &val);\n\t*medium = val;\n\treturn rv;\n    }\n\n%constant int CHANNEL_PROTOCOL_IPMB = IPMI_CHANNEL_PROTOCOL_IPMB;\n%constant int CHANNEL_PROTOCOL_ICMB = IPMI_CHANNEL_PROTOCOL_ICMB;\n%constant int CHANNEL_PROTOCOL_SMBus = IPMI_CHANNEL_PROTOCOL_SMBus;\n%constant int CHANNEL_PROTOCOL_KCS = IPMI_CHANNEL_PROTOCOL_KCS;\n%constant int CHANNEL_PROTOCOL_SMIC = IPMI_CHANNEL_PROTOCOL_SMIC;\n%constant int CHANNEL_PROTOCOL_BT_v10 = IPMI_CHANNEL_PROTOCOL_BT_v10;\n%constant int CHANNEL_PROTOCOL_BT_v15 = IPMI_CHANNEL_PROTOCOL_BT_v15;\n%constant int CHANNEL_PROTOCOL_TMODE = IPMI_CHANNEL_PROTOCOL_TMODE;\n    int get_protocol_type(int *prot_type)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_info_get_protocol_type(self, &val);\n\t*prot_type = val;\n\treturn rv;\n    }\n\n\n%constant int CHANNEL_SESSION_LESS = IPMI_CHANNEL_SESSION_LESS;\n%constant int CHANNEL_SINGLE_SESSION = IPMI_CHANNEL_SINGLE_SESSION;\n%constant int CHANNEL_MULTI_SESSION = IPMI_CHANNEL_MULTI_SESSION;\n%constant int CHANNEL_SESSION_BASED = IPMI_CHANNEL_SESSION_BASED;\n    int get_session_support(int *sup)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_info_get_session_support(self, &val);\n\t*sup = val;\n\treturn rv;\n    }\n\n    /* Data is 3 bytes long */\n    %newobject get_vendor_id;\n    char *get_vendor_id()\n    {\n\tunsigned char data[3];\n\tint           rv;\n\tchar          *rdata = malloc(15);\n\n\tif (!rdata)\n\t    return NULL;\n\trv = ipmi_channel_info_get_vendor_id(self, data);\n\tif (rv)\n\t    return NULL;\n\tsprintf(rdata, \"0x%2.2x 0x%2.2x 0x%2.2x\", data[0], data[1], data[2]);\n\treturn rdata;\n    }\n\n    /* Data is 2 bytes long */\n    %newobject get_aux_info;\n    char *get_aux_info()\n    {\n\tunsigned char data[2];\n\tint           rv;\n\tchar          *rdata = malloc(10);\n\n\tif (!rdata)\n\t    return NULL;\n\trv = ipmi_channel_info_get_aux_info(self, data);\n\tif (rv)\n\t    return NULL;\n\tsprintf(rdata, \"0x%2.2x 0x%2.2x\", data[0], data[1]);\n\treturn rdata;\n    }\n}\n\n%extend ipmi_channel_access_t {\n    ~ipmi_channel_access_t()\n    {\n\tipmi_channel_access_free(self);\n    }\n\n    %newobject copy;\n    ipmi_channel_access_t *copy()\n    {\n\treturn ipmi_channel_access_copy(self);\n    }\n\n    int get_channel(int *channel)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_channel(self, &val);\n\t*channel = val;\n\treturn rv;\n    }\n\n    int get_alerting_enabled(int *enab)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_alerting_enabled(self, &val);\n\t*enab = val;\n\treturn rv;\n    }\n\n    int set_alerting_enabled(int enab)\n    {\n\treturn ipmi_channel_access_set_alerting_enabled(self, enab);\n    }\n\n    int get_per_msg_auth(int *msg_auth)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_per_msg_auth(self, &val);\n\t*msg_auth = val;\n\treturn rv;\n    }\n\n    int set_per_msg_auth(int msg_auth)\n    {\n\treturn ipmi_channel_access_set_per_msg_auth(self, msg_auth);\n    }\n\n    int get_user_auth(int *user_auth)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_user_auth(self, &val);\n\t*user_auth = val;\n\treturn rv;\n    }\n\n    int set_user_auth(int user_auth)\n    {\n\treturn ipmi_channel_access_set_user_auth(self, user_auth);\n    }\n\n%constant int CHANNEL_ACCESS_MODE_DISABLED = IPMI_CHANNEL_ACCESS_MODE_DISABLED;\n%constant int CHANNEL_ACCESS_MODE_PRE_BOOT = IPMI_CHANNEL_ACCESS_MODE_PRE_BOOT;\n%constant int CHANNEL_ACCESS_MODE_ALWAYS = IPMI_CHANNEL_ACCESS_MODE_ALWAYS;\n%constant int CHANNEL_ACCESS_MODE_SHARED = IPMI_CHANNEL_ACCESS_MODE_SHARED;\n    int get_access_mode(int *access_mode)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_access_mode(self, &val);\n\t*access_mode = val;\n\treturn rv;\n    }\n\n    int set_access_mode(int access_mode)\n    {\n\treturn ipmi_channel_access_set_access_mode(self, access_mode);\n    }\n\n%constant int PRIVILEGE_CALLBACK = IPMI_PRIVILEGE_CALLBACK;\n%constant int PRIVILEGE_USER = IPMI_PRIVILEGE_USER;\n%constant int PRIVILEGE_OPERATOR = IPMI_PRIVILEGE_OPERATOR;\n%constant int PRIVILEGE_ADMIN = IPMI_PRIVILEGE_ADMIN;\n%constant int PRIVILEGE_OEM = IPMI_PRIVILEGE_OEM;\n    int get_privilege_limit(int *priv_limit)\n    {\n\tunsigned int val;\n\tint rv = ipmi_channel_access_get_priv_limit(self, &val);\n\t*priv_limit = val;\n\treturn rv;\n    }\n\n    int set_privilege_limit(int priv_limit)\n    {\n\treturn ipmi_channel_access_set_priv_limit(self, priv_limit);\n    }\n\n    /* Normally setting will only set the values you have changed.  This\n       forces all the values to be set. */\n    int setall() {\n\treturn ipmi_channel_access_setall(self);\n    }\n}\n\n%extend ipmi_user_t {\n    ~ipmi_user_t()\n    {\n\tipmi_user_free(self);\n    }\n\n    %newobject copy;\n    ipmi_user_t *copy()\n    {\n\treturn ipmi_user_copy(self);\n    }\n\n    int get_channel(int *channel)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_channel(self, &val);\n\t*channel = val;\n\treturn rv;\n    }\n\n    int get_num(int *num)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_num(self, &val);\n\t*num = val;\n\treturn rv;\n    }\n\n    int set_num(int num)\n    {\n\treturn ipmi_user_set_num(self, num);\n    }\n\n    char *get_name()\n    {\n\tunsigned int len;\n\tint rv;\n\tchar *name;\n\n\trv = ipmi_user_get_name_len(self, &len);\n\tif (rv)\n\t    return NULL;\n\tname = malloc(len+1);\n\tif (!name)\n\t    return NULL;\n\trv = ipmi_user_get_name(self, name, &len);\n\tif (rv) {\n\t    free(name);\n\t    return NULL;\n\t}\n\treturn name;\n    }\n\n    int set_name(char *name)\n    {\n\treturn ipmi_user_set_name(self, name, strlen(name));\n    }\n\n    int set_password(char *pw)\n    {\n\treturn ipmi_user_set_password(self, pw, strlen(pw));\n    }\n\n    int set_password2(char *pw)\n    {\n\treturn ipmi_user_set_password2(self, pw, strlen(pw));\n    }\n\n    /* Set the password, using either set_password or set_password2,\n       depending on the length of the password. */\n    int set_password_auto(char *pw)\n    {\n\tif (strlen(pw) > 16)\n\t    return ipmi_user_set_password2(self, pw, strlen(pw));\n\telse\n\t    return ipmi_user_set_password(self, pw, strlen(pw));\n    }\n\n    int get_enable(int *enable)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_enable(self, &val);\n\t*enable = val;\n\treturn rv;\n    }\n\n    int set_enable(int val)\n    {\n\treturn ipmi_user_set_enable(self, val);\n    }\n\n    int get_link_auth_enabled(int *enable)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_link_auth_enabled(self, &val);\n\t*enable = val;\n\treturn rv;\n    }\n\n    int set_link_auth_enabled(int val)\n    {\n\treturn ipmi_user_set_link_auth_enabled(self, val);\n    }\n\n    int get_msg_auth_enabled(int *enable)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_msg_auth_enabled(self, &val);\n\t*enable = val;\n\treturn rv;\n    }\n\n    int set_msg_auth_enabled(int val)\n    {\n\treturn ipmi_user_set_msg_auth_enabled(self, val);\n    }\n\n    int get_access_cb_only(int *cb)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_access_cb_only(self, &val);\n\t*cb = val;\n\treturn rv;\n    }\n\n    int set_access_cb_only(int val)\n    {\n\treturn ipmi_user_set_access_cb_only(self, val);\n    }\n\n    int get_privilege_limit(int *limit)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_privilege_limit(self, &val);\n\t*limit = val;\n\treturn rv;\n    }\n\n    int set_privilege_limit(int val)\n    {\n\treturn ipmi_user_set_privilege_limit(self, val);\n    }\n\n    int get_session_limit(int *limit)\n    {\n\tunsigned int val;\n\tint rv = ipmi_user_get_session_limit(self, &val);\n\t*limit = val;\n\treturn rv;\n    }\n\n    int set_session_limit(int val)\n    {\n\treturn ipmi_user_set_session_limit(self, val);\n    }\n\n    int set_all()\n    {\n\treturn ipmi_user_set_all(self);\n    }\n}\n\n/*\n * A sensor id object.  This object is guaranteed to be valid and\n * can be converted into a mc pointer later.\n */\n%extend ipmi_sensor_id_t {\n    ~ipmi_sensor_id_t()\n    {\n\tfree(self);\n    }\n\n    /* Compare self with other, return -1 if self<other, 0 if\n       self==other, or 1 if self>other.  */\n    int cmp(ipmi_sensor_id_t *other)\n    {\n\treturn ipmi_cmp_sensor_id(*self, *other);\n    }\n\n    /*\n     * Convert a sensor id to a sensor pointer.  The \"sensor_cb\" method\n     * will be called on the first parameter with the following parameters:\n     * <self> <sensor>\n     */\n    int to_sensor(swig_cb *handler)\n    {\n\tint rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, sensor_cb))\n\t    rv = EINVAL;\n\telse\n\t    rv = ipmi_sensor_pointer_cb(*self, handle_sensor_cb,\n\t\t\t\t\tget_swig_cb(handler, sensor_cb));\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n/*\n * An sensor object.  Sensor operations take several different types\n * of objects.  These are mostly strings that are a list of values.\n *\n * Event states are represented as a string with value separated by\n * spaces.  These value are settings and the events.  The strings\n * \"events\", \"scanning\", and \"busy\" are settings for the full sensor\n * event states.  For threshold sensor, the other values in the string\n * are 4 characters with: 1st character: u for upper or l for lower.\n * 2nd character: n for non-critical, c for critical, and r for\n * non-recoverable.  3rd character: h for going high and l for going\n * low.  4th character: a for assertion and d for deassertion.  For\n * discrete sensors, the other values are a 1 or 2-digit number\n * representing the offset and then a for assertion and d for\n * deassertion.\n *\n * A states structure is similar to event status, but does not have\n * the last two characters (direction and assertion) for thresholds\n * and last chararacter (assertion) for discrete values.\n */\n%extend ipmi_sensor_t {\n    %newobject get_name;\n    /*\n     * Get the name of an sensor.\n     */\n    char *get_name()\n    {\n\tchar name[IPMI_SENSOR_NAME_LEN];\n\n\tipmi_sensor_get_name(self, name, sizeof(name));\n\treturn strdup(name);\n    }\n\n    %newobject get_id;\n    /*\n     * Get the id for the sensor.\n     */\n    ipmi_sensor_id_t *get_id()\n    {\n\tipmi_sensor_id_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_sensor_convert_to_id(self);\n\treturn rv;\n    }\n\n    /*\n     * Register a handler to be called when an event comes from the\n     * sensor.  If the sensor is a threshold sensor, the\n     * threshold_event_cb method will be called on the sensor.\n     * Otherwise, the sensor is discrete and the discrete_event_cb\n     * will be called.  The threshold_event_cb method takes the\n     * following parameters:\n     * <self> <sensor> <event spec> <raw_set> <raw> <value_set> <value> <event>\n     * The discrete_event_cb method takes the following parameters:\n     * <self> <sensor> <event spec> <severity> <old_severity> <event>\n     */\n    int add_event_handler(swig_cb *handler)\n    {\n\tif (ipmi_sensor_get_event_reading_type(self)\n\t    == IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t{\n\t    ipmi_sensor_add_threshold_event_handler_cl\n\t\t(self, sensor_threshold_event_handler_cl, NULL);\n\t    cb_add(sensor, threshold_event, threshold_event_cb);\n\t} else {\n\t    ipmi_sensor_add_discrete_event_handler_cl\n\t\t(self, sensor_discrete_event_handler_cl, NULL);\n\t    cb_add(sensor, discrete_event, discrete_event_cb);\n\t}\n    }\n\n    /*\n     * Remove the event handler from the sensor\n     */\n    int remove_event_handler(swig_cb *handler)\n    {\n\tif (ipmi_sensor_get_event_reading_type(self)\n\t    == IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t{\n\t    cb_rm(sensor, threshold_event, threshold_event_cb);\n\t} else {\n\t    cb_rm(sensor, discrete_event, discrete_event_cb);\n\t}\n    }\n\n    /* Set the event enables for the given sensor to exactly the event\n     * states given in the first parameter.  This will first enable\n     * the events/thresholds that are set, then disable the\n     * events/thresholds that are not set.  When the operation is\n     * done, the sensor_event_enable_cb method on the second parm (if\n     * it is supplied) will be called with the following parameters:\n     * <self> <sensor> <err>\n     */\n    int set_event_enables(char *states, swig_cb *handler = NULL)\n    {\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\tipmi_event_state_t  *st;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (ipmi_sensor_get_event_reading_type(self)\n\t    == IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t{\n\t    rv = str_to_threshold_event_state(states, &st);\n\t} else {\n\t    rv = str_to_discrete_event_state(states, &st);\n\t}\n\tif (rv)\n\t    goto out_err;\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_event_enable_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    sensor_cb = sensor_event_enable_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_event_enable_cb);\n\t}\n\trv = ipmi_sensor_set_event_enables(self, st, sensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tfree(st);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Enable the event states that are set in the first parameter.\n     * This will *only* enable those states, it will not disable any\n     * states.  It will, however, set the \"events\" flag and the\n     * \"scanning\" flag for the sensor to the value in the states\n     * parameter.  When the operation is done, the\n     * sensor_event_enable_cb method on the second parm (if it is\n     * supplied) will be called with the following parameters: <self>\n     * <sensor> <err>\n     */\n    int enable_events(char *states, swig_cb *handler = NULL)\n    {\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\tipmi_event_state_t  *st;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (ipmi_sensor_get_event_reading_type(self)\n\t    == IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t{\n\t    rv = str_to_threshold_event_state(states, &st);\n\t} else {\n\t    rv = str_to_discrete_event_state(states, &st);\n\t}\n\tif (rv)\n\t    goto out_err;\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_event_enable_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    sensor_cb = sensor_event_enable_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_event_enable_cb);\n\t}\n\trv = ipmi_sensor_enable_events(self, st, sensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tfree(st);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Disable the event states that are set in the first parameter.\n     * This will *only* disable those states, it will not enable any\n     * states.  It will, however, set the \"events\" flag and the\n     * \"scanning\" flag for the sensor to the value in the states\n     * parameter.  When the operation is done, the\n     * sensor_event_enable_cb method on the second parm (if it is\n     * supplied) will be called with the following parameters: <self>\n     * <sensor> <err>\n     */\n    int disable_events(char *states, swig_cb *handler = NULL)\n    {\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\tipmi_event_state_t  *st;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (ipmi_sensor_get_event_reading_type(self)\n\t    == IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t{\n\t    rv = str_to_threshold_event_state(states, &st);\n\t} else {\n\t    rv = str_to_discrete_event_state(states, &st);\n\t}\n\tif (rv)\n\t    goto out_err;\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_event_enable_cb)) {\n\t\tfree(st);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    sensor_cb = sensor_event_enable_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_event_enable_cb);\n\t}\n\trv = ipmi_sensor_disable_events(self, st, sensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tfree(st);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the event enables for the given sensor.  When done, the\n     * sensor_get_event_enable_cb method on the first parameter will\n     * be called with the following parameters: <self> <sensor> <err>\n     * <event states>\n     */\n    int get_event_enables(swig_cb *handler)\n    {\n\tint                          rv;\n\tswig_cb_val                  *handler_val = NULL;\n\tipmi_sensor_event_enables_cb sensor_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, sensor_get_event_enable_cb))\n\t    rv = EINVAL;\n\telse {\n\t    sensor_cb = sensor_get_event_enables_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_get_event_enable_cb);\n\t    rv = ipmi_sensor_get_event_enables(self, sensor_cb, handler_val);\n\t    if (rv && handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Rearm the current sensor.  This will cause the sensor to resend\n     * it's current event state if it is out of range.  If\n     * get_supports_auto_rearm() returns false and you receive an\n     * event, you have to rearm a sensor manually to get another event\n     * from it.  If global_enable (parm 1) is set, all events are\n     * enabled and the state is ignored (and may be NULL).  Otherwise,\n     * the events set in the event state (parm 2) are enabled.  When\n     * the operation is complete, the sensor_rearm_cb method of the\n     * third parameter (if it is supplied) will be called with the\n     * following parameters: <self> <sensor> <err>\n     */\n    int rearm(int     global_enable,\n\t      char    *states,\n\t      swig_cb *handler = NULL)\n    {\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\tipmi_event_state_t  *st = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!global_enable) {\n\t    if (!states) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    if (ipmi_sensor_get_event_reading_type(self)\n\t\t== IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t    {\n\t\trv = str_to_threshold_event_state(states, &st);\n\t    } else {\n\t\trv = str_to_discrete_event_state(states, &st);\n\t    }\n\t    if (rv)\n\t\tgoto out_err;\n\t}\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_rearm_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    sensor_cb = sensor_rearm_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_rearm_cb);\n\t}\n\trv = ipmi_sensor_rearm(self, global_enable, st,\n\t\t\t       sensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tif (st)\n\t    free(st);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the hysteresis values for the given sensor.  These are the\n     * raw values, there doesn't seem to be an easy way to calculate\n     * the cooked values.  The sensor_get_hysteresis_cb method on the\n     * first parameter will be called with the values.  It's\n     * parameters are: <self> <sensor> <err> <positive hysteresis>\n     * <negative hysteresis>\n     */\n    int get_hysteresis(swig_cb *handler)\n    {\n\tint                       rv;\n\tswig_cb_val               *handler_val = NULL;\n\tipmi_sensor_hysteresis_cb sensor_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, sensor_get_hysteresis_cb))\n\t    rv = EINVAL;\n\telse {\n\t    sensor_cb = sensor_get_hysteresis_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_get_hysteresis_cb);\n\t    rv = ipmi_sensor_get_hysteresis(self, sensor_cb, handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set the hysteresis values for the given sensor.  These are the\n     * raw values, there doesn't seem to be an easy way to calculate\n     * the cooked values.  The positive hysteresis is the first\n     * parameter, the negative hystersis is the second.  When the\n     * operation completes, the sensor_set_hysteresis_cb will be\n     * called on the third parameter (if it is supplied) with the\n     * following parms: <self> <sensor> <err>\n     */\n    int set_hysteresis(unsigned int positive_hysteresis,\n\t\t       unsigned int negative_hysteresis,\n\t\t       swig_cb      *handler = NULL)\n    {\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_set_hysteresis_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    sensor_cb = sensor_set_hysteresis_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_set_hysteresis_cb);\n\t}\n\trv = ipmi_sensor_set_hysteresis(self, positive_hysteresis,\n\t\t\t\t\tnegative_hysteresis,\n\t\t\t\t\tsensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    %newobject get_default_thresholds;\n    /*\n     * Return the default threshold settings for a sensor.\n     */\n    char *get_default_thresholds()\n    {\n\tipmi_thresholds_t *th = malloc(ipmi_thresholds_size());\n\tchar              *str = NULL;\n\tint               rv;\n\n\trv = ipmi_get_default_sensor_thresholds(self, th);\n\tif (!rv) {\n\t    str = thresholds_to_str(th);\n\t}\n\tfree(th);\n\treturn str;\n    }\n\n    /*\n     * Set the thresholds for the given sensor to the threshold values\n     * specified in the first parameter.  When the thresholds are set,\n     * the sensor_set_thresholds_cb method on the second parm (if it\n     * is supplied) will be called with the following parameters:\n     * <self> <sensor> <err>\n     */\n    int set_thresholds(char    *thresholds,\n\t\t       swig_cb *handler = NULL)\n    {\n\tipmi_thresholds_t   *th = NULL;\n\tint                 rv;\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_sensor_done_cb sensor_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = str_to_thresholds(thresholds, self, &th);\n\tif (rv)\n\t    goto out_err;\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sensor_set_thresholds_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err_free;\n\t    }\n\t    sensor_cb = sensor_set_thresholds_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_set_thresholds_cb);\n\t}\n\trv = ipmi_sensor_set_thresholds(self, th, sensor_cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err_free:\n\tfree(th);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Fetch the thresholds for the given sensor.  When the thresholds\n     * are received, the sensor_get_thresholds_cb method on the second\n     * parm will be called with the following parameters: <self>\n     * <sensor> <err> <thresholds>\n     */\n    int get_thresholds(swig_cb *handler)\n    {\n\tint                       rv;\n\tswig_cb_val               *handler_val = NULL;\n\tipmi_sensor_thresholds_cb sensor_cb = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, sensor_get_thresholds_cb))\n\t    rv = EINVAL;\n\telse {\n\t    sensor_cb = sensor_get_thresholds_handler;\n\t    handler_val = ref_swig_cb(handler, sensor_get_thresholds_cb);\n\t    rv = ipmi_sensor_get_thresholds(self, sensor_cb, handler_val);\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* Read the current value of the given sensor.  If this is a\n       discrete sensor, the discrete_states_cb method of the first\n       parameter will be called with the following parameters: <self>\n       <sensor> <err> <states>.  If this is a threshold sensor, the\n       threshold_reading_cb method of the first parameter will be\n       called with the following parameters: <self> <sensor> <err>\n       <raw_set> <raw> <value_set> <value> <states>. */\n    int get_value(swig_cb *handler)\n    {\n\tint                    rv;\n\tswig_cb_val            *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, threshold_reading_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, threshold_reading_cb);\n\t    if (ipmi_sensor_get_event_reading_type(self)\n\t\t== IPMI_EVENT_READING_TYPE_THRESHOLD)\n\t    {\n\t\tipmi_sensor_reading_cb sensor_cb;\n\n\t\tsensor_cb = sensor_get_reading_handler;\n\t\trv = ipmi_sensor_get_reading(self, sensor_cb, handler_val);\n\t    } else {\n\t\tipmi_sensor_states_cb sensor_cb;\n\t\t    \n\t\tsensor_cb = sensor_get_states_handler;\n\t\trv = ipmi_sensor_get_states(self, sensor_cb, handler_val);\n\t    }\n\t    if (rv)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /* \n     * Return the LUN for the sensor (with respect to the MC).\n     */\n    int get_lun()\n    {\n\tint lun = 0;\n\tipmi_sensor_get_num(self, &lun, NULL);\n\treturn lun;\n    }\n\n    /* \n     * Return the number for the sensor (The number in the MC/LUN).\n     */\n    int get_num()\n    {\n\tint num = 0;\n\tipmi_sensor_get_num(self, NULL, &num);\n\treturn num;\n    }\n\n    /*\n     * The sensor type.  This return sa string representing the sensor\n     * type.\n     */\n    const char *get_sensor_type_string()\n    {\n\treturn ipmi_sensor_get_sensor_type_string(self);\n    }\n\n%constant int SENSOR_TYPE_TEMPERATURE = IPMI_SENSOR_TYPE_TEMPERATURE;\n%constant int SENSOR_TYPE_VOLTAGE = IPMI_SENSOR_TYPE_VOLTAGE;\n%constant int SENSOR_TYPE_CURRENT = IPMI_SENSOR_TYPE_CURRENT;\n%constant int SENSOR_TYPE_FAN = IPMI_SENSOR_TYPE_FAN;\n%constant int SENSOR_TYPE_PHYSICAL_SECURITY = IPMI_SENSOR_TYPE_PHYSICAL_SECURITY;\n%constant int SENSOR_TYPE_PLATFORM_SECURITY = IPMI_SENSOR_TYPE_PLATFORM_SECURITY;\n%constant int SENSOR_TYPE_PROCESSOR = IPMI_SENSOR_TYPE_PROCESSOR;\n%constant int SENSOR_TYPE_POWER_SUPPLY = IPMI_SENSOR_TYPE_POWER_SUPPLY;\n%constant int SENSOR_TYPE_POWER_UNIT = IPMI_SENSOR_TYPE_POWER_UNIT;\n%constant int SENSOR_TYPE_COOLING_DEVICE = IPMI_SENSOR_TYPE_COOLING_DEVICE;\n%constant int SENSOR_TYPE_OTHER_UNITS_BASED_SENSOR = IPMI_SENSOR_TYPE_OTHER_UNITS_BASED_SENSOR;\n%constant int SENSOR_TYPE_MEMORY = IPMI_SENSOR_TYPE_MEMORY;\n%constant int SENSOR_TYPE_DRIVE_SLOT = IPMI_SENSOR_TYPE_DRIVE_SLOT;\n%constant int SENSOR_TYPE_POWER_MEMORY_RESIZE = IPMI_SENSOR_TYPE_POWER_MEMORY_RESIZE;\n%constant int SENSOR_TYPE_SYSTEM_FIRMWARE_PROGRESS = IPMI_SENSOR_TYPE_SYSTEM_FIRMWARE_PROGRESS;\n%constant int SENSOR_TYPE_EVENT_LOGGING_DISABLED = IPMI_SENSOR_TYPE_EVENT_LOGGING_DISABLED;\n%constant int SENSOR_TYPE_WATCHDOG_1 = IPMI_SENSOR_TYPE_WATCHDOG_1;\n%constant int SENSOR_TYPE_SYSTEM_EVENT = IPMI_SENSOR_TYPE_SYSTEM_EVENT;\n%constant int SENSOR_TYPE_CRITICAL_INTERRUPT = IPMI_SENSOR_TYPE_CRITICAL_INTERRUPT;\n%constant int SENSOR_TYPE_BUTTON = IPMI_SENSOR_TYPE_BUTTON;\n%constant int SENSOR_TYPE_MODULE_BOARD = IPMI_SENSOR_TYPE_MODULE_BOARD;\n%constant int SENSOR_TYPE_MICROCONTROLLER_COPROCESSOR = IPMI_SENSOR_TYPE_MICROCONTROLLER_COPROCESSOR;\n%constant int SENSOR_TYPE_ADD_IN_CARD = IPMI_SENSOR_TYPE_ADD_IN_CARD;\n%constant int SENSOR_TYPE_CHASSIS = IPMI_SENSOR_TYPE_CHASSIS;\n%constant int SENSOR_TYPE_CHIP_SET = IPMI_SENSOR_TYPE_CHIP_SET;\n%constant int SENSOR_TYPE_OTHER_FRU = IPMI_SENSOR_TYPE_OTHER_FRU;\n%constant int SENSOR_TYPE_CABLE_INTERCONNECT = IPMI_SENSOR_TYPE_CABLE_INTERCONNECT;\n%constant int SENSOR_TYPE_TERMINATOR = IPMI_SENSOR_TYPE_TERMINATOR;\n%constant int SENSOR_TYPE_SYSTEM_BOOT_INITIATED = IPMI_SENSOR_TYPE_SYSTEM_BOOT_INITIATED;\n%constant int SENSOR_TYPE_BOOT_ERROR = IPMI_SENSOR_TYPE_BOOT_ERROR;\n%constant int SENSOR_TYPE_OS_BOOT = IPMI_SENSOR_TYPE_OS_BOOT;\n%constant int SENSOR_TYPE_OS_CRITICAL_STOP = IPMI_SENSOR_TYPE_OS_CRITICAL_STOP;\n%constant int SENSOR_TYPE_SLOT_CONNECTOR = IPMI_SENSOR_TYPE_SLOT_CONNECTOR;\n%constant int SENSOR_TYPE_SYSTEM_ACPI_POWER_STATE = IPMI_SENSOR_TYPE_SYSTEM_ACPI_POWER_STATE;\n%constant int SENSOR_TYPE_WATCHDOG_2 = IPMI_SENSOR_TYPE_WATCHDOG_2;\n%constant int SENSOR_TYPE_PLATFORM_ALERT = IPMI_SENSOR_TYPE_PLATFORM_ALERT;\n%constant int SENSOR_TYPE_ENTITY_PRESENCE = IPMI_SENSOR_TYPE_ENTITY_PRESENCE;\n%constant int SENSOR_TYPE_MONITOR_ASIC_IC = IPMI_SENSOR_TYPE_MONITOR_ASIC_IC;\n%constant int SENSOR_TYPE_LAN = IPMI_SENSOR_TYPE_LAN;\n%constant int SENSOR_TYPE_MANAGEMENT_SUBSYSTEM_HEALTH = IPMI_SENSOR_TYPE_MANAGEMENT_SUBSYSTEM_HEALTH;\n%constant int SENSOR_TYPE_BATTERY = IPMI_SENSOR_TYPE_BATTERY;\n    /*\n     * Return the numeric sensor type.\n     */\n    int get_sensor_type()\n    {\n\treturn ipmi_sensor_get_sensor_type(self);\n    }\n\n    /*\n     * Return the event reading type string.  If this returns\n     * \"threshold\", then this is a threshold sensor.  Otherwise it is\n     * a discrete sensor.\n     */\n    const char *get_event_reading_type_string()\n    {\n\treturn ipmi_sensor_get_event_reading_type_string(self);\n    }\n\n%constant int EVENT_READING_TYPE_THRESHOLD = IPMI_EVENT_READING_TYPE_THRESHOLD;\n%constant int EVENT_READING_TYPE_DISCRETE_USAGE = IPMI_EVENT_READING_TYPE_DISCRETE_USAGE;\n%constant int EVENT_READING_TYPE_DISCRETE_STATE = IPMI_EVENT_READING_TYPE_DISCRETE_STATE;\n%constant int EVENT_READING_TYPE_DISCRETE_PREDICTIVE_FAILURE = IPMI_EVENT_READING_TYPE_DISCRETE_PREDICTIVE_FAILURE;\n%constant int EVENT_READING_TYPE_DISCRETE_LIMIT_EXCEEDED = IPMI_EVENT_READING_TYPE_DISCRETE_LIMIT_EXCEEDED;\n%constant int EVENT_READING_TYPE_DISCRETE_PERFORMANCE_MET = IPMI_EVENT_READING_TYPE_DISCRETE_PERFORMANCE_MET;\n%constant int EVENT_READING_TYPE_DISCRETE_SEVERITY = IPMI_EVENT_READING_TYPE_DISCRETE_SEVERITY;\n%constant int EVENT_READING_TYPE_DISCRETE_DEVICE_PRESENCE = IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_PRESENCE;\n%constant int EVENT_READING_TYPE_DISCRETE_DEVICE_ENABLE = IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_ENABLE;\n%constant int EVENT_READING_TYPE_DISCRETE_AVAILABILITY = IPMI_EVENT_READING_TYPE_DISCRETE_AVAILABILITY;\n%constant int EVENT_READING_TYPE_DISCRETE_REDUNDANCY = IPMI_EVENT_READING_TYPE_DISCRETE_REDUNDANCY;\n%constant int EVENT_READING_TYPE_DISCRETE_ACPI_POWER = IPMI_EVENT_READING_TYPE_DISCRETE_ACPI_POWER;\n%constant int EVENT_READING_TYPE_SENSOR_SPECIFIC = IPMI_EVENT_READING_TYPE_SENSOR_SPECIFIC;\n    /*\n     * Return the numeric event reading type.  This will return\n     * EVENT_READING_TYPE_THRESHOLD for threshold sensors; everthing\n     * else is a discrete sensor.\n     */\n    int get_event_reading_type()\n    {\n\treturn ipmi_sensor_get_event_reading_type(self);\n    }\n\n    /*\n     * Get the string for the sensor's rate unit.  This will be blank\n     * if there is not a rate unit for this sensor.\n     */\n    const char *get_rate_unit_string()\n    {\n\treturn ipmi_sensor_get_rate_unit_string(self);\n    }\n\n%constant int RATE_UNIT_NONE = IPMI_RATE_UNIT_NONE;\n%constant int RATE_UNIT_PER_US = IPMI_RATE_UNIT_PER_US;\n%constant int RATE_UNIT_PER_MS = IPMI_RATE_UNIT_PER_MS;\n%constant int RATE_UNIT_PER_SEC = IPMI_RATE_UNIT_PER_SEC;\n%constant int RATE_UNIT_MIN = IPMI_RATE_UNIT_MIN;\n%constant int RATE_UNIT_HOUR = IPMI_RATE_UNIT_HOUR;\n%constant int RATE_UNIT_DAY = IPMI_RATE_UNIT_DAY;\n\n    /*\n     * Get the rate unit for this sensor.\n     */\n    int get_rate_unit()\n    {\n\treturn ipmi_sensor_get_rate_unit(self);\n    }\n\n    /*\n     * Get the string for the sensor's base unit.\n     */\n    const char *get_base_unit_string()\n    {\n\treturn ipmi_sensor_get_base_unit_string(self);\n    }\n\n%constant int UNIT_TYPE_UNSPECIFIED = IPMI_UNIT_TYPE_UNSPECIFIED;\n%constant int UNIT_TYPE_DEGREES_C = IPMI_UNIT_TYPE_DEGREES_C;\n%constant int UNIT_TYPE_DEGREES_F = IPMI_UNIT_TYPE_DEGREES_F;\n%constant int UNIT_TYPE_DEGREES_K = IPMI_UNIT_TYPE_DEGREES_K;\n%constant int UNIT_TYPE_VOLTS = IPMI_UNIT_TYPE_VOLTS;\n%constant int UNIT_TYPE_AMPS = IPMI_UNIT_TYPE_AMPS;\n%constant int UNIT_TYPE_WATTS = IPMI_UNIT_TYPE_WATTS;\n%constant int UNIT_TYPE_JOULES = IPMI_UNIT_TYPE_JOULES;\n%constant int UNIT_TYPE_COULOMBS = IPMI_UNIT_TYPE_COULOMBS;\n%constant int UNIT_TYPE_VA = IPMI_UNIT_TYPE_VA;\n%constant int UNIT_TYPE_NITS = IPMI_UNIT_TYPE_NITS;\n%constant int UNIT_TYPE_LUMENS = IPMI_UNIT_TYPE_LUMENS;\n%constant int UNIT_TYPE_LUX = IPMI_UNIT_TYPE_LUX;\n%constant int UNIT_TYPE_CANDELA = IPMI_UNIT_TYPE_CANDELA;\n%constant int UNIT_TYPE_KPA = IPMI_UNIT_TYPE_KPA;\n%constant int UNIT_TYPE_PSI = IPMI_UNIT_TYPE_PSI;\n%constant int UNIT_TYPE_NEWTONS = IPMI_UNIT_TYPE_NEWTONS;\n%constant int UNIT_TYPE_CFM = IPMI_UNIT_TYPE_CFM;\n%constant int UNIT_TYPE_RPM = IPMI_UNIT_TYPE_RPM;\n%constant int UNIT_TYPE_HZ = IPMI_UNIT_TYPE_HZ;\n%constant int UNIT_TYPE_USECONDS = IPMI_UNIT_TYPE_USECONDS;\n%constant int UNIT_TYPE_MSECONDS = IPMI_UNIT_TYPE_MSECONDS;\n%constant int UNIT_TYPE_SECONDS = IPMI_UNIT_TYPE_SECONDS;\n%constant int UNIT_TYPE_MINUTE = IPMI_UNIT_TYPE_MINUTE;\n%constant int UNIT_TYPE_HOUR = IPMI_UNIT_TYPE_HOUR;\n%constant int UNIT_TYPE_DAY = IPMI_UNIT_TYPE_DAY;\n%constant int UNIT_TYPE_WEEK = IPMI_UNIT_TYPE_WEEK;\n%constant int UNIT_TYPE_MIL = IPMI_UNIT_TYPE_MIL;\n%constant int UNIT_TYPE_INCHES = IPMI_UNIT_TYPE_INCHES;\n%constant int UNIT_TYPE_FEET = IPMI_UNIT_TYPE_FEET;\n%constant int UNIT_TYPE_CUBIC_INCHS = IPMI_UNIT_TYPE_CUBIC_INCHS;\n%constant int UNIT_TYPE_CUBIC_FEET = IPMI_UNIT_TYPE_CUBIC_FEET;\n%constant int UNIT_TYPE_MILLIMETERS = IPMI_UNIT_TYPE_MILLIMETERS;\n%constant int UNIT_TYPE_CENTIMETERS = IPMI_UNIT_TYPE_CENTIMETERS;\n%constant int UNIT_TYPE_METERS = IPMI_UNIT_TYPE_METERS;\n%constant int UNIT_TYPE_CUBIC_CENTIMETERS = IPMI_UNIT_TYPE_CUBIC_CENTIMETERS;\n%constant int UNIT_TYPE_CUBIC_METERS = IPMI_UNIT_TYPE_CUBIC_METERS;\n%constant int UNIT_TYPE_LITERS = IPMI_UNIT_TYPE_LITERS;\n%constant int UNIT_TYPE_FL_OZ = IPMI_UNIT_TYPE_FL_OZ;\n%constant int UNIT_TYPE_RADIANS = IPMI_UNIT_TYPE_RADIANS;\n%constant int UNIT_TYPE_SERADIANS = IPMI_UNIT_TYPE_SERADIANS;\n%constant int UNIT_TYPE_REVOLUTIONS = IPMI_UNIT_TYPE_REVOLUTIONS;\n%constant int UNIT_TYPE_CYCLES = IPMI_UNIT_TYPE_CYCLES;\n%constant int UNIT_TYPE_GRAVITIES = IPMI_UNIT_TYPE_GRAVITIES;\n%constant int UNIT_TYPE_OUNCES = IPMI_UNIT_TYPE_OUNCES;\n%constant int UNIT_TYPE_POUNDS = IPMI_UNIT_TYPE_POUNDS;\n%constant int UNIT_TYPE_FOOT_POUNDS = IPMI_UNIT_TYPE_FOOT_POUNDS;\n%constant int UNIT_TYPE_OUNCE_INCHES = IPMI_UNIT_TYPE_OUNCE_INCHES;\n%constant int UNIT_TYPE_GAUSS = IPMI_UNIT_TYPE_GAUSS;\n%constant int UNIT_TYPE_GILBERTS = IPMI_UNIT_TYPE_GILBERTS;\n%constant int UNIT_TYPE_HENRIES = IPMI_UNIT_TYPE_HENRIES;\n%constant int UNIT_TYPE_MHENRIES = IPMI_UNIT_TYPE_MHENRIES;\n%constant int UNIT_TYPE_FARADS = IPMI_UNIT_TYPE_FARADS;\n%constant int UNIT_TYPE_UFARADS = IPMI_UNIT_TYPE_UFARADS;\n%constant int UNIT_TYPE_OHMS = IPMI_UNIT_TYPE_OHMS;\n%constant int UNIT_TYPE_SIEMENS = IPMI_UNIT_TYPE_SIEMENS;\n%constant int UNIT_TYPE_MOLES = IPMI_UNIT_TYPE_MOLES;\n%constant int UNIT_TYPE_BECQUERELS = IPMI_UNIT_TYPE_BECQUERELS;\n%constant int UNIT_TYPE_PPM = IPMI_UNIT_TYPE_PPM;\n%constant int UNIT_TYPE_reserved1 = IPMI_UNIT_TYPE_reserved1;\n%constant int UNIT_TYPE_DECIBELS = IPMI_UNIT_TYPE_DECIBELS;\n%constant int UNIT_TYPE_DbA = IPMI_UNIT_TYPE_DbA;\n%constant int UNIT_TYPE_DbC = IPMI_UNIT_TYPE_DbC;\n%constant int UNIT_TYPE_GRAYS = IPMI_UNIT_TYPE_GRAYS;\n%constant int UNIT_TYPE_SIEVERTS = IPMI_UNIT_TYPE_SIEVERTS;\n%constant int UNIT_TYPE_COLOR_TEMP_DEG_K = IPMI_UNIT_TYPE_COLOR_TEMP_DEG_K;\n%constant int UNIT_TYPE_BITS = IPMI_UNIT_TYPE_BITS;\n%constant int UNIT_TYPE_KBITS = IPMI_UNIT_TYPE_KBITS;\n%constant int UNIT_TYPE_MBITS = IPMI_UNIT_TYPE_MBITS;\n%constant int UNIT_TYPE_GBITS = IPMI_UNIT_TYPE_GBITS;\n%constant int UNIT_TYPE_BYTES = IPMI_UNIT_TYPE_BYTES;\n%constant int UNIT_TYPE_KBYTES = IPMI_UNIT_TYPE_KBYTES;\n%constant int UNIT_TYPE_MBYTES = IPMI_UNIT_TYPE_MBYTES;\n%constant int UNIT_TYPE_GBYTES = IPMI_UNIT_TYPE_GBYTES;\n%constant int UNIT_TYPE_WORDS = IPMI_UNIT_TYPE_WORDS;\n%constant int UNIT_TYPE_DWORDS = IPMI_UNIT_TYPE_DWORDS;\n%constant int UNIT_TYPE_QWORDS = IPMI_UNIT_TYPE_QWORDS;\n%constant int UNIT_TYPE_LINES = IPMI_UNIT_TYPE_LINES;\n%constant int UNIT_TYPE_HITS = IPMI_UNIT_TYPE_HITS;\n%constant int UNIT_TYPE_MISSES = IPMI_UNIT_TYPE_MISSES;\n%constant int UNIT_TYPE_RETRIES = IPMI_UNIT_TYPE_RETRIES;\n%constant int UNIT_TYPE_RESETS = IPMI_UNIT_TYPE_RESETS;\n%constant int UNIT_TYPE_OVERRUNS = IPMI_UNIT_TYPE_OVERRUNS;\n%constant int UNIT_TYPE_UNDERRUNS = IPMI_UNIT_TYPE_UNDERRUNS;\n%constant int UNIT_TYPE_COLLISIONS = IPMI_UNIT_TYPE_COLLISIONS;\n%constant int UNIT_TYPE_PACKETS = IPMI_UNIT_TYPE_PACKETS;\n%constant int UNIT_TYPE_MESSAGES = IPMI_UNIT_TYPE_MESSAGES;\n%constant int UNIT_TYPE_CHARACTERS = IPMI_UNIT_TYPE_CHARACTERS;\n%constant int UNIT_TYPE_ERRORS = IPMI_UNIT_TYPE_ERRORS;\n%constant int UNIT_TYPE_CORRECTABLE_ERRORS = IPMI_UNIT_TYPE_CORRECTABLE_ERRORS;\n%constant int UNIT_TYPE_UNCORRECTABLE_ERRORS = IPMI_UNIT_TYPE_UNCORRECTABLE_ERRORS;\n%constant int UNIT_TYPE_FATAL_ERRORS = IPMI_UNIT_TYPE_FATAL_ERRORS;\n%constant int UNIT_TYPE_GRAMS = IPMI_UNIT_TYPE_GRAMS;\n\n    /*\n     * Get the sensor's base unit.\n     */\n    int get_base_unit()\n    {\n\treturn ipmi_sensor_get_base_unit(self);\n    }\n\n    /*\n     * Get the modifier unit string for the sensor, this will be an empty\n     * string if there is none.\n     */\n    const char *get_modifier_unit_string()\n    {\n\treturn ipmi_sensor_get_modifier_unit_string(self);\n    }\n\n    /*\n     * Get the sensor's modifier unit.\n     */\n    int get_modifier_unit()\n    {\n\treturn ipmi_sensor_get_modifier_unit(self);\n    }\n\n%constant int MODIFIER_UNIT_NONE = IPMI_MODIFIER_UNIT_NONE;\n%constant int MODIFIER_UNIT_BASE_DIV_MOD = IPMI_MODIFIER_UNIT_BASE_DIV_MOD;\n%constant int MODIFIER_UNIT_BASE_MULT_MOD = IPMI_MODIFIER_UNIT_BASE_MULT_MOD;\n\n    /*\n     * Return the how the modifier unit should be used.  If this\n     * returns MODIFIER_UNIT_NONE, then the modifier unit is not\n     * used.  If it returns MODIFIER_UNIT_BASE_DIV_MOD, the modifier\n     * unit is dividied by the base unit (eg per hour, per second,\n     * etc.).  If it returns MODIFIER_UNIT_BASE_MULT_MOD, the modifier\n     * unit is multiplied by the base unit.\n     */\n    int get_modifier_unit_use()\n    {\n\treturn ipmi_sensor_get_modifier_unit_use(self);\n    }\n\n    /*\n     * Returns if the value is a percentage.\n     */\n    int get_percentage()\n    {\n\treturn ipmi_sensor_get_percentage(self);\n    }\n\n\n    /*\n     * This call is a little different from the other string calls.\n     * For a discrete sensor, you can pass the offset into this call\n     * and it will return the string associated with the reading.\n     * This way, OEM sensors can supply their own strings as necessary\n     * for the various offsets.  This is only for discrete sensors.\n     */\n    const char *reading_name_string(int offset)\n    {\n\treturn ipmi_sensor_reading_name_string(self, offset);\n    }\n\n    /*\n     * Get the entity id of the entity the sensor is hooked to.\n     */\n    int get_entity_id()\n    {\n\treturn ipmi_sensor_get_entity_id(self);\n    }\n\n    /*\n     * Get the entity instance of the entity the sensor is hooked to.\n     */\n    int get_entity_instance()\n    {\n\treturn ipmi_sensor_get_entity_instance(self);\n    }\n\n    /*\n     * Get the entity the sensor is hooked to.\n     */\n    ipmi_entity_t *get_entity()\n    {\n\treturn ipmi_sensor_get_entity(self);\n    }\n\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_scanning()\n    {\n\treturn ipmi_sensor_get_sensor_init_scanning(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_events()\n    {\n\treturn ipmi_sensor_get_sensor_init_events(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_thresholds()\n    {\n\treturn ipmi_sensor_get_sensor_init_thresholds(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_hysteresis()\n    {\n\treturn ipmi_sensor_get_sensor_init_hysteresis(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_type()\n    {\n\treturn ipmi_sensor_get_sensor_init_type(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_pu_events()\n    {\n\treturn ipmi_sensor_get_sensor_init_pu_events(self);\n    }\n\n    /*\n     * Initialization information about a sensor from it's SDR.\n     */\n    int get_sensor_init_pu_scanning()\n    {\n\treturn ipmi_sensor_get_sensor_init_pu_scanning(self);\n    }\n\n    /*\n     * Ignore the sensor if the entity it is attached to is not\n     * present.\n     */\n    int get_ignore_if_no_entity()\n    {\n\treturn ipmi_sensor_get_ignore_if_no_entity(self);\n    }\n\n    /*\n     * If this is false, the user must manually re-arm the sensor to get\n     * any more events from it.\n     */\n    int get_supports_auto_rearm()\n    {\n\treturn ipmi_sensor_get_supports_auto_rearm(self);\n    }\n\n\n%constant int THRESHOLD_ACCESS_SUPPORT_NONE = IPMI_THRESHOLD_ACCESS_SUPPORT_NONE;\n%constant int THRESHOLD_ACCESS_SUPPORT_READABLE = IPMI_THRESHOLD_ACCESS_SUPPORT_READABLE;\n%constant int THRESHOLD_ACCESS_SUPPORT_SETTABLE = IPMI_THRESHOLD_ACCESS_SUPPORT_SETTABLE;\n%constant int THRESHOLD_ACCESS_SUPPORT_FIXED = IPMI_THRESHOLD_ACCESS_SUPPORT_FIXED;\n\n    /*\n     * Get how the thresholds of the sensor may be accessed.\n     */\n    int get_threshold_access()\n    {\n\treturn ipmi_sensor_get_threshold_access(self);\n    }\n\n%constant int HYSTERESIS_SUPPORT_NONE = IPMI_HYSTERESIS_SUPPORT_NONE;\n%constant int HYSTERESIS_SUPPORT_READABLE = IPMI_HYSTERESIS_SUPPORT_READABLE;\n%constant int HYSTERESIS_SUPPORT_SETTABLE = IPMI_HYSTERESIS_SUPPORT_SETTABLE;\n%constant int HYSTERESIS_SUPPORT_FIXED = IPMI_HYSTERESIS_SUPPORT_FIXED;\n\n    /*\n     * Get how the hysteresis of the sensor may be accessed.\n     */\n    int get_hysteresis_support()\n    {\n\treturn ipmi_sensor_get_hysteresis_support(self);\n    }\n\n%constant int EVENT_SUPPORT_PER_STATE = IPMI_EVENT_SUPPORT_PER_STATE;\n%constant int EVENT_SUPPORT_ENTIRE_SENSOR = IPMI_EVENT_SUPPORT_ENTIRE_SENSOR;\n%constant int EVENT_SUPPORT_GLOBAL_ENABLE = IPMI_EVENT_SUPPORT_GLOBAL_ENABLE;\n%constant int EVENT_SUPPORT_NONE = IPMI_EVENT_SUPPORT_NONE;\n\n    /*\n     * Get how the events in the sensor may be enabled and disabled.\n     */\n    int get_event_support()\n    {\n\treturn ipmi_sensor_get_event_support(self);\n    }\n\n%constant int SENSOR_DIRECTION_UNSPECIFIED = IPMI_SENSOR_DIRECTION_UNSPECIFIED;\n%constant int SENSOR_DIRECTION_INPUT = IPMI_SENSOR_DIRECTION_INPUT;\n%constant int SENSOR_DIRECTION_OUTPUT = IPMI_SENSOR_DIRECTION_OUTPUT;\n\n    /*\n     * Get whether the sensor is monitoring an input or an output.\n     * For instance, the +5V sensor on the output of a power supply\n     * would be the output, the +5V sensor measuring the voltage\n     * coming into a card would be an input.\n     */\n    int get_sensor_direction()\n    {\n\treturn ipmi_sensor_get_sensor_direction(self);\n    }\n\n    /*\n     * Get whether the sensor's value can be read or not (with\n     * get_value()).  Sensors with system software owners and\n     * event-only sensors cannot be read.\n     */\n    int is_readable()\n    {\n\treturn ipmi_sensor_get_is_readable(self);\n    }\n\n    /*\n     * Sets the second parameter to if an event is supported for this\n     * particular threshold event on the sensor. The first parameter\n     * is the event specifier string.  This will return 0 on success\n     * or EINVAL on an invalid event.\n     */\n    int threshold_event_supported(char *event, int *val)\n    {\n\tenum ipmi_thresh_e          thresh;\n\tenum ipmi_event_value_dir_e value_dir;\n\tenum ipmi_event_dir_e       dir;\n\tchar                        *s;\n\n\ts = threshold_event_from_str(event, strlen(event), &thresh,\n\t\t\t\t     &value_dir, &dir);\n\tif (!s)\n\t    return EINVAL;\n\treturn ipmi_sensor_threshold_event_supported(self,\n\t\t\t\t\t\t     thresh,\n\t\t\t\t\t\t     value_dir,\n\t\t\t\t\t\t     dir,\n\t\t\t\t\t\t     val);\n    }\n\n    /*\n     * Sets the second parameter to if a specific threshold can be\n     * set.  The first parameter is the threshold.  Returns EINVAL\n     * if the threshold is invalid, otherwise returns zero.\n     */\n    int threshold_settable(char *threshold, int *val)\n    {\n\tenum ipmi_thresh_e thresh;\n\tchar               *s;\n\n\ts = threshold_from_str(threshold, strlen(threshold), &thresh);\n\tif (!s)\n\t    return EINVAL;\n\treturn ipmi_sensor_threshold_settable(self, thresh, val);\n    }\n\n    /*\n     * Sets the second parameter to if a specific threshold can be\n     * read.  The first parameter is the threshold.  Returns EINVAL\n     * if the threshold is invalid, otherwise returns zero.\n     */\n    int threshold_readable(char *threshold, int *val)\n    {\n\tenum ipmi_thresh_e thresh;\n\tchar               *s;\n\n\ts = threshold_from_str(threshold, strlen(threshold), &thresh);\n\tif (!s)\n\t    return EINVAL;\n\treturn ipmi_sensor_threshold_readable(self, thresh, val);\n    }\n\n    /*\n     * Sets the second parameter to if a specific threshold has its\n     * reading returned when reading the value of the sensor.  The\n     * first parameter is the threshold.  Returns EINVAL if the\n     * threshold is invalid, otherwise returns zero.\n     */\n    int threshold_reading_supported(char *threshold, int *val)\n    {\n\tenum ipmi_thresh_e thresh;\n\tchar               *s;\n\n\ts = threshold_from_str(threshold, strlen(threshold), &thresh);\n\tif (!s)\n\t    return EINVAL;\n\treturn ipmi_sensor_threshold_reading_supported(self, thresh, val);\n    }\n\n    /*\n     * Sets the second parameter to if an offset will generate an\n     * event for the given event specifier for this particular\n     * sensor. The first parameter is the event specifier string.\n     * This will return 0 on success or EINVAL on an invalid event.\n     */\n    int discrete_event_supported(char *event, int *val)\n    {\n\tint                   offset;\n\tenum ipmi_event_dir_e dir;\n\tchar                  *s;\n\n\ts = discrete_event_from_str(event, strlen(event), &offset, &dir);\n\tif (!s)\n\t    return EINVAL;\n\treturn ipmi_sensor_discrete_event_supported(self, offset, dir, val);\n    }\n\n    /*\n     * Sets the second parameter to if a specific offset is set by the\n     * sensor.  The first parameter is the offset.  Returns EINVAL if\n     * the threshold is invalid, otherwise returns zero.\n     */\n    int discrete_event_readable(int offset, int *val)\n    {\n\treturn ipmi_sensor_discrete_event_readable(self, offset, val);\n    }\n\n    /*\n     * Returns the tolerance for the sensor at the given raw value\n     * (first parameter).  The tolerance is returned as a double in\n     * the second parameter.  Returns an error value.\n     */\n    int get_tolerance(int val, double *tolerance)\n    {\n\treturn ipmi_sensor_get_tolerance(self, val, tolerance);\n    }\n\n    /*\n     * Returns the accuracy for the sensor at the given raw value\n     * (first parameter).  The accuracy is returned as a double in the\n     * second parameter.  Returns an error value.\n     */\n    int get_accuracy(int val, double *accuracy)\n    {\n\treturn ipmi_sensor_get_accuracy(self, val, accuracy);\n    }\n\n    /*\n     * Is the normal minimum for the sensor specified?\n     */\n    int get_normal_min_specified()\n    {\n\treturn ipmi_sensor_get_normal_min_specified(self);\n    }\n\n    /*\n     * Get the normal minimum for the sensor into the first parameter.\n     * Returns an error value.\n     */\n    int get_normal_min(double *normal_min)\n    {\n\treturn ipmi_sensor_get_normal_min(self, normal_min);\n    }\n\n    /*\n     * Is the normal maximum for the sensor specified?\n     */\n    int get_normal_max_specified()\n    {\n\treturn ipmi_sensor_get_normal_max_specified(self);\n    }\n\n    /*\n     * Get the normal maximum for the sensor into the first parameter.\n     * Returns an error value.\n     */\n    int get_normal_max(double *normal_max)\n    {\n\treturn ipmi_sensor_get_normal_max(self, normal_max);\n    }\n\n    /*\n     * Returns if the nominal reading for the sensor is specified.\n     */\n    int get_nominal_reading_specified()\n    {\n\treturn ipmi_sensor_get_nominal_reading_specified(self);\n    }\n\n    /*\n     * Get the nominal value for the sensor into the first parameter.\n     * Returns an error value.\n     */\n    int get_nominal_reading(double *nominal_reading)\n    {\n\treturn ipmi_sensor_get_nominal_reading(self, nominal_reading);\n    }\n\n    /*\n     * Get the sensor maximum for the sensor into the first parameter.\n     * Returns an error value.\n     */\n    int get_sensor_max(double *sensor_max)\n    {\n\treturn ipmi_sensor_get_sensor_max(self, sensor_max);\n    }\n\n    /*\n     * Get the sensor minimum for the sensor into the first parameter.\n     * Returns an error value.\n     */\n    int get_sensor_min(double *sensor_min)\n    {\n\treturn ipmi_sensor_get_sensor_min(self, sensor_min);\n    }\n\n    /*\n     * Get the OEM value from the sensor's SDR.\n     */\n    int get_oem1()\n    {\n\treturn ipmi_sensor_get_oem1(self);\n    }\n\n    %newobject get_sensor_id;\n    /*\n     * Get the ID string from the sensor's SDR.\n     */\n    char *get_sensor_id()\n    {\n\t/* FIXME - no unicode handling. */\n\tint len = ipmi_sensor_get_id_length(self) + 1;\n\tchar *id = malloc(len);\n\tipmi_sensor_get_id(self, id, len);\n\treturn id;\n    }\n\n    /*\n     * Return the MC that owns the sensor.\n     */\n    ipmi_mc_t *get_mc()\n    {\n\treturn ipmi_sensor_get_mc(self);\n    }\n}\n\n/*\n * A control id object.  This object is guaranteed to be valid and\n * can be converted into a mc pointer later.\n */\n%extend ipmi_control_id_t {\n    ~ipmi_control_id_t()\n    {\n\tfree(self);\n    }\n\n    /* Compare self with other, return -1 if self<other, 0 if\n       self==other, or 1 if self>other.  */\n    int cmp(ipmi_control_id_t *other)\n    {\n\treturn ipmi_cmp_control_id(*self, *other);\n    }\n\n    /*\n     * Convert a control id to a control pointer.  The \"control_cb\" method\n     * will be called on the first parameter with the following parameters:\n     * <self> <control>\n     */\n    int to_control(swig_cb *handler)\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, control_cb))\n\t    rv = EINVAL;\n\telse\n\t    rv = ipmi_control_pointer_cb(*self, handle_control_cb,\n\t\t\t\t\t get_swig_cb(handler, control_cb));\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n/*\n * An control object\n */\n%extend ipmi_control_t {\n\n    %newobject get_name;\n    /*\n     * Get the name of an control.\n     */\n    char *get_name()\n    {\n\tchar name[IPMI_CONTROL_NAME_LEN];\n\n\tipmi_control_get_name(self, name, sizeof(name));\n\treturn strdup(name);\n    }\n\n    %newobject get_id;\n    /*\n     * Get the id for the control.\n     */\n    ipmi_control_id_t *get_id()\n    {\n\tipmi_control_id_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_control_convert_to_id(self);\n\treturn rv;\n    }\n\n    /*\n     * Get the string type of control.\n     */\n    const char *get_type_string()\n    {\n\treturn ipmi_control_get_type_string(self);\n    }\n\n%constant int CONTROL_LIGHT = IPMI_CONTROL_LIGHT;\n%constant int CONTROL_RELAY = IPMI_CONTROL_RELAY;\n%constant int CONTROL_DISPLAY = IPMI_CONTROL_DISPLAY;\n%constant int CONTROL_ALARM = IPMI_CONTROL_ALARM;\n%constant int CONTROL_RESET = IPMI_CONTROL_RESET;\n%constant int CONTROL_POWER = IPMI_CONTROL_POWER;\n%constant int CONTROL_FAN_SPEED = IPMI_CONTROL_FAN_SPEED;\n%constant int CONTROL_IDENTIFIER = IPMI_CONTROL_IDENTIFIER;\n%constant int CONTROL_ONE_SHOT_RESET = IPMI_CONTROL_ONE_SHOT_RESET;\n%constant int CONTROL_OUTPUT = IPMI_CONTROL_OUTPUT;\n%constant int CONTROL_ONE_SHOT_OUTPUT = IPMI_CONTROL_ONE_SHOT_OUTPUT;\n\n    /*\n     * Get the numeric type of control.\n     */\n    int get_type()\n    {\n\treturn ipmi_control_get_type(self);\n    }\n\n    /*\n     * Get the entity id for the control's entity.\n     */\n    int get_entity_id()\n    {\n\treturn ipmi_control_get_entity_id(self);\n    }\n\n    /*\n     * Get the entity instance for the control's entity.\n     */\n    int get_entity_instance()\n    {\n\treturn ipmi_control_get_entity_instance(self);\n    }\n\n    /*\n     * Get the entity for the control.\n     */\n    ipmi_entity_t *get_entity()\n    {\n\treturn ipmi_control_get_entity(self);\n    }\n\n    /*\n     * Can the control's value be set?\n     */\n    int is_settable()\n    {\n\treturn ipmi_control_is_settable(self);\n    }\n\n    /*\n     * Can the control's value be read?\n     */\n    int is_readable()\n    {\n\treturn ipmi_control_is_readable(self);\n    }\n\n    /*\n     * Should the control be ignored if its entity is not present?\n     */\n    int get_ignore_if_no_entity()\n    {\n\treturn ipmi_control_get_ignore_if_no_entity(self);\n    }\n\n    %newobject get_control_id;\n    /*\n     * Get the ID string from the control's SDR.\n     */\n    char *get_control_id()\n    {\n\t/* FIXME - no unicode handling. */\n\tint len = ipmi_control_get_id_length(self) + 1;\n\tchar *id = malloc(len);\n\tipmi_control_get_id(self, id, len);\n\treturn id;\n    }\n\n    /*\n     * Returns true if the control can generate events upon change,\n     * and false if not.\n     */\n    int has_events()\n    {\n\treturn ipmi_control_has_events(self);\n    }\n\n    /*\n     * Get the number of values the control supports.\n     */\n    int get_num_vals()\n    {\n\treturn ipmi_control_get_num_vals(self);\n    }\n\n\n    /*\n     * Set the value of a control.  Note that an control may support\n     * more than one element, the array reference passed in as the\n     * first parameter must match the number of elements the control\n     * supports.  All the elements will be set simultaneously.  The\n     * control_set_val_cb method on the second parameter (if it is\n     * supplied) will be called after the operation completes with.\n     * It will be called with the following parameters: <self>\n     * <control> <err>\n     */\n    int set_val(intarray val, swig_cb *handler = NULL)\n    {\n\tswig_cb_val        *handler_val = NULL;\n\tipmi_control_op_cb done = NULL;\n\tint                rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (val.len != ipmi_control_get_num_vals(self)) {\n\t    rv = EINVAL;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, control_set_val_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, control_set_val_cb);\n\t    done = control_val_set_handler;\n\t}\n\trv = ipmi_control_set_val(self, val.val, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the setting of an control.  The control_get_val_cb method\n     * on the first parameter will be called with the following\n     * parameters: <self> <control> <err> <val1> [<val2> ...]. The\n     * number of values passed to the handler will be the number of\n     * values the control supports.\n     */\n    int get_val(swig_cb *handler)\n    {\n\tswig_cb_val         *handler_val = NULL;\n\tipmi_control_val_cb done = NULL;\n\tint                 rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, control_get_val_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, control_get_val_cb);\n\t    done = control_val_get_handler;\n\n\t    rv = ipmi_control_get_val(self, done, handler_val);\n\t    if (rv && handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Register a handler that will be called when the control changes\n     * value.  Note that if the control does not support this\n     * operation, it will return ENOSYS.  When a control event comes\n     * in, the control_event_val_cb method on the first parameter will\n     * be called with the following parameters: <self> <control>\n     * <valid1> [<valid2> ...] val1 [<val2> ...].  The valid fields\n     * tell if a particular value is corrected, the number of these\n     * is the same as what get_num_vals() returns for this control.\n     * the val fields are the actual values, the value is valid only\n     * if the valid field corresponding to it is true.\n     */\n    int add_event_handler(swig_cb *handler)\n    {\n\tipmi_control_add_val_event_handler_cl\n\t    (self, control_val_event_handler_cl, NULL);\n\tcb_add(control, val_event, control_event_val_cb);\n    }\n\n    /*\n     * Remove a control event handler.\n     */\n    int remove_event_handler(swig_cb *handler)\n    {\n\tcb_rm(control, val_event, control_event_val_cb);\n    }\n\n%constant int CONTROL_COLOR_BLACK = IPMI_CONTROL_COLOR_BLACK;\n%constant int CONTROL_COLOR_WHITE = IPMI_CONTROL_COLOR_WHITE;\n%constant int CONTROL_COLOR_RED = IPMI_CONTROL_COLOR_RED;\n%constant int CONTROL_COLOR_GREEN = IPMI_CONTROL_COLOR_GREEN;\n%constant int CONTROL_COLOR_BLUE = IPMI_CONTROL_COLOR_BLUE;\n%constant int CONTROL_COLOR_YELLOW = IPMI_CONTROL_COLOR_YELLOW;\n%constant int CONTROL_COLOR_ORANGE = IPMI_CONTROL_COLOR_ORANGE;\n%constant int CONTROL_NUM_COLORS = IPMI_CONTROL_COLOR_ORANGE+1;\n\n    /*\n     * This describes a setting for a light.  There are two types of\n     * lights.  One type has a general ability to be set to a color, on\n     * time, and off time.  The other has a pre-defined set of\n     * transitions.  For transition-based lights, each light is defined to\n     * go through a number of transitions.  Each transition is described\n     * by a color, a time (in milliseconds) that the color is present.\n     * For non-blinking lights, there will only be one transition.  For\n     * blinking lights, there will be one or more transitions.\n     */\n\n    /*\n     * If this returns true, then you set the light with the\n     * set_light() function and get the values with the get_light()\n     * function.  Otherwise you get/set it with the normal\n     * get_val/set_valfunctions and use the transitions functions to\n     * get what the LED can do.\n     */\n    int light_set_with_setting()\n    {\n\treturn ipmi_control_light_set_with_setting(self);\n    }\n\n    /*\n     * Allows detecting if a setting light supports a specific\n     * color.\n     */\n    int light_is_color_supported(int light_num, int color)\n    {\n\treturn ipmi_control_light_is_color_sup(self, light_num, color);\n    }\n\n    /*\n     * Returns true if the light has a local control mode, false if\n     * not.\n     */\n    int light_has_local_control(int light_num)\n    {\n\treturn ipmi_control_light_has_loc_ctrl(self, light_num);\n    }\n\n    /*\n     * Set a setting style light's settings.  The first parm is a\n     * string in the form:\n     * \"[lc] <color> <on_time> <off time>[:[lc] <color>...]\".  The\n     * second parm turns on or off local control of the light.  When\n     * the operation is complete the control_set_val_cb method on the\n     * second parameter (if it is supplied) will be called with the\n     * following parameters: <self> <control> <err>.\n     */\n    int set_light(char *settings, swig_cb *handler = NULL)\n    {\n\tipmi_light_setting_t *s;\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tipmi_control_op_cb   done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = str_to_light_setting(settings, &s);\n\tif (rv)\n\t    goto out_err;\n\n\tif (ipmi_light_setting_get_count(s)\n\t    != ipmi_control_get_num_vals(self))\n\t{\n\t    free(s);\n\t    rv = EINVAL;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, control_set_val_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, control_set_val_cb);\n\t    done = control_val_set_handler;\n\t}\n\trv = ipmi_control_set_light(self, s, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tipmi_free_light_settings(s);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the current values of the light.  The control_get_light_cb\n     * method on the first parm will be called with the following\n     * parameters: <self> <control> <err> <light settings>\n     * The light settings is a string with each light separated by\n     * colons with the (optional) local control (lc), color, on, and\n     * off time like this:\n     * \"[lc] <color> <on_time> <off time>[:[lc] <color>...]\"\n     */\n    int get_light(swig_cb *handler)\n    {\n\tswig_cb_val            *handler_val = NULL;\n\tipmi_light_settings_cb done = NULL;\n\tint                    rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, control_get_light_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, control_get_light_cb);\n\t    done = control_val_get_light_handler;\n\n\t    rv = ipmi_control_get_light(self, done, handler_val);\n\t    if (rv && handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\t\t       \n    /*\n     * For lights that are transition based, this returns the number\n     * of values for a specific light.  So if you put a 2 in the first\n     * parm, this will return the number of possible settings for the\n     * 3rd light.\n     */\n    int get_num_light_values(int light)\n    {\n\treturn ipmi_control_get_num_light_values(self, light);\n    }\n\n    /*\n     * For lights that are transition based, return the number of\n     * transitions for the given light and value setting.  So if you\n     * put a 1 and a 3, this returns the number of transitions that\n     * the second light will go through if you set it's value to 3.\n     * Each transition will have a color and duration time and can be\n     * fetched with other values.  Returns -1 if the inputs are\n     * invalid.\n     */\n    int get_num_light_transitions(int light, int value)\n    {\n\treturn ipmi_control_get_num_light_transitions(self, light, value);\n    }\n\n    /*\n     * For lights that are transition based, return the color of the\n     * given transition.  Returns -1 if the inputs are invalid.\n     */\n    int get_light_color(int light, int value, int transition)\n    {\n\treturn ipmi_control_get_light_color(self, light, value, transition);\n    }\n\n    /*\n     * For lights that are transition based, return the duration of\n     * the given transition.  Returns -1 if the inputs are invalid.\n     */\n    int get_light_color_time(int light, int value, int transition)\n    {\n\treturn ipmi_control_get_light_color_time(self, light, value,\n\t\t\t\t\t\t transition);\n    }\n\n    /*\n     * Set the value of the identifier.  The first parameter is a\n     * reference to an array of byte values to se the identifier to.\n     * When the setting is complete, the control_set_val_cb method on\n     * the second parameter (if it is supplied) will be called with\n     * the following parameters: <self> <control> <err>.\n     */\n    int identifier_set_val(intarray val, swig_cb *handler = NULL)\n    {\n\tswig_cb_val        *handler_val = NULL;\n\tipmi_control_op_cb done = NULL;\n\tint                rv;\n\tunsigned char      *data;\n\tint                i;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tdata = malloc(val.len);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\tfor (i=0; i<val.len; i++)\n\t    data[i] = val.val[i];\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, control_set_val_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, control_set_val_cb);\n\t    done = control_val_set_handler;\n\t}\n\trv = ipmi_control_identifier_set_val(self, data, val.len,\n\t\t\t\t\t     done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tfree(data);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the value of the identifier control.  The control_get_id_cb\n     * method on the first parameter will be called when the operation\n     * completes.  The values passed to that method will be:\n     * <self> <control> <err> byte1 [<byte2> ...].\n     * The id value is all the bytes after the error value.\n     */\n    int identifier_get_val(swig_cb *handler)\n    {\n\tswig_cb_val                    *handler_val = NULL;\n\tipmi_control_identifier_val_cb done = NULL;\n\tint                            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (! valid_swig_cb(handler, control_get_id_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, control_get_id_cb);\n\t    done = control_val_get_id_handler;\n\n\t    rv = ipmi_control_identifier_get_val(self, done, handler_val);\n\t    if (rv && handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Return the maximum possible length of the identifier control's\n     * value.\n     */\n    int identifier_get_max_length()\n    {\n\treturn ipmi_control_identifier_get_max_length(self);\n    }\n}\n\n/*\n * Convert the FRU index to a string.  Returns undefined if the\n * index is out of range.\n */\n%rename(fru_index_to_str) ipmi_fru_index_to_str;\nextern char *ipmi_fru_index_to_str(int idx);\n\n/*\n * Convert a name to an index.  Returns -1 if the name is not valid.\n */\n%rename(fru_str_to_index) ipmi_fru_str_to_index;\nextern int ipmi_fru_str_to_index(char *name);\n\n/*\n * A FRU object\n */\n%extend ipmi_fru_t {\n\n    ~ipmi_fru_t()\n    {\n\tipmi_fru_deref(self);\n    }\n\n/* Area numbers */\n%constant int FRU_INTERNAL_USE_AREA = IPMI_FRU_FTR_INTERNAL_USE_AREA;\n%constant int FRU_CHASSIS_INFO_AREA = IPMI_FRU_FTR_CHASSIS_INFO_AREA;\n%constant int FRU_BOARD_INFO_AREA = IPMI_FRU_FTR_BOARD_INFO_AREA;\n%constant int FRU_PRODUCT_INFO_AREA = IPMI_FRU_FTR_PRODUCT_INFO_AREA;\n%constant int FRU_MULTI_RECORD_AREA = IPMI_FRU_FTR_MULTI_RECORD_AREA;\n\n    %newobject get_domain_id;\n    /*\n     * Get the domain the FRU belongs to.\n     */\n    ipmi_domain_id_t *get_domain_id()\n    {\n\tipmi_domain_id_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_fru_get_domain_id(self);\n\treturn rv;\n    }\n\n    /*\n     * Convert the string to a FRU index.  Use this if you have a specfiic\n     * fru data object you are after.  Returns -1 if the name is not valid.\n     */\n    int str_to_index(char *name)\n    {\n\treturn ipmi_fru_str_to_index(name);\n    }\n\n    /*\n     * Get a FRU data item.  The first parameter is an index to get,\n     * the second is an integer reference to an item number.  This\n     * returns a string of the particular object with the following:\n     * \"<name> <type> <data>\".  If the index or number are invalid,\n     * then an undefined value will be returned (NULL, undef, etc).\n     * If the FRU item is not supported for this FRU, only the name\n     * will be filled out and there will be no type or value.\n     *\n     * If the type is integer, a single integer number will follow.\n     * If the type is ascii, an ascii string will follow starting one\n     * space after the type.  If the type is unicode or binary, then\n     * a set of ascii-encoded binary bytes will follow \"0x01 0x03 ...\"\n     *\n     * The second parameter (the number) is zero based and should be\n     * set to zero when fetching an index for the first time.  It will\n     * be unchanged if the data item does not support multiple items.\n     * If it does support multiple items, then the number will be\n     * changed to the next supported value, or to -1 if this is the\n     * last item.\n     */\n    %newobject get;\n    char *get(int index, int *num)\n    {\n\tconst char                *name;\n\tenum ipmi_fru_data_type_e dtype;\n\tint                       intval;\n\ttime_t                    time;\n\tchar                      *data;\n\tunsigned int              data_len;\n\tint                       rv;\n\tchar                      dummy[1];\n\tchar                      *str = NULL, *s;\n\tint                       len;\n\tint                       i;\n\n\tdata = NULL;\n\trv = ipmi_fru_get(self, index, &name, num, &dtype, &intval,\n\t\t\t  &time, &data, &data_len);\n\tif ((rv == ENOSYS) || (rv == E2BIG))\n\t    return strdup(name);\n\telse if (rv)\n\t    return NULL;\n\n\tswitch(dtype) {\n\tcase IPMI_FRU_DATA_INT:\n\t    len = snprintf(dummy, 1, \"%s integer %d\", name, intval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s integer %d\", name, intval);\n\t    break;\n\n\tcase IPMI_FRU_DATA_TIME:\n\t    len = snprintf(dummy, 1, \"%s time %ld\", name, (long) time);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s time %ld\", name, (long) time);\n\t    break;\n\n\tcase IPMI_FRU_DATA_BINARY:\n\t    len = snprintf(dummy, 1, \"%s binary\", name);\n\t    len += data_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s binary\", name);\n\t    for (i=0; i<data_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) data[i]);\n\t    break;\n\n\tcase IPMI_FRU_DATA_UNICODE:\n\t    len = snprintf(dummy, 1, \"%s unicode\", name);\n\t    len += data_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s unicode\", name);\n\t    for (i=0; i<data_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) data[i]);\n\t    break;\n\n\tcase IPMI_FRU_DATA_ASCII:\n\t    len = snprintf(dummy, 1, \"%s ascii %s\", name, data);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s ascii %s\", name, data);\n\t    break;\n\n\tdefault:\n\t    str = NULL;\n\t}\n\n\tif (data)\n\t    ipmi_fru_data_free(data);\n\n\treturn str;\n    }\n\n    /*\n     * Return the number of multi-records the FRU has.\n     */\n    int get_num_multi_records()\n    {\n\treturn ipmi_fru_get_num_multi_records(self);\n    }\n\n    /*\n     * Fetch a multi record from the FRU.  The data comes out in a\n     * string with the format:\n     *    \"<type num> <version num> [data1 [data2 ...]]\"\n     * It returns an undefined value if the num is invalid.  The data\n     * items will not be present if the length is zero.\n     */\n    %newobject get_multirecord;\n    char *get_multirecord(int num)\n    {\n\tunsigned char type;\n\tunsigned char version;\n\tunsigned int length;\n\tunsigned char *data;\n\tint           rv;\n\tchar          dummy[1];\n\tchar          *str, *s;\n\tint           str_len;\n\tint           i;\n\n\trv = ipmi_fru_get_multi_record_type(self, num, &type);\n\tif (rv)\n\t    return NULL;\n\trv = ipmi_fru_get_multi_record_format_version(self, num, &version);\n\tif (rv)\n\t    return NULL;\n\trv = ipmi_fru_get_multi_record_data_len(self, num, &length);\n\tif (rv)\n\t    return NULL;\n\tif (length == 0)\n\t    data = malloc(1);\n\telse\n\t    data = malloc(length);\n\tif (!data)\n\t    return NULL;\n\trv = ipmi_fru_get_multi_record_data(self, num, data, &length);\n\tif (rv) {\n\t    free(data);\n\t    return NULL;\n\t}\n\n\tstr_len = snprintf(dummy, 1, \"%d %d\", type, version);\n\tstr_len += length * 5;\n\tstr = malloc(str_len + 1);\n\tif (!str) {\n\t    free(data);\n\t    return NULL;\n\t}\n\n\ts = str;\n\ts += sprintf(s, \"%d %d\", type, version);\n\tfor (i=0; i<length; i++)\n\t    s += sprintf(s, \" 0x%2.2x\", data[i]);\n\tfree(data);\n\treturn str;\n    }\n\n    /*\n     * Set a specific data item by index (see the get function for more\n     * info on what index and num mean).  Note that the \"num \"field is\n     * not updated by this call, unlike the get function.\n     *\n     * The type passed in tells the kind of data being passed in.  It is\n     * either:\n     *  \"integer\" - An integer value passed in.\n     *  \"time\" - An integer value passed in.\n     *  \"binary\" - A string of 8-bit values is passed in, like \n     *    \"0x10 0x20 0x99\".\n     *  \"unicode\" - A string of 8-bit values is passed in, like \n     *    \"0x10 0x20 0x99\".\n     *  \"ascii\" - The string passed in is used.\n     * Passing an undefined value for binary, unicode, and ascii\n     * will result in the field being cleared or (for custom fields)\n     * deleted.  NULL values are not allowed for integer or time.\n     */\n    int set(int index, int num, char *type, char *value = NULL)\n    {\n\tif (!type)\n\t    return EINVAL;\n\tif (strcmp(type, \"integer\") == 0) {\n\t    unsigned int val;\n\t    char         *endstr;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (*value == '\\0')\n\t\treturn EINVAL;\n\t    val = strtol(value, &endstr, 0);\n\t    if (*endstr != '\\0')\n\t\treturn EINVAL;\n\t    return ipmi_fru_set_int_val(self, index, num, val);\n\t} else if (strcmp(type, \"time\") == 0) {\n\t    unsigned int val;\n\t    char         *endstr;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (*value == '\\0')\n\t\treturn EINVAL;\n\t    val = strtol(value, &endstr, 0);\n\t    if (*endstr != '\\0')\n\t\treturn EINVAL;\n\t    return ipmi_fru_set_time_val(self, index, num, val);\n\t} else if (strcmp(type, \"binary\") == 0) {\n\t    unsigned int length = 0;\n\t    unsigned char *data;\n\t    int rv;\n\t    if (!value) {\n\t\tdata = NULL;\n\t    } else {\n\t\tdata = parse_raw_str_data(value, &length);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t    }\n\t    rv = ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_BINARY,\n\t\t\t\t       (char *) data, length);\n\t    if (data)\n\t\tfree(data);\n\t    return rv;\n\t} else if (strcmp(type, \"unicode\") == 0) {\n\t    unsigned int length = 0;\n\t    unsigned char *data;\n\t    int rv;\n\t    if (!value) {\n\t\tdata = NULL;\n\t    } else {\n\t\tdata = parse_raw_str_data(value, &length);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t    }\n\t    rv = ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_UNICODE,\n\t\t\t\t       (char *) data, length);\n\t    if (data)\n\t\tfree(data);\n\t    return rv;\n\t} else if (strcmp(type, \"ascii\") == 0) {\n\t    int length = 0;\n\t    if (value)\n\t\tlength = strlen(value);\n\t    return ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_ASCII,\n\t\t\t\t\t value, length);\n\t} else {\n\t    return EINVAL;\n\t}\n    }\n\n    /*\n     * Set a specific data item by index (see the get function for more\n     * info on what index and num mean).  Note that the \"num\" field is\n     * not updated by this call, unlike the get function.\n     *\n     * The type passed in tells the kind of data being passed in.  It is\n     * either:\n     *  \"integer\" - The first element of the integer array is used.\n     *  \"time\" - The first element of the integer array is used.\n     *  \"binary\" - An array of 8-bit values is taken, like \n     *    [ 0x10, 0x20, 0x99 ].\n     *  \"unicode\" - An array of 8-bit values is passed in, like \n     *    [ 0x10, 0x20, 0x99 ].\n     *  \"ascii\" - An array of 8-bit values is passed in, like \n     *    [ 0x10, 0x20, 0x99 ].\n     * Undefined values are not allowed here, but that shouldn't\n     * matter because the above function should be used for those.\n     */\n    int set_array(int index, int num, char *type, intarray value)\n    {\n\tif (value.len < 0)\n\t    return EINVAL;\n\tif (!type)\n\t    return EINVAL;\n\n\tif (strcmp(type, \"integer\") == 0) {\n\t    /* Only take the first value. */\n\t    if (value.len <= 0)\n\t\treturn EINVAL;\n\t    return ipmi_fru_set_int_val(self, index, num, value.val[0]);\n\t} else if (strcmp(type, \"time\") == 0) {\n\t    /* Only take the first value. */\n\t    if (value.len <= 0)\n\t\treturn EINVAL;\n\t    return ipmi_fru_set_time_val(self, index, num, value.val[0]);\n\t} else if (strcmp(type, \"binary\") == 0) {\n\t    unsigned int length = value.len;\n\t    unsigned char *data;\n\t    int rv;\n\n\t    if (length == 0)\n\t\tdata = malloc(1);\n\t    else\n\t\tdata = malloc(length);\n\t    if (!data)\n\t\treturn ENOMEM;\n\t    parse_ipmi_data(value, data, length, &length);\n\t    rv = ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_BINARY,\n\t\t\t\t       (char *) data, length);\n\t    free(data);\n\t    return rv;\n\t} else if (strcmp(type, \"unicode\") == 0) {\n\t    unsigned int length = value.len;\n\t    unsigned char *data = malloc(length);\n\t    int rv;\n\t    if (!data)\n\t\treturn EINVAL;\n\t    parse_ipmi_data(value, data, length, &length);\n\t    rv = ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_UNICODE,\n\t\t\t\t       (char *) data, length);\n\t    free(data);\n\t    return rv;\n\t} else if (strcmp(type, \"ascii\") == 0) {\n\t    unsigned int length = value.len;\n\t    unsigned char *data;\n\t    int rv;\n\t    if (length == 0)\n\t\tdata = malloc(1);\n\t    else\n\t\tdata = malloc(length);\n\t    if (!data)\n\t\treturn ENOMEM;\n\t    parse_ipmi_data(value, data, length, &length);\n\t    rv = ipmi_fru_set_data_val(self, index, num, IPMI_FRU_DATA_ASCII,\n\t\t\t\t       (char *) data, length);\n\t    free(data);\n\t    return rv;\n\t} else {\n\t    return EINVAL;\n\t}\n    }\n\n    /*\n     * Set multi-record fields from a string of the form:\n     *  \"0x10 0x20 0x99\"\n     *\n     * It take a number (which multi-record), type, version, and a\n     * string value.  Passing in an undefined value will delete the\n     * specific multi-record.  Note that if the number is less than\n     * the number of fields in the record, then the record will be\n     * replaced.  If it is larger than or equal to the number of\n     * fields, a new record will be appended in the next location, not\n     * in the number supplied.\n     */\n    int set_multirecord(unsigned int num,\n\t\t\tunsigned int type,\n\t\t\tunsigned int version,\n\t\t\tchar         *value = NULL)\n    {\n\tunsigned int length = 0;\n\tunsigned char *data;\n\tint rv;\n\n\tif (!value) {\n\t    data = NULL;\n\t} else {\n\t    data = parse_raw_str_data(value, &length);\n\t    if (!data)\n\t\treturn ENOMEM;\n\t}\n\trv = ipmi_fru_set_multi_record(self, num, type, version,\n\t\t\t\t       data, length);\n\tif (data)\n\t    free(data);\n\treturn rv;\n    }\n\n    /*\n     * Set multi-record fields from a string of the form:\n     *  \"0x10 0x20 0x99\"\n     *\n     * It take a number (which multi-record), type, version, and an\n     * integer array.  Undefined values are not allowed here, use\n     * the previous call to delete records.  Note that if the number\n     * is less than the number of fields in the record, then the\n     * record will be replaced.  If it is larger than or equal to the\n     * number of fields, a new record will be appended in the next\n     * location, not in the number supplied.\n     */\n    int set_multirecord_array(unsigned int num,\n\t\t\t      unsigned int type,\n\t\t\t      unsigned int version,\n\t\t\t      intarray     value)\n    {\n\tunsigned int length = value.len;\n\tunsigned char *data;\n\tint rv;\n\n\tif (length == 0)\n\t    data = malloc(1);\n\telse\n\t    data = malloc(length);\n\tif (!data)\n\t    return ENOMEM;\n\tparse_ipmi_data(value, data, length, &length);\n\trv = ipmi_fru_set_multi_record(self, num, type, version,\n\t\t\t\t       data, length);\n\tfree(data);\n\treturn rv;\n    }\n\n    /*\n     * Add a new area to the FRU.  You must pass in the area number, the\n     * start offset and length of the area.  The offset must be a multiple\n     * of 8 and the length will be truncated to a multiple of 8.\n     */\n    int add_area(unsigned int area,\n\t\t unsigned int offset,\n\t\t unsigned int length)\n    {\n\treturn ipmi_fru_add_area(self, area, offset, length);\n    }\n\n    /*\n     * Delete the given area from the FRU.\n     */\n    int delete_area(int area)\n    {\n\treturn ipmi_fru_delete_area(self, area);\n    }\n\n    /*\n     * Get the offset of the given area into the offset pointer.\n     */\n    int area_get_offset(unsigned int area,\n\t\t\tunsigned int *offset)\n    {\n\treturn ipmi_fru_area_get_offset(self, area, offset);\n    }\n\n    /*\n     * Get the length of the given area into the length pointer.\n     */\n    int area_get_length(unsigned int area,\n\t\t\tunsigned int *length)\n    {\n\treturn ipmi_fru_area_get_length(self, area, length);\n    }\n\n    /*\n     * Set the offset of the given area.\n     */\n    int area_set_offset(unsigned int area,\n\t\t\tunsigned int offset)\n    {\n\treturn ipmi_fru_area_set_offset(self, area, offset);\n    }\n\n    /*\n     * Set the length of the given area.\n     */\n    int area_set_length(unsigned int area,\n\t\t\tunsigned int length)\n    {\n\treturn ipmi_fru_area_set_length(self, area, length);\n    }\n\n    /*\n     * Get the number of bytes currently used in the given area into\n     * the used_length pointer.\n     */\n    int area_get_used_length(unsigned int area,\n\t\t\t     unsigned int *used_length)\n    {\n\treturn ipmi_fru_area_get_used_length(self, area, used_length);\n    }\n\n    /*\n     * Write the contents of the fru back into the FRU device.  If the\n     * handler (first parm) is non-null, the \"fru_written\" method on\n     * that object will be called with the domain as the first\n     * parameter, the FRU as the second parameter and the error value\n     * for the write as the third parameter.\n     */\n    int write(swig_cb *handler = NULL)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\tipmi_fru_cb cb_handler = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, fru_written)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb_handler = fru_written_done;\n\t    handler_val = ref_swig_cb(handler, fru_written);\n\t    ipmi_fru_ref(self);\n\t}\n\n\trv = ipmi_fru_write(self, cb_handler, handler_val);\n\tif (rv) {\n\t    if (handler_val)\n\t\tderef_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    int multi_record_get_root_node(unsigned int    record_num,\n\t\t\t\t   const char      **name,\n\t\t\t\t   ipmi_fru_node_t **sub_node)\n    {\n\tint rv;\n\trv = ipmi_fru_multi_record_get_root_node(self, record_num,\n\t\t\t\t\t\t name, sub_node);\n\treturn rv;\n    }\n\n    int get_root_node(const char **type, ipmi_fru_node_t **sub_node)\n    {\n\treturn ipmi_fru_get_root_node(self, type, sub_node);\n    }\n}\n\n/*\n * A FRU node object\n */\n%extend ipmi_fru_node_t {\n    ~ipmi_fru_node_t()\n    {\n\tipmi_fru_put_node(self);\n    }\n\n    int get_field(unsigned int    index,\n\t\t  const char      **name,\n\t\t  const char      **type,\n\t\t  char            **value,\n\t\t  ipmi_fru_node_t **sub_node)\n    {\n\tint                       rv;\n\tenum ipmi_fru_data_type_e dtype;\n\tint                       intval;\n\tdouble                    floatval;\n\ttime_t                    time;\n\tchar                      *data = NULL;\n\tunsigned int              data_len;\n\tint                       len;\n\tchar                      dummy[1];\n\tchar                      *str, *s;\n\tint                       i;\n\t\n\trv = ipmi_fru_node_get_field(self,\n\t\t\t\t     index,\n\t\t\t\t     name,\n\t\t\t\t     &dtype,\n\t\t\t\t     &intval,\n\t\t\t\t     &time,\n\t\t\t\t     &floatval,\n\t\t\t\t     &data,\n\t\t\t\t     &data_len,\n\t\t\t\t     sub_node);\n\tif (rv)\n\t    return rv;\n\n\tswitch(dtype) {\n\tcase IPMI_FRU_DATA_INT:\n\t    len = snprintf(dummy, 1, \"%d\", intval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%d\", intval);\n\t    *type = \"integer\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_BOOLEAN:\n\t    len = snprintf(dummy, 1, \"%d\", intval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%d\", intval);\n\t    *type = \"boolean\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_TIME:\n\t    len = snprintf(dummy, 1, \"%ld\", (long) time);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%ld\", (long) time);\n\t    *type = \"time\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_FLOAT:\n\t    len = snprintf(dummy, 1, \"%lf\", floatval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%lf\", floatval);\n\t    *type = \"float\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_BINARY:\n\t    len = data_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    if (data_len > 0)\n\t\ts += sprintf(s, \"0x%2.2x\", (unsigned char) data[0]);\n\t    else\n\t\t*s = '\\0';\n\t    for (i=1; i<data_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) data[i]);\n\t    *type = \"binary\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_UNICODE:\n\t    len = data_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    if (data_len > 0)\n\t\ts += sprintf(s, \"0x%2.2x\", (unsigned char) data[0]);\n\t    else\n\t\t*s = '\\0';\n\t    for (i=1; i<data_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) data[i]);\n\t    *type = \"unicode\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_ASCII:\n\t    str = strdup(data);\n\t    *type = \"ascii\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_SUB_NODE:\n\t    str = NULL;\n\t    *type = \"subnode\";\n\n\t    /* Put the array length (or the -1) in the value */\n\t    len = snprintf(dummy, 1, \"%d\", intval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%d\", intval);\n\t    break;\n\n\tdefault:\n\t    str = NULL;\n\t}\n\n\tif (data)\n\t    ipmi_fru_data_free(data);\n\n\t*value = str;\n\n\treturn 0;\n    }\n\n    int get_enum_val(unsigned int index,\n\t\t     int          *pos,\n\t\t     int          *nextpos,\n\t\t     const char   **data)\n    {\n\treturn ipmi_fru_node_get_enum_val(self, index, pos, nextpos, data);\n    }\n\n    int set_field(unsigned int    index,\n\t\t  const char      *type,\n\t\t  char            *value)\n    {\n\tint                       rv;\n\tenum ipmi_fru_data_type_e dtype;\n\tint                       intval = 0;\n\tdouble                    floatval = 0.0;\n\ttime_t                    time = 0;\n\tchar                      *data = NULL;\n\tunsigned int              data_len = 0;\n\tchar                      *s;\n\n\tif (!type)\n\t    return EINVAL;\n\n\tif (strcmp(type, \"subnode\") == 0) {\n\t    dtype = IPMI_FRU_DATA_SUB_NODE;\n\t    if (value) {\n\t\tdata = (char *) parse_raw_str_data(value, &data_len);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t    }\n\t    goto ready_to_set;\n\t} else if (strcmp(type, \"binary\") == 0) {\n\t    dtype = IPMI_FRU_DATA_BINARY;\n\t    if (value) {\n\t\tdata = (char *) parse_raw_str_data(value, &data_len);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t    }\n\t    goto ready_to_set;\n\t} else if (strcmp(type, \"unicode\") == 0) {\n\t    dtype = IPMI_FRU_DATA_UNICODE;\n\t    if (value) {\n\t\tdata = (char *) parse_raw_str_data(value, &data_len);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t    }\n\t    goto ready_to_set;\n\t} else if (strcmp(type, \"ascii\") == 0) {\n\t    dtype = IPMI_FRU_DATA_ASCII;\n\t    if (value) {\n\t\tdata = strdup(value);\n\t\tif (!data)\n\t\t    return ENOMEM;\n\t\tdata_len = strlen(value);\n\t    }\n\t    goto ready_to_set;\n\t}\n\n\tif (!value || !(*value))\n\t    return EINVAL;\n\n\tif (strcmp(type, \"integer\") == 0) {\n\t    dtype = IPMI_FRU_DATA_INT;\n\t    intval = strtol(value, &s, 0);\n\t    if (*s != '\\0')\n\t\treturn EINVAL;\n\t} else if (strcmp(type, \"boolean\") == 0) {\n\t    dtype = IPMI_FRU_DATA_BOOLEAN;\n\t    intval = strtol(value, &s, 0);\n\t    if (*s == '\\0')\n\t\tintval = !!intval;\n\t    else if (strcasecmp(value, \"true\") == 0)\n\t\tintval = 1;\n\t    else if (strcasecmp(value, \"false\") == 0)\n\t\tintval = 0;\n\t    else\n\t\treturn EINVAL;\n\t} else if (strcmp(type, \"time\") == 0) {\n\t    dtype = IPMI_FRU_DATA_TIME;\n\t    time = strtol(value, &s, 0);\n\t    if (*s != '\\0')\n\t\treturn EINVAL;\n\t} else if (strcmp(type, \"float\") == 0) {\n\t    dtype = IPMI_FRU_DATA_FLOAT;\n\t    floatval = strtod(value, &s);\n\t    if (*s != '\\0')\n\t\treturn EINVAL;\n\t} else\n\t    return EINVAL;\n\n    ready_to_set:\n\trv = ipmi_fru_node_set_field(self, index, dtype, intval, time,\n\t\t\t\t     floatval, data, data_len);\n\n\tif (data)\n\t    free(data);\n\treturn rv;\n    }\n\n    int settable(unsigned int index)\n    {\n\treturn ipmi_fru_node_settable(self, index);\n    }\n\n    char *get_subtype()\n    {\n\tenum ipmi_fru_data_type_e dtype;        \n\tchar                      *type;\n\tint                       rv;\n\n\trv = ipmi_fru_node_get_subtype(self, &dtype);\n\tif (rv)\n\t    return NULL;\n\tswitch (dtype) {\n\tcase IPMI_FRU_DATA_INT:\n\t    type = \"integer\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_BOOLEAN:\n\t    type = \"boolean\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_TIME:\n\t    type = \"time\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_FLOAT:\n\t    type = \"float\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_BINARY:\n\t    type = \"binary\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_UNICODE:\n\t    type = \"unicode\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_ASCII:\n\t    type = \"ascii\";\n\t    break;\n\n\tcase IPMI_FRU_DATA_SUB_NODE:\n\t    type = \"subnode\";\n\t    break;\n\n\tdefault:\n\t    return NULL;\n\t}\n\n\treturn type;\n    }\n}\n\n/*\n * An event object\n */\n%extend ipmi_event_t {\n    ~ipmi_event_t()\n    {\n\tipmi_event_free(self);\n    }\n\n    /* When you are done with an event, you should delete it.  This\n       removes the event from the local event queue and removes it\n       from the external system event log. */\n    int delete(swig_cb *handler = NULL)\n    {\n\tswig_cb_val    *handler_val = NULL;\n\tipmi_domain_cb done = NULL;\n\tint            rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, event_delete_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, event_delete_cb);\n\t    done = event_deleted_handler;\n\t}\n\trv = ipmi_event_delete(self, done, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n\n    %newobject get_mc_id;\n    /*\n     * Get the MC id the event came from.  Note that the MC may not exist\n     * any more.\n     */\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_event_get_mcid(self);\n\treturn rv;\n    }\n\n    /*\n     * Get the event's record id\n     */\n    int get_record_id()\n    {\n\treturn ipmi_event_get_record_id(self);\n    }\n\n    /*\n     * Get the event's type.\n     */\n    int get_type()\n    {\n\treturn ipmi_event_get_type(self);\n    }\n\n    /*\n     * Get the event's timestamp.  This is in seconds.\n     */\n    double get_timestamp()\n    {\n\treturn ((double) ipmi_event_get_timestamp(self)) / 1000000000.0;\n    }\n\n    /*\n     * Get the data from the event.  This returns a reference to an\n     * array, so you have to reference it like @$val.\n     */\n    intarray get_data()\n    {\n\tintarray      rv;\n\tint           i;\n\tunsigned char *data;\n\tint           data_len;\n\n\tdata_len = ipmi_event_get_data_len(self);\n\tdata = malloc(data_len);\n\tdata_len = ipmi_event_get_data(self, data, 0, data_len);\n\trv.val = malloc(sizeof(int) * data_len);\n\tfor (i=0; i<data_len; i++)\n\t    rv.val[i] = data[i];\n\tfree(data);\n\trv.len = data_len;\n\treturn rv;\n    }\n\n    /* Call the sensor callback for the event.  If the sensor is a\n     * threshold sensor, the threshold_event_cb method will be called\n     * on the sensor. Otherwise, the sensor is discrete and the\n     * discrete_event_cb will be called.  The threshold_event_cb\n     * method takes the following parameters:\n     * <self> <sensor> <event spec> <raw_set> <raw> <value_set> <value> <event>\n     * The discrete_event_cb method takes the following parameters:\n     * <self> <sensor> <event spec> <severity> <old_severity> <event>\n     *\n     * Note: In the future, this may take control callbacks, too.\n     */\n    int call_handler(swig_cb *handler)\n    {\n\tevent_call_handler_data_t info;\n\tint                       rv;\n\t\n\tif (! valid_swig_2cb(handler, threshold_event_cb, discrete_event_cb))\n\t    return EINVAL;\n\n\tinfo.handlers = ipmi_event_handlers_alloc();\n\tif (! info.handlers)\n\t    return ENOMEM;\n\n\tipmi_event_handlers_set_threshold(info.handlers,\n\t\t\t\t\t  sensor_threshold_event_handler);\n\tipmi_event_handlers_set_discrete(info.handlers,\n\t\t\t\t\t sensor_discrete_event_handler);\n\n\tinfo.handlers_val = ref_swig_2cb(handler, threshold_event_cb,\n\t\t\t\t\t discrete_event_cb);\n\n\tinfo.event = self;\n\tinfo.rv = 0;\n\trv = ipmi_mc_pointer_cb(ipmi_event_get_mcid(self),\n\t\t\t\tevent_call_handler_mc_cb,\n\t\t\t\t&info);\n\tif (rv == 0)\n\t    rv = info.rv;\n\t\n\tipmi_event_handlers_free(info.handlers);\n\tderef_swig_cb_val(handler);\n\n\treturn rv;\n    }\n}\n\n%extend ipmi_lanparm_t {\n    ~ipmi_lanparm_t()\n    {\n\tipmi_lanparm_deref(self);\n    }\n\n    %newobject get_mc_id;\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_lanparm_get_mc_id(self);\n\treturn rv;\n    }\n\n    int get_channel()\n    {\n\treturn ipmi_lanparm_get_channel(self);\n    }\n\n%constant int LANPARM_SET_IN_PROGRESS = IPMI_LANPARM_SET_IN_PROGRESS;\n%constant int LANPARM_AUTH_TYPE_SUPPORT = IPMI_LANPARM_AUTH_TYPE_SUPPORT;\n%constant int LANPARM_AUTH_TYPE_ENABLES = IPMI_LANPARM_AUTH_TYPE_ENABLES;\n%constant int LANPARM_IP_ADDRESS = IPMI_LANPARM_IP_ADDRESS;\n%constant int LANPARM_IP_ADDRESS_SRC = IPMI_LANPARM_IP_ADDRESS_SRC;\n%constant int LANPARM_MAC_ADDRESS = IPMI_LANPARM_MAC_ADDRESS;\n%constant int LANPARM_SUBNET_MASK = IPMI_LANPARM_SUBNET_MASK;\n%constant int LANPARM_IPV4_HDR_PARMS = IPMI_LANPARM_IPV4_HDR_PARMS;\n%constant int LANPARM_PRIMARY_RMCP_PORT = IPMI_LANPARM_PRIMARY_RMCP_PORT;\n%constant int LANPARM_SECONDARY_RMCP_PORT = IPMI_LANPARM_SECONDARY_RMCP_PORT;\n%constant int LANPARM_BMC_GENERATED_ARP_CNTL = IPMI_LANPARM_BMC_GENERATED_ARP_CNTL;\n%constant int LANPARM_GRATUIDOUS_ARP_INTERVAL = IPMI_LANPARM_GRATUIDOUS_ARP_INTERVAL;\n%constant int LANPARM_DEFAULT_GATEWAY_ADDR = IPMI_LANPARM_DEFAULT_GATEWAY_ADDR;\n%constant int LANPARM_DEFAULT_GATEWAY_MAC_ADDR = IPMI_LANPARM_DEFAULT_GATEWAY_MAC_ADDR;\n%constant int LANPARM_BACKUP_GATEWAY_ADDR = IPMI_LANPARM_BACKUP_GATEWAY_ADDR;\n%constant int LANPARM_BACKUP_GATEWAY_MAC_ADDR = IPMI_LANPARM_BACKUP_GATEWAY_MAC_ADDR;\n%constant int LANPARM_COMMUNITY_STRING = IPMI_LANPARM_COMMUNITY_STRING;\n%constant int LANPARM_NUM_DESTINATIONS = IPMI_LANPARM_NUM_DESTINATIONS;\n%constant int LANPARM_DEST_TYPE = IPMI_LANPARM_DEST_TYPE;\n%constant int LANPARM_DEST_ADDR = IPMI_LANPARM_DEST_ADDR;\n%constant int LANPARM_VLAN_ID = IPMI_LANPARM_VLAN_ID;\n%constant int LANPARM_VLAN_PRIORITY = IPMI_LANPARM_VLAN_PRIORITY;\n%constant int LANPARM_NUM_CIPHER_SUITE_ENTRIES = IPMI_LANPARM_NUM_CIPHER_SUITE_ENTRIES;\n%constant int LANPARM_CIPHER_SUITE_ENTRY_SUPPORT = IPMI_LANPARM_CIPHER_SUITE_ENTRY_SUPPORT;\n%constant int LANPARM_CIPHER_SUITE_ENTRY_PRIV = IPMI_LANPARM_CIPHER_SUITE_ENTRY_PRIV;\n%constant int LANPARM_DEST_VLAN_TAG = IPMI_LANPARM_DEST_VLAN_TAG;\n\n    /*\n     * Fetch an individual parm from the MC.  The parameter (parm1) ,\n     * and set (parm2) and block (parm3) are specified, along with a\n     * handler (parm4).  The lanparm_got_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <lanparm> <err> <parm_rev> <data1> [<data2> ...]\n     */\n    int get_parm(int parm, int set, int block, swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, lanparm_got_parm_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, lanparm_got_parm_cb);\n\t    ipmi_lanparm_ref(self);\n\t    rv = ipmi_lanparm_get_parm(self, parm, set, block,\n\t\t\t\t       lanparm_get_parm, handler_val);\n\t    if (rv) {\n\t\tipmi_lanparm_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1),\n     * and string value (parm2) is specified, along with an optional\n     * handler (parm3).  The lanparm_set_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <lanparm> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm(int parm, char *value, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tunsigned char        *data;\n\tunsigned int         length;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tdata = parse_raw_str_data(value, &length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, lanparm_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, lanparm_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_lanparm_ref(self);\n\trv = ipmi_lanparm_set_parm(self, parm, data, length,\n\t\t\t\t   lanparm_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_lanparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1), and\n     * an array of integers (parm2) is specified, along with an\n     * optional handler (parm3).  The lanparm_set_parm_cb method on\n     * the handler will be called when the the operation completes\n     * with the following parms: <self> <lanparm> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm_array(int parm, intarray value, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tunsigned char        *data;\n\tunsigned int         length = value.len;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (length == 0)\n\t    data = malloc(1);\n\telse\n\t    data = malloc(length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\tparse_ipmi_data(value, data, length, &length);\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, lanparm_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, lanparm_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_lanparm_ref(self);\n\trv = ipmi_lanparm_set_parm(self, parm, data, length,\n\t\t\t\t   lanparm_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_lanparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the full standard configuration for the lanparms.  When\n     * done, the lanparm_got_config_cb method will be called on the\n     * handler (first parm) with the following parms: <self> <lanparm>\n     * <err> <lanconfig>.  The lanconfig will be an object of type\n     * ipmi_lan_config_t.\n     */\n    int get_config(swig_cb *handler)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, lanparm_got_config_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, lanparm_got_config_cb);\n\n\t    ipmi_lanparm_ref(self);\n\t    rv = ipmi_lan_get_config(self, lanparm_get_config, handler_val);\n\t    if (rv) {\n\t\tipmi_lanparm_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n\t\n    }\n\n    /*\n     * Set the full standard configuration for the lanparms.  The\n     * config to set is the first parm of type ipmi_lan_config_t.  When\n     * done, the lanparm_set_config_cb method will be called on the\n     * handler (second parm) with the following parms: <self>\n     * <lanparm> <err>.\n     */\n    int set_config(ipmi_lan_config_t *config, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, lanparm_set_config_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, lanparm_set_config_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_lanparm_ref(self);\n\trv = ipmi_lan_set_config(self, config,\n\t\t\t\t lanparm_set_config, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_lanparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Unlock the lock for the lanparm.  The config to set is the\n     * first parm of type ipmi_lan_config_t and may be undefined\n     * (meaning that the MC of the lanparm will be unlocked).  If the\n     * config is supplied, it will be marked as unlocked.  When done,\n     * the lanparm_clear_lock_cb method will be called on the handler\n     * (second parm) with the following parms: <self> <lanparm> <err>.\n     */\n    int clear_lock(ipmi_lan_config_t *config = NULL, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, lanparm_clear_lock_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, lanparm_clear_lock_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_lanparm_ref(self);\n\trv = ipmi_lan_clear_lock(self, config,\n\t\t\t\t lanparm_clear_lock, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_lanparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n%extend ipmi_lan_config_t {\n    ~ipmi_lan_config_t()\n    {\n\tipmi_lan_free_config(self);\n    }\n\n    /*\n     * Get a value from the lanconfig.  The first parameter is the\n     * parm number, the second is the parm index (which is a pointer\n     * to an integer).  The returned value will be undefined if\n     * an error occurred, it will be of the format:\n     *   \"<name> <type> <data>\"\n     * The type and data will not be present if the data value is not\n     * supported or the index is out of range, but the name will still\n     * be present.\n     *\n     * The supports types are: integer, bool, data, ip, and mac.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for ip is an IP address in the form\n     * \"n.n.n.n\".  Data for mac is a mac address in the form\n     * \"nn:nn:nn:nn:nn:nn\"\n     *\n     * The second parameter (the index) is zero based and should be\n     * set to zero when fetching an index for the first time.  It will\n     * be unchanged if the data item does not support multiple items.\n     * If it does support multiple items, then the number will be\n     * changed to the next supported value, or to -1 if this is the\n     * last item.\n     *\n     * Be careful with the index, it must be a number, not something\n     * that can be interpreted to a number.  If necessary, in perl,\n     * you must do $idx = int($idx) in some cases.\n     */\n    %newobject get_val;\n    char *get_val(int parm, int *index)\n    {\n\tenum ipmi_lanconf_val_type_e valtype;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\tconst char        *name;\n\tchar              dummy[1];\n\tchar              *str = NULL, *s;\n\tint               rv;\n\tint               i;\n\tunsigned int      len;\n\n\trv = ipmi_lanconfig_get_val(self, parm, &name, index, &valtype,\n\t\t\t\t    &ival, &dval, &dval_len);\n\tif ((rv == ENOSYS) || (rv == E2BIG))\n\t    return strdup(name);\n\telse if (rv)\n\t    return NULL;\n\n\tswitch (valtype) {\n\tcase IPMI_LANCONFIG_INT:\n\t    len = snprintf(dummy, 1, \"%s integer %d\", name, ival);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s integer %d\", name, ival);\n\t    break;\n\t    \n\tcase IPMI_LANCONFIG_BOOL:\n\t    len = snprintf(dummy, 1, \"%s bool %s\", name,\n\t\t\t   ival ? \"true\" : \"false\");\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s bool %s\", name, \n\t\t    ival ? \"true\" : \"false\");\n\t    break;\n\t    \n\tcase IPMI_LANCONFIG_DATA:\n\t    len = snprintf(dummy, 1, \"%s data\", name);\n\t    len += dval_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s data\", name);\n\t    for (i=0; i<dval_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", dval[i]);\n\t    break;\n\n\tcase IPMI_LANCONFIG_IP:\n\t    len = snprintf(dummy, 1, \"%s ip\", name);\n\t    len += 4 * 4; /* worst case */\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s ip %d.%d.%d.%d\", name,\n\t\t    dval[0], dval[1], dval[2], dval[3]);\n\t    break;\n\n\tcase IPMI_LANCONFIG_MAC:\n\t    len = snprintf(dummy, 1, \"%s mac\", name);\n\t    len += 6 * 3;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s mac \", name);\n\t    for (i=0; i<5; i++)\n\t\ts += sprintf(s, \"%2.2x:\", dval[i]);\n\t    sprintf(s, \"%2.2x\", dval[i]);\n\t    break;\n\t}\n\n\tif (dval)\n\t    ipmi_lanconfig_data_free(dval);\n\n\treturn str;\n    }\n\n    /*\n     * Set a value in the lanconfig.  The first parameter is the parm\n     * number, the second is the parm index.  The type is a string\n     * in the third parm.  The data is the fourth parm.\n     *\n     * The supports types are: integer, bool, data, ip, and mac.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for ip is an IP address in the form\n     * \"n.n.n.n\".  Data for mac is a mac address in the form\n     * \"nn.nn.nn.nn.nn.nn\"\n     *\n     * The index is ignored for types that do not use it.\n     */\n    int set_val(int parm, int idx, char *type, char *value) {\n\tenum ipmi_lanconf_val_type_e valtype;\n\tint               rv;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\n\trv = ipmi_lanconfig_parm_to_type(parm, &valtype);\n\tif (rv)\n\t    return rv;\n\n\tswitch (valtype) {\n\tcase IPMI_LANCONFIG_INT:\n\t{\n\t    char *endstr;\n\t    if (strcmp(type, \"integer\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (*value == '\\0')\n\t\treturn EINVAL;\n\t    ival = strtol(value, &endstr, 0);\n\t    if (*endstr != '\\0')\n\t\treturn EINVAL;\n\t    break;\n\t}\n\t    \n\tcase IPMI_LANCONFIG_BOOL:\n\t    if (strcmp(type, \"bool\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (strcasecmp(value, \"true\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"false\") == 0)\n\t\tival = 0;\n\t    else if (strcasecmp(value, \"on\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"off\") == 0)\n\t\tival = 0;\n\t    else\n\t\treturn EINVAL;\n\t    break;\n\t    \n\tcase IPMI_LANCONFIG_DATA:\n\t    if (strcmp(type, \"data\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    dval = parse_raw_str_data(value, &dval_len);\n\t    if (!dval)\n\t\treturn ENOMEM;\n\t    break;\n\n\tcase IPMI_LANCONFIG_IP:\n\t    {\n\t\tstruct in_addr addr;\n\t\tif (strcmp(type, \"ip\") != 0)\n\t\t    return EINVAL;\n\t\trv = parse_ip_addr(value, &addr);\n\t\tif (rv)\n\t\t    return rv;\n\t\tdval = malloc(4);\n\t\tmemcpy(dval, &addr.s_addr, 4);\n\t\tdval_len = 4;\n\t    }\n\t    break;\n\n\tcase IPMI_LANCONFIG_MAC:\n\t    if (strcmp(type, \"mac\") != 0)\n\t\treturn EINVAL;\n\t    dval = malloc(6);\n\t    rv = parse_mac_addr(value, dval);\n\t    if (rv) {\n\t\tfree(dval);\n\t\treturn rv;\n\t    }\n\t    dval_len = 6;\n\t    break;\n\t}\n\n\trv = ipmi_lanconfig_set_val(self, parm, idx, ival, dval, dval_len);\n\tif (dval)\n\t    free(dval);\n\treturn rv;\n    }\n}\n\n%extend ipmi_pef_t {\n    ~ipmi_pef_t()\n    {\n\tipmi_pef_deref(self);\n    }\n\n    %newobject get_mc_id;\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_pef_get_mc(self);\n\treturn rv;\n    }\n\n%constant int PEFPARM_SET_IN_PROGRESS = IPMI_PEFPARM_SET_IN_PROGRESS;\n%constant int PEFPARM_CONTROL = IPMI_PEFPARM_CONTROL;\n%constant int PEFPARM_ACTION_GLOBAL_CONTROL = IPMI_PEFPARM_ACTION_GLOBAL_CONTROL;\n%constant int PEFPARM_STARTUP_DELAY = IPMI_PEFPARM_STARTUP_DELAY;\n%constant int PEFPARM_ALERT_STARTUP_DELAY = IPMI_PEFPARM_ALERT_STARTUP_DELAY;\n%constant int PEFPARM_NUM_EVENT_FILTERS = IPMI_PEFPARM_NUM_EVENT_FILTERS;\n%constant int PEFPARM_EVENT_FILTER_TABLE = IPMI_PEFPARM_EVENT_FILTER_TABLE;\n%constant int PEFPARM_EVENT_FILTER_TABLE_DATA1 = IPMI_PEFPARM_EVENT_FILTER_TABLE_DATA1;\n%constant int PEFPARM_NUM_ALERT_POLICIES = IPMI_PEFPARM_NUM_ALERT_POLICIES;\n%constant int PEFPARM_ALERT_POLICY_TABLE = IPMI_PEFPARM_ALERT_POLICY_TABLE;\n%constant int PEFPARM_SYSTEM_GUID = IPMI_PEFPARM_SYSTEM_GUID;\n%constant int PEFPARM_NUM_ALERT_STRINGS = IPMI_PEFPARM_NUM_ALERT_STRINGS;\n%constant int PEFPARM_ALERT_STRING_KEY = IPMI_PEFPARM_ALERT_STRING_KEY;\n%constant int PEFPARM_ALERT_STRING = IPMI_PEFPARM_ALERT_STRING;\n\n    /*\n     * Fetch an individual parm from the MC.  The parameter (parm1) ,\n     * and set (parm2) and block (parm3) are specified, along with a\n     * handler (parm4).  The pef_got_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <pef> <err> <parm_rev> <data1> [<data2> ...]\n     */\n    int get_parm(int parm, int set, int block, swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, pef_got_parm_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, pef_got_parm_cb);\n\t    ipmi_pef_ref(self);\n\t    rv = ipmi_pef_get_parm(self, parm, set, block, pef_get_parm,\n\t\t\t\t   handler_val);\n\t    if (rv) {\n\t\tipmi_pef_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1),\n     * and string value (parm2) is specified, along with an optional\n     * handler (parm3).  The pef_set_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <pef> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm(int parm, char *value, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tunsigned char        *data;\n\tunsigned int         length;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tdata = parse_raw_str_data(value, &length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, pef_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, pef_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_pef_ref(self);\n\trv = ipmi_pef_set_parm(self, parm, data, length,\n\t\t\t       pef_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_pef_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1), and\n     * an array of integers (parm2) is specified, along with an\n     * optional handler (parm3).  The pef_set_parm_cb method on\n     * the handler will be called when the the operation completes\n     * with the following parms: <self> <pef> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm_array(int parm, intarray value, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tunsigned char        *data;\n\tunsigned int         length = value.len;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (length == 0)\n\t    data = malloc(1);\n\telse\n\t    data = malloc(length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\tparse_ipmi_data(value, data, length, &length);\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, pef_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, pef_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_pef_ref(self);\n\trv = ipmi_pef_set_parm(self, parm, data, length,\n\t\t\t       pef_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_pef_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the full standard configuration for the pefs.  When\n     * done, the pef_got_config_cb method will be called on the\n     * handler (first parm) with the following parms: <self> <pef>\n     * <err> <pefconfig>.  The pefconfig will be an object of type\n     * ipmi_pef_config_t.\n     */\n    int get_config(swig_cb *handler)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, pef_got_config_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, pef_got_config_cb);\n\n\t    ipmi_pef_ref(self);\n\t    rv = ipmi_pef_get_config(self, pef_get_config, handler_val);\n\t    if (rv) {\n\t\tipmi_pef_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n\t\n    }\n\n    /*\n     * Set the full standard configuration for the pefs.  The\n     * config to set is the first parm of type ipmi_pef_config_t.  When\n     * done, the pef_set_config_cb method will be called on the\n     * handler (second parm) with the following parms: <self>\n     * <pef> <err>.\n     */\n    int set_config(ipmi_pef_config_t *config, swig_cb *handler = NULL)\n    {\n\tint                  rv;\n\tswig_cb_val          *handler_val = NULL;\n\tipmi_pef_done_cb done = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, pef_set_config_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    done = pef_set_config;\n\t    handler_val = ref_swig_cb(handler, pef_set_config_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_pef_ref(self);\n\trv = ipmi_pef_set_config(self, config, done, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_pef_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Unlock the lock for the pef.  The config to set is the\n     * first parm of type ipmi_pef_config_t and may be undefined\n     * (meaning that the MC of the pef will be unlocked).  If the\n     * config is supplied, it will be marked as unlocked.  When done,\n     * the pef_clear_lock_cb method will be called on the handler\n     * (second parm) with the following parms: <self> <pef> <err>.\n     */\n    int clear_lock(ipmi_pef_config_t *config = NULL, swig_cb *handler = NULL)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, pef_clear_lock_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, pef_clear_lock_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_pef_ref(self);\n\trv = ipmi_pef_clear_lock(self, config, pef_clear_lock, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_pef_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n%extend ipmi_pef_config_t {\n    ~ipmi_pef_config_t()\n    {\n\tipmi_pef_free_config(self);\n    }\n\n    /*\n     * Get a value from the pefconfig.  The first parameter is the\n     * parm number, the second is the parm index (which is a pointer\n     * to an integer).  The returned value will be undefined if\n     * an error occurred, it will be of the format:\n     *   \"<name> <type> <data>\"\n     * The type and data will not be present if the data value is not\n     * supported or the index is out of range, but the name will still\n     * be present.\n     *\n     * The supports types are: integer, bool, data, and string.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for string is a string, starting one space\n     * after the string and going to the end of the returned valid\n     *\n     * The second parameter (the index) is zero based and should be\n     * set to zero when fetching an index for the first time.  It will\n     * be unchanged if the data item does not support multiple items.\n     * If it does support multiple items, then the number will be\n     * changed to the next supported value, or to -1 if this is the\n     * last item.\n     *\n     * Be careful with the index, it must be a number, not something\n     * that can be interpreted to a number.  If necessary, in perl,\n     * you must do $idx = int($idx) in some cases.\n     */\n    %newobject get_val;\n    char *get_val(int parm, int *index)\n    {\n\tenum ipmi_pefconf_val_type_e valtype;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\tconst char        *name;\n\tchar              dummy[1];\n\tchar              *str = NULL, *s;\n\tint               rv;\n\tint               i;\n\tunsigned int      len;\n\n\trv = ipmi_pefconfig_get_val(self, parm, &name, index, &valtype,\n\t\t\t\t    &ival, &dval, &dval_len);\n\tif ((rv == ENOSYS) || (rv == E2BIG))\n\t    return strdup(name);\n\telse if (rv)\n\t    return NULL;\n\n\tswitch (valtype) {\n\tcase IPMI_PEFCONFIG_INT:\n\t    len = snprintf(dummy, 1, \"%s integer %d\", name, ival);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s integer %d\", name, ival);\n\t    break;\n\t    \n\tcase IPMI_PEFCONFIG_BOOL:\n\t    len = snprintf(dummy, 1, \"%s bool %s\", name,\n\t\t\t   ival ? \"true\" : \"false\");\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s bool %s\", name, \n\t\t    ival ? \"true\" : \"false\");\n\t    break;\n\t    \n\tcase IPMI_PEFCONFIG_DATA:\n\t    len = snprintf(dummy, 1, \"%s data\", name);\n\t    len += dval_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s data\", name);\n\t    for (i=0; i<dval_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", dval[i]);\n\t    break;\n\n\tcase IPMI_PEFCONFIG_STR:\n\t    len = snprintf(dummy, 1, \"%s string %s\", name, (char *) dval);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s string %s\", name, (char *) dval);\n\t    break;\n\t}\n\n\tif (dval)\n\t    ipmi_pefconfig_data_free(dval);\n\n\treturn str;\n    }\n\n    /*\n     * Set a value in the pefconfig.  The first parameter is the parm\n     * number, the second is the parm index.  The type is a string\n     * in the third parm.  The data is the fourth parm.\n     *\n     * The supports types are: integer, bool, data, and string.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for string is just a string.\n     *\n     * The index is ignored for types that do not use it.\n     */\n    int set_val(int parm, int idx, char *type, char *value) {\n\tenum ipmi_pefconf_val_type_e valtype;\n\tint               rv;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\n\trv = ipmi_pefconfig_parm_to_type(parm, &valtype);\n\tif (rv)\n\t    return rv;\n\n\tswitch (valtype) {\n\tcase IPMI_PEFCONFIG_INT:\n\t{\n\t    char *endstr;\n\t    if (strcmp(type, \"integer\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (*value == '\\0')\n\t\treturn EINVAL;\n\t    ival = strtol(value, &endstr, 0);\n\t    if (*endstr != '\\0')\n\t\treturn EINVAL;\n\t    break;\n\t}\n\t    \n\tcase IPMI_PEFCONFIG_BOOL:\n\t    if (strcmp(type, \"bool\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (strcasecmp(value, \"true\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"false\") == 0)\n\t\tival = 0;\n\t    else if (strcasecmp(value, \"on\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"off\") == 0)\n\t\tival = 0;\n\t    else\n\t\treturn EINVAL;\n\t    break;\n\t    \n\tcase IPMI_PEFCONFIG_DATA:\n\t    if (strcmp(type, \"data\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    dval = parse_raw_str_data(value, &dval_len);\n\t    if (!dval)\n\t\treturn ENOMEM;\n\t    break;\n\n\tcase IPMI_PEFCONFIG_STR:\n\t    if (strcmp(type, \"string\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    dval = (unsigned char *) strdup((char *) value);\n\t    if (!dval)\n\t\treturn ENOMEM;\n\t    break;\n\t}\n\n\trv = ipmi_pefconfig_set_val(self, parm, idx, ival, dval, dval_len);\n\tif (dval)\n\t    free(dval);\n\treturn rv;\n    }\n}\n\n%extend ipmi_pet_t {\n    ~ipmi_pet_t()\n    {\n\tipmi_pet_deref(self);\n    }\n\n    %newobject get_mc_id;\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_pet_get_mc_id(self);\n\treturn rv;\n    }\n\n    int get_channel()\n    {\n\treturn ipmi_pet_get_channel(self);\n    }\n\n    %newobject get_ip_addr;\n    char *get_ip_addr()\n    {\n\tstruct in_addr ip;\n\tchar           *dval = malloc(16);\n\tunsigned char  d[4];\n\n\tif (!dval)\n\t    return NULL;\n\tipmi_pet_get_ip_addr(self, &ip);\n\td[0] = (ip.s_addr >> 24) & 0xff;\n\td[1] = (ip.s_addr >> 16) & 0xff;\n\td[2] = (ip.s_addr >> 8) & 0xff;\n\td[3] = (ip.s_addr >> 0) & 0xff;\n\tsprintf(dval, \"%d.%d.%d.%d\", d[0], d[1], d[2], d[3]);\n\treturn dval;\n    }\n\n    %newobject get_mac_addr;\n    char *get_mac_addr()\n    {\n\tchar          *dval = malloc(18);\n\tunsigned char d[6];\n\n\tif (!dval)\n\t    return NULL;\n\tipmi_pet_get_mac_addr(self, d);\n\tsprintf(dval, \"%d:%d:%d:%d:%d:%d\", d[0], d[1], d[2], d[3], d[4], d[5]);\n\treturn dval;\n    }\n\n    int get_eft_sel()\n    {\n\treturn ipmi_pet_get_eft_sel(self);\n    }\n\n    int get_policy_num()\n    {\n\treturn ipmi_pet_get_policy_num(self);\n    }\n    \n    int get_apt_sel()\n    {\n\treturn ipmi_pet_get_apt_sel(self);\n    }\n    \n    int get_lan_dest_sel()\n    {\n\treturn ipmi_pet_get_lan_dest_sel(self);\n    }\n}\n\n%newobject alloc_cmdlang;\n/*\n * Allocate a command language handler for use by the interpreted\n * language.  This allows commands to be entered and the responses\n * received by the handler object passed in.  The handler object must\n * implement a large number of methods:\n *\n * cmdlang_out - Normal output of a name/value pair.  Has the following\n *  parameters: <self> <cmdlang> <name> <value>\n *\n * cmdlang_out_binary - Output binary information.  Has the following\n *  parameters: <self> <cmdlang> <name> <val1> [<val2> ...] where the\n *  values are either a list of parameters or an array of integer\n *  values (depending on the language).\n *\n * cmdlang_out_unicode - Output a unicode string.  Has the following\n *  parameters: <self> <cmdlang> <name> <val1> [<val2> ...] where the\n *  values are either a list of parameters or an array of integer\n *  values (depending on the language).\n *\n * cmdlang_down - increase the nesting level of the output.  Takes\n *  the following parameters: <self> <cmdlang>.\n\n * cmdlang_up - decrease the nesting level of the output.  Takes\n *  the following parameters: <self> <cmdlang>.\n *\n * cmdlang_done - Execution of a command is complete.  This will be\n * called after every handled command so the upper layer will know\n * when a new command can be entered..  Takes the following\n * parameters: <self> <cmdlang>.\n */\nipmi_cmdlang_t *alloc_cmdlang(swig_cb *handler);\n\n/*\n * Enable or disable full information for events registers with\n * set_cmdlang_event_handler.  Normally (with this set to false) only\n * minimal event information is printed.  With this set to true, all\n * information about the object the event occurs for is printed.\n */\nvoid cmdlang_set_evinfo(int evinfo);\n\n/* \n * Get the event info flag value.\n */\nint cmdlang_get_evinfo(void);\n\n/*\n * Set an error handler for handling \"global\" errors from the OpenIPMI\n * command language.  Basically, these are errors that are note\n * related to any specific command handler.  The handler has the\n * global_cmdlang_err method called on it with the following parms:\n * <self>\n * <objstr> - The name of the object associated with the error.  May\n * be empty.\n * <location> - The location (in the source code) where the error was\n * generated.  May be empty.\n * <errstr> - The error string generated.\n * <errval> - an integer value for the error.\n */\nvoid set_cmdlang_global_err_handler(swig_cb *handler);\n\n/*\n * Handle event from the cmdlang interface.  These are basically\n * events that occur asyncronously and are thus not associated with\n * any specific cmdlang handler.  The handler's cmdlang_event method\n * will be called with the following parameters: <self> <event>.  The\n * event is of the type ipmi_cmdlang_event_t.\n */\nvoid set_cmdlang_event_handler(swig_cb *handler);\n\n\n%{\n    static void cmdlang_set_evinfo(int evinfo)\n    {\n\tipmi_cmdlang_set_evinfo(evinfo);\n    }\n\n    static int cmdlang_get_evinfo(void)\n    {\n\treturn ipmi_cmdlang_get_evinfo();\n    }\n\n    static void cmdlang_down(ipmi_cmdlang_t *info)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tswig_call_cb(cb, \"cmdlang_down\", \"%p\", &ref);\n\tswig_free_ref(ref);\n    }\n\n    static void cmdlang_up(ipmi_cmdlang_t *info)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tswig_call_cb(cb, \"cmdlang_up\", \"%p\", &ref);\n\tswig_free_ref(ref);\n    }\n\n    static void cmdlang_done(ipmi_cmdlang_t *info)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tswig_call_cb(cb, \"cmdlang_done\", \"%p\", &ref);\n\tswig_free_ref(ref);\n\n\t/* Clean up the cmdlang information */\n\tif (info->errstr_dynalloc)\n\t    ipmi_mem_free(info->errstr);\n\tinfo->errstr_dynalloc = 0;\n\tinfo->errstr = NULL;\n\tinfo->objstr[0] = '\\0';\n\tinfo->err = 0;\n    }\n\n    static void cmdlang_out(ipmi_cmdlang_t *info,\n\t\t\t    const char     *name,\n\t\t\t    const char     *value)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tif (!value)\n\t    value = \"\";\n\tswig_call_cb(cb, \"cmdlang_out\", \"%p%s%s\", &ref, name, value);\n\tswig_free_ref(ref);\n    }\n\n    static void cmdlang_out_binary(ipmi_cmdlang_t *info,\n\t\t\t\t   const char     *name,\n\t\t\t\t   const char     *value,\n\t\t\t\t   unsigned int   len)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tswig_call_cb(cb, \"cmdlang_out_binary\", \"%p%s%*s\", &ref, name,\n\t\t     len, value);\n\tswig_free_ref(ref);\n    }\n    \n    static void cmdlang_out_unicode(ipmi_cmdlang_t *info,\n\t\t\t\t    const char     *name,\n\t\t\t\t    const char     *value,\n\t\t\t\t    unsigned int   len)\n    {\n\tswig_cb_val *cb = info->user_data;\n\tswig_ref    ref = swig_make_ref(info, ipmi_cmdlang_t);\n\n\tswig_call_cb(cb, \"cmdlang_out_unicode\", \"%p%s%*s\", &ref, name,\n\t\t     len, value);\n\tswig_free_ref(ref);\n    }\n\n    static ipmi_cmdlang_t *\n    alloc_cmdlang(swig_cb *handler)\n    {\n\tipmi_cmdlang_t *cmdlang = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (nil_swig_cb(handler))\n\t    goto out;\n\n\tif (!valid_swig_cb(handler, cmdlang_out))\n\t    goto out;\n\tif (!valid_swig_cb(handler, cmdlang_out_binary))\n\t    goto out;\n\tif (!valid_swig_cb(handler, cmdlang_out_unicode))\n\t    goto out;\n\tif (!valid_swig_cb(handler, cmdlang_down))\n\t    goto out;\n\tif (!valid_swig_cb(handler, cmdlang_up))\n\t    goto out;\n\tif (!valid_swig_cb(handler, cmdlang_done))\n\t    goto out;\n\n\tcmdlang = malloc(sizeof(*cmdlang));\n\tif (!cmdlang)\n\t    goto out;\n\tmemset(cmdlang, 0, sizeof(*cmdlang));\n\n\tcmdlang->out = cmdlang_out;\n\tcmdlang->down = cmdlang_down;\n\tcmdlang->up = cmdlang_up;\n\tcmdlang->done = cmdlang_done;\n\tcmdlang->out_binary = cmdlang_out_binary;\n\tcmdlang->out_unicode = cmdlang_out_unicode;\n\n\tcmdlang->os_hnd = swig_os_hnd;\n\n\tcmdlang->objstr = malloc(IPMI_MAX_NAME_LEN);\n\tif (!cmdlang->objstr) {\n\t    free(cmdlang);\n\t    cmdlang = NULL;\n\t    goto out;\n\t}\n\tcmdlang->objstr[0] = '\\0';\n\tcmdlang->objstr_len = IPMI_MAX_NAME_LEN;\n\n\tcmdlang->user_data = ref_swig_gencb(handler);\n\n    out:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn cmdlang;\n    }\n\n    swig_cb_val *cmdlang_global_err_handler = NULL;\n\n    void ipmi_cmdlang_global_err(char *objstr,\n\t\t\t\t char *location,\n\t\t\t\t char *errstr,\n\t\t\t\t int  errval)\n    {\n\tswig_cb_val *handler = cmdlang_global_err_handler;\n\n\tif (!objstr)\n\t    objstr = \"\";\n\tif (!location)\n\t    location = \"\";\n\tif (! handler) {\n\t    fprintf(stderr, \"Global IPMI cmdlang error: %s(%s): %s (%d)\\n\",\n\t\t    objstr, location, errstr, errval);\n\t} else {\n\t    swig_call_cb(handler,\n\t\t\t \"global_cmdlang_err\",\n\t\t\t \"%s%s%s%d\", objstr, location, errstr, errval);\n\t}\n    }\n\n    swig_cb_val *cmdlang_event_handler = NULL;\n\n    void ipmi_cmdlang_report_event(ipmi_cmdlang_event_t *event)\n    {\n\tswig_ref event_ref;\n\tswig_cb_val *handler = cmdlang_event_handler;\n\n\tif (! handler)\n\t    return;\n\n\tevent_ref = swig_make_ref(event, ipmi_cmdlang_event_t);\n\tswig_call_cb(handler, \"cmdlang_event\", \"%p\", &event_ref);\n\t/* User shouldn't keep these around. */\n\tswig_free_ref_check(event_ref, ipmi_cmdlang_event_t);\n    }\n\n    void set_cmdlang_global_err_handler(swig_cb *handler)\n    {\n\tswig_cb_val *old_handler = cmdlang_global_err_handler;\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (valid_swig_cb(handler, global_cmdlang_err))\n\t    cmdlang_global_err_handler = ref_swig_cb(handler,\n\t\t\t\t\t\t     global_cmdlang_err);\n\telse\n\t    cmdlang_global_err_handler = NULL;\n\tif (old_handler)\n\t    deref_swig_cb_val(old_handler);\n\tIPMI_SWIG_C_CB_EXIT\n    }\n\n    void set_cmdlang_event_handler(swig_cb *handler)\n    {\n\tswig_cb_val *old_handler = cmdlang_event_handler;\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (valid_swig_cb(handler, cmdlang_event))\n\t    cmdlang_event_handler = ref_swig_cb(handler, cmdlang_event);\n\telse\n\t    cmdlang_event_handler = NULL;\n\tif (old_handler)\n\t    deref_swig_cb_val(old_handler);\n\tIPMI_SWIG_C_CB_EXIT\n    }\n%}\n\n\n%extend ipmi_cmdlang_t {\n    ~ipmi_cmdlang_t()\n    {\n\tswig_cb_val *handler_val = self->user_data;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (handler_val)\n\t    deref_swig_cb_val(handler_val);\n\tif (self->objstr)\n\t    free(self->objstr);\n\tfree(self);\n\tIPMI_SWIG_C_CB_EXIT\n    }\n\n    /*\n     * Process a command for the command language.\n     */\n    void handle(const char *icmd)\n    {\n\tchar *cmd = strdup(icmd);\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tipmi_cmdlang_handle(self, cmd);\n\tIPMI_SWIG_C_CB_EXIT\n    }\n\n    /* \n     * When outputting, tells if this is help output.\n     */\n    int is_help()\n    {\n\treturn self->help;\n    }\n\n    /* \n     * When outputting, gets the error value, or 0 if there was no\n     * error.\n     */\n    int get_err()\n    {\n\treturn self->err;\n    }\n\n    %newobject get_errstr;\n    /*\n     * If there was an error, get the error string.\n     */\n    char *get_errstr()\n    {\n\treturn strdup(self->errstr);\n    }\n\n    /*\n     * If there was an error, get the object name associated with the error.\n     */\n    %newobject get_objstr;\n    char *get_objstr()\n    {\n\treturn strdup(self->objstr);\n    }\n\n    /*\n     * If there was an error, get the location in the source code\n     * where the error was generated.\n     */\n    %newobject get_location;\n    char *get_location()\n    {\n\treturn strdup(self->location);\n    }\n}\n\n/*\n * A cmdlang event is a series of name/value fields that may be\n * fetched in sequence.\n */\n%extend ipmi_cmdlang_event_t {\n    ~ipmi_cmdlang_event_t()\n    {\n\t/* Nothing to do. */\n    }\n\n    /*\n     * Restart with the first field.\n     */\n    void restart()\n    {\n\tipmi_cmdlang_event_restart(self);\n    }\n\n    /*\n     * Get the values of the next field.  The level is the nesting\n     * level, the type is either \"string\", \"binary\", or \"unicode\", the\n     * name is the name of the field, and value is its value.  binary\n     * and unicode are returned as a string of hex values (0xnn 0xnn ...).\n     */\n    int next_field(unsigned int *level,\n\t\t   const char   **type,\n\t\t   char         **name,\n\t\t   char         **value)\n    {\n\tint rv;\n\tunsigned int len;\n\tchar         *n, *v;\n\tchar         *np, *vp;\n\tenum ipmi_cmdlang_out_types t;\n\tchar         *tp;\n\tint          i;\n\tchar         *s;\n\n\trv = ipmi_cmdlang_event_next_field(self, level, &t, &n, &len, &v);\n\tif (!rv) {\n\t    *type = \"\";\n\t    *name = NULL;\n\t    *value = NULL;\n\t    return rv;\n\t}\n\n\tif (!v)\n\t    v = \"\";\n\n\tnp = strdup(n);\n\tif (!np)\n\t    return ENOMEM;\n\n\tswitch (t) {\n\tcase IPMI_CMDLANG_STRING:\n\t    tp = \"string\";\n\t    vp = strdup(v);\n\t    break;\n\tcase IPMI_CMDLANG_BINARY:\n\t    tp = \"binary\";\n\t    vp = malloc(len * 5);\n\t    if (!vp)\n\t\tbreak;\n\t    s = vp;\n\t    if (len > 0)\n\t\ts += sprintf(s, \"0x%2.2x\", (unsigned char) v[0]);\n\t    for (i=1; i<len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) v[i]);\n\t    break;\n\tcase IPMI_CMDLANG_UNICODE:\n\t    tp = \"unicode\";\n\t    vp = malloc(len * 5);\n\t    if (!vp)\n\t\tbreak;\n\t    s = vp;\n\t    if (len > 0)\n\t\ts += sprintf(s, \"0x%2.2x\", (unsigned char) v[0]);\n\t    for (i=1; i<len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", (unsigned char) v[i]);\n\t    break;\n\tdefault:\n\t    free(np);\n\t    return EINVAL;\n\t}\n\n\tif (!vp) {\n\t    free(np);\n\t    return ENOMEM;\n\t}\n\n\t*name = np;\n\t*value = vp;\n\t*type = tp;\n\n\treturn 1;\n    }\n}\n\n%{\nstatic char *sol_state_string(int val)\n{\n    switch (val) {\n    case ipmi_sol_state_closed:\n\treturn \"closed\";\n    case ipmi_sol_state_connecting:\n\treturn \"connecting\";\n    case ipmi_sol_state_connected:\n\treturn \"connected\";\n    case ipmi_sol_state_connected_ctu:\n\treturn \"connected no char xfer\";\n    case ipmi_sol_state_closing:\n\treturn \"closing\";\n    default:\n\treturn \"unknown\";\n    }\n}\n%}\nchar *sol_state_string(int val);\n\n%extend ipmi_sol_conn_t\n{\n    ~ipmi_sol_conn_t()\n    {\n\tipmi_sol_free(self);\n    }\n\n%constant int sol_state_closed = ipmi_sol_state_closed;\n%constant int sol_state_connecting = ipmi_sol_state_connecting;\n%constant int sol_state_connected = ipmi_sol_state_connected;\n%constant int sol_state_connected_ctu = ipmi_sol_state_connected_ctu;\n%constant int sol_state_closing = ipmi_sol_state_closing;\n\n    void set_ACK_timeout(int timeout_usec)\n    {\n\tipmi_sol_set_ACK_timeout(self, timeout_usec);\n    }\n\n    int get_ACK_timeout()\n    {\n\treturn ipmi_sol_get_ACK_timeout(self);\n    }\n\n    void set_ACK_retries(int retries)\n    {\n\tipmi_sol_set_ACK_retries(self, retries);\n    }\n\n    int get_ACK_retries()\n    {\n\treturn ipmi_sol_get_ACK_retries(self);\n    }\n\n    int set_use_authentication(int use_authentication)\n    {\n\treturn ipmi_sol_set_use_authentication(self, use_authentication);\n    }\n\n    int get_use_authentication()\n    {\n\treturn ipmi_sol_get_use_authentication(self);\n    }\n\n    int set_use_encryption(int use_encryption)\n    {\n\treturn ipmi_sol_set_use_encryption(self, use_encryption);\n    }\n\n    int get_use_encryption()\n    {\n\treturn ipmi_sol_get_use_encryption(self);\n    }\n\n\n%constant int sol_serial_alerts_fail = ipmi_sol_serial_alerts_fail;\n%constant int sol_serial_alerts_deferred = ipmi_sol_serial_alerts_deferred;\n%constant int sol_serial_alerts_succeed = ipmi_sol_serial_alerts_succeed;\n\n    int set_shared_serial_alert_behavior(int behavior)\n    {\n\treturn ipmi_sol_set_shared_serial_alert_behavior(self, behavior);\n    }\n\n    int get_shared_serial_alert_behavior()\n    {\n\treturn ipmi_sol_get_shared_serial_alert_behavior(self);\n    }\n\n    int set_deassert_CTS_DCD_DSR_on_connect(int assert)\n    {\n\treturn ipmi_sol_set_deassert_CTS_DCD_DSR_on_connect(self, assert);\n    }\n\n    int get_deassert_CTS_DCD_DSR_on_connect()\n    {\n\treturn ipmi_sol_get_deassert_CTS_DCD_DSR_on_connect(self);\n    }\n\n\n%constant int SOL_BIT_RATE_DEFAULT = IPMI_SOL_BIT_RATE_DEFAULT;\n%constant int SOL_BIT_RATE_9600 = IPMI_SOL_BIT_RATE_9600;\n%constant int SOL_BIT_RATE_19200 = IPMI_SOL_BIT_RATE_19200;\n%constant int SOL_BIT_RATE_38400 = IPMI_SOL_BIT_RATE_38400;\n%constant int SOL_BIT_RATE_57600 = IPMI_SOL_BIT_RATE_57600;\n%constant int SOL_BIT_RATE_115200 = IPMI_SOL_BIT_RATE_115200;\n\n    int set_bit_rate(unsigned int rate)\n    {\n\treturn ipmi_sol_set_bit_rate(self, rate);\n    }\n\n    unsigned int get_bit_rate()\n    {\n\treturn ipmi_sol_get_bit_rate(self);\n    }\n\n\n    int open()\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = ipmi_sol_open(self);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    int close()\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = ipmi_sol_close(self);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    int force_close()\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = ipmi_sol_force_close(self);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Write the given buffer to the serial port.  When complete, the\n     * sol_write_complete method of the handler will be called with\n     * the following parameters: <self> <conn> <error>\n     */\n    int write(charbuf buf, swig_cb *handler = NULL)\n    {\n\tipmi_sol_transmit_complete_cb cb = NULL;\n\tswig_cb_val                   *handler_val = NULL;\n\tint                           rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_write_complete)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_write_complete_cb;\n\t    handler_val = ref_swig_cb(handler, sol_write_complete);\n\t}\n\trv = ipmi_sol_write(self, buf.val, buf.len, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * For every NACK returned from the receive routine, this function\n     * must be called to release the NACK.\n     */\n    int release_nack()\n    {\n\tint rv;\n\tIPMI_SWIG_C_CB_ENTRY\n\trv = ipmi_sol_release_nack(self);\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Send a break to the serial port.  When complete, the\n     * sol_send_break method of the handler will be called with\n     * the following parameters: <self> <conn> <error>\n     */\n    int send_break(swig_cb *handler = NULL)\n    {\n\tipmi_sol_transmit_complete_cb cb = NULL;\n\tswig_cb_val                   *handler_val = NULL;\n\tint                           rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_send_break)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_send_break_cb;\n\t    handler_val = ref_swig_cb(handler, sol_send_break);\n\t}\n\trv = ipmi_sol_send_break(self, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Send CTS assertable (or not) on the serial port.  When\n     * complete, the sol_set_CTS_assertable method of the handler will\n     * be called with the following parameters: <self> <conn> <error>\n     */\n    int set_CTS_assertable(int asserted, swig_cb *handler = NULL)\n    {\n\tipmi_sol_transmit_complete_cb cb = NULL;\n\tswig_cb_val                   *handler_val = NULL;\n\tint                           rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_set_CTS_assertable)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_set_CTS_assertable_cb;\n\t    handler_val = ref_swig_cb(handler, sol_set_CTS_assertable);\n\t}\n\trv = ipmi_sol_set_CTS_assertable(self, asserted, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Assert or deassert DCD and DSR on the serial port.  When\n     * complete, the sol_set_DCD_DSR_asserted method of the handler\n     * will be called with the following parameters: <self> <conn>\n     * <error>\n     */\n    int set_DCD_DSR_asserted(int asserted, swig_cb *handler = NULL)\n    {\n\tipmi_sol_transmit_complete_cb cb = NULL;\n\tswig_cb_val                   *handler_val = NULL;\n\tint                           rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_set_DCD_DSR_asserted)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_set_DCD_DSR_asserted_cb;\n\t    handler_val = ref_swig_cb(handler, sol_set_DCD_DSR_asserted);\n\t}\n\trv = ipmi_sol_set_DCD_DSR_asserted(self, asserted, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Assert or deassert RI on the serial port.  When complete, the\n     * sol_set_RI_asserted method of the handler will be called with\n     * the following parameters: <self> <conn> <error>\n     */\n    int set_RI_asserted(int asserted, swig_cb *handler = NULL)\n    {\n\tipmi_sol_transmit_complete_cb cb = NULL;\n\tswig_cb_val                   *handler_val = NULL;\n\tint                           rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_set_RI_asserted)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_set_RI_asserted_cb;\n\t    handler_val = ref_swig_cb(handler, sol_set_RI_asserted);\n\t}\n\trv = ipmi_sol_set_RI_asserted(self, asserted, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n\n%constant int SOL_BMC_TRANSMIT_QUEUE = IPMI_SOL_BMC_TRANSMIT_QUEUE;\n%constant int SOL_BMC_RECEIVE_QUEUE = IPMI_SOL_BMC_RECEIVE_QUEUE;\n%constant int SOL_MANAGEMENT_CONSOLE_TRANSMIT_QUEUE = IPMI_SOL_MANAGEMENT_CONSOLE_TRANSMIT_QUEUE;\n%constant int SOL_MANAGEMENT_CONSOLE_RECEIVE_QUEUE = IPMI_SOL_MANAGEMENT_CONSOLE_RECEIVE_QUEUE;\n%constant int SOL_BMC_QUEUES = IPMI_SOL_BMC_QUEUES;\n%constant int SOL_MANAGEMENT_CONSOLE_QUEUES = IPMI_SOL_MANAGEMENT_CONSOLE_QUEUES;\n%constant int SOL_ALL_QUEUES = IPMI_SOL_ALL_QUEUES;\n\n    /*\n     * Flush the given queues, as specified by the queue selectors\n     * above.  When complete, the sol_flush_complete method of the\n     * handler will be called with the following parameters: <self>\n     * <conn> <queue selectors> <error>\n     */\n    int flush(int queue_selectors, swig_cb *handler = NULL)\n    {\n\tipmi_sol_flush_complete_cb cb = NULL;\n\tswig_cb_val                *handler_val = NULL;\n\tint                        rv;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, sol_flush_complete)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    cb = sol_flush_complete_cb;\n\t    handler_val = ref_swig_cb(handler, sol_flush_complete);\n\t}\n\trv = ipmi_sol_flush(self, queue_selectors, cb, handler_val);\n\tif (rv && handler_val)\n\t    deref_swig_cb_val(handler_val);\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n}\n\n%extend ipmi_solparm_t {\n    ~ipmi_solparm_t()\n    {\n\tipmi_solparm_deref(self);\n    }\n\n    %newobject get_mc_id;\n    ipmi_mcid_t *get_mc_id()\n    {\n\tipmi_mcid_t *rv = malloc(sizeof(*rv));\n\tif (rv)\n\t    *rv = ipmi_solparm_get_mc_id(self);\n\treturn rv;\n    }\n\n    int get_channel()\n    {\n\treturn ipmi_solparm_get_channel(self);\n    }\n\n%constant int SOLPARM_SET_IN_PROGRESS = IPMI_SOLPARM_SET_IN_PROGRESS;\n%constant int SOLPARM_ENABLE = IPMI_SOLPARM_ENABLE;\n%constant int SOLPARM_AUTHENTICATION = IPMI_SOLPARM_AUTHENTICATION;\n%constant int SOLPARM_CHAR_SETTINGS = IPMI_SOLPARM_CHAR_SETTINGS;\n%constant int SOLPARM_RETRY = IPMI_SOLPARM_RETRY;\n%constant int SOLPARM_NONVOLATILE_BITRATE = IPMI_SOLPARM_NONVOLATILE_BITRATE;\n%constant int SOLPARM_VOLATILE_BITRATE = IPMI_SOLPARM_VOLATILE_BITRATE;\n%constant int SOLPARM_PAYLOAD_CHANNEL = IPMI_SOLPARM_PAYLOAD_CHANNEL;\n%constant int SOLPARM_PAYLOAD_PORT_NUMBER = IPMI_SOLPARM_PAYLOAD_PORT_NUMBER;\n\n    /*\n     * Fetch an individual parm from the MC.  The parameter (parm1) ,\n     * and set (parm2) and block (parm3) are specified, along with a\n     * handler (parm4).  The solparm_got_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <solparm> <err> <parm_rev> <data1> [<data2> ...]\n     */\n    int get_parm(int parm, int set, int block, swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, solparm_got_parm_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, solparm_got_parm_cb);\n\t    ipmi_solparm_ref(self);\n\t    rv = ipmi_solparm_get_parm(self, parm, set, block,\n\t\t\t\t       solparm_get_parm, handler_val);\n\t    if (rv) {\n\t\tipmi_solparm_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1),\n     * and string value (parm2) is specified, along with an optional\n     * handler (parm3).  The solparm_set_parm_cb method on the handler\n     * will be called when the the operation completes with the\n     * following parms: <self> <solparm> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm(int parm, char *value, swig_cb *handler = NULL)\n    {\n\tint           rv;\n\tswig_cb_val   *handler_val = NULL;\n\tunsigned char *data;\n\tunsigned int  length;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tdata = parse_raw_str_data(value, &length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, solparm_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, solparm_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_solparm_ref(self);\n\trv = ipmi_solparm_set_parm(self, parm, data, length,\n\t\t\t\t   solparm_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_solparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Set an individual parm on the MC.  The parameter (parm1), and\n     * an array of integers (parm2) is specified, along with an\n     * optional handler (parm3).  The solparm_set_parm_cb method on\n     * the handler will be called when the the operation completes\n     * with the following parms: <self> <solparm> <err>.\n     *\n     * The string value is in the form \"0xNN 0xNN ...\", basically\n     * a string of integer values.\n     */\n    int set_parm_array(int parm, intarray value, swig_cb *handler = NULL)\n    {\n\tint           rv;\n\tswig_cb_val   *handler_val = NULL;\n\tunsigned char *data;\n\tunsigned int  length = value.len;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (length == 0)\n\t    data = malloc(1);\n\telse\n\t    data = malloc(length);\n\tif (!data) {\n\t    rv = ENOMEM;\n\t    goto out_err;\n\t}\n\tparse_ipmi_data(value, data, length, &length);\n\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, solparm_set_parm_cb)) {\n\t\tfree(data);\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, solparm_set_parm_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_solparm_ref(self);\n\trv = ipmi_solparm_set_parm(self, parm, data, length,\n\t\t\t\t   solparm_set_parm, handler_val);\n\tfree(data);\n\tif (rv && handler_val) {\n\t    ipmi_solparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Get the full standard configuration for the solparms.  When\n     * done, the solparm_got_config_cb method will be called on the\n     * handler (first parm) with the following parms: <self> <solparm>\n     * <err> <solconfig>.  The solconfig will be an object of type\n     * ipmi_sol_config_t.\n     */\n    int get_config(swig_cb *handler)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!valid_swig_cb(handler, solparm_got_config_cb))\n\t    rv = EINVAL;\n\telse {\n\t    handler_val = ref_swig_cb(handler, solparm_got_config_cb);\n\n\t    ipmi_solparm_ref(self);\n\t    rv = ipmi_sol_get_config(self, solparm_get_config, handler_val);\n\t    if (rv) {\n\t\tipmi_solparm_deref(self);\n\t\tderef_swig_cb_val(handler_val);\n\t    }\n\t}\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n\t\n    }\n\n    /*\n     * Set the full standard configuration for the solparms.  The\n     * config to set is the first parm of type ipmi_sol_config_t.  When\n     * done, the solparm_set_config_cb method will be called on the\n     * handler (second parm) with the following parms: <self>\n     * <solparm> <err>.\n     */\n    int set_config(ipmi_sol_config_t *config, swig_cb *handler = NULL)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, solparm_set_config_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, solparm_set_config_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_solparm_ref(self);\n\trv = ipmi_sol_set_config(self, config,\n\t\t\t\t solparm_set_config, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_solparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n\n    /*\n     * Unlock the lock for the solparm.  The config to set is the\n     * first parm of type ipmi_sol_config_t and may be undefined\n     * (meaning that the MC of the solparm will be unlocked).  If the\n     * config is supplied, it will be marked as unlocked.  When done,\n     * the solparm_clear_lock_cb method will be called on the handler\n     * (second parm) with the following parms: <self> <solparm> <err>.\n     */\n    int clear_lock(ipmi_sol_config_t *config = NULL, swig_cb *handler = NULL)\n    {\n\tint         rv;\n\tswig_cb_val *handler_val = NULL;\n\n\tIPMI_SWIG_C_CB_ENTRY\n\tif (!nil_swig_cb(handler)) {\n\t    if (! valid_swig_cb(handler, solparm_clear_lock_cb)) {\n\t\trv = EINVAL;\n\t\tgoto out_err;\n\t    }\n\t    handler_val = ref_swig_cb(handler, solparm_clear_lock_cb);\n\t}\n\n\tif (handler_val)\n\t    ipmi_solparm_ref(self);\n\trv = ipmi_sol_clear_lock(self, config,\n\t\t\t\t solparm_clear_lock, handler_val);\n\tif (rv && handler_val) {\n\t    ipmi_solparm_deref(self);\n\t    deref_swig_cb_val(handler_val);\n\t}\n    out_err:\n\tIPMI_SWIG_C_CB_EXIT\n\treturn rv;\n    }\n}\n\n%extend ipmi_sol_config_t {\n    ~ipmi_sol_config_t()\n    {\n\tipmi_sol_free_config(self);\n    }\n\n    /*\n     * Get a value from the solconfig.  The first parameter is the\n     * parm number, the second is the parm index (which is a pointer\n     * to an integer).  The returned value will be undefined if\n     * an error occurred, it will be of the format:\n     *   \"<name> <type> <data>\"\n     * The type and data will not be present if the data value is not\n     * supported or the index is out of range, but the name will still\n     * be present.\n     *\n     * The supports types are: integer, bool, data, ip, and mac.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for ip is an IP address in the form\n     * \"n.n.n.n\".  Data for mac is a mac address in the form\n     * \"nn:nn:nn:nn:nn:nn\"\n     *\n     * The second parameter (the index) is zero based and should be\n     * set to zero when fetching an index for the first time.  It will\n     * be unchanged if the data item does not support multiple items.\n     * If it does support multiple items, then the number will be\n     * changed to the next supported value, or to -1 if this is the\n     * last item.\n     *\n     * Be careful with the index, it must be a number, not something\n     * that can be interpreted to a number.  If necessary, in perl,\n     * you must do $idx = int($idx) in some cases.\n     */\n    %newobject get_val;\n    char *get_val(int parm, int *index)\n    {\n\tenum ipmi_solconf_val_type_e valtype;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\tconst char        *name;\n\tchar              dummy[1];\n\tchar              *str = NULL, *s;\n\tint               rv;\n\tint               i;\n\tunsigned int      len;\n\n\trv = ipmi_solconfig_get_val(self, parm, &name, index, &valtype,\n\t\t\t\t    &ival, &dval, &dval_len);\n\tif ((rv == ENOSYS) || (rv == E2BIG))\n\t    return strdup(name);\n\telse if (rv)\n\t    return NULL;\n\n\tswitch (valtype) {\n\tcase IPMI_SOLCONFIG_INT:\n\t    len = snprintf(dummy, 1, \"%s integer %d\", name, ival);\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s integer %d\", name, ival);\n\t    break;\n\t    \n\tcase IPMI_SOLCONFIG_BOOL:\n\t    len = snprintf(dummy, 1, \"%s bool %s\", name,\n\t\t\t   ival ? \"true\" : \"false\");\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s bool %s\", name, \n\t\t    ival ? \"true\" : \"false\");\n\t    break;\n\t    \n\tcase IPMI_SOLCONFIG_DATA:\n\t    len = snprintf(dummy, 1, \"%s data\", name);\n\t    len += dval_len * 5;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s data\", name);\n\t    for (i=0; i<dval_len; i++)\n\t\ts += sprintf(s, \" 0x%2.2x\", dval[i]);\n\t    break;\n\n\tcase IPMI_SOLCONFIG_IP:\n\t    len = snprintf(dummy, 1, \"%s ip\", name);\n\t    len += 4 * 4; /* worst case */\n\t    str = malloc(len + 1);\n\t    sprintf(str, \"%s ip %d.%d.%d.%d\", name,\n\t\t    dval[0], dval[1], dval[2], dval[3]);\n\t    break;\n\n\tcase IPMI_SOLCONFIG_MAC:\n\t    len = snprintf(dummy, 1, \"%s mac\", name);\n\t    len += 6 * 3;\n\t    str = malloc(len + 1);\n\t    s = str;\n\t    s += sprintf(s, \"%s mac \", name);\n\t    for (i=0; i<5; i++)\n\t\ts += sprintf(s, \"%2.2x:\", dval[i]);\n\t    sprintf(s, \"%2.2x\", dval[i]);\n\t    break;\n\t}\n\n\tif (dval)\n\t    ipmi_solconfig_data_free(dval);\n\n\treturn str;\n    }\n\n    /*\n     * Set a value in the solconfig.  The first parameter is the parm\n     * number, the second is the parm index.  The type is a string\n     * in the third parm.  The data is the fourth parm.\n     *\n     * The supports types are: integer, bool, data, ip, and mac.  The\n     * data for an integer is a number.  The data for a bool is true\n     * or false.  The data for ip is an IP address in the form\n     * \"n.n.n.n\".  Data for mac is a mac address in the form\n     * \"nn.nn.nn.nn.nn.nn\"\n     *\n     * The index is ignored for types that do not use it.\n     */\n    int set_val(int parm, int idx, char *type, char *value) {\n\tenum ipmi_solconf_val_type_e valtype;\n\tint               rv;\n\tunsigned int      ival = 0;\n\tunsigned char     *dval = NULL;\n\tunsigned int      dval_len = 0;\n\n\trv = ipmi_solconfig_parm_to_type(parm, &valtype);\n\tif (rv)\n\t    return rv;\n\n\tswitch (valtype) {\n\tcase IPMI_SOLCONFIG_INT:\n\t{\n\t    char *endstr;\n\t    if (strcmp(type, \"integer\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (*value == '\\0')\n\t\treturn EINVAL;\n\t    ival = strtol(value, &endstr, 0);\n\t    if (*endstr != '\\0')\n\t\treturn EINVAL;\n\t    break;\n\t}\n\t    \n\tcase IPMI_SOLCONFIG_BOOL:\n\t    if (strcmp(type, \"bool\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    if (strcasecmp(value, \"true\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"false\") == 0)\n\t\tival = 0;\n\t    else if (strcasecmp(value, \"on\") == 0)\n\t\tival = 1;\n\t    else if (strcasecmp(value, \"off\") == 0)\n\t\tival = 0;\n\t    else\n\t\treturn EINVAL;\n\t    break;\n\t    \n\tcase IPMI_SOLCONFIG_DATA:\n\t    if (strcmp(type, \"data\") != 0)\n\t\treturn EINVAL;\n\t    if (!value)\n\t\treturn EINVAL;\n\t    dval = parse_raw_str_data(value, &dval_len);\n\t    if (!dval)\n\t\treturn ENOMEM;\n\t    break;\n\n\tcase IPMI_SOLCONFIG_IP:\n\t    {\n\t\tstruct in_addr addr;\n\t\tif (strcmp(type, \"ip\") != 0)\n\t\t    return EINVAL;\n\t\trv = parse_ip_addr(value, &addr);\n\t\tif (rv)\n\t\t    return rv;\n\t\tdval = malloc(4);\n\t\tmemcpy(dval, &addr.s_addr, 4);\n\t\tdval_len = 4;\n\t    }\n\t    break;\n\n\tcase IPMI_SOLCONFIG_MAC:\n\t    if (strcmp(type, \"mac\") != 0)\n\t\treturn EINVAL;\n\t    dval = malloc(6);\n\t    rv = parse_mac_addr(value, dval);\n\t    if (rv) {\n\t\tfree(dval);\n\t\treturn rv;\n\t    }\n\t    dval_len = 6;\n\t    break;\n\t}\n\n\trv = ipmi_solconfig_set_val(self, parm, idx, ival, dval, dval_len);\n\tif (dval)\n\t    free(dval);\n\treturn rv;\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/lanserv/config.c": "/*\n * config.c\n *\n * MontaVista IPMI code for reading lanserv configuration files.\n *\n * Author: MontaVista Software, Inc.\n *         Corey Minyard <minyard@mvista.com>\n *         source@mvista.com\n *\n * Copyright 2002,2003,2004,2005,2012 MontaVista Software Inc.\n *\n * This software is available to you under a choice of one of two\n * licenses.  You may choose to be licensed under the terms of the GNU\n * Lesser General Public License (GPL) Version 2 or the modified BSD\n * license below.  The following disclamer applies to both licenses:\n *\n *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED\n *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * GNU Lesser General Public Licence\n *\n *  This program is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public License\n *  as published by the Free Software Foundation; either version 2 of\n *  the License, or (at your option) any later version.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this program; if not, write to the Free\n *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n * Modified BSD Licence\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n *   1. Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.\n *   2. Redistributions in binary form must reproduce the above\n *      copyright notice, this list of conditions and the following\n *      disclaimer in the documentation and/or other materials provided\n *      with the distribution.\n *   3. The name of the author may not be used to endorse or promote\n *      products derived from this software without specific prior\n *      written permission.\n */\n\n#include <config.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n#include <errno.h>\n#include <netdb.h>\n#include <dlfcn.h>\n\n#include <OpenIPMI/serv.h>\n#include <OpenIPMI/lanserv.h>\n#include <OpenIPMI/serserv.h>\n#include <OpenIPMI/ipmbserv.h>\n#include <OpenIPMI/persist.h>\n\nvoid\nread_persist_users(sys_data_t *sys)\n{\n    unsigned int i, j;\n\n    for (i = 0; i < IPMI_MAX_MCS; i++) {\n\tlmc_data_t *mc = sys->ipmb_addrs[i];\n\tuser_t *users;\n\tpersist_t *p;\n\tlong iv;\n\n\tif (!mc)\n\t    continue;\n\n\tp = read_persist(\"users.mc%2.2x\", ipmi_mc_get_ipmb(mc));\n\tif (!p)\n\t    continue;\n\n\tusers = ipmi_mc_get_users(mc);\n\tfor (j = 0; j <= MAX_USERS; j++) {\n\t    void *data;\n\t    unsigned int len;\n\n\t    if (!read_persist_int(p, &iv, \"%d.valid\", j))\n\t\tusers[j].valid = iv;\n\t    if (!read_persist_int(p, &iv, \"%d.link_auth\", j))\n\t\tusers[j].link_auth = iv;\n\t    if (!read_persist_int(p, &iv, \"%d.cb_only\", j))\n\t\tusers[j].cb_only = iv;\n\t    if (!read_persist_data(p, &data, &len, \"%d.username\", j)) {\n\t\tif (len == sizeof(users[j].username))\n\t\t    memcpy(users[j].username, data, len);\n\t\tfree_persist_data(data);\n\t    }\n\t    if (!read_persist_data(p, &data, &len, \"%d.passwd\", j)) {\n\t\tif (len == sizeof(users[j].pw))\n\t\t    memcpy(users[j].pw, data, len);\n\t\tfree_persist_data(data);\n\t    }\n\t    if (!read_persist_int(p, &iv, \"%d.privilege\", j))\n\t\tusers[j].privilege = iv;\n\t    if (!read_persist_int(p, &iv, \"%d.max_sessions\", j))\n\t\tusers[j].max_sessions = iv;\n\t}\n\tfree_persist(p);\n    }\n}\n\nint\nwrite_persist_users(sys_data_t *sys)\n{\n    unsigned int i, j;\n\n    for (i = 0; i < IPMI_MAX_MCS; i++) {\n\tlmc_data_t *mc = sys->ipmb_addrs[i];\n\tuser_t *users;\n\tpersist_t *p;\n\n\tif (!mc || !ipmi_mc_users_changed(mc))\n\t    continue;\n\n\tp = alloc_persist(\"users.mc%2.2x\", ipmi_mc_get_ipmb(mc));\n\tif (!p)\n\t    return ENOMEM;\n\n\tusers = ipmi_mc_get_users(mc);\n\tfor (j = 0; j <= MAX_USERS; j++) {\n\t    add_persist_int(p, users[j].valid, \"%d.valid\", j);\n\t    add_persist_int(p, users[j].link_auth, \"%d.link_auth\", j);\n\t    add_persist_int(p, users[j].cb_only, \"%d.cb_only\", j);\n\t    add_persist_data(p, users[j].username, sizeof(users[j].username),\n\t\t\t     \"%d.username\", j);\n\t    add_persist_data(p, users[j].pw, sizeof(users[j].pw),\n\t\t\t     \"%d.passwd\", j);\n\t    add_persist_int(p, users[j].privilege, \"%d.privilege\", j);\n\t    add_persist_int(p, users[j].max_sessions, \"%d.max_sessions\", j);\n\t}\n\twrite_persist(p);\n\tfree_persist(p);\n    }\n    return 0;\n}\n\nstruct variable {\n    char *name;\n    char *value;\n    struct variable *next;\n} *vars;\n\n/*\n *\n */\nint\nadd_variable(const char *name, char *value)\n{\n    struct variable *var = vars, *last = NULL;\n\n    while (var) {\n\tif (strcmp(name, var->name) == 0)\n\t    break;\n\tlast = var;\n\tvar = var->next;\n    }\n    if (var) {\n\tfree(var->value);\n    } else {\n\tvar = malloc(sizeof(*var));\n\tif (!var)\n\t    return ENOMEM;\n\tvar->name = strdup(name);\n\tif (!var->name) {\n\t    free(var);\n\t    return ENOMEM;\n\t}\n\tvar->next = NULL;\n\tif (last)\n\t    last->next = var;\n\telse\n\t    vars = var;\n    }\n    \n    var->value = value;\n    if (!var->value)\n\treturn ENOMEM;\n\n    return 0;\n}\n\nconst char\n*find_variable(const char *name)\n{\n    struct variable *var = vars;\n    while (var) {\n\tif (strcmp(name, var->name) == 0)\n\t    break;\n\tvar = var->next;\n    }\n    if (!var)\n\treturn NULL;\n    return var->value;\n}\n\n/*\n * To parse more complex expressions, we really need to know what the\n * save state is.  So we, unfortunately, have to create our own\n * version of strtok so we know what it is.\n */\nconst char *\nmystrtok(char *str, const char *delim, char **next)\n{\n    char *pos;\n    char *curr;\n\n    if (str)\n\tcurr = str;\n    else\n\tcurr = *next;\n\n    /* Skip initial delimiters. */\n    for (;;) {\n\tconst char *c = delim;\n\tif (*curr == '\\0') {\n\t    *next = curr;\n\t    return NULL;\n\t}\n\n\twhile (*c != '\\0') {\n\t    if (*c == *curr)\n\t\tbreak;\n\t    c++;\n\t}\n\tif (*c == '\\0')\n\t    break;\n\tcurr++;\n    }\n\n    pos = curr;\n    /* Now collect until there is a delimiter. */\n    for (;;) {\n\tconst char *c = delim;\n\tif (*curr == '\\0') {\n\t    *next = curr;\n\t    goto out;\n\t}\n\twhile (*c != '\\0') {\n\t    if (*c == *curr) {\n\t\t*curr = '\\0';\n\t\t*next = curr + 1;\n\t\tgoto out;\n\t    }\n\t    c++;\n\t}\n\tcurr++;\n    }\n out:\n    if (*pos == '$')\n\treturn find_variable(pos + 1);\n    else\n\treturn pos;\n}\n\nint\nisquote(char c)\n{\n    return c == '\\'' || c == '\"';\n}\n\nint\nget_delim_str(char **rtokptr, char **rval, const char **err)\n{\n    char *tokptr = *rtokptr;\n    char endc;\n    char *rv = NULL;\n\n    while (isspace(*tokptr))\n\ttokptr++;\n    if (*tokptr == '\\0') {\n\t*err = \"missing string value\";\n\treturn -1;\n    }\n    for (;;) {\n\tconst char *val;\n\n\tif (*tokptr == '$') {\n\t    char oldc;\n\n\t    tokptr++;\n\t    val = tokptr;\n\t    while (*tokptr && *tokptr != '$' &&\n\t\t   !isspace(*tokptr) && !isquote(*tokptr)) {\n\t\ttokptr++;\n\t    }\n\t    oldc = *tokptr;\n\t    *tokptr = '\\0';\n\t    val = find_variable(val);\n\t    if (!val) {\n\t\tif (rv)\n\t\t    free(rv);\n\t\t*err = \"unable to find variable\";\n\t\treturn -1;\n\t    }\n\t    *tokptr = oldc;\n\t} else if (isquote(*tokptr)) {\n\t    endc = *tokptr;\n\t    tokptr++;\n\t    val = tokptr;\n\t    while (*tokptr != endc) {\n\t\tif (*tokptr == '\\0') {\n\t\t    if (rv)\n\t\t\tfree(rv);\n\t\t    *err = \"End of line in string\";\n\t\t    return -1;\n\t\t}\n\t\ttokptr++;\n\t    }\n\t    *tokptr = '\\0';\n\t    tokptr++;\n\t} else {\n\t    if (rv)\n\t\tfree(rv);\n\t    *err = \"string value must start with '\\\"' or '''\";\n\t    return -1;\n\t}\n\n\tif (rv) {\n\t    char *newrv = malloc(strlen(rv) + strlen(val) + 1);\n\t    if (!newrv) {\n\t\tfree(rv);\n\t\t*err = \"Out of memory copying string\";\n\t\treturn -1;\n\t    }\n\t    strcpy(newrv, rv);\n\t    strcat(newrv, val);\n\t    free(rv);\n\t    rv = newrv;\n\t} else {\n\t    rv = strdup(val);\n\t    if (!rv) {\n\t\t*err = \"Out of memory copying string\";\n\t\treturn -1;\n\t    }\n\t}\n\n\tif (*tokptr == '\\0' || isspace(*tokptr))\n\t    break;\n    }\n    *rtokptr = tokptr;\n    *rval = rv;\n    return 0;\n}\n\nint\nget_bool(char **tokptr, unsigned int *rval, const char **err)\n{\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n    if (!tok) {\n\t*err = \"No boolean value given\";\n\treturn -1;\n    }\n    if (strcasecmp(tok, \"true\") == 0)\n\t*rval = 1;\n    else if (strcasecmp(tok, \"false\") == 0)\n\t*rval = 0;\n    else if (strcasecmp(tok, \"on\") == 0)\n\t*rval = 1;\n    else if (strcasecmp(tok, \"off\") == 0)\n\t*rval = 0;\n    else if (strcasecmp(tok, \"yes\") == 0)\n\t*rval = 1;\n    else if (strcasecmp(tok, \"no\") == 0)\n\t*rval = 0;\n    else if (strcasecmp(tok, \"1\") == 0)\n\t*rval = 1;\n    else if (strcasecmp(tok, \"0\") == 0)\n\t*rval = 0;\n    else {\n\t*err = \"Invalid boolean value, must be 'true', 'on', 'false', or 'off'\";\n\treturn -1;\n    }\n\n    return 0;\n}\n\nint\nget_uint(char **tokptr, unsigned int *rval, const char **err)\n{\n    char *end;\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n    if (!tok) {\n\t*err = \"No integer value given\";\n\treturn -1;\n    }\n\n    *rval = strtoul(tok, &end, 0);\n    if (*end != '\\0') {\n\t*err = \"Invalid integer value\";\n\treturn -1;\n    }\n    return 0;\n}\n\nint\nget_int(char **tokptr, int *rval, const char **err)\n{\n    char *end;\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n    if (!tok) {\n\t*err = \"No integer value given\";\n\treturn -1;\n    }\n\n    *rval = strtol(tok, &end, 0);\n    if (*end != '\\0') {\n\t*err = \"Invalid integer value\";\n\treturn -1;\n    }\n    return 0;\n}\n\nint\nget_uchar(char **tokptr, unsigned char *rval, const char **err)\n{\n    char *end;\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n    if (!tok) {\n\t*err = \"No integer value given\";\n\treturn -1;\n    }\n\n    *rval = strtoul(tok, &end, 0);\n    if (*end != '\\0') {\n\t*err = \"Invalid integer value\";\n\treturn -1;\n    }\n    return 0;\n}\n\nint\nget_priv(char **tokptr, unsigned int *rval, const char **err)\n{\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n    if (!tok) {\n\t*err = \"No privilege specified, must be 'callback', 'user',\"\n\t    \" 'operator', or 'admin'\";\n\treturn -1;\n    }\n    if (strcmp(tok, \"callback\") == 0)\n\t*rval = IPMI_PRIVILEGE_CALLBACK;\n    else if (strcmp(tok, \"user\") == 0)\n\t*rval = IPMI_PRIVILEGE_USER;\n    else if (strcmp(tok, \"operator\") == 0)\n\t*rval = IPMI_PRIVILEGE_OPERATOR;\n    else if (strcmp(tok, \"admin\") == 0)\n\t*rval = IPMI_PRIVILEGE_ADMIN;\n    else {\n\t*err = \"Invalid privilege specified, must be 'callback', 'user',\"\n\t    \" 'operator', or 'admin'\";\n\treturn -1;\n    }\n\n    return 0;\n}\n\nint\nget_auths(char **tokptr, unsigned int *rval, const char **err)\n{\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n    int  val = 0;\n\n    while (tok) {\n\tif (strcmp(tok, \"none\") == 0)\n\t    val |= (1 << IPMI_AUTHTYPE_NONE);\n\telse if (strcmp(tok, \"md2\") == 0)\n\t    val |= (1 << IPMI_AUTHTYPE_MD2);\n\telse if (strcmp(tok, \"md5\") == 0)\n\t    val |= (1 << IPMI_AUTHTYPE_MD5);\n\telse if (strcmp(tok, \"straight\") == 0)\n\t    val |= (1 << IPMI_AUTHTYPE_STRAIGHT);\n\telse {\n\t    *err = \"Invalid authorization type, must be 'none', 'md2',\"\n\t\t\" 'md5', or 'straight'\";\n\t    return -1;\n\t}\n\n\ttok = mystrtok(NULL, \" \\t\\n\", tokptr);\n    }\n\n    *rval = val;\n\n    return 0;\n}\n\nint\nread_bytes(char **tokptr, unsigned char *data, const char **err,\n\t   unsigned int len)\n{\n    const char *tok = mystrtok(NULL, \" \\t\\n\", tokptr);\n    char *end;\n\n    if (!tok) {\n\t*err = \"Missing password or username\";\n\treturn -1;\n    }\n    if (*tok == '\"') {\n\tunsigned int end;\n\t/* Ascii PW */\n\ttok++;\n\tend = strlen(tok) - 1;\n\tif (tok[end] != '\"') {\n\t    *err = \"ASCII password or username doesn't end in '\\\"'\";\n\t    return -1;\n\t}\n\tif (end > (len - 1))\n\t    end = len - 1;\n\tmemcpy(data, tok, end);\n\tdata[end] = '\\0';\n\tzero_extend_ascii(data, len);\n    } else {\n\tunsigned int i;\n\tchar         c[3];\n\t/* HEX pw */\n\tif (strlen(tok) != 32) {\n\t    *err = \"HEX password or username not 32 HEX characters long\";\n\t    return -1;\n\t}\n\tc[2] = '\\0';\n\tfor (i=0; i<len; i++) {\n\t    c[0] = *tok;\n\t    tok++;\n\t    c[1] = *tok;\n\t    tok++;\n\t    data[i] = strtoul(c, &end, 16);\n\t    if (*end != '\\0') {\n\t\t*err = \"Invalid HEX character in password or username\";\n\t\treturn -1;\n\t    }\n\t}\n    }\n\n    return 0;\n}\n\nint\nget_sock_addr(char **tokptr, sockaddr_ip_t *addr, socklen_t *len,\n\t      char *def_port, int socktype, const char **err)\n{\n    const char *s, *p;\n\n    s = mystrtok(NULL, \" \\t\\n\", tokptr);\n    if (!s) {\n\t*err = \"No IP address specified\";\n\treturn -1;\n    }\n    p = mystrtok(NULL, \" \\t\\n\", tokptr);\n\n#ifdef HAVE_GETADDRINFO\n    {\n\tstruct addrinfo     hints, *res0;\n\tint rv;\n\n\tmemset(&hints, 0, sizeof(hints));\n\thints.ai_family = PF_UNSPEC;\n\thints.ai_socktype = socktype;\n\thints.ai_flags = AI_PASSIVE;\n\tif (!p)\n\t    p = def_port;\n\tif (!p) {\n\t    *err = \"No port specified\";\n\t    return -1;\n\t}\n\trv = getaddrinfo(s, p, &hints, &res0);\n\tif (rv) {\n\t    *err = \"getaddrinfo err\";\n\t    return -1;\n\t}\n\tmemcpy(addr, res0->ai_addr, res0->ai_addrlen);\n\t*len = res0->ai_addrlen;\n\tfreeaddrinfo(res0);\n    }\n#else\n    /* System does not support getaddrinfo, just for IPv4*/\n    {\n\tstruct hostent     *ent;\n\tstruct sockaddr_in *paddr;\n        char               *end;\n\n\tent = gethostbyname(s);\n\tif (!ent) {\n\t    *err = \"Invalid IP address specified\";\n\t    return -1;\n\t}\n\n\tpaddr = (struct sockaddr_in *)addr;\n\tpaddr->sin_family = AF_INET;\n\tif (p) {\n\t    paddr->sin_port = htons(strtoul(p, &end, 0));\n\t    if (*end != '\\0') {\n\t        *err = \"Invalid IP port specified\";\n\t        return -1;\n\t    }\n\t} else {\n\t    paddr->sin_port = htons(623);\n\t}\n\t*len = sizeof(struct sockaddr_in);\n    }\n#endif\n    return 0;\n}\n\nstatic int\nget_user(char **tokptr, sys_data_t *sys, const char **err)\n{\n    unsigned int num;\n    unsigned int val;\n    int          rv;\n\n    rv = get_uint(tokptr, &num, err);\n    if (rv)\n\treturn rv;\n\n    if (num > MAX_USERS) {\n\t*err = \"User number larger than the allowed number of users\";\n\treturn -1;\n    }\n\n    rv = get_bool(tokptr, &val, err);\n    if (rv)\n\treturn rv;\n    sys->cusers[num].valid = val;\n\n    rv = read_bytes(tokptr, sys->cusers[num].username, err, 16);\n    if (rv)\n\treturn rv;\n\n    rv = read_bytes(tokptr, sys->cusers[num].pw, err, 20);\n    if (rv)\n\treturn rv;\n\n    rv = get_priv(tokptr, &val, err);\n    if (rv)\n\treturn rv;\n    sys->cusers[num].privilege = val;\n\n    rv = get_uint(tokptr, &val, err);\n    if (rv)\n\treturn rv;\n    sys->cusers[num].max_sessions = val;\n\n    return 0;\n}\n\nstruct dliblist {\n    const char *file;\n    const char *init;\n    void *handle;\n    struct dliblist *next;\n};\n\nstatic struct dliblist *dlibs;\n\nint\nload_dynamic_libs(sys_data_t *sys, int print_version)\n{\n    struct dliblist *dlib = dlibs;\n    int (*func)(sys_data_t *sys, const char *initstr);\n    void *handle;\n    int err;\n\n    while (dlib) {\n\thandle = dlopen(dlib->file, RTLD_NOW | RTLD_GLOBAL);\n\tif (!handle) {\n\t    fprintf(stderr, \"Unable to load dynamic library %s: %s\\n\",\n\t\t    dlib->file, dlerror());\n\t    return EINVAL;\n\t}\n\n\tif (print_version) {\n\t    func = dlsym(handle, \"ipmi_sim_module_print_version\");\n\t    if (func) {\n\t\terr = func(sys, dlib->init);\n\t\tif (err) {\n\t\t    dlclose(handle);\n\t\t    fprintf(stderr, \"Error from module %s version print: %s\\n\",\n\t\t\t    dlib->file, strerror(err));\n\t\t    return EINVAL;\n\t\t}\n\t    }\n\t    dlclose(handle);\n\t} else {\n\t    func = dlsym(handle, \"ipmi_sim_module_init\");\n\t    if (func) {\n\t\terr = func(sys, dlib->init);\n\t\tif (err) {\n\t\t    dlclose(handle);\n\t\t    fprintf(stderr, \"Error from module %s init: %s\\n\",\n\t\t\t    dlib->file, strerror(err));\n\t\t    return EINVAL;\n\t\t}\n\t    }\n\t    dlib->handle = handle;\n\t}\n\tdlib = dlib->next;\n    }\n\n    return 0;\n}\n\nvoid\npost_init_dynamic_libs(sys_data_t *sys)\n{\n    struct dliblist *dlib = dlibs;\n    void (*func)(sys_data_t *sys);\n\n    while (dlib) {\n\tfunc = dlsym(dlib->handle, \"ipmi_sim_module_post_init\");\n\tif (func)\n\t    func(sys);\n\tdlib = dlib->next;\n    }\n}\n\nint\nread_config(sys_data_t *sys,\n\t    char       *config_file,\n\t    int        print_version)\n{\n    FILE         *f = fopen(config_file, \"r\");\n    int          line;\n    unsigned int val;\n    char         buf[MAX_CONFIG_LINE];\n    const char   *tok;\n    char         *tokptr;\n    int          err = 0;\n    const char   *errstr;\n\n    if (!f) {\n\tfprintf(stderr, \"Unable to open configuration file '%s'\\n\",\n\t\tconfig_file);\n\treturn -1;\n    }\n\n    line = 0;\n    while (fgets(buf, sizeof(buf), f) != NULL) {\n\tline++;\n\n\ttok = mystrtok(buf, \" \\t\\n\", &tokptr);\n\tif (!tok || (tok[0] == '#'))\n\t    continue;\n\n\tif (strcmp(tok, \"define\") == 0) {\n\t    const char *varname;\n\t    char *value;\n\n\t    varname = mystrtok(NULL, \" \\t\\n\", &tokptr);\n\t    if (!varname) {\n\t\terr = EINVAL;\n\t\terrstr = \"No variable supplied for define\";\n\t\tgoto next;\n\t    }\n\t    err = get_delim_str(&tokptr, &value, &errstr);\n\t    if (err)\n\t\tgoto next;\n\t    err = add_variable(varname, value);\n\t    if (err) {\n\t\tfree(value);\n\t\terr = ENOMEM;\n\t\terrstr = \"Out of memory\";\n\t\tgoto next;\n\t    }\n\t} else if (strcmp(tok, \"loadlib\") == 0) {\n\t    char *library = NULL, *initstr = NULL;\n\t    struct dliblist *dlib, *dlibp;\n\n\t    err = get_delim_str(&tokptr, &library, &errstr);\n\t    if (!err)\n\t\terr = get_delim_str(&tokptr, &initstr, &errstr);\n\t    if (!err) {\n\t\tdlib = malloc(sizeof(*dlib));\n\t\tif (!dlib) {\n\t\t    err = ENOMEM;\n\t\t    errstr = \"Out of memory\";\n\t\t} else {\n\t\t    dlib->file = library;\n\t\t    dlib->init = initstr;\n\t\t    dlib->next = NULL;\n\t\t    if (!dlibs) {\n\t\t\tdlibs = dlib;\n\t\t    } else {\n\t\t\tdlibp = dlibs;\n\t\t\twhile (dlibp->next)\n\t\t\t    dlibp = dlibp->next;\n\t\t\tdlibp->next = dlib;\n\t\t    }\n\t\t}\n\t    }\n\t    if (err) {\n\t\tif (library)\n\t\t    free((char *) library);\n\t\tif (initstr)\n\t\t    free((char *) initstr);\n\t    }\n\t    goto next;\n\t}\n\n\tif (print_version)\n\t    goto next;\n\n\tif (strcmp(tok, \"startlan\") == 0) {\n\t    err = get_uint(&tokptr, &val, &errstr);\n\t    if (!err && (val >= IPMI_MAX_CHANNELS)) {\n\t\terr = -1;\n\t\terrstr = \"Channel number out of range\";\n\t    }\n\t    if (!err) {\n\t\terr = lanserv_read_config(sys, f, &line, val);\n\t    }\n\t} else if (strcmp(tok, \"user\") == 0) {\n\t    err = get_user(&tokptr, sys, &errstr);\n\t} else if (strcmp(tok, \"ipmb\") == 0) {\n\t    err = ipmbserv_read_config(&tokptr, sys, &errstr);\n\t} else if (strcmp(tok, \"serial\") == 0) {\n\t    err = serserv_read_config(&tokptr, sys, &errstr);\n\t} else if (strcmp(tok, \"sol\") == 0) {\n\t    err = sol_read_config(&tokptr, sys, &errstr);\n\t} else if (strcmp(tok, \"chassis_control\") == 0) {\n\t    char *prog;\n\t    err = get_delim_str(&tokptr, &prog, &errstr);\n\t    if (!err)\n\t\tipmi_set_chassis_control_prog(sys->mc, prog);\n\t} else if (strcmp(tok, \"name\") == 0) {\n\t    err = get_delim_str(&tokptr, &sys->name, &errstr);\n\t} else if (strcmp(tok, \"startcmd\") == 0) {\n\t    if (sys->startcmd)\n\t\terr = get_delim_str(&tokptr, &sys->startcmd->startcmd, &errstr);\n\t} else if (strcmp(tok, \"startnow\") == 0) {\n\t    if (sys->startcmd)\n\t\terr = get_bool(&tokptr, &sys->startcmd->startnow, &errstr);\n\t} else if (strcmp(tok, \"poweroff_wait\") == 0) {\n\t    if (sys->startcmd)\n\t\terr = get_uint(&tokptr, &sys->startcmd->poweroff_wait_time,\n\t\t\t   &errstr);\n\t} else if (strcmp(tok, \"kill_wait\") == 0) {\n\t    if (sys->startcmd)\n\t\terr = get_uint(&tokptr, &sys->startcmd->kill_wait_time, &errstr);\n\t} else if (strcmp(tok, \"set_working_mc\") == 0) {\n\t    unsigned char ipmb;\n\t    err = get_uchar(&tokptr, &ipmb, &errstr);\n\t    if (!err) {\n\t\tlmc_data_t *mc;\n\t\terr = ipmi_mc_alloc_unconfigured(sys, ipmb, &mc);\n\t\tif (err == ENOMEM) {\n\t\t    errstr = \"Out of memory\";\n\t\t    err = -1;\n\t\t} else if (err) {\n\t\t    errstr = \"Invalid IPMB specified\";\n\t\t    err = -1;\n\t\t} else {\n\t\t    sys->mc = mc;\n\t\t    sys->cusers = ipmi_mc_get_users(mc);\n\t\t    sys->chan_set = ipmi_mc_get_channelset(mc);\n\t\t    sys->cpef = ipmi_mc_get_pef(mc);\n\t\t    sys->startcmd = ipmi_mc_get_startcmdinfo(mc);\n\t\t    sys->sol = ipmi_mc_get_sol(mc);\n\t\t}\n\t    }\n\t} else if (strcmp(tok, \"console\") == 0) {\n\t    err = get_sock_addr(&tokptr,\n\t\t\t\t&sys->console_addr, &sys->console_addr_len,\n\t\t\t\tNULL, SOCK_STREAM, &errstr);\n\t} else {\n\t    errstr = \"Invalid configuration option\";\n\t    err = -1;\n\t}\n\n      next:\n\tif (err) {\n\t    fprintf(stderr, \"Error on line %d: %s\\n\", line, errstr);\n\t    break;\n\t}\n    }\n\n    fclose(f);\n\n    if (print_version)\n\tload_dynamic_libs(sys, print_version);\n\n    return err;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/Hyst.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/ComplexHotSwap.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/Thresh.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/IPMI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/MgmtIF.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/BusSystem.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/ManagementController.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/ServerSystem.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/SimpleHotSwap.dia",
        "/tmp/vanessa/spack-stage/spack-stage-openipmi-2.0.28-jpswpgvjhec6qayyuf7lrltta6wwnmty/spack-src/doc/SimpleMonitoring.dia"
    ],
    "total_files": 349
}