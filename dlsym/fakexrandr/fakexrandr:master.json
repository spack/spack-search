{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-fakexrandr-master-o2h3tiyxb7akmuedkhw4hfrliwdasc7v/spack-src/make_skeleton.py": "#!/usr/bin/env python\n# encoding: utf-8\nimport os\nimport re\nimport sys\nimport tempfile\n\nwith tempfile.NamedTemporaryFile(mode=\"w\", suffix='.c') as temp:\n    temp.write(\"#include <X11/extensions/Xrandr.h>\")\n    temp.flush()\n    output = os.popen(\"gcc -E '{}'\".format(temp.name)).read()\n\nccode = open(\"libXrandr.c\").read()\n\nprint(\"\"\"\n/* This file was automatically generated by ./make_skeleton.py */\n#include <X11/extensions/Xrandr.h>\n#include <X11/Xlib.h>\n\"\"\")\n\nfunctions = re.findall(r\"(?m)^(\\w+(?:\\s*\\*+)?)\\s*(XRR\\w+)\\s*\\(([^)]+)\\);\",\n                       output)\n\nfor function in functions:\n    rettype, name, parameters = function\n    parameter_array = re.split(\"\\s*,\\s*\", parameters)\n    call = []\n    actions = []\n    warning = \"\"\n\n    for x in parameter_array:\n        x = x.split()\n        param = x[-1].replace(\"*\", \"\")\n        call.append(param)\n        if param != x[-1]:\n            if x[0] in (\"RRCrtc\", \"RROutput\"):\n                warning = (\"\\033[31mWarning\\033[0m: In {name}: parameter \"\n                    \"{param} unhandled\").format( name=name, param=\" \".join(x))\n            continue\n        if x[0] in (\"RRCrtc\", \"RROutput\"):\n            actions.append(\n                \" {param} = {param} & ~XID_SPLIT_MASK;\".format(param=param))\n\n    if re.search(\"(?<!_){}\".format(name), ccode):\n        print((\"static {ret} (*_{fn})({par_def});\\n\".format(\n            ret=rettype, par_def=\", \".join(parameter_array), fn=name)))\n        continue\n\n    if warning:\n        print >> sys.stderr, warning\n\n    if actions:\n        actions.append(\"\")\n    returnv = \"return \" if rettype.lower() != \"void\" else \"\"\n    print((\"static {ret} (*_{fn})({par_def});\\n\"\n          \"{ret} {fn}({par_def}) {{\\n\"\n          \"{actions}\"\n          \"{returnv}_{fn}({par_call});\\n\"\n          \"}}\\n\\n\").format(\n              ret=rettype,\n              fn=name,\n              returnv=returnv,\n              actions=\"\\n\".join(actions),\n              par_def=\", \".join(parameter_array),\n              par_call=\", \".join(call)\n          ))\n\ndefns = []\nfor function in functions:\n    defns.append(\"_{fn} = dlsym(xrandr_lib, \\\"{fn}\\\")\".format(fn=function[1]))\nprint(\"#define FUNCTION_POINTER_INITIALIZATIONS {defns}\".format(\n    defns=\"; \".join(defns)))\n"
    },
    "skipped": [],
    "total_files": 16
}