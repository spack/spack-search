{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/pthread/pthread_wrap.c": "/****************************************************************************\n **\t\t\tTAU Portable Profiling Package\t\t\t   **\n **\t\t\thttp://www.cs.uoregon.edu/research/tau\t           **\n *****************************************************************************\n **    Copyright 1997  \t\t\t\t\t\t   \t   **\n **    Department of Computer and Information Science, University of Oregon **\n **    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n ****************************************************************************/\n/***************************************************************************\n **\tFile \t\t: pthread_wrap.c\t\t\t\t  **\n **\tDescription \t: TAU Profiling Package RTS Layer definitions     **\n **\t\t\t  for wrapping syscalls like exit                 **\n **\tContact\t\t: tau-team@cs.uoregon.edu \t\t \t  **\n **\tDocumentation\t: See http://www.cs.uoregon.edu/research/tau      **\n ***************************************************************************/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <TAU.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <Profile/TauEnv.h>\n\n#if !defined(__APPLE__)\n#define TAU_PTHREAD_BARRIER_AVAILABLE\n#endif\n\ntypedef void * (*start_routine_p)(void *);\ntypedef int (*pthread_create_p)(pthread_t *, const pthread_attr_t *, start_routine_p, void *arg);\ntypedef void (*pthread_exit_p)(void *);\ntypedef int (*pthread_join_p)(pthread_t, void **);\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\ntypedef int (*pthread_barrier_wait_p)(pthread_barrier_t *);\n#endif\n\nextern int tau_pthread_create_wrapper(pthread_create_p pthread_create_call,\n    pthread_t * threadp, const pthread_attr_t * attr, start_routine_p, void * arg);\nextern int tau_pthread_join_wrapper(pthread_join_p pthread_join_call, pthread_t thread, void **retval);\nextern void tau_pthread_exit_wrapper(pthread_exit_p pthread_exit_call, void * value_ptr);\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nextern int tau_pthread_barrier_wait_wrapper(pthread_barrier_wait_p pthread_barrier_wait_call,\n    pthread_barrier_t * barrier);\n#endif\n\n\n#ifdef TAU_PRELOAD_LIB\n/********************************/\n/* LD_PRELOAD wrapper functions */\n/********************************/\n\n#define RESET_DLERROR() dlerror()\n#define CHECK_DLERROR() { \\\n  char const * err = dlerror(); \\\n  if (err) { \\\n    printf(\"Error getting %s handle: %s\\n\", name, err); \\\n    fflush(stdout); \\\n    exit(1); \\\n  } \\\n}\n\nstatic\nvoid * get_system_function_handle(char const * name, void * caller)\n{\n  char const * err;\n  void * handle;\n\n  // Reset error pointer\n  RESET_DLERROR();\n\n  // Attempt to get the function handle\n  handle = dlsym(RTLD_NEXT, name);\n\n  // Detect errors\n  CHECK_DLERROR();\n\n  // Prevent recursion if more than one wrapping approach has been loaded.\n  // This happens because we support wrapping pthreads three ways at once:\n  // #defines in Profiler.h, -Wl,-wrap on the link line, and LD_PRELOAD.\n  if (handle == caller) {\n    RESET_DLERROR();\n    void * syms = dlopen(NULL, RTLD_NOW);\n    CHECK_DLERROR();\n    do {\n      RESET_DLERROR();\n      handle = dlsym(syms, name);\n      CHECK_DLERROR();\n    } while (handle == caller);\n  }\n\n  return handle;\n}\n\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr,\n    start_routine_p start_routine, void* arg)\n{\n  static pthread_create_p _pthread_create = NULL;\n  if (!_pthread_create) {\n    _pthread_create = (pthread_create_p)get_system_function_handle(\n        \"pthread_create\", (void*)pthread_create);\n  }\n  return tau_pthread_create_wrapper(_pthread_create, thread, attr, start_routine, arg);\n}\n\nint pthread_join(pthread_t thread, void ** retval)\n{\n  static pthread_join_p _pthread_join = NULL;\n  if (!_pthread_join) {\n    _pthread_join = (pthread_join_p)get_system_function_handle(\n        \"pthread_join\", (void*)pthread_join);\n  }\n  return tau_pthread_join_wrapper(_pthread_join, thread, retval);\n}\n\nvoid pthread_exit(void * value_ptr)\n{\n  static pthread_exit_p _pthread_exit = NULL;\n  if (!_pthread_exit) {\n    _pthread_exit = (pthread_exit_p)get_system_function_handle(\n        \"pthread_exit\", (void*)pthread_exit);\n  }\n  tau_pthread_exit_wrapper(_pthread_exit, value_ptr);\n}\n\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nint pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  static pthread_barrier_wait_p _pthread_barrier_wait = NULL;\n  if (!_pthread_barrier_wait) {\n    _pthread_barrier_wait = (pthread_barrier_wait_p)get_system_function_handle(\n        \"pthread_barrier_wait\", (void*)pthread_barrier_wait);\n  }\n  return tau_pthread_barrier_wait_wrapper(_pthread_barrier_wait, barrier);\n}\n#endif /* TAU_PTHREAD_BARRIER_AVAILABLE */\n\n#else // Wrap via the the link line.\n\nint __real_pthread_create(pthread_t *, const pthread_attr_t *, start_routine_p, void *);\nint __wrap_pthread_create(pthread_t * thread, const pthread_attr_t * attr, start_routine_p start_routine, void * arg)\n{\n  return tau_pthread_create_wrapper(__real_pthread_create, thread, attr, start_routine, arg);\n}\n\nint __real_pthread_join(pthread_t, void **);\nint __wrap_pthread_join(pthread_t thread, void **retval)\n{\n  return tau_pthread_join_wrapper(__real_pthread_join, thread, retval);\n}\n\nvoid __real_pthread_exit(void *);\nvoid __wrap_pthread_exit(void * value_ptr)\n{\n  tau_pthread_exit_wrapper(__real_pthread_exit, value_ptr);\n}\n\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nint __real_pthread_barrier_wait(pthread_barrier_t *);\nint __wrap_pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  return tau_pthread_barrier_wait_wrapper(__real_pthread_barrier_wait, barrier);\n}\n#endif /* TAU_PTHREAD_BARRIER_AVAILABLE */\n\n#endif //TAU_PRELOAD_LIB\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/pthread/sys_wrap.c": "/****************************************************************************\n**\t\t\tTAU Portable Profiling Package\t\t\t   **\n**\t\t\thttp://www.cs.uoregon.edu/research/tau\t           **\n*****************************************************************************\n**    Copyright 1997  \t\t\t\t\t\t   \t   **\n**    Department of Computer and Information Science, University of Oregon **\n**    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n****************************************************************************/\n/***************************************************************************\n**\tFile \t\t: sys_wrap.c\t\t\t\t  **\n**\tDescription \t: TAU Profiling Package RTS Layer definitions     **\n**\t\t\t  for wrapping syscalls like exit                 **\n**\tContact\t\t: tau-team@cs.uoregon.edu \t\t \t  **\n**\tDocumentation\t: See http://www.cs.uoregon.edu/research/tau      **\n***************************************************************************/\n\n\n// Include Files \n//////////////////////////////////////////////////////////////////////\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <TAU.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <Profile/TauEnv.h>\n\nextern int Tau_init_check_initialized();\n\n#define dprintf TAU_VERBOSE \n\n#if (defined (TAU_BGP) || defined(TAU_XLC) || defined(__APPLE__))\n#define TAU_DISABLE_SYSCALL_WRAPPER\n#endif /* TAU_BGP || TAU_XLC */\n\nint Tau_wrap_syscalls_checkPassThrough() {\n\t//Do not wrap system calls that occur outside of TAU\n\tif (Tau_init_check_initialized() == 0) {\n\t\treturn 1;\n\t}\n\telse {\n\t\treturn 0;\n\t}\n}\n\n/////////////////////////////////////////////////////////////////////////\n// Define the exit wrapper\n/////////////////////////////////////////////////////////////////////////\n#ifndef TAU_DISABLE_SYSCALL_WRAPPER\nvoid exit(int status) {\n  static void (*_internal_exit) (int status) = NULL;\n\n  int ret;\n  dprintf(\"TAU: Inside tau_wrap.c: exit(): status = %d\\n\", status);\n\n  TAU_PROFILE_EXIT(\"EXITING from TAU...\");\n\n  /* Search for exit */  \n  if (_internal_exit == NULL) {\n    _internal_exit = (void (*) (int status)) dlsym(RTLD_NEXT, \"exit\");\n  }\n\n  dprintf(\"TAU: calling _internal_exit \\n\");\n  _internal_exit(status);\n}\n#endif /* TAU_DISABLE_SYSCALL_WRAPPER */\n\n#ifdef TAU_LINUX\n/////////////////////////////////////////////////////////////////////////\n// Define the exit_group wrapper\n/////////////////////////////////////////////////////////////////////////\nvoid exit_group(int status) {\n  static void (*_internal_exit_group) (int status) = NULL;\n\n  int ret;\n  dprintf(\"TAU: Inside tau_wrap.c: exit_group(): status = %d\\n\", status);\n\n  TAU_PROFILE_EXIT(\"EXIT_GROUPING from TAU...\");\n\n  /* Search for exit_group */  \n  if (_internal_exit_group == NULL) {\n    _internal_exit_group = (void (*) (int status)) dlsym(RTLD_NEXT, \"exit_group\");\n  }\n\n  dprintf(\"TAU: calling _internal_exit_group \\n\");\n  _internal_exit_group(status);\n}\n#endif\n\n/////////////////////////////////////////////////////////////////////////\n// Define the _exit wrapper\n/////////////////////////////////////////////////////////////////////////\nvoid _exit(int status) {\n  static void (*_internal__exit) (int status) = NULL;\n\n  int ret;\n  dprintf(\"TAU: Inside tau_wrap.c: _exit(): status = %d\\n\", status);\n\n  TAU_PROFILE_EXIT(\"_EXITING from TAU...\");\n\n  /* Search for _exit */  \n  if (_internal__exit == NULL) {\n    _internal__exit = (void (*) (int status)) dlsym(RTLD_NEXT, \"_exit\");\n  }\n\n  dprintf(\"TAU: calling _internal__exit \\n\");\n  _internal__exit(status);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// Define the fork wrapper\n/////////////////////////////////////////////////////////////////////////\n#ifndef TAU_DISABLE_SYSCALL_WRAPPER\npid_t fork(void) {\n  static pid_t (*_fork) (void) = NULL;\n\n  pid_t pid_ret;\n  \n\n  if (_fork == NULL) {\n    _fork = (pid_t (*) (void)) dlsym(RTLD_NEXT, \"fork\");\n  }\n\n  pid_ret = _fork();\n\n\tif (Tau_wrap_syscalls_checkPassThrough() == 1) {\n\t\treturn pid_ret;\n\t}\t\n  dprintf(\"TAU: calling _fork \\n\");\n  \n\tif (pid_ret == 0) {\n    TAU_REGISTER_FORK(RtsLayer::getPid(), TAU_EXCLUDE_PARENT_DATA);\n    dprintf (\"[%d] Registered Fork!\\n\", RtsLayer::getPid());\n   \n  }\n  return pid_ret;\n\n}\n#endif /* TAU_DISABLE_SYSCALL_WRAPPER */\n/////////////////////////////////////////////////////////////////////////\n// Define the kill wrapper\n/////////////////////////////////////////////////////////////////////////\n#ifndef TAU_DISABLE_SYSCALL_WRAPPER\nint kill(pid_t pid, int sig) {\n\n  static int (*_kill) (pid_t pid, int sig) = NULL;\n  int ret;\n\n  TAU_PROFILE_TIMER(t,\"sleep inside kill timer\",\"\" ,TAU_DEFAULT);\n  /* Search for kill */  \n  if (_kill == NULL) {\n    _kill = (int (*) (pid_t pid, int sig)) dlsym(RTLD_NEXT, \"kill\");\n  }\n  TAU_VERBOSE(\"TAU Kill Wrapper\");\n  if(sig==SIGKILL||sig==SIGTERM){\n  ret = _kill(pid, SIGUSR1);\n   TAU_PROFILE_START(t);\n   sleep(5);\n   TAU_PROFILE_STOP(t);\n  }\n  else{\n    ret = 0;\n  }\n\n  if(ret == 0) {\n    dprintf(\"TAU: calling _kill \\n\");\n    ret = _kill(pid, sig);\n  }\n\n  return ret;\n}\n#endif /* TAU_DISABLE_SYSCALL_WRAPPER */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/gomp/gomp_wrap.c": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <stdbool.h>\n#include <stdio.h>\n#include \"omp_collector_util.h\"\n#include <stdlib.h>\n#include \"gomp_wrapper_types.h\"\n#include \"TAU.h\"\n#include \"tau_wrapper_declarations.h\"\n\n#ifdef TAU_PRELOAD_LIB\n/**************** this section is for ld preload only ****************** */\n\n#include <dlfcn.h>\n\n#define RESET_DLERROR() dlerror()\n#define CHECK_DLERROR() { \\\n    char const * err = dlerror(); \\\n    if (err) { \\\n        printf(\"Error getting %s handle: %s\\n\", name, err); \\\n        fflush(stdout); \\\n        exit(1); \\\n    } \\\n}\n\n/* so that OpenMP and PTHREAD can both be defined, don't wrap this one\n   if Pthreads is used. */\nstatic void * get_system_function_handle(char const * name, void * caller)\n{\n    char const * err;\n    void * handle;\n\n    // Reset error pointer\n    RESET_DLERROR();\n\n    // Attempt to get the function handle\n    handle = dlsym(RTLD_NEXT, name);\n\n    // Detect errors\n    CHECK_DLERROR();\n\n    // Prevent recursion if more than one wrapping approach has been loaded.\n    // This happens because we support wrapping pthreads three ways at once:\n    // #defines in Profiler.h, -Wl,-wrap on the link line, and LD_PRELOAD.\n    if (handle == caller) {\n        RESET_DLERROR();\n        void * syms = dlopen(NULL, RTLD_NOW);\n        CHECK_DLERROR();\n        do {\n            RESET_DLERROR();\n            handle = dlsym(syms, name);\n            CHECK_DLERROR();\n        } while (handle == caller);\n    }\n\n    return handle;\n}\n\n/**********************************************************\n  pthread_create\n **********************************************************/\n\n// this is here to capture when threads are spawned by GOMP.\n// That is in case we are sampling only, and not capturing\n// ORA events. This way, we can initialize sampling on all threads.\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr,\n    start_routine_p start_routine, void* arg)\n{\n  static pthread_create_p pthread_create_h = NULL;\n  if (pthread_create_h == NULL) {\n    pthread_create_h = (pthread_create_p)get_system_function_handle(\n        \"pthread_create\", (void*)pthread_create);\n  }\n  return tau_gomp_pthread_create_wrapper(pthread_create_h, thread, attr, start_routine, arg);\n}\n\n/**********************************************************\n  omp_set_lock\n **********************************************************/\n\nvoid omp_set_lock(omp_lock_t *lock)  {\n    static omp_set_lock_p omp_set_lock_h = NULL;\n    if (omp_set_lock_h == NULL) {\n        omp_set_lock_h = (omp_set_lock_p)get_system_function_handle(\"omp_set_lock\",(void*)omp_set_lock);\n    }\n    tau_omp_set_lock(omp_set_lock_h, lock);\n}\n\n/**********************************************************\n  omp_set_nest_lock\n **********************************************************/\n\nvoid omp_set_nest_lock(omp_nest_lock_t *nest_lock) {\n    static omp_set_nest_lock_p omp_set_nest_lock_h = NULL;\n    if (omp_set_nest_lock_h == NULL) {\n        omp_set_nest_lock_h = (omp_set_nest_lock_p)get_system_function_handle(\"omp_set_nest_lock\",(void*)omp_set_nest_lock);\n    }\n    tau_omp_set_nest_lock(omp_set_nest_lock_h, nest_lock);\n}\n\n/**********************************************************\n  GOMP_barrier\n **********************************************************/\n\nvoid  GOMP_barrier()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_barrier_p GOMP_barrier_h = NULL;\n    if (GOMP_barrier_h == NULL) {\n        GOMP_barrier_h = (GOMP_barrier_p)get_system_function_handle(\"GOMP_barrier\",(void*)GOMP_barrier);\n    }\n    tau_GOMP_barrier(GOMP_barrier_h);\n    Tau_global_decr_insideTAU();\n}\n\n/**********************************************************\n  GOMP_critical_start\n **********************************************************/\n\nvoid  GOMP_critical_start()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_critical_start_p GOMP_critical_start_h = NULL;\n    if (GOMP_critical_start_h == NULL) {\n        GOMP_critical_start_h = (GOMP_critical_start_p)get_system_function_handle(\"GOMP_critical_start\",(void*)GOMP_critical_start);\n    }\n    tau_GOMP_critical_start(GOMP_critical_start_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_critical_end\n **********************************************************/\n\nvoid  GOMP_critical_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_critical_end_p GOMP_critical_end_h = NULL;\n    if (GOMP_critical_end_h == NULL) {\n        GOMP_critical_end_h = (GOMP_critical_end_p)get_system_function_handle(\"GOMP_critical_end\",(void*)GOMP_critical_end);\n    }\n    tau_GOMP_critical_end(GOMP_critical_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_critical_name_start\n **********************************************************/\n\nvoid  GOMP_critical_name_start(void ** a1)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_critical_name_start_p GOMP_critical_name_start_h = NULL;\n    if (GOMP_critical_name_start_h == NULL) {\n        GOMP_critical_name_start_h = (GOMP_critical_name_start_p)get_system_function_handle(\"GOMP_critical_name_start\",(void*)GOMP_critical_name_start);\n    }\n    tau_GOMP_critical_name_start(GOMP_critical_name_start_h, a1);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_critical_name_end\n **********************************************************/\n\nvoid  GOMP_critical_name_end(void ** a1)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_critical_name_end_p GOMP_critical_name_end_h = NULL;\n    if (GOMP_critical_name_end_h == NULL) {\n        GOMP_critical_name_end_h = (GOMP_critical_name_end_p)get_system_function_handle(\"GOMP_critical_name_end\",(void*)GOMP_critical_name_end);\n    }\n    tau_GOMP_critical_name_end(GOMP_critical_name_end_h, a1);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_atomic_start\n **********************************************************/\n\nvoid  GOMP_atomic_start()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_atomic_start_p GOMP_atomic_start_h;\n    if (GOMP_atomic_start_h == NULL) {\n        GOMP_atomic_start_h = (GOMP_atomic_start_p)get_system_function_handle(\"GOMP_atomic_start\",(void*)GOMP_atomic_start);\n    }\n    tau_GOMP_atomic_start(GOMP_atomic_start_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_atomic_end\n **********************************************************/\n\nvoid  GOMP_atomic_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_atomic_end_p GOMP_atomic_end_h = NULL;\n    if (GOMP_atomic_end_h == NULL) {\n        GOMP_atomic_end_h = (GOMP_atomic_end_p)get_system_function_handle(\"GOMP_atomic_end\",(void*)GOMP_atomic_end);\n    }\n    tau_GOMP_atomic_end(GOMP_atomic_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\n\n/**********************************************************\n  GOMP_loop_static_start\n **********************************************************/\n\nbool  GOMP_loop_static_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_static_start_p GOMP_loop_static_start_h = NULL;\n    if (GOMP_loop_static_start_h == NULL) {\n        GOMP_loop_static_start_h = (GOMP_loop_static_start_p)get_system_function_handle(\"GOMP_loop_static_start\",(void*)GOMP_loop_static_start);\n    }\n    bool retval = tau_GOMP_loop_static_start(GOMP_loop_static_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_dynamic_start\n **********************************************************/\n\nbool  GOMP_loop_dynamic_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_dynamic_start_p GOMP_loop_dynamic_start_h = NULL;\n    if (GOMP_loop_dynamic_start_h == NULL) {\n        GOMP_loop_dynamic_start_h = (GOMP_loop_dynamic_start_p)get_system_function_handle(\"GOMP_loop_dynamic_start\",(void*)GOMP_loop_dynamic_start);\n    }\n    bool retval = tau_GOMP_loop_dynamic_start(GOMP_loop_dynamic_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_guided_start\n **********************************************************/\n\nbool  GOMP_loop_guided_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_guided_start_p GOMP_loop_guided_start_h = NULL;\n    if (GOMP_loop_guided_start_h == NULL) {\n        GOMP_loop_guided_start_h = (GOMP_loop_guided_start_p)get_system_function_handle(\"GOMP_loop_guided_start\",(void*)GOMP_loop_guided_start);\n    }\n    bool retval = tau_GOMP_loop_guided_start(GOMP_loop_guided_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_runtime_start\n **********************************************************/\n\nbool  GOMP_loop_runtime_start(long a1, long a2, long a3, long * a4, long * a5)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_runtime_start_p GOMP_loop_runtime_start_h = NULL;\n    if (GOMP_loop_runtime_start_h == NULL) {\n        GOMP_loop_runtime_start_h = (GOMP_loop_runtime_start_p)get_system_function_handle(\"GOMP_loop_runtime_start\",(void*)GOMP_loop_runtime_start);\n    }\n    bool retval = tau_GOMP_loop_runtime_start(GOMP_loop_runtime_start_h, a1,  a2,  a3,  a4,  a5);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#endif\n\n/**********************************************************\n    Tau_global_incr_insideTAU();\n  GOMP_loop_ordered_static_start\n **********************************************************/\n\nbool  GOMP_loop_ordered_static_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_static_start_p GOMP_loop_ordered_static_start_h = NULL;\n    if (GOMP_loop_ordered_static_start_h == NULL) {\n        GOMP_loop_ordered_static_start_h = (GOMP_loop_ordered_static_start_p)get_system_function_handle(\"GOMP_loop_ordered_static_start\",(void*)GOMP_loop_ordered_static_start);\n    }\n    bool retval = tau_GOMP_loop_ordered_static_start(GOMP_loop_ordered_static_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_dynamic_start\n **********************************************************/\n\nbool  GOMP_loop_ordered_dynamic_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_dynamic_start_p GOMP_loop_ordered_dynamic_start_h = NULL;\n    if (GOMP_loop_ordered_dynamic_start_h == NULL) {\n        GOMP_loop_ordered_dynamic_start_h = (GOMP_loop_ordered_dynamic_start_p)get_system_function_handle(\"GOMP_loop_ordered_dynamic_start\",(void*)GOMP_loop_ordered_dynamic_start);\n    }\n    bool retval = tau_GOMP_loop_ordered_dynamic_start(GOMP_loop_ordered_dynamic_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_guided_start\n **********************************************************/\n\nbool  GOMP_loop_ordered_guided_start(long a1, long a2, long a3, long a4, long * a5, long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_guided_start_p GOMP_loop_ordered_guided_start_h = NULL;\n    if (GOMP_loop_ordered_guided_start_h == NULL) {\n        GOMP_loop_ordered_guided_start_h = (GOMP_loop_ordered_guided_start_p)get_system_function_handle(\"GOMP_loop_ordered_guided_start\",(void*)GOMP_loop_ordered_guided_start);\n    }\n    bool retval = tau_GOMP_loop_ordered_guided_start(GOMP_loop_ordered_guided_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_runtime_start\n **********************************************************/\n\nbool  GOMP_loop_ordered_runtime_start(long a1, long a2, long a3, long * a4, long * a5)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_runtime_start_p GOMP_loop_ordered_runtime_start_h = NULL;\n    if (GOMP_loop_ordered_runtime_start_h == NULL) {\n        GOMP_loop_ordered_runtime_start_h = (GOMP_loop_ordered_runtime_start_p)get_system_function_handle(\"GOMP_loop_ordered_runtime_start\",(void*)GOMP_loop_ordered_runtime_start);\n    }\n    bool retval = tau_GOMP_loop_ordered_runtime_start(GOMP_loop_ordered_runtime_start_h, a1,  a2,  a3,  a4,  a5);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\n\n/**********************************************************\n  GOMP_loop_static_next\n **********************************************************/\n\nbool  GOMP_loop_static_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_static_next_p GOMP_loop_static_next_h = NULL;\n    if (GOMP_loop_static_next_h == NULL) {\n        GOMP_loop_static_next_h = (GOMP_loop_static_next_p)get_system_function_handle(\"GOMP_loop_static_next\",(void*)GOMP_loop_static_next);\n    }\n    bool retval = tau_GOMP_loop_static_next(GOMP_loop_static_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_dynamic_next\n **********************************************************/\n\nbool  GOMP_loop_dynamic_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_dynamic_next_p GOMP_loop_dynamic_next_h = NULL;\n    if (GOMP_loop_dynamic_next_h == NULL) {\n        GOMP_loop_dynamic_next_h = (GOMP_loop_dynamic_next_p)get_system_function_handle(\"GOMP_loop_dynamic_next\",(void*)GOMP_loop_dynamic_next);\n    }\n    bool retval = tau_GOMP_loop_dynamic_next (GOMP_loop_dynamic_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_guided_next\n **********************************************************/\n\nbool  GOMP_loop_guided_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_guided_next_p GOMP_loop_guided_next_h = NULL;\n    if (GOMP_loop_guided_next_h == NULL) {\n        GOMP_loop_guided_next_h = (GOMP_loop_guided_next_p)get_system_function_handle(\"GOMP_loop_guided_next\",(void*)GOMP_loop_guided_next);\n    }\n    bool retval = tau_GOMP_loop_guided_next (GOMP_loop_guided_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_runtime_next\n **********************************************************/\n\nbool  GOMP_loop_runtime_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_runtime_next_p GOMP_loop_runtime_next_h = NULL;\n    if (GOMP_loop_runtime_next_h == NULL) {\n        GOMP_loop_runtime_next_h = (GOMP_loop_runtime_next_p)get_system_function_handle(\"GOMP_loop_runtime_next\",(void*)GOMP_loop_runtime_next);\n    }\n    bool retval = tau_GOMP_loop_runtime_next(GOMP_loop_runtime_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_static_next\n **********************************************************/\n\nbool  GOMP_loop_ordered_static_next(long * a1, long * a2)  {\n    static GOMP_loop_ordered_static_next_p GOMP_loop_ordered_static_next_h = NULL;\n    if (GOMP_loop_ordered_static_next_h == NULL) {\n        GOMP_loop_ordered_static_next_h = (GOMP_loop_ordered_static_next_p)get_system_function_handle(\"GOMP_loop_ordered_static_next\",(void*)GOMP_loop_ordered_static_next);\n    }\n    bool retval = tau_GOMP_loop_ordered_static_next(GOMP_loop_ordered_static_next_h, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_dynamic_next\n **********************************************************/\n\nbool  GOMP_loop_ordered_dynamic_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_dynamic_next_p GOMP_loop_ordered_dynamic_next_h = NULL;\n    if (GOMP_loop_ordered_dynamic_next_h == NULL) {\n        GOMP_loop_ordered_dynamic_next_h = (GOMP_loop_ordered_dynamic_next_p)get_system_function_handle(\"GOMP_loop_ordered_dynamic_next\",(void*)GOMP_loop_ordered_dynamic_next);\n    }\n    bool retval = tau_GOMP_loop_ordered_dynamic_next(GOMP_loop_ordered_dynamic_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_guided_next\n **********************************************************/\n\nbool  GOMP_loop_ordered_guided_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_guided_next_p GOMP_loop_ordered_guided_next_h = NULL;\n    if (GOMP_loop_ordered_guided_next_h == NULL) {\n        GOMP_loop_ordered_guided_next_h = (GOMP_loop_ordered_guided_next_p)get_system_function_handle(\"GOMP_loop_ordered_guided_next\",(void*)GOMP_loop_ordered_guided_next);\n    }\n    bool retval = tau_GOMP_loop_ordered_guided_next (GOMP_loop_ordered_guided_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ordered_runtime_next\n **********************************************************/\n\nbool  GOMP_loop_ordered_runtime_next(long * a1, long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ordered_runtime_next_p GOMP_loop_ordered_runtime_next_h = NULL;\n    if (GOMP_loop_ordered_runtime_next_h == NULL) {\n        GOMP_loop_ordered_runtime_next_h = (GOMP_loop_ordered_runtime_next_p)get_system_function_handle(\"GOMP_loop_ordered_runtime_next\",(void*)GOMP_loop_ordered_runtime_next);\n    }\n    bool retval = tau_GOMP_loop_ordered_runtime_next (GOMP_loop_ordered_runtime_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#endif\n\n/**********************************************************\n  GOMP_parallel_loop_static_start\n **********************************************************/\n\nvoid  GOMP_parallel_loop_static_start(void (*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_loop_static_start_p GOMP_parallel_loop_static_start_h = NULL;\n    if (GOMP_parallel_loop_static_start_h == NULL) {\n        GOMP_parallel_loop_static_start_h = (GOMP_parallel_loop_static_start_p)get_system_function_handle(\"GOMP_parallel_loop_static_start\",(void*)GOMP_parallel_loop_static_start);\n    }\n    tau_GOMP_parallel_loop_static_start(GOMP_parallel_loop_static_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_parallel_loop_dynamic_start\n **********************************************************/\n\nvoid  GOMP_parallel_loop_dynamic_start(void (*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_loop_dynamic_start_p GOMP_parallel_loop_dynamic_start_h = NULL;\n    if (GOMP_parallel_loop_dynamic_start_h == NULL) {\n        GOMP_parallel_loop_dynamic_start_h = (GOMP_parallel_loop_dynamic_start_p)get_system_function_handle(\"GOMP_parallel_loop_dynamic_start\",(void*)GOMP_parallel_loop_dynamic_start);\n    }\n    tau_GOMP_parallel_loop_dynamic_start(GOMP_parallel_loop_dynamic_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_parallel_loop_guided_start\n **********************************************************/\n\nvoid  GOMP_parallel_loop_guided_start(void (*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_loop_guided_start_p GOMP_parallel_loop_guided_start_h = NULL;\n    if (GOMP_parallel_loop_guided_start_h == NULL) {\n        GOMP_parallel_loop_guided_start_h = (GOMP_parallel_loop_guided_start_p)get_system_function_handle(\"GOMP_parallel_loop_guided_start\",(void*)GOMP_parallel_loop_guided_start);\n    }\n    tau_GOMP_parallel_loop_guided_start(GOMP_parallel_loop_guided_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_parallel_loop_runtime_start\n **********************************************************/\n\nvoid  GOMP_parallel_loop_runtime_start(void (*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_loop_runtime_start_p GOMP_parallel_loop_runtime_start_h = NULL;\n    if (GOMP_parallel_loop_runtime_start_h == NULL) {\n        GOMP_parallel_loop_runtime_start_h = (GOMP_parallel_loop_runtime_start_p)get_system_function_handle(\"GOMP_parallel_loop_runtime_start\",(void*)GOMP_parallel_loop_runtime_start);\n    }\n    tau_GOMP_parallel_loop_runtime_start(GOMP_parallel_loop_runtime_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_loop_end\n **********************************************************/\n\nvoid  GOMP_loop_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_end_p GOMP_loop_end_h = NULL;\n    if (GOMP_loop_end_h == NULL) {\n        GOMP_loop_end_h = (GOMP_loop_end_p)get_system_function_handle(\"GOMP_loop_end\",(void*)GOMP_loop_end);\n    }\n    tau_GOMP_loop_end(GOMP_loop_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_loop_end_nowait\n **********************************************************/\n\nvoid  GOMP_loop_end_nowait()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_end_nowait_p GOMP_loop_end_nowait_h = NULL;\n    if (GOMP_loop_end_nowait_h == NULL) {\n        GOMP_loop_end_nowait_h = (GOMP_loop_end_nowait_p)get_system_function_handle(\"GOMP_loop_end_nowait\",(void*)GOMP_loop_end_nowait);\n    }\n    tau_GOMP_loop_end_nowait(GOMP_loop_end_nowait_h);\n    Tau_global_decr_insideTAU();\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\n\n/**********************************************************\n  GOMP_loop_ull_static_start\n **********************************************************/\n\nbool  GOMP_loop_ull_static_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_static_start_p GOMP_loop_ull_static_start_h = NULL;\n    if (GOMP_loop_ull_static_start_h == NULL) {\n        GOMP_loop_ull_static_start_h = (GOMP_loop_ull_static_start_p)get_system_function_handle(\"GOMP_loop_ull_static_start\",(void*)GOMP_loop_ull_static_start);\n    }\n    bool retval = tau_GOMP_loop_ull_static_start(GOMP_loop_ull_static_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_dynamic_start\n **********************************************************/\n\nbool  GOMP_loop_ull_dynamic_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_dynamic_start_p GOMP_loop_ull_dynamic_start_h = NULL;\n    if (GOMP_loop_ull_dynamic_start_h == NULL) {\n        GOMP_loop_ull_dynamic_start_h = (GOMP_loop_ull_dynamic_start_p)get_system_function_handle(\"GOMP_loop_ull_dynamic_start\",(void*)GOMP_loop_ull_dynamic_start);\n    }\n    bool retval = tau_GOMP_loop_ull_dynamic_start(GOMP_loop_ull_dynamic_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_guided_start\n **********************************************************/\n\nbool  GOMP_loop_ull_guided_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_guided_start_p GOMP_loop_ull_guided_start_h = NULL;\n    if (GOMP_loop_ull_guided_start_h == NULL) {\n        GOMP_loop_ull_guided_start_h = (GOMP_loop_ull_guided_start_p)get_system_function_handle(\"GOMP_loop_ull_guided_start\",(void*)GOMP_loop_ull_guided_start);\n    }\n    bool retval = tau_GOMP_loop_ull_guided_start(GOMP_loop_ull_guided_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_runtime_start\n **********************************************************/\n\nbool  GOMP_loop_ull_runtime_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long * a5, unsigned long long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_runtime_start_p GOMP_loop_ull_runtime_start_h = NULL;\n    if (GOMP_loop_ull_runtime_start_h == NULL) {\n        GOMP_loop_ull_runtime_start_h = (GOMP_loop_ull_runtime_start_p)get_system_function_handle(\"GOMP_loop_ull_runtime_start\",(void*)GOMP_loop_ull_runtime_start);\n    }\n    bool retval = tau_GOMP_loop_ull_runtime_start(GOMP_loop_ull_runtime_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_static_start\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_static_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_static_start_p GOMP_loop_ull_ordered_static_start_h = NULL;\n    if (GOMP_loop_ull_ordered_static_start_h == NULL) {\n        GOMP_loop_ull_ordered_static_start_h = (GOMP_loop_ull_ordered_static_start_p)get_system_function_handle(\"GOMP_loop_ull_ordered_static_start\",(void*)GOMP_loop_ull_ordered_static_start);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_static_start(GOMP_loop_ull_ordered_static_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_dynamic_start\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_dynamic_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_dynamic_start_p GOMP_loop_ull_ordered_dynamic_start_h = NULL;\n    if (GOMP_loop_ull_ordered_dynamic_start_h == NULL) {\n        GOMP_loop_ull_ordered_dynamic_start_h = (GOMP_loop_ull_ordered_dynamic_start_p)get_system_function_handle(\"GOMP_loop_ull_ordered_dynamic_start\",(void*)GOMP_loop_ull_ordered_dynamic_start);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_dynamic_start(GOMP_loop_ull_ordered_dynamic_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_guided_start\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_guided_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_guided_start_p GOMP_loop_ull_ordered_guided_start_h = NULL;\n    if (GOMP_loop_ull_ordered_guided_start_h == NULL) {\n        GOMP_loop_ull_ordered_guided_start_h = (GOMP_loop_ull_ordered_guided_start_p)get_system_function_handle(\"GOMP_loop_ull_ordered_guided_start\",(void*)GOMP_loop_ull_ordered_guided_start);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_guided_start(GOMP_loop_ull_ordered_guided_start_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_runtime_start\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_runtime_start(bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long * a5, unsigned long long * a6)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_runtime_start_p GOMP_loop_ull_ordered_runtime_start_h = NULL;\n    if (GOMP_loop_ull_ordered_runtime_start_h == NULL) {\n        GOMP_loop_ull_ordered_runtime_start_h = (GOMP_loop_ull_ordered_runtime_start_p)get_system_function_handle(\"GOMP_loop_ull_ordered_runtime_start\",(void*)GOMP_loop_ull_ordered_runtime_start);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_runtime_start(GOMP_loop_ull_ordered_runtime_start_h, a1,  a2,  a3,  a4,  a5,  a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_static_next\n **********************************************************/\n\nbool  GOMP_loop_ull_static_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_static_next_p GOMP_loop_ull_static_next_h = NULL;\n    if (GOMP_loop_ull_static_next_h == NULL) {\n        GOMP_loop_ull_static_next_h = (GOMP_loop_ull_static_next_p)get_system_function_handle(\"GOMP_loop_ull_static_next\",(void*)GOMP_loop_ull_static_next);\n    }\n    bool retval = tau_GOMP_loop_ull_static_next(GOMP_loop_ull_static_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_dynamic_next\n **********************************************************/\n\nbool  GOMP_loop_ull_dynamic_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_dynamic_next_p GOMP_loop_ull_dynamic_next_h = NULL;\n    if (GOMP_loop_ull_dynamic_next_h == NULL) {\n        GOMP_loop_ull_dynamic_next_h = (GOMP_loop_ull_dynamic_next_p)get_system_function_handle(\"GOMP_loop_ull_dynamic_next\",(void*)GOMP_loop_ull_dynamic_next);\n    }\n    bool retval = tau_GOMP_loop_ull_dynamic_next(GOMP_loop_ull_dynamic_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_guided_next\n **********************************************************/\n\nbool  GOMP_loop_ull_guided_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_guided_next_p GOMP_loop_ull_guided_next_h = NULL;\n    if (GOMP_loop_ull_guided_next_h == NULL) {\n        GOMP_loop_ull_guided_next_h = (GOMP_loop_ull_guided_next_p)get_system_function_handle(\"GOMP_loop_ull_guided_next\",(void*)GOMP_loop_ull_guided_next);\n    }\n    bool retval = tau_GOMP_loop_ull_guided_next(GOMP_loop_ull_guided_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_runtime_next\n **********************************************************/\n\nbool  GOMP_loop_ull_runtime_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_runtime_next_p GOMP_loop_ull_runtime_next_h = NULL;\n    if (GOMP_loop_ull_runtime_next_h == NULL) {\n        GOMP_loop_ull_runtime_next_h = (GOMP_loop_ull_runtime_next_p)get_system_function_handle(\"GOMP_loop_ull_runtime_next\",(void*)GOMP_loop_ull_runtime_next);\n    }\n    bool retval = tau_GOMP_loop_ull_runtime_next(GOMP_loop_ull_runtime_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_static_next\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_static_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_static_next_p GOMP_loop_ull_ordered_static_next_h = NULL;\n    if (GOMP_loop_ull_ordered_static_next_h == NULL) {\n        GOMP_loop_ull_ordered_static_next_h = (GOMP_loop_ull_ordered_static_next_p)get_system_function_handle(\"GOMP_loop_ull_ordered_static_next\",(void*)GOMP_loop_ull_ordered_static_next);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_static_next(GOMP_loop_ull_ordered_static_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_dynamic_next\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_dynamic_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_dynamic_next_p GOMP_loop_ull_ordered_dynamic_next_h = NULL;\n    if (GOMP_loop_ull_ordered_dynamic_next_h == NULL) {\n        GOMP_loop_ull_ordered_dynamic_next_h = (GOMP_loop_ull_ordered_dynamic_next_p)get_system_function_handle(\"GOMP_loop_ull_ordered_dynamic_next\",(void*)GOMP_loop_ull_ordered_dynamic_next);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_dynamic_next(GOMP_loop_ull_ordered_dynamic_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_guided_next\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_guided_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_guided_next_p GOMP_loop_ull_ordered_guided_next_h = NULL;\n    if (GOMP_loop_ull_ordered_guided_next_h == NULL) {\n        GOMP_loop_ull_ordered_guided_next_h = (GOMP_loop_ull_ordered_guided_next_p)get_system_function_handle(\"GOMP_loop_ull_ordered_guided_next\",(void*)GOMP_loop_ull_ordered_guided_next);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_guided_next(GOMP_loop_ull_ordered_guided_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_loop_ull_ordered_runtime_next\n **********************************************************/\n\nbool  GOMP_loop_ull_ordered_runtime_next(unsigned long long * a1, unsigned long long * a2)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_loop_ull_ordered_runtime_next_p GOMP_loop_ull_ordered_runtime_next_h = NULL;\n    if (GOMP_loop_ull_ordered_runtime_next_h == NULL) {\n        GOMP_loop_ull_ordered_runtime_next_h = (GOMP_loop_ull_ordered_runtime_next_p)get_system_function_handle(\"GOMP_loop_ull_ordered_runtime_next\",(void*)GOMP_loop_ull_ordered_runtime_next);\n    }\n    bool retval = tau_GOMP_loop_ull_ordered_runtime_next(GOMP_loop_ull_ordered_runtime_next_h, a1,  a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#endif\n\n/**********************************************************\n  GOMP_ordered_start\n **********************************************************/\n\nvoid  GOMP_ordered_start()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_ordered_start_p GOMP_ordered_start_h = NULL;\n    if (GOMP_ordered_start_h == NULL) {\n        GOMP_ordered_start_h = (GOMP_ordered_start_p)get_system_function_handle(\"GOMP_ordered_start\",(void*)GOMP_ordered_start);\n    }\n    tau_GOMP_ordered_start(GOMP_ordered_start_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_ordered_end\n **********************************************************/\n\nvoid  GOMP_ordered_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_ordered_end_p GOMP_ordered_end_h = NULL;\n    if (GOMP_ordered_end_h == NULL) {\n        GOMP_ordered_end_h = (GOMP_ordered_end_p)get_system_function_handle(\"GOMP_ordered_end\",(void*)GOMP_ordered_end);\n    }\n    tau_GOMP_ordered_end(GOMP_ordered_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n/**********************************************************\n  GOMP_parallel_start\n **********************************************************/\n\nvoid  GOMP_parallel_start(void (*a1)(void *), void * a2, unsigned int a3)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_start_p GOMP_parallel_start_h = NULL;\n    if (!GOMP_parallel_start_h) {\n        GOMP_parallel_start_h = (GOMP_parallel_start_p)get_system_function_handle(\"GOMP_parallel_start\",(void*)GOMP_parallel_start); \n    }\n    tau_GOMP_parallel_start(GOMP_parallel_start_h, a1,  a2,  a3);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_parallel_end\n **********************************************************/\n\nvoid  GOMP_parallel_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_end_p GOMP_parallel_end_h = NULL;\n    if (GOMP_parallel_end_h == NULL) {\n        GOMP_parallel_end_h = (GOMP_parallel_end_p)get_system_function_handle(\"GOMP_parallel_end\",(void*)GOMP_parallel_end);\n    }\n    tau_GOMP_parallel_end(GOMP_parallel_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_task\n **********************************************************/\n\nvoid  GOMP_task(void (*a1)(void *), void * a2, void (*a3)(void *, void *), long a4, long a5, bool a6, unsigned int a7)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_task_p GOMP_task_h = NULL;\n    if (GOMP_task_h == NULL) {\n        GOMP_task_h = (GOMP_task_p)get_system_function_handle(\"GOMP_task\",(void*)GOMP_task);\n    }\n    tau_GOMP_task(GOMP_task_h, a1,  a2,  a3,  a4,  a5,  a6,  a7);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_taskwait\n **********************************************************/\n\nvoid  GOMP_taskwait()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_taskwait_p GOMP_taskwait_h = NULL;\n    if (GOMP_taskwait_h == NULL) {\n        GOMP_taskwait_h = (GOMP_taskwait_p)get_system_function_handle(\"GOMP_taskwait\",(void*)GOMP_taskwait);\n    }\n    tau_GOMP_taskwait(GOMP_taskwait_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_taskyield - only exists in gcc 4.7 and greater, and only as a stub\n\nvoid  GOMP_taskyield()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_taskyield_p GOMP_taskyield_h = NULL;\n    if (GOMP_taskyield_h == NULL) {\n        GOMP_taskyield_h = (GOMP_taskyield_p)get_system_function_handle(\"GOMP_taskyield\",(void*)GOMP_taskyield);\n    }\n    tau_GOMP_taskyield(GOMP_taskyield_h);\n    Tau_global_decr_insideTAU();\n}\n **********************************************************/\n\n\n\n/**********************************************************\n  GOMP_sections_start\n **********************************************************/\n\nunsigned int  GOMP_sections_start(unsigned int a1)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_sections_start_p GOMP_sections_start_h = NULL;\n    if (GOMP_sections_start_h == NULL) {\n        GOMP_sections_start_h = (GOMP_sections_start_p)get_system_function_handle(\"GOMP_sections_start\",(void*)GOMP_sections_start);\n    }\n    unsigned int retval = tau_GOMP_sections_start(GOMP_sections_start_h, a1);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#ifdef TAU_TIME_GOMP_NEXT\n\n/**********************************************************\n  GOMP_sections_next\n **********************************************************/\n\nunsigned int  GOMP_sections_next()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_sections_next_p GOMP_sections_next_h = NULL;\n    if (GOMP_sections_next_h == NULL) {\n        GOMP_sections_next_h = (GOMP_sections_next_p)get_system_function_handle(\"GOMP_sections_next\",(void*)GOMP_sections_next);\n    }\n    unsigned int retval = tau_GOMP_sections_next(GOMP_sections_next_h);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#endif\n\n/**********************************************************\n  GOMP_parallel_sections_start\n **********************************************************/\n\nvoid  GOMP_parallel_sections_start(void (*a1)(void *), void * a2, unsigned int a3, unsigned int a4)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_parallel_sections_start_p GOMP_parallel_sections_start_h = NULL;\n    if (GOMP_parallel_sections_start_h == NULL) {\n        GOMP_parallel_sections_start_h = (GOMP_parallel_sections_start_p)get_system_function_handle(\"GOMP_parallel_sections_start\",(void*)GOMP_parallel_sections_start);\n    }\n    tau_GOMP_parallel_sections_start(GOMP_parallel_sections_start_h, a1,  a2,  a3,  a4);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_sections_end\n **********************************************************/\n\nvoid  GOMP_sections_end()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_sections_end_p GOMP_sections_end_h = NULL;\n    if (GOMP_sections_end_h == NULL) {\n        GOMP_sections_end_h = (GOMP_sections_end_p)get_system_function_handle(\"GOMP_sections_end\",(void*)GOMP_sections_end);\n    }\n    tau_GOMP_sections_end(GOMP_sections_end_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_sections_end_nowait\n **********************************************************/\n\nvoid  GOMP_sections_end_nowait()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_sections_end_nowait_p GOMP_sections_end_nowait_h = NULL;\n    if (GOMP_sections_end_nowait_h == NULL) {\n        GOMP_sections_end_nowait_h = (GOMP_sections_end_nowait_p)get_system_function_handle(\"GOMP_sections_end_nowait\",(void*)GOMP_sections_end_nowait);\n    }\n    tau_GOMP_sections_end_nowait(GOMP_sections_end_nowait_h);\n    Tau_global_decr_insideTAU();\n}\n\n\n/**********************************************************\n  GOMP_single_start\n **********************************************************/\n\nbool  GOMP_single_start()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_single_start_p GOMP_single_start_h = NULL;\n    if (GOMP_single_start_h == NULL) {\n        GOMP_single_start_h = (GOMP_single_start_p)get_system_function_handle(\"GOMP_single_start\",(void*)GOMP_single_start);\n    }\n    bool retval = tau_GOMP_single_start(GOMP_single_start_h);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_single_copy_start\n **********************************************************/\n\nvoid *  GOMP_single_copy_start()  {\n    Tau_global_incr_insideTAU();\n    static GOMP_single_copy_start_p GOMP_single_copy_start_h = NULL;\n    if (GOMP_single_copy_start_h == NULL) {\n        GOMP_single_copy_start_h = (GOMP_single_copy_start_p)get_system_function_handle(\"GOMP_single_copy_start\",(void*)GOMP_single_copy_start);\n    }\n    void * retval = tau_GOMP_single_copy_start(GOMP_single_copy_start_h);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n\n/**********************************************************\n  GOMP_single_copy_end\n **********************************************************/\n\nvoid  GOMP_single_copy_end(void * a1)  {\n    Tau_global_incr_insideTAU();\n    static GOMP_single_copy_end_p GOMP_single_copy_end_h = NULL;\n    if (GOMP_single_copy_end_h == NULL) {\n        GOMP_single_copy_end_h = (GOMP_single_copy_end_p)get_system_function_handle(\"GOMP_single_copy_end\",(void*)GOMP_single_copy_end);\n    }\n    tau_GOMP_single_copy_end(GOMP_single_copy_end_h, a1);\n    Tau_global_decr_insideTAU();\n}\n\n#else // not TAU_PRELOAD_LIB\n/**************** this section is for static linking and wrapping ****************** */\n\n// this is here to capture when threads are spawned by GOMP.\n// That is in case we are sampling only, and not capturing\n// ORA events. This way, we can initialize sampling on all threads.\n// The sad truth is that this version of the wrapper will never be used - \n// see the man page for ld for details. Because link-time wrapping ONLY wraps \n// UNDEFINED references to the function, when GOMP calls pthread_create, \n// that is already defined. Therefore, we can't capture the call to \n// pthread_create from GOMP, only from user code. That said, the dlsym() \n// (TAU_PRELOAD_LIB) method above will still work when using tau_exec.\n\n/* so that OpenMP and PTHREAD can both be defined, don't wrap this one\n   if Pthreads is used. */\nint __real_pthread_create(pthread_t *, const pthread_attr_t *, start_routine_p, void *);\nint __wrap_pthread_create(pthread_t * thread, const pthread_attr_t * attr, start_routine_p start_routine, void * arg)\n{\n  return tau_gomp_pthread_create_wrapper(__real_pthread_create, thread, attr, start_routine, arg);\n}\n\nvoid __real_omp_set_lock(omp_lock_t *lock);\nvoid __wrap_omp_set_lock(omp_lock_t *lock) {\n    tau_omp_set_lock(__real_omp_set_lock, lock);\n}\n\nvoid __real_omp_set_nest_lock(omp_nest_lock_t *lock);\nvoid __wrap_omp_set_nest_lock(omp_nest_lock_t *lock) {\n    tau_omp_set_nest_lock(__real_omp_set_nest_lock, lock);\n}\n\nvoid __real_GOMP_barrier();\nvoid __wrap_GOMP_barrier() {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_barrier(__real_GOMP_barrier);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_critical_start ();\nvoid __wrap_GOMP_critical_start () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_critical_start (__real_GOMP_critical_start);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_critical_end ();\nvoid __wrap_GOMP_critical_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_critical_end (__real_GOMP_critical_end);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_critical_name_start (void **);\nvoid __wrap_GOMP_critical_name_start (void ** a1) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_critical_name_start (__real_GOMP_critical_name_start, a1);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_critical_name_end (void **);\nvoid __wrap_GOMP_critical_name_end (void ** a1) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_critical_name_end (__real_GOMP_critical_name_end, a1);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_atomic_start ();\nvoid __wrap_GOMP_atomic_start () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_atomic_start (__real_GOMP_atomic_start);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_atomic_end ();\nvoid __wrap_GOMP_atomic_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_atomic_end (__real_GOMP_atomic_end);\n    Tau_global_decr_insideTAU();\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\n\nbool __real_GOMP_loop_static_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_static_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_static_start (__real_GOMP_loop_static_start, a1, a2, a3, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_dynamic_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_dynamic_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_dynamic_start (__real_GOMP_loop_dynamic_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_guided_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_guided_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_guided_start (__real_GOMP_loop_guided_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_runtime_start (long, long, long, long *, long *);\nbool __wrap_GOMP_loop_runtime_start (long a1, long a2, long a3, long * a4, long * a5) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_runtime_start (__real_GOMP_loop_runtime_start, a1, a2, a3, a4, a5);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#endif\n\nbool __real_GOMP_loop_ordered_static_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_ordered_static_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_static_start (__real_GOMP_loop_ordered_static_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_dynamic_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_ordered_dynamic_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_dynamic_start (__real_GOMP_loop_ordered_dynamic_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_guided_start (long, long, long, long, long *, long *);\nbool __wrap_GOMP_loop_ordered_guided_start (long a1, long a2, long a3, long a4, long * a5, long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_guided_start (__real_GOMP_loop_ordered_guided_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_runtime_start (long, long, long, long *, long *);\nbool __wrap_GOMP_loop_ordered_runtime_start (long a1, long a2, long a3, long * a4, long * a5) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_runtime_start (__real_GOMP_loop_ordered_runtime_start, a1, a2, a3, a4, a5);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\nbool __real_GOMP_loop_static_next (long *, long *);\nbool __wrap_GOMP_loop_static_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_static_next (__real_GOMP_loop_static_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_dynamic_next (long *, long *);\nbool __wrap_GOMP_loop_dynamic_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_dynamic_next (__real_GOMP_loop_dynamic_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_guided_next (long *, long *);\nbool __wrap_GOMP_loop_guided_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_guided_next (__real_GOMP_loop_guided_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_runtime_next (long *, long *);\nbool __wrap_GOMP_loop_runtime_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_runtime_next (__real_GOMP_loop_runtime_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_static_next (long *, long *);\nbool __wrap_GOMP_loop_ordered_static_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_static_next (__real_GOMP_loop_ordered_static_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_dynamic_next (long *, long *);\nbool __wrap_GOMP_loop_ordered_dynamic_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_dynamic_next (__real_GOMP_loop_ordered_dynamic_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_guided_next (long *, long *);\nbool __wrap_GOMP_loop_ordered_guided_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_guided_next (__real_GOMP_loop_ordered_guided_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ordered_runtime_next (long *, long *);\nbool __wrap_GOMP_loop_ordered_runtime_next (long * a1, long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ordered_runtime_next (__real_GOMP_loop_ordered_runtime_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n#endif\n\nvoid __real_GOMP_parallel_loop_static_start (void(*)(void *), void *, unsigned int, long, long, long, long);\nvoid __wrap_GOMP_parallel_loop_static_start (void(*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_loop_static_start (__real_GOMP_parallel_loop_static_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_parallel_loop_dynamic_start (void(*)(void *), void *, unsigned int, long, long, long, long);\nvoid __wrap_GOMP_parallel_loop_dynamic_start (void(*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_loop_dynamic_start (__real_GOMP_parallel_loop_dynamic_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_parallel_loop_guided_start (void(*)(void *), void *, unsigned int, long, long, long, long);\nvoid __wrap_GOMP_parallel_loop_guided_start (void(*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6, long a7) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_loop_guided_start (__real_GOMP_parallel_loop_guided_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_parallel_loop_runtime_start (void(*)(void *), void *, unsigned int, long, long, long);\nvoid __wrap_GOMP_parallel_loop_runtime_start (void(*a1)(void *), void * a2, unsigned int a3, long a4, long a5, long a6) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_loop_runtime_start (__real_GOMP_parallel_loop_runtime_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_loop_end ();\nvoid __wrap_GOMP_loop_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_loop_end (__real_GOMP_loop_end);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_loop_end_nowait ();\nvoid __wrap_GOMP_loop_end_nowait () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_loop_end_nowait (__real_GOMP_loop_end_nowait);\n    Tau_global_decr_insideTAU();\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\nbool __real_GOMP_loop_ull_static_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_static_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_static_start (__real_GOMP_loop_ull_static_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_guided_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_guided_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_guided_start (__real_GOMP_loop_ull_guided_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_runtime_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_runtime_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long * a5, unsigned long long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_runtime_start (__real_GOMP_loop_ull_runtime_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_static_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_static_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_static_start (__real_GOMP_loop_ull_ordered_static_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_dynamic_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_dynamic_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_dynamic_start (__real_GOMP_loop_ull_dynamic_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_dynamic_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_dynamic_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_dynamic_start (__real_GOMP_loop_ull_ordered_dynamic_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_guided_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_guided_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5, unsigned long long * a6, unsigned long long * a7) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_guided_start (__real_GOMP_loop_ull_ordered_guided_start, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_runtime_start (bool, unsigned long long, unsigned long long, unsigned long long, unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_runtime_start (bool a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned long long * a5, unsigned long long * a6) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_runtime_start (__real_GOMP_loop_ull_ordered_runtime_start, a1, a2, a3, a4, a5, a6);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_static_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_static_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_static_next (__real_GOMP_loop_ull_static_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_dynamic_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_dynamic_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_dynamic_next (__real_GOMP_loop_ull_dynamic_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_guided_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_guided_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_guided_next (__real_GOMP_loop_ull_guided_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_runtime_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_runtime_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_runtime_next (__real_GOMP_loop_ull_runtime_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_static_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_static_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_static_next (__real_GOMP_loop_ull_ordered_static_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_dynamic_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_dynamic_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_dynamic_next (__real_GOMP_loop_ull_ordered_dynamic_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_guided_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_guided_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_guided_next (__real_GOMP_loop_ull_ordered_guided_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nbool __real_GOMP_loop_ull_ordered_runtime_next (unsigned long long *, unsigned long long *);\nbool __wrap_GOMP_loop_ull_ordered_runtime_next (unsigned long long * a1, unsigned long long * a2) {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_loop_ull_ordered_runtime_next (__real_GOMP_loop_ull_ordered_runtime_next, a1, a2);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n#endif\n\nvoid __real_GOMP_ordered_start ();\nvoid __wrap_GOMP_ordered_start () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_ordered_start (__real_GOMP_ordered_start);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_ordered_end ();\nvoid __wrap_GOMP_ordered_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_ordered_end (__real_GOMP_ordered_end);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_parallel_start (void(*)(void *), void *, unsigned int);\nvoid __wrap_GOMP_parallel_start (void(*a1)(void *), void * a2, unsigned int a3) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_start (__real_GOMP_parallel_start, a1, a2, a3);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_parallel_end ();\nvoid __wrap_GOMP_parallel_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_end (__real_GOMP_parallel_end);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_task (void(*)(void *), void *, void(*)(void *, void *), long, long, bool, unsigned int);\nvoid __wrap_GOMP_task (void(*a1)(void *), void * a2, void(*a3)(void *, void *), long a4, long a5, bool a6, unsigned int a7) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_task (__real_GOMP_task, a1, a2, a3, a4, a5, a6, a7);\n    Tau_global_decr_insideTAU();\n}\n\nvoid __real_GOMP_taskwait ();\nvoid __wrap_GOMP_taskwait () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_taskwait (__real_GOMP_taskwait);\n    Tau_global_decr_insideTAU();\n}\n\n/* taskyield only exists in 4.7 or greater */\n#ifndef GOMP_taskyield\n//void GOMP_taskyield () {};\n#else\n\nvoid __real_GOMP_taskyield ();\nvoid __wrap_GOMP_taskyield () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_taskyield (__real_GOMP_taskyield);\n    Tau_global_decr_insideTAU();\n}\n\nunsigned int __real_GOMP_sections_start (unsigned int);\nunsigned int __wrap_GOMP_sections_start (unsigned int a1) {\n    Tau_global_incr_insideTAU();\n    unsigned int retval = tau_GOMP_sections_start (__real_GOMP_sections_start);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nunsigned int __real_GOMP_sections_next ();\nunsigned int __wrap_GOMP_sections_next () {\n    Tau_global_incr_insideTAU();\n    unsigned int retval = tau_GOMP_sections_next (__real_GOMP_sections_next);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n#endif\n\nvoid __real_GOMP_parallel_sections_start (void(*)(void *), void *, unsigned int, unsigned int);\nvoid __wrap_GOMP_parallel_sections_start (void(*a1)(void *), void * a2, unsigned int a3, unsigned int a4) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_parallel_sections_start (__real_GOMP_parallel_sections_start, a1, a2, a3, a4);\n    Tau_global_decr_insideTAU();\n}\n\n#ifdef TAU_GOMP_WRAP_EVERYTHING\n\nvoid __real_GOMP_sections_end ();\nvoid __wrap_GOMP_sections_end () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_sections_end (__real_GOMP_sections_end);\n    Tau_global_decr_insideTAU();\n}\nvoid __real_GOMP_sections_end_nowait ();\nvoid __wrap_GOMP_sections_end_nowait () {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_sections_end_nowait (__real_GOMP_sections_end_nowait);\n    Tau_global_decr_insideTAU();\n}\n\n#endif\n\nbool __real_GOMP_single_start ();\nbool __wrap_GOMP_single_start () {\n    Tau_global_incr_insideTAU();\n    bool retval = tau_GOMP_single_start (__real_GOMP_single_start);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nvoid * __real_GOMP_single_copy_start ();\nvoid * __wrap_GOMP_single_copy_start () {\n    Tau_global_incr_insideTAU();\n    void * retval = tau_GOMP_single_copy_start (__real_GOMP_single_copy_start);\n    Tau_global_decr_insideTAU();\n\treturn retval;\n}\n\nvoid __real_GOMP_single_copy_end (void *);\nvoid __wrap_GOMP_single_copy_end (void * a1) {\n    Tau_global_incr_insideTAU();\n    tau_GOMP_single_copy_end (__real_GOMP_single_copy_end, a1);\n    Tau_global_decr_insideTAU();\n}\n\n#endif // TAU_PRELOAD_LIB\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/mpcthread/mpcthread_wrap.c": "/****************************************************************************\n**\t\t\tTAU Portable Profiling Package\t\t\t   **\n**\t\t\thttp://www.cs.uoregon.edu/research/tau\t           **\n*****************************************************************************\n**    Copyright 1997  \t\t\t\t\t\t   \t   **\n**    Department of Computer and Information Science, University of Oregon **\n**    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n****************************************************************************/\n/***************************************************************************\n**\tFile \t\t: pthread_wrap.c\t\t\t\t  **\n**\tDescription \t: TAU Profiling Package RTS Layer definitions     **\n**\t\t\t  for wrapping syscalls like exit                 **\n**\tContact\t\t: tau-team@cs.uoregon.edu \t\t \t  **\n**\tDocumentation\t: See http://www.cs.uoregon.edu/research/tau      **\n***************************************************************************/\n\n\n// Include Files \n//////////////////////////////////////////////////////////////////////\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <TAU.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <Profile/TauEnv.h>\n\n#define dprintf TAU_VERBOSE \n\n#if (defined (TAU_BGP) || defined(TAU_XLC))\n#define TAU_DISABLE_SYSCALL_WRAPPER\n#endif /* TAU_BGP || TAU_XLC */\n\ntypedef int (*sctk_user_thread_create_call_p) \n\t(pthread_t *threadp,\n\tconst pthread_attr_t *attr,\n\tvoid *(*start_routine) (void *),\n\tvoid *arg);\n\nextern int tau_sctk_user_thread_create_wrapper (sctk_user_thread_create_call_p sctk_user_thread_create_call,\npthread_t *threadp, const pthread_attr_t *attr, void *(*start_routine) (void *),\nvoid *arg);\n\n/********************************/\n/* LD_PRELOAD wrapper functions */\n/********************************/\n\n#ifdef TAU_PRELOAD_LIB\nstatic int (*_sctk_user_thread_create) (pthread_t* thread, const pthread_attr_t* attr, \n\t\t\t       void *(*start_routine)(void*), void* arg) = NULL;\nstatic void (*_sctk_thread_exit) (void *value_ptr) = NULL;\nstatic int (*_sctk_thread_join) (pthread_t thread, void ** retval) = NULL;\nextern void *tau_pthread_function (void *arg);\ntypedef struct tau_pthread_pack {\n  void *(*start_routine) (void *);\n  void *arg;\n  int id;\n} tau_pthread_pack;\n\n\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nstatic int (*_sctk_thread_barrier_wait) (pthread_barrier_t *barrier) = NULL;\n#endif /* TAU_PTHREAD_BARRIER_AVAILABLE */\n\nint sctk_user_thread_create (pthread_t* thread, const pthread_attr_t* attr, \n\t\t    void *(*start_routine)(void*), void* arg) {\n  if (_sctk_user_thread_create == NULL) {\n    _sctk_user_thread_create = (int (*) (pthread_t* thread, const pthread_attr_t* attr, void *(*start_routine)(void*), void* arg)) dlsym(RTLD_NEXT, \"sctk_user_thread_create\");\n  }\n\t/*\n  tau_pthread_pack *pack = (tau_pthread_pack*) malloc (sizeof(tau_pthread_pack));\n  pack->start_routine = start_routine;\n  pack->arg = arg;\n  pack->id = -1;\n\t*/\n  return tau_sctk_user_thread_create_wrapper(_sctk_user_thread_create, thread, attr, start_routine, arg);\n}\n\nint sctk_thread_join (pthread_t thread, void **retval) {\n  int ret;\n  if (_sctk_thread_join == NULL) {\n    _sctk_thread_join = (int (*) (pthread_t, void **)) dlsym(RTLD_NEXT, \"sctk_thread_join\"); \n  }\n   TAU_PROFILE_TIMER(timer, \"sctk_thread_join()\", \"\", TAU_DEFAULT);\n   TAU_PROFILE_START(timer);\n   ret= _sctk_thread_join(thread, retval); \n   TAU_PROFILE_STOP(timer);\n   return ret;\n}\nvoid sctk_thread_exit (void *value_ptr) {\n\n  if (_sctk_thread_exit == NULL) {\n    _sctk_thread_exit = (void (*) (void *value_ptr)) dlsym(RTLD_NEXT, \"sctk_thread_exit\");\n  }\n\n  TAU_PROFILE_EXIT(\"sctk_thread_exit\");\n  _sctk_thread_exit(value_ptr);\n}\n\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nextern \"C\" int sctk_thread_barrier_wait(pthread_barrier_t *barrier) {\n  int retval;\n  if (_sctk_thread_barrier_wait == NULL) {\n    _sctk_thread_barrier_wait = (int (*) (pthread_barrier_t *barrier)) dlsym(RTLD_NEXT, \"sctk_thread_barrier_wait\");\n  }\n  TAU_PROFILE_TIMER(timer, \"sctk_thread_barrier_wait\", \"\", TAU_DEFAULT);\n  TAU_PROFILE_START(timer);\n  retval = _sctk_thread_barrier_wait (barrier);\n  TAU_PROFILE_STOP(timer);\n  return retval;\n}\n#endif /* TAU_PTHREAD_BARRIER_AVAILABLE */\n\n#else // Wra via the the link line.\n/*********************************/\n/* LD wrappers                   */\n/*********************************/\n/////////////////////////////////////////////////////////////////////////\n// Define PTHREAD wrappers\n/////////////////////////////////////////////////////////////////////////\n\nextern void *tau_pthread_function (void *arg);\ntypedef struct tau_pthread_pack {\n  void *(*start_routine) (void *);\n  void *arg;\n  int id;\n} tau_pthread_pack;\n\n\nint __real_sctk_user_thread_create (pthread_t* thread, const pthread_attr_t* attr, \n\t\t    void *(*start_routine)(void*), void* arg);\nextern int __wrap_sctk_user_thread_create (pthread_t* thread, const pthread_attr_t* attr, \n\t\t    void *(*start_routine)(void*), void* arg) {\n\t/*\n  tau_pthread_pack *pack = (tau_pthread_pack*) malloc (sizeof(tau_pthread_pack));\n  pack->start_routine = start_routine;\n  pack->arg = arg;\n  pack->id = -1;\n\t*/\n  /* return tau_sctk_user_thread_create_wrapper(__real_sctk_user_thread_create, thread, attr, start_routine, arg);\n   */\n  printf(\"Inside __wrap_sctk_user_thread_create\\n\");\n  return __real_sctk_user_thread_create(thread, attr, start_routine, arg);\n}\n\nint __real_sctk_thread_join (pthread_t thread, void **retval);\nextern int __wrap_sctk_thread_join (pthread_t thread, void **retval) {\n  int ret;\n   TAU_PROFILE_TIMER(timer, \"sctk_thread_join()\", \"\", TAU_DEFAULT);\n   TAU_PROFILE_START(timer);\n   ret= __real_sctk_thread_join(thread, retval); \n   TAU_PROFILE_STOP(timer);\n   return ret;\n}\nvoid __real_sctk_thread_exit (void *value_ptr);\nextern void __wrap_sctk_thread_exit (void *value_ptr) {\n\n  TAU_PROFILE_EXIT(\"sctk_thread_exit\");\n  __real_sctk_thread_exit(value_ptr);\n}\n\n#ifdef TAU_PTHREAD_BARRIER_AVAILABLE\nint __real_sctk_thread_barrier_wait(pthread_barrier_t *barrier);\nint __wrap_sctk_thread_barrier_wait(pthread_barrier_t *barrier) {\n  int retval;\n  TAU_PROFILE_TIMER(timer, \"sctk_thread_barrier_wait\", \"\", TAU_DEFAULT);\n  TAU_PROFILE_START(timer);\n  retval = __real_sctk_thread_barrier_wait (barrier);\n  TAU_PROFILE_STOP(timer);\n  return retval;\n}\n#endif /* TAU_PTHREAD_BARRIER_AVAILABLE */\n\n\n#include <sctk_config.h>\n#include <sctk_inter_thread_comm.h>\n#include <sctk_communicator.h>\n#include <sctk_collective_communications.h>\n#include <sctk_simple_collective_communications.h>\n#include <sctk_messages_opt_collective_communications.h>\n#include <sctk_messages_hetero_collective_communications.h>\n#include <Profile/Profiler.h>\n#include <stdio.h>\n\n\n/**********************************************************\n   sctk_perform_messages\n **********************************************************/\n\nvoid  __real_sctk_perform_messages(sctk_request_t * a1) ;\nvoid  __wrap_sctk_perform_messages(sctk_request_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_perform_messages(sctk_request_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_perform_messages(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_create_header\n **********************************************************/\n\nsctk_thread_ptp_message_t *  __real_sctk_create_header(const int a1, sctk_message_type_t a2) ;\nsctk_thread_ptp_message_t *  __wrap_sctk_create_header(const int a1, sctk_message_type_t a2)  {\n\n  sctk_thread_ptp_message_t * retval;\n  TAU_PROFILE_TIMER(t,\"sctk_thread_ptp_message_t *sctk_create_header(const int, sctk_message_type_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_create_header(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_wait_message\n **********************************************************/\n\nvoid  __real_sctk_wait_message(sctk_request_t * a1) ;\nvoid  __wrap_sctk_wait_message(sctk_request_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_wait_message(sctk_request_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_wait_message(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_wait_all\n **********************************************************/\n\nvoid  __real_sctk_wait_all(const int a1, const sctk_communicator_t a2) ;\nvoid  __wrap_sctk_wait_all(const int a1, const sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_wait_all(const int, const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_wait_all(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_internal_ptp\n **********************************************************/\n\nstruct sctk_internal_ptp_s *  __real_sctk_get_internal_ptp(int a1) ;\nstruct sctk_internal_ptp_s *  __wrap_sctk_get_internal_ptp(int a1)  {\n\n  struct sctk_internal_ptp_s * retval;\n  TAU_PROFILE_TIMER(t,\"struct sctk_internal_ptp_s *sctk_get_internal_ptp(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_internal_ptp(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_is_net_message\n **********************************************************/\n\nint  __real_sctk_is_net_message(int a1) ;\nint  __wrap_sctk_is_net_message(int a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_is_net_message(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_is_net_message(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_cancel_message\n **********************************************************/\n\nvoid  __real_sctk_cancel_message(sctk_request_t * a1) ;\nvoid  __wrap_sctk_cancel_message(sctk_request_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_cancel_message(sctk_request_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_cancel_message(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_ptp_per_task_init\n **********************************************************/\n\nvoid  __real_sctk_ptp_per_task_init(int a1) ;\nvoid  __wrap_sctk_ptp_per_task_init(int a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_ptp_per_task_init(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_ptp_per_task_init(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_message_copy\n **********************************************************/\n\nvoid  __real_sctk_message_copy(sctk_message_to_copy_t * a1) ;\nvoid  __wrap_sctk_message_copy(sctk_message_to_copy_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_message_copy(sctk_message_to_copy_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_message_copy(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_message_copy_pack\n **********************************************************/\n\nvoid  __real_sctk_message_copy_pack(sctk_message_to_copy_t * a1) ;\nvoid  __wrap_sctk_message_copy_pack(sctk_message_to_copy_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_message_copy_pack(sctk_message_to_copy_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_message_copy_pack(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_message_copy_pack_absolute\n **********************************************************/\n\nvoid  __real_sctk_message_copy_pack_absolute(sctk_message_to_copy_t * a1) ;\nvoid  __wrap_sctk_message_copy_pack_absolute(sctk_message_to_copy_t * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_message_copy_pack_absolute(sctk_message_to_copy_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_message_copy_pack_absolute(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_notify_idle_message\n **********************************************************/\n\nvoid  __real_sctk_notify_idle_message() ;\nvoid  __wrap_sctk_notify_idle_message()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_notify_idle_message() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_notify_idle_message();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_notify_idle_message_inter\n **********************************************************/\n\nvoid  __real_sctk_notify_idle_message_inter() ;\nvoid  __wrap_sctk_notify_idle_message_inter()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_notify_idle_message_inter() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_notify_idle_message_inter();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_init\n **********************************************************/\n\nvoid  __real_sctk_init() ;\nvoid  __wrap_sctk_init()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_init(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_init();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_leave\n **********************************************************/\n\nvoid  __real_sctk_leave() ;\nvoid  __wrap_sctk_leave()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_leave(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_leave();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_flush_version\n **********************************************************/\n\nvoid  __real_sctk_flush_version() ;\nvoid  __wrap_sctk_flush_version()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_flush_version(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_flush_version();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_abort\n **********************************************************/\n\nvoid  __real_sctk_abort() ;\nvoid  __wrap_sctk_abort()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_abort(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_abort();\n  TAU_PROFILE_STOP(t);\n\n}\n\n#warning \"TAU: Not generating wrapper for function sctk_error\"\n#warning \"TAU: Not generating wrapper for function sctk_formated_assert_print\"\n#warning \"TAU: Not generating wrapper for function sctk_debug_root\"\n#warning \"TAU: Not generating wrapper for function sctk_silent_debug\"\n#warning \"TAU: Not generating wrapper for function sctk_log\"\n#warning \"TAU: Not generating wrapper for function sctk_warning\"\n\n/**********************************************************\n   sctk_size_checking_eq\n **********************************************************/\n\nvoid  __real_sctk_size_checking_eq(size_t a1, size_t a2, char * a3, char * a4, char * a5, int a6) ;\nvoid  __wrap_sctk_size_checking_eq(size_t a1, size_t a2, char * a3, char * a4, char * a5, int a6)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_size_checking_eq(size_t, size_t, char *, char *, char *, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_size_checking_eq(a1, a2, a3, a4, a5, a6);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_size_checking\n **********************************************************/\n\nvoid  __real_sctk_size_checking(size_t a1, size_t a2, char * a3, char * a4, char * a5, int a6) ;\nvoid  __wrap_sctk_size_checking(size_t a1, size_t a2, char * a3, char * a4, char * a5, int a6)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_size_checking(size_t, size_t, char *, char *, char *, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_size_checking(a1, a2, a3, a4, a5, a6);\n  TAU_PROFILE_STOP(t);\n\n}\n\n#warning \"TAU: Not generating wrapper for function sctk_formated_dbg_print_abort\"\n\n/**********************************************************\n   sctk_noalloc_fwrite\n **********************************************************/\n\nsize_t  __real_sctk_noalloc_fwrite(const void * a1, size_t a2, size_t a3, FILE * a4) ;\nsize_t  __wrap_sctk_noalloc_fwrite(const void * a1, size_t a2, size_t a3, FILE * a4)  {\n\n  size_t retval;\n  TAU_PROFILE_TIMER(t,\"size_t sctk_noalloc_fwrite(const void *, size_t, size_t, FILE *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_noalloc_fwrite(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n#warning \"TAU: Not generating wrapper for function sctk_noalloc_fprintf\"\n\n/**********************************************************\n   sctk_noalloc_vfprintf\n **********************************************************/\n\nvoid  __real_sctk_noalloc_vfprintf(FILE * a1, const char * a2, va_list a3) ;\nvoid  __wrap_sctk_noalloc_vfprintf(FILE * a1, const char * a2, va_list a3)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_noalloc_vfprintf(FILE *, const char *, va_list) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_noalloc_vfprintf(a1, a2, a3);\n  TAU_PROFILE_STOP(t);\n\n}\n\n#warning \"TAU: Not generating wrapper for function sctk_noalloc_printf\"\n\n/**********************************************************\n   sctk_print_version\n **********************************************************/\n\nvoid  __real_sctk_print_version(char * a1, int a2, int a3) ;\nvoid  __wrap_sctk_print_version(char * a1, int a2, int a3)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_print_version(char *, int, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_print_version(a1, a2, a3);\n  TAU_PROFILE_STOP(t);\n\n}\n\n#warning \"TAU: Not generating wrapper for function sctk_debug_print_backtrace\"\n\n/**********************************************************\n   sctk_set_version_details\n **********************************************************/\n\nvoid  __real_sctk_set_version_details() ;\nvoid  __wrap_sctk_set_version_details()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_set_version_details(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_set_version_details();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_unset_version_details\n **********************************************************/\n\nvoid  __real_sctk_unset_version_details() ;\nvoid  __wrap_sctk_unset_version_details()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_unset_version_details(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_unset_version_details();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_communicator_world_init\n **********************************************************/\n\nvoid  __real_sctk_communicator_world_init(int a1) ;\nvoid  __wrap_sctk_communicator_world_init(int a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_communicator_world_init(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_communicator_world_init(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_communicator_self_init\n **********************************************************/\n\nvoid  __real_sctk_communicator_self_init() ;\nvoid  __wrap_sctk_communicator_self_init()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_communicator_self_init() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_communicator_self_init();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_nb_task_local\n **********************************************************/\n\nint  __real_sctk_get_nb_task_local(const sctk_communicator_t a1) ;\nint  __wrap_sctk_get_nb_task_local(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_nb_task_local(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_nb_task_local(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_first_task_local\n **********************************************************/\n\nint  __real_sctk_get_first_task_local(const sctk_communicator_t a1) ;\nint  __wrap_sctk_get_first_task_local(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_first_task_local(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_first_task_local(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_last_task_local\n **********************************************************/\n\nint  __real_sctk_get_last_task_local(const sctk_communicator_t a1) ;\nint  __wrap_sctk_get_last_task_local(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_last_task_local(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_last_task_local(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_nb_task_total\n **********************************************************/\n\nint  __real_sctk_get_nb_task_total(const sctk_communicator_t a1) ;\nint  __wrap_sctk_get_nb_task_total(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_nb_task_total(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_nb_task_total(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_rank_size_total\n **********************************************************/\n\nvoid  __real_sctk_get_rank_size_total(const sctk_communicator_t a1, int * a2, int * a3, int a4) ;\nvoid  __wrap_sctk_get_rank_size_total(const sctk_communicator_t a1, int * a2, int * a3, int a4)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_get_rank_size_total(const sctk_communicator_t, int *, int *, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_get_rank_size_total(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_process_array\n **********************************************************/\n\nint *  __real_sctk_get_process_array(const sctk_communicator_t a1) ;\nint *  __wrap_sctk_get_process_array(const sctk_communicator_t a1)  {\n\n  int * retval;\n  TAU_PROFILE_TIMER(t,\"int *sctk_get_process_array(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_process_array(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_process_nb_in_array\n **********************************************************/\n\nint  __real_sctk_get_process_nb_in_array(const sctk_communicator_t a1) ;\nint  __wrap_sctk_get_process_nb_in_array(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_process_nb_in_array(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_process_nb_in_array(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_rank\n **********************************************************/\n\nint  __real_sctk_get_rank(const sctk_communicator_t a1, const int a2) ;\nint  __wrap_sctk_get_rank(const sctk_communicator_t a1, const int a2)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_rank(const sctk_communicator_t, const int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_rank(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_comm_world_rank\n **********************************************************/\n\nint  __real_sctk_get_comm_world_rank(const sctk_communicator_t a1, const int a2) ;\nint  __wrap_sctk_get_comm_world_rank(const sctk_communicator_t a1, const int a2)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_comm_world_rank(const sctk_communicator_t, const int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_comm_world_rank(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_delete_communicator\n **********************************************************/\n\nsctk_communicator_t  __real_sctk_delete_communicator(const sctk_communicator_t a1) ;\nsctk_communicator_t  __wrap_sctk_delete_communicator(const sctk_communicator_t a1)  {\n\n  sctk_communicator_t retval;\n  TAU_PROFILE_TIMER(t,\"sctk_communicator_t sctk_delete_communicator(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_delete_communicator(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_communicator_delete\n **********************************************************/\n\nvoid  __real_sctk_communicator_delete() ;\nvoid  __wrap_sctk_communicator_delete()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_communicator_delete() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_communicator_delete();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_duplicate_communicator\n **********************************************************/\n\nsctk_communicator_t  __real_sctk_duplicate_communicator(const sctk_communicator_t a1, int a2, int a3) ;\nsctk_communicator_t  __wrap_sctk_duplicate_communicator(const sctk_communicator_t a1, int a2, int a3)  {\n\n  sctk_communicator_t retval;\n  TAU_PROFILE_TIMER(t,\"sctk_communicator_t sctk_duplicate_communicator(const sctk_communicator_t, int, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_duplicate_communicator(a1, a2, a3);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_internal_collectives\n **********************************************************/\n\nstruct sctk_internal_collectives_struct_s *  __real_sctk_get_internal_collectives(const sctk_communicator_t a1) ;\nstruct sctk_internal_collectives_struct_s *  __wrap_sctk_get_internal_collectives(const sctk_communicator_t a1)  {\n\n  struct sctk_internal_collectives_struct_s * retval;\n  TAU_PROFILE_TIMER(t,\"struct sctk_internal_collectives_struct_s *sctk_get_internal_collectives(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_internal_collectives(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_set_internal_collectives\n **********************************************************/\n\nvoid  __real_sctk_set_internal_collectives(const sctk_communicator_t a1, struct sctk_internal_collectives_struct_s * a2) ;\nvoid  __wrap_sctk_set_internal_collectives(const sctk_communicator_t a1, struct sctk_internal_collectives_struct_s * a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_set_internal_collectives(const sctk_communicator_t, struct sctk_internal_collectives_struct_s *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_set_internal_collectives(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_process_rank_from_task_rank\n **********************************************************/\n\nint  __real_sctk_get_process_rank_from_task_rank(int a1) ;\nint  __wrap_sctk_get_process_rank_from_task_rank(int a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_process_rank_from_task_rank(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_process_rank_from_task_rank(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_is_inter_comm\n **********************************************************/\n\nint  __real_sctk_is_inter_comm(const sctk_communicator_t a1) ;\nint  __wrap_sctk_is_inter_comm(const sctk_communicator_t a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_is_inter_comm(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_is_inter_comm(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_create_communicator\n **********************************************************/\n\nsctk_communicator_t  __real_sctk_create_communicator(const sctk_communicator_t a1, const int a2, const int * a3, int a4) ;\nsctk_communicator_t  __wrap_sctk_create_communicator(const sctk_communicator_t a1, const int a2, const int * a3, int a4)  {\n\n  sctk_communicator_t retval;\n  TAU_PROFILE_TIMER(t,\"sctk_communicator_t sctk_create_communicator(const sctk_communicator_t, const int, const int *, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_create_communicator(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_barrier\n **********************************************************/\n\nvoid  __real_sctk_barrier(const sctk_communicator_t a1) ;\nvoid  __wrap_sctk_barrier(const sctk_communicator_t a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_barrier(const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_barrier(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_broadcast\n **********************************************************/\n\nvoid  __real_sctk_broadcast(void * a1, const size_t a2, const int a3, const sctk_communicator_t a4) ;\nvoid  __wrap_sctk_broadcast(void * a1, const size_t a2, const int a3, const sctk_communicator_t a4)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_broadcast(void *, const size_t, const int, const sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_broadcast(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_all_reduce\n **********************************************************/\n\nvoid  __real_sctk_all_reduce(const void * a1, void * a2, const size_t a3, const size_t a4, MPC_Op_f a5, const sctk_communicator_t a6, const sctk_datatype_t a7) ;\nvoid  __wrap_sctk_all_reduce(const void * a1, void * a2, const size_t a3, const size_t a4, MPC_Op_f a5, const sctk_communicator_t a6, const sctk_datatype_t a7)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_all_reduce(const void *, void *, const size_t, const size_t, MPC_Op_f, const sctk_communicator_t, const sctk_datatype_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_all_reduce(a1, a2, a3, a4, a5, a6, a7);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_collectives_init\n **********************************************************/\n\nvoid  __real_sctk_collectives_init(sctk_communicator_t a1, void (*a2)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*a3)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*a4)(sctk_internal_collectives_struct_t *, sctk_communicator_t)) ;\nvoid  __wrap_sctk_collectives_init(sctk_communicator_t a1, void (*a2)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*a3)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*a4)(sctk_internal_collectives_struct_t *, sctk_communicator_t))  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_collectives_init(sctk_communicator_t, void (*)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*)(sctk_internal_collectives_struct_t *, sctk_communicator_t), void (*)(sctk_internal_collectives_struct_t *, sctk_communicator_t)) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_collectives_init(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_terminaison_barrier\n **********************************************************/\n\nvoid  __real_sctk_terminaison_barrier(const int a1) ;\nvoid  __wrap_sctk_terminaison_barrier(const int a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_terminaison_barrier(const int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_terminaison_barrier(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_set_tls\n **********************************************************/\n\nvoid  __real_sctk_set_tls(struct sctk_alloc_chain * a1) ;\nvoid  __wrap_sctk_set_tls(struct sctk_alloc_chain * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_set_tls(struct sctk_alloc_chain *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_set_tls(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_alloc_posix_plug_on_egg_allocator\n **********************************************************/\n\nvoid  __real_sctk_alloc_posix_plug_on_egg_allocator() ;\nvoid  __wrap_sctk_alloc_posix_plug_on_egg_allocator()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_alloc_posix_plug_on_egg_allocator(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_alloc_posix_plug_on_egg_allocator();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_current_alloc_chain\n **********************************************************/\n\nstruct sctk_alloc_chain *  __real_sctk_get_current_alloc_chain() ;\nstruct sctk_alloc_chain *  __wrap_sctk_get_current_alloc_chain()  {\n\n  struct sctk_alloc_chain * retval;\n  TAU_PROFILE_TIMER(t,\"struct sctk_alloc_chain *sctk_get_current_alloc_chain(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_current_alloc_chain();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_alloc_posix_numa_migrate\n **********************************************************/\n\nvoid  __real_sctk_alloc_posix_numa_migrate() ;\nvoid  __wrap_sctk_alloc_posix_numa_migrate()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_alloc_posix_numa_migrate(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_alloc_posix_numa_migrate();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_alloc_posix_numa_migrate_chain\n **********************************************************/\n\nvoid  __real_sctk_alloc_posix_numa_migrate_chain(struct sctk_alloc_chain * a1) ;\nvoid  __wrap_sctk_alloc_posix_numa_migrate_chain(struct sctk_alloc_chain * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_alloc_posix_numa_migrate_chain(struct sctk_alloc_chain *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_alloc_posix_numa_migrate_chain(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_alloc_posix_mmsrc_numa_init_phase_numa\n **********************************************************/\n\nvoid  __real_sctk_alloc_posix_mmsrc_numa_init_phase_numa() ;\nvoid  __wrap_sctk_alloc_posix_mmsrc_numa_init_phase_numa()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_alloc_posix_mmsrc_numa_init_phase_numa(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_alloc_posix_mmsrc_numa_init_phase_numa();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_heap_size\n **********************************************************/\n\nunsigned long  __real_sctk_get_heap_size() ;\nunsigned long  __wrap_sctk_get_heap_size()  {\n\n  unsigned long retval;\n  TAU_PROFILE_TIMER(t,\"unsigned long sctk_get_heap_size(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_heap_size();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   __sctk_free\n **********************************************************/\n\nvoid  __real___sctk_free(void * a1, struct sctk_alloc_chain * a2) ;\nvoid  __wrap___sctk_free(void * a1, struct sctk_alloc_chain * a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void __sctk_free(void *, struct sctk_alloc_chain *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real___sctk_free(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   __sctk_malloc\n **********************************************************/\n\nvoid *  __real___sctk_malloc(size_t a1, struct sctk_alloc_chain * a2) ;\nvoid *  __wrap___sctk_malloc(size_t a1, struct sctk_alloc_chain * a2)  {\n\n  void * retval;\n  TAU_PROFILE_TIMER(t,\"void *__sctk_malloc(size_t, struct sctk_alloc_chain *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real___sctk_malloc(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_free\n **********************************************************/\n\nvoid  __real_sctk_free(void * a1) ;\nvoid  __wrap_sctk_free(void * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_free(void *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_free(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_posix_memalign\n **********************************************************/\n\nint  __real_sctk_posix_memalign(void ** a1, size_t a2, size_t a3) ;\nint  __wrap_sctk_posix_memalign(void ** a1, size_t a2, size_t a3)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_posix_memalign(void **, size_t, size_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_posix_memalign(a1, a2, a3);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   __sctk_malloc_new\n **********************************************************/\n\nvoid *  __real___sctk_malloc_new(size_t a1, struct sctk_alloc_chain * a2) ;\nvoid *  __wrap___sctk_malloc_new(size_t a1, struct sctk_alloc_chain * a2)  {\n\n  void * retval;\n  TAU_PROFILE_TIMER(t,\"void *__sctk_malloc_new(size_t, struct sctk_alloc_chain *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real___sctk_malloc_new(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_env_init\n **********************************************************/\n\nint  __real_sctk_env_init(int * a1, char *** a2) ;\nint  __wrap_sctk_env_init(int * a1, char *** a2)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_env_init(int *, char ***) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_env_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_env_exit\n **********************************************************/\n\nint  __real_sctk_env_exit() ;\nint  __wrap_sctk_env_exit()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_env_exit(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_env_exit();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_launch_contribution\n **********************************************************/\n\nvoid  __real_sctk_launch_contribution(FILE * a1) ;\nvoid  __wrap_sctk_launch_contribution(FILE * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_launch_contribution(FILE *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_launch_contribution(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_user_main\n **********************************************************/\n\nint  __real_sctk_user_main(int a1, char ** a2) ;\nint  __wrap_sctk_user_main(int a1, char ** a2)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_user_main(int, char **) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_user_main(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_process_nb\n **********************************************************/\n\nint  __real_sctk_get_process_nb() ;\nint  __wrap_sctk_get_process_nb()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_process_nb(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_process_nb();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_processor_nb\n **********************************************************/\n\nint  __real_sctk_get_processor_nb() ;\nint  __wrap_sctk_get_processor_nb()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_processor_nb(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_processor_nb();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_verbosity\n **********************************************************/\n\nint  __real_sctk_get_verbosity() ;\nint  __wrap_sctk_get_verbosity()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_verbosity() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_verbosity();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_total_tasks_number\n **********************************************************/\n\nint  __real_sctk_get_total_tasks_number() ;\nint  __wrap_sctk_get_total_tasks_number()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_total_tasks_number() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_total_tasks_number();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_lock_yield\n **********************************************************/\n\nint  __real_sctk_spinlock_lock_yield(sctk_spinlock_t * a1) ;\nint  __wrap_sctk_spinlock_lock_yield(sctk_spinlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_lock_yield(sctk_spinlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_lock_yield(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_lock\n **********************************************************/\n\nint  __real_sctk_spinlock_lock(sctk_spinlock_t * a1) ;\nint  __wrap_sctk_spinlock_lock(sctk_spinlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_lock(sctk_spinlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_lock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_unlock\n **********************************************************/\n\nint  __real_sctk_spinlock_unlock(sctk_spinlock_t * a1) ;\nint  __wrap_sctk_spinlock_unlock(sctk_spinlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_unlock(sctk_spinlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_unlock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_trylock\n **********************************************************/\n\nint  __real_sctk_spinlock_trylock(sctk_spinlock_t * a1) ;\nint  __wrap_sctk_spinlock_trylock(sctk_spinlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_trylock(sctk_spinlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_trylock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_read_lock\n **********************************************************/\n\nint  __real_sctk_spinlock_read_lock(sctk_spin_rwlock_t * a1) ;\nint  __wrap_sctk_spinlock_read_lock(sctk_spin_rwlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_read_lock(sctk_spin_rwlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_read_lock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_write_lock\n **********************************************************/\n\nint  __real_sctk_spinlock_write_lock(sctk_spin_rwlock_t * a1) ;\nint  __wrap_sctk_spinlock_write_lock(sctk_spin_rwlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_write_lock(sctk_spin_rwlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_write_lock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_read_unlock\n **********************************************************/\n\nint  __real_sctk_spinlock_read_unlock(sctk_spin_rwlock_t * a1) ;\nint  __wrap_sctk_spinlock_read_unlock(sctk_spin_rwlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_read_unlock(sctk_spin_rwlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_read_unlock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_spinlock_write_unlock\n **********************************************************/\n\nint  __real_sctk_spinlock_write_unlock(sctk_spin_rwlock_t * a1) ;\nint  __wrap_sctk_spinlock_write_unlock(sctk_spin_rwlock_t * a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_spinlock_write_unlock(sctk_spin_rwlock_t *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_spinlock_write_unlock(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_tls_entry_add\n **********************************************************/\n\nunsigned long  __real_sctk_tls_entry_add(unsigned long a1, void (*a2)(void *)) ;\nunsigned long  __wrap_sctk_tls_entry_add(unsigned long a1, void (*a2)(void *))  {\n\n  unsigned long retval;\n  TAU_PROFILE_TIMER(t,\"unsigned long sctk_tls_entry_add(unsigned long, void (*)(void *)) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_tls_entry_add(a1, a2);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_tls_init_key\n **********************************************************/\n\nvoid  __real_sctk_tls_init_key(unsigned long a1, void (*a2)(void *)) ;\nvoid  __wrap_sctk_tls_init_key(unsigned long a1, void (*a2)(void *))  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_tls_init_key(unsigned long, void (*)(void *)) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_tls_init_key(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_start_func\n **********************************************************/\n\nvoid  __real_sctk_start_func(void *(*a1)(void *), void * a2) ;\nvoid  __wrap_sctk_start_func(void *(*a1)(void *), void * a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_start_func(void *(*)(void *), void *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_start_func(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_get_init_vp\n **********************************************************/\n\nint  __real_sctk_get_init_vp(int a1) ;\nint  __wrap_sctk_get_init_vp(int a1)  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_get_init_vp(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_init_vp(a1);\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_is_restarted\n **********************************************************/\n\nint  __real_sctk_is_restarted() ;\nint  __wrap_sctk_is_restarted()  {\n\n  int retval;\n  TAU_PROFILE_TIMER(t,\"int sctk_is_restarted(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_is_restarted();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_get_check_point_key\n **********************************************************/\n\nsctk_thread_key_t  __real_sctk_get_check_point_key() ;\nsctk_thread_key_t  __wrap_sctk_get_check_point_key()  {\n\n  sctk_thread_key_t retval;\n  TAU_PROFILE_TIMER(t,\"sctk_thread_key_t sctk_get_check_point_key(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_get_check_point_key();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_mpc_init_keys\n **********************************************************/\n\nvoid  __real_sctk_mpc_init_keys() ;\nvoid  __wrap_sctk_mpc_init_keys()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_mpc_init_keys(void) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_mpc_init_keys();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_profiling_get_init_time\n **********************************************************/\n\ndouble  __real_sctk_profiling_get_init_time() ;\ndouble  __wrap_sctk_profiling_get_init_time()  {\n\n  double retval;\n  TAU_PROFILE_TIMER(t,\"double sctk_profiling_get_init_time() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_profiling_get_init_time();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_profiling_get_dataused\n **********************************************************/\n\ndouble  __real_sctk_profiling_get_dataused() ;\ndouble  __wrap_sctk_profiling_get_dataused()  {\n\n  double retval;\n  TAU_PROFILE_TIMER(t,\"double sctk_profiling_get_dataused() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_profiling_get_dataused();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_barrier_simple_init\n **********************************************************/\n\nvoid  __real_sctk_barrier_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_barrier_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_barrier_simple_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_barrier_simple_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_broadcast_simple_init\n **********************************************************/\n\nvoid  __real_sctk_broadcast_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_broadcast_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_broadcast_simple_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_broadcast_simple_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_allreduce_simple_init\n **********************************************************/\n\nvoid  __real_sctk_allreduce_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_allreduce_simple_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_allreduce_simple_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_allreduce_simple_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_collectives_init_simple\n **********************************************************/\n\nvoid  __real_sctk_collectives_init_simple(sctk_communicator_t a1) ;\nvoid  __wrap_sctk_collectives_init_simple(sctk_communicator_t a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_collectives_init_simple(sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_collectives_init_simple(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_barrier_opt_messages_init\n **********************************************************/\n\nvoid  __real_sctk_barrier_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_barrier_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_barrier_opt_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_barrier_opt_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_broadcast_opt_messages_init\n **********************************************************/\n\nvoid  __real_sctk_broadcast_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_broadcast_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_broadcast_opt_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_broadcast_opt_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_allreduce_opt_messages_init\n **********************************************************/\n\nvoid  __real_sctk_allreduce_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_allreduce_opt_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_allreduce_opt_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_allreduce_opt_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_collectives_init_opt_messages\n **********************************************************/\n\nvoid  __real_sctk_collectives_init_opt_messages(sctk_communicator_t a1) ;\nvoid  __wrap_sctk_collectives_init_opt_messages(sctk_communicator_t a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_collectives_init_opt_messages(sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_collectives_init_opt_messages(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_barrier_hetero_messages_init\n **********************************************************/\n\nvoid  __real_sctk_barrier_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_barrier_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_barrier_hetero_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_barrier_hetero_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_broadcast_hetero_messages_init\n **********************************************************/\n\nvoid  __real_sctk_broadcast_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_broadcast_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_broadcast_hetero_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_broadcast_hetero_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_allreduce_hetero_messages_init\n **********************************************************/\n\nvoid  __real_sctk_allreduce_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2) ;\nvoid  __wrap_sctk_allreduce_hetero_messages_init(struct sctk_internal_collectives_struct_s * a1, sctk_communicator_t a2)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_allreduce_hetero_messages_init(struct sctk_internal_collectives_struct_s *, sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_allreduce_hetero_messages_init(a1, a2);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_collectives_init_hetero_messages\n **********************************************************/\n\nvoid  __real_sctk_collectives_init_hetero_messages(sctk_communicator_t a1) ;\nvoid  __wrap_sctk_collectives_init_hetero_messages(sctk_communicator_t a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_collectives_init_hetero_messages(sctk_communicator_t) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_collectives_init_hetero_messages(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_add_static_reorder_buffer\n **********************************************************/\n\nvoid  __real_sctk_add_static_reorder_buffer(int a1) ;\nvoid  __wrap_sctk_add_static_reorder_buffer(int a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_add_static_reorder_buffer(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_add_static_reorder_buffer(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_add_dynamic_reorder_buffer\n **********************************************************/\n\nvoid  __real_sctk_add_dynamic_reorder_buffer(int a1) ;\nvoid  __wrap_sctk_add_dynamic_reorder_buffer(int a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_add_dynamic_reorder_buffer(int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_add_dynamic_reorder_buffer(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_set_dynamic_reordering_buffer_creation\n **********************************************************/\n\nvoid  __real_sctk_set_dynamic_reordering_buffer_creation() ;\nvoid  __wrap_sctk_set_dynamic_reordering_buffer_creation()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_set_dynamic_reordering_buffer_creation() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_set_dynamic_reordering_buffer_creation();\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_ib_create_remote\n **********************************************************/\n\nstruct sctk_route_table_s *  __real_sctk_ib_create_remote() ;\nstruct sctk_route_table_s *  __wrap_sctk_ib_create_remote()  {\n\n  struct sctk_route_table_s * retval;\n  TAU_PROFILE_TIMER(t,\"struct sctk_route_table_s *sctk_ib_create_remote() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  retval  =  __real_sctk_ib_create_remote();\n  TAU_PROFILE_STOP(t);\n  return retval;\n\n}\n\n\n/**********************************************************\n   sctk_ib_init_remote\n **********************************************************/\n\nvoid  __real_sctk_ib_init_remote(int a1, struct sctk_rail_info_s * a2, struct sctk_route_table_s * a3, int a4) ;\nvoid  __wrap_sctk_ib_init_remote(int a1, struct sctk_rail_info_s * a2, struct sctk_route_table_s * a3, int a4)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_ib_init_remote(int, struct sctk_rail_info_s *, struct sctk_route_table_s *, int) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_ib_init_remote(a1, a2, a3, a4);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_network_stats_ib\n **********************************************************/\n\nvoid  __real_sctk_network_stats_ib(struct MPC_Network_stats_s * a1) ;\nvoid  __wrap_sctk_network_stats_ib(struct MPC_Network_stats_s * a1)  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_network_stats_ib(struct MPC_Network_stats_s *) C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_network_stats_ib(a1);\n  TAU_PROFILE_STOP(t);\n\n}\n\n\n/**********************************************************\n   sctk_network_deco_neighbors_ib\n **********************************************************/\n\nvoid  __real_sctk_network_deco_neighbors_ib() ;\nvoid  __wrap_sctk_network_deco_neighbors_ib()  {\n\n  TAU_PROFILE_TIMER(t,\"void sctk_network_deco_neighbors_ib() C\", \"\", TAU_USER);\n  TAU_PROFILE_START(t);\n  __real_sctk_network_deco_neighbors_ib();\n  TAU_PROFILE_STOP(t);\n\n}\n\n#endif //TAU_PRELOAD_LIB\n\n/***************************************************************************\n * $RCSfile: TauWrapSyscalls.cpp,v $   $Author: sameer $\n * $Revision: 1.6 $   $Date: 2010/06/10 12:46:53 $\n * TAU_VERSION_ID: $Id: TauWrapSyscalls.cpp,v 1.6 2010/06/10 12:46:53 sameer Exp $\n ***************************************************************************/\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/cuda/cuda_wrap.c": "#include <cuda.h>\n#include <Profile/Profiler.h>\n#include <Profile/TauGpuAdapterCUDA.h>\n#include <stdio.h>\n#include <dlfcn.h>\n\n#define TRACK_KERNEL\n\n#define CUDA_API TAU_USER\n#define CUDA_SYNC TAU_USER\n\nconst char * tau_orig_libname = \"libcuda.so\";\nstatic void *tau_handle = NULL;\n\nCUresult cuInit(unsigned int a1) {\n\n  typedef CUresult (*cuInit_p_h) (unsigned int);\n  static cuInit_p_h cuInit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuInit(unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuInit_h == NULL)\n\tcuInit_h = (cuInit_p_h) dlsym(tau_handle,\"cuInit\"); \n    if (cuInit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuInit_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDriverGetVersion(int * a1) {\n\n  typedef CUresult (*cuDriverGetVersion_p_h) (int *);\n  static cuDriverGetVersion_p_h cuDriverGetVersion_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDriverGetVersion(int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDriverGetVersion_h == NULL)\n\tcuDriverGetVersion_h = (cuDriverGetVersion_p_h) dlsym(tau_handle,\"cuDriverGetVersion\"); \n    if (cuDriverGetVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDriverGetVersion_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGet(CUdevice * a1, int a2) {\n\n  typedef CUresult (*cuDeviceGet_p_h) (CUdevice *, int);\n  static cuDeviceGet_p_h cuDeviceGet_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGet(CUdevice *, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGet_h == NULL)\n\tcuDeviceGet_h = (cuDeviceGet_p_h) dlsym(tau_handle,\"cuDeviceGet\"); \n    if (cuDeviceGet_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGet_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetCount(int * a1) {\n\n  typedef CUresult (*cuDeviceGetCount_p_h) (int *);\n  static cuDeviceGetCount_p_h cuDeviceGetCount_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetCount(int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetCount_h == NULL)\n\tcuDeviceGetCount_h = (cuDeviceGetCount_p_h) dlsym(tau_handle,\"cuDeviceGetCount\"); \n    if (cuDeviceGetCount_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetCount_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetName(char * a1, int a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceGetName_p_h) (char *, int, CUdevice);\n  static cuDeviceGetName_p_h cuDeviceGetName_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetName(char *, int, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetName_h == NULL)\n\tcuDeviceGetName_h = (cuDeviceGetName_p_h) dlsym(tau_handle,\"cuDeviceGetName\"); \n    if (cuDeviceGetName_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetName_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceComputeCapability(int * a1, int * a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceComputeCapability_p_h) (int *, int *, CUdevice);\n  static cuDeviceComputeCapability_p_h cuDeviceComputeCapability_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceComputeCapability(int *, int *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceComputeCapability_h == NULL)\n\tcuDeviceComputeCapability_h = (cuDeviceComputeCapability_p_h) dlsym(tau_handle,\"cuDeviceComputeCapability\"); \n    if (cuDeviceComputeCapability_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceComputeCapability_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceTotalMem_v2(size_t * a1, CUdevice a2) {\n\n  typedef CUresult (*cuDeviceTotalMem_v2_p_h) (size_t *, CUdevice);\n  static cuDeviceTotalMem_v2_p_h cuDeviceTotalMem_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceTotalMem_v2(size_t *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceTotalMem_v2_h == NULL)\n\tcuDeviceTotalMem_v2_h = (cuDeviceTotalMem_v2_p_h) dlsym(tau_handle,\"cuDeviceTotalMem_v2\"); \n    if (cuDeviceTotalMem_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceTotalMem_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetProperties(CUdevprop * a1, CUdevice a2) {\n\n  typedef CUresult (*cuDeviceGetProperties_p_h) (CUdevprop *, CUdevice);\n  static cuDeviceGetProperties_p_h cuDeviceGetProperties_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetProperties(CUdevprop *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetProperties_h == NULL)\n\tcuDeviceGetProperties_h = (cuDeviceGetProperties_p_h) dlsym(tau_handle,\"cuDeviceGetProperties\"); \n    if (cuDeviceGetProperties_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetProperties_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetAttribute(int * a1, CUdevice_attribute a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceGetAttribute_p_h) (int *, CUdevice_attribute, CUdevice);\n  static cuDeviceGetAttribute_p_h cuDeviceGetAttribute_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetAttribute(int *, CUdevice_attribute, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetAttribute_h == NULL)\n\tcuDeviceGetAttribute_h = (cuDeviceGetAttribute_p_h) dlsym(tau_handle,\"cuDeviceGetAttribute\"); \n    if (cuDeviceGetAttribute_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetAttribute_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxCreate_v2(CUcontext * a1, unsigned int a2, CUdevice a3) {\n\n  typedef CUresult (*cuCtxCreate_v2_p_h) (CUcontext *, unsigned int, CUdevice);\n  static cuCtxCreate_v2_p_h cuCtxCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxCreate_v2(CUcontext *, unsigned int, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxCreate_v2_h == NULL)\n\tcuCtxCreate_v2_h = (cuCtxCreate_v2_p_h) dlsym(tau_handle,\"cuCtxCreate_v2\"); \n    if (cuCtxCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxCreate_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxDestroy(CUcontext a1) {\n\n  typedef CUresult (*cuCtxDestroy_p_h) (CUcontext);\n  static cuCtxDestroy_p_h cuCtxDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxDestroy(CUcontext) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxDestroy_h == NULL)\n\tcuCtxDestroy_h = (cuCtxDestroy_p_h) dlsym(tau_handle,\"cuCtxDestroy\"); \n    if (cuCtxDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxAttach(CUcontext * a1, unsigned int a2) {\n\n  typedef CUresult (*cuCtxAttach_p_h) (CUcontext *, unsigned int);\n  static cuCtxAttach_p_h cuCtxAttach_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxAttach(CUcontext *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxAttach_h == NULL)\n\tcuCtxAttach_h = (cuCtxAttach_p_h) dlsym(tau_handle,\"cuCtxAttach\"); \n    if (cuCtxAttach_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxAttach_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxDetach(CUcontext a1) {\n\n  typedef CUresult (*cuCtxDetach_p_h) (CUcontext);\n  static cuCtxDetach_p_h cuCtxDetach_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxDetach(CUcontext) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxDetach_h == NULL)\n\tcuCtxDetach_h = (cuCtxDetach_p_h) dlsym(tau_handle,\"cuCtxDetach\"); \n    if (cuCtxDetach_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxDetach_h)( a1);\n  TAU_PROFILE_STOP(t);\n\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n\tTau_cuda_exit();\n#endif\n  }\n  return retval;\n\n}\n\nCUresult cuCtxPushCurrent(CUcontext a1) {\n\n  typedef CUresult (*cuCtxPushCurrent_p_h) (CUcontext);\n  static cuCtxPushCurrent_p_h cuCtxPushCurrent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxPushCurrent(CUcontext) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxPushCurrent_h == NULL)\n\tcuCtxPushCurrent_h = (cuCtxPushCurrent_p_h) dlsym(tau_handle,\"cuCtxPushCurrent\"); \n    if (cuCtxPushCurrent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxPushCurrent_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxPopCurrent(CUcontext * a1) {\n\n  typedef CUresult (*cuCtxPopCurrent_p_h) (CUcontext *);\n  static cuCtxPopCurrent_p_h cuCtxPopCurrent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxPopCurrent(CUcontext *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxPopCurrent_h == NULL)\n\tcuCtxPopCurrent_h = (cuCtxPopCurrent_p_h) dlsym(tau_handle,\"cuCtxPopCurrent\"); \n    if (cuCtxPopCurrent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxPopCurrent_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetDevice(CUdevice * a1) {\n\n  typedef CUresult (*cuCtxGetDevice_p_h) (CUdevice *);\n  static cuCtxGetDevice_p_h cuCtxGetDevice_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetDevice(CUdevice *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetDevice_h == NULL)\n\tcuCtxGetDevice_h = (cuCtxGetDevice_p_h) dlsym(tau_handle,\"cuCtxGetDevice\"); \n    if (cuCtxGetDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetDevice_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSynchronize() {\n\n  typedef CUresult (*cuCtxSynchronize_p_h) ();\n  static cuCtxSynchronize_p_h cuCtxSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSynchronize(void) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSynchronize_h == NULL)\n\tcuCtxSynchronize_h = (cuCtxSynchronize_p_h) dlsym(tau_handle,\"cuCtxSynchronize\"); \n    if (cuCtxSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuCtxSynchronize_h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSetLimit(CUlimit a1, size_t a2) {\n\n  typedef CUresult (*cuCtxSetLimit_p_h) (CUlimit, size_t);\n  static cuCtxSetLimit_p_h cuCtxSetLimit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSetLimit(CUlimit, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSetLimit_h == NULL)\n\tcuCtxSetLimit_h = (cuCtxSetLimit_p_h) dlsym(tau_handle,\"cuCtxSetLimit\"); \n    if (cuCtxSetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxSetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetLimit(size_t * a1, CUlimit a2) {\n\n  typedef CUresult (*cuCtxGetLimit_p_h) (size_t *, CUlimit);\n  static cuCtxGetLimit_p_h cuCtxGetLimit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetLimit(size_t *, CUlimit) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetLimit_h == NULL)\n\tcuCtxGetLimit_h = (cuCtxGetLimit_p_h) dlsym(tau_handle,\"cuCtxGetLimit\"); \n    if (cuCtxGetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetCacheConfig(CUfunc_cache * a1) {\n\n  typedef CUresult (*cuCtxGetCacheConfig_p_h) (CUfunc_cache *);\n  static cuCtxGetCacheConfig_p_h cuCtxGetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetCacheConfig(CUfunc_cache *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetCacheConfig_h == NULL)\n\tcuCtxGetCacheConfig_h = (cuCtxGetCacheConfig_p_h) dlsym(tau_handle,\"cuCtxGetCacheConfig\"); \n    if (cuCtxGetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSetCacheConfig(CUfunc_cache a1) {\n\n  typedef CUresult (*cuCtxSetCacheConfig_p_h) (CUfunc_cache);\n  static cuCtxSetCacheConfig_p_h cuCtxSetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSetCacheConfig(CUfunc_cache) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSetCacheConfig_h == NULL)\n\tcuCtxSetCacheConfig_h = (cuCtxSetCacheConfig_p_h) dlsym(tau_handle,\"cuCtxSetCacheConfig\"); \n    if (cuCtxSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxSetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetApiVersion(CUcontext a1, unsigned int * a2) {\n\n  typedef CUresult (*cuCtxGetApiVersion_p_h) (CUcontext, unsigned int *);\n  static cuCtxGetApiVersion_p_h cuCtxGetApiVersion_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetApiVersion(CUcontext, unsigned int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetApiVersion_h == NULL)\n\tcuCtxGetApiVersion_h = (cuCtxGetApiVersion_p_h) dlsym(tau_handle,\"cuCtxGetApiVersion\"); \n    if (cuCtxGetApiVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetApiVersion_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoad(CUmodule * a1, const char * a2) {\n\n  typedef CUresult (*cuModuleLoad_p_h) (CUmodule *, const char *);\n  static cuModuleLoad_p_h cuModuleLoad_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoad(CUmodule *, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoad_h == NULL)\n\tcuModuleLoad_h = (cuModuleLoad_p_h) dlsym(tau_handle,\"cuModuleLoad\"); \n    if (cuModuleLoad_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoad_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadData(CUmodule * a1, const void * a2) {\n\n  typedef CUresult (*cuModuleLoadData_p_h) (CUmodule *, const void *);\n  static cuModuleLoadData_p_h cuModuleLoadData_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadData(CUmodule *, const void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadData_h == NULL)\n\tcuModuleLoadData_h = (cuModuleLoadData_p_h) dlsym(tau_handle,\"cuModuleLoadData\"); \n    if (cuModuleLoadData_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadData_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadDataEx(CUmodule * a1, const void * a2, unsigned int a3, CUjit_option * a4, void ** a5) {\n\n  typedef CUresult (*cuModuleLoadDataEx_p_h) (CUmodule *, const void *, unsigned int, CUjit_option *, void **);\n  static cuModuleLoadDataEx_p_h cuModuleLoadDataEx_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadDataEx(CUmodule *, const void *, unsigned int, CUjit_option *, void **) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadDataEx_h == NULL)\n\tcuModuleLoadDataEx_h = (cuModuleLoadDataEx_p_h) dlsym(tau_handle,\"cuModuleLoadDataEx\"); \n    if (cuModuleLoadDataEx_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadDataEx_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadFatBinary(CUmodule * a1, const void * a2) {\n\n  typedef CUresult (*cuModuleLoadFatBinary_p_h) (CUmodule *, const void *);\n  static cuModuleLoadFatBinary_p_h cuModuleLoadFatBinary_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadFatBinary(CUmodule *, const void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadFatBinary_h == NULL)\n\tcuModuleLoadFatBinary_h = (cuModuleLoadFatBinary_p_h) dlsym(tau_handle,\"cuModuleLoadFatBinary\"); \n    if (cuModuleLoadFatBinary_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadFatBinary_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleUnload(CUmodule a1) {\n\n  typedef CUresult (*cuModuleUnload_p_h) (CUmodule);\n  static cuModuleUnload_p_h cuModuleUnload_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleUnload(CUmodule) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleUnload_h == NULL)\n\tcuModuleUnload_h = (cuModuleUnload_p_h) dlsym(tau_handle,\"cuModuleUnload\"); \n    if (cuModuleUnload_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleUnload_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetFunction(CUfunction * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetFunction_p_h) (CUfunction *, CUmodule, const char *);\n  static cuModuleGetFunction_p_h cuModuleGetFunction_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetFunction(CUfunction *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetFunction_h == NULL)\n\tcuModuleGetFunction_h = (cuModuleGetFunction_p_h) dlsym(tau_handle,\"cuModuleGetFunction\"); \n    if (cuModuleGetFunction_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetFunction_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetGlobal_v2(CUdeviceptr * a1, size_t * a2, CUmodule a3, const char * a4) {\n\n  typedef CUresult (*cuModuleGetGlobal_v2_p_h) (CUdeviceptr *, size_t *, CUmodule, const char *);\n  static cuModuleGetGlobal_v2_p_h cuModuleGetGlobal_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetGlobal_v2(CUdeviceptr *, size_t *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetGlobal_v2_h == NULL)\n\tcuModuleGetGlobal_v2_h = (cuModuleGetGlobal_v2_p_h) dlsym(tau_handle,\"cuModuleGetGlobal_v2\"); \n    if (cuModuleGetGlobal_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetGlobal_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetTexRef(CUtexref * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetTexRef_p_h) (CUtexref *, CUmodule, const char *);\n  static cuModuleGetTexRef_p_h cuModuleGetTexRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetTexRef(CUtexref *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetTexRef_h == NULL)\n\tcuModuleGetTexRef_h = (cuModuleGetTexRef_p_h) dlsym(tau_handle,\"cuModuleGetTexRef\"); \n    if (cuModuleGetTexRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetTexRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetSurfRef(CUsurfref * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetSurfRef_p_h) (CUsurfref *, CUmodule, const char *);\n  static cuModuleGetSurfRef_p_h cuModuleGetSurfRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetSurfRef(CUsurfref *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetSurfRef_h == NULL)\n\tcuModuleGetSurfRef_h = (cuModuleGetSurfRef_p_h) dlsym(tau_handle,\"cuModuleGetSurfRef\"); \n    if (cuModuleGetSurfRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetSurfRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemGetInfo_v2(size_t * a1, size_t * a2) {\n\n  typedef CUresult (*cuMemGetInfo_v2_p_h) (size_t *, size_t *);\n  static cuMemGetInfo_v2_p_h cuMemGetInfo_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemGetInfo_v2(size_t *, size_t *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemGetInfo_v2_h == NULL)\n\tcuMemGetInfo_v2_h = (cuMemGetInfo_v2_p_h) dlsym(tau_handle,\"cuMemGetInfo_v2\"); \n    if (cuMemGetInfo_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemGetInfo_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocManaged(CUdeviceptr * a1, size_t a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemAllocManaged_p_h) (CUdeviceptr *, size_t, unsigned int);\n  static cuMemAllocManaged_p_h cuMemAllocManaged_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocManaged(CUdeviceptr *, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocManaged_h == NULL)\n\tcuMemAllocManaged_h = (cuMemAllocManaged_p_h) dlsym(tau_handle,\"cuMemAllocManaged\"); \n    if (cuMemAllocManaged_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocManaged_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAlloc_v2(CUdeviceptr * a1, size_t a2) {\n\n  typedef CUresult (*cuMemAlloc_v2_p_h) (CUdeviceptr *, size_t);\n  static cuMemAlloc_v2_p_h cuMemAlloc_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAlloc_v2(CUdeviceptr *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAlloc_v2_h == NULL)\n\tcuMemAlloc_v2_h = (cuMemAlloc_v2_p_h) dlsym(tau_handle,\"cuMemAlloc_v2\"); \n    if (cuMemAlloc_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAlloc_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocPitch_v2(CUdeviceptr * a1, size_t * a2, size_t a3, size_t a4, unsigned int a5) {\n\n  typedef CUresult (*cuMemAllocPitch_v2_p_h) (CUdeviceptr *, size_t *, size_t, size_t, unsigned int);\n  static cuMemAllocPitch_v2_p_h cuMemAllocPitch_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocPitch_v2(CUdeviceptr *, size_t *, size_t, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocPitch_v2_h == NULL)\n\tcuMemAllocPitch_v2_h = (cuMemAllocPitch_v2_p_h) dlsym(tau_handle,\"cuMemAllocPitch_v2\"); \n    if (cuMemAllocPitch_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocPitch_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemFree_v2(CUdeviceptr a1) {\n\n  typedef CUresult (*cuMemFree_v2_p_h) (CUdeviceptr);\n  static cuMemFree_v2_p_h cuMemFree_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemFree_v2(CUdeviceptr) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemFree_v2_h == NULL)\n\tcuMemFree_v2_h = (cuMemFree_v2_p_h) dlsym(tau_handle,\"cuMemFree_v2\"); \n    if (cuMemFree_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemFree_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemGetAddressRange_v2(CUdeviceptr * a1, size_t * a2, CUdeviceptr a3) {\n\n  typedef CUresult (*cuMemGetAddressRange_v2_p_h) (CUdeviceptr *, size_t *, CUdeviceptr);\n  static cuMemGetAddressRange_v2_p_h cuMemGetAddressRange_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemGetAddressRange_v2(CUdeviceptr *, size_t *, CUdeviceptr) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemGetAddressRange_v2_h == NULL)\n\tcuMemGetAddressRange_v2_h = (cuMemGetAddressRange_v2_p_h) dlsym(tau_handle,\"cuMemGetAddressRange_v2\"); \n    if (cuMemGetAddressRange_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemGetAddressRange_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocHost_v2(void ** a1, size_t a2) {\n\n  typedef CUresult (*cuMemAllocHost_v2_p_h) (void **, size_t);\n  static cuMemAllocHost_v2_p_h cuMemAllocHost_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocHost_v2(void **, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocHost_v2_h == NULL)\n\tcuMemAllocHost_v2_h = (cuMemAllocHost_v2_p_h) dlsym(tau_handle,\"cuMemAllocHost_v2\"); \n    if (cuMemAllocHost_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocHost_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemFreeHost(void * a1) {\n\n  typedef CUresult (*cuMemFreeHost_p_h) (void *);\n  static cuMemFreeHost_p_h cuMemFreeHost_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemFreeHost(void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemFreeHost_h == NULL)\n\tcuMemFreeHost_h = (cuMemFreeHost_p_h) dlsym(tau_handle,\"cuMemFreeHost\"); \n    if (cuMemFreeHost_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemFreeHost_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostAlloc(void ** a1, size_t a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemHostAlloc_p_h) (void **, size_t, unsigned int);\n  static cuMemHostAlloc_p_h cuMemHostAlloc_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostAlloc(void **, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostAlloc_h == NULL)\n\tcuMemHostAlloc_h = (cuMemHostAlloc_p_h) dlsym(tau_handle,\"cuMemHostAlloc\"); \n    if (cuMemHostAlloc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostAlloc_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * a1, void * a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemHostGetDevicePointer_v2_p_h) (CUdeviceptr *, void *, unsigned int);\n  static cuMemHostGetDevicePointer_v2_p_h cuMemHostGetDevicePointer_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *, void *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostGetDevicePointer_v2_h == NULL)\n\tcuMemHostGetDevicePointer_v2_h = (cuMemHostGetDevicePointer_v2_p_h) dlsym(tau_handle,\"cuMemHostGetDevicePointer_v2\"); \n    if (cuMemHostGetDevicePointer_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostGetDevicePointer_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostGetFlags(unsigned int * a1, void * a2) {\n\n  typedef CUresult (*cuMemHostGetFlags_p_h) (unsigned int *, void *);\n  static cuMemHostGetFlags_p_h cuMemHostGetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostGetFlags(unsigned int *, void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostGetFlags_h == NULL)\n\tcuMemHostGetFlags_h = (cuMemHostGetFlags_p_h) dlsym(tau_handle,\"cuMemHostGetFlags\"); \n    if (cuMemHostGetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostGetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoD_v2(CUdeviceptr a1, const void * a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyHtoD_v2_p_h) (CUdeviceptr, const void *, size_t);\n  static cuMemcpyHtoD_v2_p_h cuMemcpyHtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoD_v2(CUdeviceptr, const void *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoD_v2_h == NULL)\n\tcuMemcpyHtoD_v2_h = (cuMemcpyHtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoD_v2\"); \n    if (cuMemcpyHtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoD_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoH_v2(void * a1, CUdeviceptr a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyDtoH_v2_p_h) (void *, CUdeviceptr, size_t);\n  static cuMemcpyDtoH_v2_p_h cuMemcpyDtoH_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoH_v2(void *, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoH_v2_h == NULL)\n\tcuMemcpyDtoH_v2_h = (cuMemcpyDtoH_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoH_v2\"); \n    if (cuMemcpyDtoH_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoH_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoD_v2(CUdeviceptr a1, CUdeviceptr a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyDtoD_v2_p_h) (CUdeviceptr, CUdeviceptr, size_t);\n  static cuMemcpyDtoD_v2_p_h cuMemcpyDtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoD_v2(CUdeviceptr, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoD_v2_h == NULL)\n\tcuMemcpyDtoD_v2_h = (cuMemcpyDtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoD_v2\"); \n    if (cuMemcpyDtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoD_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoA_v2(CUarray a1, size_t a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyDtoA_v2_p_h) (CUarray, size_t, CUdeviceptr, size_t);\n  static cuMemcpyDtoA_v2_p_h cuMemcpyDtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoA_v2(CUarray, size_t, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoA_v2_h == NULL)\n\tcuMemcpyDtoA_v2_h = (cuMemcpyDtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoA_v2\"); \n    if (cuMemcpyDtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoA_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoD_v2(CUdeviceptr a1, CUarray a2, size_t a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyAtoD_v2_p_h) (CUdeviceptr, CUarray, size_t, size_t);\n  static cuMemcpyAtoD_v2_p_h cuMemcpyAtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoD_v2(CUdeviceptr, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoD_v2_h == NULL)\n\tcuMemcpyAtoD_v2_h = (cuMemcpyAtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoD_v2\"); \n    if (cuMemcpyAtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoD_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoA_v2(CUarray a1, size_t a2, const void * a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyHtoA_v2_p_h) (CUarray, size_t, const void *, size_t);\n  static cuMemcpyHtoA_v2_p_h cuMemcpyHtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoA_v2(CUarray, size_t, const void *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoA_v2_h == NULL)\n\tcuMemcpyHtoA_v2_h = (cuMemcpyHtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoA_v2\"); \n    if (cuMemcpyHtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoA_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoH_v2(void * a1, CUarray a2, size_t a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyAtoH_v2_p_h) (void *, CUarray, size_t, size_t);\n  static cuMemcpyAtoH_v2_p_h cuMemcpyAtoH_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoH_v2(void *, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoH_v2_h == NULL)\n\tcuMemcpyAtoH_v2_h = (cuMemcpyAtoH_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoH_v2\"); \n    if (cuMemcpyAtoH_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoH_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoA_v2(CUarray a1, size_t a2, CUarray a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemcpyAtoA_v2_p_h) (CUarray, size_t, CUarray, size_t, size_t);\n  static cuMemcpyAtoA_v2_p_h cuMemcpyAtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoA_v2(CUarray, size_t, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoA_v2_h == NULL)\n\tcuMemcpyAtoA_v2_h = (cuMemcpyAtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoA_v2\"); \n    if (cuMemcpyAtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoA_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * a1) {\n\n  typedef CUresult (*cuMemcpy2D_v2_p_h) (const CUDA_MEMCPY2D *);\n  static cuMemcpy2D_v2_p_h cuMemcpy2D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2D_v2_h == NULL)\n\tcuMemcpy2D_v2_h = (cuMemcpy2D_v2_p_h) dlsym(tau_handle,\"cuMemcpy2D_v2\"); \n    if (cuMemcpy2D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2D_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * a1) {\n\n  typedef CUresult (*cuMemcpy2DUnaligned_v2_p_h) (const CUDA_MEMCPY2D *);\n  static cuMemcpy2DUnaligned_v2_p_h cuMemcpy2DUnaligned_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2DUnaligned_v2_h == NULL)\n\tcuMemcpy2DUnaligned_v2_h = (cuMemcpy2DUnaligned_v2_p_h) dlsym(tau_handle,\"cuMemcpy2DUnaligned_v2\"); \n    if (cuMemcpy2DUnaligned_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2DUnaligned_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * a1) {\n\n  typedef CUresult (*cuMemcpy3D_v2_p_h) (const CUDA_MEMCPY3D *);\n  static cuMemcpy3D_v2_p_h cuMemcpy3D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy3D_v2_h == NULL)\n\tcuMemcpy3D_v2_h = (cuMemcpy3D_v2_p_h) dlsym(tau_handle,\"cuMemcpy3D_v2\"); \n    if (cuMemcpy3D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy3D_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoDAsync_v2(CUdeviceptr a1, const void * a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyHtoDAsync_v2_p_h) (CUdeviceptr, const void *, size_t, CUstream);\n  static cuMemcpyHtoDAsync_v2_p_h cuMemcpyHtoDAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr, const void *, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoDAsync_v2_h == NULL)\n\tcuMemcpyHtoDAsync_v2_h = (cuMemcpyHtoDAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoDAsync_v2\"); \n    if (cuMemcpyHtoDAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoDAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoHAsync_v2(void * a1, CUdeviceptr a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyDtoHAsync_v2_p_h) (void *, CUdeviceptr, size_t, CUstream);\n  static cuMemcpyDtoHAsync_v2_p_h cuMemcpyDtoHAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoHAsync_v2(void *, CUdeviceptr, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoHAsync_v2_h == NULL)\n\tcuMemcpyDtoHAsync_v2_h = (cuMemcpyDtoHAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoHAsync_v2\"); \n    if (cuMemcpyDtoHAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoHAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoDAsync_v2(CUdeviceptr a1, CUdeviceptr a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyDtoDAsync_v2_p_h) (CUdeviceptr, CUdeviceptr, size_t, CUstream);\n  static cuMemcpyDtoDAsync_v2_p_h cuMemcpyDtoDAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr, CUdeviceptr, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoDAsync_v2_h == NULL)\n\tcuMemcpyDtoDAsync_v2_h = (cuMemcpyDtoDAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoDAsync_v2\"); \n    if (cuMemcpyDtoDAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoDAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoAAsync_v2(CUarray a1, size_t a2, const void * a3, size_t a4, CUstream a5) {\n\n  typedef CUresult (*cuMemcpyHtoAAsync_v2_p_h) (CUarray, size_t, const void *, size_t, CUstream);\n  static cuMemcpyHtoAAsync_v2_p_h cuMemcpyHtoAAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoAAsync_v2(CUarray, size_t, const void *, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoAAsync_v2_h == NULL)\n\tcuMemcpyHtoAAsync_v2_h = (cuMemcpyHtoAAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoAAsync_v2\"); \n    if (cuMemcpyHtoAAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoAAsync_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoHAsync_v2(void * a1, CUarray a2, size_t a3, size_t a4, CUstream a5) {\n\n  typedef CUresult (*cuMemcpyAtoHAsync_v2_p_h) (void *, CUarray, size_t, size_t, CUstream);\n  static cuMemcpyAtoHAsync_v2_p_h cuMemcpyAtoHAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoHAsync_v2(void *, CUarray, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoHAsync_v2_h == NULL)\n\tcuMemcpyAtoHAsync_v2_h = (cuMemcpyAtoHAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoHAsync_v2\"); \n    if (cuMemcpyAtoHAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoHAsync_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * a1, CUstream a2) {\n\n  typedef CUresult (*cuMemcpy2DAsync_v2_p_h) (const CUDA_MEMCPY2D *, CUstream);\n  static cuMemcpy2DAsync_v2_p_h cuMemcpy2DAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2DAsync_v2_h == NULL)\n\tcuMemcpy2DAsync_v2_h = (cuMemcpy2DAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpy2DAsync_v2\"); \n    if (cuMemcpy2DAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2DAsync_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * a1, CUstream a2) {\n\n  typedef CUresult (*cuMemcpy3DAsync_v2_p_h) (const CUDA_MEMCPY3D *, CUstream);\n  static cuMemcpy3DAsync_v2_p_h cuMemcpy3DAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy3DAsync_v2_h == NULL)\n\tcuMemcpy3DAsync_v2_h = (cuMemcpy3DAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpy3DAsync_v2\"); \n    if (cuMemcpy3DAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy3DAsync_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD8_v2(CUdeviceptr a1, unsigned char a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD8_v2_p_h) (CUdeviceptr, unsigned char, size_t);\n  static cuMemsetD8_v2_p_h cuMemsetD8_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD8_v2(CUdeviceptr, unsigned char, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD8_v2_h == NULL)\n\tcuMemsetD8_v2_h = (cuMemsetD8_v2_p_h) dlsym(tau_handle,\"cuMemsetD8_v2\"); \n    if (cuMemsetD8_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD8_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD16_v2(CUdeviceptr a1, unsigned short a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD16_v2_p_h) (CUdeviceptr, unsigned short, size_t);\n  static cuMemsetD16_v2_p_h cuMemsetD16_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD16_v2(CUdeviceptr, unsigned short, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD16_v2_h == NULL)\n\tcuMemsetD16_v2_h = (cuMemsetD16_v2_p_h) dlsym(tau_handle,\"cuMemsetD16_v2\"); \n    if (cuMemsetD16_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD16_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD32_v2(CUdeviceptr a1, unsigned int a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD32_v2_p_h) (CUdeviceptr, unsigned int, size_t);\n  static cuMemsetD32_v2_p_h cuMemsetD32_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD32_v2(CUdeviceptr, unsigned int, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD32_v2_h == NULL)\n\tcuMemsetD32_v2_h = (cuMemsetD32_v2_p_h) dlsym(tau_handle,\"cuMemsetD32_v2\"); \n    if (cuMemsetD32_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD32_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D8_v2(CUdeviceptr a1, size_t a2, unsigned char a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D8_v2_p_h) (CUdeviceptr, size_t, unsigned char, size_t, size_t);\n  static cuMemsetD2D8_v2_p_h cuMemsetD2D8_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D8_v2(CUdeviceptr, size_t, unsigned char, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D8_v2_h == NULL)\n\tcuMemsetD2D8_v2_h = (cuMemsetD2D8_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D8_v2\"); \n    if (cuMemsetD2D8_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D8_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D16_v2(CUdeviceptr a1, size_t a2, unsigned short a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D16_v2_p_h) (CUdeviceptr, size_t, unsigned short, size_t, size_t);\n  static cuMemsetD2D16_v2_p_h cuMemsetD2D16_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D16_v2(CUdeviceptr, size_t, unsigned short, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D16_v2_h == NULL)\n\tcuMemsetD2D16_v2_h = (cuMemsetD2D16_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D16_v2\"); \n    if (cuMemsetD2D16_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D16_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D32_v2(CUdeviceptr a1, size_t a2, unsigned int a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D32_v2_p_h) (CUdeviceptr, size_t, unsigned int, size_t, size_t);\n  static cuMemsetD2D32_v2_p_h cuMemsetD2D32_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D32_v2(CUdeviceptr, size_t, unsigned int, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D32_v2_h == NULL)\n\tcuMemsetD2D32_v2_h = (cuMemsetD2D32_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D32_v2\"); \n    if (cuMemsetD2D32_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D32_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD8Async(CUdeviceptr a1, unsigned char a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD8Async_p_h) (CUdeviceptr, unsigned char, size_t, CUstream);\n  static cuMemsetD8Async_p_h cuMemsetD8Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD8Async(CUdeviceptr, unsigned char, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD8Async_h == NULL)\n\tcuMemsetD8Async_h = (cuMemsetD8Async_p_h) dlsym(tau_handle,\"cuMemsetD8Async\"); \n    if (cuMemsetD8Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD8Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD16Async(CUdeviceptr a1, unsigned short a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD16Async_p_h) (CUdeviceptr, unsigned short, size_t, CUstream);\n  static cuMemsetD16Async_p_h cuMemsetD16Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD16Async(CUdeviceptr, unsigned short, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD16Async_h == NULL)\n\tcuMemsetD16Async_h = (cuMemsetD16Async_p_h) dlsym(tau_handle,\"cuMemsetD16Async\"); \n    if (cuMemsetD16Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD16Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD32Async(CUdeviceptr a1, unsigned int a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD32Async_p_h) (CUdeviceptr, unsigned int, size_t, CUstream);\n  static cuMemsetD32Async_p_h cuMemsetD32Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD32Async(CUdeviceptr, unsigned int, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD32Async_h == NULL)\n\tcuMemsetD32Async_h = (cuMemsetD32Async_p_h) dlsym(tau_handle,\"cuMemsetD32Async\"); \n    if (cuMemsetD32Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD32Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D8Async(CUdeviceptr a1, size_t a2, unsigned char a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D8Async_p_h) (CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream);\n  static cuMemsetD2D8Async_p_h cuMemsetD2D8Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D8Async(CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D8Async_h == NULL)\n\tcuMemsetD2D8Async_h = (cuMemsetD2D8Async_p_h) dlsym(tau_handle,\"cuMemsetD2D8Async\"); \n    if (cuMemsetD2D8Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D8Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D16Async(CUdeviceptr a1, size_t a2, unsigned short a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D16Async_p_h) (CUdeviceptr, size_t, unsigned short, size_t, size_t, CUstream);\n  static cuMemsetD2D16Async_p_h cuMemsetD2D16Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D16Async(CUdeviceptr, size_t, unsigned short, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D16Async_h == NULL)\n\tcuMemsetD2D16Async_h = (cuMemsetD2D16Async_p_h) dlsym(tau_handle,\"cuMemsetD2D16Async\"); \n    if (cuMemsetD2D16Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D16Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D32Async(CUdeviceptr a1, size_t a2, unsigned int a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D32Async_p_h) (CUdeviceptr, size_t, unsigned int, size_t, size_t, CUstream);\n  static cuMemsetD2D32Async_p_h cuMemsetD2D32Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D32Async(CUdeviceptr, size_t, unsigned int, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D32Async_h == NULL)\n\tcuMemsetD2D32Async_h = (cuMemsetD2D32Async_p_h) dlsym(tau_handle,\"cuMemsetD2D32Async\"); \n    if (cuMemsetD2D32Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D32Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayCreate_v2(CUarray * a1, const CUDA_ARRAY_DESCRIPTOR * a2) {\n\n  typedef CUresult (*cuArrayCreate_v2_p_h) (CUarray *, const CUDA_ARRAY_DESCRIPTOR *);\n  static cuArrayCreate_v2_p_h cuArrayCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayCreate_v2(CUarray *, const CUDA_ARRAY_DESCRIPTOR *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayCreate_v2_h == NULL)\n\tcuArrayCreate_v2_h = (cuArrayCreate_v2_p_h) dlsym(tau_handle,\"cuArrayCreate_v2\"); \n    if (cuArrayCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayCreate_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * a1, CUarray a2) {\n\n  typedef CUresult (*cuArrayGetDescriptor_v2_p_h) (CUDA_ARRAY_DESCRIPTOR *, CUarray);\n  static cuArrayGetDescriptor_v2_p_h cuArrayGetDescriptor_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *, CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayGetDescriptor_v2_h == NULL)\n\tcuArrayGetDescriptor_v2_h = (cuArrayGetDescriptor_v2_p_h) dlsym(tau_handle,\"cuArrayGetDescriptor_v2\"); \n    if (cuArrayGetDescriptor_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayGetDescriptor_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayDestroy(CUarray a1) {\n\n  typedef CUresult (*cuArrayDestroy_p_h) (CUarray);\n  static cuArrayDestroy_p_h cuArrayDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayDestroy(CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayDestroy_h == NULL)\n\tcuArrayDestroy_h = (cuArrayDestroy_p_h) dlsym(tau_handle,\"cuArrayDestroy\"); \n    if (cuArrayDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArray3DCreate_v2(CUarray * a1, const CUDA_ARRAY3D_DESCRIPTOR * a2) {\n\n  typedef CUresult (*cuArray3DCreate_v2_p_h) (CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *);\n  static cuArray3DCreate_v2_p_h cuArray3DCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArray3DCreate_v2(CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArray3DCreate_v2_h == NULL)\n\tcuArray3DCreate_v2_h = (cuArray3DCreate_v2_p_h) dlsym(tau_handle,\"cuArray3DCreate_v2\"); \n    if (cuArray3DCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArray3DCreate_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * a1, CUarray a2) {\n\n  typedef CUresult (*cuArray3DGetDescriptor_v2_p_h) (CUDA_ARRAY3D_DESCRIPTOR *, CUarray);\n  static cuArray3DGetDescriptor_v2_p_h cuArray3DGetDescriptor_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *, CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArray3DGetDescriptor_v2_h == NULL)\n\tcuArray3DGetDescriptor_v2_h = (cuArray3DGetDescriptor_v2_p_h) dlsym(tau_handle,\"cuArray3DGetDescriptor_v2\"); \n    if (cuArray3DGetDescriptor_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArray3DGetDescriptor_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamCreate(CUstream * a1, unsigned int a2) {\n\n  typedef CUresult (*cuStreamCreate_p_h) (CUstream *, unsigned int);\n  static cuStreamCreate_p_h cuStreamCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamCreate(CUstream *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamCreate_h == NULL)\n\tcuStreamCreate_h = (cuStreamCreate_p_h) dlsym(tau_handle,\"cuStreamCreate\"); \n    if (cuStreamCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamCreate_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamWaitEvent(CUstream a1, CUevent a2, unsigned int a3) {\n\n  typedef CUresult (*cuStreamWaitEvent_p_h) (CUstream, CUevent, unsigned int);\n  static cuStreamWaitEvent_p_h cuStreamWaitEvent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamWaitEvent(CUstream, CUevent, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamWaitEvent_h == NULL)\n\tcuStreamWaitEvent_h = (cuStreamWaitEvent_p_h) dlsym(tau_handle,\"cuStreamWaitEvent\"); \n    if (cuStreamWaitEvent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamWaitEvent_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamQuery(CUstream a1) {\n\n  typedef CUresult (*cuStreamQuery_p_h) (CUstream);\n  static cuStreamQuery_p_h cuStreamQuery_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamQuery(CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamQuery_h == NULL)\n\tcuStreamQuery_h = (cuStreamQuery_p_h) dlsym(tau_handle,\"cuStreamQuery\"); \n    if (cuStreamQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamSynchronize(CUstream a1) {\n\n  typedef CUresult (*cuStreamSynchronize_p_h) (CUstream);\n  static cuStreamSynchronize_p_h cuStreamSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamSynchronize(CUstream) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamSynchronize_h == NULL)\n\tcuStreamSynchronize_h = (cuStreamSynchronize_p_h) dlsym(tau_handle,\"cuStreamSynchronize\"); \n    if (cuStreamSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuStreamSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamDestroy(CUstream a1) {\n\n  typedef CUresult (*cuStreamDestroy_p_h) (CUstream);\n  static cuStreamDestroy_p_h cuStreamDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamDestroy(CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamDestroy_h == NULL)\n\tcuStreamDestroy_h = (cuStreamDestroy_p_h) dlsym(tau_handle,\"cuStreamDestroy\"); \n    if (cuStreamDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventCreate(CUevent * a1, unsigned int a2) {\n\n  typedef CUresult (*cuEventCreate_p_h) (CUevent *, unsigned int);\n  static cuEventCreate_p_h cuEventCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventCreate(CUevent *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventCreate_h == NULL)\n\tcuEventCreate_h = (cuEventCreate_p_h) dlsym(tau_handle,\"cuEventCreate\"); \n    if (cuEventCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventCreate_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventRecord(CUevent a1, CUstream a2) {\n\n  typedef CUresult (*cuEventRecord_p_h) (CUevent, CUstream);\n  static cuEventRecord_p_h cuEventRecord_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventRecord(CUevent, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventRecord_h == NULL)\n\tcuEventRecord_h = (cuEventRecord_p_h) dlsym(tau_handle,\"cuEventRecord\"); \n    if (cuEventRecord_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventRecord_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventQuery(CUevent a1) {\n\n  typedef CUresult (*cuEventQuery_p_h) (CUevent);\n  static cuEventQuery_p_h cuEventQuery_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventQuery(CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventQuery_h == NULL)\n\tcuEventQuery_h = (cuEventQuery_p_h) dlsym(tau_handle,\"cuEventQuery\"); \n    if (cuEventQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventSynchronize(CUevent a1) {\n\n  typedef CUresult (*cuEventSynchronize_p_h) (CUevent);\n  static cuEventSynchronize_p_h cuEventSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventSynchronize(CUevent) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventSynchronize_h == NULL)\n\tcuEventSynchronize_h = (cuEventSynchronize_p_h) dlsym(tau_handle,\"cuEventSynchronize\"); \n    if (cuEventSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuEventSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventDestroy(CUevent a1) {\n\n  typedef CUresult (*cuEventDestroy_p_h) (CUevent);\n  static cuEventDestroy_p_h cuEventDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventDestroy(CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventDestroy_h == NULL)\n\tcuEventDestroy_h = (cuEventDestroy_p_h) dlsym(tau_handle,\"cuEventDestroy\"); \n    if (cuEventDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventElapsedTime(float * a1, CUevent a2, CUevent a3) {\n\n  typedef CUresult (*cuEventElapsedTime_p_h) (float *, CUevent, CUevent);\n  static cuEventElapsedTime_p_h cuEventElapsedTime_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventElapsedTime(float *, CUevent, CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventElapsedTime_h == NULL)\n\tcuEventElapsedTime_h = (cuEventElapsedTime_p_h) dlsym(tau_handle,\"cuEventElapsedTime\"); \n    if (cuEventElapsedTime_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventElapsedTime_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetBlockShape(CUfunction a1, int a2, int a3, int a4) {\n\n  typedef CUresult (*cuFuncSetBlockShape_p_h) (CUfunction, int, int, int);\n  static cuFuncSetBlockShape_p_h cuFuncSetBlockShape_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetBlockShape(CUfunction, int, int, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetBlockShape_h == NULL)\n\tcuFuncSetBlockShape_h = (cuFuncSetBlockShape_p_h) dlsym(tau_handle,\"cuFuncSetBlockShape\"); \n    if (cuFuncSetBlockShape_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetBlockShape_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetSharedSize(CUfunction a1, unsigned int a2) {\n\n  typedef CUresult (*cuFuncSetSharedSize_p_h) (CUfunction, unsigned int);\n  static cuFuncSetSharedSize_p_h cuFuncSetSharedSize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetSharedSize(CUfunction, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetSharedSize_h == NULL)\n\tcuFuncSetSharedSize_h = (cuFuncSetSharedSize_p_h) dlsym(tau_handle,\"cuFuncSetSharedSize\"); \n    if (cuFuncSetSharedSize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetSharedSize_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncGetAttribute(int * a1, CUfunction_attribute a2, CUfunction a3) {\n\n  typedef CUresult (*cuFuncGetAttribute_p_h) (int *, CUfunction_attribute, CUfunction);\n  static cuFuncGetAttribute_p_h cuFuncGetAttribute_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncGetAttribute(int *, CUfunction_attribute, CUfunction) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncGetAttribute_h == NULL)\n\tcuFuncGetAttribute_h = (cuFuncGetAttribute_p_h) dlsym(tau_handle,\"cuFuncGetAttribute\"); \n    if (cuFuncGetAttribute_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncGetAttribute_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetCacheConfig(CUfunction a1, CUfunc_cache a2) {\n\n  typedef CUresult (*cuFuncSetCacheConfig_p_h) (CUfunction, CUfunc_cache);\n  static cuFuncSetCacheConfig_p_h cuFuncSetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetCacheConfig(CUfunction, CUfunc_cache) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetCacheConfig_h == NULL)\n\tcuFuncSetCacheConfig_h = (cuFuncSetCacheConfig_p_h) dlsym(tau_handle,\"cuFuncSetCacheConfig\"); \n    if (cuFuncSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetCacheConfig_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetSize(CUfunction a1, unsigned int a2) {\n\n  typedef CUresult (*cuParamSetSize_p_h) (CUfunction, unsigned int);\n  static cuParamSetSize_p_h cuParamSetSize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetSize(CUfunction, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetSize_h == NULL)\n\tcuParamSetSize_h = (cuParamSetSize_p_h) dlsym(tau_handle,\"cuParamSetSize\"); \n    if (cuParamSetSize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetSize_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSeti(CUfunction a1, int a2, unsigned int a3) {\n\n  typedef CUresult (*cuParamSeti_p_h) (CUfunction, int, unsigned int);\n  static cuParamSeti_p_h cuParamSeti_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSeti(CUfunction, int, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSeti_h == NULL)\n\tcuParamSeti_h = (cuParamSeti_p_h) dlsym(tau_handle,\"cuParamSeti\"); \n    if (cuParamSeti_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSeti_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetf(CUfunction a1, int a2, float a3) {\n\n  typedef CUresult (*cuParamSetf_p_h) (CUfunction, int, float);\n  static cuParamSetf_p_h cuParamSetf_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetf(CUfunction, int, float) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetf_h == NULL)\n\tcuParamSetf_h = (cuParamSetf_p_h) dlsym(tau_handle,\"cuParamSetf\"); \n    if (cuParamSetf_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetf_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetv(CUfunction a1, int a2, void * a3, unsigned int a4) {\n\n  typedef CUresult (*cuParamSetv_p_h) (CUfunction, int, void *, unsigned int);\n  static cuParamSetv_p_h cuParamSetv_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetv(CUfunction, int, void *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetv_h == NULL)\n\tcuParamSetv_h = (cuParamSetv_p_h) dlsym(tau_handle,\"cuParamSetv\"); \n    if (cuParamSetv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetv_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunch(CUfunction a1) {\n\n  typedef CUresult (*cuLaunch_p_h) (CUfunction);\n  static cuLaunch_p_h cuLaunch_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunch(CUfunction) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunch_h == NULL)\n\tcuLaunch_h = (cuLaunch_p_h) dlsym(tau_handle,\"cuLaunch\"); \n    if (cuLaunch_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device, ctx, 0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunch_h)( a1);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId), \n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchKernel(CUfunction a1, \n\tunsigned int a2,\n\tunsigned int a3,\n\tunsigned int a4,\n\tunsigned int a5,\n\tunsigned int a6,\n\tunsigned int a7,\n\tunsigned int a8,\n\tCUstream     a9,\n\tvoid **      a10,\n\tvoid **      a11\n) {\n\n  typedef CUresult (*cuLaunchKernel_p_h) (CUfunction,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tCUstream    ,\n\tvoid **     ,\n\tvoid **     );\n  static cuLaunchKernel_p_h cuLaunchKernel_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchKernel(CUfunction, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, CUstream, void **, void **) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchKernel_h == NULL)\n\tcuLaunchKernel_h = (cuLaunchKernel_p_h) dlsym(tau_handle,\"cuLaunchKernel\"); \n    if (cuLaunchKernel_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device, ctx, 0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchKernel_h)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId), \n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchGrid(CUfunction a1, int a2, int a3) {\n\n  typedef CUresult (*cuLaunchGrid_p_h) (CUfunction, int, int);\n  static cuLaunchGrid_p_h cuLaunchGrid_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchGrid(CUfunction, int, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchGrid_h == NULL)\n\tcuLaunchGrid_h = (cuLaunchGrid_p_h) dlsym(tau_handle,\"cuLaunchGrid\"); \n    if (cuLaunchGrid_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device,ctx,0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchGrid_h)( a1,  a2,  a3);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId);\n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchGridAsync(CUfunction a1, int a2, int a3, CUstream a4) {\n\n  typedef CUresult (*cuLaunchGridAsync_p_h) (CUfunction, int, int, CUstream);\n  static cuLaunchGridAsync_p_h cuLaunchGridAsync_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchGridAsync(CUfunction, int, int, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchGridAsync_h == NULL)\n\tcuLaunchGridAsync_h = (cuLaunchGridAsync_p_h) dlsym(tau_handle,\"cuLaunchGridAsync\"); \n    if (cuLaunchGridAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device,ctx,a4);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchGridAsync_h)( a1,  a2,  a3,  a4);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId);\n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetTexRef(CUfunction a1, int a2, CUtexref a3) {\n\n  typedef CUresult (*cuParamSetTexRef_p_h) (CUfunction, int, CUtexref);\n  static cuParamSetTexRef_p_h cuParamSetTexRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetTexRef(CUfunction, int, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetTexRef_h == NULL)\n\tcuParamSetTexRef_h = (cuParamSetTexRef_p_h) dlsym(tau_handle,\"cuParamSetTexRef\"); \n    if (cuParamSetTexRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetTexRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetArray(CUtexref a1, CUarray a2, unsigned int a3) {\n\n  typedef CUresult (*cuTexRefSetArray_p_h) (CUtexref, CUarray, unsigned int);\n  static cuTexRefSetArray_p_h cuTexRefSetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetArray(CUtexref, CUarray, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetArray_h == NULL)\n\tcuTexRefSetArray_h = (cuTexRefSetArray_p_h) dlsym(tau_handle,\"cuTexRefSetArray\"); \n    if (cuTexRefSetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddress_v2(size_t * a1, CUtexref a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuTexRefSetAddress_v2_p_h) (size_t *, CUtexref, CUdeviceptr, size_t);\n  static cuTexRefSetAddress_v2_p_h cuTexRefSetAddress_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddress_v2(size_t *, CUtexref, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddress_v2_h == NULL)\n\tcuTexRefSetAddress_v2_h = (cuTexRefSetAddress_v2_p_h) dlsym(tau_handle,\"cuTexRefSetAddress_v2\"); \n    if (cuTexRefSetAddress_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddress_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddress2D_v2(CUtexref a1, const CUDA_ARRAY_DESCRIPTOR * a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuTexRefSetAddress2D_v2_p_h) (CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, size_t);\n  static cuTexRefSetAddress2D_v2_p_h cuTexRefSetAddress2D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddress2D_v2(CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddress2D_v2_h == NULL)\n\tcuTexRefSetAddress2D_v2_h = (cuTexRefSetAddress2D_v2_p_h) dlsym(tau_handle,\"cuTexRefSetAddress2D_v2\"); \n    if (cuTexRefSetAddress2D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddress2D_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFormat(CUtexref a1, CUarray_format a2, int a3) {\n\n  typedef CUresult (*cuTexRefSetFormat_p_h) (CUtexref, CUarray_format, int);\n  static cuTexRefSetFormat_p_h cuTexRefSetFormat_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFormat(CUtexref, CUarray_format, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFormat_h == NULL)\n\tcuTexRefSetFormat_h = (cuTexRefSetFormat_p_h) dlsym(tau_handle,\"cuTexRefSetFormat\"); \n    if (cuTexRefSetFormat_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFormat_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddressMode(CUtexref a1, int a2, CUaddress_mode a3) {\n\n  typedef CUresult (*cuTexRefSetAddressMode_p_h) (CUtexref, int, CUaddress_mode);\n  static cuTexRefSetAddressMode_p_h cuTexRefSetAddressMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddressMode(CUtexref, int, CUaddress_mode) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddressMode_h == NULL)\n\tcuTexRefSetAddressMode_h = (cuTexRefSetAddressMode_p_h) dlsym(tau_handle,\"cuTexRefSetAddressMode\"); \n    if (cuTexRefSetAddressMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddressMode_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFilterMode(CUtexref a1, CUfilter_mode a2) {\n\n  typedef CUresult (*cuTexRefSetFilterMode_p_h) (CUtexref, CUfilter_mode);\n  static cuTexRefSetFilterMode_p_h cuTexRefSetFilterMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFilterMode(CUtexref, CUfilter_mode) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFilterMode_h == NULL)\n\tcuTexRefSetFilterMode_h = (cuTexRefSetFilterMode_p_h) dlsym(tau_handle,\"cuTexRefSetFilterMode\"); \n    if (cuTexRefSetFilterMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFilterMode_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFlags(CUtexref a1, unsigned int a2) {\n\n  typedef CUresult (*cuTexRefSetFlags_p_h) (CUtexref, unsigned int);\n  static cuTexRefSetFlags_p_h cuTexRefSetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFlags(CUtexref, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFlags_h == NULL)\n\tcuTexRefSetFlags_h = (cuTexRefSetFlags_p_h) dlsym(tau_handle,\"cuTexRefSetFlags\"); \n    if (cuTexRefSetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetAddress_v2(CUdeviceptr * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetAddress_v2_p_h) (CUdeviceptr *, CUtexref);\n  static cuTexRefGetAddress_v2_p_h cuTexRefGetAddress_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetAddress_v2(CUdeviceptr *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetAddress_v2_h == NULL)\n\tcuTexRefGetAddress_v2_h = (cuTexRefGetAddress_v2_p_h) dlsym(tau_handle,\"cuTexRefGetAddress_v2\"); \n    if (cuTexRefGetAddress_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetAddress_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetArray(CUarray * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetArray_p_h) (CUarray *, CUtexref);\n  static cuTexRefGetArray_p_h cuTexRefGetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetArray(CUarray *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetArray_h == NULL)\n\tcuTexRefGetArray_h = (cuTexRefGetArray_p_h) dlsym(tau_handle,\"cuTexRefGetArray\"); \n    if (cuTexRefGetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetArray_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetAddressMode(CUaddress_mode * a1, CUtexref a2, int a3) {\n\n  typedef CUresult (*cuTexRefGetAddressMode_p_h) (CUaddress_mode *, CUtexref, int);\n  static cuTexRefGetAddressMode_p_h cuTexRefGetAddressMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetAddressMode(CUaddress_mode *, CUtexref, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetAddressMode_h == NULL)\n\tcuTexRefGetAddressMode_h = (cuTexRefGetAddressMode_p_h) dlsym(tau_handle,\"cuTexRefGetAddressMode\"); \n    if (cuTexRefGetAddressMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetAddressMode_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFilterMode(CUfilter_mode * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetFilterMode_p_h) (CUfilter_mode *, CUtexref);\n  static cuTexRefGetFilterMode_p_h cuTexRefGetFilterMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFilterMode(CUfilter_mode *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFilterMode_h == NULL)\n\tcuTexRefGetFilterMode_h = (cuTexRefGetFilterMode_p_h) dlsym(tau_handle,\"cuTexRefGetFilterMode\"); \n    if (cuTexRefGetFilterMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFilterMode_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFormat(CUarray_format * a1, int * a2, CUtexref a3) {\n\n  typedef CUresult (*cuTexRefGetFormat_p_h) (CUarray_format *, int *, CUtexref);\n  static cuTexRefGetFormat_p_h cuTexRefGetFormat_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFormat(CUarray_format *, int *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFormat_h == NULL)\n\tcuTexRefGetFormat_h = (cuTexRefGetFormat_p_h) dlsym(tau_handle,\"cuTexRefGetFormat\"); \n    if (cuTexRefGetFormat_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFormat_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFlags(unsigned int * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetFlags_p_h) (unsigned int *, CUtexref);\n  static cuTexRefGetFlags_p_h cuTexRefGetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFlags(unsigned int *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFlags_h == NULL)\n\tcuTexRefGetFlags_h = (cuTexRefGetFlags_p_h) dlsym(tau_handle,\"cuTexRefGetFlags\"); \n    if (cuTexRefGetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefCreate(CUtexref * a1) {\n\n  typedef CUresult (*cuTexRefCreate_p_h) (CUtexref *);\n  static cuTexRefCreate_p_h cuTexRefCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefCreate(CUtexref *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefCreate_h == NULL)\n\tcuTexRefCreate_h = (cuTexRefCreate_p_h) dlsym(tau_handle,\"cuTexRefCreate\"); \n    if (cuTexRefCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefCreate_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefDestroy(CUtexref a1) {\n\n  typedef CUresult (*cuTexRefDestroy_p_h) (CUtexref);\n  static cuTexRefDestroy_p_h cuTexRefDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefDestroy(CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefDestroy_h == NULL)\n\tcuTexRefDestroy_h = (cuTexRefDestroy_p_h) dlsym(tau_handle,\"cuTexRefDestroy\"); \n    if (cuTexRefDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuSurfRefSetArray(CUsurfref a1, CUarray a2, unsigned int a3) {\n\n  typedef CUresult (*cuSurfRefSetArray_p_h) (CUsurfref, CUarray, unsigned int);\n  static cuSurfRefSetArray_p_h cuSurfRefSetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuSurfRefSetArray(CUsurfref, CUarray, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuSurfRefSetArray_h == NULL)\n\tcuSurfRefSetArray_h = (cuSurfRefSetArray_p_h) dlsym(tau_handle,\"cuSurfRefSetArray\"); \n    if (cuSurfRefSetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuSurfRefSetArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuSurfRefGetArray(CUarray * a1, CUsurfref a2) {\n\n  typedef CUresult (*cuSurfRefGetArray_p_h) (CUarray *, CUsurfref);\n  static cuSurfRefGetArray_p_h cuSurfRefGetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuSurfRefGetArray(CUarray *, CUsurfref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuSurfRefGetArray_h == NULL)\n\tcuSurfRefGetArray_h = (cuSurfRefGetArray_p_h) dlsym(tau_handle,\"cuSurfRefGetArray\"); \n    if (cuSurfRefGetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuSurfRefGetArray_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsUnregisterResource(CUgraphicsResource a1) {\n\n  typedef CUresult (*cuGraphicsUnregisterResource_p_h) (CUgraphicsResource);\n  static cuGraphicsUnregisterResource_p_h cuGraphicsUnregisterResource_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsUnregisterResource(CUgraphicsResource) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsUnregisterResource_h == NULL)\n\tcuGraphicsUnregisterResource_h = (cuGraphicsUnregisterResource_p_h) dlsym(tau_handle,\"cuGraphicsUnregisterResource\"); \n    if (cuGraphicsUnregisterResource_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsUnregisterResource_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsSubResourceGetMappedArray(CUarray * a1, CUgraphicsResource a2, unsigned int a3, unsigned int a4) {\n\n  typedef CUresult (*cuGraphicsSubResourceGetMappedArray_p_h) (CUarray *, CUgraphicsResource, unsigned int, unsigned int);\n  static cuGraphicsSubResourceGetMappedArray_p_h cuGraphicsSubResourceGetMappedArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsSubResourceGetMappedArray(CUarray *, CUgraphicsResource, unsigned int, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsSubResourceGetMappedArray_h == NULL)\n\tcuGraphicsSubResourceGetMappedArray_h = (cuGraphicsSubResourceGetMappedArray_p_h) dlsym(tau_handle,\"cuGraphicsSubResourceGetMappedArray\"); \n    if (cuGraphicsSubResourceGetMappedArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsSubResourceGetMappedArray_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * a1, size_t * a2, CUgraphicsResource a3) {\n\n  typedef CUresult (*cuGraphicsResourceGetMappedPointer_v2_p_h) (CUdeviceptr *, size_t *, CUgraphicsResource);\n  static cuGraphicsResourceGetMappedPointer_v2_p_h cuGraphicsResourceGetMappedPointer_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *, size_t *, CUgraphicsResource) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsResourceGetMappedPointer_v2_h == NULL)\n\tcuGraphicsResourceGetMappedPointer_v2_h = (cuGraphicsResourceGetMappedPointer_v2_p_h) dlsym(tau_handle,\"cuGraphicsResourceGetMappedPointer_v2\"); \n    if (cuGraphicsResourceGetMappedPointer_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsResourceGetMappedPointer_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource a1, unsigned int a2) {\n\n  typedef CUresult (*cuGraphicsResourceSetMapFlags_p_h) (CUgraphicsResource, unsigned int);\n  static cuGraphicsResourceSetMapFlags_p_h cuGraphicsResourceSetMapFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsResourceSetMapFlags_h == NULL)\n\tcuGraphicsResourceSetMapFlags_h = (cuGraphicsResourceSetMapFlags_p_h) dlsym(tau_handle,\"cuGraphicsResourceSetMapFlags\"); \n    if (cuGraphicsResourceSetMapFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsResourceSetMapFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsMapResources(unsigned int a1, CUgraphicsResource * a2, CUstream a3) {\n\n  typedef CUresult (*cuGraphicsMapResources_p_h) (unsigned int, CUgraphicsResource *, CUstream);\n  static cuGraphicsMapResources_p_h cuGraphicsMapResources_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsMapResources(unsigned int, CUgraphicsResource *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsMapResources_h == NULL)\n\tcuGraphicsMapResources_h = (cuGraphicsMapResources_p_h) dlsym(tau_handle,\"cuGraphicsMapResources\"); \n    if (cuGraphicsMapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsMapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsUnmapResources(unsigned int a1, CUgraphicsResource * a2, CUstream a3) {\n\n  typedef CUresult (*cuGraphicsUnmapResources_p_h) (unsigned int, CUgraphicsResource *, CUstream);\n  static cuGraphicsUnmapResources_p_h cuGraphicsUnmapResources_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsUnmapResources(unsigned int, CUgraphicsResource *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsUnmapResources_h == NULL)\n\tcuGraphicsUnmapResources_h = (cuGraphicsUnmapResources_p_h) dlsym(tau_handle,\"cuGraphicsUnmapResources\"); \n    if (cuGraphicsUnmapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsUnmapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGetExportTable(const void ** a1, const CUuuid * a2) {\n\n  typedef CUresult (*cuGetExportTable_p_h) (const void **, const CUuuid *);\n  static cuGetExportTable_p_h cuGetExportTable_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGetExportTable(const void **, const CUuuid *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGetExportTable_h == NULL)\n\tcuGetExportTable_h = (cuGetExportTable_p_h) dlsym(tau_handle,\"cuGetExportTable\"); \n    if (cuGetExportTable_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGetExportTable_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/cuda/cudart_wrap.cpp": "#include <cuda_runtime_api.h>\n#include <Profile/Profiler.h>\n#include <Profile/TauGpuAdapterCUDA.h>\n#include <dlfcn.h>\n#include <stdio.h>\n#include <queue>\n#include <iostream>\n#include<map>\nusing namespace std;\n\n#define TRACK_MEMORY\n#define TRACK_KERNEL\n#define KERNEL_EVENT_BUFFFER 4096\n\n#define CUDART_API TAU_USER\n#define CUDA_SYNC TAU_USER\n\n//#define REGISTER_SYNC() Tau_cupti_register_sync_event()\n#define REGISTER_SYNC() Tau_cuda_register_sync_event()\n\n#ifdef CUPTI\nextern void Tau_CuptiLayer_finalize();\nextern void Tau_cupti_register_sync_event();\n#endif //CUPTI\n\nconst char * cudart_orig_libname = \"libcudart.so\";\nstatic void *cudart_handle = NULL;\ncudaStream_t curr_stream;\n\nvoid tau_track_memory(int kind, int count)\n{\n\tstatic bool init = false;\n\tstatic TauContextUserEvent *MemoryCopyEventHtoD;\n\tstatic TauContextUserEvent *MemoryCopyEventDtoH;\n\tstatic TauContextUserEvent *MemoryCopyEventDtoD;\n\tif (!init)\n\t{\n\t\t\n\t\tTau_get_context_userevent((void **) &MemoryCopyEventHtoD, \"Bytes copied from Host to Device\");\n\t\tTau_get_context_userevent((void **) &MemoryCopyEventDtoH, \"Bytes copied from Device to Host\");\n\t\tTau_get_context_userevent((void **) &MemoryCopyEventDtoD, \"Bytes copied (Other)\");\n\t\tinit = true;\n\t}\n\t/*printf(\"initalize counters. Number of events: %ld, %ld, %ld.\\n\", \n\tMemoryCopyEventHtoD->GetNumEvents(0),\n\tMemoryCopyEventDtoH->GetNumEvents(0),\n\tMemoryCopyEventDtoD->GetNumEvents(0));*/\n\t//printf(\"tracking memory.... %ld.\\n\", count);\n\tif (kind == cudaMemcpyHostToDevice)\n\t\tTAU_CONTEXT_EVENT(MemoryCopyEventHtoD, count);\n\tif (kind == cudaMemcpyDeviceToHost)\n\t\tTAU_CONTEXT_EVENT(MemoryCopyEventDtoH, count);\n\tif (kind == cudaMemcpyDeviceToDevice)\n\t\tTAU_CONTEXT_EVENT(MemoryCopyEventDtoD, count);\n}\t\n\n//cudaThreadExit is depercated to be replaced with cudaDeviceReset.\n\n#if CUDART_VERSION >= 4000\ncudaError_t cudaDeviceReset() {\n\n  typedef cudaError_t (*cudaDeviceReset_p) ();\n  static cudaDeviceReset_p cudaDeviceReset_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaDeviceReset(void) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaDeviceReset_h == NULL)\n\tcudaDeviceReset_h = (cudaDeviceReset_p) dlsym(cudart_handle,\"cudaDeviceReset\"); \n    if (cudaDeviceReset_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\t//printf(\"in cudaDeviceReset(), check for kernel events.\\n\");\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif \n  TAU_PROFILE_START(t);\n#ifdef CUPTI\n\tTau_CuptiLayer_finalize();\n#endif //CUPTI\n  retval  =  (*cudaDeviceReset_h)();\n  TAU_PROFILE_STOP(t);\n\n\tTau_cuda_exit();\n  }\n  return retval;\n\n}\n\n\n#endif\n\n\n\ncudaError_t cudaThreadExit() {\n\n  typedef cudaError_t (*cudaThreadExit_p) ();\n  static cudaThreadExit_p cudaThreadExit_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadExit(void) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadExit_h == NULL)\n\tcudaThreadExit_h = (cudaThreadExit_p) dlsym(cudart_handle,\"cudaThreadExit\"); \n    if (cudaThreadExit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\t//printf(\"in cudaThreadExit(), check for kernel events.\\n\");\n//#ifdef TRACK_KERNEL\n\t//REGISTER_SYNC();\n//#endif \n  TAU_PROFILE_START(t);\n#ifdef CUPTI\n\tTau_CuptiLayer_finalize();\n#endif //CUPTI\n  retval  =  (*cudaThreadExit_h)();\n  TAU_PROFILE_STOP(t);\n\n\tTau_cuda_exit();\n  }\n  return retval;\n\n}\n\ncudaError_t cudaThreadSynchronize() {\n\n  typedef cudaError_t (*cudaThreadSynchronize_p) ();\n  static cudaThreadSynchronize_p cudaThreadSynchronize_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadSynchronize(void) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadSynchronize_h == NULL)\n\tcudaThreadSynchronize_h = (cudaThreadSynchronize_p) dlsym(cudart_handle,\"cudaThreadSynchronize\"); \n    if (cudaThreadSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaThreadSynchronize_h)();\n  TAU_PROFILE_STOP(t);\n\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif\n\n  }\n  return retval;\n\n}\ncudaError_t cudaDeviceSynchronize() {\n\n  typedef cudaError_t (*cudaDeviceSynchronize_p) ();\n  static cudaDeviceSynchronize_p cudaDeviceSynchronize_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaDeviceSynchronize(void) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaDeviceSynchronize_h == NULL)\n\tcudaDeviceSynchronize_h = (cudaDeviceSynchronize_p) dlsym(cudart_handle,\"cudaDeviceSynchronize\"); \n    if (cudaDeviceSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaDeviceSynchronize_h)();\n  TAU_PROFILE_STOP(t);\n\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif\n\n  }\n  return retval;\n\n}\n/*\ncudaError_t cudaThreadSetLimit(enum cudaLimit a1, size_t a2) {\n\n  typedef cudaError_t (*cudaThreadSetLimit_p) (enum cudaLimit, size_t);\n  static cudaThreadSetLimit_p cudaThreadSetLimit_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadSetLimit(enum cudaLimit, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadSetLimit_h == NULL)\n\tcudaThreadSetLimit_h = (cudaThreadSetLimit_p) dlsym(cudart_handle,\"cudaThreadSetLimit\"); \n    if (cudaThreadSetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaThreadSetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaThreadGetLimit(size_t * a1, enum cudaLimit a2) {\n\n  typedef cudaError_t (*cudaThreadGetLimit_p) (size_t *, enum cudaLimit);\n  static cudaThreadGetLimit_p cudaThreadGetLimit_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadGetLimit(size_t *, enum cudaLimit) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadGetLimit_h == NULL)\n\tcudaThreadGetLimit_h = (cudaThreadGetLimit_p) dlsym(cudart_handle,\"cudaThreadGetLimit\"); \n    if (cudaThreadGetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaThreadGetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache * a1) {\n\n  typedef cudaError_t (*cudaThreadGetCacheConfig_p) (enum cudaFuncCache *);\n  static cudaThreadGetCacheConfig_p cudaThreadGetCacheConfig_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadGetCacheConfig_h == NULL)\n\tcudaThreadGetCacheConfig_h = (cudaThreadGetCacheConfig_p) dlsym(cudart_handle,\"cudaThreadGetCacheConfig\"); \n    if (cudaThreadGetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaThreadGetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache a1) {\n\n  typedef cudaError_t (*cudaThreadSetCacheConfig_p) (enum cudaFuncCache);\n  static cudaThreadSetCacheConfig_p cudaThreadSetCacheConfig_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaThreadSetCacheConfig_h == NULL)\n\tcudaThreadSetCacheConfig_h = (cudaThreadSetCacheConfig_p) dlsym(cudart_handle,\"cudaThreadSetCacheConfig\"); \n    if (cudaThreadSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaThreadSetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}*/\n\ncudaError_t cudaGetLastError() {\n\n  typedef cudaError_t (*cudaGetLastError_p) ();\n  static cudaGetLastError_p cudaGetLastError_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetLastError(void) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetLastError_h == NULL)\n\tcudaGetLastError_h = (cudaGetLastError_p) dlsym(cudart_handle,\"cudaGetLastError\"); \n    if (cudaGetLastError_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetLastError_h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaPeekAtLastError() {\n\n  typedef cudaError_t (*cudaPeekAtLastError_p) ();\n  static cudaPeekAtLastError_p cudaPeekAtLastError_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaPeekAtLastError(void) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaPeekAtLastError_h == NULL)\n\tcudaPeekAtLastError_h = (cudaPeekAtLastError_p) dlsym(cudart_handle,\"cudaPeekAtLastError\"); \n    if (cudaPeekAtLastError_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaPeekAtLastError_h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nconst char * cudaGetErrorString(cudaError_t a1) {\n\n  typedef const char * (*cudaGetErrorString_p) (cudaError_t);\n  static cudaGetErrorString_p cudaGetErrorString_h = NULL;\n  const char * retval;\n  TAU_PROFILE_TIMER(t,\"const char *cudaGetErrorString(cudaError_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetErrorString_h == NULL)\n\tcudaGetErrorString_h = (cudaGetErrorString_p) dlsym(cudart_handle,\"cudaGetErrorString\"); \n    if (cudaGetErrorString_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetErrorString_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetDeviceCount(int * a1) {\n\n  typedef cudaError_t (*cudaGetDeviceCount_p) (int *);\n  static cudaGetDeviceCount_p cudaGetDeviceCount_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetDeviceCount(int *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetDeviceCount_h == NULL)\n\tcudaGetDeviceCount_h = (cudaGetDeviceCount_p) dlsym(cudart_handle,\"cudaGetDeviceCount\"); \n    if (cudaGetDeviceCount_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetDeviceCount_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetDeviceProperties(struct cudaDeviceProp * a1, int a2) {\n\n  typedef cudaError_t (*cudaGetDeviceProperties_p) (struct cudaDeviceProp *, int);\n  static cudaGetDeviceProperties_p cudaGetDeviceProperties_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *, int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetDeviceProperties_h == NULL)\n\tcudaGetDeviceProperties_h = (cudaGetDeviceProperties_p) dlsym(cudart_handle,\"cudaGetDeviceProperties\"); \n    if (cudaGetDeviceProperties_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetDeviceProperties_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaChooseDevice(int * a1, const struct cudaDeviceProp * a2) {\n\n  typedef cudaError_t (*cudaChooseDevice_p) (int *, const struct cudaDeviceProp *);\n  static cudaChooseDevice_p cudaChooseDevice_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaChooseDevice(int *, const struct cudaDeviceProp *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaChooseDevice_h == NULL)\n\tcudaChooseDevice_h = (cudaChooseDevice_p) dlsym(cudart_handle,\"cudaChooseDevice\"); \n    if (cudaChooseDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaChooseDevice_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetDevice(int a1) {\n\n  typedef cudaError_t (*cudaSetDevice_p) (int);\n  static cudaSetDevice_p cudaSetDevice_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetDevice(int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetDevice_h == NULL)\n\tcudaSetDevice_h = (cudaSetDevice_p) dlsym(cudart_handle,\"cudaSetDevice\"); \n    if (cudaSetDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetDevice_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetDevice(int * a1) {\n\n  typedef cudaError_t (*cudaGetDevice_p) (int *);\n  static cudaGetDevice_p cudaGetDevice_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetDevice(int *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetDevice_h == NULL)\n\tcudaGetDevice_h = (cudaGetDevice_p) dlsym(cudart_handle,\"cudaGetDevice\"); \n    if (cudaGetDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetDevice_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetValidDevices(int * a1, int a2) {\n\n  typedef cudaError_t (*cudaSetValidDevices_p) (int *, int);\n  static cudaSetValidDevices_p cudaSetValidDevices_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetValidDevices(int *, int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetValidDevices_h == NULL)\n\tcudaSetValidDevices_h = (cudaSetValidDevices_p) dlsym(cudart_handle,\"cudaSetValidDevices\"); \n    if (cudaSetValidDevices_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetValidDevices_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetDeviceFlags(unsigned int a1) {\n\n  typedef cudaError_t (*cudaSetDeviceFlags_p) (unsigned int);\n  static cudaSetDeviceFlags_p cudaSetDeviceFlags_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetDeviceFlags(unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetDeviceFlags_h == NULL)\n\tcudaSetDeviceFlags_h = (cudaSetDeviceFlags_p) dlsym(cudart_handle,\"cudaSetDeviceFlags\"); \n    if (cudaSetDeviceFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetDeviceFlags_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaStreamCreate(cudaStream_t * a1) {\n\n  typedef cudaError_t (*cudaStreamCreate_p) (cudaStream_t *);\n  static cudaStreamCreate_p cudaStreamCreate_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaStreamCreate(cudaStream_t *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaStreamCreate_h == NULL)\n\tcudaStreamCreate_h = (cudaStreamCreate_p) dlsym(cudart_handle,\"cudaStreamCreate\"); \n    if (cudaStreamCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaStreamCreate_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaStreamDestroy(cudaStream_t a1) {\n\n  typedef cudaError_t (*cudaStreamDestroy_p) (cudaStream_t);\n  static cudaStreamDestroy_p cudaStreamDestroy_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaStreamDestroy(cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaStreamDestroy_h == NULL)\n\tcudaStreamDestroy_h = (cudaStreamDestroy_p) dlsym(cudart_handle,\"cudaStreamDestroy\"); \n    if (cudaStreamDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaStreamDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaStreamWaitEvent(cudaStream_t a1, cudaEvent_t a2, unsigned int a3) {\n\n  typedef cudaError_t (*cudaStreamWaitEvent_p) (cudaStream_t, cudaEvent_t, unsigned int);\n  static cudaStreamWaitEvent_p cudaStreamWaitEvent_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaStreamWaitEvent(cudaStream_t, cudaEvent_t, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaStreamWaitEvent_h == NULL)\n\tcudaStreamWaitEvent_h = (cudaStreamWaitEvent_p) dlsym(cudart_handle,\"cudaStreamWaitEvent\"); \n    if (cudaStreamWaitEvent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaStreamWaitEvent_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaStreamSynchronize(cudaStream_t a1) {\n\n  typedef cudaError_t (*cudaStreamSynchronize_p) (cudaStream_t);\n  static cudaStreamSynchronize_p cudaStreamSynchronize_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaStreamSynchronize(cudaStream_t) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaStreamSynchronize_h == NULL)\n\tcudaStreamSynchronize_h = (cudaStreamSynchronize_p) dlsym(cudart_handle,\"cudaStreamSynchronize\"); \n    if (cudaStreamSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaStreamSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n\t\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif\n  }\n  return retval;\n\n}\n\ncudaError_t cudaStreamQuery(cudaStream_t a1) {\n\n  typedef cudaError_t (*cudaStreamQuery_p) (cudaStream_t);\n  static cudaStreamQuery_p cudaStreamQuery_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaStreamQuery(cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaStreamQuery_h == NULL)\n\tcudaStreamQuery_h = (cudaStreamQuery_p) dlsym(cudart_handle,\"cudaStreamQuery\"); \n    if (cudaStreamQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaStreamQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventCreate(cudaEvent_t * a1) {\n\n  typedef cudaError_t (*cudaEventCreate_p) (cudaEvent_t *);\n  static cudaEventCreate_p cudaEventCreate_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventCreate(cudaEvent_t *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventCreate_h == NULL)\n\tcudaEventCreate_h = (cudaEventCreate_p) dlsym(cudart_handle,\"cudaEventCreate\"); \n    if (cudaEventCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventCreate_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventCreateWithFlags(cudaEvent_t * a1, unsigned int a2) {\n\n  typedef cudaError_t (*cudaEventCreateWithFlags_p) (cudaEvent_t *, unsigned int);\n  static cudaEventCreateWithFlags_p cudaEventCreateWithFlags_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventCreateWithFlags(cudaEvent_t *, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventCreateWithFlags_h == NULL)\n\tcudaEventCreateWithFlags_h = (cudaEventCreateWithFlags_p) dlsym(cudart_handle,\"cudaEventCreateWithFlags\"); \n    if (cudaEventCreateWithFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventCreateWithFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventRecord(cudaEvent_t a1, cudaStream_t a2) {\n\n  typedef cudaError_t (*cudaEventRecord_p) (cudaEvent_t, cudaStream_t);\n  static cudaEventRecord_p cudaEventRecord_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventRecord(cudaEvent_t, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventRecord_h == NULL)\n\tcudaEventRecord_h = (cudaEventRecord_p) dlsym(cudart_handle,\"cudaEventRecord\"); \n    if (cudaEventRecord_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventRecord_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventQuery_nosync(cudaEvent_t a1) {\n\n  typedef cudaError_t (*cudaEventQuery_p) (cudaEvent_t);\n  static cudaEventQuery_p cudaEventQuery_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventQuery(cudaEvent_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventQuery_h == NULL)\n\tcudaEventQuery_h = (cudaEventQuery_p) dlsym(cudart_handle,\"cudaEventQuery\"); \n    if (cudaEventQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventQuery(cudaEvent_t a1) {\n\n  typedef cudaError_t (*cudaEventQuery_p) (cudaEvent_t);\n  static cudaEventQuery_p cudaEventQuery_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventQuery(cudaEvent_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventQuery_h == NULL)\n\tcudaEventQuery_h = (cudaEventQuery_p) dlsym(cudart_handle,\"cudaEventQuery\"); \n    if (cudaEventQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventSynchronize(cudaEvent_t a1) {\n\n  typedef cudaError_t (*cudaEventSynchronize_p) (cudaEvent_t);\n  static cudaEventSynchronize_p cudaEventSynchronize_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventSynchronize(cudaEvent_t) C\", \"\", CUDA_SYNC);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventSynchronize_h == NULL)\n\tcudaEventSynchronize_h = (cudaEventSynchronize_p) dlsym(cudart_handle,\"cudaEventSynchronize\"); \n    if (cudaEventSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n\n//#ifdef TRACK_KERNEL\n\tREGISTER_SYNC();\n//#endif\n\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventDestroy(cudaEvent_t a1) {\n\n  typedef cudaError_t (*cudaEventDestroy_p) (cudaEvent_t);\n  static cudaEventDestroy_p cudaEventDestroy_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventDestroy(cudaEvent_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventDestroy_h == NULL)\n\tcudaEventDestroy_h = (cudaEventDestroy_p) dlsym(cudart_handle,\"cudaEventDestroy\"); \n    if (cudaEventDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaEventElapsedTime(float * a1, cudaEvent_t a2, cudaEvent_t a3) {\n\n  typedef cudaError_t (*cudaEventElapsedTime_p) (float *, cudaEvent_t, cudaEvent_t);\n  static cudaEventElapsedTime_p cudaEventElapsedTime_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaEventElapsedTime_h == NULL)\n\tcudaEventElapsedTime_h = (cudaEventElapsedTime_p) dlsym(cudart_handle,\"cudaEventElapsedTime\"); \n    if (cudaEventElapsedTime_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaEventElapsedTime_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaConfigureCall(dim3 a1, dim3 a2, size_t a3, cudaStream_t a4) {\n\n  typedef cudaError_t (*cudaConfigureCall_p) (dim3, dim3, size_t, cudaStream_t);\n  static cudaConfigureCall_p cudaConfigureCall_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaConfigureCall(dim3, dim3, size_t, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaConfigureCall_h == NULL)\n\tcudaConfigureCall_h = (cudaConfigureCall_p) dlsym(cudart_handle,\"cudaConfigureCall\"); \n    if (cudaConfigureCall_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\n\t//cout << \"in cudaConfigure... stream is \" << a4 << endl;\n\t/*\n\tif (a4 == 0)\n\t{\n\t\tcudaStreamCreate(&curr_stream);\n\t}\n\telse\n\t{\n\t\tcurr_stream = a4;\n\t}*/\n\n\tcurr_stream = a4;\n\t\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaConfigureCall_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetupArgument(const void * a1, size_t a2, size_t a3) {\n\n  typedef cudaError_t (*cudaSetupArgument_p) (const void *, size_t, size_t);\n  static cudaSetupArgument_p cudaSetupArgument_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetupArgument(const void *, size_t, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetupArgument_h == NULL)\n\tcudaSetupArgument_h = (cudaSetupArgument_p) dlsym(cudart_handle,\"cudaSetupArgument\"); \n    if (cudaSetupArgument_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetupArgument_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n/*\ncudaError_t cudaFuncSetCacheConfig(const char * a1, enum cudaFuncCache a2) {\n\n  typedef cudaError_t (*cudaFuncSetCacheConfig_p) (const char *, enum cudaFuncCache);\n  static cudaFuncSetCacheConfig_p cudaFuncSetCacheConfig_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaFuncSetCacheConfig(const char *, enum cudaFuncCache) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaFuncSetCacheConfig_h == NULL)\n\tcudaFuncSetCacheConfig_h = (cudaFuncSetCacheConfig_p) dlsym(cudart_handle,\"cudaFuncSetCacheConfig\"); \n    if (cudaFuncSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaFuncSetCacheConfig_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}*/\n\ntypedef struct kernelName_t\n{\n\tconst char* host;\n\tconst char* dev;\n\tstruct kernelName_t *next;\n} kernelName;\n\nkernelName *kernelNamesHead = NULL;\n\n/*\n * This function is being called before execution of a cuda program for every\n * cuda kernel (host_runtime.h)\n * Borrowed from VampirTrace.\n */\n\n\n//extern \"C\" void __cudaRegisterFunction(void ** a1, const char * a2, char * a3, const char * a4, int a5, uint3 * a6, uint3 * a7, dim3 * a8, dim3 * a9, int * a10);\n\nextern \"C\" {\n\nvoid __cudaRegisterFunction(void ** a1, const char * a2, char * a3, const char * a4, int a5, uint3 * a6, uint3 * a7, dim3 * a8, dim3 * a9, int * a10) {\n\n\t//printf(\"*** in __cudaRegisterFunction.\\n\");\n\t//printf(\"Kernel name is: %s.\\n\", a3);\n  typedef void (*__cudaRegisterFunction_p_h) (void **, const char *, char *, const char *, int, uint3 *, uint3 *, dim3 *, dim3 *, int *);\n  static __cudaRegisterFunction_p_h __cudaRegisterFunction_h = NULL;\n\t\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n  } \n  else { \n    if (__cudaRegisterFunction_h == NULL)\n\t\t\t__cudaRegisterFunction_h = (__cudaRegisterFunction_p_h) dlsym(cudart_handle,\"__cudaRegisterFunction\"); \n    if (__cudaRegisterFunction_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n    }\n\t(*__cudaRegisterFunction_h)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n\t} \n\n\t//printf(\"adding pair, host: %d .\\n\", a2);\n\t//printf(\"adding pair, dev: %s .\\n\", a3);\n\n\tkernelName *new_name_pair = (kernelName*) malloc(sizeof(kernelName));\n\tnew_name_pair->host = a2;\n\tnew_name_pair->dev = a3;\n\tnew_name_pair->next = kernelNamesHead;\n\tkernelNamesHead = new_name_pair;\n\n}\n\n}\n\ncudaError_t cudaLaunch(const char * a1) {\n\n  typedef cudaError_t (*cudaLaunch_p) (const char *);\n  static cudaLaunch_p cudaLaunch_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaLaunch(const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaLaunch_h == NULL)\n\tcudaLaunch_h = (cudaLaunch_p) dlsym(cudart_handle,\"cudaLaunch\"); \n    if (cudaLaunch_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\t\t\n\t\t//printf(\"in cudaLaunch, TAU wrap.\\n\");\n\t\t//printf(\"cuda kernel: %s.\\n\", kernelName);\n  \n\t\tTAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\t//printf(\"tracking kernel on node: %d.\\n\", RtsLayer::myNode());\n\t\t\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcudaGetDevice(&device);\n\t\t//printf(\"lookup, host name: %s.\\n\", a1);\n\t\tkernelName *found = NULL;\n\t\t\n\t\tfound = kernelNamesHead;\n\n\t\t//printf(\"looking for %d .\\n\", a1);\n\t\tCudaRuntimeGpuEvent *gE;\n\t\twhile (found != NULL)\n\t\t{\n\t\t\tif (a1 == found->host)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfound = found->next;\n\t\t}\n\t\tif (found == NULL)\n\t\t{\n\t\t\tprintf(\"TAU: ERROR cannot find kernel name.\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//printf(\"found host %d .\\n\", found->host);\n\t\t\t//printf(\"found  dev %s .\\n\", found->dev);\n\n\t\t\t//make copy.\n\t\t\t//char device_name[1024];\n\t\t\t//strcpy(device_name, found->dev);\n\t    //cout << \"in cudaLaunch... stream is \" << curr_stream << endl;\n\t\t\tgE = new CudaRuntimeGpuEvent(found->dev, device, curr_stream); \n\t\t\tTau_cuda_enqueue_kernel_enter_event(gE);\n\t\t}\n#endif\n\t\tretval  =  (*cudaLaunch_h)( a1);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gE);\n#endif\n\t\tTAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes * a1, const char * a2) {\n\n  typedef cudaError_t (*cudaFuncGetAttributes_p) (struct cudaFuncAttributes *, const char *);\n  static cudaFuncGetAttributes_p cudaFuncGetAttributes_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *, const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaFuncGetAttributes_h == NULL)\n\tcudaFuncGetAttributes_h = (cudaFuncGetAttributes_p) dlsym(cudart_handle,\"cudaFuncGetAttributes\"); \n    if (cudaFuncGetAttributes_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaFuncGetAttributes_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetDoubleForDevice(double * a1) {\n\n  typedef cudaError_t (*cudaSetDoubleForDevice_p) (double *);\n  static cudaSetDoubleForDevice_p cudaSetDoubleForDevice_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetDoubleForDevice(double *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetDoubleForDevice_h == NULL)\n\tcudaSetDoubleForDevice_h = (cudaSetDoubleForDevice_p) dlsym(cudart_handle,\"cudaSetDoubleForDevice\"); \n    if (cudaSetDoubleForDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetDoubleForDevice_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaSetDoubleForHost(double * a1) {\n\n  typedef cudaError_t (*cudaSetDoubleForHost_p) (double *);\n  static cudaSetDoubleForHost_p cudaSetDoubleForHost_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaSetDoubleForHost(double *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaSetDoubleForHost_h == NULL)\n\tcudaSetDoubleForHost_h = (cudaSetDoubleForHost_p) dlsym(cudart_handle,\"cudaSetDoubleForHost\"); \n    if (cudaSetDoubleForHost_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaSetDoubleForHost_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMallocManaged(void ** a1, size_t a2, unsigned int a3) {\n  typedef cudaError_t (*cudaMallocManaged_p) (void **, size_t, unsigned int);\n  static cudaMallocManaged_p cudaMallocManaged_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMallocManaged(void **, size_t, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMallocManaged_h == NULL)\n\tcudaMallocManaged_h = (cudaMallocManaged_p) dlsym(cudart_handle,\"cudaMallocManaged\"); \n    if (cudaMallocManaged_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMallocManaged_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMalloc(void ** a1, size_t a2) {\n\n  typedef cudaError_t (*cudaMalloc_p) (void **, size_t);\n  static cudaMalloc_p cudaMalloc_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMalloc(void **, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMalloc_h == NULL)\n\tcudaMalloc_h = (cudaMalloc_p) dlsym(cudart_handle,\"cudaMalloc\"); \n    if (cudaMalloc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMalloc_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMallocHost(void ** a1, size_t a2) {\n\n  typedef cudaError_t (*cudaMallocHost_p) (void **, size_t);\n  static cudaMallocHost_p cudaMallocHost_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMallocHost(void **, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMallocHost_h == NULL)\n\tcudaMallocHost_h = (cudaMallocHost_p) dlsym(cudart_handle,\"cudaMallocHost\"); \n    if (cudaMallocHost_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMallocHost_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMallocPitch(void ** a1, size_t * a2, size_t a3, size_t a4) {\n\n  typedef cudaError_t (*cudaMallocPitch_p) (void **, size_t *, size_t, size_t);\n  static cudaMallocPitch_p cudaMallocPitch_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMallocPitch(void **, size_t *, size_t, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMallocPitch_h == NULL)\n\tcudaMallocPitch_h = (cudaMallocPitch_p) dlsym(cudart_handle,\"cudaMallocPitch\"); \n    if (cudaMallocPitch_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMallocPitch_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\ncudaError_t cudaMallocArray(struct cudaArray ** a1, const struct cudaChannelFormatDesc * a2, size_t a3, size_t a4, unsigned int a5) {\n\n  typedef cudaError_t (*cudaMallocArray_p) (struct cudaArray **, const struct cudaChannelFormatDesc *, size_t, size_t, unsigned int);\n  static cudaMallocArray_p cudaMallocArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMallocArray(struct cudaArray **, const struct cudaChannelFormatDesc *, size_t, size_t, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMallocArray_h == NULL)\n\tcudaMallocArray_h = (cudaMallocArray_p) dlsym(cudart_handle,\"cudaMallocArray\"); \n    if (cudaMallocArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMallocArray_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\ncudaError_t cudaFree(void * a1) {\n\n  typedef cudaError_t (*cudaFree_p) (void *);\n  static cudaFree_p cudaFree_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaFree(void *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaFree_h == NULL)\n\tcudaFree_h = (cudaFree_p) dlsym(cudart_handle,\"cudaFree\"); \n    if (cudaFree_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\n\tREGISTER_SYNC();\n\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaFree_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaFreeHost(void * a1) {\n\n  typedef cudaError_t (*cudaFreeHost_p) (void *);\n  static cudaFreeHost_p cudaFreeHost_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaFreeHost(void *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaFreeHost_h == NULL)\n\tcudaFreeHost_h = (cudaFreeHost_p) dlsym(cudart_handle,\"cudaFreeHost\"); \n    if (cudaFreeHost_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaFreeHost_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaFreeArray(struct cudaArray * a1) {\n\n  typedef cudaError_t (*cudaFreeArray_p) (struct cudaArray *);\n  static cudaFreeArray_p cudaFreeArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaFreeArray(struct cudaArray *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaFreeArray_h == NULL)\n\tcudaFreeArray_h = (cudaFreeArray_p) dlsym(cudart_handle,\"cudaFreeArray\"); \n    if (cudaFreeArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaFreeArray_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaHostAlloc(void ** a1, size_t a2, unsigned int a3) {\n\n  typedef cudaError_t (*cudaHostAlloc_p) (void **, size_t, unsigned int);\n  static cudaHostAlloc_p cudaHostAlloc_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaHostAlloc(void **, size_t, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaHostAlloc_h == NULL)\n\tcudaHostAlloc_h = (cudaHostAlloc_p) dlsym(cudart_handle,\"cudaHostAlloc\"); \n    if (cudaHostAlloc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaHostAlloc_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaHostGetDevicePointer(void ** a1, void * a2, unsigned int a3) {\n\n  typedef cudaError_t (*cudaHostGetDevicePointer_p) (void **, void *, unsigned int);\n  static cudaHostGetDevicePointer_p cudaHostGetDevicePointer_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaHostGetDevicePointer(void **, void *, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaHostGetDevicePointer_h == NULL)\n\tcudaHostGetDevicePointer_h = (cudaHostGetDevicePointer_p) dlsym(cudart_handle,\"cudaHostGetDevicePointer\"); \n    if (cudaHostGetDevicePointer_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaHostGetDevicePointer_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaHostGetFlags(unsigned int * a1, void * a2) {\n\n  typedef cudaError_t (*cudaHostGetFlags_p) (unsigned int *, void *);\n  static cudaHostGetFlags_p cudaHostGetFlags_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaHostGetFlags(unsigned int *, void *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaHostGetFlags_h == NULL)\n\tcudaHostGetFlags_h = (cudaHostGetFlags_p) dlsym(cudart_handle,\"cudaHostGetFlags\"); \n    if (cudaHostGetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaHostGetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMalloc3D(struct cudaPitchedPtr * a1, struct cudaExtent a2) {\n\n  typedef cudaError_t (*cudaMalloc3D_p) (struct cudaPitchedPtr *, struct cudaExtent);\n  static cudaMalloc3D_p cudaMalloc3D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMalloc3D(struct cudaPitchedPtr *, struct cudaExtent) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMalloc3D_h == NULL)\n\tcudaMalloc3D_h = (cudaMalloc3D_p) dlsym(cudart_handle,\"cudaMalloc3D\"); \n    if (cudaMalloc3D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMalloc3D_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMalloc3DArray(struct cudaArray ** a1, const struct cudaChannelFormatDesc * a2, struct cudaExtent a3, unsigned int a4) {\n\n  typedef cudaError_t (*cudaMalloc3DArray_p) (struct cudaArray **, const struct cudaChannelFormatDesc *, struct cudaExtent, unsigned int);\n  static cudaMalloc3DArray_p cudaMalloc3DArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMalloc3DArray(struct cudaArray **, const struct cudaChannelFormatDesc *, struct cudaExtent, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMalloc3DArray_h == NULL)\n\tcudaMalloc3DArray_h = (cudaMalloc3DArray_p) dlsym(cudart_handle,\"cudaMalloc3DArray\"); \n    if (cudaMalloc3DArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMalloc3DArray_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms * a1) {\n\n  typedef cudaError_t (*cudaMemcpy3D_p) (const struct cudaMemcpy3DParms *);\n  static cudaMemcpy3D_p cudaMemcpy3D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy3D_h == NULL)\n\tcudaMemcpy3D_h = (cudaMemcpy3D_p) dlsym(cudart_handle,\"cudaMemcpy3D\"); \n    if (cudaMemcpy3D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n\n  TAU_PROFILE_START(t);\n// cannot find example of cudaMemcpy3D to test memory tracking\n#ifdef TRACK_MEMORY\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpy3D_h)( a1);\n  TAU_PROFILE_STOP(t);\n\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms * a1, cudaStream_t a2) {\n\n  typedef cudaError_t (*cudaMemcpy3DAsync_p) (const struct cudaMemcpy3DParms *, cudaStream_t);\n  static cudaMemcpy3DAsync_p cudaMemcpy3DAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy3DAsync_h == NULL)\n\tcudaMemcpy3DAsync_h = (cudaMemcpy3DAsync_p) dlsym(cudart_handle,\"cudaMemcpy3DAsync\"); \n    if (cudaMemcpy3DAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy3DAsync_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemGetInfo(size_t * a1, size_t * a2) {\n\n  typedef cudaError_t (*cudaMemGetInfo_p) (size_t *, size_t *);\n  static cudaMemGetInfo_p cudaMemGetInfo_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemGetInfo(size_t *, size_t *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemGetInfo_h == NULL)\n\tcudaMemGetInfo_h = (cudaMemGetInfo_p) dlsym(cudart_handle,\"cudaMemGetInfo\"); \n    if (cudaMemGetInfo_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemGetInfo_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy(void * a1, const void * a2, size_t a3, enum cudaMemcpyKind a4) {\n\n  typedef cudaError_t (*cudaMemcpy_p) (void *, const void *, size_t, enum cudaMemcpyKind);\n  static cudaMemcpy_p cudaMemcpy_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy(void *, const void *, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy_h == NULL)\n\tcudaMemcpy_h = (cudaMemcpy_p) dlsym(cudart_handle,\"cudaMemcpy\"); \n    if (cudaMemcpy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_MEMORY\n\ttau_track_memory(a4, a3);\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpy_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n\tREGISTER_SYNC();\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyToArray(struct cudaArray * a1, size_t a2, size_t a3, const void * a4, size_t a5, enum cudaMemcpyKind a6) {\n\n  typedef cudaError_t (*cudaMemcpyToArray_p) (struct cudaArray *, size_t, size_t, const void *, size_t, enum cudaMemcpyKind);\n  static cudaMemcpyToArray_p cudaMemcpyToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyToArray(struct cudaArray *, size_t, size_t, const void *, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyToArray_h == NULL)\n\tcudaMemcpyToArray_h = (cudaMemcpyToArray_p) dlsym(cudart_handle,\"cudaMemcpyToArray\"); \n    if (cudaMemcpyToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_MEMORY\n\ttau_track_memory(a6, a5);\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpyToArray_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyFromArray(void * a1, const struct cudaArray * a2, size_t a3, size_t a4, size_t a5, enum cudaMemcpyKind a6) {\n\n  typedef cudaError_t (*cudaMemcpyFromArray_p) (void *, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpyFromArray_p cudaMemcpyFromArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyFromArray(void *, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyFromArray_h == NULL)\n\tcudaMemcpyFromArray_h = (cudaMemcpyFromArray_p) dlsym(cudart_handle,\"cudaMemcpyFromArray\"); \n    if (cudaMemcpyFromArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a6, a5);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyFromArray_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyArrayToArray(struct cudaArray * a1, size_t a2, size_t a3, const struct cudaArray * a4, size_t a5, size_t a6, size_t a7, enum cudaMemcpyKind a8) {\n\n  typedef cudaError_t (*cudaMemcpyArrayToArray_p) (struct cudaArray *, size_t, size_t, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpyArrayToArray_p cudaMemcpyArrayToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyArrayToArray(struct cudaArray *, size_t, size_t, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyArrayToArray_h == NULL)\n\tcudaMemcpyArrayToArray_h = (cudaMemcpyArrayToArray_p) dlsym(cudart_handle,\"cudaMemcpyArrayToArray\"); \n    if (cudaMemcpyArrayToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a8, a7);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyArrayToArray_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2D(void * a1, size_t a2, const void * a3, size_t a4, size_t a5, size_t a6, enum cudaMemcpyKind a7) {\n\n  typedef cudaError_t (*cudaMemcpy2D_p) (void *, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpy2D_p cudaMemcpy2D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2D_h == NULL)\n\tcudaMemcpy2D_h = (cudaMemcpy2D_p) dlsym(cudart_handle,\"cudaMemcpy2D\"); \n    if (cudaMemcpy2D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n#ifdef TRACK_MEMORY\n\t//Seg fault in UserEvent::~UserEvent when tracking this event\n\t//printf(\"array size: %d, by %dx%d.\\n\", sizeof(a3), a5, a6);\n\ttau_track_memory(a7, sizeof(a3)*a5*a6);\n#endif //TRACK_MEMORY\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2D_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DToArray(struct cudaArray * a1, size_t a2, size_t a3, const void * a4, size_t a5, size_t a6, size_t a7, enum cudaMemcpyKind a8) {\n\n  typedef cudaError_t (*cudaMemcpy2DToArray_p) (struct cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpy2DToArray_p cudaMemcpy2DToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DToArray(struct cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DToArray_h == NULL)\n\tcudaMemcpy2DToArray_h = (cudaMemcpy2DToArray_p) dlsym(cudart_handle,\"cudaMemcpy2DToArray\"); \n    if (cudaMemcpy2DToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n#ifdef TRACK_MEMORY\n\t//Seg fault in UserEvent::~UserEvent when tracking this event\n\ttau_track_memory(a8, sizeof(a4)*a6*a7);\n#endif //TRACK_MEMORY\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DToArray_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DFromArray(void * a1, size_t a2, const struct cudaArray * a3, size_t a4, size_t a5, size_t a6, size_t a7, enum cudaMemcpyKind a8) {\n\n  typedef cudaError_t (*cudaMemcpy2DFromArray_p) (void *, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpy2DFromArray_p cudaMemcpy2DFromArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DFromArray(void *, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DFromArray_h == NULL)\n\tcudaMemcpy2DFromArray_h = (cudaMemcpy2DFromArray_p) dlsym(cudart_handle,\"cudaMemcpy2DFromArray\"); \n    if (cudaMemcpy2DFromArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DFromArray_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DArrayToArray(struct cudaArray * a1, size_t a2, size_t a3, const struct cudaArray * a4, size_t a5, size_t a6, size_t a7, size_t a8, enum cudaMemcpyKind a9) {\n\n  typedef cudaError_t (*cudaMemcpy2DArrayToArray_p) (struct cudaArray *, size_t, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpy2DArrayToArray_p cudaMemcpy2DArrayToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DArrayToArray(struct cudaArray *, size_t, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DArrayToArray_h == NULL)\n\tcudaMemcpy2DArrayToArray_h = (cudaMemcpy2DArrayToArray_p) dlsym(cudart_handle,\"cudaMemcpy2DArrayToArray\"); \n    if (cudaMemcpy2DArrayToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DArrayToArray_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyToSymbol(const char * a1, const void * a2, size_t a3, size_t a4, enum cudaMemcpyKind a5) {\n\n  typedef cudaError_t (*cudaMemcpyToSymbol_p) (const char *, const void *, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpyToSymbol_p cudaMemcpyToSymbol_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyToSymbol(const char *, const void *, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyToSymbol_h == NULL)\n\tcudaMemcpyToSymbol_h = (cudaMemcpyToSymbol_p) dlsym(cudart_handle,\"cudaMemcpyToSymbol\"); \n    if (cudaMemcpyToSymbol_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_MEMORY\n\ttau_track_memory(a5, a3);\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpyToSymbol_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyFromSymbol(void * a1, const char * a2, size_t a3, size_t a4, enum cudaMemcpyKind a5) {\n\n  typedef cudaError_t (*cudaMemcpyFromSymbol_p) (void *, const char *, size_t, size_t, enum cudaMemcpyKind);\n  static cudaMemcpyFromSymbol_p cudaMemcpyFromSymbol_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyFromSymbol(void *, const char *, size_t, size_t, enum cudaMemcpyKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyFromSymbol_h == NULL)\n\tcudaMemcpyFromSymbol_h = (cudaMemcpyFromSymbol_p) dlsym(cudart_handle,\"cudaMemcpyFromSymbol\"); \n    if (cudaMemcpyFromSymbol_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_MEMORY\n\ttau_track_memory(a5, a3);\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpyFromSymbol_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyAsync(void * a1, const void * a2, size_t a3, enum cudaMemcpyKind a4, cudaStream_t a5) {\n\n  typedef cudaError_t (*cudaMemcpyAsync_p) (void *, const void *, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpyAsync_p cudaMemcpyAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyAsync(void *, const void *, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyAsync_h == NULL)\n\tcudaMemcpyAsync_h = (cudaMemcpyAsync_p) dlsym(cudart_handle,\"cudaMemcpyAsync\"); \n    if (cudaMemcpyAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_MEMORY\n\ttau_track_memory(a4, a3);\n#endif //TRACK_MEMORY\n  retval  =  (*cudaMemcpyAsync_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyToArrayAsync(struct cudaArray * a1, size_t a2, size_t a3, const void * a4, size_t a5, enum cudaMemcpyKind a6, cudaStream_t a7) {\n\n  typedef cudaError_t (*cudaMemcpyToArrayAsync_p) (struct cudaArray *, size_t, size_t, const void *, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpyToArrayAsync_p cudaMemcpyToArrayAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyToArrayAsync(struct cudaArray *, size_t, size_t, const void *, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyToArrayAsync_h == NULL)\n\tcudaMemcpyToArrayAsync_h = (cudaMemcpyToArrayAsync_p) dlsym(cudart_handle,\"cudaMemcpyToArrayAsync\"); \n    if (cudaMemcpyToArrayAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a6, a5);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyToArrayAsync_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyFromArrayAsync(void * a1, const struct cudaArray * a2, size_t a3, size_t a4, size_t a5, enum cudaMemcpyKind a6, cudaStream_t a7) {\n\n  typedef cudaError_t (*cudaMemcpyFromArrayAsync_p) (void *, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpyFromArrayAsync_p cudaMemcpyFromArrayAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyFromArrayAsync(void *, const struct cudaArray *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyFromArrayAsync_h == NULL)\n\tcudaMemcpyFromArrayAsync_h = (cudaMemcpyFromArrayAsync_p) dlsym(cudart_handle,\"cudaMemcpyFromArrayAsync\"); \n    if (cudaMemcpyFromArrayAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a6, a5);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyFromArrayAsync_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DAsync(void * a1, size_t a2, const void * a3, size_t a4, size_t a5, size_t a6, enum cudaMemcpyKind a7, cudaStream_t a8) {\n\n  typedef cudaError_t (*cudaMemcpy2DAsync_p) (void *, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpy2DAsync_p cudaMemcpy2DAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DAsync_h == NULL)\n\tcudaMemcpy2DAsync_h = (cudaMemcpy2DAsync_p) dlsym(cudart_handle,\"cudaMemcpy2DAsync\"); \n    if (cudaMemcpy2DAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DAsync_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray * a1, size_t a2, size_t a3, const void * a4, size_t a5, size_t a6, size_t a7, enum cudaMemcpyKind a8, cudaStream_t a9) {\n\n  typedef cudaError_t (*cudaMemcpy2DToArrayAsync_p) (struct cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpy2DToArrayAsync_p cudaMemcpy2DToArrayAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DToArrayAsync_h == NULL)\n\tcudaMemcpy2DToArrayAsync_h = (cudaMemcpy2DToArrayAsync_p) dlsym(cudart_handle,\"cudaMemcpy2DToArrayAsync\"); \n    if (cudaMemcpy2DToArrayAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DToArrayAsync_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpy2DFromArrayAsync(void * a1, size_t a2, const struct cudaArray * a3, size_t a4, size_t a5, size_t a6, size_t a7, enum cudaMemcpyKind a8, cudaStream_t a9) {\n\n  typedef cudaError_t (*cudaMemcpy2DFromArrayAsync_p) (void *, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpy2DFromArrayAsync_p cudaMemcpy2DFromArrayAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpy2DFromArrayAsync(void *, size_t, const struct cudaArray *, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpy2DFromArrayAsync_h == NULL)\n\tcudaMemcpy2DFromArrayAsync_h = (cudaMemcpy2DFromArrayAsync_p) dlsym(cudart_handle,\"cudaMemcpy2DFromArrayAsync\"); \n    if (cudaMemcpy2DFromArrayAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemcpy2DFromArrayAsync_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyToSymbolAsync(const char * a1, const void * a2, size_t a3, size_t a4, enum cudaMemcpyKind a5, cudaStream_t a6) {\n\n  typedef cudaError_t (*cudaMemcpyToSymbolAsync_p) (const char *, const void *, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpyToSymbolAsync_p cudaMemcpyToSymbolAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyToSymbolAsync_h == NULL)\n\tcudaMemcpyToSymbolAsync_h = (cudaMemcpyToSymbolAsync_p) dlsym(cudart_handle,\"cudaMemcpyToSymbolAsync\"); \n    if (cudaMemcpyToSymbolAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a5, a3);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyToSymbolAsync_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemcpyFromSymbolAsync(void * a1, const char * a2, size_t a3, size_t a4, enum cudaMemcpyKind a5, cudaStream_t a6) {\n\n  typedef cudaError_t (*cudaMemcpyFromSymbolAsync_p) (void *, const char *, size_t, size_t, enum cudaMemcpyKind, cudaStream_t);\n  static cudaMemcpyFromSymbolAsync_p cudaMemcpyFromSymbolAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, enum cudaMemcpyKind, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemcpyFromSymbolAsync_h == NULL)\n\tcudaMemcpyFromSymbolAsync_h = (cudaMemcpyFromSymbolAsync_p) dlsym(cudart_handle,\"cudaMemcpyFromSymbolAsync\"); \n    if (cudaMemcpyFromSymbolAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TAU_TRACK_MEMORY\n\ttau_track_memory(a5, a3);\n#endif // TAU_TRACK_MEMORY\n  retval  =  (*cudaMemcpyFromSymbolAsync_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemset(void * a1, int a2, size_t a3) {\n\n  typedef cudaError_t (*cudaMemset_p) (void *, int, size_t);\n  static cudaMemset_p cudaMemset_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemset(void *, int, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemset_h == NULL)\n\tcudaMemset_h = (cudaMemset_p) dlsym(cudart_handle,\"cudaMemset\"); \n    if (cudaMemset_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemset_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemset2D(void * a1, size_t a2, int a3, size_t a4, size_t a5) {\n\n  typedef cudaError_t (*cudaMemset2D_p) (void *, size_t, int, size_t, size_t);\n  static cudaMemset2D_p cudaMemset2D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemset2D(void *, size_t, int, size_t, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemset2D_h == NULL)\n\tcudaMemset2D_h = (cudaMemset2D_p) dlsym(cudart_handle,\"cudaMemset2D\"); \n    if (cudaMemset2D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemset2D_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemset3D(struct cudaPitchedPtr a1, int a2, struct cudaExtent a3) {\n\n  typedef cudaError_t (*cudaMemset3D_p) (struct cudaPitchedPtr, int, struct cudaExtent);\n  static cudaMemset3D_p cudaMemset3D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemset3D(struct cudaPitchedPtr, int, struct cudaExtent) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemset3D_h == NULL)\n\tcudaMemset3D_h = (cudaMemset3D_p) dlsym(cudart_handle,\"cudaMemset3D\"); \n    if (cudaMemset3D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemset3D_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemsetAsync(void * a1, int a2, size_t a3, cudaStream_t a4) {\n\n  typedef cudaError_t (*cudaMemsetAsync_p) (void *, int, size_t, cudaStream_t);\n  static cudaMemsetAsync_p cudaMemsetAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemsetAsync(void *, int, size_t, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemsetAsync_h == NULL)\n\tcudaMemsetAsync_h = (cudaMemsetAsync_p) dlsym(cudart_handle,\"cudaMemsetAsync\"); \n    if (cudaMemsetAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemsetAsync_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemset2DAsync(void * a1, size_t a2, int a3, size_t a4, size_t a5, cudaStream_t a6) {\n\n  typedef cudaError_t (*cudaMemset2DAsync_p) (void *, size_t, int, size_t, size_t, cudaStream_t);\n  static cudaMemset2DAsync_p cudaMemset2DAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemset2DAsync(void *, size_t, int, size_t, size_t, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemset2DAsync_h == NULL)\n\tcudaMemset2DAsync_h = (cudaMemset2DAsync_p) dlsym(cudart_handle,\"cudaMemset2DAsync\"); \n    if (cudaMemset2DAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemset2DAsync_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaMemset3DAsync(struct cudaPitchedPtr a1, int a2, struct cudaExtent a3, cudaStream_t a4) {\n\n  typedef cudaError_t (*cudaMemset3DAsync_p) (struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t);\n  static cudaMemset3DAsync_p cudaMemset3DAsync_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaMemset3DAsync_h == NULL)\n\tcudaMemset3DAsync_h = (cudaMemset3DAsync_p) dlsym(cudart_handle,\"cudaMemset3DAsync\"); \n    if (cudaMemset3DAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaMemset3DAsync_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetSymbolAddress(void ** a1, const char * a2) {\n\n  typedef cudaError_t (*cudaGetSymbolAddress_p) (void **, const char *);\n  static cudaGetSymbolAddress_p cudaGetSymbolAddress_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetSymbolAddress(void **, const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetSymbolAddress_h == NULL)\n\tcudaGetSymbolAddress_h = (cudaGetSymbolAddress_p) dlsym(cudart_handle,\"cudaGetSymbolAddress\"); \n    if (cudaGetSymbolAddress_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetSymbolAddress_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetSymbolSize(size_t * a1, const char * a2) {\n\n  typedef cudaError_t (*cudaGetSymbolSize_p) (size_t *, const char *);\n  static cudaGetSymbolSize_p cudaGetSymbolSize_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetSymbolSize(size_t *, const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetSymbolSize_h == NULL)\n\tcudaGetSymbolSize_h = (cudaGetSymbolSize_p) dlsym(cudart_handle,\"cudaGetSymbolSize\"); \n    if (cudaGetSymbolSize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetSymbolSize_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n/*\ncudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t a1) {\n\n  typedef cudaError_t (*cudaGraphicsUnregisterResource_p) (cudaGraphicsResource_t);\n  static cudaGraphicsUnregisterResource_p cudaGraphicsUnregisterResource_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsUnregisterResource_h == NULL)\n\tcudaGraphicsUnregisterResource_h = (cudaGraphicsUnregisterResource_p) dlsym(cudart_handle,\"cudaGraphicsUnregisterResource\"); \n    if (cudaGraphicsUnregisterResource_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsUnregisterResource_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t a1, unsigned int a2) {\n\n  typedef cudaError_t (*cudaGraphicsResourceSetMapFlags_p) (cudaGraphicsResource_t, unsigned int);\n  static cudaGraphicsResourceSetMapFlags_p cudaGraphicsResourceSetMapFlags_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsResourceSetMapFlags_h == NULL)\n\tcudaGraphicsResourceSetMapFlags_h = (cudaGraphicsResourceSetMapFlags_p) dlsym(cudart_handle,\"cudaGraphicsResourceSetMapFlags\"); \n    if (cudaGraphicsResourceSetMapFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsResourceSetMapFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGraphicsMapResources(int a1, cudaGraphicsResource_t * a2, cudaStream_t a3) {\n\n  typedef cudaError_t (*cudaGraphicsMapResources_p) (int, cudaGraphicsResource_t *, cudaStream_t);\n  static cudaGraphicsMapResources_p cudaGraphicsMapResources_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsMapResources(int, cudaGraphicsResource_t *, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsMapResources_h == NULL)\n\tcudaGraphicsMapResources_h = (cudaGraphicsMapResources_p) dlsym(cudart_handle,\"cudaGraphicsMapResources\"); \n    if (cudaGraphicsMapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsMapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGraphicsUnmapResources(int a1, cudaGraphicsResource_t * a2, cudaStream_t a3) {\n\n  typedef cudaError_t (*cudaGraphicsUnmapResources_p) (int, cudaGraphicsResource_t *, cudaStream_t);\n  static cudaGraphicsUnmapResources_p cudaGraphicsUnmapResources_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsUnmapResources(int, cudaGraphicsResource_t *, cudaStream_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsUnmapResources_h == NULL)\n\tcudaGraphicsUnmapResources_h = (cudaGraphicsUnmapResources_p) dlsym(cudart_handle,\"cudaGraphicsUnmapResources\"); \n    if (cudaGraphicsUnmapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsUnmapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGraphicsResourceGetMappedPointer(void ** a1, size_t * a2, cudaGraphicsResource_t a3) {\n\n  typedef cudaError_t (*cudaGraphicsResourceGetMappedPointer_p) (void **, size_t *, cudaGraphicsResource_t);\n  static cudaGraphicsResourceGetMappedPointer_p cudaGraphicsResourceGetMappedPointer_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsResourceGetMappedPointer(void **, size_t *, cudaGraphicsResource_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsResourceGetMappedPointer_h == NULL)\n\tcudaGraphicsResourceGetMappedPointer_h = (cudaGraphicsResourceGetMappedPointer_p) dlsym(cudart_handle,\"cudaGraphicsResourceGetMappedPointer\"); \n    if (cudaGraphicsResourceGetMappedPointer_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsResourceGetMappedPointer_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGraphicsSubResourceGetMappedArray(struct cudaArray ** a1, cudaGraphicsResource_t a2, unsigned int a3, unsigned int a4) {\n\n  typedef cudaError_t (*cudaGraphicsSubResourceGetMappedArray_p) (struct cudaArray **, cudaGraphicsResource_t, unsigned int, unsigned int);\n  static cudaGraphicsSubResourceGetMappedArray_p cudaGraphicsSubResourceGetMappedArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGraphicsSubResourceGetMappedArray(struct cudaArray **, cudaGraphicsResource_t, unsigned int, unsigned int) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGraphicsSubResourceGetMappedArray_h == NULL)\n\tcudaGraphicsSubResourceGetMappedArray_h = (cudaGraphicsSubResourceGetMappedArray_p) dlsym(cudart_handle,\"cudaGraphicsSubResourceGetMappedArray\"); \n    if (cudaGraphicsSubResourceGetMappedArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGraphicsSubResourceGetMappedArray_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc * a1, const struct cudaArray * a2) {\n\n  typedef cudaError_t (*cudaGetChannelDesc_p) (struct cudaChannelFormatDesc *, const struct cudaArray *);\n  static cudaGetChannelDesc_p cudaGetChannelDesc_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *, const struct cudaArray *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetChannelDesc_h == NULL)\n\tcudaGetChannelDesc_h = (cudaGetChannelDesc_p) dlsym(cudart_handle,\"cudaGetChannelDesc\"); \n    if (cudaGetChannelDesc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetChannelDesc_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n/* Do not instrument: Called before process is started.\nstruct cudaChannelFormatDesc cudaCreateChannelDesc(int a1, int a2, int a3, int a4, enum cudaChannelFormatKind a5) {\n\n  typedef struct cudaChannelFormatDesc (*cudaCreateChannelDesc_p) (int, int, int, int, enum cudaChannelFormatKind);\n  static cudaCreateChannelDesc_p cudaCreateChannelDesc_h = NULL;\n  struct cudaChannelFormatDesc retval;\n  TAU_PROFILE_TIMER(t,\"struct cudaChannelFormatDesc cudaCreateChannelDesc(int, int, int, int, enum cudaChannelFormatKind) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaCreateChannelDesc_h == NULL)\n\tcudaCreateChannelDesc_h = (cudaCreateChannelDesc_p) dlsym(cudart_handle,\"cudaCreateChannelDesc\"); \n    if (cudaCreateChannelDesc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaCreateChannelDesc_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaBindTexture(size_t * a1, const struct textureReference * a2, const void * a3, const struct cudaChannelFormatDesc * a4, size_t a5) {\n\n  typedef cudaError_t (*cudaBindTexture_p) (size_t *, const struct textureReference *, const void *, const struct cudaChannelFormatDesc *, size_t);\n  static cudaBindTexture_p cudaBindTexture_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaBindTexture(size_t *, const struct textureReference *, const void *, const struct cudaChannelFormatDesc *, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaBindTexture_h == NULL)\n\tcudaBindTexture_h = (cudaBindTexture_p) dlsym(cudart_handle,\"cudaBindTexture\"); \n    if (cudaBindTexture_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaBindTexture_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaBindTexture2D(size_t * a1, const struct textureReference * a2, const void * a3, const struct cudaChannelFormatDesc * a4, size_t a5, size_t a6, size_t a7) {\n\n  typedef cudaError_t (*cudaBindTexture2D_p) (size_t *, const struct textureReference *, const void *, const struct cudaChannelFormatDesc *, size_t, size_t, size_t);\n  static cudaBindTexture2D_p cudaBindTexture2D_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaBindTexture2D(size_t *, const struct textureReference *, const void *, const struct cudaChannelFormatDesc *, size_t, size_t, size_t) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaBindTexture2D_h == NULL)\n\tcudaBindTexture2D_h = (cudaBindTexture2D_p) dlsym(cudart_handle,\"cudaBindTexture2D\"); \n    if (cudaBindTexture2D_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaBindTexture2D_h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaBindTextureToArray(const struct textureReference * a1, const struct cudaArray * a2, const struct cudaChannelFormatDesc * a3) {\n\n  typedef cudaError_t (*cudaBindTextureToArray_p) (const struct textureReference *, const struct cudaArray *, const struct cudaChannelFormatDesc *);\n  static cudaBindTextureToArray_p cudaBindTextureToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaBindTextureToArray(const struct textureReference *, const struct cudaArray *, const struct cudaChannelFormatDesc *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaBindTextureToArray_h == NULL)\n\tcudaBindTextureToArray_h = (cudaBindTextureToArray_p) dlsym(cudart_handle,\"cudaBindTextureToArray\"); \n    if (cudaBindTextureToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaBindTextureToArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaUnbindTexture(const struct textureReference * a1) {\n\n  typedef cudaError_t (*cudaUnbindTexture_p) (const struct textureReference *);\n  static cudaUnbindTexture_p cudaUnbindTexture_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaUnbindTexture(const struct textureReference *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaUnbindTexture_h == NULL)\n\tcudaUnbindTexture_h = (cudaUnbindTexture_p) dlsym(cudart_handle,\"cudaUnbindTexture\"); \n    if (cudaUnbindTexture_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaUnbindTexture_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetTextureAlignmentOffset(size_t * a1, const struct textureReference * a2) {\n\n  typedef cudaError_t (*cudaGetTextureAlignmentOffset_p) (size_t *, const struct textureReference *);\n  static cudaGetTextureAlignmentOffset_p cudaGetTextureAlignmentOffset_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetTextureAlignmentOffset(size_t *, const struct textureReference *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetTextureAlignmentOffset_h == NULL)\n\tcudaGetTextureAlignmentOffset_h = (cudaGetTextureAlignmentOffset_p) dlsym(cudart_handle,\"cudaGetTextureAlignmentOffset\"); \n    if (cudaGetTextureAlignmentOffset_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetTextureAlignmentOffset_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetTextureReference(const struct textureReference ** a1, const char * a2) {\n\n  typedef cudaError_t (*cudaGetTextureReference_p) (const struct textureReference **, const char *);\n  static cudaGetTextureReference_p cudaGetTextureReference_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetTextureReference(const struct textureReference **, const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetTextureReference_h == NULL)\n\tcudaGetTextureReference_h = (cudaGetTextureReference_p) dlsym(cudart_handle,\"cudaGetTextureReference\"); \n    if (cudaGetTextureReference_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetTextureReference_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaBindSurfaceToArray(const struct surfaceReference * a1, const struct cudaArray * a2, const struct cudaChannelFormatDesc * a3) {\n\n  typedef cudaError_t (*cudaBindSurfaceToArray_p) (const struct surfaceReference *, const struct cudaArray *, const struct cudaChannelFormatDesc *);\n  static cudaBindSurfaceToArray_p cudaBindSurfaceToArray_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *, const struct cudaArray *, const struct cudaChannelFormatDesc *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaBindSurfaceToArray_h == NULL)\n\tcudaBindSurfaceToArray_h = (cudaBindSurfaceToArray_p) dlsym(cudart_handle,\"cudaBindSurfaceToArray\"); \n    if (cudaBindSurfaceToArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaBindSurfaceToArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaGetSurfaceReference(const struct surfaceReference ** a1, const char * a2) {\n\n  typedef cudaError_t (*cudaGetSurfaceReference_p) (const struct surfaceReference **, const char *);\n  static cudaGetSurfaceReference_p cudaGetSurfaceReference_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetSurfaceReference(const struct surfaceReference **, const char *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetSurfaceReference_h == NULL)\n\tcudaGetSurfaceReference_h = (cudaGetSurfaceReference_p) dlsym(cudart_handle,\"cudaGetSurfaceReference\"); \n    if (cudaGetSurfaceReference_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetSurfaceReference_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaDriverGetVersion(int * a1) {\n\n  typedef cudaError_t (*cudaDriverGetVersion_p) (int *);\n  static cudaDriverGetVersion_p cudaDriverGetVersion_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaDriverGetVersion(int *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaDriverGetVersion_h == NULL)\n\tcudaDriverGetVersion_h = (cudaDriverGetVersion_p) dlsym(cudart_handle,\"cudaDriverGetVersion\"); \n    if (cudaDriverGetVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaDriverGetVersion_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\ncudaError_t cudaRuntimeGetVersion(int * a1) {\n\n  typedef cudaError_t (*cudaRuntimeGetVersion_p) (int *);\n  static cudaRuntimeGetVersion_p cudaRuntimeGetVersion_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaRuntimeGetVersion(int *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaRuntimeGetVersion_h == NULL)\n\tcudaRuntimeGetVersion_h = (cudaRuntimeGetVersion_p) dlsym(cudart_handle,\"cudaRuntimeGetVersion\"); \n    if (cudaRuntimeGetVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  // needed for HMPP \n\tTau_global_incr_insideTAU();\n  Tau_create_top_level_timer_if_necessary();\n  Tau_global_decr_insideTAU();\n\n  TAU_PROFILE_SET_NODE(0);\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaRuntimeGetVersion_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n/*\ncudaError_t cudaGetExportTable(const void ** a1, const cudaUUID_t * a2) {\n\n  typedef cudaError_t (*cudaGetExportTable_p) (const void **, const cudaUUID_t *);\n  static cudaGetExportTable_p cudaGetExportTable_h = NULL;\n  cudaError_t retval;\n  TAU_PROFILE_TIMER(t,\"cudaError_t cudaGetExportTable(const void **, const cudaUUID_t *) C\", \"\", CUDART_API);\n  if (cudart_handle == NULL) \n    cudart_handle = (void *) dlopen(cudart_orig_libname, RTLD_NOW); \n\n  if (cudart_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cudaGetExportTable_h == NULL)\n\tcudaGetExportTable_h = (cudaGetExportTable_p) dlsym(cudart_handle,\"cudaGetExportTable\"); \n    if (cudaGetExportTable_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cudaGetExportTable_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/cuda/cuda_wrap.cpp": "#include <cuda.h>\n#include <Profile/Profiler.h>\n#include <Profile/TauGpuAdapterCUDA.h>\n#include <stdio.h>\n#include <dlfcn.h>\n\n#define TRACK_KERNEL\n\n#define CUDA_API TAU_USER\n#define CUDA_SYNC TAU_USER\n\nconst char * tau_orig_libname = \"libcuda.so\";\nstatic void *tau_handle = NULL;\n\nCUresult cuInit(unsigned int a1) {\n\n  typedef CUresult (*cuInit_p_h) (unsigned int);\n  static cuInit_p_h cuInit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuInit(unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuInit_h == NULL)\n\tcuInit_h = (cuInit_p_h) dlsym(tau_handle,\"cuInit\"); \n    if (cuInit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuInit_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDriverGetVersion(int * a1) {\n\n  typedef CUresult (*cuDriverGetVersion_p_h) (int *);\n  static cuDriverGetVersion_p_h cuDriverGetVersion_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDriverGetVersion(int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDriverGetVersion_h == NULL)\n\tcuDriverGetVersion_h = (cuDriverGetVersion_p_h) dlsym(tau_handle,\"cuDriverGetVersion\"); \n    if (cuDriverGetVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDriverGetVersion_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGet(CUdevice * a1, int a2) {\n\n  typedef CUresult (*cuDeviceGet_p_h) (CUdevice *, int);\n  static cuDeviceGet_p_h cuDeviceGet_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGet(CUdevice *, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGet_h == NULL)\n\tcuDeviceGet_h = (cuDeviceGet_p_h) dlsym(tau_handle,\"cuDeviceGet\"); \n    if (cuDeviceGet_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGet_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetCount(int * a1) {\n\n  typedef CUresult (*cuDeviceGetCount_p_h) (int *);\n  static cuDeviceGetCount_p_h cuDeviceGetCount_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetCount(int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetCount_h == NULL)\n\tcuDeviceGetCount_h = (cuDeviceGetCount_p_h) dlsym(tau_handle,\"cuDeviceGetCount\"); \n    if (cuDeviceGetCount_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetCount_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetName(char * a1, int a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceGetName_p_h) (char *, int, CUdevice);\n  static cuDeviceGetName_p_h cuDeviceGetName_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetName(char *, int, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetName_h == NULL)\n\tcuDeviceGetName_h = (cuDeviceGetName_p_h) dlsym(tau_handle,\"cuDeviceGetName\"); \n    if (cuDeviceGetName_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetName_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceComputeCapability(int * a1, int * a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceComputeCapability_p_h) (int *, int *, CUdevice);\n  static cuDeviceComputeCapability_p_h cuDeviceComputeCapability_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceComputeCapability(int *, int *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceComputeCapability_h == NULL)\n\tcuDeviceComputeCapability_h = (cuDeviceComputeCapability_p_h) dlsym(tau_handle,\"cuDeviceComputeCapability\"); \n    if (cuDeviceComputeCapability_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceComputeCapability_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceTotalMem_v2(size_t * a1, CUdevice a2) {\n\n  typedef CUresult (*cuDeviceTotalMem_v2_p_h) (size_t *, CUdevice);\n  static cuDeviceTotalMem_v2_p_h cuDeviceTotalMem_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceTotalMem_v2(size_t *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceTotalMem_v2_h == NULL)\n\tcuDeviceTotalMem_v2_h = (cuDeviceTotalMem_v2_p_h) dlsym(tau_handle,\"cuDeviceTotalMem_v2\"); \n    if (cuDeviceTotalMem_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceTotalMem_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetProperties(CUdevprop * a1, CUdevice a2) {\n\n  typedef CUresult (*cuDeviceGetProperties_p_h) (CUdevprop *, CUdevice);\n  static cuDeviceGetProperties_p_h cuDeviceGetProperties_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetProperties(CUdevprop *, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetProperties_h == NULL)\n\tcuDeviceGetProperties_h = (cuDeviceGetProperties_p_h) dlsym(tau_handle,\"cuDeviceGetProperties\"); \n    if (cuDeviceGetProperties_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetProperties_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuDeviceGetAttribute(int * a1, CUdevice_attribute a2, CUdevice a3) {\n\n  typedef CUresult (*cuDeviceGetAttribute_p_h) (int *, CUdevice_attribute, CUdevice);\n  static cuDeviceGetAttribute_p_h cuDeviceGetAttribute_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuDeviceGetAttribute(int *, CUdevice_attribute, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuDeviceGetAttribute_h == NULL)\n\tcuDeviceGetAttribute_h = (cuDeviceGetAttribute_p_h) dlsym(tau_handle,\"cuDeviceGetAttribute\"); \n    if (cuDeviceGetAttribute_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuDeviceGetAttribute_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxCreate_v2(CUcontext * a1, unsigned int a2, CUdevice a3) {\n\n  typedef CUresult (*cuCtxCreate_v2_p_h) (CUcontext *, unsigned int, CUdevice);\n  static cuCtxCreate_v2_p_h cuCtxCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxCreate_v2(CUcontext *, unsigned int, CUdevice) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxCreate_v2_h == NULL)\n\tcuCtxCreate_v2_h = (cuCtxCreate_v2_p_h) dlsym(tau_handle,\"cuCtxCreate_v2\"); \n    if (cuCtxCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxCreate_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxDestroy(CUcontext a1) {\n\n  typedef CUresult (*cuCtxDestroy_p_h) (CUcontext);\n  static cuCtxDestroy_p_h cuCtxDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxDestroy(CUcontext) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxDestroy_h == NULL)\n\tcuCtxDestroy_h = (cuCtxDestroy_p_h) dlsym(tau_handle,\"cuCtxDestroy\"); \n    if (cuCtxDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxAttach(CUcontext * a1, unsigned int a2) {\n\n  typedef CUresult (*cuCtxAttach_p_h) (CUcontext *, unsigned int);\n  static cuCtxAttach_p_h cuCtxAttach_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxAttach(CUcontext *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxAttach_h == NULL)\n\tcuCtxAttach_h = (cuCtxAttach_p_h) dlsym(tau_handle,\"cuCtxAttach\"); \n    if (cuCtxAttach_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxAttach_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxDetach(CUcontext a1) {\n\n  typedef CUresult (*cuCtxDetach_p_h) (CUcontext);\n  static cuCtxDetach_p_h cuCtxDetach_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxDetach(CUcontext) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxDetach_h == NULL)\n\tcuCtxDetach_h = (cuCtxDetach_p_h) dlsym(tau_handle,\"cuCtxDetach\"); \n    if (cuCtxDetach_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxDetach_h)( a1);\n  TAU_PROFILE_STOP(t);\n\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n\tTau_cuda_exit();\n#endif\n  }\n  return retval;\n\n}\n\nCUresult cuCtxPushCurrent(CUcontext a1) {\n\n  typedef CUresult (*cuCtxPushCurrent_p_h) (CUcontext);\n  static cuCtxPushCurrent_p_h cuCtxPushCurrent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxPushCurrent(CUcontext) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxPushCurrent_h == NULL)\n\tcuCtxPushCurrent_h = (cuCtxPushCurrent_p_h) dlsym(tau_handle,\"cuCtxPushCurrent\"); \n    if (cuCtxPushCurrent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxPushCurrent_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxPopCurrent(CUcontext * a1) {\n\n  typedef CUresult (*cuCtxPopCurrent_p_h) (CUcontext *);\n  static cuCtxPopCurrent_p_h cuCtxPopCurrent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxPopCurrent(CUcontext *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxPopCurrent_h == NULL)\n\tcuCtxPopCurrent_h = (cuCtxPopCurrent_p_h) dlsym(tau_handle,\"cuCtxPopCurrent\"); \n    if (cuCtxPopCurrent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxPopCurrent_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetDevice(CUdevice * a1) {\n\n  typedef CUresult (*cuCtxGetDevice_p_h) (CUdevice *);\n  static cuCtxGetDevice_p_h cuCtxGetDevice_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetDevice(CUdevice *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetDevice_h == NULL)\n\tcuCtxGetDevice_h = (cuCtxGetDevice_p_h) dlsym(tau_handle,\"cuCtxGetDevice\"); \n    if (cuCtxGetDevice_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetDevice_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSynchronize() {\n\n  typedef CUresult (*cuCtxSynchronize_p_h) ();\n  static cuCtxSynchronize_p_h cuCtxSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSynchronize(void) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSynchronize_h == NULL)\n\tcuCtxSynchronize_h = (cuCtxSynchronize_p_h) dlsym(tau_handle,\"cuCtxSynchronize\"); \n    if (cuCtxSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuCtxSynchronize_h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSetLimit(CUlimit a1, size_t a2) {\n\n  typedef CUresult (*cuCtxSetLimit_p_h) (CUlimit, size_t);\n  static cuCtxSetLimit_p_h cuCtxSetLimit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSetLimit(CUlimit, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSetLimit_h == NULL)\n\tcuCtxSetLimit_h = (cuCtxSetLimit_p_h) dlsym(tau_handle,\"cuCtxSetLimit\"); \n    if (cuCtxSetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxSetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetLimit(size_t * a1, CUlimit a2) {\n\n  typedef CUresult (*cuCtxGetLimit_p_h) (size_t *, CUlimit);\n  static cuCtxGetLimit_p_h cuCtxGetLimit_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetLimit(size_t *, CUlimit) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetLimit_h == NULL)\n\tcuCtxGetLimit_h = (cuCtxGetLimit_p_h) dlsym(tau_handle,\"cuCtxGetLimit\"); \n    if (cuCtxGetLimit_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetLimit_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetCacheConfig(CUfunc_cache * a1) {\n\n  typedef CUresult (*cuCtxGetCacheConfig_p_h) (CUfunc_cache *);\n  static cuCtxGetCacheConfig_p_h cuCtxGetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetCacheConfig(CUfunc_cache *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetCacheConfig_h == NULL)\n\tcuCtxGetCacheConfig_h = (cuCtxGetCacheConfig_p_h) dlsym(tau_handle,\"cuCtxGetCacheConfig\"); \n    if (cuCtxGetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxSetCacheConfig(CUfunc_cache a1) {\n\n  typedef CUresult (*cuCtxSetCacheConfig_p_h) (CUfunc_cache);\n  static cuCtxSetCacheConfig_p_h cuCtxSetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxSetCacheConfig(CUfunc_cache) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxSetCacheConfig_h == NULL)\n\tcuCtxSetCacheConfig_h = (cuCtxSetCacheConfig_p_h) dlsym(tau_handle,\"cuCtxSetCacheConfig\"); \n    if (cuCtxSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxSetCacheConfig_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuCtxGetApiVersion(CUcontext a1, unsigned int * a2) {\n\n  typedef CUresult (*cuCtxGetApiVersion_p_h) (CUcontext, unsigned int *);\n  static cuCtxGetApiVersion_p_h cuCtxGetApiVersion_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuCtxGetApiVersion(CUcontext, unsigned int *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuCtxGetApiVersion_h == NULL)\n\tcuCtxGetApiVersion_h = (cuCtxGetApiVersion_p_h) dlsym(tau_handle,\"cuCtxGetApiVersion\"); \n    if (cuCtxGetApiVersion_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuCtxGetApiVersion_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoad(CUmodule * a1, const char * a2) {\n\n  typedef CUresult (*cuModuleLoad_p_h) (CUmodule *, const char *);\n  static cuModuleLoad_p_h cuModuleLoad_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoad(CUmodule *, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoad_h == NULL)\n\tcuModuleLoad_h = (cuModuleLoad_p_h) dlsym(tau_handle,\"cuModuleLoad\"); \n    if (cuModuleLoad_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoad_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadData(CUmodule * a1, const void * a2) {\n\n  typedef CUresult (*cuModuleLoadData_p_h) (CUmodule *, const void *);\n  static cuModuleLoadData_p_h cuModuleLoadData_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadData(CUmodule *, const void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadData_h == NULL)\n\tcuModuleLoadData_h = (cuModuleLoadData_p_h) dlsym(tau_handle,\"cuModuleLoadData\"); \n    if (cuModuleLoadData_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadData_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadDataEx(CUmodule * a1, const void * a2, unsigned int a3, CUjit_option * a4, void ** a5) {\n\n  typedef CUresult (*cuModuleLoadDataEx_p_h) (CUmodule *, const void *, unsigned int, CUjit_option *, void **);\n  static cuModuleLoadDataEx_p_h cuModuleLoadDataEx_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadDataEx(CUmodule *, const void *, unsigned int, CUjit_option *, void **) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadDataEx_h == NULL)\n\tcuModuleLoadDataEx_h = (cuModuleLoadDataEx_p_h) dlsym(tau_handle,\"cuModuleLoadDataEx\"); \n    if (cuModuleLoadDataEx_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadDataEx_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleLoadFatBinary(CUmodule * a1, const void * a2) {\n\n  typedef CUresult (*cuModuleLoadFatBinary_p_h) (CUmodule *, const void *);\n  static cuModuleLoadFatBinary_p_h cuModuleLoadFatBinary_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleLoadFatBinary(CUmodule *, const void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleLoadFatBinary_h == NULL)\n\tcuModuleLoadFatBinary_h = (cuModuleLoadFatBinary_p_h) dlsym(tau_handle,\"cuModuleLoadFatBinary\"); \n    if (cuModuleLoadFatBinary_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleLoadFatBinary_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleUnload(CUmodule a1) {\n\n  typedef CUresult (*cuModuleUnload_p_h) (CUmodule);\n  static cuModuleUnload_p_h cuModuleUnload_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleUnload(CUmodule) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleUnload_h == NULL)\n\tcuModuleUnload_h = (cuModuleUnload_p_h) dlsym(tau_handle,\"cuModuleUnload\"); \n    if (cuModuleUnload_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleUnload_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetFunction(CUfunction * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetFunction_p_h) (CUfunction *, CUmodule, const char *);\n  static cuModuleGetFunction_p_h cuModuleGetFunction_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetFunction(CUfunction *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetFunction_h == NULL)\n\tcuModuleGetFunction_h = (cuModuleGetFunction_p_h) dlsym(tau_handle,\"cuModuleGetFunction\"); \n    if (cuModuleGetFunction_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetFunction_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetGlobal_v2(CUdeviceptr * a1, size_t * a2, CUmodule a3, const char * a4) {\n\n  typedef CUresult (*cuModuleGetGlobal_v2_p_h) (CUdeviceptr *, size_t *, CUmodule, const char *);\n  static cuModuleGetGlobal_v2_p_h cuModuleGetGlobal_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetGlobal_v2(CUdeviceptr *, size_t *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetGlobal_v2_h == NULL)\n\tcuModuleGetGlobal_v2_h = (cuModuleGetGlobal_v2_p_h) dlsym(tau_handle,\"cuModuleGetGlobal_v2\"); \n    if (cuModuleGetGlobal_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetGlobal_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetTexRef(CUtexref * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetTexRef_p_h) (CUtexref *, CUmodule, const char *);\n  static cuModuleGetTexRef_p_h cuModuleGetTexRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetTexRef(CUtexref *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetTexRef_h == NULL)\n\tcuModuleGetTexRef_h = (cuModuleGetTexRef_p_h) dlsym(tau_handle,\"cuModuleGetTexRef\"); \n    if (cuModuleGetTexRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetTexRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuModuleGetSurfRef(CUsurfref * a1, CUmodule a2, const char * a3) {\n\n  typedef CUresult (*cuModuleGetSurfRef_p_h) (CUsurfref *, CUmodule, const char *);\n  static cuModuleGetSurfRef_p_h cuModuleGetSurfRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuModuleGetSurfRef(CUsurfref *, CUmodule, const char *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuModuleGetSurfRef_h == NULL)\n\tcuModuleGetSurfRef_h = (cuModuleGetSurfRef_p_h) dlsym(tau_handle,\"cuModuleGetSurfRef\"); \n    if (cuModuleGetSurfRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuModuleGetSurfRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemGetInfo_v2(size_t * a1, size_t * a2) {\n\n  typedef CUresult (*cuMemGetInfo_v2_p_h) (size_t *, size_t *);\n  static cuMemGetInfo_v2_p_h cuMemGetInfo_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemGetInfo_v2(size_t *, size_t *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemGetInfo_v2_h == NULL)\n\tcuMemGetInfo_v2_h = (cuMemGetInfo_v2_p_h) dlsym(tau_handle,\"cuMemGetInfo_v2\"); \n    if (cuMemGetInfo_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemGetInfo_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocManaged(CUdeviceptr * a1, size_t a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemAllocManaged_p_h) (CUdeviceptr *, size_t, unsigned int);\n  static cuMemAllocManaged_p_h cuMemAllocManaged_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocManaged(CUdeviceptr *, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocManaged_h == NULL)\n\tcuMemAllocManaged_h = (cuMemAllocManaged_p_h) dlsym(tau_handle,\"cuMemAllocManaged\"); \n    if (cuMemAllocManaged_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocManaged_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAlloc_v2(CUdeviceptr * a1, size_t a2) {\n\n  typedef CUresult (*cuMemAlloc_v2_p_h) (CUdeviceptr *, size_t);\n  static cuMemAlloc_v2_p_h cuMemAlloc_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAlloc_v2(CUdeviceptr *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAlloc_v2_h == NULL)\n\tcuMemAlloc_v2_h = (cuMemAlloc_v2_p_h) dlsym(tau_handle,\"cuMemAlloc_v2\"); \n    if (cuMemAlloc_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAlloc_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocPitch_v2(CUdeviceptr * a1, size_t * a2, size_t a3, size_t a4, unsigned int a5) {\n\n  typedef CUresult (*cuMemAllocPitch_v2_p_h) (CUdeviceptr *, size_t *, size_t, size_t, unsigned int);\n  static cuMemAllocPitch_v2_p_h cuMemAllocPitch_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocPitch_v2(CUdeviceptr *, size_t *, size_t, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocPitch_v2_h == NULL)\n\tcuMemAllocPitch_v2_h = (cuMemAllocPitch_v2_p_h) dlsym(tau_handle,\"cuMemAllocPitch_v2\"); \n    if (cuMemAllocPitch_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocPitch_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemFree_v2(CUdeviceptr a1) {\n\n  typedef CUresult (*cuMemFree_v2_p_h) (CUdeviceptr);\n  static cuMemFree_v2_p_h cuMemFree_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemFree_v2(CUdeviceptr) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemFree_v2_h == NULL)\n\tcuMemFree_v2_h = (cuMemFree_v2_p_h) dlsym(tau_handle,\"cuMemFree_v2\"); \n    if (cuMemFree_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemFree_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemGetAddressRange_v2(CUdeviceptr * a1, size_t * a2, CUdeviceptr a3) {\n\n  typedef CUresult (*cuMemGetAddressRange_v2_p_h) (CUdeviceptr *, size_t *, CUdeviceptr);\n  static cuMemGetAddressRange_v2_p_h cuMemGetAddressRange_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemGetAddressRange_v2(CUdeviceptr *, size_t *, CUdeviceptr) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemGetAddressRange_v2_h == NULL)\n\tcuMemGetAddressRange_v2_h = (cuMemGetAddressRange_v2_p_h) dlsym(tau_handle,\"cuMemGetAddressRange_v2\"); \n    if (cuMemGetAddressRange_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemGetAddressRange_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemAllocHost_v2(void ** a1, size_t a2) {\n\n  typedef CUresult (*cuMemAllocHost_v2_p_h) (void **, size_t);\n  static cuMemAllocHost_v2_p_h cuMemAllocHost_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemAllocHost_v2(void **, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemAllocHost_v2_h == NULL)\n\tcuMemAllocHost_v2_h = (cuMemAllocHost_v2_p_h) dlsym(tau_handle,\"cuMemAllocHost_v2\"); \n    if (cuMemAllocHost_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemAllocHost_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemFreeHost(void * a1) {\n\n  typedef CUresult (*cuMemFreeHost_p_h) (void *);\n  static cuMemFreeHost_p_h cuMemFreeHost_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemFreeHost(void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemFreeHost_h == NULL)\n\tcuMemFreeHost_h = (cuMemFreeHost_p_h) dlsym(tau_handle,\"cuMemFreeHost\"); \n    if (cuMemFreeHost_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemFreeHost_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostAlloc(void ** a1, size_t a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemHostAlloc_p_h) (void **, size_t, unsigned int);\n  static cuMemHostAlloc_p_h cuMemHostAlloc_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostAlloc(void **, size_t, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostAlloc_h == NULL)\n\tcuMemHostAlloc_h = (cuMemHostAlloc_p_h) dlsym(tau_handle,\"cuMemHostAlloc\"); \n    if (cuMemHostAlloc_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostAlloc_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * a1, void * a2, unsigned int a3) {\n\n  typedef CUresult (*cuMemHostGetDevicePointer_v2_p_h) (CUdeviceptr *, void *, unsigned int);\n  static cuMemHostGetDevicePointer_v2_p_h cuMemHostGetDevicePointer_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *, void *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostGetDevicePointer_v2_h == NULL)\n\tcuMemHostGetDevicePointer_v2_h = (cuMemHostGetDevicePointer_v2_p_h) dlsym(tau_handle,\"cuMemHostGetDevicePointer_v2\"); \n    if (cuMemHostGetDevicePointer_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostGetDevicePointer_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemHostGetFlags(unsigned int * a1, void * a2) {\n\n  typedef CUresult (*cuMemHostGetFlags_p_h) (unsigned int *, void *);\n  static cuMemHostGetFlags_p_h cuMemHostGetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemHostGetFlags(unsigned int *, void *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemHostGetFlags_h == NULL)\n\tcuMemHostGetFlags_h = (cuMemHostGetFlags_p_h) dlsym(tau_handle,\"cuMemHostGetFlags\"); \n    if (cuMemHostGetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemHostGetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoD_v2(CUdeviceptr a1, const void * a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyHtoD_v2_p_h) (CUdeviceptr, const void *, size_t);\n  static cuMemcpyHtoD_v2_p_h cuMemcpyHtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoD_v2(CUdeviceptr, const void *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoD_v2_h == NULL)\n\tcuMemcpyHtoD_v2_h = (cuMemcpyHtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoD_v2\"); \n    if (cuMemcpyHtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoD_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoH_v2(void * a1, CUdeviceptr a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyDtoH_v2_p_h) (void *, CUdeviceptr, size_t);\n  static cuMemcpyDtoH_v2_p_h cuMemcpyDtoH_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoH_v2(void *, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoH_v2_h == NULL)\n\tcuMemcpyDtoH_v2_h = (cuMemcpyDtoH_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoH_v2\"); \n    if (cuMemcpyDtoH_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoH_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoD_v2(CUdeviceptr a1, CUdeviceptr a2, size_t a3) {\n\n  typedef CUresult (*cuMemcpyDtoD_v2_p_h) (CUdeviceptr, CUdeviceptr, size_t);\n  static cuMemcpyDtoD_v2_p_h cuMemcpyDtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoD_v2(CUdeviceptr, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoD_v2_h == NULL)\n\tcuMemcpyDtoD_v2_h = (cuMemcpyDtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoD_v2\"); \n    if (cuMemcpyDtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoD_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoA_v2(CUarray a1, size_t a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyDtoA_v2_p_h) (CUarray, size_t, CUdeviceptr, size_t);\n  static cuMemcpyDtoA_v2_p_h cuMemcpyDtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoA_v2(CUarray, size_t, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoA_v2_h == NULL)\n\tcuMemcpyDtoA_v2_h = (cuMemcpyDtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoA_v2\"); \n    if (cuMemcpyDtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoA_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoD_v2(CUdeviceptr a1, CUarray a2, size_t a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyAtoD_v2_p_h) (CUdeviceptr, CUarray, size_t, size_t);\n  static cuMemcpyAtoD_v2_p_h cuMemcpyAtoD_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoD_v2(CUdeviceptr, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoD_v2_h == NULL)\n\tcuMemcpyAtoD_v2_h = (cuMemcpyAtoD_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoD_v2\"); \n    if (cuMemcpyAtoD_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoD_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoA_v2(CUarray a1, size_t a2, const void * a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyHtoA_v2_p_h) (CUarray, size_t, const void *, size_t);\n  static cuMemcpyHtoA_v2_p_h cuMemcpyHtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoA_v2(CUarray, size_t, const void *, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoA_v2_h == NULL)\n\tcuMemcpyHtoA_v2_h = (cuMemcpyHtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoA_v2\"); \n    if (cuMemcpyHtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoA_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoH_v2(void * a1, CUarray a2, size_t a3, size_t a4) {\n\n  typedef CUresult (*cuMemcpyAtoH_v2_p_h) (void *, CUarray, size_t, size_t);\n  static cuMemcpyAtoH_v2_p_h cuMemcpyAtoH_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoH_v2(void *, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoH_v2_h == NULL)\n\tcuMemcpyAtoH_v2_h = (cuMemcpyAtoH_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoH_v2\"); \n    if (cuMemcpyAtoH_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoH_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoA_v2(CUarray a1, size_t a2, CUarray a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemcpyAtoA_v2_p_h) (CUarray, size_t, CUarray, size_t, size_t);\n  static cuMemcpyAtoA_v2_p_h cuMemcpyAtoA_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoA_v2(CUarray, size_t, CUarray, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoA_v2_h == NULL)\n\tcuMemcpyAtoA_v2_h = (cuMemcpyAtoA_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoA_v2\"); \n    if (cuMemcpyAtoA_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoA_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * a1) {\n\n  typedef CUresult (*cuMemcpy2D_v2_p_h) (const CUDA_MEMCPY2D *);\n  static cuMemcpy2D_v2_p_h cuMemcpy2D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2D_v2_h == NULL)\n\tcuMemcpy2D_v2_h = (cuMemcpy2D_v2_p_h) dlsym(tau_handle,\"cuMemcpy2D_v2\"); \n    if (cuMemcpy2D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2D_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * a1) {\n\n  typedef CUresult (*cuMemcpy2DUnaligned_v2_p_h) (const CUDA_MEMCPY2D *);\n  static cuMemcpy2DUnaligned_v2_p_h cuMemcpy2DUnaligned_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2DUnaligned_v2_h == NULL)\n\tcuMemcpy2DUnaligned_v2_h = (cuMemcpy2DUnaligned_v2_p_h) dlsym(tau_handle,\"cuMemcpy2DUnaligned_v2\"); \n    if (cuMemcpy2DUnaligned_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2DUnaligned_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * a1) {\n\n  typedef CUresult (*cuMemcpy3D_v2_p_h) (const CUDA_MEMCPY3D *);\n  static cuMemcpy3D_v2_p_h cuMemcpy3D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy3D_v2_h == NULL)\n\tcuMemcpy3D_v2_h = (cuMemcpy3D_v2_p_h) dlsym(tau_handle,\"cuMemcpy3D_v2\"); \n    if (cuMemcpy3D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy3D_v2_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoDAsync_v2(CUdeviceptr a1, const void * a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyHtoDAsync_v2_p_h) (CUdeviceptr, const void *, size_t, CUstream);\n  static cuMemcpyHtoDAsync_v2_p_h cuMemcpyHtoDAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr, const void *, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoDAsync_v2_h == NULL)\n\tcuMemcpyHtoDAsync_v2_h = (cuMemcpyHtoDAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoDAsync_v2\"); \n    if (cuMemcpyHtoDAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoDAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoHAsync_v2(void * a1, CUdeviceptr a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyDtoHAsync_v2_p_h) (void *, CUdeviceptr, size_t, CUstream);\n  static cuMemcpyDtoHAsync_v2_p_h cuMemcpyDtoHAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoHAsync_v2(void *, CUdeviceptr, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoHAsync_v2_h == NULL)\n\tcuMemcpyDtoHAsync_v2_h = (cuMemcpyDtoHAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoHAsync_v2\"); \n    if (cuMemcpyDtoHAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoHAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyDtoDAsync_v2(CUdeviceptr a1, CUdeviceptr a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemcpyDtoDAsync_v2_p_h) (CUdeviceptr, CUdeviceptr, size_t, CUstream);\n  static cuMemcpyDtoDAsync_v2_p_h cuMemcpyDtoDAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr, CUdeviceptr, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyDtoDAsync_v2_h == NULL)\n\tcuMemcpyDtoDAsync_v2_h = (cuMemcpyDtoDAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyDtoDAsync_v2\"); \n    if (cuMemcpyDtoDAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyDtoDAsync_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyHtoAAsync_v2(CUarray a1, size_t a2, const void * a3, size_t a4, CUstream a5) {\n\n  typedef CUresult (*cuMemcpyHtoAAsync_v2_p_h) (CUarray, size_t, const void *, size_t, CUstream);\n  static cuMemcpyHtoAAsync_v2_p_h cuMemcpyHtoAAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyHtoAAsync_v2(CUarray, size_t, const void *, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyHtoAAsync_v2_h == NULL)\n\tcuMemcpyHtoAAsync_v2_h = (cuMemcpyHtoAAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyHtoAAsync_v2\"); \n    if (cuMemcpyHtoAAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyHtoAAsync_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpyAtoHAsync_v2(void * a1, CUarray a2, size_t a3, size_t a4, CUstream a5) {\n\n  typedef CUresult (*cuMemcpyAtoHAsync_v2_p_h) (void *, CUarray, size_t, size_t, CUstream);\n  static cuMemcpyAtoHAsync_v2_p_h cuMemcpyAtoHAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpyAtoHAsync_v2(void *, CUarray, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpyAtoHAsync_v2_h == NULL)\n\tcuMemcpyAtoHAsync_v2_h = (cuMemcpyAtoHAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpyAtoHAsync_v2\"); \n    if (cuMemcpyAtoHAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpyAtoHAsync_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * a1, CUstream a2) {\n\n  typedef CUresult (*cuMemcpy2DAsync_v2_p_h) (const CUDA_MEMCPY2D *, CUstream);\n  static cuMemcpy2DAsync_v2_p_h cuMemcpy2DAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy2DAsync_v2_h == NULL)\n\tcuMemcpy2DAsync_v2_h = (cuMemcpy2DAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpy2DAsync_v2\"); \n    if (cuMemcpy2DAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy2DAsync_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * a1, CUstream a2) {\n\n  typedef CUresult (*cuMemcpy3DAsync_v2_p_h) (const CUDA_MEMCPY3D *, CUstream);\n  static cuMemcpy3DAsync_v2_p_h cuMemcpy3DAsync_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemcpy3DAsync_v2_h == NULL)\n\tcuMemcpy3DAsync_v2_h = (cuMemcpy3DAsync_v2_p_h) dlsym(tau_handle,\"cuMemcpy3DAsync_v2\"); \n    if (cuMemcpy3DAsync_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemcpy3DAsync_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD8_v2(CUdeviceptr a1, unsigned char a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD8_v2_p_h) (CUdeviceptr, unsigned char, size_t);\n  static cuMemsetD8_v2_p_h cuMemsetD8_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD8_v2(CUdeviceptr, unsigned char, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD8_v2_h == NULL)\n\tcuMemsetD8_v2_h = (cuMemsetD8_v2_p_h) dlsym(tau_handle,\"cuMemsetD8_v2\"); \n    if (cuMemsetD8_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD8_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD16_v2(CUdeviceptr a1, unsigned short a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD16_v2_p_h) (CUdeviceptr, unsigned short, size_t);\n  static cuMemsetD16_v2_p_h cuMemsetD16_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD16_v2(CUdeviceptr, unsigned short, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD16_v2_h == NULL)\n\tcuMemsetD16_v2_h = (cuMemsetD16_v2_p_h) dlsym(tau_handle,\"cuMemsetD16_v2\"); \n    if (cuMemsetD16_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD16_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD32_v2(CUdeviceptr a1, unsigned int a2, size_t a3) {\n\n  typedef CUresult (*cuMemsetD32_v2_p_h) (CUdeviceptr, unsigned int, size_t);\n  static cuMemsetD32_v2_p_h cuMemsetD32_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD32_v2(CUdeviceptr, unsigned int, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD32_v2_h == NULL)\n\tcuMemsetD32_v2_h = (cuMemsetD32_v2_p_h) dlsym(tau_handle,\"cuMemsetD32_v2\"); \n    if (cuMemsetD32_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD32_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D8_v2(CUdeviceptr a1, size_t a2, unsigned char a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D8_v2_p_h) (CUdeviceptr, size_t, unsigned char, size_t, size_t);\n  static cuMemsetD2D8_v2_p_h cuMemsetD2D8_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D8_v2(CUdeviceptr, size_t, unsigned char, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D8_v2_h == NULL)\n\tcuMemsetD2D8_v2_h = (cuMemsetD2D8_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D8_v2\"); \n    if (cuMemsetD2D8_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D8_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D16_v2(CUdeviceptr a1, size_t a2, unsigned short a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D16_v2_p_h) (CUdeviceptr, size_t, unsigned short, size_t, size_t);\n  static cuMemsetD2D16_v2_p_h cuMemsetD2D16_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D16_v2(CUdeviceptr, size_t, unsigned short, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D16_v2_h == NULL)\n\tcuMemsetD2D16_v2_h = (cuMemsetD2D16_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D16_v2\"); \n    if (cuMemsetD2D16_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D16_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D32_v2(CUdeviceptr a1, size_t a2, unsigned int a3, size_t a4, size_t a5) {\n\n  typedef CUresult (*cuMemsetD2D32_v2_p_h) (CUdeviceptr, size_t, unsigned int, size_t, size_t);\n  static cuMemsetD2D32_v2_p_h cuMemsetD2D32_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D32_v2(CUdeviceptr, size_t, unsigned int, size_t, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D32_v2_h == NULL)\n\tcuMemsetD2D32_v2_h = (cuMemsetD2D32_v2_p_h) dlsym(tau_handle,\"cuMemsetD2D32_v2\"); \n    if (cuMemsetD2D32_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D32_v2_h)( a1,  a2,  a3,  a4,  a5);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD8Async(CUdeviceptr a1, unsigned char a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD8Async_p_h) (CUdeviceptr, unsigned char, size_t, CUstream);\n  static cuMemsetD8Async_p_h cuMemsetD8Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD8Async(CUdeviceptr, unsigned char, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD8Async_h == NULL)\n\tcuMemsetD8Async_h = (cuMemsetD8Async_p_h) dlsym(tau_handle,\"cuMemsetD8Async\"); \n    if (cuMemsetD8Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD8Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD16Async(CUdeviceptr a1, unsigned short a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD16Async_p_h) (CUdeviceptr, unsigned short, size_t, CUstream);\n  static cuMemsetD16Async_p_h cuMemsetD16Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD16Async(CUdeviceptr, unsigned short, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD16Async_h == NULL)\n\tcuMemsetD16Async_h = (cuMemsetD16Async_p_h) dlsym(tau_handle,\"cuMemsetD16Async\"); \n    if (cuMemsetD16Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD16Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD32Async(CUdeviceptr a1, unsigned int a2, size_t a3, CUstream a4) {\n\n  typedef CUresult (*cuMemsetD32Async_p_h) (CUdeviceptr, unsigned int, size_t, CUstream);\n  static cuMemsetD32Async_p_h cuMemsetD32Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD32Async(CUdeviceptr, unsigned int, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD32Async_h == NULL)\n\tcuMemsetD32Async_h = (cuMemsetD32Async_p_h) dlsym(tau_handle,\"cuMemsetD32Async\"); \n    if (cuMemsetD32Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD32Async_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D8Async(CUdeviceptr a1, size_t a2, unsigned char a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D8Async_p_h) (CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream);\n  static cuMemsetD2D8Async_p_h cuMemsetD2D8Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D8Async(CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D8Async_h == NULL)\n\tcuMemsetD2D8Async_h = (cuMemsetD2D8Async_p_h) dlsym(tau_handle,\"cuMemsetD2D8Async\"); \n    if (cuMemsetD2D8Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D8Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D16Async(CUdeviceptr a1, size_t a2, unsigned short a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D16Async_p_h) (CUdeviceptr, size_t, unsigned short, size_t, size_t, CUstream);\n  static cuMemsetD2D16Async_p_h cuMemsetD2D16Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D16Async(CUdeviceptr, size_t, unsigned short, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D16Async_h == NULL)\n\tcuMemsetD2D16Async_h = (cuMemsetD2D16Async_p_h) dlsym(tau_handle,\"cuMemsetD2D16Async\"); \n    if (cuMemsetD2D16Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D16Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuMemsetD2D32Async(CUdeviceptr a1, size_t a2, unsigned int a3, size_t a4, size_t a5, CUstream a6) {\n\n  typedef CUresult (*cuMemsetD2D32Async_p_h) (CUdeviceptr, size_t, unsigned int, size_t, size_t, CUstream);\n  static cuMemsetD2D32Async_p_h cuMemsetD2D32Async_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuMemsetD2D32Async(CUdeviceptr, size_t, unsigned int, size_t, size_t, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuMemsetD2D32Async_h == NULL)\n\tcuMemsetD2D32Async_h = (cuMemsetD2D32Async_p_h) dlsym(tau_handle,\"cuMemsetD2D32Async\"); \n    if (cuMemsetD2D32Async_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuMemsetD2D32Async_h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayCreate_v2(CUarray * a1, const CUDA_ARRAY_DESCRIPTOR * a2) {\n\n  typedef CUresult (*cuArrayCreate_v2_p_h) (CUarray *, const CUDA_ARRAY_DESCRIPTOR *);\n  static cuArrayCreate_v2_p_h cuArrayCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayCreate_v2(CUarray *, const CUDA_ARRAY_DESCRIPTOR *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayCreate_v2_h == NULL)\n\tcuArrayCreate_v2_h = (cuArrayCreate_v2_p_h) dlsym(tau_handle,\"cuArrayCreate_v2\"); \n    if (cuArrayCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayCreate_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * a1, CUarray a2) {\n\n  typedef CUresult (*cuArrayGetDescriptor_v2_p_h) (CUDA_ARRAY_DESCRIPTOR *, CUarray);\n  static cuArrayGetDescriptor_v2_p_h cuArrayGetDescriptor_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *, CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayGetDescriptor_v2_h == NULL)\n\tcuArrayGetDescriptor_v2_h = (cuArrayGetDescriptor_v2_p_h) dlsym(tau_handle,\"cuArrayGetDescriptor_v2\"); \n    if (cuArrayGetDescriptor_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayGetDescriptor_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArrayDestroy(CUarray a1) {\n\n  typedef CUresult (*cuArrayDestroy_p_h) (CUarray);\n  static cuArrayDestroy_p_h cuArrayDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArrayDestroy(CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArrayDestroy_h == NULL)\n\tcuArrayDestroy_h = (cuArrayDestroy_p_h) dlsym(tau_handle,\"cuArrayDestroy\"); \n    if (cuArrayDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArrayDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArray3DCreate_v2(CUarray * a1, const CUDA_ARRAY3D_DESCRIPTOR * a2) {\n\n  typedef CUresult (*cuArray3DCreate_v2_p_h) (CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *);\n  static cuArray3DCreate_v2_p_h cuArray3DCreate_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArray3DCreate_v2(CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArray3DCreate_v2_h == NULL)\n\tcuArray3DCreate_v2_h = (cuArray3DCreate_v2_p_h) dlsym(tau_handle,\"cuArray3DCreate_v2\"); \n    if (cuArray3DCreate_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArray3DCreate_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * a1, CUarray a2) {\n\n  typedef CUresult (*cuArray3DGetDescriptor_v2_p_h) (CUDA_ARRAY3D_DESCRIPTOR *, CUarray);\n  static cuArray3DGetDescriptor_v2_p_h cuArray3DGetDescriptor_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *, CUarray) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuArray3DGetDescriptor_v2_h == NULL)\n\tcuArray3DGetDescriptor_v2_h = (cuArray3DGetDescriptor_v2_p_h) dlsym(tau_handle,\"cuArray3DGetDescriptor_v2\"); \n    if (cuArray3DGetDescriptor_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuArray3DGetDescriptor_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamCreate(CUstream * a1, unsigned int a2) {\n\n  typedef CUresult (*cuStreamCreate_p_h) (CUstream *, unsigned int);\n  static cuStreamCreate_p_h cuStreamCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamCreate(CUstream *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamCreate_h == NULL)\n\tcuStreamCreate_h = (cuStreamCreate_p_h) dlsym(tau_handle,\"cuStreamCreate\"); \n    if (cuStreamCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamCreate_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamWaitEvent(CUstream a1, CUevent a2, unsigned int a3) {\n\n  typedef CUresult (*cuStreamWaitEvent_p_h) (CUstream, CUevent, unsigned int);\n  static cuStreamWaitEvent_p_h cuStreamWaitEvent_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamWaitEvent(CUstream, CUevent, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamWaitEvent_h == NULL)\n\tcuStreamWaitEvent_h = (cuStreamWaitEvent_p_h) dlsym(tau_handle,\"cuStreamWaitEvent\"); \n    if (cuStreamWaitEvent_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamWaitEvent_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamQuery(CUstream a1) {\n\n  typedef CUresult (*cuStreamQuery_p_h) (CUstream);\n  static cuStreamQuery_p_h cuStreamQuery_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamQuery(CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamQuery_h == NULL)\n\tcuStreamQuery_h = (cuStreamQuery_p_h) dlsym(tau_handle,\"cuStreamQuery\"); \n    if (cuStreamQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamSynchronize(CUstream a1) {\n\n  typedef CUresult (*cuStreamSynchronize_p_h) (CUstream);\n  static cuStreamSynchronize_p_h cuStreamSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamSynchronize(CUstream) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamSynchronize_h == NULL)\n\tcuStreamSynchronize_h = (cuStreamSynchronize_p_h) dlsym(tau_handle,\"cuStreamSynchronize\"); \n    if (cuStreamSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuStreamSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuStreamDestroy(CUstream a1) {\n\n  typedef CUresult (*cuStreamDestroy_p_h) (CUstream);\n  static cuStreamDestroy_p_h cuStreamDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuStreamDestroy(CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuStreamDestroy_h == NULL)\n\tcuStreamDestroy_h = (cuStreamDestroy_p_h) dlsym(tau_handle,\"cuStreamDestroy\"); \n    if (cuStreamDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuStreamDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventCreate(CUevent * a1, unsigned int a2) {\n\n  typedef CUresult (*cuEventCreate_p_h) (CUevent *, unsigned int);\n  static cuEventCreate_p_h cuEventCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventCreate(CUevent *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventCreate_h == NULL)\n\tcuEventCreate_h = (cuEventCreate_p_h) dlsym(tau_handle,\"cuEventCreate\"); \n    if (cuEventCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventCreate_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventRecord(CUevent a1, CUstream a2) {\n\n  typedef CUresult (*cuEventRecord_p_h) (CUevent, CUstream);\n  static cuEventRecord_p_h cuEventRecord_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventRecord(CUevent, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventRecord_h == NULL)\n\tcuEventRecord_h = (cuEventRecord_p_h) dlsym(tau_handle,\"cuEventRecord\"); \n    if (cuEventRecord_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventRecord_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventQuery(CUevent a1) {\n\n  typedef CUresult (*cuEventQuery_p_h) (CUevent);\n  static cuEventQuery_p_h cuEventQuery_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventQuery(CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventQuery_h == NULL)\n\tcuEventQuery_h = (cuEventQuery_p_h) dlsym(tau_handle,\"cuEventQuery\"); \n    if (cuEventQuery_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventQuery_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventSynchronize(CUevent a1) {\n\n  typedef CUresult (*cuEventSynchronize_p_h) (CUevent);\n  static cuEventSynchronize_p_h cuEventSynchronize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventSynchronize(CUevent) C\", \"\", CUDA_SYNC);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventSynchronize_h == NULL)\n\tcuEventSynchronize_h = (cuEventSynchronize_p_h) dlsym(tau_handle,\"cuEventSynchronize\"); \n    if (cuEventSynchronize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\tTau_cuda_register_sync_event();\n#endif \n  retval  =  (*cuEventSynchronize_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventDestroy(CUevent a1) {\n\n  typedef CUresult (*cuEventDestroy_p_h) (CUevent);\n  static cuEventDestroy_p_h cuEventDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventDestroy(CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventDestroy_h == NULL)\n\tcuEventDestroy_h = (cuEventDestroy_p_h) dlsym(tau_handle,\"cuEventDestroy\"); \n    if (cuEventDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuEventElapsedTime(float * a1, CUevent a2, CUevent a3) {\n\n  typedef CUresult (*cuEventElapsedTime_p_h) (float *, CUevent, CUevent);\n  static cuEventElapsedTime_p_h cuEventElapsedTime_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuEventElapsedTime(float *, CUevent, CUevent) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuEventElapsedTime_h == NULL)\n\tcuEventElapsedTime_h = (cuEventElapsedTime_p_h) dlsym(tau_handle,\"cuEventElapsedTime\"); \n    if (cuEventElapsedTime_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuEventElapsedTime_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetBlockShape(CUfunction a1, int a2, int a3, int a4) {\n\n  typedef CUresult (*cuFuncSetBlockShape_p_h) (CUfunction, int, int, int);\n  static cuFuncSetBlockShape_p_h cuFuncSetBlockShape_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetBlockShape(CUfunction, int, int, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetBlockShape_h == NULL)\n\tcuFuncSetBlockShape_h = (cuFuncSetBlockShape_p_h) dlsym(tau_handle,\"cuFuncSetBlockShape\"); \n    if (cuFuncSetBlockShape_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetBlockShape_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetSharedSize(CUfunction a1, unsigned int a2) {\n\n  typedef CUresult (*cuFuncSetSharedSize_p_h) (CUfunction, unsigned int);\n  static cuFuncSetSharedSize_p_h cuFuncSetSharedSize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetSharedSize(CUfunction, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetSharedSize_h == NULL)\n\tcuFuncSetSharedSize_h = (cuFuncSetSharedSize_p_h) dlsym(tau_handle,\"cuFuncSetSharedSize\"); \n    if (cuFuncSetSharedSize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetSharedSize_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncGetAttribute(int * a1, CUfunction_attribute a2, CUfunction a3) {\n\n  typedef CUresult (*cuFuncGetAttribute_p_h) (int *, CUfunction_attribute, CUfunction);\n  static cuFuncGetAttribute_p_h cuFuncGetAttribute_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncGetAttribute(int *, CUfunction_attribute, CUfunction) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncGetAttribute_h == NULL)\n\tcuFuncGetAttribute_h = (cuFuncGetAttribute_p_h) dlsym(tau_handle,\"cuFuncGetAttribute\"); \n    if (cuFuncGetAttribute_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncGetAttribute_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuFuncSetCacheConfig(CUfunction a1, CUfunc_cache a2) {\n\n  typedef CUresult (*cuFuncSetCacheConfig_p_h) (CUfunction, CUfunc_cache);\n  static cuFuncSetCacheConfig_p_h cuFuncSetCacheConfig_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuFuncSetCacheConfig(CUfunction, CUfunc_cache) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuFuncSetCacheConfig_h == NULL)\n\tcuFuncSetCacheConfig_h = (cuFuncSetCacheConfig_p_h) dlsym(tau_handle,\"cuFuncSetCacheConfig\"); \n    if (cuFuncSetCacheConfig_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuFuncSetCacheConfig_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetSize(CUfunction a1, unsigned int a2) {\n\n  typedef CUresult (*cuParamSetSize_p_h) (CUfunction, unsigned int);\n  static cuParamSetSize_p_h cuParamSetSize_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetSize(CUfunction, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetSize_h == NULL)\n\tcuParamSetSize_h = (cuParamSetSize_p_h) dlsym(tau_handle,\"cuParamSetSize\"); \n    if (cuParamSetSize_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetSize_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSeti(CUfunction a1, int a2, unsigned int a3) {\n\n  typedef CUresult (*cuParamSeti_p_h) (CUfunction, int, unsigned int);\n  static cuParamSeti_p_h cuParamSeti_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSeti(CUfunction, int, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSeti_h == NULL)\n\tcuParamSeti_h = (cuParamSeti_p_h) dlsym(tau_handle,\"cuParamSeti\"); \n    if (cuParamSeti_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSeti_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetf(CUfunction a1, int a2, float a3) {\n\n  typedef CUresult (*cuParamSetf_p_h) (CUfunction, int, float);\n  static cuParamSetf_p_h cuParamSetf_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetf(CUfunction, int, float) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetf_h == NULL)\n\tcuParamSetf_h = (cuParamSetf_p_h) dlsym(tau_handle,\"cuParamSetf\"); \n    if (cuParamSetf_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetf_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetv(CUfunction a1, int a2, void * a3, unsigned int a4) {\n\n  typedef CUresult (*cuParamSetv_p_h) (CUfunction, int, void *, unsigned int);\n  static cuParamSetv_p_h cuParamSetv_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetv(CUfunction, int, void *, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetv_h == NULL)\n\tcuParamSetv_h = (cuParamSetv_p_h) dlsym(tau_handle,\"cuParamSetv\"); \n    if (cuParamSetv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetv_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunch(CUfunction a1) {\n\n  typedef CUresult (*cuLaunch_p_h) (CUfunction);\n  static cuLaunch_p_h cuLaunch_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunch(CUfunction) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunch_h == NULL)\n\tcuLaunch_h = (cuLaunch_p_h) dlsym(tau_handle,\"cuLaunch\"); \n    if (cuLaunch_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device, ctx, 0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunch_h)( a1);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId), \n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchKernel(CUfunction a1, \n\tunsigned int a2,\n\tunsigned int a3,\n\tunsigned int a4,\n\tunsigned int a5,\n\tunsigned int a6,\n\tunsigned int a7,\n\tunsigned int a8,\n\tCUstream     a9,\n\tvoid **      a10,\n\tvoid **      a11\n) {\n\n  typedef CUresult (*cuLaunchKernel_p_h) (CUfunction,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tunsigned int,\n\tCUstream    ,\n\tvoid **     ,\n\tvoid **     );\n  static cuLaunchKernel_p_h cuLaunchKernel_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchKernel(CUfunction, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, CUstream, void **, void **) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchKernel_h == NULL)\n\tcuLaunchKernel_h = (cuLaunchKernel_p_h) dlsym(tau_handle,\"cuLaunchKernel\"); \n    if (cuLaunchKernel_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device, ctx, 0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchKernel_h)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId), \n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchGrid(CUfunction a1, int a2, int a3) {\n\n  typedef CUresult (*cuLaunchGrid_p_h) (CUfunction, int, int);\n  static cuLaunchGrid_p_h cuLaunchGrid_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchGrid(CUfunction, int, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchGrid_h == NULL)\n\tcuLaunchGrid_h = (cuLaunchGrid_p_h) dlsym(tau_handle,\"cuLaunchGrid\"); \n    if (cuLaunchGrid_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device,ctx,0);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchGrid_h)( a1,  a2,  a3);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId);\n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuLaunchGridAsync(CUfunction a1, int a2, int a3, CUstream a4) {\n\n  typedef CUresult (*cuLaunchGridAsync_p_h) (CUfunction, int, int, CUstream);\n  static cuLaunchGridAsync_p_h cuLaunchGridAsync_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuLaunchGridAsync(CUfunction, int, int, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuLaunchGridAsync_h == NULL)\n\tcuLaunchGridAsync_h = (cuLaunchGridAsync_p_h) dlsym(tau_handle,\"cuLaunchGridAsync\"); \n    if (cuLaunchGridAsync_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_init();\n\t\tint device;\n\t\tcuCtxGetDevice(&device);\n\t\tCUcontext ctx;\n\t\tcuCtxPopCurrent(&ctx);\n\t\tcuCtxPushCurrent(ctx);\n\t\tCudaDriverGpuEvent *gId = new CudaDriverGpuEvent(device,ctx,a4);\n\t\tTau_cuda_enqueue_kernel_enter_event(gId);\n#endif\n  \tretval  =  (*cuLaunchGridAsync_h)( a1,  a2,  a3,  a4);\n#ifdef TRACK_KERNEL\n\t\tTau_cuda_enqueue_kernel_exit_event(gId);\n#endif\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuParamSetTexRef(CUfunction a1, int a2, CUtexref a3) {\n\n  typedef CUresult (*cuParamSetTexRef_p_h) (CUfunction, int, CUtexref);\n  static cuParamSetTexRef_p_h cuParamSetTexRef_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuParamSetTexRef(CUfunction, int, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuParamSetTexRef_h == NULL)\n\tcuParamSetTexRef_h = (cuParamSetTexRef_p_h) dlsym(tau_handle,\"cuParamSetTexRef\"); \n    if (cuParamSetTexRef_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuParamSetTexRef_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetArray(CUtexref a1, CUarray a2, unsigned int a3) {\n\n  typedef CUresult (*cuTexRefSetArray_p_h) (CUtexref, CUarray, unsigned int);\n  static cuTexRefSetArray_p_h cuTexRefSetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetArray(CUtexref, CUarray, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetArray_h == NULL)\n\tcuTexRefSetArray_h = (cuTexRefSetArray_p_h) dlsym(tau_handle,\"cuTexRefSetArray\"); \n    if (cuTexRefSetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddress_v2(size_t * a1, CUtexref a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuTexRefSetAddress_v2_p_h) (size_t *, CUtexref, CUdeviceptr, size_t);\n  static cuTexRefSetAddress_v2_p_h cuTexRefSetAddress_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddress_v2(size_t *, CUtexref, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddress_v2_h == NULL)\n\tcuTexRefSetAddress_v2_h = (cuTexRefSetAddress_v2_p_h) dlsym(tau_handle,\"cuTexRefSetAddress_v2\"); \n    if (cuTexRefSetAddress_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddress_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddress2D_v2(CUtexref a1, const CUDA_ARRAY_DESCRIPTOR * a2, CUdeviceptr a3, size_t a4) {\n\n  typedef CUresult (*cuTexRefSetAddress2D_v2_p_h) (CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, size_t);\n  static cuTexRefSetAddress2D_v2_p_h cuTexRefSetAddress2D_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddress2D_v2(CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, size_t) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddress2D_v2_h == NULL)\n\tcuTexRefSetAddress2D_v2_h = (cuTexRefSetAddress2D_v2_p_h) dlsym(tau_handle,\"cuTexRefSetAddress2D_v2\"); \n    if (cuTexRefSetAddress2D_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddress2D_v2_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFormat(CUtexref a1, CUarray_format a2, int a3) {\n\n  typedef CUresult (*cuTexRefSetFormat_p_h) (CUtexref, CUarray_format, int);\n  static cuTexRefSetFormat_p_h cuTexRefSetFormat_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFormat(CUtexref, CUarray_format, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFormat_h == NULL)\n\tcuTexRefSetFormat_h = (cuTexRefSetFormat_p_h) dlsym(tau_handle,\"cuTexRefSetFormat\"); \n    if (cuTexRefSetFormat_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFormat_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetAddressMode(CUtexref a1, int a2, CUaddress_mode a3) {\n\n  typedef CUresult (*cuTexRefSetAddressMode_p_h) (CUtexref, int, CUaddress_mode);\n  static cuTexRefSetAddressMode_p_h cuTexRefSetAddressMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetAddressMode(CUtexref, int, CUaddress_mode) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetAddressMode_h == NULL)\n\tcuTexRefSetAddressMode_h = (cuTexRefSetAddressMode_p_h) dlsym(tau_handle,\"cuTexRefSetAddressMode\"); \n    if (cuTexRefSetAddressMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetAddressMode_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFilterMode(CUtexref a1, CUfilter_mode a2) {\n\n  typedef CUresult (*cuTexRefSetFilterMode_p_h) (CUtexref, CUfilter_mode);\n  static cuTexRefSetFilterMode_p_h cuTexRefSetFilterMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFilterMode(CUtexref, CUfilter_mode) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFilterMode_h == NULL)\n\tcuTexRefSetFilterMode_h = (cuTexRefSetFilterMode_p_h) dlsym(tau_handle,\"cuTexRefSetFilterMode\"); \n    if (cuTexRefSetFilterMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFilterMode_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefSetFlags(CUtexref a1, unsigned int a2) {\n\n  typedef CUresult (*cuTexRefSetFlags_p_h) (CUtexref, unsigned int);\n  static cuTexRefSetFlags_p_h cuTexRefSetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefSetFlags(CUtexref, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefSetFlags_h == NULL)\n\tcuTexRefSetFlags_h = (cuTexRefSetFlags_p_h) dlsym(tau_handle,\"cuTexRefSetFlags\"); \n    if (cuTexRefSetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefSetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetAddress_v2(CUdeviceptr * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetAddress_v2_p_h) (CUdeviceptr *, CUtexref);\n  static cuTexRefGetAddress_v2_p_h cuTexRefGetAddress_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetAddress_v2(CUdeviceptr *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetAddress_v2_h == NULL)\n\tcuTexRefGetAddress_v2_h = (cuTexRefGetAddress_v2_p_h) dlsym(tau_handle,\"cuTexRefGetAddress_v2\"); \n    if (cuTexRefGetAddress_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetAddress_v2_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetArray(CUarray * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetArray_p_h) (CUarray *, CUtexref);\n  static cuTexRefGetArray_p_h cuTexRefGetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetArray(CUarray *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetArray_h == NULL)\n\tcuTexRefGetArray_h = (cuTexRefGetArray_p_h) dlsym(tau_handle,\"cuTexRefGetArray\"); \n    if (cuTexRefGetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetArray_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetAddressMode(CUaddress_mode * a1, CUtexref a2, int a3) {\n\n  typedef CUresult (*cuTexRefGetAddressMode_p_h) (CUaddress_mode *, CUtexref, int);\n  static cuTexRefGetAddressMode_p_h cuTexRefGetAddressMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetAddressMode(CUaddress_mode *, CUtexref, int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetAddressMode_h == NULL)\n\tcuTexRefGetAddressMode_h = (cuTexRefGetAddressMode_p_h) dlsym(tau_handle,\"cuTexRefGetAddressMode\"); \n    if (cuTexRefGetAddressMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetAddressMode_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFilterMode(CUfilter_mode * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetFilterMode_p_h) (CUfilter_mode *, CUtexref);\n  static cuTexRefGetFilterMode_p_h cuTexRefGetFilterMode_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFilterMode(CUfilter_mode *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFilterMode_h == NULL)\n\tcuTexRefGetFilterMode_h = (cuTexRefGetFilterMode_p_h) dlsym(tau_handle,\"cuTexRefGetFilterMode\"); \n    if (cuTexRefGetFilterMode_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFilterMode_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFormat(CUarray_format * a1, int * a2, CUtexref a3) {\n\n  typedef CUresult (*cuTexRefGetFormat_p_h) (CUarray_format *, int *, CUtexref);\n  static cuTexRefGetFormat_p_h cuTexRefGetFormat_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFormat(CUarray_format *, int *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFormat_h == NULL)\n\tcuTexRefGetFormat_h = (cuTexRefGetFormat_p_h) dlsym(tau_handle,\"cuTexRefGetFormat\"); \n    if (cuTexRefGetFormat_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFormat_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefGetFlags(unsigned int * a1, CUtexref a2) {\n\n  typedef CUresult (*cuTexRefGetFlags_p_h) (unsigned int *, CUtexref);\n  static cuTexRefGetFlags_p_h cuTexRefGetFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefGetFlags(unsigned int *, CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefGetFlags_h == NULL)\n\tcuTexRefGetFlags_h = (cuTexRefGetFlags_p_h) dlsym(tau_handle,\"cuTexRefGetFlags\"); \n    if (cuTexRefGetFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefGetFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefCreate(CUtexref * a1) {\n\n  typedef CUresult (*cuTexRefCreate_p_h) (CUtexref *);\n  static cuTexRefCreate_p_h cuTexRefCreate_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefCreate(CUtexref *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefCreate_h == NULL)\n\tcuTexRefCreate_h = (cuTexRefCreate_p_h) dlsym(tau_handle,\"cuTexRefCreate\"); \n    if (cuTexRefCreate_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefCreate_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuTexRefDestroy(CUtexref a1) {\n\n  typedef CUresult (*cuTexRefDestroy_p_h) (CUtexref);\n  static cuTexRefDestroy_p_h cuTexRefDestroy_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuTexRefDestroy(CUtexref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuTexRefDestroy_h == NULL)\n\tcuTexRefDestroy_h = (cuTexRefDestroy_p_h) dlsym(tau_handle,\"cuTexRefDestroy\"); \n    if (cuTexRefDestroy_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuTexRefDestroy_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuSurfRefSetArray(CUsurfref a1, CUarray a2, unsigned int a3) {\n\n  typedef CUresult (*cuSurfRefSetArray_p_h) (CUsurfref, CUarray, unsigned int);\n  static cuSurfRefSetArray_p_h cuSurfRefSetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuSurfRefSetArray(CUsurfref, CUarray, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuSurfRefSetArray_h == NULL)\n\tcuSurfRefSetArray_h = (cuSurfRefSetArray_p_h) dlsym(tau_handle,\"cuSurfRefSetArray\"); \n    if (cuSurfRefSetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuSurfRefSetArray_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuSurfRefGetArray(CUarray * a1, CUsurfref a2) {\n\n  typedef CUresult (*cuSurfRefGetArray_p_h) (CUarray *, CUsurfref);\n  static cuSurfRefGetArray_p_h cuSurfRefGetArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuSurfRefGetArray(CUarray *, CUsurfref) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuSurfRefGetArray_h == NULL)\n\tcuSurfRefGetArray_h = (cuSurfRefGetArray_p_h) dlsym(tau_handle,\"cuSurfRefGetArray\"); \n    if (cuSurfRefGetArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuSurfRefGetArray_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsUnregisterResource(CUgraphicsResource a1) {\n\n  typedef CUresult (*cuGraphicsUnregisterResource_p_h) (CUgraphicsResource);\n  static cuGraphicsUnregisterResource_p_h cuGraphicsUnregisterResource_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsUnregisterResource(CUgraphicsResource) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsUnregisterResource_h == NULL)\n\tcuGraphicsUnregisterResource_h = (cuGraphicsUnregisterResource_p_h) dlsym(tau_handle,\"cuGraphicsUnregisterResource\"); \n    if (cuGraphicsUnregisterResource_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsUnregisterResource_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsSubResourceGetMappedArray(CUarray * a1, CUgraphicsResource a2, unsigned int a3, unsigned int a4) {\n\n  typedef CUresult (*cuGraphicsSubResourceGetMappedArray_p_h) (CUarray *, CUgraphicsResource, unsigned int, unsigned int);\n  static cuGraphicsSubResourceGetMappedArray_p_h cuGraphicsSubResourceGetMappedArray_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsSubResourceGetMappedArray(CUarray *, CUgraphicsResource, unsigned int, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsSubResourceGetMappedArray_h == NULL)\n\tcuGraphicsSubResourceGetMappedArray_h = (cuGraphicsSubResourceGetMappedArray_p_h) dlsym(tau_handle,\"cuGraphicsSubResourceGetMappedArray\"); \n    if (cuGraphicsSubResourceGetMappedArray_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsSubResourceGetMappedArray_h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * a1, size_t * a2, CUgraphicsResource a3) {\n\n  typedef CUresult (*cuGraphicsResourceGetMappedPointer_v2_p_h) (CUdeviceptr *, size_t *, CUgraphicsResource);\n  static cuGraphicsResourceGetMappedPointer_v2_p_h cuGraphicsResourceGetMappedPointer_v2_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *, size_t *, CUgraphicsResource) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsResourceGetMappedPointer_v2_h == NULL)\n\tcuGraphicsResourceGetMappedPointer_v2_h = (cuGraphicsResourceGetMappedPointer_v2_p_h) dlsym(tau_handle,\"cuGraphicsResourceGetMappedPointer_v2\"); \n    if (cuGraphicsResourceGetMappedPointer_v2_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsResourceGetMappedPointer_v2_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource a1, unsigned int a2) {\n\n  typedef CUresult (*cuGraphicsResourceSetMapFlags_p_h) (CUgraphicsResource, unsigned int);\n  static cuGraphicsResourceSetMapFlags_p_h cuGraphicsResourceSetMapFlags_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource, unsigned int) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsResourceSetMapFlags_h == NULL)\n\tcuGraphicsResourceSetMapFlags_h = (cuGraphicsResourceSetMapFlags_p_h) dlsym(tau_handle,\"cuGraphicsResourceSetMapFlags\"); \n    if (cuGraphicsResourceSetMapFlags_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsResourceSetMapFlags_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsMapResources(unsigned int a1, CUgraphicsResource * a2, CUstream a3) {\n\n  typedef CUresult (*cuGraphicsMapResources_p_h) (unsigned int, CUgraphicsResource *, CUstream);\n  static cuGraphicsMapResources_p_h cuGraphicsMapResources_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsMapResources(unsigned int, CUgraphicsResource *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsMapResources_h == NULL)\n\tcuGraphicsMapResources_h = (cuGraphicsMapResources_p_h) dlsym(tau_handle,\"cuGraphicsMapResources\"); \n    if (cuGraphicsMapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsMapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGraphicsUnmapResources(unsigned int a1, CUgraphicsResource * a2, CUstream a3) {\n\n  typedef CUresult (*cuGraphicsUnmapResources_p_h) (unsigned int, CUgraphicsResource *, CUstream);\n  static cuGraphicsUnmapResources_p_h cuGraphicsUnmapResources_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGraphicsUnmapResources(unsigned int, CUgraphicsResource *, CUstream) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGraphicsUnmapResources_h == NULL)\n\tcuGraphicsUnmapResources_h = (cuGraphicsUnmapResources_p_h) dlsym(tau_handle,\"cuGraphicsUnmapResources\"); \n    if (cuGraphicsUnmapResources_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGraphicsUnmapResources_h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\nCUresult cuGetExportTable(const void ** a1, const CUuuid * a2) {\n\n  typedef CUresult (*cuGetExportTable_p_h) (const void **, const CUuuid *);\n  static cuGetExportTable_p_h cuGetExportTable_h = NULL;\n  CUresult retval;\n  TAU_PROFILE_TIMER(t,\"CUresult cuGetExportTable(const void **, const CUuuid *) C\", \"\", CUDA_API);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (cuGetExportTable_h == NULL)\n\tcuGetExportTable_h = (cuGetExportTable_p_h) dlsym(tau_handle,\"cuGetExportTable\"); \n    if (cuGetExportTable_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*cuGetExportTable_h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/shmem/tau_shmem_wrapper/wr_dynamic.c": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <tau_shmem.h>\n#include <Profile/Profiler.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n\n\nstatic void * get_function_handle(char const * name)\n{\n  char const * err;\n  void * handle;\n\n  // Reset error pointer\n  dlerror();\n\n  // Attempt to get the function handle\n  handle = dlsym(RTLD_NEXT, name);\n\n  // Detect errors\n  if ((err = dlerror())) {\n    // These calls are unsafe, but we're about to die anyway.     \n    fprintf(stderr, \"Error getting %s handle: %s\\n\", name, err);  \n    fflush(stderr);\n    exit(1);\n  }\n\n  return handle;\n}\n\n/**********************************************************\n   shmem_get8\n **********************************************************/\n\nextern void  __wrap_shmem_get8(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get8(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get8_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get8_t shmem_get8_handle = (shmem_get8_t)NULL;\n  if (!shmem_get8_handle) {\n    shmem_get8_handle = get_function_handle(\"shmem_get8\");\n  }\n\n  shmem_get8_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get8(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get8(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get16\n **********************************************************/\n\nextern void  __wrap_shmem_get16(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get16(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get16_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get16_t shmem_get16_handle = (shmem_get16_t)NULL;\n  if (!shmem_get16_handle) {\n    shmem_get16_handle = get_function_handle(\"shmem_get16\");\n  }\n\n  shmem_get16_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get16(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get16(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get32\n **********************************************************/\n\nextern void  __wrap_shmem_get32(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get32(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get32_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get32_t shmem_get32_handle = (shmem_get32_t)NULL;\n  if (!shmem_get32_handle) {\n    shmem_get32_handle = get_function_handle(\"shmem_get32\");\n  }\n\n  shmem_get32_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get32(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get32(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get64\n **********************************************************/\n\nextern void  __wrap_shmem_get64(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get64(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get64_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get64_t shmem_get64_handle = (shmem_get64_t)NULL;\n  if (!shmem_get64_handle) {\n    shmem_get64_handle = get_function_handle(\"shmem_get64\");\n  }\n\n  shmem_get64_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get64(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get64(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get128\n **********************************************************/\n\nextern void  __wrap_shmem_get128(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get128(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get128_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get128_t shmem_get128_handle = (shmem_get128_t)NULL;\n  if (!shmem_get128_handle) {\n    shmem_get128_handle = get_function_handle(\"shmem_get128\");\n  }\n\n  shmem_get128_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get128(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get128(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_getmem\n **********************************************************/\n\nextern void  __wrap_shmem_getmem(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_getmem(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_getmem_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_getmem_t shmem_getmem_handle = (shmem_getmem_t)NULL;\n  if (!shmem_getmem_handle) {\n    shmem_getmem_handle = get_function_handle(\"shmem_getmem\");\n  }\n\n  shmem_getmem_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_getmem(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_getmem(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_char_get\n **********************************************************/\n\nextern void  __wrap_shmem_char_get(char * a1, const char * a2, size_t a3, int a4) ;\nextern void  __real_shmem_char_get(char * a1, const char * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_char_get_t)(char * a1, const char * a2, size_t a3, int a4);\n  static shmem_char_get_t shmem_char_get_handle = (shmem_char_get_t)NULL;\n  if (!shmem_char_get_handle) {\n    shmem_char_get_handle = get_function_handle(\"shmem_char_get\");\n  }\n\n  shmem_char_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_char_get(char * a1, const char * a2, size_t a3, int a4) {\n   __wrap_shmem_char_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_get\n **********************************************************/\n\nextern void  __wrap_shmem_short_get(short * a1, const short * a2, size_t a3, int a4) ;\nextern void  __real_shmem_short_get(short * a1, const short * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_short_get_t)(short * a1, const short * a2, size_t a3, int a4);\n  static shmem_short_get_t shmem_short_get_handle = (shmem_short_get_t)NULL;\n  if (!shmem_short_get_handle) {\n    shmem_short_get_handle = get_function_handle(\"shmem_short_get\");\n  }\n\n  shmem_short_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_get(short * a1, const short * a2, size_t a3, int a4) {\n   __wrap_shmem_short_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_get\n **********************************************************/\n\nextern void  __wrap_shmem_int_get(int * a1, const int * a2, size_t a3, int a4) ;\nextern void  __real_shmem_int_get(int * a1, const int * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_int_get_t)(int * a1, const int * a2, size_t a3, int a4);\n  static shmem_int_get_t shmem_int_get_handle = (shmem_int_get_t)NULL;\n  if (!shmem_int_get_handle) {\n    shmem_int_get_handle = get_function_handle(\"shmem_int_get\");\n  }\n\n  shmem_int_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_get(int * a1, const int * a2, size_t a3, int a4) {\n   __wrap_shmem_int_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_get\n **********************************************************/\n\nextern void  __wrap_shmem_long_get(long * a1, const long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_long_get(long * a1, const long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_long_get_t)(long * a1, const long * a2, size_t a3, int a4);\n  static shmem_long_get_t shmem_long_get_handle = (shmem_long_get_t)NULL;\n  if (!shmem_long_get_handle) {\n    shmem_long_get_handle = get_function_handle(\"shmem_long_get\");\n  }\n\n  shmem_long_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_get(long * a1, const long * a2, size_t a3, int a4) {\n   __wrap_shmem_long_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_get\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_get(long long * a1, const long long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_longlong_get(long long * a1, const long long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_longlong_get_t)(long long * a1, const long long * a2, size_t a3, int a4);\n  static shmem_longlong_get_t shmem_longlong_get_handle = (shmem_longlong_get_t)NULL;\n  if (!shmem_longlong_get_handle) {\n    shmem_longlong_get_handle = get_function_handle(\"shmem_longlong_get\");\n  }\n\n  shmem_longlong_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_get(long long * a1, const long long * a2, size_t a3, int a4) {\n   __wrap_shmem_longlong_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float_get\n **********************************************************/\n\nextern void  __wrap_shmem_float_get(float * a1, const float * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float_get(float * a1, const float * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float_get_t)(float * a1, const float * a2, size_t a3, int a4);\n  static shmem_float_get_t shmem_float_get_handle = (shmem_float_get_t)NULL;\n  if (!shmem_float_get_handle) {\n    shmem_float_get_handle = get_function_handle(\"shmem_float_get\");\n  }\n\n  shmem_float_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float_get(float * a1, const float * a2, size_t a3, int a4) {\n   __wrap_shmem_float_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_double_get\n **********************************************************/\n\nextern void  __wrap_shmem_double_get(double * a1, const double * a2, size_t a3, int a4) ;\nextern void  __real_shmem_double_get(double * a1, const double * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_double_get_t)(double * a1, const double * a2, size_t a3, int a4);\n  static shmem_double_get_t shmem_double_get_handle = (shmem_double_get_t)NULL;\n  if (!shmem_double_get_handle) {\n    shmem_double_get_handle = get_function_handle(\"shmem_double_get\");\n  }\n\n  shmem_double_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_double_get(double * a1, const double * a2, size_t a3, int a4) {\n   __wrap_shmem_double_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float128_get\n **********************************************************/\n\nextern void  __wrap_shmem_float128_get(__float128 * a1, const __float128 * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float128_get(__float128 * a1, const __float128 * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float128_get_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4);\n  static shmem_float128_get_t shmem_float128_get_handle = (shmem_float128_get_t)NULL;\n  if (!shmem_float128_get_handle) {\n    shmem_float128_get_handle = get_function_handle(\"shmem_float128_get\");\n  }\n\n  shmem_float128_get_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float128_get(__float128 * a1, const __float128 * a2, size_t a3, int a4) {\n   __wrap_shmem_float128_get(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put8\n **********************************************************/\n\nextern void  __wrap_shmem_put8(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put8(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put8_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put8_t shmem_put8_handle = (shmem_put8_t)NULL;\n  if (!shmem_put8_handle) {\n    shmem_put8_handle = get_function_handle(\"shmem_put8\");\n  }\n\n  shmem_put8_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put8(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put8(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put16\n **********************************************************/\n\nextern void  __wrap_shmem_put16(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put16(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put16_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put16_t shmem_put16_handle = (shmem_put16_t)NULL;\n  if (!shmem_put16_handle) {\n    shmem_put16_handle = get_function_handle(\"shmem_put16\");\n  }\n\n  shmem_put16_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put16(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put16(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put32\n **********************************************************/\n\nextern void  __wrap_shmem_put32(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put32(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put32_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put32_t shmem_put32_handle = (shmem_put32_t)NULL;\n  if (!shmem_put32_handle) {\n    shmem_put32_handle = get_function_handle(\"shmem_put32\");\n  }\n\n  shmem_put32_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put32(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put32(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put64\n **********************************************************/\n\nextern void  __wrap_shmem_put64(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put64(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put64_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put64_t shmem_put64_handle = (shmem_put64_t)NULL;\n  if (!shmem_put64_handle) {\n    shmem_put64_handle = get_function_handle(\"shmem_put64\");\n  }\n\n  shmem_put64_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put64(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put64(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put128\n **********************************************************/\n\nextern void  __wrap_shmem_put128(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put128(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put128_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put128_t shmem_put128_handle = (shmem_put128_t)NULL;\n  if (!shmem_put128_handle) {\n    shmem_put128_handle = get_function_handle(\"shmem_put128\");\n  }\n\n  shmem_put128_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put128(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put128(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_putmem\n **********************************************************/\n\nextern void  __wrap_shmem_putmem(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_putmem(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_putmem_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_putmem_t shmem_putmem_handle = (shmem_putmem_t)NULL;\n  if (!shmem_putmem_handle) {\n    shmem_putmem_handle = get_function_handle(\"shmem_putmem\");\n  }\n\n  shmem_putmem_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_putmem(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_putmem(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_char_put\n **********************************************************/\n\nextern void  __wrap_shmem_char_put(char * a1, const char * a2, size_t a3, int a4) ;\nextern void  __real_shmem_char_put(char * a1, const char * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_char_put_t)(char * a1, const char * a2, size_t a3, int a4);\n  static shmem_char_put_t shmem_char_put_handle = (shmem_char_put_t)NULL;\n  if (!shmem_char_put_handle) {\n    shmem_char_put_handle = get_function_handle(\"shmem_char_put\");\n  }\n\n  shmem_char_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_char_put(char * a1, const char * a2, size_t a3, int a4) {\n   __wrap_shmem_char_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_put\n **********************************************************/\n\nextern void  __wrap_shmem_short_put(short * a1, const short * a2, size_t a3, int a4) ;\nextern void  __real_shmem_short_put(short * a1, const short * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_short_put_t)(short * a1, const short * a2, size_t a3, int a4);\n  static shmem_short_put_t shmem_short_put_handle = (shmem_short_put_t)NULL;\n  if (!shmem_short_put_handle) {\n    shmem_short_put_handle = get_function_handle(\"shmem_short_put\");\n  }\n\n  shmem_short_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_put(short * a1, const short * a2, size_t a3, int a4) {\n   __wrap_shmem_short_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_put\n **********************************************************/\n\nextern void  __wrap_shmem_int_put(int * a1, const int * a2, size_t a3, int a4) ;\nextern void  __real_shmem_int_put(int * a1, const int * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_int_put_t)(int * a1, const int * a2, size_t a3, int a4);\n  static shmem_int_put_t shmem_int_put_handle = (shmem_int_put_t)NULL;\n  if (!shmem_int_put_handle) {\n    shmem_int_put_handle = get_function_handle(\"shmem_int_put\");\n  }\n\n  shmem_int_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_put(int * a1, const int * a2, size_t a3, int a4) {\n   __wrap_shmem_int_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_put\n **********************************************************/\n\nextern void  __wrap_shmem_long_put(long * a1, const long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_long_put(long * a1, const long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_long_put_t)(long * a1, const long * a2, size_t a3, int a4);\n  static shmem_long_put_t shmem_long_put_handle = (shmem_long_put_t)NULL;\n  if (!shmem_long_put_handle) {\n    shmem_long_put_handle = get_function_handle(\"shmem_long_put\");\n  }\n\n  shmem_long_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_put(long * a1, const long * a2, size_t a3, int a4) {\n   __wrap_shmem_long_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_put\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_put(long long * a1, const long long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_longlong_put(long long * a1, const long long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_longlong_put_t)(long long * a1, const long long * a2, size_t a3, int a4);\n  static shmem_longlong_put_t shmem_longlong_put_handle = (shmem_longlong_put_t)NULL;\n  if (!shmem_longlong_put_handle) {\n    shmem_longlong_put_handle = get_function_handle(\"shmem_longlong_put\");\n  }\n\n  shmem_longlong_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_put(long long * a1, const long long * a2, size_t a3, int a4) {\n   __wrap_shmem_longlong_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float_put\n **********************************************************/\n\nextern void  __wrap_shmem_float_put(float * a1, const float * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float_put(float * a1, const float * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float_put_t)(float * a1, const float * a2, size_t a3, int a4);\n  static shmem_float_put_t shmem_float_put_handle = (shmem_float_put_t)NULL;\n  if (!shmem_float_put_handle) {\n    shmem_float_put_handle = get_function_handle(\"shmem_float_put\");\n  }\n\n  shmem_float_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float_put(float * a1, const float * a2, size_t a3, int a4) {\n   __wrap_shmem_float_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_double_put\n **********************************************************/\n\nextern void  __wrap_shmem_double_put(double * a1, const double * a2, size_t a3, int a4) ;\nextern void  __real_shmem_double_put(double * a1, const double * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_double_put_t)(double * a1, const double * a2, size_t a3, int a4);\n  static shmem_double_put_t shmem_double_put_handle = (shmem_double_put_t)NULL;\n  if (!shmem_double_put_handle) {\n    shmem_double_put_handle = get_function_handle(\"shmem_double_put\");\n  }\n\n  shmem_double_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_double_put(double * a1, const double * a2, size_t a3, int a4) {\n   __wrap_shmem_double_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float128_put\n **********************************************************/\n\nextern void  __wrap_shmem_float128_put(__float128 * a1, const __float128 * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float128_put(__float128 * a1, const __float128 * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float128_put_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4);\n  static shmem_float128_put_t shmem_float128_put_handle = (shmem_float128_put_t)NULL;\n  if (!shmem_float128_put_handle) {\n    shmem_float128_put_handle = get_function_handle(\"shmem_float128_put\");\n  }\n\n  shmem_float128_put_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float128_put(__float128 * a1, const __float128 * a2, size_t a3, int a4) {\n   __wrap_shmem_float128_put(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put16_signal\n **********************************************************/\n\nextern void  __wrap_shmem_put16_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_put16_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_put16_signal_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_put16_signal_t shmem_put16_signal_handle = (shmem_put16_signal_t)NULL;\n  if (!shmem_put16_signal_handle) {\n    shmem_put16_signal_handle = get_function_handle(\"shmem_put16_signal\");\n  }\n\n  shmem_put16_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_put16_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_put16_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_put32_signal\n **********************************************************/\n\nextern void  __wrap_shmem_put32_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_put32_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_put32_signal_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_put32_signal_t shmem_put32_signal_handle = (shmem_put32_signal_t)NULL;\n  if (!shmem_put32_signal_handle) {\n    shmem_put32_signal_handle = get_function_handle(\"shmem_put32_signal\");\n  }\n\n  shmem_put32_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_put32_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_put32_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_put64_signal\n **********************************************************/\n\nextern void  __wrap_shmem_put64_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_put64_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_put64_signal_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_put64_signal_t shmem_put64_signal_handle = (shmem_put64_signal_t)NULL;\n  if (!shmem_put64_signal_handle) {\n    shmem_put64_signal_handle = get_function_handle(\"shmem_put64_signal\");\n  }\n\n  shmem_put64_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_put64_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_put64_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_put128_signal\n **********************************************************/\n\nextern void  __wrap_shmem_put128_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_put128_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_put128_signal_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_put128_signal_t shmem_put128_signal_handle = (shmem_put128_signal_t)NULL;\n  if (!shmem_put128_signal_handle) {\n    shmem_put128_signal_handle = get_function_handle(\"shmem_put128_signal\");\n  }\n\n  shmem_put128_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_put128_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_put128_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_putmem_signal\n **********************************************************/\n\nextern void  __wrap_shmem_putmem_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_putmem_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_putmem_signal_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_putmem_signal_t shmem_putmem_signal_handle = (shmem_putmem_signal_t)NULL;\n  if (!shmem_putmem_signal_handle) {\n    shmem_putmem_signal_handle = get_function_handle(\"shmem_putmem_signal\");\n  }\n\n  shmem_putmem_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_putmem_signal(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_putmem_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_short_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_short_put_signal(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_short_put_signal(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_short_put_signal_t)(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_short_put_signal_t shmem_short_put_signal_handle = (shmem_short_put_signal_t)NULL;\n  if (!shmem_short_put_signal_handle) {\n    shmem_short_put_signal_handle = get_function_handle(\"shmem_short_put_signal\");\n  }\n\n  shmem_short_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_short_put_signal(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_short_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_int_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_int_put_signal(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_int_put_signal(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_int_put_signal_t)(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_int_put_signal_t shmem_int_put_signal_handle = (shmem_int_put_signal_t)NULL;\n  if (!shmem_int_put_signal_handle) {\n    shmem_int_put_signal_handle = get_function_handle(\"shmem_int_put_signal\");\n  }\n\n  shmem_int_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_int_put_signal(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_int_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_long_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_long_put_signal(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_long_put_signal(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_long_put_signal_t)(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_long_put_signal_t shmem_long_put_signal_handle = (shmem_long_put_signal_t)NULL;\n  if (!shmem_long_put_signal_handle) {\n    shmem_long_put_signal_handle = get_function_handle(\"shmem_long_put_signal\");\n  }\n\n  shmem_long_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_long_put_signal(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_long_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_longlong_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_put_signal(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_longlong_put_signal(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_longlong_put_signal_t)(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_longlong_put_signal_t shmem_longlong_put_signal_handle = (shmem_longlong_put_signal_t)NULL;\n  if (!shmem_longlong_put_signal_handle) {\n    shmem_longlong_put_signal_handle = get_function_handle(\"shmem_longlong_put_signal\");\n  }\n\n  shmem_longlong_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_longlong_put_signal(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_longlong_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_float_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_float_put_signal(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_float_put_signal(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_float_put_signal_t)(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_float_put_signal_t shmem_float_put_signal_handle = (shmem_float_put_signal_t)NULL;\n  if (!shmem_float_put_signal_handle) {\n    shmem_float_put_signal_handle = get_function_handle(\"shmem_float_put_signal\");\n  }\n\n  shmem_float_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_float_put_signal(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_float_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_double_put_signal\n **********************************************************/\n\nextern void  __wrap_shmem_double_put_signal(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) ;\nextern void  __real_shmem_double_put_signal(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6)  {\n\n  typedef void (*shmem_double_put_signal_t)(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6);\n  static shmem_double_put_signal_t shmem_double_put_signal_handle = (shmem_double_put_signal_t)NULL;\n  if (!shmem_double_put_signal_handle) {\n    shmem_double_put_signal_handle = get_function_handle(\"shmem_double_put_signal\");\n  }\n\n  shmem_double_put_signal_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_double_put_signal(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6) {\n   __wrap_shmem_double_put_signal(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_get16_nb\n **********************************************************/\n\nextern void  __wrap_shmem_get16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_get16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_get16_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_get16_nb_t shmem_get16_nb_handle = (shmem_get16_nb_t)NULL;\n  if (!shmem_get16_nb_handle) {\n    shmem_get16_nb_handle = get_function_handle(\"shmem_get16_nb\");\n  }\n\n  shmem_get16_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_get16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_get16_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_get32_nb\n **********************************************************/\n\nextern void  __wrap_shmem_get32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_get32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_get32_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_get32_nb_t shmem_get32_nb_handle = (shmem_get32_nb_t)NULL;\n  if (!shmem_get32_nb_handle) {\n    shmem_get32_nb_handle = get_function_handle(\"shmem_get32_nb\");\n  }\n\n  shmem_get32_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_get32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_get32_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_get64_nb\n **********************************************************/\n\nextern void  __wrap_shmem_get64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_get64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_get64_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_get64_nb_t shmem_get64_nb_handle = (shmem_get64_nb_t)NULL;\n  if (!shmem_get64_nb_handle) {\n    shmem_get64_nb_handle = get_function_handle(\"shmem_get64_nb\");\n  }\n\n  shmem_get64_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_get64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_get64_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_get128_nb\n **********************************************************/\n\nextern void  __wrap_shmem_get128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_get128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_get128_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_get128_nb_t shmem_get128_nb_handle = (shmem_get128_nb_t)NULL;\n  if (!shmem_get128_nb_handle) {\n    shmem_get128_nb_handle = get_function_handle(\"shmem_get128_nb\");\n  }\n\n  shmem_get128_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_get128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_get128_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_getmem_nb\n **********************************************************/\n\nextern void  __wrap_shmem_getmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_getmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_getmem_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_getmem_nb_t shmem_getmem_nb_handle = (shmem_getmem_nb_t)NULL;\n  if (!shmem_getmem_nb_handle) {\n    shmem_getmem_nb_handle = get_function_handle(\"shmem_getmem_nb\");\n  }\n\n  shmem_getmem_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_getmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_getmem_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_short_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_get_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_short_get_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_short_get_nb_t)(short * a1, const short * a2, size_t a3, int a4, void ** a5);\n  static shmem_short_get_nb_t shmem_short_get_nb_handle = (shmem_short_get_nb_t)NULL;\n  if (!shmem_short_get_nb_handle) {\n    shmem_short_get_nb_handle = get_function_handle(\"shmem_short_get_nb\");\n  }\n\n  shmem_short_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_short_get_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_short_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_int_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_get_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_int_get_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_int_get_nb_t)(int * a1, const int * a2, size_t a3, int a4, void ** a5);\n  static shmem_int_get_nb_t shmem_int_get_nb_handle = (shmem_int_get_nb_t)NULL;\n  if (!shmem_int_get_nb_handle) {\n    shmem_int_get_nb_handle = get_function_handle(\"shmem_int_get_nb\");\n  }\n\n  shmem_int_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_int_get_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_int_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_long_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_get_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_long_get_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_long_get_nb_t)(long * a1, const long * a2, size_t a3, int a4, void ** a5);\n  static shmem_long_get_nb_t shmem_long_get_nb_handle = (shmem_long_get_nb_t)NULL;\n  if (!shmem_long_get_nb_handle) {\n    shmem_long_get_nb_handle = get_function_handle(\"shmem_long_get_nb\");\n  }\n\n  shmem_long_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_long_get_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_long_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_longlong_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_get_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_longlong_get_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_longlong_get_nb_t)(long long * a1, const long long * a2, size_t a3, int a4, void ** a5);\n  static shmem_longlong_get_nb_t shmem_longlong_get_nb_handle = (shmem_longlong_get_nb_t)NULL;\n  if (!shmem_longlong_get_nb_handle) {\n    shmem_longlong_get_nb_handle = get_function_handle(\"shmem_longlong_get_nb\");\n  }\n\n  shmem_longlong_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_longlong_get_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_longlong_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_float_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float_get_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_float_get_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_float_get_nb_t)(float * a1, const float * a2, size_t a3, int a4, void ** a5);\n  static shmem_float_get_nb_t shmem_float_get_nb_handle = (shmem_float_get_nb_t)NULL;\n  if (!shmem_float_get_nb_handle) {\n    shmem_float_get_nb_handle = get_function_handle(\"shmem_float_get_nb\");\n  }\n\n  shmem_float_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_float_get_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_float_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_double_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_double_get_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_double_get_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_double_get_nb_t)(double * a1, const double * a2, size_t a3, int a4, void ** a5);\n  static shmem_double_get_nb_t shmem_double_get_nb_handle = (shmem_double_get_nb_t)NULL;\n  if (!shmem_double_get_nb_handle) {\n    shmem_double_get_nb_handle = get_function_handle(\"shmem_double_get_nb\");\n  }\n\n  shmem_double_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_double_get_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_double_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_float128_get_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float128_get_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_float128_get_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_float128_get_nb_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5);\n  static shmem_float128_get_nb_t shmem_float128_get_nb_handle = (shmem_float128_get_nb_t)NULL;\n  if (!shmem_float128_get_nb_handle) {\n    shmem_float128_get_nb_handle = get_function_handle(\"shmem_float128_get_nb\");\n  }\n\n  shmem_float128_get_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_float128_get_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_float128_get_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_put16_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_put16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_put16_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_put16_nb_t shmem_put16_nb_handle = (shmem_put16_nb_t)NULL;\n  if (!shmem_put16_nb_handle) {\n    shmem_put16_nb_handle = get_function_handle(\"shmem_put16_nb\");\n  }\n\n  shmem_put16_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_put16_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_put16_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_put32_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_put32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_put32_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_put32_nb_t shmem_put32_nb_handle = (shmem_put32_nb_t)NULL;\n  if (!shmem_put32_nb_handle) {\n    shmem_put32_nb_handle = get_function_handle(\"shmem_put32_nb\");\n  }\n\n  shmem_put32_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_put32_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_put32_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_put64_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_put64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_put64_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_put64_nb_t shmem_put64_nb_handle = (shmem_put64_nb_t)NULL;\n  if (!shmem_put64_nb_handle) {\n    shmem_put64_nb_handle = get_function_handle(\"shmem_put64_nb\");\n  }\n\n  shmem_put64_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_put64_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_put64_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_put128_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_put128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_put128_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_put128_nb_t shmem_put128_nb_handle = (shmem_put128_nb_t)NULL;\n  if (!shmem_put128_nb_handle) {\n    shmem_put128_nb_handle = get_function_handle(\"shmem_put128_nb\");\n  }\n\n  shmem_put128_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_put128_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_put128_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_putmem_nb\n **********************************************************/\n\nextern void  __wrap_shmem_putmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_putmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_putmem_nb_t)(void * a1, const void * a2, size_t a3, int a4, void ** a5);\n  static shmem_putmem_nb_t shmem_putmem_nb_handle = (shmem_putmem_nb_t)NULL;\n  if (!shmem_putmem_nb_handle) {\n    shmem_putmem_nb_handle = get_function_handle(\"shmem_putmem_nb\");\n  }\n\n  shmem_putmem_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_putmem_nb(void * a1, const void * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_putmem_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_short_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_put_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_short_put_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_short_put_nb_t)(short * a1, const short * a2, size_t a3, int a4, void ** a5);\n  static shmem_short_put_nb_t shmem_short_put_nb_handle = (shmem_short_put_nb_t)NULL;\n  if (!shmem_short_put_nb_handle) {\n    shmem_short_put_nb_handle = get_function_handle(\"shmem_short_put_nb\");\n  }\n\n  shmem_short_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_short_put_nb(short * a1, const short * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_short_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_int_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_put_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_int_put_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_int_put_nb_t)(int * a1, const int * a2, size_t a3, int a4, void ** a5);\n  static shmem_int_put_nb_t shmem_int_put_nb_handle = (shmem_int_put_nb_t)NULL;\n  if (!shmem_int_put_nb_handle) {\n    shmem_int_put_nb_handle = get_function_handle(\"shmem_int_put_nb\");\n  }\n\n  shmem_int_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_int_put_nb(int * a1, const int * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_int_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_long_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_put_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_long_put_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_long_put_nb_t)(long * a1, const long * a2, size_t a3, int a4, void ** a5);\n  static shmem_long_put_nb_t shmem_long_put_nb_handle = (shmem_long_put_nb_t)NULL;\n  if (!shmem_long_put_nb_handle) {\n    shmem_long_put_nb_handle = get_function_handle(\"shmem_long_put_nb\");\n  }\n\n  shmem_long_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_long_put_nb(long * a1, const long * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_long_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_longlong_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_put_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_longlong_put_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_longlong_put_nb_t)(long long * a1, const long long * a2, size_t a3, int a4, void ** a5);\n  static shmem_longlong_put_nb_t shmem_longlong_put_nb_handle = (shmem_longlong_put_nb_t)NULL;\n  if (!shmem_longlong_put_nb_handle) {\n    shmem_longlong_put_nb_handle = get_function_handle(\"shmem_longlong_put_nb\");\n  }\n\n  shmem_longlong_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_longlong_put_nb(long long * a1, const long long * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_longlong_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_float_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float_put_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_float_put_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_float_put_nb_t)(float * a1, const float * a2, size_t a3, int a4, void ** a5);\n  static shmem_float_put_nb_t shmem_float_put_nb_handle = (shmem_float_put_nb_t)NULL;\n  if (!shmem_float_put_nb_handle) {\n    shmem_float_put_nb_handle = get_function_handle(\"shmem_float_put_nb\");\n  }\n\n  shmem_float_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_float_put_nb(float * a1, const float * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_float_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_double_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_double_put_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_double_put_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_double_put_nb_t)(double * a1, const double * a2, size_t a3, int a4, void ** a5);\n  static shmem_double_put_nb_t shmem_double_put_nb_handle = (shmem_double_put_nb_t)NULL;\n  if (!shmem_double_put_nb_handle) {\n    shmem_double_put_nb_handle = get_function_handle(\"shmem_double_put_nb\");\n  }\n\n  shmem_double_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_double_put_nb(double * a1, const double * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_double_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_float128_put_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float128_put_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5) ;\nextern void  __real_shmem_float128_put_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_float128_put_nb_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5);\n  static shmem_float128_put_nb_t shmem_float128_put_nb_handle = (shmem_float128_put_nb_t)NULL;\n  if (!shmem_float128_put_nb_handle) {\n    shmem_float128_put_nb_handle = get_function_handle(\"shmem_float128_put_nb\");\n  }\n\n  shmem_float128_put_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_float128_put_nb(__float128 * a1, const __float128 * a2, size_t a3, int a4, void ** a5) {\n   __wrap_shmem_float128_put_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_get8_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_get8_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get8_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get8_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get8_nbi_t shmem_get8_nbi_handle = (shmem_get8_nbi_t)NULL;\n  if (!shmem_get8_nbi_handle) {\n    shmem_get8_nbi_handle = get_function_handle(\"shmem_get8_nbi\");\n  }\n\n  shmem_get8_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get8_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get8_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get16_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_get16_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get16_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get16_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get16_nbi_t shmem_get16_nbi_handle = (shmem_get16_nbi_t)NULL;\n  if (!shmem_get16_nbi_handle) {\n    shmem_get16_nbi_handle = get_function_handle(\"shmem_get16_nbi\");\n  }\n\n  shmem_get16_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get16_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get16_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get32_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_get32_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get32_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get32_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get32_nbi_t shmem_get32_nbi_handle = (shmem_get32_nbi_t)NULL;\n  if (!shmem_get32_nbi_handle) {\n    shmem_get32_nbi_handle = get_function_handle(\"shmem_get32_nbi\");\n  }\n\n  shmem_get32_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get32_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get32_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get64_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_get64_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get64_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get64_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get64_nbi_t shmem_get64_nbi_handle = (shmem_get64_nbi_t)NULL;\n  if (!shmem_get64_nbi_handle) {\n    shmem_get64_nbi_handle = get_function_handle(\"shmem_get64_nbi\");\n  }\n\n  shmem_get64_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get64_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get64_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_get128_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_get128_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_get128_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_get128_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_get128_nbi_t shmem_get128_nbi_handle = (shmem_get128_nbi_t)NULL;\n  if (!shmem_get128_nbi_handle) {\n    shmem_get128_nbi_handle = get_function_handle(\"shmem_get128_nbi\");\n  }\n\n  shmem_get128_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_get128_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_get128_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_getmem_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_getmem_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_getmem_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_getmem_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_getmem_nbi_t shmem_getmem_nbi_handle = (shmem_getmem_nbi_t)NULL;\n  if (!shmem_getmem_nbi_handle) {\n    shmem_getmem_nbi_handle = get_function_handle(\"shmem_getmem_nbi\");\n  }\n\n  shmem_getmem_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_getmem_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_getmem_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_char_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_char_get_nbi(char * a1, const char * a2, size_t a3, int a4) ;\nextern void  __real_shmem_char_get_nbi(char * a1, const char * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_char_get_nbi_t)(char * a1, const char * a2, size_t a3, int a4);\n  static shmem_char_get_nbi_t shmem_char_get_nbi_handle = (shmem_char_get_nbi_t)NULL;\n  if (!shmem_char_get_nbi_handle) {\n    shmem_char_get_nbi_handle = get_function_handle(\"shmem_char_get_nbi\");\n  }\n\n  shmem_char_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_char_get_nbi(char * a1, const char * a2, size_t a3, int a4) {\n   __wrap_shmem_char_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_short_get_nbi(short * a1, const short * a2, size_t a3, int a4) ;\nextern void  __real_shmem_short_get_nbi(short * a1, const short * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_short_get_nbi_t)(short * a1, const short * a2, size_t a3, int a4);\n  static shmem_short_get_nbi_t shmem_short_get_nbi_handle = (shmem_short_get_nbi_t)NULL;\n  if (!shmem_short_get_nbi_handle) {\n    shmem_short_get_nbi_handle = get_function_handle(\"shmem_short_get_nbi\");\n  }\n\n  shmem_short_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_get_nbi(short * a1, const short * a2, size_t a3, int a4) {\n   __wrap_shmem_short_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_int_get_nbi(int * a1, const int * a2, size_t a3, int a4) ;\nextern void  __real_shmem_int_get_nbi(int * a1, const int * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_int_get_nbi_t)(int * a1, const int * a2, size_t a3, int a4);\n  static shmem_int_get_nbi_t shmem_int_get_nbi_handle = (shmem_int_get_nbi_t)NULL;\n  if (!shmem_int_get_nbi_handle) {\n    shmem_int_get_nbi_handle = get_function_handle(\"shmem_int_get_nbi\");\n  }\n\n  shmem_int_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_get_nbi(int * a1, const int * a2, size_t a3, int a4) {\n   __wrap_shmem_int_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_long_get_nbi(long * a1, const long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_long_get_nbi(long * a1, const long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_long_get_nbi_t)(long * a1, const long * a2, size_t a3, int a4);\n  static shmem_long_get_nbi_t shmem_long_get_nbi_handle = (shmem_long_get_nbi_t)NULL;\n  if (!shmem_long_get_nbi_handle) {\n    shmem_long_get_nbi_handle = get_function_handle(\"shmem_long_get_nbi\");\n  }\n\n  shmem_long_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_get_nbi(long * a1, const long * a2, size_t a3, int a4) {\n   __wrap_shmem_long_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_get_nbi(long long * a1, const long long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_longlong_get_nbi(long long * a1, const long long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_longlong_get_nbi_t)(long long * a1, const long long * a2, size_t a3, int a4);\n  static shmem_longlong_get_nbi_t shmem_longlong_get_nbi_handle = (shmem_longlong_get_nbi_t)NULL;\n  if (!shmem_longlong_get_nbi_handle) {\n    shmem_longlong_get_nbi_handle = get_function_handle(\"shmem_longlong_get_nbi\");\n  }\n\n  shmem_longlong_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_get_nbi(long long * a1, const long long * a2, size_t a3, int a4) {\n   __wrap_shmem_longlong_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_float_get_nbi(float * a1, const float * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float_get_nbi(float * a1, const float * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float_get_nbi_t)(float * a1, const float * a2, size_t a3, int a4);\n  static shmem_float_get_nbi_t shmem_float_get_nbi_handle = (shmem_float_get_nbi_t)NULL;\n  if (!shmem_float_get_nbi_handle) {\n    shmem_float_get_nbi_handle = get_function_handle(\"shmem_float_get_nbi\");\n  }\n\n  shmem_float_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float_get_nbi(float * a1, const float * a2, size_t a3, int a4) {\n   __wrap_shmem_float_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_double_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_double_get_nbi(double * a1, const double * a2, size_t a3, int a4) ;\nextern void  __real_shmem_double_get_nbi(double * a1, const double * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_double_get_nbi_t)(double * a1, const double * a2, size_t a3, int a4);\n  static shmem_double_get_nbi_t shmem_double_get_nbi_handle = (shmem_double_get_nbi_t)NULL;\n  if (!shmem_double_get_nbi_handle) {\n    shmem_double_get_nbi_handle = get_function_handle(\"shmem_double_get_nbi\");\n  }\n\n  shmem_double_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_double_get_nbi(double * a1, const double * a2, size_t a3, int a4) {\n   __wrap_shmem_double_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float128_get_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_float128_get_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float128_get_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float128_get_nbi_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4);\n  static shmem_float128_get_nbi_t shmem_float128_get_nbi_handle = (shmem_float128_get_nbi_t)NULL;\n  if (!shmem_float128_get_nbi_handle) {\n    shmem_float128_get_nbi_handle = get_function_handle(\"shmem_float128_get_nbi\");\n  }\n\n  shmem_float128_get_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float128_get_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4) {\n   __wrap_shmem_float128_get_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put8_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_put8_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put8_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put8_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put8_nbi_t shmem_put8_nbi_handle = (shmem_put8_nbi_t)NULL;\n  if (!shmem_put8_nbi_handle) {\n    shmem_put8_nbi_handle = get_function_handle(\"shmem_put8_nbi\");\n  }\n\n  shmem_put8_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put8_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put8_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put16_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_put16_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put16_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put16_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put16_nbi_t shmem_put16_nbi_handle = (shmem_put16_nbi_t)NULL;\n  if (!shmem_put16_nbi_handle) {\n    shmem_put16_nbi_handle = get_function_handle(\"shmem_put16_nbi\");\n  }\n\n  shmem_put16_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put16_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put16_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put32_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_put32_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put32_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put32_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put32_nbi_t shmem_put32_nbi_handle = (shmem_put32_nbi_t)NULL;\n  if (!shmem_put32_nbi_handle) {\n    shmem_put32_nbi_handle = get_function_handle(\"shmem_put32_nbi\");\n  }\n\n  shmem_put32_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put32_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put32_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put64_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_put64_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put64_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put64_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put64_nbi_t shmem_put64_nbi_handle = (shmem_put64_nbi_t)NULL;\n  if (!shmem_put64_nbi_handle) {\n    shmem_put64_nbi_handle = get_function_handle(\"shmem_put64_nbi\");\n  }\n\n  shmem_put64_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put64_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put64_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put128_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_put128_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_put128_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_put128_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_put128_nbi_t shmem_put128_nbi_handle = (shmem_put128_nbi_t)NULL;\n  if (!shmem_put128_nbi_handle) {\n    shmem_put128_nbi_handle = get_function_handle(\"shmem_put128_nbi\");\n  }\n\n  shmem_put128_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_put128_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_put128_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_putmem_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_putmem_nbi(void * a1, const void * a2, size_t a3, int a4) ;\nextern void  __real_shmem_putmem_nbi(void * a1, const void * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_putmem_nbi_t)(void * a1, const void * a2, size_t a3, int a4);\n  static shmem_putmem_nbi_t shmem_putmem_nbi_handle = (shmem_putmem_nbi_t)NULL;\n  if (!shmem_putmem_nbi_handle) {\n    shmem_putmem_nbi_handle = get_function_handle(\"shmem_putmem_nbi\");\n  }\n\n  shmem_putmem_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_putmem_nbi(void * a1, const void * a2, size_t a3, int a4) {\n   __wrap_shmem_putmem_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_char_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_char_put_nbi(char * a1, const char * a2, size_t a3, int a4) ;\nextern void  __real_shmem_char_put_nbi(char * a1, const char * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_char_put_nbi_t)(char * a1, const char * a2, size_t a3, int a4);\n  static shmem_char_put_nbi_t shmem_char_put_nbi_handle = (shmem_char_put_nbi_t)NULL;\n  if (!shmem_char_put_nbi_handle) {\n    shmem_char_put_nbi_handle = get_function_handle(\"shmem_char_put_nbi\");\n  }\n\n  shmem_char_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_char_put_nbi(char * a1, const char * a2, size_t a3, int a4) {\n   __wrap_shmem_char_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_short_put_nbi(short * a1, const short * a2, size_t a3, int a4) ;\nextern void  __real_shmem_short_put_nbi(short * a1, const short * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_short_put_nbi_t)(short * a1, const short * a2, size_t a3, int a4);\n  static shmem_short_put_nbi_t shmem_short_put_nbi_handle = (shmem_short_put_nbi_t)NULL;\n  if (!shmem_short_put_nbi_handle) {\n    shmem_short_put_nbi_handle = get_function_handle(\"shmem_short_put_nbi\");\n  }\n\n  shmem_short_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_put_nbi(short * a1, const short * a2, size_t a3, int a4) {\n   __wrap_shmem_short_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_int_put_nbi(int * a1, const int * a2, size_t a3, int a4) ;\nextern void  __real_shmem_int_put_nbi(int * a1, const int * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_int_put_nbi_t)(int * a1, const int * a2, size_t a3, int a4);\n  static shmem_int_put_nbi_t shmem_int_put_nbi_handle = (shmem_int_put_nbi_t)NULL;\n  if (!shmem_int_put_nbi_handle) {\n    shmem_int_put_nbi_handle = get_function_handle(\"shmem_int_put_nbi\");\n  }\n\n  shmem_int_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_put_nbi(int * a1, const int * a2, size_t a3, int a4) {\n   __wrap_shmem_int_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_long_put_nbi(long * a1, const long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_long_put_nbi(long * a1, const long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_long_put_nbi_t)(long * a1, const long * a2, size_t a3, int a4);\n  static shmem_long_put_nbi_t shmem_long_put_nbi_handle = (shmem_long_put_nbi_t)NULL;\n  if (!shmem_long_put_nbi_handle) {\n    shmem_long_put_nbi_handle = get_function_handle(\"shmem_long_put_nbi\");\n  }\n\n  shmem_long_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_put_nbi(long * a1, const long * a2, size_t a3, int a4) {\n   __wrap_shmem_long_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_put_nbi(long long * a1, const long long * a2, size_t a3, int a4) ;\nextern void  __real_shmem_longlong_put_nbi(long long * a1, const long long * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_longlong_put_nbi_t)(long long * a1, const long long * a2, size_t a3, int a4);\n  static shmem_longlong_put_nbi_t shmem_longlong_put_nbi_handle = (shmem_longlong_put_nbi_t)NULL;\n  if (!shmem_longlong_put_nbi_handle) {\n    shmem_longlong_put_nbi_handle = get_function_handle(\"shmem_longlong_put_nbi\");\n  }\n\n  shmem_longlong_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_put_nbi(long long * a1, const long long * a2, size_t a3, int a4) {\n   __wrap_shmem_longlong_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_float_put_nbi(float * a1, const float * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float_put_nbi(float * a1, const float * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float_put_nbi_t)(float * a1, const float * a2, size_t a3, int a4);\n  static shmem_float_put_nbi_t shmem_float_put_nbi_handle = (shmem_float_put_nbi_t)NULL;\n  if (!shmem_float_put_nbi_handle) {\n    shmem_float_put_nbi_handle = get_function_handle(\"shmem_float_put_nbi\");\n  }\n\n  shmem_float_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float_put_nbi(float * a1, const float * a2, size_t a3, int a4) {\n   __wrap_shmem_float_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_double_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_double_put_nbi(double * a1, const double * a2, size_t a3, int a4) ;\nextern void  __real_shmem_double_put_nbi(double * a1, const double * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_double_put_nbi_t)(double * a1, const double * a2, size_t a3, int a4);\n  static shmem_double_put_nbi_t shmem_double_put_nbi_handle = (shmem_double_put_nbi_t)NULL;\n  if (!shmem_double_put_nbi_handle) {\n    shmem_double_put_nbi_handle = get_function_handle(\"shmem_double_put_nbi\");\n  }\n\n  shmem_double_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_double_put_nbi(double * a1, const double * a2, size_t a3, int a4) {\n   __wrap_shmem_double_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_float128_put_nbi\n **********************************************************/\n\nextern void  __wrap_shmem_float128_put_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4) ;\nextern void  __real_shmem_float128_put_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4)  {\n\n  typedef void (*shmem_float128_put_nbi_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4);\n  static shmem_float128_put_nbi_t shmem_float128_put_nbi_handle = (shmem_float128_put_nbi_t)NULL;\n  if (!shmem_float128_put_nbi_handle) {\n    shmem_float128_put_nbi_handle = get_function_handle(\"shmem_float128_put_nbi\");\n  }\n\n  shmem_float128_put_nbi_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_float128_put_nbi(__float128 * a1, const __float128 * a2, size_t a3, int a4) {\n   __wrap_shmem_float128_put_nbi(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_put16_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put16_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_put16_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_put16_signal_nb_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_put16_signal_nb_t shmem_put16_signal_nb_handle = (shmem_put16_signal_nb_t)NULL;\n  if (!shmem_put16_signal_nb_handle) {\n    shmem_put16_signal_nb_handle = get_function_handle(\"shmem_put16_signal_nb\");\n  }\n\n  shmem_put16_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_put16_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_put16_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_put32_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put32_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_put32_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_put32_signal_nb_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_put32_signal_nb_t shmem_put32_signal_nb_handle = (shmem_put32_signal_nb_t)NULL;\n  if (!shmem_put32_signal_nb_handle) {\n    shmem_put32_signal_nb_handle = get_function_handle(\"shmem_put32_signal_nb\");\n  }\n\n  shmem_put32_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_put32_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_put32_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_put64_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put64_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_put64_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_put64_signal_nb_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_put64_signal_nb_t shmem_put64_signal_nb_handle = (shmem_put64_signal_nb_t)NULL;\n  if (!shmem_put64_signal_nb_handle) {\n    shmem_put64_signal_nb_handle = get_function_handle(\"shmem_put64_signal_nb\");\n  }\n\n  shmem_put64_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_put64_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_put64_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_put128_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_put128_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_put128_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_put128_signal_nb_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_put128_signal_nb_t shmem_put128_signal_nb_handle = (shmem_put128_signal_nb_t)NULL;\n  if (!shmem_put128_signal_nb_handle) {\n    shmem_put128_signal_nb_handle = get_function_handle(\"shmem_put128_signal_nb\");\n  }\n\n  shmem_put128_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_put128_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_put128_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_putmem_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_putmem_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_putmem_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_putmem_signal_nb_t)(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_putmem_signal_nb_t shmem_putmem_signal_nb_handle = (shmem_putmem_signal_nb_t)NULL;\n  if (!shmem_putmem_signal_nb_handle) {\n    shmem_putmem_signal_nb_handle = get_function_handle(\"shmem_putmem_signal_nb\");\n  }\n\n  shmem_putmem_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_putmem_signal_nb(void * a1, const void * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_putmem_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_short_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_put_signal_nb(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_short_put_signal_nb(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_short_put_signal_nb_t)(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_short_put_signal_nb_t shmem_short_put_signal_nb_handle = (shmem_short_put_signal_nb_t)NULL;\n  if (!shmem_short_put_signal_nb_handle) {\n    shmem_short_put_signal_nb_handle = get_function_handle(\"shmem_short_put_signal_nb\");\n  }\n\n  shmem_short_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_short_put_signal_nb(short * a1, const short * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_short_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_int_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_put_signal_nb(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_int_put_signal_nb(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_int_put_signal_nb_t)(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_int_put_signal_nb_t shmem_int_put_signal_nb_handle = (shmem_int_put_signal_nb_t)NULL;\n  if (!shmem_int_put_signal_nb_handle) {\n    shmem_int_put_signal_nb_handle = get_function_handle(\"shmem_int_put_signal_nb\");\n  }\n\n  shmem_int_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_int_put_signal_nb(int * a1, const int * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_int_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_long_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_put_signal_nb(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_long_put_signal_nb(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_long_put_signal_nb_t)(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_long_put_signal_nb_t shmem_long_put_signal_nb_handle = (shmem_long_put_signal_nb_t)NULL;\n  if (!shmem_long_put_signal_nb_handle) {\n    shmem_long_put_signal_nb_handle = get_function_handle(\"shmem_long_put_signal_nb\");\n  }\n\n  shmem_long_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_long_put_signal_nb(long * a1, const long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_long_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_longlong_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_put_signal_nb(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_longlong_put_signal_nb(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_longlong_put_signal_nb_t)(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_longlong_put_signal_nb_t shmem_longlong_put_signal_nb_handle = (shmem_longlong_put_signal_nb_t)NULL;\n  if (!shmem_longlong_put_signal_nb_handle) {\n    shmem_longlong_put_signal_nb_handle = get_function_handle(\"shmem_longlong_put_signal_nb\");\n  }\n\n  shmem_longlong_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_longlong_put_signal_nb(long long * a1, const long long * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_longlong_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_float_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float_put_signal_nb(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_float_put_signal_nb(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_float_put_signal_nb_t)(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_float_put_signal_nb_t shmem_float_put_signal_nb_handle = (shmem_float_put_signal_nb_t)NULL;\n  if (!shmem_float_put_signal_nb_handle) {\n    shmem_float_put_signal_nb_handle = get_function_handle(\"shmem_float_put_signal_nb\");\n  }\n\n  shmem_float_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_float_put_signal_nb(float * a1, const float * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_float_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_double_put_signal_nb\n **********************************************************/\n\nextern void  __wrap_shmem_double_put_signal_nb(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) ;\nextern void  __real_shmem_double_put_signal_nb(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7)  {\n\n  typedef void (*shmem_double_put_signal_nb_t)(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7);\n  static shmem_double_put_signal_nb_t shmem_double_put_signal_nb_handle = (shmem_double_put_signal_nb_t)NULL;\n  if (!shmem_double_put_signal_nb_handle) {\n    shmem_double_put_signal_nb_handle = get_function_handle(\"shmem_double_put_signal_nb\");\n  }\n\n  shmem_double_put_signal_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_double_put_signal_nb(double * a1, const double * a2, size_t a3, uint64_t * a4, uint64_t a5, int a6, void ** a7) {\n   __wrap_shmem_double_put_signal_nb(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_char_iget\n **********************************************************/\n\nextern void  __wrap_shmem_char_iget(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_char_iget(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_char_iget_t)(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_char_iget_t shmem_char_iget_handle = (shmem_char_iget_t)NULL;\n  if (!shmem_char_iget_handle) {\n    shmem_char_iget_handle = get_function_handle(\"shmem_char_iget\");\n  }\n\n  shmem_char_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_char_iget(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_char_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_short_iget\n **********************************************************/\n\nextern void  __wrap_shmem_short_iget(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_short_iget(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_short_iget_t)(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_short_iget_t shmem_short_iget_handle = (shmem_short_iget_t)NULL;\n  if (!shmem_short_iget_handle) {\n    shmem_short_iget_handle = get_function_handle(\"shmem_short_iget\");\n  }\n\n  shmem_short_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_short_iget(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_short_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_int_iget\n **********************************************************/\n\nextern void  __wrap_shmem_int_iget(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_int_iget(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_int_iget_t)(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_int_iget_t shmem_int_iget_handle = (shmem_int_iget_t)NULL;\n  if (!shmem_int_iget_handle) {\n    shmem_int_iget_handle = get_function_handle(\"shmem_int_iget\");\n  }\n\n  shmem_int_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_int_iget(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_int_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_long_iget\n **********************************************************/\n\nextern void  __wrap_shmem_long_iget(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_long_iget(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_long_iget_t)(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_long_iget_t shmem_long_iget_handle = (shmem_long_iget_t)NULL;\n  if (!shmem_long_iget_handle) {\n    shmem_long_iget_handle = get_function_handle(\"shmem_long_iget\");\n  }\n\n  shmem_long_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_long_iget(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_long_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_longlong_iget\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_iget(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_longlong_iget(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_longlong_iget_t)(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_longlong_iget_t shmem_longlong_iget_handle = (shmem_longlong_iget_t)NULL;\n  if (!shmem_longlong_iget_handle) {\n    shmem_longlong_iget_handle = get_function_handle(\"shmem_longlong_iget\");\n  }\n\n  shmem_longlong_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_longlong_iget(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_longlong_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_float_iget\n **********************************************************/\n\nextern void  __wrap_shmem_float_iget(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_float_iget(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_float_iget_t)(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_float_iget_t shmem_float_iget_handle = (shmem_float_iget_t)NULL;\n  if (!shmem_float_iget_handle) {\n    shmem_float_iget_handle = get_function_handle(\"shmem_float_iget\");\n  }\n\n  shmem_float_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_float_iget(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_float_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_double_iget\n **********************************************************/\n\nextern void  __wrap_shmem_double_iget(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_double_iget(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_double_iget_t)(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_double_iget_t shmem_double_iget_handle = (shmem_double_iget_t)NULL;\n  if (!shmem_double_iget_handle) {\n    shmem_double_iget_handle = get_function_handle(\"shmem_double_iget\");\n  }\n\n  shmem_double_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_double_iget(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_double_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_float128_iget\n **********************************************************/\n\nextern void  __wrap_shmem_float128_iget(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_float128_iget(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_float128_iget_t)(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_float128_iget_t shmem_float128_iget_handle = (shmem_float128_iget_t)NULL;\n  if (!shmem_float128_iget_handle) {\n    shmem_float128_iget_handle = get_function_handle(\"shmem_float128_iget\");\n  }\n\n  shmem_float128_iget_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_float128_iget(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_float128_iget(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iget8\n **********************************************************/\n\nextern void  __wrap_shmem_iget8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iget8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iget8_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iget8_t shmem_iget8_handle = (shmem_iget8_t)NULL;\n  if (!shmem_iget8_handle) {\n    shmem_iget8_handle = get_function_handle(\"shmem_iget8\");\n  }\n\n  shmem_iget8_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iget8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iget8(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iget16\n **********************************************************/\n\nextern void  __wrap_shmem_iget16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iget16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iget16_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iget16_t shmem_iget16_handle = (shmem_iget16_t)NULL;\n  if (!shmem_iget16_handle) {\n    shmem_iget16_handle = get_function_handle(\"shmem_iget16\");\n  }\n\n  shmem_iget16_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iget16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iget16(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iget32\n **********************************************************/\n\nextern void  __wrap_shmem_iget32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iget32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iget32_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iget32_t shmem_iget32_handle = (shmem_iget32_t)NULL;\n  if (!shmem_iget32_handle) {\n    shmem_iget32_handle = get_function_handle(\"shmem_iget32\");\n  }\n\n  shmem_iget32_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iget32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iget32(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iget64\n **********************************************************/\n\nextern void  __wrap_shmem_iget64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iget64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iget64_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iget64_t shmem_iget64_handle = (shmem_iget64_t)NULL;\n  if (!shmem_iget64_handle) {\n    shmem_iget64_handle = get_function_handle(\"shmem_iget64\");\n  }\n\n  shmem_iget64_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iget64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iget64(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iget128\n **********************************************************/\n\nextern void  __wrap_shmem_iget128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iget128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iget128_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iget128_t shmem_iget128_handle = (shmem_iget128_t)NULL;\n  if (!shmem_iget128_handle) {\n    shmem_iget128_handle = get_function_handle(\"shmem_iget128\");\n  }\n\n  shmem_iget128_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iget128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iget128(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_char_iput\n **********************************************************/\n\nextern void  __wrap_shmem_char_iput(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_char_iput(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_char_iput_t)(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_char_iput_t shmem_char_iput_handle = (shmem_char_iput_t)NULL;\n  if (!shmem_char_iput_handle) {\n    shmem_char_iput_handle = get_function_handle(\"shmem_char_iput\");\n  }\n\n  shmem_char_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_char_iput(char * a1, const char * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_char_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_short_iput\n **********************************************************/\n\nextern void  __wrap_shmem_short_iput(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_short_iput(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_short_iput_t)(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_short_iput_t shmem_short_iput_handle = (shmem_short_iput_t)NULL;\n  if (!shmem_short_iput_handle) {\n    shmem_short_iput_handle = get_function_handle(\"shmem_short_iput\");\n  }\n\n  shmem_short_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_short_iput(short * a1, const short * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_short_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_int_iput\n **********************************************************/\n\nextern void  __wrap_shmem_int_iput(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_int_iput(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_int_iput_t)(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_int_iput_t shmem_int_iput_handle = (shmem_int_iput_t)NULL;\n  if (!shmem_int_iput_handle) {\n    shmem_int_iput_handle = get_function_handle(\"shmem_int_iput\");\n  }\n\n  shmem_int_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_int_iput(int * a1, const int * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_int_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_long_iput\n **********************************************************/\n\nextern void  __wrap_shmem_long_iput(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_long_iput(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_long_iput_t)(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_long_iput_t shmem_long_iput_handle = (shmem_long_iput_t)NULL;\n  if (!shmem_long_iput_handle) {\n    shmem_long_iput_handle = get_function_handle(\"shmem_long_iput\");\n  }\n\n  shmem_long_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_long_iput(long * a1, const long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_long_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_longlong_iput\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_iput(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_longlong_iput(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_longlong_iput_t)(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_longlong_iput_t shmem_longlong_iput_handle = (shmem_longlong_iput_t)NULL;\n  if (!shmem_longlong_iput_handle) {\n    shmem_longlong_iput_handle = get_function_handle(\"shmem_longlong_iput\");\n  }\n\n  shmem_longlong_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_longlong_iput(long long * a1, const long long * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_longlong_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_float_iput\n **********************************************************/\n\nextern void  __wrap_shmem_float_iput(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_float_iput(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_float_iput_t)(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_float_iput_t shmem_float_iput_handle = (shmem_float_iput_t)NULL;\n  if (!shmem_float_iput_handle) {\n    shmem_float_iput_handle = get_function_handle(\"shmem_float_iput\");\n  }\n\n  shmem_float_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_float_iput(float * a1, const float * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_float_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_double_iput\n **********************************************************/\n\nextern void  __wrap_shmem_double_iput(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_double_iput(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_double_iput_t)(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_double_iput_t shmem_double_iput_handle = (shmem_double_iput_t)NULL;\n  if (!shmem_double_iput_handle) {\n    shmem_double_iput_handle = get_function_handle(\"shmem_double_iput\");\n  }\n\n  shmem_double_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_double_iput(double * a1, const double * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_double_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_float128_iput\n **********************************************************/\n\nextern void  __wrap_shmem_float128_iput(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_float128_iput(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_float128_iput_t)(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_float128_iput_t shmem_float128_iput_handle = (shmem_float128_iput_t)NULL;\n  if (!shmem_float128_iput_handle) {\n    shmem_float128_iput_handle = get_function_handle(\"shmem_float128_iput\");\n  }\n\n  shmem_float128_iput_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_float128_iput(__float128 * a1, const __float128 * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_float128_iput(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iput8\n **********************************************************/\n\nextern void  __wrap_shmem_iput8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iput8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iput8_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iput8_t shmem_iput8_handle = (shmem_iput8_t)NULL;\n  if (!shmem_iput8_handle) {\n    shmem_iput8_handle = get_function_handle(\"shmem_iput8\");\n  }\n\n  shmem_iput8_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iput8(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iput8(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iput16\n **********************************************************/\n\nextern void  __wrap_shmem_iput16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iput16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iput16_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iput16_t shmem_iput16_handle = (shmem_iput16_t)NULL;\n  if (!shmem_iput16_handle) {\n    shmem_iput16_handle = get_function_handle(\"shmem_iput16\");\n  }\n\n  shmem_iput16_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iput16(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iput16(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iput32\n **********************************************************/\n\nextern void  __wrap_shmem_iput32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iput32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iput32_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iput32_t shmem_iput32_handle = (shmem_iput32_t)NULL;\n  if (!shmem_iput32_handle) {\n    shmem_iput32_handle = get_function_handle(\"shmem_iput32\");\n  }\n\n  shmem_iput32_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iput32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iput32(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iput64\n **********************************************************/\n\nextern void  __wrap_shmem_iput64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iput64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iput64_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iput64_t shmem_iput64_handle = (shmem_iput64_t)NULL;\n  if (!shmem_iput64_handle) {\n    shmem_iput64_handle = get_function_handle(\"shmem_iput64\");\n  }\n\n  shmem_iput64_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iput64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iput64(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_iput128\n **********************************************************/\n\nextern void  __wrap_shmem_iput128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) ;\nextern void  __real_shmem_iput128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6)  {\n\n  typedef void (*shmem_iput128_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6);\n  static shmem_iput128_t shmem_iput128_handle = (shmem_iput128_t)NULL;\n  if (!shmem_iput128_handle) {\n    shmem_iput128_handle = get_function_handle(\"shmem_iput128\");\n  }\n\n  shmem_iput128_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_iput128(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6) {\n   __wrap_shmem_iput128(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_char_g\n **********************************************************/\n\nextern char  __wrap_shmem_char_g(const char * a1, int a2) ;\nextern char  __real_shmem_char_g(const char * a1, int a2)  {\n\n  char retval;\n  typedef char (*shmem_char_g_t)(const char * a1, int a2);\n  static shmem_char_g_t shmem_char_g_handle = (shmem_char_g_t)NULL;\n  if (!shmem_char_g_handle) {\n    shmem_char_g_handle = get_function_handle(\"shmem_char_g\");\n  }\n\n  retval  =  shmem_char_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern char  shmem_char_g(const char * a1, int a2) {\n   __wrap_shmem_char_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_short_g\n **********************************************************/\n\nextern short  __wrap_shmem_short_g(const short * a1, int a2) ;\nextern short  __real_shmem_short_g(const short * a1, int a2)  {\n\n  short retval;\n  typedef short (*shmem_short_g_t)(const short * a1, int a2);\n  static shmem_short_g_t shmem_short_g_handle = (shmem_short_g_t)NULL;\n  if (!shmem_short_g_handle) {\n    shmem_short_g_handle = get_function_handle(\"shmem_short_g\");\n  }\n\n  retval  =  shmem_short_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern short  shmem_short_g(const short * a1, int a2) {\n   __wrap_shmem_short_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_int_g\n **********************************************************/\n\nextern int  __wrap_shmem_int_g(const int * a1, int a2) ;\nextern int  __real_shmem_int_g(const int * a1, int a2)  {\n\n  int retval;\n  typedef int (*shmem_int_g_t)(const int * a1, int a2);\n  static shmem_int_g_t shmem_int_g_handle = (shmem_int_g_t)NULL;\n  if (!shmem_int_g_handle) {\n    shmem_int_g_handle = get_function_handle(\"shmem_int_g\");\n  }\n\n  retval  =  shmem_int_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern int  shmem_int_g(const int * a1, int a2) {\n   __wrap_shmem_int_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_long_g\n **********************************************************/\n\nextern long  __wrap_shmem_long_g(const long * a1, int a2) ;\nextern long  __real_shmem_long_g(const long * a1, int a2)  {\n\n  long retval;\n  typedef long (*shmem_long_g_t)(const long * a1, int a2);\n  static shmem_long_g_t shmem_long_g_handle = (shmem_long_g_t)NULL;\n  if (!shmem_long_g_handle) {\n    shmem_long_g_handle = get_function_handle(\"shmem_long_g\");\n  }\n\n  retval  =  shmem_long_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long  shmem_long_g(const long * a1, int a2) {\n   __wrap_shmem_long_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_longlong_g\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_g(const long long * a1, int a2) ;\nextern long long  __real_shmem_longlong_g(const long long * a1, int a2)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_g_t)(const long long * a1, int a2);\n  static shmem_longlong_g_t shmem_longlong_g_handle = (shmem_longlong_g_t)NULL;\n  if (!shmem_longlong_g_handle) {\n    shmem_longlong_g_handle = get_function_handle(\"shmem_longlong_g\");\n  }\n\n  retval  =  shmem_longlong_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_g(const long long * a1, int a2) {\n   __wrap_shmem_longlong_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_float_g\n **********************************************************/\n\nextern float  __wrap_shmem_float_g(const float * a1, int a2) ;\nextern float  __real_shmem_float_g(const float * a1, int a2)  {\n\n  float retval;\n  typedef float (*shmem_float_g_t)(const float * a1, int a2);\n  static shmem_float_g_t shmem_float_g_handle = (shmem_float_g_t)NULL;\n  if (!shmem_float_g_handle) {\n    shmem_float_g_handle = get_function_handle(\"shmem_float_g\");\n  }\n\n  retval  =  shmem_float_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern float  shmem_float_g(const float * a1, int a2) {\n   __wrap_shmem_float_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_double_g\n **********************************************************/\n\nextern double  __wrap_shmem_double_g(const double * a1, int a2) ;\nextern double  __real_shmem_double_g(const double * a1, int a2)  {\n\n  double retval;\n  typedef double (*shmem_double_g_t)(const double * a1, int a2);\n  static shmem_double_g_t shmem_double_g_handle = (shmem_double_g_t)NULL;\n  if (!shmem_double_g_handle) {\n    shmem_double_g_handle = get_function_handle(\"shmem_double_g\");\n  }\n\n  retval  =  shmem_double_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern double  shmem_double_g(const double * a1, int a2) {\n   __wrap_shmem_double_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_ld80_g\n **********************************************************/\n\nextern long double  __wrap_shmem_ld80_g(const long double * a1, int a2) ;\nextern long double  __real_shmem_ld80_g(const long double * a1, int a2)  {\n\n  long double retval;\n  typedef long double (*shmem_ld80_g_t)(const long double * a1, int a2);\n  static shmem_ld80_g_t shmem_ld80_g_handle = (shmem_ld80_g_t)NULL;\n  if (!shmem_ld80_g_handle) {\n    shmem_ld80_g_handle = get_function_handle(\"shmem_ld80_g\");\n  }\n\n  retval  =  shmem_ld80_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long double  shmem_ld80_g(const long double * a1, int a2) {\n   __wrap_shmem_ld80_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_float128_g\n **********************************************************/\n\nextern __float128  __wrap_shmem_float128_g(const __float128 * a1, int a2) ;\nextern __float128  __real_shmem_float128_g(const __float128 * a1, int a2)  {\n\n  __float128 retval;\n  typedef __float128 (*shmem_float128_g_t)(const __float128 * a1, int a2);\n  static shmem_float128_g_t shmem_float128_g_handle = (shmem_float128_g_t)NULL;\n  if (!shmem_float128_g_handle) {\n    shmem_float128_g_handle = get_function_handle(\"shmem_float128_g\");\n  }\n\n  retval  =  shmem_float128_g_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern __float128  shmem_float128_g(const __float128 * a1, int a2) {\n   __wrap_shmem_float128_g(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_char_p\n **********************************************************/\n\nextern void  __wrap_shmem_char_p(char * a1, char a2, int a3) ;\nextern void  __real_shmem_char_p(char * a1, char a2, int a3)  {\n\n  typedef void (*shmem_char_p_t)(char * a1, char a2, int a3);\n  static shmem_char_p_t shmem_char_p_handle = (shmem_char_p_t)NULL;\n  if (!shmem_char_p_handle) {\n    shmem_char_p_handle = get_function_handle(\"shmem_char_p\");\n  }\n\n  shmem_char_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_char_p(char * a1, char a2, int a3) {\n   __wrap_shmem_char_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_p\n **********************************************************/\n\nextern void  __wrap_shmem_short_p(short * a1, short a2, int a3) ;\nextern void  __real_shmem_short_p(short * a1, short a2, int a3)  {\n\n  typedef void (*shmem_short_p_t)(short * a1, short a2, int a3);\n  static shmem_short_p_t shmem_short_p_handle = (shmem_short_p_t)NULL;\n  if (!shmem_short_p_handle) {\n    shmem_short_p_handle = get_function_handle(\"shmem_short_p\");\n  }\n\n  shmem_short_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_short_p(short * a1, short a2, int a3) {\n   __wrap_shmem_short_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_p\n **********************************************************/\n\nextern void  __wrap_shmem_int_p(int * a1, int a2, int a3) ;\nextern void  __real_shmem_int_p(int * a1, int a2, int a3)  {\n\n  typedef void (*shmem_int_p_t)(int * a1, int a2, int a3);\n  static shmem_int_p_t shmem_int_p_handle = (shmem_int_p_t)NULL;\n  if (!shmem_int_p_handle) {\n    shmem_int_p_handle = get_function_handle(\"shmem_int_p\");\n  }\n\n  shmem_int_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_int_p(int * a1, int a2, int a3) {\n   __wrap_shmem_int_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_p\n **********************************************************/\n\nextern void  __wrap_shmem_long_p(long * a1, long a2, int a3) ;\nextern void  __real_shmem_long_p(long * a1, long a2, int a3)  {\n\n  typedef void (*shmem_long_p_t)(long * a1, long a2, int a3);\n  static shmem_long_p_t shmem_long_p_handle = (shmem_long_p_t)NULL;\n  if (!shmem_long_p_handle) {\n    shmem_long_p_handle = get_function_handle(\"shmem_long_p\");\n  }\n\n  shmem_long_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_long_p(long * a1, long a2, int a3) {\n   __wrap_shmem_long_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_p\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_p(long long * a1, long long a2, int a3) ;\nextern void  __real_shmem_longlong_p(long long * a1, long long a2, int a3)  {\n\n  typedef void (*shmem_longlong_p_t)(long long * a1, long long a2, int a3);\n  static shmem_longlong_p_t shmem_longlong_p_handle = (shmem_longlong_p_t)NULL;\n  if (!shmem_longlong_p_handle) {\n    shmem_longlong_p_handle = get_function_handle(\"shmem_longlong_p\");\n  }\n\n  shmem_longlong_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_longlong_p(long long * a1, long long a2, int a3) {\n   __wrap_shmem_longlong_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_float_p\n **********************************************************/\n\nextern void  __wrap_shmem_float_p(float * a1, float a2, int a3) ;\nextern void  __real_shmem_float_p(float * a1, float a2, int a3)  {\n\n  typedef void (*shmem_float_p_t)(float * a1, float a2, int a3);\n  static shmem_float_p_t shmem_float_p_handle = (shmem_float_p_t)NULL;\n  if (!shmem_float_p_handle) {\n    shmem_float_p_handle = get_function_handle(\"shmem_float_p\");\n  }\n\n  shmem_float_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_float_p(float * a1, float a2, int a3) {\n   __wrap_shmem_float_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_double_p\n **********************************************************/\n\nextern void  __wrap_shmem_double_p(double * a1, double a2, int a3) ;\nextern void  __real_shmem_double_p(double * a1, double a2, int a3)  {\n\n  typedef void (*shmem_double_p_t)(double * a1, double a2, int a3);\n  static shmem_double_p_t shmem_double_p_handle = (shmem_double_p_t)NULL;\n  if (!shmem_double_p_handle) {\n    shmem_double_p_handle = get_function_handle(\"shmem_double_p\");\n  }\n\n  shmem_double_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_double_p(double * a1, double a2, int a3) {\n   __wrap_shmem_double_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_ld80_p\n **********************************************************/\n\nextern void  __wrap_shmem_ld80_p(long double * a1, long double a2, int a3) ;\nextern void  __real_shmem_ld80_p(long double * a1, long double a2, int a3)  {\n\n  typedef void (*shmem_ld80_p_t)(long double * a1, long double a2, int a3);\n  static shmem_ld80_p_t shmem_ld80_p_handle = (shmem_ld80_p_t)NULL;\n  if (!shmem_ld80_p_handle) {\n    shmem_ld80_p_handle = get_function_handle(\"shmem_ld80_p\");\n  }\n\n  shmem_ld80_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_ld80_p(long double * a1, long double a2, int a3) {\n   __wrap_shmem_ld80_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_float128_p\n **********************************************************/\n\nextern void  __wrap_shmem_float128_p(__float128 * a1, __float128 a2, int a3) ;\nextern void  __real_shmem_float128_p(__float128 * a1, __float128 a2, int a3)  {\n\n  typedef void (*shmem_float128_p_t)(__float128 * a1, __float128 a2, int a3);\n  static shmem_float128_p_t shmem_float128_p_handle = (shmem_float128_p_t)NULL;\n  if (!shmem_float128_p_handle) {\n    shmem_float128_p_handle = get_function_handle(\"shmem_float128_p\");\n  }\n\n  shmem_float128_p_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_float128_p(__float128 * a1, __float128 a2, int a3) {\n   __wrap_shmem_float128_p(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_swap\n **********************************************************/\n\nextern short  __wrap_shmem_short_swap(short * a1, short a2, int a3) ;\nextern short  __real_shmem_short_swap(short * a1, short a2, int a3)  {\n\n  short retval;\n  typedef short (*shmem_short_swap_t)(short * a1, short a2, int a3);\n  static shmem_short_swap_t shmem_short_swap_handle = (shmem_short_swap_t)NULL;\n  if (!shmem_short_swap_handle) {\n    shmem_short_swap_handle = get_function_handle(\"shmem_short_swap\");\n  }\n\n  retval  =  shmem_short_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern short  shmem_short_swap(short * a1, short a2, int a3) {\n   __wrap_shmem_short_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_swap\n **********************************************************/\n\nextern int  __wrap_shmem_int_swap(int * a1, int a2, int a3) ;\nextern int  __real_shmem_int_swap(int * a1, int a2, int a3)  {\n\n  int retval;\n  typedef int (*shmem_int_swap_t)(int * a1, int a2, int a3);\n  static shmem_int_swap_t shmem_int_swap_handle = (shmem_int_swap_t)NULL;\n  if (!shmem_int_swap_handle) {\n    shmem_int_swap_handle = get_function_handle(\"shmem_int_swap\");\n  }\n\n  retval  =  shmem_int_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern int  shmem_int_swap(int * a1, int a2, int a3) {\n   __wrap_shmem_int_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_swap\n **********************************************************/\n\nextern long  __wrap_shmem_long_swap(long * a1, long a2, int a3) ;\nextern long  __real_shmem_long_swap(long * a1, long a2, int a3)  {\n\n  long retval;\n  typedef long (*shmem_long_swap_t)(long * a1, long a2, int a3);\n  static shmem_long_swap_t shmem_long_swap_handle = (shmem_long_swap_t)NULL;\n  if (!shmem_long_swap_handle) {\n    shmem_long_swap_handle = get_function_handle(\"shmem_long_swap\");\n  }\n\n  retval  =  shmem_long_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern long  shmem_long_swap(long * a1, long a2, int a3) {\n   __wrap_shmem_long_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_swap\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_swap(long long * a1, long long a2, int a3) ;\nextern long long  __real_shmem_longlong_swap(long long * a1, long long a2, int a3)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_swap_t)(long long * a1, long long a2, int a3);\n  static shmem_longlong_swap_t shmem_longlong_swap_handle = (shmem_longlong_swap_t)NULL;\n  if (!shmem_longlong_swap_handle) {\n    shmem_longlong_swap_handle = get_function_handle(\"shmem_longlong_swap\");\n  }\n\n  retval  =  shmem_longlong_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_swap(long long * a1, long long a2, int a3) {\n   __wrap_shmem_longlong_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_float_swap\n **********************************************************/\n\nextern float  __wrap_shmem_float_swap(float * a1, float a2, int a3) ;\nextern float  __real_shmem_float_swap(float * a1, float a2, int a3)  {\n\n  float retval;\n  typedef float (*shmem_float_swap_t)(float * a1, float a2, int a3);\n  static shmem_float_swap_t shmem_float_swap_handle = (shmem_float_swap_t)NULL;\n  if (!shmem_float_swap_handle) {\n    shmem_float_swap_handle = get_function_handle(\"shmem_float_swap\");\n  }\n\n  retval  =  shmem_float_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern float  shmem_float_swap(float * a1, float a2, int a3) {\n   __wrap_shmem_float_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_double_swap\n **********************************************************/\n\nextern double  __wrap_shmem_double_swap(double * a1, double a2, int a3) ;\nextern double  __real_shmem_double_swap(double * a1, double a2, int a3)  {\n\n  double retval;\n  typedef double (*shmem_double_swap_t)(double * a1, double a2, int a3);\n  static shmem_double_swap_t shmem_double_swap_handle = (shmem_double_swap_t)NULL;\n  if (!shmem_double_swap_handle) {\n    shmem_double_swap_handle = get_function_handle(\"shmem_double_swap\");\n  }\n\n  retval  =  shmem_double_swap_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern double  shmem_double_swap(double * a1, double a2, int a3) {\n   __wrap_shmem_double_swap(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_swap_nb(short * a1, short * a2, short a3, int a4, void ** a5) ;\nextern void  __real_shmem_short_swap_nb(short * a1, short * a2, short a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_short_swap_nb_t)(short * a1, short * a2, short a3, int a4, void ** a5);\n  static shmem_short_swap_nb_t shmem_short_swap_nb_handle = (shmem_short_swap_nb_t)NULL;\n  if (!shmem_short_swap_nb_handle) {\n    shmem_short_swap_nb_handle = get_function_handle(\"shmem_short_swap_nb\");\n  }\n\n  shmem_short_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_short_swap_nb(short * a1, short * a2, short a3, int a4, void ** a5) {\n   __wrap_shmem_short_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_int_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_swap_nb(int * a1, int * a2, int a3, int a4, void ** a5) ;\nextern void  __real_shmem_int_swap_nb(int * a1, int * a2, int a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_int_swap_nb_t)(int * a1, int * a2, int a3, int a4, void ** a5);\n  static shmem_int_swap_nb_t shmem_int_swap_nb_handle = (shmem_int_swap_nb_t)NULL;\n  if (!shmem_int_swap_nb_handle) {\n    shmem_int_swap_nb_handle = get_function_handle(\"shmem_int_swap_nb\");\n  }\n\n  shmem_int_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_int_swap_nb(int * a1, int * a2, int a3, int a4, void ** a5) {\n   __wrap_shmem_int_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_long_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_swap_nb(long * a1, long * a2, long a3, int a4, void ** a5) ;\nextern void  __real_shmem_long_swap_nb(long * a1, long * a2, long a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_long_swap_nb_t)(long * a1, long * a2, long a3, int a4, void ** a5);\n  static shmem_long_swap_nb_t shmem_long_swap_nb_handle = (shmem_long_swap_nb_t)NULL;\n  if (!shmem_long_swap_nb_handle) {\n    shmem_long_swap_nb_handle = get_function_handle(\"shmem_long_swap_nb\");\n  }\n\n  shmem_long_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_long_swap_nb(long * a1, long * a2, long a3, int a4, void ** a5) {\n   __wrap_shmem_long_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_longlong_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_swap_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5) ;\nextern void  __real_shmem_longlong_swap_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_longlong_swap_nb_t)(long long * a1, long long * a2, long long a3, int a4, void ** a5);\n  static shmem_longlong_swap_nb_t shmem_longlong_swap_nb_handle = (shmem_longlong_swap_nb_t)NULL;\n  if (!shmem_longlong_swap_nb_handle) {\n    shmem_longlong_swap_nb_handle = get_function_handle(\"shmem_longlong_swap_nb\");\n  }\n\n  shmem_longlong_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_longlong_swap_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5) {\n   __wrap_shmem_longlong_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_float_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_float_swap_nb(float * a1, float * a2, float a3, int a4, void ** a5) ;\nextern void  __real_shmem_float_swap_nb(float * a1, float * a2, float a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_float_swap_nb_t)(float * a1, float * a2, float a3, int a4, void ** a5);\n  static shmem_float_swap_nb_t shmem_float_swap_nb_handle = (shmem_float_swap_nb_t)NULL;\n  if (!shmem_float_swap_nb_handle) {\n    shmem_float_swap_nb_handle = get_function_handle(\"shmem_float_swap_nb\");\n  }\n\n  shmem_float_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_float_swap_nb(float * a1, float * a2, float a3, int a4, void ** a5) {\n   __wrap_shmem_float_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_double_swap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_double_swap_nb(double * a1, double * a2, double a3, int a4, void ** a5) ;\nextern void  __real_shmem_double_swap_nb(double * a1, double * a2, double a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_double_swap_nb_t)(double * a1, double * a2, double a3, int a4, void ** a5);\n  static shmem_double_swap_nb_t shmem_double_swap_nb_handle = (shmem_double_swap_nb_t)NULL;\n  if (!shmem_double_swap_nb_handle) {\n    shmem_double_swap_nb_handle = get_function_handle(\"shmem_double_swap_nb\");\n  }\n\n  shmem_double_swap_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_double_swap_nb(double * a1, double * a2, double a3, int a4, void ** a5) {\n   __wrap_shmem_double_swap_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_short_cswap\n **********************************************************/\n\nextern short  __wrap_shmem_short_cswap(short * a1, short a2, short a3, int a4) ;\nextern short  __real_shmem_short_cswap(short * a1, short a2, short a3, int a4)  {\n\n  short retval;\n  typedef short (*shmem_short_cswap_t)(short * a1, short a2, short a3, int a4);\n  static shmem_short_cswap_t shmem_short_cswap_handle = (shmem_short_cswap_t)NULL;\n  if (!shmem_short_cswap_handle) {\n    shmem_short_cswap_handle = get_function_handle(\"shmem_short_cswap\");\n  }\n\n  retval  =  shmem_short_cswap_handle ( a1,  a2,  a3,  a4);\n  return retval;\n\n}\n\nextern short  shmem_short_cswap(short * a1, short a2, short a3, int a4) {\n   __wrap_shmem_short_cswap(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_cswap\n **********************************************************/\n\nextern int  __wrap_shmem_int_cswap(int * a1, int a2, int a3, int a4) ;\nextern int  __real_shmem_int_cswap(int * a1, int a2, int a3, int a4)  {\n\n  int retval;\n  typedef int (*shmem_int_cswap_t)(int * a1, int a2, int a3, int a4);\n  static shmem_int_cswap_t shmem_int_cswap_handle = (shmem_int_cswap_t)NULL;\n  if (!shmem_int_cswap_handle) {\n    shmem_int_cswap_handle = get_function_handle(\"shmem_int_cswap\");\n  }\n\n  retval  =  shmem_int_cswap_handle ( a1,  a2,  a3,  a4);\n  return retval;\n\n}\n\nextern int  shmem_int_cswap(int * a1, int a2, int a3, int a4) {\n   __wrap_shmem_int_cswap(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_cswap\n **********************************************************/\n\nextern long  __wrap_shmem_long_cswap(long * a1, long a2, long a3, int a4) ;\nextern long  __real_shmem_long_cswap(long * a1, long a2, long a3, int a4)  {\n\n  long retval;\n  typedef long (*shmem_long_cswap_t)(long * a1, long a2, long a3, int a4);\n  static shmem_long_cswap_t shmem_long_cswap_handle = (shmem_long_cswap_t)NULL;\n  if (!shmem_long_cswap_handle) {\n    shmem_long_cswap_handle = get_function_handle(\"shmem_long_cswap\");\n  }\n\n  retval  =  shmem_long_cswap_handle ( a1,  a2,  a3,  a4);\n  return retval;\n\n}\n\nextern long  shmem_long_cswap(long * a1, long a2, long a3, int a4) {\n   __wrap_shmem_long_cswap(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_cswap\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_cswap(long long * a1, long long a2, long long a3, int a4) ;\nextern long long  __real_shmem_longlong_cswap(long long * a1, long long a2, long long a3, int a4)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_cswap_t)(long long * a1, long long a2, long long a3, int a4);\n  static shmem_longlong_cswap_t shmem_longlong_cswap_handle = (shmem_longlong_cswap_t)NULL;\n  if (!shmem_longlong_cswap_handle) {\n    shmem_longlong_cswap_handle = get_function_handle(\"shmem_longlong_cswap\");\n  }\n\n  retval  =  shmem_longlong_cswap_handle ( a1,  a2,  a3,  a4);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_cswap(long long * a1, long long a2, long long a3, int a4) {\n   __wrap_shmem_longlong_cswap(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_cswap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_cswap_nb(short * a1, short * a2, short a3, short a4, int a5, void ** a6) ;\nextern void  __real_shmem_short_cswap_nb(short * a1, short * a2, short a3, short a4, int a5, void ** a6)  {\n\n  typedef void (*shmem_short_cswap_nb_t)(short * a1, short * a2, short a3, short a4, int a5, void ** a6);\n  static shmem_short_cswap_nb_t shmem_short_cswap_nb_handle = (shmem_short_cswap_nb_t)NULL;\n  if (!shmem_short_cswap_nb_handle) {\n    shmem_short_cswap_nb_handle = get_function_handle(\"shmem_short_cswap_nb\");\n  }\n\n  shmem_short_cswap_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_short_cswap_nb(short * a1, short * a2, short a3, short a4, int a5, void ** a6) {\n   __wrap_shmem_short_cswap_nb(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_int_cswap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_cswap_nb(int * a1, int * a2, int a3, int a4, int a5, void ** a6) ;\nextern void  __real_shmem_int_cswap_nb(int * a1, int * a2, int a3, int a4, int a5, void ** a6)  {\n\n  typedef void (*shmem_int_cswap_nb_t)(int * a1, int * a2, int a3, int a4, int a5, void ** a6);\n  static shmem_int_cswap_nb_t shmem_int_cswap_nb_handle = (shmem_int_cswap_nb_t)NULL;\n  if (!shmem_int_cswap_nb_handle) {\n    shmem_int_cswap_nb_handle = get_function_handle(\"shmem_int_cswap_nb\");\n  }\n\n  shmem_int_cswap_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_int_cswap_nb(int * a1, int * a2, int a3, int a4, int a5, void ** a6) {\n   __wrap_shmem_int_cswap_nb(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_long_cswap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_cswap_nb(long * a1, long * a2, long a3, long a4, int a5, void ** a6) ;\nextern void  __real_shmem_long_cswap_nb(long * a1, long * a2, long a3, long a4, int a5, void ** a6)  {\n\n  typedef void (*shmem_long_cswap_nb_t)(long * a1, long * a2, long a3, long a4, int a5, void ** a6);\n  static shmem_long_cswap_nb_t shmem_long_cswap_nb_handle = (shmem_long_cswap_nb_t)NULL;\n  if (!shmem_long_cswap_nb_handle) {\n    shmem_long_cswap_nb_handle = get_function_handle(\"shmem_long_cswap_nb\");\n  }\n\n  shmem_long_cswap_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_long_cswap_nb(long * a1, long * a2, long a3, long a4, int a5, void ** a6) {\n   __wrap_shmem_long_cswap_nb(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_longlong_cswap_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_cswap_nb(long long * a1, long long * a2, long long a3, long long a4, int a5, void ** a6) ;\nextern void  __real_shmem_longlong_cswap_nb(long long * a1, long long * a2, long long a3, long long a4, int a5, void ** a6)  {\n\n  typedef void (*shmem_longlong_cswap_nb_t)(long long * a1, long long * a2, long long a3, long long a4, int a5, void ** a6);\n  static shmem_longlong_cswap_nb_t shmem_longlong_cswap_nb_handle = (shmem_longlong_cswap_nb_t)NULL;\n  if (!shmem_longlong_cswap_nb_handle) {\n    shmem_longlong_cswap_nb_handle = get_function_handle(\"shmem_longlong_cswap_nb\");\n  }\n\n  shmem_longlong_cswap_nb_handle ( a1,  a2,  a3,  a4,  a5,  a6);\n\n}\n\nextern void  shmem_longlong_cswap_nb(long long * a1, long long * a2, long long a3, long long a4, int a5, void ** a6) {\n   __wrap_shmem_longlong_cswap_nb(a1, a2, a3, a4, a5, a6);\n}\n\n\n/**********************************************************\n   shmem_short_finc\n **********************************************************/\n\nextern short  __wrap_shmem_short_finc(short * a1, int a2) ;\nextern short  __real_shmem_short_finc(short * a1, int a2)  {\n\n  short retval;\n  typedef short (*shmem_short_finc_t)(short * a1, int a2);\n  static shmem_short_finc_t shmem_short_finc_handle = (shmem_short_finc_t)NULL;\n  if (!shmem_short_finc_handle) {\n    shmem_short_finc_handle = get_function_handle(\"shmem_short_finc\");\n  }\n\n  retval  =  shmem_short_finc_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern short  shmem_short_finc(short * a1, int a2) {\n   __wrap_shmem_short_finc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_int_finc\n **********************************************************/\n\nextern int  __wrap_shmem_int_finc(int * a1, int a2) ;\nextern int  __real_shmem_int_finc(int * a1, int a2)  {\n\n  int retval;\n  typedef int (*shmem_int_finc_t)(int * a1, int a2);\n  static shmem_int_finc_t shmem_int_finc_handle = (shmem_int_finc_t)NULL;\n  if (!shmem_int_finc_handle) {\n    shmem_int_finc_handle = get_function_handle(\"shmem_int_finc\");\n  }\n\n  retval  =  shmem_int_finc_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern int  shmem_int_finc(int * a1, int a2) {\n   __wrap_shmem_int_finc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_long_finc\n **********************************************************/\n\nextern long  __wrap_shmem_long_finc(long * a1, int a2) ;\nextern long  __real_shmem_long_finc(long * a1, int a2)  {\n\n  long retval;\n  typedef long (*shmem_long_finc_t)(long * a1, int a2);\n  static shmem_long_finc_t shmem_long_finc_handle = (shmem_long_finc_t)NULL;\n  if (!shmem_long_finc_handle) {\n    shmem_long_finc_handle = get_function_handle(\"shmem_long_finc\");\n  }\n\n  retval  =  shmem_long_finc_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long  shmem_long_finc(long * a1, int a2) {\n   __wrap_shmem_long_finc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_longlong_finc\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_finc(long long * a1, int a2) ;\nextern long long  __real_shmem_longlong_finc(long long * a1, int a2)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_finc_t)(long long * a1, int a2);\n  static shmem_longlong_finc_t shmem_longlong_finc_handle = (shmem_longlong_finc_t)NULL;\n  if (!shmem_longlong_finc_handle) {\n    shmem_longlong_finc_handle = get_function_handle(\"shmem_longlong_finc\");\n  }\n\n  retval  =  shmem_longlong_finc_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_finc(long long * a1, int a2) {\n   __wrap_shmem_longlong_finc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_short_finc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_finc_nb(short * a1, short * a2, int a3, void ** a4) ;\nextern void  __real_shmem_short_finc_nb(short * a1, short * a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_short_finc_nb_t)(short * a1, short * a2, int a3, void ** a4);\n  static shmem_short_finc_nb_t shmem_short_finc_nb_handle = (shmem_short_finc_nb_t)NULL;\n  if (!shmem_short_finc_nb_handle) {\n    shmem_short_finc_nb_handle = get_function_handle(\"shmem_short_finc_nb\");\n  }\n\n  shmem_short_finc_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_finc_nb(short * a1, short * a2, int a3, void ** a4) {\n   __wrap_shmem_short_finc_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_finc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_finc_nb(int * a1, int * a2, int a3, void ** a4) ;\nextern void  __real_shmem_int_finc_nb(int * a1, int * a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_int_finc_nb_t)(int * a1, int * a2, int a3, void ** a4);\n  static shmem_int_finc_nb_t shmem_int_finc_nb_handle = (shmem_int_finc_nb_t)NULL;\n  if (!shmem_int_finc_nb_handle) {\n    shmem_int_finc_nb_handle = get_function_handle(\"shmem_int_finc_nb\");\n  }\n\n  shmem_int_finc_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_finc_nb(int * a1, int * a2, int a3, void ** a4) {\n   __wrap_shmem_int_finc_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_finc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_finc_nb(long * a1, long * a2, int a3, void ** a4) ;\nextern void  __real_shmem_long_finc_nb(long * a1, long * a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_long_finc_nb_t)(long * a1, long * a2, int a3, void ** a4);\n  static shmem_long_finc_nb_t shmem_long_finc_nb_handle = (shmem_long_finc_nb_t)NULL;\n  if (!shmem_long_finc_nb_handle) {\n    shmem_long_finc_nb_handle = get_function_handle(\"shmem_long_finc_nb\");\n  }\n\n  shmem_long_finc_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_finc_nb(long * a1, long * a2, int a3, void ** a4) {\n   __wrap_shmem_long_finc_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_finc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_finc_nb(long long * a1, long long * a2, int a3, void ** a4) ;\nextern void  __real_shmem_longlong_finc_nb(long long * a1, long long * a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_longlong_finc_nb_t)(long long * a1, long long * a2, int a3, void ** a4);\n  static shmem_longlong_finc_nb_t shmem_longlong_finc_nb_handle = (shmem_longlong_finc_nb_t)NULL;\n  if (!shmem_longlong_finc_nb_handle) {\n    shmem_longlong_finc_nb_handle = get_function_handle(\"shmem_longlong_finc_nb\");\n  }\n\n  shmem_longlong_finc_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_finc_nb(long long * a1, long long * a2, int a3, void ** a4) {\n   __wrap_shmem_longlong_finc_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_short_inc\n **********************************************************/\n\nextern void  __wrap_shmem_short_inc(short * a1, int a2) ;\nextern void  __real_shmem_short_inc(short * a1, int a2)  {\n\n  typedef void (*shmem_short_inc_t)(short * a1, int a2);\n  static shmem_short_inc_t shmem_short_inc_handle = (shmem_short_inc_t)NULL;\n  if (!shmem_short_inc_handle) {\n    shmem_short_inc_handle = get_function_handle(\"shmem_short_inc\");\n  }\n\n  shmem_short_inc_handle ( a1,  a2);\n\n}\n\nextern void  shmem_short_inc(short * a1, int a2) {\n   __wrap_shmem_short_inc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_int_inc\n **********************************************************/\n\nextern void  __wrap_shmem_int_inc(int * a1, int a2) ;\nextern void  __real_shmem_int_inc(int * a1, int a2)  {\n\n  typedef void (*shmem_int_inc_t)(int * a1, int a2);\n  static shmem_int_inc_t shmem_int_inc_handle = (shmem_int_inc_t)NULL;\n  if (!shmem_int_inc_handle) {\n    shmem_int_inc_handle = get_function_handle(\"shmem_int_inc\");\n  }\n\n  shmem_int_inc_handle ( a1,  a2);\n\n}\n\nextern void  shmem_int_inc(int * a1, int a2) {\n   __wrap_shmem_int_inc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_long_inc\n **********************************************************/\n\nextern void  __wrap_shmem_long_inc(long * a1, int a2) ;\nextern void  __real_shmem_long_inc(long * a1, int a2)  {\n\n  typedef void (*shmem_long_inc_t)(long * a1, int a2);\n  static shmem_long_inc_t shmem_long_inc_handle = (shmem_long_inc_t)NULL;\n  if (!shmem_long_inc_handle) {\n    shmem_long_inc_handle = get_function_handle(\"shmem_long_inc\");\n  }\n\n  shmem_long_inc_handle ( a1,  a2);\n\n}\n\nextern void  shmem_long_inc(long * a1, int a2) {\n   __wrap_shmem_long_inc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_longlong_inc\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_inc(long long * a1, int a2) ;\nextern void  __real_shmem_longlong_inc(long long * a1, int a2)  {\n\n  typedef void (*shmem_longlong_inc_t)(long long * a1, int a2);\n  static shmem_longlong_inc_t shmem_longlong_inc_handle = (shmem_longlong_inc_t)NULL;\n  if (!shmem_longlong_inc_handle) {\n    shmem_longlong_inc_handle = get_function_handle(\"shmem_longlong_inc\");\n  }\n\n  shmem_longlong_inc_handle ( a1,  a2);\n\n}\n\nextern void  shmem_longlong_inc(long long * a1, int a2) {\n   __wrap_shmem_longlong_inc(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_short_inc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_inc_nb(short * a1, int a2, void ** a3) ;\nextern void  __real_shmem_short_inc_nb(short * a1, int a2, void ** a3)  {\n\n  typedef void (*shmem_short_inc_nb_t)(short * a1, int a2, void ** a3);\n  static shmem_short_inc_nb_t shmem_short_inc_nb_handle = (shmem_short_inc_nb_t)NULL;\n  if (!shmem_short_inc_nb_handle) {\n    shmem_short_inc_nb_handle = get_function_handle(\"shmem_short_inc_nb\");\n  }\n\n  shmem_short_inc_nb_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_short_inc_nb(short * a1, int a2, void ** a3) {\n   __wrap_shmem_short_inc_nb(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_inc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_inc_nb(int * a1, int a2, void ** a3) ;\nextern void  __real_shmem_int_inc_nb(int * a1, int a2, void ** a3)  {\n\n  typedef void (*shmem_int_inc_nb_t)(int * a1, int a2, void ** a3);\n  static shmem_int_inc_nb_t shmem_int_inc_nb_handle = (shmem_int_inc_nb_t)NULL;\n  if (!shmem_int_inc_nb_handle) {\n    shmem_int_inc_nb_handle = get_function_handle(\"shmem_int_inc_nb\");\n  }\n\n  shmem_int_inc_nb_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_int_inc_nb(int * a1, int a2, void ** a3) {\n   __wrap_shmem_int_inc_nb(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_inc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_inc_nb(long * a1, int a2, void ** a3) ;\nextern void  __real_shmem_long_inc_nb(long * a1, int a2, void ** a3)  {\n\n  typedef void (*shmem_long_inc_nb_t)(long * a1, int a2, void ** a3);\n  static shmem_long_inc_nb_t shmem_long_inc_nb_handle = (shmem_long_inc_nb_t)NULL;\n  if (!shmem_long_inc_nb_handle) {\n    shmem_long_inc_nb_handle = get_function_handle(\"shmem_long_inc_nb\");\n  }\n\n  shmem_long_inc_nb_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_long_inc_nb(long * a1, int a2, void ** a3) {\n   __wrap_shmem_long_inc_nb(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_inc_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_inc_nb(long long * a1, int a2, void ** a3) ;\nextern void  __real_shmem_longlong_inc_nb(long long * a1, int a2, void ** a3)  {\n\n  typedef void (*shmem_longlong_inc_nb_t)(long long * a1, int a2, void ** a3);\n  static shmem_longlong_inc_nb_t shmem_longlong_inc_nb_handle = (shmem_longlong_inc_nb_t)NULL;\n  if (!shmem_longlong_inc_nb_handle) {\n    shmem_longlong_inc_nb_handle = get_function_handle(\"shmem_longlong_inc_nb\");\n  }\n\n  shmem_longlong_inc_nb_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_longlong_inc_nb(long long * a1, int a2, void ** a3) {\n   __wrap_shmem_longlong_inc_nb(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_fadd\n **********************************************************/\n\nextern short  __wrap_shmem_short_fadd(short * a1, short a2, int a3) ;\nextern short  __real_shmem_short_fadd(short * a1, short a2, int a3)  {\n\n  short retval;\n  typedef short (*shmem_short_fadd_t)(short * a1, short a2, int a3);\n  static shmem_short_fadd_t shmem_short_fadd_handle = (shmem_short_fadd_t)NULL;\n  if (!shmem_short_fadd_handle) {\n    shmem_short_fadd_handle = get_function_handle(\"shmem_short_fadd\");\n  }\n\n  retval  =  shmem_short_fadd_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern short  shmem_short_fadd(short * a1, short a2, int a3) {\n   __wrap_shmem_short_fadd(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_fadd\n **********************************************************/\n\nextern int  __wrap_shmem_int_fadd(int * a1, int a2, int a3) ;\nextern int  __real_shmem_int_fadd(int * a1, int a2, int a3)  {\n\n  int retval;\n  typedef int (*shmem_int_fadd_t)(int * a1, int a2, int a3);\n  static shmem_int_fadd_t shmem_int_fadd_handle = (shmem_int_fadd_t)NULL;\n  if (!shmem_int_fadd_handle) {\n    shmem_int_fadd_handle = get_function_handle(\"shmem_int_fadd\");\n  }\n\n  retval  =  shmem_int_fadd_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern int  shmem_int_fadd(int * a1, int a2, int a3) {\n   __wrap_shmem_int_fadd(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_fadd\n **********************************************************/\n\nextern long  __wrap_shmem_long_fadd(long * a1, long a2, int a3) ;\nextern long  __real_shmem_long_fadd(long * a1, long a2, int a3)  {\n\n  long retval;\n  typedef long (*shmem_long_fadd_t)(long * a1, long a2, int a3);\n  static shmem_long_fadd_t shmem_long_fadd_handle = (shmem_long_fadd_t)NULL;\n  if (!shmem_long_fadd_handle) {\n    shmem_long_fadd_handle = get_function_handle(\"shmem_long_fadd\");\n  }\n\n  retval  =  shmem_long_fadd_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern long  shmem_long_fadd(long * a1, long a2, int a3) {\n   __wrap_shmem_long_fadd(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_fadd\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_fadd(long long * a1, long long a2, int a3) ;\nextern long long  __real_shmem_longlong_fadd(long long * a1, long long a2, int a3)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_fadd_t)(long long * a1, long long a2, int a3);\n  static shmem_longlong_fadd_t shmem_longlong_fadd_handle = (shmem_longlong_fadd_t)NULL;\n  if (!shmem_longlong_fadd_handle) {\n    shmem_longlong_fadd_handle = get_function_handle(\"shmem_longlong_fadd\");\n  }\n\n  retval  =  shmem_longlong_fadd_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_fadd(long long * a1, long long a2, int a3) {\n   __wrap_shmem_longlong_fadd(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_fadd_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_fadd_nb(short * a1, short * a2, short a3, int a4, void ** a5) ;\nextern void  __real_shmem_short_fadd_nb(short * a1, short * a2, short a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_short_fadd_nb_t)(short * a1, short * a2, short a3, int a4, void ** a5);\n  static shmem_short_fadd_nb_t shmem_short_fadd_nb_handle = (shmem_short_fadd_nb_t)NULL;\n  if (!shmem_short_fadd_nb_handle) {\n    shmem_short_fadd_nb_handle = get_function_handle(\"shmem_short_fadd_nb\");\n  }\n\n  shmem_short_fadd_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_short_fadd_nb(short * a1, short * a2, short a3, int a4, void ** a5) {\n   __wrap_shmem_short_fadd_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_int_fadd_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_fadd_nb(int * a1, int * a2, int a3, int a4, void ** a5) ;\nextern void  __real_shmem_int_fadd_nb(int * a1, int * a2, int a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_int_fadd_nb_t)(int * a1, int * a2, int a3, int a4, void ** a5);\n  static shmem_int_fadd_nb_t shmem_int_fadd_nb_handle = (shmem_int_fadd_nb_t)NULL;\n  if (!shmem_int_fadd_nb_handle) {\n    shmem_int_fadd_nb_handle = get_function_handle(\"shmem_int_fadd_nb\");\n  }\n\n  shmem_int_fadd_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_int_fadd_nb(int * a1, int * a2, int a3, int a4, void ** a5) {\n   __wrap_shmem_int_fadd_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_long_fadd_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_fadd_nb(long * a1, long * a2, long a3, int a4, void ** a5) ;\nextern void  __real_shmem_long_fadd_nb(long * a1, long * a2, long a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_long_fadd_nb_t)(long * a1, long * a2, long a3, int a4, void ** a5);\n  static shmem_long_fadd_nb_t shmem_long_fadd_nb_handle = (shmem_long_fadd_nb_t)NULL;\n  if (!shmem_long_fadd_nb_handle) {\n    shmem_long_fadd_nb_handle = get_function_handle(\"shmem_long_fadd_nb\");\n  }\n\n  shmem_long_fadd_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_long_fadd_nb(long * a1, long * a2, long a3, int a4, void ** a5) {\n   __wrap_shmem_long_fadd_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_longlong_fadd_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_fadd_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5) ;\nextern void  __real_shmem_longlong_fadd_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5)  {\n\n  typedef void (*shmem_longlong_fadd_nb_t)(long long * a1, long long * a2, long long a3, int a4, void ** a5);\n  static shmem_longlong_fadd_nb_t shmem_longlong_fadd_nb_handle = (shmem_longlong_fadd_nb_t)NULL;\n  if (!shmem_longlong_fadd_nb_handle) {\n    shmem_longlong_fadd_nb_handle = get_function_handle(\"shmem_longlong_fadd_nb\");\n  }\n\n  shmem_longlong_fadd_nb_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_longlong_fadd_nb(long long * a1, long long * a2, long long a3, int a4, void ** a5) {\n   __wrap_shmem_longlong_fadd_nb(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_short_add\n **********************************************************/\n\nextern void  __wrap_shmem_short_add(short * a1, short a2, int a3) ;\nextern void  __real_shmem_short_add(short * a1, short a2, int a3)  {\n\n  typedef void (*shmem_short_add_t)(short * a1, short a2, int a3);\n  static shmem_short_add_t shmem_short_add_handle = (shmem_short_add_t)NULL;\n  if (!shmem_short_add_handle) {\n    shmem_short_add_handle = get_function_handle(\"shmem_short_add\");\n  }\n\n  shmem_short_add_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_short_add(short * a1, short a2, int a3) {\n   __wrap_shmem_short_add(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_add\n **********************************************************/\n\nextern void  __wrap_shmem_int_add(int * a1, int a2, int a3) ;\nextern void  __real_shmem_int_add(int * a1, int a2, int a3)  {\n\n  typedef void (*shmem_int_add_t)(int * a1, int a2, int a3);\n  static shmem_int_add_t shmem_int_add_handle = (shmem_int_add_t)NULL;\n  if (!shmem_int_add_handle) {\n    shmem_int_add_handle = get_function_handle(\"shmem_int_add\");\n  }\n\n  shmem_int_add_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_int_add(int * a1, int a2, int a3) {\n   __wrap_shmem_int_add(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_add\n **********************************************************/\n\nextern void  __wrap_shmem_long_add(long * a1, long a2, int a3) ;\nextern void  __real_shmem_long_add(long * a1, long a2, int a3)  {\n\n  typedef void (*shmem_long_add_t)(long * a1, long a2, int a3);\n  static shmem_long_add_t shmem_long_add_handle = (shmem_long_add_t)NULL;\n  if (!shmem_long_add_handle) {\n    shmem_long_add_handle = get_function_handle(\"shmem_long_add\");\n  }\n\n  shmem_long_add_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_long_add(long * a1, long a2, int a3) {\n   __wrap_shmem_long_add(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_add\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_add(long long * a1, long long a2, int a3) ;\nextern void  __real_shmem_longlong_add(long long * a1, long long a2, int a3)  {\n\n  typedef void (*shmem_longlong_add_t)(long long * a1, long long a2, int a3);\n  static shmem_longlong_add_t shmem_longlong_add_handle = (shmem_longlong_add_t)NULL;\n  if (!shmem_longlong_add_handle) {\n    shmem_longlong_add_handle = get_function_handle(\"shmem_longlong_add\");\n  }\n\n  shmem_longlong_add_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_longlong_add(long long * a1, long long a2, int a3) {\n   __wrap_shmem_longlong_add(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_add_nb\n **********************************************************/\n\nextern void  __wrap_shmem_short_add_nb(short * a1, short a2, int a3, void ** a4) ;\nextern void  __real_shmem_short_add_nb(short * a1, short a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_short_add_nb_t)(short * a1, short a2, int a3, void ** a4);\n  static shmem_short_add_nb_t shmem_short_add_nb_handle = (shmem_short_add_nb_t)NULL;\n  if (!shmem_short_add_nb_handle) {\n    shmem_short_add_nb_handle = get_function_handle(\"shmem_short_add_nb\");\n  }\n\n  shmem_short_add_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_short_add_nb(short * a1, short a2, int a3, void ** a4) {\n   __wrap_shmem_short_add_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_add_nb\n **********************************************************/\n\nextern void  __wrap_shmem_int_add_nb(int * a1, int a2, int a3, void ** a4) ;\nextern void  __real_shmem_int_add_nb(int * a1, int a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_int_add_nb_t)(int * a1, int a2, int a3, void ** a4);\n  static shmem_int_add_nb_t shmem_int_add_nb_handle = (shmem_int_add_nb_t)NULL;\n  if (!shmem_int_add_nb_handle) {\n    shmem_int_add_nb_handle = get_function_handle(\"shmem_int_add_nb\");\n  }\n\n  shmem_int_add_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_int_add_nb(int * a1, int a2, int a3, void ** a4) {\n   __wrap_shmem_int_add_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_long_add_nb\n **********************************************************/\n\nextern void  __wrap_shmem_long_add_nb(long * a1, long a2, int a3, void ** a4) ;\nextern void  __real_shmem_long_add_nb(long * a1, long a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_long_add_nb_t)(long * a1, long a2, int a3, void ** a4);\n  static shmem_long_add_nb_t shmem_long_add_nb_handle = (shmem_long_add_nb_t)NULL;\n  if (!shmem_long_add_nb_handle) {\n    shmem_long_add_nb_handle = get_function_handle(\"shmem_long_add_nb\");\n  }\n\n  shmem_long_add_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_long_add_nb(long * a1, long a2, int a3, void ** a4) {\n   __wrap_shmem_long_add_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_longlong_add_nb\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_add_nb(long long * a1, long long a2, int a3, void ** a4) ;\nextern void  __real_shmem_longlong_add_nb(long long * a1, long long a2, int a3, void ** a4)  {\n\n  typedef void (*shmem_longlong_add_nb_t)(long long * a1, long long a2, int a3, void ** a4);\n  static shmem_longlong_add_nb_t shmem_longlong_add_nb_handle = (shmem_longlong_add_nb_t)NULL;\n  if (!shmem_longlong_add_nb_handle) {\n    shmem_longlong_add_nb_handle = get_function_handle(\"shmem_longlong_add_nb\");\n  }\n\n  shmem_longlong_add_nb_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_longlong_add_nb(long long * a1, long long a2, int a3, void ** a4) {\n   __wrap_shmem_longlong_add_nb(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_int_fetch\n **********************************************************/\n\nextern int  __wrap_shmem_int_fetch(const int * a1, int a2) ;\nextern int  __real_shmem_int_fetch(const int * a1, int a2)  {\n\n  int retval;\n  typedef int (*shmem_int_fetch_t)(const int * a1, int a2);\n  static shmem_int_fetch_t shmem_int_fetch_handle = (shmem_int_fetch_t)NULL;\n  if (!shmem_int_fetch_handle) {\n    shmem_int_fetch_handle = get_function_handle(\"shmem_int_fetch\");\n  }\n\n  retval  =  shmem_int_fetch_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern int  shmem_int_fetch(const int * a1, int a2) {\n   __wrap_shmem_int_fetch(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_long_fetch\n **********************************************************/\n\nextern long  __wrap_shmem_long_fetch(const long * a1, int a2) ;\nextern long  __real_shmem_long_fetch(const long * a1, int a2)  {\n\n  long retval;\n  typedef long (*shmem_long_fetch_t)(const long * a1, int a2);\n  static shmem_long_fetch_t shmem_long_fetch_handle = (shmem_long_fetch_t)NULL;\n  if (!shmem_long_fetch_handle) {\n    shmem_long_fetch_handle = get_function_handle(\"shmem_long_fetch\");\n  }\n\n  retval  =  shmem_long_fetch_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long  shmem_long_fetch(const long * a1, int a2) {\n   __wrap_shmem_long_fetch(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_float_fetch\n **********************************************************/\n\nextern float  __wrap_shmem_float_fetch(const float * a1, int a2) ;\nextern float  __real_shmem_float_fetch(const float * a1, int a2)  {\n\n  float retval;\n  typedef float (*shmem_float_fetch_t)(const float * a1, int a2);\n  static shmem_float_fetch_t shmem_float_fetch_handle = (shmem_float_fetch_t)NULL;\n  if (!shmem_float_fetch_handle) {\n    shmem_float_fetch_handle = get_function_handle(\"shmem_float_fetch\");\n  }\n\n  retval  =  shmem_float_fetch_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern float  shmem_float_fetch(const float * a1, int a2) {\n   __wrap_shmem_float_fetch(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_double_fetch\n **********************************************************/\n\nextern double  __wrap_shmem_double_fetch(const double * a1, int a2) ;\nextern double  __real_shmem_double_fetch(const double * a1, int a2)  {\n\n  double retval;\n  typedef double (*shmem_double_fetch_t)(const double * a1, int a2);\n  static shmem_double_fetch_t shmem_double_fetch_handle = (shmem_double_fetch_t)NULL;\n  if (!shmem_double_fetch_handle) {\n    shmem_double_fetch_handle = get_function_handle(\"shmem_double_fetch\");\n  }\n\n  retval  =  shmem_double_fetch_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern double  shmem_double_fetch(const double * a1, int a2) {\n   __wrap_shmem_double_fetch(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_longlong_fetch\n **********************************************************/\n\nextern long long  __wrap_shmem_longlong_fetch(const long long * a1, int a2) ;\nextern long long  __real_shmem_longlong_fetch(const long long * a1, int a2)  {\n\n  long long retval;\n  typedef long long (*shmem_longlong_fetch_t)(const long long * a1, int a2);\n  static shmem_longlong_fetch_t shmem_longlong_fetch_handle = (shmem_longlong_fetch_t)NULL;\n  if (!shmem_longlong_fetch_handle) {\n    shmem_longlong_fetch_handle = get_function_handle(\"shmem_longlong_fetch\");\n  }\n\n  retval  =  shmem_longlong_fetch_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern long long  shmem_longlong_fetch(const long long * a1, int a2) {\n   __wrap_shmem_longlong_fetch(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_int_set\n **********************************************************/\n\nextern void  __wrap_shmem_int_set(int * a1, int a2, int a3) ;\nextern void  __real_shmem_int_set(int * a1, int a2, int a3)  {\n\n  typedef void (*shmem_int_set_t)(int * a1, int a2, int a3);\n  static shmem_int_set_t shmem_int_set_handle = (shmem_int_set_t)NULL;\n  if (!shmem_int_set_handle) {\n    shmem_int_set_handle = get_function_handle(\"shmem_int_set\");\n  }\n\n  shmem_int_set_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_int_set(int * a1, int a2, int a3) {\n   __wrap_shmem_int_set(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_set\n **********************************************************/\n\nextern void  __wrap_shmem_long_set(long * a1, long a2, int a3) ;\nextern void  __real_shmem_long_set(long * a1, long a2, int a3)  {\n\n  typedef void (*shmem_long_set_t)(long * a1, long a2, int a3);\n  static shmem_long_set_t shmem_long_set_handle = (shmem_long_set_t)NULL;\n  if (!shmem_long_set_handle) {\n    shmem_long_set_handle = get_function_handle(\"shmem_long_set\");\n  }\n\n  shmem_long_set_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_long_set(long * a1, long a2, int a3) {\n   __wrap_shmem_long_set(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_float_set\n **********************************************************/\n\nextern void  __wrap_shmem_float_set(float * a1, float a2, int a3) ;\nextern void  __real_shmem_float_set(float * a1, float a2, int a3)  {\n\n  typedef void (*shmem_float_set_t)(float * a1, float a2, int a3);\n  static shmem_float_set_t shmem_float_set_handle = (shmem_float_set_t)NULL;\n  if (!shmem_float_set_handle) {\n    shmem_float_set_handle = get_function_handle(\"shmem_float_set\");\n  }\n\n  shmem_float_set_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_float_set(float * a1, float a2, int a3) {\n   __wrap_shmem_float_set(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_double_set\n **********************************************************/\n\nextern void  __wrap_shmem_double_set(double * a1, double a2, int a3) ;\nextern void  __real_shmem_double_set(double * a1, double a2, int a3)  {\n\n  typedef void (*shmem_double_set_t)(double * a1, double a2, int a3);\n  static shmem_double_set_t shmem_double_set_handle = (shmem_double_set_t)NULL;\n  if (!shmem_double_set_handle) {\n    shmem_double_set_handle = get_function_handle(\"shmem_double_set\");\n  }\n\n  shmem_double_set_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_double_set(double * a1, double a2, int a3) {\n   __wrap_shmem_double_set(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_set\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_set(long long * a1, long long a2, int a3) ;\nextern void  __real_shmem_longlong_set(long long * a1, long long a2, int a3)  {\n\n  typedef void (*shmem_longlong_set_t)(long long * a1, long long a2, int a3);\n  static shmem_longlong_set_t shmem_longlong_set_handle = (shmem_longlong_set_t)NULL;\n  if (!shmem_longlong_set_handle) {\n    shmem_longlong_set_handle = get_function_handle(\"shmem_longlong_set\");\n  }\n\n  shmem_longlong_set_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_longlong_set(long long * a1, long long a2, int a3) {\n   __wrap_shmem_longlong_set(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_barrier_all\n **********************************************************/\n\nextern void  __wrap_shmem_barrier_all() ;\nextern void  __real_shmem_barrier_all()  {\n\n  typedef void (*shmem_barrier_all_t)();\n  static shmem_barrier_all_t shmem_barrier_all_handle = (shmem_barrier_all_t)NULL;\n  if (!shmem_barrier_all_handle) {\n    shmem_barrier_all_handle = get_function_handle(\"shmem_barrier_all\");\n  }\n\n  shmem_barrier_all_handle ();\n\n}\n\nextern void  shmem_barrier_all() {\n   __wrap_shmem_barrier_all();\n}\n\n\n/**********************************************************\n   shmem_barrier\n **********************************************************/\n\nextern void  __wrap_shmem_barrier(int a1, int a2, int a3, long * a4) ;\nextern void  __real_shmem_barrier(int a1, int a2, int a3, long * a4)  {\n\n  typedef void (*shmem_barrier_t)(int a1, int a2, int a3, long * a4);\n  static shmem_barrier_t shmem_barrier_handle = (shmem_barrier_t)NULL;\n  if (!shmem_barrier_handle) {\n    shmem_barrier_handle = get_function_handle(\"shmem_barrier\");\n  }\n\n  shmem_barrier_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_barrier(int a1, int a2, int a3, long * a4) {\n   __wrap_shmem_barrier(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_team_barrier\n **********************************************************/\n\nextern void  __wrap_shmem_team_barrier(shmem_team_t a1, long * a2) ;\nextern void  __real_shmem_team_barrier(shmem_team_t a1, long * a2)  {\n\n  typedef void (*shmem_team_barrier_t)(shmem_team_t a1, long * a2);\n  static shmem_team_barrier_t shmem_team_barrier_handle = (shmem_team_barrier_t)NULL;\n  if (!shmem_team_barrier_handle) {\n    shmem_team_barrier_handle = get_function_handle(\"shmem_team_barrier\");\n  }\n\n  shmem_team_barrier_handle ( a1,  a2);\n\n}\n\nextern void  shmem_team_barrier(shmem_team_t a1, long * a2) {\n   __wrap_shmem_team_barrier(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_fence\n **********************************************************/\n\nextern void  __wrap_shmem_fence() ;\nextern void  __real_shmem_fence()  {\n\n  typedef void (*shmem_fence_t)();\n  static shmem_fence_t shmem_fence_handle = (shmem_fence_t)NULL;\n  if (!shmem_fence_handle) {\n    shmem_fence_handle = get_function_handle(\"shmem_fence\");\n  }\n\n  shmem_fence_handle ();\n\n}\n\nextern void  shmem_fence() {\n   __wrap_shmem_fence();\n}\n\n\n/**********************************************************\n   shmem_quiet\n **********************************************************/\n\nextern void  __wrap_shmem_quiet() ;\nextern void  __real_shmem_quiet()  {\n\n  typedef void (*shmem_quiet_t)();\n  static shmem_quiet_t shmem_quiet_handle = (shmem_quiet_t)NULL;\n  if (!shmem_quiet_handle) {\n    shmem_quiet_handle = get_function_handle(\"shmem_quiet\");\n  }\n\n  shmem_quiet_handle ();\n\n}\n\nextern void  shmem_quiet() {\n   __wrap_shmem_quiet();\n}\n\n\n/**********************************************************\n   shmem_set_lock\n **********************************************************/\n\nextern void  __wrap_shmem_set_lock(long * a1) ;\nextern void  __real_shmem_set_lock(long * a1)  {\n\n  typedef void (*shmem_set_lock_t)(long * a1);\n  static shmem_set_lock_t shmem_set_lock_handle = (shmem_set_lock_t)NULL;\n  if (!shmem_set_lock_handle) {\n    shmem_set_lock_handle = get_function_handle(\"shmem_set_lock\");\n  }\n\n  shmem_set_lock_handle ( a1);\n\n}\n\nextern void  shmem_set_lock(long * a1) {\n   __wrap_shmem_set_lock(a1);\n}\n\n\n/**********************************************************\n   shmem_clear_lock\n **********************************************************/\n\nextern void  __wrap_shmem_clear_lock(long * a1) ;\nextern void  __real_shmem_clear_lock(long * a1)  {\n\n  typedef void (*shmem_clear_lock_t)(long * a1);\n  static shmem_clear_lock_t shmem_clear_lock_handle = (shmem_clear_lock_t)NULL;\n  if (!shmem_clear_lock_handle) {\n    shmem_clear_lock_handle = get_function_handle(\"shmem_clear_lock\");\n  }\n\n  shmem_clear_lock_handle ( a1);\n\n}\n\nextern void  shmem_clear_lock(long * a1) {\n   __wrap_shmem_clear_lock(a1);\n}\n\n\n/**********************************************************\n   shmem_test_lock\n **********************************************************/\n\nextern int  __wrap_shmem_test_lock(long * a1) ;\nextern int  __real_shmem_test_lock(long * a1)  {\n\n  int retval;\n  typedef int (*shmem_test_lock_t)(long * a1);\n  static shmem_test_lock_t shmem_test_lock_handle = (shmem_test_lock_t)NULL;\n  if (!shmem_test_lock_handle) {\n    shmem_test_lock_handle = get_function_handle(\"shmem_test_lock\");\n  }\n\n  retval  =  shmem_test_lock_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_test_lock(long * a1) {\n   __wrap_shmem_test_lock(a1);\n}\n\n\n/**********************************************************\n   shmem_clear_event\n **********************************************************/\n\nextern void  __wrap_shmem_clear_event(long * a1) ;\nextern void  __real_shmem_clear_event(long * a1)  {\n\n  typedef void (*shmem_clear_event_t)(long * a1);\n  static shmem_clear_event_t shmem_clear_event_handle = (shmem_clear_event_t)NULL;\n  if (!shmem_clear_event_handle) {\n    shmem_clear_event_handle = get_function_handle(\"shmem_clear_event\");\n  }\n\n  shmem_clear_event_handle ( a1);\n\n}\n\nextern void  shmem_clear_event(long * a1) {\n   __wrap_shmem_clear_event(a1);\n}\n\n\n/**********************************************************\n   shmem_set_event\n **********************************************************/\n\nextern void  __wrap_shmem_set_event(long * a1) ;\nextern void  __real_shmem_set_event(long * a1)  {\n\n  typedef void (*shmem_set_event_t)(long * a1);\n  static shmem_set_event_t shmem_set_event_handle = (shmem_set_event_t)NULL;\n  if (!shmem_set_event_handle) {\n    shmem_set_event_handle = get_function_handle(\"shmem_set_event\");\n  }\n\n  shmem_set_event_handle ( a1);\n\n}\n\nextern void  shmem_set_event(long * a1) {\n   __wrap_shmem_set_event(a1);\n}\n\n\n/**********************************************************\n   shmem_test_event\n **********************************************************/\n\nextern int  __wrap_shmem_test_event(long * a1) ;\nextern int  __real_shmem_test_event(long * a1)  {\n\n  int retval;\n  typedef int (*shmem_test_event_t)(long * a1);\n  static shmem_test_event_t shmem_test_event_handle = (shmem_test_event_t)NULL;\n  if (!shmem_test_event_handle) {\n    shmem_test_event_handle = get_function_handle(\"shmem_test_event\");\n  }\n\n  retval  =  shmem_test_event_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_test_event(long * a1) {\n   __wrap_shmem_test_event(a1);\n}\n\n\n/**********************************************************\n   shmem_wait_event\n **********************************************************/\n\nextern void  __wrap_shmem_wait_event(long * a1) ;\nextern void  __real_shmem_wait_event(long * a1)  {\n\n  typedef void (*shmem_wait_event_t)(long * a1);\n  static shmem_wait_event_t shmem_wait_event_handle = (shmem_wait_event_t)NULL;\n  if (!shmem_wait_event_handle) {\n    shmem_wait_event_handle = get_function_handle(\"shmem_wait_event\");\n  }\n\n  shmem_wait_event_handle ( a1);\n\n}\n\nextern void  shmem_wait_event(long * a1) {\n   __wrap_shmem_wait_event(a1);\n}\n\n\n/**********************************************************\n   shmem_short_wait\n **********************************************************/\n\nextern void  __wrap_shmem_short_wait(short * a1, short a2) ;\nextern void  __real_shmem_short_wait(short * a1, short a2)  {\n\n  typedef void (*shmem_short_wait_t)(short * a1, short a2);\n  static shmem_short_wait_t shmem_short_wait_handle = (shmem_short_wait_t)NULL;\n  if (!shmem_short_wait_handle) {\n    shmem_short_wait_handle = get_function_handle(\"shmem_short_wait\");\n  }\n\n  shmem_short_wait_handle ( a1,  a2);\n\n}\n\nextern void  shmem_short_wait(short * a1, short a2) {\n   __wrap_shmem_short_wait(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_int_wait\n **********************************************************/\n\nextern void  __wrap_shmem_int_wait(int * a1, int a2) ;\nextern void  __real_shmem_int_wait(int * a1, int a2)  {\n\n  typedef void (*shmem_int_wait_t)(int * a1, int a2);\n  static shmem_int_wait_t shmem_int_wait_handle = (shmem_int_wait_t)NULL;\n  if (!shmem_int_wait_handle) {\n    shmem_int_wait_handle = get_function_handle(\"shmem_int_wait\");\n  }\n\n  shmem_int_wait_handle ( a1,  a2);\n\n}\n\nextern void  shmem_int_wait(int * a1, int a2) {\n   __wrap_shmem_int_wait(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_long_wait\n **********************************************************/\n\nextern void  __wrap_shmem_long_wait(long * a1, long a2) ;\nextern void  __real_shmem_long_wait(long * a1, long a2)  {\n\n  typedef void (*shmem_long_wait_t)(long * a1, long a2);\n  static shmem_long_wait_t shmem_long_wait_handle = (shmem_long_wait_t)NULL;\n  if (!shmem_long_wait_handle) {\n    shmem_long_wait_handle = get_function_handle(\"shmem_long_wait\");\n  }\n\n  shmem_long_wait_handle ( a1,  a2);\n\n}\n\nextern void  shmem_long_wait(long * a1, long a2) {\n   __wrap_shmem_long_wait(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_longlong_wait\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_wait(long long * a1, long long a2) ;\nextern void  __real_shmem_longlong_wait(long long * a1, long long a2)  {\n\n  typedef void (*shmem_longlong_wait_t)(long long * a1, long long a2);\n  static shmem_longlong_wait_t shmem_longlong_wait_handle = (shmem_longlong_wait_t)NULL;\n  if (!shmem_longlong_wait_handle) {\n    shmem_longlong_wait_handle = get_function_handle(\"shmem_longlong_wait\");\n  }\n\n  shmem_longlong_wait_handle ( a1,  a2);\n\n}\n\nextern void  shmem_longlong_wait(long long * a1, long long a2) {\n   __wrap_shmem_longlong_wait(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_short_wait_until\n **********************************************************/\n\nextern void  __wrap_shmem_short_wait_until(short * a1, int a2, short a3) ;\nextern void  __real_shmem_short_wait_until(short * a1, int a2, short a3)  {\n\n  typedef void (*shmem_short_wait_until_t)(short * a1, int a2, short a3);\n  static shmem_short_wait_until_t shmem_short_wait_until_handle = (shmem_short_wait_until_t)NULL;\n  if (!shmem_short_wait_until_handle) {\n    shmem_short_wait_until_handle = get_function_handle(\"shmem_short_wait_until\");\n  }\n\n  shmem_short_wait_until_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_short_wait_until(short * a1, int a2, short a3) {\n   __wrap_shmem_short_wait_until(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_int_wait_until\n **********************************************************/\n\nextern void  __wrap_shmem_int_wait_until(int * a1, int a2, int a3) ;\nextern void  __real_shmem_int_wait_until(int * a1, int a2, int a3)  {\n\n  typedef void (*shmem_int_wait_until_t)(int * a1, int a2, int a3);\n  static shmem_int_wait_until_t shmem_int_wait_until_handle = (shmem_int_wait_until_t)NULL;\n  if (!shmem_int_wait_until_handle) {\n    shmem_int_wait_until_handle = get_function_handle(\"shmem_int_wait_until\");\n  }\n\n  shmem_int_wait_until_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_int_wait_until(int * a1, int a2, int a3) {\n   __wrap_shmem_int_wait_until(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_long_wait_until\n **********************************************************/\n\nextern void  __wrap_shmem_long_wait_until(long * a1, int a2, long a3) ;\nextern void  __real_shmem_long_wait_until(long * a1, int a2, long a3)  {\n\n  typedef void (*shmem_long_wait_until_t)(long * a1, int a2, long a3);\n  static shmem_long_wait_until_t shmem_long_wait_until_handle = (shmem_long_wait_until_t)NULL;\n  if (!shmem_long_wait_until_handle) {\n    shmem_long_wait_until_handle = get_function_handle(\"shmem_long_wait_until\");\n  }\n\n  shmem_long_wait_until_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_long_wait_until(long * a1, int a2, long a3) {\n   __wrap_shmem_long_wait_until(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_longlong_wait_until\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_wait_until(long long * a1, int a2, long long a3) ;\nextern void  __real_shmem_longlong_wait_until(long long * a1, int a2, long long a3)  {\n\n  typedef void (*shmem_longlong_wait_until_t)(long long * a1, int a2, long long a3);\n  static shmem_longlong_wait_until_t shmem_longlong_wait_until_handle = (shmem_longlong_wait_until_t)NULL;\n  if (!shmem_longlong_wait_until_handle) {\n    shmem_longlong_wait_until_handle = get_function_handle(\"shmem_longlong_wait_until\");\n  }\n\n  shmem_longlong_wait_until_handle ( a1,  a2,  a3);\n\n}\n\nextern void  shmem_longlong_wait_until(long long * a1, int a2, long long a3) {\n   __wrap_shmem_longlong_wait_until(a1, a2, a3);\n}\n\n\n/**********************************************************\n   shmem_short_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_sum_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_sum_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_sum_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_sum_to_all_t shmem_short_sum_to_all_handle = (shmem_short_sum_to_all_t)NULL;\n  if (!shmem_short_sum_to_all_handle) {\n    shmem_short_sum_to_all_handle = get_function_handle(\"shmem_short_sum_to_all\");\n  }\n\n  shmem_short_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_sum_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_max_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_max_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_max_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_max_to_all_t shmem_short_max_to_all_handle = (shmem_short_max_to_all_t)NULL;\n  if (!shmem_short_max_to_all_handle) {\n    shmem_short_max_to_all_handle = get_function_handle(\"shmem_short_max_to_all\");\n  }\n\n  shmem_short_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_max_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_min_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_min_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_min_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_min_to_all_t shmem_short_min_to_all_handle = (shmem_short_min_to_all_t)NULL;\n  if (!shmem_short_min_to_all_handle) {\n    shmem_short_min_to_all_handle = get_function_handle(\"shmem_short_min_to_all\");\n  }\n\n  shmem_short_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_min_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_prod_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_prod_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_prod_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_prod_to_all_t shmem_short_prod_to_all_handle = (shmem_short_prod_to_all_t)NULL;\n  if (!shmem_short_prod_to_all_handle) {\n    shmem_short_prod_to_all_handle = get_function_handle(\"shmem_short_prod_to_all\");\n  }\n\n  shmem_short_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_prod_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_and_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_and_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_and_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_and_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_and_to_all_t shmem_short_and_to_all_handle = (shmem_short_and_to_all_t)NULL;\n  if (!shmem_short_and_to_all_handle) {\n    shmem_short_and_to_all_handle = get_function_handle(\"shmem_short_and_to_all\");\n  }\n\n  shmem_short_and_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_and_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_and_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_or_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_or_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_or_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_or_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_or_to_all_t shmem_short_or_to_all_handle = (shmem_short_or_to_all_t)NULL;\n  if (!shmem_short_or_to_all_handle) {\n    shmem_short_or_to_all_handle = get_function_handle(\"shmem_short_or_to_all\");\n  }\n\n  shmem_short_or_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_or_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_or_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_short_xor_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_short_xor_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) ;\nextern void  __real_shmem_short_xor_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8)  {\n\n  typedef void (*shmem_short_xor_to_all_t)(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8);\n  static shmem_short_xor_to_all_t shmem_short_xor_to_all_handle = (shmem_short_xor_to_all_t)NULL;\n  if (!shmem_short_xor_to_all_handle) {\n    shmem_short_xor_to_all_handle = get_function_handle(\"shmem_short_xor_to_all\");\n  }\n\n  shmem_short_xor_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_short_xor_to_all(short * a1, const short * a2, size_t a3, int a4, int a5, int a6, short * a7, long * a8) {\n   __wrap_shmem_short_xor_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_sum_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_sum_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_sum_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_sum_to_all_t shmem_int_sum_to_all_handle = (shmem_int_sum_to_all_t)NULL;\n  if (!shmem_int_sum_to_all_handle) {\n    shmem_int_sum_to_all_handle = get_function_handle(\"shmem_int_sum_to_all\");\n  }\n\n  shmem_int_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_sum_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_max_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_max_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_max_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_max_to_all_t shmem_int_max_to_all_handle = (shmem_int_max_to_all_t)NULL;\n  if (!shmem_int_max_to_all_handle) {\n    shmem_int_max_to_all_handle = get_function_handle(\"shmem_int_max_to_all\");\n  }\n\n  shmem_int_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_max_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_min_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_min_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_min_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_min_to_all_t shmem_int_min_to_all_handle = (shmem_int_min_to_all_t)NULL;\n  if (!shmem_int_min_to_all_handle) {\n    shmem_int_min_to_all_handle = get_function_handle(\"shmem_int_min_to_all\");\n  }\n\n  shmem_int_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_min_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_prod_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_prod_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_prod_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_prod_to_all_t shmem_int_prod_to_all_handle = (shmem_int_prod_to_all_t)NULL;\n  if (!shmem_int_prod_to_all_handle) {\n    shmem_int_prod_to_all_handle = get_function_handle(\"shmem_int_prod_to_all\");\n  }\n\n  shmem_int_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_prod_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_and_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_and_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_and_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_and_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_and_to_all_t shmem_int_and_to_all_handle = (shmem_int_and_to_all_t)NULL;\n  if (!shmem_int_and_to_all_handle) {\n    shmem_int_and_to_all_handle = get_function_handle(\"shmem_int_and_to_all\");\n  }\n\n  shmem_int_and_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_and_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_and_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_or_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_or_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_or_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_or_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_or_to_all_t shmem_int_or_to_all_handle = (shmem_int_or_to_all_t)NULL;\n  if (!shmem_int_or_to_all_handle) {\n    shmem_int_or_to_all_handle = get_function_handle(\"shmem_int_or_to_all\");\n  }\n\n  shmem_int_or_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_or_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_or_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_int_xor_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_int_xor_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) ;\nextern void  __real_shmem_int_xor_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8)  {\n\n  typedef void (*shmem_int_xor_to_all_t)(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8);\n  static shmem_int_xor_to_all_t shmem_int_xor_to_all_handle = (shmem_int_xor_to_all_t)NULL;\n  if (!shmem_int_xor_to_all_handle) {\n    shmem_int_xor_to_all_handle = get_function_handle(\"shmem_int_xor_to_all\");\n  }\n\n  shmem_int_xor_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_int_xor_to_all(int * a1, const int * a2, size_t a3, int a4, int a5, int a6, int * a7, long * a8) {\n   __wrap_shmem_int_xor_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_sum_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_sum_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_sum_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_sum_to_all_t shmem_long_sum_to_all_handle = (shmem_long_sum_to_all_t)NULL;\n  if (!shmem_long_sum_to_all_handle) {\n    shmem_long_sum_to_all_handle = get_function_handle(\"shmem_long_sum_to_all\");\n  }\n\n  shmem_long_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_sum_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_max_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_max_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_max_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_max_to_all_t shmem_long_max_to_all_handle = (shmem_long_max_to_all_t)NULL;\n  if (!shmem_long_max_to_all_handle) {\n    shmem_long_max_to_all_handle = get_function_handle(\"shmem_long_max_to_all\");\n  }\n\n  shmem_long_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_max_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_min_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_min_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_min_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_min_to_all_t shmem_long_min_to_all_handle = (shmem_long_min_to_all_t)NULL;\n  if (!shmem_long_min_to_all_handle) {\n    shmem_long_min_to_all_handle = get_function_handle(\"shmem_long_min_to_all\");\n  }\n\n  shmem_long_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_min_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_prod_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_prod_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_prod_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_prod_to_all_t shmem_long_prod_to_all_handle = (shmem_long_prod_to_all_t)NULL;\n  if (!shmem_long_prod_to_all_handle) {\n    shmem_long_prod_to_all_handle = get_function_handle(\"shmem_long_prod_to_all\");\n  }\n\n  shmem_long_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_prod_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_and_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_and_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_and_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_and_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_and_to_all_t shmem_long_and_to_all_handle = (shmem_long_and_to_all_t)NULL;\n  if (!shmem_long_and_to_all_handle) {\n    shmem_long_and_to_all_handle = get_function_handle(\"shmem_long_and_to_all\");\n  }\n\n  shmem_long_and_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_and_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_and_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_or_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_or_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_or_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_or_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_or_to_all_t shmem_long_or_to_all_handle = (shmem_long_or_to_all_t)NULL;\n  if (!shmem_long_or_to_all_handle) {\n    shmem_long_or_to_all_handle = get_function_handle(\"shmem_long_or_to_all\");\n  }\n\n  shmem_long_or_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_or_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_or_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_long_xor_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_long_xor_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) ;\nextern void  __real_shmem_long_xor_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8)  {\n\n  typedef void (*shmem_long_xor_to_all_t)(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8);\n  static shmem_long_xor_to_all_t shmem_long_xor_to_all_handle = (shmem_long_xor_to_all_t)NULL;\n  if (!shmem_long_xor_to_all_handle) {\n    shmem_long_xor_to_all_handle = get_function_handle(\"shmem_long_xor_to_all\");\n  }\n\n  shmem_long_xor_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_long_xor_to_all(long * a1, const long * a2, size_t a3, int a4, int a5, int a6, long * a7, long * a8) {\n   __wrap_shmem_long_xor_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_sum_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_sum_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_sum_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_sum_to_all_t shmem_longlong_sum_to_all_handle = (shmem_longlong_sum_to_all_t)NULL;\n  if (!shmem_longlong_sum_to_all_handle) {\n    shmem_longlong_sum_to_all_handle = get_function_handle(\"shmem_longlong_sum_to_all\");\n  }\n\n  shmem_longlong_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_sum_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_max_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_max_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_max_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_max_to_all_t shmem_longlong_max_to_all_handle = (shmem_longlong_max_to_all_t)NULL;\n  if (!shmem_longlong_max_to_all_handle) {\n    shmem_longlong_max_to_all_handle = get_function_handle(\"shmem_longlong_max_to_all\");\n  }\n\n  shmem_longlong_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_max_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_min_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_min_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_min_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_min_to_all_t shmem_longlong_min_to_all_handle = (shmem_longlong_min_to_all_t)NULL;\n  if (!shmem_longlong_min_to_all_handle) {\n    shmem_longlong_min_to_all_handle = get_function_handle(\"shmem_longlong_min_to_all\");\n  }\n\n  shmem_longlong_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_min_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_prod_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_prod_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_prod_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_prod_to_all_t shmem_longlong_prod_to_all_handle = (shmem_longlong_prod_to_all_t)NULL;\n  if (!shmem_longlong_prod_to_all_handle) {\n    shmem_longlong_prod_to_all_handle = get_function_handle(\"shmem_longlong_prod_to_all\");\n  }\n\n  shmem_longlong_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_prod_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_and_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_and_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_and_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_and_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_and_to_all_t shmem_longlong_and_to_all_handle = (shmem_longlong_and_to_all_t)NULL;\n  if (!shmem_longlong_and_to_all_handle) {\n    shmem_longlong_and_to_all_handle = get_function_handle(\"shmem_longlong_and_to_all\");\n  }\n\n  shmem_longlong_and_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_and_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_and_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_or_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_or_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_or_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_or_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_or_to_all_t shmem_longlong_or_to_all_handle = (shmem_longlong_or_to_all_t)NULL;\n  if (!shmem_longlong_or_to_all_handle) {\n    shmem_longlong_or_to_all_handle = get_function_handle(\"shmem_longlong_or_to_all\");\n  }\n\n  shmem_longlong_or_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_or_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_or_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_longlong_xor_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_longlong_xor_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) ;\nextern void  __real_shmem_longlong_xor_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8)  {\n\n  typedef void (*shmem_longlong_xor_to_all_t)(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8);\n  static shmem_longlong_xor_to_all_t shmem_longlong_xor_to_all_handle = (shmem_longlong_xor_to_all_t)NULL;\n  if (!shmem_longlong_xor_to_all_handle) {\n    shmem_longlong_xor_to_all_handle = get_function_handle(\"shmem_longlong_xor_to_all\");\n  }\n\n  shmem_longlong_xor_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_longlong_xor_to_all(long long * a1, const long long * a2, size_t a3, int a4, int a5, int a6, long long * a7, long * a8) {\n   __wrap_shmem_longlong_xor_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float_sum_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) ;\nextern void  __real_shmem_float_sum_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8)  {\n\n  typedef void (*shmem_float_sum_to_all_t)(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8);\n  static shmem_float_sum_to_all_t shmem_float_sum_to_all_handle = (shmem_float_sum_to_all_t)NULL;\n  if (!shmem_float_sum_to_all_handle) {\n    shmem_float_sum_to_all_handle = get_function_handle(\"shmem_float_sum_to_all\");\n  }\n\n  shmem_float_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float_sum_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) {\n   __wrap_shmem_float_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float_max_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) ;\nextern void  __real_shmem_float_max_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8)  {\n\n  typedef void (*shmem_float_max_to_all_t)(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8);\n  static shmem_float_max_to_all_t shmem_float_max_to_all_handle = (shmem_float_max_to_all_t)NULL;\n  if (!shmem_float_max_to_all_handle) {\n    shmem_float_max_to_all_handle = get_function_handle(\"shmem_float_max_to_all\");\n  }\n\n  shmem_float_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float_max_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) {\n   __wrap_shmem_float_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float_min_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) ;\nextern void  __real_shmem_float_min_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8)  {\n\n  typedef void (*shmem_float_min_to_all_t)(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8);\n  static shmem_float_min_to_all_t shmem_float_min_to_all_handle = (shmem_float_min_to_all_t)NULL;\n  if (!shmem_float_min_to_all_handle) {\n    shmem_float_min_to_all_handle = get_function_handle(\"shmem_float_min_to_all\");\n  }\n\n  shmem_float_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float_min_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) {\n   __wrap_shmem_float_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float_prod_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) ;\nextern void  __real_shmem_float_prod_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8)  {\n\n  typedef void (*shmem_float_prod_to_all_t)(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8);\n  static shmem_float_prod_to_all_t shmem_float_prod_to_all_handle = (shmem_float_prod_to_all_t)NULL;\n  if (!shmem_float_prod_to_all_handle) {\n    shmem_float_prod_to_all_handle = get_function_handle(\"shmem_float_prod_to_all\");\n  }\n\n  shmem_float_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float_prod_to_all(float * a1, const float * a2, size_t a3, int a4, int a5, int a6, float * a7, long * a8) {\n   __wrap_shmem_float_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_double_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_double_sum_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) ;\nextern void  __real_shmem_double_sum_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8)  {\n\n  typedef void (*shmem_double_sum_to_all_t)(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8);\n  static shmem_double_sum_to_all_t shmem_double_sum_to_all_handle = (shmem_double_sum_to_all_t)NULL;\n  if (!shmem_double_sum_to_all_handle) {\n    shmem_double_sum_to_all_handle = get_function_handle(\"shmem_double_sum_to_all\");\n  }\n\n  shmem_double_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_double_sum_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) {\n   __wrap_shmem_double_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_double_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_double_max_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) ;\nextern void  __real_shmem_double_max_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8)  {\n\n  typedef void (*shmem_double_max_to_all_t)(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8);\n  static shmem_double_max_to_all_t shmem_double_max_to_all_handle = (shmem_double_max_to_all_t)NULL;\n  if (!shmem_double_max_to_all_handle) {\n    shmem_double_max_to_all_handle = get_function_handle(\"shmem_double_max_to_all\");\n  }\n\n  shmem_double_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_double_max_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) {\n   __wrap_shmem_double_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_double_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_double_min_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) ;\nextern void  __real_shmem_double_min_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8)  {\n\n  typedef void (*shmem_double_min_to_all_t)(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8);\n  static shmem_double_min_to_all_t shmem_double_min_to_all_handle = (shmem_double_min_to_all_t)NULL;\n  if (!shmem_double_min_to_all_handle) {\n    shmem_double_min_to_all_handle = get_function_handle(\"shmem_double_min_to_all\");\n  }\n\n  shmem_double_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_double_min_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) {\n   __wrap_shmem_double_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_double_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_double_prod_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) ;\nextern void  __real_shmem_double_prod_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8)  {\n\n  typedef void (*shmem_double_prod_to_all_t)(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8);\n  static shmem_double_prod_to_all_t shmem_double_prod_to_all_handle = (shmem_double_prod_to_all_t)NULL;\n  if (!shmem_double_prod_to_all_handle) {\n    shmem_double_prod_to_all_handle = get_function_handle(\"shmem_double_prod_to_all\");\n  }\n\n  shmem_double_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_double_prod_to_all(double * a1, const double * a2, size_t a3, int a4, int a5, int a6, double * a7, long * a8) {\n   __wrap_shmem_double_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_ld80_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_ld80_sum_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) ;\nextern void  __real_shmem_ld80_sum_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8)  {\n\n  typedef void (*shmem_ld80_sum_to_all_t)(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8);\n  static shmem_ld80_sum_to_all_t shmem_ld80_sum_to_all_handle = (shmem_ld80_sum_to_all_t)NULL;\n  if (!shmem_ld80_sum_to_all_handle) {\n    shmem_ld80_sum_to_all_handle = get_function_handle(\"shmem_ld80_sum_to_all\");\n  }\n\n  shmem_ld80_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_ld80_sum_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) {\n   __wrap_shmem_ld80_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_ld80_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_ld80_max_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) ;\nextern void  __real_shmem_ld80_max_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8)  {\n\n  typedef void (*shmem_ld80_max_to_all_t)(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8);\n  static shmem_ld80_max_to_all_t shmem_ld80_max_to_all_handle = (shmem_ld80_max_to_all_t)NULL;\n  if (!shmem_ld80_max_to_all_handle) {\n    shmem_ld80_max_to_all_handle = get_function_handle(\"shmem_ld80_max_to_all\");\n  }\n\n  shmem_ld80_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_ld80_max_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) {\n   __wrap_shmem_ld80_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_ld80_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_ld80_min_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) ;\nextern void  __real_shmem_ld80_min_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8)  {\n\n  typedef void (*shmem_ld80_min_to_all_t)(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8);\n  static shmem_ld80_min_to_all_t shmem_ld80_min_to_all_handle = (shmem_ld80_min_to_all_t)NULL;\n  if (!shmem_ld80_min_to_all_handle) {\n    shmem_ld80_min_to_all_handle = get_function_handle(\"shmem_ld80_min_to_all\");\n  }\n\n  shmem_ld80_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_ld80_min_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) {\n   __wrap_shmem_ld80_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_ld80_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_ld80_prod_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) ;\nextern void  __real_shmem_ld80_prod_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8)  {\n\n  typedef void (*shmem_ld80_prod_to_all_t)(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8);\n  static shmem_ld80_prod_to_all_t shmem_ld80_prod_to_all_handle = (shmem_ld80_prod_to_all_t)NULL;\n  if (!shmem_ld80_prod_to_all_handle) {\n    shmem_ld80_prod_to_all_handle = get_function_handle(\"shmem_ld80_prod_to_all\");\n  }\n\n  shmem_ld80_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_ld80_prod_to_all(long double * a1, const long double * a2, size_t a3, int a4, int a5, int a6, long double * a7, long * a8) {\n   __wrap_shmem_ld80_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float128_sum_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float128_sum_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) ;\nextern void  __real_shmem_float128_sum_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8)  {\n\n  typedef void (*shmem_float128_sum_to_all_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8);\n  static shmem_float128_sum_to_all_t shmem_float128_sum_to_all_handle = (shmem_float128_sum_to_all_t)NULL;\n  if (!shmem_float128_sum_to_all_handle) {\n    shmem_float128_sum_to_all_handle = get_function_handle(\"shmem_float128_sum_to_all\");\n  }\n\n  shmem_float128_sum_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float128_sum_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) {\n   __wrap_shmem_float128_sum_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float128_max_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float128_max_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) ;\nextern void  __real_shmem_float128_max_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8)  {\n\n  typedef void (*shmem_float128_max_to_all_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8);\n  static shmem_float128_max_to_all_t shmem_float128_max_to_all_handle = (shmem_float128_max_to_all_t)NULL;\n  if (!shmem_float128_max_to_all_handle) {\n    shmem_float128_max_to_all_handle = get_function_handle(\"shmem_float128_max_to_all\");\n  }\n\n  shmem_float128_max_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float128_max_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) {\n   __wrap_shmem_float128_max_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float128_min_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float128_min_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) ;\nextern void  __real_shmem_float128_min_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8)  {\n\n  typedef void (*shmem_float128_min_to_all_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8);\n  static shmem_float128_min_to_all_t shmem_float128_min_to_all_handle = (shmem_float128_min_to_all_t)NULL;\n  if (!shmem_float128_min_to_all_handle) {\n    shmem_float128_min_to_all_handle = get_function_handle(\"shmem_float128_min_to_all\");\n  }\n\n  shmem_float128_min_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float128_min_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) {\n   __wrap_shmem_float128_min_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_float128_prod_to_all\n **********************************************************/\n\nextern void  __wrap_shmem_float128_prod_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) ;\nextern void  __real_shmem_float128_prod_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8)  {\n\n  typedef void (*shmem_float128_prod_to_all_t)(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8);\n  static shmem_float128_prod_to_all_t shmem_float128_prod_to_all_handle = (shmem_float128_prod_to_all_t)NULL;\n  if (!shmem_float128_prod_to_all_handle) {\n    shmem_float128_prod_to_all_handle = get_function_handle(\"shmem_float128_prod_to_all\");\n  }\n\n  shmem_float128_prod_to_all_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_float128_prod_to_all(__float128 * a1, const __float128 * a2, size_t a3, int a4, int a5, int a6, __float128 * a7, long * a8) {\n   __wrap_shmem_float128_prod_to_all(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_broadcast32\n **********************************************************/\n\nextern void  __wrap_shmem_broadcast32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8) ;\nextern void  __real_shmem_broadcast32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8)  {\n\n  typedef void (*shmem_broadcast32_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8);\n  static shmem_broadcast32_t shmem_broadcast32_handle = (shmem_broadcast32_t)NULL;\n  if (!shmem_broadcast32_handle) {\n    shmem_broadcast32_handle = get_function_handle(\"shmem_broadcast32\");\n  }\n\n  shmem_broadcast32_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_broadcast32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8) {\n   __wrap_shmem_broadcast32(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_broadcast64\n **********************************************************/\n\nextern void  __wrap_shmem_broadcast64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8) ;\nextern void  __real_shmem_broadcast64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8)  {\n\n  typedef void (*shmem_broadcast64_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8);\n  static shmem_broadcast64_t shmem_broadcast64_handle = (shmem_broadcast64_t)NULL;\n  if (!shmem_broadcast64_handle) {\n    shmem_broadcast64_handle = get_function_handle(\"shmem_broadcast64\");\n  }\n\n  shmem_broadcast64_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_broadcast64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, int a7, long * a8) {\n   __wrap_shmem_broadcast64(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_alltoall\n **********************************************************/\n\nextern void  __wrap_shmem_alltoall(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_alltoall(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_alltoall_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_alltoall_t shmem_alltoall_handle = (shmem_alltoall_t)NULL;\n  if (!shmem_alltoall_handle) {\n    shmem_alltoall_handle = get_function_handle(\"shmem_alltoall\");\n  }\n\n  shmem_alltoall_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_alltoall(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_alltoall(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_alltoall32\n **********************************************************/\n\nextern void  __wrap_shmem_alltoall32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_alltoall32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_alltoall32_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_alltoall32_t shmem_alltoall32_handle = (shmem_alltoall32_t)NULL;\n  if (!shmem_alltoall32_handle) {\n    shmem_alltoall32_handle = get_function_handle(\"shmem_alltoall32\");\n  }\n\n  shmem_alltoall32_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_alltoall32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_alltoall32(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_alltoall64\n **********************************************************/\n\nextern void  __wrap_shmem_alltoall64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_alltoall64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_alltoall64_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_alltoall64_t shmem_alltoall64_handle = (shmem_alltoall64_t)NULL;\n  if (!shmem_alltoall64_handle) {\n    shmem_alltoall64_handle = get_function_handle(\"shmem_alltoall64\");\n  }\n\n  shmem_alltoall64_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_alltoall64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_alltoall64(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_team_alltoall\n **********************************************************/\n\nextern void  __wrap_shmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5) ;\nextern void  __real_shmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5)  {\n\n  typedef void (*shmem_team_alltoall_t)(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5);\n  static shmem_team_alltoall_t shmem_team_alltoall_handle = (shmem_team_alltoall_t)NULL;\n  if (!shmem_team_alltoall_handle) {\n    shmem_team_alltoall_handle = get_function_handle(\"shmem_team_alltoall\");\n  }\n\n  shmem_team_alltoall_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  shmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5) {\n   __wrap_shmem_team_alltoall(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   pshmem_team_alltoall\n **********************************************************/\n\nextern void  __wrap_pshmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5) ;\nextern void  __real_pshmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5)  {\n\n  typedef void (*pshmem_team_alltoall_t)(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5);\n  static pshmem_team_alltoall_t pshmem_team_alltoall_handle = (pshmem_team_alltoall_t)NULL;\n  if (!pshmem_team_alltoall_handle) {\n    pshmem_team_alltoall_handle = get_function_handle(\"pshmem_team_alltoall\");\n  }\n\n  pshmem_team_alltoall_handle ( a1,  a2,  a3,  a4,  a5);\n\n}\n\nextern void  pshmem_team_alltoall(void * a1, const void * a2, size_t a3, shmem_team_t a4, long * a5) {\n   __wrap_pshmem_team_alltoall(a1, a2, a3, a4, a5);\n}\n\n\n/**********************************************************\n   shmem_alltoalls32\n **********************************************************/\n\nextern void  __wrap_shmem_alltoalls32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9) ;\nextern void  __real_shmem_alltoalls32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9)  {\n\n  typedef void (*shmem_alltoalls32_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9);\n  static shmem_alltoalls32_t shmem_alltoalls32_handle = (shmem_alltoalls32_t)NULL;\n  if (!shmem_alltoalls32_handle) {\n    shmem_alltoalls32_handle = get_function_handle(\"shmem_alltoalls32\");\n  }\n\n  shmem_alltoalls32_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n\n}\n\nextern void  shmem_alltoalls32(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9) {\n   __wrap_shmem_alltoalls32(a1, a2, a3, a4, a5, a6, a7, a8, a9);\n}\n\n\n/**********************************************************\n   shmem_alltoalls64\n **********************************************************/\n\nextern void  __wrap_shmem_alltoalls64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9) ;\nextern void  __real_shmem_alltoalls64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9)  {\n\n  typedef void (*shmem_alltoalls64_t)(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9);\n  static shmem_alltoalls64_t shmem_alltoalls64_handle = (shmem_alltoalls64_t)NULL;\n  if (!shmem_alltoalls64_handle) {\n    shmem_alltoalls64_handle = get_function_handle(\"shmem_alltoalls64\");\n  }\n\n  shmem_alltoalls64_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n\n}\n\nextern void  shmem_alltoalls64(void * a1, const void * a2, ptrdiff_t a3, ptrdiff_t a4, size_t a5, int a6, int a7, int a8, long * a9) {\n   __wrap_shmem_alltoalls64(a1, a2, a3, a4, a5, a6, a7, a8, a9);\n}\n\n\n/**********************************************************\n   shmem_alltoallv\n **********************************************************/\n\nextern void  __wrap_shmem_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10) ;\nextern void  __real_shmem_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10)  {\n\n  typedef void (*shmem_alltoallv_t)(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10);\n  static shmem_alltoallv_t shmem_alltoallv_handle = (shmem_alltoallv_t)NULL;\n  if (!shmem_alltoallv_handle) {\n    shmem_alltoallv_handle = get_function_handle(\"shmem_alltoallv\");\n  }\n\n  shmem_alltoallv_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);\n\n}\n\nextern void  shmem_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10) {\n   __wrap_shmem_alltoallv(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n}\n\n\n/**********************************************************\n   shmem_team_alltoallv\n **********************************************************/\n\nextern void  __wrap_shmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) ;\nextern void  __real_shmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8)  {\n\n  typedef void (*shmem_team_alltoallv_t)(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8);\n  static shmem_team_alltoallv_t shmem_team_alltoallv_handle = (shmem_team_alltoallv_t)NULL;\n  if (!shmem_team_alltoallv_handle) {\n    shmem_team_alltoallv_handle = get_function_handle(\"shmem_team_alltoallv\");\n  }\n\n  shmem_team_alltoallv_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) {\n   __wrap_shmem_team_alltoallv(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   pshmem_team_alltoallv\n **********************************************************/\n\nextern void  __wrap_pshmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) ;\nextern void  __real_pshmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8)  {\n\n  typedef void (*pshmem_team_alltoallv_t)(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8);\n  static pshmem_team_alltoallv_t pshmem_team_alltoallv_handle = (pshmem_team_alltoallv_t)NULL;\n  if (!pshmem_team_alltoallv_handle) {\n    pshmem_team_alltoallv_handle = get_function_handle(\"pshmem_team_alltoallv\");\n  }\n\n  pshmem_team_alltoallv_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  pshmem_team_alltoallv(void * a1, size_t * a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) {\n   __wrap_pshmem_team_alltoallv(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_alltoallv_packed\n **********************************************************/\n\nextern void  __wrap_shmem_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10) ;\nextern void  __real_shmem_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10)  {\n\n  typedef void (*shmem_alltoallv_packed_t)(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10);\n  static shmem_alltoallv_packed_t shmem_alltoallv_packed_handle = (shmem_alltoallv_packed_t)NULL;\n  if (!shmem_alltoallv_packed_handle) {\n    shmem_alltoallv_packed_handle = get_function_handle(\"shmem_alltoallv_packed\");\n  }\n\n  shmem_alltoallv_packed_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);\n\n}\n\nextern void  shmem_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, int a7, int a8, int a9, long * a10) {\n   __wrap_shmem_alltoallv_packed(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n}\n\n\n/**********************************************************\n   shmem_team_alltoallv_packed\n **********************************************************/\n\nextern void  __wrap_shmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) ;\nextern void  __real_shmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8)  {\n\n  typedef void (*shmem_team_alltoallv_packed_t)(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8);\n  static shmem_team_alltoallv_packed_t shmem_team_alltoallv_packed_handle = (shmem_team_alltoallv_packed_t)NULL;\n  if (!shmem_team_alltoallv_packed_handle) {\n    shmem_team_alltoallv_packed_handle = get_function_handle(\"shmem_team_alltoallv_packed\");\n  }\n\n  shmem_team_alltoallv_packed_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  shmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) {\n   __wrap_shmem_team_alltoallv_packed(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   pshmem_team_alltoallv_packed\n **********************************************************/\n\nextern void  __wrap_pshmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) ;\nextern void  __real_pshmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8)  {\n\n  typedef void (*pshmem_team_alltoallv_packed_t)(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8);\n  static pshmem_team_alltoallv_packed_t pshmem_team_alltoallv_packed_handle = (pshmem_team_alltoallv_packed_t)NULL;\n  if (!pshmem_team_alltoallv_packed_handle) {\n    pshmem_team_alltoallv_packed_handle = get_function_handle(\"pshmem_team_alltoallv_packed\");\n  }\n\n  pshmem_team_alltoallv_packed_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n\n}\n\nextern void  pshmem_team_alltoallv_packed(void * a1, size_t a2, size_t * a3, const void * a4, size_t * a5, size_t * a6, shmem_team_t a7, long * a8) {\n   __wrap_pshmem_team_alltoallv_packed(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n\n\n/**********************************************************\n   shmem_collect32\n **********************************************************/\n\nextern void  __wrap_shmem_collect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_collect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_collect32_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_collect32_t shmem_collect32_handle = (shmem_collect32_t)NULL;\n  if (!shmem_collect32_handle) {\n    shmem_collect32_handle = get_function_handle(\"shmem_collect32\");\n  }\n\n  shmem_collect32_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_collect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_collect32(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_collect64\n **********************************************************/\n\nextern void  __wrap_shmem_collect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_collect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_collect64_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_collect64_t shmem_collect64_handle = (shmem_collect64_t)NULL;\n  if (!shmem_collect64_handle) {\n    shmem_collect64_handle = get_function_handle(\"shmem_collect64\");\n  }\n\n  shmem_collect64_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_collect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_collect64(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_fcollect32\n **********************************************************/\n\nextern void  __wrap_shmem_fcollect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_fcollect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_fcollect32_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_fcollect32_t shmem_fcollect32_handle = (shmem_fcollect32_t)NULL;\n  if (!shmem_fcollect32_handle) {\n    shmem_fcollect32_handle = get_function_handle(\"shmem_fcollect32\");\n  }\n\n  shmem_fcollect32_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_fcollect32(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_fcollect32(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_fcollect64\n **********************************************************/\n\nextern void  __wrap_shmem_fcollect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) ;\nextern void  __real_shmem_fcollect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7)  {\n\n  typedef void (*shmem_fcollect64_t)(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7);\n  static shmem_fcollect64_t shmem_fcollect64_handle = (shmem_fcollect64_t)NULL;\n  if (!shmem_fcollect64_handle) {\n    shmem_fcollect64_handle = get_function_handle(\"shmem_fcollect64\");\n  }\n\n  shmem_fcollect64_handle ( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n\n}\n\nextern void  shmem_fcollect64(void * a1, const void * a2, size_t a3, int a4, int a5, int a6, long * a7) {\n   __wrap_shmem_fcollect64(a1, a2, a3, a4, a5, a6, a7);\n}\n\n\n/**********************************************************\n   shmem_team_split\n **********************************************************/\n\nextern void  __wrap_shmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4) ;\nextern void  __real_shmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4)  {\n\n  typedef void (*shmem_team_split_t)(shmem_team_t a1, int a2, int a3, shmem_team_t * a4);\n  static shmem_team_split_t shmem_team_split_handle = (shmem_team_split_t)NULL;\n  if (!shmem_team_split_handle) {\n    shmem_team_split_handle = get_function_handle(\"shmem_team_split\");\n  }\n\n  shmem_team_split_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4) {\n   __wrap_shmem_team_split(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   pshmem_team_split\n **********************************************************/\n\nextern void  __wrap_pshmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4) ;\nextern void  __real_pshmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4)  {\n\n  typedef void (*pshmem_team_split_t)(shmem_team_t a1, int a2, int a3, shmem_team_t * a4);\n  static pshmem_team_split_t pshmem_team_split_handle = (pshmem_team_split_t)NULL;\n  if (!pshmem_team_split_handle) {\n    pshmem_team_split_handle = get_function_handle(\"pshmem_team_split\");\n  }\n\n  pshmem_team_split_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  pshmem_team_split(shmem_team_t a1, int a2, int a3, shmem_team_t * a4) {\n   __wrap_pshmem_team_split(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_team_create_strided\n **********************************************************/\n\nextern void  __wrap_shmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4) ;\nextern void  __real_shmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4)  {\n\n  typedef void (*shmem_team_create_strided_t)(int a1, int a2, int a3, shmem_team_t * a4);\n  static shmem_team_create_strided_t shmem_team_create_strided_handle = (shmem_team_create_strided_t)NULL;\n  if (!shmem_team_create_strided_handle) {\n    shmem_team_create_strided_handle = get_function_handle(\"shmem_team_create_strided\");\n  }\n\n  shmem_team_create_strided_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  shmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4) {\n   __wrap_shmem_team_create_strided(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   pshmem_team_create_strided\n **********************************************************/\n\nextern void  __wrap_pshmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4) ;\nextern void  __real_pshmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4)  {\n\n  typedef void (*pshmem_team_create_strided_t)(int a1, int a2, int a3, shmem_team_t * a4);\n  static pshmem_team_create_strided_t pshmem_team_create_strided_handle = (pshmem_team_create_strided_t)NULL;\n  if (!pshmem_team_create_strided_handle) {\n    pshmem_team_create_strided_handle = get_function_handle(\"pshmem_team_create_strided\");\n  }\n\n  pshmem_team_create_strided_handle ( a1,  a2,  a3,  a4);\n\n}\n\nextern void  pshmem_team_create_strided(int a1, int a2, int a3, shmem_team_t * a4) {\n   __wrap_pshmem_team_create_strided(a1, a2, a3, a4);\n}\n\n\n/**********************************************************\n   shmem_team_free\n **********************************************************/\n\nextern void  __wrap_shmem_team_free(shmem_team_t * a1) ;\nextern void  __real_shmem_team_free(shmem_team_t * a1)  {\n\n  typedef void (*shmem_team_free_t)(shmem_team_t * a1);\n  static shmem_team_free_t shmem_team_free_handle = (shmem_team_free_t)NULL;\n  if (!shmem_team_free_handle) {\n    shmem_team_free_handle = get_function_handle(\"shmem_team_free\");\n  }\n\n  shmem_team_free_handle ( a1);\n\n}\n\nextern void  shmem_team_free(shmem_team_t * a1) {\n   __wrap_shmem_team_free(a1);\n}\n\n\n/**********************************************************\n   shmem_team_npes\n **********************************************************/\n\nextern int  __wrap_shmem_team_npes(shmem_team_t a1) ;\nextern int  __real_shmem_team_npes(shmem_team_t a1)  {\n\n  int retval;\n  typedef int (*shmem_team_npes_t)(shmem_team_t a1);\n  static shmem_team_npes_t shmem_team_npes_handle = (shmem_team_npes_t)NULL;\n  if (!shmem_team_npes_handle) {\n    shmem_team_npes_handle = get_function_handle(\"shmem_team_npes\");\n  }\n\n  retval  =  shmem_team_npes_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_team_npes(shmem_team_t a1) {\n   __wrap_shmem_team_npes(a1);\n}\n\n\n/**********************************************************\n   shmem_team_mype\n **********************************************************/\n\nextern int  __wrap_shmem_team_mype(shmem_team_t a1) ;\nextern int  __real_shmem_team_mype(shmem_team_t a1)  {\n\n  int retval;\n  typedef int (*shmem_team_mype_t)(shmem_team_t a1);\n  static shmem_team_mype_t shmem_team_mype_handle = (shmem_team_mype_t)NULL;\n  if (!shmem_team_mype_handle) {\n    shmem_team_mype_handle = get_function_handle(\"shmem_team_mype\");\n  }\n\n  retval  =  shmem_team_mype_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_team_mype(shmem_team_t a1) {\n   __wrap_shmem_team_mype(a1);\n}\n\n\n/**********************************************************\n   shmem_team_translate_pe\n **********************************************************/\n\nextern int  __wrap_shmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3) ;\nextern int  __real_shmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3)  {\n\n  int retval;\n  typedef int (*shmem_team_translate_pe_t)(shmem_team_t a1, int a2, shmem_team_t a3);\n  static shmem_team_translate_pe_t shmem_team_translate_pe_handle = (shmem_team_translate_pe_t)NULL;\n  if (!shmem_team_translate_pe_handle) {\n    shmem_team_translate_pe_handle = get_function_handle(\"shmem_team_translate_pe\");\n  }\n\n  retval  =  shmem_team_translate_pe_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern int  shmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3) {\n   __wrap_shmem_team_translate_pe(a1, a2, a3);\n}\n\n\n/**********************************************************\n   pshmem_team_translate_pe\n **********************************************************/\n\nextern int  __wrap_pshmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3) ;\nextern int  __real_pshmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3)  {\n\n  int retval;\n  typedef int (*pshmem_team_translate_pe_t)(shmem_team_t a1, int a2, shmem_team_t a3);\n  static pshmem_team_translate_pe_t pshmem_team_translate_pe_handle = (pshmem_team_translate_pe_t)NULL;\n  if (!pshmem_team_translate_pe_handle) {\n    pshmem_team_translate_pe_handle = get_function_handle(\"pshmem_team_translate_pe\");\n  }\n\n  retval  =  pshmem_team_translate_pe_handle ( a1,  a2,  a3);\n  return retval;\n\n}\n\nextern int  pshmem_team_translate_pe(shmem_team_t a1, int a2, shmem_team_t a3) {\n   __wrap_pshmem_team_translate_pe(a1, a2, a3);\n}\n\n\n/**********************************************************\n   start_pes\n **********************************************************/\n\nextern void  __wrap_start_pes(int a1) ;\nextern void  __real_start_pes(int a1)  {\n\n  typedef void (*start_pes_t)(int a1);\n  static start_pes_t start_pes_handle = (start_pes_t)NULL;\n  if (!start_pes_handle) {\n    start_pes_handle = get_function_handle(\"start_pes\");\n  }\n\n  start_pes_handle ( a1);\n\n}\n\nextern void  start_pes(int a1) {\n   __wrap_start_pes(a1);\n}\n\n\n/**********************************************************\n   shmem_init\n **********************************************************/\n\nextern void  __wrap_shmem_init() ;\nextern void  __real_shmem_init()  {\n\n  typedef void (*shmem_init_t)();\n  static shmem_init_t shmem_init_handle = (shmem_init_t)NULL;\n  if (!shmem_init_handle) {\n    shmem_init_handle = get_function_handle(\"shmem_init\");\n  }\n\n  shmem_init_handle ();\n\n}\n\nextern void  shmem_init() {\n   __wrap_shmem_init();\n}\n\n\n/**********************************************************\n   shmem_finalize\n **********************************************************/\n\nextern void  __wrap_shmem_finalize() ;\nextern void  __real_shmem_finalize()  {\n\n  typedef void (*shmem_finalize_t)();\n  static shmem_finalize_t shmem_finalize_handle = (shmem_finalize_t)NULL;\n  if (!shmem_finalize_handle) {\n    shmem_finalize_handle = get_function_handle(\"shmem_finalize\");\n  }\n\n  shmem_finalize_handle ();\n\n}\n\nextern void  shmem_finalize() {\n   __wrap_shmem_finalize();\n}\n\n\n/**********************************************************\n   shmem_global_exit\n **********************************************************/\n\nextern void  __wrap_shmem_global_exit(int a1) ;\nextern void  __real_shmem_global_exit(int a1)  {\n\n  typedef void (*shmem_global_exit_t)(int a1);\n  static shmem_global_exit_t shmem_global_exit_handle = (shmem_global_exit_t)NULL;\n  if (!shmem_global_exit_handle) {\n    shmem_global_exit_handle = get_function_handle(\"shmem_global_exit\");\n  }\n\n  shmem_global_exit_handle ( a1);\n\n}\n\nextern void  shmem_global_exit(int a1) {\n   __wrap_shmem_global_exit(a1);\n}\n\n\n/**********************************************************\n   _num_pes\n **********************************************************/\n\nextern int  __wrap__num_pes() ;\nextern int  __real__num_pes()  {\n\n  int retval;\n  typedef int (*_num_pes_t)();\n  static _num_pes_t _num_pes_handle = (_num_pes_t)NULL;\n  if (!_num_pes_handle) {\n    _num_pes_handle = get_function_handle(\"_num_pes\");\n  }\n\n  retval  =  _num_pes_handle ();\n  return retval;\n\n}\n\nextern int  _num_pes() {\n   __wrap__num_pes();\n}\n\n\n/**********************************************************\n   shmem_n_pes\n **********************************************************/\n\nextern int  __wrap_shmem_n_pes() ;\nextern int  __real_shmem_n_pes()  {\n\n  int retval;\n  typedef int (*shmem_n_pes_t)();\n  static shmem_n_pes_t shmem_n_pes_handle = (shmem_n_pes_t)NULL;\n  if (!shmem_n_pes_handle) {\n    shmem_n_pes_handle = get_function_handle(\"shmem_n_pes\");\n  }\n\n  retval  =  shmem_n_pes_handle ();\n  return retval;\n\n}\n\nextern int  shmem_n_pes() {\n   __wrap_shmem_n_pes();\n}\n\n\n/**********************************************************\n   _my_pe\n **********************************************************/\n\nextern int  __wrap__my_pe() ;\nextern int  __real__my_pe()  {\n\n  int retval;\n  typedef int (*_my_pe_t)();\n  static _my_pe_t _my_pe_handle = (_my_pe_t)NULL;\n  if (!_my_pe_handle) {\n    _my_pe_handle = get_function_handle(\"_my_pe\");\n  }\n\n  retval  =  _my_pe_handle ();\n  return retval;\n\n}\n\nextern int  _my_pe() {\n   __wrap__my_pe();\n}\n\n\n/**********************************************************\n   shmem_my_pe\n **********************************************************/\n\nextern int  __wrap_shmem_my_pe() ;\nextern int  __real_shmem_my_pe()  {\n\n  int retval;\n  typedef int (*shmem_my_pe_t)();\n  static shmem_my_pe_t shmem_my_pe_handle = (shmem_my_pe_t)NULL;\n  if (!shmem_my_pe_handle) {\n    shmem_my_pe_handle = get_function_handle(\"shmem_my_pe\");\n  }\n\n  retval  =  shmem_my_pe_handle ();\n  return retval;\n\n}\n\nextern int  shmem_my_pe() {\n   __wrap_shmem_my_pe();\n}\n\n\n/**********************************************************\n   shmem_pe_accessible\n **********************************************************/\n\nextern int  __wrap_shmem_pe_accessible(int a1) ;\nextern int  __real_shmem_pe_accessible(int a1)  {\n\n  int retval;\n  typedef int (*shmem_pe_accessible_t)(int a1);\n  static shmem_pe_accessible_t shmem_pe_accessible_handle = (shmem_pe_accessible_t)NULL;\n  if (!shmem_pe_accessible_handle) {\n    shmem_pe_accessible_handle = get_function_handle(\"shmem_pe_accessible\");\n  }\n\n  retval  =  shmem_pe_accessible_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_pe_accessible(int a1) {\n   __wrap_shmem_pe_accessible(a1);\n}\n\n\n/**********************************************************\n   shmem_addr_accessible\n **********************************************************/\n\nextern int  __wrap_shmem_addr_accessible(void * a1, int a2) ;\nextern int  __real_shmem_addr_accessible(void * a1, int a2)  {\n\n  int retval;\n  typedef int (*shmem_addr_accessible_t)(void * a1, int a2);\n  static shmem_addr_accessible_t shmem_addr_accessible_handle = (shmem_addr_accessible_t)NULL;\n  if (!shmem_addr_accessible_handle) {\n    shmem_addr_accessible_handle = get_function_handle(\"shmem_addr_accessible\");\n  }\n\n  retval  =  shmem_addr_accessible_handle ( a1,  a2);\n  return retval;\n\n}\n\nextern int  shmem_addr_accessible(void * a1, int a2) {\n   __wrap_shmem_addr_accessible(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_init_thread\n **********************************************************/\n\nextern int  __wrap_shmem_init_thread(int a1) ;\nextern int  __real_shmem_init_thread(int a1)  {\n\n  int retval;\n  typedef int (*shmem_init_thread_t)(int a1);\n  static shmem_init_thread_t shmem_init_thread_handle = (shmem_init_thread_t)NULL;\n  if (!shmem_init_thread_handle) {\n    shmem_init_thread_handle = get_function_handle(\"shmem_init_thread\");\n  }\n\n  retval  =  shmem_init_thread_handle ( a1);\n  return retval;\n\n}\n\nextern int  shmem_init_thread(int a1) {\n   __wrap_shmem_init_thread(a1);\n}\n\n\n/**********************************************************\n   shmem_query_thread\n **********************************************************/\n\nextern int  __wrap_shmem_query_thread() ;\nextern int  __real_shmem_query_thread()  {\n\n  int retval;\n  typedef int (*shmem_query_thread_t)();\n  static shmem_query_thread_t shmem_query_thread_handle = (shmem_query_thread_t)NULL;\n  if (!shmem_query_thread_handle) {\n    shmem_query_thread_handle = get_function_handle(\"shmem_query_thread\");\n  }\n\n  retval  =  shmem_query_thread_handle ();\n  return retval;\n\n}\n\nextern int  shmem_query_thread() {\n   __wrap_shmem_query_thread();\n}\n\n\n/**********************************************************\n   shmem_thread_register\n **********************************************************/\n\nextern void  __wrap_shmem_thread_register() ;\nextern void  __real_shmem_thread_register()  {\n\n  typedef void (*shmem_thread_register_t)();\n  static shmem_thread_register_t shmem_thread_register_handle = (shmem_thread_register_t)NULL;\n  if (!shmem_thread_register_handle) {\n    shmem_thread_register_handle = get_function_handle(\"shmem_thread_register\");\n  }\n\n  shmem_thread_register_handle ();\n\n}\n\nextern void  shmem_thread_register() {\n   __wrap_shmem_thread_register();\n}\n\n\n/**********************************************************\n   shmem_thread_unregister\n **********************************************************/\n\nextern void  __wrap_shmem_thread_unregister() ;\nextern void  __real_shmem_thread_unregister()  {\n\n  typedef void (*shmem_thread_unregister_t)();\n  static shmem_thread_unregister_t shmem_thread_unregister_handle = (shmem_thread_unregister_t)NULL;\n  if (!shmem_thread_unregister_handle) {\n    shmem_thread_unregister_handle = get_function_handle(\"shmem_thread_unregister\");\n  }\n\n  shmem_thread_unregister_handle ();\n\n}\n\nextern void  shmem_thread_unregister() {\n   __wrap_shmem_thread_unregister();\n}\n\n\n/**********************************************************\n   shmem_thread_fence\n **********************************************************/\n\nextern void  __wrap_shmem_thread_fence() ;\nextern void  __real_shmem_thread_fence()  {\n\n  typedef void (*shmem_thread_fence_t)();\n  static shmem_thread_fence_t shmem_thread_fence_handle = (shmem_thread_fence_t)NULL;\n  if (!shmem_thread_fence_handle) {\n    shmem_thread_fence_handle = get_function_handle(\"shmem_thread_fence\");\n  }\n\n  shmem_thread_fence_handle ();\n\n}\n\nextern void  shmem_thread_fence() {\n   __wrap_shmem_thread_fence();\n}\n\n\n/**********************************************************\n   shmem_thread_quiet\n **********************************************************/\n\nextern void  __wrap_shmem_thread_quiet() ;\nextern void  __real_shmem_thread_quiet()  {\n\n  typedef void (*shmem_thread_quiet_t)();\n  static shmem_thread_quiet_t shmem_thread_quiet_handle = (shmem_thread_quiet_t)NULL;\n  if (!shmem_thread_quiet_handle) {\n    shmem_thread_quiet_handle = get_function_handle(\"shmem_thread_quiet\");\n  }\n\n  shmem_thread_quiet_handle ();\n\n}\n\nextern void  shmem_thread_quiet() {\n   __wrap_shmem_thread_quiet();\n}\n\n\n/**********************************************************\n   shmem_local_npes\n **********************************************************/\n\nextern int  __wrap_shmem_local_npes() ;\nextern int  __real_shmem_local_npes()  {\n\n  int retval;\n  typedef int (*shmem_local_npes_t)();\n  static shmem_local_npes_t shmem_local_npes_handle = (shmem_local_npes_t)NULL;\n  if (!shmem_local_npes_handle) {\n    shmem_local_npes_handle = get_function_handle(\"shmem_local_npes\");\n  }\n\n  retval  =  shmem_local_npes_handle ();\n  return retval;\n\n}\n\nextern int  shmem_local_npes() {\n   __wrap_shmem_local_npes();\n}\n\n\n/**********************************************************\n   shmem_local_pes\n **********************************************************/\n\nextern void  __wrap_shmem_local_pes(int * a1, int a2) ;\nextern void  __real_shmem_local_pes(int * a1, int a2)  {\n\n  typedef void (*shmem_local_pes_t)(int * a1, int a2);\n  static shmem_local_pes_t shmem_local_pes_handle = (shmem_local_pes_t)NULL;\n  if (!shmem_local_pes_handle) {\n    shmem_local_pes_handle = get_function_handle(\"shmem_local_pes\");\n  }\n\n  shmem_local_pes_handle ( a1,  a2);\n\n}\n\nextern void  shmem_local_pes(int * a1, int a2) {\n   __wrap_shmem_local_pes(a1, a2);\n}\n\n\n/**********************************************************\n   shmem_set_cache_inv\n **********************************************************/\n\nextern void  __wrap_shmem_set_cache_inv() ;\nextern void  __real_shmem_set_cache_inv()  {\n\n  typedef void (*shmem_set_cache_inv_t)();\n  static shmem_set_cache_inv_t shmem_set_cache_inv_handle = (shmem_set_cache_inv_t)NULL;\n  if (!shmem_set_cache_inv_handle) {\n    shmem_set_cache_inv_handle = get_function_handle(\"shmem_set_cache_inv\");\n  }\n\n  shmem_set_cache_inv_handle ();\n\n}\n\nextern void  shmem_set_cache_inv() {\n   __wrap_shmem_set_cache_inv();\n}\n\n\n/**********************************************************\n   shmem_set_cache_line_inv\n **********************************************************/\n\nextern void  __wrap_shmem_set_cache_line_inv(void * a1) ;\nextern void  __real_shmem_set_cache_line_inv(void * a1)  {\n\n  typedef void (*shmem_set_cache_line_inv_t)(void * a1);\n  static shmem_set_cache_line_inv_t shmem_set_cache_line_inv_handle = (shmem_set_cache_line_inv_t)NULL;\n  if (!shmem_set_cache_line_inv_handle) {\n    shmem_set_cache_line_inv_handle = get_function_handle(\"shmem_set_cache_line_inv\");\n  }\n\n  shmem_set_cache_line_inv_handle ( a1);\n\n}\n\nextern void  shmem_set_cache_line_inv(void * a1) {\n   __wrap_shmem_set_cache_line_inv(a1);\n}\n\n\n/**********************************************************\n   shmem_clear_cache_inv\n **********************************************************/\n\nextern void  __wrap_shmem_clear_cache_inv() ;\nextern void  __real_shmem_clear_cache_inv()  {\n\n  typedef void (*shmem_clear_cache_inv_t)();\n  static shmem_clear_cache_inv_t shmem_clear_cache_inv_handle = (shmem_clear_cache_inv_t)NULL;\n  if (!shmem_clear_cache_inv_handle) {\n    shmem_clear_cache_inv_handle = get_function_handle(\"shmem_clear_cache_inv\");\n  }\n\n  shmem_clear_cache_inv_handle ();\n\n}\n\nextern void  shmem_clear_cache_inv() {\n   __wrap_shmem_clear_cache_inv();\n}\n\n\n/**********************************************************\n   shmem_clear_cache_line_inv\n **********************************************************/\n\nextern void  __wrap_shmem_clear_cache_line_inv(void * a1) ;\nextern void  __real_shmem_clear_cache_line_inv(void * a1)  {\n\n  typedef void (*shmem_clear_cache_line_inv_t)(void * a1);\n  static shmem_clear_cache_line_inv_t shmem_clear_cache_line_inv_handle = (shmem_clear_cache_line_inv_t)NULL;\n  if (!shmem_clear_cache_line_inv_handle) {\n    shmem_clear_cache_line_inv_handle = get_function_handle(\"shmem_clear_cache_line_inv\");\n  }\n\n  shmem_clear_cache_line_inv_handle ( a1);\n\n}\n\nextern void  shmem_clear_cache_line_inv(void * a1) {\n   __wrap_shmem_clear_cache_line_inv(a1);\n}\n\n\n/**********************************************************\n   shmem_udcflush\n **********************************************************/\n\nextern void  __wrap_shmem_udcflush() ;\nextern void  __real_shmem_udcflush()  {\n\n  typedef void (*shmem_udcflush_t)();\n  static shmem_udcflush_t shmem_udcflush_handle = (shmem_udcflush_t)NULL;\n  if (!shmem_udcflush_handle) {\n    shmem_udcflush_handle = get_function_handle(\"shmem_udcflush\");\n  }\n\n  shmem_udcflush_handle ();\n\n}\n\nextern void  shmem_udcflush() {\n   __wrap_shmem_udcflush();\n}\n\n\n/**********************************************************\n   shmem_udcflush_line\n **********************************************************/\n\nextern void  __wrap_shmem_udcflush_line(void * a1) ;\nextern void  __real_shmem_udcflush_line(void * a1)  {\n\n  typedef void (*shmem_udcflush_line_t)(void * a1);\n  static shmem_udcflush_line_t shmem_udcflush_line_handle = (shmem_udcflush_line_t)NULL;\n  if (!shmem_udcflush_line_handle) {\n    shmem_udcflush_line_handle = get_function_handle(\"shmem_udcflush_line\");\n  }\n\n  shmem_udcflush_line_handle ( a1);\n\n}\n\nextern void  shmem_udcflush_line(void * a1) {\n   __wrap_shmem_udcflush_line(a1);\n}\n\n\n/**********************************************************\n   shfree\n **********************************************************/\n\nextern void  __wrap_shfree(void * a1) ;\nextern void  __real_shfree(void * a1)  {\n\n  typedef void (*shfree_t)(void * a1);\n  static shfree_t shfree_handle = (shfree_t)NULL;\n  if (!shfree_handle) {\n    shfree_handle = get_function_handle(\"shfree\");\n  }\n\n  shfree_handle ( a1);\n\n}\n\nextern void  shfree(void * a1) {\n   __wrap_shfree(a1);\n}\n\n\n/**********************************************************\n   shmem_free\n **********************************************************/\n\nextern void  __wrap_shmem_free(void * a1) ;\nextern void  __real_shmem_free(void * a1)  {\n\n  typedef void (*shmem_free_t)(void * a1);\n  static shmem_free_t shmem_free_handle = (shmem_free_t)NULL;\n  if (!shmem_free_handle) {\n    shmem_free_handle = get_function_handle(\"shmem_free\");\n  }\n\n  shmem_free_handle ( a1);\n\n}\n\nextern void  shmem_free(void * a1) {\n   __wrap_shmem_free(a1);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/posixio/iowrap_shared.c": "/****************************************************************************\n**\t\t\tTAU Portable Profiling Package\t\t\t   **\n**\t\t\thttp://www.cs.uoregon.edu/research/tau\t           **\n*****************************************************************************\n**    Copyright 2010  \t\t\t\t\t\t   \t   **\n**    Department of Computer and Information Science, University of Oregon **\n**    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n****************************************************************************/\n/****************************************************************************\n**\tFile \t\t: iowrap_shared.cpp  \t\t\t\t   **\n**\tDescription \t: TAU Profiling Package\t\t\t\t   **\n**\tContact\t\t: tau-bugs@cs.uoregon.edu               \t   **\n**\tDocumentation\t: See http://www.cs.uoregon.edu/research/tau       **\n**                                                                         **\n**      Description     : LD_PRELOAD IO wrapper                            **\n**                                                                         **\n****************************************************************************/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <aio.h>\n  \n#include <stdarg.h>\n  \n#include <aio.h> \n#include <sys/uio.h>\n  \n#include <setjmp.h>\n#include <TAU.h>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <sys/un.h>\n#include <netinet/in.h>\n#include <string.h>\n\n#include <Profile/TauIoWrap.h>\n#include <iowrap_metadata.h>\n\n// We should forward declare the TauEnv functions, but TAU_ASSERT is defined\n// in tau_internal.h, and variadic macros are not supported by pgcc.\n// So, for PGI, don't include this header.\n#ifndef __PGI\n#include <Profile/TauEnv.h>\n#endif\n    \n#define TAU_WRITE TAU_IO\n#define TAU_READ TAU_IO\n\n#define TAU_MAX_FILENAME_LEN 2048\n\n\n\n/*********************************************************************\n * fopen \n ********************************************************************/\nFILE *fopen(const char *path, const char *mode) {\n  static FILE* (*_fopen)(const char *path, const char *mode) = NULL;\n  FILE *ret;\n  if (_fopen == NULL) {\n    _fopen = ( FILE* (*)(const char *path, const char *mode)) dlsym(RTLD_NEXT, \"fopen\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fopen(path, mode);\n  }\n\n  Tau_iowrap_checkInit();\n\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"fopen()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _fopen(path, mode);\n  if (ret != NULL) {\n    Tau_iowrap_registerEvents(fileno(ret), path);\n  }\n  TAU_PROFILE_STOP(t); \n  TAU_IOWRAPPER_WRITE_FILE_METADATA_FOPEN(mode, path)\n\n  TAU_VERBOSE (\"* fopen called on %s\\n\", path); \n  return ret; \n}\n\n/*********************************************************************\n * fopen64 \n ********************************************************************/\nFILE *fopen64(const char *path, const char *mode) {\n  static FILE* (*_fopen64)(const char *path, const char *mode) = NULL;\n  FILE *ret;\n  if (_fopen64 == NULL) {\n    _fopen64 = ( FILE* (*)(const char *path, const char *mode)) dlsym(RTLD_NEXT, \"fopen64\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fopen64(path, mode);\n  }\n\n  Tau_iowrap_checkInit();\n\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"fopen64()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _fopen64(path, mode);\n  if (ret != NULL) {\n    Tau_iowrap_registerEvents(fileno(ret), path);\n  }\n  TAU_PROFILE_STOP(t); \n  TAU_IOWRAPPER_WRITE_FILE_METADATA_FOPEN(mode, path)\n\n  TAU_VERBOSE (\"* fopen64 called on %s\\n\", path); \n  return ret; \n}\n\n\n/*********************************************************************\n * fdopen \n ********************************************************************/\nFILE *fdopen(int fd, const char *mode) {\n  static FILE* (*_fdopen)(int fd, const char *mode) = NULL;\n  FILE *ret;\n  if (_fdopen == NULL) {\n    _fdopen = ( FILE* (*)(int fd, const char *mode)) dlsym(RTLD_NEXT, \"fdopen\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fdopen(fd, mode);\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  //TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"fdopen()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _fdopen(fd, mode);\n  TAU_PROFILE_STOP(t); \n  //TAU_IOWRAPPER_WRITE_FILE_METADATA_FOPEN(flags, pathname)\n\n  TAU_VERBOSE (\"* fdopen called on %d\\n\", fd); \n  return ret; \n}\n\n/*********************************************************************\n * freopen \n ********************************************************************/\nFILE *freopen(const char *path, const char *mode, FILE *stream) {\n  static FILE* (*_freopen)(const char *path, const char *mode, FILE *stream) = NULL;\n  FILE *ret;\n  if (_freopen == NULL) {\n    _freopen = ( FILE* (*)(const char *path, const char *mode, FILE *stream)) dlsym(RTLD_NEXT, \"freopen\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _freopen(path, mode, stream);\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"freopen()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _freopen(path, mode, stream);\n  if (ret != NULL) {\n    Tau_iowrap_registerEvents(fileno(ret), path);\n  }\n  TAU_PROFILE_STOP(t); \n  TAU_IOWRAPPER_WRITE_FILE_METADATA_FOPEN(mode, path)\n\n  TAU_VERBOSE (\"* freopen called on %s\\n\", path); \n  return ret; \n}\n\n/*********************************************************************\n * fclose \n ********************************************************************/\nint fclose(FILE *fp) {\n  static int (*_fclose)(FILE *fp) = NULL;\n  int ret;\n  if (_fclose == NULL) {\n    _fclose = ( int (*)(FILE *fp)) dlsym(RTLD_NEXT, \"fclose\");\n  }\n  \n  int fd = fileno(fp);\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _fclose(fp);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"fclose()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  Tau_iowrap_unregisterEvents (fd);\n  ret = _fclose(fp);\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* fclose(%d) called\\n\", fd); \n  return ret; \n}\n\n\n\n/*********************************************************************\n * fprintf\n ********************************************************************/\nint fprintf(FILE *stream, const char *format, ...) {\n  va_list arg;\n\n  static int (*_fprintf)(FILE *stream, const char *format, ...) = NULL;\n  int ret;\n  if (_fprintf == NULL) {\n    _fprintf = ( int (*)(FILE *stream, const char *format, ...)) dlsym(RTLD_NEXT, \"fprintf\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    va_start (arg, format);\n    ret = vfprintf(stream, format, arg);\n    va_end (arg);\n    return ret;\n  }\n\n  Tau_iowrap_checkInit();\n  Tau_global_incr_insideTAU();\n\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  double bw = 0.0;\n\n  TAU_GET_IOWRAP_EVENT(wb, WRITE_BW, fileno(stream));\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fileno(stream));\n\n  TAU_PROFILE_TIMER(t, \"fprintf()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n  gettimeofday(&t1, 0);\n\n  va_start (arg, format);\n  ret = vfprintf(stream, format, arg);\n  va_end (arg);\n  \n  gettimeofday(&t2, 0);\n\n  int count = ret;\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    bw = (double) count/currentWrite;\n    TAU_CONTEXT_EVENT(wb, bw);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, bw);\n  } else {\n    TAU_VERBOSE(\"TauWrapperWrite: currentWrite = %g\\n\", currentWrite);\n  }\n  if (ret > 0)  {\n    TAU_CONTEXT_EVENT(byteswritten, count);\n    TAU_CONTEXT_EVENT(global_bytes_written, count);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* fprintf called\\n\");\n  Tau_global_decr_insideTAU();\n  return ret;\n}\n\n/*********************************************************************\n * fscanf \n ********************************************************************/\nint fscanf(FILE *stream, const char *format, ...) {\n  va_list arg;\n\n  static int (*_fscanf)(FILE *stream, const char *format, ...) = NULL;\n  int ret;\n  if (_fscanf == NULL) {\n    _fscanf = ( int (*)(FILE *stream, const char *format, ...)) dlsym(RTLD_NEXT, \"fscanf\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    va_start (arg, format);\n    ret = vfscanf(stream, format, arg);\n    va_end (arg);\n    return ret;\n  }\n  Tau_iowrap_checkInit();\n\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  double bw = 0.0;\n\n  TAU_GET_IOWRAP_EVENT(rb, READ_BW, fileno(stream));\n  TAU_GET_IOWRAP_EVENT(bytesread, READ_BYTES, fileno(stream));\n\n  TAU_PROFILE_TIMER(t, \"fscanf()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n  gettimeofday(&t1, 0);\n\n  va_start (arg, format);\n  ret = vfscanf(stream, format, arg);\n  va_end (arg);\n  \n  gettimeofday(&t2, 0);\n\n  int count = ret;\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    bw = (double) count/currentRead; \n    TAU_CONTEXT_EVENT(rb, bw);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, bw);\n  } else {\n    TAU_VERBOSE(\"TauWrapperWrite: currentWrite = %g\\n\", currentRead);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(bytesread, count);\n    TAU_CONTEXT_EVENT(global_bytes_read, count);\n  }\n\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* fscanf called\\n\"); \n  return ret; \n}\n\n/*********************************************************************\n * fwrite \n ********************************************************************/\nsize_t fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream) {\n  static size_t (*_fwrite)(const void *ptr, size_t size, size_t nmemb, FILE *stream) = NULL;\n  size_t ret;\n  if (_fwrite == NULL) {\n    _fwrite = ( size_t (*)(const void *ptr, size_t size, size_t nmemb, FILE *stream)) dlsym(RTLD_NEXT, \"fwrite\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fwrite(ptr, size, nmemb, stream);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  double bw = 0.0;\n\n  TAU_GET_IOWRAP_EVENT(wb, WRITE_BW, fileno(stream));\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fileno(stream));\n  TAU_PROFILE_TIMER(t, \"fwrite()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n  gettimeofday(&t1, 0);\n  ret = _fwrite(ptr, size, nmemb, stream);\n  gettimeofday(&t2, 0);\n\n  int count = ret * size;\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    bw = (double) count/currentWrite; \n    TAU_CONTEXT_EVENT(wb, bw);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, bw);\n  } else {\n    TAU_VERBOSE(\"TauWrapperWrite: currentWrite = %g\\n\", currentWrite);\n  }\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(byteswritten, count);\n    TAU_CONTEXT_EVENT(global_bytes_written, count);\n  }\n\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* fwrite called\\n\"); \n  return ret; \n}\n\n/*********************************************************************\n * fread \n ********************************************************************/\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream) {\n  static size_t (*_fread)(void *ptr, size_t size, size_t nmemb, FILE *stream) = NULL;\n  int ret;\n  if (_fread == NULL) {\n    _fread = ( size_t (*)(void *ptr, size_t size, size_t nmemb, FILE *stream)) dlsym(RTLD_NEXT, \"fread\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fread(ptr, size, nmemb, stream);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"read()\", \" \", TAU_READ|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, READ_BW, fileno(stream));\n  TAU_GET_IOWRAP_EVENT(bytesread, READ_BYTES, fileno(stream));\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _fread(ptr, size, nmemb, stream);\n  gettimeofday(&t2, 0);\n  int count = ret * size;\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) count/currentRead);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, (double) count/currentRead);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentRead = %g\\n\", currentRead);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(bytesread, count);\n    TAU_CONTEXT_EVENT(global_bytes_read, count);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: read : %d bytes\\n\", ret);\n  return ret; \n}\n\n/*********************************************************************\n * fcntl\n ********************************************************************/\nint fcntl(int fd, int cmd, ...) {\n  va_list ap;\n  void *arg;\n\n  static int (*_fcntl)(int fd, int cmd, ...) = NULL;\n  int ret;\n  if (_fcntl == NULL) {\n    _fcntl = ( int (*)(int fd, int cmd, ...)) dlsym(RTLD_NEXT, \"fcntl\");   \n  }\n\n  switch (cmd) {\n    /* No arg */\n    case F_GETFD : /* From kernel source fs/fcntl.c:do_fcntl() */\n    case F_GETFL :\n#if defined(F_GETOWN)\n    case F_GETOWN :\n#endif\n#if defined(F_GETSIG)\n    case F_GETSIG :\n#endif\n#if defined(F_GETLEASE)\n    case F_GETLEASE :\n#endif\n      ret = _fcntl(fd, cmd, 0);\n      break;\n    default :\n      va_start (ap, cmd);\n      arg = va_arg (ap, void *);\n      va_end (ap);\n      ret = _fcntl(fd, cmd, arg);\n      break;\n  }\n  \n  switch (cmd) {\n    case F_DUPFD :\n      Tau_iowrap_checkInit();\n      Tau_iowrap_dupEvents(fd, ret);\n      break;\n  }\n  TAU_VERBOSE (\"* fcntl(fid=%d,cmd=%d...) called\\n\", fd, cmd);\n  return ret;\n}\n\n\n/*********************************************************************\n * lseek\n ********************************************************************/\noff_t lseek(int fd, off_t offset, int whence) {\n  static off_t (*_lseek)(int fd, off_t offset, int whence) = NULL;\n  int ret;\n  if (_lseek == NULL) {\n    _lseek = ( off_t (*)(int fd, off_t offset, int whence)) dlsym(RTLD_NEXT, \"lseek\");   }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _lseek(fd, offset, whence);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"lseek()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t); \n  ret = _lseek(fd, offset, whence);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* lseek called\\n\");\n  return ret;\n}\n\n/*********************************************************************\n * lseek64\n ********************************************************************/\n/* FIX for Apple: */\n#ifdef __APPLE__\ntypedef int64_t               off64_t;\n#endif /* __APPLE__ */\noff64_t lseek64(int fd, off64_t offset, int whence) {\n  static off64_t (*_lseek64)(int fd, off64_t offset, int whence) = NULL;\n  int ret;\n  if (_lseek64 == NULL) {\n    _lseek64 = ( off64_t (*)(int fd, off64_t offset, int whence)) dlsym(RTLD_NEXT, \"lseek64\");   }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _lseek64(fd, offset, whence);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"lseek64()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n  ret = _lseek64(fd, offset, whence);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* lseek64 called\\n\");\n  return ret;\n}\n\n/*********************************************************************\n * fseek \n ********************************************************************/\nint fseek(FILE *stream, long offset, int whence) {\n  static int (*_fseek)(FILE *stream, long offset, int whence) = NULL;\n  int ret;\n  if (_fseek == NULL) {\n    _fseek = ( int (*)(FILE *stream, long offset, int whence)) dlsym(RTLD_NEXT, \"fseek\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    return _fseek(stream, offset, whence);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"fseek()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _fseek(stream, offset, whence);\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* fseek called\\n\"); \n  return ret; \n}\n\n/*********************************************************************\n * rewind \n ********************************************************************/\nvoid rewind(FILE *stream) {\n  static void (*_rewind)(FILE *stream) = NULL;\n  if (_rewind == NULL) {\n    _rewind = ( void (*)(FILE *stream)) dlsym(RTLD_NEXT, \"rewind\");\n  }\n  \n  if (Tau_iowrap_checkPassThrough()) {\n    _rewind(stream);\n    return;\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"rewind()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n  _rewind(stream);\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* rewind called\\n\"); \n  return;\n}\n\n\n/*********************************************************************\n * write\n ********************************************************************/\nssize_t write (int fd, const void *buf, size_t count) {\n  static ssize_t (*_write)(int fd, const void *buf, size_t count) = NULL;\n  ssize_t ret;\n  if (_write == NULL) {\n    _write = ( ssize_t (*)(int fd, const void *buf, size_t count)) dlsym(RTLD_NEXT, \"write\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _write(fd, buf, count);\n  }\n\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  double bw = 0.0;\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"write()\", \" \", TAU_WRITE|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(wb, WRITE_BW, fd);\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _write(fd, buf, count);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    bw = (double) ret/currentWrite;\n    TAU_CONTEXT_EVENT(wb, bw);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, bw);\n  } else {\n    TAU_VERBOSE(\"TauWrapperWrite: currentWrite = %g\\n\", currentWrite);\n  }\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(byteswritten, ret);\n    TAU_CONTEXT_EVENT(global_bytes_written, ret);\n  }\n \n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: write : %d bytes, bandwidth %g \\n\", ret, bw);\n\n  return ret;\n}\n\n\n/*********************************************************************\n * read \n ********************************************************************/\nssize_t read (int fd, void *buf, size_t count) {\n  static ssize_t (*_read)(int fd, void *buf, size_t count) = NULL;\n  ssize_t ret; \n\n  if (_read == NULL) {\n    _read = ( ssize_t (*)(int fd, void *buf, size_t count)) dlsym(RTLD_NEXT, \"read\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _read(fd, buf, count);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"read()\", \" \", TAU_READ|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, READ_BW, fd);\n  TAU_GET_IOWRAP_EVENT(bytesread, READ_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _read(fd, buf, count);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) ret/currentRead);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, (double) ret/currentRead);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentRead = %g\\n\", ret);\n  }\n\n  if (ret > 0 ) {\n    TAU_CONTEXT_EVENT(bytesread, ret);\n    TAU_CONTEXT_EVENT(global_bytes_read, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: read(%d) : %d bytes\\n\", fd, ret);\n\n  return ret;\n}\n\n\n/*********************************************************************\n * readv \n ********************************************************************/\nssize_t readv (int fd, const struct iovec *vec, int count) {\n  static ssize_t (*_readv)(int fd, const struct iovec *vec, int count) = NULL;\n  ssize_t ret; \n\n  if (_readv == NULL) {\n    _readv = ( ssize_t (*)(int fd, const struct iovec *vec, int count)) dlsym(RTLD_NEXT, \"readv\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _readv(fd, vec, count);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"readv()\", \" \", TAU_READ|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, READ_BW, fd);\n  TAU_GET_IOWRAP_EVENT(bytesread, READ_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n\n  gettimeofday(&t1, 0);\n  ret = _readv(fd, vec, count);\n  gettimeofday(&t2, 0);\n\n/* On success, the readv() function returns the number of bytes read; the\n   writev() function returns the number of bytes written.  On error, -1 is\n   returned, and errno is set appropriately. */\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) ret/currentRead);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, (double) ret/currentRead);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentRead = %g\\n\", currentRead);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(bytesread, ret);\n    TAU_CONTEXT_EVENT(global_bytes_read, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: read : %d bytes\\n\", ret);\n\n  return ret;\n}\n\n/*********************************************************************\n * writev \n ********************************************************************/\nssize_t writev (int fd, const struct iovec *vec, int count) {\n  static ssize_t (*_writev)(int fd, const struct iovec *vec, int count) = NULL;\n  ssize_t ret;\n\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  double bw = 0.0;\n\n  if (_writev == NULL) {\n    _writev = ( ssize_t (*)(int fd, const struct iovec *vec, int count)) dlsym(RTLD_NEXT, \"writev\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _writev(fd, vec, count);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"writev()\", \" \", TAU_WRITE|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(wb, WRITE_BW, fd);\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _writev(fd, vec, count);\n  /* On success, the readv() function returns the number of bytes read; the\n     writev() function returns the number of bytes written.  On error, -1 is\n     returned, and errno is set appropriately. */\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    bw = (double) ret/currentWrite; \n    TAU_CONTEXT_EVENT(wb, bw);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, bw);\n  } else {\n    TAU_VERBOSE(\"TauWrapperWrite: currentWrite = %g\\n\", currentWrite);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(byteswritten, ret);\n    TAU_CONTEXT_EVENT(global_bytes_written, ret);\n  }\n \n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: writev(%d) : %d bytes, bandwidth %g \\n\", fd, ret, bw);\n\n  return ret;\n}\n\n/*********************************************************************\n * mkstemp\n ********************************************************************/\nint mkstemp (char *templat) {\n  static int (*_mkstemp)(char *templat)  = NULL;\n  int ret;\n\n  if (_mkstemp == NULL) {\n    _mkstemp = ( int (*)(char *templat)) dlsym(RTLD_NEXT, \"mkstemp\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _mkstemp(templat);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"mkstemp()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _mkstemp(templat);\n\n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, templat);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* mkstemp called on %s\\n\", templat);\n\n  return ret;\n}\n\n/*********************************************************************\n * tmpfile\n ********************************************************************/\nFILE* tmpfile () {\n  static FILE* (*_tmpfile)()  = NULL;\n  FILE* ret;\n\n  if (_tmpfile == NULL) {\n    _tmpfile = ( FILE* (*)()) dlsym(RTLD_NEXT, \"tmpfile\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _tmpfile();\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"tmpfile()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _tmpfile();\n\n  if (ret != NULL) {\n    Tau_iowrap_registerEvents(fileno(ret), \"tmpfile\");\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* tmpfile called\\n\");\n\n  return ret;\n}\n\n\n/*********************************************************************\n * open \n ********************************************************************/\nint open (const char *pathname, int flags, ...) { \n  static int (*_open)(const char *pathname, int flags, ...)  = NULL;\n  mode_t mode = 0777; // default value\n  va_list args;\n  int ret;\n\n  if (_open == NULL) { \n    _open = ( int (*)(const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, \"open\"); \n  } \n\n  if (Tau_iowrap_checkPassThrough()) {\n    /* if the file is being created, get the third argument for specifying the \n       mode (e.g., 0644) */\n    if (flags & O_CREAT) { \n      va_start(args, flags);\n      mode = va_arg(args, int);\n      va_end(args); \n    }\n    \n    ret = _open(pathname, flags, mode); \n    return ret;\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"open()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  /* if the file is being created, get the third argument for specifying the \n     mode (e.g., 0644) */\n  if (flags & O_CREAT) { \n    va_start(args, flags);\n    mode = va_arg(args, int);\n    va_end(args); \n  }\n\n  ret = _open(pathname, flags, mode); \n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, pathname);\n  }\n  TAU_PROFILE_STOP(t); \n  TAU_IOWRAPPER_WRITE_FILE_METADATA(flags, pathname)\n\n  TAU_VERBOSE (\"* open called on %s\\n\", pathname); \n    \n  return ret; \n} \n\n/*********************************************************************\n * open64 \n ********************************************************************/\nint open64 (const char *pathname, int flags, ...) { \n  static int (*_open64)(const char *pathname, int flags, ...)  = NULL;\n  mode_t mode = 0777; // default value\n  va_list args;\n  int ret;\n\n  if (_open64 == NULL) { \n     _open64 = ( int (*)(const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, \"open64\"); \n  } \n\n  if (Tau_iowrap_checkPassThrough()) {\n    /* if the file is being created, get the third argument for specifying the \n       mode (e.g., 0644) */\n    if (flags & O_CREAT) { \n      va_start(args, flags);\n      mode = va_arg(args, int);\n      va_end(args); \n    }\n    ret = _open64(pathname, flags, mode); \n    return ret;\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"open64()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  if (flags & O_CREAT) { \n    va_start(args, flags);\n    mode = va_arg(args, int);\n    va_end(args); \n  }\n\n  ret = _open64(pathname, flags, mode); \n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, pathname);\n  }\n  TAU_PROFILE_STOP(t); \n  TAU_IOWRAPPER_WRITE_FILE_METADATA(flags, pathname)\n  TAU_VERBOSE (\"* open64 called on %s\\n\", pathname); \n    \n  return ret; \n} \n\n/*********************************************************************\n * creat \n ********************************************************************/\nint creat(const char *pathname, mode_t mode) {\n  static int (*_creat)(const char *pathname, mode_t mode) = NULL;\n  int ret;\n\n  if (_creat == NULL) {\n     _creat = ( int (*)(const char *pathname, mode_t mode)) dlsym(RTLD_NEXT, \"creat\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _creat(pathname, mode);\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"creat()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _creat(pathname, mode);\n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, pathname);\n  }\n  TAU_PROFILE_STOP(t);\n  TAU_IOWRAPPER_WRITE_FILE_METADATA(O_WRONLY, pathname)\n  TAU_VERBOSE (\"* creat called on %s\\n\", pathname);\n\n  return ret;\n}\n\n/*********************************************************************\n * creat64 \n ********************************************************************/\nint creat64(const char *pathname, mode_t mode) {\n  static int (*_creat64)(const char *pathname, mode_t mode) = NULL;\n  int ret;\n\n  if (_creat64 == NULL) {\n     _creat64 = ( int (*)(const char *pathname, mode_t mode)) dlsym(RTLD_NEXT, \"creat64\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _creat64(pathname, mode);\n  }\n\n  Tau_iowrap_checkInit();\n  /* get the name of the current timer, current thread and get a timestamp */\n  TAU_IOWRAPPER_METADATA_SETUP\n\n  TAU_PROFILE_TIMER(t, \"creat64()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _creat64(pathname, mode);\n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, pathname);\n  }\n  TAU_PROFILE_STOP(t);\n  TAU_IOWRAPPER_WRITE_FILE_METADATA(O_WRONLY, pathname)\n  TAU_VERBOSE (\"* creat64 called on %s\\n\", pathname);\n\n  return ret;\n}\n\n\n/*********************************************************************\n * close \n ********************************************************************/\nint close(int fd) {\n  static int (*_close) (int fd) = NULL;\n  int ret; \n\n  if (_close == NULL) {\n    _close = (int (*) (int fd) ) dlsym(RTLD_NEXT, \"close\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _close(fd);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"close()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  Tau_iowrap_unregisterEvents(fd);\n  ret = _close(fd);\n\n  TAU_PROFILE_STOP(t); \n\n  TAU_VERBOSE (\"* close called on %d\\n\", fd);\n  return ret;\n}\n\n\n/*********************************************************************\n * pipe \n ********************************************************************/\nint pipe(int filedes[2]) {\n  static int (*_pipe) (int filedes[2]) = NULL;\n  int ret;\n\n  if (_pipe == NULL) {\n    _pipe = (int (*) (int filedes[2]) ) dlsym(RTLD_NEXT, \"pipe\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _pipe(filedes);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"pipe()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _pipe(filedes);\n\n  if (ret == 0) {\n    Tau_iowrap_registerEvents(filedes[0], \"pipe\");\n    Tau_iowrap_registerEvents(filedes[1], \"pipe\");\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* pipe called\\n\");\n\n  return ret;\n}\n\n\n/*********************************************************************\n * Tau_get_socketname returns the name of the socket (AF_INET/AF_UNIX) \n ********************************************************************/\nchar * Tau_get_socket_name(const struct sockaddr *sa, char *s, size_t len) {\n  int i;\n  Tau_iowrap_checkInit();\n  char addr[256];\n  switch (sa->sa_family) {\n    case AF_INET: \n      inet_ntop(AF_INET, &(((struct sockaddr_in *) sa)->sin_addr), addr, len);\n      sprintf(s,\"%s,port=%d\",addr,ntohs((((struct sockaddr_in *)sa)->sin_port)));\n      break;\n    case AF_INET6: \n      inet_ntop(AF_INET6, &(((struct sockaddr_in6 *) sa)->sin6_addr), addr, len);\n      for (i = 0; i < strlen(addr); i++) { \n        if (addr[i] == ':' ) addr[i] = '.';\n      }\n      sprintf(s,\"%s,port=%d\",addr,ntohs((((struct sockaddr_in6 *)sa)->sin6_port)));\n      break;\n    case AF_UNIX:\n      strncpy(s, ((char *)(((struct sockaddr_un *) sa)->sun_path)), len);\n      break;\n    default:\n      strncpy(s, \"Unknown address family\", len);\n      return NULL;\n  }\n  return s;\n}\n\n/*********************************************************************\n * socket \n ********************************************************************/\nint socket(int domain, int type, int protocol) {\n  static int (*_socket) (int domain, int type, int protocol) = NULL;\n  int ret;\n\n  if (_socket == NULL) {\n    _socket = (int (*) (int domain, int type, int protocol) ) dlsym(RTLD_NEXT, \"socket\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _socket(domain, type, protocol);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"socket()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _socket(domain, type, protocol);\n\n  if (ret != -1) {\n    Tau_iowrap_registerEvents(ret, \"socket\");\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* socket called on domain %d, type %d, protocol %d, ret=%d\\n\", domain, type, protocol, ret);\n\n  return ret;\n}\n\n/*********************************************************************\n * socketpair \n ********************************************************************/\nint socketpair(int d, int type, int protocol, int sv[2]) {\n  static int (*_socketpair) (int d, int type, int protocol, int sv[2]) = NULL;\n  int ret;\n\n  if (_socketpair == NULL) {\n    _socketpair = (int (*) (int d, int type, int protocol, int sv[2]) ) dlsym(RTLD_NEXT, \"socketpair\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _socketpair(d, type, protocol, sv);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"socketpair()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _socketpair(d, type, protocol, sv);\n\n  if (ret == 0) {\n    Tau_iowrap_registerEvents(sv[0], \"socketpair\");\n    Tau_iowrap_registerEvents(sv[1], \"socketpair\");\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* socketpair called on domain %d, type %d, protocol %d, returned (%d,%d)\\n\", d, type, protocol, sv[0], sv[1]);\n\n  return ret;\n}\n\n#if (!(defined(TAU_BGP) || defined(TAU_XLC)))\n/*********************************************************************\n * bind \n ********************************************************************/\nint bind(int socket, const struct sockaddr *address, socklen_t address_len) {\n  static int (*_bind) (int socket, const struct sockaddr *address, socklen_t address_len) = NULL;\n  int ret;\n  char socketname[TAU_MAX_FILENAME_LEN];\n\n  if (_bind == NULL) {\n    _bind = (int (*) (int socket, const struct sockaddr *address, socklen_t address_len) ) dlsym(RTLD_NEXT, \"bind\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _bind(socket, address, address_len);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"bind()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _bind(socket, address, address_len);\n  TAU_PROFILE_STOP(t);\n\n  if (ret == 0) {\n    Tau_get_socket_name(address, (char *)socketname, address_len);\n    TAU_VERBOSE(\"socket name = %s\\n\", socketname);\n    Tau_iowrap_registerEvents(socket, (const char *)socketname);\n  }\n\n  return ret;\n}\n/*********************************************************************\n * accept\n ********************************************************************/\n#ifndef _AIX\n#ifdef TAU_ENABLE_ACCEPT_WRAPPER\nint accept(int socket, struct sockaddr *address, socklen_t* address_len) {\n  static int (*_accept) (int socket, struct sockaddr *address, socklen_t* address_len) = NULL;\n  int current;\n  char socketname[TAU_MAX_FILENAME_LEN];\n\n  if (_accept == NULL) {\n    _accept = (int (*) (int socket, struct sockaddr *address, socklen_t* address_len) ) dlsym(RTLD_NEXT, \"accept\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _accept(socket, address, address_len);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"accept()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  current = _accept(socket, address, address_len);\n  TAU_PROFILE_STOP(t);\n  if (current != -1) {\n    Tau_get_socket_name(address, (char *)socketname, *address_len);\n    TAU_VERBOSE(\"socket name = %s\\n\", socketname);\n    Tau_iowrap_registerEvents(current, (const char *)socketname);\n  }\n  return current;\n}\n#endif /* TAU_ENABLE_ACCEPT_WRAPPER */\n#endif /* _AIX */\n\n/*********************************************************************\n * connect\n ********************************************************************/\nint connect(int socket, const struct sockaddr *address, socklen_t address_len) {\n  static int (*_connect) (int socket, const struct sockaddr *address, socklen_t address_len) = NULL;\n  int current;\n  char socketname[2048];\n\n  if (_connect == NULL) {\n    _connect = (int (*) (int socket, const struct sockaddr *address, socklen_t address_len) ) dlsym(RTLD_NEXT, \"connect\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _connect(socket, address, address_len);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"connect()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  current = _connect(socket, address, address_len);\n  TAU_PROFILE_STOP(t);\n  if (current != -1) {\n    Tau_get_socket_name(address, (char *)socketname, address_len);\n    TAU_VERBOSE(\"socket name = %s\\n\", socketname);\n    Tau_iowrap_registerEvents(socket, (const char *)socketname);\n  }\n\n  return current;\n}\n\n/*********************************************************************\n * recv\n ********************************************************************/\nssize_t recv (int fd, void *buf, size_t count, int flags) {\n  static ssize_t (*_recv)(int fd, void *buf, size_t count, int flags) = NULL;\n  ssize_t ret; \n\n  if (_recv == NULL) {\n    _recv = ( ssize_t (*)(int fd, void *buf, size_t count, int flags)) dlsym(RTLD_NEXT, \"recv\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _recv(fd, buf, count, flags);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"recv()\", \" \", TAU_READ|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, READ_BW, fd);\n  TAU_GET_IOWRAP_EVENT(bytesrecv, READ_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _recv(fd, buf, count, flags);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) ret/currentRead);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, (double) ret/currentRead);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentRead = %g\\n\", currentRead);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(bytesrecv, ret);\n    TAU_CONTEXT_EVENT(global_bytes_read, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: recv : %d bytes\\n\", ret);\n\n  return ret;\n}\n\n/*********************************************************************\n * send\n ********************************************************************/\n\nssize_t send (int fd, const void *buf, size_t count, int flags) {\n  static ssize_t (*_send)(int fd, const void *buf, size_t count, int flags) = NULL;\n  ssize_t ret; \n\n  if (_send == NULL) {\n    _send = ( ssize_t (*)(int fd, const void *buf, size_t count, int flags)) dlsym(RTLD_NEXT, \"send\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _send(fd, buf, count, flags);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"send()\", \" \", TAU_WRITE|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, WRITE_BW, fd);\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _send(fd, buf, count, flags);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) ret/currentWrite);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, (double) ret/currentWrite);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentWrite = %g\\n\", currentWrite);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(byteswritten, ret);\n    TAU_CONTEXT_EVENT(global_bytes_written, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: send : %d bytes\\n\", ret);\n\n  return ret;\n}\n\n\n/*********************************************************************\n * sendto\n ********************************************************************/\n\nssize_t sendto (int fd, const void *buf, size_t count, int flags, const struct sockaddr *to, socklen_t len) {\n  static ssize_t (*_sendto)(int fd, const void *buf, size_t count, int flags, const struct sockaddr *to, socklen_t len) = NULL;\n  ssize_t ret; \n\n  if (_sendto == NULL) {\n    _sendto = ( ssize_t (*)(int fd, const void *buf, size_t count, int flags, const struct sockaddr *to, socklen_t len)) dlsym(RTLD_NEXT, \"sendto\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _sendto(fd, buf, count, flags, to, len);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentWrite = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"sendto()\", \" \", TAU_WRITE|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, WRITE_BW, fd);\n  TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _sendto(fd, buf, count, flags, to, len);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentWrite = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentWrite > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) count/currentWrite);\n    TAU_CONTEXT_EVENT(global_write_bandwidth, (double) count/currentWrite);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentWrite = %g\\n\", currentWrite);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(byteswritten, ret);\n    TAU_CONTEXT_EVENT(global_bytes_written, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: sendto : %d bytes\\n\", ret);\n\n  return ret;\n}\n\n\n#ifndef _AIX\n/*********************************************************************\n * recvfrom\n ********************************************************************/\n\nssize_t recvfrom (int fd, void *buf, size_t count, int flags, struct sockaddr *from, socklen_t *len) {\n  static ssize_t (*_recvfrom)(int fd, void *buf, size_t count, int flags, struct sockaddr *from, socklen_t * len) = NULL;\n  ssize_t ret; \n\n  if (_recvfrom == NULL) {\n    _recvfrom = ( ssize_t (*)(int fd, void *buf, size_t count, int flags, struct sockaddr * from, socklen_t * len)) dlsym(RTLD_NEXT, \"recvfrom\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _recvfrom(fd, buf, count, flags, from, len);\n  }\n\n  Tau_iowrap_checkInit();\n  double currentRead = 0.0;\n  struct timeval t1, t2;\n  TAU_PROFILE_TIMER(t, \"recvfrom()\", \" \", TAU_READ|TAU_IO);\n  TAU_GET_IOWRAP_EVENT(re, READ_BW, fd);\n  TAU_GET_IOWRAP_EVENT(bytesrecvfrom, READ_BYTES, fd);\n  TAU_PROFILE_START(t);\n\n  gettimeofday(&t1, 0);\n  ret = _recvfrom(fd, buf, count, flags, from, len);\n  gettimeofday(&t2, 0);\n\n  /* calculate the time spent in operation */\n  currentRead = (double) (t2.tv_sec - t1.tv_sec) * 1.0e6 + (t2.tv_usec - t1.tv_usec);\n  /* now we trigger the events */\n  if ((currentRead > 1e-12) && (ret > 0)) {\n    TAU_CONTEXT_EVENT(re, (double) ret/currentRead);\n    TAU_CONTEXT_EVENT(global_read_bandwidth, (double) ret/currentRead);\n  } else {\n    TAU_VERBOSE(\"TauWrapperRead: currentRead = %g\\n\", currentRead);\n  }\n\n  if (ret > 0) {\n    TAU_CONTEXT_EVENT(bytesrecvfrom, ret);\n    TAU_CONTEXT_EVENT(global_bytes_read, ret);\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* TAU: recvfrom : %d bytes\\n\", ret);\n\n  return ret;\n}\n#endif /* _AIX */\n#endif /* !(TAU_BGP || TAU_XLC) */\n\n/*********************************************************************\n * dup\n ********************************************************************/\nint dup(int oldfd) {\n  static int (*_dup)(int oldfd) = NULL;\n  int fd;\n\n  if (_dup == NULL) {\n    _dup = ( int(*)(int fd)) dlsym(RTLD_NEXT, \"dup\");   \n  }\n\n  fd = _dup(oldfd);\n\n  Tau_iowrap_checkInit();\n  Tau_iowrap_dupEvents(oldfd, fd);\n\n  return fd;\n}\n\n\n/*********************************************************************\n * dup2\n ********************************************************************/\nint dup2(int oldfd, int newfd) {\n  static int (*_dup2)(int oldfd, int newfd) = NULL;\n\n  if (_dup2 == NULL) {\n    _dup2 = ( int(*)(int fd, int newfd)) dlsym(RTLD_NEXT, \"dup2\");   \n  }\n\n  newfd = _dup2(oldfd, newfd);\n\n  Tau_iowrap_checkInit();\n  Tau_iowrap_dupEvents(oldfd, newfd);\n\n  return newfd;\n}\n\n\n/*********************************************************************\n * popen\n ********************************************************************/\nFILE * popen (const char *command, const char *type) {\n  static FILE * (*_popen)(const char *command, const char *type)  = NULL;\n  FILE* ret;\n\n  if (_popen == NULL) {\n    _popen = ( FILE * (*)(const char *command, const char *type)) dlsym(RTLD_NEXT, \"popen\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _popen(command, type);   \n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"popen()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _popen(command, type);\n  /* NOTE: We use int fileno(FILE *stream) to convert FILE * to int fd */\n  Tau_iowrap_registerEvents(fileno(ret), command);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* popen called on %s\\n\", command);\n\n  return ret;\n}\n\n/*********************************************************************\n * pclose\n ********************************************************************/\nint pclose(FILE * stream) {\n  static int (*_pclose) (FILE * stream) = NULL;\n  int ret;\n\n  if (_pclose == NULL) {\n    _pclose = (int (*) (FILE * stream) ) dlsym(RTLD_NEXT, \"pclose\");\n  }\n\n  if (Tau_iowrap_checkPassThrough()) {\n    return _pclose(stream);\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"pclose()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _pclose(stream);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* pclose called on %d\\n\", stream);\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_read\n ********************************************************************/\nint aio_read(struct aiocb *aiocbp) {\n  static int (*_aio_read) (struct aiocb *aiocbp) = NULL;\n  int ret;\n\n  if (_aio_read == NULL) {\n    _aio_read = (int (*) (struct aiocb *aiocbp) ) dlsym(RTLD_NEXT, \"aio_read\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_read()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_read(aiocbp);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_read called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_write\n ********************************************************************/\nint aio_write(struct aiocb *aiocbp) {\n  static int (*_aio_write) (struct aiocb *aiocbp) = NULL;\n  int ret;\n\n  if (_aio_write == NULL) {\n    _aio_write = (int (*) (struct aiocb *aiocbp) ) dlsym(RTLD_NEXT, \"aio_write\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_write()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_write(aiocbp);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_write called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_error\n ********************************************************************/\nint aio_error(const struct aiocb *aiocbp) {\n  static int (*_aio_error) (const struct aiocb *aiocbp) = NULL;\n  int ret;\n\n  if (_aio_error == NULL) {\n    _aio_error = (int (*) (const struct aiocb *aiocbp) ) dlsym(RTLD_NEXT, \"aio_error\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_error()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_error(aiocbp);\n\n\n  if (ret == 0) {\n    // the request was completed\n    if (aiocbp->aio_lio_opcode == LIO_READ) {\n      TAU_GET_IOWRAP_EVENT(bytesread, READ_BYTES, aiocbp->aio_fildes);\n      TAU_CONTEXT_EVENT(bytesread, aiocbp->aio_nbytes);\n      TAU_CONTEXT_EVENT(global_bytes_read, aiocbp->aio_nbytes);\n    } else if (aiocbp->aio_lio_opcode == LIO_WRITE) {\n      TAU_GET_IOWRAP_EVENT(byteswritten, WRITE_BYTES, aiocbp->aio_fildes);\n      TAU_CONTEXT_EVENT(byteswritten, aiocbp->aio_nbytes);\n      TAU_CONTEXT_EVENT(global_bytes_written, aiocbp->aio_nbytes);\n    }\n  }\n\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_error called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_return\n ********************************************************************/\nssize_t aio_return(struct aiocb *aiocbp) {\n  static ssize_t (*_aio_return) (struct aiocb *aiocbp) = NULL;\n  ssize_t ret;\n\n  if (_aio_return == NULL) {\n    _aio_return = (ssize_t (*) (struct aiocb *aiocbp) ) dlsym(RTLD_NEXT, \"aio_return\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_return()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_return(aiocbp);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_return called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_suspend\n ********************************************************************/\nint aio_suspend(const struct aiocb * const cblist[], int n, const struct timespec *timeout) {\n  static int (*_aio_suspend) (const struct aiocb * const cblist[], int n, const struct timespec *timeout) = NULL;\n  int ret;\n\n  if (_aio_suspend == NULL) {\n    _aio_suspend = (int (*) (const struct aiocb * const cblist[], int n, const struct timespec *timeout) ) dlsym(RTLD_NEXT, \"aio_suspend\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_suspend()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_suspend(cblist, n, timeout);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_suspend called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * aio_cancel\n ********************************************************************/\nint aio_cancel(int fd, struct aiocb *aiocbp) {\n  static int (*_aio_cancel) (int fd, struct aiocb *aiocbp) = NULL;\n  int ret;\n\n  if (_aio_cancel == NULL) {\n    _aio_cancel = (int (*) (int fd, struct aiocb *aiocbp) ) dlsym(RTLD_NEXT, \"aio_cancel\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"aio_cancel()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _aio_cancel(fd, aiocbp);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* aio_cancel called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * lio_listio\n ********************************************************************/\n\nint lio_listio(int mode, struct aiocb * const list[], int nent, struct sigevent *sig) {\n  static int (*_lio_listio) (int mode, struct aiocb * const list[], int nent, struct sigevent *sig) = NULL;\n  ssize_t ret;\n\n  if (_lio_listio == NULL) {\n    _lio_listio = (int (*) (int mode, struct aiocb * const list[], int nent, struct sigevent *sig)) dlsym(RTLD_NEXT, \"lio_listio\");\n  }\n\n  Tau_iowrap_checkInit();\n  TAU_PROFILE_TIMER(t, \"lio_listio()\", \" \", TAU_IO);\n  TAU_PROFILE_START(t);\n\n  ret = _lio_listio(mode, list, nent, sig);\n  TAU_PROFILE_STOP(t);\n\n  TAU_VERBOSE (\"* lio_listio called\\n\");\n\n  return ret;\n}\n\n/*********************************************************************\n * exit\n ********************************************************************/\n/* exit moved to TauWrapSyscalls.cpp */\n/*\nvoid exit(int status) {\n\n  static void (*_internal_exit) (int status) = NULL;\n\n  int ret;\n  TAU_VERBOSE(\"TAU: Inside tau_wrap.c: exit(): status = %d\\n\", status);\n\n  TAU_PROFILE_EXIT(\"EXITING from TAU...\");\n\n  \n  if (_internal_exit == NULL) {\n    _internal_exit = (void (*) (int status)) dlsym(RTLD_NEXT, \"exit\");\n  }\n\n  TAU_VERBOSE(\"TAU: calling _internal_exit \\n\");\n  _internal_exit(status);\n}\n*/\n\n/*********************************************************************\n * EOF\n ********************************************************************/\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/taupreload/dl_auditor.c": "#ifdef TAU_TRACK_LD_LOADER\n\n#define _GNU_SOURCE\n#include <dlfcn.h>\n#ifdef MERCURIUM_EXTRA\n#define LM_ID_BASE 0\n#endif\n#include <link.h>\n#include <stdio.h>\n\n\nint * objopen_counter()\n{\n  static int count = 0;\n  return &count;\n}\n\n// This auditor supports all API versions.\nunsigned int la_version(unsigned int version)\n{\n  return version;\n}\n\n#if 1\nunsigned int la_objopen(struct link_map *map, Lmid_t lmid, uintptr_t *cookie)\n{\n  (*objopen_counter())++;\n  return 0;\n}\n\nvoid la_preinit(uintptr_t *cookie)\n{\n  typedef void (*Tau_init_dl_initialized_t)();\n  typedef void (*Tau_bfd_register_objopen_counter_t)(int * (*)(void));\n  static Tau_init_dl_initialized_t Tau_init_dl_initialized = NULL;\n  static Tau_bfd_register_objopen_counter_t Tau_bfd_register_objopen_counter = NULL;\n  void * tau_so;\n\n  tau_so = dlmopen(LM_ID_BASE, \"libTAU.so\", RTLD_NOW);\n\n  if (tau_so) {\n    char const * err;\n\n    dlerror(); // reset error flag\n    Tau_init_dl_initialized = (Tau_init_dl_initialized_t)dlsym(tau_so, \"Tau_init_dl_initialized\");\n    Tau_bfd_register_objopen_counter = (Tau_bfd_register_objopen_counter_t)dlsym(tau_so, \"Tau_bfd_register_objopen_counter\");\n    // Check for errors\n    if ((err = dlerror())) {\n      printf(\"TAU: ERROR obtaining symbol info in auditor: %s\\n\", err);\n    } else {\n      Tau_init_dl_initialized();\n      Tau_bfd_register_objopen_counter(objopen_counter);\n    }\n    dlclose(tau_so);\n  } else {\n    printf(\"TAU: ERROR in opening TAU library in auditor.\\n\");\n  }\n}\n#endif\n\n#endif //TAU_TRACK_LD_LOADER\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/wrappers/memory/memory_wrapper_dynamic.c": "/****************************************************************************\n**      TAU Portable Profiling Package         **\n**      http://www.cs.uoregon.edu/research/tau             **\n*****************************************************************************\n**    Copyright 2010                     **\n**    Department of Computer and Information Science, University of Oregon **\n**    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n****************************************************************************/\n/****************************************************************************\n**  File          : memory_wrapper_dynamic.c\n**  Description   : TAU Profiling Package\n**  Contact       : tau-bugs@cs.uoregon.edu\n**  Documentation : See http://www.cs.uoregon.edu/research/tau\n**\n**  Description   : TAU memory profiler and debugger\n**\n****************************************************************************/\n\n// Must be defined before dlfcn.h to get RTLD_NEXT\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <dlfcn.h>\n\n#include <TAU.h>\n#include <Profile/Profiler.h>\n#include <Profile/TauMemory.h>\n#include <memory_wrapper.h>\n\n\n#if 1\nvoid * get_system_function_handle(char const * name)\n{\n  char const * err;\n  void * handle;\n\n  // Reset error pointer\n  dlerror();\n\n  // Attempt to get the function handle\n  handle = dlsym(RTLD_NEXT, name);\n\n  // Detect errors\n  if ((err = dlerror())) {\n    // These calls are unsafe, but we're about to die anyway.\n    printf(\"Error getting %s handle: %s\\n\", name, err);\n    fflush(stdout);\n    exit(1);\n  }\n\n  return handle;\n}\n#endif\n\n\n/******************************************************************************\n * libc memory allocation/deallocation wrappers\n ******************************************************************************/\n\n#ifdef HAVE_MALLOC\nvoid * malloc(size_t size)\n{\n  return malloc_wrapper(size);\n}\n#endif\n\n#ifdef HAVE_CALLOC\nvoid * calloc(size_t count, size_t size)\n{\n  return calloc_wrapper(count, size);\n}\n#endif\n\n#ifdef HAVE_REALLOC\nvoid * realloc(void * ptr, size_t size)\n{\n  return realloc_wrapper(ptr, size);\n}\n#endif\n\n#ifdef HAVE_FREE\nvoid free(void * ptr)\n{\n  free_wrapper(ptr);\n}\n#endif\n\n#ifdef HAVE_MEMALIGN\nvoid * memalign(size_t alignment, size_t size)\n{\n  return memalign_wrapper(alignment, size);\n}\n#endif\n\n#ifdef HAVE_POSIX_MEMALIGN\nint posix_memalign(void **ptr, size_t alignment, size_t size)\n{\n  return posix_memalign_wrapper(ptr, alignment, size);\n}\n#endif\n\n#ifdef HAVE_VALLOC\nvoid * valloc(size_t size)\n{\n  return valloc_wrapper(size);\n}\n#endif\n\n#ifdef HAVE_PVALLOC\nvoid * pvalloc(size_t size)\n{\n  return pvalloc_wrapper(size);\n}\n#endif\n\n\n/******************************************************************************\n *\n ******************************************************************************/\n\nmalloc_t get_system_malloc()\n{\n#ifdef HAVE_MALLOC\n  return (malloc_t)get_system_function_handle(\"malloc\");\n#else\n  return NULL;\n#endif\n}\n\ncalloc_t get_system_calloc()\n{\n#ifdef HAVE_CALLOC\n  return (calloc_t)get_system_function_handle(\"calloc\");\n#else\n  return NULL;\n#endif\n}\n\nrealloc_t get_system_realloc()\n{\n#ifdef HAVE_REALLOC\n  return (realloc_t)get_system_function_handle(\"realloc\");\n#else\n  return NULL;\n#endif\n}\n\nmemalign_t get_system_memalign()\n{\n#ifdef HAVE_MEMALIGN\n  return (memalign_t)get_system_function_handle(\"memalign\");\n#else\n  return NULL;\n#endif\n}\n\nposix_memalign_t get_system_posix_memalign()\n{\n#ifdef HAVE_POSIX_MEMALIGN\n  return (posix_memalign_t)get_system_function_handle(\"posix_memalign\");\n#else\n  return NULL;\n#endif\n}\n\nvalloc_t get_system_valloc()\n{\n#ifdef HAVE_VALLOC\n  return (valloc_t)get_system_function_handle(\"valloc\");\n#else\n  return NULL;\n#endif\n}\n\npvalloc_t get_system_pvalloc()\n{\n#ifdef HAVE_PVALLOC\n  return (pvalloc_t)get_system_function_handle(\"pvalloc\");\n#else\n  return NULL;\n#endif\n}\n\nfree_t get_system_free()\n{\n#ifdef HAVE_FREE\n  return (free_t)get_system_function_handle(\"free\");\n#else\n  return NULL;\n#endif\n}\n\n\n/******************************************************************************\n * pthread wrappers \n ******************************************************************************/\n\n#if 0\nint pthread_getattr_np(pthread_t thread, pthread_attr_t *attr)\n{\n  typedef int (*pthread_getattr_np_t)(pthread_t, pthread_attr_t*);\n  static pthread_getattr_np_t pthread_getattr_np_system = NULL;\n\n  int retval;\n\n  memory_wrapper_disable();\n\n  if (!pthread_getattr_np_system) {\n    pthread_getattr_np_system = (pthread_getattr_np_t)get_system_function_handle(\"pthread_getattr_np\");\n  }\n\n  retval = pthread_getattr_np_system(thread, attr);\n  \n  memory_wrapper_enable();\n\n  return retval;\n}\n\nint pthread_attr_destroy(pthread_attr_t *attr)\n{\n  typedef int (*pthread_attr_destroy_t)(pthread_attr_t *);\n  static pthread_attr_destroy_t pthread_attr_destroy_system = NULL;\n\n  int retval;\n\n  memory_wrapper_disable();\n\n  if (!pthread_attr_destroy_system) {\n    pthread_attr_destroy_system = (pthread_attr_destroy_t)get_system_function_handle(\"pthread_attr_destroy\");\n  }\n\n  retval = pthread_attr_destroy_system(attr);\n\n  memory_wrapper_enable();\n\n  return retval;\n}\n\nint pthread_attr_init(pthread_attr_t *attr)\n{\n  typedef int (*pthread_attr_init_t)(pthread_attr_t *);\n  static pthread_attr_init_t pthread_attr_init_system = NULL;\n\n  int retval;\n\n  memory_wrapper_disable();\n\n  if (!pthread_attr_init_system) {\n    pthread_attr_init_system = (pthread_attr_init_t)get_system_function_handle(\"pthread_attr_init\");\n  }\n\n  retval = pthread_attr_init_system(attr);\n\n  memory_wrapper_enable();\n\n  return retval;\n}\n#endif\n\n/*********************************************************************\n * EOF\n ********************************************************************/\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauOpenMPCollectorAPI.cpp": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#ifdef __APPLE__\n#include <dlfcn.h>\n#endif\n\n//All encompassing macro. If tr6 is being built, we build this object file anyway, \n//but we do not want issues with symbol re-definitions, etc during linking. So we keep\n//a dummy object file to save ourselves the headache.\n\n#if !defined(TAU_USE_OMPT_TR6)\n \n// set some macros, so we get implementation-dependent differences.\n// Right now, there are 3 different interpretations of the OMPT \"standard\"\n\n#if defined(TAU_USE_OMPT)\n // oldest implementation\n #if defined(TAU_IBM_OMPT)\n  #define OMPT_VERSION 1\n  #include <lomp/omp.h>\n #elif defined(__ICC) || defined(__INTEL_COMPILER)\n  // check for intel second\n  #define OMPT_VERSION 3 // someday we will update this, but in the meantime...\n  #define STATES_ARE_TYPE_INT\n  #define GOMP_USING_INTEL_RUNTIME\n #elif defined(TAU_MPC) \n  // check for MPC support\n  #define OMPT_VERSION 3\n  #define BROKEN_CPLUSPLUS_INTERFACE\n #elif defined(TAU_OPEN64ORC) \n  // check for MPC support\n  #define OMPT_VERSION 3\n  #define STATES_ARE_TYPE_INT\n #elif !defined (TAU_OPEN64ORC) && !defined (TAU_MPC) && \\\n     (defined (__GNUC__) && defined (__GNUC_MINOR__) && defined (__GNUC_PATCHLEVEL__))\n  // check for GOMP using Intel's runtime support\n  #define OMPT_VERSION 3\n  #define STATES_ARE_TYPE_INT\n  #define GOMP_USING_INTEL_RUNTIME\n #else \n  // all else\n  #define OMPT_VERSION 3\n #endif\n#endif // TAU_USE_OMPT\n\n\n#include \"omp_collector_api.h\"\n#include \"omp.h\"\n#include <stdlib.h>\n#include <stdio.h> \n#include <string.h> \n#include <stdbool.h> \n#include \"dlfcn.h\" // for dynamic loading of symbols\n#ifdef MERCURIUM_EXTRA\n# define RTLD_DEFAULT   ((void *) 0)\n#endif\n#include \"Profiler.h\"\n#ifdef TAU_USE_LIBUNWIND\n#define UNW_LOCAL_ONLY\n#include <libunwind.h>\n#endif\n#include \"TauEnv.h\"\n#include <Profile/TauBfd.h>\n#ifdef TAU_MPC\n#include <Profile/MPCThreadLayer.h>\n#endif\n#include <set>\n\n/* An array of this struct is shared by all threads. To make sure we don't have false\n * sharing, the struct is 64 bytes in size, so that it fits exactly in\n * one (or two) cache lines. That way, when one thread updates its data\n * in the array, it won't invalidate the cache line for other threads. \n * This is very important with timers, as all threads are entering timers\n * at the same time, and every thread will invalidate the cache line\n * otherwise. */\nstruct Tau_collector_status_flags {\n    char idle; // 4 bytes\n    char busy; // 4 bytes\n    char parallel; // 4 bytes\n    char ordered_region_wait; // 4 bytes\n    char ordered_region; // 4 bytes\n    char task_exec; // 4 bytes\n    char looping; // 4 bytes\n    char acquired; // 4 bytes\n    char waiting; // 4 bytes\n    unsigned long regionid; // 8 bytes\n    unsigned long taskid; // 8 bytes\n    int *signal_message; // preallocated message for signal handling, 8 bytes\n    int *region_message; // preallocated message for region handling, 8 bytes\n    int *task_message; // preallocated message for task handling, 8 bytes\n    char _pad[128-((3*sizeof(int*))+(9*sizeof(char))+(2*sizeof(unsigned long)))];\n};\n\n#define TAU_OMPT_WAIT_ACQ_CRITICAL  0x01\n#define TAU_OMPT_WAIT_ACQ_ORDERED   0x02\n#define TAU_OMPT_WAIT_ACQ_ATOMIC    0x04\n#define TAU_OMPT_WAIT_ACQ_LOCK      0x08\n#define TAU_OMPT_WAIT_ACQ_NEXT_LOCK 0x10\n\n/* This array is shared by all threads. To make sure we don't have false\n * sharing, the struct is 64 bytes in size, so that it fits exactly in\n * one (or two) cache lines. That way, when one thread updates its data\n * in the array, it won't invalidate the cache line for other threads. \n * This is very important with timers, as all threads are entering timers\n * at the same time, and every thread will invalidate the cache line\n * otherwise. */\n#if defined __INTEL__COMPILER\n__declspec (align(64)) static struct Tau_collector_status_flags Tau_collector_flags[TAU_MAX_THREADS] = {0};\n#elif defined __GNUC__\nstatic struct Tau_collector_status_flags Tau_collector_flags[TAU_MAX_THREADS] __attribute__ ((aligned(64))) = {{0}};\n#else\nstatic struct Tau_collector_status_flags Tau_collector_flags[TAU_MAX_THREADS] = {0};\n#endif\n\n// this is map of region names, indexed by region id.\nstatic std::map<unsigned long, char*> * region_names = NULL;\nstatic std::map<unsigned long, char*> * task_names = NULL;\nstatic std::set<unsigned long> * region_trash_heap = NULL; // for slightly delayed string cleanup\n\n#if defined(TAU_MPC) || defined(GOMP_USING_INTEL_RUNTIME)\n//static sctk_thread_mutex_t writelock = SCTK_THREAD_MUTEX_INITIALIZER;\n//#define TAU_OPENMP_SET_LOCK sctk_thread_mutex_lock(&writelock)\n//#define TAU_OPENMP_UNSET_LOCK sctk_thread_mutex_lock(&writelock)\n#define TAU_OPENMP_SET_LOCK RtsLayer::LockDB();\n#define TAU_OPENMP_UNSET_LOCK RtsLayer::UnLockDB();\n#define TAU_OPENMP_INIT_LOCK \n#else\nstatic omp_lock_t writelock;\n#define TAU_OPENMP_SET_LOCK omp_set_lock(&writelock)\n#define TAU_OPENMP_UNSET_LOCK omp_unset_lock(&writelock)\n#define TAU_OPENMP_INIT_LOCK omp_init_lock(&writelock)\n#endif\n\nstatic int Tau_collector_enabled = 1;\n\nextern \"C\" void Tau_disable_collector_api() {\n  // if we didn't initialize the lock, we will crash...\n  if (!TauEnv_get_openmp_runtime_enabled()) return;\n  //TAU_OPENMP_SET_LOCK;\n  Tau_collector_enabled = 0;\n  //TAU_OPENMP_UNSET_LOCK;\n}\n\nstatic const char* __UNKNOWN_ADDR__ = \"UNKNOWN addr=<0>\";\nstatic const char* __UNKNOWN__ = \"UNKNOWN\";\nstatic const char* __BFD_UNKNOWN__ = \"UNRESOLVED UNKNOWN ADDR\";\n\nextern const int OMP_COLLECTORAPI_HEADERSIZE;\nchar OMP_EVENT_NAME[35][50]= {\n    \"OMP_EVENT_FORK\",\n    \"OMP_EVENT_JOIN\",\n    \"OMP_EVENT_THR_BEGIN_IDLE\",\n    \"OMP_EVENT_THR_END_IDLE\",\n    \"OMP_EVENT_THR_BEGIN_IBAR\",\n    \"OMP_EVENT_THR_END_IBAR\",\n    \"OMP_EVENT_THR_BEGIN_EBAR\",\n    \"OMP_EVENT_THR_END_EBAR\",\n    \"OMP_EVENT_THR_BEGIN_LKWT\",\n    \"OMP_EVENT_THR_END_LKWT\",\n    \"OMP_EVENT_THR_BEGIN_CTWT\",\n    \"OMP_EVENT_THR_END_CTWT\",\n    \"OMP_EVENT_THR_BEGIN_ODWT\",\n    \"OMP_EVENT_THR_END_ODWT\",\n    \"OMP_EVENT_THR_BEGIN_MASTER\",\n    \"OMP_EVENT_THR_END_MASTER\",\n    \"OMP_EVENT_THR_BEGIN_SINGLE\",\n    \"OMP_EVENT_THR_END_SINGLE\",\n    \"OMP_EVENT_THR_BEGIN_ORDERED\",\n    \"OMP_EVENT_THR_END_ORDERED\",\n    \"OMP_EVENT_THR_BEGIN_ATWT\",\n    \"OMP_EVENT_THR_END_ATWT\",\n    /* new events created by UH */\n    \"OMP_EVENT_THR_BEGIN_CREATE_TASK\",\n    \"OMP_EVENT_THR_END_CREATE_TASK_IMM\",\n    \"OMP_EVENT_THR_END_CREATE_TASK_DEL\",\n    \"OMP_EVENT_THR_BEGIN_SCHD_TASK\",\n    \"OMP_EVENT_THR_END_SCHD_TASK\",\n    \"OMP_EVENT_THR_BEGIN_SUSPEND_TASK\",\n    \"OMP_EVENT_THR_END_SUSPEND_TASK\",\n    \"OMP_EVENT_THR_BEGIN_STEAL_TASK\",\n    \"OMP_EVENT_THR_END_STEAL_TASK\",\n    \"OMP_EVENT_THR_FETCHED_TASK\",\n    \"OMP_EVENT_THR_BEGIN_EXEC_TASK\",\n    \"OMP_EVENT_THR_BEGIN_FINISH_TASK\",\n    \"OMP_EVENT_THR_END_FINISH_TASK\"\n};\n\n#if defined(TAU_USE_OMPT)\n// this is an array of state names for the OMPT interface.\n// For some reason, OMPT doesn't provide a fast lookup\n// for states based on the ID, so we have to make our own.\n// The states are enumerated, but not consecutive. :(\n// 128 should be enough, there aren't that many states.\n// but the bitcodes go up to about 110.\nstatic std::string* OMPT_STATE_NAMES[128] = {0};\nstatic int OMPT_NUM_STATES;\n#endif\n\nconst int OMP_COLLECTORAPI_HEADERSIZE=4*sizeof(int);\n\nstatic int (*Tau_collector_api)(void*) = NULL;\n\nusing namespace std;\n\nextern FunctionInfo * Tau_create_thread_state_if_necessary(const char* thread_state);\nextern FunctionInfo * Tau_create_thread_state_if_necessary_string(std::string thread_state);\n\nextern \"C\" char * TauInternal_CurrentCallsiteTimerName(int tid);\n\n/* This function provides a slightly \"delayed\" cleanup of region names.\n * In some runtimes (Intel, for example) the master thread in the team\n * can exit the region before all other threads are done with it. When\n * those threads try to access the name in the map using the id, the\n * name has to still be there. BUT, we can't leak memory. This code\n * will temporarially put the region id on the trash heap to be thrown\n * out when the heap exceeds a certain size.\n */\nvoid region_name_cleanup(unsigned long parallel_id) {\n  // this should be enough. One for each thread to have its own parallel region.\n  static const unsigned int max_size = omp_get_max_threads();\n  TAU_OPENMP_SET_LOCK;\n  // clean the heap if necessary\n  if (region_trash_heap->size() > max_size) {\n    std::set<unsigned long>::iterator it;\n    for (it = region_trash_heap->begin(); it != region_trash_heap->end(); ++it)\n    {\n        unsigned long r = *it;\n        char * tmpStr = (*region_names)[r];\n        //printf(\"done with Region %d, name %s\\n\", r, tmpStr); fflush(stdout);\n        free(tmpStr);\n        region_names->erase(r);\n    }\n    region_trash_heap->clear();\n  }\n  // put this region id on the trash heap.\n  if (parallel_id > 0) {\n    region_trash_heap->insert(parallel_id);\n  }\n  TAU_OPENMP_UNSET_LOCK;\n}\n\nvoid Tau_get_region_id(int tid) {\n    // if not available, return something useful\n    if (Tau_collector_api == NULL) {\n        Tau_collector_flags[tid].regionid = 0UL;\n        return;\n    }\n    // query the thread state\n    int rc = (Tau_collector_api)(Tau_collector_flags[tid].region_message);\n    Tau_collector_flags[tid].regionid = (unsigned long)Tau_collector_flags[tid].region_message[4];\n    if (rc !=0) {\n      TAU_VERBOSE(\"Error getting region id from ORA!\\n\");\n    }\n    return;\n}\n\nvoid Tau_get_task_id(int tid) {\n    // if not available, return something useful\n    if (Tau_collector_api == NULL) {\n        Tau_collector_flags[tid].taskid = 0UL;\n        return;\n    }\n    // query the thread state\n    int rc = (Tau_collector_api)(Tau_collector_flags[tid].task_message);\n    Tau_collector_flags[tid].taskid = (unsigned long)Tau_collector_flags[tid].task_message[4];\n    if (rc !=0) {\n      TAU_VERBOSE(\"Error getting task id from ORA!\\n\");\n    }\n    return;\n}\n\n#if !defined (TAU_PGI_OPENACC) && \\\n!defined (TAU_OPEN64ORC) && \\\n!defined (TAU_MPC) && \\\n(defined (__GNUC__) && \\\ndefined (__GNUC_MINOR__) && \\\ndefined (__GNUC_PATCHLEVEL__))\nextern \"C\" void * Tau_get_gomp_proxy_address(void);\n#endif\n\n#if defined(TAU_BFD) || defined(__APPLE__)\n\n/*\n *-----------------------------------------------------------------------------\n * Simple hash table to map function addresses to region names/identifier\n *-----------------------------------------------------------------------------\n */\n\nstruct OmpHashNode\n{\n  OmpHashNode() { }\n\n  TauBfdInfo info;        ///< Filename, line number, etc.\n  char * location;\n  bool resolved;\n};\n\nextern void Tau_delete_hash_table(void);\n\nstruct OmpHashTable : public TAU_HASH_MAP<unsigned long, OmpHashNode*>\n{\n  OmpHashTable() { }\n  virtual ~OmpHashTable() {\n    Tau_delete_hash_table();\n  }\n};\n\nstatic OmpHashTable & OmpTheHashTable()\n{\n  static OmpHashTable htab;\n  return htab;\n}\n\nstatic tau_bfd_handle_t & OmpTheBfdUnitHandle()\n{\n  static tau_bfd_handle_t OmpbfdUnitHandle = TAU_BFD_NULL_HANDLE;\n  if (OmpbfdUnitHandle == TAU_BFD_NULL_HANDLE) {\n    RtsLayer::LockEnv();\n    if (OmpbfdUnitHandle == TAU_BFD_NULL_HANDLE) {\n#if defined(TAU_BFD)\n      OmpbfdUnitHandle = Tau_bfd_registerUnit();\n#endif\n    }\n    RtsLayer::UnLockEnv();\n  }\n  return OmpbfdUnitHandle;\n}\n\nvoid Tau_delete_hash_table(void) {\n  // clear the hash map to eliminate memory leaks\n  OmpHashTable & mytab = OmpTheHashTable();\n  for ( TAU_HASH_MAP<unsigned long, OmpHashNode*>::iterator it = mytab.begin(); it != mytab.end(); ++it ) {\n    OmpHashNode * node = it->second;\n    if (node) {\n\tif (node->location) {\n        \tfree (node->location);\n\t}\n    }\n    delete node;\n  }\n  mytab.clear();\n  Tau_delete_bfd_units();\n}\n\n// this function won't actually do the backtrace, but rather get the function\n// info for frame pointer of the outlined region.\nchar * get_proxy_name(unsigned long ip) {\n    char * location = NULL;\n    tau_bfd_handle_t & OmpbfdUnitHandle = OmpTheBfdUnitHandle();\n    if (ip == 0) {\n        //printf(\"IP IS ZERO!!!\\n\"); fflush(stdout); //abort();\n        location = (char*)malloc(strlen(__UNKNOWN_ADDR__)+1);\n        strcpy(location, __UNKNOWN_ADDR__);\n        return location;\n    }\n    //TAU_OPENMP_SET_LOCK;\n    OmpHashNode * node = OmpTheHashTable()[ip];\n    //TAU_OPENMP_UNSET_LOCK;\n    if (!node) {\n        node = new OmpHashNode;\n        char * routine = NULL;\n        if (TauEnv_get_bfd_lookup()) {\n            TAU_OPENMP_SET_LOCK;\n#if defined(__APPLE__)\n      Dl_info info;\n      int rc = dladdr((const void *)ip, &info);\n      if (rc == 0) {\n        node->resolved = false;\n      } else {\n        node->resolved = true;\n        node->info.probeAddr = ip;\n        node->info.filename = strdup(info.dli_fname);\n        node->info.funcname = strdup(info.dli_sname);\n        node->info.lineno = 0; // Apple doesn't give us line numbers.\n      }\n#else\n            Tau_bfd_resolveBfdInfo(OmpbfdUnitHandle, ip, node->info);\n#endif\n            TAU_OPENMP_UNSET_LOCK;\n            // Build routine name for TAU function info\n            unsigned int size = strlen(node->info.funcname) + strlen(node->info.filename) + 128;\n            routine = (char*)malloc(size);\n            sprintf(routine, \"%s [{%s} {%d,0}]\", node->info.funcname, node->info.filename, node->info.lineno);\n        } else {\n        char addrString[64];\n        sprintf(addrString, \"%p\", (void*)ip);\n            unsigned int size = strlen(__BFD_UNKNOWN__) + strlen(addrString) + 2;\n            routine = (char*)malloc(size);\n            sprintf(routine, \"%s %s\", __BFD_UNKNOWN__, addrString);\n        }\n    node->location = routine;\n        TAU_OPENMP_SET_LOCK;\n        OmpTheHashTable()[ip] = node;\n        TAU_OPENMP_UNSET_LOCK;\n    }\n\n    location = (char*)malloc(strlen(node->location)+1);\n    strcpy(location, node->location);\n    return location;\n}\n#else /* defined (TAU_BFD) */\n// this function will just format the instruction pointer\nchar * get_proxy_name(unsigned long ip) {\n    char * location = NULL;\n    if (ip == 0) {\n        //printf(\"IP IS ZERO!!!\\n\"); fflush(stdout); //abort();\n        location = (char*)malloc(strlen(__UNKNOWN_ADDR__)+1);\n        strcpy(location, __UNKNOWN_ADDR__);\n        return location;\n    }\n    location = (char*)malloc(128);\n    sprintf(location, \"UNRESOLVED ADDR %p\", (void*)ip);\n    return location;\n}\n#endif /* defined (TAU_BFD) */\n\n#ifdef TAU_UNWIND\ntypedef struct {\n    unsigned long pc;\n    int moduleIdx;\n    char *name;\n} Tau_collector_api_CallSiteInfo;\n\nchar * show_backtrace (int tid, int offset) {\n    char * location = NULL;\n    unw_cursor_t cursor; unw_context_t uc;\n    memset(&cursor,0,sizeof(cursor));\n    memset(&uc,0,sizeof(uc));\n    unw_word_t ip;\n\n    tau_bfd_handle_t & OmpbfdUnitHandle = OmpTheBfdUnitHandle();\n\n    unw_getcontext(&uc);\n    unw_init_local(&cursor, &uc);\n    int index = 0;\n    static int basedepth = -1;\n    int depth = basedepth + offset;\n\n    while (unw_step(&cursor) > 0) {\n        if (++index >= depth) {\n            unw_get_reg(&cursor, UNW_REG_IP, &ip);\n            TAU_OPENMP_SET_LOCK;\n            OmpHashNode * node = OmpTheHashTable()[ip];\n            TAU_OPENMP_UNSET_LOCK;\n            if (!node) {\n              node = new OmpHashNode;\n              char * routine = NULL;\n              if (TauEnv_get_bfd_lookup()) {\n                Tau_bfd_resolveBfdInfo(OmpbfdUnitHandle, ip, node->info);\n                // Build routine name for TAU function info\n                unsigned int size = strlen(node->info.funcname) + strlen(node->info.filename) + 128;\n                routine = (char*)malloc(size);\n                sprintf(routine, \"%s [{%s} {%d,0}]\", node->info.funcname, node->info.filename, node->info.lineno);\n              } else {\n            char addrString[64];\n            sprintf(addrString, \"%p\", (void*)ip);\n                unsigned int size = strlen(__BFD_UNKNOWN__) + strlen(addrString) + 2;\n                routine = (char*)malloc(size);\n                sprintf(routine, \"%s %s\", __BFD_UNKNOWN__, addrString);\n              }\n              node->location = routine;\n            //TAU_OPENMP_SET_LOCK;\n              OmpTheHashTable()[ip] = node;\n            //TAU_OPENMP_UNSET_LOCK;\n            }\n            //TAU_VERBOSE(\"%d %d %d %s\\n\",basedepth, depth, index, node->location); fflush(stderr);\n            if (basedepth == -1) {\n                if (strncmp(node->info.funcname,\"Tau_\", 4) == 0) {  // in TAU\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"my_\", 3) == 0) { // in this file\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"addr=<\", 6) == 0) { // in OpenMP runtime\n                    continue; // keep unwinding\n                }\n#if defined (TAU_OPEN64ORC)\n                else if (strncmp(node->info.funcname,\"__ompc_\", 7) == 0) { // in OpenUH runtime\n                    continue; // keep unwinding\n                }\n#elif defined (__INTEL_COMPILER)\n                else if (strncmp(node->info.funcname,\"my_parallel_region_create\", 25) == 0) { // in OMPT wraper (see below)\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"__kmp\", 5) == 0) { // in Intel runtime\n                    continue; // keep unwinding\n                }\n#elif defined(TAU_USE_OMPT) || defined(TAU_IBM_OMPT)\n                else if (strncmp(node->info.funcname,\"my_\", 3) == 0) { // in OMPT wraper (see below)\n                    continue; // keep unwinding\n                }\n#else /* assume we are using gcc */\n                else if (strncmp(node->info.funcname,\"tau_GOMP\", 8) == 0) {  // in GOMP wrapper\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"__wrap_GOMP\", 11) == 0) {  // in GOMP wrapper\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"GOMP_\", 5) == 0) {  // in GOMP runtime\n                    continue; // keep unwinding\n                } else if (strncmp(node->info.funcname,\"__ompc_event_callback\", 21) == 0) { // in GOMP wrapper\n                    continue; // keep unwinding\n                } \n#endif\n                // stop unwinding\n                basedepth = index;\n            }\n            location = (char*)malloc(strlen(node->location)+1);\n            strcpy(location, node->location);\n            break;\n        }\n    }\n    return location;\n}\n#endif\n\nextern \"C\" void Tau_get_current_region_context(int tid, unsigned long ip, bool task) {\n    char * tmpStr = NULL;\n    /* OpenUH can use OMPT. */\n#if !defined (TAU_PGI_OPENACC) && \\\n(!defined (TAU_OPEN64ORC) || defined(TAU_USE_OMPT)) && \\\n(defined (__GNUC__) && \\\ndefined (__GNUC_MINOR__) && \\\ndefined (__GNUC_PATCHLEVEL__)) // IBM OMPT and Generic ORA support requires unwinding\n#if !defined (TAU_USE_OMPT) && \\\n    !defined (TAU_MPC)  // TAU_MPC without OMPT\n    // make a call to the GOMP wrapper to get the outlined function pointer\n    ip = (unsigned long)Tau_get_gomp_proxy_address();\n#endif\n    // convert the address to source information\n    tmpStr = get_proxy_name(ip); // find our top level timer\n#elif defined(TAU_UNWIND) && defined(TAU_BFD) // need them both\n    // unfortunately, for regular ORA support we need to unwind the call stack\n    if (TauEnv_get_openmp_runtime_context() == 2) { // region\n      tmpStr = show_backtrace(tid, 0); // find our source location\n      if (tmpStr == NULL) {\n          // fall back to the top level timer\n          tmpStr = TauInternal_CurrentCallsiteTimerName(tid); // use the top level timer\n      }\n    } else { // timer or none\n      tmpStr = TauInternal_CurrentCallsiteTimerName(tid); // use the top level timer\n    }\n#else\n    tmpStr = TauInternal_CurrentCallsiteTimerName(tid); // use the top level timer\n#endif\n    if (tmpStr == NULL) {\n        //printf(\"tmpStr IS NULL!!! %p\\n\", ip); fflush(stdout); //abort();\n        tmpStr = strdup((char*)__UNKNOWN__);\n    }\n\n    // save the region name for the worker threads in this team to access\n    if (task) {\n        //TAU_VERBOSE(\"Task %lu has name %s\\n\", Tau_collector_flags[tid].taskid, tmpStr);\n        TAU_OPENMP_SET_LOCK;\n        (*task_names)[Tau_collector_flags[tid].taskid] = strdup(tmpStr);\n        TAU_OPENMP_UNSET_LOCK;\n    } else {\n        //TAU_VERBOSE(\"Region %lu has name %s\\n\", Tau_collector_flags[tid].regionid, tmpStr);\n        TAU_OPENMP_SET_LOCK;\n        (*region_names)[Tau_collector_flags[tid].regionid] = strdup(tmpStr);\n        TAU_OPENMP_UNSET_LOCK;\n    }\n    free (tmpStr);\n    return;\n}\n\n/* Using the region or task ID, get our event context */\nextern \"C\" char * Tau_get_my_region_context(int tid, int forking, bool task) {\n    char * tmpStr = NULL;\n#if !defined (TAU_PGI_OPENACC) && \\\n!defined (TAU_USE_OMPT) && \\\n    !defined (TAU_MPC)  && \\\n    (!defined (TAU_OPEN64ORC) || defined(TAU_USE_OMPT)) && \\\n(defined (__GNUC__) && \\\ndefined (__GNUC_MINOR__) && \\\ndefined (__GNUC_PATCHLEVEL__))\n    // if using the GOMP wrapper, we don't have a region or task ID\n    // so use the outlined function address\n    unsigned long ip = (unsigned long)Tau_get_gomp_proxy_address();\n    tmpStr = get_proxy_name(ip);\n#else // not GOMP...\n    if (task) {\n        TAU_OPENMP_SET_LOCK;\n        tmpStr = (*task_names)[Tau_collector_flags[tid].taskid];\n        TAU_OPENMP_UNSET_LOCK;\n        //TAU_VERBOSE(\"Thread %d, Task %lu has name %s\\n\", tid, Tau_collector_flags[tid].taskid, tmpStr);\n    } else {\n        TAU_OPENMP_SET_LOCK;\n#if defined (TAU_IBM_OMPT) // IBM OMPT switches things up...\n        tmpStr = (*region_names)[Tau_collector_flags[tid].taskid];\n#else // not IBM OMPT\n        tmpStr = (*region_names)[Tau_collector_flags[tid].regionid];\n#endif // TAU_IBM_OMPT\n        TAU_OPENMP_UNSET_LOCK;\n        //TAU_VERBOSE(\"Thread %d, Region %lu has name %s\\n\", tid, Tau_collector_flags[tid].regionid, tmpStr);\n    }\n#endif // check for GOMP\n    if (tmpStr == NULL) {\n        //printf(\"tmpStr IS NULL!!! %d, %ld\\n\", tid, Tau_collector_flags[tid].regionid); fflush(stdout); //abort();\n        tmpStr = strdup((char*)__UNKNOWN__);\n    }\n    return tmpStr;\n}\n\nextern \"C\" void Tau_pure_start_openmp_task(const char * n, int tid);\nextern \"C\" void Tau_pure_stop_openmp_task(const char * n, int tid);\n\n/*__inline*/ void Tau_omp_start_timer(const char * state, int tid, int use_context, int forking, bool task) {\n  //TAU_TRACK_MEMORY_FOOTPRINT_HERE();\n  // 0 means no context wanted\n  if (use_context == 0 || TauEnv_get_openmp_runtime_context() == 0) {\n    //  no context for the event\n    Tau_pure_start_openmp_task(state, tid);\n  } else {\n    int contextLength = 10;\n    char * regionIDstr = NULL;\n    char * tmpStr = Tau_get_my_region_context(tid, forking, task);\n    contextLength = strlen(tmpStr);\n    regionIDstr = (char*)malloc(contextLength + 32);\n    sprintf(regionIDstr, \"%s: %s\", state, tmpStr);\n    //fprintf(stderr, \"%d: start '%s'\\n\", tid, regionIDstr); fflush(stderr);\n    Tau_pure_start_openmp_task(regionIDstr, tid);\n#if defined(TAU_USE_OMPT) \n    if (strcmp(tmpStr, __UNKNOWN__) == 0) {\n      free(tmpStr);\n    }\n#else\n    free(tmpStr);\n#endif\n    free(regionIDstr);\n  }\n}\n\n/*__inline*/ void Tau_omp_stop_timer(const char * state, int tid, int use_context, bool task) {\n  //TAU_TRACK_MEMORY_FOOTPRINT_HERE();\n    if (Tau_collector_enabled) {\n      if (use_context == 0 || TauEnv_get_openmp_runtime_context() == 0) {\n    //fprintf(stderr, \"%d: stop \\n\", tid); fflush(stderr);\n        Tau_stop_current_timer_task(tid);\n      } else {\n        int contextLength = 10;\n        char * regionIDstr = NULL;\n        char * tmpStr = Tau_get_my_region_context(tid, 0, task);\n        contextLength = strlen(tmpStr);\n        regionIDstr = (char*)malloc(contextLength + 32);\n        sprintf(regionIDstr, \"%s: %s\", state, tmpStr);\n    //fprintf(stderr, \"%d: stop '%s'\\n\", tid, regionIDstr); fflush(stderr);\n        Tau_pure_stop_openmp_task(regionIDstr, tid);\n        free(regionIDstr); \n#if defined(TAU_USE_OMPT) \n    if (strcmp(tmpStr, __UNKNOWN__) == 0) {\n      free(tmpStr);\n    }\n#else\n    free(tmpStr);\n#endif\n      }\n    }\n}\n\nextern \"C\" void Tau_omp_event_handler(OMP_COLLECTORAPI_EVENT event) {\n    // THIS is here in case the very last statement in the\n    // program is a parallel region - the worker threads\n    // may exit AFTER thread 0 has exited, which triggered\n    // the worker threads to stop all timers and dump.\n    if (!Tau_collector_enabled || \n        !Tau_RtsLayer_TheEnableInstrumentation()) return;\n\n    Tau_global_incr_insideTAU();\n\n    int tid = Tau_get_thread();\n    //fprintf(stderr, \"** Thread: %d, (i:%d b:%d p:%d w:%d o:%d t:%d) EVENT:%s **\\n\", tid, Tau_collector_flags[tid].idle, Tau_collector_flags[tid].busy, Tau_collector_flags[tid].parallel, Tau_collector_flags[tid].ordered_region_wait, Tau_collector_flags[tid].ordered_region, Tau_collector_flags[tid].task_exec, OMP_EVENT_NAME[event-1]); fflush(stderr);\n\n    // query the ORA to get the region id\n    Tau_get_region_id (tid);\n\n    switch(event) {\n        case OMP_EVENT_FORK:\n            Tau_get_current_region_context(tid, 0LU, false);\n            Tau_omp_start_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, 1, false);\n            Tau_collector_flags[tid].parallel++;\n            break;\n        case OMP_EVENT_JOIN:\n            if (Tau_collector_flags[tid].parallel>0) {\n                Tau_omp_stop_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, false);\n                Tau_collector_flags[tid].parallel--;\n            }\n            region_name_cleanup(Tau_collector_flags[tid].regionid);\n            break;\n        case OMP_EVENT_THR_BEGIN_IDLE:\n            // sometimes IDLE can be called twice in a row\n            if (Tau_collector_flags[tid].idle == 1 && \n                    Tau_collector_flags[tid].busy == 0) {\n                break;\n            }\n            if (Tau_collector_flags[tid].busy == 1) {\n                Tau_omp_stop_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, false);\n                Tau_collector_flags[tid].busy = 0;\n            }\n            Tau_collector_flags[tid].idle = 1;\n            break;\n        case OMP_EVENT_THR_END_IDLE:\n            Tau_omp_start_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, 1, false);\n            Tau_collector_flags[tid].busy = 1;\n            Tau_collector_flags[tid].idle = 0;\n            break;\n        case OMP_EVENT_THR_BEGIN_IBAR:\n            Tau_omp_start_timer(\"OpenMP_IMPLICIT_BARRIER\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_IBAR:\n            Tau_omp_stop_timer(\"OpenMP_IMPLICIT_BARRIER\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_EBAR:\n            Tau_omp_start_timer(\"OpenMP_EXPLICIT_BARRIER\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_EBAR:\n            Tau_omp_stop_timer(\"OpenMP_EXPLICIT_BARRIER\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_LKWT:\n            Tau_omp_start_timer(\"OpenMP_LOCK_WAIT\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_LKWT:\n            Tau_omp_stop_timer(\"OpenMP_LOCK_WAIT\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_CTWT:\n            Tau_omp_start_timer(\"OpenMP_CRITICAL_SECTION_WAIT\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_CTWT:\n            Tau_omp_stop_timer(\"OpenMP_CRITICAL_SECTION_WAIT\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_ODWT:\n            // for some reason, the ordered region wait is entered twice for some threads.\n            if (Tau_collector_flags[tid].ordered_region_wait == 0) {\n                Tau_omp_start_timer(\"OpenMP_ORDERED_REGION_WAIT\", tid, 1, 0, false);\n            }\n            Tau_collector_flags[tid].ordered_region_wait = 1;\n            break;\n        case OMP_EVENT_THR_END_ODWT:\n            if (Tau_collector_flags[tid].ordered_region_wait == 1) {\n                Tau_omp_stop_timer(\"OpenMP_ORDERED_REGION_WAIT\", tid, 1, false);\n            }\n            Tau_collector_flags[tid].ordered_region_wait = 0;\n            break;\n        case OMP_EVENT_THR_BEGIN_MASTER:\n            Tau_omp_start_timer(\"OpenMP_MASTER_REGION\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_MASTER:\n            Tau_omp_stop_timer(\"OpenMP_MASTER_REGION\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_SINGLE:\n            Tau_omp_start_timer(\"OpenMP_SINGLE_REGION\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_SINGLE:\n            Tau_omp_stop_timer(\"OpenMP_SINGLE_REGION\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_ORDERED:\n            // for some reason, the ordered region is entered twice for some threads.\n            if (Tau_collector_flags[tid].ordered_region == 0) {\n                Tau_omp_start_timer(\"OpenMP_ORDERED_REGION\", tid, 1, 0, false);\n                Tau_collector_flags[tid].ordered_region = 1;\n            }\n            break;\n        case OMP_EVENT_THR_END_ORDERED:\n            if (Tau_collector_flags[tid].ordered_region == 1) {\n                Tau_omp_stop_timer(\"OpenMP_ORDERED_REGION\", tid, 1, false);\n            }\n            Tau_collector_flags[tid].ordered_region = 0;\n            break;\n        case OMP_EVENT_THR_BEGIN_ATWT:\n            Tau_omp_start_timer(\"OpenMP_ATOMIC_REGION_WAIT\", tid, 1, 0, false);\n            break;\n        case OMP_EVENT_THR_END_ATWT:\n            Tau_omp_stop_timer(\"OpenMP_ATOMIC_REGION_WAIT\", tid, 1, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_CREATE_TASK:\n            // Open64 doesn't actually create a task if there is just one thread.\n            // In that case, there won't be an END_CREATE.\n            \n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n#if defined (TAU_OPEN64ORC)\n            if (omp_get_num_threads() > 1) {\n                Tau_omp_start_timer(\"OpenMP_CREATE_TASK\", tid, 0, 0, false);\n            }\n#else\n            Tau_omp_start_timer(\"OpenMP_CREATE_TASK\", tid, 1, 0, false);\n#endif\n            break;\n        case OMP_EVENT_THR_END_CREATE_TASK_IMM:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_CREATE_TASK\", tid, 0, false);\n            break;\n        case OMP_EVENT_THR_END_CREATE_TASK_DEL:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_CREATE_TASK\", tid, 0, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_SCHD_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_start_timer(\"OpenMP_SCHEDULE_TASK\", tid, 0, 0, false);\n            break;\n        case OMP_EVENT_THR_END_SCHD_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_SCHEDULE_TASK\", tid, 0, false);\n            break;\n// these events are somewhat unstable with OpenUH\n        case OMP_EVENT_THR_BEGIN_SUSPEND_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_start_timer(\"OpenMP_SUSPEND_TASK\", tid, 0, 0, false);\n            break;\n        case OMP_EVENT_THR_END_SUSPEND_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_SUSPEND_TASK\", tid, 0, false);\n            break;\n        case OMP_EVENT_THR_BEGIN_STEAL_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_start_timer(\"OpenMP_STEAL_TASK\", tid, 0, 0, false);\n            break;\n        case OMP_EVENT_THR_END_STEAL_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_STEAL_TASK\", tid, 0, false);\n            break;\n        case OMP_EVENT_THR_FETCHED_TASK:\n            // query the ORA to get the task id\n            //Tau_get_task_id (tid);\n            break;\n        case OMP_EVENT_THR_BEGIN_EXEC_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_start_timer(\"OpenMP_EXECUTE_TASK\", tid, 1, 0, false);\n            Tau_collector_flags[tid].task_exec += 1;\n            break;\n        case OMP_EVENT_THR_BEGIN_FINISH_TASK:\n            // query the ORA to get the task id\n            //Tau_get_task_id (tid);\n            // When we get a \"finish task\", there might be a task executing...\n            // or there might not.\n            if (Tau_collector_flags[tid].task_exec > 0) {\n                Tau_omp_stop_timer(\"OpenMP_EXECUTE_TASK\", tid, 0, false);\n                Tau_collector_flags[tid].task_exec -= 1;\n            }\n            Tau_omp_start_timer(\"OpenMP_FINISH_TASK\", tid, 0, 0, false);\n            break;\n        case OMP_EVENT_THR_END_FINISH_TASK:\n            // query the ORA to get the task id\n            Tau_get_task_id (tid);\n            Tau_omp_stop_timer(\"OpenMP_FINISH_TASK\", tid, 0, false);\n            break;\n        case OMP_EVENT_THR_RESERVED_IMPL:\n            break;\n        case OMP_EVENT_LAST:\n            break;\n    }\n    Tau_global_decr_insideTAU();\n    return;\n}\n\nstatic bool initializing = false;\nstatic bool initialized = false;\nstatic bool ora_success = false;\nstatic bool finalized = false;\n#if defined (TAU_USE_TLS)\n__thread bool is_master = false;\n#elif defined (TAU_USE_DTLS)\n__declspec(thread) bool is_master = false;\n#elif defined (TAU_USE_PGS)\n#include \"pthread.h\"\npthread_key_t thr_id_key;\n#endif\n\n#if TAU_DISABLE_SHARED\nextern int __omp_collector_api(void *);\n#endif\n\nextern \"C\" int Tau_initialize_collector_api(void) {\n    //if (Tau_collector_api != NULL || initializing) return 0;\n    if (initialized || initializing) return 0;\n    if (!TauEnv_get_openmp_runtime_enabled()) {\n      TAU_VERBOSE(\"COLLECTOR API disabled.\\n\"); \n      return 0;\n    }\n\n#if defined(TAU_USE_OMPT) || defined(TAU_IBM_OMPT)\n    TAU_VERBOSE(\"COLLECTOR API disabled, using OMPT instead.\\n\"); \n    return 0;\n#endif\n\n    initializing = true;\n\n    TAU_OPENMP_INIT_LOCK;\n\n\n    region_names = new std::map<unsigned long, char*>();\n    task_names = new std::map<unsigned long, char*>();\n    region_trash_heap = new std::set<unsigned long>();\n\n#if TAU_DISABLE_SHARED\n    Tau_collector_api = &__omp_collector_api;\n#else\n\n#if defined (TAU_BGP) || defined (TAU_BGQ) || defined (TAU_CRAYCNL)\n    // these special systems don't support dynamic symbol loading.\n    *(void **) (&Tau_collector_api) = NULL;\n\n#else\n\n    // this funny code is to avoid a warning from the compiler, because\n    // dlsym returns a void*\n    //*(void **) (&Tau_collector_api) = dlsym(RTLD_DEFAULT, \"__omp_collector_api\");\n    void *temp_fptr = dlsym(RTLD_DEFAULT, \"__omp_collector_api\");\n    memcpy(&Tau_collector_api, &temp_fptr, sizeof(temp_fptr));\n    if (Tau_collector_api == NULL) {\n\n#if defined (__INTEL_COMPILER)\n        char * libname = \"libiomp5.so\";\n#elif defined (__GNUC__) && defined (__GNUC_MINOR__) && defined (__GNUC_PATCHLEVEL__)\n\n#ifdef __APPLE__\n        char * libname = (char*)(\"libgomp_g_wrap.dylib\");\n#else /* __APPLE__ */\n        char * libname = (char*)(\"libTAU-gomp.so\");\n#endif /* __APPLE__ */\n\n#else /* assume we are using OpenUH */\n        char * libname = (char*)(\"libopenmp.so\");\n#endif /* __GNUC__ __GNUC_MINOR__ __GNUC_PATCHLEVEL__ */\n\n        TAU_VERBOSE(\"Looking for library: %s\\n\", libname); fflush(stdout); fflush(stderr);\n        void * handle = dlopen(libname, RTLD_NOW | RTLD_GLOBAL);\n\n        if (handle != NULL) {\n            TAU_VERBOSE(\"Looking for symbol in library: %s\\n\", libname); fflush(stdout); fflush(stderr);\n            // this funny code is to avoid a warning from the compiler, because\n            // dlsym returns a void*\n            //*(void **) (&Tau_collector_api) = dlsym(handle, \"__omp_collector_api\");\n            void *temp_fptr = dlsym(handle, \"__omp_collector_api\");\n            memcpy(&Tau_collector_api, &temp_fptr, sizeof(temp_fptr));\n        }\n    }\n    // set this now, either it's there or it isn't.\n    initialized = true;\n#endif //if defined (BGL) || defined (BGP) || defined (BGQ) || defined (TAU_CRAYCNL)\n\n    if (Tau_collector_api == NULL) {\n        TAU_VERBOSE(\"__omp_collector_api symbol not found... collector API not enabled. \\n\"); fflush(stdout); fflush(stderr);\n        initializing = false;\n        return -1;\n    }\n#endif // TAU_DISABLE_SHARED\n    TAU_VERBOSE(\"__omp_collector_api symbol found! Collector API enabled. \\n\"); fflush(stdout); fflush(stderr);\n\n    int rc = 0;\n\n    /*test: check for request start, 1 message */\n    int * message = (int *)malloc(OMP_COLLECTORAPI_HEADERSIZE+sizeof(int));\n    memset(message, 0, OMP_COLLECTORAPI_HEADERSIZE+sizeof(int));\n    message[0] = OMP_COLLECTORAPI_HEADERSIZE;\n    message[1] = OMP_REQ_START;\n    message[2] = OMP_ERRCODE_OK;\n    message[3] = 0;\n    rc = (Tau_collector_api)(message);\n    //TAU_VERBOSE(\"__omp_collector_api() returned %d\\n\", rc); fflush(stdout); fflush(stderr);\n    free(message);\n\n    /*test for request of all events*/\n    int i;\n    int num_req=OMP_EVENT_THR_END_FINISH_TASK; /* last event */\n    if (TauEnv_get_openmp_runtime_events_enabled()) {\n      int register_sz = sizeof(OMP_COLLECTORAPI_EVENT) + sizeof(unsigned long *);\n      int message_sz = OMP_COLLECTORAPI_HEADERSIZE + register_sz;\n      //printf(\"Register size: %d, Message size: %d, bytes: %d\\n\", register_sz, message_sz, num_req*message_sz+sizeof(int));\n      message = (int *) malloc(num_req*message_sz+sizeof(int));\n      memset(message, 0, num_req*message_sz+sizeof(int));\n      int * ptr = message;\n      for(i=0;i<num_req;i++) {  \n          //printf(\"Ptr: %p\\n\", ptr);\n          ptr[0] = message_sz;\n          ptr[1] = OMP_REQ_REGISTER;\n          ptr[2] = OMP_ERRCODE_OK;\n          ptr[3] = 0;\n          ptr[4] = OMP_EVENT_FORK + i;  // iterate over the events\n          unsigned long * lmem = (unsigned long *)(ptr+5);\n          *lmem = (unsigned long)Tau_omp_event_handler;\n          ptr = ptr + 7;\n      } \n      rc = (Tau_collector_api)(message);\n      TAU_VERBOSE(\"__omp_collector_api() returned %d\\n\", rc); fflush(stdout); fflush(stderr);\n      free(message);\n    }\n\n    // preallocate messages, because we can't malloc when signals are\n    // handled\n    int state_rsz = sizeof(OMP_COLLECTOR_API_THR_STATE);\n    int currentid_rsz = sizeof(unsigned long);\n    int task_rsz = sizeof(int);\n    for(i=0;i<omp_get_max_threads();i++) {  \n        // for getting thread state\n        Tau_collector_flags[i].signal_message = (int*)malloc(OMP_COLLECTORAPI_HEADERSIZE+state_rsz+sizeof(int));\n        memset(Tau_collector_flags[i].signal_message, 0, (OMP_COLLECTORAPI_HEADERSIZE+state_rsz+sizeof(int)));\n        Tau_collector_flags[i].signal_message[0] = OMP_COLLECTORAPI_HEADERSIZE+state_rsz;\n        Tau_collector_flags[i].signal_message[1] = OMP_REQ_STATE;\n        Tau_collector_flags[i].signal_message[2] = OMP_ERRCODE_OK;\n        Tau_collector_flags[i].signal_message[3] = state_rsz;\n        // for getting region id\n        Tau_collector_flags[i].region_message = (int *)malloc(OMP_COLLECTORAPI_HEADERSIZE+currentid_rsz+sizeof(int));\n        memset(Tau_collector_flags[i].region_message, 0, (OMP_COLLECTORAPI_HEADERSIZE+currentid_rsz+sizeof(int)));\n        Tau_collector_flags[i].region_message[0] = OMP_COLLECTORAPI_HEADERSIZE+currentid_rsz;\n        Tau_collector_flags[i].region_message[1] = OMP_REQ_CURRENT_PRID;\n        Tau_collector_flags[i].region_message[2] = OMP_ERRCODE_OK;\n        Tau_collector_flags[i].region_message[3] = currentid_rsz;\n        // for getting task id\n        Tau_collector_flags[i].task_message = (int *)malloc(OMP_COLLECTORAPI_HEADERSIZE+task_rsz+sizeof(int));\n        memset(Tau_collector_flags[i].task_message, 0, (OMP_COLLECTORAPI_HEADERSIZE+task_rsz+sizeof(int)));\n        Tau_collector_flags[i].task_message[0] = OMP_COLLECTORAPI_HEADERSIZE+task_rsz;\n        Tau_collector_flags[i].task_message[1] = OMP_REQ_CURRENT_PRID;\n        Tau_collector_flags[i].task_message[2] = OMP_ERRCODE_OK;\n        Tau_collector_flags[i].task_message[3] = task_rsz;\n    }\n\n#ifdef TAU_UNWIND\n    //Tau_Sampling_register_unit(); // not necessary now?\n#endif\n\n    if (TauEnv_get_openmp_runtime_states_enabled() == 1) {\n    // now, for the collector API support, create the 12 OpenMP states.\n    // preallocate State timers. If we create them now, we won't run into\n    // malloc issues later when they are required during signal handling.\n      TAU_OPENMP_SET_LOCK;\n      Tau_create_thread_state_if_necessary(\"OMP_UNKNOWN\");\n      Tau_create_thread_state_if_necessary(\"OMP_OVERHEAD\");\n      Tau_create_thread_state_if_necessary(\"OMP_WORKING\");\n      Tau_create_thread_state_if_necessary(\"OMP_IMPLICIT_BARRIER\"); \n      Tau_create_thread_state_if_necessary(\"OMP_EXPLICIT_BARRIER\");\n      Tau_create_thread_state_if_necessary(\"OMP_IDLE\");\n      Tau_create_thread_state_if_necessary(\"OMP_SERIAL\");\n      Tau_create_thread_state_if_necessary(\"OMP_REDUCTION\");\n      Tau_create_thread_state_if_necessary(\"OMP_LOCK_WAIT\");\n      Tau_create_thread_state_if_necessary(\"OMP_CRITICAL_WAIT\");\n      Tau_create_thread_state_if_necessary(\"OMP_ORDERED_WAIT\");\n      Tau_create_thread_state_if_necessary(\"OMP_ATOMIC_WAIT\");\n      Tau_create_thread_state_if_necessary(\"OMP_TASK_CREATE\");\n      Tau_create_thread_state_if_necessary(\"OMP_TASK_SCHEDULE\");\n      Tau_create_thread_state_if_necessary(\"OMP_TASK_SUSPEND\");\n      Tau_create_thread_state_if_necessary(\"OMP_TASK_STEAL\");\n      Tau_create_thread_state_if_necessary(\"OMP_TASK_FINISH\");\n      TAU_OPENMP_UNSET_LOCK;\n    }\n\n    initializing = false;\n    ora_success = true;\n    return 0;\n}\n\nextern \"C\" void __attribute__ ((destructor)) Tau_finalize_collector_api(void);\n\nextern \"C\" void Tau_finalize_collector_api(void) {\n#if defined(TAU_USE_OMPT)\n    return;\n#endif\n    if (!initialized) return;\n    if (!ora_success) return;\n    if (finalized) return;\n    Tau_global_incr_insideTAU();\n    TAU_OPENMP_SET_LOCK;\n    std::map<unsigned long, char*>::iterator it = region_names->begin();\n    while (it != region_names->end()) {\n      std::map<unsigned long, char*>::iterator eraseme = it;\n      ++it;\n      free(eraseme->second);\n      region_names->erase(eraseme);\n    }\n    region_names->clear();\n    it = task_names->begin();\n    while (it != task_names->end()) {\n      std::map<unsigned long, char*>::iterator eraseme = it;\n      ++it;\n      free(eraseme->second);\n      task_names->erase(eraseme);\n    }\n    task_names->clear();\n    delete region_names;\n    delete task_names;\n    delete region_trash_heap;\n    finalized = true;\n    TAU_OPENMP_UNSET_LOCK;\n    Tau_global_decr_insideTAU();\n    return;\n#if 0\n    TAU_VERBOSE(\"Tau_finalize_collector_api()\\n\");\n\n    omp_collector_message req;\n    void *message = (void *) malloc(4);   \n    int *sz = (int *) message; \n    *sz = 0;\n    int rc = 0;\n\n    /*test check for request stop, 1 message */\n    message = (void *) malloc(OMP_COLLECTORAPI_HEADERSIZE+sizeof(int));\n    Tau_fill_header(message, OMP_COLLECTORAPI_HEADERSIZE, OMP_REQ_STOP, OMP_ERRCODE_OK, 0, 1);\n    rc = (Tau_collector_api)(message);\n    TAU_VERBOSE(\"__omp_collector_api() returned %d\\n\", rc);\n    free(message);\n#endif\n}\n\nextern \"C\" int Tau_get_thread_omp_state(int tid) {\n    // if not available, return something useful\n    if (Tau_collector_api == NULL) return -1;\n    OMP_COLLECTOR_API_THR_STATE thread_state = THR_LAST_STATE;\n    // query the thread state\n    (Tau_collector_api)(Tau_collector_flags[tid].signal_message);\n    thread_state = (OMP_COLLECTOR_API_THR_STATE)Tau_collector_flags[tid].signal_message[4];\n    // return the thread state\n    return (int)(thread_state);\n}\n\n#ifdef TAU_USE_OMPT\n\n/********************************************************\n * The functions below are for the OMPT 4.0 interface.\n * ******************************************************/\n\n/* \n * This header file implements a dummy tool which will execute all\n * of the implemented callbacks in the OMPT framework. When a supported\n * callback function is executed, it will print a message with some\n * relevant information.\n */\n\n/* MPC is using the latest version of the interface. Intel is using close to\n * the latest version. IBM is lagging behind - we only have access to the \n * June 2013 version that supports an older interface. */\n#ifdef TAU_MPC\n__thread int __local_tau_tid = -1;\nint check_local_tid(void) {\n  if (__local_tau_tid == -1) {\n    //fprintf(stderr,\"NEW THREAD!\"); fflush(stderr);\n    __local_tau_tid = MPCThreadLayer::RegisterThread();\n    //fprintf(stderr,\" %d\\n\",__local_tau_tid); fflush(stderr);\n  }\n  return __local_tau_tid;\n}\n#endif\n\n#include <ompt.h>\n\ntypedef enum my_ompt_thread_type_e {\n my_ompt_thread_initial = 1,\n my_ompt_thread_worker = 2,\n my_ompt_thread_other = 3\n} my_ompt_thread_type_t;\n\n/* These two macros make sure we don't time TAU related events */\n\n// because MPC can't tell us when a new thread is spawned by OpenMP,\n// we have to check for a new thread every time we get an event.\n#ifdef TAU_MPC \n#define TAU_OMPT_COMMON_ENTRY \\\n    /* Never process anything internal to TAU */ \\\n    if (Tau_global_get_insideTAU() > 0) { \\\n        return; \\\n    } \\\n    Tau_global_incr_insideTAU(); \\\n    check_local_tid(); \\\n    int tid = Tau_get_thread();\n#else\n#define TAU_OMPT_COMMON_ENTRY \\\n    /* Never process anything internal to TAU */ \\\n    if (Tau_global_get_insideTAU() > 0) { \\\n        return; \\\n    } \\\n    Tau_global_incr_insideTAU(); \\\n    int tid = Tau_get_thread(); \\\n    /* fprintf(stderr, \"%d OMPT event: %s\\n\", tid, __func__); fflush(stderr); */\n#endif\n\n#define TAU_OMPT_COMMON_EXIT \\\n    Tau_global_decr_insideTAU(); \\\n    /*fprintf(stderr, \"Finished event: %s\\n\", __func__); fflush(stderr);*/\n\n/*\n * Mandatory Events\n * \n * The following events are supported by all OMPT implementations.\n */\n\n/* Entering a parallel region */\n#if OMPT_VERSION < 3 // no team size!\nextern \"C\" void my_parallel_region_begin (\n  ompt_task_id_t parent_task_id,    /* id of parent task            */\n  ompt_frame_t *parent_task_frame,  /* frame data of parent task    */\n  ompt_parallel_id_t parallel_id,   /* id of parallel region        */\n  void *parallel_function)          /* pointer to outlined function */\n#else\nextern \"C\" void my_parallel_region_begin (\n  ompt_task_id_t parent_task_id,    /* id of parent task            */\n  ompt_frame_t *parent_task_frame,  /* frame data of parent task    */\n  ompt_parallel_id_t parallel_id,   /* id of parallel region        */\n  uint32_t requested_team_size,     /* Region team size             */\n  void *parallel_function)          /* pointer to outlined function */\n#endif\n{\n  TAU_OMPT_COMMON_ENTRY;\n  Tau_collector_flags[tid].regionid = parallel_id;\n#ifdef TAU_IBM_OMPT\n  Tau_collector_flags[tid].taskid = parallel_id; // necessary for IBM, appears broken\n#endif\n  Tau_get_current_region_context(tid, (unsigned long)parallel_function, false);\n  //printf(\"%d New Region: parent id = %lu, exit_runtime_frame = %p, reenter_runtime_frame = %p, parallel_id = %lu, parallel_function = %p %s %p\\n\", tid, parent_task_id, parent_task_frame->exit_runtime_frame, parent_task_frame->reenter_runtime_frame, parallel_id, parallel_function, region_names[parallel_id], region_names[parallel_id]); fflush(stdout);\n  Tau_omp_start_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, 1, false);\n  Tau_collector_flags[tid].parallel++;\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Exiting a parallel region */\n#if OMPT_VERSION < 3\nextern \"C\" void my_parallel_region_end (\n  ompt_task_id_t parent_task_id,    /* id of parent task            */\n  ompt_frame_t *parent_task_frame,  /* frame data of parent task    */\n  ompt_parallel_id_t parallel_id,   /* id of parallel region        */\n  void *parallel_function)          /* pointer to outlined function */\n#else\nextern \"C\" void my_parallel_region_end (\n  ompt_parallel_id_t parallel_id,   /* id of parallel region        */\n  ompt_task_id_t parent_task_id)    /* id of parent task            */\n#endif\n{\n  TAU_OMPT_COMMON_ENTRY;\n  Tau_collector_flags[tid].regionid = parallel_id;\n  //printf(\"%d End Region: parent id = %lu, parallel_id = %lu\\n\", tid, parent_task_id, parallel_id); fflush(stdout);\n  if (Tau_collector_flags[tid].looping>0) {\n    Tau_omp_stop_timer(\"OpenMP_LOOP\", tid, 0, false);\n    Tau_collector_flags[tid].looping = 0;\n  }\n  if (Tau_collector_flags[tid].parallel>0) {\n    Tau_omp_stop_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, false);\n    Tau_collector_flags[tid].parallel--;\n  }\n  region_name_cleanup(parallel_id);\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Task creation */\nextern \"C\" void my_task_begin (\n  ompt_task_id_t parent_task_id,    /* id of parent task            */\n  ompt_frame_t *parent_task_frame,  /* frame data for parent task   */\n  ompt_task_id_t  new_task_id,      /* id of created task           */\n  void *task_function)              /* pointer to outlined function */\n{\n  TAU_OMPT_COMMON_ENTRY;\n  Tau_collector_flags[tid].taskid = new_task_id;\n  //TAU_VERBOSE(\"New Task: parent id = %lu, exit_runtime_frame = %p, reenter_runtime_frame = %p, new_task_id = %lu, task_function = %p\\n\", parent_task_id, parent_task_frame->exit_runtime_frame, parent_task_frame->reenter_runtime_frame, new_task_id, task_function); fflush(stderr);\n  Tau_get_current_region_context(tid, (unsigned long)task_function, true);\n  Tau_omp_start_timer(\"OpenMP_TASK\", tid, 1, 0, true);\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Task exit */\nextern \"C\" void my_task_end (\n  ompt_task_id_t  task_id)      /* id of task           */\n{\n  TAU_OMPT_COMMON_ENTRY;\n  //TAU_VERBOSE(\"End Task: task_id = %lu, %lu, %s\\n\", task_id, Tau_collector_flags[tid].taskid, task_names[Tau_collector_flags[tid].taskid]); fflush(stderr);\n#if OMPT_VERSION == 1\n  Tau_omp_stop_timer(\"OpenMP_TASK\", tid, 0, true); // the Intel implementation reuses task ids!\n#else\n  Tau_omp_stop_timer(\"OpenMP_TASK\", tid, 1, true);\n#endif\n  TAU_OPENMP_SET_LOCK;\n  char * tmpStr = (*task_names)[Tau_collector_flags[tid].taskid];\n  free(tmpStr); \n  //task_names.erase(Tau_collector_flags[tid].taskid);\n  TAU_OPENMP_UNSET_LOCK;\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Thread creation */\n#if OMPT_VERSION < 3\nextern \"C\" void my_thread_begin() {\n#else\nextern \"C\" void my_thread_begin(my_ompt_thread_type_t thread_type, ompt_thread_id_t thread_id) {\n  // special entry?\n#endif // version\n#if defined (TAU_USE_TLS)\n  if (is_master) return; // master thread can't be a new worker.\n#elif defined (TAU_USE_DTLS)\n  if (is_master) return; // master thread can't be a new worker.\n#elif defined (TAU_USE_PGS)\n  if (pthread_getspecific(thr_id_key) != NULL) return; // master thread can't be a new worker.\n#endif\n  TAU_OMPT_COMMON_ENTRY;\n  //TAU_VERBOSE(\"OMPT Created thread: %d\\n\", tid); fflush(stdout);\n  Tau_create_top_level_timer_if_necessary();\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Thread exit */\n#if OMPT_VERSION < 3\nextern \"C\" void my_thread_end() {\n#else\nextern \"C\" void my_thread_end(my_ompt_thread_type_t thread_type, ompt_thread_id_t thread_id) {\n#endif\n  if (!Tau_RtsLayer_TheEnableInstrumentation()) return;\n  TAU_OMPT_COMMON_ENTRY;\n  //TAU_VERBOSE(\"OMPT Exiting thread: %d\\n\", tid); fflush(stdout);\n  //Tau_stop_top_level_timer_if_necessary();\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Some control event happened */\nextern \"C\" void my_control(uint64_t command, uint64_t modifier) {\n  TAU_OMPT_COMMON_ENTRY;\n  TAU_VERBOSE(\"OpenMP Control: %d, %llx, %llx\\n\", tid, command, modifier); fflush(stdout);\n  // nothing to do here?\n  TAU_OMPT_COMMON_EXIT;\n}\n\nextern \"C\" void Tau_profile_exit_most_threads(void);\n\n/* Shutting down the OpenMP runtime */\nextern \"C\" void my_shutdown() {\n  if (!Tau_RtsLayer_TheEnableInstrumentation()) return;\n  TAU_OMPT_COMMON_ENTRY;\n  TAU_VERBOSE(\"OpenMP Shutdown on thread %d.\\n\", tid); fflush(stdout);\n  Tau_profile_exit_most_threads();\n  TAU_PROFILE_EXIT(\"exiting\");\n  // nothing to do here?\n  region_name_cleanup(0);\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/**********************************************************************/\n/* End Mandatory Events */\n/**********************************************************************/\n\n/**********************************************************************/\n/* Macros for common wait, acquire, release functionality. */\n/**********************************************************************/\n\n#define TAU_OMPT_WAIT_ACQUIRE_RELEASE(WAIT_FUNC,ACQUIRED_FUNC,RELEASE_FUNC,WAIT_NAME,REGION_NAME,CAUSE) \\\nextern \"C\" void WAIT_FUNC (ompt_wait_id_t waitid) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  if (Tau_collector_flags[tid].waiting>0) { \\\n    Tau_omp_stop_timer(WAIT_NAME,tid,0,false); \\\n  } \\\n  Tau_omp_start_timer(WAIT_NAME,tid,1,0,false); \\\n  Tau_collector_flags[tid].waiting = CAUSE; \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n \\\nextern \"C\" void ACQUIRED_FUNC (ompt_wait_id_t waitid) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  if (Tau_collector_flags[tid].waiting>0) { \\\n    Tau_omp_stop_timer(WAIT_NAME,tid,1,false); \\\n  } \\\n  Tau_collector_flags[tid].waiting = 0; \\\n  Tau_omp_start_timer(REGION_NAME,tid,1,0,false); fflush(stderr);\\\n  Tau_collector_flags[tid].acquired += CAUSE; \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n \\\nextern \"C\" void RELEASE_FUNC (ompt_wait_id_t waitid) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  if (Tau_collector_flags[tid].acquired>0) { \\\n    Tau_omp_stop_timer(REGION_NAME,tid,1,false); \\\n    Tau_collector_flags[tid].acquired -= CAUSE; \\\n  } \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\nTAU_OMPT_WAIT_ACQUIRE_RELEASE(my_wait_atomic,my_acquired_atomic,my_release_atomic,\"OpenMP_ATOMIC_REGION_WAIT\",\"OpenMP_ATOMIC_REGION\",TAU_OMPT_WAIT_ACQ_ATOMIC)\nTAU_OMPT_WAIT_ACQUIRE_RELEASE(my_wait_ordered,my_acquired_ordered,my_release_ordered,\"OpenMP_ORDERED_REGION_WAIT\",\"OpenMP_ORDERED_REGION\",TAU_OMPT_WAIT_ACQ_ORDERED)\nTAU_OMPT_WAIT_ACQUIRE_RELEASE(my_wait_critical,my_acquired_critical,my_release_critical,\"OpenMP_CRITICAL_REGION_WAIT\",\"OpenMP_CRITICAL_REGION\",TAU_OMPT_WAIT_ACQ_CRITICAL)\nTAU_OMPT_WAIT_ACQUIRE_RELEASE(my_wait_lock,my_acquired_lock,my_release_lock,\"OpenMP_LOCK_WAIT\",\"OpenMP_LOCK\",TAU_OMPT_WAIT_ACQ_LOCK)\nTAU_OMPT_WAIT_ACQUIRE_RELEASE(my_wait_next_lock,my_acquired_next_lock,my_release_next_lock,\"OpenMP_LOCK_WAIT\",\"OpenMP_LOCK\",TAU_OMPT_WAIT_ACQ_NEXT_LOCK)\n\n#undef TAU_OMPT_WAIT_ACQUIRE_RELEASE\n\n/**********************************************************************/\n/* Macros for common begin / end functionality. */\n/**********************************************************************/\n\n#define TAU_OMPT_SIMPLE_BEGIN_AND_END(BEGIN_FUNCTION,END_FUNCTION,NAME) \\\nextern \"C\" void BEGIN_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /*TAU_VERBOSE(\"New Entry: parallel_id = %lu, task_id = %lu %s\\n\", parallel_id, task_id, NAME); fflush(stderr); */\\\n  Tau_omp_start_timer(NAME, tid, 1, 0, false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\\\nextern \"C\" void END_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  Tau_omp_stop_timer(NAME, tid, 1,false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n}\n\n#define TAU_OMPT_TASK_BEGIN_AND_END(BEGIN_FUNCTION,END_FUNCTION,NAME) \\\nextern \"C\" void BEGIN_FUNCTION (ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /*TAU_VERBOSE(\"New Entry: parallel_id = %lu, task_id = %lu %s\\n\", parallel_id, task_id, NAME); fflush(stderr); */\\\n  Tau_omp_start_timer(NAME, tid, 1, 0, false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\\\nextern \"C\" void END_FUNCTION (ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  Tau_omp_stop_timer(NAME, tid, 1,false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n}\n\n#define TAU_OMPT_LOOP_BEGIN_AND_END(BEGIN_FUNCTION,END_FUNCTION,NAME) \\\nextern \"C\" void BEGIN_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /* TAU_VERBOSE(\"New Entry: parallel_id = %lu, task_id = %lu %s\\n\", parallel_id, task_id, NAME); fflush(stderr); */ \\\n  Tau_omp_start_timer(NAME, tid, 1, 0, false); \\\n  Tau_collector_flags[tid].looping=1; \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\\\nextern \"C\" void END_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /* TAU_VERBOSE(\"End loop: parallel_id = %lu, task_id = %lu %s\\n\", parallel_id, task_id, NAME); fflush(stderr); */ \\\n  if (Tau_collector_flags[tid].looping==1) { \\\n  Tau_omp_stop_timer(NAME, tid, 1,false); } \\\n  Tau_collector_flags[tid].looping=0; \\\n  TAU_OMPT_COMMON_EXIT; \\\n}\n\n#define TAU_OMPT_WORKSHARE_BEGIN_AND_END(BEGIN_FUNCTION,END_FUNCTION,NAME) \\\nextern \"C\" void BEGIN_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id, void *parallel_function) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /* TAU_VERBOSE(\"%d Workshare begin: parallel_id = %lu, task_id = %lu %s, %p\\n\", tid, parallel_id, task_id, NAME, parallel_function); fflush(stderr); */ \\\n  /* Don't do this now - the function is the same as the region, and there's no good time to free the string */\\\n  /*Tau_get_current_region_context(tid, (unsigned long)parallel_function, false); */\\\n  Tau_omp_start_timer(NAME, tid, 1, 0, false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\\\nextern \"C\" void END_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  /*TAU_VERBOSE(\"%d Workshare end: parallel_id = %lu, task_id = %lu %s\\n\", tid, parallel_id, task_id, NAME); fflush(stderr); */\\\n  Tau_omp_stop_timer(NAME, tid, 1,false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n}\n\n#define TAU_OMPT_WORKSHARE2_BEGIN_AND_END(BEGIN_FUNCTION,END_FUNCTION,NAME) \\\nextern \"C\" void BEGIN_FUNCTION (ompt_task_id_t parent_task_id, ompt_parallel_id_t parallel_id, void *parallel_function) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  /* Don't do this now - the function is the same as the region, and there's no good time to free the string */\\\n  /*Tau_get_current_region_context(tid, (unsigned long)parallel_function, false); */\\\n  Tau_omp_start_timer(NAME, tid, 1, 0, false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n} \\\n\\\nextern \"C\" void END_FUNCTION (ompt_parallel_id_t parallel_id, ompt_task_id_t task_id) { \\\n  TAU_OMPT_COMMON_ENTRY; \\\n  Tau_collector_flags[tid].regionid = parallel_id; \\\n  Tau_collector_flags[tid].taskid = task_id; \\\n  Tau_omp_stop_timer(NAME, tid, 1,false); \\\n  TAU_OMPT_COMMON_EXIT; \\\n}\n\nTAU_OMPT_TASK_BEGIN_AND_END(my_initial_task_begin,my_initial_task_end,\"OpenMP_INITIAL_TASK\")\nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_barrier_begin,my_barrier_end,\"OpenMP_BARRIER\")\nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_implicit_task_begin,my_implicit_task_end,\"OpenMP_IMPLICIT_TASK\")\nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_wait_barrier_begin,my_wait_barrier_end,\"OpenMP_WAIT_BARRIER\")\nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_master_begin,my_master_end,\"OpenMP_MASTER_REGION\")\nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_single_others_begin,my_single_others_end,\"OpenMP_SINGLE_OTHERS\") \nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_taskwait_begin,my_taskwait_end,\"OpenMP_TASKWAIT\") \nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_wait_taskwait_begin,my_wait_taskwait_end,\"OpenMP_WAIT_TASKWAIT\") \nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_taskgroup_begin,my_taskgroup_end,\"OpenMP_TASKGROUP\") \nTAU_OMPT_SIMPLE_BEGIN_AND_END(my_wait_taskgroup_begin,my_wait_taskgroup_end,\"OpenMP_WAIT_TASKGROUP\") \n#if OMPT_VERSION < 3\nTAU_OMPT_LOOP_BEGIN_AND_END(my_loop_begin,my_loop_end,\"OpenMP_LOOP\")\nTAU_OMPT_LOOP_BEGIN_AND_END(my_single_in_block_begin,my_single_in_block_end,\"OpenMP_SINGLE_IN_BLOCK\") \nTAU_OMPT_WORKSHARE2_BEGIN_AND_END(my_workshare_begin,my_workshare_end,\"OpenMP_WORKSHARE\")\nTAU_OMPT_LOOP_BEGIN_AND_END(my_sections_begin,my_sections_end,\"OpenMP_SECTIONS\") \n#else\nTAU_OMPT_WORKSHARE_BEGIN_AND_END(my_loop_begin,my_loop_end,\"OpenMP_LOOP\")\nTAU_OMPT_WORKSHARE_BEGIN_AND_END(my_single_in_block_begin,my_single_in_block_end,\"OpenMP_SINGLE_IN_BLOCK\") \nTAU_OMPT_WORKSHARE_BEGIN_AND_END(my_workshare_begin,my_workshare_end,\"OpenMP_WORKSHARE\")\nTAU_OMPT_WORKSHARE_BEGIN_AND_END(my_sections_begin,my_sections_end,\"OpenMP_SECTIONS\") \n#endif\n\n#undef TAU_OMPT_SIMPLE_BEGIN_AND_END\n\n/**********************************************************************/\n/* Specialized begin / end functionality. */\n/**********************************************************************/\n\n/* Thread end idle */\n#if OMPT_VERSION < 3\nextern \"C\" void my_idle_end() {\n#else\nextern \"C\" void my_idle_end(ompt_thread_id_t thread_id) {\n#endif\n  if (!Tau_RtsLayer_TheEnableInstrumentation()) return;\n  TAU_OMPT_COMMON_ENTRY;\n  Tau_omp_stop_timer(\"IDLE\", tid, 0,false);\n  // if this thread is not the master of a team, then assume this \n  // thread is entering a new parallel region\n  if (Tau_collector_flags[tid].parallel==0) {\n    Tau_omp_start_timer(\"OpenMP_PARALLEL_REGION\", tid, 1, 1, false);\n    Tau_collector_flags[tid].busy = 1;\n  }\n  Tau_collector_flags[tid].idle = 0;\n  TAU_OMPT_COMMON_EXIT;\n}\n\n/* Thread begin idle */\n#if OMPT_VERSION < 3\nextern \"C\" void my_idle_begin() {\n#else\nextern \"C\" void my_idle_begin(ompt_thread_id_t thread_id) {\n#endif\n  TAU_OMPT_COMMON_ENTRY;\n  // if this thread is not the master of a team, then assume this \n  // thread is exiting a parallel region\n  if (Tau_collector_flags[tid].parallel==0) {\n    if (Tau_collector_flags[tid].idle == 1 && \n        Tau_collector_flags[tid].busy == 0) {\n        TAU_OMPT_COMMON_EXIT;\n        return;\n    }\n    if (Tau_collector_flags[tid].busy == 1) {\n        Tau_omp_stop_timer(\"OpenMP_PARALLEL_REGION\", tid, 1,false);\n        Tau_collector_flags[tid].busy = 0;\n    }\n  }\n  Tau_collector_flags[tid].idle = 1;\n  Tau_omp_start_timer(\"IDLE\", tid, 0, 0, false);\n  TAU_OMPT_COMMON_EXIT;\n}\n\n#undef TAU_OMPT_COMMON_ENTRY\n#undef TAU_OMPT_COMMON_EXIT\n\n// This macro is for checking that the function registration worked.\n#define CHECK(EVENT,FUNCTION,NAME) \\\n  TAU_VERBOSE(\"Registering OMPT callback %s...\",NAME); \\\n  fflush(stderr); \\\n  if (ompt_set_callback(EVENT, (ompt_callback_t)(FUNCTION)) == 0) { \\\n    TAU_VERBOSE(\"\\n\\tFailed to register OMPT callback %s!\\n\",NAME); \\\n    fflush(stderr); \\\n  } else { \\\n    TAU_VERBOSE(\"success.\\n\"); \\\n  } \\\n\n/* These will be used when the OMPT interface is updated */\n\n#ifdef BROKEN_CPLUSPLUS_INTERFACE // the C/C++ interface is broken. :( Can't do function pointers\nextern \"C\" ompt_state_t ompt_get_state(ompt_wait_id_t *ompt_wait_id);\nextern \"C\" int ompt_enumerate_state(int current_state, int *next_state, const char **next_state_name);\nextern \"C\" int ompt_set_callback(ompt_event_t event_type, ompt_callback_t callback);\n#else\nompt_enumerate_state_t ompt_enumerate_state;\nompt_set_callback_t ompt_set_callback;\nompt_get_state_t ompt_get_state;\n#endif\n\nint __ompt_initialize() {\n#ifdef TAU_MPC\n  check_local_tid();\n#endif // TAU_MPC\n#if !defined(GOMP_USING_INTEL_RUNTIME) || defined(TAU_MPC)  // this causes probems with locks before the runtime is ready.\n  Tau_init_initializeTAU();\n#endif // !GOMP_USING_INTEL_RUNTIME\n  if (initialized || initializing) return 0;\n  if (!TauEnv_get_openmp_runtime_enabled()) return 0;\n  TAU_VERBOSE(\"Registering OMPT events...\\n\"); fflush(stderr);\n  initializing = true;\n#if defined (TAU_USE_TLS)\n  is_master = true;\n#elif defined (TAU_USE_DTLS)\n  is_master = true;\n#elif defined (TAU_USE_PGS)\n  pthread_key_create(&thr_id_key, NULL);\n  pthread_setspecific(thr_id_key, 1);\n#endif\n  TAU_OPENMP_INIT_LOCK;\n\n  region_names = new std::map<unsigned long, char*>();\n  task_names = new std::map<unsigned long, char*>();\n  region_trash_heap = new std::set<unsigned long>();\n\n  /* required events */\n#if OMPT_VERSION < 2\n  CHECK(ompt_event_parallel_create, my_parallel_region_begin, \"parallel_begin\");\n  CHECK(ompt_event_parallel_exit, my_parallel_region_end, \"parallel_end\");\n#else\n  CHECK(ompt_event_parallel_begin, my_parallel_region_begin, \"parallel_begin\");\n  CHECK(ompt_event_parallel_end, my_parallel_region_end, \"parallel_end\");\n#endif\n#if OMPT_VERSION < 2\n#ifndef TAU_IBM_OMPT\n  // IBM will call task_create, but not task_exit. :(\n  CHECK(ompt_event_task_create, my_task_begin, \"task_begin\");\n  CHECK(ompt_event_task_exit, my_task_end, \"task_end\");\n#endif\n#else\n  //CHECK(ompt_event_task_begin, my_task_begin, \"task_begin\");\n  //CHECK(ompt_event_task_end, my_task_end, \"task_end\");\n#endif\n#if OMPT_VERSION < 2\n  CHECK(ompt_event_thread_create, my_thread_begin, \"thread_begin\");\n  CHECK(ompt_event_thread_exit, my_thread_end, \"thread_end\");\n#elif OMPT_VERSION < 3\n  CHECK(ompt_event_initial_thread_begin, my_thread_begin, \"thread_begin\");\n  CHECK(ompt_event_openmp_thread_begin, my_thread_begin, \"thread_begin\");\n  CHECK(ompt_event_openmp_thread_end, my_thread_end, \"thread_end\");\n#else\n  CHECK(ompt_event_thread_begin, my_thread_begin, \"thread_begin\");\n  CHECK(ompt_event_thread_end, my_thread_end, \"thread_end\");\n#endif\n  CHECK(ompt_event_control, my_control, \"event_control\");\n#ifndef TAU_IBM_OMPT\n  CHECK(ompt_event_runtime_shutdown, my_shutdown, \"runtime_shutdown\");\n#endif /* TAU_IBM_OMPT */\n\n  if (TauEnv_get_openmp_runtime_events_enabled()) {\n  /* optional events, \"blameshifting\" */\n#ifndef TAU_IBM_OMPT \n  // actually, don't do the idle event at all for now\n  //CHECK(ompt_event_idle_begin, my_idle_begin, \"idle_begin\");\n  //CHECK(ompt_event_idle_end, my_idle_end, \"idle_end\");\n  \n  // IBM will call wait_barrier_begin, but not wait_barrier_end. :(\n  CHECK(ompt_event_wait_barrier_begin, my_wait_barrier_begin, \"wait_barrier_begin\");\n  CHECK(ompt_event_wait_barrier_end, my_wait_barrier_end, \"wait_barrier_end\");\n#endif\n  CHECK(ompt_event_wait_taskwait_begin, my_wait_taskwait_begin, \"wait_taskwait_begin\");\n  CHECK(ompt_event_wait_taskwait_end, my_wait_taskwait_end, \"wait_taskwait_end\");\n  CHECK(ompt_event_wait_taskgroup_begin, my_wait_taskgroup_begin, \"wait_taskgroup_begin\");\n  CHECK(ompt_event_wait_taskgroup_end, my_wait_taskgroup_end, \"wait_taskgroup_end\");\n  //CHECK(ompt_event_release_lock, my_release_lock, \"release_lock\");\n//ompt_event(ompt_event_release_nest_lock_last, ompt_wait_callback_t, 18, ompt_event_release_nest_lock_implem\n  CHECK(ompt_event_release_critical, my_release_critical, \"release_critical\");\n  CHECK(ompt_event_release_atomic, my_release_atomic, \"release_atomic\");\n  CHECK(ompt_event_release_ordered, my_release_ordered, \"release_ordered\");\n\n  /* optional events, synchronous events */\n#if OMPT_VERSION < 2\n#if !defined(TAU_IBM_OMPT) && !defined(TAU_MPC)\n  // IBM will call task_create, but not task_exit. :(\n  CHECK(ompt_event_implicit_task_create, my_implicit_task_begin, \"implicit_task_begin\");\n  CHECK(ompt_event_implicit_task_exit, my_implicit_task_end, \"implicit_task_end\");\n#endif\n#else\n  CHECK(ompt_event_implicit_task_begin, my_implicit_task_begin, \"implicit_task_begin\");\n  CHECK(ompt_event_implicit_task_end, my_implicit_task_end, \"implicit_task_end\");\n  // openUH can't support this event yet\n#if !defined (TAU_OPEN64ORC)\n  CHECK(ompt_event_initial_task_begin, my_initial_task_begin, \"initial_task_begin\");\n  CHECK(ompt_event_initial_task_end, my_initial_task_end, \"initial_task_end\");\n#endif\n#endif\n  CHECK(ompt_event_barrier_begin, my_barrier_begin, \"barrier_begin\");\n  CHECK(ompt_event_barrier_end, my_barrier_end, \"barrier_end\");\n  CHECK(ompt_event_master_begin, my_master_begin, \"master_begin\");\n  CHECK(ompt_event_master_end, my_master_end, \"master_end\");\n//ompt_event(ompt_event_task_switch, ompt_task_switch_callback_t, 24, ompt_event_task_switch_implemented) /* \n  CHECK(ompt_event_loop_begin, my_loop_begin, \"loop_begin\");\n  CHECK(ompt_event_loop_end, my_loop_end, \"loop_end\");\n#if OMPT_VERSION < 2 \n  CHECK(ompt_event_section_begin, my_sections_begin, \"section_begin\");\n  CHECK(ompt_event_section_end, my_sections_end, \"section_end\");\n#else\n  CHECK(ompt_event_sections_begin, my_sections_begin, \"sections_begin\");\n  CHECK(ompt_event_sections_end, my_sections_end, \"sections_end\");\n#endif\n/* When using Intel, there are times when the non-single thread continues on its\n * merry way. For now, don't track the time spent in the \"other\" threads. \n * We have no way of knowing when the other threads finish waiting, because for\n * Intel they don't wait - they just continue. */\n  //CHECK(ompt_event_single_in_block_begin, my_single_in_block_begin, \"single_in_block_begin\");\n  //CHECK(ompt_event_single_in_block_end, my_single_in_block_end, \"single_in_block_end\");\n  //CHECK(ompt_event_single_others_begin, my_single_others_begin, \"single_others_begin\");\n  //CHECK(ompt_event_single_others_end, my_single_others_end, \"single_others_end\");\n  //CHECK(ompt_event_workshare_begin, my_workshare_begin, \"workshare_begin\");\n  //CHECK(ompt_event_workshare_end, my_workshare_end, \"workshare_end\");\n  CHECK(ompt_event_taskwait_begin, my_taskwait_begin, \"taskwait_begin\");\n  CHECK(ompt_event_taskwait_end, my_taskwait_end, \"taskwait_end\");\n  CHECK(ompt_event_taskgroup_begin, my_taskgroup_begin, \"taskgroup_begin\");\n  CHECK(ompt_event_taskgroup_end, my_taskgroup_end, \"taskgroup_end\");\n\n//ompt_event(ompt_event_release_nest_lock_prev, ompt_parallel_callback_t, 41, ompt_event_release_nest_lock_pr\n\n  CHECK(ompt_event_wait_lock, my_wait_lock, \"wait_lock\");\n//ompt_event(ompt_event_wait_nest_lock, ompt_wait_callback_t, 43, ompt_event_wait_nest_lock_implemented) /* n\n  CHECK(ompt_event_wait_critical, my_wait_critical, \"wait_critical\");\n  CHECK(ompt_event_wait_atomic, my_wait_atomic, \"wait_atomic\");\n  CHECK(ompt_event_wait_ordered, my_wait_ordered, \"wait_ordered\");\n\n  CHECK(ompt_event_acquired_lock, my_acquired_lock, \"acquired_lock\");\n//ompt_event(ompt_event_acquired_nest_lock_first, ompt_wait_callback_t, 48, ompt_event_acquired_nest_lock_fir\n//ompt_event(ompt_event_acquired_nest_lock_next, ompt_parallel_callback_t, 49, ompt_event_acquired_nest_lock_\n  CHECK(ompt_event_acquired_critical, my_acquired_critical, \"acquired_critical\");\n  CHECK(ompt_event_acquired_atomic, my_acquired_atomic, \"acquired_atomic\");\n  CHECK(ompt_event_acquired_ordered, my_acquired_ordered, \"acquired_ordered\");\n#if defined (TAU_OPEN64ORC)\n  CHECK(ompt_event_release_lock, my_release_lock, \"release_lock\");\n  CHECK(ompt_event_wait_lock, my_wait_lock, \"wait_lock\");\n  CHECK(ompt_event_acquired_lock, my_acquired_lock, \"acquired_lock\");\n#endif\n\n//ompt_event(ompt_event_init_lock, ompt_wait_callback_t, 53, ompt_event_init_lock_implemented) /* lock init *\n//ompt_event(ompt_event_init_nest_lock, ompt_wait_callback_t, 54, ompt_event_init_nest_lock_implemented) /* n\n//ompt_event(ompt_event_destroy_lock, ompt_wait_callback_t, 55, ompt_event_destroy_lock_implemented) /* lock \n//ompt_event(ompt_event_destroy_nest_lock, ompt_wait_callback_t, 56, ompt_event_destroy_nest_lock_implemented\n\n//ompt_event(ompt_event_flush, ompt_thread_callback_t, 57, ompt_event_flush_implemented) /* after executing f\n#if defined (TAU_MPC) \n  CHECK(ompt_event_idle_begin, my_idle_begin, \"idle_begin\");\n  CHECK(ompt_event_idle_end, my_idle_end, \"idle_end\");\n#if defined (ompt_event_workshare_begin)\n  CHECK(ompt_event_workshare_begin, my_workshare_begin, \"workshare_begin\");\n  CHECK(ompt_event_workshare_end, my_workshare_end, \"workshare_end\");\n#endif // ompt_event_workshare_begin\n  CHECK(ompt_event_release_lock, my_release_lock, \"release_lock\");\n  CHECK(ompt_event_wait_lock, my_wait_lock, \"wait_lock\");\n  CHECK(ompt_event_acquired_lock, my_acquired_lock, \"acquired_lock\");\n  //CHECK(ompt_event_release_nest_lock, my_release_nest_lock, \"release_lock\");\n  //CHECK(ompt_event_acquired_nest_lock, my_acquired_nest_lock, \"acquired_lock\");\n  //CHECK(ompt_event_release_nest_lock_first, my_release_nest_lock_first, \"release_lock\");\n  //CHECK(ompt_event_acquired_nest_lock_first, my_acquired_nest_lock_first, \"acquired_lock\");\n  //CHECK(ompt_event_release_nest_lock_last, my_release_nest_lock_last, \"release_lock\");\n  //CHECK(ompt_event_acquired_nest_lock_last, my_acquired_nest_lock_last, \"acquired_lock\");\n#endif // TAU_MPC\n  }\n  TAU_VERBOSE(\"OMPT events registered! \\n\"); fflush(stderr);\n\n#if defined(TAU_USE_OMPT) || defined(TAU_IBM_OMPT)\n// make the states\n  if (TauEnv_get_openmp_runtime_states_enabled() == 1) {\n    // now, for the collector API support, create the OpenMP states.\n    // preallocate State timers. If we create them now, we won't run into\n    // malloc issues later when they are required during signal handling.\n#if defined(BROKEN_CPLUSPLUS_INTERFACE) || defined(STATES_ARE_TYPE_INT)\n    int current_state = ompt_state_work_serial;\n    int next_state;\n#else\n    ompt_state_t current_state = ompt_state_work_serial;\n    ompt_state_t next_state;\n#endif\n    const char *next_state_name;\n    std::string *next_state_name_string;\n    std::string *serial = new std::string(\"ompt_state_work_serial\");\n    OMPT_STATE_NAMES[ompt_state_work_serial] = serial;\n    Tau_create_thread_state_if_necessary(\"ompt_state_work_serial\");\n    while (ompt_enumerate_state(current_state, &next_state, &next_state_name) == 1) {\n      TAU_VERBOSE(\"Got state %d: '%s'\\n\", next_state, next_state_name);\n      if (next_state >= 128) {\n        TAU_VERBOSE(\"WARNING! MORE OMPT STATES THAN EXPECTED! PROGRAM COULD CRASH!!!\\n\");\n      }\n      next_state_name_string = new std::string(next_state_name);\n      OMPT_STATE_NAMES[next_state] = next_state_name_string;\n      Tau_create_thread_state_if_necessary(next_state_name);\n      current_state = next_state;\n    }\n    // next_state now holds our max \n  }\n  TAU_VERBOSE(\"OMPT states registered! \\n\"); fflush(stderr);\n#endif\n\n  initializing = false;\n  initialized = true;\n\n  return 1;\n}\n\nextern \"C\" {\n#if OMPT_VERSION < 2\nint ompt_initialize(ompt_function_lookup_t lookup) {\n#else\n// the newest version of the library will have a version as well\nvoid ompt_initialize(ompt_function_lookup_t lookup, const char *runtime_version, unsigned int ompt_version) {\n  TAU_VERBOSE(\"Init: %s ver %i\\n\",runtime_version,ompt_version);\n#endif\n#ifndef BROKEN_CPLUSPLUS_INTERFACE\n  ompt_set_callback = (ompt_set_callback_t) lookup(\"ompt_set_callback\");\n  ompt_enumerate_state = (ompt_enumerate_state_t) lookup(\"ompt_enumerate_state\");\n  ompt_get_state = (ompt_get_state_t) lookup(\"ompt_get_state\");\n#endif\n  __ompt_initialize();\n}\n\n#ifndef ompt_initialize_t\n#define OMPT_API_FNTYPE(fn) fn##_t\n#define OMPT_API_FUNCTION(return_type, fn, args)  \\\n        typedef return_type (*OMPT_API_FNTYPE(fn)) args\nOMPT_API_FUNCTION(void, ompt_initialize, (\n    ompt_function_lookup_t ompt_fn_lookup,\n    const char *runtime_version,\n    unsigned int ompt_version\n));\n#endif\nompt_initialize_t ompt_tool() { return ompt_initialize; }\n\n}; // extern \"C\"\n\n#if defined(TAU_USE_OMPT) || defined(TAU_IBM_OMPT)\nstd::string * Tau_get_thread_ompt_state(int tid) {\n    // if not available, return something useful\n    if (!initialized) return NULL;\n    // query the thread state\n    ompt_wait_id_t wait;\n    ompt_state_t state = ompt_get_state(&wait);\n    //TAU_VERBOSE(\"Thread %d, state : %d\\n\", tid, state);\n    // return the thread state as a string\n    return OMPT_STATE_NAMES[state];\n}\n#endif\n\n#else // TAU_USE_OMPT\n///* THESE ARE OTHER WEAK IMPLEMENTATIONS, IN CASE OMPT SUPPORT IS NONEXISTENT */\n///* initialization */\n//extern \"C\" __attribute__ (( weak ))\n  //int ompt_set_callback(ompt_event_t evid, ompt_callback_t cb) { return -1; };\n#endif // TAU_USE_OMPT\n\n/* THESE ARE OTHER WEAK IMPLEMENTATIONS, IN CASE COLLECTOR API SUPPORT IS NONEXISTENT */\n#if !defined (TAU_OPEN64ORC)\n#if defined __GNUC__\nextern __attribute__ ((weak))\n  int __omp_collector_api(void *message) { TAU_VERBOSE (\"Error linking GOMP wrapper. Try using tau_exec with the -gomp option.\\n\"); return -1; };\n#endif\n#endif\nextern \"C\" __attribute__ ((weak))\nvoid * Tau_get_gomp_proxy_address(void);\n\n#endif /* !defined(TAU_USE_OMPT_TR6) */\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauShmemSgiF.c": "#include <stdio.h>\n#include <Profile/Profiler.h>\nint TAUDECL tau_totalnodes(int set_or_get, int value);\nstatic int tau_shmem_tagid_f=0 ; \n#define TAU_SHMEM_TAGID tau_shmem_tagid_f=tau_shmem_tagid_f%250\n#define TAU_SHMEM_TAGID_NEXT (++tau_shmem_tagid_f) % 250 \n#include <dlfcn.h>\n\nconst char * tau_orig_libname = \"libsma.so\";\nstatic void *tau_handle = NULL;\n\n\n\n/**********************************************************\n   shmem_addr_accessible_\n **********************************************************/\n\nvoid shmem_addr_accessible_(void * a1, int * a2) {\n\n  typedef void (*shmem_addr_accessible__p_h) (void *, int *);\n  static shmem_addr_accessible__p_h shmem_addr_accessible__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_addr_accessible_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_addr_accessible__h == NULL)\n\tshmem_addr_accessible__h = (shmem_addr_accessible__p_h) dlsym(tau_handle,\"shmem_addr_accessible_\"); \n    if (shmem_addr_accessible__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_addr_accessible__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier_\n **********************************************************/\n\nvoid shmem_barrier_(int * a1, int * a2, int * a3, long * a4) {\n\n  typedef void (*shmem_barrier__p_h) (int *, int *, int *, long *);\n  static shmem_barrier__p_h shmem_barrier__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier_(int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier__h == NULL)\n\tshmem_barrier__h = (shmem_barrier__p_h) dlsym(tau_handle,\"shmem_barrier_\"); \n    if (shmem_barrier__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier__h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier_all_\n **********************************************************/\n\nvoid shmem_barrier_all_() {\n\n  typedef void (*shmem_barrier_all__p_h) ();\n  static shmem_barrier_all__p_h shmem_barrier_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier_all_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier_all__h == NULL)\n\tshmem_barrier_all__h = (shmem_barrier_all__p_h) dlsym(tau_handle,\"shmem_barrier_all_\"); \n    if (shmem_barrier_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier_all__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier_ps_\n **********************************************************/\n\nvoid shmem_barrier_ps_(int * a1, int * a2, int * a3, long * a4) {\n\n  typedef void (*shmem_barrier_ps__p_h) (int *, int *, int *, long *);\n  static shmem_barrier_ps__p_h shmem_barrier_ps__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier_ps_(int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier_ps__h == NULL)\n\tshmem_barrier_ps__h = (shmem_barrier_ps__p_h) dlsym(tau_handle,\"shmem_barrier_ps_\"); \n    if (shmem_barrier_ps__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier_ps__h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast32_\n **********************************************************/\n\nvoid shmem_broadcast32_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast32__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast32__p_h shmem_broadcast32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast32_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast32__h == NULL)\n\tshmem_broadcast32__h = (shmem_broadcast32__p_h) dlsym(tau_handle,\"shmem_broadcast32_\"); \n    if (shmem_broadcast32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast32__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast4_\n **********************************************************/\n\nvoid shmem_broadcast4_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast4__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast4__p_h shmem_broadcast4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast4_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast4__h == NULL)\n\tshmem_broadcast4__h = (shmem_broadcast4__p_h) dlsym(tau_handle,\"shmem_broadcast4_\"); \n    if (shmem_broadcast4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast4__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast64_\n **********************************************************/\n\nvoid shmem_broadcast64_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast64__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast64__p_h shmem_broadcast64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast64_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast64__h == NULL)\n\tshmem_broadcast64__h = (shmem_broadcast64__p_h) dlsym(tau_handle,\"shmem_broadcast64_\"); \n    if (shmem_broadcast64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast64__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast8_\n **********************************************************/\n\nvoid shmem_broadcast8_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast8__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast8__p_h shmem_broadcast8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast8_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast8__h == NULL)\n\tshmem_broadcast8__h = (shmem_broadcast8__p_h) dlsym(tau_handle,\"shmem_broadcast8_\"); \n    if (shmem_broadcast8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast8__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_character_get_\n **********************************************************/\n\nvoid shmem_character_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_character_get__p_h) (void *, void *, int *, int *);\n  static shmem_character_get__p_h shmem_character_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_character_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_character_get__h == NULL)\n\tshmem_character_get__h = (shmem_character_get__p_h) dlsym(tau_handle,\"shmem_character_get_\"); \n    if (shmem_character_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(char)* (*a3), (*a4));\n  (*shmem_character_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(char)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_character_put_\n **********************************************************/\n\nvoid shmem_character_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_character_put__p_h) (void *, void *, int *, int *);\n  static shmem_character_put__p_h shmem_character_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_character_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_character_put__h == NULL)\n\tshmem_character_put__h = (shmem_character_put__p_h) dlsym(tau_handle,\"shmem_character_put_\"); \n    if (shmem_character_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(char)* (*a3));\n  (*shmem_character_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(char)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_inv_\n **********************************************************/\n\nvoid shmem_clear_cache_inv_() {\n\n  typedef void (*shmem_clear_cache_inv__p_h) ();\n  static shmem_clear_cache_inv__p_h shmem_clear_cache_inv__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_inv_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_inv__h == NULL)\n\tshmem_clear_cache_inv__h = (shmem_clear_cache_inv__p_h) dlsym(tau_handle,\"shmem_clear_cache_inv_\"); \n    if (shmem_clear_cache_inv__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_inv__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_line_inv_\n **********************************************************/\n\nvoid shmem_clear_cache_line_inv_(void * a1) {\n\n  typedef void (*shmem_clear_cache_line_inv__p_h) (void *);\n  static shmem_clear_cache_line_inv__p_h shmem_clear_cache_line_inv__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_line_inv_(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_line_inv__h == NULL)\n\tshmem_clear_cache_line_inv__h = (shmem_clear_cache_line_inv__p_h) dlsym(tau_handle,\"shmem_clear_cache_line_inv_\"); \n    if (shmem_clear_cache_line_inv__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_line_inv__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_lock_\n **********************************************************/\n\nvoid shmem_clear_lock_(long * a1) {\n\n  typedef void (*shmem_clear_lock__p_h) (long *);\n  static shmem_clear_lock__p_h shmem_clear_lock__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_lock_(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_lock__h == NULL)\n\tshmem_clear_lock__h = (shmem_clear_lock__p_h) dlsym(tau_handle,\"shmem_clear_lock_\"); \n    if (shmem_clear_lock__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_lock__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect4_\n **********************************************************/\n\nvoid shmem_collect4_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect4__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect4__p_h shmem_collect4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect4_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect4__h == NULL)\n\tshmem_collect4__h = (shmem_collect4__p_h) dlsym(tau_handle,\"shmem_collect4_\"); \n    if (shmem_collect4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect4__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect64_\n **********************************************************/\n\nvoid shmem_collect64_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect64__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect64__p_h shmem_collect64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect64_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect64__h == NULL)\n\tshmem_collect64__h = (shmem_collect64__p_h) dlsym(tau_handle,\"shmem_collect64_\"); \n    if (shmem_collect64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect64__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect8_\n **********************************************************/\n\nvoid shmem_collect8_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect8__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect8__p_h shmem_collect8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect8_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect8__h == NULL)\n\tshmem_collect8__h = (shmem_collect8__p_h) dlsym(tau_handle,\"shmem_collect8_\"); \n    if (shmem_collect8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect8__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp4_prod_to_all_\n **********************************************************/\n\nvoid shmem_comp4_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_comp4_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_comp4_prod_to_all__p_h shmem_comp4_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp4_prod_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp4_prod_to_all__h == NULL)\n\tshmem_comp4_prod_to_all__h = (shmem_comp4_prod_to_all__p_h) dlsym(tau_handle,\"shmem_comp4_prod_to_all_\"); \n    if (shmem_comp4_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp4_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp4_sum_to_all_\n **********************************************************/\n\nvoid shmem_comp4_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_comp4_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_comp4_sum_to_all__p_h shmem_comp4_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp4_sum_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp4_sum_to_all__h == NULL)\n\tshmem_comp4_sum_to_all__h = (shmem_comp4_sum_to_all__p_h) dlsym(tau_handle,\"shmem_comp4_sum_to_all_\"); \n    if (shmem_comp4_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp4_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp8_prod_to_all_\n **********************************************************/\n\nvoid shmem_comp8_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_comp8_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_comp8_prod_to_all__p_h shmem_comp8_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp8_prod_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp8_prod_to_all__h == NULL)\n\tshmem_comp8_prod_to_all__h = (shmem_comp8_prod_to_all__p_h) dlsym(tau_handle,\"shmem_comp8_prod_to_all_\"); \n    if (shmem_comp8_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp8_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp8_sum_to_all_\n **********************************************************/\n\nvoid shmem_comp8_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_comp8_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_comp8_sum_to_all__p_h shmem_comp8_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp8_sum_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp8_sum_to_all__h == NULL)\n\tshmem_comp8_sum_to_all__h = (shmem_comp8_sum_to_all__p_h) dlsym(tau_handle,\"shmem_comp8_sum_to_all_\"); \n    if (shmem_comp8_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp8_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_get_\n **********************************************************/\n\nvoid shmem_complex_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_complex_get__p_h) (void *, void *, int *, int *);\n  static shmem_complex_get__p_h shmem_complex_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_get__h == NULL)\n\tshmem_complex_get__h = (shmem_complex_get__p_h) dlsym(tau_handle,\"shmem_complex_get_\"); \n    if (shmem_complex_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_complex_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_iget_\n **********************************************************/\n\nvoid shmem_complex_iget_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_complex_iget__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_complex_iget__p_h shmem_complex_iget__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_iget_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_iget__h == NULL)\n\tshmem_complex_iget__h = (shmem_complex_iget__p_h) dlsym(tau_handle,\"shmem_complex_iget_\"); \n    if (shmem_complex_iget__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_complex_iget__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_iput_\n **********************************************************/\n\nvoid shmem_complex_iput_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_complex_iput__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_complex_iput__p_h shmem_complex_iput__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_iput_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_iput__h == NULL)\n\tshmem_complex_iput__h = (shmem_complex_iput__p_h) dlsym(tau_handle,\"shmem_complex_iput_\"); \n    if (shmem_complex_iput__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_complex_iput__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_put_\n **********************************************************/\n\nvoid shmem_complex_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_complex_put__p_h) (void *, void *, int *, int *);\n  static shmem_complex_put__p_h shmem_complex_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_put__h == NULL)\n\tshmem_complex_put__h = (shmem_complex_put__p_h) dlsym(tau_handle,\"shmem_complex_put_\"); \n    if (shmem_complex_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_complex_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_get_\n **********************************************************/\n\nvoid shmem_double_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_double_get__p_h) (void *, void *, int *, int *);\n  static shmem_double_get__p_h shmem_double_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_get__h == NULL)\n\tshmem_double_get__h = (shmem_double_get__p_h) dlsym(tau_handle,\"shmem_double_get_\"); \n    if (shmem_double_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(double)* (*a3), (*a4));\n  (*shmem_double_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(double)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_iget_\n **********************************************************/\n\nvoid shmem_double_iget_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_double_iget__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_double_iget__p_h shmem_double_iget__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_iget_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_iget__h == NULL)\n\tshmem_double_iget__h = (shmem_double_iget__p_h) dlsym(tau_handle,\"shmem_double_iget_\"); \n    if (shmem_double_iget__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(double)* (*a5), (*a6));\n  (*shmem_double_iget__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), sizeof(double)* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_iput_\n **********************************************************/\n\nvoid shmem_double_iput_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_double_iput__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_double_iput__p_h shmem_double_iput__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_iput_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_iput__h == NULL)\n\tshmem_double_iput__h = (shmem_double_iput__p_h) dlsym(tau_handle,\"shmem_double_iput_\"); \n    if (shmem_double_iput__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), sizeof(double)* (*a5));\n  (*shmem_double_iput__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(double)* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_put_\n **********************************************************/\n\nvoid shmem_double_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_double_put__p_h) (void *, void *, int *, int *);\n  static shmem_double_put__p_h shmem_double_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_put__h == NULL)\n\tshmem_double_put__h = (shmem_double_put__p_h) dlsym(tau_handle,\"shmem_double_put_\"); \n    if (shmem_double_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(double)* (*a3));\n  (*shmem_double_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(double)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect32_\n **********************************************************/\n\nvoid shmem_fcollect32_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect32__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect32__p_h shmem_fcollect32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect32_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect32__h == NULL)\n\tshmem_fcollect32__h = (shmem_fcollect32__p_h) dlsym(tau_handle,\"shmem_fcollect32_\"); \n    if (shmem_fcollect32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect32__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect4_\n **********************************************************/\n\nvoid shmem_fcollect4_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect4__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect4__p_h shmem_fcollect4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect4_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect4__h == NULL)\n\tshmem_fcollect4__h = (shmem_fcollect4__p_h) dlsym(tau_handle,\"shmem_fcollect4_\"); \n    if (shmem_fcollect4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect4__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect64_\n **********************************************************/\n\nvoid shmem_fcollect64_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect64__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect64__p_h shmem_fcollect64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect64_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect64__h == NULL)\n\tshmem_fcollect64__h = (shmem_fcollect64__p_h) dlsym(tau_handle,\"shmem_fcollect64_\"); \n    if (shmem_fcollect64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect64__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect8_\n **********************************************************/\n\nvoid shmem_fcollect8_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect8__p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect8__p_h shmem_fcollect8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect8_(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect8__h == NULL)\n\tshmem_fcollect8__h = (shmem_fcollect8__p_h) dlsym(tau_handle,\"shmem_fcollect8_\"); \n    if (shmem_fcollect8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect8__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fence_\n **********************************************************/\n\nvoid shmem_fence_() {\n\n  typedef void (*shmem_fence__p_h) ();\n  static shmem_fence__p_h shmem_fence__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fence_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fence__h == NULL)\n\tshmem_fence__h = (shmem_fence__p_h) dlsym(tau_handle,\"shmem_fence_\"); \n    if (shmem_fence__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fence__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get128_\n **********************************************************/\n\nvoid shmem_get128_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get128__p_h) (void *, void *, int *, int *);\n  static shmem_get128__p_h shmem_get128__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get128_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get128__h == NULL)\n\tshmem_get128__h = (shmem_get128__p_h) dlsym(tau_handle,\"shmem_get128_\"); \n    if (shmem_get128__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 16* (*a3), (*a4));\n  (*shmem_get128__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 16* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get16_\n **********************************************************/\n\nvoid shmem_get16_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get16__p_h) (void *, void *, int *, int *);\n  static shmem_get16__p_h shmem_get16__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get16_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get16__h == NULL)\n\tshmem_get16__h = (shmem_get16__p_h) dlsym(tau_handle,\"shmem_get16_\"); \n    if (shmem_get16__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 2* (*a3), (*a4));\n  (*shmem_get16__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 2* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get32_\n **********************************************************/\n\nvoid shmem_get32_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get32__p_h) (void *, void *, int *, int *);\n  static shmem_get32__p_h shmem_get32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get32_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get32__h == NULL)\n\tshmem_get32__h = (shmem_get32__p_h) dlsym(tau_handle,\"shmem_get32_\"); \n    if (shmem_get32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a3), (*a4));\n  (*shmem_get32__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 4* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get4_\n **********************************************************/\n\nvoid shmem_get4_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get4__p_h) (void *, void *, int *, int *);\n  static shmem_get4__p_h shmem_get4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get4_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get4__h == NULL)\n\tshmem_get4__h = (shmem_get4__p_h) dlsym(tau_handle,\"shmem_get4_\"); \n    if (shmem_get4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a3), (*a4));\n  (*shmem_get4__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 4* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get64_\n **********************************************************/\n\nvoid shmem_get64_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get64__p_h) (void *, void *, int *, int *);\n  static shmem_get64__p_h shmem_get64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get64_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get64__h == NULL)\n\tshmem_get64__h = (shmem_get64__p_h) dlsym(tau_handle,\"shmem_get64_\"); \n    if (shmem_get64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a3), (*a4));\n  (*shmem_get64__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 8* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get8_\n **********************************************************/\n\nvoid shmem_get8_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get8__p_h) (void *, void *, int *, int *);\n  static shmem_get8__p_h shmem_get8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get8_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get8__h == NULL)\n\tshmem_get8__h = (shmem_get8__p_h) dlsym(tau_handle,\"shmem_get8_\"); \n    if (shmem_get8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a3), (*a4));\n  (*shmem_get8__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 8* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_getmem_\n **********************************************************/\n\nvoid shmem_getmem_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_getmem__p_h) (void *, void *, int *, int *);\n  static shmem_getmem__p_h shmem_getmem__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_getmem_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_getmem__h == NULL)\n\tshmem_getmem__h = (shmem_getmem__p_h) dlsym(tau_handle,\"shmem_getmem_\"); \n    if (shmem_getmem__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_getmem__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_group_create_strided_\n **********************************************************/\n\nvoid shmem_group_create_strided_(int * a1, int * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_group_create_strided__p_h) (int *, int *, int *, int *, int *, int *);\n  static shmem_group_create_strided__p_h shmem_group_create_strided__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_group_create_strided_(int *, int *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_group_create_strided__h == NULL)\n\tshmem_group_create_strided__h = (shmem_group_create_strided__p_h) dlsym(tau_handle,\"shmem_group_create_strided_\"); \n    if (shmem_group_create_strided__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_group_create_strided__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_group_delete_\n **********************************************************/\n\nvoid shmem_group_delete_(int * a1) {\n\n  typedef void (*shmem_group_delete__p_h) (int *);\n  static shmem_group_delete__p_h shmem_group_delete__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_group_delete_(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_group_delete__h == NULL)\n\tshmem_group_delete__h = (shmem_group_delete__p_h) dlsym(tau_handle,\"shmem_group_delete_\"); \n    if (shmem_group_delete__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_group_delete__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget128_\n **********************************************************/\n\nvoid shmem_iget128_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget128__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget128__p_h shmem_iget128__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget128_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget128__h == NULL)\n\tshmem_iget128__h = (shmem_iget128__p_h) dlsym(tau_handle,\"shmem_iget128_\"); \n    if (shmem_iget128__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 16* (*a5), (*a6));\n  (*shmem_iget128__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 16* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget16_\n **********************************************************/\n\nvoid shmem_iget16_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget16__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget16__p_h shmem_iget16__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget16_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget16__h == NULL)\n\tshmem_iget16__h = (shmem_iget16__p_h) dlsym(tau_handle,\"shmem_iget16_\"); \n    if (shmem_iget16__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 2* (*a5), (*a6));\n  (*shmem_iget16__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 2* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget32_\n **********************************************************/\n\nvoid shmem_iget32_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget32__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget32__p_h shmem_iget32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget32_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget32__h == NULL)\n\tshmem_iget32__h = (shmem_iget32__p_h) dlsym(tau_handle,\"shmem_iget32_\"); \n    if (shmem_iget32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a5), (*a6));\n  (*shmem_iget32__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 4* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget4_\n **********************************************************/\n\nvoid shmem_iget4_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget4__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget4__p_h shmem_iget4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget4_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget4__h == NULL)\n\tshmem_iget4__h = (shmem_iget4__p_h) dlsym(tau_handle,\"shmem_iget4_\"); \n    if (shmem_iget4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a5), (*a6));\n  (*shmem_iget4__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 4* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget64_\n **********************************************************/\n\nvoid shmem_iget64_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget64__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget64__p_h shmem_iget64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget64_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget64__h == NULL)\n\tshmem_iget64__h = (shmem_iget64__p_h) dlsym(tau_handle,\"shmem_iget64_\"); \n    if (shmem_iget64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a5), (*a6));\n  (*shmem_iget64__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 8* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget8_\n **********************************************************/\n\nvoid shmem_iget8_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget8__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget8__p_h shmem_iget8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget8_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget8__h == NULL)\n\tshmem_iget8__h = (shmem_iget8__p_h) dlsym(tau_handle,\"shmem_iget8_\"); \n    if (shmem_iget8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a5), (*a6));\n  (*shmem_iget8__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 8* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_and_to_all_\n **********************************************************/\n\nvoid shmem_int2_and_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_and_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_and_to_all__p_h shmem_int2_and_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_and_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_and_to_all__h == NULL)\n\tshmem_int2_and_to_all__h = (shmem_int2_and_to_all__p_h) dlsym(tau_handle,\"shmem_int2_and_to_all_\"); \n    if (shmem_int2_and_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_and_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_max_to_all_\n **********************************************************/\n\nvoid shmem_int2_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_max_to_all__p_h shmem_int2_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_max_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_max_to_all__h == NULL)\n\tshmem_int2_max_to_all__h = (shmem_int2_max_to_all__p_h) dlsym(tau_handle,\"shmem_int2_max_to_all_\"); \n    if (shmem_int2_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_min_to_all_\n **********************************************************/\n\nvoid shmem_int2_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_min_to_all__p_h shmem_int2_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_min_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_min_to_all__h == NULL)\n\tshmem_int2_min_to_all__h = (shmem_int2_min_to_all__p_h) dlsym(tau_handle,\"shmem_int2_min_to_all_\"); \n    if (shmem_int2_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_or_to_all_\n **********************************************************/\n\nvoid shmem_int2_or_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_or_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_or_to_all__p_h shmem_int2_or_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_or_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_or_to_all__h == NULL)\n\tshmem_int2_or_to_all__h = (shmem_int2_or_to_all__p_h) dlsym(tau_handle,\"shmem_int2_or_to_all_\"); \n    if (shmem_int2_or_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_or_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_prod_to_all_\n **********************************************************/\n\nvoid shmem_int2_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_prod_to_all__p_h shmem_int2_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_prod_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_prod_to_all__h == NULL)\n\tshmem_int2_prod_to_all__h = (shmem_int2_prod_to_all__p_h) dlsym(tau_handle,\"shmem_int2_prod_to_all_\"); \n    if (shmem_int2_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_sum_to_all_\n **********************************************************/\n\nvoid shmem_int2_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_sum_to_all__p_h shmem_int2_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_sum_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_sum_to_all__h == NULL)\n\tshmem_int2_sum_to_all__h = (shmem_int2_sum_to_all__p_h) dlsym(tau_handle,\"shmem_int2_sum_to_all_\"); \n    if (shmem_int2_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_xor_to_all_\n **********************************************************/\n\nvoid shmem_int2_xor_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_xor_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_xor_to_all__p_h shmem_int2_xor_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_xor_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_xor_to_all__h == NULL)\n\tshmem_int2_xor_to_all__h = (shmem_int2_xor_to_all__p_h) dlsym(tau_handle,\"shmem_int2_xor_to_all_\"); \n    if (shmem_int2_xor_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_xor_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_add_\n **********************************************************/\n\nvoid shmem_int4_add_(void * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_int4_add__p_h) (void *, int *, int *);\n  static shmem_int4_add__p_h shmem_int4_add__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_add_(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_add__h == NULL)\n\tshmem_int4_add__h = (shmem_int4_add__p_h) dlsym(tau_handle,\"shmem_int4_add_\"); \n    if (shmem_int4_add__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_add__h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_and_to_all_\n **********************************************************/\n\nvoid shmem_int4_and_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_and_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_and_to_all__p_h shmem_int4_and_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_and_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_and_to_all__h == NULL)\n\tshmem_int4_and_to_all__h = (shmem_int4_and_to_all__p_h) dlsym(tau_handle,\"shmem_int4_and_to_all_\"); \n    if (shmem_int4_and_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_and_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_cswap_\n **********************************************************/\n\nint shmem_int4_cswap_(int * a1, int * a2, int * a3, int * a4) {\n\n  typedef int (*shmem_int4_cswap__p_h) (int *, int *, int *, int *);\n  static shmem_int4_cswap__p_h shmem_int4_cswap__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_cswap_(int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_cswap__h == NULL)\n\tshmem_int4_cswap__h = (shmem_int4_cswap__p_h) dlsym(tau_handle,\"shmem_int4_cswap_\"); \n    if (shmem_int4_cswap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a4));\n  retval  =  (*shmem_int4_cswap__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)*1);\n  if (retval == (*a2)) { \n    TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)*1);\n    TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a4));\n  }\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_fadd_\n **********************************************************/\n\nint shmem_int4_fadd_(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_int4_fadd__p_h) (void *, int *, int *);\n  static shmem_int4_fadd__p_h shmem_int4_fadd__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_fadd_(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_fadd__h == NULL)\n\tshmem_int4_fadd__h = (shmem_int4_fadd__p_h) dlsym(tau_handle,\"shmem_int4_fadd_\"); \n    if (shmem_int4_fadd__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int4_fadd__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_finc_\n **********************************************************/\n\nint shmem_int4_finc_(void * a1, int * a2) {\n\n  typedef int (*shmem_int4_finc__p_h) (void *, int *);\n  static shmem_int4_finc__p_h shmem_int4_finc__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_finc_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_finc__h == NULL)\n\tshmem_int4_finc__h = (shmem_int4_finc__p_h) dlsym(tau_handle,\"shmem_int4_finc_\"); \n    if (shmem_int4_finc__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a2));\n  retval  =  (*shmem_int4_finc__h)( a1,  a2);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a2), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a2), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a2));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_inc_\n **********************************************************/\n\nvoid shmem_int4_inc_(void * a1, int * a2) {\n\n  typedef void (*shmem_int4_inc__p_h) (void *, int *);\n  static shmem_int4_inc__p_h shmem_int4_inc__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_inc_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_inc__h == NULL)\n\tshmem_int4_inc__h = (shmem_int4_inc__p_h) dlsym(tau_handle,\"shmem_int4_inc_\"); \n    if (shmem_int4_inc__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_inc__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_max_to_all_\n **********************************************************/\n\nvoid shmem_int4_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_max_to_all__p_h shmem_int4_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_max_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_max_to_all__h == NULL)\n\tshmem_int4_max_to_all__h = (shmem_int4_max_to_all__p_h) dlsym(tau_handle,\"shmem_int4_max_to_all_\"); \n    if (shmem_int4_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_min_to_all_\n **********************************************************/\n\nvoid shmem_int4_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_min_to_all__p_h shmem_int4_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_min_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_min_to_all__h == NULL)\n\tshmem_int4_min_to_all__h = (shmem_int4_min_to_all__p_h) dlsym(tau_handle,\"shmem_int4_min_to_all_\"); \n    if (shmem_int4_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_or_to_all_\n **********************************************************/\n\nvoid shmem_int4_or_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_or_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_or_to_all__p_h shmem_int4_or_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_or_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_or_to_all__h == NULL)\n\tshmem_int4_or_to_all__h = (shmem_int4_or_to_all__p_h) dlsym(tau_handle,\"shmem_int4_or_to_all_\"); \n    if (shmem_int4_or_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_or_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_prod_to_all_\n **********************************************************/\n\nvoid shmem_int4_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_prod_to_all__p_h shmem_int4_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_prod_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_prod_to_all__h == NULL)\n\tshmem_int4_prod_to_all__h = (shmem_int4_prod_to_all__p_h) dlsym(tau_handle,\"shmem_int4_prod_to_all_\"); \n    if (shmem_int4_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_sum_to_all_\n **********************************************************/\n\nvoid shmem_int4_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_sum_to_all__p_h shmem_int4_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_sum_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_sum_to_all__h == NULL)\n\tshmem_int4_sum_to_all__h = (shmem_int4_sum_to_all__p_h) dlsym(tau_handle,\"shmem_int4_sum_to_all_\"); \n    if (shmem_int4_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_swap_\n **********************************************************/\n\nint shmem_int4_swap_(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_int4_swap__p_h) (void *, int *, int *);\n  static shmem_int4_swap__p_h shmem_int4_swap__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_swap_(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_swap__h == NULL)\n\tshmem_int4_swap__h = (shmem_int4_swap__p_h) dlsym(tau_handle,\"shmem_int4_swap_\"); \n    if (shmem_int4_swap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int4_swap__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_wait_\n **********************************************************/\n\nvoid shmem_int4_wait_(int * a1, int * a2) {\n\n  typedef void (*shmem_int4_wait__p_h) (int *, int *);\n  static shmem_int4_wait__p_h shmem_int4_wait__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_wait_(int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_wait__h == NULL)\n\tshmem_int4_wait__h = (shmem_int4_wait__p_h) dlsym(tau_handle,\"shmem_int4_wait_\"); \n    if (shmem_int4_wait__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_wait__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_wait_until_\n **********************************************************/\n\nvoid shmem_int4_wait_until_(int * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_int4_wait_until__p_h) (int *, int *, int *);\n  static shmem_int4_wait_until__p_h shmem_int4_wait_until__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_wait_until_(int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_wait_until__h == NULL)\n\tshmem_int4_wait_until__h = (shmem_int4_wait_until__p_h) dlsym(tau_handle,\"shmem_int4_wait_until_\"); \n    if (shmem_int4_wait_until__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_wait_until__h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_xor_to_all_\n **********************************************************/\n\nvoid shmem_int4_xor_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_xor_to_all__p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_xor_to_all__p_h shmem_int4_xor_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_xor_to_all_(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_xor_to_all__h == NULL)\n\tshmem_int4_xor_to_all__h = (shmem_int4_xor_to_all__p_h) dlsym(tau_handle,\"shmem_int4_xor_to_all_\"); \n    if (shmem_int4_xor_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_xor_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_add_\n **********************************************************/\n\nvoid shmem_int8_add_(void * a1, long * a2, int * a3) {\n\n  typedef void (*shmem_int8_add__p_h) (void *, long *, int *);\n  static shmem_int8_add__p_h shmem_int8_add__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_add_(void *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_add__h == NULL)\n\tshmem_int8_add__h = (shmem_int8_add__p_h) dlsym(tau_handle,\"shmem_int8_add_\"); \n    if (shmem_int8_add__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_add__h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_and_to_all_\n **********************************************************/\n\nvoid shmem_int8_and_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_and_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_and_to_all__p_h shmem_int8_and_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_and_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_and_to_all__h == NULL)\n\tshmem_int8_and_to_all__h = (shmem_int8_and_to_all__p_h) dlsym(tau_handle,\"shmem_int8_and_to_all_\"); \n    if (shmem_int8_and_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_and_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_cswap_\n **********************************************************/\n\nlong shmem_int8_cswap_(long * a1, long * a2, long * a3, int * a4) {\n\n  typedef long (*shmem_int8_cswap__p_h) (long *, long *, long *, int *);\n  static shmem_int8_cswap__p_h shmem_int8_cswap__h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_cswap_(long *, long *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_cswap__h == NULL)\n\tshmem_int8_cswap__h = (shmem_int8_cswap__p_h) dlsym(tau_handle,\"shmem_int8_cswap_\"); \n    if (shmem_int8_cswap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a4));\n  retval  =  (*shmem_int8_cswap__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)*1);\n  if (retval == (*a2)) { \n    TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)*1);\n    TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a4));\n  }\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_fadd_\n **********************************************************/\n\nlong shmem_int8_fadd_(void * a1, int * a2, int * a3) {\n\n  typedef long (*shmem_int8_fadd__p_h) (void *, int *, int *);\n  static shmem_int8_fadd__p_h shmem_int8_fadd__h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_fadd_(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_fadd__h == NULL)\n\tshmem_int8_fadd__h = (shmem_int8_fadd__p_h) dlsym(tau_handle,\"shmem_int8_fadd_\"); \n    if (shmem_int8_fadd__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int8_fadd__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_finc_\n **********************************************************/\n\nlong shmem_int8_finc_(void * a1, int * a2) {\n\n  typedef long (*shmem_int8_finc__p_h) (void *, int *);\n  static shmem_int8_finc__p_h shmem_int8_finc__h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_finc_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_finc__h == NULL)\n\tshmem_int8_finc__h = (shmem_int8_finc__p_h) dlsym(tau_handle,\"shmem_int8_finc_\"); \n    if (shmem_int8_finc__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a2));\n  retval  =  (*shmem_int8_finc__h)( a1,  a2);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a2), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a2), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a2));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_inc_\n **********************************************************/\n\nvoid shmem_int8_inc_(void * a1, int * a2) {\n\n  typedef void (*shmem_int8_inc__p_h) (void *, int *);\n  static shmem_int8_inc__p_h shmem_int8_inc__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_inc_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_inc__h == NULL)\n\tshmem_int8_inc__h = (shmem_int8_inc__p_h) dlsym(tau_handle,\"shmem_int8_inc_\"); \n    if (shmem_int8_inc__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_inc__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_max_to_all_\n **********************************************************/\n\nvoid shmem_int8_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_max_to_all__p_h shmem_int8_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_max_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_max_to_all__h == NULL)\n\tshmem_int8_max_to_all__h = (shmem_int8_max_to_all__p_h) dlsym(tau_handle,\"shmem_int8_max_to_all_\"); \n    if (shmem_int8_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_min_to_all_\n **********************************************************/\n\nvoid shmem_int8_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_min_to_all__p_h shmem_int8_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_min_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_min_to_all__h == NULL)\n\tshmem_int8_min_to_all__h = (shmem_int8_min_to_all__p_h) dlsym(tau_handle,\"shmem_int8_min_to_all_\"); \n    if (shmem_int8_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_or_to_all_\n **********************************************************/\n\nvoid shmem_int8_or_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_or_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_or_to_all__p_h shmem_int8_or_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_or_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_or_to_all__h == NULL)\n\tshmem_int8_or_to_all__h = (shmem_int8_or_to_all__p_h) dlsym(tau_handle,\"shmem_int8_or_to_all_\"); \n    if (shmem_int8_or_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_or_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_prod_to_all_\n **********************************************************/\n\nvoid shmem_int8_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_prod_to_all__p_h shmem_int8_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_prod_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_prod_to_all__h == NULL)\n\tshmem_int8_prod_to_all__h = (shmem_int8_prod_to_all__p_h) dlsym(tau_handle,\"shmem_int8_prod_to_all_\"); \n    if (shmem_int8_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_sum_to_all_\n **********************************************************/\n\nvoid shmem_int8_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_sum_to_all__p_h shmem_int8_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_sum_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_sum_to_all__h == NULL)\n\tshmem_int8_sum_to_all__h = (shmem_int8_sum_to_all__p_h) dlsym(tau_handle,\"shmem_int8_sum_to_all_\"); \n    if (shmem_int8_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_swap_\n **********************************************************/\n\nlong shmem_int8_swap_(void * a1, long * a2, int * a3) {\n\n  typedef long (*shmem_int8_swap__p_h) (void *, long *, int *);\n  static shmem_int8_swap__p_h shmem_int8_swap__h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_swap_(void *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_swap__h == NULL)\n\tshmem_int8_swap__h = (shmem_int8_swap__p_h) dlsym(tau_handle,\"shmem_int8_swap_\"); \n    if (shmem_int8_swap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int8_swap__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_wait_\n **********************************************************/\n\nvoid shmem_int8_wait_(long * a1, long * a2) {\n\n  typedef void (*shmem_int8_wait__p_h) (long *, long *);\n  static shmem_int8_wait__p_h shmem_int8_wait__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_wait_(long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_wait__h == NULL)\n\tshmem_int8_wait__h = (shmem_int8_wait__p_h) dlsym(tau_handle,\"shmem_int8_wait_\"); \n    if (shmem_int8_wait__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_wait__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_wait_until_\n **********************************************************/\n\nvoid shmem_int8_wait_until_(long * a1, int * a2, long * a3) {\n\n  typedef void (*shmem_int8_wait_until__p_h) (long *, int *, long *);\n  static shmem_int8_wait_until__p_h shmem_int8_wait_until__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_wait_until_(long *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_wait_until__h == NULL)\n\tshmem_int8_wait_until__h = (shmem_int8_wait_until__p_h) dlsym(tau_handle,\"shmem_int8_wait_until_\"); \n    if (shmem_int8_wait_until__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_wait_until__h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_xor_to_all_\n **********************************************************/\n\nvoid shmem_int8_xor_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_xor_to_all__p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_xor_to_all__p_h shmem_int8_xor_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_xor_to_all_(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_xor_to_all__h == NULL)\n\tshmem_int8_xor_to_all__h = (shmem_int8_xor_to_all__p_h) dlsym(tau_handle,\"shmem_int8_xor_to_all_\"); \n    if (shmem_int8_xor_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_xor_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_get_\n **********************************************************/\n\nvoid shmem_integer_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_integer_get__p_h) (void *, void *, int *, int *);\n  static shmem_integer_get__p_h shmem_integer_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_get__h == NULL)\n\tshmem_integer_get__h = (shmem_integer_get__p_h) dlsym(tau_handle,\"shmem_integer_get_\"); \n    if (shmem_integer_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)* (*a3), (*a4));\n  (*shmem_integer_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_iget_\n **********************************************************/\n\nvoid shmem_integer_iget_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_integer_iget__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_integer_iget__p_h shmem_integer_iget__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_iget_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_iget__h == NULL)\n\tshmem_integer_iget__h = (shmem_integer_iget__p_h) dlsym(tau_handle,\"shmem_integer_iget_\"); \n    if (shmem_integer_iget__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)* (*a5), (*a6));\n  (*shmem_integer_iget__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), sizeof(int)* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_iput_\n **********************************************************/\n\nvoid shmem_integer_iput_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_integer_iput__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_integer_iput__p_h shmem_integer_iput__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_iput_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_iput__h == NULL)\n\tshmem_integer_iput__h = (shmem_integer_iput__p_h) dlsym(tau_handle,\"shmem_integer_iput_\"); \n    if (shmem_integer_iput__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), sizeof(int)* (*a5));\n  (*shmem_integer_iput__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_put_\n **********************************************************/\n\nvoid shmem_integer_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_integer_put__p_h) (void *, void *, int *, int *);\n  static shmem_integer_put__p_h shmem_integer_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_put__h == NULL)\n\tshmem_integer_put__h = (shmem_integer_put__p_h) dlsym(tau_handle,\"shmem_integer_put_\"); \n    if (shmem_integer_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)* (*a3));\n  (*shmem_integer_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput128_\n **********************************************************/\n\nvoid shmem_iput128_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput128__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput128__p_h shmem_iput128__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput128_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput128__h == NULL)\n\tshmem_iput128__h = (shmem_iput128__p_h) dlsym(tau_handle,\"shmem_iput128_\"); \n    if (shmem_iput128__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 16* (*a5));\n  (*shmem_iput128__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 16* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput16_\n **********************************************************/\n\nvoid shmem_iput16_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput16__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput16__p_h shmem_iput16__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput16_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput16__h == NULL)\n\tshmem_iput16__h = (shmem_iput16__p_h) dlsym(tau_handle,\"shmem_iput16_\"); \n    if (shmem_iput16__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 2* (*a5));\n  (*shmem_iput16__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 2* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput32_\n **********************************************************/\n\nvoid shmem_iput32_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput32__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput32__p_h shmem_iput32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput32_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput32__h == NULL)\n\tshmem_iput32__h = (shmem_iput32__p_h) dlsym(tau_handle,\"shmem_iput32_\"); \n    if (shmem_iput32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 4* (*a5));\n  (*shmem_iput32__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput4_\n **********************************************************/\n\nvoid shmem_iput4_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput4__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput4__p_h shmem_iput4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput4_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput4__h == NULL)\n\tshmem_iput4__h = (shmem_iput4__p_h) dlsym(tau_handle,\"shmem_iput4_\"); \n    if (shmem_iput4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 4* (*a5));\n  (*shmem_iput4__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput64_\n **********************************************************/\n\nvoid shmem_iput64_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput64__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput64__p_h shmem_iput64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput64_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput64__h == NULL)\n\tshmem_iput64__h = (shmem_iput64__p_h) dlsym(tau_handle,\"shmem_iput64_\"); \n    if (shmem_iput64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 8* (*a5));\n  (*shmem_iput64__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput8_\n **********************************************************/\n\nvoid shmem_iput8_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput8__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput8__p_h shmem_iput8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput8_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput8__h == NULL)\n\tshmem_iput8__h = (shmem_iput8__p_h) dlsym(tau_handle,\"shmem_iput8_\"); \n    if (shmem_iput8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 8* (*a5));\n  (*shmem_iput8__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_get_\n **********************************************************/\n\nvoid shmem_logical_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_logical_get__p_h) (void *, void *, int *, int *);\n  static shmem_logical_get__p_h shmem_logical_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_get__h == NULL)\n\tshmem_logical_get__h = (shmem_logical_get__p_h) dlsym(tau_handle,\"shmem_logical_get_\"); \n    if (shmem_logical_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_logical_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_iget_\n **********************************************************/\n\nvoid shmem_logical_iget_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_logical_iget__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_logical_iget__p_h shmem_logical_iget__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_iget_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_iget__h == NULL)\n\tshmem_logical_iget__h = (shmem_logical_iget__p_h) dlsym(tau_handle,\"shmem_logical_iget_\"); \n    if (shmem_logical_iget__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_logical_iget__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_iput_\n **********************************************************/\n\nvoid shmem_logical_iput_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_logical_iput__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_logical_iput__p_h shmem_logical_iput__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_iput_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_iput__h == NULL)\n\tshmem_logical_iput__h = (shmem_logical_iput__p_h) dlsym(tau_handle,\"shmem_logical_iput_\"); \n    if (shmem_logical_iput__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_logical_iput__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_put_\n **********************************************************/\n\nvoid shmem_logical_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_logical_put__p_h) (void *, void *, int *, int *);\n  static shmem_logical_put__p_h shmem_logical_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_put__h == NULL)\n\tshmem_logical_put__h = (shmem_logical_put__p_h) dlsym(tau_handle,\"shmem_logical_put_\"); \n    if (shmem_logical_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_logical_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_my_pe_\n **********************************************************/\n\nint shmem_my_pe_() {\n\n  typedef int (*shmem_my_pe__p_h) ();\n  static shmem_my_pe__p_h shmem_my_pe__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_my_pe_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_my_pe__h == NULL)\n\tshmem_my_pe__h = (shmem_my_pe__p_h) dlsym(tau_handle,\"shmem_my_pe_\"); \n    if (shmem_my_pe__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_my_pe__h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_n_pes_\n **********************************************************/\n\nint shmem_n_pes_() {\n\n  typedef int (*shmem_n_pes__p_h) ();\n  static shmem_n_pes__p_h shmem_n_pes__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_n_pes_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_n_pes__h == NULL)\n\tshmem_n_pes__h = (shmem_n_pes__p_h) dlsym(tau_handle,\"shmem_n_pes_\"); \n    if (shmem_n_pes__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_n_pes__h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_pe_accessible_\n **********************************************************/\n\nint shmem_pe_accessible_(int * a1) {\n\n  typedef int (*shmem_pe_accessible__p_h) (int *);\n  static shmem_pe_accessible__p_h shmem_pe_accessible__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_pe_accessible_(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_pe_accessible__h == NULL)\n\tshmem_pe_accessible__h = (shmem_pe_accessible__p_h) dlsym(tau_handle,\"shmem_pe_accessible_\"); \n    if (shmem_pe_accessible__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_pe_accessible__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_ptr_\n **********************************************************/\n\nvoid shmem_ptr_(void * a1, int * a2) {\n\n  typedef void (*shmem_ptr__p_h) (void *, int *);\n  static shmem_ptr__p_h shmem_ptr__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_ptr_(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_ptr__h == NULL)\n\tshmem_ptr__h = (shmem_ptr__p_h) dlsym(tau_handle,\"shmem_ptr_\"); \n    if (shmem_ptr__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_ptr__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put128_\n **********************************************************/\n\nvoid shmem_put128_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put128__p_h) (void *, void *, int *, int *);\n  static shmem_put128__p_h shmem_put128__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put128_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put128__h == NULL)\n\tshmem_put128__h = (shmem_put128__p_h) dlsym(tau_handle,\"shmem_put128_\"); \n    if (shmem_put128__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 16* (*a3));\n  (*shmem_put128__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 16* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put16_\n **********************************************************/\n\nvoid shmem_put16_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put16__p_h) (void *, void *, int *, int *);\n  static shmem_put16__p_h shmem_put16__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put16_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put16__h == NULL)\n\tshmem_put16__h = (shmem_put16__p_h) dlsym(tau_handle,\"shmem_put16_\"); \n    if (shmem_put16__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 2* (*a3));\n  (*shmem_put16__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 2* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put32_\n **********************************************************/\n\nvoid shmem_put32_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put32__p_h) (void *, void *, int *, int *);\n  static shmem_put32__p_h shmem_put32__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put32_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put32__h == NULL)\n\tshmem_put32__h = (shmem_put32__p_h) dlsym(tau_handle,\"shmem_put32_\"); \n    if (shmem_put32__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 4* (*a3));\n  (*shmem_put32__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put4_\n **********************************************************/\n\nvoid shmem_put4_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put4__p_h) (void *, void *, int *, int *);\n  static shmem_put4__p_h shmem_put4__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put4_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put4__h == NULL)\n\tshmem_put4__h = (shmem_put4__p_h) dlsym(tau_handle,\"shmem_put4_\"); \n    if (shmem_put4__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 4* (*a3));\n  (*shmem_put4__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put64_\n **********************************************************/\n\nvoid shmem_put64_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put64__p_h) (void *, void *, int *, int *);\n  static shmem_put64__p_h shmem_put64__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put64_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put64__h == NULL)\n\tshmem_put64__h = (shmem_put64__p_h) dlsym(tau_handle,\"shmem_put64_\"); \n    if (shmem_put64__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 8* (*a3));\n  (*shmem_put64__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put8_\n **********************************************************/\n\nvoid shmem_put8_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put8__p_h) (void *, void *, int *, int *);\n  static shmem_put8__p_h shmem_put8__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put8_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put8__h == NULL)\n\tshmem_put8__h = (shmem_put8__p_h) dlsym(tau_handle,\"shmem_put8_\"); \n    if (shmem_put8__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 8* (*a3));\n  (*shmem_put8__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_putmem_\n **********************************************************/\n\nvoid shmem_putmem_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_putmem__p_h) (void *, void *, int *, int *);\n  static shmem_putmem__p_h shmem_putmem__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_putmem_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_putmem__h == NULL)\n\tshmem_putmem__h = (shmem_putmem__p_h) dlsym(tau_handle,\"shmem_putmem_\"); \n    if (shmem_putmem__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_putmem__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_quiet_\n **********************************************************/\n\nvoid shmem_quiet_() {\n\n  typedef void (*shmem_quiet__p_h) ();\n  static shmem_quiet__p_h shmem_quiet__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_quiet_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_quiet__h == NULL)\n\tshmem_quiet__h = (shmem_quiet__p_h) dlsym(tau_handle,\"shmem_quiet_\"); \n    if (shmem_quiet__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_quiet__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_max_to_all_\n **********************************************************/\n\nvoid shmem_real16_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_max_to_all__p_h shmem_real16_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_max_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_max_to_all__h == NULL)\n\tshmem_real16_max_to_all__h = (shmem_real16_max_to_all__p_h) dlsym(tau_handle,\"shmem_real16_max_to_all_\"); \n    if (shmem_real16_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_min_to_all_\n **********************************************************/\n\nvoid shmem_real16_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_min_to_all__p_h shmem_real16_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_min_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_min_to_all__h == NULL)\n\tshmem_real16_min_to_all__h = (shmem_real16_min_to_all__p_h) dlsym(tau_handle,\"shmem_real16_min_to_all_\"); \n    if (shmem_real16_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_prod_to_all_\n **********************************************************/\n\nvoid shmem_real16_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_prod_to_all__p_h shmem_real16_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_prod_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_prod_to_all__h == NULL)\n\tshmem_real16_prod_to_all__h = (shmem_real16_prod_to_all__p_h) dlsym(tau_handle,\"shmem_real16_prod_to_all_\"); \n    if (shmem_real16_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_sum_to_all_\n **********************************************************/\n\nvoid shmem_real16_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_sum_to_all__p_h shmem_real16_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_sum_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_sum_to_all__h == NULL)\n\tshmem_real16_sum_to_all__h = (shmem_real16_sum_to_all__p_h) dlsym(tau_handle,\"shmem_real16_sum_to_all_\"); \n    if (shmem_real16_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_max_to_all_\n **********************************************************/\n\nvoid shmem_real4_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_max_to_all__p_h shmem_real4_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_max_to_all_(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_max_to_all__h == NULL)\n\tshmem_real4_max_to_all__h = (shmem_real4_max_to_all__p_h) dlsym(tau_handle,\"shmem_real4_max_to_all_\"); \n    if (shmem_real4_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_min_to_all_\n **********************************************************/\n\nvoid shmem_real4_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_min_to_all__p_h shmem_real4_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_min_to_all_(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_min_to_all__h == NULL)\n\tshmem_real4_min_to_all__h = (shmem_real4_min_to_all__p_h) dlsym(tau_handle,\"shmem_real4_min_to_all_\"); \n    if (shmem_real4_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_prod_to_all_\n **********************************************************/\n\nvoid shmem_real4_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_prod_to_all__p_h shmem_real4_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_prod_to_all_(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_prod_to_all__h == NULL)\n\tshmem_real4_prod_to_all__h = (shmem_real4_prod_to_all__p_h) dlsym(tau_handle,\"shmem_real4_prod_to_all_\"); \n    if (shmem_real4_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_sum_to_all_\n **********************************************************/\n\nvoid shmem_real4_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_sum_to_all__p_h shmem_real4_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_sum_to_all_(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_sum_to_all__h == NULL)\n\tshmem_real4_sum_to_all__h = (shmem_real4_sum_to_all__p_h) dlsym(tau_handle,\"shmem_real4_sum_to_all_\"); \n    if (shmem_real4_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_swap_\n **********************************************************/\n\nfloat shmem_real4_swap_(void * a1, float * a2, int * a3) {\n\n  typedef float (*shmem_real4_swap__p_h) (void *, float *, int *);\n  static shmem_real4_swap__p_h shmem_real4_swap__h = NULL;\n  float retval = 0;\n  TAU_PROFILE_TIMER(t,\"float shmem_real4_swap_(void *, float *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_real4_swap__h == NULL)\n\tshmem_real4_swap__h = (shmem_real4_swap__p_h) dlsym(tau_handle,\"shmem_real4_swap_\"); \n    if (shmem_real4_swap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4*1, (*a3));\n  retval  =  (*shmem_real4_swap__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 4*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 4*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_real8_max_to_all_\n **********************************************************/\n\nvoid shmem_real8_max_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_max_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_max_to_all__p_h shmem_real8_max_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_max_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_max_to_all__h == NULL)\n\tshmem_real8_max_to_all__h = (shmem_real8_max_to_all__p_h) dlsym(tau_handle,\"shmem_real8_max_to_all_\"); \n    if (shmem_real8_max_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_max_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_min_to_all_\n **********************************************************/\n\nvoid shmem_real8_min_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_min_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_min_to_all__p_h shmem_real8_min_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_min_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_min_to_all__h == NULL)\n\tshmem_real8_min_to_all__h = (shmem_real8_min_to_all__p_h) dlsym(tau_handle,\"shmem_real8_min_to_all_\"); \n    if (shmem_real8_min_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_min_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_prod_to_all_\n **********************************************************/\n\nvoid shmem_real8_prod_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_prod_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_prod_to_all__p_h shmem_real8_prod_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_prod_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_prod_to_all__h == NULL)\n\tshmem_real8_prod_to_all__h = (shmem_real8_prod_to_all__p_h) dlsym(tau_handle,\"shmem_real8_prod_to_all_\"); \n    if (shmem_real8_prod_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_prod_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_sum_to_all_\n **********************************************************/\n\nvoid shmem_real8_sum_to_all_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_sum_to_all__p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_sum_to_all__p_h shmem_real8_sum_to_all__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_sum_to_all_(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_sum_to_all__h == NULL)\n\tshmem_real8_sum_to_all__h = (shmem_real8_sum_to_all__p_h) dlsym(tau_handle,\"shmem_real8_sum_to_all_\"); \n    if (shmem_real8_sum_to_all__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_sum_to_all__h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_swap_\n **********************************************************/\n\ndouble shmem_real8_swap_(void * a1, double * a2, int * a3) {\n\n  typedef double (*shmem_real8_swap__p_h) (void *, double *, int *);\n  static shmem_real8_swap__p_h shmem_real8_swap__h = NULL;\n  double retval = 0;\n  TAU_PROFILE_TIMER(t,\"double shmem_real8_swap_(void *, double *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_real8_swap__h == NULL)\n\tshmem_real8_swap__h = (shmem_real8_swap__p_h) dlsym(tau_handle,\"shmem_real8_swap_\"); \n    if (shmem_real8_swap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8*1, (*a3));\n  retval  =  (*shmem_real8_swap__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 8*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 8*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_real_get_\n **********************************************************/\n\nvoid shmem_real_get_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_real_get__p_h) (void *, void *, int *, int *);\n  static shmem_real_get__p_h shmem_real_get__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_get_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_get__h == NULL)\n\tshmem_real_get__h = (shmem_real_get__p_h) dlsym(tau_handle,\"shmem_real_get_\"); \n    if (shmem_real_get__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_real_get__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_iget_\n **********************************************************/\n\nvoid shmem_real_iget_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_real_iget__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_real_iget__p_h shmem_real_iget__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_iget_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_iget__h == NULL)\n\tshmem_real_iget__h = (shmem_real_iget__p_h) dlsym(tau_handle,\"shmem_real_iget_\"); \n    if (shmem_real_iget__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_real_iget__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_iput_\n **********************************************************/\n\nvoid shmem_real_iput_(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_real_iput__p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_real_iput__p_h shmem_real_iput__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_iput_(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_iput__h == NULL)\n\tshmem_real_iput__h = (shmem_real_iput__p_h) dlsym(tau_handle,\"shmem_real_iput_\"); \n    if (shmem_real_iput__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_real_iput__h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_put_\n **********************************************************/\n\nvoid shmem_real_put_(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_real_put__p_h) (void *, void *, int *, int *);\n  static shmem_real_put__p_h shmem_real_put__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_put_(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_put__h == NULL)\n\tshmem_real_put__h = (shmem_real_put__p_h) dlsym(tau_handle,\"shmem_real_put_\"); \n    if (shmem_real_put__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_real_put__h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_inv_\n **********************************************************/\n\nvoid shmem_set_cache_inv_() {\n\n  typedef void (*shmem_set_cache_inv__p_h) ();\n  static shmem_set_cache_inv__p_h shmem_set_cache_inv__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_inv_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_inv__h == NULL)\n\tshmem_set_cache_inv__h = (shmem_set_cache_inv__p_h) dlsym(tau_handle,\"shmem_set_cache_inv_\"); \n    if (shmem_set_cache_inv__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_inv__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_line_inv_\n **********************************************************/\n\nvoid shmem_set_cache_line_inv_(void * a1) {\n\n  typedef void (*shmem_set_cache_line_inv__p_h) (void *);\n  static shmem_set_cache_line_inv__p_h shmem_set_cache_line_inv__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_line_inv_(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_line_inv__h == NULL)\n\tshmem_set_cache_line_inv__h = (shmem_set_cache_line_inv__p_h) dlsym(tau_handle,\"shmem_set_cache_line_inv_\"); \n    if (shmem_set_cache_line_inv__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_line_inv__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_lock_\n **********************************************************/\n\nvoid shmem_set_lock_(long * a1) {\n\n  typedef void (*shmem_set_lock__p_h) (long *);\n  static shmem_set_lock__p_h shmem_set_lock__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_lock_(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_lock__h == NULL)\n\tshmem_set_lock__h = (shmem_set_lock__p_h) dlsym(tau_handle,\"shmem_set_lock_\"); \n    if (shmem_set_lock__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_lock__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_swap_\n **********************************************************/\n\nint shmem_swap_(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_swap__p_h) (void *, int *, int *);\n  static shmem_swap__p_h shmem_swap__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_swap_(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_swap__h == NULL)\n\tshmem_swap__h = (shmem_swap__p_h) dlsym(tau_handle,\"shmem_swap_\"); \n    if (shmem_swap__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 1, (*a3));\n  retval  =  (*shmem_swap__h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_test_lock_\n **********************************************************/\n\nint shmem_test_lock_(long * a1) {\n\n  typedef int (*shmem_test_lock__p_h) (long *);\n  static shmem_test_lock__p_h shmem_test_lock__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_test_lock_(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_test_lock__h == NULL)\n\tshmem_test_lock__h = (shmem_test_lock__p_h) dlsym(tau_handle,\"shmem_test_lock_\"); \n    if (shmem_test_lock__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_test_lock__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_udcflush_\n **********************************************************/\n\nvoid shmem_udcflush_() {\n\n  typedef void (*shmem_udcflush__p_h) ();\n  static shmem_udcflush__p_h shmem_udcflush__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_udcflush_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_udcflush__h == NULL)\n\tshmem_udcflush__h = (shmem_udcflush__p_h) dlsym(tau_handle,\"shmem_udcflush_\"); \n    if (shmem_udcflush__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_udcflush__h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_udcflush_line_\n **********************************************************/\n\nvoid shmem_udcflush_line_(void * a1) {\n\n  typedef void (*shmem_udcflush_line__p_h) (void *);\n  static shmem_udcflush_line__p_h shmem_udcflush_line__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_udcflush_line_(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_udcflush_line__h == NULL)\n\tshmem_udcflush_line__h = (shmem_udcflush_line__p_h) dlsym(tau_handle,\"shmem_udcflush_line_\"); \n    if (shmem_udcflush_line__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_udcflush_line__h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_wait_\n **********************************************************/\n\nvoid shmem_wait_(long * a1, long * a2) {\n\n  typedef void (*shmem_wait__p_h) (long *, long *);\n  static shmem_wait__p_h shmem_wait__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_wait_(long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_wait__h == NULL)\n\tshmem_wait__h = (shmem_wait__p_h) dlsym(tau_handle,\"shmem_wait_\"); \n    if (shmem_wait__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_wait__h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_wait_until_\n **********************************************************/\n\nvoid shmem_wait_until_(int * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_wait_until__p_h) (int *, int *, int *);\n  static shmem_wait_until__p_h shmem_wait_until__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_wait_until_(int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_wait_until__h == NULL)\n\tshmem_wait_until__h = (shmem_wait_until__p_h) dlsym(tau_handle,\"shmem_wait_until_\"); \n    if (shmem_wait_until__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_wait_until__h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   start_pes_\n **********************************************************/\n\nvoid start_pes_(int * a1) {\n\n  typedef void (*start_pes__p_h) (int *);\n  static start_pes__p_h start_pes__h = NULL;\n  TAU_PROFILE_TIMER(t,\"void start_pes_(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (start_pes__h == NULL)\n\tstart_pes__h = (start_pes__p_h) dlsym(tau_handle,\"start_pes_\"); \n    if (start_pes__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*start_pes__h)( a1);\n\n#ifdef TAU_PSHMEM_SGI_MPT\n  tau_totalnodes(1,pshmem_n_pes());\n  TAU_PROFILE_SET_NODE(pshmem_my_pe());\n#else /* TAU_PSHMEM_SGI_MPT */\n  tau_totalnodes(1,_shmem_n_pes());\n  TAU_PROFILE_SET_NODE(_shmem_my_pe());\n#endif /* TAU_PSHMEM_SGI_MPT */\n\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_addr_accessible__\n **********************************************************/\n\nvoid shmem_addr_accessible__(void * a1, int * a2) {\n\n  typedef void (*shmem_addr_accessible___p_h) (void *, int *);\n  static shmem_addr_accessible___p_h shmem_addr_accessible___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_addr_accessible__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_addr_accessible___h == NULL)\n\tshmem_addr_accessible___h = (shmem_addr_accessible___p_h) dlsym(tau_handle,\"shmem_addr_accessible__\"); \n    if (shmem_addr_accessible___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_addr_accessible___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier__\n **********************************************************/\n\nvoid shmem_barrier__(int * a1, int * a2, int * a3, long * a4) {\n\n  typedef void (*shmem_barrier___p_h) (int *, int *, int *, long *);\n  static shmem_barrier___p_h shmem_barrier___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier__(int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier___h == NULL)\n\tshmem_barrier___h = (shmem_barrier___p_h) dlsym(tau_handle,\"shmem_barrier__\"); \n    if (shmem_barrier___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier___h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier_all__\n **********************************************************/\n\nvoid shmem_barrier_all__() {\n\n  typedef void (*shmem_barrier_all___p_h) ();\n  static shmem_barrier_all___p_h shmem_barrier_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier_all__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier_all___h == NULL)\n\tshmem_barrier_all___h = (shmem_barrier_all___p_h) dlsym(tau_handle,\"shmem_barrier_all__\"); \n    if (shmem_barrier_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier_all___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_barrier_ps__\n **********************************************************/\n\nvoid shmem_barrier_ps__(int * a1, int * a2, int * a3, long * a4) {\n\n  typedef void (*shmem_barrier_ps___p_h) (int *, int *, int *, long *);\n  static shmem_barrier_ps___p_h shmem_barrier_ps___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_barrier_ps__(int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_barrier_ps___h == NULL)\n\tshmem_barrier_ps___h = (shmem_barrier_ps___p_h) dlsym(tau_handle,\"shmem_barrier_ps__\"); \n    if (shmem_barrier_ps___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_barrier_ps___h)( a1,  a2,  a3,  a4);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast32__\n **********************************************************/\n\nvoid shmem_broadcast32__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast32___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast32___p_h shmem_broadcast32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast32__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast32___h == NULL)\n\tshmem_broadcast32___h = (shmem_broadcast32___p_h) dlsym(tau_handle,\"shmem_broadcast32__\"); \n    if (shmem_broadcast32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast32___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast4__\n **********************************************************/\n\nvoid shmem_broadcast4__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast4___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast4___p_h shmem_broadcast4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast4__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast4___h == NULL)\n\tshmem_broadcast4___h = (shmem_broadcast4___p_h) dlsym(tau_handle,\"shmem_broadcast4__\"); \n    if (shmem_broadcast4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast4___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast64__\n **********************************************************/\n\nvoid shmem_broadcast64__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast64___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast64___p_h shmem_broadcast64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast64__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast64___h == NULL)\n\tshmem_broadcast64___h = (shmem_broadcast64___p_h) dlsym(tau_handle,\"shmem_broadcast64__\"); \n    if (shmem_broadcast64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast64___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_broadcast8__\n **********************************************************/\n\nvoid shmem_broadcast8__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_broadcast8___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_broadcast8___p_h shmem_broadcast8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_broadcast8__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_broadcast8___h == NULL)\n\tshmem_broadcast8___h = (shmem_broadcast8___p_h) dlsym(tau_handle,\"shmem_broadcast8__\"); \n    if (shmem_broadcast8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_broadcast8___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_character_get__\n **********************************************************/\n\nvoid shmem_character_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_character_get___p_h) (void *, void *, int *, int *);\n  static shmem_character_get___p_h shmem_character_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_character_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_character_get___h == NULL)\n\tshmem_character_get___h = (shmem_character_get___p_h) dlsym(tau_handle,\"shmem_character_get__\"); \n    if (shmem_character_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(char)* (*a3), (*a4));\n  (*shmem_character_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(char)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_character_put__\n **********************************************************/\n\nvoid shmem_character_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_character_put___p_h) (void *, void *, int *, int *);\n  static shmem_character_put___p_h shmem_character_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_character_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_character_put___h == NULL)\n\tshmem_character_put___h = (shmem_character_put___p_h) dlsym(tau_handle,\"shmem_character_put__\"); \n    if (shmem_character_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(char)* (*a3));\n  (*shmem_character_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(char)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_inv__\n **********************************************************/\n\nvoid shmem_clear_cache_inv__() {\n\n  typedef void (*shmem_clear_cache_inv___p_h) ();\n  static shmem_clear_cache_inv___p_h shmem_clear_cache_inv___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_inv__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_inv___h == NULL)\n\tshmem_clear_cache_inv___h = (shmem_clear_cache_inv___p_h) dlsym(tau_handle,\"shmem_clear_cache_inv__\"); \n    if (shmem_clear_cache_inv___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_inv___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_line_inv__\n **********************************************************/\n\nvoid shmem_clear_cache_line_inv__(void * a1) {\n\n  typedef void (*shmem_clear_cache_line_inv___p_h) (void *);\n  static shmem_clear_cache_line_inv___p_h shmem_clear_cache_line_inv___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_line_inv__(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_line_inv___h == NULL)\n\tshmem_clear_cache_line_inv___h = (shmem_clear_cache_line_inv___p_h) dlsym(tau_handle,\"shmem_clear_cache_line_inv__\"); \n    if (shmem_clear_cache_line_inv___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_line_inv___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_lock__\n **********************************************************/\n\nvoid shmem_clear_lock__(long * a1) {\n\n  typedef void (*shmem_clear_lock___p_h) (long *);\n  static shmem_clear_lock___p_h shmem_clear_lock___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_lock__(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_lock___h == NULL)\n\tshmem_clear_lock___h = (shmem_clear_lock___p_h) dlsym(tau_handle,\"shmem_clear_lock__\"); \n    if (shmem_clear_lock___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_lock___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect4__\n **********************************************************/\n\nvoid shmem_collect4__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect4___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect4___p_h shmem_collect4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect4__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect4___h == NULL)\n\tshmem_collect4___h = (shmem_collect4___p_h) dlsym(tau_handle,\"shmem_collect4__\"); \n    if (shmem_collect4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect4___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect64__\n **********************************************************/\n\nvoid shmem_collect64__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect64___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect64___p_h shmem_collect64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect64__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect64___h == NULL)\n\tshmem_collect64___h = (shmem_collect64___p_h) dlsym(tau_handle,\"shmem_collect64__\"); \n    if (shmem_collect64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect64___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_collect8__\n **********************************************************/\n\nvoid shmem_collect8__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_collect8___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_collect8___p_h shmem_collect8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_collect8__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_collect8___h == NULL)\n\tshmem_collect8___h = (shmem_collect8___p_h) dlsym(tau_handle,\"shmem_collect8__\"); \n    if (shmem_collect8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_collect8___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp4_prod_to_all__\n **********************************************************/\n\nvoid shmem_comp4_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_comp4_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_comp4_prod_to_all___p_h shmem_comp4_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp4_prod_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp4_prod_to_all___h == NULL)\n\tshmem_comp4_prod_to_all___h = (shmem_comp4_prod_to_all___p_h) dlsym(tau_handle,\"shmem_comp4_prod_to_all__\"); \n    if (shmem_comp4_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp4_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp4_sum_to_all__\n **********************************************************/\n\nvoid shmem_comp4_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_comp4_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_comp4_sum_to_all___p_h shmem_comp4_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp4_sum_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp4_sum_to_all___h == NULL)\n\tshmem_comp4_sum_to_all___h = (shmem_comp4_sum_to_all___p_h) dlsym(tau_handle,\"shmem_comp4_sum_to_all__\"); \n    if (shmem_comp4_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp4_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp8_prod_to_all__\n **********************************************************/\n\nvoid shmem_comp8_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_comp8_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_comp8_prod_to_all___p_h shmem_comp8_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp8_prod_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp8_prod_to_all___h == NULL)\n\tshmem_comp8_prod_to_all___h = (shmem_comp8_prod_to_all___p_h) dlsym(tau_handle,\"shmem_comp8_prod_to_all__\"); \n    if (shmem_comp8_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp8_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_comp8_sum_to_all__\n **********************************************************/\n\nvoid shmem_comp8_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_comp8_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_comp8_sum_to_all___p_h shmem_comp8_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_comp8_sum_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_comp8_sum_to_all___h == NULL)\n\tshmem_comp8_sum_to_all___h = (shmem_comp8_sum_to_all___p_h) dlsym(tau_handle,\"shmem_comp8_sum_to_all__\"); \n    if (shmem_comp8_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_comp8_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_get__\n **********************************************************/\n\nvoid shmem_complex_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_complex_get___p_h) (void *, void *, int *, int *);\n  static shmem_complex_get___p_h shmem_complex_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_get___h == NULL)\n\tshmem_complex_get___h = (shmem_complex_get___p_h) dlsym(tau_handle,\"shmem_complex_get__\"); \n    if (shmem_complex_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_complex_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_iget__\n **********************************************************/\n\nvoid shmem_complex_iget__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_complex_iget___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_complex_iget___p_h shmem_complex_iget___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_iget__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_iget___h == NULL)\n\tshmem_complex_iget___h = (shmem_complex_iget___p_h) dlsym(tau_handle,\"shmem_complex_iget__\"); \n    if (shmem_complex_iget___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_complex_iget___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_iput__\n **********************************************************/\n\nvoid shmem_complex_iput__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_complex_iput___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_complex_iput___p_h shmem_complex_iput___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_iput__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_iput___h == NULL)\n\tshmem_complex_iput___h = (shmem_complex_iput___p_h) dlsym(tau_handle,\"shmem_complex_iput__\"); \n    if (shmem_complex_iput___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_complex_iput___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_complex_put__\n **********************************************************/\n\nvoid shmem_complex_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_complex_put___p_h) (void *, void *, int *, int *);\n  static shmem_complex_put___p_h shmem_complex_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_complex_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_complex_put___h == NULL)\n\tshmem_complex_put___h = (shmem_complex_put___p_h) dlsym(tau_handle,\"shmem_complex_put__\"); \n    if (shmem_complex_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_complex_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_get__\n **********************************************************/\n\nvoid shmem_double_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_double_get___p_h) (void *, void *, int *, int *);\n  static shmem_double_get___p_h shmem_double_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_get___h == NULL)\n\tshmem_double_get___h = (shmem_double_get___p_h) dlsym(tau_handle,\"shmem_double_get__\"); \n    if (shmem_double_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(double)* (*a3), (*a4));\n  (*shmem_double_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(double)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_iget__\n **********************************************************/\n\nvoid shmem_double_iget__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_double_iget___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_double_iget___p_h shmem_double_iget___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_iget__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_iget___h == NULL)\n\tshmem_double_iget___h = (shmem_double_iget___p_h) dlsym(tau_handle,\"shmem_double_iget__\"); \n    if (shmem_double_iget___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(double)* (*a5), (*a6));\n  (*shmem_double_iget___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), sizeof(double)* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_iput__\n **********************************************************/\n\nvoid shmem_double_iput__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_double_iput___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_double_iput___p_h shmem_double_iput___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_iput__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_iput___h == NULL)\n\tshmem_double_iput___h = (shmem_double_iput___p_h) dlsym(tau_handle,\"shmem_double_iput__\"); \n    if (shmem_double_iput___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), sizeof(double)* (*a5));\n  (*shmem_double_iput___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(double)* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_double_put__\n **********************************************************/\n\nvoid shmem_double_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_double_put___p_h) (void *, void *, int *, int *);\n  static shmem_double_put___p_h shmem_double_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_double_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_double_put___h == NULL)\n\tshmem_double_put___h = (shmem_double_put___p_h) dlsym(tau_handle,\"shmem_double_put__\"); \n    if (shmem_double_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(double)* (*a3));\n  (*shmem_double_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(double)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect32__\n **********************************************************/\n\nvoid shmem_fcollect32__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect32___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect32___p_h shmem_fcollect32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect32__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect32___h == NULL)\n\tshmem_fcollect32___h = (shmem_fcollect32___p_h) dlsym(tau_handle,\"shmem_fcollect32__\"); \n    if (shmem_fcollect32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect32___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect4__\n **********************************************************/\n\nvoid shmem_fcollect4__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect4___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect4___p_h shmem_fcollect4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect4__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect4___h == NULL)\n\tshmem_fcollect4___h = (shmem_fcollect4___p_h) dlsym(tau_handle,\"shmem_fcollect4__\"); \n    if (shmem_fcollect4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect4___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect64__\n **********************************************************/\n\nvoid shmem_fcollect64__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect64___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect64___p_h shmem_fcollect64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect64__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect64___h == NULL)\n\tshmem_fcollect64___h = (shmem_fcollect64___p_h) dlsym(tau_handle,\"shmem_fcollect64__\"); \n    if (shmem_fcollect64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect64___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fcollect8__\n **********************************************************/\n\nvoid shmem_fcollect8__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7) {\n\n  typedef void (*shmem_fcollect8___p_h) (void *, void *, int *, int *, int *, int *, long *);\n  static shmem_fcollect8___p_h shmem_fcollect8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fcollect8__(void *, void *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fcollect8___h == NULL)\n\tshmem_fcollect8___h = (shmem_fcollect8___p_h) dlsym(tau_handle,\"shmem_fcollect8__\"); \n    if (shmem_fcollect8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fcollect8___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_fence__\n **********************************************************/\n\nvoid shmem_fence__() {\n\n  typedef void (*shmem_fence___p_h) ();\n  static shmem_fence___p_h shmem_fence___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_fence__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_fence___h == NULL)\n\tshmem_fence___h = (shmem_fence___p_h) dlsym(tau_handle,\"shmem_fence__\"); \n    if (shmem_fence___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_fence___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get128__\n **********************************************************/\n\nvoid shmem_get128__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get128___p_h) (void *, void *, int *, int *);\n  static shmem_get128___p_h shmem_get128___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get128__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get128___h == NULL)\n\tshmem_get128___h = (shmem_get128___p_h) dlsym(tau_handle,\"shmem_get128__\"); \n    if (shmem_get128___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 16* (*a3), (*a4));\n  (*shmem_get128___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 16* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get16__\n **********************************************************/\n\nvoid shmem_get16__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get16___p_h) (void *, void *, int *, int *);\n  static shmem_get16___p_h shmem_get16___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get16__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get16___h == NULL)\n\tshmem_get16___h = (shmem_get16___p_h) dlsym(tau_handle,\"shmem_get16__\"); \n    if (shmem_get16___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 2* (*a3), (*a4));\n  (*shmem_get16___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 2* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get32__\n **********************************************************/\n\nvoid shmem_get32__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get32___p_h) (void *, void *, int *, int *);\n  static shmem_get32___p_h shmem_get32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get32__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get32___h == NULL)\n\tshmem_get32___h = (shmem_get32___p_h) dlsym(tau_handle,\"shmem_get32__\"); \n    if (shmem_get32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a3), (*a4));\n  (*shmem_get32___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 4* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get4__\n **********************************************************/\n\nvoid shmem_get4__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get4___p_h) (void *, void *, int *, int *);\n  static shmem_get4___p_h shmem_get4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get4__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get4___h == NULL)\n\tshmem_get4___h = (shmem_get4___p_h) dlsym(tau_handle,\"shmem_get4__\"); \n    if (shmem_get4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a3), (*a4));\n  (*shmem_get4___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 4* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get64__\n **********************************************************/\n\nvoid shmem_get64__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get64___p_h) (void *, void *, int *, int *);\n  static shmem_get64___p_h shmem_get64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get64__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get64___h == NULL)\n\tshmem_get64___h = (shmem_get64___p_h) dlsym(tau_handle,\"shmem_get64__\"); \n    if (shmem_get64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a3), (*a4));\n  (*shmem_get64___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 8* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_get8__\n **********************************************************/\n\nvoid shmem_get8__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_get8___p_h) (void *, void *, int *, int *);\n  static shmem_get8___p_h shmem_get8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_get8__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_get8___h == NULL)\n\tshmem_get8___h = (shmem_get8___p_h) dlsym(tau_handle,\"shmem_get8__\"); \n    if (shmem_get8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a3), (*a4));\n  (*shmem_get8___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), 8* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_getmem__\n **********************************************************/\n\nvoid shmem_getmem__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_getmem___p_h) (void *, void *, int *, int *);\n  static shmem_getmem___p_h shmem_getmem___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_getmem__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_getmem___h == NULL)\n\tshmem_getmem___h = (shmem_getmem___p_h) dlsym(tau_handle,\"shmem_getmem__\"); \n    if (shmem_getmem___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_getmem___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_group_create_strided__\n **********************************************************/\n\nvoid shmem_group_create_strided__(int * a1, int * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_group_create_strided___p_h) (int *, int *, int *, int *, int *, int *);\n  static shmem_group_create_strided___p_h shmem_group_create_strided___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_group_create_strided__(int *, int *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_group_create_strided___h == NULL)\n\tshmem_group_create_strided___h = (shmem_group_create_strided___p_h) dlsym(tau_handle,\"shmem_group_create_strided__\"); \n    if (shmem_group_create_strided___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_group_create_strided___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_group_delete__\n **********************************************************/\n\nvoid shmem_group_delete__(int * a1) {\n\n  typedef void (*shmem_group_delete___p_h) (int *);\n  static shmem_group_delete___p_h shmem_group_delete___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_group_delete__(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_group_delete___h == NULL)\n\tshmem_group_delete___h = (shmem_group_delete___p_h) dlsym(tau_handle,\"shmem_group_delete__\"); \n    if (shmem_group_delete___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_group_delete___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget128__\n **********************************************************/\n\nvoid shmem_iget128__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget128___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget128___p_h shmem_iget128___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget128__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget128___h == NULL)\n\tshmem_iget128___h = (shmem_iget128___p_h) dlsym(tau_handle,\"shmem_iget128__\"); \n    if (shmem_iget128___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 16* (*a5), (*a6));\n  (*shmem_iget128___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 16* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget16__\n **********************************************************/\n\nvoid shmem_iget16__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget16___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget16___p_h shmem_iget16___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget16__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget16___h == NULL)\n\tshmem_iget16___h = (shmem_iget16___p_h) dlsym(tau_handle,\"shmem_iget16__\"); \n    if (shmem_iget16___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 2* (*a5), (*a6));\n  (*shmem_iget16___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 2* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget32__\n **********************************************************/\n\nvoid shmem_iget32__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget32___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget32___p_h shmem_iget32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget32__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget32___h == NULL)\n\tshmem_iget32___h = (shmem_iget32___p_h) dlsym(tau_handle,\"shmem_iget32__\"); \n    if (shmem_iget32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a5), (*a6));\n  (*shmem_iget32___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 4* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget4__\n **********************************************************/\n\nvoid shmem_iget4__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget4___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget4___p_h shmem_iget4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget4__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget4___h == NULL)\n\tshmem_iget4___h = (shmem_iget4___p_h) dlsym(tau_handle,\"shmem_iget4__\"); \n    if (shmem_iget4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4* (*a5), (*a6));\n  (*shmem_iget4___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 4* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget64__\n **********************************************************/\n\nvoid shmem_iget64__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget64___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget64___p_h shmem_iget64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget64__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget64___h == NULL)\n\tshmem_iget64___h = (shmem_iget64___p_h) dlsym(tau_handle,\"shmem_iget64__\"); \n    if (shmem_iget64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a5), (*a6));\n  (*shmem_iget64___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 8* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iget8__\n **********************************************************/\n\nvoid shmem_iget8__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iget8___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iget8___p_h shmem_iget8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iget8__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iget8___h == NULL)\n\tshmem_iget8___h = (shmem_iget8___p_h) dlsym(tau_handle,\"shmem_iget8__\"); \n    if (shmem_iget8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8* (*a5), (*a6));\n  (*shmem_iget8___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), 8* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_and_to_all__\n **********************************************************/\n\nvoid shmem_int2_and_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_and_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_and_to_all___p_h shmem_int2_and_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_and_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_and_to_all___h == NULL)\n\tshmem_int2_and_to_all___h = (shmem_int2_and_to_all___p_h) dlsym(tau_handle,\"shmem_int2_and_to_all__\"); \n    if (shmem_int2_and_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_and_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_max_to_all__\n **********************************************************/\n\nvoid shmem_int2_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_max_to_all___p_h shmem_int2_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_max_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_max_to_all___h == NULL)\n\tshmem_int2_max_to_all___h = (shmem_int2_max_to_all___p_h) dlsym(tau_handle,\"shmem_int2_max_to_all__\"); \n    if (shmem_int2_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_min_to_all__\n **********************************************************/\n\nvoid shmem_int2_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_min_to_all___p_h shmem_int2_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_min_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_min_to_all___h == NULL)\n\tshmem_int2_min_to_all___h = (shmem_int2_min_to_all___p_h) dlsym(tau_handle,\"shmem_int2_min_to_all__\"); \n    if (shmem_int2_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_or_to_all__\n **********************************************************/\n\nvoid shmem_int2_or_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_or_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_or_to_all___p_h shmem_int2_or_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_or_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_or_to_all___h == NULL)\n\tshmem_int2_or_to_all___h = (shmem_int2_or_to_all___p_h) dlsym(tau_handle,\"shmem_int2_or_to_all__\"); \n    if (shmem_int2_or_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_or_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_prod_to_all__\n **********************************************************/\n\nvoid shmem_int2_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_prod_to_all___p_h shmem_int2_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_prod_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_prod_to_all___h == NULL)\n\tshmem_int2_prod_to_all___h = (shmem_int2_prod_to_all___p_h) dlsym(tau_handle,\"shmem_int2_prod_to_all__\"); \n    if (shmem_int2_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_sum_to_all__\n **********************************************************/\n\nvoid shmem_int2_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_sum_to_all___p_h shmem_int2_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_sum_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_sum_to_all___h == NULL)\n\tshmem_int2_sum_to_all___h = (shmem_int2_sum_to_all___p_h) dlsym(tau_handle,\"shmem_int2_sum_to_all__\"); \n    if (shmem_int2_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int2_xor_to_all__\n **********************************************************/\n\nvoid shmem_int2_xor_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int2_xor_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int2_xor_to_all___p_h shmem_int2_xor_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int2_xor_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int2_xor_to_all___h == NULL)\n\tshmem_int2_xor_to_all___h = (shmem_int2_xor_to_all___p_h) dlsym(tau_handle,\"shmem_int2_xor_to_all__\"); \n    if (shmem_int2_xor_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int2_xor_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_add__\n **********************************************************/\n\nvoid shmem_int4_add__(void * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_int4_add___p_h) (void *, int *, int *);\n  static shmem_int4_add___p_h shmem_int4_add___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_add__(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_add___h == NULL)\n\tshmem_int4_add___h = (shmem_int4_add___p_h) dlsym(tau_handle,\"shmem_int4_add__\"); \n    if (shmem_int4_add___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_add___h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_and_to_all__\n **********************************************************/\n\nvoid shmem_int4_and_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_and_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_and_to_all___p_h shmem_int4_and_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_and_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_and_to_all___h == NULL)\n\tshmem_int4_and_to_all___h = (shmem_int4_and_to_all___p_h) dlsym(tau_handle,\"shmem_int4_and_to_all__\"); \n    if (shmem_int4_and_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_and_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_cswap__\n **********************************************************/\n\nint shmem_int4_cswap__(int * a1, int * a2, int * a3, int * a4) {\n\n  typedef int (*shmem_int4_cswap___p_h) (int *, int *, int *, int *);\n  static shmem_int4_cswap___p_h shmem_int4_cswap___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_cswap__(int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_cswap___h == NULL)\n\tshmem_int4_cswap___h = (shmem_int4_cswap___p_h) dlsym(tau_handle,\"shmem_int4_cswap__\"); \n    if (shmem_int4_cswap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a4));\n  retval  =  (*shmem_int4_cswap___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)*1);\n  if (retval == (*a2)) { \n    TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)*1);\n    TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a4));\n  }\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_fadd__\n **********************************************************/\n\nint shmem_int4_fadd__(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_int4_fadd___p_h) (void *, int *, int *);\n  static shmem_int4_fadd___p_h shmem_int4_fadd___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_fadd__(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_fadd___h == NULL)\n\tshmem_int4_fadd___h = (shmem_int4_fadd___p_h) dlsym(tau_handle,\"shmem_int4_fadd__\"); \n    if (shmem_int4_fadd___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int4_fadd___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_finc__\n **********************************************************/\n\nint shmem_int4_finc__(void * a1, int * a2) {\n\n  typedef int (*shmem_int4_finc___p_h) (void *, int *);\n  static shmem_int4_finc___p_h shmem_int4_finc___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_finc__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_finc___h == NULL)\n\tshmem_int4_finc___h = (shmem_int4_finc___p_h) dlsym(tau_handle,\"shmem_int4_finc__\"); \n    if (shmem_int4_finc___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a2));\n  retval  =  (*shmem_int4_finc___h)( a1,  a2);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a2), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a2), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a2));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_inc__\n **********************************************************/\n\nvoid shmem_int4_inc__(void * a1, int * a2) {\n\n  typedef void (*shmem_int4_inc___p_h) (void *, int *);\n  static shmem_int4_inc___p_h shmem_int4_inc___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_inc__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_inc___h == NULL)\n\tshmem_int4_inc___h = (shmem_int4_inc___p_h) dlsym(tau_handle,\"shmem_int4_inc__\"); \n    if (shmem_int4_inc___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_inc___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_max_to_all__\n **********************************************************/\n\nvoid shmem_int4_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_max_to_all___p_h shmem_int4_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_max_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_max_to_all___h == NULL)\n\tshmem_int4_max_to_all___h = (shmem_int4_max_to_all___p_h) dlsym(tau_handle,\"shmem_int4_max_to_all__\"); \n    if (shmem_int4_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_min_to_all__\n **********************************************************/\n\nvoid shmem_int4_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_min_to_all___p_h shmem_int4_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_min_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_min_to_all___h == NULL)\n\tshmem_int4_min_to_all___h = (shmem_int4_min_to_all___p_h) dlsym(tau_handle,\"shmem_int4_min_to_all__\"); \n    if (shmem_int4_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_or_to_all__\n **********************************************************/\n\nvoid shmem_int4_or_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_or_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_or_to_all___p_h shmem_int4_or_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_or_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_or_to_all___h == NULL)\n\tshmem_int4_or_to_all___h = (shmem_int4_or_to_all___p_h) dlsym(tau_handle,\"shmem_int4_or_to_all__\"); \n    if (shmem_int4_or_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_or_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_prod_to_all__\n **********************************************************/\n\nvoid shmem_int4_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_prod_to_all___p_h shmem_int4_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_prod_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_prod_to_all___h == NULL)\n\tshmem_int4_prod_to_all___h = (shmem_int4_prod_to_all___p_h) dlsym(tau_handle,\"shmem_int4_prod_to_all__\"); \n    if (shmem_int4_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_sum_to_all__\n **********************************************************/\n\nvoid shmem_int4_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_sum_to_all___p_h shmem_int4_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_sum_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_sum_to_all___h == NULL)\n\tshmem_int4_sum_to_all___h = (shmem_int4_sum_to_all___p_h) dlsym(tau_handle,\"shmem_int4_sum_to_all__\"); \n    if (shmem_int4_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_swap__\n **********************************************************/\n\nint shmem_int4_swap__(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_int4_swap___p_h) (void *, int *, int *);\n  static shmem_int4_swap___p_h shmem_int4_swap___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_int4_swap__(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int4_swap___h == NULL)\n\tshmem_int4_swap___h = (shmem_int4_swap___p_h) dlsym(tau_handle,\"shmem_int4_swap__\"); \n    if (shmem_int4_swap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int4_swap___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int4_wait__\n **********************************************************/\n\nvoid shmem_int4_wait__(int * a1, int * a2) {\n\n  typedef void (*shmem_int4_wait___p_h) (int *, int *);\n  static shmem_int4_wait___p_h shmem_int4_wait___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_wait__(int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_wait___h == NULL)\n\tshmem_int4_wait___h = (shmem_int4_wait___p_h) dlsym(tau_handle,\"shmem_int4_wait__\"); \n    if (shmem_int4_wait___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_wait___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_wait_until__\n **********************************************************/\n\nvoid shmem_int4_wait_until__(int * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_int4_wait_until___p_h) (int *, int *, int *);\n  static shmem_int4_wait_until___p_h shmem_int4_wait_until___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_wait_until__(int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_wait_until___h == NULL)\n\tshmem_int4_wait_until___h = (shmem_int4_wait_until___p_h) dlsym(tau_handle,\"shmem_int4_wait_until__\"); \n    if (shmem_int4_wait_until___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_wait_until___h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int4_xor_to_all__\n **********************************************************/\n\nvoid shmem_int4_xor_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, int * a7, long * a8) {\n\n  typedef void (*shmem_int4_xor_to_all___p_h) (void *, void *, int *, int *, int *, int *, int *, long *);\n  static shmem_int4_xor_to_all___p_h shmem_int4_xor_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int4_xor_to_all__(void *, void *, int *, int *, int *, int *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int4_xor_to_all___h == NULL)\n\tshmem_int4_xor_to_all___h = (shmem_int4_xor_to_all___p_h) dlsym(tau_handle,\"shmem_int4_xor_to_all__\"); \n    if (shmem_int4_xor_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int4_xor_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_add__\n **********************************************************/\n\nvoid shmem_int8_add__(void * a1, long * a2, int * a3) {\n\n  typedef void (*shmem_int8_add___p_h) (void *, long *, int *);\n  static shmem_int8_add___p_h shmem_int8_add___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_add__(void *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_add___h == NULL)\n\tshmem_int8_add___h = (shmem_int8_add___p_h) dlsym(tau_handle,\"shmem_int8_add__\"); \n    if (shmem_int8_add___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_add___h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_and_to_all__\n **********************************************************/\n\nvoid shmem_int8_and_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_and_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_and_to_all___p_h shmem_int8_and_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_and_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_and_to_all___h == NULL)\n\tshmem_int8_and_to_all___h = (shmem_int8_and_to_all___p_h) dlsym(tau_handle,\"shmem_int8_and_to_all__\"); \n    if (shmem_int8_and_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_and_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_cswap__\n **********************************************************/\n\nlong shmem_int8_cswap__(long * a1, long * a2, long * a3, int * a4) {\n\n  typedef long (*shmem_int8_cswap___p_h) (long *, long *, long *, int *);\n  static shmem_int8_cswap___p_h shmem_int8_cswap___h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_cswap__(long *, long *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_cswap___h == NULL)\n\tshmem_int8_cswap___h = (shmem_int8_cswap___p_h) dlsym(tau_handle,\"shmem_int8_cswap__\"); \n    if (shmem_int8_cswap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a4));\n  retval  =  (*shmem_int8_cswap___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)*1);\n  if (retval == (*a2)) { \n    TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)*1);\n    TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a4));\n  }\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_fadd__\n **********************************************************/\n\nlong shmem_int8_fadd__(void * a1, int * a2, int * a3) {\n\n  typedef long (*shmem_int8_fadd___p_h) (void *, int *, int *);\n  static shmem_int8_fadd___p_h shmem_int8_fadd___h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_fadd__(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_fadd___h == NULL)\n\tshmem_int8_fadd___h = (shmem_int8_fadd___p_h) dlsym(tau_handle,\"shmem_int8_fadd__\"); \n    if (shmem_int8_fadd___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int8_fadd___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_finc__\n **********************************************************/\n\nlong shmem_int8_finc__(void * a1, int * a2) {\n\n  typedef long (*shmem_int8_finc___p_h) (void *, int *);\n  static shmem_int8_finc___p_h shmem_int8_finc___h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_finc__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_finc___h == NULL)\n\tshmem_int8_finc___h = (shmem_int8_finc___p_h) dlsym(tau_handle,\"shmem_int8_finc__\"); \n    if (shmem_int8_finc___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a2));\n  retval  =  (*shmem_int8_finc___h)( a1,  a2);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a2), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a2), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a2));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_inc__\n **********************************************************/\n\nvoid shmem_int8_inc__(void * a1, int * a2) {\n\n  typedef void (*shmem_int8_inc___p_h) (void *, int *);\n  static shmem_int8_inc___p_h shmem_int8_inc___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_inc__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_inc___h == NULL)\n\tshmem_int8_inc___h = (shmem_int8_inc___p_h) dlsym(tau_handle,\"shmem_int8_inc__\"); \n    if (shmem_int8_inc___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_inc___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_max_to_all__\n **********************************************************/\n\nvoid shmem_int8_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_max_to_all___p_h shmem_int8_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_max_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_max_to_all___h == NULL)\n\tshmem_int8_max_to_all___h = (shmem_int8_max_to_all___p_h) dlsym(tau_handle,\"shmem_int8_max_to_all__\"); \n    if (shmem_int8_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_min_to_all__\n **********************************************************/\n\nvoid shmem_int8_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_min_to_all___p_h shmem_int8_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_min_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_min_to_all___h == NULL)\n\tshmem_int8_min_to_all___h = (shmem_int8_min_to_all___p_h) dlsym(tau_handle,\"shmem_int8_min_to_all__\"); \n    if (shmem_int8_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_or_to_all__\n **********************************************************/\n\nvoid shmem_int8_or_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_or_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_or_to_all___p_h shmem_int8_or_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_or_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_or_to_all___h == NULL)\n\tshmem_int8_or_to_all___h = (shmem_int8_or_to_all___p_h) dlsym(tau_handle,\"shmem_int8_or_to_all__\"); \n    if (shmem_int8_or_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_or_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_prod_to_all__\n **********************************************************/\n\nvoid shmem_int8_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_prod_to_all___p_h shmem_int8_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_prod_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_prod_to_all___h == NULL)\n\tshmem_int8_prod_to_all___h = (shmem_int8_prod_to_all___p_h) dlsym(tau_handle,\"shmem_int8_prod_to_all__\"); \n    if (shmem_int8_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_sum_to_all__\n **********************************************************/\n\nvoid shmem_int8_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_sum_to_all___p_h shmem_int8_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_sum_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_sum_to_all___h == NULL)\n\tshmem_int8_sum_to_all___h = (shmem_int8_sum_to_all___p_h) dlsym(tau_handle,\"shmem_int8_sum_to_all__\"); \n    if (shmem_int8_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_swap__\n **********************************************************/\n\nlong shmem_int8_swap__(void * a1, long * a2, int * a3) {\n\n  typedef long (*shmem_int8_swap___p_h) (void *, long *, int *);\n  static shmem_int8_swap___p_h shmem_int8_swap___h = NULL;\n  long retval = 0;\n  TAU_PROFILE_TIMER(t,\"long shmem_int8_swap__(void *, long *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_int8_swap___h == NULL)\n\tshmem_int8_swap___h = (shmem_int8_swap___p_h) dlsym(tau_handle,\"shmem_int8_swap__\"); \n    if (shmem_int8_swap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)*1, (*a3));\n  retval  =  (*shmem_int8_swap___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), sizeof(int)*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), sizeof(int)*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_int8_wait__\n **********************************************************/\n\nvoid shmem_int8_wait__(long * a1, long * a2) {\n\n  typedef void (*shmem_int8_wait___p_h) (long *, long *);\n  static shmem_int8_wait___p_h shmem_int8_wait___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_wait__(long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_wait___h == NULL)\n\tshmem_int8_wait___h = (shmem_int8_wait___p_h) dlsym(tau_handle,\"shmem_int8_wait__\"); \n    if (shmem_int8_wait___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_wait___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_wait_until__\n **********************************************************/\n\nvoid shmem_int8_wait_until__(long * a1, int * a2, long * a3) {\n\n  typedef void (*shmem_int8_wait_until___p_h) (long *, int *, long *);\n  static shmem_int8_wait_until___p_h shmem_int8_wait_until___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_wait_until__(long *, int *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_wait_until___h == NULL)\n\tshmem_int8_wait_until___h = (shmem_int8_wait_until___p_h) dlsym(tau_handle,\"shmem_int8_wait_until__\"); \n    if (shmem_int8_wait_until___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_wait_until___h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_int8_xor_to_all__\n **********************************************************/\n\nvoid shmem_int8_xor_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, long * a7, long * a8) {\n\n  typedef void (*shmem_int8_xor_to_all___p_h) (void *, void *, int *, int *, int *, int *, long *, long *);\n  static shmem_int8_xor_to_all___p_h shmem_int8_xor_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_int8_xor_to_all__(void *, void *, int *, int *, int *, int *, long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_int8_xor_to_all___h == NULL)\n\tshmem_int8_xor_to_all___h = (shmem_int8_xor_to_all___p_h) dlsym(tau_handle,\"shmem_int8_xor_to_all__\"); \n    if (shmem_int8_xor_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_int8_xor_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_get__\n **********************************************************/\n\nvoid shmem_integer_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_integer_get___p_h) (void *, void *, int *, int *);\n  static shmem_integer_get___p_h shmem_integer_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_get___h == NULL)\n\tshmem_integer_get___h = (shmem_integer_get___p_h) dlsym(tau_handle,\"shmem_integer_get__\"); \n    if (shmem_integer_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)* (*a3), (*a4));\n  (*shmem_integer_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4), sizeof(int)* (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_iget__\n **********************************************************/\n\nvoid shmem_integer_iget__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_integer_iget___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_integer_iget___p_h shmem_integer_iget___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_iget__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_iget___h == NULL)\n\tshmem_integer_iget___h = (shmem_integer_iget___p_h) dlsym(tau_handle,\"shmem_integer_iget__\"); \n    if (shmem_integer_iget___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), sizeof(int)* (*a5), (*a6));\n  (*shmem_integer_iget___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6), sizeof(int)* (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_iput__\n **********************************************************/\n\nvoid shmem_integer_iput__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_integer_iput___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_integer_iput___p_h shmem_integer_iput___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_iput__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_iput___h == NULL)\n\tshmem_integer_iput___h = (shmem_integer_iput___p_h) dlsym(tau_handle,\"shmem_integer_iput__\"); \n    if (shmem_integer_iput___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), sizeof(int)* (*a5));\n  (*shmem_integer_iput___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_integer_put__\n **********************************************************/\n\nvoid shmem_integer_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_integer_put___p_h) (void *, void *, int *, int *);\n  static shmem_integer_put___p_h shmem_integer_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_integer_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_integer_put___h == NULL)\n\tshmem_integer_put___h = (shmem_integer_put___p_h) dlsym(tau_handle,\"shmem_integer_put__\"); \n    if (shmem_integer_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), sizeof(int)* (*a3));\n  (*shmem_integer_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), sizeof(int)* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput128__\n **********************************************************/\n\nvoid shmem_iput128__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput128___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput128___p_h shmem_iput128___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput128__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput128___h == NULL)\n\tshmem_iput128___h = (shmem_iput128___p_h) dlsym(tau_handle,\"shmem_iput128__\"); \n    if (shmem_iput128___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 16* (*a5));\n  (*shmem_iput128___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 16* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput16__\n **********************************************************/\n\nvoid shmem_iput16__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput16___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput16___p_h shmem_iput16___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput16__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput16___h == NULL)\n\tshmem_iput16___h = (shmem_iput16___p_h) dlsym(tau_handle,\"shmem_iput16__\"); \n    if (shmem_iput16___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 2* (*a5));\n  (*shmem_iput16___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 2* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput32__\n **********************************************************/\n\nvoid shmem_iput32__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput32___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput32___p_h shmem_iput32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput32__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput32___h == NULL)\n\tshmem_iput32___h = (shmem_iput32___p_h) dlsym(tau_handle,\"shmem_iput32__\"); \n    if (shmem_iput32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 4* (*a5));\n  (*shmem_iput32___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput4__\n **********************************************************/\n\nvoid shmem_iput4__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput4___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput4___p_h shmem_iput4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput4__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput4___h == NULL)\n\tshmem_iput4___h = (shmem_iput4___p_h) dlsym(tau_handle,\"shmem_iput4__\"); \n    if (shmem_iput4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 4* (*a5));\n  (*shmem_iput4___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput64__\n **********************************************************/\n\nvoid shmem_iput64__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput64___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput64___p_h shmem_iput64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput64__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput64___h == NULL)\n\tshmem_iput64___h = (shmem_iput64___p_h) dlsym(tau_handle,\"shmem_iput64__\"); \n    if (shmem_iput64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 8* (*a5));\n  (*shmem_iput64___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_iput8__\n **********************************************************/\n\nvoid shmem_iput8__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_iput8___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_iput8___p_h shmem_iput8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_iput8__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_iput8___h == NULL)\n\tshmem_iput8___h = (shmem_iput8___p_h) dlsym(tau_handle,\"shmem_iput8__\"); \n    if (shmem_iput8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6), 8* (*a5));\n  (*shmem_iput8___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_get__\n **********************************************************/\n\nvoid shmem_logical_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_logical_get___p_h) (void *, void *, int *, int *);\n  static shmem_logical_get___p_h shmem_logical_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_get___h == NULL)\n\tshmem_logical_get___h = (shmem_logical_get___p_h) dlsym(tau_handle,\"shmem_logical_get__\"); \n    if (shmem_logical_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_logical_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_iget__\n **********************************************************/\n\nvoid shmem_logical_iget__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_logical_iget___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_logical_iget___p_h shmem_logical_iget___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_iget__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_iget___h == NULL)\n\tshmem_logical_iget___h = (shmem_logical_iget___p_h) dlsym(tau_handle,\"shmem_logical_iget__\"); \n    if (shmem_logical_iget___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_logical_iget___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_iput__\n **********************************************************/\n\nvoid shmem_logical_iput__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_logical_iput___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_logical_iput___p_h shmem_logical_iput___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_iput__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_iput___h == NULL)\n\tshmem_logical_iput___h = (shmem_logical_iput___p_h) dlsym(tau_handle,\"shmem_logical_iput__\"); \n    if (shmem_logical_iput___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_logical_iput___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_logical_put__\n **********************************************************/\n\nvoid shmem_logical_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_logical_put___p_h) (void *, void *, int *, int *);\n  static shmem_logical_put___p_h shmem_logical_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_logical_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_logical_put___h == NULL)\n\tshmem_logical_put___h = (shmem_logical_put___p_h) dlsym(tau_handle,\"shmem_logical_put__\"); \n    if (shmem_logical_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_logical_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_my_pe__\n **********************************************************/\n\nint shmem_my_pe__() {\n\n  typedef int (*shmem_my_pe___p_h) ();\n  static shmem_my_pe___p_h shmem_my_pe___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_my_pe__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_my_pe___h == NULL)\n\tshmem_my_pe___h = (shmem_my_pe___p_h) dlsym(tau_handle,\"shmem_my_pe__\"); \n    if (shmem_my_pe___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_my_pe___h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_n_pes__\n **********************************************************/\n\nint shmem_n_pes__() {\n\n  typedef int (*shmem_n_pes___p_h) ();\n  static shmem_n_pes___p_h shmem_n_pes___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_n_pes__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_n_pes___h == NULL)\n\tshmem_n_pes___h = (shmem_n_pes___p_h) dlsym(tau_handle,\"shmem_n_pes__\"); \n    if (shmem_n_pes___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_n_pes___h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_pe_accessible__\n **********************************************************/\n\nint shmem_pe_accessible__(int * a1) {\n\n  typedef int (*shmem_pe_accessible___p_h) (int *);\n  static shmem_pe_accessible___p_h shmem_pe_accessible___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_pe_accessible__(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_pe_accessible___h == NULL)\n\tshmem_pe_accessible___h = (shmem_pe_accessible___p_h) dlsym(tau_handle,\"shmem_pe_accessible__\"); \n    if (shmem_pe_accessible___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_pe_accessible___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_ptr__\n **********************************************************/\n\nvoid shmem_ptr__(void * a1, int * a2) {\n\n  typedef void (*shmem_ptr___p_h) (void *, int *);\n  static shmem_ptr___p_h shmem_ptr___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_ptr__(void *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_ptr___h == NULL)\n\tshmem_ptr___h = (shmem_ptr___p_h) dlsym(tau_handle,\"shmem_ptr__\"); \n    if (shmem_ptr___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_ptr___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put128__\n **********************************************************/\n\nvoid shmem_put128__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put128___p_h) (void *, void *, int *, int *);\n  static shmem_put128___p_h shmem_put128___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put128__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put128___h == NULL)\n\tshmem_put128___h = (shmem_put128___p_h) dlsym(tau_handle,\"shmem_put128__\"); \n    if (shmem_put128___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 16* (*a3));\n  (*shmem_put128___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 16* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put16__\n **********************************************************/\n\nvoid shmem_put16__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put16___p_h) (void *, void *, int *, int *);\n  static shmem_put16___p_h shmem_put16___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put16__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put16___h == NULL)\n\tshmem_put16___h = (shmem_put16___p_h) dlsym(tau_handle,\"shmem_put16__\"); \n    if (shmem_put16___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 2* (*a3));\n  (*shmem_put16___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 2* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put32__\n **********************************************************/\n\nvoid shmem_put32__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put32___p_h) (void *, void *, int *, int *);\n  static shmem_put32___p_h shmem_put32___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put32__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put32___h == NULL)\n\tshmem_put32___h = (shmem_put32___p_h) dlsym(tau_handle,\"shmem_put32__\"); \n    if (shmem_put32___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 4* (*a3));\n  (*shmem_put32___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put4__\n **********************************************************/\n\nvoid shmem_put4__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put4___p_h) (void *, void *, int *, int *);\n  static shmem_put4___p_h shmem_put4___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put4__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put4___h == NULL)\n\tshmem_put4___h = (shmem_put4___p_h) dlsym(tau_handle,\"shmem_put4__\"); \n    if (shmem_put4___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 4* (*a3));\n  (*shmem_put4___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put64__\n **********************************************************/\n\nvoid shmem_put64__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put64___p_h) (void *, void *, int *, int *);\n  static shmem_put64___p_h shmem_put64___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put64__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put64___h == NULL)\n\tshmem_put64___h = (shmem_put64___p_h) dlsym(tau_handle,\"shmem_put64__\"); \n    if (shmem_put64___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 8* (*a3));\n  (*shmem_put64___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_put8__\n **********************************************************/\n\nvoid shmem_put8__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_put8___p_h) (void *, void *, int *, int *);\n  static shmem_put8___p_h shmem_put8___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_put8__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_put8___h == NULL)\n\tshmem_put8___h = (shmem_put8___p_h) dlsym(tau_handle,\"shmem_put8__\"); \n    if (shmem_put8___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4), 8* (*a3));\n  (*shmem_put8___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8* (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_putmem__\n **********************************************************/\n\nvoid shmem_putmem__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_putmem___p_h) (void *, void *, int *, int *);\n  static shmem_putmem___p_h shmem_putmem___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_putmem__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_putmem___h == NULL)\n\tshmem_putmem___h = (shmem_putmem___p_h) dlsym(tau_handle,\"shmem_putmem__\"); \n    if (shmem_putmem___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_putmem___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_quiet__\n **********************************************************/\n\nvoid shmem_quiet__() {\n\n  typedef void (*shmem_quiet___p_h) ();\n  static shmem_quiet___p_h shmem_quiet___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_quiet__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_quiet___h == NULL)\n\tshmem_quiet___h = (shmem_quiet___p_h) dlsym(tau_handle,\"shmem_quiet__\"); \n    if (shmem_quiet___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_quiet___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_max_to_all__\n **********************************************************/\n\nvoid shmem_real16_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_max_to_all___p_h shmem_real16_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_max_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_max_to_all___h == NULL)\n\tshmem_real16_max_to_all___h = (shmem_real16_max_to_all___p_h) dlsym(tau_handle,\"shmem_real16_max_to_all__\"); \n    if (shmem_real16_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_min_to_all__\n **********************************************************/\n\nvoid shmem_real16_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_min_to_all___p_h shmem_real16_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_min_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_min_to_all___h == NULL)\n\tshmem_real16_min_to_all___h = (shmem_real16_min_to_all___p_h) dlsym(tau_handle,\"shmem_real16_min_to_all__\"); \n    if (shmem_real16_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_prod_to_all__\n **********************************************************/\n\nvoid shmem_real16_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_prod_to_all___p_h shmem_real16_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_prod_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_prod_to_all___h == NULL)\n\tshmem_real16_prod_to_all___h = (shmem_real16_prod_to_all___p_h) dlsym(tau_handle,\"shmem_real16_prod_to_all__\"); \n    if (shmem_real16_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real16_sum_to_all__\n **********************************************************/\n\nvoid shmem_real16_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real16_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real16_sum_to_all___p_h shmem_real16_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real16_sum_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real16_sum_to_all___h == NULL)\n\tshmem_real16_sum_to_all___h = (shmem_real16_sum_to_all___p_h) dlsym(tau_handle,\"shmem_real16_sum_to_all__\"); \n    if (shmem_real16_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real16_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_max_to_all__\n **********************************************************/\n\nvoid shmem_real4_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_max_to_all___p_h shmem_real4_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_max_to_all__(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_max_to_all___h == NULL)\n\tshmem_real4_max_to_all___h = (shmem_real4_max_to_all___p_h) dlsym(tau_handle,\"shmem_real4_max_to_all__\"); \n    if (shmem_real4_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_min_to_all__\n **********************************************************/\n\nvoid shmem_real4_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_min_to_all___p_h shmem_real4_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_min_to_all__(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_min_to_all___h == NULL)\n\tshmem_real4_min_to_all___h = (shmem_real4_min_to_all___p_h) dlsym(tau_handle,\"shmem_real4_min_to_all__\"); \n    if (shmem_real4_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_prod_to_all__\n **********************************************************/\n\nvoid shmem_real4_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_prod_to_all___p_h shmem_real4_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_prod_to_all__(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_prod_to_all___h == NULL)\n\tshmem_real4_prod_to_all___h = (shmem_real4_prod_to_all___p_h) dlsym(tau_handle,\"shmem_real4_prod_to_all__\"); \n    if (shmem_real4_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_sum_to_all__\n **********************************************************/\n\nvoid shmem_real4_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, float * a7, long * a8) {\n\n  typedef void (*shmem_real4_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, float *, long *);\n  static shmem_real4_sum_to_all___p_h shmem_real4_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real4_sum_to_all__(void *, void *, int *, int *, int *, int *, float *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real4_sum_to_all___h == NULL)\n\tshmem_real4_sum_to_all___h = (shmem_real4_sum_to_all___p_h) dlsym(tau_handle,\"shmem_real4_sum_to_all__\"); \n    if (shmem_real4_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real4_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real4_swap__\n **********************************************************/\n\nfloat shmem_real4_swap__(void * a1, float * a2, int * a3) {\n\n  typedef float (*shmem_real4_swap___p_h) (void *, float *, int *);\n  static shmem_real4_swap___p_h shmem_real4_swap___h = NULL;\n  float retval = 0;\n  TAU_PROFILE_TIMER(t,\"float shmem_real4_swap__(void *, float *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_real4_swap___h == NULL)\n\tshmem_real4_swap___h = (shmem_real4_swap___p_h) dlsym(tau_handle,\"shmem_real4_swap__\"); \n    if (shmem_real4_swap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 4*1, (*a3));\n  retval  =  (*shmem_real4_swap___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 4*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 4*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 4*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_real8_max_to_all__\n **********************************************************/\n\nvoid shmem_real8_max_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_max_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_max_to_all___p_h shmem_real8_max_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_max_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_max_to_all___h == NULL)\n\tshmem_real8_max_to_all___h = (shmem_real8_max_to_all___p_h) dlsym(tau_handle,\"shmem_real8_max_to_all__\"); \n    if (shmem_real8_max_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_max_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_min_to_all__\n **********************************************************/\n\nvoid shmem_real8_min_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_min_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_min_to_all___p_h shmem_real8_min_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_min_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_min_to_all___h == NULL)\n\tshmem_real8_min_to_all___h = (shmem_real8_min_to_all___p_h) dlsym(tau_handle,\"shmem_real8_min_to_all__\"); \n    if (shmem_real8_min_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_min_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_prod_to_all__\n **********************************************************/\n\nvoid shmem_real8_prod_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_prod_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_prod_to_all___p_h shmem_real8_prod_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_prod_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_prod_to_all___h == NULL)\n\tshmem_real8_prod_to_all___h = (shmem_real8_prod_to_all___p_h) dlsym(tau_handle,\"shmem_real8_prod_to_all__\"); \n    if (shmem_real8_prod_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_prod_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_sum_to_all__\n **********************************************************/\n\nvoid shmem_real8_sum_to_all__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6, double * a7, long * a8) {\n\n  typedef void (*shmem_real8_sum_to_all___p_h) (void *, void *, int *, int *, int *, int *, double *, long *);\n  static shmem_real8_sum_to_all___p_h shmem_real8_sum_to_all___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real8_sum_to_all__(void *, void *, int *, int *, int *, int *, double *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real8_sum_to_all___h == NULL)\n\tshmem_real8_sum_to_all___h = (shmem_real8_sum_to_all___p_h) dlsym(tau_handle,\"shmem_real8_sum_to_all__\"); \n    if (shmem_real8_sum_to_all___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_real8_sum_to_all___h)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real8_swap__\n **********************************************************/\n\ndouble shmem_real8_swap__(void * a1, double * a2, int * a3) {\n\n  typedef double (*shmem_real8_swap___p_h) (void *, double *, int *);\n  static shmem_real8_swap___p_h shmem_real8_swap___h = NULL;\n  double retval = 0;\n  TAU_PROFILE_TIMER(t,\"double shmem_real8_swap__(void *, double *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_real8_swap___h == NULL)\n\tshmem_real8_swap___h = (shmem_real8_swap___p_h) dlsym(tau_handle,\"shmem_real8_swap__\"); \n    if (shmem_real8_swap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 8*1, (*a3));\n  retval  =  (*shmem_real8_swap___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 8*1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 8*1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 8*1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_real_get__\n **********************************************************/\n\nvoid shmem_real_get__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_real_get___p_h) (void *, void *, int *, int *);\n  static shmem_real_get___p_h shmem_real_get___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_get__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_get___h == NULL)\n\tshmem_real_get___h = (shmem_real_get___p_h) dlsym(tau_handle,\"shmem_real_get__\"); \n    if (shmem_real_get___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a3), (*a4));\n  (*shmem_real_get___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a4),  (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_iget__\n **********************************************************/\n\nvoid shmem_real_iget__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_real_iget___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_real_iget___p_h shmem_real_iget___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_iget__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_iget___h == NULL)\n\tshmem_real_iget___h = (shmem_real_iget___p_h) dlsym(tau_handle,\"shmem_real_iget__\"); \n    if (shmem_real_iget___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(),  (*a5), (*a6));\n  (*shmem_real_iget___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a6),  (*a5));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_iput__\n **********************************************************/\n\nvoid shmem_real_iput__(void * a1, void * a2, int * a3, int * a4, int * a5, int * a6) {\n\n  typedef void (*shmem_real_iput___p_h) (void *, void *, int *, int *, int *, int *);\n  static shmem_real_iput___p_h shmem_real_iput___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_iput__(void *, void *, int *, int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_iput___h == NULL)\n\tshmem_real_iput___h = (shmem_real_iput___p_h) dlsym(tau_handle,\"shmem_real_iput__\"); \n    if (shmem_real_iput___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a6),  (*a5));\n  (*shmem_real_iput___h)( a1,  a2,  a3,  a4,  a5,  a6);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a5), (*a6));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_real_put__\n **********************************************************/\n\nvoid shmem_real_put__(void * a1, void * a2, int * a3, int * a4) {\n\n  typedef void (*shmem_real_put___p_h) (void *, void *, int *, int *);\n  static shmem_real_put___p_h shmem_real_put___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_real_put__(void *, void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_real_put___h == NULL)\n\tshmem_real_put___h = (shmem_real_put___p_h) dlsym(tau_handle,\"shmem_real_put__\"); \n    if (shmem_real_put___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a4),  (*a3));\n  (*shmem_real_put___h)( a1,  a2,  a3,  a4);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(),  (*a3), (*a4));\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_inv__\n **********************************************************/\n\nvoid shmem_set_cache_inv__() {\n\n  typedef void (*shmem_set_cache_inv___p_h) ();\n  static shmem_set_cache_inv___p_h shmem_set_cache_inv___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_inv__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_inv___h == NULL)\n\tshmem_set_cache_inv___h = (shmem_set_cache_inv___p_h) dlsym(tau_handle,\"shmem_set_cache_inv__\"); \n    if (shmem_set_cache_inv___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_inv___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_line_inv__\n **********************************************************/\n\nvoid shmem_set_cache_line_inv__(void * a1) {\n\n  typedef void (*shmem_set_cache_line_inv___p_h) (void *);\n  static shmem_set_cache_line_inv___p_h shmem_set_cache_line_inv___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_line_inv__(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_line_inv___h == NULL)\n\tshmem_set_cache_line_inv___h = (shmem_set_cache_line_inv___p_h) dlsym(tau_handle,\"shmem_set_cache_line_inv__\"); \n    if (shmem_set_cache_line_inv___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_line_inv___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_lock__\n **********************************************************/\n\nvoid shmem_set_lock__(long * a1) {\n\n  typedef void (*shmem_set_lock___p_h) (long *);\n  static shmem_set_lock___p_h shmem_set_lock___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_lock__(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_lock___h == NULL)\n\tshmem_set_lock___h = (shmem_set_lock___p_h) dlsym(tau_handle,\"shmem_set_lock__\"); \n    if (shmem_set_lock___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_lock___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_swap__\n **********************************************************/\n\nint shmem_swap__(void * a1, int * a2, int * a3) {\n\n  typedef int (*shmem_swap___p_h) (void *, int *, int *);\n  static shmem_swap___p_h shmem_swap___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_swap__(void *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_swap___h == NULL)\n\tshmem_swap___h = (shmem_swap___p_h) dlsym(tau_handle,\"shmem_swap__\"); \n    if (shmem_swap___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), 1, (*a3));\n  retval  =  (*shmem_swap___h)( a1,  a2,  a3);\n  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, (*a3), 1);\n  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, (*a3), 1);\n  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), 1, (*a3));\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_test_lock__\n **********************************************************/\n\nint shmem_test_lock__(long * a1) {\n\n  typedef int (*shmem_test_lock___p_h) (long *);\n  static shmem_test_lock___p_h shmem_test_lock___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int shmem_test_lock__(long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (shmem_test_lock___h == NULL)\n\tshmem_test_lock___h = (shmem_test_lock___p_h) dlsym(tau_handle,\"shmem_test_lock__\"); \n    if (shmem_test_lock___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*shmem_test_lock___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   shmem_udcflush__\n **********************************************************/\n\nvoid shmem_udcflush__() {\n\n  typedef void (*shmem_udcflush___p_h) ();\n  static shmem_udcflush___p_h shmem_udcflush___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_udcflush__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_udcflush___h == NULL)\n\tshmem_udcflush___h = (shmem_udcflush___p_h) dlsym(tau_handle,\"shmem_udcflush__\"); \n    if (shmem_udcflush___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_udcflush___h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_udcflush_line__\n **********************************************************/\n\nvoid shmem_udcflush_line__(void * a1) {\n\n  typedef void (*shmem_udcflush_line___p_h) (void *);\n  static shmem_udcflush_line___p_h shmem_udcflush_line___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_udcflush_line__(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_udcflush_line___h == NULL)\n\tshmem_udcflush_line___h = (shmem_udcflush_line___p_h) dlsym(tau_handle,\"shmem_udcflush_line__\"); \n    if (shmem_udcflush_line___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_udcflush_line___h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_wait__\n **********************************************************/\n\nvoid shmem_wait__(long * a1, long * a2) {\n\n  typedef void (*shmem_wait___p_h) (long *, long *);\n  static shmem_wait___p_h shmem_wait___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_wait__(long *, long *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_wait___h == NULL)\n\tshmem_wait___h = (shmem_wait___p_h) dlsym(tau_handle,\"shmem_wait__\"); \n    if (shmem_wait___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_wait___h)( a1,  a2);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_wait_until__\n **********************************************************/\n\nvoid shmem_wait_until__(int * a1, int * a2, int * a3) {\n\n  typedef void (*shmem_wait_until___p_h) (int *, int *, int *);\n  static shmem_wait_until___p_h shmem_wait_until___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_wait_until__(int *, int *, int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_wait_until___h == NULL)\n\tshmem_wait_until___h = (shmem_wait_until___p_h) dlsym(tau_handle,\"shmem_wait_until__\"); \n    if (shmem_wait_until___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_wait_until___h)( a1,  a2,  a3);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   start_pes__\n **********************************************************/\n\nvoid start_pes__(int * a1) {\n\n  typedef void (*start_pes___p_h) (int *);\n  static start_pes___p_h start_pes___h = NULL;\n  TAU_PROFILE_TIMER(t,\"void start_pes__(int *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (start_pes___h == NULL)\n\tstart_pes___h = (start_pes___p_h) dlsym(tau_handle,\"start_pes__\"); \n    if (start_pes___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*start_pes___h)( a1);\n#ifdef TAU_PSHMEM_SGI_MPT\n  tau_totalnodes(1,pshmem_n_pes());\n  TAU_PROFILE_SET_NODE(pshmem_my_pe());\n#else\n  tau_totalnodes(1,_shmem_n_pes());\n  TAU_PROFILE_SET_NODE(_shmem_my_pe());\n#endif\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_inv\n **********************************************************/\n\nvoid shmem_clear_cache_inv() {\n\n  typedef void (*shmem_clear_cache_inv_p_h) ();\n  static shmem_clear_cache_inv_p_h shmem_clear_cache_inv_h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_inv()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_inv_h == NULL)\n\tshmem_clear_cache_inv_h = (shmem_clear_cache_inv_p_h) dlsym(tau_handle,\"shmem_clear_cache_inv\"); \n    if (shmem_clear_cache_inv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_inv_h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_inv\n **********************************************************/\n\nvoid shmem_set_cache_inv() {\n\n  typedef void (*shmem_set_cache_inv_p_h) ();\n  static shmem_set_cache_inv_p_h shmem_set_cache_inv_h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_inv()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_inv_h == NULL)\n\tshmem_set_cache_inv_h = (shmem_set_cache_inv_p_h) dlsym(tau_handle,\"shmem_set_cache_inv\"); \n    if (shmem_set_cache_inv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_inv_h)();\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_clear_cache_line_inv\n **********************************************************/\n\nvoid shmem_clear_cache_line_inv(void * a1) {\n\n  typedef void (*shmem_clear_cache_line_inv_p_h) (void *);\n  static shmem_clear_cache_line_inv_p_h shmem_clear_cache_line_inv_h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_clear_cache_line_inv(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_clear_cache_line_inv_h == NULL)\n\tshmem_clear_cache_line_inv_h = (shmem_clear_cache_line_inv_p_h) dlsym(tau_handle,\"shmem_clear_cache_line_inv\"); \n    if (shmem_clear_cache_line_inv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_clear_cache_line_inv_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   shmem_set_cache_line_inv\n **********************************************************/\n\nvoid shmem_set_cache_line_inv(void * a1) {\n\n  typedef void (*shmem_set_cache_line_inv_p_h) (void *);\n  static shmem_set_cache_line_inv_p_h shmem_set_cache_line_inv_h = NULL;\n  TAU_PROFILE_TIMER(t,\"void shmem_set_cache_line_inv(void *)\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return;\n  } \n  else { \n    if (shmem_set_cache_line_inv_h == NULL)\n\tshmem_set_cache_line_inv_h = (shmem_set_cache_line_inv_p_h) dlsym(tau_handle,\"shmem_set_cache_line_inv\"); \n    if (shmem_set_cache_line_inv_h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return;\n    }\n  TAU_PROFILE_START(t);\n  (*shmem_set_cache_line_inv_h)( a1);\n  TAU_PROFILE_STOP(t);\n  }\n\n}\n\n\n/**********************************************************\n   my_pe_\n **********************************************************/\n\nint my_pe_() {\n\n  typedef int (*my_pe__p_h) ();\n  static my_pe__p_h my_pe__h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int my_pe_()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (my_pe__h == NULL)\n\tmy_pe__h = (my_pe__p_h) dlsym(tau_handle,\"my_pe_\"); \n    if (my_pe__h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*my_pe__h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n\n/**********************************************************\n   my_pe__\n **********************************************************/\n\nint my_pe__() {\n\n  typedef int (*my_pe___p_h) ();\n  static my_pe___p_h my_pe___h = NULL;\n  int retval = 0;\n  TAU_PROFILE_TIMER(t,\"int my_pe__()\", \"\", TAU_USER);\n  if (tau_handle == NULL) \n    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \n\n  if (tau_handle == NULL) { \n    perror(\"Error opening library in dlopen call\"); \n    return retval;\n  } \n  else { \n    if (my_pe___h == NULL)\n\tmy_pe___h = (my_pe___p_h) dlsym(tau_handle,\"my_pe__\"); \n    if (my_pe___h == NULL) {\n      perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n      return retval;\n    }\n  TAU_PROFILE_START(t);\n  retval  =  (*my_pe___h)();\n  TAU_PROFILE_STOP(t);\n  }\n  return retval;\n\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/CuptiActivity.cpp": "#include <Profile/CuptiActivity.h>\n#include <iostream>\n#define __STDC_FORMAT_MACROS\n#include <inttypes.h>\nusing namespace std;\n\n#if CUPTI_API_VERSION >= 2\n#include <dlfcn.h>\n\nstatic int subscribed = 0;\nstatic unsigned int parent_tid = 0;\n\n// From CuptiActivity.h\nuint8_t *activityBuffer;\nCUpti_SubscriberHandle subscriber;\n\nint number_of_streams[TAU_MAX_THREADS] = {0};\nstd::vector<int> streamIds[TAU_MAX_THREADS];\n\nstd::vector<TauContextUserEvent *> counterEvents[TAU_MAX_THREADS];\n\nbool registered_sync = false;\neventMap_t eventMap[TAU_MAX_THREADS]; \n#if CUPTI_API_VERSION >= 3\nstd::map<uint32_t, CUpti_ActivitySourceLocator> sourceLocatorMap;\nstatic std::map<uint32_t, CUpti_ActivitySourceLocator> srcLocMap;\n#endif // CUPTI_API_VERSION >= 3\n\ndevice_map_t & __deviceMap()\n{\n  static device_map_t deviceMap;\n  return deviceMap;\n}\nstd::map<uint32_t, CUpti_ActivityKernel> kernelMap[TAU_MAX_THREADS];\n\nstatic std::map<uint32_t, CUpti_ActivityFunction> functionMap;\nstatic std::map<uint32_t, std::list<CUpti_ActivityInstructionExecution> > instructionMap; // indexing by functionId \nstatic std::map<std::pair<int, int>, CudaOps> map_disassem;\nstatic std::map<std::string, ImixStats> map_imix_static;\n\n// sass output\nFILE *fp_source[TAU_MAX_THREADS];\nFILE *fp_instr[TAU_MAX_THREADS];\nFILE *fp_func[TAU_MAX_THREADS];\nFILE *cubin;\n\n\nstatic int device_count_total = 1;\nstatic double recentTimestamp = 0;\n\nstatic uint32_t buffers_queued = 0;\n\n/* CUPTI API callbacks are called from CUPTI's signal handlers and thus cannot\n * allocate/deallocate memory. So all the counters values need to be allocated\n * on the Stack. */\n\nuint64_t counters_at_last_launch[TAU_MAX_THREADS][TAU_MAX_COUNTERS] = {ULONG_MAX};\nuint64_t current_counters[TAU_MAX_THREADS][TAU_MAX_COUNTERS] = {0};\n\nint kernels_encountered[TAU_MAX_THREADS] = {0};\nint kernels_recorded[TAU_MAX_THREADS] = {0};\n\nbool counters_averaged_warning_issued[TAU_MAX_THREADS] = {false};\nbool counters_bounded_warning_issued[TAU_MAX_THREADS] = {false};\nconst char *last_recorded_kernel_name;\n\n//#define TAU_DEBUG_CUPTI 1\n//#define TAU_DEBUG_CUPTI_SASS 1\n//#define TAU_DEBUG_SASS_PROF 1\n//#define TAU_DEBUG_CUPTI_COUNTERS 1\n//#define TAU_CUPTI_DEBUG_COUNTERS 1\n\n/* BEGIN: unified memory */\n#define CUPTI_CALL(call)                                                    \\\ndo {                                                                        \\\n    CUptiResult _status = call;                                             \\\n    if (_status != CUPTI_SUCCESS) {                                         \\\n      const char *errstr;                                                   \\\n      cuptiGetResultString(_status, &errstr);                               \\\n      fprintf(stderr, \"%s:%d: error: function %s failed with error %s.\\n\",  \\\n              __FILE__, __LINE__, #call, errstr);                           \\\n      exit(-1);                                                             \\\n    }                                                                       \\\n} while (0)\n/* END: Unified Memory */\n\n// // CUDA Thread\n// map<uint32_t, CudaThread> & CudaThreadMap()\n// {\n//   static map<uint32_t, CudaThread> map_cudaThread;\n//   return map_cudaThread;\n// }\n\n/* BEGIN:  Dump cubin (sass) */\n// static std::map<std::string, ImixStats> map_imixStats;\n\n#if CUDA_VERSION >= 5500\nvoid CUPTIAPI dumpCudaModule(CUpti_CallbackId cbid, void *resourceDescriptor)\n{\n\n  if(TauEnv_get_cuda_track_sass()) {\n    const char *pCubin;\n    size_t cubinSize;\n    std::string border = \"======================================================================\";\n    // dump the cubin at MODULE_LOADED_STARTING\n    CUpti_ModuleResourceData *moduleResourceData = (CUpti_ModuleResourceData *)resourceDescriptor; \n    // #endif\n    // assume cubin will always be dumped, check if OpenACC\n\n    if (cbid == CUPTI_CBID_RESOURCE_MODULE_LOADED) {\n      //#if DUMP_CUBIN\n      // if(TauEnv_get_cuda_track_sass()){\n      // You can use nvdisasm to dump the SASS from the cubin. \n      // Try nvdisasm -b -fun <function_id> sass_to_source.cubin\n\n      pCubin = moduleResourceData->pCubin;\n      cubinSize = moduleResourceData->cubinSize;\n      int i = get_device_id();\n      // BEGIN: CUBIN Dump\n      char str_source[500];\n      char str_int[5];\n      strcpy (str_source,TauEnv_get_profiledir());\n      strcat (str_source,\"/\");\n      strcat (str_source,\"sass_source_map_loaded_\");\n      sprintf (str_int, \"%d\", (get_device_id() + 1));\n      strcat (str_source, str_int);\n      strcat (str_source, \".cubin\");\n\n      cubin = fopen(str_source, \"wb\");\n      \n      if (cubin == NULL) {\n\tprintf(\"sass_source_map.cubin failed\\n\");\n      }\n      \n      fwrite(pCubin, sizeof(uint8_t), cubinSize, cubin);\n      fclose(cubin);\n      // END:  CUBIN Dump\n            \n#ifdef TAU_DEBUG_CUPTI_SASS\n      cout << \"get_device_id(): \" << get_device_id() << endl;\n#endif\n      map_disassem = parse_cubin(str_source, get_device_id());\n      map_imix_static = print_instruction_mixes();\n\n    }\n    // else if (cbid == CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING) {\n    //   // You can dump the cubin either at MODULE_LOADED or MODULE_UNLOAD_STARTING\n\n    //   pCubin = moduleResourceData->pCubin;\n    //   cubinSize = moduleResourceData->cubinSize;\n\n    //   char str_source[500];\n    //   strcpy (str_source,TauEnv_get_profiledir());\n    //   strcat (str_source,\"/\");\n    //   strcat (str_source,\"sass_source_map_unload_start.cubin\");\n      \n    //   cubin = fopen(str_source, \"wb\");\n      \n    //   if (cubin == NULL) {\n    //   \tprintf(\"sass_source_map.cubin failed\\n\");\n    //   }\n      \n    //   fwrite(pCubin, sizeof(uint8_t), cubinSize, cubin);\n    //   fclose(cubin);\n\n    // }\n  }\n}\n\nstatic void\nhandleResource(CUpti_CallbackId cbid, const CUpti_ResourceData *resourceData)\n{\n\n  if (cbid == CUPTI_CBID_RESOURCE_MODULE_LOADED) {\n    dumpCudaModule(cbid, resourceData->resourceDescriptor);\n  }\n  // else if (cbid == CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING) {\n  //   dumpCudaModule(cbid, resourceData->resourceDescriptor);\n  // }\n  \n}\n#endif\n/* END:  Dump cubin (sass) */\n\nCUresult cuInit(unsigned int a1)\n{\n#ifdef TAU_DEBUG_CUPTI\n    printf(\"in cuInit\\n\");\n#endif\n    if (parent_tid == 0) {\n      parent_tid = pthread_self();\n      // parent_tid = RtsLayer::getTid();\n      //printf(\"[CuptiActivity]:  Set parent_tid as: %u\\n\", parent_tid);\n    }\n    typedef CUresult (*cuInit_p_h)(unsigned int);\n    static void *libcuda_handle = (void *)dlopen(\"libcuda.so\", RTLD_NOW);\n    if (!libcuda_handle) {\n        perror(\"Error opening libcuda.so in dlopen call\");\n        return CUDA_ERROR_NOT_INITIALIZED;\n    }\n    static cuInit_p_h cuInit_h = (cuInit_p_h)dlsym(libcuda_handle, \"cuInit\");\n    if (!cuInit_h) {\n        perror(\"Error obtaining cuInit symbol info from dlopen'ed lib\");\n        return CUDA_ERROR_NOT_INITIALIZED;\n    }\n    Tau_cupti_subscribe();\n    return cuInit_h(a1);\n}\n\nvoid Tau_cupti_subscribe()\n{\n\tif(subscribed) return;\n#ifdef TAU_DEBUG_CUPTI\n    printf(\"in Tau_cupti_subscribe\\n\");\n#endif\n\tCUptiResult err = CUPTI_SUCCESS;\n\tCUresult err2 = CUDA_SUCCESS;\n\n\tTAU_VERBOSE(\"TAU: Subscribing to CUPTI.\\n\");\n\terr = cuptiSubscribe(&subscriber, (CUpti_CallbackFunc)Tau_cupti_callback_dispatch, NULL);\n    CUPTI_CHECK_ERROR(err, \"cuptiSubscribe\");\n\terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_DEVICE);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable\");\n\t\n\t//setup global activity queue.\n    size_t size;\n    size_t maxRecords;\n\n  // With the ASYNC ACTIVITY API CUPTI will call \n  // Tau_cupti_register_buffer_creation() when it needs a new activity buffer\n  // and Tau_cupti_register_sync_event() when a buffer is completed so all we\n  // need to do here is to register these callback functions.\n#ifdef TAU_ASYNC_ACTIVITY_API\n    err = cuptiActivityRegisterCallbacks(Tau_cupti_register_buffer_creation, Tau_cupti_register_sync_event);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityRegisterCallbacks\");\n#else\n\n    Tau_cupti_register_buffer_creation(&activityBuffer, &size, &maxRecords);\n\terr = cuptiActivityEnqueueBuffer(NULL, 0, activityBuffer, ACTIVITY_BUFFER_SIZE);\n\tCUPTI_CHECK_ERROR(err, \"cuptiActivityEnqueueBuffer\");\n#endif\n\tsubscribed = 1;\n}\n\nvoid Tau_cupti_onload()\n{\n\tif (!subscribed) {\n\t\tTau_cupti_subscribe();\n\t}\n\tTAU_VERBOSE(\"TAU: Enabling CUPTI callbacks.\\n\");\n\n\tCUptiResult err = CUPTI_SUCCESS;\n\tCUresult err2 = CUDA_SUCCESS;\n  \n\tif (cupti_api_runtime())\n\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\tprintf(\"TAU: Subscribing to RUNTIME API.\\n\");\n#endif\n\t\terr = cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_RUNTIME_API);\n\t    CUPTI_CHECK_ERROR(err, \"cuptiEnableDomain (CUPTI_CB_DOMAIN_RUNTIME_API)\");\n\t\t//runtime_enabled = true;\n\t}\n\tif (cupti_api_driver())\n\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\tprintf(\"TAU: Subscribing to DRIVER API.\\n\");\n#endif\n\t\terr = cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_DRIVER_API);\n\t    CUPTI_CHECK_ERROR(err, \"cuptiEnableDomain (CUPTI_CB_DOMAIN_DRIVER_API)\");\n\t\t//driver_enabled = true;\n\t}\n  \n    \terr = cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_SYNCHRONIZE); \n    CUPTI_CHECK_ERROR(err, \"cuptiEnableDomain (CUPTI_CB_DOMAIN_SYNCHRONIZE)\");\n    \terr = cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_RESOURCE); \n    CUPTI_CHECK_ERROR(err, \"cuptiEnableDomain (CUPTI_CB_DOMAIN_RESOURCE)\");\t\n    \tCUDA_CHECK_ERROR(err2, \"Cannot set Domain, check if the CUDA toolkit version is supported by the install CUDA driver.\\n\");\n\t/* BEGIN source line info */\n\t/* Need to check if device is pre-Fermi */\n#if CUDA_VERSION >= 5500\n  if(TauEnv_get_cuda_track_sass()) {\n\terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION);\n\tCUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION)\");\n\t// err = cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_RESOURCE);\n\t// CUPTI_CHECK_ERROR(err, \"cuptiEnableDomain (CUPTI_CB_DOMAIN_RESOURCE)\");\n  }\n#endif\n \t/* END source line info */\n    // \terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_CONTEXT);\n    // CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_CONTEXT)\");\n    // \terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_DRIVER);\n    // CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_DRIVER)\");\n    // \terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_RUNTIME);\n    // CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_RUNTIME)\");\nif(!TauEnv_get_cuda_track_sass()) {\n    \terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_MEMCPY);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_MEMCPY)\");\n }\t\n#if CUDA_VERSION >= 5050\n\terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_MEMCPY2);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_MEMCPY2)\");\n#endif\n/*  SASS incompatible with KIND_CONCURRENT_KERNEL  */\nif(!TauEnv_get_cuda_track_sass()) {\n#if CUDA_VERSION >= 5000\n    \terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL)\");\n#else\n\terr = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_KERNEL);\n    CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_KERNEL)\");\n#endif\n}\n else {\n   err = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_KERNEL);\n   CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_KERNEL)\");\n }\n\n#if CUPTI_API_VERSION >= 3\n  if (strcasecmp(TauEnv_get_cuda_instructions(), \"GLOBAL_ACCESS\") == 0)\n  {\n\t  err = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR);\n      CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR)\");\n\t  err = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS);\n      CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS)\");\n  } else if (strcasecmp(TauEnv_get_cuda_instructions(), \"BRANCH\") == 0)\n  {\n\t  err = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR);\n      CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR)\");\n\t  err = cuptiActivityEnable(CUPTI_ACTIVITY_KIND_BRANCH);\n      CUPTI_CHECK_ERROR(err, \"cuptiActivityEnable (CUPTI_ACTIVITY_KIND_BRANCH)\");\n  }\n#else\n  if (strcasecmp(TauEnv_get_cuda_instructions(), \"GLOBAL_ACCESS\") == 0 ||\n      strcasecmp(TauEnv_get_cuda_instructions(), \"BRANCH\") == 0)\n  {\n\t\tprintf(\"TAU WARNING: DISABLING CUDA %s tracking. Please use CUDA 5.0 or greater.\\n\", TauEnv_get_cuda_instructions());\n  }\n#endif //CUPTI_API_VERSIOn >= 3\n\n  //cout << \"Tau_cupti_onload():  get_device_id(): \" << get_device_id() << endl;\n\n  CUpti_ActivityDevice device = __deviceMap()[get_device_id()];\n\n\tif ((device.computeCapabilityMajor > 3) ||\n\t\tdevice.computeCapabilityMajor == 3 &&\n\t\tdevice.computeCapabilityMinor >= 0)\n\t{\n\t  \n  if(TauEnv_get_cuda_track_unified_memory()) {\n#if CUDA_VERSION >= 7000\n    CUptiResult res = CUPTI_SUCCESS;\n\tCUresult err2 = CUDA_SUCCESS;\n    CUpti_ActivityUnifiedMemoryCounterConfig config[2];\n    CUresult er;\n    cuInit(0);\n\n    // configure unified memory counters\n    config[0].scope = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE;\n    config[0].kind = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD;\n    config[0].deviceId = 0;\n    config[0].enable = 1;\n\n    config[1].scope = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE;\n    config[1].kind = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH;\n    config[1].deviceId = 0;\n    config[1].enable = 1;\n\n    res = cuptiActivityConfigureUnifiedMemoryCounter(config, 2);\n    if (res == CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED) {\n      printf(\"Test is waived, unified memory is not supported on the underlying platform.\\n\");\n    }\n    else if (res == CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE) {\n      printf(\"Test is waived, unified memory is not supported on the device.\\n\");\n    }\n    else if (res == CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES) {\n      printf(\"Test is waived, unified memory is not supported on the non-P2P multi-gpu setup.\\n\");\n    }\n    else {\n      CUPTI_CALL(res);\n    }\n\n    // enable unified memory counter activity\n    CUPTI_CALL(cuptiActivityEnable(CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER));\n\n#elif CUDA_VERSION >= 6000 && CUDA_VERSION <= 6050\n    CUptiResult res = CUPTI_SUCCESS;\n\tCUresult err2 = CUDA_SUCCESS;\n    CUpti_ActivityUnifiedMemoryCounterConfig config[3];\n\n    cuInit(0);\n\n    // configure unified memory counters\n    config[0].scope = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE;\n    config[0].kind = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD;\n    config[0].deviceId = 0;\n    config[0].enable = 1;\n\n    config[1].scope = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE;\n    config[1].kind = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH;\n    config[1].deviceId = 0;\n    config[1].enable = 1;\n\n    config[2].scope = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE;\n    config[2].kind = CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT;\n    config[2].deviceId = 0;\n    config[2].enable = 1;\n\n    res = cuptiActivityConfigureUnifiedMemoryCounter(config, 3);\n    if (res == CUPTI_ERROR_NOT_SUPPORTED) {\n      printf(\"Test is waived, unified memory is not supported on the underlying platform.\\n\");\n    }\n    else {\n      CUPTI_CALL(res);\n    }\n\n    // enable unified memory counter activity\n    CUPTI_CALL(cuptiActivityEnable(CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER));\n\n#else\n    printf(\"Unified memory supported only in CUDA 6.0 and over.\\n\");\n#endif\n\n  }\n\t}\n\telse {\n\t  CUDA_CHECK_ERROR(err2, \"CUDA Compute Capability 3.0 or higher required!\\n\");\n\t}  \n  CUDA_CHECK_ERROR(err2, \"Cannot enqueue buffer.\\n\");\n  \n  uint64_t gpu_timestamp;\n  err = cuptiGetTimestamp(&gpu_timestamp);\n  CUDA_CHECK_ERROR(err2, \"Cannot get timestamp.\\n\");\n  double cpu_timestamp = TauTraceGetTimeStamp();\n  double tmp = cpu_timestamp - ((double)gpu_timestamp / 1.0e3);\n  //printf(\"Set offset: %lu - %f/1e3 = %f\\n\", TauTraceGetTimeStamp(), (double)gpu_timestamp, tmp);\n  Tau_cupti_set_offset(tmp);\n  //Tau_cupti_set_offset((-1) * timestamp / 1e3);\n  //cerr << \"begining timestamp: \" << TauTraceGetTimeStamp() - ((double)timestamp/1e3) << \"ms.\\n\" << endl;\n  //Tau_cupti_set_offset(0);\n\n  Tau_gpu_init();\n}\n\nvoid Tau_cupti_onunload() {\n#if CUDA_VERSION >= 6000\n  if(TauEnv_get_cuda_track_unified_memory()) {\n    CUPTI_CALL(cuptiActivityDisable(CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER));\n  }\n#endif\n\n}\n\n/* This callback handles synchronous things */\n\n// Extra bool param that tells whether to run code\nvoid Tau_cupti_callback_dispatch(void *ud, CUpti_CallbackDomain domain, CUpti_CallbackId id, const void *params)\n{\n#ifdef TAU_DEBUG_CUPTI\n\tprintf(\"in Tau_cupti_callback_dispatch\\n\");\n#endif\n#if defined(PTHREADS)\n\tif (!TauEnv_get_tauCuptiAvail()) {\n\t  unsigned int cur_tid = pthread_self(); // needed for IBM P8\n\t  const CUpti_CallbackData *cbInfo = (CUpti_CallbackData *) params;\n\t  unsigned int corrid = cbInfo->correlationId;\n\t  if (cur_tid != parent_tid) {\n\t    // Register GPU thread count here\n\t    unsigned int systid = cur_tid;\n\t    RtsLayer::LockEnv();\n\t    if (map_cudaThread.find(corrid) == map_cudaThread.end()) {\n\t      unsigned int parenttid = parent_tid;\n\t      int tauvtid = Tau_get_thread();\n\t      unsigned int contextid = cbInfo->contextUid;\n\t      const char* funcname = cbInfo->functionName;\n\t      register_cuda_thread(systid, parenttid, tauvtid, corrid, contextid, funcname);\n\t    }\n\t    // track unique threads seen\n\t    if (set_gpuThread.find(cur_tid) == set_gpuThread.end()) {\n          // reserve a thread ID from TAU\n\t      int threadid = Tau_create_task();\n          // FIRST! Get a cupti timestamp for this start\n          // Otherwise, the .TAU application start time will be 0.\n          uint64_t currentTimestamp;\n          double d_currentTimestamp;\n\t      CUptiResult err = cuptiGetTimestamp(&currentTimestamp);\n          d_currentTimestamp = (double)currentTimestamp/1e3; // orig\n          metric_set_gpu_timestamp(threadid, d_currentTimestamp);\n\t\t  //printf(\"%d Setting timestamp to: %f from %lu\\n\", threadid, d_currentTimestamp, currentTimestamp);\n          // Start a top level timer on that thread.\n          Tau_create_top_level_timer_if_necessary_task(threadid);\n          //printf(\"VIRTUAL THREAD: %d\\n\", threadid);\n\t      set_gpuThread.insert(cur_tid);\n\t      TauEnv_set_cudaTotalThreads(TauEnv_get_cudaTotalThreads() + 1);\n\t      map_cuptiThread[Tau_get_thread()] = threadid;\n\t    }\n\t    RtsLayer::UnLockEnv();\n\t  }\n    }\n#endif\n\t//Just in case we encounter a callback before TAU is intialized or finished.\n  if (!Tau_init_check_initialized() || Tau_global_getLightsOut()) { \n#ifdef TAU_DEBUG_CUPTI\n      printf(\"TAU: [WARNING] Got CUPTI callback but TAU is either not yet initialized or has finished!\\n\");\n#endif\n\t  return;\n  }\n#if CUDA_VERSION >= 5500\n\tif (domain == CUPTI_CB_DOMAIN_RESOURCE)\n\t{\n\t  // if we want runtime cubin dump\n\t  if(TauEnv_get_cuda_track_sass()) {\n\t    handleResource(id, (CUpti_ResourceData *)params);\n\t  }\n\t}\n#endif\n#ifndef TAU_ASYNC_ACTIVITY_API\n\tif (domain == CUPTI_CB_DOMAIN_RESOURCE)\n\t{\n\t\t//A resource was created, let us enqueue a buffer in order to capture events\n\t\t//that happen on that resource.\n\t\tif (id == CUPTI_CBID_RESOURCE_CONTEXT_CREATED)\n\t\t{\n\t\t\tCUptiResult err = CUPTI_SUCCESS;\n\t        CUresult err2 = CUDA_SUCCESS;\n\t\t\tCUpti_ResourceData* resource = (CUpti_ResourceData*) params;\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tprintf(\"TAU: Resource created: Enqueuing Buffer with context=%p stream=%d.\\n\", resource->context, 0);\n#endif\n\t\t\tactivityBuffer = (uint8_t *)malloc(ACTIVITY_BUFFER_SIZE);\n\n\t\t\terr = cuptiActivityEnqueueBuffer(resource->context, 0, activityBuffer, ACTIVITY_BUFFER_SIZE);\n\t\t\tCUDA_CHECK_ERROR(err2, \"Cannot enqueue buffer in context.\\n\");\n\t\t}\n\t\telse if (id == CUPTI_CBID_RESOURCE_STREAM_CREATED)\n\t\t{\n\t\t\tCUptiResult err = CUPTI_SUCCESS;\n\t        CUresult err2 = CUDA_SUCCESS;\n\t\t\tCUpti_ResourceData* resource = (CUpti_ResourceData*) params;\n    \t\tuint32_t stream;\n\t\t\terr = cuptiGetStreamId(resource->context, resource->resourceHandle.stream, &stream);\n\t\t\tCUPTI_CHECK_ERROR(err, \"cuptiGetStreamId\");\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tprintf(\"TAU: Stream created: Enqueuing Buffer with context=%p stream=%d.\\n\", resource->context, stream);\n#endif\n\n\t\t\tactivityBuffer = (uint8_t *)malloc(ACTIVITY_BUFFER_SIZE);\n\t\t\terr = cuptiActivityEnqueueBuffer(resource->context, stream, activityBuffer, ACTIVITY_BUFFER_SIZE);\n\t\t\tCUDA_CHECK_ERROR(err2, \"Cannot enqueue buffer in stream.\\n\");\n\t\t\tint taskId = 0;\n#if defined(PTHREADS)\n\t\t\tif (map_cudaThread.find(corrid) != map_cudaThread.end()) {\n\t\t\t  int local_vtid = map_cudaThread[corrid].tau_vtid;\n\t\t\t  taskId = map_cuptiThread[local_vtid];\n\t\t\t}\n#endif\n\t\t\tstreamIds[taskId].push_back(stream);\n\t\t\tnumber_of_streams[taskId]++;\n\t\t}\n\n\t}\n\telse if (domain == CUPTI_CB_DOMAIN_SYNCHRONIZE)\n\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\tprintf(\"register sync from callback.\\n\");\n#endif\n\t\tCUpti_SynchronizeData *sync = (CUpti_SynchronizeData *) params;\n\t\tuint32_t stream;\n\t\tCUptiResult err = CUPTI_SUCCESS;\n\t    CUresult err2 = CUDA_SUCCESS;\n\t\t//Global Buffer\n#if defined(PTHREADS)\n    int count_iter = TauEnv_get_cudaTotalThreads();\n#else\n    int count_iter = get_device_count();\n#endif\n    for (int i=0; i<count_iter; i++) {\n      record_gpu_counters_at_sync(i);\n    }\n\t\tTau_cupti_register_sync_event(NULL, 0, NULL, 0, 0);\n    \n\t\terr = cuptiGetStreamId(sync->context, sync->stream, &stream);\n\t\tCUPTI_CHECK_ERROR(err, \" cuptiGetStreamId\");\n\t\tTau_cupti_register_sync_event(sync->context, stream, NULL, 0, 0);\n\t\tint taskId = 0;\n#if defined(PTHREADS)\n\t\tif (map_cudaThread.find(corrid) != map_cudaThread.end()) {\n\t\t  int local_vtid = map_cudaThread[corrid].tau_vtid;\n\t\t  taskId = map_cuptiThread[local_vtid];\n\t\t}\n#endif\n\t\tfor (int s=0; s<number_of_streams[taskId]; s++)\n\t\t{\n\t\t\tTau_cupti_register_sync_event(sync->context, streamIds[taskId].at(s), NULL, 0, 0);\n\t\t}\n\t}\n\telse if (domain == CUPTI_CB_DOMAIN_DRIVER_API ||\n\t\t\t\t\t domain == CUPTI_CB_DOMAIN_RUNTIME_API)\n\t{\n#else\n\tif (domain == CUPTI_CB_DOMAIN_DRIVER_API ||\n\t\t\t\t\t domain == CUPTI_CB_DOMAIN_RUNTIME_API)\n\t{\n#endif //TAU_ASYNC_ACTIVITY_API\n\t\tconst CUpti_CallbackData *cbInfo = (CUpti_CallbackData *) params;\n\n        // BEGIN handling memcpy\n\t\tif (function_is_memcpy(id, domain))\n\t\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tprintf(\"TAU: CUPTI callback for memcpy\\n\");\n#endif\n\t\t\tint kind;\n\t\t\tint count;\n\t\t\tget_values_from_memcpy(cbInfo, id, domain, kind, count);\n\t\t\tif (cbInfo->callbackSite == CUPTI_API_ENTER)\n\t\t\t{\n\t\t\t  int taskId = 0;  // gpu no?\n#if defined(PTHREADS)\n\t\t\t  if (map_cudaThread.find(cbInfo->correlationId) != map_cudaThread.end()) {\n\t\t\t    int local_vtid = map_cudaThread[cbInfo->correlationId].tau_vtid;\n\t\t\t    taskId = map_cuptiThread[local_vtid];\n\t\t\t  }\n#endif\n\t\t\t\tTau_cupti_enter_memcpy_event(\n\t\t\t\t\tcbInfo->functionName, -1, 0, cbInfo->contextUid, cbInfo->correlationId, \n\t\t\t\t\tcount, getMemcpyType(kind), taskId\n\t\t\t\t);\n\t\t\t\tTau_cupti_register_host_calling_site(cbInfo->correlationId, cbInfo->functionName);\n\t\t\t\t/*\n\t\t\t\tCuptiGpuEvent new_id = CuptiGpuEvent(TAU_GPU_USE_DEFAULT_NAME, (uint32_t)0, cbInfo->contextUid, cbInfo->correlationId, NULL, 0);\n\t\t\t\tTau_gpu_enter_memcpy_event(\n\t\t\t\t\tcbInfo->functionName,\n\t\t\t\t\t&new_id,\n\t\t\t\t\tcount,\n\t\t\t\t\tgetMemcpyType(kind)\n\t\t\t\t);\n\t\t\t\t*/\n\t\t\t}\n\t\t\telse\n\t\t\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\t\t\tcerr << \"callback for \" << cbInfo->functionName << \", exit.\" << endl;\n#endif\n\t\t\t\tint taskId = 0;\n#if defined(PTHREADS)\n\t\t\t\tif (map_cudaThread.find(cbInfo->correlationId) != map_cudaThread.end()) {\n\t\t\t\t  int local_vtid = map_cudaThread[cbInfo->correlationId].tau_vtid;\n\t\t\t\t  taskId = map_cuptiThread[local_vtid];\n\t\t\t\t}\n#endif\n\t\t\t\tTau_cupti_exit_memcpy_event(\n\t\t\t\t\tcbInfo->functionName, -1, 0, cbInfo->contextUid, cbInfo->correlationId, \n\t\t\t\t\tcount, getMemcpyType(kind), taskId\n\t\t\t\t);\n\t\t\t\t/*\n\t\t\t\tCuptiGpuEvent new_id = CuptiGpuEvent(TAU_GPU_USE_DEFAULT_NAME, (uint32_t)0, cbInfo->contextUid, cbInfo->correlationId, NULL, 0);\n\t\t\t\tTau_gpu_exit_memcpy_event(\n\t\t\t\t\tcbInfo->functionName,\n\t\t\t\t\t&new_id,\n\t\t\t\t\tgetMemcpyType(kind)\n\t\t\t\t);\n\t\t\t\t*/\n\t\t\t\tif (function_is_sync(id))\n\t\t\t\t{ \n          \n#ifdef TAU_DEBUG_CUPTI\n\t\t\t\t\tcerr << \"sync function name: \" << cbInfo->functionName << endl;\n#endif\n\t\t\t\t\t//Disable counter tracking during the sync.\n\t\t\t\t\t//Tau_CuptiLayer_disable();\n\t\t\t\t\t//cuCtxSynchronize();\n\t\t\t\t\tcudaDeviceSynchronize();\n\t\t\t\t\t//Tau_CuptiLayer_enable();\n#if defined(PTHREADS)\n\t  int count_iter = TauEnv_get_cudaTotalThreads();\n#else\n          int count_iter = get_device_count();\n#endif\n          for (int i=0; i<count_iter; i++) {\n            record_gpu_counters_at_sync(i);\n          }\n\n#ifdef TAU_ASYNC_ACTIVITY_API\n          Tau_cupti_activity_flush_all();\n          //cuptiActivityFlushAll(CUPTI_ACTIVITY_FLAG_NONE);\n          //cuptiActivityFlush(cbInfo->context, 0, CUPTI_ACTIVITY_FLAG_NONE);\n#else\n\t\t\t\t\tTau_cupti_register_sync_event(cbInfo->context, 0, NULL, 0, 0);\n#endif\n          \n\t\t\t\t}\n\t\t\t}\n\t\t} // END handling memcpy\n\t\telse // This is something other than memcpy\n\t\t{\n\t\t\tif (cbInfo->callbackSite == CUPTI_API_ENTER)\n\t\t\t{\n\t\t\t\tif (function_is_exit(id))\n\t\t\t\t{\n          //Do one last flush since this is our last opportunity.\n#ifdef TAU_ASYNC_ACTIVITY_API\n          cuptiActivityFlushAll(CUPTI_ACTIVITY_FLAG_NONE);\n#endif\n\t\t\t\t\t//Stop collecting cupti counters.\n\t\t\t\t\tTau_CuptiLayer_finalize();\n\t\t\t\t}\n                if(strcmp(cbInfo->functionName, \"cudaDeviceReset\") == 0) {\n                    fprintf(stderr, \"TAU: WARNING! cudaDeviceReset was called. CUPTI counters will not be measured from now on.\\n\");\n                }\n\t\t\t\tTau_gpu_enter_event(cbInfo->functionName);\n\t\t\t\tif (function_is_launch(id))\n\t\t\t\t{ // ENTRY to a launch function\n          Tau_CuptiLayer_init();\n\n#ifdef TAU_DEBUG_CUPTI\n          printf(\"[at call (enter), %d] name: %s.\\n\", cbInfo->correlationId, cbInfo->functionName);\n#endif\n\t\t\t\t  record_gpu_launch(cbInfo->correlationId, cbInfo->functionName);\n\t\t\t\t\tCUdevice device;\n\t\t\t\t\tcuCtxGetDevice(&device);\n                                        Tau_cuda_Event_Synchonize();\n\t\t\t\t\tint taskId = 0;\n#if defined(PTHREADS)\n\t\t\t\t\tif (map_cudaThread.find(cbInfo->correlationId) != map_cudaThread.end()) {\n\t\t\t\t\t  int local_vtid = map_cudaThread[cbInfo->correlationId].tau_vtid;\n\t\t\t\t\t  taskId = map_cuptiThread[local_vtid];\n\t\t\t\t\t}\n#endif\n\t\t\t\t\trecord_gpu_counters_at_launch(taskId);\n\t\t\t\t}\n#ifdef TAU_DEBUG_CUPTI\n\t\t\t\tcerr << \"callback for \" << cbInfo->functionName << \", enter.\" << endl;\n#endif\n\t\t\t}\n\t\t\telse if (cbInfo->callbackSite == CUPTI_API_EXIT)\n\t\t\t{\n\t\t\t\tif (function_is_launch(id)) // EXIT FROM a launch function\n\t\t\t\t{\n\t\t\t\t  record_gpu_launch(cbInfo->correlationId, cbInfo->functionName);\n\t\t\t\t}\n#ifdef TAU_DEBUG_CUPTI_FORCE_SYNC\n      //for testing only. \n\t\t\t\tif (function_is_launch(id))\n\t\t\t\t{\n                    printf(\"synthetic sync point.\\n\");\n                    cuCtxSynchronize();\n                    FunctionInfo *p = TauInternal_CurrentProfiler(RtsLayer::myThread())->CallPathFunction;\n                }\n#endif\n      \n\t\t\t\n#ifdef TAU_DEBUG_CUPTI\n\t\t\t\tcerr << \"callback for \" << cbInfo->functionName << \", exit.\" << endl;\n\t\t\t\tprintf(\"[at call (exit), %d] name: %s.\\n\", cbInfo->correlationId, cbInfo->functionName);\n#endif\n\t\t\t\tTau_gpu_exit_event(cbInfo->functionName);\n\t\t\t\tif (function_is_sync(id))\n\t\t\t\t{\n#ifdef TAU_DEBUG_CUPTI\n\t\t\t\t\tcerr << \"sync function name: \" << cbInfo->functionName << endl;\n#endif\n\t\t\t\t\t//Tau_CuptiLayer_disable();\n\t\t\t\t\t//cuCtxSynchronize();\n\t\t\t\t\tcudaDeviceSynchronize();\n\t\t\t\t\t//Tau_CuptiLayer_enable();\n#if defined(PTHREADS)\n\t  int count_iter = TauEnv_get_cudaTotalThreads();\n#else\n          int count_iter = get_device_count();\n#endif\n          for (int i=0; i<count_iter; i++) {\n            record_gpu_counters_at_sync(i);\n          }\n\n#ifdef TAU_ASYNC_ACTIVITY_API\n          Tau_cupti_activity_flush_all();\n          //cuptiActivityFlushAll(CUPTI_ACTIVITY_FLAG_NONE);\n          //cuptiActivityFlush(cbInfo->context, 0, CUPTI_ACTIVITY_FLAG_NONE);\n#else\n\t\t\t\t\tTau_cupti_register_sync_event(cbInfo->context, 0, NULL, 0, 0);\n#endif\n\t\t\t\t\t//Tau_CuptiLayer_enable();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//invaild or nvtx, do nothing\n\telse {\n\t\treturn;\n\t}\n\n}\n\nvoid CUPTIAPI Tau_cupti_activity_flush_all() {      \n    if((Tau_CuptiLayer_get_num_events() > 0) || (buffers_queued++ > ACTIVITY_ENTRY_LIMIT)) {\n        buffers_queued = 0;\n        cuptiActivityFlushAll(CUPTI_ACTIVITY_FLAG_NONE);\n    }\n}\n\nvoid CUPTIAPI Tau_cupti_register_sync_event(CUcontext context, uint32_t stream, uint8_t *activityBuffer, size_t size, size_t bufferSize)\n{\n//   if(TauEnv_get_cuda_track_sass()) {\n//     if(TauEnv_get_cuda_csv_output()) {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//       printf(\"[CuptiActivity]:  About to call createFilePointerSass, device_count: %i\\n\", device_count);\n// #endif\n//       createFilePointerSass(device_count);\n//     }\n//   }\n  //Since we do not control the synchronization points this is only place where\n  //we can record the gpu counters.\n#ifdef TAU_ASYNC_ACTIVITY_API\n#if defined(PTHREADS)\n  int count_iter = TauEnv_get_cudaTotalThreads();\n#else\n  int count_iter = get_device_count();\n#endif\n  for (int i=0; i<count_iter; i++) {\n    record_gpu_counters_at_sync(i);\n  }\n#endif\n  //TAU_PROFILE(\"Tau_cupti_register_sync_event\", \"\", TAU_DEFAULT);\n\t//printf(\"in sync: context=%p stream=%d.\\n\", context, stream);\n\tregistered_sync = true;\n  CUptiResult err, status;\n  CUresult err2 = CUDA_SUCCESS;\n  CUpti_Activity *record = NULL;\n\t//size_t bufferSize = 0;\n  \n  //start\n\n#if defined(PTHREADS)\n  if (count_iter > TAU_MAX_THREADS) {\n    printf(\"TAU ERROR: Maximum number of threads (%d) exceeded. Please reconfigure TAU with -useropt=-DTAU_MAX_THREADS=3200 or some higher number\\n\", TAU_MAX_THREADS);\n    exit(1);\n  }\n#else\n  if (count_iter > TAU_MAX_GPU_DEVICES) {\n    printf(\"TAU ERROR: Maximum number of devices (%d) exceeded. Please reconfigure TAU with -useropt=-DTAU_MAX_GPU_DEVICES=32 or some higher number\\n\", TAU_MAX_GPU_DEVICES);\n    exit(1);\n  }\n#endif\n\n// for the ASYNC ACTIVITY API assume that the activityBuffer is vaild\n#ifdef TAU_ASYNC_ACTIVITY_API\n  err = CUPTI_SUCCESS;\n#else\n\terr = cuptiActivityDequeueBuffer(context, stream, &activityBuffer, &bufferSize);\n#endif\n\t//printf(\"err: %d.\\n\", err);\n\n    uint64_t num_buffers = 0;\n\tif (err == CUPTI_SUCCESS)\n\t{\n\t\t//printf(\"succesfully dequeue'd buffer.\\n\");\n    //TAU_START(\"next record loop\");\n    //TAU_PROFILE_TIMER(g, \"getNextRecord\", \"\", TAU_DEFAULT);\n    //TAU_PROFILE_TIMER(r, \"record_activity\", \"\", TAU_DEFAULT);\n\t\tdo {\n      //TAU_PROFILE_START(g);\n\t\t\tstatus = cuptiActivityGetNextRecord(activityBuffer, bufferSize, &record);\n      //TAU_PROFILE_STOP(g);\n\t\t\tif (status == CUPTI_SUCCESS) {\n        //TAU_PROFILE_START(r);\n\t\t\t\tTau_cupti_record_activity(record);\n                ++num_buffers;\n        //TAU_PROFILE_STOP(r);\n\t\t\t}\n\t\t\telse if (status == CUPTI_ERROR_MAX_LIMIT_REACHED) {\n\t\t\t\t//const char *str;\n\t\t\t\t//cuptiGetResultString(status, &str);\n\t\t\t\t//printf(\"TAU ERROR: buffer limit encountered: %s.\\n\", str);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst char *str;\n\t\t\t\tcuptiGetResultString(status, &str);\n\t\t\t\tprintf(\"TAU ERROR: cannot retrieve record from buffer: %s.\\n\", str);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (status != CUPTI_ERROR_MAX_LIMIT_REACHED);\n    //TAU_STOP(\"next record loop\");\n\t\t\t\n\t\tsize_t number_dropped;\n\t\terr = cuptiActivityGetNumDroppedRecords(NULL, 0, &number_dropped);\n\n\t\tif (number_dropped > 0)\n\t\t\tprintf(\"TAU WARNING: %d CUDA records dropped, consider increasing the CUPTI_BUFFER size.\", number_dropped);\n\n    // With the ASYNC ACTIVITY API CUPTI will take care of calling\n    // Tau_cupti_register_buffer_creation() when it needs a new activity buffer so\n    // we are free to deallocate it here.\n#ifdef TAU_ASYNC_ACTIVITY_API\n    free(activityBuffer);\n#else\n\n\t\t//Need to requeue buffer by context, stream.\n\t\terr = cuptiActivityEnqueueBuffer(context, stream, activityBuffer, ACTIVITY_BUFFER_SIZE);\n#endif\n\t\tCUDA_CHECK_ERROR(err2, \"Cannot requeue buffer.\\n\");\n\t\t\n\n    for (int i=0; i < count_iter; i++) {\n#ifdef TAU_DEBUG_CUPTI_COUNTERS\n      printf(\"Kernels encountered/recorded: %d/%d.\\n\", kernels_encountered[i], kernels_recorded[i]);\n#endif\n\n      if (kernels_recorded[i] == kernels_encountered[i])\n      {\n        clear_counters(i);\n        last_recorded_kernel_name = NULL;\n      } else if (kernels_recorded[i] > kernels_encountered[i]) {\n        //printf(\"TAU: Recorded more kernels than were launched, exiting.\\n\");\n        //abort();\n        //exit(1);\n      }\n    }\n//     for (int i=0; i < device_count; i++) {\n// #ifdef TAU_DEBUG_CUPTI_COUNTERS\n//       printf(\"Kernels encountered/recorded: %d/%d.\\n\", kernels_encountered[i], kernels_recorded[i]);\n// #endif\n\n//       if (kernels_recorded[i] == kernels_encountered[i])\n//       {\n//         clear_counters(i);\n//         last_recorded_kernel_name = NULL;\n//       } else if (kernels_recorded[i] > kernels_encountered[i]) {\n//         //printf(\"TAU: Recorded more kernels than were launched, exiting.\\n\");\n//         //abort();\n//         //exit(1);\n//       }\n//     }\n  } else if (err != CUPTI_ERROR_QUEUE_EMPTY) {\n#ifdef TAU_DEBUG_CUPTI\n\t\tprintf(\"TAU: CUPTI Activity queue is empty.\\n\");\n\t\t//CUDA_CHECK_ERROR(err2, \"Cannot dequeue buffer.\\n\");\n#endif\n\t} else if (err != CUPTI_ERROR_INVALID_PARAMETER) {\n#ifdef TAU_DEBUG_CUPTI\n        printf(\"TAU: CUPTI Invalid buffer\");\n\t\t//CUDA_CHECK_ERROR(err2, \"Cannot dequeue buffer, invalid buffer.\\n\");\n#endif\n\t} else {\n\t\tprintf(\"TAU: CUPTI Unknown error cannot read from buffer.\\n\");\n\t}\n\n}\n\nvoid CUPTIAPI Tau_cupti_register_buffer_creation(uint8_t **activityBuffer, size_t *size, size_t *maxNumRecords)\n{\n\tuint8_t* bf = (uint8_t *)malloc(ACTIVITY_BUFFER_SIZE);\n  if (bf == NULL) {\n    printf(\"sufficient memory available to allocate activity buffer of size %d.\", ACTIVITY_BUFFER_SIZE);\n    exit(1);\n  }\n  *activityBuffer = bf;\n  *size = ACTIVITY_BUFFER_SIZE;\n  *maxNumRecords = 0;\n}\n\nbool register_cuda_thread(unsigned int sys_tid, unsigned int parent_tid, int tau_vtid, unsigned int corr_id, unsigned int context_id, const char* func_name) {\n  \n  CudaThread ct;\n  ct.sys_tid = sys_tid;\n  ct.parent_tid = parent_tid;\n  ct.tau_vtid = tau_vtid;\n  ct.correlation_id = corr_id;\n  ct.context_id = context_id;\n  ct.function_name = func_name;\n  map_cudaThread[corr_id] = ct;\n  return true;\n}\n\n/* This callback handles asynchronous activity */\n\nvoid Tau_cupti_record_activity(CUpti_Activity *record)\n{\n  // can't handle out-of-order events\n  // if (TauEnv_get_tracing()) { return; }\n  // currentTimestamp\n  uint64_t currentTimestamp;\n  double d_currentTimestamp;\n  CUptiResult err = CUPTI_SUCCESS;\n  CUresult err2 = CUDA_SUCCESS;\n  err = cuptiGetTimestamp(&currentTimestamp); // nanosec\n  ///////\n  // Within python,\n  //   seconds = (int)(cumsum / 1000) % 60\n  //   minutes = (int)(cumsum / (1000*60)) % 60\n  ///////\n  d_currentTimestamp = (double)currentTimestamp/1e3; // orig\n  // d_currentTimestamp = (double)currentTimestamp/1e6; \n\n\n  CUDA_CHECK_ERROR(err2, \"Cannot get timestamp.\\n\");\n  \n  switch (record->kind) {\n  // case CUPTI_ACTIVITY_KIND_DRIVER:\n  //   {\n  //     CUpti_ActivityAPI *api = (CUpti_ActivityAPI *) record;\n  //     printf(\"DRIVER cbid=%u [ %llu - %llu ] process %u, thread %u, correlation %u\\n\",\n  //            api->cbid,\n  // \t     (unsigned long long) (api->start - timestamp),\n  // \t     (unsigned long long) (api->end - timestamp),\n  // \t     api->processId, api->threadId, api->correlationId);\n  //     break;\n  //   }\n  // case CUPTI_ACTIVITY_KIND_RUNTIME:\n  //   {\n  //     CUpti_ActivityAPI *api = (CUpti_ActivityAPI *) record;\n  //     printf(\"RUNTIME cbid=%u [ %llu - %llu ] process %u, thread %u, correlation %u\\n\",\n  //            api->cbid,\n  // \t     (unsigned long long) (api->start - timestamp),\n  // \t     (unsigned long long) (api->end - timestamp),\n  // \t     api->processId, api->threadId, api->correlationId);\n  //     if (map_cudaThread.find(api->correlationId) != map_cudaThread.end()) {\n  // \tprintf(\"  map_cudaThread[%u]: %i\\n\", \n  // \t       api->correlationId, map_cudaThread[api->correlationId].tau_vtid);\n  //     }\n  //     else {\n  // \tprintf(\"  map_cudaThread[%u] does not exist\\n\", api->correlationId);\n  //     }\n  //     break;\n  //   }\n  // case CUPTI_ACTIVITY_KIND_CONTEXT:\n  //   {\n  //     CUpti_ActivityContext *context = (CUpti_ActivityContext *) record;\n  //     // printf(\"CONTEXT %u, device %u, compute API %s, NULL stream %d\\n\",\n  //     //        context->contextId, context->deviceId,\n  //     //        getComputeApiKindString((CUpti_ActivityComputeApiKind) context->computeApiKind),\n  //     //        (int) context->nullStreamId);\n  //     contextMap[context->contextId] = *context;\n  //     break;\n  //   }\n  \tcase CUPTI_ACTIVITY_KIND_MEMCPY:\n#if CUDA_VERSION >= 5050\n\t  case CUPTI_ACTIVITY_KIND_MEMCPY2:\n#endif\n\t\t{\t\n      uint32_t deviceId;\n      uint32_t streamId;\n      uint32_t contextId;\n      uint64_t start;\n      uint64_t end;\n      uint64_t bytes;\n      uint8_t copyKind;\n\t\t\tint id;\n      int direction = MESSAGE_UNKNOWN;\n\n#if CUDA_VERSION >= 5050\n      if (record->kind == CUPTI_ACTIVITY_KIND_MEMCPY2) {\n        CUpti_ActivityMemcpy2 *memcpy = (CUpti_ActivityMemcpy2 *)record;\n        deviceId = memcpy->deviceId;\n        streamId = memcpy->streamId;\n        contextId = memcpy->contextId;\n        start = memcpy->start;\n        end = memcpy->end;\n        bytes = memcpy->bytes;\n        copyKind = memcpy->copyKind;\n        id = memcpy->correlationId;\n#ifdef TAU_DEBUG_CUPTI\n        cerr << \"recording memcpy (device, stream, context, correlation): \" << memcpy->deviceId << \", \" << memcpy->streamId << \", \" << memcpy->contextId << \", \" << memcpy->correlationId << \", \" << memcpy->start << \"-\" << memcpy->end << \"ns.\\n\" << endl;\n\t\tcerr << \"recording memcpy src: \" << memcpy->srcDeviceId << \"/\" << memcpy->srcContextId << endl;\n\t\tcerr << \"recording memcpy dst: \" << memcpy->dstDeviceId << \"/\" << memcpy->dstContextId << endl;\n#endif\n\t// get Correlationid\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[id].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n        Tau_cupti_register_memcpy_event(\n          TAU_GPU_USE_DEFAULT_NAME,\n          memcpy->srcDeviceId,\n          streamId,\n          memcpy->srcContextId,\n          id,\n          start / 1e3,\n          end / 1e3,\n          bytes,\n          getMemcpyType(copyKind),\n          MESSAGE_RECIPROCAL_SEND, taskId\n        );\n        Tau_cupti_register_memcpy_event(\n          TAU_GPU_USE_DEFAULT_NAME,\n          memcpy->dstDeviceId,\n          streamId,\n          memcpy->dstContextId,\n          id,\n          start / 1e3,\n          end / 1e3,\n          bytes,\n          getMemcpyType(copyKind),\n          MESSAGE_RECIPROCAL_RECV, taskId\n        );\n} else {\n#endif\n        CUpti_ActivityMemcpy *memcpy = (CUpti_ActivityMemcpy *)record;\n        deviceId = memcpy->deviceId;\n        streamId = memcpy->streamId;\n        contextId = memcpy->contextId;\n        start = memcpy->start;\n        end = memcpy->end;\n        bytes = memcpy->bytes;\n        copyKind = memcpy->copyKind;\n        if (cupti_api_runtime())\n        {\n          id = memcpy->runtimeCorrelationId;\n        }\n        else\n        {\n          id = memcpy->correlationId;\n        }\n        if (getMemcpyType(copyKind) == MemcpyHtoD) {\n          direction = MESSAGE_RECV;\n        } else if (getMemcpyType(copyKind) == MemcpyDtoH) {\n          direction = MESSAGE_SEND;\n        }\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tcerr << \"recording memcpy: \" << end - start << \"ns.\\n\" << endl;\n\t\t    cerr << \"recording memcpy on device: \" << deviceId << endl;\n\t\t    cerr << \"recording memcpy kind: \" << getMemcpyType(copyKind) << endl;\n#endif \n\t\t\t//We do not always know on the corresponding host event on\n\t\t\t//the CPU what type of copy we have so we need to register \n\t\t\t//the bytes copied here. Be careful we only want to record \n\t\t\t//the bytes copied once.\n\t\t    int taskId = 0;\n#if defined(PTHREADS)\n\t\t    if (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t\t      int local_vtid = map_cudaThread[id].tau_vtid;\n\t\t      taskId = map_cuptiThread[local_vtid];\n\t\t    }\n#endif\n\t\t\tTau_cupti_register_memcpy_event(\n\t\t\t\tTAU_GPU_USE_DEFAULT_NAME,\n\t\t\t\tdeviceId,\n\t\t\t\tstreamId,\n\t\t\t\tcontextId,\n\t\t\t\tid,\n\t\t\t\tstart / 1e3,\n\t\t\t\tend / 1e3,\n\t\t\t\tbytes,\n\t\t\t\tgetMemcpyType(copyKind),\n\t\t\t\tdirection, taskId\n\t\t\t);\n\t\t\t/*\n\t\t\tCuptiGpuEvent gId = CuptiGpuEvent(TAU_GPU_USE_DEFAULT_NAME, memcpy->streamId, memcpy->contextId, id, NULL, 0);\n\t\t\t//cuptiGpuEvent cuRec = cuptiGpuEvent(TAU_GPU_USE_DEFAULT_NAME, &gId, NULL); \n\t\t\tTau_gpu_register_memcpy_event(\n\t\t\t\t&gId,\n\t\t\t\tmemcpy->start / 1e3, \n\t\t\t\tmemcpy->end / 1e3, \n\t\t\t\tTAU_GPU_UNKNOW_TRANSFER_SIZE, \n\t\t\t\tgetMemcpyType(memcpy->copyKind));\n\t\t\t*/\t\n#if CUDA_VERSION >= 5050\n  }\n#endif\n      \n\t\t\t\tbreak;\n      }\n\n    if(TauEnv_get_cuda_track_unified_memory()) {\n#if CUDA_VERSION >= 6000\n    case CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER:\n    {\t\n      CUpti_ActivityUnifiedMemoryCounterKind counterKind;\n      uint32_t deviceId;\n      uint32_t streamId;\n      uint32_t processId;\n      CUpti_ActivityUnifiedMemoryCounterScope scope;\n      uint64_t start;\n      uint64_t end;\n      uint64_t value;\n      int direction = MESSAGE_UNKNOWN;\n      CUpti_ActivityUnifiedMemoryCounter *umemcpy = (CUpti_ActivityUnifiedMemoryCounter *)record;\n      \n#ifdef TAU_DEBUG_CUPTI\n#if CUDA_VERSION >= 7000\n      printf(\"UNIFIED_MEMORY_COUNTER [ %llu %llu ] kind=%s value=%llu src %u dst %u, streamId=%u\\n\",\n\t     (unsigned long long)(umemcpy->start),\n\t     (unsigned long long)(umemcpy->end),\n\t     getUvmCounterKindString(umemcpy->counterKind),\n\t     (unsigned long long)umemcpy->value,\n\t     umemcpy->srcId,\n\t     umemcpy->dstId,\n\t     umemcpy->streamId);\n#else\n      printf(\"UNIFIED_MEMORY_COUNTER [ %llu ], current stamp: %llu, scope=%d kind=%s value=%llu device %u\\n\",\n\t     (unsigned long long)(umemcpy->timestamp), TauTraceGetTimeStamp(), \n\t     umemcpy->scope,\n\t     getUvmCounterKindString(umemcpy->counterKind),\n\t     (unsigned long long)umemcpy->value,\n\t     umemcpy->deviceId);\n#endif\n#endif\n      counterKind = umemcpy->counterKind;\n#if CUDA_VERSION < 7000\n      streamId = -1;\n      start = umemcpy->timestamp;\n      end = umemcpy->timestamp;\n      deviceId = umemcpy->deviceId;\n#else\n      streamId = umemcpy->streamId;\n      start = umemcpy->start;\n      end=umemcpy->end;\n      deviceId = umemcpy->dstId;\n#endif\n      processId = umemcpy->processId;\n      value = umemcpy->value;\n      \n      if (getUnifmemType(counterKind) == BytesHtoD) {\n\tdirection = MESSAGE_RECV;\n      } else if (getUnifmemType(counterKind) == BytesDtoH) {\n\tdirection = MESSAGE_SEND;\n      }\n      \n      //We do not always know on the corresponding host event on\n      //the CPU what type of copy we have so we need to register \n      //the bytes copied here. Be careful we only want to record \n      //the bytes copied once.\n      int taskId = 1; // need to get correlation id from CUpti_ActivityStream\n      Tau_cupti_register_unifmem_event(\n\t\t\t\t       TAU_GPU_USE_DEFAULT_NAME,\n\t\t\t\t       deviceId,\n\t\t\t\t       streamId,\n\t\t\t\t       processId,\n\t\t\t\t       start,\n\t\t\t\t       end,\n\t\t\t\t       value,\n\t\t\t\t       getUnifmemType(counterKind),\n\t\t\t\t       direction,\n\t\t\t\t       taskId\n\t\t\t\t       );\n      \n      break;\n    }\n#endif\n    }\n\n  \tcase CUPTI_ACTIVITY_KIND_KERNEL:\n#if CUDA_VERSION >= 5000\n  \tcase CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL:\n#endif\n#if CUDA_VERSION >= 5050\n    case CUPTI_ACTIVITY_KIND_CDP_KERNEL:\n#endif\n    {\n      const char *name;\n      uint32_t deviceId;\n      uint32_t streamId;\n      uint32_t contextId;\n      uint32_t correlationId;\n#if CUDA_VERSION < 5050\n      uint32_t runtimeCorrelationId;\n#endif\n      uint64_t start;\n      uint64_t end;\n      int64_t gridId;\n      int64_t parentGridId;\n      uint32_t blockX;\n      uint32_t blockY; \n      uint32_t blockZ;\n      uint32_t dynamicSharedMemory;\n      uint32_t staticSharedMemory;\n      uint32_t localMemoryPerThread;\n      uint32_t registersPerThread;\n\n#if CUDA_VERSION >= 5050\n      if (record->kind == CUPTI_ACTIVITY_KIND_CDP_KERNEL) {\n\tprintf(\" inside cdp_kernel\\n\");\n        CUpti_ActivityCdpKernel *kernel = (CUpti_ActivityCdpKernel *)record;\n        name = kernel->name;\n        deviceId = kernel->deviceId;\n        streamId = kernel->streamId;\n        contextId = kernel->contextId;\n        correlationId = kernel->correlationId;\n        gridId = kernel->gridId;\n        parentGridId = kernel->parentGridId;\n        start = kernel->start;\n        end = kernel->end;\n        blockX = kernel->blockX;\n        blockY = kernel->blockY; \n        blockZ = kernel->blockZ;\n        dynamicSharedMemory = kernel->dynamicSharedMemory;\n        staticSharedMemory = kernel->staticSharedMemory;\n        localMemoryPerThread = kernel->localMemoryPerThread;\n        registersPerThread = kernel->registersPerThread;\n      }\n      else {\n#endif\n        CUpti_ActivityKernel *kernel = (CUpti_ActivityKernel *)record;\n        name = kernel->name;\n        deviceId = kernel->deviceId;\n        streamId = kernel->streamId;\n        contextId = kernel->contextId;\n        correlationId = kernel->correlationId;\n#if CUDA_VERSION >= 7000\n        runtimeCorrelationId = correlationId;\n        gridId = kernel->gridId;\n#elif CUDA_VERSION >= 5050 && CUDA_VERSION <= 6500\n        gridId = kernel->gridId;\n        runtimeCorrelationId = kernel->runtimeCorrelationId;\n#else\n        gridId = 0;\n        runtimeCorrelationId = correlationId;\n#endif\n        start = kernel->start;\n        end = kernel->end;\n        blockX = kernel->blockX;\n        blockY = kernel->blockY; \n        blockZ = kernel->blockZ;\n        dynamicSharedMemory = kernel->dynamicSharedMemory;\n        staticSharedMemory = kernel->staticSharedMemory;\n        localMemoryPerThread = kernel->localMemoryPerThread;\n        registersPerThread = kernel->registersPerThread;\n        //find FunctionInfo object from FunctionInfoMap\n        // kernelMap[kernel->correlationId] = *kernel;\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(kernel->correlationId) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[kernel->correlationId].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n        kernelMap[taskId][kernel->correlationId] = *kernel;\n#if CUDA_VERSION >= 5050\n      }\n#endif\n#ifdef TAU_DEBUG_CUPTI\n      cerr << \"recording kernel (device, stream, context, correlation, grid, name): \" << deviceId << \", \" << streamId << \", \" << contextId << \", \" << correlationId << \", \" << gridId << \", \" << name << \", \"<< start << \"-\" << end << \"ns.\\n\" << endl;\n      /*if (record->kind == CUPTI_ACTIVITY_KIND_CDP_KERNEL) {\n        cerr << \"CDP kernel, parent is: \" << parentGridId << endl;\n      }*/\n\t  // cerr << \"recording kernel (id): \"  << kernel->correlationId << \", \" << kernel->name << \", \"<< kernel->end - kernel->start << \"ns.\\n\" << endl;\n#endif\n      uint32_t id;\n      if (cupti_api_runtime())\n      {\n\tid = runtimeCorrelationId;\n      }\n      else\n      {\n\tid = correlationId;\n      }\n      int taskId = 0;\n#if defined(PTHREADS)\n      if (map_cudaThread.find(id) != map_cudaThread.end()) {\n\tint local_vtid = map_cudaThread[id].tau_vtid;\n\ttaskId = map_cuptiThread[local_vtid];\n      }\n#endif\n      // At this point store source locator and function maps accumulated, then clear maps\n      for (std::map<uint32_t, CUpti_ActivitySourceLocator>::iterator it = sourceLocatorMap.begin();\n\t   it != sourceLocatorMap.end();\n\t   it++) {\n\tuint32_t srclocid = it->first;\n\tCUpti_ActivitySourceLocator source = it->second;\n\tcout << \"[CuptiActivity] testing iter for source locator (id): \" << source.id << \", \" << source.fileName << \", \" << source.lineNumber << \".\\n\" << endl;\n      }\n      eventMap[taskId].erase(eventMap[taskId].begin(), eventMap[taskId].end());\n      const char* name_og = name;\n      name = demangleName(name);\n\n      int number_of_metrics = Tau_CuptiLayer_get_num_events() + 1;\n      double metrics_start[number_of_metrics];\n      double metrics_end[number_of_metrics];\n#if CUDA_VERSION >= 5050\n      if (record->kind != CUPTI_ACTIVITY_KIND_CDP_KERNEL) {\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[id].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n\trecord_gpu_counters(taskId, name, id, &eventMap[taskId]);\n      }\n#else\n      int taskId = 0;\n#if defined(PTHREADS)\n      if (map_cudaThread.find(id) != map_cudaThread.end()) {\n\tint local_vtid = map_cudaThread[id].tau_vtid;\n\ttaskId = map_cuptiThread[local_vtid];\n      }\n#endif\n      record_gpu_counters(taskId, name, id, &eventMap[taskId]);\n#endif\n      if (TauEnv_get_cuda_track_sass()) {\n\tif (!functionMap.empty() && !instructionMap.empty()) {\n\t  // TODO:  Add source and function to maps here?\n\t  printf(\"[CuptiActivity]:  sass detected, taskId %i\\n\", taskId);\n\n\t  // TAU_VERBOSE(\"About to record imix counters\\n\");\n\t  // record_imix_counters(name, taskId, streamId, contextId, id, end);\n\t  // // if csv, dump here\n\t  // if(TauEnv_get_cuda_csv_output()){\n\t  //   dump_sass_to_csv();\n\t  // }\t  \n\t}\n\telse {\n\t  TAU_VERBOSE(\"Instruction execution data not available\\n\");\n\t}\n      }\n\t\t\tif (gpu_occupancy_available(deviceId))\n\t\t\t{\n\t\t\t  int taskId = 0;\n#if defined(PTHREADS)\n\t\t\t  if (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t\t\t    int local_vtid = map_cudaThread[id].tau_vtid;\n\t\t\t    taskId = map_cuptiThread[local_vtid];\n\t\t\t  }\n#endif\n        record_gpu_occupancy(blockX, \n                            blockY,\n                            blockZ,\n                            registersPerThread,\n                            staticSharedMemory,\n                            deviceId,\n                            name, \n                            &eventMap[taskId]);\n        static TauContextUserEvent* bs;\n        static TauContextUserEvent* dm;\n        static TauContextUserEvent* sm;\n        static TauContextUserEvent* lm;\n        static TauContextUserEvent* lr;\n        Tau_get_context_userevent((void **) &bs, \"Block Size\");\n        Tau_get_context_userevent((void **) &dm, \"Shared Dynamic Memory (bytes)\");\n        Tau_get_context_userevent((void **) &sm, \"Shared Static Memory (bytes)\");\n        Tau_get_context_userevent((void **) &lm, \"Local Memory (bytes per thread)\");\n        Tau_get_context_userevent((void **) &lr, \"Local Registers (per thread)\");\n\n        eventMap[taskId][bs] = blockX * blockY * blockZ;\n        eventMap[taskId][dm] = dynamicSharedMemory;\n        eventMap[taskId][sm] = staticSharedMemory;\n        eventMap[taskId][lm] = localMemoryPerThread;\n        eventMap[taskId][lr] = registersPerThread;\n\t\t\t}\n      \n      GpuEventAttributes *map;\n\t\t\tint map_size = eventMap[taskId].size();\n\t\t\tmap = (GpuEventAttributes *) malloc(sizeof(GpuEventAttributes) * map_size);\n      int i = 0;\n      for (eventMap_t::iterator it = eventMap[taskId].begin(); it != eventMap[taskId].end(); it++)\n      {\n        /*if(it->first == NULL) {\n            std::cerr << \"Event was null!\" << std::endl;\n        } else {\n            std::cerr << \"Event was not null: \" << it->first << std::endl;\n        }*/\n        //std::cerr << \"event name: \" << it->first->GetUserEventName() << std::endl;\n        map[i].userEvent = it->first;\n        map[i].data = it->second;\n        i++;\n      }\n\t\t\t\n#if CUDA_VERSION >= 5050\n      if (record->kind == CUPTI_ACTIVITY_KIND_CDP_KERNEL) {\n        if (TauEnv_get_cuda_track_cdp()) {\n\t  int taskId = 0;\n#if defined(PTHREADS)\n\t  if (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t    int local_vtid = map_cudaThread[id].tau_vtid;\n\t    taskId = map_cuptiThread[local_vtid];\n\t  }\n#endif\n\tTau_cupti_register_gpu_event(name, deviceId,\n\t\t\t\t       streamId, contextId, id, parentGridId, \n\t\t\t\t       true, map, map_size,\n\t\t\t\t     start / 1e3, end / 1e3, taskId);\n        }\n      } else {\n#endif\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(id) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[id].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n        Tau_cupti_register_gpu_event(name, deviceId,\n\t\t\t\t     streamId, contextId, id, 0, false, map, map_size,\n\t\t\t\t     start / 1e3, end / 1e3, taskId);\n#if CUDA_VERSION >= 5050\n      }\n#endif\n        Tau_cupti_register_device_calling_site(gridId, name);\n\t\t\t/*\n\t\t\tCuptiGpuEvent gId = CuptiGpuEvent(name, kernel->streamId, kernel->contextId, id, map, map_size);\n\t\t\t//cuptiGpuEvent cuRec = cuptiGpuEvent(name, &gId, &map);\n\t\t\tTau_gpu_register_gpu_event(\n\t\t\t\t&gId, \n\t\t\t\tkernel->start / 1e3,\n\t\t\t\tkernel->end / 1e3);\n\t\t\t*/\t\n\n\t\t\tbreak;\n    }\n\n  \tcase CUPTI_ACTIVITY_KIND_DEVICE:\n\t\t{\n\t\t\tCUpti_ActivityDevice *device = (CUpti_ActivityDevice *)record;\n\n\t\t\tint nMeta = 17;\n\t\t\t\n\t\t\tGpuMetadata *metadata = (GpuMetadata *) malloc(sizeof(GpuMetadata) * nMeta);\n\t\t\tint id = 0;\n\t\t\t//first the name.\n\t\t\tmetadata[id].name = (char*)(\"GPU Name\");\n\t\t\tmetadata[id].value = device->name;\n\t\t\tid++;\n\n\t\t\t//the rest.\n\t\t\tRECORD_DEVICE_METADATA(computeCapabilityMajor, device);\n\t\t\tRECORD_DEVICE_METADATA(computeCapabilityMinor, device);\n\t\t\tRECORD_DEVICE_METADATA(constantMemorySize, device);\n\t\t\tRECORD_DEVICE_METADATA(coreClockRate, device);\n\t\t\tRECORD_DEVICE_METADATA(globalMemoryBandwidth, device);\n\t\t\tRECORD_DEVICE_METADATA(globalMemorySize, device);\n\t\t\tRECORD_DEVICE_METADATA(l2CacheSize, device);\n\t\t\tRECORD_DEVICE_METADATA(maxIPC, device);\n\t\t\tRECORD_DEVICE_METADATA(maxRegistersPerBlock, device);\n\t\t\tRECORD_DEVICE_METADATA(maxSharedMemoryPerBlock, device);\n\t\t\tRECORD_DEVICE_METADATA(maxThreadsPerBlock, device);\n\t\t\tRECORD_DEVICE_METADATA(maxWarpsPerMultiprocessor, device);\n\t\t\tRECORD_DEVICE_METADATA(maxBlocksPerMultiprocessor, device);\n\t\t\tRECORD_DEVICE_METADATA(numMemcpyEngines, device);\n\t\t\tRECORD_DEVICE_METADATA(numMultiprocessors, device);\n\t\t\tRECORD_DEVICE_METADATA(numThreadsPerWarp, device);\n\t\n\t\t\t//cerr << \"recording metadata (device): \" << device->id << endl;\n\t\t\t__deviceMap()[device->id] = *device;\n#if CUDA_VERSION < 5000\n      if (__deviceMap().size() > 1 && Tau_CuptiLayer_get_num_events() > 0)\n      {\n        TAU_VERBOSE(\"TAU Warning: CUDA 5.0 or greater is needed to record counters on more that one GPU device at the same time.\\n\");\n      }\n#endif\n\t\t\tTau_cupti_register_metadata(device->id, metadata, nMeta);\n\t\t\tbreak;\n\t\t}\n#if CUPTI_API_VERSION >= 3\n    case CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR:\n    {\n      CUpti_ActivitySourceLocator *source = (CUpti_ActivitySourceLocator *)record;\n      sourceLocatorMap[source->id] = *source;\n      // double tstamp;\n      // uint32_t sourceId;\n      // const char *fileName;\n      // uint32_t lineNumber;\n#ifdef TAU_DEBUG_CUPTI\n      cerr << \"source locator (id): \" << source->id << \", \" << source->fileName << \", \" << source->lineNumber << \".\\n\" << endl;\n#endif\n      srcLocMap[source->id] = *source;\n\n#if CUDA_VERSION >= 5500\n      if(TauEnv_get_cuda_track_sass()) {\n\n#ifdef TAU_DEBUG_CUPTI_SASS\n\t  printf(\"SOURCE_LOCATOR SrcLctrId: %d, File: %s, Line: %d, Kind: %u\\n\", \n\t  \t source->id, source->fileName, source->lineNumber, source->kind);\n#endif\n    // if(TauEnv_get_cuda_csv_output()){\n    //   // TAU stores time in microsec (1.0e-6), nanosec->microsec 1->0.001 ns/1000\n    //   // Source Locator same for all GPUs\n    //   int taskId = CudaThreadMap()[cbInfo->correlationId].tau_vtid;\n    //   // create file pointer here\n    //   FILE* fp_sour = createFileSourceSass(taskId - 1); // want 0,...,N-1, not 1,...,N!\n      \n    //   fprintf(fp_sour, \"%f,%d,%s,%d,%u\\n\",\n    // \t      d_currentTimestamp,source->id, source->fileName, source->lineNumber, source->kind);\n\n    // }\n      // char name[] = \"SOURCE_LOCATOR\";\n      // Tau_cupti_register_source_event(name, 0, 0, 0, sourceId, d_currentTimestamp, fileName, lineNumber);\n\n      }\n#endif\n\n    }\n\n#if CUDA_VERSION >= 5500\n\tcase CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION: {\n    if(TauEnv_get_cuda_track_sass()) {\n\t  CUpti_ActivityInstructionExecution *instrRecord = (CUpti_ActivityInstructionExecution *)record;\n\n\t  // uint32_t correlationId;\n\t  // uint32_t executed;\n\t  // uint32_t functionId;\n\t  // uint32_t pcOffset;\n\t  // uint32_t sourceLocatorId;\n\t  // uint32_t threadsExecuted;\n\t  // CUpti_ActivityContext cResult = contextMap.find(current_context_id)->second;\n\t  \n#ifdef TAU_DEBUG_CUPTI_SASS\n\n\t  printf(\"INSTRUCTION_EXECUTION corr: %u, executed: %u, flags: %u, functionId: %u, kind: %u, notPredOffThreadsExecuted: %u, pcOffset: %u, sourceLocatorId: %u, threadsExecuted: %u\\n\",\n\t  \t instrRecord->correlationId, instrRecord->executed, \n\t  \t instrRecord->flags, instrRecord->functionId, \n\t  \t instrRecord->kind, instrRecord->notPredOffThreadsExecuted,\n\t  \t instrRecord->pcOffset, instrRecord->sourceLocatorId, \n\t  \t instrRecord->threadsExecuted);\n#endif\n  // if(TauEnv_get_cuda_csv_output()){\n  //   int taskId = CudaThreadMap()[sourceRecord->correlationId].tau_vtid;\n  //   // create file pointer here\n  //   FILE* fp_inst = createFileInstrSass(taskId - 1); // want 0,...,N-1, not 1,...,N!\n  //   fprintf(fp_inst, \"%f,%u,%u,%u,%u,%u,%u,%u,%u,%u\\n\",\n  // \t    d_currentTimestamp,\n  // \t    sourceRecord->correlationId, sourceRecord->executed, \n  // \t    sourceRecord->flags, sourceRecord->functionId, \n  // \t    sourceRecord->kind, sourceRecord->notPredOffThreadsExecuted,\n  // \t    sourceRecord->pcOffset, sourceRecord->sourceLocatorId, \n  // \t    sourceRecord->threadsExecuted);\n  // }\n  // InstrSampling is;\n  // is.correlationId = sourceRecord->correlationId;\n  // is.executed = sourceRecord->executed;\n  // is.functionId = sourceRecord->functionId;\n  // is.pcOffset = sourceRecord->pcOffset;\n  // is.sourceLocatorId = sourceRecord->sourceLocatorId;\n  // is.threadsExecuted = sourceRecord->threadsExecuted;\n  // is.timestamp_delta = d_currentTimestamp-recentTimestamp;\n  // is.timestamp_current = d_currentTimestamp;\n  // instructionMap[is.functionId].push_back(is);\n\t  instructionMap[instrRecord->functionId].push_back(*instrRecord);\n\t  // TODO:  store sourceid -> correlationId pair\n\n\t  // // printf(\"d_currentTImestamp: %f, recentTimestamp: %f, tstamp_delta: %f\\n\", \n\t  // // \t d_currentTimestamp, recentTimestamp, tstamp_delta);\n\t  // Tau_cupti_register_instruction_event(name,cResult.deviceId,\n\t  // \t\t\t\t       (int)cResult.nullStreamId,\n\t  // \t\t\t\t       cResult.contextId,correlationId,recentTimestamp,\n\t  // \t\t\t\t       d_currentTimestamp,tstamp_delta,\n\t  // \t\t\t\t       sourceLocatorId,functionId,\n\t  // \t\t\t\t       pcOffset,executed,\n\t  // \t\t\t\t       threadsExecuted);\n    }\n    break;\n\t}\n#endif\n#if CUDA_VERSION >= 5500\n\tcase CUPTI_ACTIVITY_KIND_FUNCTION: {\n\t  if(TauEnv_get_cuda_track_sass()) {\n\t    CUpti_ActivityFunction *fResult = (CUpti_ActivityFunction *)record;\n\t    \n\t    // uint32_t contextId;\n\t    // uint32_t functionIndex;\n\t    // uint32_t id;\n\t    // uint32_t moduleId;\n\t    // const char *kname;\n\t    \n#ifdef TAU_DEBUG_CUPTI_SASS\n\t    printf(\"FUCTION contextId: %u, functionIndex: %u, id %u, kind: %u, moduleId %u, name %s, device: %i\\n\",\n\t\t   fResult->contextId,\n\t\t   fResult->functionIndex,\n\t\t   fResult->id,\n\t\t   fResult->kind,\n\t\t   fResult->moduleId,\n\t\t   fResult->name);\n#endif\n\t    // char str_demangled[100];\n\t    // strcpy (str_demangled, demangleName(fResult->name));\n// \t    CUpti_ActivityContext cResult = contextMap.find(fResult->contextId)->second;\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \t    printf(\"context->contextId: %u, device: %u\\n\", cResult.contextId, cResult.deviceId);\n// #endif\n// \t    // current_device_id = cResult.deviceId;\n// \t    current_context_id = cResult.contextId;\n\t    \n\t    // FuncSampling fs;\n\t    // fs.fid = fResult->id;\n\t    // fs.contextId = fResult->contextId;\n\t    // fs.functionIndex = fResult->functionIndex;\n\t    // fs.moduleId = fResult->moduleId;\n\t    // fs.name = fResult->name;\n\t    // fs.demangled = str_demangled;\n\t    // fs.timestamp = d_currentTimestamp;\n\t    // fs.deviceId = cResult.deviceId;\n\t    \n\t    // functionMap[fs.fid] = fs;\n\t    functionMap[fResult->id] = *fResult;\n// \t    if(TauEnv_get_cuda_csv_output()){\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \t      printf(\"[CuptiActivity]:  About to write out to csv:\\n  %f, %u, %u, %u, %u, %u, %s, %s\\n\",\n// \t\t     d_currentTimestamp, fResult->contextId,\n// \t\t     fResult->functionIndex,\n// \t\t     fResult->id,\n// \t\t     fResult->kind,\n// \t\t     fResult->moduleId,\n// \t\t     fResult->name, demangleName(fResult->name));\n// #endif\n// \t      int taskId = CudaThreadMap()[cbInfo->correlationId].tau_vtid;\n// \t      FILE* fp_funct = createFileFuncSass(taskId-1);\n// \t      fprintf(fp_funct, \"%f;%u;%u;%u;%u;%u;%s;%s\\n\",\n// \t\t      d_currentTimestamp,\n// \t\t      fResult->contextId,\n// \t\t      fResult->functionIndex,\n// \t\t      fResult->id,\n// \t\t      fResult->kind,\n// \t\t      fResult->moduleId,\n// \t\t      fResult->name, demangleName(fResult->name));\n// \t    }\n\t  // char name[] = \"FUNCTION_ACTIVITY\";\n\t  // char str_demangled[100];\n\t  // strcpy (str_demangled, demangleName(fResult->name));\n\t  // contextId = fResult->contextId;\n\t  // functionIndex = fResult->functionIndex;\n\t  // id = fResult->id;\n\t  // moduleId = fResult->moduleId;\n\t  // kname = fResult->name;\n\n\t  // Tau_cupti_register_func_event(name, cResult.deviceId,\n\t  // \t\t\t\t(int)cResult.nullStreamId, contextId, functionIndex,\n\t  // \t\t\t\td_currentTimestamp, id, moduleId,\n\t  // \t\t\t\tkname, str_demangled);\n\t  }\n                                                                                                               \n\t  break;\n\t}\n#endif\n\n    case CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS:\n    {\n\t\t\tCUpti_ActivityGlobalAccess *global_access = (CUpti_ActivityGlobalAccess *)record;\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tcerr << \"global access (cor. id) (source id): \" << global_access->correlationId << \", \" << global_access->sourceLocatorId << \", \" << global_access->threadsExecuted << \".\\n\" << endl;\n#endif\n      // CUpti_ActivityKernel *kernel = &kernelMap[global_access->correlationId];\n      int taskId = 0;\n#if defined(PTHREADS)\n      if (map_cudaThread.find(global_access->correlationId) != map_cudaThread.end()) {\n\tint local_vtid = map_cudaThread[global_access->correlationId].tau_vtid;\n\ttaskId = map_cuptiThread[local_vtid];\n      }\n#endif\n      CUpti_ActivityKernel *kernel = &kernelMap[taskId][global_access->correlationId];\n      CUpti_ActivitySourceLocator *source = &sourceLocatorMap[global_access->sourceLocatorId];\n\n      if (kernel->kind != CUPTI_ACTIVITY_KIND_INVALID)\n      {\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(global_access->correlationId) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[global_access->correlationId].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n        eventMap[taskId].erase(eventMap[taskId].begin(), eventMap[taskId].end());\n\n        std::string name;\n        form_context_event_name(kernel, source, \"Accesses to Global Memory\", &name);\n        TauContextUserEvent* ga;\n        Tau_cupti_find_context_event(&ga, name.c_str(), false);\n        eventMap[taskId][ga] = global_access->executed;\n        int map_size = eventMap[taskId].size();\n        GpuEventAttributes *map = (GpuEventAttributes *) malloc(sizeof(GpuEventAttributes) * map_size);\n        int i = 0;\n        for (eventMap_t::iterator it = eventMap[taskId].begin(); it != eventMap[taskId].end(); it++)\n        {\n          map[i].userEvent = it->first;\n          map[i].data = it->second;\n          i++;\n        }\n        uint32_t id;\n        if (cupti_api_runtime())\n        {\n\t  #if CUDA_VERSION >= 6000 && CUDA_VERSION <= 6500\n          id = kernel->runtimeCorrelationId;\n\t  #else\n\t  id = kernel->correlationId;\n\t  #endif\n        }\n        else\n        {\n          id = kernel->correlationId;\n        }\n        Tau_cupti_register_gpu_atomic_event(demangleName(kernel->name), kernel->deviceId,\n\t\t\t\t\t    kernel->streamId, kernel->contextId, id, map, map_size, taskId);\n      }\n    }\n    case CUPTI_ACTIVITY_KIND_BRANCH:\n    {\n\t\t\tCUpti_ActivityBranch *branch = (CUpti_ActivityBranch *)record;\n#ifdef TAU_DEBUG_CUPTI\n\t\t\tcerr << \"branch (cor. id) (source id): \" << branch->correlationId << \", \" << branch->sourceLocatorId << \", \" << branch->threadsExecuted << \".\\n\" << endl;\n#endif\n     \n      // CUpti_ActivityKernel *kernel = &kernelMap[branch->correlationId];\n      int taskId = 0;\n#if defined(PTHREADS)\n      if (map_cudaThread.find(branch->correlationId) != map_cudaThread.end()) {\n\tint local_vtid = map_cudaThread[branch->correlationId].tau_vtid;\n\ttaskId = map_cuptiThread[local_vtid];\n      }\n#endif\n      CUpti_ActivityKernel *kernel = &kernelMap[taskId][branch->correlationId];\n      CUpti_ActivitySourceLocator *source = &sourceLocatorMap[branch->sourceLocatorId];\n\n      if (kernel->kind != CUPTI_ACTIVITY_KIND_INVALID)\n      {\n\tint taskId = 0;\n#if defined(PTHREADS)\n\tif (map_cudaThread.find(branch->correlationId) != map_cudaThread.end()) {\n\t  int local_vtid = map_cudaThread[branch->correlationId].tau_vtid;\n\t  taskId = map_cuptiThread[local_vtid];\n\t}\n#endif\n        eventMap[taskId].erase(eventMap[taskId].begin(), eventMap[taskId].end());\n        \n        std::string name;\n        form_context_event_name(kernel, source, \"Branches Executed\", &name);\n        TauContextUserEvent* be;\n        Tau_cupti_find_context_event(&be, name.c_str(), false);\n        eventMap[taskId][be] = branch->executed;\n        \n        form_context_event_name(kernel, source, \"Branches Diverged\", &name);\n        TauContextUserEvent* de;\n        Tau_cupti_find_context_event(&de, name.c_str(), false);\n        eventMap[taskId][de] = branch->diverged;\n\n        GpuEventAttributes *map;\n        int map_size = eventMap[taskId].size();\n        map = (GpuEventAttributes *) malloc(sizeof(GpuEventAttributes) * map_size);\n        int i = 0;\n        for (eventMap_t::iterator it = eventMap[taskId].begin(); it != eventMap[taskId].end(); it++)\n        {\n          map[i].userEvent = it->first;\n          map[i].data = it->second;\n          i++;\n        }\n        uint32_t id;\n        if (cupti_api_runtime())\n        {\n          id = kernel->runtimeCorrelationId;\n        }\n        else\n        {\n          id = kernel->correlationId;\n        }\n        Tau_cupti_register_gpu_atomic_event(demangleName(kernel->name), kernel->deviceId,\n\t\t\t\t\t    kernel->streamId, kernel->contextId, id, map, map_size, taskId);\n      }\n    }\n#endif //CUPTI_API_VERSION >= 3\n\t}\n  recentTimestamp = d_currentTimestamp;\n\n}\n\n//Helper function givens ceiling with given significance.\nint ceil(float value, int significance)\n{\n\treturn ceil(value/significance)*significance;\n}\n\nint gpu_occupancy_available(int deviceId)\n{ \n\t//device callback not called.\n\tif (__deviceMap().empty())\n\t{\n\t\treturn 0;\n\t}\n\n\tCUpti_ActivityDevice device = __deviceMap()[deviceId];\n\n\tif ((device.computeCapabilityMajor > 7) ||\n\t\tdevice.computeCapabilityMajor == 7 &&\n\t\tdevice.computeCapabilityMinor > 1)\n\t{\n\t\tTAU_VERBOSE(\"TAU Warning: GPU occupancy calculator is not implemented for devices of compute capability > 7.1.\");\n\t\treturn 0;\n\t}\n\t//gpu occupancy available.\n\treturn 1;\t\n}\nint gpu_source_locations_available()\n{\n  //always available. \n  return 1;\n}\n\n// void dump_sass_to_csv(int task_id) {\n//   // instr\n  \n// //   // create file pointer here\n// //   fopen(fp_instr = createFileInstrSass(task_id - 1); // want 0,...,N-1, not 1,...,N!\n\t\n// //   char str_int[5];\n// //   sprintf (str_int, \"%d\", (task_id + 1));\n// //   if ( fp_instr[task_id] == NULL ) {\n// // #ifdef TAU_DEBUG_CUPTI_SASS\n// //     printf(\"About to create file pointer for instr csv: %i\\n\", task_id);\n// // #endif\n// //     char str_instr[500];\n// //     strcpy (str_instr, TauEnv_get_profiledir());\n// //     strcat (str_instr,\"/\");\n// //     strcat (str_instr,\"sass_instr_\");\n// //     strcat (str_instr, str_int);\n// //     strcat (str_instr, \".csv\");\n      \n// //     fp_instr[task_id] = fopen(str_instr, \"w\");\n// //     fprintf(fp_instr[task_id], \"timestamp,correlationId,executed,flags,functionId,kind,\\\n// // notPredOffThreadsExecuted,pcOffset,sourceLocatorId,threadsExecuted\\n\");\n// //     if (fp_instr[task_id] == NULL) {\n// // #ifdef TAU_DEBUG_CUPTI_SASS\n// //       printf(\"fp_instr[%i] failed\\n\", task_id);\n// // #endif\n// //     }\n// //     else {\n// // #ifdef TAU_DEBUG_CUPTI_SASS\n// //       printf(\"fp_instr[%i] created successfully\\n\", task_id);\n// // #endif\n// //     }\n// //   }\n// //   else {\n// // #ifdef TAU_DEBUG_CUPTI_SASS\n// //     printf(\"fp_instr[%i] already exists!\\n\", task_id);\n// // #endif\n// //   }\n\n//   FILE* fp_inst = createFileInstrSass(task_id);\n//   for (std::map<uint32_t, InstrSampling>::iterator iter = instructionMap.begin(); \n//        iter != instructionMap.end(); \n//        iter++) {\n//     InstrSampling is = iter->second;\n//     // iterate map, clear\n//     fprintf(fp_inst, \"%f,%u,%u,%u,%u,%u,%u,%u,%u,%u\\n\",\n// \t    is.timestamp_current,\n// \t    is.correlationId, is.executed, \n// \t    sourceRecord->flags, is.functionId, \n// \t    sourceRecord->kind, sourceRecord->notPredOffThreadsExecuted,\n// \t    is.pcOffset, is.sourceLocatorId, \n// \t    is.threadsExecuted);\n//   }\n//   fclose(fp_inst);\n//   // source\n  \n//   // TAU stores time in microsec (1.0e-6), nanosec->microsec 1->0.001 ns/1000\n//   // create file pointer here\n//   FILE* fp_sour = createFileSourceSass(task_id - 1); // want 0,...,N-1, not 1,...,N!\n  \n//   fprintf(fp_sour, \"%f,%d,%s,%d,%u\\n\",\n// \t  d_currentTimestamp,source->id, source->fileName, source->lineNumber, source->kind);\n  \n  \n//   // func\n//   FILE* fp_funct = createFileFuncSass(task_id - 1);\n//   for (std::map<uint32_t, FuncSampling>::iterator iter = functionMap.begin(); iter != functionMap.end(); iter++) {\n//     fprintf(fp_funct, \"%f;%u;%u;%u;%u;%u;%s;%s\\n\",\n// \t    d_currentTimestamp,\n// \t    fResult->contextId,\n// \t    fResult->functionIndex,\n// \t    fResult->id,\n// \t    fResult->kind,\n// \t    fResult->moduleId,\n// \t    fResult->name, demangleName(fResult->name));\n//   }  \n//   // Each time imix counters recorded, erase instructionMap.\n//   std::map<uint32_t, std::list<InstrSampling> >::iterator it_temp = instructionMap.find(fid);\n//   instructionMap.erase(it_temp);\n  \n// }\n\nvoid transport_imix_counters(uint32_t vec, Instrmix imixT, const char* name, uint32_t deviceId, uint32_t streamId, uint32_t contextId, uint32_t id, uint64_t end, TauContextUserEvent * tc)\n {\n   int taskId = 0;\n#if defined(PTHREADS)\n   if (map_cudaThread.find(id) != map_cudaThread.end()) {\n     int local_vtid = map_cudaThread[id].tau_vtid;\n     taskId = map_cuptiThread[local_vtid];\n   }\n#endif\n   eventMap[taskId][tc] = vec;\n   \n   GpuEventAttributes *map;\n   int map_size = eventMap[taskId].size();\n   map = (GpuEventAttributes *) malloc(sizeof(GpuEventAttributes) * map_size);\n   int i = 0;\n   \n   for (eventMap_t::iterator it = eventMap[taskId].begin(); it != eventMap[taskId].end(); it++) {\n     map[i].userEvent = it->first;\n     map[i].data = it->second;\n     i++;\n   }\n   // transport\n   Tau_cupti_register_gpu_event(name, deviceId,\n\t\t\t\tstreamId, contextId, id, 0, false, map, map_size,\n\t\t\t\tend / 1e3, end / 1e3, taskId);\n }\n\nvoid record_imix_counters(const char* name, uint32_t deviceId, uint32_t streamId, uint32_t contextId, uint32_t id, uint64_t end) {\n   // check if data available\n  bool update = false;\n  int taskId = 0;\n#if (PTHREADS)\n  if (map_cudaThread.find(id) != map_cudaThread.end()) {\n    int local_vtid = map_cudaThread[id].tau_vtid;\n    taskId = map_cuptiThread[local_vtid];\n  }\n#endif\n  for (std::map<uint32_t, CUpti_ActivityFunction>::iterator iter = functionMap.begin(); \n       iter != functionMap.end(); \n       iter++) {\n    CUpti_ActivityFunction fResult = iter->second;\n    uint32_t fid = fResult.id;\n    const char* name2 = demangleName(fResult.name);\n\n    if (strcmp(name, name2) == 0) {\n      // check if fid exists\n      if (instructionMap.find(fid) == instructionMap.end()) {\n\tTAU_VERBOSE(\"[CuptiActivity] warning:  Instruction mix counters not recorded\\n\");\n      }\n      else {\n\tstd::list<CUpti_ActivityInstructionExecution> instrSamp_list = instructionMap.find(fid)->second;\n\n\tImixStats is_runtime = write_runtime_imix(fid, map_disassem, name);\n#ifdef TAU_DEBUG_CUPTI\n\tcout << \"[CuptiActivity]:  Name: \" << name << \n\t  \", FLOPS_raw: \" << is_runtime.flops_raw << \", MEMOPS_raw: \" << is_runtime.memops_raw <<\n\t  \", CTRLOPS_raw: \" << is_runtime.ctrlops_raw << \", TOTOPS_raw: \" << is_runtime.totops_raw << \".\\n\";\n      #endif\n\tupdate = true;\n\tstatic TauContextUserEvent* fp_ops;\n\tstatic TauContextUserEvent* mem_ops;\n\tstatic TauContextUserEvent* ctrl_ops;\n\t\n\tTau_get_context_userevent((void **) &fp_ops, \"Floating Point Operations\");\n\tTau_get_context_userevent((void **) &mem_ops, \"Memory Operations\");\n\tTau_get_context_userevent((void **) &ctrl_ops, \"Control Operations\");\n\t\n\tuint32_t  v_flops = is_runtime.flops_raw;\n\tuint32_t v_memops = is_runtime.memops_raw;\n\tuint32_t v_ctrlops = is_runtime.totops_raw;\n\t\n\t\n\ttransport_imix_counters(v_flops, FlPtOps, name, deviceId, streamId, contextId, id, end, fp_ops);\n\ttransport_imix_counters(v_memops, MemOps, name, deviceId, streamId, contextId, id, end, mem_ops);\n\ttransport_imix_counters(v_ctrlops, CtrlOps, name, deviceId, streamId, contextId, id, end, ctrl_ops);\n\t\n\t// Each time imix counters recorded, erase instructionMap.\n\tstd::map<uint32_t, std::list<CUpti_ActivityInstructionExecution> >::iterator it_temp = instructionMap.find(fid);\n\tinstructionMap.erase(it_temp);\n\teventMap[taskId].erase(eventMap[taskId].begin(), eventMap[taskId].end());\n      }\n      \n    }\n  }\n  if(!update) {\n    TAU_VERBOSE(\"TAU Warning:  Did not record instruction operations.\\n\");\n  }\n\n}\n\nImixStats write_runtime_imix(uint32_t functionId, std::map<std::pair<int, int>, CudaOps> map_disassem, std::string kernel)\n{\n\n#ifdef TAU_DEBUG_SASS\n  cout << \"[CudaSass]: write_runtime_imix begin\\n\";\n#endif\n\n  // look up from map_imix_static\n  ImixStats imix_stats;\n  string current_kernel = \"\";\n  int flops_raw = 0;\n  int ctrlops_raw = 0;\n  int memops_raw = 0;\n  int totops_raw = 0;\n  double flops_pct = 0;\n  double ctrlops_pct = 0;\n  double memops_pct = 0;\n  std::list<CUpti_ActivityInstructionExecution> instrSamp_list = instructionMap.find(functionId)->second;\n  // check if entries exist\n  if (!instrSamp_list.empty()) {\n    // cout << \"[CuptiActivity]:  instrSamp_list not empty\\n\";\n    for (std::list<CUpti_ActivityInstructionExecution>::iterator iter=instrSamp_list.begin();\n\t iter != instrSamp_list.end(); \n\t iter++) {\n      CUpti_ActivityInstructionExecution is = *iter;\n      \n      // TODO:  Get line info here...\n      int sid = is.sourceLocatorId;\n      // cout << \"[CuptiActivity]:  is.sourceLocatorId: \" << is.sourceLocatorId << endl;\n      int lineno = -1;\n      if ( srcLocMap.find(sid) != srcLocMap.end() ) {\n\tlineno = srcLocMap.find(sid)->second.lineNumber;\n\t// cout << \"[CuptiActivity]:  lineno: \" << lineno << endl;\n\tstd::pair<int, int> p1 = std::make_pair(lineno, (unsigned int) is.pcOffset);\n\n\tfor (std::map<std::pair<int, int>,CudaOps>::iterator iter= map_disassem.begin();\n\t     iter != map_disassem.end(); iter++) { \n\t  CudaOps cuops = iter->second;\n\t  // cout << \"cuops pair(\" << cuops.lineno << \", \" << cuops.pcoffset << \")\\n\";\n\t  if (map_disassem.find(p1) != map_disassem.end()) {\n\t    CudaOps cuops = map_disassem.find(p1)->second;\n\t    // cout << \"[CuptiActivity]:  cuops.instruction: \" << cuops.instruction << endl;\n\t    // map to disassem\n\t    int instr_type = get_instruction_mix_category(cuops.instruction);\n\t    switch(instr_type) {\n\t      // Might be non-existing ops, don't count those!\n\t      case FloatingPoint: case Integer:\n\t      case SIMD: case Conversion: {\n\t\tflops_raw++;\n\t\ttotops_raw++;\n\t\tbreak;\n\t      }\n\t      case LoadStore: case Texture:\n\t      case Surface: {\n\t\tmemops_raw++;\n\t\ttotops_raw++;\n\t\tbreak;\n\t      }\n\t      case Control: case Move:\n\t      case Predicate: {\n\t\tctrlops_raw++;\n\t\ttotops_raw++;\n\t\tbreak;\n\t      }\n\t      case Misc: {\n\t\ttotops_raw++;\n\t\tbreak;\n\t      }\n\t    }\n\t  }\n\t  else {\n#if TAU_DEBUG_DISASM\n\t    cout << \"[CuptiActivity]:  map_disassem does not exist for pair(\" \n\t    \t << lineno << \",\" << is->pcOffset << \")\\n\";\n#endif\n\t  }\n\t}\n      }\n      else {\n#if TAU_DEBUG_DISASM\n\tcout << \"[CuptiActivity]:  srcLocMap does not exist for sid: \" << sid << endl;\n#endif\n      }\n    }\n  }\n  else {\n    cout << \"[CuptiActivity]: instrSamp_list empty!\\n\";\n  }\n  \n  string kernel_iter = kernel;\n\n  flops_pct = ((float)flops_raw/totops_raw) * 100;\n  memops_pct = ((float)memops_raw/totops_raw) * 100;\n  ctrlops_pct = ((float)ctrlops_raw/totops_raw) * 100;\n  // push onto map\n  imix_stats.flops_raw = flops_raw;\n  imix_stats.ctrlops_raw = ctrlops_raw;\n  imix_stats.memops_raw = memops_raw;\n  imix_stats.totops_raw = totops_raw;\n  imix_stats.flops_pct = flops_pct;\n  imix_stats.ctrlops_pct = ctrlops_pct;\n  imix_stats.memops_pct = memops_pct;\n  imix_stats.kernel = kernel_iter;\n\n#ifdef TAU_DEBUG_DISASM\n  cout << \"[CudaDisassembly]:  current_kernel: \" << kernel_iter << endl;\n  cout << \"  FLOPS: \" << flops_raw << \", MEMOPS: \" << memops_raw \n       << \", CTRLOPS: \" << ctrlops_raw << \", TOTOPS: \" << totops_raw << \"\\n\";\n  cout << setprecision(2) << \"  FLOPS_pct: \" << flops_pct << \"%, MEMOPS_pct: \" \n       << memops_pct << \"%, CTRLOPS_pct: \" << ctrlops_pct << \"%\\n\";\n#endif\n\n  return imix_stats;\n}\n\n\n//  void record_imix_counters(const char* name, uint32_t deviceId, uint32_t streamId, uint32_t contextId, uint32_t id, uint64_t end) {\n//    // check if data available\n//   bool update = false;\n\n//   for (std::map<uint32_t, FuncSampling>::iterator iter = functionMap.begin(); iter != functionMap.end(); iter++) {\n//     uint32_t fid = iter->second.fid;\n//     const char* name2 = demangleName(iter->second.name);\n\n//     if (strcmp(name, name2) == 0) {\n//       // check if fid exists\n//       if (instructionMap.find(fid) == instructionMap.end()) {\n// \tTAU_VERBOSE(\"[CuptiActivity] warning:  Instruction mix counters not recorded\\n\");\n//       }\n//       else {\n// \tstd::list<InstrSampling> instrSamp_list = instructionMap.find(fid)->second;\n\n// \tImixStats is_runtime = write_runtime_imix(fid, instrSamp_list, map_disassem, srcLocMap, name);\n// #ifdef TAU_DEBUG_CUPTI\n// \tcout << \"[CuptiActivity]:  Name: \" << name << \n// \t  \", FLOPS_raw: \" << is_runtime.flops_raw << \", MEMOPS_raw: \" << is_runtime.memops_raw <<\n// \t  \", CTRLOPS_raw: \" << is_runtime.ctrlops_raw << \", TOTOPS_raw: \" << is_runtime.totops_raw << \".\\n\";\n//       #endif\n// \tupdate = true;\n// \tstatic TauContextUserEvent* fp_ops;\n// \tstatic TauContextUserEvent* mem_ops;\n// \tstatic TauContextUserEvent* ctrl_ops;\n\t\n// \tTau_get_context_userevent((void **) &fp_ops, \"Floating Point Operations\");\n// \tTau_get_context_userevent((void **) &mem_ops, \"Memory Operations\");\n// \tTau_get_context_userevent((void **) &ctrl_ops, \"Control Operations\");\n\t\n// \tuint32_t  v_flops = is_runtime.flops_raw;\n// \tuint32_t v_memops = is_runtime.memops_raw;\n// \tuint32_t v_ctrlops = is_runtime.totops_raw;\n\t\n\t\n// \ttransport_imix_counters(v_flops, FlPtOps, name, deviceId, streamId, contextId, id, end, fp_ops);\n// \ttransport_imix_counters(v_memops, MemOps, name, deviceId, streamId, contextId, id, end, mem_ops);\n// \ttransport_imix_counters(v_ctrlops, CtrlOps, name, deviceId, streamId, contextId, id, end, ctrl_ops);\n\t\n// \t// Each time imix counters recorded, erase instructionMap.\n// \tstd::map<uint32_t, std::list<InstrSampling> >::iterator it_temp = instructionMap.find(fid);\n// \tinstructionMap.erase(it_temp);\n// \teventMap.erase(eventMap.begin(), eventMap.end());\n//       }\n      \n//     }\n//   }\n//   if(!update) {\n//     TAU_VERBOSE(\"TAU Warning:  Did not record instruction operations.\\n\");\n//   }\n\n// }\n\n  \nvoid record_gpu_launch(int correlationId, const char *name)\n{\n#ifdef TAU_DEBUG_CUPTI\n  printf(\"TAU: CUPTI recording GPU launch: %s\\n\", name);\n#endif\n  Tau_cupti_register_host_calling_site(correlationId, name);\t\n}\n\nvoid record_gpu_counters(int device_id, const char *name, uint32_t correlationId, eventMap_t *m)\n{\n  int taskId = 0;\n#if defined(PTHREADS)\n  if (map_cudaThread.find(correlationId) != map_cudaThread.end()) {\n    int local_vtid = map_cudaThread[correlationId].tau_vtid;\n    taskId = map_cuptiThread[local_vtid];\n  }\n#endif\n  if (Tau_CuptiLayer_get_num_events() > 0 &&\n      !counters_bounded_warning_issued[device_id] && \n      last_recorded_kernel_name != NULL && \n      strcmp(last_recorded_kernel_name, name) != 0) \n  {\n    TAU_VERBOSE(\"TAU Warning: CUPTI events will be bounded, multiple different kernel deteched between synchronization points.\\n\");\n    counters_bounded_warning_issued[device_id] = true;\n    for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++) {\n      Tau_CuptiLayer_set_event_name(n, TAU_CUPTI_COUNTER_BOUNDED); \n    }\n  }\n  last_recorded_kernel_name = name;\n  {\n    //increment kernel count.\n    \n    for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++) {\n#ifdef TAU_DEBUG_CUPTI_COUNTERS\n      std::cout << \"at record: \"<< name << \" ====> \" << std::endl;\n      std::cout << \"\\tstart: \" << counters_at_last_launch[device_id][n] << std::endl;\n      std::cout << \"\\t stop: \" << current_counters[device_id][n] << std::endl;\n#endif\n      TauContextUserEvent* c;\n      const char *name = Tau_CuptiLayer_get_event_name(n);\n      if (n >= counterEvents[device_id].size()) {\n        c = (TauContextUserEvent *) Tau_return_context_userevent(name);\n        counterEvents[device_id].push_back(c);\n      } else {\n        c = counterEvents[device_id][n];\n      }\n      Tau_set_context_event_name(c, name);\n      if (counters_averaged_warning_issued[device_id] == true)\n      {\n        eventMap[taskId][c] = (current_counters[device_id][n] - counters_at_last_launch[device_id][n]);\n      }\n      else {\n        eventMap[taskId][c] = (current_counters[device_id][n] - counters_at_last_launch[device_id][n]) * kernels_encountered[device_id];\n      }\n      \n    }\n    kernels_recorded[device_id]++;\n  }\n}\nvoid record_gpu_occupancy(int32_t blockX, \n                          int32_t blockY,\n                          int32_t blockZ,\n\t\t\t                    uint16_t registersPerThread,\n\t\t                      int32_t staticSharedMemory,\n                          uint32_t deviceId,\n                          const char *name, \n                          eventMap_t *eventMap)\n{\n\tCUpti_ActivityDevice device = __deviceMap()[deviceId];\n\n\n\tint myWarpsPerBlock = (int)ceil(\n\t\t\t\t(double)(blockX * blockY * blockZ)/\n\t\t\t\t(double)(device.numThreadsPerWarp)\n\t\t\t); \n\n\tint allocatable_warps = min(\n\t\t(int)device.maxBlocksPerMultiprocessor, \n\t\t(int)floor(\n\t\t\t(float) device.maxWarpsPerMultiprocessor/\n\t\t\tmyWarpsPerBlock\t\n\t\t)\n\t);\n\n\tstatic TauContextUserEvent* alW;\n\tTau_get_context_userevent((void **) &alW, \"Allocatable Blocks per SM given Thread count (Blocks)\");\n\t(*eventMap)[alW] = allocatable_warps;\n  //eventMap[5].userEvent = alW;\n\t//eventMap[5].data = allocatable_warps;\n\n\tint myRegistersPerBlock = device.computeCapabilityMajor < 2 ?\n\t\tceil(\n\t\t\tceil(\n\t\t\t\t(float)myWarpsPerBlock, 2\t\n\t\t\t)*\n\t\t\tregistersPerThread*\n\t\t\tdevice.numThreadsPerWarp,\n\t\t\tdevice.computeCapabilityMinor < 2 ? 256 : 512\n\t\t) :\n\t\tceil(\n\t\t\tregistersPerThread*\n\t\t\tdevice.numThreadsPerWarp,\n\t\t\tdevice.computeCapabilityMajor < 3 ? 128 : 256\n\t\t)*\n\t\tceil(\n\t\t\tmyWarpsPerBlock, device.computeCapabilityMajor < 3 ? 2 : 4\n\t\t);\n\n\tint allocatable_registers = (int)floor(\n\t\tdevice.maxRegistersPerBlock/\n\t\tmax(\n\t\t\tmyRegistersPerBlock, 1\n\t\t\t)\n\t\t);\n\t\n\tif (allocatable_registers == 0)\n\t\tallocatable_registers = device.maxBlocksPerMultiprocessor;\n\t\n\n\tstatic TauContextUserEvent* alR;\n\tTau_get_context_userevent((void **) &alR, \"Allocatable Blocks Per SM given Registers used (Blocks)\");\n  (*eventMap)[alR] = allocatable_registers;\n\n\tint sharedMemoryUnit;\n\tswitch(device.computeCapabilityMajor)\n\t{\n\t\tcase 1: sharedMemoryUnit = 512; break;\n\t\tcase 2: sharedMemoryUnit = 128; break;\n\tcase 3: case 5: case 6: case 7: sharedMemoryUnit = 256; break;\n\t}\n\tint mySharedMemoryPerBlock = ceil(\n\t\tstaticSharedMemory,\n\t\tsharedMemoryUnit\n\t);\n\n\tint allocatable_shared_memory = mySharedMemoryPerBlock > 0 ?\n\t\tfloor(\n\t\t\tdevice.maxSharedMemoryPerBlock/\n\t\t\tmySharedMemoryPerBlock\n\t\t) :\n\t\tdevice.maxThreadsPerBlock\n\t\t;\n\t\n\tstatic TauContextUserEvent* alS;\n\tTau_get_context_userevent((void **) &alS, \"Allocatable Blocks Per SM given Shared Memory usage (Blocks)\");\n  (*eventMap)[alS] = allocatable_shared_memory;\n\n\tint allocatable_blocks = min(allocatable_warps, min(allocatable_registers, allocatable_shared_memory));\n\n\tint occupancy = myWarpsPerBlock * allocatable_blocks;\n\n// #define RESULTS_TO_STDOUT 1\n#ifdef RESULTS_TO_STDOUT\n\tprintf(\"[%s] occupancy calculator:\\n\", name);\n\n\tprintf(\"myWarpsPerBlock            = %d.\\n\", myWarpsPerBlock);\n\tprintf(\"allocatable warps          = %d.\\n\", allocatable_warps);\n\tprintf(\"myRegistersPerBlock        = %d.\\n\", myRegistersPerBlock);\n\tprintf(\"allocatable registers      = %d.\\n\", allocatable_registers);\n\tprintf(\"mySharedMemoryPerBlock     = %d.\\n\", mySharedMemoryPerBlock);\n\tprintf(\"allocatable shared memory  = %d.\\n\", allocatable_shared_memory);\n\n\tprintf(\"              >> occupancy = %d (%2.0f%% of %d).\\n\", \n\t\toccupancy, ((float)occupancy/device.maxWarpsPerMultiprocessor)*100, device.maxWarpsPerMultiprocessor);\n#endif\n\n\tstatic TauContextUserEvent* occ;\n\tTau_get_context_userevent((void **) &occ, \"GPU Occupancy (Warps)\");\n  (*eventMap)[occ] = occupancy;\n\n}\n\n#if CUPTI_API_VERSION >= 3\nvoid form_context_event_name(CUpti_ActivityKernel *kernel, CUpti_ActivitySourceLocator *source, const char *event_name, std::string *name)\n{         \n\n  stringstream file_and_line(\"\");\n  file_and_line << event_name << \" : \";\n  file_and_line << demangleName(kernel->name);\n  if (source->kind != CUPTI_ACTIVITY_KIND_INVALID)\n  {\n    file_and_line << \" => [{\" << source->fileName   << \"}\";\n    file_and_line <<  \" {\" << source->lineNumber << \"}]\";\n  }\n\n   *name = file_and_line.str();\n\n  //cout << \"file and line: \" << file_and_line.str() << endl;\n\n}\n#endif // CUPTI_API_VERSION >= 3\n\n\nbool function_is_sync(CUpti_CallbackId id)\n{\n\treturn (\t\n\t\t//unstable results otherwise(\n\t\t//runtimeAPI\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaFree_v3021 ||\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaFreeArray_v3020 ||\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaFreeHost_v3020\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaEventRecord_v3020\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaThreadExit_v3020 || \n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaDeviceReset_v3020 ||\n\t\tid == CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_v3020 ||\n\t\tid == CUPTI_RUNTIME_TRACE_CBID_cudaEventSynchronize_v3020 ||\n\t\t//id == CUPTI_RUNTIME_TRACE_CBID_cudaEventQuery_v3020 ||\n\t\t//driverAPI\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpy_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA_v2 ||\n\t\tid == CUPTI_DRIVER_TRACE_CBID_cuEventSynchronize //||\n\t\t//id == CUPTI_DRIVER_TRACE_CBID_cuEventQuery\n\n\t\t\t\t );\n}\nbool function_is_exit(CUpti_CallbackId id)\n{\n\t\n\treturn (\n\t\tid == CUPTI_RUNTIME_TRACE_CBID_cudaThreadExit_v3020 || \n\t\tid == CUPTI_RUNTIME_TRACE_CBID_cudaDeviceReset_v3020\n\t\t//driverAPI\n\t\t\t\t );\n\t\n}\nbool function_is_launch(CUpti_CallbackId id) { \n\treturn id == CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020\n\t\t     || id == CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel\n#if CUDA_VERSION >= 7000\n             || id == CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_v7000\n             || id == CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_ptsz_v7000 \n             || id == CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_ptsz_v7000\n#endif\n             ;\n\n}\n\nbool function_is_memcpy(CUpti_CallbackId id, CUpti_CallbackDomain domain) {\n\tif (domain == CUPTI_CB_DOMAIN_RUNTIME_API)\n\t{\n\treturn (\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArray_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArray_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyArrayToArray_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbol_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbol_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyAsync_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArrayAsync_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArrayAsync_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbolAsync_v3020 ||\n\t\tid ==     CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbolAsync_v3020\n\t);\n\t}\n\telse if (domain == CUPTI_CB_DOMAIN_DRIVER_API)\n\t{\n\t\treturn (\n\t\tid ==     CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2 ||\n\t\tid ==     CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2 ||\n    id ==     CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2 ||\n    id ==     CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2\n\t\t);\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nvoid get_values_from_memcpy(const CUpti_CallbackData *info, CUpti_CallbackId id, CUpti_CallbackDomain domain, int &kind, int &count)\n{\n\tif (domain == CUPTI_CB_DOMAIN_RUNTIME_API)\n\t{\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpy, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyToArray, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyFromArray, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyArrayToArray, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyToSymbol, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyFromSymbol, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyAsync, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyToArrayAsync, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyFromArrayAsync, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyToSymbolAsync, id, info, kind, count)\n    CAST_TO_RUNTIME_MEMCPY_TYPE_AND_CALL(cudaMemcpyFromSymbolAsync, id, info, kind, count)\n\t}\n\t//driver API\n\telse\n\t{\n\t\tif (id == CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2)\n\t\t{\n\t\t\tkind = CUPTI_ACTIVITY_MEMCPY_KIND_HTOD;\n\t\t\tcount = ((cuMemcpyHtoD_v2_params *) info->functionParams)->ByteCount;\n\t\t}\n    else if (id == CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2)\n\t\t{\n\t\t\tkind = CUPTI_ACTIVITY_MEMCPY_KIND_HTOD;\n\t\t\tcount = ((cuMemcpyHtoDAsync_v2_params *) info->functionParams)->ByteCount;\n\t\t}\n\t\telse if (id == CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2)\n\t\t{\n\t\t\tkind = CUPTI_ACTIVITY_MEMCPY_KIND_DTOH;\n\t\t\tcount = ((cuMemcpyDtoH_v2_params *) info->functionParams)->ByteCount;\n\t\t}\n    else if (id == CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2)\n\t\t{\n\t\t\tkind = CUPTI_ACTIVITY_MEMCPY_KIND_DTOH;\n\t\t\tcount = ((cuMemcpyDtoHAsync_v2_params *) info->functionParams)->ByteCount;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//cannot find byte count\n\t\t\tkind = -1;\n\t\t\tcount = 0;\n\t\t}\n\n\t}\n}\nint getMemcpyType(int kind)\n{\n\tswitch(kind)\n\t{\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_HTOD:\n\t\t\treturn MemcpyHtoD;\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_DTOH:\n\t\t\treturn MemcpyDtoH;\n\t\t/*\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_HTOA:\n\t\t\treturn MemcpyHtoD;\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_ATOH:\n\t\t\treturn MemcpyDtoH;\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_ATOA:\n\t\t\treturn MemcpyDtoD;\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_ATOD:\n\t\t\treturn MemcpyDtoD;\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_DTOA:\n\t\t\treturn MemcpyDtoD;\n\t\t*/\n\t\tcase CUPTI_ACTIVITY_MEMCPY_KIND_DTOD:\n\t\t\treturn MemcpyDtoD;\n\t\tdefault:\n\t\t\treturn MemcpyUnknown;\n\t}\n}\n\n#if CUDA_VERSION >= 6000\nint getUnifmemType(int kind)\n{\n  switch(kind)\n    {\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD:\n      return BytesHtoD;\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH:\n      return BytesDtoH;\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT:\n      return CPUPageFault;\n    default:\n      return UnifmemUnknown;\n    }\n}\nstatic const char *\ngetUvmCounterKindString(CUpti_ActivityUnifiedMemoryCounterKind kind)\n{\n    switch (kind) \n    {\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD:\n        return \"BYTES_TRANSFER_HTOD\";\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH:\n        return \"BYTES_TRANSFER_DTOH\";\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT:\n        return \"CPU_PAGE_FAULT_COUNT\";\n    default:\n        break;\n    }\n    return \"<unknown>\";\n}\n\nstatic const char *\ngetUvmCounterScopeString(CUpti_ActivityUnifiedMemoryCounterScope scope)\n{\n    switch (scope) \n    {\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE:\n        return \"PROCESS_SINGLE_DEVICE\";\n    case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES:\n        return \"PROCESS_ALL_DEVICES\";\n    default:\n        break;\n    }\n    return \"<unknown>\";\n}\n#endif\n\nconst char *demangleName(const char* name)\n{\n\tconst char *dem_name = 0;\n\t//printf(\"demangling: %s.\\n\", name);\n#if defined(HAVE_GNU_DEMANGLE) && HAVE_GNU_DEMANGLE\n\t//printf(\"demangling name....\\n\");\n\tdem_name = cplus_demangle(name, DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE |\n\tDMGL_TYPES);\n\t//check to see if demangling failed (name was not mangled).\n\tif (dem_name == NULL)\n\t{\n\t\tdem_name = name;\n\t}\n#else\n\tdem_name = name;\n#endif /* HAVE_GPU_DEMANGLE */\n\t//printf(\"demanged: %s.\\n\", dem_name);\n\treturn dem_name;\n}\n\n\nbool cupti_api_runtime()\n{\n\treturn (0 == strcasecmp(TauEnv_get_cupti_api(), \"runtime\") || \n\t\t\t0 == strcasecmp(TauEnv_get_cupti_api(), \"both\"));\n}\nbool cupti_api_driver()\n{\n\treturn (0 == strcasecmp(TauEnv_get_cupti_api(), \"driver\") || \n\t\t\t0 == strcasecmp(TauEnv_get_cupti_api(), \"both\")); \n}\n\nint get_device_count()\n{\n#if CUDA_VERSION >= 5000\n  int device_count;\n  cuDeviceGetCount(&device_count);\n  return device_count;\n#else\n  return 1;\n#endif\n\n}\n/*  BEGIN:  SASS added  */\nint get_device_id() \n{\n  int deviceId;\n  cudaGetDevice(&deviceId);\n  return deviceId;\n}\n\nFILE* createFileSourceSass(int task_id) \n{\n  char str_int[5];\n  sprintf (str_int, \"%d\", (task_id));\n  if ( fp_source[task_id] == NULL ) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"About to create file pointer for source csv: %i\\n\", task_id);\n#endif\n    char str_source[500];\n    strcpy (str_source,TauEnv_get_profiledir());\n    strcat (str_source,\"/\");\n    strcat (str_source,\"sass_source_\");\n    strcat (str_source, str_int);\n    strcat (str_source, \".csv\");\n      \n    fp_source[task_id] = fopen(str_source, \"a\");\n    fprintf(fp_source[task_id], \"timestamp,id,fileName,lineNumber,kind\\n\");\n    if (fp_source[task_id] == NULL) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_source[%i] failed\\n\", task_id);\n#endif\n    }\n    else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_source[%i] created successfully\\n\", task_id);\n#endif\n    }\n  }\n  else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"fp_source[%i] already exists!\\n\", task_id);\n#endif\n  }\n  return fp_source[task_id];\n}\n\nFILE* createFileInstrSass(int task_id) \n{\n  char str_int[5];\n  sprintf (str_int, \"%d\", (task_id));\n  if ( fp_instr[task_id] == NULL ) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"About to create file pointer for instr csv: %i\\n\", task_id);\n#endif\n    char str_instr[500];\n    strcpy (str_instr, TauEnv_get_profiledir());\n    strcat (str_instr,\"/\");\n    strcat (str_instr,\"sass_instr_\");\n    strcat (str_instr, str_int);\n    strcat (str_instr, \".csv\");\n      \n    fp_instr[task_id] = fopen(str_instr, \"a\");\n    fprintf(fp_instr[task_id], \"timestamp,correlationId,executed,flags,functionId,kind,\\\nnotPredOffThreadsExecuted,pcOffset,sourceLocatorId,threadsExecuted\\n\");\n    if (fp_instr[task_id] == NULL) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_instr[%i] failed\\n\", task_id);\n#endif\n    }\n    else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_instr[%i] created successfully\\n\", task_id);\n#endif\n    }\n  }\n  else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"fp_instr[%i] already exists!\\n\", task_id);\n#endif\n  }\n  return fp_instr[task_id];\n}\n\nFILE* createFileFuncSass(int task_id) \n{\n  char str_int[5];\n  sprintf (str_int, \"%d\", (task_id));\n  if ( fp_func[task_id] == NULL ) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"About to create file pointer for func csv: %i\\n\", task_id);\n#endif\n    char str_func[500];\n    strcpy (str_func, TauEnv_get_profiledir());\n    strcat (str_func,\"/\");\n    strcat (str_func,\"sass_func_\");\n    strcat (str_func, str_int);\n    strcat (str_func, \".csv\");\n      \n    fp_func[task_id] = fopen(str_func, \"a\");\n    fprintf(fp_func[task_id], \"timestamp;contextId;functionIndex;id;kind;moduleId;name;demangled\\n\");\n    if (fp_func[task_id] == NULL) {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_func[%i] failed\\n\", task_id);\n#endif\n    }\n    else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n      printf(\"fp_func[%i] created successfully\\n\", task_id);\n#endif\n    }\n  }\n  else {\n#ifdef TAU_DEBUG_CUPTI_SASS\n    printf(\"fp_func[%i] already exists!\\n\", task_id);\n#endif\n  }\n  return fp_func[task_id];\n}\n\n// void createFilePointerSass(int device_count) \n// {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//   printf (\"Inside sass/csv, about to create fp\\n\");\n//   printf(\"device_count: %i\\n\", device_count);\n// #endif\n//   if (device_count < 0) {\n//     printf(\"Couldn't detect device inside fp creation, FAIL\\n\");\n//   }\n\n//   for (int i = 0; i < device_count; i++) {\n//     char str_int[5];\n//     sprintf (str_int, \"%d\", (i+1));\n//     if ( fp_source[i] == NULL ) {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//       printf(\"About to create file pointer csv: %i\\n\", i);\n// #endif\n//       char str_source[500];\n//       strcpy (str_source,TauEnv_get_profiledir());\n//       strcat (str_source,\"/\");\n//       strcat (str_source,\"sass_source_\");\n//       strcat (str_source, str_int);\n//       strcat (str_source, \".csv\");\n      \n//       fp_source[i] = fopen(str_source, \"w\");\n//       fprintf(fp_source[i], \"timestamp,id,fileName,lineNumber,kind\\n\");\n//       if (fp_source[i] == NULL) {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_source[%i] failed\\n\", i);\n// #endif\n//       }\n//       else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_source[%i] created successfully\\n\", i);\n// #endif\n//       }\n//     }\n//     else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//       printf(\"fp_source[%i] already exists!\\n\", i);\n// #endif\n//     }\n//     if (fp_instr[i] == NULL) {\n\n//       char str_instr[500];\n//       strcpy (str_instr,TauEnv_get_profiledir());\n//       strcat (str_instr,\"/\");\n//       strcat (str_instr,\"sass_instr_\");\n//       strcat (str_instr, str_int);\n//       strcat (str_instr, \".csv\");\n      \n//       fp_instr[i] = fopen(str_instr, \"w\");\n//       fprintf(fp_instr[i], \"timestamp,correlationId,executed,flags,functionId,kind,\\\n// notPredOffThreadsExecuted,pcOffset,sourceLocatorId,threadsExecuted\\n\");\n//       if (fp_instr[i] == NULL) {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_instr[%i] failed\\n\", i);\n// #endif\n//       }\n//       else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_instr[%i] created successfully\\n\", i);\n// #endif\n//       }\n//     }\n//     else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//       printf(\"fp_instr[%i] already exists!\\n\", i);\n// #endif\n//     }\n//     if(fp_func[i] == NULL) {\n//       char str_func[500];\n//       strcpy (str_func,TauEnv_get_profiledir());\n//       strcat (str_func,\"/\");\n//       strcat (str_func,\"sass_func_\");\n//       strcat (str_func, str_int);\n//       strcat (str_func, \".csv\");\n      \n//       fp_func[i] = fopen(str_func, \"w\");\n//       fprintf(fp_func[i], \"timestamp;contextId;functionIndex;id;kind;moduleId;name;demangled\\n\");\n//       if (fp_func[i] == NULL) {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_func[%i] failed\\n\", i);\n// #endif\n//       }\n//       else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n// \tprintf(\"fp_func[%i] created successfully\\n\", i);\n// #endif\n//       }\n//     }\n//     else {\n// #ifdef TAU_DEBUG_CUPTI_SASS\n//       printf(\"fp_func[%i] already exists!\\n\", i);\n// #endif\n//     }\n\n//   } // deviceCount\n// }\n\nvoid record_gpu_counters_at_launch(int device)\n{ \n  kernels_encountered[device]++;\n  if (Tau_CuptiLayer_get_num_events() > 0 &&\n      !counters_averaged_warning_issued[device] && \n      kernels_encountered[device] > 1) {\n    TAU_VERBOSE(\"TAU Warning: CUPTI events will be avereged, multiple kernel deteched between synchronization points.\\n\");\n    counters_averaged_warning_issued[device] = true;\n    for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++) {\n      Tau_CuptiLayer_set_event_name(n, TAU_CUPTI_COUNTER_AVERAGED); \n    }\n  }\n  int n_counters = Tau_CuptiLayer_get_num_events();\n  if (n_counters > 0 && counters_at_last_launch[device][0] == ULONG_MAX) {\n    Tau_CuptiLayer_read_counters(device, counters_at_last_launch[device]);\n  }\n#ifdef TAU_CUPTI_DEBUG_COUNTERS\n  std::cout << \"at launch (\" << device << \") ====> \" << std::endl;\n    for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++) {\n      std::cout << \"\\tlast launch:      \" << counters_at_last_launch[device][n] << std::endl;\n      std::cout << \"\\tcurrent counters: \" << current_counters[device][n] << std::endl;\n    }\n#endif\n}\n  \nvoid record_gpu_counters_at_sync(int device)\n{\n  if (kernels_encountered[device] == 0) {\n   return;\n  }\n  Tau_CuptiLayer_read_counters(device, current_counters[device]);\n#ifdef TAU_CUPTI_DEBUG_COUNTERS\n  std::cout << \"at sync (\" << device << \") ====> \" << std::endl;\n    for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++) {\n      std::cout << \"\\tlast launch:      \" << counters_at_last_launch[device][n] << std::endl;\n      std::cout << \"\\tcurrent counters: \" << current_counters[device][n] << std::endl;\n    }\n#endif\n}\n\nvoid clear_counters(int device)\n{\n  for (int n = 0; n < Tau_CuptiLayer_get_num_events(); n++)\n  {\n    counters_at_last_launch[device][n] = ULONG_MAX;\n  }\n  kernels_encountered[device] = 0;\n  kernels_recorded[device] = 0;\n\n}\n/*  END:  SASS added  */\n\n// #if CUDA_VERSION >= 6000\n// static const char *\n// getUvmCounterKindString(CUpti_ActivityUnifiedMemoryCounterKind kind)\n// {\n//     switch (kind) \n//     {\n//     case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD:\n//         return \"BYTES_TRANSFER_HTOD\";\n//     case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH:\n//         return \"BYTES_TRANSFER_DTOH\";\n//     case CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT:\n//         return \"CPU_PAGE_FAULT_COUNT\";\n//     default:\n//         break;\n//     }\n//     return \"<unknown>\";\n// }\n\n#endif //CUPTI API VERSION >= 2\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauJAPI.cpp": "#include <jni.h>\n#include \"Profile/Profiler.h\"\n#include \"Profile/TauJAPI.h\"\n#ifdef TAU_DOT_H_LESS_HEADERS\n#include <iostream>\nusing namespace std;\n#else /* TAU_DOT_H_LESS_HEADERS */\n#include <iostream.h>\n#endif /* TAU_DOT_H_LESS_HEADERS */\n\n#include <sys/types.h>\n\n\n#ifndef TAU_ANDROID\n#define LOGV(...) printf(__VA_ARGS__)\n#define LOGF(...) printf(__VA_ARGS__)\npid_t gettid(void);\nstatic int dalvik_vm_running = 0;\nstatic pid_t finalizer;\n#else\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <dlfcn.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n#include <android/log.h>\n\n#include \"Profile/adb.h\"\n#include \"Profile/jdwp.h\"\n#include \"Profile/ddm.h\"\n\n#define LOGV(...) //__android_log_print(ANDROID_LOG_VERBOSE, \"TAU\", __VA_ARGS__)\n#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, \"TAU\", __VA_ARGS__)\n\nstatic pid_t finalizer;\n\n#ifdef TAU_PTHREAD_WRAP\n\ntypedef int (*pcreate_t)(pthread_t*, const pthread_attr_t*, void *(*)(void*), void*);\n\npcreate_t pcreate;\n\ntypedef struct {\n    void *(*start_routing)(void*);\n    void *arg;\n} arg_t;\n\nstatic void\ncleanup_handler(void *arg)\n{\n    Tau_stop_top_level_timer_if_necessary();\n}\n\nstatic void*\nthread_wrap(void *arg)\n{\n    void *rv;\n    arg_t *arg_wrap = (arg_t*)arg;\n    static jlong jid = 0;\n\n    JNIThreadLayer::RegisterThread(jid++, \"thread-\"+gettid());\n    Tau_create_top_level_timer_if_necessary();\n\n    pthread_cleanup_push(cleanup_handler, NULL);\n\n    rv = arg_wrap->start_routing(arg_wrap->arg);\n\n    pthread_cleanup_pop(1);\n\n    return rv;\n}\n\n/*\n * pthread_create() wrap\n */\nint\npthread_create(pthread_t *thread, const pthread_attr_t *attr,\n\t       void *(*start_routing)(void*), void *arg)\n{\n    arg_t *arg_wrap = (arg_t*)malloc(sizeof(*arg_wrap));\n\n    if (pcreate == NULL) {\n\tvoid *ptr = dlsym(RTLD_NEXT, \"pthread_create\");\n\tpcreate = reinterpret_cast<pcreate_t>(reinterpret_cast<long>(ptr)) ;\n    }\n\n    if (RtsLayer::TheUsingJNI()) {\n\targ_wrap->start_routing = start_routing;\n\targ_wrap->arg           = arg;\n\n\treturn pcreate(thread, attr, thread_wrap, arg_wrap);\n    } else {\n\treturn pcreate(thread, attr, start_routing, arg);\n    }\n}\n\n#endif\n\nstatic char *\nutf16_to_ascii(char *utf16, int len)\n{\n    int i;\n    char *ascii;\n\n    ascii = (char*)malloc(len+1);\n    if (ascii == NULL) {\n\treturn NULL;\n    }\n\n    for (i=0; i<len; i++) {\n\tascii[i] = ntohs(((short*)utf16)[i]) & 0xff;\n    }\n\n    ascii[i] = 0;\n\n    return ascii;\n}\n\nstatic int dalvik_vm_running = 1;\n\nstatic int\nhandle_ddm_event(jdwp_ctx_t *jdwp, ddm_trunk_t *trunk)\n{\n    int i;\n    ddm_thcr_t *thcr;\n    ddm_thde_t *thde;\n    ddm_thst_t *thst;\n    ddm_trunk_t query;\n\n    char *tname;\n    pid_t sid = -1;    // system thread id, i.e. gettid()\n\n    /*\n     * Dalvik vm-local thread id, free after thread death, reuseable\n     * See <android>/dalvik/vm/Thread.cpp\n     */\n    uint32_t lid;  \n\n    static map<uint32_t, char*> java_thread_name;  // lid ==> tname\n    static map<uint32_t, pid_t> java_thread_sid;   // lid ==> sid\n\n    static map<uint32_t, pid_t> thst_map;          // lid ==> sid\n\n    /* list of <lid, live?> */\n    static list< pair <uint32_t, bool> > tstates;\n\n    /*\n     * How does this work:\n     *\n     *  - Each thread is represened as a lid\n     *  - We send THST as soon as we recv THCR for a lid to query for\n     *    the sid\n     *  - We don't play any fancy here, meaning that we will not cache\n     *    or reuse lid-sid map returned by THCR. We do not do that\n     *    because it is not reliable, Read Dalvik source code to see\n     *    why.\n     *  - If THDE for a lid comes before corresponding THST, we say the\n     *    lid is ephemeral. We do not register ephemeral lid as the THST\n     *    returns later is not reliable.\n     *\n     * In short: we only register the lid if its THST comes before THDE.\n     * We ignore all other lids.\n     */\n    switch (ntohl(trunk->type)) {\n    case DDM_THCR:\n\tthcr  = (ddm_thcr_t*)trunk;\n\tlid   = ntohl(thcr->lid);\n\ttname = utf16_to_ascii(thcr->tname, ntohl(thcr->tname_len));\n\n\t/* setup mapping between lid and tname */\n\tif (java_thread_name.find(lid) != java_thread_name.end()) {\n\t    free(java_thread_name[lid]);\n\t}\n\tjava_thread_name[lid] = tname;\n\n\t/*\n\t * lid:\n\t * <1> main\n\t * <2> GC                         \\\n\t * <3> Signal Catcher              |\n\t * <4> JDWP                        |\n\t * <5> Compiler                    +> Dalvik internal threads\n\t * <6> ReferenceQueueDaemon        |\n\t * <7> FinalizerDaemon             |\n\t * <8> FinalizerWatchdogDaemon    /\n\t * <9> ~ : user threads\n\t *\n\t * We should monitor main and all user threads. We should also watch the\n\t * finalizer daemons as they may call user provided finalize() methods\n\t */\n\tif ((lid >= 2) && (lid <=8 ) && (lid != 7)) {\n\t    break;\n\t}\n\n\tquery.type   = htonl(DDM_THST);\n\tquery.length = htonl(0);\n\n\tjdwp_send_pkt(jdwp, DDM_TRUNK, (char*)&query, sizeof(query));\n\n\tLOGV(\" *** DDM THCR <%d> %s send THST\", lid, tname);\n\n\ttstates.push_back(pair<uint32_t,bool>(lid, true));\n\n\tbreak;\n\n    case DDM_THST:\n\tthst = (ddm_thst_t*)trunk;\n\n\t/* decode lid-sid map */\n\tthst_map.clear();\n\tfor (i=0; i<ntohs(thst->count); i++) {\n\t    lid = ntohl(thst->thst[i].lid);\n\t    sid = ntohl(thst->thst[i].sid);\n\n\t    LOGV(\" *** DDM THST: %d: %d -> %d\\n\", i, lid, sid);\n\t    thst_map[lid] = sid;\n\t}\n\n\t/* tstates list must not be empty as we received a THST */\n\tif (tstates.begin()->second == true) {\n\t    /* the thread is still alive, let's register it */\n\t    lid = tstates.begin()->first;\n\t    if (lid == 7) {\n\t\t/*\n\t\t * FinalizerDaemon will call Java class finalizers. Thus we\n\t\t * must register FinalizerDaemon if we are going to inject\n\t\t * the finalizer. However, this in practice usually doesn't\n\t\t * work. Dalvik will throw an error message telling that a\n\t\t * timeout occurs in finalize(), then it aborts the App.\n\t\t * Therefore we choose not to inject finalizer().\n\t\t *\n\t\t * Note that we don't know which method will be called by\n\t\t * finalizer(), so we save sid of FinalizerDaemon here and\n\t\t * avoid any TAU API call in that thread.\n\t\t */\n\t\tfinalizer = thst_map[lid];\n\t\ttstates.pop_front();\n\t\tLOGV(\" *** Ignore finalizer daemon sid = %d\", finalizer);\n\t\tbreak;\n\t    }\n\n\t    if (thst_map.find(lid) != thst_map.end()) {\n\t\tjava_thread_sid[lid] = thst_map[lid];\n\n\t\tJNIThreadLayer::SuThread(java_thread_sid[lid], java_thread_name[lid]);\n\t\tJNIThreadLayer::RegisterThread(java_thread_sid[lid], java_thread_name[lid]);\n\t    }\n\n\t    tstates.pop_front();\n\t} else {\n\t    /* the thread is already dead */\n\t    tstates.pop_front();\n\t}\n\n\tbreak;\n\n    case DDM_THDE:\n\tthde  = (ddm_thde_t*)trunk;\n\tlid   = ntohl(thde->lid);\n\ttname = java_thread_name[lid];\n\n\tif (lid == 1) {\n\t    dalvik_vm_running = 0;\n\t}\n\n\tif (java_thread_sid.find(lid) != java_thread_sid.end()) {\n\t    /* yes, we are registered, now unregester */\n\t    sid = java_thread_sid[lid];\n\n\t    JNIThreadLayer::SuThread(sid, tname);\n\t    Tau_stop_all_timers(RtsLayer::myThread());\n\n\t    java_thread_sid.erase(lid);\n\n\t    LOGV(\" *** DDM THDE <%d> %s unregistered\", lid, tname);\n\t} else {\n\t    /* no, we are not registered yet, remove from waiting list */\n\t    list< pair<uint32_t, bool> >::iterator itor;\n\t    for (itor=tstates.begin(); itor!=tstates.end(); itor++) {\n\t\tif (itor->first == lid) {\n\t\t    itor->second = false; // mark of death\n\t\t    LOGV(\" *** DDM THDE <%d> %s mark as death\", lid, tname);\n\t\t    break;\n\t\t}\n\t    }\n\n\t    if (itor == tstates.end()) {\n\t\tLOGF(\" *** DDM THDE <%d> %s not regestered and not in waiting list\\n\", lid, tname);\n\t    }\n\t}\n\n\tfree(tname);\n\tjava_thread_name.erase(lid);\n\n\tbreak;\n\n    defalt:\n\tLOGF(\" *** DTM: ignore DDM event %08x\\n\", ntohl(trunk->type));\n\tbreak;\n    }\n\n    return 0;\n}\n\nstatic void*\ndalvik_thread_monitor(void *arg)\n{\n    jdwp_ctx_t jdwp;\n    jdwp_cmd_t *cmd;\n\n    JNIThreadLayer::IgnoreThisThread();\n\n    if (jdwp_init(&jdwp) < 0) {\n\tLOGF(\" *** Error: DTM: jdwp failed to init\\n\");\n\treturn NULL;\n    }\n\n    ddm_helo(&jdwp);\n    ddm_then(&jdwp);\n\n    LOGV(\" *** (S%d) DTM started\\n\", gettid());\n\n    while (1) {\n\t/* is there any pending events in backlog? */\n\tif (jdwp.events == NULL) {\n\t    /* Nope! Let's wait for new events coming */\n\t    cmd = (jdwp_cmd_t*)jdwp_recv_pkt(&jdwp);\n\n\t    /* something really bad happened, end of watch */\n\t    if (cmd == NULL) {\n\t\tLOGF(\"Error: JDWP: disconnect...\\n\");\n\t\tbreak;\n\t    }\n\n\t    /* put the events into backlog */\n\t    jdwp_event_backlog(&jdwp, cmd);\n\t} else {\n\t    /* Yep! Let's deal with them first */\n\t    jdwp_event_t *event = jdwp.events;\n\n\t    if (jdwp.events->next == jdwp.events) {\n\t\tjdwp.events = NULL;\n\t    } else {\n\t\tjdwp.events->next->prev = jdwp.events->prev;\n\t\tjdwp.events->prev->next = jdwp.events->next;\n\t\tjdwp.events             = jdwp.events->next;\n\t    }\n\n\t    /* this should be a THST response */\n\t    if (event->cmd->flags == 0x80) {\n\t\thandle_ddm_event(&jdwp, (ddm_trunk_t*)event->cmd->data);\n\t    }\n\n\t    /* this should be a THCR/THDE notification */\n\t    if (((event->cmd->cmd_set << 8) | event->cmd->command) == DDM_TRUNK) {\n\t\thandle_ddm_event(&jdwp, (ddm_trunk_t*)event->cmd->data);\n\t    }\n\n\t    free(event->cmd);\n\t    free(event);\n\t}\n    }\n\n    if (!adb_is_active(jdwp.adb)) {\n\tLOGF(\"Error: JDWP: connection closed\\n\");\n    }\n\n    return NULL;\n}\n\n#include <sys/stat.h>\n#include <fcntl.h>\nstatic void\ndump_proc_self_maps(void)\n{\n    char buf[128];\n\n    int ifd = open(\"/proc/self/maps\", O_RDONLY);\n    if (ifd < 0) {\n\tLOGV(\" *** open maps: %s\", strerror(errno));\n\treturn;\n    }\n\n    int ofd = open(\"/sdcard/self_maps\", O_WRONLY);\n    if (ofd < 0) {\n\tLOGV(\" *** open sdcard maps: %s\", strerror(errno));\n\treturn;\n    }\n\n    while (1) {\n\tint rv = read(ifd, buf, sizeof(buf));\n\n\tif (rv > 0) {\n\t    write(ofd, buf, rv);\n\t} else {\n\t    break;\n\t}\n    }\n\n    close(ifd);\n    close(ofd);\n}\n\n#endif\n\n/*\n * The VM calls JNI_OnLoad() when the native library is loaded\n */\njint JNI_OnLoad(JavaVM *vm, void *reserved)\n{\n    LOGV(\" *** JNI_OnLoad\");\n\n    //dump_proc_self_maps();\n\n    /*\n     * This is a good point to attach your gdb on JVM to debug TAU\n     */\n    //getchar();\n\n    RtsLayer::TheUsingJNI() = true;\n    JNIThreadLayer::tauVM = vm;\n\n#ifdef TAU_ANDROID\n    pthread_t thr;\n    pthread_create(&thr, NULL, dalvik_thread_monitor, NULL);\n#endif\n\n    return JNI_VERSION_1_6;\n}\n\n/*\n * Java: Thread.currentThread().getId();\n * This ID (jid) simply count upwards, so each Thread has a unique ID.\n * See <android>/libcore/libdvm/src/main/java/java/lang/Thread.java\n */\njlong get_java_thread_id(void)\n{\n    JavaVM *vm = JNIThreadLayer::tauVM;\n    JNIEnv *env;\n\n    /*\n     * Note that we may still running even after dalvik vm is dead, in which\n     * case the jid should be 1, i.e. the \"main\" thread.\n     */\n    if (!dalvik_vm_running) {\n\treturn 1;\n    }\n\n    /* sanity check */\n    if (vm == NULL) {\n\treturn -1;\n    }\n\n    /*\n     * Note that DTM(Dalvik Monitor Thread) is just a pthread. It's not attached\n     * to dalvik vm, i.e. not a java thread. So there is no env pointer, and it\n     * doesn't have a java thread id.\n     */\n    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {\n\treturn -1;\n    }\n\n    jclass thread = env->FindClass(\"java/lang/Thread\");\n    if (thread == NULL) {\n\treturn -1;\n    }\n\n    jmethodID currentThread = env->GetStaticMethodID(thread, \"currentThread\",\n\t\t\t\t\t\t     \"()Ljava/lang/Thread;\");\n    if (currentThread == NULL) {\n\treturn -1;\n    }\n\n    jobject thisThread = env->CallStaticObjectMethod(thread, currentThread);\n    if (thisThread == NULL) {\n\treturn -1;\n    }\n\n    jmethodID getId = env->GetMethodID(thread, \"getId\", \"()J\");\n    if (getId == NULL) {\n\treturn -1;\n    }\n\n    jlong id = env->CallLongMethod(thisThread, getId);\n\n    /*\n     * LocalRef should be deleted after use, otherwise it may overflow\n     * Java native method's local reference table\n     */\n    env->DeleteLocalRef(thread);\n    env->DeleteLocalRef(thisThread);\n\n    return id;\n}\n\n/*\n * Java: Thread.currentThread().getName();\n */\nchar *get_java_thread_name(void)\n{\n    JavaVM *vm = JNIThreadLayer::tauVM;\n    JNIEnv *env;\n\n    /*\n     * Note that we may still running even after dalvik vm is dead, in which\n     * case the jid should be 1, i.e. the \"main\" thread.\n     */\n    if (!dalvik_vm_running) {\n\treturn NULL;\n    }\n\n    /* sanity check */\n    if (vm == NULL) {\n\treturn NULL;\n    }\n\n    /*\n     * Note that DTM(Dalvik Monitor Thread) is just a pthread. It's not attached\n     * to dalvik vm, i.e. not a java thread. So there is no env pointer, and it\n     * doesn't have a java thread id.\n     */\n    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {\n\treturn NULL;\n    }\n\n    jclass thread = env->FindClass(\"java/lang/Thread\");\n    if (thread == NULL) {\n\treturn NULL;\n    }\n\n    jmethodID currentThread = env->GetStaticMethodID(thread, \"currentThread\",\n\t\t\t\t\t\t     \"()Ljava/lang/Thread;\");\n    if (currentThread == NULL) {\n\treturn NULL;\n    }\n\n    jobject thisThread = env->CallStaticObjectMethod(thread, currentThread);\n    if (thisThread == NULL) {\n\treturn NULL;\n    }\n\n    jmethodID getName = env->GetMethodID(thread, \"getName\", \"()Ljava/lang/String;\");\n    if (getName == NULL) {\n\treturn NULL;\n    }\n\n    jstring jstr = (jstring) env->CallObjectMethod(thisThread, getName);\n    if (jstr == NULL) {\n\treturn NULL;\n    }\n\n    const char *jname = env->GetStringUTFChars(jstr, NULL);\n    if (jname == NULL) {\n\treturn NULL;\n    }\n\n    char *name = strdup(jname);\n\n    env->ReleaseStringUTFChars(jstr, jname);\n\n    /*\n     * LocalRef should be deleted after use, otherwise it may overflow\n     * Java native method's local reference table\n     */\n    env->DeleteLocalRef(thread);\n    env->DeleteLocalRef(thisThread);\n\n    return name;\n}\n\n/*\n * Class:     Profile\n * Method:    NativeProfile\n * Signature: (Ljava/lang/String;Ljava/lang/String;J)V\n */\n\nJNIEXPORT void JNICALL Java_edu_uoregon_TAU_Profile_NativeProfile\n  (JNIEnv *env, jobject obj, jstring name, jstring type, jstring groupname, \n\tjlong group)\n{\n  if (gettid() == finalizer) {\n    return;\n  }\n  JNIThreadLayer::WaitForDTM();\n\n  /* Get name and type strings from the JVM */\n  const char *blockName = env->GetStringUTFChars(name, 0);\n  const char *blockType = env->GetStringUTFChars(type, 0);\n  const char *blockGroup = env->GetStringUTFChars(groupname, 0);\n  /* create a new FunctionInfo object by passing these to it */\n  FunctionInfo *f = new FunctionInfo(blockName, blockType, (TauGroup_t) group, \n\tblockGroup, true);\n  /* true indicates InitData will ensure that all data is clean */\n\n  /* Now release the strings back to the JVM */\n  env->ReleaseStringUTFChars(name, blockName);\n  env->ReleaseStringUTFChars(type, blockType);\n  env->ReleaseStringUTFChars(groupname, blockGroup);\n\n  /* Find the field FuncInfoPtr in the Profile class where we need to store \n     the address of the FunctionInfo object just created */\n\n  jclass cls = env->GetObjectClass(obj);\n  jfieldID fid = env->GetFieldID(cls, \"FuncInfoPtr\", \"J\");\n\n\n  /* Check if new was successful */\n\n  if (f == (FunctionInfo *) NULL)\n  {\n    cout << \"ERROR: FunctionInfo new returns NULL: Memory problem\"<<endl;\n  }\n\n  /* Store the address of f in the Java class field where it can be accessed\n     by successive JNI calls such as Start and Stop */\n\n  env->SetLongField(obj, fid, (jlong) f); \n  DEBUGPROFMSG(\"Java_Profile_NativeProfile: FunctionInfoPtr set to \"<<f<<endl);\n\n}\n\n\n/*\n * Class:     Profile\n * Method:    NativeStart\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_edu_uoregon_TAU_Profile_NativeStart\n  (JNIEnv *env, jobject obj)\n{\n  if (gettid() == finalizer) {\n    return;\n  }\n\n  /* Find the FunctionInfo Pointer associated with this method*/\n  jclass cls = env->GetObjectClass(obj);\n  jfieldID fid;\n  FunctionInfo *f; \n\n  JNIThreadLayer::WaitForDTM();\n\n  fid = env->GetFieldID(cls, \"FuncInfoPtr\", \"J\");\n\n  f = (FunctionInfo *) env->GetLongField(obj, fid);\n\n  TAU_PROFILE_START(f);\n}\n\n\n\n\n/*\n * Class:     Profile\n * Method:    NativeStop\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_edu_uoregon_TAU_Profile_NativeStop\n  (JNIEnv * env, jobject obj) {\n  if (gettid() == finalizer) {\n    return;\n  }\n\n  TAU_GLOBAL_TIMER_STOP();\n}\n\n/* EOF Profile.cpp */\n\n/***************************************************************************\n * $RCSfile: TauJAPI.cpp,v $   $Author: amorris $\n * $Revision: 1.3 $   $Date: 2009/02/19 20:08:29 $\n * TAU_VERSION_ID: $Id: TauJAPI.cpp,v 1.3 2009/02/19 20:08:29 amorris Exp $\n ***************************************************************************/\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauUtil.cpp": "/****************************************************************************\n**\t\t\tTAU Portable Profiling Package\t\t\t   **\n**\t\t\thttp://www.cs.uoregon.edu/research/tau\t           **\n*****************************************************************************\n**    Copyright 2010                                                       **\n**    Department of Computer and Information Science, University of Oregon **\n**    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n****************************************************************************/\n/****************************************************************************\n**\tFile            : TauUtil.cpp                                      **\n**\tContact\t\t: tau-bugs@cs.uoregon.edu                          **\n**\tDocumentation\t: See http://tau.uoregon.edu                       **\n**                                                                         **\n**      Description     : This file contains utility routines              **\n**                                                                         **\n****************************************************************************/\n\n#include <TauUtil.h>\n#include <TauPlugin.h>\n#include <string>\n#include <TauEnv.h>\n#include <TauPluginInternals.h>\n#include <stdarg.h>\n#include <string.h>\n#include <Profile/Profiler.h>\n#include <TauMetaData.h>\n#include <Profiler.h>\n\n#ifndef TAU_WINDOWS\n#include <dlfcn.h>\n#else\n#define strtok_r(a,b,c) strtok(a,b)\n#endif /* TAU_WINDOWS */\n\nTau_plugin_callbacks_active_t Tau_plugins_enabled;\n\n#define TAU_NAME_LENGTH 1024\n\n#ifdef TAU_BFD\n#include <Profile/TauBfd.h>\n\n/*Data structures to return function context info*/\nstruct HashNode\n{\n  HashNode() : fi(NULL), excluded(false)\n  { }\n\n  TauBfdInfo info;\t\t///< Filename, line number, etc.\n  FunctionInfo * fi;\t\t///< Function profile information\n  bool excluded;\t\t\t///< Is function excluded from profiling?\n};\n\nstruct HashTable : public TAU_HASH_MAP<unsigned long, HashNode*>\n{\n  HashTable() {\n    Tau_init_initializeTAU();\n  }\n  virtual ~HashTable() {\n    Tau_destructor_trigger();\n  }\n};\n\nstatic HashTable & TheHashTable()\n{\n  static HashTable htab;\n  return htab;\n}\n\nstatic tau_bfd_handle_t & TheBfdUnitHandle()\n{\n  static tau_bfd_handle_t bfdUnitHandle = TAU_BFD_NULL_HANDLE;\n  if (bfdUnitHandle == TAU_BFD_NULL_HANDLE) {\n    RtsLayer::LockEnv();\n    if (bfdUnitHandle == TAU_BFD_NULL_HANDLE) {\n      bfdUnitHandle = Tau_bfd_registerUnit();\n    }\n    RtsLayer::UnLockEnv();\n  }\n  return bfdUnitHandle;\n}\n#endif /* TAU_BFD */\n\n/* Given the function info object, resolve and return the address\n * that has been embedded in the function name using a pre-fixed token sequence.\n * Currently, this is only invoked from TracerOTF2.cpp and Profiler.cpp while\n * writing out the trace and profile files respectively.\n * NOTE: We do NOT need to lock the HashTable data structure as the thread has already \n * acquired the lock from outside this routine */\nextern \"C\" void Tau_ompt_resolve_callsite(FunctionInfo &fi, char * resolved_address) {\n \n      unsigned long addr = 0;\n      char region_type[100];\n      sscanf(fi.GetName(), \"%s ADDR <%lx>\", region_type, &addr);\n      #ifdef TAU_BFD\n      HashNode * node;\n      tau_bfd_handle_t & bfdUnitHandle = TheBfdUnitHandle();\n     \n      node = TheHashTable()[addr];\n      if (!node) {\n        node = new HashNode;\n        node->fi = NULL;\n        node->excluded = false;\n        \n        TheHashTable()[addr] = node;\n      }\n      \n      Tau_bfd_resolveBfdInfo(bfdUnitHandle, addr, node->info);\n\n      if(node && node->info.filename && node->info.funcname && node->info.lineno) {\n        sprintf(resolved_address, \"%s %s [{%s} {%d, 0}]\", region_type, node->info.funcname, node->info.filename, node->info.lineno);\n      } else if(node && node->info.filename && node->info.funcname) {\n        sprintf(resolved_address, \"%s %s [{%s}]\", region_type, node->info.funcname, node->info.filename);\n      } else if(node && node->info.funcname) {\n        sprintf(resolved_address, \"%s %s\", region_type, node->info.funcname);\n      } else {\n        sprintf(resolved_address, \"OpenMP %s __UNKNOWN__\", region_type);\n      }\n      #else \n        sprintf(resolved_address, \"OpenMP %s __UNKNOWN__\", region_type);\n      #endif /*TAU_BFD*/\n}\n\n/* Given the unsigned long address, and a pointer to the string, fill the string with the BFD resolved address.\n * NOTE: We need to lock the HashTable data structure, as this function is invoked from the OMPT callbacks themselves, \n * when the user wants to resolve the function name eagerly. \n * For this feature to be active, TAU_OMPT_RESOLVE_ADDRESS_EAGERLY must be set.*/\nextern \"C\" void Tau_ompt_resolve_callsite_eagerly(unsigned long addr, char * resolved_address) {\n \n      #ifdef TAU_BFD\n      HashNode * node;\n      tau_bfd_handle_t & bfdUnitHandle = TheBfdUnitHandle();\n     \n      RtsLayer::LockDB();  \n      node = TheHashTable()[addr];\n      if (!node) {\n        node = new HashNode;\n        node->fi = NULL;\n        node->excluded = false;\n        \n        TheHashTable()[addr] = node;\n\n        Tau_bfd_resolveBfdInfo(bfdUnitHandle, addr, node->info);\n      }\n      RtsLayer::UnLockDB(); \n\n      if(node && node->info.filename && node->info.funcname && node->info.lineno) {\n        sprintf(resolved_address, \"%s [{%s} {%d, 0}]\", node->info.funcname, node->info.filename, node->info.lineno);\n      } else if(node && node->info.filename && node->info.funcname) {\n        sprintf(resolved_address, \"%s [{%s}]\", node->info.funcname, node->info.filename);\n      } else if(node && node->info.funcname) {\n        sprintf(resolved_address, \"%s\", node->info.funcname);\n      } else {\n        sprintf(resolved_address, \"__UNKNOWN__\");\n      }\n      #else\n        sprintf(resolved_address, \"__UNKNOWN__\");\n      #endif /*TAU_BFD*/\n}\n\n/*********************************************************************\n * Abort execution with a message\n ********************************************************************/\nvoid TAU_ABORT(const char *format, ...) {\n  va_list args;\n  va_start(args, format);\n  vfprintf(stderr, format, args);\n  va_end(args);\n  exit(EXIT_FAILURE);\n}\n\n\n\n/*********************************************************************\n * Create an buffer output device\n ********************************************************************/\nTau_util_outputDevice *Tau_util_createBufferOutputDevice() \n{\n  Tau_util_outputDevice *out = (Tau_util_outputDevice*) TAU_UTIL_MALLOC (sizeof(Tau_util_outputDevice));\n  if (out == NULL) {\n    return NULL;\n  }\n  out->type = TAU_UTIL_OUTPUT_BUFFER;\n  out->bufidx = 0;\n  out->buflen = TAU_UTIL_INITIAL_BUFFER;\n  out->buffer = (char *)malloc(out->buflen + 1);\n  return out;\n}\n\n/*********************************************************************\n * Return output buffer\n ********************************************************************/\nchar *Tau_util_getOutputBuffer(Tau_util_outputDevice *out) {\n  return out->buffer;\n}\n\n/*********************************************************************\n * Return output buffer length\n ********************************************************************/\nint Tau_util_getOutputBufferLength(Tau_util_outputDevice *out) {\n  return out->bufidx;\n}\n\n/*********************************************************************\n * Free and close output device\n ********************************************************************/\nvoid Tau_util_destroyOutputDevice(Tau_util_outputDevice *out) {\n  if (out->type == TAU_UTIL_OUTPUT_BUFFER) {\n    free (out->buffer);\n  } else {\n    fclose(out->fp);\n  }\n  free (out);\n}\n\n/*********************************************************************\n * Write to output device\n ********************************************************************/\nint Tau_util_output(Tau_util_outputDevice *out, const char *format, ...) {\n  int rs;\n  va_list args;\n  if (out->type == TAU_UTIL_OUTPUT_BUFFER) {\n    va_start(args, format);\n    rs = vsprintf(out->buffer+out->bufidx, format, args);\n    va_end(args);\n    out->bufidx+=rs;\n    if (out->bufidx+TAU_UTIL_OUTPUT_THRESHOLD > out->buflen) {\n      out->buflen = out->buflen * 2;\n      out->buffer = (char*) realloc (out->buffer, out->buflen);\n    }\n  } else {\n    va_start(args, format);\n    rs = vfprintf(out->fp, format, args);\n    va_end(args);\n  }\n  return rs;\n}\n\n/*********************************************************************\n * Read an entire line from a file\n ********************************************************************/\nint Tau_util_readFullLine(char *line, FILE *fp) {\n  int ch;\n  int i = 0; \n  while ( (ch = fgetc(fp)) && ch != EOF && ch != (int) '\\n') {\n    line[i++] = (unsigned char) ch;\n  }\n  // Be careful to check that line is large enough:\n  // sizeof(line) == strlen(str) + 1\n  line[i] = '\\0'; \n  return i; \n}\n\n/*********************************************************************\n * Duplicates a string and replaces all the runs of spaces with a \n * single space.\n ********************************************************************/\nchar const * Tau_util_removeRuns(char const * spaced_str) \n{\n  if (!spaced_str) {\n    return spaced_str; /* do nothing with a null string */\n  }\n\n  // Skip over spaces at start of string\n  while (*spaced_str && *spaced_str == ' ') {\n    ++spaced_str;\n  }\n\n  // String copy\n  int len = strlen(spaced_str);\n  char * str = (char *)malloc(len+1);\n\n  // Copy from spaced_str ignoring runs of multiple spaces\n  char c;\n  char * dst = str;\n  char const * src = spaced_str;\n  char const * end = spaced_str + len;\n  while ((c = *src) && src < end) {\n    ++src;\n    *dst = c;\n    ++dst;\n    if(c == ' ')\n      while(*src == ' ')\n        ++src;\n  }\n  *dst = '\\0';\n\n  return str;\n}\n\n\nvoid *Tau_util_malloc(size_t size, const char *file, int line) {\n  void *ptr = malloc (size);\n  if (!ptr) {\n    TAU_ABORT(\"TAU: Abort: Unable to allocate memory (malloc) at %s:%d\\n\", file, line);\n  }\n  return ptr;\n}\n\nvoid *Tau_util_calloc(size_t size, const char *file, int line) {\n  void *ptr = calloc (1,size);\n  if (!ptr) {\n    TAU_ABORT(\"TAU: Abort: Unable to allocate memory (calloc) at %s:%d\\n\", file, line);\n  }\n  return ptr;\n}\n\n/*********************************************************************\n * Create and return a new plugin manager if plugin system is un-initialized.\n * If it is already initialized, return a reference to the same plugin manager - Singleton Pattern\n ********************************************************************/\nPluginManager* Tau_util_get_plugin_manager() {\n  static PluginManager * plugin_manager = NULL;\n  static int is_plugin_system_initialized = 0;\n  \n  /*Allocate memory for the plugin list and callback list*/\n  if(!is_plugin_system_initialized) {\n\n    plugin_manager = (PluginManager*)malloc(sizeof(PluginManager));\n    plugin_manager->plugin_list = (Tau_plugin_list *)malloc(sizeof(Tau_plugin_list));\n    (plugin_manager->plugin_list)->head = NULL;\n\n    plugin_manager->callback_list = (Tau_plugin_callback_list*)malloc(sizeof(Tau_plugin_callback_list));\n    (plugin_manager->callback_list)->head = NULL;\n    is_plugin_system_initialized = 1;\n  }\n\n  return plugin_manager;\n}\n\n/*********************************************************************\n * Initializes the plugin system by loading and registering all plugins\n ********************************************************************/\nint Tau_initialize_plugin_system() {\n  memset(&Tau_plugins_enabled, 0, sizeof(Tau_plugin_callbacks_active_t));\n  if(TauEnv_get_plugins_enabled()) {\n    TAU_VERBOSE(\"TAU INIT: Initializing plugin system...\\n\");\n    if(!Tau_util_load_and_register_plugins(Tau_util_get_plugin_manager())) {\n      TAU_VERBOSE(\"TAU INIT: Successfully Initialized the plugin system.\\n\");\n    } else {\n      printf(\"TAU INIT: Error initializing the plugin system\\n\");\n    }\n  }\n  return 0;\n}\n\n/*********************************************************************\n * Internal function that helps parse a token for the plugin name\n ********************************************************************/\nint Tau_util_parse_plugin_token(char * token, char ** plugin_name, char *** plugin_args, int * plugin_num_args) {\n  int length_of_arg_string = -1;\n  char * save_ptr;\n  char * arg_string;\n  char * arg_token;\n  char *pos_left = NULL;\n  char *pos_right = NULL;\n  \n\n  *plugin_num_args = 0;\n  *plugin_name = (char*)malloc(1024*sizeof(char));\n  pos_left = strchr(token, '(');\n  pos_right = strchr(token, ')');\n\n  if(pos_left == NULL && pos_right == NULL) {\n    strcpy(*plugin_name, token);\n    return 0;\n  } else if (pos_left == NULL || pos_right == NULL) {\n    return -1; //Bad plugin name\n  }\n\n  *plugin_args = (char**)malloc(10*sizeof(char*)); //Maximum of 10 args supported for now\n  arg_string = (char*)malloc(1024*sizeof(char));\n\n  length_of_arg_string = (pos_right - pos_left) - 1;\n\n  strncpy(arg_string, pos_left+1, length_of_arg_string);\n  strncpy(*plugin_name, token, (pos_left-token));\n\n  arg_token = strtok_r(arg_string, \",\", &save_ptr);\n\n  int i = 0;\n  /*Grab and pack, and count all the arguments to the plugin*/\n  while(arg_token != NULL) {\n    (*plugin_num_args)++;\n    (*plugin_args)[i] = (char*)malloc(1024*sizeof(char));\n    strcpy((*plugin_args)[i], arg_token);\n    arg_token = strtok_r(NULL, \",\", &save_ptr);\n    i++;\n  }\n\n  TAU_VERBOSE(\"TAU PLUGIN: Arg string and count for token %s are %s and %d\\n\", token, arg_string, *plugin_num_args);\n\n  return 0;\n}\n\n\n/********************************************************************* \n * Load a list of plugins at TAU init, given following environment variables:\n *  - TAU_PLUGINS_NAMES\n *  - TAU_PLUGINS_PATH\n********************************************************************* */\nint Tau_util_load_and_register_plugins(PluginManager* plugin_manager)\n{\n  char pluginpath[1024];\n  char listpluginsnames[1024];\n  char *fullpath = NULL;\n  char *token = NULL;\n  char *plugin_name = NULL;\n  //char *initFuncName = NULL;\n  char **plugin_args;\n  char *save_ptr;\n  int plugin_num_args;\n\n  if((TauEnv_get_plugins_path() == NULL) || (TauEnv_get_plugins() == NULL)) {\n    printf(\"TAU: One or more of the environment variable(s) TAU_PLUGINS_PATH: %s, TAU_PLUGINS: %s are empty\\n\", TauEnv_get_plugins_path(), TauEnv_get_plugins());\n    return -1;\n  }\n  \n  strcpy(pluginpath, TauEnv_get_plugins_path());\n  strcpy(listpluginsnames, TauEnv_get_plugins());\n\n  /*Individual plugin names are separated by a \":\"*/\n  token = strtok_r(listpluginsnames,\":\", &save_ptr); \n  TAU_VERBOSE(\"TAU: Trying to load plugin with name %s\\n\", token);\n\n  fullpath = (char*)calloc(TAU_NAME_LENGTH, sizeof(char));\n\n  while(token != NULL)\n  {\n    TAU_VERBOSE(\"TAU: Loading plugin: %s\\n\", token);\n    strcpy(fullpath, \"\");\n    strcpy(fullpath,pluginpath);\n    if (Tau_util_parse_plugin_token(token, &plugin_name, &plugin_args, &plugin_num_args)) {\n      printf(\"TAU: Plugin name specification does not match form <plugin_name1>(<plugin_arg1>,<plugin_arg2>):<plugin_name2>(<plugin_arg1>,<plugin_arg2>) for: %s\\n\",token);\n      return -1;\n    }\n\n#ifndef TAU_WINDOWS\n    sprintf(fullpath, \"%s/%s\", pluginpath, plugin_name);\n#else\n    sprintf(fullpath, \"%s\\\\%s\", pluginpath, plugin_name);\n#endif\n\n    TAU_VERBOSE(\"TAU: Full path for the current plugin: %s\\n\", fullpath);\n   \n    /*Return a handle to the loaded dynamic object*/\n    void* handle = Tau_util_load_plugin(plugin_name, fullpath, plugin_manager);\n\n    if (handle) {\n      /*If handle is NOT NULL, register the plugin's handlers for various supported events*/\n      handle = Tau_util_register_plugin(plugin_name, plugin_args, plugin_num_args, handle, plugin_manager);\n     \n      /*Plugin registration failed. Bail*/\n      if(!handle) return -1;\n      TAU_VERBOSE(\"TAU: Successfully called the init func of plugin: %s\\n\", token);\n\n    } else {\n      /*Plugin loading failed for some reason*/\n      return -1;\n    }\n\n    token = strtok_r(NULL, \":\", &save_ptr);\n  }\n  Tau_metadata_push_to_plugins();\n\n  free(fullpath);\n  return 0;\n}\n\n/**************************************************************************************************************************\n * Use dlsym to find a function : TAU_PLUGIN_INIT_FUNC that the plugin MUST implement in order to register itself.\n * If plugin registration succeeds, then the callbacks for that plugin have been added to the plugin manager's callback list\n * ************************************************************************************************************************/\nvoid* Tau_util_register_plugin(const char *name, char **args, int num_args, void* handle, PluginManager* plugin_manager) {\n#ifndef TAU_WINDOWS\n  PluginInitFunc init_func = (PluginInitFunc) dlsym(handle, TAU_PLUGIN_INIT_FUNC);\n#else\n  PluginInitFunc init_func = (PluginInitFunc) NULL;\n#endif /* TAU_WINDOWS */\n\n  if(!init_func) {\n#ifndef TAU_WINDOWS\n    printf(\"TAU: Failed to retrieve TAU_PLUGIN_INIT_FUNC from plugin %s with error:%s\\n\", name, dlerror());\n    dlclose(handle); //TODO : Replace with Tau_plugin_cleanup();\n#endif /* TAU_WINDOWS */\n    return NULL;\n  }\n\n  int return_val = init_func(num_args, args);\n  if(return_val < 0) {\n    printf(\"TAU: Call to init func for plugin %s returned failure error code %d\\n\", name, return_val);\n#ifndef TAU_WINDOWS\n    dlclose(handle); //TODO : Replace with Tau_plugin_cleanup();\n#endif /* TAU_WINDOWS */\n    return NULL;\n  } \n  return handle;\n}\n\n/**************************************************************************************************************************\n * Given a plugin name and fullpath, load a plugin and return a handle to the opened DSO\n * ************************************************************************************************************************/\nvoid* Tau_util_load_plugin(const char *name, const char *path, PluginManager* plugin_manager) {\n#ifndef TAU_WINDOWS\n  void* handle = dlopen(path, RTLD_NOW);\n#else\n  void* handle = NULL;\n#endif /* TAU_WINDOWS */\n  \n  if (handle) {\n    Tau_plugin * plugin = (Tau_plugin *)malloc(sizeof(Tau_plugin));\n    strcpy(plugin->plugin_name, name);\n    plugin->handle = handle;\n    plugin->next = (plugin_manager->plugin_list)->head;\n    (plugin_manager->plugin_list)->head = plugin;\n\n    TAU_VERBOSE(\"TAU: Successfully loaded plugin: %s\\n\", name);\n    return handle;    \n  } else {\n#ifndef TAU_WINDOWS\n    printf(\"TAU: Failed loading %s plugin with error: %s\\n\", name, dlerror());\n#endif /* TAU_WINDOWS */\n    return NULL;\n  }\n}\n\n/**************************************************************************************************************************\n * Initialize Tau_plugin_callbacks structure with default values\n * This is necessary in order to prevent future event additions to affect older plugins\n * ************************************************************************************************************************/\nextern \"C\" void Tau_util_init_tau_plugin_callbacks(Tau_plugin_callbacks * cb) {\n  cb->FunctionRegistrationComplete = 0;\n  cb->MetadataRegistrationComplete = 0;\n  cb->PostInit = 0;\n  cb->Dump = 0;\n  cb->Mpit = 0;\n  cb->FunctionEntry = 0;\n  cb->FunctionExit = 0;\n  cb->Send = 0;\n  cb->Recv = 0;\n  cb->CurrentTimerExit = 0;\n  cb->AtomicEventRegistrationComplete = 0;\n  cb->AtomicEventTrigger = 0;\n  cb->PreEndOfExecution = 0;\n  cb->EndOfExecution = 0;\n  cb->InterruptTrigger = 0;\n  cb->FunctionFinalize = 0;\n  cb->PhaseEntry = 0;\n  cb->PhaseExit = 0;\n}\n\n/**************************************************************************************************************************\n * Helper function that makes a copy of all callbacks for events\n ***************************************************************************************************************************/\nvoid Tau_util_make_callback_copy(Tau_plugin_callbacks * dest, Tau_plugin_callbacks * src) {\n  dest->FunctionRegistrationComplete = src->FunctionRegistrationComplete;\n  dest->MetadataRegistrationComplete = src->MetadataRegistrationComplete;\n  dest->PostInit = src->PostInit;\n  dest->Dump = src->Dump;\n  dest->Mpit = src->Mpit;\n  dest->FunctionEntry = src->FunctionEntry;\n  dest->FunctionExit = src->FunctionExit;\n  dest->Send = src->Send;\n  dest->Recv = src->Recv;\n  dest->CurrentTimerExit = src->CurrentTimerExit;\n  dest->AtomicEventTrigger = src->AtomicEventTrigger;\n  dest->AtomicEventRegistrationComplete = src->AtomicEventRegistrationComplete;\n  dest->PreEndOfExecution = src->PreEndOfExecution;\n  dest->EndOfExecution = src->EndOfExecution;\n  dest->InterruptTrigger = src->InterruptTrigger;\n  dest->FunctionFinalize = src->FunctionFinalize;\n  dest->PhaseEntry = src->PhaseEntry;\n  dest->PhaseExit = src->PhaseExit;\n}\n\n\n/**************************************************************************************************************************\n * Register callbacks associated with well defined events defined in struct Tau_plugin_callbacks\n **************************************************************************************************************************/\nextern \"C\" void Tau_util_plugin_register_callbacks(Tau_plugin_callbacks * cb) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n\n  Tau_plugin_callback_t * callback = (Tau_plugin_callback_t *)malloc(sizeof(Tau_plugin_callback_t));\n  Tau_util_make_callback_copy(&(callback->cb), cb);\n  callback->next = (plugin_manager->callback_list)->head;\n  (plugin_manager->callback_list)->head = callback;\n\n  /* Set some flags to make runtime conditional processing more efficient */\n  if (cb->FunctionRegistrationComplete != 0) { Tau_plugins_enabled.function_registration = 1; }\n  if (cb->MetadataRegistrationComplete != 0) { Tau_plugins_enabled.metadata_registration = 1; }\n  if (cb->PostInit != 0) { Tau_plugins_enabled.post_init = 1; }\n  if (cb->Dump != 0) { Tau_plugins_enabled.dump = 1; }\n  if (cb->Mpit != 0) { Tau_plugins_enabled.mpit = 1; }\n  if (cb->FunctionEntry != 0) { Tau_plugins_enabled.function_entry = 1; }\n  if (cb->FunctionExit != 0) { Tau_plugins_enabled.function_exit = 1; }\n  if (cb->Send != 0) { Tau_plugins_enabled.send = 1; }\n  if (cb->Recv != 0) { Tau_plugins_enabled.recv = 1; }\n  if (cb->CurrentTimerExit != 0) { Tau_plugins_enabled.current_timer_exit = 1; }\n  if (cb->AtomicEventRegistrationComplete != 0) { Tau_plugins_enabled.atomic_event_registration = 1; }\n  if (cb->AtomicEventTrigger != 0) { Tau_plugins_enabled.atomic_event_trigger = 1; }\n  if (cb->PreEndOfExecution != 0) { Tau_plugins_enabled.pre_end_of_execution = 1; }\n  if (cb->EndOfExecution != 0) { Tau_plugins_enabled.end_of_execution = 1; }\n  if (cb->FunctionFinalize != 0) { Tau_plugins_enabled.function_finalize = 1; }\n  if (cb->InterruptTrigger != 0) { Tau_plugins_enabled.interrupt_trigger = 1; }\n  if (cb->PhaseEntry != 0) { Tau_plugins_enabled.phase_entry = 1; }\n  if (cb->PhaseExit != 0) { Tau_plugins_enabled.phase_exit = 1; }\n  \n}\n\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the function registration event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_function_registration_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.FunctionRegistrationComplete != 0) {\n     callback->cb.FunctionRegistrationComplete(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the mpit event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_mpit_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.Mpit != 0) {\n     callback->cb.Mpit(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the dump event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_dump_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.Dump != 0) {\n     callback->cb.Dump(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the function entry event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_function_entry_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.FunctionEntry != 0) {\n     callback->cb.FunctionEntry(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the function exit event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_function_exit_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.FunctionExit != 0) {\n     callback->cb.FunctionExit(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the \"current timer\" exit event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_current_timer_exit_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.CurrentTimerExit != 0) {\n     callback->cb.CurrentTimerExit(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the send event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_send_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.Send != 0) {\n     callback->cb.Send(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the recv event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_recv_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.Recv != 0) {\n     callback->cb.Recv(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the metadata registration event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_metadata_registration_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.MetadataRegistrationComplete != 0) {\n     callback->cb.MetadataRegistrationComplete(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the post init event\n ***************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_post_init_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.PostInit != 0) {\n     callback->cb.PostInit(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the atomic event registration event\n ****************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_atomic_event_registration_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.AtomicEventRegistrationComplete != 0) {\n     callback->cb.AtomicEventRegistrationComplete(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the atomic event trigger event\n *****************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_atomic_event_trigger_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.AtomicEventTrigger != 0) {\n     callback->cb.AtomicEventTrigger(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the pre end of execution event\n ******************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_pre_end_of_execution_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.PreEndOfExecution != 0) {\n     callback->cb.PreEndOfExecution(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n * Overloaded function that invokes all registered callbacks for the end of execution event\n ******************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_end_of_execution_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.EndOfExecution != 0) {\n     callback->cb.EndOfExecution(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/*****************************************************************************\n * Overloaded function that invokes all registered callbacks for the \n * finalize event\n *****************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_function_finalize_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.FunctionFinalize != 0) {\n     callback->cb.FunctionFinalize(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n *  Overloaded function that invokes all registered callbacks for interrupt trigger event\n *******************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_interrupt_trigger_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.InterruptTrigger != 0) {\n     callback->cb.InterruptTrigger(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n *  Overloaded function that invokes all registered callbacks for phase entry event\n *******************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_phase_entry_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.PhaseEntry != 0) {\n     callback->cb.PhaseEntry(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/**************************************************************************************************************************\n *  Overloaded function that invokes all registered callbacks for phase exit event\n *******************************************************************************************************************************/\nvoid Tau_util_invoke_callbacks_(Tau_plugin_event_phase_exit_data_t* data) {\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  Tau_plugin_callback_list * callback_list = plugin_manager->callback_list;\n  Tau_plugin_callback_t * callback = callback_list->head;\n\n  while(callback != NULL) {\n   if(callback->cb.PhaseExit != 0) {\n     callback->cb.PhaseExit(data);\n   }\n   callback = callback->next;\n  }\n}\n\n/*****************************************************************************************************************************\n * Wrapper function that calls the actual callback invocation function based on the event type\n ******************************************************************************************************************************/\nextern \"C\" void Tau_util_invoke_callbacks(Tau_plugin_event event, const void * data) {\n\n  switch(event) {\n    case TAU_PLUGIN_EVENT_FUNCTION_REGISTRATION: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_function_registration_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_METADATA_REGISTRATION: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_metadata_registration_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_POST_INIT: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_post_init_data_t*)data);\n      break;\n    }  \n    case TAU_PLUGIN_EVENT_MPIT: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_mpit_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_DUMP: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_dump_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_FUNCTION_ENTRY: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_function_entry_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_FUNCTION_EXIT: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_function_exit_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_CURRENT_TIMER_EXIT: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_current_timer_exit_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_FUNCTION_FINALIZE: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_function_finalize_data_t*)data);\n      break;\n    }\n     case TAU_PLUGIN_EVENT_SEND: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_send_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_RECV: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_recv_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_ATOMIC_EVENT_REGISTRATION: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_atomic_event_registration_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_ATOMIC_EVENT_TRIGGER: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_atomic_event_trigger_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_PRE_END_OF_EXECUTION: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_pre_end_of_execution_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_END_OF_EXECUTION: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_end_of_execution_data_t*)data);\n      break;\n    } \n    case TAU_PLUGIN_EVENT_INTERRUPT_TRIGGER: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_interrupt_trigger_data_t*)data);\n      break;\n    }\n    case TAU_PLUGIN_EVENT_PHASE_ENTRY: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_phase_entry_data_t*)data);\n      break;\n    }\n    case TAU_PLUGIN_EVENT_PHASE_EXIT: {\n      Tau_util_invoke_callbacks_((Tau_plugin_event_phase_exit_data_t*)data);\n      break;\n    }\n   default: {\n      perror(\"Someone forgot to implement an event for plugins...\\n\");\n      abort();\n    }\n  }\n}\n\n/*****************************************************************************************************************************\n * Clean up all plugins by closing all opened dynamic libraries and free associated structures\n *******************************************************************************************************************************/\nint Tau_util_cleanup_all_plugins() {\n\n  PluginManager* plugin_manager = Tau_util_get_plugin_manager();\n  \n  Tau_plugin * temp_plugin;\n  Tau_plugin_callback_t * temp_callback;\n\n  Tau_plugin * plugin = (plugin_manager->plugin_list)->head;\n  Tau_plugin_callback_t * callback = (plugin_manager->callback_list)->head;\n\n  /*Two separate while loops to handle the weird case that a plugin is loaded but doesn't register anything*/ \n  while(plugin) {\n    temp_plugin = plugin;\n\n    plugin = temp_plugin->next;\n\n    /*Close the dynamic library*/\n#ifndef TAU_WINDOWS \n    if(temp_plugin->handle)\n      dlclose(temp_plugin->handle);\n#endif /* TAU_WINDOWS */\n\n    temp_plugin->next = NULL;\n\n    free(temp_plugin);\n  }   \n\n  while(callback) {\n    temp_callback = callback;\n    callback = temp_callback->next;\n    temp_callback->next = NULL;\n\n    free(temp_callback);\n  }\n\n  return 0;\n}\n\n///////////////////////////////////////////////////////////////////////////\n// Plugin Send/Recv Events\n///////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////\nextern \"C\" void Tau_plugin_sendmsg(long unsigned int type, long unsigned int destination, long unsigned int length, long unsigned int remoteid) {\n    Tau_plugin_event_send_data plugin_data;\n    plugin_data.message_tag = type;\n    plugin_data.destination = destination;\n    plugin_data.bytes_sent = length;\n    plugin_data.tid = RtsLayer::myThread();\n    double timeStamp[TAU_MAX_COUNTERS] = { 0 };\n    RtsLayer::getUSecD(plugin_data.tid, timeStamp);\n    plugin_data.timestamp = (unsigned long)(timeStamp[0]);\n    Tau_util_invoke_callbacks(TAU_PLUGIN_EVENT_SEND, &plugin_data);\n}\n///////////////////////////////////////////////////////////////////////////\nextern \"C\" void Tau_plugin_recvmsg(long unsigned int type, long unsigned int source, long unsigned int length, long unsigned int remoteid) {\n    Tau_plugin_event_recv_data plugin_data;\n    plugin_data.message_tag = type;\n    plugin_data.source = source;\n    plugin_data.bytes_received = length;\n    plugin_data.tid = RtsLayer::myThread();\n    double timeStamp[TAU_MAX_COUNTERS] = { 0 };\n    RtsLayer::getUSecD(plugin_data.tid, timeStamp);\n    plugin_data.timestamp = (unsigned long)(timeStamp[0]);\n    Tau_util_invoke_callbacks(TAU_PLUGIN_EVENT_RECV, &plugin_data);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauGpuAdapterOpenCL.cpp": "#include <dlfcn.h>\n#include <sys/time.h>\n#include <cstdlib>\n#include <cstring>\n#include <queue>\n#include \"TauGpuAdapterOpenCL.h\"\n\ntypedef std::queue<OpenCLGpuEvent*> gpu_event_queue_t;\n\ntypedef std::map<cl_command_queue, OpenCLGpuEvent*> queue_event_map_t;\n\n\nvoid __attribute__ ((constructor)) Tau_opencl_init()\n{\n  Tau_gpu_init();\n}\n\nvoid __attribute__ ((destructor)) Tau_opencl_exit()\n{\n  Tau_destructor_trigger();\n}\n\nstatic gpu_event_queue_t & KernelBuffer()\n{\n  static gpu_event_queue_t queue;\n  return queue;\n}\n\n\nstatic queue_event_map_t & IdentityMap()\n{\n  static queue_event_map_t map;\n  return map;\n}\n\n\ncl_mem clCreateBuffer_noinst(cl_context a1, cl_mem_flags a2, size_t a3, void * a4, cl_int * a5)\n{\n  HANDLE(cl_mem, clCreateBuffer, cl_context, cl_mem_flags, size_t, void *, cl_int *);\n  return clCreateBuffer_h(a1,  a2,  a3,  a4,  a5);\n}\n\ncl_int clGetEventProfilingInfo_noinst(cl_event a1, cl_profiling_info a2, size_t a3, void * a4, size_t * a5)\n{\n  HANDLE(cl_int, clGetEventProfilingInfo, cl_event, cl_profiling_info, size_t, void *, size_t *);\n  return clGetEventProfilingInfo_h(a1,  a2,  a3,  a4,  a5);\n}\n\ncl_int clEnqueueWriteBuffer_noinst(cl_command_queue a1, cl_mem a2, cl_bool a3, size_t a4, size_t a5, const void * a6,\n                                   cl_uint a7, const cl_event * a8, cl_event * a9) \n{\n  HANDLE(cl_int, clEnqueueWriteBuffer, cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void *, cl_uint, \n         const cl_event *, cl_event *);\n  return clEnqueueWriteBuffer_h(a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);\n}\n\ncl_int clGetEventInfo_noinst(cl_event a1, cl_event_info a2, size_t a3, void * a4, size_t * a5)\n{\n  HANDLE(cl_int, clGetEventInfo, cl_event, cl_event_info, size_t, void *, size_t *);\n  return clGetEventInfo_h(a1,  a2,  a3,  a4,  a5);\n}\n\ncl_int clReleaseEvent_noinst(cl_event a1)\n{\n  HANDLE(cl_int, clReleaseEvent, cl_event);\n  return clReleaseEvent_h(a1);\n}\n\nstatic double Tau_opencl_sync_clocks(cl_command_queue commandQueue, cl_context context)\n{\n  int d = 0;\n  void *data = &d;\n  cl_mem buffer;\n  cl_int err;\n  buffer = clCreateBuffer_noinst(context, CL_MEM_READ_WRITE|CL_MEM_ALLOC_HOST_PTR, sizeof(void*), NULL, &err);\n  if (err != CL_SUCCESS) {\n    printf(\"Cannot Create Sync Buffer: %d.\\n\", err);\n    if (err == CL_INVALID_CONTEXT) {\n      printf(\"Invalid context.\\n\");\n    }\n    exit(1);\t\n  }\n\n  double cpu_timestamp;\n  struct timeval tp;\n  cl_ulong gpu_timestamp;\n\n  cl_event sync_event;\n  err = clEnqueueWriteBuffer_noinst(commandQueue, buffer, CL_TRUE, 0, sizeof(void*), data,  0, NULL, &sync_event);\n  if (err != CL_SUCCESS) {\n    printf(\"Cannot Enqueue Sync Kernel: %d.\\n\", err);\n    exit(1);\n  }\n\n  //get CPU timestamp.\n  gettimeofday(&tp, 0);\n  cpu_timestamp = ((double)tp.tv_sec * 1e6 + tp.tv_usec);\n  //get GPU timestamp for finish.\n  err = clGetEventProfilingInfo_noinst(sync_event, CL_PROFILING_COMMAND_END, sizeof(cl_ulong), &gpu_timestamp, NULL);\n  if (err != CL_SUCCESS) {\n    printf(\"Cannot get end time for Sync event.\\n\");\n    exit(1);\t\n  }\n\n  //printf(\"SYNC: CPU= %f GPU= %f.\\n\", cpu_timestamp, ((double)gpu_timestamp/1e3)); \n  return cpu_timestamp - (((double)gpu_timestamp)/1e3);\n}\n\nvoid * Tau_opencl_get_handle(char const * fnc_name)\n{\n#ifdef __APPLE__\n  static char const * libname = \"/System/Library/Frameworks/OpenCL.framework/OpenCL\";\n#else\n  static char const * libname = \"libOpenCL.so\";\n#endif /* __APPLE__ */\n\n  static void * handle = NULL;\n  if (!handle) {\n    handle = (void *)dlopen(libname, RTLD_NOW); \n  }\n  if (!handle) {\n    perror(\"Error opening library in dlopen call\"); \n    return NULL;\n  }\n\n  void * fnc_sym = dlsym(handle, fnc_name);\n  if (!fnc_sym) {\n    perror(\"Error obtaining symbol info from dlopen'ed lib\"); \n    return NULL;\n  }\n  return fnc_sym;\n}\n\n\nOpenCLGpuEvent * Tau_opencl_retrive_gpu(cl_command_queue q)\n{\n  queue_event_map_t & id_map = IdentityMap();\n  queue_event_map_t::iterator it = id_map.find(q);\n  if (it != id_map.end())\n    return it->second;\n\n  cl_device_id id;\n  cl_context context;\n  cl_int err;\n  cl_uint vendor;\n  err = clGetCommandQueueInfo(q, CL_QUEUE_DEVICE, sizeof(cl_device_id), &id, NULL);\n  if (err != CL_SUCCESS)\n  {\t\n    printf(\"error in clGetCommandQueueInfo DEVICE.\\n\"); \n    if (err == CL_INVALID_COMMAND_QUEUE)\n      printf(\"invalid command queue.\\n\");\n  }\n  err = clGetCommandQueueInfo(q, CL_QUEUE_CONTEXT, sizeof(cl_context), &context, NULL);\n  if (err != CL_SUCCESS)\n  {\tprintf(\"error in clGetCommandQueueInfo CONTEXT.\\n\"); }\n\n  //err = clGetDeviceInfo(id, CL_DEVICE_VENDOR_ID, sizeof(cl_uint), &vendor, NULL);\n\n\n  //printf(\"device id: %d.\\n\", id);\n  //printf(\"command id: %lld.\\n\", q);\n  //printf(\"vendor id: %d.\\n\", vendor);\n  double sync_offset = Tau_opencl_sync_clocks(q, context);\n  OpenCLGpuEvent *gId = new OpenCLGpuEvent(id, (x_uint64) q, sync_offset);\n  id_map[q] = gId;\n\n  return gId;\n  //printf(\"New device id found: %d.\\n\", id);\n}\n\nOpenCLGpuEvent * Tau_opencl_new_gpu_event(cl_command_queue queue, char const * name, int memcpy_type)\n{\n  Profiler * p = TauInternal_CurrentProfiler(RtsLayer::myThread());\n  if (p) {\n    OpenCLGpuEvent * gpu_event = Tau_opencl_retrive_gpu(queue)->getCopy();\n    gpu_event->name = name;\n    gpu_event->event = NULL;\n    gpu_event->callingSite = p->CallPathFunction;\n    gpu_event->memcpy_type = memcpy_type;\n    return gpu_event;\n  }\n  return NULL;\n}\n\nvoid Tau_opencl_enter_memcpy_event(const char *name, OpenCLGpuEvent *id, int size, int MemcpyType)\n{\n  Tau_gpu_enter_memcpy_event(name, id->getCopy(), size, MemcpyType);\n}\n\nvoid Tau_opencl_exit_memcpy_event(const char *name, OpenCLGpuEvent *id, int MemcpyType)\n{\n  Tau_gpu_exit_memcpy_event(name, id->getCopy(), MemcpyType);\n}\n\nvoid Tau_opencl_register_gpu_event(OpenCLGpuEvent *evId, double start, double stop)\n{\n#ifndef PTHREADS\n  Tau_gpu_register_gpu_event(evId, start/1e3, stop/1e3);\n#endif /* PTHREADS */\n}\n\nvoid Tau_opencl_register_memcpy_event(OpenCLGpuEvent *evId, double start, double stop, int transferSize, int MemcpyType)\n{\n#ifndef PTHREADS\n  Tau_gpu_register_memcpy_event(evId, start/1e3, stop/1e3, transferSize, MemcpyType, MESSAGE_UNKNOWN);\n#endif /* PTHREADS */\n}\n \nvoid Tau_opencl_enqueue_event(OpenCLGpuEvent * event)\n{\n  KernelBuffer().push(event);\n}\n\nvoid Tau_opencl_register_sync_event()\n{\n  gpu_event_queue_t & event_queue = KernelBuffer();\n\n//  printf(\"\\nin Tau_opencl_register_sync_event\\n\");\n//  printf(\"TAU (opencl): registering sync.\\n\");\n//  printf(\"TAU (opencl): empty buffer? %d.\\n\", event_queue.empty());\n//  printf(\"TAU (opencl): size of buffer: %d.\\n\", event_queue.size());\n\n  while(!event_queue.empty())\n  {\n    cl_int err;\n    cl_ulong startTime, endTime, queuedTime, submitTime;\n    OpenCLGpuEvent* kernel_data = event_queue.front();\n\n//    printf(\"Checking event: %p (%s)\\n\", kernel_data->event, kernel_data->name);\n//    printf(\"Size of buffer: %d.\\n\", event_queue.size());\n//    printf(\"Front of buffer is: %s\\n\", kernel_data->name);\n\n    cl_int status;\n    err = clGetEventInfo_noinst(kernel_data->event, CL_EVENT_COMMAND_EXECUTION_STATUS, sizeof(cl_int), &status, NULL);\n    if (err != CL_SUCCESS) {\n      printf(\"Fatal error: calling clGetEventInfo, exiting.\\n\");\n      exit(1);\n    }\n    if (status != CL_COMPLETE) continue;\n//    printf(\"Complete: %p (%s)\\n\", kernel_data->event, kernel_data->name);\n\n    err = clGetEventProfilingInfo_noinst(kernel_data->event, CL_PROFILING_COMMAND_QUEUED,\n        sizeof(cl_ulong), &queuedTime, NULL);\n    if (err != CL_SUCCESS) {\n      printf(\"Cannot get queued time for Kernel event.\\n\");\n      exit(1);\t\n    }\n    err = clGetEventProfilingInfo_noinst(kernel_data->event, CL_PROFILING_COMMAND_SUBMIT,\n        sizeof(cl_ulong), &submitTime, NULL);\n    if (err != CL_SUCCESS) {\n      printf(\"Cannot get submit time for Kernel event.\\n\");\n      exit(1);\t\n    }\n    err = clGetEventProfilingInfo_noinst(kernel_data->event, CL_PROFILING_COMMAND_START,\n        sizeof(cl_ulong), &startTime, NULL);\n    if (err != CL_SUCCESS) {\n      printf(\"Cannot get start time for Kernel event.\\n\");\n      exit(1);\t\n    }\n\n    err = clGetEventProfilingInfo_noinst(kernel_data->event, CL_PROFILING_COMMAND_END,\n        sizeof(cl_ulong), &endTime, NULL);\n    if (err != CL_SUCCESS) {\n      printf(\"Cannot get end time for Kernel event.\\n\");\n      exit(1);\t\n    }\n\n    //Add context events to gpu event.\n    GpuEventAttributes *map;\n    static TauContextUserEvent *qt;\n    static TauContextUserEvent *st;\n    Tau_get_context_userevent((void**) &qt, \"Time in Queue (us)\");\n    Tau_get_context_userevent((void**) &st, \"Time in Submitted (us)\");\n    map = (GpuEventAttributes *) malloc(sizeof(GpuEventAttributes) * 2);\n    map[0].userEvent = qt;\n    map[0].data = (startTime - queuedTime)/1e3;\n    map[1].userEvent = st;\n    map[1].data = (startTime - submitTime)/1e3;\n    kernel_data->gpu_event_attr = map;\n\n    if (kernel_data->isMemcpy()) {\n//      printf(\"TAU (opencl): isMemcpy kind: %d.\\n\", kernel_data->memcpy_type);\n      Tau_opencl_register_memcpy_event(kernel_data, (double)startTime, (double)endTime,\n          TAU_GPU_UNKNOWN_TRANSFER_SIZE, kernel_data->memcpy_type);\n    } else {\n//      printf(\"TAU (opencl): isKernel.\\n\");\n      Tau_opencl_register_gpu_event(kernel_data, (double)startTime, (double)endTime);\n    }\n    event_queue.pop();\n    clReleaseEvent_noinst(kernel_data->event);\n//    printf(\"Popped buffer.\\n\");\n  }\n//  printf(\"\\n\\n\");\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauRocProfiler.cpp": "/******************************************************************************\nCopyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*******************************************************************************/\n\n#include <hsa.h>\n#include <Profile/TauRocm.h>\n#include \"Profile/rocprofiler.h\"\n#include \"Profile/hsa_rsrc_factory.h\"\n\n//#define DEBUG_PROF 1 \n\n//static TAU_METRIC_TYPE tau_last_timestamp_published = 0;\n//static TAU_METRIC_TYPE tau_last_timestamp_ns = 0L;\n\n#define PUBLIC_API __attribute__((visibility(\"default\")))\n#define CONSTRUCTOR_API __attribute__((constructor))\n#define DESTRUCTOR_API __attribute__((destructor))\n\nconst char * pthread_orig_name = \"libTAU-pthread.so\";\nstatic void *pthread_dso_handle = NULL;\n\n// Dispatch callbacks and context handlers synchronization\npthread_mutex_t rocm_mutex = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;\n// Tool is unloaded\nvolatile bool is_loaded = false;\n\n// Error handler\nvoid fatal(const std::string msg) {\n  fflush(stdout);\n  fprintf(stderr, \"%s\\n\\n\", msg.c_str());\n  fflush(stderr);\n  abort();\n}\n\n\n// Check returned HSA API status\nvoid Tau_rocm_check_status(hsa_status_t status) {\n  if (status != HSA_STATUS_SUCCESS) {\n    const char* error_string = NULL;\n    rocprofiler_error_string(&error_string);\n    fprintf(stderr, \"ERROR: %s\\n\", error_string);\n    abort();\n  }\n}\n\n// Context stored entry type\nstruct context_entry_t {\n  bool valid;\n  hsa_agent_t agent;\n  rocprofiler_group_t group;\n  rocprofiler_callback_data_t data;\n};\n\n// Dump stored context entry\nvoid Tau_rocm_dump_context_entry(context_entry_t* entry) {\n  TAU_VERBOSE(\"inside Tau_rocm_dump_context_entry\\n\");\n  int taskid, queueid;\n  unsigned long long timestamp = 0L;\n  static unsigned long long last_timestamp = Tau_get_last_timestamp_ns();\n  volatile std::atomic<bool>* valid = reinterpret_cast<std::atomic<bool>*>(&entry->valid);\n  while (valid->load() == false) sched_yield();\n\n  const std::string kernel_name = entry->data.kernel_name;\n  const rocprofiler_dispatch_record_t* record = entry->data.record;\n\n  if (!record) return; // there is nothing to do here. \n\n  fflush(stdout);\n  queueid = entry->data.queue_id; \n  taskid = Tau_get_initialized_queues(queueid); \n  if (taskid == -1) { // not initialized\n    TAU_CREATE_TASK(taskid);\n    TAU_VERBOSE(\"Tau_rocm_dump_context_entry: associating queueid %d with taskid %d\\n\", queueid, taskid);\n    Tau_set_initialized_queues(queueid, taskid);  \n    timestamp = record->dispatch; \n    Tau_check_timestamps(last_timestamp, timestamp, \"NEW QUEUE\", taskid);\n    last_timestamp = timestamp; \n    // Set the timestamp for TAUGPU_TIME:\n    Tau_metric_set_synchronized_gpu_timestamp(taskid, ((double)timestamp/1e3));\n    Tau_create_top_level_timer_if_necessary_task(taskid); \n    Tau_add_metadata_for_task(\"TAU_TASK_ID\", taskid, taskid);\n    Tau_add_metadata_for_task(\"ROCM_GPU_ID\", HsaRsrcFactory::Instance().GetAgentInfo(entry->agent)->dev_index, taskid);\n    Tau_add_metadata_for_task(\"ROCM_QUEUE_ID\", entry->data.queue_id, taskid);\n    Tau_add_metadata_for_task(\"ROCM_THREAD_ID\", entry->data.thread_id, taskid);\n  }\n  \n  TAU_VERBOSE(\" --> NEW EVENT --> \\n\");\n  struct TauRocmEvent e(kernel_name, record->begin, record->end, taskid); \n  TAU_VERBOSE(\"KERNEL: name: %s entry: %lu exit: %lu ...\\n\", \n\tkernel_name.c_str(), record->begin, record->end); \n\n#ifdef DEBUG_PROF\n  e.printEvent();\n  cout <<endl;\n#endif /* DEBUG_PROF */\n  Tau_process_rocm_events(e); \n  timestamp = record->begin;\n  //Tau_check_timestamps(last_timestamp, timestamp,\"KERNEL_BEGIN\", taskid);\n/*\n  Tau_metric_set_synchronized_gpu_timestamp(taskid, ((double)timestamp/1e3)); // convert to microseconds\n  TAU_START_TASK(kernel_name.c_str(), taskid);\n*/\n\n  last_timestamp = timestamp; \n  timestamp = record->end;\n  //Tau_check_timestamps(last_timestamp, timestamp, \"KERNEL_END\", taskid);\n  last_timestamp = timestamp; \n/*\n  Tau_metric_set_synchronized_gpu_timestamp(taskid, ((double)timestamp/1e3)); // convert to microseconds\n  TAU_STOP_TASK(kernel_name.c_str(), taskid);\n*/\n  Tau_set_last_timestamp_ns(record->complete); \n  \n#ifdef DEBUG_PROF\n  fprintf(stdout, \"kernel symbol(0x%lx) name(\\\"%s\\\") tid(%ld) queue-id(%u) gpu-id(%u) \",\n    entry->data.kernel_object,\n    kernel_name.c_str(),\n    entry->data.thread_id,\n    entry->data.queue_id,\n    HsaRsrcFactory::Instance().GetAgentInfo(entry->agent)->dev_index);\n  if (record) fprintf(stdout, \"time(%lu,%lu,%lu,%lu)\",\n    record->dispatch,\n    record->begin,\n    record->end,\n    record->complete);\n  fprintf(stdout, \"\\n\");\n  fflush(stdout);\n#endif /* DEBUG_PROF */\n\n  rocprofiler_group_t& group = entry->group;\n  if (group.context == NULL) {\n    fprintf(stderr, \"tool error: context is NULL\\n\");\n    abort();\n  }\n\n  rocprofiler_close(group.context);\n}\n\n// Profiling completion handler\n// Dump and delete the context entry\n// Return true if the context was dumped successfully\nbool Tau_rocm_context_handler(rocprofiler_group_t group, void* arg) {\n  TAU_VERBOSE(\"Inside Tau_rocm_context_handler\\n\");\n  context_entry_t* entry = reinterpret_cast<context_entry_t*>(arg);\n\n  if (pthread_mutex_lock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_lock\");\n    abort();\n  }\n\n  Tau_rocm_dump_context_entry(entry);\n  delete entry;\n\n  if (pthread_mutex_unlock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_unlock\");\n    abort();\n  }\n\n  return false;\n}\n\n// Kernel dispatch callback\nhsa_status_t Tau_rocm_dispatch_callback(const rocprofiler_callback_data_t* callback_data, void* /*user_data*/,\n                               rocprofiler_group_t* group) {\n  TAU_VERBOSE(\"Inside Tau_rocm_dispatch_callback\\n\");\n  // HSA status\n  hsa_status_t status = HSA_STATUS_ERROR;\n\n  // Profiling context\n  rocprofiler_t* context = NULL;\n\n  // Context entry\n  context_entry_t* entry = new context_entry_t();\n\n  // context properties\n  rocprofiler_properties_t properties{};\n  properties.handler = Tau_rocm_context_handler;\n  properties.handler_arg = (void*)entry;\n\n  // Open profiling context\n  status = rocprofiler_open(callback_data->agent, NULL, 0,\n                            &context, 0 /*ROCPROFILER_MODE_SINGLEGROUP*/, &properties);\n  Tau_rocm_check_status(status);\n\n  // Get group[0]\n  status = rocprofiler_get_group(context, 0, group);\n  Tau_rocm_check_status(status);\n\n  // Fill profiling context entry\n  entry->agent = callback_data->agent;\n  entry->group = *group;\n  entry->data = *callback_data;\n  entry->data.kernel_name = strdup(callback_data->kernel_name);\n  reinterpret_cast<std::atomic<bool>*>(&entry->valid)->store(true);\n\n  return HSA_STATUS_SUCCESS;\n}\n\nvoid Tau_rocm_initialize() {\n  TAU_VERBOSE(\"Inside Tau_rocm_initialize\\n\");\n  // Getting GPU device info\n  const AgentInfo* agent_info = NULL;\n  if (HsaRsrcFactory::Instance().GetGpuAgentInfo(0, &agent_info) == false) {\n    fprintf(stderr, \"GetGpuAgentInfo failed\\n\");\n    abort();\n  }\n\n  // Adding dispatch observer\n  rocprofiler_queue_callbacks_t callbacks_ptrs{};\n  callbacks_ptrs.dispatch = Tau_rocm_dispatch_callback;\n  int err=rocprofiler_set_queue_callbacks(callbacks_ptrs, NULL);\n  TAU_VERBOSE(\"err=%d, rocprofiler_set_queue_callbacks\\n\", err);\n}\n\nvoid Tau_rocm_cleanup() {\n  // Unregister dispatch callback\n  TAU_VERBOSE(\"Inside Tau_rocm_cleanup\\n\");\n  rocprofiler_remove_queue_callbacks();\n\n  // Dump stored profiling output data\n  fflush(stdout);\n}\n\n// Tool constructor\nextern \"C\" PUBLIC_API void OnLoadToolProp(rocprofiler_settings_t* settings)\n{\n  TAU_VERBOSE(\"Inside OnLoadToolProp\\n\");\n  Tau_init_initializeTAU();\n  \n  if (pthread_dso_handle == NULL) { }\n\n/*\n  if (pthread_dso_handle == NULL)\n    pthread_dso_handle = (void *) dlopen(pthread_orig_name, RTLD_NOW);\n\n  if (pthread_dso_handle == NULL) {\n    perror(\"OnLoadToolProp: Error opening libTAU-pthread.so library in dlopen call\");\n    return;\n  }\n  TAU_VERBOSE(\"Successfully loaded libTAU-pthread.so\\n\");\n*/\n  for (int i=0; i < TAU_MAX_ROCM_QUEUES; i++) {\n    Tau_set_initialized_queues(i, -1); // set it explicitly\n  }\n#if (!(defined (TAU_MPI) || (TAU_SHMEM)))\n  TAU_PROFILE_SET_NODE(0);\n#endif /* TAU_MPI || TAU_SHMEM */\n  //Tau_create_top_level_timer_if_necessary();\n  if (pthread_mutex_lock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_lock\");\n    abort();\n  }\n  if (is_loaded) return;\n  is_loaded = true;\n  if (pthread_mutex_unlock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_unlock\");\n    abort();\n  }\n\n  // Enable timestamping\n  settings->timestamp_on = true;\n\n  // Initialize profiling\n  Tau_rocm_initialize();\n  HsaRsrcFactory::Instance().PrintGpuAgents(\"ROCm\");\n}\n\n// Tool destructor\nextern \"C\" PUBLIC_API void OnUnloadTool() {\n  TAU_VERBOSE(\"Inside OnUnloadTool\\n\");\n\n\n  if (pthread_mutex_lock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_lock\");\n    abort();\n  }\n  if (!is_loaded) return;\n  is_loaded = false;\n  if (pthread_mutex_unlock(&rocm_mutex) != 0) {\n    perror(\"pthread_mutex_unlock\");\n    abort();\n  }\n\n  Tau_stop_top_level_timer_if_necessary(); \n  // Final resources cleanup\n  Tau_rocm_cleanup();\n}\n\nextern \"C\" DESTRUCTOR_API void destructor() {\n  if (is_loaded == true) OnUnloadTool();\n}\n\n/* hsa_rsrc_factory.cpp */\n\n/* #include \"util/hsa_rsrc_factory.h\" */\n\n#include <dlfcn.h>\n#include <fcntl.h>\n#include <hsa.h>\n#include <hsa_ext_amd.h>\n#include <hsa_ext_finalize.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n#include <atomic>\n#include <cassert>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <vector>\n\n// Callback function to get available in the system agents\nhsa_status_t HsaRsrcFactory::GetHsaAgentsCallback(hsa_agent_t agent, void* data) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n  HsaRsrcFactory* hsa_rsrc = reinterpret_cast<HsaRsrcFactory*>(data);\n  const AgentInfo* agent_info = hsa_rsrc->AddAgentInfo(agent);\n  if (agent_info != NULL) status = HSA_STATUS_SUCCESS;\n  return status;\n}\n\n// This function checks to see if the provided\n// pool has the HSA_AMD_SEGMENT_GLOBAL property. If the kern_arg flag is true,\n// the function adds an additional requirement that the pool have the\n// HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_KERNARG_INIT property. If kern_arg is false,\n// pools must NOT have this property.\n// Upon finding a pool that meets these conditions, HSA_STATUS_INFO_BREAK is\n// returned. HSA_STATUS_SUCCESS is returned if no errors were encountered, but\n// no pool was found meeting the requirements. If an error is encountered, we\n// return that error.\nstatic hsa_status_t FindGlobalPool(hsa_amd_memory_pool_t pool, void* data, bool kern_arg) {\n  hsa_status_t err;\n  hsa_amd_segment_t segment;\n  uint32_t flag;\n\n  if (nullptr == data) {\n    return HSA_STATUS_ERROR_INVALID_ARGUMENT;\n  }\n\n  err = hsa_amd_memory_pool_get_info(pool, HSA_AMD_MEMORY_POOL_INFO_SEGMENT, &segment);\n  CHECK_STATUS(\"hsa_amd_memory_pool_get_info\", err);\n  if (HSA_AMD_SEGMENT_GLOBAL != segment) {\n    return HSA_STATUS_SUCCESS;\n  }\n\n  err = hsa_amd_memory_pool_get_info(pool, HSA_AMD_MEMORY_POOL_INFO_GLOBAL_FLAGS, &flag);\n  CHECK_STATUS(\"hsa_amd_memory_pool_get_info\", err);\n\n  uint32_t karg_st = flag & HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_KERNARG_INIT;\n\n  if ((karg_st == 0 && kern_arg) || (karg_st != 0 && !kern_arg)) {\n    return HSA_STATUS_SUCCESS;\n  }\n\n  *(reinterpret_cast<hsa_amd_memory_pool_t*>(data)) = pool;\n  return HSA_STATUS_INFO_BREAK;\n}\n\n// This is the call-back function for hsa_amd_agent_iterate_memory_pools() that\n// finds a pool with the properties of HSA_AMD_SEGMENT_GLOBAL and that is NOT\n// HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_KERNARG_INIT\nhsa_status_t FindStandardPool(hsa_amd_memory_pool_t pool, void* data) {\n  return FindGlobalPool(pool, data, false);\n}\n\n// This is the call-back function for hsa_amd_agent_iterate_memory_pools() that\n// finds a pool with the properties of HSA_AMD_SEGMENT_GLOBAL and that IS\n// HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_KERNARG_INIT\nhsa_status_t FindKernArgPool(hsa_amd_memory_pool_t pool, void* data) {\n  return FindGlobalPool(pool, data, true);\n}\n\n// Constructor of the class\nHsaRsrcFactory::HsaRsrcFactory(bool initialize_hsa) : initialize_hsa_(initialize_hsa) {\n  hsa_status_t status;\n\n  cpu_pool_ = NULL;\n  kern_arg_pool_ = NULL;\n\n  // Initialize the Hsa Runtime\n  if (initialize_hsa_) {\n    status = hsa_init();\n    CHECK_STATUS(\"Error in hsa_init\", status);\n  }\n\n  // Discover the set of Gpu devices available on the platform\n  status = hsa_iterate_agents(GetHsaAgentsCallback, this);\n  CHECK_STATUS(\"Error Calling hsa_iterate_agents\", status);\n  if (cpu_pool_ == NULL) CHECK_STATUS(\"CPU memory pool is not found\", HSA_STATUS_ERROR);\n  if (kern_arg_pool_ == NULL) CHECK_STATUS(\"Kern-arg memory pool is not found\", HSA_STATUS_ERROR);\n\n  // Get AqlProfile API table\n  aqlprofile_api_ = {0};\n#ifdef ROCP_LD_AQLPROFILE\n  status = LoadAqlProfileLib(&aqlprofile_api_);\n#else\n  status = hsa_system_get_extension_table(HSA_EXTENSION_AMD_AQLPROFILE, 1, 0, &aqlprofile_api_);\n#endif\n  CHECK_STATUS(\"aqlprofile API table load failed\", status);\n\n  // Get Loader API table\n  loader_api_ = {0};\n  status = hsa_system_get_extension_table(HSA_EXTENSION_AMD_LOADER, 1, 0, &loader_api_);\n  CHECK_STATUS(\"loader API table query failed\", status);\n\n  // Instantiate HSA timer\n  timer_ = new HsaTimer;\n  CHECK_STATUS(\"HSA timer allocation failed\",\n    (timer_ == NULL) ? HSA_STATUS_ERROR : HSA_STATUS_SUCCESS);\n\n  // System timeout\n  timeout_ = (timeout_ns_ == HsaTimer::TIMESTAMP_MAX) ? timeout_ns_ : timer_->ns_to_sysclock(timeout_ns_);\n}\n\n// Destructor of the class\nHsaRsrcFactory::~HsaRsrcFactory() {\n  delete timer_;\n  for (auto p : cpu_list_) delete p;\n  for (auto p : gpu_list_) delete p;\n  if (initialize_hsa_) {\n    hsa_status_t status = hsa_shut_down();\n    CHECK_STATUS(\"Error in hsa_shut_down\", status);\n  }\n}\n\nhsa_status_t HsaRsrcFactory::LoadAqlProfileLib(aqlprofile_pfn_t* api) {\n  void* handle = dlopen(kAqlProfileLib, RTLD_NOW);\n  if (handle == NULL) {\n    fprintf(stderr, \"Loading '%s' failed, %s\\n\", kAqlProfileLib, dlerror());\n    return HSA_STATUS_ERROR;\n  }\n  dlerror(); /* Clear any existing error */\n\n  api->hsa_ven_amd_aqlprofile_error_string =\n      (decltype(::hsa_ven_amd_aqlprofile_error_string)*)dlsym(\n          handle, \"hsa_ven_amd_aqlprofile_error_string\");\n  api->hsa_ven_amd_aqlprofile_validate_event =\n      (decltype(::hsa_ven_amd_aqlprofile_validate_event)*)dlsym(\n          handle, \"hsa_ven_amd_aqlprofile_validate_event\");\n  api->hsa_ven_amd_aqlprofile_start =\n      (decltype(::hsa_ven_amd_aqlprofile_start)*)dlsym(handle, \"hsa_ven_amd_aqlprofile_start\");\n  api->hsa_ven_amd_aqlprofile_stop =\n      (decltype(::hsa_ven_amd_aqlprofile_stop)*)dlsym(handle, \"hsa_ven_amd_aqlprofile_stop\");\n#ifdef AQLPROF_NEW_API\n  api->hsa_ven_amd_aqlprofile_read =\n      (decltype(::hsa_ven_amd_aqlprofile_read)*)dlsym(handle, \"hsa_ven_amd_aqlprofile_read\");\n#endif\n  api->hsa_ven_amd_aqlprofile_legacy_get_pm4 =\n      (decltype(::hsa_ven_amd_aqlprofile_legacy_get_pm4)*)dlsym(\n          handle, \"hsa_ven_amd_aqlprofile_legacy_get_pm4\");\n  api->hsa_ven_amd_aqlprofile_get_info = (decltype(::hsa_ven_amd_aqlprofile_get_info)*)dlsym(\n      handle, \"hsa_ven_amd_aqlprofile_get_info\");\n  api->hsa_ven_amd_aqlprofile_iterate_data =\n      (decltype(::hsa_ven_amd_aqlprofile_iterate_data)*)dlsym(\n          handle, \"hsa_ven_amd_aqlprofile_iterate_data\");\n\n  return HSA_STATUS_SUCCESS;\n}\n\n// Add system agent info\nconst AgentInfo* HsaRsrcFactory::AddAgentInfo(const hsa_agent_t agent) {\n  // Determine if device is a Gpu agent\n  hsa_status_t status;\n  AgentInfo* agent_info = NULL;\n\n  hsa_device_type_t type;\n  status = hsa_agent_get_info(agent, HSA_AGENT_INFO_DEVICE, &type);\n  CHECK_STATUS(\"Error Calling hsa_agent_get_info\", status);\n\n  if (type == HSA_DEVICE_TYPE_CPU) {\n    agent_info = new AgentInfo{};\n    agent_info->dev_id = agent;\n    agent_info->dev_type = HSA_DEVICE_TYPE_CPU;\n    agent_info->dev_index = cpu_list_.size();\n\n    status = hsa_amd_agent_iterate_memory_pools(agent, FindStandardPool, &agent_info->cpu_pool);\n    if ((status == HSA_STATUS_INFO_BREAK) && (cpu_pool_ == NULL)) cpu_pool_ = &agent_info->cpu_pool;\n    status = hsa_amd_agent_iterate_memory_pools(agent, FindKernArgPool, &agent_info->kern_arg_pool);\n    if ((status == HSA_STATUS_INFO_BREAK) && (kern_arg_pool_ == NULL)) kern_arg_pool_ = &agent_info->kern_arg_pool;\n    agent_info->gpu_pool = {};\n\n    cpu_list_.push_back(agent_info);\n    cpu_agents_.push_back(agent);\n  }\n\n  if (type == HSA_DEVICE_TYPE_GPU) {\n    agent_info = new AgentInfo{};\n    agent_info->dev_id = agent;\n    agent_info->dev_type = HSA_DEVICE_TYPE_GPU;\n    hsa_agent_get_info(agent, HSA_AGENT_INFO_NAME, agent_info->name);\n    strncpy(agent_info->gfxip, agent_info->name, 4);\n    agent_info->gfxip[4] = '\\0';\n    hsa_agent_get_info(agent, HSA_AGENT_INFO_WAVEFRONT_SIZE, &agent_info->max_wave_size);\n    hsa_agent_get_info(agent, HSA_AGENT_INFO_QUEUE_MAX_SIZE, &agent_info->max_queue_size);\n    hsa_agent_get_info(agent, HSA_AGENT_INFO_PROFILE, &agent_info->profile);\n    agent_info->is_apu = (agent_info->profile == HSA_PROFILE_FULL) ? true : false;\n    hsa_agent_get_info(agent, static_cast<hsa_agent_info_t>(HSA_AMD_AGENT_INFO_COMPUTE_UNIT_COUNT),\n                       &agent_info->cu_num);\n    hsa_agent_get_info(agent, static_cast<hsa_agent_info_t>(HSA_AMD_AGENT_INFO_MAX_WAVES_PER_CU),\n                       &agent_info->waves_per_cu);\n    hsa_agent_get_info(agent, static_cast<hsa_agent_info_t>(HSA_AMD_AGENT_INFO_NUM_SIMDS_PER_CU),\n                       &agent_info->simds_per_cu);\n    hsa_agent_get_info(agent, static_cast<hsa_agent_info_t>(HSA_AMD_AGENT_INFO_NUM_SHADER_ENGINES),\n                       &agent_info->se_num);\n    hsa_agent_get_info(agent,\n                       static_cast<hsa_agent_info_t>(HSA_AMD_AGENT_INFO_NUM_SHADER_ARRAYS_PER_SE),\n                       &agent_info->shader_arrays_per_se);\n\n    agent_info->cpu_pool = {};\n    agent_info->kern_arg_pool = {};\n    status = hsa_amd_agent_iterate_memory_pools(agent, FindStandardPool, &agent_info->gpu_pool);\n    CHECK_ITER_STATUS(\"hsa_amd_agent_iterate_memory_pools(gpu pool)\", status);\n\n    // Set GPU index\n    agent_info->dev_index = gpu_list_.size();\n    gpu_list_.push_back(agent_info);\n    gpu_agents_.push_back(agent);\n  }\n\n  if (agent_info) agent_map_[agent.handle] = agent_info;\n\n  return agent_info;\n}\n\n// Return systen agent info\nconst AgentInfo* HsaRsrcFactory::GetAgentInfo(const hsa_agent_t agent) {\n  const AgentInfo* agent_info = NULL;\n  auto it = agent_map_.find(agent.handle);\n  if (it != agent_map_.end()) {\n    agent_info = it->second;\n  }\n  return agent_info;\n}\n\n// Get the count of Hsa Gpu Agents available on the platform\n//\n// @return uint32_t Number of Gpu agents on platform\n//\nuint32_t HsaRsrcFactory::GetCountOfGpuAgents() { return uint32_t(gpu_list_.size()); }\n\n// Get the count of Hsa Cpu Agents available on the platform\n//\n// @return uint32_t Number of Cpu agents on platform\n//\nuint32_t HsaRsrcFactory::GetCountOfCpuAgents() { return uint32_t(cpu_list_.size()); }\n\n// Get the AgentInfo handle of a Gpu device\n//\n// @param idx Gpu Agent at specified index\n//\n// @param agent_info Output parameter updated with AgentInfo\n//\n// @return bool true if successful, false otherwise\n//\nbool HsaRsrcFactory::GetGpuAgentInfo(uint32_t idx, const AgentInfo** agent_info) {\n  // Determine if request is valid\n  uint32_t size = uint32_t(gpu_list_.size());\n  if (idx >= size) {\n    return false;\n  }\n\n  // Copy AgentInfo from specified index\n  *agent_info = gpu_list_[idx];\n\n  return true;\n}\n\n// Get the AgentInfo handle of a Cpu device\n//\n// @param idx Cpu Agent at specified index\n//\n// @param agent_info Output parameter updated with AgentInfo\n//\n// @return bool true if successful, false otherwise\n//\nbool HsaRsrcFactory::GetCpuAgentInfo(uint32_t idx, const AgentInfo** agent_info) {\n  // Determine if request is valid\n  uint32_t size = uint32_t(cpu_list_.size());\n  if (idx >= size) {\n    return false;\n  }\n\n  // Copy AgentInfo from specified index\n  *agent_info = cpu_list_[idx];\n  return true;\n}\n\n// Create a Queue object and return its handle. The queue object is expected\n// to support user requested number of Aql dispatch packets.\n//\n// @param agent_info Gpu Agent on which to create a queue object\n//\n// @param num_Pkts Number of packets to be held by queue\n//\n// @param queue Output parameter updated with handle of queue object\n//\n// @return bool true if successful, false otherwise\n//\nbool HsaRsrcFactory::CreateQueue(const AgentInfo* agent_info, uint32_t num_pkts,\n                                 hsa_queue_t** queue) {\n  hsa_status_t status;\n  status = hsa_queue_create(agent_info->dev_id, num_pkts, HSA_QUEUE_TYPE_MULTI, NULL, NULL,\n                            UINT32_MAX, UINT32_MAX, queue);\n  return (status == HSA_STATUS_SUCCESS);\n}\n\n// Create a Signal object and return its handle.\n// @param value Initial value of signal object\n// @param signal Output parameter updated with handle of signal object\n// @return bool true if successful, false otherwise\nbool HsaRsrcFactory::CreateSignal(uint32_t value, hsa_signal_t* signal) {\n  hsa_status_t status;\n  status = hsa_signal_create(value, 0, NULL, signal);\n  return (status == HSA_STATUS_SUCCESS);\n}\n\n// Allocate memory for use by a kernel of specified size in specified\n// agent's memory region.\n// @param agent_info Agent from whose memory region to allocate\n// @param size Size of memory in terms of bytes\n// @return uint8_t* Pointer to buffer, null if allocation fails.\nuint8_t* HsaRsrcFactory::AllocateLocalMemory(const AgentInfo* agent_info, size_t size) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n  uint8_t* buffer = NULL;\n  size = (size + MEM_PAGE_MASK) & ~MEM_PAGE_MASK;\n  status = hsa_amd_memory_pool_allocate(agent_info->gpu_pool, size, 0, reinterpret_cast<void**>(&buffer));\n  uint8_t* ptr = (status == HSA_STATUS_SUCCESS) ? buffer : NULL;\n  return ptr;\n}\n\n// Allocate memory to pass kernel parameters.\n// Memory is alocated accessible for all CPU agents and for GPU given by AgentInfo parameter.\n// @param agent_info Agent from whose memory region to allocate\n// @param size Size of memory in terms of bytes\n// @return uint8_t* Pointer to buffer, null if allocation fails.\nuint8_t* HsaRsrcFactory::AllocateKernArgMemory(const AgentInfo* agent_info, size_t size) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n  uint8_t* buffer = NULL;\n  if (!cpu_agents_.empty()) {\n    size = (size + MEM_PAGE_MASK) & ~MEM_PAGE_MASK;\n    status = hsa_amd_memory_pool_allocate(*kern_arg_pool_, size, 0, reinterpret_cast<void**>(&buffer));\n    // Both the CPU and GPU can access the kernel arguments\n    if (status == HSA_STATUS_SUCCESS) {\n      hsa_agent_t ag_list[1] = {agent_info->dev_id};\n      status = hsa_amd_agents_allow_access(1, ag_list, NULL, buffer);\n    }\n  }\n  uint8_t* ptr = (status == HSA_STATUS_SUCCESS) ? buffer : NULL;\n  return ptr;\n}\n\n// Allocate system memory accessible by both CPU and GPU\n// @param agent_info Agent from whose memory region to allocate\n// @param size Size of memory in terms of bytes\n// @return uint8_t* Pointer to buffer, null if allocation fails.\nuint8_t* HsaRsrcFactory::AllocateSysMemory(const AgentInfo* agent_info, size_t size) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n  uint8_t* buffer = NULL;\n  size = (size + MEM_PAGE_MASK) & ~MEM_PAGE_MASK;\n  if (!cpu_agents_.empty()) {\n    status = hsa_amd_memory_pool_allocate(*cpu_pool_, size, 0, reinterpret_cast<void**>(&buffer));\n    // Both the CPU and GPU can access the memory\n    if (status == HSA_STATUS_SUCCESS) {\n      hsa_agent_t ag_list[1] = {agent_info->dev_id};\n      status = hsa_amd_agents_allow_access(1, ag_list, NULL, buffer);\n    }\n  }\n  uint8_t* ptr = (status == HSA_STATUS_SUCCESS) ? buffer : NULL;\n  return ptr;\n}\n\n// Allocate memory for command buffer.\n// @param agent_info Agent from whose memory region to allocate\n// @param size Size of memory in terms of bytes\n// @return uint8_t* Pointer to buffer, null if allocation fails.\nuint8_t* HsaRsrcFactory::AllocateCmdMemory(const AgentInfo* agent_info, size_t size) {\n  size = (size + MEM_PAGE_MASK) & ~MEM_PAGE_MASK;\n  uint8_t* ptr = (agent_info->is_apu && CMD_MEMORY_MMAP)\n      ? reinterpret_cast<uint8_t*>(\n            mmap(NULL, size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_SHARED | MAP_ANONYMOUS, 0, 0))\n      : AllocateSysMemory(agent_info, size);\n  return ptr;\n}\n\n// Wait signal\nvoid HsaRsrcFactory::SignalWait(const hsa_signal_t& signal) const {\n  while (1) {\n    const hsa_signal_value_t signal_value =\n      hsa_signal_wait_scacquire(signal, HSA_SIGNAL_CONDITION_LT, 1, timeout_, HSA_WAIT_STATE_BLOCKED);\n    if (signal_value == 0) {\n      break;\n    } else {\n      CHECK_STATUS(\"hsa_signal_wait_scacquire()\", HSA_STATUS_ERROR);\n    }\n  }\n}\n\n// Wait signal with signal value restore\nvoid HsaRsrcFactory::SignalWaitRestore(const hsa_signal_t& signal, const hsa_signal_value_t& signal_value) const {\n  SignalWait(signal);\n  hsa_signal_store_relaxed(const_cast<hsa_signal_t&>(signal), signal_value);\n}\n\n// Copy data from GPU to host memory\nbool HsaRsrcFactory::Memcpy(const hsa_agent_t& agent, void* dst, const void* src, size_t size) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n  if (!cpu_agents_.empty()) {\n    hsa_signal_t s = {};\n    status = hsa_signal_create(1, 0, NULL, &s);\n    CHECK_STATUS(\"hsa_signal_create()\", status);\n    status = hsa_amd_memory_async_copy(dst, cpu_agents_[0], src, agent, size, 0, NULL, s);\n    CHECK_STATUS(\"hsa_amd_memory_async_copy()\", status);\n    SignalWait(s);\n    status = hsa_signal_destroy(s);\n    CHECK_STATUS(\"hsa_signal_destroy()\", status);\n  }\n  return (status == HSA_STATUS_SUCCESS);\n}\nbool HsaRsrcFactory::Memcpy(const AgentInfo* agent_info, void* dst, const void* src, size_t size) {\n  return Memcpy(agent_info->dev_id, dst, src, size);\n}\n\n// Memory free method\nbool HsaRsrcFactory::FreeMemory(void* ptr) {\n  const hsa_status_t status = hsa_memory_free(ptr);\n  CHECK_STATUS(\"hsa_memory_free\", status);\n  return (status == HSA_STATUS_SUCCESS);\n}\n\n// Loads an Assembled Brig file and Finalizes it into Device Isa\n// @param agent_info Gpu device for which to finalize\n// @param brig_path File path of the Assembled Brig file\n// @param kernel_name Name of the kernel to finalize\n// @param code_desc Handle of finalized Code Descriptor that could\n// be used to submit for execution\n// @return bool true if successful, false otherwise\nbool HsaRsrcFactory::LoadAndFinalize(const AgentInfo* agent_info, const char* brig_path,\n                                     const char* kernel_name, hsa_executable_t* executable,\n                                     hsa_executable_symbol_t* code_desc) {\n  hsa_status_t status = HSA_STATUS_ERROR;\n\n  // Build the code object filename\n  std::string filename(brig_path);\n  std::clog << \"Code object filename: \" << filename << std::endl;\n\n  // Open the file containing code object\n  hsa_file_t file_handle = open(filename.c_str(), O_RDONLY);\n  if (file_handle == -1) {\n    std::cerr << \"Error: failed to load '\" << filename << \"'\" << std::endl;\n    assert(false);\n    return false;\n  }\n\n  // Create code object reader\n  hsa_code_object_reader_t code_obj_rdr = {0};\n  status = hsa_code_object_reader_create_from_file(file_handle, &code_obj_rdr);\n  if (status != HSA_STATUS_SUCCESS) {\n    std::cerr << \"Failed to create code object reader '\" << filename << \"'\" << std::endl;\n    return false;\n  }\n\n  // Create executable.\n  status = hsa_executable_create_alt(HSA_PROFILE_FULL, HSA_DEFAULT_FLOAT_ROUNDING_MODE_DEFAULT,\n                                     NULL, executable);\n  CHECK_STATUS(\"Error in creating executable object\", status);\n\n  // Load code object.\n  status = hsa_executable_load_agent_code_object(*executable, agent_info->dev_id, code_obj_rdr,\n                                                 NULL, NULL);\n  CHECK_STATUS(\"Error in loading executable object\", status);\n\n  // Freeze executable.\n  status = hsa_executable_freeze(*executable, \"\");\n  CHECK_STATUS(\"Error in freezing executable object\", status);\n\n  // Get symbol handle.\n  hsa_executable_symbol_t kernelSymbol;\n  status = hsa_executable_get_symbol(*executable, NULL, kernel_name, agent_info->dev_id, 0,\n                                     &kernelSymbol);\n  CHECK_STATUS(\"Error in looking up kernel symbol\", status);\n\n  // Update output parameter\n  *code_desc = kernelSymbol;\n  return true;\n}\n\n// Print the various fields of Hsa Gpu Agents\nbool HsaRsrcFactory::PrintGpuAgents(const std::string& header) {\n  //std::clog << header << \" :\" << std::endl;\n\n  char key[1024], value[1024];\n\n  const AgentInfo* agent_info;\n  int size = uint32_t(gpu_list_.size());\n  for (int idx = 0; idx < size; idx++) {\n    agent_info = gpu_list_[idx];\n\n    sprintf(key, \"ROCM_AGENT_%d_NAME\", idx);\n    sprintf(value, \"%s\", agent_info->name);\n    TAU_METADATA(key, value);\n//    std::clog << \"> agent[\" << idx << \"] :\" << std::endl;\n//    std::clog << \">> Name : \" << agent_info->name << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_IS_APU\", idx);\n    sprintf(value, \"%d\", agent_info->is_apu);\n    TAU_METADATA(key, value);\n\n//    std::clog << \">> APU : \" << agent_info->is_apu << std::endl;\n    sprintf(key, \"ROCM_AGENT_%d_HSA_PROFILE\", idx);\n    sprintf(value, \"%d\", agent_info->profile);\n    TAU_METADATA(key, value);\n//    std::clog << \">> HSAIL profile : \" << agent_info->profile << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_MAX_WAVE_SIZE\", idx);\n    sprintf(value, \"%d\", agent_info->max_wave_size);\n    TAU_METADATA(key, value);\n\n//    std::clog << \">> Max Wave Size : \" << agent_info->max_wave_size << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_MAX_QUEUE_SIZE\", idx);\n    sprintf(value, \"%d\", agent_info->max_queue_size);\n    TAU_METADATA(key, value);\n\n//    std::clog << \">> Max Queue Size : \" << agent_info->max_queue_size << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_CU_NUMBER\", idx);\n    sprintf(value, \"%d\", agent_info->cu_num);\n    TAU_METADATA(key, value);\n//    std::clog << \">> CU number : \" << agent_info->cu_num << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_WAVES_PER_CU\", idx);\n    sprintf(value, \"%d\", agent_info->waves_per_cu);\n    TAU_METADATA(key, value);\n\n//    std::clog << \">> Waves per CU : \" << agent_info->waves_per_cu << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_SIMDs_PER_CU\", idx);\n    sprintf(value, \"%d\", agent_info->simds_per_cu);\n    TAU_METADATA(key, value);\n\n//    std::clog << \">> SIMDs per CU : \" << agent_info->simds_per_cu << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_SE_NUMBER\", idx);\n    sprintf(value, \"%d\", agent_info->se_num);\n    TAU_METADATA(key, value);\n//    std::clog << \">> SE number : \" << agent_info->se_num << std::endl;\n\n    sprintf(key, \"ROCM_AGENT_%d_SHADER_ARRAYS_PER_SE\", idx);\n    sprintf(value, \"%d\", agent_info->shader_arrays_per_se);\n    TAU_METADATA(key, value);\n//    std::clog << \">> Shader Arrays per SE : \" << agent_info->shader_arrays_per_se << std::endl;\n  \n\n  \n  }\n  return true;\n}\n\nuint64_t HsaRsrcFactory::Submit(hsa_queue_t* queue, const void* packet) {\n  const uint32_t slot_size_b = 0x40;\n\n  // adevance command queue\n  const uint64_t write_idx = hsa_queue_load_write_index_relaxed(queue);\n  hsa_queue_store_write_index_relaxed(queue, write_idx + 1);\n  while ((write_idx - hsa_queue_load_read_index_relaxed(queue)) >= queue->size) {\n    sched_yield();\n  }\n\n  uint32_t slot_idx = (uint32_t)(write_idx % queue->size);\n  uint32_t* queue_slot = reinterpret_cast<uint32_t*>((uintptr_t)(queue->base_address) + (slot_idx * slot_size_b));\n  const uint32_t* slot_data = reinterpret_cast<const uint32_t*>(packet);\n\n  // Copy buffered commands into the queue slot.\n  // Overwrite the AQL invalid header (first dword) last.\n  // This prevents the slot from being read until it's fully written.\n  memcpy(&queue_slot[1], &slot_data[1], slot_size_b - sizeof(uint32_t));\n  std::atomic<uint32_t>* header_atomic_ptr =\n      reinterpret_cast<std::atomic<uint32_t>*>(&queue_slot[0]);\n  header_atomic_ptr->store(slot_data[0], std::memory_order_release);\n\n  // ringdoor bell\n  hsa_signal_store_relaxed(queue->doorbell_signal, write_idx);\n\n  return write_idx;\n}\n\nuint64_t HsaRsrcFactory::Submit(hsa_queue_t* queue, const void* packet, size_t size_bytes) {\n  const uint32_t slot_size_b = 0x40;\n  if ((size_bytes & (slot_size_b - 1)) != 0) {\n    fprintf(stderr, \"HsaRsrcFactory::Submit: Bad packet size %zx\\n\", size_bytes);\n    abort();\n  }\n\n  const char* begin = reinterpret_cast<const char*>(packet);\n  const char* end = begin + size_bytes;\n  uint64_t write_idx = 0;\n  for (const char* ptr = begin; ptr < end; ptr += slot_size_b) {\n    write_idx = Submit(queue, ptr);\n  }\n\n  return write_idx;\n}\n\nHsaRsrcFactory* HsaRsrcFactory::instance_ = NULL;\nHsaRsrcFactory::mutex_t HsaRsrcFactory::mutex_;\nHsaRsrcFactory::timestamp_t HsaRsrcFactory::timeout_ns_ = HsaTimer::TIMESTAMP_MAX;\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/utils/tau_wrap.cpp": "/****************************************************************************\n **                      TAU Portable Profiling Package                     **\n **                      http://www.cs.uoregon.edu/research/paracomp/tau    ** \n *****************************************************************************\n **    Copyright 2007                                                       **\n **    Department of Computer and Information Science, University of Oregon **\n **    Advanced Computing Laboratory, Los Alamos National Laboratory        **\n ****************************************************************************/\n/***************************************************************************\n **      File            : tau_wrap.cpp                                    **\n **      Description     : Generates a wrapper library for external pkgs   **\n **                        for instrumentation with TAU.                   **\n **      Author          : Sameer Shende                                   **\n **      Contact         : sameer@cs.uoregon.edu sameer@paratools.com      **\n **      Documentation   :                                                 **\n ***************************************************************************/ \n\n/* Headers */\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h> \n#include <stdlib.h>\n#if (!defined(TAU_WINDOWS))\n#include <unistd.h>\n#endif //TAU_WINDOWS\n\n#ifdef _OLD_HEADER_\n# include <fstream.h>\n# include <set.h>\n# include <algo.h>\n# include <sstream.h>\n# include <deque.h>\n#else\n# include <fstream> \n# include <algorithm>\n# include <set> \n# include <list>\n# include <string>\n# include <sstream>\n# include <deque>\nusing namespace std;\n#endif\n#include \"pdbAll.h\"\n#include \"tau_datatypes.h\"\n\n\n\n/* defines */\n#ifdef TAU_WINDOWS\n#define TAU_DIR_CHARACTER '\\\\' \n#else\n#define TAU_DIR_CHARACTER '/' \n#endif /* TAU_WINDOWS */\n\n/* Function call interception types:\n * runtime interception: bar remains bar \n * preprocessor interception: bar becomes tau_bar\n * wrapper library interception: bar becomes __wrap_bar\n */\n#define RUNTIME_INTERCEPT  1\n#define PREPROC_INTERCEPT  0\n#define WRAPPER_INTERCEPT -1\n\n/* Known UPC environments */\n#define UPC_UNKNOWN 0\n#define UPC_BERKELEY 1\n#define UPC_GNU 2\n#define UPC_CRAY 3\n#define UPC_XLUPC 4\n\n/* UPC environment */\nint upc_env = UPC_UNKNOWN;\n\n/* Note: order is important here */\nchar const * upc_excluded_functions[][5] = {\n    { /* UPC_UNKNOWN */\n        NULL\n    },\n    { /* UPC_BERKELEY */\n        \"_upcr_alloc\",\n        \"upcri_append_srcloc\",\n        \"upcri_barrier_init\",\n        NULL\n    },\n    { /* UPC_GNU */\n        NULL,\n    },\n    { /* UPC_CRAY */\n        NULL,\n    },\n    { /* UPC_XLUPC */\n        NULL,\n    }\n};\n\n\n//#define DEBUG 1\n\n/* For selective instrumentation */\nextern int processInstrumentationRequests(char *fname);\nextern bool instrumentEntity(const string& function_name);\nextern bool processFileForInstrumentation(const string& file_name);\nextern bool isInstrumentListEmpty(void);\n\n/* Prototypes for selective instrumentation */\nextern bool addFileInstrumentationRequests(PDB& p, pdbFile *file, vector<itemRef*> & itemvec);\n\n\n/* Globals */\nbool memory_flag = false;   /* by default, do not insert malloc.h in instrumented C/C++ files */\nbool strict_typing = false; /* by default unless --strict option is used. */\nbool shmem_wrapper = false; /* by default unless --shmem option is used. */\nbool pshmem_use_underscore_instead_of_p = false; /* by default unless --pshmem_use_underscore_instead_of_p option is used. */\n\n\nstruct FunctionSignatureInfo\n{\n  FunctionSignatureInfo(pdbRoutine * r) :\n    shmem_fortran_interface(false),\n    shmem_len_argcount(0),\n    shmem_pe_argcount(0),\n    shmem_cond_argcount(0),\n    func(r->name()),\n    proto(r->name())\n  { }\n\n  // For shmem wrapping\n  bool shmem_fortran_interface;\n  int shmem_len_argcount;\n  int shmem_pe_argcount;\n  int shmem_cond_argcount;\n\n  // For upc wrapping\n  // ...\n\n  string func;\n  string funcfort;\n  string proto;\n  string returntypename;\n  string funchandle;\n  string rcalledfunc;\n  string funcarg;\n  string funcargfort;\n};\n\n\n///////////////////////////////////////////////////////////////////////////\n//\n///////////////////////////////////////////////////////////////////////////\n\n/* -------------------------------------------------------------------------- */\n/* -- Get a list of instrumentation points for a C program ------------------ */\n/* -------------------------------------------------------------------------- */\n/* Create a vector of items that need action: such as BODY_BEGIN, RETURN etc.*/\nstatic void getCReferencesForWrapper(vector<itemRef*> & itemvec, PDB& pdb, pdbFile *file) \n{\n  /* moved selective instrumentation file processing here */\n  if (!isInstrumentListEmpty()) {\n    /* there are finite instrumentation requests, add requests for this file */\n    addFileInstrumentationRequests(pdb, file, itemvec);\n  }\n}\n\nstatic bool isExcluded(pdbRoutine *r) {\n    if (r->signature()->hasEllipsis()) {\n        // For a full discussion of why vararg functions are difficult to wrap\n        // please see: http://www.swig.org/Doc1.3/Varargs.html#Varargs\n        return true;\n    }\n    for(char const ** ptr=upc_excluded_functions[upc_env]; *ptr; ++ptr) {\n        if (r->name() == *ptr)\n            return true;\n    }\n    if(r->name().find(\"shmem_int16_wait_until\") != string::npos ||\n       r->name().find(\"shmem_int16_wait\") != string::npos ||\n       r->name().find(\"shmem_iget16\") != string::npos)\n\t    return true;\n    return false;\n}\n\nstatic bool isReturnTypeVoid(pdbRoutine *r)\n{\n  string const & rname = r->signature()->returnType()->name();\n  return ((rname.compare(0, 4, \"void\") == 0) &&\n          (rname.find(\"*\") == string::npos));\n}\n\nstatic bool doesRoutineNameContainGet(string const & rname)\n{\n  size_t namelen = rname.size();\n  return (((rname.find(\"get\") != string::npos) || \n          ((rname[namelen-2] == '_') && (rname[namelen-1] == 'g')))\n          && (rname.find(\"name\") == string::npos\n          && rname.find(\"version\") == string::npos));\n}\n\nstatic bool doesRoutineNameContainPut(string const & rname)\n{\n  size_t namelen = rname.size();\n  return ((rname.find(\"put\") != string::npos) || \n          ((rname[namelen-2] == '_') && (rname[namelen-1] == 'p')));\n}\n\n/* Fetch and operate operations include swap, fadd and finc */\nstatic bool doesRoutineNameContainFetchOp(string const & rname)\n{\n  return ((rname.find(\"swap\") != string::npos) || \n          (rname.find(\"fadd\") != string::npos) ||\n          (rname.find(\"finc\") != string::npos));\n}\n\n/* Fetch and operate operations include swap, fadd and finc */\nstatic bool doesRoutineNameContainCondFetchOp(string const & rname)\n{\n  return (rname.find(\"cswap\") != string::npos); \n}\n\nstatic bool isArgumentScalar(string argtype) {\n  return (argtype.find(\"*\"));\n}\n\nstatic char const * getMultiplierString(string const & rname) \n{\n  static char const * names[] = {\n    // List is searched in order, first match returns\n    \"char\", \"short\", \"int\",\n    \"longlong\", \"longdouble\", \"long\", \n    \"double\", \"float\", \"16\", \"32\", \"64\", \"128\",\n    \"4\", \"8\",\n    (char*)0 /* End of list marker */\n  };\n  static char const * values[] = {\n    \"sizeof(char)*\", \"sizeof(short)*\", \"sizeof(int)*\",\n    \"sizeof(long long)*\", \"sizeof(long double)*\", \"sizeof(long)*\", \n    \"sizeof(double)*\", \"sizeof(float)*\", \"2*\", \"4*\", \"8*\", \"16*\",\n    \"4*\", \"8*\",\n    (char*)0 /* End of list marker */\n  };\n\n  for(int i=0; names[i]; ++i) {\n    if(rname.find(names[i]) != string::npos) {\n      return values[i];\n    }\n  }\n  return \"\";\n}\n\nstatic string upc_mythread()\n{\n  switch (upc_env) {\n    case UPC_BERKELEY: return \"upcr_mythread()\";\n    case UPC_CRAY: return \"MYTHREAD\";\n    case UPC_GNU: return \"MYTHREAD\";\n    case UPC_XLUPC: return \"MYTHREAD\";\n    default: return \"MYTHREAD\";\n  }\n}\n\nstatic string upc_threadof(string const & shared)\n{\n  switch (upc_env) {\n    case UPC_BERKELEY: return \"upcr_threadof_shared(\" + shared + \")\";\n    case UPC_CRAY: return \"__real_upc_threadof(\" + shared + \")\";\n    case UPC_GNU: return \"__real_upc_threadof(\" + shared + \")\";\n    case UPC_XLUPC: return \"__real_upc_threadof(\" + shared + \")\";\n    default: return \"upc_threadof(\" + shared + \")\";\n  } \n}\n\nstatic string upc_threads()\n{\n  switch (upc_env) {\n    case UPC_BERKELEY: return \"upcr_threads()\";\n    case UPC_CRAY: return \"THREADS\";\n    case UPC_GNU: return \"THREADS\";\n    case UPC_XLUPC: return \"THREADS\";\n    default: return \"THREADS\";\n  }\n}\n\nvoid printUPCMessageBeforeRoutine(pdbRoutine * r, ofstream & impl, FunctionSignatureInfo sig)\n{\n  string const & rname = r->name();\n\n  bool isPut = false;\n  bool isGet = false;\n  bool isCpy = false;\n  bool isSig = false;\n\n  // FIXME: list functions not supported at this time\n  if ((rname.find(\"_vlist\") != string::npos) ||\n      (rname.find(\"_ilist\") != string::npos)) {\n    return;\n  }\n  // FIXME: strided functions not supported at this time\n  if (rname.find(\"strided\") != string::npos) {\n    return;\n  }\n  // FIXME: semephore functions not supported at this time\n  if (rname.find(\"_sem_\") != string::npos) {\n    return;\n  }\n\n  if (rname.find(\"_memput\") != string::npos) {\n    isPut = true;\n    if (rname.find(\"_signal\") != string::npos) {\n      isSig = true;\n    }\n  } else if (rname.find(\"_memget\") != string::npos) {\n    isGet = true;\n  } else if (rname.find(\"_memcpy\") != string::npos) {\n    isCpy = true;\n  } else if (rname.find(\"_memset\") != string::npos) {\n    isPut = true;\n  }\n\n  if (isGet) {\n    impl << \"  TAU_TRACE_SENDMSG_REMOTE(TAU_UPC_TAGID_NEXT, \" \n         << upc_mythread() << \", a3, \" << upc_threadof(\"a2\") << \");\" << endl;\n  } else if (isPut) {\n    if (isSig) {\n      // This is unsafe.... Maybe in future map the semephore to a tag?\n      // In any case, we need support for _sem_wait for this to work.\n      //impl << \"  TAU_TRACE_SENDMSG((int)a4, upcr_threadof_shared(a1), a3);\" << endl;\n    } else {\n      impl << \"  TAU_TRACE_SENDMSG(TAU_UPC_TAGID_NEXT, \" << upc_threadof(\"a1\") << \", a3);\" << endl;\n    }\n  } else if (isCpy) {\n    impl << \"  size_t dst_thread = \" << upc_threadof(\"a1\") << \";\\n\"\n         << \"  size_t src_thread = \" << upc_threadof(\"a2\") << \";\\n\"\n         << \"  size_t my_thread = \" << upc_mythread() << \";\\n\"\n         << \"  if (my_thread == src_thread) {\\n\"\n         << \"    TAU_TRACE_SENDMSG(TAU_UPC_TAGID_NEXT, dst_thread, a3);\\n\"\n         << \"  } else {\\n\"\n         << \"    TAU_TRACE_SENDMSG_REMOTE(TAU_UPC_TAGID_NEXT, dst_thread, a3, src_thread);\\n\"\n         << \"  }\\n\"\n         << endl;\n  }\n\n}\n\nvoid  printUPCMessageAfterRoutine(pdbRoutine * r, ofstream & impl,  FunctionSignatureInfo sig)\n{\n  string const & rname = r->name();\n\n  bool isPut = false;\n  bool isGet = false;\n  bool isCpy = false;\n  bool isSig = false;\n\n  // FIXME: list functions not supported at this time\n  if ((rname.find(\"_vlist\") != string::npos) ||\n      (rname.find(\"_ilist\") != string::npos)) {\n    return;\n  }\n  // FIXME: strided functions not supported at this time\n  if (rname.find(\"strided\") != string::npos) {\n    return;\n  }\n  // FIXME: semephore functions not supported at this time\n  if (rname.find(\"_sem_\") != string::npos) {\n    return;\n  }\n\n  if (rname.find(\"_memput\") != string::npos) {\n    isPut = true;\n    if (rname.find(\"_signal\") != string::npos) {\n      isSig = true;\n    }\n  } else if (rname.find(\"_memget\") != string::npos) {\n    isGet = true;\n  } else if (rname.find(\"_memcpy\") != string::npos) {\n    isCpy = true;\n  } else if (rname.find(\"_memset\") != string::npos) {\n    isPut = true;\n  }\n  \n  if (isGet) {\n    impl << \"  TAU_TRACE_RECVMSG(TAU_UPC_TAGID, \" << upc_threadof(\"a2\") << \", a3);\" << endl;\n  } else if (isPut && !isSig) {\n    impl << \"  TAU_TRACE_RECVMSG_REMOTE(TAU_UPC_TAGID, \" << upc_mythread() << \", a3, \" \n         << upc_threadof(\"a1\") << \");\" << endl;\n  } else if (isCpy) {\n    impl << \"  if (my_thread == src_thread) {\\n\"\n         << \"    TAU_TRACE_RECVMSG_REMOTE(TAU_UPC_TAGID, my_thread, a3, dst_thread);\\n\"\n         << \"  } else {\\n\"\n         << \"    TAU_TRACE_RECVMSG(TAU_UPC_TAGID, src_thread, a3);\\n\"\n         << \"  }\\n\"\n         << endl;\n  }\n}\n\n\nvoid printShmemMessageBeforeRoutine(pdbRoutine *r, ofstream& impl, FunctionSignatureInfo sig)\n{\n  int len_argument_no = sig.shmem_len_argcount;\n  int pe_argument_no = sig.shmem_pe_argcount;\n  bool fortran_interface = sig.shmem_fortran_interface;\n  string const & rname = r->name();\n  char length_string[1024];\n  char processor_arg[256];\n\n  if (fortran_interface) {\n    sprintf(processor_arg, \"(*a%d)\", pe_argument_no);\n  } else {\n    sprintf(processor_arg, \"a%d\", pe_argument_no);\n  }\n\n  char const * multiplier_string = getMultiplierString(rname);\n#ifdef DEBUG\n  printf(\"Multiplier string = %s\\n\", multiplier_string);\n#endif /* DEBUG */\n  if (len_argument_no != 0) {\n    if (fortran_interface) {\n      sprintf(length_string, \"%s (*a%d)\", multiplier_string, len_argument_no);\n    } else {\n      sprintf(length_string, \"%sa%d\", multiplier_string, len_argument_no);\n    }\n  } else {\n    sprintf(length_string, \"%s1\", multiplier_string);\n  }\n\n  if (doesRoutineNameContainGet(rname) || doesRoutineNameContainFetchOp(rname)) {\n#ifdef DEBUG\n    cout << \"Routine name \" << rname << \" contains Get variant\" << endl;\n#endif /* DEBUG */\n    impl <<\"  TAU_TRACE_SENDMSG_REMOTE(TAU_SHMEM_TAGID_NEXT, Tau_get_node(), \"<<length_string<<\", \"<<processor_arg<<\");\"<<endl;\n  }\n  if (doesRoutineNameContainPut(rname)) {\n#ifdef DEBUG\n    cout << \"Routine name \" << rname << \" contains Put variant\" << endl;\n#endif /* DEBUG */\n    impl <<\"  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, \"<<processor_arg<<\", \"<<length_string<<\");\"<<endl;\n  }\n  if(rname.find(\"barrier_all\") != string::npos) {\n    impl << \"  TAU_TRACE_BARRIER_ALL_START(TAU_SHMEM_TAGID_NEXT);\" << endl;\n  } else if(rname.find(\"barrier\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_BARRIER, a1, a2, a3, 0, 0, -1);\" << endl;\n  } else if(rname.find(\"broadcast32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 4*a3, 4*a3, a5);\" << endl;\n  } else if(rname.find(\"broadcast4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 4*a3, 4*a3, a4);\" << endl;\n  } else if(rname.find(\"broadcast64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 8*a3, 8*a3, a4);\" << endl;\n  } else if(rname.find(\"broadcast8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 8*a3, 8*a3, a4);\" << endl;\n  } else if(rname.find(\"fcollect4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"fcollect32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"fcollect8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"fcollect64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"collect4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"collect32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"collect8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"collect64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"to_all\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLREDUCE, a4, a5, a6, 0, 0, -1);\" << endl;\n  } else if(rname.find(\"alltoall32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLTOALL, a4, a5, a6, a3*4*a6, a3*4, -1);\" << endl;\n  } else if(rname.find(\"alltoall64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_BEGIN(TAU_SHMEM_TAGID_NEXT, TAU_TRACE_COLLECTIVE_TYPE_ALLTOALL, a4, a5, a6, a3*8*a6, a3*8, -1);\" << endl;\n  }\n}\n\nvoid  printShmemMessageAfterRoutine(pdbRoutine *r, ofstream& impl, FunctionSignatureInfo sig)\n{\n  int len_argument_no = sig.shmem_len_argcount;\n  int pe_argument_no = sig.shmem_pe_argcount;\n  int cond_argument_no = sig.shmem_cond_argcount;\n  bool fortran_interface = sig.shmem_fortran_interface;\n  string const & rname = r->name();\n  char length_string[1024];\n  char processor_arg[256];\n  char cond_string[1024];\n  bool is_it_a_get = false;\n  bool is_it_a_fetchop = false;\n  bool is_it_a_cond_fetchop = false;\n  bool is_it_a_put = false;\n\n  if (fortran_interface) {\n    sprintf(processor_arg, \"(*a%d)\", pe_argument_no);\n  } else {\n    sprintf(processor_arg, \"a%d\", pe_argument_no);\n  }\n\n  char const * multiplier_string = getMultiplierString(rname);\n#ifdef DEBUG\n  printf(\"Multiplier string = %s\\n\", multiplier_string);\n#endif /* DEBUG */\n  if (len_argument_no != 0) {\n    if (fortran_interface) {\n      sprintf(length_string, \"%s (*a%d)\", multiplier_string, len_argument_no);\n    } else {\n      sprintf(length_string, \"%sa%d\", multiplier_string, len_argument_no);\n    }\n  } else {\n    sprintf(length_string, \"%s1\", multiplier_string);\n  }\n  is_it_a_get = doesRoutineNameContainGet(rname);\n  is_it_a_fetchop = doesRoutineNameContainFetchOp(rname);\n  is_it_a_cond_fetchop = doesRoutineNameContainCondFetchOp(rname);\n\n  if ((rname.find(\"shmem_init\") != string::npos) ||\n      (rname.find(\"start_pes\") != string::npos)) {\n      impl<<\"Tau_set_usesSHMEM(1);\"<<endl;\n      impl<<\"TauTraceOTF2InitShmem_if_necessary();\"<<endl;\n#if defined(SHMEM_1_1) || defined(SHMEM_1_2)\n      impl << \"  tau_totalnodes(1,__real__num_pes());\"<<endl;\n      impl << \"  TAU_PROFILE_SET_NODE(__real__my_pe());\"<<endl;\n#else\n      impl << \"  tau_totalnodes(1,__real_shmem_n_pes());\"<<endl;\n      impl << \"  TAU_PROFILE_SET_NODE(__real_shmem_my_pe());\"<<endl;\n#endif /* SHMEM_1_1 || SHMEM_1_2 */\n  }\n\n  if (is_it_a_get || is_it_a_fetchop ) { /* Get */\n#ifdef DEBUG\n    cout << \"Routine name \" << rname << \" contains Get variant\" << endl;\n#endif /* DEBUG */\n    impl <<\"  TAU_TRACE_RECVMSG(TAU_SHMEM_TAGID, \"<<processor_arg<<\", \"<<length_string<<\");\"<<endl;\n  }\n  if (is_it_a_cond_fetchop || is_it_a_fetchop) { /* add condition */\n    if (is_it_a_cond_fetchop && (cond_argument_no == 0)) {\n#ifdef DEBUG\n      cout << \"WARNING: in fetchop function \" << rname << \", cond_argument_no is 0???\" << endl;\n#endif /* DEBUG */\n    }\n    string indent(\"\"); /* no indent by default */\n    bool isVoid = isReturnTypeVoid(r);\n    if (is_it_a_cond_fetchop && !isVoid) {\n      indent=string(\"  \");\n      if (fortran_interface) {\n        sprintf(cond_string, \"  if (retval == (*a%d)) { \", cond_argument_no);\n      } else {\n        sprintf(cond_string, \"  if (retval == a%d) { \", cond_argument_no);\n      }\n      impl <<cond_string<<endl;; \n    }\n    impl <<indent<<\"  TAU_TRACE_SENDMSG(TAU_SHMEM_TAGID_NEXT, \"<<processor_arg<<\", \"<<length_string<<\");\"<<endl;\n    impl <<indent<<\"  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), \"<<length_string<<\", \"<<processor_arg<<\");\"<<endl;\n    if (is_it_a_cond_fetchop && !isVoid) {\n      impl<<indent<<\"}\"<<endl;\n    }\n  }\n  if (doesRoutineNameContainPut(rname)) {\n#ifdef DEBUG\n    cout << \"Routine name \" << rname << \" contains Put variant\" << endl;\n#endif /* DEBUG */\n    impl <<\"  TAU_TRACE_RECVMSG_REMOTE(TAU_SHMEM_TAGID, Tau_get_node(), \"<<length_string<<\", \"<<processor_arg<<\");\"<<endl;\n  }\n  if(rname.find(\"barrier_all\") != string::npos) {\n    impl << \"  TAU_TRACE_BARRIER_ALL_END(TAU_SHMEM_TAGID);\" << endl;\n  } else if(rname.find(\"barrier\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_BARRIER, a1, a2, a3, 0, 0, -1);\" << endl;\n  } else if(rname.find(\"broadcast32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 4*a3, 4*a3, a5);\" << endl;\n  } else if(rname.find(\"broadcast4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 4*a3, 4*a3, a4);\" << endl;\n  } else if(rname.find(\"broadcast64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 8*a3, 8*a3, a4);\" << endl;\n  } else if(rname.find(\"broadcast8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_BROADCAST, a5, a6, a7, 8*a3, 8*a3, a4);\" << endl;\n  } else if(rname.find(\"fcollect4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"fcollect32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"fcollect8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"fcollect64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHERV, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"collect4\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"collect32\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*4, a3*4, -1);\" << endl;\n  } else if(rname.find(\"collect8\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"collect64\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLGATHER, a4, a5, a6, a3*8, a3*8, -1);\" << endl;\n  } else if(rname.find(\"to_all\") != string::npos) {\n    impl << \"  TAU_TRACE_RMA_COLLECTIVE_END(TAU_SHMEM_TAGID, TAU_TRACE_COLLECTIVE_TYPE_ALLREDUCE, a4, a5, a6, 0, 0, -1);\" << endl;\n  }\n}\n\nvoid printFunctionNameInOutputFile(pdbRoutine *r, ofstream& impl, char const * prefix, FunctionSignatureInfo & sig)\n{\n  sig.func = r->name() + \"(\";\n  sig.funcfort = r->name() + \"(\";\n  sig.proto = r->name() + \"(\";\n  if(shmem_wrapper) {\n    sig.rcalledfunc = r->name() + \"_handle (\";\n    sig.funchandle = \"_handle) (\";\n  }\n  else {\n    sig.rcalledfunc = \"(*\" + r->name() + \"_h) (\";\n    sig.funchandle = \"_h) (\";\n  }\n  sig.funcarg = \"(\";\n  sig.funcargfort = \"(\";\n\n  pdbGroup const * grp = r->signature()->returnType()->isGroup();\n  if (grp) { \n    sig.returntypename = grp->name();\n  } else {\n    sig.returntypename = r->signature()->returnType()->name();\n    if (upc_env && (sig.returntypename.compare(0, 10, \"shared[1] \") == 0)) {\n      sig.returntypename.replace(0, 10, \"shared   \");\n    }\n  }\n  impl << \"extern \" << sig.returntypename << prefix << sig.func; \n\n#ifdef DEBUG\n  cout <<\"Examining \"<<r->name()<<endl;\n  cout <<\"Return type :\"<<sig.returntypename<<endl;\n#endif /* DEBUG */\n\n  int argcount = 1;\n  pdbType::argvec const & av = r->signature()->arguments();\n  for(pdbType::argvec::const_iterator argsit = av.begin();\n      argsit != av.end(); argsit++, argcount++)\n  {\n#ifdef DEBUG\n    cout <<\"Argument \" << argsit->name() <<\" Type \" << argsit->type()->name() << endl;\n#endif /* DEBUG */\n\n    if (shmem_wrapper) {\n      if ((argsit->name().compare(\"len\") == 0) || \n          (argsit->name().compare(\"nelems\") == 0)) {\n#ifdef DEBUG\n        printf(\"Argcount = %d for len\\n\", argcount); \n#endif /* DEBUG */\n        sig.shmem_len_argcount = argcount; \n        if (argsit->type()->kind() == pdbItem::TY_PTR) {\n          sig.shmem_fortran_interface = true;\n        }\n      }\n      if (argsit->name().compare(\"pe\") == 0) {\n#ifdef DEBUG\n        printf(\"Argcount = %d for pe\\n\", argcount); \n#endif /* DEBUG */\n        sig.shmem_pe_argcount = argcount; \n        if (argsit->type()->kind() == pdbItem::TY_PTR) {\n          sig.shmem_fortran_interface = true;\n        }\n      }\n      if ((argsit->name().compare(\"match\") == 0) || \n          (argsit->name().compare(\"cond\") == 0)) {\n#ifdef DEBUG\n        printf(\"Argcount = %d for match/cond\\n\", argcount); \n#endif /* DEBUG */\n        sig.shmem_cond_argcount = argcount; \n      }\n    }\n\n    if (argcount != 1) { /* not a startup */\n      sig.func.append(\", \");\n      sig.funcfort.append(\", \");\n      sig.proto.append(\", \");\n      sig.rcalledfunc.append(\", \");\n      sig.funchandle.append(\", \");\n      sig.funcarg.append(\", \");\n      sig.funcargfort.append(\", \");\n      impl<<\", \";\n    }\n\n    char number[256];\n    sprintf(number, \"%d\", argcount);\n    const pdbGroup *gr;\n    string argtypename;\n    string argtypenamefort;\n    if ((gr = argsit->type()->isGroup()) != 0) {\n      argtypename = gr->name();\n    } else {\n      argtypename = argsit->type()->name();\n    }\n\n    /* headers sometimes have struct members in the argument name:\n     *    const struct upc_filevec {upc_off_t offset;size_t len;}*\n     * We need to erase everything between the two curly braces */\n    int pos1 = argtypename.find(\"{\");\n    int pos2 = argtypename.find(\"}\");\n    if (pos1 != string::npos && pos2 != string::npos) {\n#ifdef DEBUG\n      cout <<\"BEFORE ARG type=\"<<argtypename<<endl;\n#endif /* DEBUG */\n      argtypename.erase(pos1, pos2-pos1+1);\n#ifdef DEBUG\n      cout <<\"AFTER  ARG type=\"<<argtypename<<endl;\n#endif /* DEBUG */\n    }\n\n    if ((upc_env == UPC_GNU) && argtypename.compare(0, 10, \"shared[1] \") == 0) {\n      argtypename.replace(0, 10, \"shared \");\n    }\n\n    argtypenamefort = argtypename;\n    if(shmem_wrapper) {\n      if((argtypenamefort.compare(0, 3, \"int\") == 0) &&\n\t((argtypenamefort.length() >= 7) && (argtypenamefort.compare(3,4, \"16_t\") != 0) && (argtypenamefort.compare(3,4, \"32_t\") != 0) && (argtypenamefort.compare(3,4, \"64_t\") != 0))) {\n        argtypenamefort.erase(0, 3);\n        argtypenamefort.insert(0, \"SHMEM_FINT\");\n      }\n      if(argtypenamefort.compare(0, 6, \"size_t\") == 0) {\n        argtypenamefort.erase(0, 6);\n        argtypenamefort.insert(0, \"SHMEM_FINT\");\n      }\n    }\n    int pos3 = argtypenamefort.find(\"*\");\n    if(pos3 == string::npos) {\n      sig.funcargfort.append(argtypenamefort + \" *\");\n      sig.funcfort.append(\"*a\" + string(number));\n    }\n    else {\n      sig.funcargfort.append(argtypenamefort);\n      sig.funcfort.append(\"a\" + string(number));\n    }\n\n    sig.func.append(\"a\" + string(number));\n    sig.proto.append(argtypename + \" a\" + string(number));\n    sig.funchandle.append(argtypename);\n    sig.rcalledfunc.append(\" a\" + string(number));\n    sig.funcarg.append(argtypename);\n\n    /* We need to handle the case int (*)[] separately generating \n       int (*a1)[]  instead of int (*)[] a1 in the impl file */\n    const char *found;\n    const char *examinedarg = argtypename.c_str();\n    if ((found = strstr(examinedarg, \"(*)\")) != 0) {\n      found += 2; /* Reach ) */\n      //printf(\"found = %s diff = found  - examinedarg = %d \\n\", found, found - examinedarg);\n      int i;\n      for (i=0; i < found - examinedarg; i++) {\n        //printf(\"Printing %c\\n\", examinedarg[i]);\n        impl << examinedarg[i];\n      }\n      impl<<\"a\"<<number;\n      sig.funcarg.append(\"a\" + string(number));\n      sig.funcargfort.append(\"a\" + string(number));\n      for(i=found - examinedarg; i < strlen(examinedarg); i++) {\n        //printf(\"after number Printing %c\\n\", examinedarg[i]);\n        impl << examinedarg[i];\n      }\n    } else {\n      /* print: for (int a, double b), this prints \"int\" */\n      if (upc_env) {\n        /* upc headers sometimes have struct members in the argument name:\n           const struct upc_filevec {upc_off_t offset;size_t len;}* \n           We need to erase everything between the two curly braces */\n        size_t pos1 = argtypename.find(\"{\");\n        size_t pos2 = argtypename.find(\"}\");\n        if (pos1 != string::npos && pos2 != string::npos) {\n#ifdef DEBUG\n          cout <<\"BEFORE ARG type=\"<<argtypename<<endl;\n#endif /* DEBUG */\n          argtypename.erase(pos1, pos2-pos1+1);\n#ifdef DEBUG\n          cout <<\"AFTER  ARG type=\"<<argtypename<<endl;\n#endif /* DEBUG */\n        }\n      } \n      impl<<argtypename<<\" \";\n      /* print: for (int a, double b), this prints \"a1\" in int a1, */\n      impl<<\"a\"<<number;\n      sig.funcarg.append(\" a\" + string(number));\n      sig.funcargfort.append(\" a\" + string(number));\n    }\n    if (r->signature()->hasEllipsis()) {\n      //printf(\"Has ellipsis...\\n\");\n      impl<<\", ...\";\n    }\n  }\n  sig.func.append(\")\");\n  sig.funcfort.append(\")\");\n  sig.proto.append(\")\");\n  sig.rcalledfunc.append(\")\");\n  sig.funcarg.append(\")\");\n  sig.funcargfort.append(\")\");\n  impl<<\") \";\n}\n\nvoid printRoutineInOutputFile(pdbRoutine *r, ofstream& header, ofstream& impl, string& group_name, int runtime, string& runtime_libname)\n{\n  FunctionSignatureInfo sig(r);\n\n  string rname = r->name();\n  string protoname = r->name() + \"_p\";\n  string macro(\"#define \");\n  string retstring(\"    return;\");\n  string dltext;\n\n  if (isExcluded(r)) {\n    impl <<\"#warning \\\"TAU: Not generating wrapper for function \"<<r->name()<<\"\\\"\"<<endl;\n    cout <<\"TAU: Not generating wrapper for function \"<<r->name()<<endl;\n    return;\n  }\n\n  impl << endl; \n  impl << \"/**********************************************************\"<<endl;\n  impl << \"   \"<<r->name()<< endl;\n  impl << \" **********************************************************/\"<<endl<<endl;\n\n  bool isVoid = isReturnTypeVoid(r);\n  if (runtime == WRAPPER_INTERCEPT) { /* linker-based instrumentation */\n    printFunctionNameInOutputFile(r, impl, \"  __real_\", sig);\n    impl <<\";\"<<endl;\n  }\n\n  if (runtime == RUNTIME_INTERCEPT) { /* linker-based instrumentation */\n    printFunctionNameInOutputFile(r, impl, \"  __wrap_\", sig);\n    impl <<\";\"<<endl;\n  }\n\n  char const * prefix = \" \";\n//  if (!shmem_wrapper) {\n    switch (runtime) {\n      case RUNTIME_INTERCEPT: \n        /* for runtime interception, put a blank, the name stays the same*/\n        if(shmem_wrapper)\n          prefix = \"  __real_\";\n        else\n          prefix = \"  \";\n        break;\n      case PREPROC_INTERCEPT:\n        /* for standard preprocessor redirection, bar becomes tau_bar */\n        prefix = \"  tau_\";\n        break;\n      case WRAPPER_INTERCEPT:\n        /* for wrapper library interception, it becomes __wrap_bar */\n        prefix = \"  __wrap_\";\n        break;\n      default: \n        /* hmmm, what about any other case? Just use __wrap_bar */\n        prefix = \"  __wrap_\";\n        break;\n    }\n//  }\n\n  printFunctionNameInOutputFile(r, impl, prefix, sig);\n  impl << \" {\\n\" << endl;\n\n  string funcprototype = sig.funchandle + \");\";\n  string funchandle = sig.funchandle + \") = NULL;\";\n\n  if (runtime == RUNTIME_INTERCEPT) {\n      ostringstream buff;\n    if(shmem_wrapper) {\n       std::string type = r->name() + \"_t\";\n       std::string handle =  r->name() + \"_handle\";\n       buff << \"  typedef \" << (isVoid ? \"void\" : sig.returntypename)  << \" (*\" << type << \")\" << sig.funcarg << \";\\n\"\n            << \"  static \" << type << \" \" << handle << \" = (\" << type << \")NULL;\\n\"\n            << \"  if (!\" << handle << \") {\\n\"\n            << \"    \" << handle << \" = get_function_handle(\\\"\" << r->name() << \"\\\");\\n\"\n            << \"  }\\n\" << endl;\n    }\n    else {\n      if (isVoid) {\n        if (strict_typing) {\n          impl << \"  typedef void (*\"<<protoname<<funcprototype<<endl;\n          impl << \"  static \"  << protoname << \"_h \" << r->name() << \"_h = NULL;\"<<endl;\n        } else {\n          impl <<\"  static void (*\"<<r->name()<<funchandle<<endl;\n        }\n      } else {\n        if (strict_typing) {\n          impl << \"  typedef \" << sig.returntypename << \" (*\"<<protoname<<funcprototype<<endl;\n          impl << \"  static \"  << protoname << \"_h \" << r->name() << \"_h = NULL;\"<<endl;\n        } else {\n          impl <<\"  static \"<<sig.returntypename<<\" (*\"<<r->name()<<funchandle<<endl;\n        }\n        retstring = string(\"    return retval;\");\n      }\n\n      buff << \"  if (tau_handle == NULL) \\n\"\n           << \"    tau_handle = (void *) dlopen(tau_orig_libname, RTLD_NOW); \\n\\n\"\n           << \"  if (tau_handle == NULL) { \\n\"\n           << \"    perror(\\\"Error opening library in dlopen call\\\"); \\n\"\n           << retstring << \"\\n\"\n           << \"  } else { \\n\"\n           << \"    if (\" << r->name() << \"_h == NULL)\\n\"\n           << \"      \";\n      if (strict_typing)\n        buff << r->name() << \"_h = (\" << protoname << \"_h) dlsym(tau_handle,\\\"\" << r->name() << \"\\\"); \\n\";\n      else\n        buff << r->name() << \"_h = dlsym(tau_handle,\\\"\" << r->name() << \"\\\"); \\n\";\n      buff << \"    if (\" << r->name() << \"_h == NULL) {\\n\"\n           << \"      perror(\\\"Error obtaining symbol info from dlopen'ed lib\\\"); \\n\"\n           << \"  \" << retstring << \"\\n\"\n           << \"    }\\n\";\n    }\n    dltext = buff.str();\n  } /* if (runtime == RUNTIME_INTERCEPT) */\n\n#ifdef SHMEM\n#ifdef MPI\n#ifdef CRAY\n  if(runtime == WRAPPER_INTERCEPT && shmem_wrapper && \n      ( rname == \"start_pes\"  || rname == \"shmem_init\")) {\n    impl << \"  MPI_Init();\" << endl;\n  }\n#endif\n#endif\n#endif\n\n  if (!isVoid) {\n    impl<<\"  \"<<sig.returntypename<< \" retval;\"<<endl;\n  }\n\n  /* Now put in the body of the routine */\n\n  if(upc_env) {\n    impl << \"  if (tau_upc_node == -1) {\\n\";\n      if (upc_env == UPC_XLUPC) {\n        impl << \"    TAU_PROFILE_SET_NODE(MYTHREAD); \\n\";\n      }\n      impl  << \"    tau_upc_node = TAU_PROFILE_GET_NODE();\\n\"\n         << \"    if (tau_upc_node == -1) {\\n\";\n    if (isVoid) {\n      impl << \"      __real_\" << sig.func << \";\\n\"\n           << \"      return;\" << endl;\n    } else {\n      impl << \"      return __real_\" << sig.func << \";\" << endl;\n    }\n    impl << \"    } else {\\n\"\n         << \"      tau_totalnodes(1,\" << upc_threads() << \");\\n\"\n         << \"    }\\n\"\n         << \"  }\\n\"\n         << endl;\n  } \n\n  if((shmem_wrapper && runtime != RUNTIME_INTERCEPT) || !shmem_wrapper)\n    impl<<\"  TAU_PROFILE_TIMER(t,\\\"\"<<r->fullName()<<\"\\\", \\\"\\\", \"<<group_name<<\");\"<<endl;\n  if (runtime == RUNTIME_INTERCEPT)\n    impl <<dltext;\n  if((shmem_wrapper && runtime != RUNTIME_INTERCEPT) || !shmem_wrapper)\n    impl<<\"  TAU_PROFILE_START(t);\"<<endl;\n\n  if (shmem_wrapper) { /* generate pshmem calls here */\n    if(runtime != RUNTIME_INTERCEPT) printShmemMessageBeforeRoutine(r, impl, sig);\n    if (!isVoid)\n    {\n      impl<<\"  retval  =\";\n    }\n    if (runtime == RUNTIME_INTERCEPT) {\n      impl<<\"  \"<<sig.rcalledfunc<<\";\"<<endl;\n    } else if(runtime == WRAPPER_INTERCEPT) {\n      if(rname.find(\"shmem_finalize\") != string::npos) {\n        impl<<\"  TauTraceOTF2ShutdownComms_if_necessary(0);\"<<endl;\n      }\n      if(rname.find(\"shmem_finalize\") != string::npos) impl<< \"  if(TauEnv_get_profile_format() != TAU_FORMAT_MERGED && TauEnv_get_trace_format() != TAU_TRACE_FORMAT_OTF2)\"<<endl<<\"  \";\n      impl<<\"  __real_\"<<sig.func<<\";\"<<endl;\n    } else {\n      if (pshmem_use_underscore_instead_of_p) {\n        impl <<\"   _\"<<sig.func<<\";\"<<endl;\n      } else {\n        impl <<\"   p\"<<sig.func<<\";\"<<endl;\n      }\n    }\n    if(runtime != RUNTIME_INTERCEPT) printShmemMessageAfterRoutine(r, impl, sig);\n  } else if (upc_env) {\n    printUPCMessageBeforeRoutine(r, impl, sig);\n    if (!isVoid) {\n      impl<<\"  retval  =\";\n    }\n    if (runtime == RUNTIME_INTERCEPT) {\n      impl<<\"  \"<<sig.rcalledfunc<<\";\"<<endl;\n    }\n    else {\n      if (runtime == WRAPPER_INTERCEPT) { /* link time instrumentation using -Wl,-wrap,bar */\n        impl<<\"  __real_\"<<sig.func<<\";\"<<endl;\n      } else { /* default case when we use redirection of bar -> tau_bar */\n        impl<<\"  \"<<sig.func<<\";\"<<endl;\n      }\n    }\n    printUPCMessageAfterRoutine(r, impl, sig);\n  } else {\n    if (!isVoid) {\n      impl<<\"  retval  =\";\n    }\n    if (runtime == RUNTIME_INTERCEPT) {\n      impl<<\"  \"<<sig.rcalledfunc<<\";\"<<endl;\n    }\n    else {\n      if (runtime == WRAPPER_INTERCEPT) { /* link time instrumentation using -Wl,-wrap,bar */\n        impl<<\"  __real_\"<<sig.func<<\";\"<<endl;\n      } else { /* default case when we use redirection of bar -> tau_bar */\n        impl<<\"  \"<<sig.func<<\";\"<<endl;\n      }\n    }\n  }\n\n  if((shmem_wrapper && runtime != RUNTIME_INTERCEPT) || !shmem_wrapper)\n    impl << \"  TAU_PROFILE_STOP(t);\" << endl;\n\n  if (!isVoid) {\n    impl<<\"  return retval;\"<<endl;\n  }\n  impl<<endl;\n\n  impl<<\"}\\n\"<<endl;\n\n  if (runtime == RUNTIME_INTERCEPT) { /* linker-based instrumentation */\n    printFunctionNameInOutputFile(r, impl, \"  \", sig);\n    impl << \"{\" << endl;\n    if(sig.returntypename.compare(0, 4, \"void\") == 0)\n            impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    else\n            impl << \"   return __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n#if 0\n    // Fortran wrapper functions\n    impl << \"extern \" << sig.returntypename << \" \" << rname << \"_\" << sig.funcarg << endl;\n    impl << \"{\" << endl;\n    impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    impl << \"extern \" << sig.returntypename << \" \" << rname << \"__\" << sig.funcarg << endl;\n    impl << \"{\" << endl;\n    impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    transform(rname.begin(), rname.end(), rname.begin(), ::toupper);\n\n    impl << \"extern \" << sig.returntypename << \" \" << rname << \"_\" << sig.funcarg << endl;\n    impl << \"{\" << endl;\n    impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    impl << \"extern \" << sig.returntypename << \" \" << rname << \"__\" << sig.funcarg << endl;\n    impl << \"{\" << endl;\n    impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n#endif\n  }\n  if (runtime == WRAPPER_INTERCEPT && shmem_wrapper) {\n/*\n    printFunctionNameInOutputFile(r, impl, \"  \", sig);\n    impl << \"{\" << endl;\n    impl << \"   __wrap_\" << sig.func << \";\" << endl;\n    impl << \"}\\n\" << endl;\n*/\n\n    // Fortran wrapper functions\n    impl << \"extern \" << sig.returntypename << \" __wrap_\" << rname << \"_\" << sig.funcargfort << endl;\n    impl << \"{\" << endl;\n    if(sig.returntypename.compare(0, 4, \"void\") == 0)\n            impl << \"   __wrap_\" << sig.funcfort << \";\" << endl;\n    else\n\t    impl << \"   return __wrap_\" << sig.funcfort << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    impl << \"extern \" << sig.returntypename << \" __wrap_\" << rname << \"__\" << sig.funcargfort << endl;\n    impl << \"{\" << endl;\n    if(sig.returntypename.compare(0, 4, \"void\") == 0)\n            impl << \"   __wrap_\" << sig.funcfort << \";\" << endl;\n    else\n            impl << \"   return __wrap_\" << sig.funcfort << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    transform(rname.begin(), rname.end(), rname.begin(), ::toupper);\n\n    impl << \"extern \" << sig.returntypename << \" __wrap_\" << rname << \"_\" << sig.funcargfort << endl;\n    impl << \"{\" << endl;\n    if(sig.returntypename.compare(0, 4, \"void\") == 0)\n            impl << \"   __wrap_\" << sig.funcfort << \";\" << endl;\n    else\n            impl << \"   return __wrap_\" << sig.funcfort << \";\" << endl;\n    impl << \"}\\n\" << endl;\n\n    impl << \"extern \" << sig.returntypename << \" __wrap_\" << rname << \"__\" << sig.funcargfort << endl;\n    impl << \"{\" << endl;\n    if(sig.returntypename.compare(0, 4, \"void\") == 0)\n            impl << \"   __wrap_\" << sig.funcfort << \";\" << endl;\n    else\n            impl << \"   return __wrap_\" << sig.funcfort << \";\" << endl;\n    impl << \"}\\n\" << endl;\n  }\n\n  if (runtime == PREPROC_INTERCEPT) { /* preprocessor instrumentation */\n    macro.append(\" \"+sig.func+\" \" +\"tau_\"+sig.func);\n#ifdef DEBUG\n    cout <<\"macro = \"<<macro<<endl;\n    cout <<\"func = \"<<sig.func<<endl;\n#endif /* DEBUG */\n\n    /* The macro goes in header file, the implementation goes in the other file */\n    header <<macro<<endl;  \n    header <<\"extern \"<<sig.returntypename<<\" tau_\"<<sig.proto<<\";\\n\"<<endl;\n  }\n\n}\n\n/* -------------------------------------------------------------------------- */\n/* -- Extract the package name from the header file name:  netcdf.h -> netcdf */\n/* -------------------------------------------------------------------------- */\nstring extractLibName(string const & filename)\n{\n  return filename.substr(0, filename.find(\".\"));\n} \n\n\n/* -------------------------------------------------------------------------- */\n/* -- Instrumentation routine for a C program ------------------------------- */\n/* -------------------------------------------------------------------------- */\nbool instrumentCFile(PDB& pdb, pdbFile* f, ofstream& header, ofstream& impl, \n                     ofstream& linkoptsfile, string& group_name, string& header_file, \n                     int runtime, string& runtime_libname, string& libname)\n{\n  string file(f->name());\n\n  // open source file\n  ifstream istr(file.c_str());\n  if (!istr) {\n    cerr << \"Error: Cannot Open '\" << file << \"'\" << endl;\n    return false;\n  }\n#ifdef DEBUG\n  cout << \"Processing \" << file << \" in instrumentCFile...\" << endl;\n#endif\n\n  // initialize reference vector\n  vector<itemRef*> itemvec;\n  getCReferencesForWrapper(itemvec, pdb, f);\n  PDB::croutinevec routines = pdb.getCRoutineVec();\n  string rname;\n  for (PDB::croutinevec::const_iterator rit=routines.begin(); rit!=routines.end(); ++rit) {\n    pdbRoutine::locvec retlocations = (*rit)->returnLocations();\n    if ( (*rit)->location().file() == f\n        && !(*rit)->isCompilerGenerated()\n        && (instrumentEntity((*rit)->fullName())) )\n    {\n      printRoutineInOutputFile(*rit, header, impl, group_name, runtime, runtime_libname);\n      if (runtime == WRAPPER_INTERCEPT) { /* -Wl,-wrap,<func>,-wrap,<func> */\n        if (!(*rit)->signature()->hasEllipsis()) { /* does not have varargs */\n          linkoptsfile <<\"-Wl,-wrap,\"<<(*rit)->name()<<\" \";\n          rname = (*rit)->name();\n          linkoptsfile <<\"-Wl,-wrap,\"<<rname<<\"_ \";\n          linkoptsfile <<\"-Wl,-wrap,\"<<rname<<\"__ \";\n          transform(rname.begin(), rname.end(), rname.begin(), ::toupper);\n          linkoptsfile <<\"-Wl,-wrap,\"<<rname<<\"_ \";\n          linkoptsfile <<\"-Wl,-wrap,\"<<rname<<\"__ \";\n        }\n      }\n    }\n  }\n  return true;\n} \n\n/* -------------------------------------------------------------------------- */\n/* -- Define a TAU group after <Profile/Profiler.h> ------------------------- */\n/* -------------------------------------------------------------------------- */\nvoid defineTauGroup(ofstream& ostr, string & group_name)\n{\n  if (group_name.compare(\"TAU_USER\") != 0) {\n    /* Write the following lines only when -DTAU_GROUP=string is defined */\n    ostr<< \"#ifndef \"<<group_name<<endl;\n    ostr<< \"#define \"<<group_name << \" TAU_GET_PROFILE_GROUP(\\\"\"<<group_name.substr(10)<<\"\\\")\"<<endl;\n    ostr<< \"#endif /* \"<<group_name << \" */ \"<<endl;\n  }\n}\n\nvoid generateMakefile(string const & package, string const & outFileName, \n                      int runtime, string const & runtime_libname, string const & libname, \n                      string const & extradefs)\n{\n  char const * makefileName = \"Makefile\";\n  char const * compiler_name = \"$(TAU_CC)\";\n  char const * upcprefix = \"\";\n\n  if (upc_env == UPC_GNU) {\n    compiler_name = \"$(TAU_UPCC)\";\n    upcprefix = \"$(UPCC_C_PREFIX)\";\n  }\n\n  char buffer[1024];\n  sprintf(buffer, \"%s_wrapper/%s\", libname.c_str(), makefileName);\n\n  ofstream makefile(buffer);\n\n  if(shmem_wrapper) {\n  // Note: shmem wrapper assumes wr.c and wr_dynamic.c for outFileNames.\n        makefile << \"include ${TAU_MAKEFILE}\\n\"\n                 << \"CC=\" << compiler_name << \" \\n\"\n                 << \"CFLAGS=$(TAU_DEFS) \" << extradefs << \" $(TAU_INCLUDE) $(TAU_MPI_INCLUDE)  -I.. $(TAU_SHMEM_INC) -fPIC\\n\"\n                 << \"EXTRA_FLAGS=$(TAU_CRAY_SHMEM_EXTRA_DEFS)\\n\"\n                 << \"\\n\"\n                 << \"AR=$(TAU_AR)\\n\"\n                 << \"ARFLAGS=rcv \\n\"\n                 << \"\\n\"\n                 << \"all: lib\" << package << \"_wrap.a lib\" << package << \"_wrap.so \\n\"\n                 << \"lib\" << package << \"_wrap.so: \" << package << \"_wrap_static.o \" << package << \"_wrap_dynamic.o \\n\"\n                 << \"\\t$(CC) $(TAU_SHFLAGS) $@ $^ $(TAU_SHLIBS) -ldl\\n\"\n                 << \"\\n\"\n                 << \"lib\" << package << \"_wrap.a: \" << package << \"_wrap_static.o \\n\"\n                 << \"\\t$(AR) $(ARFLAGS) $@ $^ \\n\"\n                 << \"\\n\"\n                 << package << \"_wrap_dynamic.o: \" << \"wr_dynamic.c\"<< \"\\n\"\n                 << \"\\t$(CC) $(CFLAGS) $(EXTRA_FLAGS) -c $< -o $@\\n\"\n                 << package << \"_wrap_static.o: \" << \"wr.c\" << \"\\n\"\n                 << \"\\t$(CC) $(CFLAGS) $(EXTRA_FLAGS) -c $< -o $@\\n\"\n                 << \"\\n\"\n                 << \"clean:\\n\"\n                 << \"\\t/bin/rm -f \" << package << \"_wrap_dynamic.o \" << package << \"_wrap_static.o lib\" << package << \"_wrap.so lib\" << package << \"_wrap.a\\n\"\n                 << endl;\n  } else {\n    switch(runtime) {\n      case PREPROC_INTERCEPT:\n        makefile << \"include ${TAU_MAKEFILE}\\n\"\n                 << \"CC=\" << compiler_name << \"\\n\"\n                 << \"CFLAGS=$(TAU_DEFS) \" << extradefs << \" $(TAU_INCLUDE) $(TAU_MPI_INCLUDE) -I.. $(TAU_SHMEM_INC)\\n\"\n                 << \"EXTRA_FLAGS=\\n\"\n                 << \"\\n\"\n                 << \"AR=ar\\n\"\n                 << \"ARFLAGS=rcv\\n\"\n                 << \"\\n\"\n                 << \"lib\" << package << \"_wrap.a: \" << package << \"_wrap.o \\n\"\n                 << \"\\t$(AR) $(ARFLAGS) $@ $<\\n\"\n                 << \"\\n\"\n                 << package << \"_wrap.o: \" << outFileName << \"\\n\"\n                 << \"\\t$(CC) $(CFLAGS) $(EXTRA_FLAGS) -c $< -o $@\\n\"\n                 << \"clean:\\n\"\n                 << \"\\t/bin/rm -f \" << package << \"_wrap.o lib\" << package << \"_wrap.a\\n\"\n                 << endl;\n        break;\n      case RUNTIME_INTERCEPT:\n        makefile << \"include ${TAU_MAKEFILE}\\n\"\n                 << \"CC=\" << compiler_name << \" \\n\"\n                 << \"CFLAGS=$(TAU_DEFS) \" << extradefs << \" $(TAU_INCLUDE) $(TAU_MPI_INCLUDE)  -I.. $(TAU_SHMEM_INC) -fPIC\\n\"\n                 << \"EXTRA_FLAGS=\\n\"\n                 << \"\\n\"\n                 << \"lib\" << package << \"_wrap.so: \" << package << \"_wrap.o \\n\"\n                 << \"\\t$(CC) $(TAU_SHFLAGS) $@ $< $(TAU_SHLIBS) -ldl\\n\"\n                 << \"\\n\"\n                 << package << \"_wrap.o: \" << outFileName << \"\\n\"\n                 << \"\\t$(CC) $(CFLAGS) $(EXTRA_FLAGS) -c $< -o $@\\n\"\n                 << \"clean:\\n\"\n                 << \"\\t/bin/rm -f \" << package << \"_wrap.o lib\" << package << \"_wrap.so\\n\"\n                 << endl;\n        break;\n      case WRAPPER_INTERCEPT:\n        makefile << \"include ${TAU_MAKEFILE} \\n\"\n                 << \"CC=\" << compiler_name << \" \\n\"\n                 << \"CFLAGS=$(TAU_DEFS) \" << extradefs << \" $(TAU_INCLUDE)  $(TAU_MPI_INCLUDE) -I.. $(TAU_SHMEM_INC)\\n\"\n                 << \"EXTRA_FLAGS=\\n\"\n                 << \"\\n\"\n                 << \"AR=$(TAU_AR)\\n\"\n                 << \"ARFLAGS=rcv \\n\"\n                 << \"\\n\"\n                 << \"lib\" << package << \"_wrap.a: \" << package << \"_wrap.o \\n\"\n                 << \"\\t$(AR) $(ARFLAGS) $@ $< \\n\"\n                 << \"\\n\"\n                 << package << \"_wrap.o: \" << outFileName << \"\\n\"\n                 << \"\\t$(CC) $(CFLAGS) $(EXTRA_FLAGS) -c $< -o $@\\n\"\n                 << \"clean:\\n\"\n                 << \"\\t/bin/rm -f \" << package << \"_wrap.o lib\" << package << \"_wrap.a\\n\"\n                 << endl;\n        break;\n      default:\n        // Unknown runtime flag!\n        break;\n    }\n  }\n}\n\n\nvoid show_usage(char const * argv0)\n{\n  cout <<\"Usage : \"<< argv0 <<\" <pdbfile> <sourcefile> [-o <outputfile>] [-w librarytobewrapped] [-r runtimelibname] [-g groupname] [-i headerfile] [-c|-c++|-fortran] [-f <instr_req_file> ] [--strict]\"<<endl;\n  cout <<\" To use runtime library interposition, -r <name> must be specified\\n\"<<endl;\n  cout <<\" --strict enforces strict typing (no dynamic function pointer casting). \\n\"<<endl;\n  cout <<\" e.g., \"<<endl;\n  cout <<\"   tau_wrap hdf5.h.pdb hdf5.h libhdf5.a -o wrap_hdf5.c -w /usr/lib/libhdf5.a \"; \n  cout <<\"----------------------------------------------------------------------------------------------------------\"<<endl;\n}\n\n\n/* -------------------------------------------------------------------------- */\n/* -- Instrument the program using C, C++ or F90 instrumentation routines --- */\n/* -------------------------------------------------------------------------- */\nint main(int argc, char **argv)\n{\n  string outFileName(\"out.ins.C\");\n  string group_name(\"TAU_USER\"); /* Default: if nothing else is defined */\n  string runtime_libname(\"libc.so\"); /* Default: if nothing else is defined */\n  string header_file(\"Profile/Profiler.h\");\n  string extradefs(\"\");\n  bool retval;\n  bool outFileNameSpecified = false;\n\n  /* by default generate PDT based re-direction library*/\n  int runtime = PREPROC_INTERCEPT;\n\n  if (argc < 3) {\n    show_usage(argv[0]);\n    return 1;\n  }\n\n  PDB p(argv[1]); \n  if ( !p ) {\n    show_usage(argv[0]);\n    cout << \"Invalid PDB file: \" << argv[1] << endl;\n    return 1;\n  }\n\n  string filename = argv[2];\n\n#ifdef DEBUG\n  cout << \"Name of pdb file = \" << argv[1] << endl;\n  cout << \"Name of source file = \" << argv[2] << endl;\n#endif /* DEBUG */\n\n  for(int i=3; i<argc; i++) {\n    if (strcmp(argv[i], \"-o\") == 0) {\n      outFileName = argv[i+1];\n#ifdef DEBUG\n      cout << \"output file = \" << outFileName << endl;\n#endif /* DEBUG */\n      outFileNameSpecified = true;\n    }\n    else if (strcmp(argv[i], \"--upc\") == 0) {\n      if(i == (argc - 1)) {\n        cout << \"ERROR: --upc requires an argument\" << endl;\n        exit(1);\n      }\n      char const * arg = argv[i+1];\n      if (strncmp(arg, \"berkeley\", 4) == 0) {\n        upc_env = UPC_BERKELEY;\n      } else if (strncmp(arg, \"gnu\", 4) == 0) {\n        upc_env = UPC_GNU;\n      } else if (strncmp(arg, \"xlupc\", 5) == 0) {\n        upc_env = UPC_XLUPC;\n      } else if (strncmp(arg, \"cray\", 4) == 0) {\n        upc_env = UPC_CRAY;\n        extradefs = \"$(TAU_UPC_COMPILER_OPTIONS)\";\n      } else {\n        cout << \"ERROR: invalid --upc argument: \" << arg << endl;\n        exit(1);\n      } \n#ifdef DEBUG\n      cout << \"upc_env = \" << upc_env << endl;\n#endif /* DEBUG */\n    } \n    else if (strcmp(argv[i], \"--shmem\") == 0) {\n      shmem_wrapper = true;\n#ifdef DEBUG\n      cout << \"shmem_wrapper = true\" << endl;\n#endif /* DEBUG */\n    } \n    else if (strcmp(argv[i], \"--pshmem_use_underscore_instead_of_p\") == 0) {\n      pshmem_use_underscore_instead_of_p = true;\n#ifdef DEBUG\n      cout << \"pshmem_use_underscore_instead_of_p = true\" << endl;\n#endif /* DEBUG */\n    } \n    else if (strcmp(argv[i], \"-r\") == 0) {\n      runtime_libname = argv[i+1];\n      runtime = RUNTIME_INTERCEPT;\n#ifdef DEBUG\n      cout << \"Runtime library name: \" << runtime_libname << endl;\n#endif /* DEBUG */\n    }\n    else if (strcmp(argv[i], \"-w\") == 0) {\n      runtime_libname = argv[i+1];\n      runtime = WRAPPER_INTERCEPT;\n#ifdef DEBUG\n      cout << \"Link time -Wl,-wrap library name: \" << runtime_libname << endl;\n#endif /* DEBUG */\n    }\n    else if (strcmp(argv[i], \"-g\") == 0) {\n      group_name = string(\"TAU_GROUP_\")+string(argv[i+1]);\n#ifdef DEBUG\n      printf(\"Group %s\\n\", group_name.c_str());\n#endif /* DEBUG */\n    }\n    else if (strcmp(argv[i], \"-i\") == 0) {\n      header_file = string(argv[i+1]);\n#ifdef DEBUG\n      printf(\"Header file %s\\n\", header_file.c_str());\n#endif /* DEBUG */\n    }\n    else if (strcmp(argv[i], \"-f\") == 0) {\n      processInstrumentationRequests(argv[i+1]);\n#ifdef DEBUG\n      printf(\"Using instrumentation requests file: %s\\n\", argv[i]);\n#endif /* DEBUG */\n    }\n    else if (strcmp(argv[i], \"--strict\") == 0) {\n      strict_typing = true;\t\n#ifdef DEBUG\n      printf(\"Using strict typing. \\n\");\n#endif /* DEBUG */\n    }\n  }\n\n  if (!outFileNameSpecified) {\n    /* if name is not specified on the command line */\n    outFileName = filename + string(\".ins\");\n  }\n\n  /* should we make a directory and put it in there? */\n  string libname = extractLibName(filename);\n  string dircmd(\"mkdir -p \"+libname+\"_wrapper\");\n  system(dircmd.c_str());\n\n  ostringstream buff;\n  buff << libname << \"_wrapper/link_options.tau\";\n  string linkoptsfileName = buff.str();\n\n  ofstream linkoptsfile(linkoptsfileName.c_str());\n  if (!linkoptsfile) {\n    cerr << \"Error: Cannot open: '\" << linkoptsfileName << \"'\" << endl;\n    return false;\n  }\n\n  system(dircmd.c_str());\n  ofstream impl(string(libname+\"_wrapper/\"+outFileName).c_str()); /* actual implementation goes in here */\n  ofstream header(string(libname+\"_wrapper/\"+filename).c_str()); /* use the same file name as the original */\n  if (!impl) {\n    cerr << \"Error: Cannot open output file '\" << outFileName << \"'\" << endl;\n    return false;\n  }\n  if (!header) {\n    cerr << \"Error: Cannot open wrapper/\" << filename << endl;\n    return false;\n  }\n\n  /* files created properly */\n  if (shmem_wrapper) {\n    impl << \"#ifndef _GNU_SOURCE\\n\"\n         << \"#define _GNU_SOURCE\\n\"\n         << \"#endif\\n\"\n         << endl;\n    if (runtime == WRAPPER_INTERCEPT) {\n      impl << \"#ifndef SHMEM_FINT\\n\"\n           << \"#define SHMEM_FINT int\\n\"\n           << \"#endif\\n\"\n           << \"#ifndef SHMEM_FINT8_t\\n\"\n           << \"#define SHMEM_FINT8_t int8_t\\n\"\n           << \"#endif\\n\"\n           << endl;\n    }\n  }\n  impl << \"#include <\" << filename << \">\\n\"\n       << \"#include <\" << header_file << \">\\n\"\n       << \"#include <stdio.h>\\n\"\n       << \"#include <stdlib.h>\\n\"\n       << endl;\n  if (shmem_wrapper) {\n    if ( runtime == WRAPPER_INTERCEPT) \n      impl << \"#include <Profile/TauEnv.h>\\n\"\n           << \"#include <Profile/TauAPI.h>\\n\"\n           << \"#include <Profile/TauTrace.h>\\n\"\n           << endl;\n    impl << \"int TAUDECL tau_totalnodes(int set_or_get, int value);\\n\"\n         << \"int TAUDECL Tau_set_usesSHMEM(int value);\\n\"\n         << \"int __real_shmem_n_pes(void);\\n\"\n         << \"int __real_shmem_my_pe(void);\\n\"\n         << \"static int tau_shmem_tagid_f=0;\\n\"\n         << \"#define TAU_SHMEM_TAGID (tau_shmem_tagid_f = (tau_shmem_tagid_f & 255))\\n\"\n         << \"#define TAU_SHMEM_TAGID_NEXT ((++tau_shmem_tagid_f) & 255)\\n\"\n         << endl;\n  }\n  if (upc_env) {\n    impl << \"#pragma pupc off\\n\"\n         << \"\\n\"\n         << \"#ifdef __BERKELEY_UPC__\\n\"\n         << \"#pragma UPCR NO_SRCPOS \\n\"\n         << \"#endif\\n\"\n         << \"\\n\"\n         << \"static int tau_upc_node = -1;\\n\"\n         << \"static int tau_upc_tagid_f = 0;\\n\"\n         << \"#define TAU_UPC_TAGID (tau_upc_tagid_f = (tau_upc_tagid_f & 255))\\n\"\n         << \"#define TAU_UPC_TAGID_NEXT ((++tau_upc_tagid_f) & 255)\\n\"\n         << \"\\n\"\n         << \"void tau_totalnodes(int, int);\\n\"\n         << endl;\n  }\n\n  if (runtime == RUNTIME_INTERCEPT) {\n    /* add the runtime library calls */\n    impl <<\"#include <dlfcn.h>\"<<endl<<endl;\n    impl <<\"const char * tau_orig_libname = \"<<\"\\\"\"<<\n      runtime_libname<<\"\\\";\"<<endl; \n    impl <<\"static void *tau_handle = NULL;\"<<endl<<endl<<endl;\n\n    if(shmem_wrapper){\n      /* add get_function_handle function */\n      impl << \"static void * get_function_handle(char const * name)\"<<endl;\n      impl << \"{\"<<endl;\n      impl << \"  char const * err;\"<<endl;\n      impl << \"  void * handle;\"<<endl<<endl;;\n      impl << \"  // Reset error pointer\"<<endl;\n      impl << \"  dlerror();\"<<endl<<endl;\n      impl << \"  // Attempt to get the function handle\"<<endl;\n      impl << \"  handle = dlsym(RTLD_NEXT, name);\"<<endl<<endl;\n      impl << \"  // Detect errors\"<<endl;\n      impl << \"  if ((err = dlerror())) {\"<<endl;\n      impl << \"    // These calls are unsafe, but we're about to die anyway.     \"<<endl;\n      impl << \"    fprintf(stderr, \\\"Error getting %s handle: %s\\\\n\\\", name, err);  \"<<endl;\n      impl << \"    fflush(stderr);\"<<endl;\n      impl << \"    exit(1);\"<<endl;\n      impl << \"  }\"<<endl<<endl;;\n      impl << \"  return handle;\"<<endl;\n      impl << \"}\"<<endl;\n    }\n  }\n\n  defineTauGroup(impl, group_name); \n\n#ifdef DEBUG\n  cout <<\"Library name is \"<<libname<<endl;\n#endif /* DEBUG */\n\n  header <<\"#ifndef _TAU_\"<<libname<<\"_H_\"<<endl;\n  header <<\"#define _TAU_\"<<libname<<\"_H_\"<<endl<<endl;\n  header <<\"#include <../\"<<filename<<\">\"<<endl<<endl;\n  header <<\"#ifdef __cplusplus\"<<endl;\n  header <<\"extern \\\"C\\\" {\"<<endl;\n  header <<\"#endif /*  __cplusplus */\"<<endl<<endl;\n\n  bool fuzzyMatchResult;\n  bool fileInstrumented = false;\n  if (processFileForInstrumentation(filename)) {\n    for (PDB::filevec::const_iterator it=p.getFileVec().begin(); it!=p.getFileVec().end(); it++) {\n#ifdef DEBUG\n      cout <<\"Instrument file: \"<<filename<<\" \"<< (*it)->name()<<endl;\n#endif /* DEBUG */\n      instrumentCFile(p, *it, header, impl, linkoptsfile, group_name, header_file, runtime, runtime_libname, libname);\n    }\n  }\n  if (runtime == WRAPPER_INTERCEPT && !shmem_wrapper) {\n    char dirname[1024]; \n    getcwd(dirname, sizeof(dirname)); \n    linkoptsfile <<\"-L\"<<dirname<<\"/\"<<libname<<\"_wrapper/ -l\"<< libname<<\"_wrap \"<<runtime_libname<<endl;\n  }\n  header <<\"#ifdef __cplusplus\"<<endl;\n  header <<\"}\"<<endl;\n  header <<\"#endif /* __cplusplus */\"<<endl<<endl;\n  header <<\"#endif /*  _TAU_\"<<libname<<\"_H_ */\"<<endl;\n\n  header.close();\n\n  if (runtime != PREPROC_INTERCEPT) { /* 0 is for default preprocessor based wrapping */\n    string hfile = libname+\"_wrapper/\"+filename;\n#ifdef DEBUG\n    cout <<\"Deleting \" << hfile << endl;\n#endif /* DEBUG */\n    /* delete the header file, we do not need it */\n    unlink(hfile.c_str());\n  }\n\n  generateMakefile(libname, outFileName, runtime, runtime_libname, libname, extradefs);\n\n} /* end of main */\n\n\n\n\n\n\n///////////////////////////////////////////////////////////////////////////\n//\n///////////////////////////////////////////////////////////////////////////\n\n/* EOF */\n\n/***************************************************************************\n * $RCSfile: tau_wrap.cpp,v $   $Author: sameer $\n * $Revision: 1.18 $   $Date: 2009/10/27 22:47:54 $\n * VERSION_ID: $Id: tau_wrap.cpp,v 1.18 2009/10/27 22:47:54 sameer Exp $\n ***************************************************************************/\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/utils/opari2/build-config/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*|-homp \\\n      |-qopenmp|-Popenmp|--openmp|-Kopenmp)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*|-homp \\\n        |-qopenmp|-Popenmp|--openmp|-Kopenmp)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Cray's compiler drivers need a -dynamic flag if any linked\n\t  # library is a shared library.  Ensure it gets this flag.\n\t  case `$CC -V 2>&1 | sed 5q` in\n\t      *Cray*)\n\t\t  case \" $compile_command \" in\n\t\t      *\" -dynamic \") ;;\n\t\t      *) func_append compile_command \" -dynamic\" ;;\n\t\t  esac\n\t\t  case \" $finalize_command \" in\n\t\t      *\" -dynamic \") ;;\n\t\t      *) func_append finalize_command \" -dynamic\" ;;\n\t\t  esac\n\t\t  ;;\n\t  esac\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*)\n\t      if test prog = \"$linkmode\"; then\n\t        new_libs=\"$deplib $new_libs\"\n\t      fi ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n      if test -n \"$dlfiles\" ||\n\t test \"$dlself\" = \"yes\" ||\n\t test \"$export_dynamic\" = \"yes\"; then\n\t# Cray's compiler drivers need a -dynamic flag if the program\n\t# is going to be dlopening itself or any libraries.\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t    *Cray*)\n\t\tcase \" $compile_command \" in\n\t\t    *\" -dynamic \") ;;\n\t\t    *) func_append compile_command \" -dynamic\" ;;\n\t\tesac\n\t\tcase \" $finalize_command \" in\n\t\t    *\" -dynamic \") ;;\n\t\t    *) func_append finalize_command \" -dynamic\" ;;\n\t\tesac\n\t\t;;\n\tesac\n      fi\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/utils/opari2/build-config/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR $AR_FLAGS libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR $AR_FLAGS libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n_LT_DECL([], [AR], [1], [The archiver])\n\n# Use ARFLAGS variable as AR's operation code to sync the variable naming with\n# Automake.  If both AR_FLAGS and ARFLAGS are specified, AR_FLAGS should have\n# higher priority because thats what people were doing historically (setting\n# ARFLAGS for automake and AR_FLAGS for libtool).  FIXME: Make the AR_FLAGS\n# variable obsoleted/removed.\n\ntest ${AR_FLAGS+y} || AR_FLAGS=${ARFLAGS-cr}\nlt_ar_flags=$AR_FLAGS\n_LT_DECL([], [lt_ar_flags], [0], [Flags to create an archive (by configure)])\n\n# Make AR_FLAGS overridable by 'make ARFLAGS='.  Don't try to run-time override\n# by AR_FLAGS because that was never working and AR_FLAGS is about to die.\n_LT_DECL([], [AR_FLAGS], [\\@S|@{ARFLAGS-\"\\@S|@lt_ar_flags\"}],\n         [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\n# Cray's compiler drivers need STRIP to be an absolute file name when\n# static linking.\nAC_PATH_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    *Cray\\ C*)\n\t      # Cray C++ compiler\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-hpic'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t      ;;\n\t    *pgCC* | *pgcpp*)\n\t      # Portland Group/NVIDIA C++ compiler\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t      ;;\n\t    *Fujitsu*)\n\t      # Fujitsu C/C++ Compiler Driver\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kpic'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Cray\\ Fortran* | *Cray\\ C*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-hpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*pgcc* | *pgf77* | *pgf90* | *pgf95* | *pgfortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\t*Fujitsu*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgCC*)\t\t\t\t# Portland Group C++ compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Cray\\ C* | *Cray\\ Fortran*)    # Cray C/C++/Fortran\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n\t  _LT_TAGVAR(archive_cmds, $1)='save_STRIP=$STRIP; unset STRIP; $CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib; ret=\\$?; STRIP=\\$save_STRIP; export STRIP; (exit \\$ret)'\n\t  ;;\n        esac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      case `$CC -V 2>&1 | sed 5q` in\n      *Cray\\ C* | *Cray\\ Fortran*)    # Cray C/C++/Fortran\n\t_LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t_LT_TAGVAR(compiler_needs_object, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='save_STRIP=$STRIP; unset STRIP; $CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib; ret=\\$?; STRIP=\\$save_STRIP; export STRIP; (exit \\$ret)'\n\t;;\n      *)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    *Cray\\ C*)\t\t# Cray C++ compiler\n\t      # If STRIP is set while creating a shared library with\n\t      # the Cray compiler, the library has its symbols\n\t      # removed.  So we unset and restore it.\n\t      _LT_TAGVAR(archive_cmds, $1)='save_STRIP=$STRIP; unset STRIP; $CC -shared $wl-soname $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags; ret=\\$?; STRIP=\\$save_STRIP; export STRIP; (exit \\$ret)'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=''\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='-vv $wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\t      ;;\n\t    *pgCC* | *pgcpp*)\n\t      # Portland Group C++ compiler\n\t      case `$CC -V` in\n\t      *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t        _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t        rm -rf $tpldir~\n\t        $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t        compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t        _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t        rm -rf $tpldir~\n\t        $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t        $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t        $RANLIB $oldlib'\n\t        _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t        rm -rf $tpldir~\n\t        $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t        $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t        rm -rf $tpldir~\n\t        $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t        $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t        ;;\n\t      *) # Version 6 and above use weak symbols\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t        ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    -*)\n       # Ignore all other options starting with a dash\n       # (e.g., \"-mIPOPT_obj_output_file_name=<tmp_obj>\" used by Intel compiler)\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/src/wrappers/pthread_wrapper.c": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <pthread_wrapper.h>\n\n#ifdef APEX_PRELOAD_LIB\n/********************************/\n/* LD_PRELOAD wrapper functions */\n/********************************/\n\n#define RESET_DLERROR() dlerror()\n#define CHECK_DLERROR() { \\\n  char const * err = dlerror(); \\\n  if (err) { \\\n    printf(\"Error getting %s handle: %s\\n\", name, err); \\\n    fflush(stdout); \\\n    exit(1); \\\n  } \\\n}\n\nstatic\nvoid * get_system_function_handle(char const * name, void * caller)\n{\n  void * handle;\n\n  // Reset error pointer\n  RESET_DLERROR();\n\n  // Attempt to get the function handle\n  handle = dlsym(RTLD_NEXT, name);\n\n  // Detect errors\n  CHECK_DLERROR();\n\n  // Prevent recursion if more than one wrapping approach has been loaded.\n  // This happens because we support wrapping pthreads three ways at once:\n  // #defines in Profiler.h, -Wl,-wrap on the link line, and LD_PRELOAD.\n  if (handle == caller) {\n    RESET_DLERROR();\n    void * syms = dlopen(NULL, RTLD_NOW);\n    CHECK_DLERROR();\n    do {\n      RESET_DLERROR();\n      handle = dlsym(syms, name);\n      CHECK_DLERROR();\n    } while (handle == caller);\n  }\n\n  return handle;\n}\n\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr,\n    start_routine_p start_routine, void* arg)\n{\n  static pthread_create_p _pthread_create = NULL;\n  if (!_pthread_create) {\n    _pthread_create = (pthread_create_p)get_system_function_handle(\n        \"pthread_create\", (void*)pthread_create);\n  }\n  return apex_pthread_create_wrapper(_pthread_create, thread, attr, start_routine, arg);\n}\n\nint pthread_join(pthread_t thread, void ** retval)\n{\n  static pthread_join_p _pthread_join = NULL;\n  if (!_pthread_join) {\n    _pthread_join = (pthread_join_p)get_system_function_handle(\n        \"pthread_join\", (void*)pthread_join);\n  }\n  return apex_pthread_join_wrapper(_pthread_join, thread, retval);\n}\n\n#if 0\nvoid pthread_exit(void * value_ptr)\n{\n  static pthread_exit_p _pthread_exit = NULL;\n  if (!_pthread_exit) {\n    _pthread_exit = (pthread_exit_p)get_system_function_handle(\n        \"pthread_exit\", (void*)pthread_exit);\n  }\n  apex_pthread_exit_wrapper(_pthread_exit, value_ptr);\n}\n\n#ifdef APEX_PTHREAD_BARRIER_AVAILABLE\nint pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  static pthread_barrier_wait_p _pthread_barrier_wait = NULL;\n  if (!_pthread_barrier_wait) {\n    _pthread_barrier_wait = (pthread_barrier_wait_p)get_system_function_handle(\n        \"pthread_barrier_wait\", (void*)pthread_barrier_wait);\n  }\n  return apex_pthread_barrier_wait_wrapper(_pthread_barrier_wait, barrier);\n}\n#endif /* APEX_PTHREAD_BARRIER_AVAILABLE */\n#endif /* Disabling the exit and barrier wrappers */\n\n#else // Wrap via the the link line.\n\nint __real_pthread_create(pthread_t *, const pthread_attr_t *, start_routine_p, void *);\nint __wrap_pthread_create(pthread_t * thread, const pthread_attr_t * attr, start_routine_p start_routine, void * arg)\n{\n  return apex_pthread_create_wrapper(__real_pthread_create, thread, attr, start_routine, arg);\n}\n\nint __real_pthread_join(pthread_t, void **);\nint __wrap_pthread_join(pthread_t thread, void **retval)\n{\n  return apex_pthread_join_wrapper(__real_pthread_join, thread, retval);\n}\n\n#if 0\nvoid __real_pthread_exit(void *);\nvoid __wrap_pthread_exit(void * value_ptr)\n{\n  apex_pthread_exit_wrapper(__real_pthread_exit, value_ptr);\n}\n\n#ifdef APEX_PTHREAD_BARRIER_AVAILABLE\nint __real_pthread_barrier_wait(pthread_barrier_t *);\nint __wrap_pthread_barrier_wait(pthread_barrier_t * barrier)\n{\n  return apex_pthread_barrier_wait_wrapper(__real_pthread_barrier_wait, barrier);\n}\n#endif /* APEX_PTHREAD_BARRIER_AVAILABLE */\n#endif /* Disabling the exit and barrier wrappers */\n\n#endif //APEX_PRELOAD_LIB\n",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/src/apex/apex.cpp": "//  Copyright (c) 2014 University of Oregon\n//\n\n#ifdef APEX_HAVE_HPX\n#include <hpx/config.hpp>\n#endif\n\n#include \"apex.hpp\"\n#include \"apex_api.hpp\"\n#include \"apex_types.h\"\n#include <iostream>\n#include <stdlib.h>\n#include <string>\n#include <utility>\n#include <memory>\n#include <algorithm>\n#if APEX_USE_PLUGINS\n#include <dlfcn.h>\n#endif\n//#include <cxxabi.h> // this is for demangling strings.\n\n#include \"concurrency_handler.hpp\"\n#include \"policy_handler.hpp\"\n#include \"thread_instance.hpp\"\n#include \"utils.hpp\"\n\n#include \"tau_listener.hpp\"\n#include \"profiler_listener.hpp\"\n#if defined(APEX_DEBUG) || defined(APEX_ERROR_HANDLING)\n// #define APEX_DEBUG_disabled\n#include \"apex_error_handling.hpp\"\n#endif\n#include \"address_resolution.hpp\"\n\n#ifdef APEX_HAVE_OTF2\n#include \"otf2_listener.hpp\"\n#endif\n\n#ifdef APEX_HAVE_RCR\n#include \"libenergy.h\"\n#endif\n\n#if APEX_HAVE_PROC\n#include \"proc_read.h\"\n#endif\n\n#ifdef APEX_HAVE_HPX\n#include <boost/assign.hpp>\n#include <boost/cstdint.hpp>\n#include <hpx/include/performance_counters.hpp>\n#include <hpx/include/actions.hpp>\n#include <hpx/include/util.hpp>\n#include <hpx/lcos/local/composable_guard.hpp>\nstatic void apex_schedule_shutdown(void);\n#endif\n\n#if APEX_DEBUG\n#define FUNCTION_ENTER printf(\"enter %lu *** %s:%d!\\n\", thread_instance::get_id(), __func__, __LINE__); fflush(stdout);\n#define FUNCTION_EXIT  printf(\"exit  %lu *** %s:%d!\\n\", thread_instance::get_id(), __func__, __LINE__); fflush(stdout);\n#else\n#define FUNCTION_ENTER\n#define FUNCTION_EXIT\n#endif\n\nAPEX_NATIVE_TLS bool _registered = false;\nAPEX_NATIVE_TLS bool _exited = false;\nstatic bool _initialized = false;\n\nusing namespace std;\n\nnamespace apex\n{\n\n// Global static pointer used to ensure a single instance of the class.\nstd::atomic<apex*> apex::m_pInstance(nullptr);\n\nstd::atomic<bool> _notify_listeners(true);\nstd::atomic<bool> _measurement_stopped(false);\nAPEX_NATIVE_TLS profiler * top_level_timer = nullptr;\n\n/*\n * The destructor will request power data from RCRToolkit\n */\napex::~apex()\n{\n#ifdef APEX_HAVE_RCR\n    //cout << \"Getting energy...\" << endl;\n    energyDaemonTerm();\n#endif\n    for (unsigned int i = listeners.size(); i > 0 ; i--) {\n        event_listener * el = listeners[i-1];\n        listeners.pop_back();\n        delete el;\n    }\n#if APEX_HAVE_PROC\n    if (pd_reader != nullptr) {\n        delete pd_reader;\n    }\n#endif\n    m_pInstance = nullptr;\n    while (apex_policy_handles.size() > 0) {\n        auto tmp = apex_policy_handles.back();\n        apex_policy_handles.pop_back();\n        delete(tmp);\n    }\n}\n\nint apex::get_node_id()\n{\n    return m_node_id;\n}\n\nint apex::get_num_ranks()\n{\n    return m_num_ranks;\n}\n\n#ifdef APEX_HAVE_HPX\nstatic void init_hpx_runtime_ptr(void) {\n    if (apex_options::disable() == true) { return; }\n    apex * instance = apex::instance();\n    if(instance != nullptr) {\n        hpx::runtime * runtime = hpx::get_runtime_ptr();\n        instance->set_hpx_runtime(runtime);\n/*\n        std::stringstream ss;\n        ss << \"/threads{locality#\" << instance->get_node_id() << \"/total}/count/cumulative\";\n        instance->setup_runtime_counter(ss.str());\n*/\n    }\n}\n\nstatic void finalize_hpx_runtime(void) {\n    FUNCTION_ENTER\n    if (apex_options::disable() == true) { return; }\n    static std::mutex init_mutex;\n    static bool hpx_finalized = false;\n    unique_lock<mutex> l(init_mutex);\n    if (hpx_finalized) { return; }\n    apex * instance = apex::instance();\n    // Get the HPX counters one (last?) time, at exit\n    if(instance != nullptr) {\n        if(hpx::get_runtime_ptr() != nullptr) {\n            instance->query_runtime_counters();\n        }\n    }\n    // Tell other localities to shutdown APEX\n    //apex_schedule_shutdown();\n    // Shutdown APEX\n    //finalize();\n    hpx_finalized = true;\n    FUNCTION_EXIT\n}\n#endif\n\n/*\n * This private method is used to perform whatever initialization\n * needs to happen.\n */\nvoid apex::_initialize()\n{\n#if defined(APEX_DEBUG) || defined(APEX_ERROR_HANDLING)\n    //apex_register_signal_handler();\n#endif\n    this->m_pInstance = this;\n    this->m_policy_handler = nullptr;\n    stringstream ss;\n    ss << \"locality#\" << this->m_node_id;\n    this->m_my_locality = string(ss.str());\n    stringstream tmp;\n#if defined (GIT_TAG)\n    tmp << GIT_TAG;\n#else\n    tmp << APEX_VERSION_MAJOR + (APEX_VERSION_MINOR/10.0);\n#endif\n#if defined (GIT_COMMIT_HASH)\n    tmp << \"-\" << GIT_COMMIT_HASH ;\n#endif\n#if defined (GIT_BRANCH)\n    tmp << \"-\" << GIT_BRANCH ;\n#endif\n    tmp << std::endl << \"Built on: \" << __TIME__ << \" \" << __DATE__;\n    tmp << std::endl << \"C++ Language Standard version : \" << __cplusplus;\n#if defined(__clang__)\n    /* Clang/LLVM. ---------------------------------------------- */\n    tmp << std::endl << \"Clang Compiler version : \" << __VERSION__;\n#elif defined(__ICC) || defined(__INTEL_COMPILER)\n    /* Intel ICC/ICPC. ------------------------------------------ */\n    tmp << std::endl << \"Intel Compiler version : \" << __VERSION__;\n#elif defined(__GNUC__) || defined(__GNUG__)\n    /* GNU GCC/G++. --------------------------------------------- */\n    tmp << std::endl << \"GCC Compiler version : \" << __VERSION__;\n#elif defined(__HP_cc) || defined(__HP_aCC)\n    /* Hewlett-Packard C/aC++. ---------------------------------- */\n    tmp << std::endl << \"HP Compiler version : \" << __HP_aCC;\n#elif defined(__IBMC__) || defined(__IBMCPP__)\n    /* IBM XL C/C++. -------------------------------------------- */\n    tmp << std::endl << \"IBM Compiler version : \" << __xlC__;\n#elif defined(_MSC_VER)\n    /* Microsoft Visual Studio. --------------------------------- */\n    tmp << std::endl << \"Microsoft Compiler version : \" << _MSC_FULL_VER;\n#elif defined(__PGI)\n    /* Portland Group PGCC/PGCPP. ------------------------------- */\n    tmp << std::endl << \"PGI Compiler version : \" << __VERSION__;\n#elif defined(__SUNPRO_CC)\n    /* Oracle Solaris Studio. ----------------------------------- */\n    tmp << std::endl << \"Oracle Compiler version : \" << __SUNPRO_CC;\n#endif\n\n    this->version_string = std::string(tmp.str().c_str());\n#ifdef APEX_HAVE_HPX\n    this->m_hpx_runtime = nullptr;\n    hpx::register_startup_function(init_hpx_runtime_ptr);\n    //hpx::register_pre_shutdown_function(finalize_hpx_runtime);\n#endif\n#ifdef APEX_HAVE_RCR\n    energyDaemonInit();\n#endif\n#ifdef APEX_HAVE_MSR\n    apex_init_msr();\n#endif\n    bool tau_loaded = false;\n    if (apex_options::use_tau())\n    {\n        // before spawning any other threads, initialize TAU.\n        char * tmp = const_cast<char*>(\"APEX\");\n        char * argv[] = {tmp};\n        int argc = 1;\n        tau_loaded = tau_listener::initialize_tau(argc, argv);\n    }\n    {\n        //write_lock_type l(listener_mutex);\n        this->the_profiler_listener = new profiler_listener();\n        // this is always the first listener!\n           listeners.push_back(the_profiler_listener);\n        if (apex_options::use_tau() && tau_loaded)\n        {\n            listeners.push_back(new tau_listener());\n        }\n#ifdef APEX_HAVE_OTF2\n        if (apex_options::use_otf2())\n        {\n            listeners.push_back(new otf2_listener());\n        }\n#endif\n\n/* For the Jupyter support, always enable the concurrency handler. */\n#ifndef APEX_WITH_JUPYTER_SUPPORT\n        if (apex_options::use_concurrency() > 0)\n#endif\n        {\n            listeners.push_back(new concurrency_handler(apex_options::concurrency_period(), apex_options::use_concurrency()));\n        }\n        startup_throttling();\n/* For the Jupyter support, always enable the policy listener. */\n#ifndef APEX_WITH_JUPYTER_SUPPORT\n        if (apex_options::use_policy())\n#endif\n        {\n            this->m_policy_handler = new policy_handler();\n            listeners.push_back(this->m_policy_handler);\n        }\n    }\n#if APEX_HAVE_PROC\n    if (apex_options::use_proc_cpuinfo() ||\n        apex_options::use_proc_meminfo() ||\n        apex_options::use_proc_net_dev() ||\n        apex_options::use_proc_self_status() ||\n        apex_options::use_proc_stat()) {\n        pd_reader = new proc_data_reader();\n    } else {\n        pd_reader = nullptr;\n    }\n#endif\n    this->resize_state(1);\n    this->set_state(0, APEX_BUSY);\n}\n\napex* apex::instance()\n{\n    static std::mutex init_mutex;\n    // Only allow one instance of class to be generated.\n    if (m_pInstance == nullptr) {\n        if (_measurement_stopped) {\n            return nullptr;\n        } else {\n            unique_lock<mutex> l(init_mutex);\n            if (m_pInstance == nullptr) {\n                m_pInstance = new apex();\n            }\n        }\n    }\n    return m_pInstance;\n}\n\n/* This function is used to set up thread-specific data structures\n * for each of the asynchronous threads in APEX. For example, the\n * proc_read thread needs a queue for processing sampled values.\n */\nvoid apex::async_thread_setup() {\n    apex* instance = apex::instance();\n    instance->the_profiler_listener->async_thread_setup();\n}\n\n// special case - for cleanup only!\napex* apex::__instance()\n{\n    return m_pInstance;\n}\n\npolicy_handler * apex::get_policy_handler(void) const\n{\n    return this->m_policy_handler;\n}\n\npolicy_handler * apex::get_policy_handler(uint64_t const& period)\n{\n    if(apex_options::use_policy() && period_handlers.count(period) == 0)\n    {\n        period_handlers[period] = new policy_handler(period);\n        //write_lock_type l(listener_mutex);\n        listeners.push_back(period_handlers[period]);\n    }\n    return period_handlers[period];\n}\n\n#ifdef APEX_HAVE_HPX\nvoid apex::set_hpx_runtime(hpx::runtime * hpx_runtime) {\n    m_hpx_runtime = hpx_runtime;\n}\n\nhpx::runtime * apex::get_hpx_runtime(void) {\n    return m_hpx_runtime;\n}\n#endif\n\nuint64_t init(const char * thread_name, uint64_t comm_rank, uint64_t comm_size) {\n    FUNCTION_ENTER\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { FUNCTION_EXIT; return APEX_ERROR; }\n    // protect against multiple initializations\n#ifdef APEX_WITH_JUPYTER_SUPPORT\n    if (_registered || _initialized) { \n        // reset all counters, and return.\n        reset(APEX_NULL_FUNCTION_ADDRESS);\n        \n        FUNCTION_EXIT\n        return APEX_NOERROR; \n    }\n#else\n    if (_registered || _initialized) { \n        /* check to see if APEX was initialized by OMPT before MPI had a chance\n         * to pass in any values */\n        if ((comm_rank < comm_size) && (comm_size > 1)) { // simple validation\n            apex* instance = apex::instance(); // get/create the Apex static instance\n            instance->set_node_id(comm_rank);\n            instance->set_num_ranks(comm_size);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->set_node_id((int)comm_rank, (int)comm_size);\n            }\n        }\n        FUNCTION_EXIT\n        return APEX_ERROR; \n    }\n#endif\n    _registered = true;\n    _initialized = true;\n    apex* instance = apex::instance(); // get/create the Apex static instance\n    // assign the rank and size.  Why not in the constructor?\n    // because, if we registered a startup policy, the default\n    // constructor was called, without the correct comm_rank and comm_size.\n    if (comm_rank < comm_size && comm_size > 0) { // simple validation\n      instance->set_node_id(comm_rank);\n      instance->set_num_ranks(comm_size);\n    }\n    //printf(\"Node %lu of %lu\\n\", comm_rank, comm_size);\n    if (!instance || _exited) {\n        FUNCTION_EXIT\n        return APEX_ERROR; // protect against calls after finalization\n    }\n    init_plugins();\n    startup_event_data data(comm_rank, comm_size);\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_startup(data);\n        }\n    }\n    if (apex_options::top_level_os_threads()) {\n        // start top-level timers for threads\n        if (thread_name) {\n            stringstream ss;\n            ss << \"OS Thread: \" << thread_name;\n            top_level_timer = start(ss.str().c_str());\n        } else {\n            top_level_timer = start(\"OS Thread\");\n        }\n    }\n    if (apex_options::use_screen_output() && instance->get_node_id() == 0) {\n      std::cout << version() << std::endl;\n      apex_options::print_options();\n    }\n    if (apex_options::throttle_energy() && apex_options::throttle_concurrency() ) {\n      setup_power_cap_throttling();\n    }\n    // this code should be absorbed from \"new node\" event to \"on_startup\" event.\n    node_event_data node_data(comm_rank, thread_instance::get_id());\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_new_node(node_data);\n        }\n    }\n    /* register the finalization function, for program exit */\n    std::atexit(cleanup);\n    FUNCTION_EXIT\n    return APEX_NOERROR;\n}\n\nstring& version() {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { static string tmp(\"disabled\"); return tmp; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    return instance->version_string;\n}\n\n/* Populate the new task_wrapper object, and notify listeners. */\ninline std::shared_ptr<task_wrapper> _new_task(\n    task_identifier * id, \n    const uint64_t task_id,\n    const std::shared_ptr<task_wrapper> &parent_task, apex* instance) {\n    std::shared_ptr<task_wrapper> tt_ptr = make_shared<task_wrapper>();\n    tt_ptr->task_id = id;\n    // if not tracking dependencies, don't save the parent\n    if ((!apex_options::use_taskgraph_output()) &&\n         !apex_options::use_otf2()) {\n        tt_ptr->parent = task_wrapper::get_apex_main_wrapper();\n    // was a parent passed in?\n    } else if (parent_task != nullptr) {\n        tt_ptr->parent_guid = parent_task->guid;\n        tt_ptr->parent = parent_task;\n    // if not, is there a current timer?\n    } else {\n        profiler * p = thread_instance::instance().get_current_profiler();\n        if (p != nullptr) {\n            tt_ptr->parent_guid = p->guid;\n            tt_ptr->parent = p->tt_ptr;\n        } else {\n            tt_ptr->parent = task_wrapper::get_apex_main_wrapper();\n            // tt_ptr->parent_guid is 0 by default\n        }\n    }\n    if (task_id == UINTMAX_MAX) {\n        // generate a GUID\n        tt_ptr->guid = thread_instance::get_guid();\n    } else {\n        // use the runtime provided GUID\n        tt_ptr->guid = task_id;\n    }\n    //instance->active_task_wrappers.insert(tt_ptr);\n    return tt_ptr;\n}\n\nprofiler* start(const std::string &timer_name)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_START\n        return nullptr; \n    }\n    //printf(\"%lu: %s\\n\", thread_instance::get_id(), timer_name.c_str()); fflush(stdout);\n    static const std::string apex_internal(\"apex_internal\");\n    if (starts_with(timer_name, apex_internal)) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_START\n        return profiler::get_disabled_profiler(); // don't process our own events - queue scrubbing tasks.\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_START_AFTER_FINALIZE\n        return nullptr;\n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_START\n        return profiler::get_disabled_profiler(); \n    }\n    std::shared_ptr<task_wrapper> tt_ptr(nullptr);\n    if (_notify_listeners) {\n        bool success = true;\n        task_identifier * id = task_identifier::get_task_id(timer_name);\n        tt_ptr = _new_task(id, UINTMAX_MAX, null_task_wrapper, instance);\n        APEX_UTIL_REF_COUNT_TASK_WRAPPER\n        //read_lock_type l(instance->listener_mutex);\n        //cout << thread_instance::get_id() << \" Start : \" << id->get_name() << endl; fflush(stdout);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            success = instance->listeners[i]->on_start(tt_ptr);\n            if (!success && i == 0) {\n                //cout << thread_instance::get_id() << \" *** Not success! \" << id->get_name() << endl; fflush(stdout);\n                APEX_UTIL_REF_COUNT_FAILED_START\n                return profiler::get_disabled_profiler();\n            }\n        }\n    }\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (timer_name.compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_START\n    } else {\n        APEX_UTIL_REF_COUNT_START\n    }\n    return thread_instance::instance().restore_children_profilers(tt_ptr);\n}\n\nprofiler* start(const apex_function_address function_address) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_START\n        return nullptr; \n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_START_AFTER_FINALIZE\n        return nullptr;\n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_START\n        return profiler::get_disabled_profiler(); \n    }\n    std::shared_ptr<task_wrapper> tt_ptr(nullptr);\n    if (_notify_listeners) {\n        bool success = true;\n        task_identifier * id = task_identifier::get_task_id(function_address);\n        tt_ptr = _new_task(id, UINTMAX_MAX, null_task_wrapper, instance);\n        APEX_UTIL_REF_COUNT_TASK_WRAPPER\n        //cout << thread_instance::get_id() << \" Start : \" << id->get_name() << endl; fflush(stdout);\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            success = instance->listeners[i]->on_start(tt_ptr);\n            if (!success && i == 0) {\n                //cout << thread_instance::get_id() << \" *** Not success! \" << id->get_name() << endl; fflush(stdout);\n                APEX_UTIL_REF_COUNT_FAILED_START\n                return profiler::get_disabled_profiler();\n            }\n        }\n    }\n    APEX_UTIL_REF_COUNT_START\n    return thread_instance::instance().restore_children_profilers(tt_ptr);\n}\n\nvoid debug_print(const char * event, std::shared_ptr<task_wrapper> &tt_ptr) {\n    static std::mutex this_mutex;\n    std::unique_lock<std::mutex> l(this_mutex);\n    if (tt_ptr == nullptr) {\n        cout << thread_instance::get_id() << \" \" << event << \" : (null) : (null)\" \n            << endl; fflush(stdout);\n    } else {\n        cout << thread_instance::get_id() << \" \" << event << \" : \" << tt_ptr->guid << \" : \" <<\n            tt_ptr->get_task_id()->get_name() << endl; fflush(stdout);\n    }\n}\n\nprofiler* start(std::shared_ptr<task_wrapper> &tt_ptr) {\n#if defined(APEX_DEBUG)//_disabled)\n    debug_print(\"Start\", tt_ptr);\n#endif\n    if (tt_ptr == nullptr) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_START\n        return nullptr;\n    }\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_START\n        return nullptr; \n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_START_AFTER_FINALIZE\n        return nullptr;\n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_START\n        return profiler::get_disabled_profiler(); \n    }\n    if (_notify_listeners) {\n        bool success = true;\n        //cout << thread_instance::get_id() << \" Start : \" << id->get_name() << endl; fflush(stdout);\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            success = instance->listeners[i]->on_start(tt_ptr);\n            tt_ptr->prof = thread_instance::instance().get_current_profiler();\n            if (!success && i == 0) {\n                //cout << thread_instance::get_id() << \" *** Not success! \" << id->get_name() << endl; fflush(stdout);\n                APEX_UTIL_REF_COUNT_FAILED_START\n                return profiler::get_disabled_profiler();\n            }\n        }\n    }\n    APEX_UTIL_REF_COUNT_START\n    return thread_instance::instance().restore_children_profilers(tt_ptr);\n}\n\nprofiler* resume(const std::string &timer_name) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_RESUME\n        return nullptr; \n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_RESUME\n        return profiler::get_disabled_profiler(); \n    }\n    // don't process our own events\n    if (starts_with(timer_name, string(\"apex_internal\"))) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_RESUME\n        return profiler::get_disabled_profiler();\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_RESUME_AFTER_FINALIZE\n        return nullptr;\n    }\n    std::shared_ptr<task_wrapper> tt_ptr(nullptr);\n    if (_notify_listeners) {\n        task_identifier * id = task_identifier::get_task_id(timer_name);\n        tt_ptr = _new_task(id, UINTMAX_MAX, null_task_wrapper, instance);\n        APEX_UTIL_REF_COUNT_TASK_WRAPPER\n        try {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_resume(tt_ptr);\n            }\n        } catch (disabled_profiler_exception &e) { \n            APEX_UTIL_REF_COUNT_FAILED_RESUME\n            return profiler::get_disabled_profiler(); \n        }\n    }\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (timer_name.compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_RESUME\n    } else {\n        APEX_UTIL_REF_COUNT_RESUME\n    }\n    return thread_instance::instance().restore_children_profilers(tt_ptr);\n}\n\nprofiler* resume(const apex_function_address function_address) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_RESUME\n        return nullptr; \n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_RESUME\n        return profiler::get_disabled_profiler(); \n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_RESUME_AFTER_FINALIZE\n        return nullptr;\n    }\n    std::shared_ptr<task_wrapper> tt_ptr(nullptr);\n    if (_notify_listeners) {\n        task_identifier * id = task_identifier::get_task_id(function_address);\n        tt_ptr = _new_task(id, UINTMAX_MAX, null_task_wrapper, instance);\n        APEX_UTIL_REF_COUNT_TASK_WRAPPER\n        try {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_resume(tt_ptr);\n            }\n        } catch (disabled_profiler_exception &e) { \n            APEX_UTIL_REF_COUNT_FAILED_RESUME\n            return profiler::get_disabled_profiler(); \n        }\n    }\n    APEX_UTIL_REF_COUNT_RESUME\n    return thread_instance::instance().restore_children_profilers(tt_ptr);\n}\n\nprofiler* resume(profiler * p) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_RESUME\n        return nullptr; \n    }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { \n        APEX_UTIL_REF_COUNT_SUSPENDED_RESUME\n        return profiler::get_disabled_profiler(); \n    }\n    if (p->stopped) {\n        APEX_UTIL_REF_COUNT_DOUBLE_STOP\n        return profiler::get_disabled_profiler(); \n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited) {\n        APEX_UTIL_REF_COUNT_RESUME_AFTER_FINALIZE\n        return nullptr;\n    }\n    p->restart();\n    if (_notify_listeners) {\n        try {\n            // skip the profiler_listener - we are restoring a child timer\n            // for a parent that was yielded.\n            for (unsigned int i = 1 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_resume(p->tt_ptr);\n            }\n        } catch (disabled_profiler_exception &e) { \n            APEX_UTIL_REF_COUNT_FAILED_RESUME\n            return profiler::get_disabled_profiler(); \n        }\n    }\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (p->tt_ptr->get_task_id()->get_name(false).compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_RESUME\n    } else {\n        APEX_UTIL_REF_COUNT_RESUME\n    }\n    return p;\n}\n\nvoid reset(const std::string &timer_name) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    task_identifier * id = task_identifier::get_task_id(timer_name);\n    //instance->the_profiler_listener->reset(id);\n    if (_notify_listeners) {\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_reset(id);\n        }\n    }\n}\n\nvoid reset(apex_function_address function_address) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    task_identifier * id = nullptr;\n    if (function_address != APEX_NULL_FUNCTION_ADDRESS) {\n        id = task_identifier::get_task_id(function_address);\n    }\n    //instance->the_profiler_listener->reset(id);\n    if (_notify_listeners) {\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_reset(id);\n        }\n    }\n}\n\nvoid set_state(apex_thread_state state) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    instance->set_state(thread_instance::get_id(), state);\n}\n\nvoid stop(profiler* the_profiler, bool cleanup) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_STOP\n        return; \n    }\n    if (the_profiler == profiler::get_disabled_profiler()) {\n        APEX_UTIL_REF_COUNT_DISABLED_STOP\n        return; // profiler was throttled.\n    }\n    if (the_profiler == nullptr) {\n        APEX_UTIL_REF_COUNT_NULL_STOP\n        return;\n    }\n    if (the_profiler->stopped) {\n        APEX_UTIL_REF_COUNT_DOUBLE_STOP\n        return;\n    }\n    thread_instance::instance().clear_current_profiler(the_profiler, false, null_task_wrapper);\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited || _measurement_stopped) { \n        APEX_UTIL_REF_COUNT_STOP_AFTER_FINALIZE\n        return; \n    }\n    std::shared_ptr<profiler> p{the_profiler};\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_stop(p);\n        }\n    }\n    //cout << thread_instance::get_id() << \" Stop : \" << the_profiler->tt_ptr->get_task_id()->get_name() << endl; fflush(stdout);\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (p->tt_ptr->get_task_id()->get_name(false).compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_STOP\n    } else {\n        APEX_UTIL_REF_COUNT_STOP\n    }\n    if (cleanup) {\n        if (_notify_listeners) {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_task_complete(p->tt_ptr);\n            }\n        }\n        //instance->active_task_wrappers.erase(p->tt_ptr);\n        p->tt_ptr = nullptr;\n    }\n}\n\nvoid stop(std::shared_ptr<task_wrapper> &tt_ptr) {\n#if defined(APEX_DEBUG)//_disabled)\n    debug_print(\"Stop\", tt_ptr);\n#endif\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_STOP\n        tt_ptr = nullptr;\n        return; \n    }\n    if (tt_ptr == nullptr || tt_ptr->prof == nullptr) {\n        APEX_UTIL_REF_COUNT_NULL_STOP\n        return;\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (tt_ptr->prof == profiler::get_disabled_profiler()) {\n        APEX_UTIL_REF_COUNT_DISABLED_STOP\n        return; // profiler was throttled.\n    }\n    if (tt_ptr->prof->stopped) {\n        APEX_UTIL_REF_COUNT_DOUBLE_STOP\n        return;\n    }\n    thread_instance::instance().clear_current_profiler(tt_ptr->prof, false, null_task_wrapper);\n    // protect against calls after finalization\n    if (!instance || _exited || _measurement_stopped) { \n        APEX_UTIL_REF_COUNT_STOP_AFTER_FINALIZE\n        return; \n    }\n    std::shared_ptr<profiler> p{tt_ptr->prof};\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_stop(p);\n        }\n    }\n    //cout << thread_instance::get_id() << \" Stop : \" << tt_ptr->tt_ptr->get_task_id()->get_name() << endl; fflush(stdout);\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (p->tt_ptr->get_task_id()->get_name(false).compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_STOP\n    } else {\n        APEX_UTIL_REF_COUNT_STOP\n    }\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_task_complete(tt_ptr);\n        }\n    }\n}\n\nvoid yield(profiler* the_profiler)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_YIELD\n        return; \n    }\n    if (the_profiler == profiler::get_disabled_profiler()) { \n        APEX_UTIL_REF_COUNT_DISABLED_YIELD\n        return; // profiler was throttled.\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited || _measurement_stopped) {\n        APEX_UTIL_REF_COUNT_YIELD_AFTER_FINALIZE\n        return;\n    }\n    if (the_profiler == nullptr) {\n        APEX_UTIL_REF_COUNT_NULL_YIELD\n        return;\n    }\n    if (the_profiler->stopped) {\n        APEX_UTIL_REF_COUNT_DOUBLE_YIELD\n        return;\n    }\n    thread_instance::instance().clear_current_profiler(the_profiler, false, null_task_wrapper);\n    std::shared_ptr<profiler> p{the_profiler};\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_yield(p);\n        }\n    }\n    //cout << thread_instance::get_id() << \" Yield : \" << the_profiler->tt_ptr->get_task_id()->get_name() << endl; fflush(stdout);\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (p->tt_ptr->get_task_id()->get_name(false).compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_YIELD\n    } else {\n        APEX_UTIL_REF_COUNT_YIELD\n    }\n}\n\nvoid yield(std::shared_ptr<task_wrapper> &tt_ptr)\n{\n#if defined(APEX_DEBUG)//_disabled)\n    debug_print(\"Yield\", tt_ptr);\n#endif\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { \n        APEX_UTIL_REF_COUNT_DISABLED_YIELD\n        return; \n    }\n    if (tt_ptr == nullptr || tt_ptr->prof == nullptr) {\n        APEX_UTIL_REF_COUNT_NULL_YIELD\n        return;\n    }\n    if (tt_ptr->prof == profiler::get_disabled_profiler()) { \n        APEX_UTIL_REF_COUNT_DISABLED_YIELD\n        return; // profiler was throttled.\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    // protect against calls after finalization\n    if (!instance || _exited || _measurement_stopped) {\n        APEX_UTIL_REF_COUNT_YIELD_AFTER_FINALIZE\n        return;\n    }\n    if (tt_ptr->prof->stopped) {\n        APEX_UTIL_REF_COUNT_DOUBLE_YIELD\n        return;\n    }\n    thread_instance::instance().clear_current_profiler(tt_ptr->prof, true, tt_ptr);\n    std::shared_ptr<profiler> p{tt_ptr->prof};\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_yield(p);\n        }\n    }\n    //cout << thread_instance::get_id() << \" Yield : \" << tt_ptr->prof->tt_ptr->get_task_id()->get_name() << endl; fflush(stdout);\n    static std::string apex_process_profile_str(\"apex::process_profiles\");\n    if (p->tt_ptr->get_task_id()->get_name(false).compare(apex_process_profile_str) == 0) {\n        APEX_UTIL_REF_COUNT_APEX_INTERNAL_YIELD\n    } else {\n        APEX_UTIL_REF_COUNT_YIELD\n    }\n    tt_ptr->prof = nullptr;\n}\n\nvoid sample_value(const std::string &name, double value)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    // parse the counter name\n    // either /threadqueue{locality#0/total}/length\n    // or     /threadqueue{locality#0/worker-thread#0}/length\n    int tid = 0;\n    if (name.find(instance->m_my_locality) != name.npos)\n    {\n        if (name.find(\"worker-thread\") != name.npos)\n        {\n            string tmp_name = string(name.c_str());\n            // tokenize by / character\n            char* token = strtok(const_cast<char*>(tmp_name.c_str()), \"/\");\n            while (token!=nullptr) {\n              if (strstr(token, \"worker-thread\")==NULL) { break; }\n              token = strtok(NULL, \"/\");\n            }\n            if (token != nullptr) {\n              // strip the trailing close bracket\n              token = strtok(token, \"}\");\n              tid = thread_instance::map_name_to_id(token);\n            }\n            if (tid == -1) {\n                tid = 0;\n            }\n        }\n    }\n    sample_value_event_data data(tid, name, value);\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_sample_value(data);\n        }\n    }\n}\n\nstd::shared_ptr<task_wrapper> new_task(\n    const std::string &timer_name, \n    const uint64_t task_id, \n    const std::shared_ptr<task_wrapper> &parent_task)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return nullptr; }\n    static const std::string apex_internal(\"apex_internal\");\n    if (starts_with(timer_name, apex_internal)) {\n        APEX_UTIL_REF_COUNT_NULL_TASK_WRAPPER\n        return nullptr; // don't process our own events - queue scrubbing tasks.\n    }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) { \n        APEX_UTIL_REF_COUNT_NULL_TASK_WRAPPER\n        return nullptr; \n    } // protect against calls after finalization\n    task_identifier * id = task_identifier::get_task_id(timer_name);\n    std::shared_ptr<task_wrapper> tt_ptr(_new_task(id, task_id, parent_task, instance));\n    APEX_UTIL_REF_COUNT_TASK_WRAPPER\n    return tt_ptr;\n}\n\nstd::shared_ptr<task_wrapper> new_task(\n    const apex_function_address function_address, \n    const uint64_t task_id, \n    const std::shared_ptr<task_wrapper> &parent_task) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return nullptr; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) { return nullptr; } // protect against calls after finalization\n    task_identifier * id = task_identifier::get_task_id(function_address);\n    std::shared_ptr<task_wrapper> tt_ptr(_new_task(id, task_id, parent_task, instance));\n    return tt_ptr;\n}\n\nstd::shared_ptr<task_wrapper> update_task(\n    std::shared_ptr<task_wrapper> &wrapper, \n    const std::string &timer_name) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return nullptr; }\n    assert(wrapper);\n    task_identifier * id = task_identifier::get_task_id(timer_name);\n    if (id != wrapper->get_task_id()) {\n        wrapper->aliases.insert(id);\n    }\n    return wrapper;\n}\n\nstd::shared_ptr<task_wrapper> update_task(\n    std::shared_ptr<task_wrapper> &wrapper, \n    const apex_function_address function_address) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return nullptr; }\n    if (wrapper == nullptr) {\n        apex* instance = apex::instance(); // get the Apex static instance\n        if (!instance || _exited) { return nullptr; } // protect against calls after finalization\n        task_identifier * id = task_identifier::get_task_id(function_address);\n        wrapper = _new_task(id, UINTMAX_MAX, null_task_wrapper, instance);\n    } else {\n        wrapper->task_id = task_identifier::get_task_id(function_address);\n    }\n    return wrapper;\n}\n\nstd::atomic<int> custom_event_count(APEX_CUSTOM_EVENT_1);\n\napex_event_type register_custom_event(const std::string &name) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return APEX_CUSTOM_EVENT_1; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return APEX_CUSTOM_EVENT_1; // protect against calls after finalization\n    if (custom_event_count == APEX_MAX_EVENTS) {\n      std::cerr << \"Cannot register more than MAX Events! (set to \" << APEX_MAX_EVENTS << \")\" << std::endl;\n    }\n    write_lock_type l(instance->custom_event_mutex);\n    instance->custom_event_names[custom_event_count] = name;\n    int tmp = custom_event_count;\n    custom_event_count++;\n    return (apex_event_type)tmp;\n}\n\nvoid custom_event(apex_event_type event_type, void * custom_data) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    custom_event_data data(event_type, custom_data);\n    if (_notify_listeners) {\n        //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_custom_event(data);\n        }\n    }\n}\n\n#ifdef APEX_HAVE_HPX\nhpx::runtime * get_hpx_runtime_ptr(void) {\n    apex * instance = apex::instance();\n    if (!instance || _exited) {\n        return nullptr;\n    }\n    hpx::runtime * runtime = instance->get_hpx_runtime();\n    return runtime;\n}\n#endif\n\nvoid init_plugins(void) {\n#ifdef APEX_USE_PLUGINS\n    FUNCTION_ENTER\n    if (apex_options::disable() == true) { return; }\n    std::string plugin_names_str{apex_options::plugins()};\n    std::string plugins_prefix{apex_options::plugins_path()};\n    std::string plugins_suffix{\".so\"};\n    if(plugin_names_str.empty()) {\n        FUNCTION_EXIT\n        return;\n    }\n    std::vector<std::string> plugin_names;\n    std::vector<std::string> plugin_paths;\n    split( plugin_names_str, ':', plugin_names);\n    for(const std::string & plugin_name : plugin_names) {\n        plugin_paths.push_back(plugins_prefix + \"/\" + plugin_name + plugins_suffix);\n    }\n    for(const std::string & plugin_path : plugin_paths) {\n        const char * path = plugin_path.c_str();\n        void * plugin_handle = dlopen(path, RTLD_NOW);\n        if(!plugin_handle) {\n            std::cerr << \"Error loading plugin \" << path << \": \" << dlerror() << std::endl;\n            FUNCTION_EXIT\n            continue;\n        }\n        int (*init_fn)() = (int (*)()) ((uintptr_t) dlsym(plugin_handle, \"apex_plugin_init\"));\n        if(!init_fn) {\n            std::cerr << \"Error loading apex_plugin_init from \" << path << \": \" << dlerror() << std::endl;\n            dlclose(plugin_handle);\n            FUNCTION_EXIT\n            continue;\n        }\n        int (*finalize_fn)() = (int (*)()) ((uintptr_t) dlsym(plugin_handle, \"apex_plugin_finalize\"));\n        if(!finalize_fn) {\n            std::cerr << \"Error loading apex_plugin_finalize from \" << path << \": \" << dlerror() << std::endl;\n            dlclose(plugin_handle);\n            FUNCTION_EXIT\n            continue;\n        }\n        apex * instance = apex::instance();\n        if(!instance) {\n            std::cerr << \"Error getting APEX instance while registering finalize function from \" << path << std::endl;\n            FUNCTION_EXIT\n            continue;\n        }\n        instance->finalize_functions.push_back(finalize_fn);\n        int result = init_fn();\n        if(result != 0) {\n            std::cerr << \"Error: apex_plugin_init for \" << path << \" returned \" << result << std::endl;\n            dlclose(plugin_handle);\n            FUNCTION_EXIT\n            continue;\n        }\n    }\n    FUNCTION_EXIT\n#endif\n}\n\nvoid finalize_plugins(void) {\n#ifdef APEX_USE_PLUGINS\n    FUNCTION_ENTER\n    if (apex_options::disable() == true) { return; }\n    apex * instance = apex::instance();\n    if(!instance) return;\n    for(int (*finalize_function)() : instance->finalize_functions) {\n        int result = finalize_function();\n        if(result != 0) {\n            std::cerr << \"Error: plugin finalize function returned \" << result << std::endl;\n            continue;\n        }\n    }\n    FUNCTION_EXIT\n#endif\n}\n\nstd::string dump(bool reset) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return(std::string(\"\")); }\n    bool old_screen_output = apex_options::use_screen_output();\n#ifdef APEX_WITH_JUPYTER_SUPPORT\n    // force output in the Jupyter notebook\n    apex_options::use_screen_output(true);\n#endif\n\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance) { FUNCTION_EXIT return(std::string(\"\")); } // protect against calls after finalization\n    if (_notify_listeners) {\n        dump_event_data data(instance->get_node_id(), thread_instance::get_id(), reset);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_dump(data);\n        }\n        apex_options::use_screen_output(old_screen_output);\n        return(data.output);\n    }\n    apex_options::use_screen_output(old_screen_output);\n    return(std::string(\"\"));\n}\n\nvoid finalize()\n{\n#ifdef APEX_WITH_JUPYTER_SUPPORT\n    // reset all counters, and return.\n    //reset(APEX_NULL_FUNCTION_ADDRESS);\n    return;\n#endif\n    FUNCTION_ENTER\n    // prevent re-entry, be extra strict about race conditions - it is possible.\n    mutex shutdown_mutex;\n    static bool finalized = false;\n    {\n        unique_lock<mutex> l(shutdown_mutex);\n        if (finalized) { FUNCTION_EXIT return; };\n        finalized = true;\n    }\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    // FIRST, stop the top level timer, while the infrastructure is still functioning.\n    if (top_level_timer != nullptr) { stop(top_level_timer); }\n    // stop processing new timers/counters/messages/tasks/etc.\n    apex_options::suspend(true);\n    // now, process all output\n    dump(false);\n    // if not done already...\n    shutdown_throttling();\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance) { FUNCTION_EXIT return; } // protect against calls after finalization\n    finalize_plugins();\n    instance->stop_all_policy_handles();\n#if APEX_HAVE_PROC\n    if (instance->pd_reader != nullptr) {\n        instance->pd_reader->stop_reading();\n    }\n#endif\n    exit_thread();\n#if APEX_HAVE_MSR\n    apex_finalize_msr();\n#endif\n    if (!_measurement_stopped)\n    {\n        _measurement_stopped = true;\n        APEX_UTIL_REPORT_STATS\n#ifdef APEX_HAVE_HPX\n        /* HPX shutdown happens on a new thread. We don't want\n         * to register a new thread. */\n        shutdown_event_data data(instance->get_node_id(), 0);\n#else\n        shutdown_event_data data(instance->get_node_id(), thread_instance::get_id());\n#endif\n        _notify_listeners = false;\n        {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_shutdown(data);\n            }\n        }\n    }\n    thread_instance::delete_instance();\n#if APEX_HAVE_BFD\n    address_resolution::delete_instance();\n#endif\n    FUNCTION_EXIT\n}\n\nvoid cleanup(void) {\n    FUNCTION_ENTER\n#ifdef APEX_HAVE_HPX\n    // prevent crash at shutdown.\n    return;\n#endif\n    // prevent re-entry, be extra strict about race conditions - it is possible.\n    mutex shutdown_mutex;\n    static bool finalized = false;\n    {\n        unique_lock<mutex> l(shutdown_mutex);\n        if (finalized) { return; };\n        finalized = true;\n    }\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { FUNCTION_EXIT return; }\n    apex* instance = apex::__instance(); // get the Apex static instance\n    if (!instance) { FUNCTION_EXIT return; } // protect against multiple calls\n    if (!_measurement_stopped) {\n        finalize();\n    }\n    /* this is one of the last things we should do - because the apex_options\n     * sometimes control behavior at shutdown. */\n    apex_options::delete_instance();\n    /*\n    for (auto t : instance->active_task_wrappers) {\n        instance->active_task_wrappers.erase(t);\n    }\n    */\n    delete(instance);\n    FUNCTION_EXIT\n}\n\nvoid register_thread(const std::string &name)\n{\n    FUNCTION_ENTER\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    if (_registered) return; // protect against multiple registrations on the same thread\n    _registered = true;\n    thread_instance::set_name(name);\n    instance->resize_state(thread_instance::get_id());\n    instance->set_state(thread_instance::get_id(), APEX_BUSY);\n    new_thread_event_data data(name);\n    if (_notify_listeners) {\n            //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_new_thread(data);\n        }\n    }\n    if (apex_options::top_level_os_threads()) {\n        stringstream ss;\n        ss << \"OS Thread: \";\n        // start top-level timers for threads\n        if (name.find(\"worker-thread\") != name.npos) {\n            ss << \"worker-thread\";\n            top_level_timer = start(ss.str());\n        } else {\n            string::size_type index = name.find(\"#\");\n            if (index!=std::string::npos) {\n                string short_name = name.substr(0,index);\n                ss << short_name;\n                top_level_timer = start(ss.str());\n            } else {\n                ss << name;\n                top_level_timer = start(ss.str());\n            }\n        }\n    }\n}\n\nvoid exit_thread(void)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    apex* instance = apex::instance(); // get the Apex static instance\n    if (!instance || _exited) return; // protect against calls after finalization\n    if (top_level_timer != nullptr) { stop(top_level_timer); }\n    _exited = true;\n    event_data data;\n    if (_notify_listeners) {\n            //read_lock_type l(instance->listener_mutex);\n        for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n            instance->listeners[i]->on_exit_thread(data);\n        }\n    }\n    // delete the thread local instance\n    if (thread_instance::get_id() != 0) {\n        thread_instance::delete_instance();\n    }\n}\n\nvoid apex::push_policy_handle(apex_policy_handle* handle) {\n    apex_policy_handles.push_back(handle);\n}\n\nvoid apex::pop_policy_handle(apex_policy_handle* handle) {\n    apex_policy_handles.remove(handle);\n}\n\nbool apex::policy_handle_exists(apex_policy_handle* handle) {\n    return (std::find(apex_policy_handles.begin(),\n                      apex_policy_handles.end(), \n                      handle) != apex_policy_handles.end());\n}\n\nvoid apex::stop_all_policy_handles(void) {\n    while (apex_policy_handles.size() > 0) {\n        auto tmp = apex_policy_handles.back();\n        // this will pop, deregister and delete the handle\n        deregister_policy(tmp);\n    }\n}\n\napex_policy_handle* register_policy(const apex_event_type when,\n                    std::function<int(apex_context const&)> f)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    int id = -1;\n    policy_handler * handler = apex::instance()->get_policy_handler();\n    if(handler != nullptr)\n    {\n        id = handler->register_policy(when, f);\n    }\n    apex_policy_handle * handle = new apex_policy_handle();\n    handle->id = id;\n    handle->event_type = when;\n    handle->period = 0;\n    apex::instance()->push_policy_handle(handle);\n    return handle;\n}\n\nstd::set<apex_policy_handle*> register_policy(std::set<apex_event_type> when,\n                    std::function<int(apex_context const&)> f)\n{\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return std::set<apex_policy_handle*>(); }\n    std::set<apex_event_type>::iterator it;\n    std::set<apex_policy_handle*> handles;\n    for (it = when.begin(); it != when.end(); ++it)\n    {\n        handles.insert(register_policy(*it,f));\n    }\n    return handles;\n}\n\n/* How to do it with a chrono object. */\n\n/*\ntemplate <typename Rep, typename Period>\nint register_policy(std::chrono::duration<Rep, Period> const& period,\n                    std::function<int(apex_context const&)> f)\n*/\n\napex_policy_handle* register_periodic_policy(unsigned long period_microseconds,\n                    std::function<int(apex_context const&)> f)\n {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    int id = -1;\n    policy_handler * handler = apex::instance()->get_policy_handler(period_microseconds);\n    if(handler != nullptr)\n    {\n        id = handler->register_policy(APEX_PERIODIC, f);\n    }\n    apex_policy_handle * handle = new apex_policy_handle();\n    handle->id = id;\n    handle->event_type = APEX_PERIODIC;\n    handle->period = period_microseconds;\n    apex::instance()->push_policy_handle(handle);\n    return handle;\n}\n\n#ifdef APEX_HAVE_HPX\nint apex::setup_runtime_counter(const std::string & counter_name) {\n    bool messaged = false;\n    if(get_hpx_runtime_ptr() != nullptr) {\n        using hpx::naming::id_type;\n        using hpx::performance_counters::get_counter;\n        using hpx::performance_counters::stubs::performance_counter;\n        using hpx::performance_counters::counter_value;\n        try {\n            id_type id = get_counter(counter_name);\n            if (id == hpx::naming::invalid_id) {\n                if (instance()->get_node_id() == 0 && !messaged) {\n                    std::cerr << \"Error: invalid HPX counter: \" << counter_name << std::endl;\n                    messaged = true;\n                }\n                return APEX_ERROR;\n            }\n            performance_counter::start(hpx::launch::sync, id);\n            registered_counters.emplace(std::make_pair(counter_name, id));\n            //std::cout << \"Started counter \" << counter_name << std::endl;\n        } catch(hpx::exception const & /*e*/) {\n            if (instance()->get_node_id() == 0) {\n                std::cerr << \"Error: unable to start HPX counter: \" << counter_name << std::endl;\n            }\n            return APEX_ERROR;\n        }\n    }\n    return APEX_NOERROR;\n}\n\nvoid apex::query_runtime_counters(void) {\n    if (instance()->get_node_id() > 0) {return;}\n    using hpx::naming::id_type;\n    using hpx::performance_counters::get_counter;\n    using hpx::performance_counters::stubs::performance_counter;\n    using hpx::performance_counters::counter_value;\n    for (auto counter : registered_counters) {\n        string name = counter.first;\n        id_type id = counter.second;\n        counter_value value1 = performance_counter::get_value(hpx::launch::sync, id);\n        const int value = value1.get_value<int>();\n        sample_value(name, value);\n    }\n}\n#endif\n\napex_policy_handle * sample_runtime_counter(unsigned long period, const std::string & counter_name) {\n    apex_policy_handle * handle = nullptr;\n#ifdef APEX_HAVE_HPX\n    if(get_hpx_runtime_ptr() != nullptr) {\n        using hpx::naming::id_type;\n        using hpx::performance_counters::get_counter;\n        using hpx::performance_counters::stubs::performance_counter;\n        using hpx::performance_counters::counter_value;\n        id_type id = get_counter(counter_name);\n        if (id == hpx::naming::invalid_id) {\n            std::cerr << \"Error: invalid HPX counter: \" << counter_name << std::endl;\n        }\n        performance_counter::start(hpx::launch::sync, id);\n        handle = register_periodic_policy(period, [=](apex_context const& ctx) -> int {\n            try {\n                counter_value value1 = performance_counter::get_value(hpx::launch::sync, id);\n                const int value = value1.get_value<int>();\n                sample_value(counter_name, value);\n            } catch(hpx::exception const & /*e*/) {\n                std::cerr << \"Error: unable to start HPX counter: \" << counter_name << std::endl;\n                return APEX_ERROR;\n            }\n            return APEX_NOERROR;\n        });\n    }\n#else\n    std::cerr << \"WARNING: Runtime counter sampling is not implemented for your runtime\" << std::endl;\n#endif\n    return handle;\n}\n\nvoid deregister_policy(apex_policy_handle * handle) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    // disable processing of policy for now\n    //_notify_listeners = false;\n    // if this policy has been deregistered already, return.\n    if (!(apex::instance()->policy_handle_exists(handle))) { return; }\n    policy_handler * handler = nullptr;\n    if (handle->event_type == APEX_PERIODIC) {\n        handler = apex::instance()->get_policy_handler(handle->period);\n    } else {\n        handler = apex::instance()->get_policy_handler();\n    }\n    if(handler != nullptr) {\n        handler->deregister_policy(handle);\n    }\n    //_notify_listeners = true;\n    apex::instance()->pop_policy_handle(handle);\n    delete(handle);\n}\n\napex_profile* get_profile(apex_function_address action_address) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    task_identifier id(action_address);\n    profile * tmp = apex::__instance()->the_profiler_listener->get_profile(id);\n    if (tmp != nullptr)\n        return tmp->get_profile();\n    return nullptr;\n}\n\napex_profile* get_profile(const std::string &timer_name) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return nullptr; }\n    task_identifier id(timer_name);\n    profile * tmp = apex::__instance()->the_profiler_listener->get_profile(id);\n    if (tmp != nullptr)\n        return tmp->get_profile();\n    return nullptr;\n}\n\ndouble current_power_high(void) {\n    double power = 0.0;\n#ifdef APEX_HAVE_RCR\n    power = (double)rcr_current_power_high();\n    //std::cout << \"Read power from RCR: \" << power << std::endl;\n#elif APEX_HAVE_MSR\n    power = msr_current_power_high();\n    //std::cout << \"Read power from MSR: \" << power << std::endl;\n#elif APEX_HAVE_PROC\n    power = (double)read_power();\n    //std::cout << \"Read power from Cray Power Monitoring and Management: \" << power << std::endl;\n#else\n    //std::cout << \"NO POWER READING! Did you configure with RCR, MSR or Cray?\" << std::endl;\n#endif\n    return power;\n}\n\n/*\nstd::vector<std::string> get_available_profiles() {\n    return apex::__instance()->the_profiler_listener->get_available_profiles();\n}\n*/\n\nvoid print_options() {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return; }\n    print_options();\n    return;\n}\n\nvoid send (uint64_t tag, uint64_t size, uint64_t target) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return ; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return ; }\n    // if APEX hasn't been initialized, do nothing.\n    if (!_initialized) { return ; }\n    // get the Apex static instance\n    apex* instance = apex::instance();\n    // protect against calls after finalization\n    if (!instance || _exited) { return ; }\n\n    if (_notify_listeners) {\n        // eventually, we want to use the thread id, but for now, just use 0.\n        //message_event_data data(tag, size, instance->get_node_id(), thread_instance::get_id(), target);\n        message_event_data data(tag, size, instance->get_node_id(), 0, target);\n        if (_notify_listeners) {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_send(data);\n            }\n        }\n    }\n}\n\nvoid recv (uint64_t tag, uint64_t size, uint64_t source_rank, uint64_t source_thread) {\n    // if APEX is disabled, do nothing.\n    if (apex_options::disable() == true) { return ; }\n    // if APEX is suspended, do nothing.\n    if (apex_options::suspend() == true) { return ; }\n    // if APEX hasn't been initialized, do nothing.\n    if (!_initialized) { return ; }\n    // get the Apex static instance\n    apex* instance = apex::instance();\n    // protect against calls after finalization\n    if (!instance || _exited) { return ; }\n\n    if (_notify_listeners) {\n        // eventually, we want to use the thread id, but for now, just use 0.\n        //message_event_data data(tag, size, source_rank, source_thread, instance->get_node_id());\n        message_event_data data(tag, size, source_rank, 0, instance->get_node_id());\n        if (_notify_listeners) {\n            //read_lock_type l(instance->listener_mutex);\n            for (unsigned int i = 0 ; i < instance->listeners.size() ; i++) {\n                instance->listeners[i]->on_recv(data);\n            }\n        }\n    }\n}\n\n} // apex namespace\n\nusing namespace apex;\n\nextern \"C\" {\n\n    int apex_init(const char * thread_name, unsigned long int comm_rank, unsigned long int comm_size)\n    {\n        return init(thread_name, comm_rank, comm_size);\n    }\n\n    int apex_init_(unsigned long int comm_rank, unsigned long int comm_size) {\n        return init(\"FORTRAN thread\", comm_rank, comm_size);\n    }\n\n    int apex_init__(unsigned long int comm_rank, unsigned long int comm_size) {\n        return init(\"FORTRAN thread\", comm_rank, comm_size);\n    }\n\n    void apex_cleanup()\n    {\n        cleanup();\n    }\n\n    const char * apex_dump(bool reset)\n    {\n        return(dump(reset).c_str());\n    }\n\n    void apex_finalize()\n    {\n        finalize();\n    }\n\n    void apex_finalize_() { finalize(); }\n\n    void apex_finalize__() { finalize(); }\n\n    const char * apex_version()\n    {\n        return version().c_str();\n    }\n\n    apex_profiler_handle apex_start(apex_profiler_type type, void * identifier)\n    {\n      assert(identifier);\n      if (type == APEX_FUNCTION_ADDRESS) {\n          return reinterpret_cast<apex_profiler_handle>(start((apex_function_address)identifier));\n      } else if (type == APEX_NAME_STRING) {\n          string tmp((const char *)identifier);\n          return reinterpret_cast<apex_profiler_handle>(start(tmp));\n      }\n      return APEX_NULL_PROFILER_HANDLE;\n    }\n\n    void apex_start_(apex_profiler_type type, void * identifier, apex_profiler_handle profiler) {\n      apex_profiler_handle p = apex_start(type, identifier);\n      if (profiler != nullptr) profiler = p;\n    }\n\n    apex_profiler_handle apex_resume(apex_profiler_type type, void * identifier)\n    {\n      assert(identifier);\n      if (type == APEX_FUNCTION_ADDRESS) {\n          return reinterpret_cast<apex_profiler_handle>(resume((apex_function_address)identifier));\n      } else if (type == APEX_NAME_STRING) {\n          string tmp((const char *)identifier);\n          return reinterpret_cast<apex_profiler_handle>(resume(tmp));\n      }\n      return APEX_NULL_PROFILER_HANDLE;\n    }\n\n    void apex_reset(apex_profiler_type type, void * identifier) {\n        if (type == APEX_FUNCTION_ADDRESS) {\n            reset((apex_function_address)(identifier));\n        } else {\n            string tmp((const char *)identifier);\n            reset(tmp);\n        }\n    }\n\n    void apex_set_state(apex_thread_state state) {\n        set_state(state);\n    }\n\n    void apex_stop(apex_profiler_handle the_profiler)\n    {\n        stop(reinterpret_cast<profiler*>(the_profiler));\n    }\n\n    void apex_stop_(apex_profiler_handle the_profiler)\n    {\n        stop(reinterpret_cast<profiler*>(the_profiler));\n    }\n\n    void apex_yield(apex_profiler_handle the_profiler)\n    {\n        yield(reinterpret_cast<profiler*>(the_profiler));\n    }\n\n    void apex_sample_value(const char * name, double value)\n    {\n        string tmp(name);\n        sample_value(tmp, value);\n    }\n\n    void apex_new_task(apex_profiler_type type, void * identifier,\n                       unsigned long long task_id) {\n        if (type == APEX_FUNCTION_ADDRESS) {\n            new_task((apex_function_address)(identifier), task_id);\n        } else {\n            string tmp((const char *)identifier);\n            new_task(tmp, task_id);\n        }\n    }\n\n    apex_event_type apex_register_custom_event(const char * name)\n    {\n        string tmp(name);\n        return register_custom_event(tmp);\n    }\n\n    void apex_custom_event(apex_event_type event_type, void * custom_data)\n    {\n        custom_event(event_type, custom_data);\n    }\n\n    void apex_register_thread(const char * name)\n    {\n        if (name) {\n            string tmp(name);\n            register_thread(tmp);\n        } else {\n            string tmp(\"APEX WORKER THREAD\");\n            register_thread(tmp);\n        }\n    }\n\n    void apex_exit_thread(void)\n    {\n        exit_thread();\n    }\n\n    apex_policy_handle* apex_register_policy(const apex_event_type when, int (f)(apex_context const)) {\n        return register_policy(when, f);\n    }\n\n    apex_policy_handle* apex_register_periodic_policy(unsigned long period, int (f)(apex_context const)) {\n        return register_periodic_policy(period, f);\n    }\n\n    void apex_deregister_policy(apex_policy_handle * handle) {\n        return deregister_policy(handle);\n    }\n\n    apex_profile* apex_get_profile(apex_profiler_type type, void * identifier) {\n        assert(identifier);\n        if (type == APEX_FUNCTION_ADDRESS) {\n            return get_profile((apex_function_address)(identifier));\n        } else {\n            string tmp((const char *)identifier);\n            return get_profile(tmp);\n        }\n        return nullptr;\n    }\n\n    double apex_current_power_high() {\n        return current_power_high();\n    }\n\n    void apex_print_options() {\n        apex_options::print_options();\n        return;\n    }\n\n    void apex_send (uint64_t tag, uint64_t size, uint64_t target) {\n        return send(tag, size, target);\n    }\n\n    void apex_recv (uint64_t tag, uint64_t size, uint64_t source_rank, uint64_t source_thread) {\n        return recv(tag, size, source_rank, source_thread);\n    }\n\n    uint64_t apex_hardware_concurrency(void) {\n        return hardware_concurrency();\n    }\n\n\n} // extern \"C\"\n\n#ifdef APEX_HAVE_HPX_disabled\nHPX_DECLARE_ACTION(APEX_TOP_LEVEL_PACKAGE::finalize, apex_internal_shutdown_action);\nHPX_ACTION_HAS_CRITICAL_PRIORITY(apex_internal_shutdown_action);\nHPX_PLAIN_ACTION(APEX_TOP_LEVEL_PACKAGE::finalize, apex_internal_shutdown_action);\n\nvoid apex_schedule_shutdown() {\n    if(get_hpx_runtime_ptr() == nullptr) return;\n    return;\n    //if(!thread_instance::is_worker()) return;\n    apex_internal_shutdown_action act;\n    try {\n        for(auto locality : hpx::find_all_localities()) {\n            hpx::apply(act, locality);\n        }\n    } catch(...) {\n        // what to do?\n    }\n}\n#endif\n\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TauJVMTI.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/src/Profile/TAU.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/html/TAU-quickref.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/html/images/tau.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/utils/opari2/doc/html.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/utils/opari2/doc/pdf/opari2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/logo-cropped.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/logo.pptx",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/logo-cropped.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/logo-cropped.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/lulesh-paraprof2.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/jumpshot1.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/paraprof1.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/lulesh-paraprof1.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/APEX_diagram.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/logo-cropped.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/APEX_diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/lulesh-paraprof3.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/jumpshot2.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/apex/doc/webdocs/docs/img/paraprof2.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/examples/java/pi/PiCalculateValue.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/examples/java/pi/Pi.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/bin/tau-common.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/tau-medium.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/tau32x32.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/red-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/tau16x16.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/blue-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/tau-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/yellow-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/common/resources/green-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/vis/bin/vis.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/jtau_tf/bin/TAU_tf.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/vis-jogl2/bin/vis-jogl2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/eclipse/plugins.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/tauconf/bin/TAU_Conf.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/tau_multimerge/bin/tau_multimerge.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/java-1.4/tau-common.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/bin/TauIL.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/bin/java_cup.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/java_cup_v10k.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/cup_logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/sym.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/symbol_set.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/non_terminal.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parse_reduce_table.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/production.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parse_reduce_row.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/action_part.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/symbol_part.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lalr_item_set.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parse_action_table.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lr_item_core.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lalr_item.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lexer.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/symbol.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lalr_state.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parse_action.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/reduce_action.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/Main.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parse_action_row.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/production_part.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/parser.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/lalr_transition.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/nonassoc_action.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/version.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/internal_error.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/CUP$parser$actions.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/shift_action.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/terminal.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/action_production.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/emit.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/terminal_set.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/assoc.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/runtime/lr_parser.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/runtime/Scanner.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/runtime/virtual_parse_stack.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/runtime/Symbol.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/simple_calc/sym.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/simple_calc/scanner.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/simple_calc/Main.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/simple_calc/parser.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/TauIL/tools/CUP/java_cup/simple_calc/CUP$parser$actions.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/windows/bin/tau.ico",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/windows/examples/mpi/mpi.suo",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/windows/examples/threads/threads.suo",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/windows/examples/java/PiCalculateValue.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/windows/examples/java/Pi.class",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/taujava/plugins/edu.uoregon.tau.taujava_1.0.0/taujava.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/taujava/plugins/edu.uoregon.tau.taujava_1.0.0/taujavasrc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/taudb_c_api/contrib/uthash-1.9.5.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfdmf/bin/perfdmf.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfdmf/doc/README.perfdmf",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/tauptp/plugins/edu.uoregon.tau.tauptp_1.0.0.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/tau2slog2/bin/tau2slog2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/CubeReader.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/batik-combined.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/swing-layout-0.7.1.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/sqlite.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/h2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/mysql.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/derby.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jfreechart-1.0.12.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/postgresql.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/mesp.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jcommon-1.0.15.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/xerces.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jargs.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jython.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jgraph.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/slog2sdk/lib/slog2printserial.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/slog2sdk/lib/traceTOslog2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/slog2sdk/lib/jumpshot.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/google-gson-2.1/gson-2.1.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/google-gson-2.1/gson-2.1-sources.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/google-gson-2.1/gson-2.1-javadoc.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/gluegen-rt.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/jogl.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/jogl-all.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/bgq/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/bgq/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/bgq/jogl.jar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/bgq/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ia64/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ia64/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ia64/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/gluegen-rt-natives-linux-i586.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/libjogl_cg.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/i386_linux/jogl-all-natives-linux-i586.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/gluegen-rt-natives-linux-aarch64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/jogl-all-natives-linux-aarch64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/jogl.jar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/libGL.so.1.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm_linux/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows/jogl.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows/jogl_cg.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows/jogl_awt.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/gluegen-rt-natives-linux-amd64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/jogl-all-natives-linux-amd64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/libjogl_cg.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/x86_64/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sunx86_64/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sunx86_64/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sunx86_64/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/jogl.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/gluegen-rt.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/gluegen-rt.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/jogl_cg.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/jogl.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/windows64/jogl_awt.dll.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/jogl.jar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/gluegen.jar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/libGL.so.1.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/arm32_linux/libgluegen-rt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2-64/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2-64/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2-64/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/solaris2/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/gluegen-rt-natives-linux-ppc64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/jogl-all-natives-linux-ppc64.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/jogl.jar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/ppc64/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/apple/gluegen-rt-natives-macosx-universal.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/apple/libjogl_cg.jnilib.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/apple/libjogl_awt.jnilib.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/apple/libjogl.jnilib.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/apple/jogl-all-natives-macosx-universal.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sun386i/libjogl_drihack.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sun386i/libjogl.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/contrib/jogl/sun386i/libjogl_awt.so.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/apple/TAUpackageMaker.dmg",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/taucdt/plugins/edu.uoregon.tau.taucdt_1.0.0.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/paraprof/bin/paraprof.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/perfexplorer-1.4.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/perfexplorer.jar",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/src/glue/doc-files/PerfExplorerGlueObjects.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/src/client/red-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/src/client/blue-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/src/client/yellow-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/src/client/green-ball.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/TimerBreakdown/stacked.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/TimerBreakdown/stacked2.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClassBreakdown/tauprofile.xml.gz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClassBreakdown/geant-flat.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClassBreakdown/geant.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/MicroLoadImbalance/justtime.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExportData/6.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExportData/4.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExportData/2.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExportData/8.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/MetadataCorrelation/exclusive.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/MetadataCorrelation/inclusive.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/StackedBarChart/6.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/StackedBarChart/4.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/StackedBarChart/2.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/StackedBarChart/8.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/DBSCANOperation/GROMACS.MN.32.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClassLightweights/papi_tot_iis.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/PhaseComparison/phases.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClusterAndLoadBalance/GROMACS.MN.32.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/HeatMapSamples/matmult.ppk-heatmap.png",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/HeatMapSamples/matmult.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/HardwareCounterBasicAnalysis/mpas.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/HardwareCounterBasicAnalysis/xgc-nosamples.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/HardwareCounterBasicAnalysis/xgc.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/PowerCapEffect/profile_data.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/PowerCapEffect/.run_script.sh.swp",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/64.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/16.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/4.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/2.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/256.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/8.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/32.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/LoadImbalance/128.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExtractChildrenOperation/wrf-fullcallpath.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExtractChildrenOperation/wrf.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ExtractChildrenOperation/wrf-callpath.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/DrawGraph/6.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/DrawGraph/4.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/DrawGraph/2.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/DrawGraph/8.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/ClusterAndTopX/GROMACS.MN.32.ppk",
        "/tmp/vanessa/spack-stage/spack-stage-tau-2.28.1-75kprrxjauxv5rv5c6go4a7p72mkbrlw/spack-src/tools/src/perfexplorer/examples/Correlation/phases.ppk"
    ],
    "total_files": 3299
}