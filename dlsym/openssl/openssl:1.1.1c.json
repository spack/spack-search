{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/crypto/dso/dso_dlfcn.c": "/*\n * Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n/*\n * We need to do this early, because stdio.h includes the header files that\n * handle _GNU_SOURCE and other similar macros.  Defining it later is simply\n * too late, because those headers are protected from re- inclusion.\n */\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE            /* make sure dladdr is declared */\n#endif\n\n#include \"dso_locl.h\"\n#include \"e_os.h\"\n\n#ifdef DSO_DLFCN\n\n# ifdef HAVE_DLFCN_H\n#  ifdef __osf__\n#   define __EXTENSIONS__\n#  endif\n#  include <dlfcn.h>\n#  define HAVE_DLINFO 1\n#  if defined(__CYGWIN__) || \\\n     defined(__SCO_VERSION__) || defined(_SCO_ELF) || \\\n     (defined(__osf__) && !defined(RTLD_NEXT))     || \\\n     (defined(__OpenBSD__) && !defined(RTLD_SELF)) || \\\n        defined(__ANDROID__)\n#   undef HAVE_DLINFO\n#  endif\n# endif\n\n/* Part of the hack in \"dlfcn_load\" ... */\n# define DSO_MAX_TRANSLATED_SIZE 256\n\nstatic int dlfcn_load(DSO *dso);\nstatic int dlfcn_unload(DSO *dso);\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname);\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename);\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2);\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz);\nstatic void *dlfcn_globallookup(const char *name);\n\nstatic DSO_METHOD dso_meth_dlfcn = {\n    \"OpenSSL 'dlfcn' shared library method\",\n    dlfcn_load,\n    dlfcn_unload,\n    dlfcn_bind_func,\n    NULL,                       /* ctrl */\n    dlfcn_name_converter,\n    dlfcn_merger,\n    NULL,                       /* init */\n    NULL,                       /* finish */\n    dlfcn_pathbyaddr,\n    dlfcn_globallookup\n};\n\nDSO_METHOD *DSO_METHOD_openssl(void)\n{\n    return &dso_meth_dlfcn;\n}\n\n/*\n * Prior to using the dlopen() function, we should decide on the flag we\n * send. There's a few different ways of doing this and it's a messy\n * venn-diagram to match up which platforms support what. So as we don't have\n * autoconf yet, I'm implementing a hack that could be hacked further\n * relatively easily to deal with cases as we find them. Initially this is to\n * cope with OpenBSD.\n */\n# if defined(__OpenBSD__) || defined(__NetBSD__)\n#  ifdef DL_LAZY\n#   define DLOPEN_FLAG DL_LAZY\n#  else\n#   ifdef RTLD_NOW\n#    define DLOPEN_FLAG RTLD_NOW\n#   else\n#    define DLOPEN_FLAG 0\n#   endif\n#  endif\n# else\n#  define DLOPEN_FLAG RTLD_NOW  /* Hope this works everywhere else */\n# endif\n\n/*\n * For this DSO_METHOD, our meth_data STACK will contain; (i) the handle\n * (void*) returned from dlopen().\n */\n\nstatic int dlfcn_load(DSO *dso)\n{\n    void *ptr = NULL;\n    /* See applicable comments in dso_dl.c */\n    char *filename = DSO_convert_filename(dso, NULL);\n    int flags = DLOPEN_FLAG;\n    int saveerrno = get_last_sys_error();\n\n    if (filename == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);\n        goto err;\n    }\n# ifdef RTLD_GLOBAL\n    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)\n        flags |= RTLD_GLOBAL;\n# endif\n# ifdef _AIX\n    if (filename[strlen(filename) - 1] == ')')\n        flags |= RTLD_MEMBER;\n# endif\n    ptr = dlopen(filename, flags);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);\n        ERR_add_error_data(4, \"filename(\", filename, \"): \", dlerror());\n        goto err;\n    }\n    /*\n     * Some dlopen() implementations (e.g. solaris) do no preserve errno, even\n     * on a successful call.\n     */\n    set_sys_error(saveerrno);\n    if (!sk_void_push(dso->meth_data, (char *)ptr)) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);\n        goto err;\n    }\n    /* Success */\n    dso->loaded_filename = filename;\n    return 1;\n err:\n    /* Cleanup! */\n    OPENSSL_free(filename);\n    if (ptr != NULL)\n        dlclose(ptr);\n    return 0;\n}\n\nstatic int dlfcn_unload(DSO *dso)\n{\n    void *ptr;\n    if (dso == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);\n        return 0;\n    }\n    if (sk_void_num(dso->meth_data) < 1)\n        return 1;\n    ptr = sk_void_pop(dso->meth_data);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);\n        /*\n         * Should push the value back onto the stack in case of a retry.\n         */\n        sk_void_push(dso->meth_data, ptr);\n        return 0;\n    }\n    /* For now I'm not aware of any errors associated with dlclose() */\n    dlclose(ptr);\n    return 1;\n}\n\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname)\n{\n    void *ptr;\n    union {\n        DSO_FUNC_TYPE sym;\n        void *dlret;\n    } u;\n\n    if ((dso == NULL) || (symname == NULL)) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, ERR_R_PASSED_NULL_PARAMETER);\n        return NULL;\n    }\n    if (sk_void_num(dso->meth_data) < 1) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_STACK_ERROR);\n        return NULL;\n    }\n    ptr = sk_void_value(dso->meth_data, sk_void_num(dso->meth_data) - 1);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_NULL_HANDLE);\n        return NULL;\n    }\n    u.dlret = dlsym(ptr, symname);\n    if (u.dlret == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_SYM_FAILURE);\n        ERR_add_error_data(4, \"symname(\", symname, \"): \", dlerror());\n        return NULL;\n    }\n    return u.sym;\n}\n\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2)\n{\n    char *merged;\n\n    if (!filespec1 && !filespec2) {\n        DSOerr(DSO_F_DLFCN_MERGER, ERR_R_PASSED_NULL_PARAMETER);\n        return NULL;\n    }\n    /*\n     * If the first file specification is a rooted path, it rules. same goes\n     * if the second file specification is missing.\n     */\n    if (!filespec2 || (filespec1 != NULL && filespec1[0] == '/')) {\n        merged = OPENSSL_strdup(filespec1);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n    }\n    /*\n     * If the first file specification is missing, the second one rules.\n     */\n    else if (!filespec1) {\n        merged = OPENSSL_strdup(filespec2);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n    } else {\n        /*\n         * This part isn't as trivial as it looks.  It assumes that the\n         * second file specification really is a directory, and makes no\n         * checks whatsoever.  Therefore, the result becomes the\n         * concatenation of filespec2 followed by a slash followed by\n         * filespec1.\n         */\n        int spec2len, len;\n\n        spec2len = strlen(filespec2);\n        len = spec2len + strlen(filespec1);\n\n        if (spec2len && filespec2[spec2len - 1] == '/') {\n            spec2len--;\n            len--;\n        }\n        merged = OPENSSL_malloc(len + 2);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n        strcpy(merged, filespec2);\n        merged[spec2len] = '/';\n        strcpy(&merged[spec2len + 1], filespec1);\n    }\n    return merged;\n}\n\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename)\n{\n    char *translated;\n    int len, rsize, transform;\n\n    len = strlen(filename);\n    rsize = len + 1;\n    transform = (strstr(filename, \"/\") == NULL);\n    if (transform) {\n        /* We will convert this to \"%s.so\" or \"lib%s.so\" etc */\n        rsize += strlen(DSO_EXTENSION);    /* The length of \".so\" */\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            rsize += 3;         /* The length of \"lib\" */\n    }\n    translated = OPENSSL_malloc(rsize);\n    if (translated == NULL) {\n        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);\n        return NULL;\n    }\n    if (transform) {\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            sprintf(translated, \"lib%s\" DSO_EXTENSION, filename);\n        else\n            sprintf(translated, \"%s\" DSO_EXTENSION, filename);\n    } else\n        sprintf(translated, \"%s\", filename);\n    return translated;\n}\n\n# ifdef __sgi\n/*-\nThis is a quote from IRIX manual for dladdr(3c):\n\n     <dlfcn.h> does not contain a prototype for dladdr or definition of\n     Dl_info.  The #include <dlfcn.h>  in the SYNOPSIS line is traditional,\n     but contains no dladdr prototype and no IRIX library contains an\n     implementation.  Write your own declaration based on the code below.\n\n     The following code is dependent on internal interfaces that are not\n     part of the IRIX compatibility guarantee; however, there is no future\n     intention to change this interface, so on a practical level, the code\n     below is safe to use on IRIX.\n*/\n#  include <rld_interface.h>\n#  ifndef _RLD_INTERFACE_DLFCN_H_DLADDR\n#   define _RLD_INTERFACE_DLFCN_H_DLADDR\ntypedef struct Dl_info {\n    const char *dli_fname;\n    void *dli_fbase;\n    const char *dli_sname;\n    void *dli_saddr;\n    int dli_version;\n    int dli_reserved1;\n    long dli_reserved[4];\n} Dl_info;\n#  else\ntypedef struct Dl_info Dl_info;\n#  endif\n#  define _RLD_DLADDR             14\n\nstatic int dladdr(void *address, Dl_info *dl)\n{\n    void *v;\n    v = _rld_new_interface(_RLD_DLADDR, address, dl);\n    return (int)v;\n}\n# endif                         /* __sgi */\n\n# ifdef _AIX\n/*-\n * See IBM's AIX Version 7.2, Technical Reference:\n *  Base Operating System and Extensions, Volume 1 and 2\n *  https://www.ibm.com/support/knowledgecenter/ssw_aix_72/com.ibm.aix.base/technicalreferences.htm\n */\n#  include <sys/ldr.h>\n#  include <errno.h>\n/* ~ 64 * (sizeof(struct ld_info) + _XOPEN_PATH_MAX + _XOPEN_NAME_MAX) */\n#  define DLFCN_LDINFO_SIZE 86976\ntypedef struct Dl_info {\n    const char *dli_fname;\n} Dl_info;\n/*\n * This dladdr()-implementation will also find the ptrgl (Pointer Glue) virtual\n * address of a function, which is just located in the DATA segment instead of\n * the TEXT segment.\n */\nstatic int dladdr(void *ptr, Dl_info *dl)\n{\n    uintptr_t addr = (uintptr_t)ptr;\n    unsigned int found = 0;\n    struct ld_info *ldinfos, *next_ldi, *this_ldi;\n\n    if ((ldinfos = OPENSSL_malloc(DLFCN_LDINFO_SIZE)) == NULL) {\n        errno = ENOMEM;\n        dl->dli_fname = NULL;\n        return 0;\n    }\n\n    if ((loadquery(L_GETINFO, (void *)ldinfos, DLFCN_LDINFO_SIZE)) < 0) {\n        /*-\n         * Error handling is done through errno and dlerror() reading errno:\n         *  ENOMEM (ldinfos buffer is too small),\n         *  EINVAL (invalid flags),\n         *  EFAULT (invalid ldinfos ptr)\n         */\n        OPENSSL_free((void *)ldinfos);\n        dl->dli_fname = NULL;\n        return 0;\n    }\n    next_ldi = ldinfos;\n\n    do {\n        this_ldi = next_ldi;\n        if (((addr >= (uintptr_t)this_ldi->ldinfo_textorg)\n             && (addr < ((uintptr_t)this_ldi->ldinfo_textorg +\n                         this_ldi->ldinfo_textsize)))\n            || ((addr >= (uintptr_t)this_ldi->ldinfo_dataorg)\n                && (addr < ((uintptr_t)this_ldi->ldinfo_dataorg +\n                            this_ldi->ldinfo_datasize)))) {\n            char *buffer, *member;\n            size_t buffer_sz, member_len;\n\n            buffer_sz = strlen(this_ldi->ldinfo_filename) + 1;\n            member = this_ldi->ldinfo_filename + buffer_sz;\n            if ((member_len = strlen(member)) > 0)\n                buffer_sz += 1 + member_len + 1;\n            found = 1;\n            if ((buffer = OPENSSL_malloc(buffer_sz)) != NULL) {\n                OPENSSL_strlcpy(buffer, this_ldi->ldinfo_filename, buffer_sz);\n                if (member_len > 0) {\n                    /*\n                     * Need to respect a possible member name and not just\n                     * returning the path name in this case. See docs:\n                     * sys/ldr.h, loadquery() and dlopen()/RTLD_MEMBER.\n                     */\n                    OPENSSL_strlcat(buffer, \"(\", buffer_sz);\n                    OPENSSL_strlcat(buffer, member, buffer_sz);\n                    OPENSSL_strlcat(buffer, \")\", buffer_sz);\n                }\n                dl->dli_fname = buffer;\n            } else {\n                errno = ENOMEM;\n            }\n        } else {\n            next_ldi = (struct ld_info *)((uintptr_t)this_ldi +\n                                          this_ldi->ldinfo_next);\n        }\n    } while (this_ldi->ldinfo_next && !found);\n    OPENSSL_free((void *)ldinfos);\n    return (found && dl->dli_fname != NULL);\n}\n# endif                         /* _AIX */\n\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz)\n{\n# ifdef HAVE_DLINFO\n    Dl_info dli;\n    int len;\n\n    if (addr == NULL) {\n        union {\n            int (*f) (void *, char *, int);\n            void *p;\n        } t = {\n            dlfcn_pathbyaddr\n        };\n        addr = t.p;\n    }\n\n    if (dladdr(addr, &dli)) {\n        len = (int)strlen(dli.dli_fname);\n        if (sz <= 0) {\n#  ifdef _AIX\n            OPENSSL_free((void *)dli.dli_fname);\n#  endif\n            return len + 1;\n        }\n        if (len >= sz)\n            len = sz - 1;\n        memcpy(path, dli.dli_fname, len);\n        path[len++] = 0;\n#  ifdef _AIX\n        OPENSSL_free((void *)dli.dli_fname);\n#  endif\n        return len;\n    }\n\n    ERR_add_error_data(2, \"dlfcn_pathbyaddr(): \", dlerror());\n# endif\n    return -1;\n}\n\nstatic void *dlfcn_globallookup(const char *name)\n{\n    void *ret = NULL, *handle = dlopen(NULL, RTLD_LAZY);\n\n    if (handle) {\n        ret = dlsym(handle, name);\n        dlclose(handle);\n    }\n\n    return ret;\n}\n#endif                          /* DSO_DLFCN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/shlibloadtest.c": "/*\n * Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <openssl/opensslv.h>\n#include <openssl/ssl.h>\n#include <openssl/ossl_typ.h>\n#include \"internal/dso_conf.h\"\n\ntypedef void DSO;\n\ntypedef const SSL_METHOD * (*TLS_method_t)(void);\ntypedef SSL_CTX * (*SSL_CTX_new_t)(const SSL_METHOD *meth);\ntypedef void (*SSL_CTX_free_t)(SSL_CTX *);\ntypedef int (*OPENSSL_init_crypto_t)(uint64_t, void *);\ntypedef int (*OPENSSL_atexit_t)(void (*handler)(void));\ntypedef unsigned long (*ERR_get_error_t)(void);\ntypedef unsigned long (*OpenSSL_version_num_t)(void);\ntypedef DSO * (*DSO_dsobyaddr_t)(void (*addr)(void), int flags);\ntypedef int (*DSO_free_t)(DSO *dso);\n\ntypedef enum test_types_en {\n    CRYPTO_FIRST,\n    SSL_FIRST,\n    JUST_CRYPTO,\n    DSO_REFTEST,\n    NO_ATEXIT\n} TEST_TYPE;\n\nstatic TEST_TYPE test_type;\nstatic const char *path_crypto;\nstatic const char *path_ssl;\nstatic const char *path_atexit;\n\n#ifdef DSO_DLFCN\n\n# include <dlfcn.h>\n\n# define SHLIB_INIT NULL\n\ntypedef void *SHLIB;\ntypedef void *SHLIB_SYM;\n\nstatic int shlib_load(const char *filename, SHLIB *lib)\n{\n    int dl_flags = (RTLD_GLOBAL|RTLD_LAZY);\n#ifdef _AIX\n    if (filename[strlen(filename) - 1] == ')')\n        dl_flags |= RTLD_MEMBER;\n#endif\n    *lib = dlopen(filename, dl_flags);\n    return *lib == NULL ? 0 : 1;\n}\n\nstatic int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)\n{\n    *sym = dlsym(lib, symname);\n    return *sym != NULL;\n}\n\nstatic int shlib_close(SHLIB lib)\n{\n    return dlclose(lib) != 0 ? 0 : 1;\n}\n#endif\n\n#ifdef DSO_WIN32\n\n# include <windows.h>\n\n# define SHLIB_INIT 0\n\ntypedef HINSTANCE SHLIB;\ntypedef void *SHLIB_SYM;\n\nstatic int shlib_load(const char *filename, SHLIB *lib)\n{\n    *lib = LoadLibraryA(filename);\n    return *lib == NULL ? 0 : 1;\n}\n\nstatic int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)\n{\n    *sym = (SHLIB_SYM)GetProcAddress(lib, symname);\n    return *sym != NULL;\n}\n\nstatic int shlib_close(SHLIB lib)\n{\n    return FreeLibrary(lib) == 0 ? 0 : 1;\n}\n#endif\n\n\n#if defined(DSO_DLFCN) || defined(DSO_WIN32)\n\nstatic int atexit_handler_done = 0;\n\nstatic void atexit_handler(void)\n{\n    FILE *atexit_file = fopen(path_atexit, \"w\");\n\n    if (atexit_file == NULL)\n        return;\n\n    fprintf(atexit_file, \"atexit() run\\n\");\n    fclose(atexit_file);\n    atexit_handler_done++;\n}\n\nstatic int test_lib(void)\n{\n    SHLIB ssllib = SHLIB_INIT;\n    SHLIB cryptolib = SHLIB_INIT;\n    SSL_CTX *ctx;\n    union {\n        void (*func)(void);\n        SHLIB_SYM sym;\n    } symbols[3];\n    TLS_method_t myTLS_method;\n    SSL_CTX_new_t mySSL_CTX_new;\n    SSL_CTX_free_t mySSL_CTX_free;\n    ERR_get_error_t myERR_get_error;\n    OpenSSL_version_num_t myOpenSSL_version_num;\n    OPENSSL_atexit_t myOPENSSL_atexit;\n    int result = 0;\n\n    switch (test_type) {\n    case JUST_CRYPTO:\n    case DSO_REFTEST:\n    case NO_ATEXIT:\n    case CRYPTO_FIRST:\n        if (!shlib_load(path_crypto, &cryptolib)) {\n            fprintf(stderr, \"Failed to load libcrypto\\n\");\n            goto end;\n        }\n        if (test_type != CRYPTO_FIRST)\n            break;\n        /* Fall through */\n\n    case SSL_FIRST:\n        if (!shlib_load(path_ssl, &ssllib)) {\n            fprintf(stderr, \"Failed to load libssl\\n\");\n            goto end;\n        }\n        if (test_type != SSL_FIRST)\n            break;\n        if (!shlib_load(path_crypto, &cryptolib)) {\n            fprintf(stderr, \"Failed to load libcrypto\\n\");\n            goto end;\n        }\n        break;\n    }\n\n    if (test_type == NO_ATEXIT) {\n        OPENSSL_init_crypto_t myOPENSSL_init_crypto;\n\n        if (!shlib_sym(cryptolib, \"OPENSSL_init_crypto\", &symbols[0].sym)) {\n            fprintf(stderr, \"Failed to load OPENSSL_init_crypto symbol\\n\");\n            goto end;\n        }\n        myOPENSSL_init_crypto = (OPENSSL_init_crypto_t)symbols[0].func;\n        if (!myOPENSSL_init_crypto(OPENSSL_INIT_NO_ATEXIT, NULL)) {\n            fprintf(stderr, \"Failed to initialise libcrypto\\n\");\n            goto end;\n        }\n    }\n\n    if (test_type != JUST_CRYPTO\n            && test_type != DSO_REFTEST\n            && test_type != NO_ATEXIT) {\n        if (!shlib_sym(ssllib, \"TLS_method\", &symbols[0].sym)\n                || !shlib_sym(ssllib, \"SSL_CTX_new\", &symbols[1].sym)\n                || !shlib_sym(ssllib, \"SSL_CTX_free\", &symbols[2].sym)) {\n            fprintf(stderr, \"Failed to load libssl symbols\\n\");\n            goto end;\n        }\n        myTLS_method = (TLS_method_t)symbols[0].func;\n        mySSL_CTX_new = (SSL_CTX_new_t)symbols[1].func;\n        mySSL_CTX_free = (SSL_CTX_free_t)symbols[2].func;\n        ctx = mySSL_CTX_new(myTLS_method());\n        if (ctx == NULL) {\n            fprintf(stderr, \"Failed to create SSL_CTX\\n\");\n            goto end;\n        }\n        mySSL_CTX_free(ctx);\n    }\n\n    if (!shlib_sym(cryptolib, \"ERR_get_error\", &symbols[0].sym)\n           || !shlib_sym(cryptolib, \"OpenSSL_version_num\", &symbols[1].sym)\n           || !shlib_sym(cryptolib, \"OPENSSL_atexit\", &symbols[2].sym)) {\n        fprintf(stderr, \"Failed to load libcrypto symbols\\n\");\n        goto end;\n    }\n    myERR_get_error = (ERR_get_error_t)symbols[0].func;\n    if (myERR_get_error() != 0) {\n        fprintf(stderr, \"Unexpected ERR_get_error() response\\n\");\n        goto end;\n    }\n\n    myOpenSSL_version_num = (OpenSSL_version_num_t)symbols[1].func;\n    if (myOpenSSL_version_num()  != OPENSSL_VERSION_NUMBER) {\n        fprintf(stderr, \"Invalid library version number\\n\");\n        goto end;\n    }\n\n    myOPENSSL_atexit = (OPENSSL_atexit_t)symbols[2].func;\n    if (!myOPENSSL_atexit(atexit_handler)) {\n        fprintf(stderr, \"Failed to register atexit handler\\n\");\n        goto end;\n    }\n\n    if (test_type == DSO_REFTEST) {\n# ifdef DSO_DLFCN\n        DSO_dsobyaddr_t myDSO_dsobyaddr;\n        DSO_free_t myDSO_free;\n\n        /*\n         * This is resembling the code used in ossl_init_base() and\n         * OPENSSL_atexit() to block unloading the library after dlclose().\n         * We are not testing this on Windows, because it is done there in a\n         * completely different way. Especially as a call to DSO_dsobyaddr()\n         * will always return an error, because DSO_pathbyaddr() is not\n         * implemented there.\n         */\n        if (!shlib_sym(cryptolib, \"DSO_dsobyaddr\", &symbols[0].sym)\n                || !shlib_sym(cryptolib, \"DSO_free\", &symbols[1].sym)) {\n            fprintf(stderr, \"Unable to load DSO symbols\\n\");\n            goto end;\n        }\n\n        myDSO_dsobyaddr = (DSO_dsobyaddr_t)symbols[0].func;\n        myDSO_free = (DSO_free_t)symbols[1].func;\n\n        {\n            DSO *hndl;\n            /* use known symbol from crypto module */\n            hndl = myDSO_dsobyaddr((void (*)(void))myERR_get_error, 0);\n            if (hndl == NULL) {\n                fprintf(stderr, \"DSO_dsobyaddr() failed\\n\");\n                goto end;\n            }\n            myDSO_free(hndl);\n        }\n# endif /* DSO_DLFCN */\n    }\n\n    if (!shlib_close(cryptolib)) {\n        fprintf(stderr, \"Failed to close libcrypto\\n\");\n        goto end;\n    }\n\n    if (test_type == CRYPTO_FIRST || test_type == SSL_FIRST) {\n        if (!shlib_close(ssllib)) {\n            fprintf(stderr, \"Failed to close libssl\\n\");\n            goto end;\n        }\n    }\n\n# if defined(OPENSSL_NO_PINSHARED) \\\n    && defined(__GLIBC__) \\\n    && defined(__GLIBC_PREREQ) \\\n    && defined(OPENSSL_SYS_LINUX)\n#  if __GLIBC_PREREQ(2, 3)\n    /*\n     * If we didn't pin the so then we are hopefully on a platform that supports\n     * running atexit() on so unload. If not we might crash. We know this is\n     * true on linux since glibc 2.2.3\n     */\n    if (test_type != NO_ATEXIT && atexit_handler_done != 1) {\n        fprintf(stderr, \"atexit() handler did not run\\n\");\n        goto end;\n    }\n#  endif\n# endif\n\n    result = 1;\nend:\n    return result;\n}\n#endif\n\n\n/*\n * shlibloadtest should not use the normal test framework because we don't want\n * it to link against libcrypto (which the framework uses). The point of the\n * test is to check dynamic loading and unloading of libcrypto/libssl.\n */\nint main(int argc, char *argv[])\n{\n    const char *p;\n\n    if (argc != 5) {\n        fprintf(stderr, \"Incorrect number of arguments\\n\");\n        return 1;\n    }\n\n    p = argv[1];\n\n    if (strcmp(p, \"-crypto_first\") == 0) {\n        test_type = CRYPTO_FIRST;\n    } else if (strcmp(p, \"-ssl_first\") == 0) {\n        test_type = SSL_FIRST;\n    } else if (strcmp(p, \"-just_crypto\") == 0) {\n        test_type = JUST_CRYPTO;\n    } else if (strcmp(p, \"-dso_ref\") == 0) {\n        test_type = DSO_REFTEST;\n    } else if (strcmp(p, \"-no_atexit\") == 0) {\n        test_type = NO_ATEXIT;\n    } else {\n        fprintf(stderr, \"Unrecognised argument\\n\");\n        return 1;\n    }\n    path_crypto = argv[2];\n    path_ssl = argv[3];\n    path_atexit = argv[4];\n    if (path_crypto == NULL || path_ssl == NULL) {\n        fprintf(stderr, \"Invalid libcrypto/libssl path\\n\");\n        return 1;\n    }\n\n#if defined(DSO_DLFCN) || defined(DSO_WIN32)\n    if (!test_lib())\n        return 1;\n#endif\n    return 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/shibboleth.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad-cms.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/high_tag.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/intminus1.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_bio.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_cert.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_generalname.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad-int-padminus1.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/recipes/ocsp-response.der"
    ],
    "total_files": 3003
}