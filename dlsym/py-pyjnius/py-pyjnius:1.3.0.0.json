{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-xqbcotmgevnzt2wde4unjydekljf5o5m/spack-src/jnius/jnius_jvm_dlopen.pxi": "include \"config.pxi\"\nimport os\nfrom shlex import split\nfrom subprocess import check_output, CalledProcessError\nfrom os.path import dirname, join, exists\nfrom os import readlink\nfrom sys import platform\nfrom .env import get_jnius_lib_location\n\n\ncdef extern from 'dlfcn.h' nogil:\n    void* dlopen(const char *filename, int flag)\n    char *dlerror()\n    void *dlsym(void *handle, const char *symbol)\n    int dlclose(void *handle)\n\n    unsigned int RTLD_LAZY\n    unsigned int RTLD_NOW\n    unsigned int RTLD_GLOBAL\n    unsigned int RTLD_LOCAL\n    unsigned int RTLD_NODELETE\n    unsigned int RTLD_NOLOAD\n    unsigned int RTLD_DEEPBIND\n\n    unsigned int RTLD_DEFAULT\n    long unsigned int RTLD_NEXT\n\n\ncdef extern from \"jni.h\":\n    int JNI_VERSION_1_6\n    int JNI_OK\n    jboolean JNI_FALSE\n    ctypedef struct JavaVMInitArgs:\n        jint version\n        jint nOptions\n        jboolean ignoreUnrecognized\n        JavaVMOption *options\n    ctypedef struct JavaVMOption:\n        char *optionString\n        void *extraInfo\n\ncdef JNIEnv *_platform_default_env = NULL\n\n\ncdef find_java_home():\n    if platform in ('linux2', 'linux'):\n        java = check_output(split('which javac')).strip()\n        if not java:\n            java = check_output(split('which java')).strip()\n            if not java:\n                return\n\n        while True:\n            try:\n                java = readlink(java)\n            except OSError:\n                break\n        return dirname(dirname(java)).decode('utf8')\n    \n    if platform == 'darwin':\n        MAC_JAVA_HOME='/usr/libexec/java_home'\n        # its a mac\n        if not exists(MAC_JAVA_HOME):\n            # I believe this always exists, but just in case\n            return\n        try:\n            java = check_output(MAC_JAVA_HOME).strip().decode('utf8')\n            return java\n        except CalledProcessError as exc:\n            # java_home return non-zero exit code if no Javas are installed\n            return\n        \n\n\ncdef void create_jnienv() except *:\n    cdef JavaVM* jvm\n    cdef JavaVMInitArgs args\n    cdef JavaVMOption *options\n    cdef int ret\n    cdef bytes py_bytes\n    cdef void *handle\n    import jnius_config\n\n    JAVA_HOME = os.getenv('JAVA_HOME') or find_java_home()\n    if JAVA_HOME is None or JAVA_HOME == '':\n        raise SystemError(\"JAVA_HOME is not set, and unable to guess JAVA_HOME\")\n    cdef str JNIUS_LIB_SUFFIX = get_jnius_lib_location(JNIUS_PLATFORM)\n\n    IF JNIUS_PYTHON3:\n        try:\n            jnius_lib_suffix = JNIUS_LIB_SUFFIX.decode(\"utf-8\")\n        except AttributeError:\n            jnius_lib_suffix = JNIUS_LIB_SUFFIX\n        lib_path = str_for_c(os.path.join(JAVA_HOME, jnius_lib_suffix))\n    ELSE:\n        lib_path = str_for_c(os.path.join(JAVA_HOME, JNIUS_LIB_SUFFIX))\n\n    handle = dlopen(lib_path, RTLD_NOW | RTLD_GLOBAL)\n\n    if handle == NULL:\n        raise SystemError(\"Error calling dlopen({0}: {1}\".format(lib_path, dlerror()))\n\n    cdef void *jniCreateJVM = dlsym(handle, b\"JNI_CreateJavaVM\")\n\n    if jniCreateJVM == NULL:\n       raise SystemError(\"Error calling dlfcn for JNI_CreateJavaVM: {0}\".format(dlerror()))\n\n    optarr = jnius_config.options\n    optarr.append(\"-Djava.class.path=\" + jnius_config.expand_classpath())\n\n    options = <JavaVMOption*>malloc(sizeof(JavaVMOption) * len(optarr))\n    for i, opt in enumerate(optarr):\n        optbytes = str_for_c(opt)\n        options[i].optionString = <bytes>(optbytes)\n        options[i].extraInfo = NULL\n\n    args.version = JNI_VERSION_1_6\n    args.options = options\n    args.nOptions = len(optarr)\n    args.ignoreUnrecognized = JNI_FALSE\n\n    ret = (<jint (*)(JavaVM **pvm, void **penv, void *args)> jniCreateJVM)(&jvm, <void **>&_platform_default_env, &args)\n    free(options)\n\n    if ret != JNI_OK:\n        raise SystemError(\"JVM failed to start: {0}\".format(ret))\n\n    jnius_config.vm_running = True\n    import traceback\n    jnius_config.vm_started_at = ''.join(traceback.format_stack())\n\ncdef JNIEnv *get_platform_jnienv() except NULL:\n    if _platform_default_env == NULL:\n        create_jnienv()\n    return _platform_default_env\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pyjnius-1.3.0.0-xqbcotmgevnzt2wde4unjydekljf5o5m/spack-src/jnius/src/org/jnius/NativeInvocationHandler.class"
    ],
    "total_files": 32
}