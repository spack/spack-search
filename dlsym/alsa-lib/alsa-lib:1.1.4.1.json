{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/configure.ac": "dnl Process this file with autoconf to produce a configure script.\nAC_PREREQ(2.59)\nAC_INIT(alsa-lib, 1.1.4.1)\n\nAC_CONFIG_SRCDIR([src/control/control.c])\nAC_CONFIG_MACRO_DIR([m4])\n\ndnl *************************************************\ndnl current:revision:age\ndnl change (without API) = c:r+1:a\ndnl change API = c+1:0:a\ndnl add API = c+1:0:a+1\ndnl remove API = c+1:0:0\ndnl *************************************************\nAC_CANONICAL_HOST\nAM_INIT_AUTOMAKE\neval LIBTOOL_VERSION_INFO=\"2:0:0\"\ndnl *************************************************\nAM_CONDITIONAL([INSTALL_M4], [test -n \"${ACLOCAL}\"])\n\nAM_MAINTAINER_MODE([enable])\n\n# Test for new silent rules and enable only if they are available\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_PREFIX_DEFAULT(/usr)\n\ndnl Checks for programs.\n\nAC_PROG_CC\nAC_PROG_CPP\nAC_USE_SYSTEM_EXTENSIONS\nAC_PROG_INSTALL\nAC_PROG_LN_S \nAC_DISABLE_STATIC\nAC_LIBTOOL_DLOPEN\nAM_PROG_LIBTOOL\n\nCC_NOUNDEFINED\n\ndnl Checks for header files.\nAC_HEADER_STDC\nAC_CONFIG_HEADERS(include/config.h)\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_HEADER_TIME\n\ndnl Checks for library functions.\nAC_PROG_GCC_TRADITIONAL\nAC_CHECK_FUNCS([uselocale])\n\nSAVE_LIBRARY_VERSION\nAC_SUBST(LIBTOOL_VERSION_INFO)\n\ntest \"x$prefix\" = xNONE && prefix=$ac_default_prefix\n\ndnl Do not build static and shared libraries together\nif test \"$enable_static\" = \"$enable_shared\" -a \"$enable_static\" = \"yes\"; then\ncat <<EOF\n  Please, do not try to compile static and shared libraries together.\n  See INSTALL file for more details (do not use --enable-shared=yes with\n  --enable-static=yes).\nEOF\n  exit 1\nfi\n\ndnl ALSA configuration directory\nAC_ARG_WITH(configdir,\n    AS_HELP_STRING([--with-configdir=dir],\n\t[path where ALSA config files are stored]),\n    confdir=\"$withval\", confdir=\"\")\nif test -z \"$confdir\"; then\n    eval dir=\"$datadir\"\n    case \"$dir\" in\n    /*) ;;\n    *) dir=\"$prefix/share\"\n    esac\n    confdir=\"$dir/alsa\"\nfi\nALSA_CONFIG_DIR=\"$confdir\"\nAC_DEFINE_UNQUOTED(ALSA_CONFIG_DIR, \"$confdir\", [directory containing ALSA configuration database])\nAC_SUBST(ALSA_CONFIG_DIR)\n\ndnl ALSA plugin directory\ntest \"x$exec_prefix\" = xNONE && exec_prefix=$prefix\n\nAC_ARG_WITH(plugindir,\n    AS_HELP_STRING([--with-plugindir=dir],\n\t[path where ALSA plugin files are stored]),\n    plugindir=\"$withval\", plugindir=\"\")\nif test -z \"$plugindir\"; then\n    eval dir=\"$libdir\"\n    case \"$dir\" in\n    /*) ;;\n    *) dir=\"$dir\"\n    esac\n    plugindir=\"$dir/$PACKAGE\"\nfi\nAC_DEFINE_UNQUOTED(ALSA_PLUGIN_DIR, \"$plugindir\", [directory containing ALSA add-on modules])\nALSA_PLUGIN_DIR=\"$plugindir\"\nAC_SUBST(ALSA_PLUGIN_DIR)\n\nAC_ARG_WITH(pkgconfdir,\n    AS_HELP_STRING([--with-pkgconfdir=dir],\n\t[path where pkgconfig files are stored]),\n    pkgconfdir=\"$withval\", pkgconfdir=\"\")\nif test -z \"$pkgconfdir\"; then\n    eval dir=\"$libdir\"\n    case \"$dir\" in\n    /*) ;;\n    *) dir=\"$dir\"\n    esac\n    pkgconfdir=\"$dir/pkgconfig\"\nfi\nAC_DEFINE_UNQUOTED(ALSA_PKGCONF_DIR, \"$pkgconfdir\", [directory containing pkgconfig files])\nALSA_PKGCONF_DIR=\"$pkgconfdir\"\nAC_SUBST(ALSA_PKGCONF_DIR)\n\ndnl Check for versioned symbols\nAC_MSG_CHECKING(for versioned symbols)\nAC_ARG_WITH(versioned,\n  AS_HELP_STRING([--with-versioned],\n    [shared library will be compiled with versioned symbols (default = yes)]),\n  versioned=\"$withval\", versioned=\"yes\")\nif test \"$versioned\" = \"yes\"; then\n  # it seems that GNU ld versions since 2.10 are not broken\n  xres=`grep '^VERSION=' ${srcdir}/ltmain.sh | cut -d = -f 2 | cut -d \\\" -f 2`\n  major=`echo $xres | cut -d . -f 1`\n  minor=`echo $xres | cut -d . -f 2`\n  pass=0\n  if test $major -eq 1 && test $minor -gt 3; then\n    pass=1\n  else\n    if test $major -gt 1; then\n      pass=1\n    fi\n  fi\n  if test $pass -eq 1; then\n    AC_DEFINE(VERSIONED_SYMBOLS,,[compiled with versioned symbols])\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(broken libtool - use libtool v1.4+; no versions)\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\nAM_CONDITIONAL([VERSIONED_SYMBOLS], [test x$versioned = xyes])\n\ndnl Check for symbolic-functions\nAC_MSG_CHECKING(for symbolic-functions)\nAC_ARG_ENABLE(symbolic-functions,\n  AS_HELP_STRING([--enable-symbolic-functions],\n    [use -Bsymbolic-functions option if available (optmization for size and speed)]),\n  symfuncs=\"$enableval\", symfuncs=\"no\")\nif test \"$symfuncs\" = \"yes\"; then\n  if ld --help | grep -q -- '-Bsymbolic-functions'; then\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(not supported by ld)\n    symfuncs=\"no\"\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\nAM_CONDITIONAL([SYMBOLIC_FUNCTIONS], [test x\"$symfuncs\" = xyes])\n\ndnl See if toolchain has a custom prefix for symbols ...\nAC_MSG_CHECKING(for custom symbol prefixes)\nSYMBOL_PREFIX=` \\\n\techo \"PREFIX=__USER_LABEL_PREFIX__\" \\\n\t\t| ${CPP-${CC-gcc} -E} - 2>&1 \\\n\t\t| ${EGREP-grep} \"^PREFIX=\" \\\n\t\t| ${SED-sed} \"s:^PREFIX=::\"`\nAC_DEFINE_UNQUOTED([__SYMBOL_PREFIX], \"$SYMBOL_PREFIX\", [Toolchain Symbol Prefix])\nAC_SUBST(SYMBOL_PREFIX)\nAC_MSG_RESULT($SYMBOL_PREFIX)\n\ndnl Check for debug...\nAC_MSG_CHECKING(for debug)\nAC_ARG_WITH(debug,\n  AS_HELP_STRING([--with-debug],\n    [library will be compiled with asserts (default = yes)]),\n  debug=\"$withval\", debug=\"yes\")\nif test \"$debug\" = \"yes\"; then\n  AC_MSG_RESULT(yes)\nelse\n  AC_DEFINE(NDEBUG,,[No assert debug])\n  AC_MSG_RESULT(no)\nfi\n\nif test \"$debug\" = \"yes\"; then\n  AC_MSG_CHECKING(for debug assert)\n  AC_ARG_ENABLE(debug-assert,\n    AS_HELP_STRING([--enable-debug],\n      [enable assert call at the default error message handler]),\n    debug_assert=\"$enableval\", debug_assert=\"no\")\n  if test \"$debug_assert\" = \"yes\"; then\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(ALSA_DEBUG_ASSERT,,[Enable assert at error message handler])\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\n\ndnl Temporary directory\nAC_MSG_CHECKING(for tmpdir)\nAC_ARG_WITH(tmpdir,\n  AS_HELP_STRING([--with-tmpdir=directory],\n    [directory to put tmp socket files (/tmp)]),\n  tmpdir=\"$withval\", tmpdir=\"/tmp\")\nAC_MSG_RESULT($tmpdir)\nAC_DEFINE_UNQUOTED(TMPDIR, \"$tmpdir\", [directory to put tmp socket files])\n\ndnl Check for softfloat...\nAC_MSG_CHECKING(for softfloat)\nAC_ARG_WITH(softfloat,\n  AS_HELP_STRING([--with-softfloat],\n    [do you have floating point unit on this machine? (optional)]),\n  [case \"$withval\" in\n\ty|yes) softfloat=yes ;;\n\t*) softfloat=no ;;\n   esac],)\nif test \"$softfloat\" = \"yes\" ; then\n  AC_DEFINE(HAVE_SOFT_FLOAT, \"1\", [Avoid calculation in float])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\nfi\n\nALSA_DEPLIBS=\"\"\nif test \"$softfloat\" != \"yes\"; then\n  ALSA_DEPLIBS=\"-lm\"\nfi\n\ndnl Check for libdl\nAC_MSG_CHECKING(for libdl)\nAC_ARG_WITH(libdl,\n  AS_HELP_STRING([--with-libdl], [Use libdl for plugins (default = yes)]),\n  [ have_libdl=\"$withval\" ], [ have_libdl=\"yes\" ])\nHAVE_LIBDL=\nif test \"$have_libdl\" = \"yes\"; then\n  AC_CHECK_LIB([dl], [dlsym], [HAVE_LIBDL=\"yes\"])\n  if test \"$HAVE_LIBDL\" = \"yes\" ; then\n    ALSA_DEPLIBS=\"$ALSA_DEPLIBS -ldl\"\n    AC_DEFINE([HAVE_LIBDL], 1, [Have libdl])\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\nAM_CONDITIONAL([BUILD_MODULES], [test \"$HAVE_LIBDL\" = \"yes\"])\n\ndnl Check for pthread\nAC_MSG_CHECKING(for pthread)\nAC_ARG_WITH(pthread,\n  AS_HELP_STRING([--with-pthread], [Use pthread (default = yes)]),\n  [ have_pthread=\"$withval\" ], [ have_pthread=\"yes\" ])\nif test \"$have_pthread\" = \"yes\"; then\n  AC_CHECK_LIB([pthread], [pthread_join], [HAVE_LIBPTHREAD=\"yes\"])\n  if test \"$HAVE_LIBPTHREAD\" = \"yes\"; then\n    ALSA_DEPLIBS=\"$ALSA_DEPLIBS -lpthread\"\n    AC_DEFINE([HAVE_LIBPTHREAD], 1, [Have libpthread])\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\n\ndnl Check for pthread\nif test \"$HAVE_LIBPTHREAD\" = \"yes\"; then\n  AC_CHECK_DECL(PTHREAD_MUTEX_RECURSIVE,\n    AC_DEFINE(HAVE_PTHREAD_MUTEX_RECURSIVE, [],\n      [Define if your pthreads implementation have PTHREAD_MUTEX_RECURSIVE]),\n    ,\n    [#include <pthread.h>])\nfi\n\ndnl Check for __thread\nAC_MSG_CHECKING([for __thread])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__)) && ((__GNUC__ < 4) || (__GNUC__ == 4 && __GNUC_MINOR__ < 1) || (__GNUC__ == 4 && __GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ < 2))\n#error gcc has this bug: http://gcc.gnu.org/ml/gcc-bugs/2006-09/msg02275.html\n#endif], [static __thread int p = 0])],\n[AC_DEFINE(HAVE___THREAD, 1,\nDefine to 1 if compiler supports __thread)\nAC_MSG_RESULT([yes])],\n[AC_MSG_RESULT([no])])\n\ndnl Check for librt\nAC_MSG_CHECKING(for librt)\nAC_ARG_WITH(librt,\n  AS_HELP_STRING([--with-librt], [Use librt for monotonic clock (default = yes)]),\n  [ have_librt=\"$withval\" ], [ have_librt=\"yes\" ])\nif test \"$have_librt\" = \"yes\"; then\n  AC_CHECK_LIB([rt], [clock_gettime], [HAVE_LIBRT=\"yes\"])\n  if test \"$HAVE_LIBRT\" = \"yes\" ; then\n    ALSA_DEPLIBS=\"$ALSA_DEPLIBS -lrt\"\n    AC_DEFINE([HAVE_LIBRT], 1, [Have librt])\n    AC_DEFINE([HAVE_CLOCK_GETTIME], 1, [Have clock gettime])\n  fi\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_SUBST(ALSA_DEPLIBS)\n\ndnl Check for headers\nAC_CHECK_HEADERS([wordexp.h endian.h sys/endian.h sys/shm.h])\n\ndnl Check for resmgr support...\nAC_MSG_CHECKING(for resmgr support)\nAC_ARG_ENABLE(resmgr,\n  AS_HELP_STRING([--enable-resmgr], [support resmgr (optional)]),\n  resmgr=\"$enableval\", resmgr=\"no\")\nAC_MSG_RESULT($resmgr)\nif test \"$resmgr\" = \"yes\"; then\n  AC_CHECK_LIB(resmgr, rsm_open_device,,\n    AC_ERROR([Cannot find libresmgr]))\n  AC_DEFINE(SUPPORT_RESMGR, \"1\", [Support resmgr with alsa-lib])\nfi\n\ndnl Check for aload* support...\nAC_MSG_CHECKING(for aload* support)\nAC_ARG_ENABLE(aload,\n  AS_HELP_STRING([--disable-aload], [disable reading /dev/aload*]),\n  aload=\"$enableval\", aload=\"yes\")\nAC_MSG_RESULT($aload)\nif test \"$aload\" = \"yes\"; then\n  AC_DEFINE(SUPPORT_ALOAD, \"1\", [Support /dev/aload* access for auto-loading])\nfi\n\ndnl Check for non-standard /dev directory\nAC_MSG_CHECKING([for ALSA device file directory])\nAC_ARG_WITH(alsa-devdir,\n  AS_HELP_STRING([--with-alsa-devdir=dir],\n    [directory with ALSA device files (default /dev/snd)]),\n  [alsa_dev_dir=\"$withval\"],\n  [alsa_dev_dir=\"/dev/snd\"])\ndnl make sure it has a trailing slash\nif echo \"$alsa_dev_dir\" | grep -v '/$' > /dev/null; then\n  alsa_dev_dir=\"$alsa_dev_dir/\"\nfi\nAC_DEFINE_UNQUOTED(ALSA_DEVICE_DIRECTORY, \"$alsa_dev_dir\", [Directory with ALSA device files])\nAC_MSG_RESULT([$alsa_dev_dir])\n\nAC_MSG_CHECKING([for aload* device file directory])\nAC_ARG_WITH(aload-devdir,\n  AS_HELP_STRING([--with-aload-devdir=dir],\n    [directory with aload* device files (default /dev)]),\n  [aload_dev_dir=\"$withval\"],\n  [aload_dev_dir=\"/dev\"])\nif echo \"$aload_dev_dir\" | grep -v '/$' > /dev/null; then\n  aload_dev_dir=\"$aload_dev_dir/\"\nfi\nAC_DEFINE_UNQUOTED(ALOAD_DEVICE_DIRECTORY, \"$aload_dev_dir\", [Directory with aload* device files])\nAC_MSG_RESULT([$aload_dev_dir])\n\ndnl Build conditions\nAC_ARG_ENABLE(mixer,\n  AS_HELP_STRING([--disable-mixer], [disable the mixer component]),\n  [build_mixer=\"$enableval\"], [build_mixer=\"yes\"])\nAC_ARG_ENABLE(pcm,\n  AS_HELP_STRING([--disable-pcm], [disable the PCM component]),\n  [build_pcm=\"$enableval\"], [build_pcm=\"yes\"])\nAC_ARG_ENABLE(rawmidi,\n  AS_HELP_STRING([--disable-rawmidi], [disable the raw MIDI component]),\n  [build_rawmidi=\"$enableval\"], [build_rawmidi=\"yes\"])\nAC_ARG_ENABLE(hwdep,\n  AS_HELP_STRING([--disable-hwdep], [disable the hwdep component]),\n  [build_hwdep=\"$enableval\"], [build_hwdep=\"yes\"])\nAC_ARG_ENABLE(seq,\n  AS_HELP_STRING([--disable-seq], [disable the sequencer component]),\n  [build_seq=\"$enableval\"], [build_seq=\"yes\"])\nAC_ARG_ENABLE(ucm,\n  AS_HELP_STRING([--disable-ucm], [disable the use-case-manager component]),\n  [build_ucm=\"$enableval\"], [build_ucm=\"yes\"])\nAC_ARG_ENABLE(topology,\n  AS_HELP_STRING([--disable-topology], [disable the DSP topology component]),\n  [build_topology=\"$enableval\"], [build_topology=\"yes\"])\nAC_ARG_ENABLE(alisp,\n  AS_HELP_STRING([--disable-alisp], [disable the alisp component]),\n  [build_alisp=\"$enableval\"], [build_alisp=\"yes\"])\ntest \"$softfloat\" = \"yes\" && build_alisp=\"no\"\nAC_ARG_ENABLE(old-symbols,\n  AS_HELP_STRING([--disable-old-symbols], [disable old obsoleted symbols]),\n  [keep_old_symbols=\"$enableval\"], [keep_old_symbols=\"yes\"])\nAM_CONDITIONAL([KEEP_OLD_SYMBOLS], [test x$keep_old_symbols = xyes])\n\nAC_ARG_ENABLE(python,\n  AS_HELP_STRING([--disable-python], [disable the python components]),\n  [build_python=\"$enableval\"], [build_python=\"yes\"])\nPYTHON_LIBS=\"\"\nPYTHON_INCLUDES=\"\"\nif test \"$build_python\" = \"yes\"; then\n  AC_ARG_WITH(pythonlibs,\n    AS_HELP_STRING([--with-pythonlibs=ldflags],\n      [specify python libraries (-lpthread -lm -ldl -lpython2.4)]),\n    pythonlibs=\"$withval\", pythonlibs=`python-config --libs`)\n  AC_ARG_WITH(pythonincludes,\n    AS_HELP_STRING([--with-pythonincludes=Cflags],\n      [specify python C header files (-I/usr/include/python)]),\n    pythonincludes=\"$withval\", pythonincludes=`python-config --includes`)\n  if test -z \"$pythonlibs\"; then\n    echo \"Unable to determine python libraries! Probably python-config is not\"\n    echo \"available on this system. Please, use --with-pythonlibs and\"\n    echo \"--with-pythonincludes options. Python components are disabled in this build.\"\n    build_python=\"no\"\n  else\n    PYTHON_LIBS=\"$pythonlibs\"\n    PYTHON_INCLUDES=\"$pythonincludes\"\n  fi\nfi\nAC_SUBST(PYTHON_LIBS)\nAC_SUBST(PYTHON_INCLUDES)\n\nAM_CONDITIONAL([BUILD_MIXER], [test x$build_mixer = xyes])\nAM_CONDITIONAL([BUILD_PCM], [test x$build_pcm = xyes])\nAM_CONDITIONAL([BUILD_RAWMIDI], [test x$build_rawmidi = xyes])\nAM_CONDITIONAL([BUILD_HWDEP], [test x$build_hwdep = xyes])\nAM_CONDITIONAL([BUILD_SEQ], [test x$build_seq = xyes])\nAM_CONDITIONAL([BUILD_UCM], [test x$build_ucm = xyes])\nAM_CONDITIONAL([BUILD_TOPOLOGY], [test x$build_topology = xyes])\nAM_CONDITIONAL([BUILD_ALISP], [test x$build_alisp = xyes])\nAM_CONDITIONAL([BUILD_PYTHON], [test x$build_python = xyes])\n\nif test \"$build_mixer\" = \"yes\"; then\n  AC_DEFINE([BUILD_MIXER], \"1\", [Build mixer component])\nfi\nif test \"$build_pcm\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM], \"1\", [Build PCM component])\nfi\nif test \"$build_rawmidi\" = \"yes\"; then\n  AC_DEFINE([BUILD_RAWMIDI], \"1\", [Build raw MIDI component])\nfi\nif test \"$build_hwdep\" = \"yes\"; then\n  AC_DEFINE([BUILD_HWDEP], \"1\", [Build hwdep component])\nfi\nif test \"$build_seq\" = \"yes\"; then\n  AC_DEFINE([BUILD_SEQ], \"1\", [Build sequencer component])\nfi\nif test \"$build_ucm\" = \"yes\"; then\n  AC_DEFINE([BUILD_UCM], \"1\", [Build UCM component])\nfi\nif test \"$build_topology\" = \"yes\"; then\n  AC_DEFINE([BUILD_TOPOLOGY], \"1\", [Build DSP Topology component])\nfi\n\ndnl PCM Plugins\n\nif test \"$build_pcm\" = \"yes\"; then\nAC_ARG_WITH(pcm-plugins,\n  AS_HELP_STRING([--with-pcm-plugins=<list>],\n    [build PCM plugins (default = all)]),\n  [pcm_plugins=\"$withval\"], [pcm_plugins=\"all\"])\nelse\npcm_plugins=\"\"\nfi\n\ndnl check atomics for pcm_meter\n\nAC_MSG_CHECKING([whether GCC supports builtin atomic intrinsics])\nif test -z \"$gcc_have_atomics\"; then\n  gcc_have_atomics=no\n  AC_TRY_LINK([],\n    [int i;\n     __atomic_load_n(&i, __ATOMIC_SEQ_CST);\n     __atomic_add_fetch(&i, 0, __ATOMIC_SEQ_CST);\n    ],\n    [gcc_have_atomics=yes],\n    [gcc_have_atomics=no])\nfi\nAC_MSG_RESULT($gcc_have_atomics)\n\nPCM_PLUGIN_LIST=\"copy linear route mulaw alaw adpcm rate plug multi shm file null empty share meter hooks lfloat ladspa dmix dshare dsnoop asym iec958 softvol extplug ioplug mmap_emul\"\n\nbuild_pcm_plugin=\"no\"\nfor t in $PCM_PLUGIN_LIST; do\n  eval build_pcm_$t=\"no\"\ndone\n\npcm_plugins=`echo $pcm_plugins | sed 's/,/ /g'`\nfor p in $pcm_plugins; do\n  for t in $PCM_PLUGIN_LIST; do\n    if test \"$p\" = \"$t\" -o \"$p\" = \"all\"; then\n      eval build_pcm_$t=\"yes\"\n      build_pcm_plugin=\"yes\"\n    fi\n  done\ndone\n\ndnl special dependencies\nif test \"$build_pcm_plug\" = \"yes\"; then\n  build_pcm_linear=\"yes\"\n  build_pcm_copy=\"yes\"\nfi\n\nif test \"$build_pcm_ioplug\" = \"yes\"; then\n  build_pcm_extplug=\"yes\"\nfi\n\nif test \"$HAVE_LIBDL\" != \"yes\"; then\n  build_pcm_meter=\"no\"\n  build_pcm_ladspa=\"no\"\n  build_pcm_pcm_ioplug=\"no\"\n  build_pcm_pcm_extplug=\"no\"\nfi\n\nif test \"$HAVE_LIBPTHREAD\" != \"yes\"; then\n  build_pcm_share=\"no\"\nfi\n\nif test \"$softfloat\" = \"yes\"; then\n  build_pcm_lfloat=\"no\"\n  build_pcm_ladspa=\"no\"\nfi\n\nif test \"$gcc_have_atomics\" != \"yes\"; then\n  build_pcm_meter=\"no\"\nfi\n\nif test \"$ac_cv_header_sys_shm_h\" != \"yes\"; then\n  build_pcm_dmix=\"no\"\n  build_pcm_dshare=\"no\"\n  build_pcm_dsnoop=\"no\"\n  build_pcm_shm=\"no\"\nfi\n\nAM_CONDITIONAL([BUILD_PCM_PLUGIN], [test x$build_pcm_plugin = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_COPY], [test x$build_pcm_copy = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_LINEAR], [test x$build_pcm_linear = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_ROUTE], [test x$build_pcm_route = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_MULAW], [test x$build_pcm_mulaw = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_ALAW], [test x$build_pcm_alaw = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_ADPCM], [test x$build_pcm_adpcm = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_RATE], [test x$build_pcm_rate = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_PLUG], [test x$build_pcm_plug = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_MULTI], [test x$build_pcm_multi = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_SHM], [test x$build_pcm_shm = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_FILE], [test x$build_pcm_file = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_NULL], [test x$build_pcm_null = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_EMPTY], [test x$build_pcm_empty = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_SHARE], [test x$build_pcm_share = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_METER], [test x$build_pcm_meter = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_HOOKS], [test x$build_pcm_hooks = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_LFLOAT], [test x$build_pcm_lfloat = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_LADSPA], [test x$build_pcm_ladspa = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_DMIX], [test x$build_pcm_dmix = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_DSHARE], [test x$build_pcm_dshare = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_DSNOOP], [test x$build_pcm_dsnoop = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_ASYM], [test x$build_pcm_asym = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_IEC958], [test x$build_pcm_iec958 = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_SOFTVOL], [test x$build_pcm_softvol = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_EXTPLUG], [test x$build_pcm_extplug = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_IOPLUG], [test x$build_pcm_ioplug = xyes])\nAM_CONDITIONAL([BUILD_PCM_PLUGIN_MMAP_EMUL], [test x$build_pcm_mmap_emul = xyes])\n\ndnl Defines for plug plugin\nif test \"$build_pcm_rate\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_RATE], \"1\", [Build PCM rate plugin])\nfi\nif test \"$build_pcm_route\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_ROUTE], \"1\", [Build PCM route plugin])\nfi\nif test \"$build_pcm_lfloat\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_LFLOAT], \"1\", [Build PCM lfloat plugin])\nfi\nif test \"$build_pcm_adpcm\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_ADPCM], \"1\", [Build PCM adpcm plugin])\nfi\nif test \"$build_pcm_mulaw\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_MULAW], \"1\", [Build PCM mulaw plugin])\nfi\nif test \"$build_pcm_alaw\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_ALAW], \"1\", [Build PCM alaw plugin])\nfi\nif test \"$build_pcm_mmap_emul\" = \"yes\"; then\n  AC_DEFINE([BUILD_PCM_PLUGIN_MMAP_EMUL], \"1\", [Build PCM mmap-emul plugin])\nfi\n\n\ndnl Create PCM plugin symbol list for static library\nrm -f \"$srcdir\"/src/pcm/pcm_symbols_list.c\ntouch \"$srcdir\"/src/pcm/pcm_symbols_list.c\nfor t in $PCM_PLUGIN_LIST; do\n  if eval test \\$build_pcm_$t = yes; then\n    echo \\&_snd_module_pcm_$t, >> \"$srcdir\"/src/pcm/pcm_symbols_list.c\n  fi\ndone\n\ndnl Control Plugins\n\nAC_ARG_WITH(ctl-plugins,\n  AS_HELP_STRING([--with-ctl-plugins=<list>],\n    [build control plugins (default = all)]),\n  [ctl_plugins=\"$withval\"], [ctl_plugins=\"all\"])\n\nCTL_PLUGIN_LIST=\"shm ext\"\n\nbuild_ctl_plugin=\"no\"\nfor t in $CTL_PLUGIN_LIST; do\n  eval build_ctl_$t=\"no\"\ndone\n\nctl_plugins=`echo $ctl_plugins | sed 's/,/ /g'`\nfor p in $ctl_plugins; do\n  for t in $CTL_PLUGIN_LIST; do\n    if test \"$p\" = \"$t\" -o \"$p\" = \"all\"; then\n      eval build_ctl_$t=\"yes\"\n      build_ctl_plugin=\"yes\"\n    fi\n  done\ndone\n\nif test \"$ac_cv_header_sys_shm_h\" != \"yes\"; then\n  build_ctl_shm=\"no\"\nfi\n\nAM_CONDITIONAL([BUILD_CTL_PLUGIN], [test x$build_ctl_plugin = xyes])\nAM_CONDITIONAL([BUILD_CTL_PLUGIN_SHM], [test x$build_ctl_shm = xyes])\nAM_CONDITIONAL([BUILD_CTL_PLUGIN_EXT], [test x$build_ctl_ext = xyes])\n\ndnl Create ctl plugin symbol list for static library\nrm -f \"$srcdir\"/src/control/ctl_symbols_list.c\ntouch \"$srcdir\"/src/control/ctl_symbols_list.c\nfor t in $CTL_PLUGIN_LIST; do\n  if eval test \\$build_ctl_$t = yes; then\n    echo \\&_snd_module_control_$t, >> \"$srcdir\"/src/control/ctl_symbols_list.c\n  fi\ndone\n\ndnl Max number of cards\nAC_MSG_CHECKING(for max number of cards)\nAC_ARG_WITH(max-cards,\n  AS_HELP_STRING([--with-max-cards], [Specify the max number of cards (default = 32)]),\n  [ max_cards=\"$withval\" ], [ max_cards=\"32\" ])\nAC_MSG_RESULT([$max_cards])\n\nif test \"$max_cards\" -lt 1; then\n   AC_ERROR([Invalid max cards $max_cards])\nelif test \"$max_cards\" -gt 256; then\n   AC_ERROR([Invalid max cards $max_cards])\nfi\nAC_DEFINE_UNQUOTED(SND_MAX_CARDS, $max_cards, [Max number of cards])\n\ndnl Check for thread-safe API functions\nif test \"$HAVE_LIBPTHREAD\" = \"yes\"; then\nAC_MSG_CHECKING(for thread-safe API functions)\nAC_ARG_ENABLE(thread-safety,\n  AS_HELP_STRING([--disable-thread-safety],\n    [disable thread-safe API functions]),\n  threadsafe=\"$enableval\", threadsafe=\"yes\")\nif test \"$threadsafe\" = \"yes\"; then\n  AC_MSG_RESULT(yes)\n  AC_DEFINE([THREAD_SAFE_API], \"1\", [Disable thread-safe API functions])\nelse\n  AC_MSG_RESULT(no)\nfi\nfi\n\ndnl Make a symlink for inclusion of alsa/xxx.h\nif test ! -L \"$srcdir\"/include/alsa ; then\n  echo \"Making a symlink include/alsa\"\n  rm -f \"$srcdir\"/include/alsa\n  ln -sf . \"$srcdir\"/include/alsa\nfi\n\nAC_OUTPUT(Makefile doc/Makefile doc/pictures/Makefile doc/doxygen.cfg \\\n\t  include/Makefile include/sound/Makefile src/Versions src/Makefile \\\n          src/control/Makefile src/mixer/Makefile \\\n\t  src/pcm/Makefile src/pcm/scopes/Makefile \\\n\t  src/rawmidi/Makefile src/timer/Makefile \\\n          src/hwdep/Makefile src/seq/Makefile src/ucm/Makefile \\\n          src/alisp/Makefile src/topology/Makefile \\\n\t  src/conf/Makefile src/conf/alsa.conf.d/Makefile \\\n\t  src/conf/cards/Makefile \\\n\t  src/conf/pcm/Makefile \\\n\t  src/conf/ucm/Makefile \\\n\t  src/conf/ucm/DAISY-I2S/Makefile \\\n\t  src/conf/ucm/PandaBoard/Makefile \\\n\t  src/conf/ucm/PandaBoardES/Makefile \\\n\t  src/conf/ucm/SDP4430/Makefile \\\n\t  src/conf/ucm/tegraalc5632/Makefile \\\n\t  src/conf/ucm/PAZ00/Makefile \\\n\t  src/conf/ucm/GoogleNyan/Makefile \\\n\t  src/conf/ucm/broadwell-rt286/Makefile \\\n\t  src/conf/ucm/skylake-rt286/Makefile \\\n\t  src/conf/ucm/VEYRON-I2S/Makefile \\\n\t  src/conf/ucm/chtrt5645/Makefile \\\n\t  src/conf/ucm/DB410c/Makefile \\\n\t  src/conf/topology/Makefile \\\n\t  src/conf/topology/broadwell/Makefile \\\n\t  modules/Makefile modules/mixer/Makefile modules/mixer/simple/Makefile \\\n\t  src/conf/topology/sklrt286/Makefile \\\n\t  src/conf/topology/bxtrt298/Makefile \\\n\t  alsalisp/Makefile aserver/Makefile \\\n\t  test/Makefile test/lsb/Makefile \\\n\t  src/conf/ucm/broxton-rt298/Makefile \\\n\t  utils/Makefile utils/alsa-lib.spec utils/alsa.pc)\n\ndnl Create asoundlib.h dynamically according to configure options\necho \"Creating asoundlib.h...\"\ncp \"$srcdir\"/include/asoundlib-head.h include/asoundlib.h\ntest \"$ac_cv_header_endian_h\" = \"yes\" && echo \"#include <endian.h>\" >> include/asoundlib.h\nif test \"$ac_cv_header_sys_endian_h\" = \"yes\"; then\ncat >> include/asoundlib.h <<EOF\n#include <sys/endian.h>\n#ifndef __BYTE_ORDER\n#define __BYTE_ORDER BYTE_ORDER\n#endif\n#ifndef __LITTLE_ENDIAN\n#define __LITTLE_ENDIAN LITTLE_ENDIAN\n#endif\n#ifndef __BIG_ENDIAN\n#define __BIG_ENDIAN BIG_ENDIAN\n#endif\nEOF\nfi\ncat >> include/asoundlib.h <<EOF\n\n#ifndef __GNUC__\n#define __inline__ inline\n#endif\n\n#include <alsa/asoundef.h>\n#include <alsa/version.h>\n#include <alsa/global.h>\n#include <alsa/input.h>\n#include <alsa/output.h>\n#include <alsa/error.h>\n#include <alsa/conf.h>\nEOF\ntest \"$build_pcm\" = \"yes\" && echo \"#include <alsa/pcm.h>\" >> include/asoundlib.h\ntest \"$build_rawmidi\" = \"yes\" && echo \"#include <alsa/rawmidi.h>\" >> include/asoundlib.h\ntest \"$build_pcm\" = \"yes\" && echo \"#include <alsa/timer.h>\" >> include/asoundlib.h\ntest \"$build_hwdep\" = \"yes\" && echo \"#include <alsa/hwdep.h>\" >> include/asoundlib.h\necho \"#include <alsa/control.h>\" >> include/asoundlib.h\ntest \"$build_mixer\" = \"yes\" && echo \"#include <alsa/mixer.h>\" >> include/asoundlib.h\ntest \"$build_seq\" = \"yes\" && echo \"#include <alsa/seq_event.h>\" >> include/asoundlib.h\ntest \"$build_seq\" = \"yes\" && echo \"#include <alsa/seq.h>\" >> include/asoundlib.h\ntest \"$build_seq\" = \"yes\" && echo \"#include <alsa/seqmid.h>\" >> include/asoundlib.h\ntest \"$build_seq\" = \"yes\" && echo \"#include <alsa/seq_midi_event.h>\" >> include/asoundlib.h\ncat \"$srcdir\"/include/asoundlib-tail.h >> include/asoundlib.h\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/ltmain.sh": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/aclocal.m4": "# generated automatically by aclocal 1.12.2 -*- Autoconf -*-\n\n# Copyright (C) 1996-2012 Free Software Foundation, Inc.\n\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\nm4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.69],,\n[m4_warning([this file was generated for autoconf 2.69.\nYou have another version of autoconf.  It may work, but is not guaranteed to.\nIf you have problems, you may need to regenerate the build system entirely.\nTo do so, use the procedure documented by the package, typically 'autoreconf'.])])\n\n# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 57 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_REPLACE_SHELLFNS\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=\"/usr/lib:/lib\"\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[  --with-sysroot[=DIR] Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([${with_sysroot}])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and in which our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Add ABI-specific directories to the system library path.\n  sys_lib_dlsearch_path_spec=\"/lib64 /usr/lib64 /lib /usr/lib\"\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=\"$save_LDFLAGS\"])\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=\".dll\"\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      $SED -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t    else\n\t      $SED -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t    fi~\n\t    $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t    linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t    lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t    case $lt_outputfile in\n\t      *.exe|*.EXE) ;;\n\t      *)\n\t\tlt_outputfile=\"$lt_outputfile.exe\"\n\t\tlt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t\t;;\n\t    esac~\n\t    func_to_tool_file \"$lt_outputfile\"~\n\t    if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t      $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t      $RM \"$lt_outputfile.manifest\";\n\t    fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file (1st line\n\t    # is EXPORTS), use it as is; otherwise, prepend...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      cp $export_symbols $output_objdir/$soname.def;\n\t    else\n\t      echo EXPORTS > $output_objdir/$soname.def;\n\t      cat $export_symbols >> $output_objdir/$soname.def;\n\t    fi~\n\t    $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared $pic_flag -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case ${2} in\n  .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case ${prev}${p} in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case ${prev} in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\n  CFLAGS=\"$lt_save_CFLAGS\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_FUNCTION_REPLACE (FUNCNAME, REPLACEMENT-BODY)\n# ------------------------------------------------------\n# In `$cfgfile', look for function FUNCNAME delimited by `^FUNCNAME ()$' and\n# '^} FUNCNAME ', and replace its body with REPLACEMENT-BODY.\nm4_defun([_LT_PROG_FUNCTION_REPLACE],\n[dnl {\nsed -e '/^$1 ()$/,/^} # $1 /c\\\n$1 ()\\\n{\\\nm4_bpatsubsts([$2], [$], [\\\\], [^\\([\t ]\\)], [\\\\\\1])\n} # Extended-shell $1 implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n])\n\n\n# _LT_PROG_REPLACE_SHELLFNS\n# -------------------------\n# Replace existing portable implementations of several shell functions with\n# equivalent extended shell implementations where those features are available..\nm4_defun([_LT_PROG_REPLACE_SHELLFNS],\n[if test x\"$xsi_shell\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_dirname], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_basename], [dnl\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_dirname_and_basename], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_stripname], [dnl\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary parameter first.\n    func_stripname_result=${3}\n    func_stripname_result=${func_stripname_result#\"${1}\"}\n    func_stripname_result=${func_stripname_result%\"${2}\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_long_opt], [dnl\n    func_split_long_opt_name=${1%%=*}\n    func_split_long_opt_arg=${1#*=}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_short_opt], [dnl\n    func_split_short_opt_arg=${1#??}\n    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_lo2o], [dnl\n    case ${1} in\n      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n      *)    func_lo2o_result=${1} ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_xform], [    func_xform_result=${1%.*}.lo])\n\n  _LT_PROG_FUNCTION_REPLACE([func_arith], [    func_arith_result=$(( $[*] ))])\n\n  _LT_PROG_FUNCTION_REPLACE([func_len], [    func_len_result=${#1}])\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_append], [    eval \"${1}+=\\\\${2}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_append_quoted], [dnl\n    func_quote_for_eval \"${2}\"\ndnl m4 expansion turns \\\\\\\\ into \\\\, and then the shell eval turns that into \\\n    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"])\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  AC_MSG_WARN([Unable to substitute extended shell functions in $ofile])\nfi\n])\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine which file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n\n# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation,\n#   Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 7 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for lt_pkg in $withval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n\n# ltsugar.m4 -- libtool m4 base layer.                         -*-Autoconf-*-\n#\n# Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n# Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 6 ltsugar.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])\n\n\n# lt_join(SEP, ARG1, [ARG2...])\n# -----------------------------\n# Produce ARG1SEPARG2...SEPARGn, omitting [] arguments and their\n# associated separator.\n# Needed until we can rely on m4_join from Autoconf 2.62, since all earlier\n# versions in m4sugar had bugs.\nm4_define([lt_join],\n[m4_if([$#], [1], [],\n       [$#], [2], [[$2]],\n       [m4_if([$2], [], [], [[$2]_])$0([$1], m4_shift(m4_shift($@)))])])\nm4_define([_lt_join],\n[m4_if([$#$2], [2], [],\n       [m4_if([$2], [], [], [[$1$2]])$0([$1], m4_shift(m4_shift($@)))])])\n\n\n# lt_car(LIST)\n# lt_cdr(LIST)\n# ------------\n# Manipulate m4 lists.\n# These macros are necessary as long as will still need to support\n# Autoconf-2.59 which quotes differently.\nm4_define([lt_car], [[$1]])\nm4_define([lt_cdr],\n[m4_if([$#], 0, [m4_fatal([$0: cannot be called without arguments])],\n       [$#], 1, [],\n       [m4_dquote(m4_shift($@))])])\nm4_define([lt_unquote], $1)\n\n\n# lt_append(MACRO-NAME, STRING, [SEPARATOR])\n# ------------------------------------------\n# Redefine MACRO-NAME to hold its former content plus `SEPARATOR'`STRING'.\n# Note that neither SEPARATOR nor STRING are expanded; they are appended\n# to MACRO-NAME as is (leaving the expansion for when MACRO-NAME is invoked).\n# No SEPARATOR is output if MACRO-NAME was previously undefined (different\n# than defined and empty).\n#\n# This macro is needed until we can rely on Autoconf 2.62, since earlier\n# versions of m4sugar mistakenly expanded SEPARATOR but not STRING.\nm4_define([lt_append],\n[m4_define([$1],\n\t   m4_ifdef([$1], [m4_defn([$1])[$3]])[$2])])\n\n\n\n# lt_combine(SEP, PREFIX-LIST, INFIX, SUFFIX1, [SUFFIX2...])\n# ----------------------------------------------------------\n# Produce a SEP delimited list of all paired combinations of elements of\n# PREFIX-LIST with SUFFIX1 through SUFFIXn.  Each element of the list\n# has the form PREFIXmINFIXSUFFIXn.\n# Needed until we can rely on m4_combine added in Autoconf 2.62.\nm4_define([lt_combine],\n[m4_if(m4_eval([$# > 3]), [1],\n       [m4_pushdef([_Lt_sep], [m4_define([_Lt_sep], m4_defn([lt_car]))])]]dnl\n[[m4_foreach([_Lt_prefix], [$2],\n\t     [m4_foreach([_Lt_suffix],\n\t\t]m4_dquote(m4_dquote(m4_shift(m4_shift(m4_shift($@)))))[,\n\t[_Lt_sep([$1])[]m4_defn([_Lt_prefix])[$3]m4_defn([_Lt_suffix])])])])])\n\n\n# lt_if_append_uniq(MACRO-NAME, VARNAME, [SEPARATOR], [UNIQ], [NOT-UNIQ])\n# -----------------------------------------------------------------------\n# Iff MACRO-NAME does not yet contain VARNAME, then append it (delimited\n# by SEPARATOR if supplied) and expand UNIQ, else NOT-UNIQ.\nm4_define([lt_if_append_uniq],\n[m4_ifdef([$1],\n\t  [m4_if(m4_index([$3]m4_defn([$1])[$3], [$3$2$3]), [-1],\n\t\t [lt_append([$1], [$2], [$3])$4],\n\t\t [$5])],\n\t  [lt_append([$1], [$2], [$3])$4])])\n\n\n# lt_dict_add(DICT, KEY, VALUE)\n# -----------------------------\nm4_define([lt_dict_add],\n[m4_define([$1($2)], [$3])])\n\n\n# lt_dict_add_subkey(DICT, KEY, SUBKEY, VALUE)\n# --------------------------------------------\nm4_define([lt_dict_add_subkey],\n[m4_define([$1($2:$3)], [$4])])\n\n\n# lt_dict_fetch(DICT, KEY, [SUBKEY])\n# ----------------------------------\nm4_define([lt_dict_fetch],\n[m4_ifval([$3],\n\tm4_ifdef([$1($2:$3)], [m4_defn([$1($2:$3)])]),\n    m4_ifdef([$1($2)], [m4_defn([$1($2)])]))])\n\n\n# lt_if_dict_fetch(DICT, KEY, [SUBKEY], VALUE, IF-TRUE, [IF-FALSE])\n# -----------------------------------------------------------------\nm4_define([lt_if_dict_fetch],\n[m4_if(lt_dict_fetch([$1], [$2], [$3]), [$4],\n\t[$5],\n    [$6])])\n\n\n# lt_dict_filter(DICT, [SUBKEY], VALUE, [SEPARATOR], KEY, [...])\n# --------------------------------------------------------------\nm4_define([lt_dict_filter],\n[m4_if([$5], [], [],\n  [lt_join(m4_quote(m4_default([$4], [[, ]])),\n           lt_unquote(m4_split(m4_normalize(m4_foreach(_Lt_key, lt_car([m4_shiftn(4, $@)]),\n\t\t      [lt_if_dict_fetch([$1], _Lt_key, [$2], [$3], [_Lt_key ])])))))])[]dnl\n])\n\n# ltversion.m4 -- version numbers\t\t\t-*- Autoconf -*-\n#\n#   Copyright (C) 2004 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# @configure_input@\n\n# serial 3337 ltversion.m4\n# This file is part of GNU Libtool\n\nm4_define([LT_PACKAGE_VERSION], [2.4.2])\nm4_define([LT_PACKAGE_REVISION], [1.3337])\n\nAC_DEFUN([LTVERSION_VERSION],\n[macro_version='2.4.2'\nmacro_revision='1.3337'\n_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])\n_LT_DECL(, macro_revision, 0)\n])\n\n# lt~obsolete.m4 -- aclocal satisfying obsolete definitions.    -*-Autoconf-*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004.\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 5 lt~obsolete.m4\n\n# These exist entirely to fool aclocal when bootstrapping libtool.\n#\n# In the past libtool.m4 has provided macros via AC_DEFUN (or AU_DEFUN)\n# which have later been changed to m4_define as they aren't part of the\n# exported API, or moved to Autoconf or Automake where they belong.\n#\n# The trouble is, aclocal is a bit thick.  It'll see the old AC_DEFUN\n# in /usr/share/aclocal/libtool.m4 and remember it, then when it sees us\n# using a macro with the same name in our local m4/libtool.m4 it'll\n# pull the old libtool.m4 in (it doesn't see our shiny new m4_define\n# and doesn't know about Autoconf macros at all.)\n#\n# So we provide this file, which has a silly filename so it's always\n# included after everything else.  This provides aclocal with the\n# AC_DEFUNs it wants, but when m4 processes it, it doesn't do anything\n# because those macros already exist, or will be overwritten later.\n# We use AC_DEFUN over AU_DEFUN for compatibility with aclocal-1.6. \n#\n# Anytime we withdraw an AC_DEFUN or AU_DEFUN, remember to add it here.\n# Yes, that means every name once taken will need to remain here until\n# we give up compatibility with versions before 1.7, at which point\n# we need to keep only those names which we still refer to.\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])\n\nm4_ifndef([AC_LIBTOOL_LINKER_OPTION],\t[AC_DEFUN([AC_LIBTOOL_LINKER_OPTION])])\nm4_ifndef([AC_PROG_EGREP],\t\t[AC_DEFUN([AC_PROG_EGREP])])\nm4_ifndef([_LT_AC_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_AC_SHELL_INIT],\t\t[AC_DEFUN([_LT_AC_SHELL_INIT])])\nm4_ifndef([_LT_AC_SYS_LIBPATH_AIX],\t[AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])])\nm4_ifndef([_LT_PROG_LTMAIN],\t\t[AC_DEFUN([_LT_PROG_LTMAIN])])\nm4_ifndef([_LT_AC_TAGVAR],\t\t[AC_DEFUN([_LT_AC_TAGVAR])])\nm4_ifndef([AC_LTDL_ENABLE_INSTALL],\t[AC_DEFUN([AC_LTDL_ENABLE_INSTALL])])\nm4_ifndef([AC_LTDL_PREOPEN],\t\t[AC_DEFUN([AC_LTDL_PREOPEN])])\nm4_ifndef([_LT_AC_SYS_COMPILER],\t[AC_DEFUN([_LT_AC_SYS_COMPILER])])\nm4_ifndef([_LT_AC_LOCK],\t\t[AC_DEFUN([_LT_AC_LOCK])])\nm4_ifndef([AC_LIBTOOL_SYS_OLD_ARCHIVE],\t[AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])])\nm4_ifndef([_LT_AC_TRY_DLOPEN_SELF],\t[AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])])\nm4_ifndef([AC_LIBTOOL_PROG_CC_C_O],\t[AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])])\nm4_ifndef([AC_LIBTOOL_SYS_HARD_LINK_LOCKS], [AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])])\nm4_ifndef([AC_LIBTOOL_OBJDIR],\t\t[AC_DEFUN([AC_LIBTOOL_OBJDIR])])\nm4_ifndef([AC_LTDL_OBJDIR],\t\t[AC_DEFUN([AC_LTDL_OBJDIR])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH], [AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])])\nm4_ifndef([AC_LIBTOOL_SYS_LIB_STRIP],\t[AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])])\nm4_ifndef([AC_PATH_MAGIC],\t\t[AC_DEFUN([AC_PATH_MAGIC])])\nm4_ifndef([AC_PROG_LD_GNU],\t\t[AC_DEFUN([AC_PROG_LD_GNU])])\nm4_ifndef([AC_PROG_LD_RELOAD_FLAG],\t[AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])])\nm4_ifndef([AC_DEPLIBS_CHECK_METHOD],\t[AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_NO_RTTI], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])])\nm4_ifndef([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE], [AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_PIC], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_SHLIBS],\t[AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])])\nm4_ifndef([AC_LIBTOOL_POSTDEP_PREDEP],\t[AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])])\nm4_ifndef([LT_AC_PROG_EGREP],\t\t[AC_DEFUN([LT_AC_PROG_EGREP])])\nm4_ifndef([LT_AC_PROG_SED],\t\t[AC_DEFUN([LT_AC_PROG_SED])])\nm4_ifndef([_LT_CC_BASENAME],\t\t[AC_DEFUN([_LT_CC_BASENAME])])\nm4_ifndef([_LT_COMPILER_BOILERPLATE],\t[AC_DEFUN([_LT_COMPILER_BOILERPLATE])])\nm4_ifndef([_LT_LINKER_BOILERPLATE],\t[AC_DEFUN([_LT_LINKER_BOILERPLATE])])\nm4_ifndef([_AC_PROG_LIBTOOL],\t\t[AC_DEFUN([_AC_PROG_LIBTOOL])])\nm4_ifndef([AC_LIBTOOL_SETUP],\t\t[AC_DEFUN([AC_LIBTOOL_SETUP])])\nm4_ifndef([_LT_AC_CHECK_DLFCN],\t\t[AC_DEFUN([_LT_AC_CHECK_DLFCN])])\nm4_ifndef([AC_LIBTOOL_SYS_DYNAMIC_LINKER],\t[AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])])\nm4_ifndef([_LT_AC_TAGCONFIG],\t\t[AC_DEFUN([_LT_AC_TAGCONFIG])])\nm4_ifndef([AC_DISABLE_FAST_INSTALL],\t[AC_DEFUN([AC_DISABLE_FAST_INSTALL])])\nm4_ifndef([_LT_AC_LANG_CXX],\t\t[AC_DEFUN([_LT_AC_LANG_CXX])])\nm4_ifndef([_LT_AC_LANG_F77],\t\t[AC_DEFUN([_LT_AC_LANG_F77])])\nm4_ifndef([_LT_AC_LANG_GCJ],\t\t[AC_DEFUN([_LT_AC_LANG_GCJ])])\nm4_ifndef([AC_LIBTOOL_LANG_C_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])])\nm4_ifndef([_LT_AC_LANG_C_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_C_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_CXX_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])])\nm4_ifndef([_LT_AC_LANG_CXX_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_F77_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])])\nm4_ifndef([_LT_AC_LANG_F77_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_F77_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_GCJ_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])])\nm4_ifndef([_LT_AC_LANG_GCJ_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_RC_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])])\nm4_ifndef([_LT_AC_LANG_RC_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_RC_CONFIG])])\nm4_ifndef([AC_LIBTOOL_CONFIG],\t\t[AC_DEFUN([AC_LIBTOOL_CONFIG])])\nm4_ifndef([_LT_AC_FILE_LTDLL_C],\t[AC_DEFUN([_LT_AC_FILE_LTDLL_C])])\nm4_ifndef([_LT_REQUIRED_DARWIN_CHECKS],\t[AC_DEFUN([_LT_REQUIRED_DARWIN_CHECKS])])\nm4_ifndef([_LT_AC_PROG_CXXCPP],\t\t[AC_DEFUN([_LT_AC_PROG_CXXCPP])])\nm4_ifndef([_LT_PREPARE_SED_QUOTE_VARS],\t[AC_DEFUN([_LT_PREPARE_SED_QUOTE_VARS])])\nm4_ifndef([_LT_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_PROG_F77],\t\t[AC_DEFUN([_LT_PROG_F77])])\nm4_ifndef([_LT_PROG_FC],\t\t[AC_DEFUN([_LT_PROG_FC])])\nm4_ifndef([_LT_PROG_CXX],\t\t[AC_DEFUN([_LT_PROG_CXX])])\n\n# Copyright (C) 2002-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 8\n\n# AM_AUTOMAKE_VERSION(VERSION)\n# ----------------------------\n# Automake X.Y traces this macro to ensure aclocal.m4 has been\n# generated from the m4 files accompanying Automake X.Y.\n# (This private macro should not be called outside this file.)\nAC_DEFUN([AM_AUTOMAKE_VERSION],\n[am__api_version='1.12'\ndnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\ndnl require some minimum version.  Point them to the right macro.\nm4_if([$1], [1.12.2], [],\n      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n])\n\n# _AM_AUTOCONF_VERSION(VERSION)\n# -----------------------------\n# aclocal traces this macro to find the Autoconf version.\n# This is a private macro too.  Using m4_define simplifies\n# the logic in aclocal, which can simply ignore this definition.\nm4_define([_AM_AUTOCONF_VERSION], [])\n\n# AM_SET_CURRENT_AUTOMAKE_VERSION\n# -------------------------------\n# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\nAC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n[AM_AUTOMAKE_VERSION([1.12.2])dnl\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n\n# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n\n# Copyright (C) 2001-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 2\n\n# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n# $ac_aux_dir to '$srcdir/foo'.  In other projects, it is set to\n# '$srcdir', '$srcdir/..', or '$srcdir/../..'.\n#\n# Of course, Automake must honor this variable whenever it calls a\n# tool from the auxiliary directory.  The problem is that $srcdir (and\n# therefore $ac_aux_dir as well) can be either absolute or relative,\n# depending on how configure is run.  This is pretty annoying, since\n# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n# source directory, any form will work fine, but in subdirectories a\n# relative path needs to be adjusted first.\n#\n# $ac_aux_dir/missing\n#    fails when called from a subdirectory if $ac_aux_dir is relative\n# $top_srcdir/$ac_aux_dir/missing\n#    fails if $ac_aux_dir is absolute,\n#    fails when called from a subdirectory in a VPATH build with\n#          a relative $ac_aux_dir\n#\n# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n# are both prefixed by $srcdir.  In an in-source build this is usually\n# harmless because $srcdir is '.', but things will broke when you\n# start a VPATH build or use an absolute $srcdir.\n#\n# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n# and then we would define $MISSING as\n#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# This will work as long as MISSING is not called from configure, because\n# unfortunately $(top_srcdir) has no meaning in configure.\n# However there are other variables, like CC, which are often used in\n# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n#\n# Another solution, used here, is to always expand $ac_aux_dir to an\n# absolute PATH.  The drawback is that using absolute paths prevent a\n# configured tree to be moved without reconfiguration.\n\nAC_DEFUN([AM_AUX_DIR_EXPAND],\n[dnl Rely on autoconf to set up CDPATH properly.\nAC_PREREQ([2.50])dnl\n# expand $ac_aux_dir to an absolute path\nam_aux_dir=`cd $ac_aux_dir && pwd`\n])\n\n# AM_CONDITIONAL                                            -*- Autoconf -*-\n\n# Copyright (C) 1997-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 10\n\n# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n# -------------------------------------\n# Define a conditional.\nAC_DEFUN([AM_CONDITIONAL],\n[AC_PREREQ([2.52])dnl\n m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\nAC_SUBST([$1_TRUE])dnl\nAC_SUBST([$1_FALSE])dnl\n_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n_AM_SUBST_NOTMAKE([$1_FALSE])dnl\nm4_define([_AM_COND_VALUE_$1], [$2])dnl\nif $2; then\n  $1_TRUE=\n  $1_FALSE='#'\nelse\n  $1_TRUE='#'\n  $1_FALSE=\nfi\nAC_CONFIG_COMMANDS_PRE(\n[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n  AC_MSG_ERROR([[conditional \"$1\" was never defined.\nUsually this means the macro was only invoked conditionally.]])\nfi])])\n\n# Copyright (C) 1999-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 17\n\n# There are a few dirty hacks below to avoid letting 'AC_PROG_CC' be\n# written in clear, in which case automake, when reading aclocal.m4,\n# will think it sees a *use*, and therefore will trigger all it's\n# C support machinery.  Also note that it means that autoscan, seeing\n# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n\n\n# _AM_DEPENDENCIES(NAME)\n# ----------------------\n# See how the compiler implements dependency checking.\n# NAME is \"CC\", \"CXX\", \"OBJC\", \"OBJCXX\", \"UPC\", or \"GJC\".\n# We try a few techniques and use that to set a single cache variable.\n#\n# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n# dependency, and given that the user is not expected to run this macro,\n# just rely on AC_PROG_CC.\nAC_DEFUN([_AM_DEPENDENCIES],\n[AC_REQUIRE([AM_SET_DEPDIR])dnl\nAC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\nAC_REQUIRE([AM_MAKE_INCLUDE])dnl\nAC_REQUIRE([AM_DEP_TRACK])dnl\n\nm4_if([$1], [CC],   [depcc=\"$CC\"   am_compiler_list=],\n      [$1], [CXX],  [depcc=\"$CXX\"  am_compiler_list=],\n      [$1], [OBJC], [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n      [$1], [OBJCXX], [depcc=\"$OBJCXX\" am_compiler_list='gcc3 gcc'],\n      [$1], [UPC],  [depcc=\"$UPC\"  am_compiler_list=],\n      [$1], [GCJ],  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n                    [depcc=\"$$1\"   am_compiler_list=])\n\nAC_CACHE_CHECK([dependency style of $depcc],\n               [am_cv_$1_dependencies_compiler_type],\n[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named 'D' -- because '-MD' means \"put the output\n  # in D\".\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_$1_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n  fi\n  am__universal=false\n  m4_case([$1], [CC],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac],\n    [CXX],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac])\n\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n      # Solaris 10 /bin/sh.\n      echo '/* dummy */' > sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle '-M -o', and we need to detect this.  Also, some Intel\n    # versions had trouble with output in subdirs.\n    am__obj=sub/conftest.${OBJEXT-o}\n    am__minus_obj=\"-o $am__obj\"\n    case $depmode in\n    gcc)\n      # This depmode causes a compiler race in universal mode.\n      test \"$am__universal\" = false || continue\n      ;;\n    nosideeffect)\n      # After this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested.\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n      # This compiler won't grok '-c -o', but also, the minuso test has\n      # not run yet.  These depmodes are late enough in the game, and\n      # so weak that their functioning should not be impacted.\n      am__obj=conftest.${OBJEXT-o}\n      am__minus_obj=\n      ;;\n    none) break ;;\n    esac\n    if depmode=$depmode \\\n       source=sub/conftest.c object=$am__obj \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_$1_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_$1_dependencies_compiler_type=none\nfi\n])\nAC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\nAM_CONDITIONAL([am__fastdep$1], [\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n])\n\n\n# AM_SET_DEPDIR\n# -------------\n# Choose a directory name for dependency files.\n# This macro is AC_REQUIREd in _AM_DEPENDENCIES.\nAC_DEFUN([AM_SET_DEPDIR],\n[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\nAC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n])\n\n\n# AM_DEP_TRACK\n# ------------\nAC_DEFUN([AM_DEP_TRACK],\n[AC_ARG_ENABLE([dependency-tracking], [dnl\nAS_HELP_STRING(\n  [--enable-dependency-tracking],\n  [do not reject slow dependency extractors])\nAS_HELP_STRING(\n  [--disable-dependency-tracking],\n  [speeds up one-time build])])\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\n  am__nodep='_no'\nfi\nAM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\nAC_SUBST([AMDEPBACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\nAC_SUBST([am__nodep])dnl\n_AM_SUBST_NOTMAKE([am__nodep])dnl\n])\n\n# Generate code to set up dependency tracking.              -*- Autoconf -*-\n\n# Copyright (C) 1999-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 6\n\n# _AM_OUTPUT_DEPENDENCY_COMMANDS\n# ------------------------------\nAC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n[{\n  # Autoconf 2.62 quotes --file arguments for eval, but not when files\n  # are listed without --file.  Let's play safe and only enable the eval\n  # if we detect the quoting.\n  case $CONFIG_FILES in\n  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n  *)   set x $CONFIG_FILES ;;\n  esac\n  shift\n  for mf\n  do\n    # Strip MF so we end up with the name of the file.\n    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n    # Check whether this is an Automake generated Makefile or not.\n    # We used to match only the files named 'Makefile.in', but\n    # some people rename them; so instead we look at the file content.\n    # Grep'ing the first line is not enough: some people post-process\n    # each Makefile.in and add a new line on top of each file to say so.\n    # Grep'ing the whole file is not good either: AIX grep has a line\n    # limit of 2048, but all sed's we know have understand at least 4000.\n    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n      dirpart=`AS_DIRNAME(\"$mf\")`\n    else\n      continue\n    fi\n    # Extract the definition of DEPDIR, am__include, and am__quote\n    # from the Makefile without running 'make'.\n    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n    test -z \"$DEPDIR\" && continue\n    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n    test -z \"am__include\" && continue\n    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n    # Find all dependency output files, they are included files with\n    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n    # simplest approach to changing $(DEPDIR) to its actual value in the\n    # expansion.\n    for file in `sed -n \"\n      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g'`; do\n      # Make sure the directory exists.\n      test -f \"$dirpart/$file\" && continue\n      fdir=`AS_DIRNAME([\"$file\"])`\n      AS_MKDIR_P([$dirpart/$fdir])\n      # echo \"creating $dirpart/$file\"\n      echo '# dummy' > \"$dirpart/$file\"\n    done\n  done\n}\n])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n\n\n# AM_OUTPUT_DEPENDENCY_COMMANDS\n# -----------------------------\n# This macro should only be invoked once -- use via AC_REQUIRE.\n#\n# This code is only required when automatic dependency tracking\n# is enabled.  FIXME.  This creates each '.P' file that we will\n# need in order to bootstrap the dependency handling code.\nAC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n[AC_CONFIG_COMMANDS([depfiles],\n     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n])\n\n# Do all the work for Automake.                             -*- Autoconf -*-\n\n# Copyright (C) 1996-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 19\n\n# This macro actually does too much.  Some checks are only needed if\n# your package does certain things.  But this isn't really a big deal.\n\n# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n# AM_INIT_AUTOMAKE([OPTIONS])\n# -----------------------------------------------\n# The call with PACKAGE and VERSION arguments is the old style\n# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n# and VERSION should now be passed to AC_INIT and removed from\n# the call to AM_INIT_AUTOMAKE.\n# We support both call styles for the transition.  After\n# the next Automake release, Autoconf can make the AC_INIT\n# arguments mandatory, and then we can depend on a new Autoconf\n# release and drop the old call support.\nAC_DEFUN([AM_INIT_AUTOMAKE],\n[AC_PREREQ([2.62])dnl\ndnl Autoconf wants to disallow AM_ names.  We explicitly allow\ndnl the ones we care about.\nm4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\nAC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\nAC_REQUIRE([AC_PROG_INSTALL])dnl\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\nAC_SUBST([CYGPATH_W])\n\n# Define the identity of the package.\ndnl Distinguish between old-style and new-style calls.\nm4_ifval([$2],\n[AC_DIAGNOSE([obsolete],\n[$0: two- and three-arguments forms are deprecated.  For more info, see:\nhttp://www.gnu.org/software/automake/manual/automake.html#Modernize-AM_INIT_AUTOMAKE-invocation])\nm4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n AC_SUBST([PACKAGE], [$1])dnl\n AC_SUBST([VERSION], [$2])],\n[_AM_SET_OPTIONS([$1])dnl\ndnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\nm4_if(\n  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),\n  [ok:ok],,\n  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n\n_AM_IF_OPTION([no-define],,\n[AC_DEFINE_UNQUOTED([PACKAGE], [\"$PACKAGE\"], [Name of package])\n AC_DEFINE_UNQUOTED([VERSION], [\"$VERSION\"], [Version number of package])])dnl\n\n# Some tools Automake needs.\nAC_REQUIRE([AM_SANITY_CHECK])dnl\nAC_REQUIRE([AC_ARG_PROGRAM])dnl\nAM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])\nAM_MISSING_PROG([AUTOCONF], [autoconf])\nAM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])\nAM_MISSING_PROG([AUTOHEADER], [autoheader])\nAM_MISSING_PROG([MAKEINFO], [makeinfo])\nAC_REQUIRE([AM_PROG_INSTALL_SH])dnl\nAC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl\nAC_REQUIRE([AC_PROG_MKDIR_P])dnl\n# For better backward compatibility.  To be removed once Automake 1.9.x\n# dies out for good.  For more background, see:\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>\nAC_SUBST([mkdir_p], ['$(MKDIR_P)'])\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([AC_PROG_MAKE_SET])dnl\nAC_REQUIRE([AM_SET_LEADING_DOT])dnl\n_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n\t      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n\t\t\t     [_AM_PROG_TAR([v7])])])\n_AM_IF_OPTION([no-dependencies],,\n[AC_PROVIDE_IFELSE([AC_PROG_CC],\n\t\t  [_AM_DEPENDENCIES([CC])],\n\t\t  [m4_define([AC_PROG_CC],\n\t\t\t     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_CXX],\n\t\t  [_AM_DEPENDENCIES([CXX])],\n\t\t  [m4_define([AC_PROG_CXX],\n\t\t\t     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJC],\n\t\t  [_AM_DEPENDENCIES([OBJC])],\n\t\t  [m4_define([AC_PROG_OBJC],\n\t\t\t     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl\ndnl Support for Objective C++ was only introduced in Autoconf 2.65,\ndnl but we still cater to Autoconf 2.62.\nm4_ifdef([AC_PROG_OBJCXX],\n[AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],\n\t\t  [_AM_DEPENDENCIES([OBJCXX])],\n\t\t  [m4_define([AC_PROG_OBJCXX],\n\t\t\t     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])])dnl\n])\n_AM_IF_OPTION([silent-rules], [AC_REQUIRE([AM_SILENT_RULES])])dnl\ndnl The 'parallel-tests' driver may need to know about EXEEXT, so add the\ndnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This macro\ndnl is hooked onto _AC_COMPILER_EXEEXT early, see below.\nAC_CONFIG_COMMANDS_PRE(dnl\n[m4_provide_if([_AM_COMPILER_EXEEXT],\n  [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl\n])\n\ndnl Hook into '_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not\ndnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further\ndnl mangled by Autoconf and run in a shell conditional statement.\nm4_define([_AC_COMPILER_EXEEXT],\nm4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])\n\n\n# When config.status generates a header, we must update the stamp-h file.\n# This file resides in the same directory as the config header\n# that is generated.  The stamp files are numbered to have different names.\n\n# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n# loop where config.status creates the headers, so we can generate\n# our stamp files there.\nAC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n[# Compute $1's index in $config_headers.\n_am_arg=$1\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $_am_arg | $_am_arg:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n\n# Copyright (C) 2001-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 8\n\n# AM_PROG_INSTALL_SH\n# ------------------\n# Define $install_sh.\nAC_DEFUN([AM_PROG_INSTALL_SH],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nif test x\"${install_sh}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n  *)\n    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n  esac\nfi\nAC_SUBST([install_sh])])\n\n# Copyright (C) 2003-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 2\n\n# Check whether the underlying file-system supports filenames\n# with a leading dot.  For instance MS-DOS doesn't.\nAC_DEFUN([AM_SET_LEADING_DOT],\n[rm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\nAC_SUBST([am__leading_dot])])\n\n# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n# From Jim Meyering\n\n# Copyright (C) 1996-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 7\n\n# AM_MAINTAINER_MODE([DEFAULT-MODE])\n# ----------------------------------\n# Control maintainer-specific portions of Makefiles.\n# Default is to disable them, unless 'enable' is passed literally.\n# For symmetry, 'disable' may be passed as well.  Anyway, the user\n# can override the default with the --enable/--disable switch.\nAC_DEFUN([AM_MAINTAINER_MODE],\n[m4_case(m4_default([$1], [disable]),\n       [enable], [m4_define([am_maintainer_other], [disable])],\n       [disable], [m4_define([am_maintainer_other], [enable])],\n       [m4_define([am_maintainer_other], [enable])\n        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\nAC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n  AC_ARG_ENABLE([maintainer-mode],\n    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],\n      am_maintainer_other[ make rules and dependencies not useful\n      (and sometimes confusing) to the casual installer])],\n    [USE_MAINTAINER_MODE=$enableval],\n    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n  MAINT=$MAINTAINER_MODE_TRUE\n  AC_SUBST([MAINT])dnl\n]\n)\n\nAU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n\n# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n\n# Copyright (C) 2001-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 5\n\n# AM_MAKE_INCLUDE()\n# -----------------\n# Check to see how make treats includes.\nAC_DEFUN([AM_MAKE_INCLUDE],\n[am_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo this is the am__doit target\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\nAC_MSG_CHECKING([for style of include used by $am_make])\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# Ignore all kinds of additional output from 'make'.\ncase `$am_make -s -f confmf 2> /dev/null` in #(\n*the\\ am__doit\\ target*)\n  am__include=include\n  am__quote=\n  _am_result=GNU\n  ;;\nesac\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   case `$am_make -s -f confmf 2> /dev/null` in #(\n   *the\\ am__doit\\ target*)\n     am__include=.include\n     am__quote=\"\\\"\"\n     _am_result=BSD\n     ;;\n   esac\nfi\nAC_SUBST([am__include])\nAC_SUBST([am__quote])\nAC_MSG_RESULT([$_am_result])\nrm -f confinc confmf\n])\n\n# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n\n# Copyright (C) 1997-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 7\n\n# AM_MISSING_PROG(NAME, PROGRAM)\n# ------------------------------\nAC_DEFUN([AM_MISSING_PROG],\n[AC_REQUIRE([AM_MISSING_HAS_RUN])\n$1=${$1-\"${am_missing_run}$2\"}\nAC_SUBST($1)])\n\n\n# AM_MISSING_HAS_RUN\n# ------------------\n# Define MISSING if not defined so far and test if it supports --run.\n# If it does, set am_missing_run to use it, otherwise, to nothing.\nAC_DEFUN([AM_MISSING_HAS_RUN],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([missing])dnl\nif test x\"${MISSING+set}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n  *)\n    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n  esac\nfi\n# Use eval to expand $SHELL\nif eval \"$MISSING --run true\"; then\n  am_missing_run=\"$MISSING --run \"\nelse\n  am_missing_run=\n  AC_MSG_WARN(['missing' script is too old or missing])\nfi\n])\n\n# Helper functions for option handling.                     -*- Autoconf -*-\n\n# Copyright (C) 2001-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 6\n\n# _AM_MANGLE_OPTION(NAME)\n# -----------------------\nAC_DEFUN([_AM_MANGLE_OPTION],\n[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n\n# _AM_SET_OPTION(NAME)\n# --------------------\n# Set option NAME.  Presently that only means defining a flag for this option.\nAC_DEFUN([_AM_SET_OPTION],\n[m4_define(_AM_MANGLE_OPTION([$1]), [1])])\n\n# _AM_SET_OPTIONS(OPTIONS)\n# ------------------------\n# OPTIONS is a space-separated list of Automake options.\nAC_DEFUN([_AM_SET_OPTIONS],\n[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n\n# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n# -------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nAC_DEFUN([_AM_IF_OPTION],\n[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n\n# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n\n# Copyright (C) 1996-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 9\n\n# AM_SANITY_CHECK\n# ---------------\nAC_DEFUN([AM_SANITY_CHECK],\n[AC_MSG_CHECKING([whether build environment is sane])\n# Reject unsafe characters in $srcdir or the absolute working directory\n# name.  Accept space and tab only in the latter.\nam_lf='\n'\ncase `pwd` in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]]*)\n    AC_MSG_ERROR([unsafe absolute working directory name]);;\nesac\ncase $srcdir in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]]*)\n    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;\nesac\n\n# Do 'set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   am_has_slept=no\n   for am_try in 1 2; do\n     echo \"timestamp, slept: $am_has_slept\" > conftest.file\n     set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n     if test \"$[*]\" = \"X\"; then\n\t# -L didn't work.\n\tset X `ls -t \"$srcdir/configure\" conftest.file`\n     fi\n     if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n\t&& test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n\n\t# If neither matched, then we have a broken ls.  This can happen\n\t# if, for instance, CONFIG_SHELL is bash and it inherits a\n\t# broken ls alias from the environment.  This has actually\n\t# happened.  Such a system could not be considered \"sane\".\n\tAC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\n  alias in your environment])\n     fi\n     if test \"$[2]\" = conftest.file || test $am_try -eq 2; then\n       break\n     fi\n     # Just in case.\n     sleep 1\n     am_has_slept=yes\n   done\n   test \"$[2]\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   AC_MSG_ERROR([newly created file is older than distributed files!\nCheck your system clock])\nfi\nAC_MSG_RESULT([yes])\n# If we didn't sleep, we still need to ensure time stamps of config.status and\n# generated files are strictly newer.\nam_sleep_pid=\nif grep 'slept: no' conftest.file >/dev/null 2>&1; then\n  ( sleep 1 ) &\n  am_sleep_pid=$!\nfi\nAC_CONFIG_COMMANDS_PRE(\n  [AC_MSG_CHECKING([that generated files are newer than configure])\n   if test -n \"$am_sleep_pid\"; then\n     # Hide warnings about reused PIDs.\n     wait $am_sleep_pid 2>/dev/null\n   fi\n   AC_MSG_RESULT([done])])\nrm -f conftest.file\n])\n\n# Copyright (C) 2009-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 3\n\n# AM_SILENT_RULES([DEFAULT])\n# --------------------------\n# Enable less verbose build rules; with the default set to DEFAULT\n# (\"yes\" being less verbose, \"no\" or empty being verbose).\nAC_DEFUN([AM_SILENT_RULES],\n[AC_ARG_ENABLE([silent-rules], [dnl\nAS_HELP_STRING(\n  [--enable-silent-rules],\n  [less verbose build output (undo: \"make V=1\")])\nAS_HELP_STRING(\n  [--disable-silent-rules],\n  [verbose build output (undo: \"make V=0\")])dnl\n])\ncase $enable_silent_rules in @%:@ (((\n  yes) AM_DEFAULT_VERBOSITY=0;;\n   no) AM_DEFAULT_VERBOSITY=1;;\n    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;\nesac\ndnl\ndnl A few 'make' implementations (e.g., NonStop OS and NextStep)\ndnl do not support nested variable expansions.\ndnl See automake bug#9928 and bug#10237.\nam_make=${MAKE-make}\nAC_CACHE_CHECK([whether $am_make supports nested variables],\n   [am_cv_make_support_nested_variables],\n   [if AS_ECHO([['TRUE=$(BAR$(V))\nBAR0=false\nBAR1=true\nV=1\nam__doit:\n\t@$(TRUE)\n.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then\n  am_cv_make_support_nested_variables=yes\nelse\n  am_cv_make_support_nested_variables=no\nfi])\nif test $am_cv_make_support_nested_variables = yes; then\n  dnl Using '$V' instead of '$(V)' breaks IRIX make.\n  AM_V='$(V)'\n  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nelse\n  AM_V=$AM_DEFAULT_VERBOSITY\n  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY\nfi\nAC_SUBST([AM_V])dnl\nAM_SUBST_NOTMAKE([AM_V])dnl\nAC_SUBST([AM_DEFAULT_V])dnl\nAM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl\nAC_SUBST([AM_DEFAULT_VERBOSITY])dnl\nAM_BACKSLASH='\\'\nAC_SUBST([AM_BACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl\n])\n\n# Copyright (C) 2001-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 2\n\n# AM_PROG_INSTALL_STRIP\n# ---------------------\n# One issue with vendor 'install' (even GNU) is that you can't\n# specify the program used to strip binaries.  This is especially\n# annoying in cross-compiling environments, where the build's strip\n# is unlikely to handle the host's binaries.\n# Fortunately install-sh will honor a STRIPPROG variable, so we\n# always use install-sh in \"make install-strip\", and initialize\n# STRIPPROG with the value of the STRIP variable (set by the user).\nAC_DEFUN([AM_PROG_INSTALL_STRIP],\n[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n# Installed binaries are usually stripped using 'strip' when the user\n# run \"make install-strip\".  However 'strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the 'STRIP' environment variable to overrule this program.\ndnl Don't test for $cross_compiling = yes, because it might be 'maybe'.\nif test \"$cross_compiling\" != no; then\n  AC_CHECK_TOOL([STRIP], [strip], :)\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\nAC_SUBST([INSTALL_STRIP_PROGRAM])])\n\n# Copyright (C) 2006-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 3\n\n# _AM_SUBST_NOTMAKE(VARIABLE)\n# ---------------------------\n# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n# This macro is traced by Automake.\nAC_DEFUN([_AM_SUBST_NOTMAKE])\n\n# AM_SUBST_NOTMAKE(VARIABLE)\n# --------------------------\n# Public sister of _AM_SUBST_NOTMAKE.\nAC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n\n# Check how to create a tarball.                            -*- Autoconf -*-\n\n# Copyright (C) 2004-2012 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 3\n\n# _AM_PROG_TAR(FORMAT)\n# --------------------\n# Check how to create a tarball in format FORMAT.\n# FORMAT should be one of 'v7', 'ustar', or 'pax'.\n#\n# Substitute a variable $(am__tar) that is a command\n# writing to stdout a FORMAT-tarball containing the directory\n# $tardir.\n#     tardir=directory && $(am__tar) > result.tar\n#\n# Substitute a variable $(am__untar) that extract such\n# a tarball read from stdin.\n#     $(am__untar) < result.tar\nAC_DEFUN([_AM_PROG_TAR],\n[# Always define AMTAR for backward compatibility.  Yes, it's still used\n# in the wild :-(  We should find a proper way to deprecate it ...\nAC_SUBST([AMTAR], ['$${TAR-tar}'])\nm4_if([$1], [v7],\n     [am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'],\n     [m4_case([$1], [ustar],, [pax],,\n              [m4_fatal([Unknown tar format])])\nAC_MSG_CHECKING([how to create a $1 tar archive])\n# Loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n_am_tools=${am_cv_prog_tar_$1-$_am_tools}\n# Do not fold the above two line into one, because Tru64 sh and\n# Solaris sh will not grok spaces in the rhs of '-'.\nfor _am_tool in $_am_tools\ndo\n  case $_am_tool in\n  gnutar)\n    for _am_tar in tar gnutar gtar;\n    do\n      AM_RUN_LOG([$_am_tar --version]) && break\n    done\n    am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n    am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n    am__untar=\"$_am_tar -xf -\"\n    ;;\n  plaintar)\n    # Must skip GNU tar: if it does not support --format= it doesn't create\n    # ustar tarball either.\n    (tar --version) >/dev/null 2>&1 && continue\n    am__tar='tar chf - \"$$tardir\"'\n    am__tar_='tar chf - \"$tardir\"'\n    am__untar='tar xf -'\n    ;;\n  pax)\n    am__tar='pax -L -x $1 -w \"$$tardir\"'\n    am__tar_='pax -L -x $1 -w \"$tardir\"'\n    am__untar='pax -r'\n    ;;\n  cpio)\n    am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n    am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n    am__untar='cpio -i -H $1 -d'\n    ;;\n  none)\n    am__tar=false\n    am__tar_=false\n    am__untar=false\n    ;;\n  esac\n\n  # If the value was cached, stop now.  We just wanted to have am__tar\n  # and am__untar set.\n  test -n \"${am_cv_prog_tar_$1}\" && break\n\n  # tar/untar a dummy directory, and stop if the command works\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  echo GrepMe > conftest.dir/file\n  AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n  rm -rf conftest.dir\n  if test -s conftest.tar; then\n    AM_RUN_LOG([$am__untar <conftest.tar])\n    grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n  fi\ndone\nrm -rf conftest.dir\n\nAC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\nAC_MSG_RESULT([$am_cv_prog_tar_$1])])\nAC_SUBST([am__tar])\nAC_SUBST([am__untar])\n]) # _AM_PROG_TAR\n\nm4_include([acinclude.m4])\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/dlmisc.c": "/**\n * \\file dlmisc.c\n * \\brief dynamic loader helpers\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2001\n *\n * Dynamic loader helpers\n */\n/*\n *  Dynamic loader helpers\n *  Copyright (c) 2000 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#include \"list.h\"\n#include \"local.h\"\n#ifdef HAVE_LIBPTHREAD\n#include <pthread.h>\n#endif\n\n#ifndef DOC_HIDDEN\n#ifndef PIC\nstruct snd_dlsym_link *snd_dlsym_start = NULL;\n#endif\n#endif\n\n/**\n * \\brief Opens a dynamic library - ALSA wrapper for \\c dlopen.\n * \\param name name of the library, similar to \\c dlopen.\n * \\param mode mode flags, similar to \\c dlopen.\n * \\return Library handle if successful, otherwise \\c NULL.\n *\n * This function can emulate dynamic linking for the static build of\n * the alsa-lib library. In that case, \\p name is set to \\c NULL.\n */\nvoid *snd_dlopen(const char *name, int mode)\n{\n#ifndef PIC\n\tif (name == NULL)\n\t\treturn &snd_dlsym_start;\n#else\n#ifdef HAVE_LIBDL\n\tif (name == NULL) {\n\t\tstatic const char * self = NULL;\n\t\tif (self == NULL) {\n\t\t\tDl_info dlinfo;\n\t\t\tif (dladdr(snd_dlopen, &dlinfo) > 0)\n\t\t\t\tself = dlinfo.dli_fname;\n\t\t}\n\t\tname = self;\n\t}\n#endif\n#endif\n#ifdef HAVE_LIBDL\n\t/*\n\t * Handle the plugin dir not being on the default dlopen search\n\t * path, without resorting to polluting the entire system namespace\n\t * via ld.so.conf.\n\t */\n\tvoid *handle = NULL;\n\tchar *filename;\n\n\tif (name && name[0] != '/') {\n\t\tfilename = malloc(sizeof(ALSA_PLUGIN_DIR) + 1 + strlen(name) + 1);\n\t\tstrcpy(filename, ALSA_PLUGIN_DIR);\n\t\tstrcat(filename, \"/\");\n\t\tstrcat(filename, name);\n\t\thandle = dlopen(filename, mode);\n\t\tfree(filename);\n\t}\n\tif (!handle)\n\t\thandle = dlopen(name, mode);\n\treturn handle;\n#else\n\treturn NULL;\n#endif\n}\n\n/**\n * \\brief Closes a dynamic library - ALSA wrapper for \\c dlclose.\n * \\param handle Library handle, similar to \\c dlclose.\n * \\return Zero if successful, otherwise an error code.\n *\n * This function can emulate dynamic linking for the static build of\n * the alsa-lib library.\n */\nint snd_dlclose(void *handle)\n{\n#ifndef PIC\n\tif (handle == &snd_dlsym_start)\n\t\treturn 0;\n#endif\n#ifdef HAVE_LIBDL\n\treturn dlclose(handle);\n#else\n\treturn 0;\n#endif\n}\n\n/**\n * \\brief Verifies a dynamically loaded symbol.\n * \\param handle Library handle, similar to \\c dlsym.\n * \\param name Symbol name.\n * \\param version Version of the symbol.\n * \\return Zero is successful, otherwise a negative error code.\n *\n * This function checks that the symbol with the version appended to its name\n * does exist in the library.\n */\nstatic int snd_dlsym_verify(void *handle, const char *name, const char *version)\n{\n#ifdef HAVE_LIBDL\n\tint res;\n\tchar *vname;\n\t\n\tif (handle == NULL)\n\t\treturn -EINVAL;\n\tvname = alloca(1 + strlen(name) + strlen(version) + 1);\n\tif (vname == NULL)\n\t\treturn -ENOMEM;\n\tvname[0] = '_';\n\tstrcpy(vname + 1, name);\n\tstrcat(vname, version);\n\tres = dlsym(handle, vname) == NULL ? -ENOENT : 0;\n\t// printf(\"dlsym verify: %i, vname = '%s'\\n\", res, vname);\n\tif (res < 0)\n\t\tSNDERR(\"unable to verify version for symbol %s\", name);\n\treturn res;\n#else\n\treturn 0;\n#endif\n}\n\n/**\n * \\brief Resolves a symbol from a dynamic library - ALSA wrapper for \\c dlsym.\n * \\param handle Library handle, similar to \\c dlsym.\n * \\param name Symbol name.\n * \\param version Version of the symbol.\n *\n * This function can emulate dynamic linking for the static build of\n * the alsa-lib library.\n *\n * This special version of the \\c dlsym function checks also the version\n * of the symbol. A versioned symbol should be defined using the\n * #SND_DLSYM_BUILD_VERSION macro.\n */\nvoid *snd_dlsym(void *handle, const char *name, const char *version)\n{\n\tint err;\n\n#ifndef PIC\n\tif (handle == &snd_dlsym_start) {\n\t\t/* it's the funny part: */\n\t\t/* we are looking for a symbol in a static library */\n\t\tstruct snd_dlsym_link *link = snd_dlsym_start;\n\t\twhile (link) {\n\t\t\tif (!strcmp(name, link->dlsym_name))\n\t\t\t\treturn (void *)link->dlsym_ptr;\n\t\t\tlink = link->next;\n\t\t}\n\t\treturn NULL;\n\t}\n#endif\n#ifdef HAVE_LIBDL\n#ifdef VERSIONED_SYMBOLS\n\tif (version) {\n\t\terr = snd_dlsym_verify(handle, name, version);\n\t\tif (err < 0)\n\t\t\treturn NULL;\n\t}\n#endif\n\treturn dlsym(handle, name);\n#else\n\treturn NULL;\n#endif\n}\n\n/*\n * dlobj cache\n */\n\n#ifndef DOC_HIDDEN\nstruct dlobj_cache {\n\tconst char *lib;\n\tconst char *name;\n\tvoid *dlobj;\n\tvoid *func;\n\tunsigned int refcnt;\n\tstruct list_head list;\n};\n\n#ifdef HAVE_LIBPTHREAD\nstatic pthread_mutex_t snd_dlobj_mutex = PTHREAD_MUTEX_INITIALIZER;\n\nstatic inline void snd_dlobj_lock(void)\n{\n\tpthread_mutex_lock(&snd_dlobj_mutex);\n}\n\nstatic inline void snd_dlobj_unlock(void)\n{\n\tpthread_mutex_unlock(&snd_dlobj_mutex);\n}\n#else\nstatic inline void snd_dlobj_lock(void) {}\nstatic inline void snd_dlobj_unlock(void) {}\n#endif\n\nstatic LIST_HEAD(pcm_dlobj_list);\n\nvoid *snd_dlobj_cache_get(const char *lib, const char *name,\n\t\t\t  const char *version, int verbose)\n{\n\tstruct list_head *p;\n\tstruct dlobj_cache *c;\n\tvoid *func, *dlobj;\n\n\tsnd_dlobj_lock();\n\tlist_for_each(p, &pcm_dlobj_list) {\n\t\tc = list_entry(p, struct dlobj_cache, list);\n\t\tif (c->lib && lib && strcmp(c->lib, lib) != 0)\n\t\t\tcontinue;\n\t\tif (!c->lib && lib)\n\t\t\tcontinue;\n\t\tif (!lib && c->lib)\n\t\t\tcontinue;\n\t\tif (strcmp(c->name, name) == 0) {\n\t\t\tc->refcnt++;\n\t\t\tfunc = c->func;\n\t\t\tsnd_dlobj_unlock();\n\t\t\treturn func;\n\t\t}\n\t}\n\n\tdlobj = snd_dlopen(lib, RTLD_NOW);\n\tif (dlobj == NULL) {\n\t\tif (verbose)\n\t\t\tSNDERR(\"Cannot open shared library %s\",\n\t\t\t\t\t\tlib ? lib : \"[builtin]\");\n\t\tsnd_dlobj_unlock();\n\t\treturn NULL;\n\t}\n\n\tfunc = snd_dlsym(dlobj, name, version);\n\tif (func == NULL) {\n\t\tif (verbose)\n\t\t\tSNDERR(\"symbol %s is not defined inside %s\",\n\t\t\t\t\tname, lib ? lib : \"[builtin]\");\n\t\tgoto __err;\n\t}\n\tc = malloc(sizeof(*c));\n\tif (! c)\n\t\tgoto __err;\n\tc->refcnt = 1;\n\tc->lib = lib ? strdup(lib) : NULL;\n\tc->name = strdup(name);\n\tif ((lib && ! c->lib) || ! c->name) {\n\t\tfree((void *)c->name);\n\t\tfree((void *)c->lib);\n\t\tfree(c);\n\t      __err:\n\t\tsnd_dlclose(dlobj);\n\t\tsnd_dlobj_unlock();\n\t\treturn NULL;\n\t}\n\tc->dlobj = dlobj;\n\tc->func = func;\n\tlist_add_tail(&c->list, &pcm_dlobj_list);\n\tsnd_dlobj_unlock();\n\treturn func;\n}\n\nint snd_dlobj_cache_put(void *func)\n{\n\tstruct list_head *p;\n\tstruct dlobj_cache *c;\n\tunsigned int refcnt;\n\n\tif (!func)\n\t\treturn -ENOENT;\n\n\tsnd_dlobj_lock();\n\tlist_for_each(p, &pcm_dlobj_list) {\n\t\tc = list_entry(p, struct dlobj_cache, list);\n\t\tif (c->func == func) {\n\t\t\trefcnt = c->refcnt;\n\t\t\tif (c->refcnt > 0)\n\t\t\t\tc->refcnt--;\n\t\t\tsnd_dlobj_unlock();\n\t\t\treturn refcnt == 1 ? 0 : -EINVAL;\n\t\t}\n\t}\n\tsnd_dlobj_unlock();\n\treturn -ENOENT;\n}\n\nvoid snd_dlobj_cache_cleanup(void)\n{\n\tstruct list_head *p, *npos;\n\tstruct dlobj_cache *c;\n\n\tsnd_dlobj_lock();\n\tlist_for_each_safe(p, npos, &pcm_dlobj_list) {\n\t\tc = list_entry(p, struct dlobj_cache, list);\n\t\tif (c->refcnt)\n\t\t\tcontinue;\n\t\tlist_del(p);\n\t\tsnd_dlclose(c->dlobj);\n\t\tfree((void *)c->name); /* shut up gcc warning */\n\t\tfree((void *)c->lib); /* shut up gcc warning */\n\t\tfree(c);\n\t}\n\n\tsnd_dlobj_unlock();\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/Versions.in": "ALSA_0.9 {\n  global:\n    @SYMBOL_PREFIX@snd_*;\n\n    @SYMBOL_PREFIX@_snd_*_open;\n    @SYMBOL_PREFIX@_snd_*_dlsym_*;\n    @SYMBOL_PREFIX@_snd_*_poll_descriptor;\n    @SYMBOL_PREFIX@_snd_pcm_hook_*;\n\n    @SYMBOL_PREFIX@__snd_pcm_hw_params_*;\n    @SYMBOL_PREFIX@__snd_pcm_sw_params_*;\n    @SYMBOL_PREFIX@__snd_*_dlsym_*;\n\n  local:\n    *;\n};\n\nALSA_0.9.0rc4 {\n  global:\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_access;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_access_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_access_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_format;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_format_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_format_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_subformat;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_subformat_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_subformat_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_channels;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_channels_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_channels_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_channels_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_channels_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_channels_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_rate;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_rate_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_rate_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_rate_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_rate_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_rate_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_time;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_time_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_time_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_time_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_time_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_time_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_size;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_size_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_period_size_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_size_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_size_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_period_size_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_periods;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_periods_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_periods_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_periods_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_periods_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_periods_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_time;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_time_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_time_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_time_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_time_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_time_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_size;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_size_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_buffer_size_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_size_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_size_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_buffer_size_last;\n\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_tick_time;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_tick_time_min;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_get_tick_time_max;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_tick_time_near;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_tick_time_first;\n    @SYMBOL_PREFIX@snd_pcm_hw_params_set_tick_time_last;\n\n} ALSA_0.9;\n\nALSA_0.9.0rc8 {\n  global:\n\n    @SYMBOL_PREFIX@snd_pcm_forward;\n    @SYMBOL_PREFIX@snd_pcm_status_get_trigger_htstamp;\n    @SYMBOL_PREFIX@snd_pcm_status_get_htstamp;\n\n} ALSA_0.9.0rc4;\n\nALSA_0.9.0 {\n  global:\n\n    @SYMBOL_PREFIX@snd_pcm_type_name;\n    @SYMBOL_PREFIX@snd_timer_query_info;\n    @SYMBOL_PREFIX@snd_timer_query_params;\n    @SYMBOL_PREFIX@snd_timer_query_status;\n    @SYMBOL_PREFIX@snd_timer_params_set_exclusive;\n    @SYMBOL_PREFIX@snd_timer_params_get_exclusive;\n    @SYMBOL_PREFIX@snd_timer_params_set_filter;\n    @SYMBOL_PREFIX@snd_timer_params_get_filter;\n} ALSA_0.9.0rc8;\n\nALSA_0.9.3 {\n  global:\n\n    @SYMBOL_PREFIX@snd_ctl_elem_info_get_dimensions;\n    @SYMBOL_PREFIX@snd_ctl_elem_info_get_dimension;\n} ALSA_0.9.0;\n\nALSA_0.9.5 {\n  global:\n\n    @SYMBOL_PREFIX@alsa_lisp;\n} ALSA_0.9.3;\n\nALSA_0.9.7 {\n  global:\n\n    @SYMBOL_PREFIX@alsa_lisp_*;\n} ALSA_0.9.5;\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/conf.c": "/**\n * \\file conf.c\n * \\ingroup Configuration\n * \\brief Configuration helper functions\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2000-2001\n *\n * Tree based, full nesting configuration functions.\n *\n * See the \\ref conf page for more details.\n */\n/*\n *  Configuration helper functions\n *  Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>,\n *\t\t\t  Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n/*! \\page conf Configuration files\n\n<P>Configuration files use a simple format allowing modern\ndata description like nesting and array assignments.</P>\n\n\\section conf_whitespace Whitespace\n\nWhitespace is the collective name given to spaces (blanks), horizontal and\nvertical tabs, newline characters, and comments. Whitespace can\nindicate where configuration tokens start and end, but beyond this function,\nany surplus whitespace is discarded. For example, the two sequences\n\n\\code\n  a 1 b 2\n\\endcode\n\nand\n\n\\code\n  a 1 \n     b 2\n\\endcode\n\nare lexically equivalent and parse identically to give the four tokens:\n\n\\code\na\n1\nb\n2\n\\endcode\n\nThe ASCII characters representing whitespace can occur within literal\nstrings, in which case they are protected from the normal parsing process\n(they remain as part of the string). For example:\n\n\\code\n  name \"John Smith\"\n\\endcode\n\nparses to two tokens, including the single literal-string token \"John\nSmith\".\n\n\\section conf_linesplicing Line continuation with \\\n\nA special case occurs if a newline character in a string is preceded\nby a backslash (\\). The backslash and the new line are both discarded,\nallowing two physical lines of text to be treated as one unit.\n\n\\code\n\"John \\\nSmith\"\n\\endcode\n\nis parsed as \"John Smith\".\n\n\\section conf_comments Comments\n\nA single-line comment begins with the character #. The comment can start\nat any position, and extends to the end of the line.\n\n\\code\n  a 1  # this is a comment\n\\endcode\n\n\\section conf_include Including configuration files\n\nTo include another configuration file, write the file name in angle brackets.\nThe prefix \\c confdir: will reference the global configuration directory.\n\n\\code\n</etc/alsa1.conf>\n<confdir:pcm/surround.conf>\n\\endcode\n\n\\section conf_punctuators Punctuators\n\nThe configuration punctuators (also known as separators) are:\n\n\\code\n  {} [] , ; = . ' \" new-line form-feed carriage-return whitespace\n\\endcode\n\n\\subsection conf_braces Braces\n\nOpening and closing braces { } indicate the start and end of a compound\nstatement:\n\n\\code\na {\n  b 1\n}\n\\endcode\n\n\\subsection conf_brackets Brackets\n\nOpening and closing brackets indicate a single array definition. The\nidentifiers are automatically generated starting with zero.\n\n\\code\na [\n  \"first\"\n  \"second\"\n]\n\\endcode\n\nThe above code is equal to\n\n\\code\na.0 \"first\"\na.1 \"second\"\n\\endcode\n\n\\subsection conf_comma_semicolon Comma and semicolon\n\nThe comma (,) or semicolon (;) can separate value assignments. It is not\nstrictly required to use these separators because whitespace suffices to\nseparate tokens.\n\n\\code\na 1;\nb 1,\n\\endcode\n\n\\subsection conf_equal Equal sign\n\nThe equal sign (=) can separate variable declarations from\ninitialization lists:\n\n\\code\na=1\nb=2\n\\endcode\n\nUsing equal signs is not required because whitespace suffices to separate\ntokens.\n\n\\section conf_assigns Assignments\n\nThe configuration file defines id (key) and value pairs. The id (key) can be\ncomposed from ASCII digits, characters from a to z and A to Z, and the\nunderscore (_). The value can be either a string, an integer, a real number,\nor a compound statement.\n\n\\subsection conf_single Single assignments\n\n\\code\na 1\t# is equal to\na=1\t# is equal to\na=1;\t# is equal to\na 1,\n\\endcode\n\n\\subsection conf_compound Compound assignments (definitions using braces)\n\n\\code\na {\n  b = 1\n}\na={\n  b 1,\n}\n\\endcode\n\n\\section conf_compound1 Compound assignments (one key definitions)\n\n\\code\na.b 1\na.b=1\n\\endcode\n\n\\subsection conf_array Array assignments (definitions using brackets)\n\n\\code\na [\n  \"first\"\n  \"second\"\n]\n\\endcode\n\n\\subsection conf_array1 Array assignments (one key definitions)\n\n\\code\na.0 \"first\"\na.1 \"second\"\n\\endcode\n\n\\section conf_mode Operation modes for parsing nodes\n\nBy default, the node operation mode is 'merge+create', i.e., if\na configuration node is not present a new one is created, otherwise\nthe latest assignment is merged (if possible - type checking). The\n'merge+create' operation mode is specified with the prefix character plus (+).\n\nThe operation mode 'merge' merges the node with the old one (which must\nexist). Type checking is done, so strings cannot be assigned to integers\nand so on. This mode is specified with the prefix character minus (-).\n\nThe operation mode 'do not override' ignores a new configuration node\nif a configuration node with the same name exists. This mode is specified with\nthe prefix character question mark (?).\n\nThe operation mode 'override' always overrides the old configuration node\nwith new contents. This mode is specified with the prefix character\nexclamation mark (!).\n\n\\code\ndefaults.pcm.!device 1\n\\endcode\n\n\\section conf_syntax_summary Syntax summary\n\n\\code\n# Configuration file syntax\n\n# Include a new configuration file\n<filename>\n\n# Simple assignment\nname [=] value [,|;]\n\n# Compound assignment (first style)\nname [=] {\n        name1 [=] value [,|;]\n        ...\n}\n\n# Compound assignment (second style)\nname.name1 [=] value [,|;]\n\n# Array assignment (first style)\nname [\n        value0 [,|;]\n        value1 [,|;]\n        ...\n]\n\n# Array assignment (second style)\nname.0 [=] value0 [,|;]\nname.1 [=] value1 [,|;]\n\\endcode\n\n\\section conf_syntax_ref References\n\n\\ref confarg\n\\ref conffunc\n\\ref confhooks\n\n*/\n\n/*! \\page confarg Runtime arguments in configuration files\n\n<P>The ALSA library can accept runtime arguments for some configuration\nblocks. This extension is built on top of the basic configuration file\nsyntax.<P>\n\n\\section confarg_define Defining arguments\n\nArguments are defined using the id (key) \\c \\@args and array values containing\nthe string names of the arguments:\n\n\\code\n@args [ CARD ]\t# or\n@args.0 CARD\n\\endcode\n\n\\section confarg_type Defining argument types and default values\n\nAn argument's type is specified with the id (key) \\c \\@args and the argument\nname. The type and the default value are specified in the compound block:\n\n\\code\n@args.CARD {\n  type string\n  default \"abcd\"\n}\n\\endcode\n\n\\section confarg_refer Referring to arguments\n\nArguments are referred to with a dollar-sign ($) and the name of the argument:\n\n\\code\n  card $CARD\n\\endcode\n\n\\section confarg_usage Usage\n\nTo use a block with arguments, write the argument values after the key,\nseparated with a colon (:). For example, all these names for PCM interfaces\ngive the same result:\n\n\\code\nhw:0,1\nhw:CARD=0,DEV=1\nhw:{CARD 0 DEV 1}\nplug:\"hw:0,1\"\nplug:{SLAVE=\"hw:{CARD 0 DEV 1}\"}\n\\endcode\n\nAs you see, arguments can be specified in their proper order or by name.\nNote that arguments enclosed in braces are parsed in the same way as in\nconfiguration files, but using the override method by default.\n\n\\section confarg_example Example\n\n\\code\npcm.demo {\n\t@args [ CARD DEVICE ]\n\t@args.CARD {\n\t\ttype string\n\t\tdefault \"supersonic\"\n\t}\n\t@args.DEVICE {\n\t\ttype integer\n\t\tdefault 0\n\t}\n\ttype hw\n\tcard $CARD\n\tdevice $DEVICE\n}\n\\endcode\n\n*/\n\n/*! \\page conffunc Runtime functions in configuration files\n\n<P>The ALSA library can modify the configuration at runtime.\nSeveral built-in functions are available.</P>\n\n<P>A function is defined with the id \\c \\@func and the function name. All other\nvalues in the current compound are used as configuration for the function.\nIf the compound func.\\<function_name\\> is defined in the root node, then the\nlibrary and function from this compound configuration are used, otherwise\n'snd_func_' is prefixed to the string and code from the ALSA library is used.\nThe definition of a function looks like:</P> \n\n\\code\nfunc.remove_first_char {\n\tlib \"/usr/lib/libasoundextend.so\"\n\tfunc \"extend_remove_first_char\"\n}\n\\endcode\n\n*/\n\n/*! \\page confhooks Hooks in configuration files\n\n<P>The hook extension in the ALSA library allows expansion of configuration\nnodes at run-time. The existence of a hook is determined by the\npresence of a \\@hooks compound node.</P>\n\n<P>This example defines a hook which loads two configuration files at the\nbeginning:</P>\n\n\\code\n@hooks [\n\t{\n\t\tfunc load\n\t\tfiles [\n\t\t\t\"/etc/asound.conf\"\n\t\t\t\"~/.asoundrc\"\n\t\t]\n\t\terrors false\n\t}\n]\n\\endcode\n\n\\section confhooks_ref Function reference\n\n<UL>\n  <LI>The function load - \\c snd_config_hook_load() - loads and parses the\n      given configuration files.\n  <LI>The function load_for_all_cards - \\c snd_config_hook_load_for_all_cards() -\n      loads and parses the given configuration files for each installed sound\n      card. The driver name (the type of the sound card) is passed in the\n      private configuration node.\n</UL>\n\n*/\n\n\n#include \"local.h\"\n#include <stdarg.h>\n#include <limits.h>\n#include <sys/stat.h>\n#include <dirent.h>\n#include <locale.h>\n#ifdef HAVE_LIBPTHREAD\n#include <pthread.h>\n#endif\n\n#ifndef DOC_HIDDEN\n\n#ifdef HAVE_LIBPTHREAD\nstatic pthread_mutex_t snd_config_update_mutex;\nstatic pthread_once_t snd_config_update_mutex_once = PTHREAD_ONCE_INIT;\n#endif\n\nstruct _snd_config {\n\tchar *id;\n\tsnd_config_type_t type;\n\tint refcount; /* default = 0 */\n\tunion {\n\t\tlong integer;\n\t\tlong long integer64;\n\t\tchar *string;\n\t\tdouble real;\n\t\tconst void *ptr;\n\t\tstruct {\n\t\t\tstruct list_head fields;\n\t\t\tint join;\n\t\t} compound;\n\t} u;\n\tstruct list_head list;\n\tsnd_config_t *parent;\n\tint hop;\n};\n\nstruct filedesc {\n\tchar *name;\n\tsnd_input_t *in;\n\tunsigned int line, column;\n\tstruct filedesc *next;\n\n\t/* list of the include paths (configuration directories),\n\t * defined by <searchdir:relative-path/to/top-alsa-conf-dir>,\n\t * for searching its included files.\n\t */\n\tstruct list_head include_paths;\n};\n\n/* path to search included files */\nstruct include_path {\n\tchar *dir;\n\tstruct list_head list;\n};\n\n#define LOCAL_ERROR\t\t\t(-0x68000000)\n\n#define LOCAL_UNTERMINATED_STRING \t(LOCAL_ERROR - 0)\n#define LOCAL_UNTERMINATED_QUOTE\t(LOCAL_ERROR - 1)\n#define LOCAL_UNEXPECTED_CHAR\t\t(LOCAL_ERROR - 2)\n#define LOCAL_UNEXPECTED_EOF\t\t(LOCAL_ERROR - 3)\n\ntypedef struct {\n\tstruct filedesc *current;\n\tint unget;\n\tint ch;\n} input_t;\n\n#ifdef HAVE_LIBPTHREAD\n\nstatic void snd_config_init_mutex(void)\n{\n\tpthread_mutexattr_t attr;\n\n\tpthread_mutexattr_init(&attr);\n#ifdef HAVE_PTHREAD_MUTEX_RECURSIVE\n\tpthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);\n#endif\n\tpthread_mutex_init(&snd_config_update_mutex, &attr);\n\tpthread_mutexattr_destroy(&attr);\n}\n\nstatic inline void snd_config_lock(void)\n{\n\tpthread_once(&snd_config_update_mutex_once, snd_config_init_mutex);\n\tpthread_mutex_lock(&snd_config_update_mutex);\n}\n\nstatic inline void snd_config_unlock(void)\n{\n\tpthread_mutex_unlock(&snd_config_update_mutex);\n}\n\n#else\n\nstatic inline void snd_config_lock(void) { }\nstatic inline void snd_config_unlock(void) { }\n\n#endif\n\n/*\n * Add a diretory to the paths to search included files.\n * param fd -  File object that owns these paths to search files included by it.\n * param dir - Path of the directory to add. Allocated externally and need to\n*              be freed manually later.\n * return - Zero if successful, otherwise a negative error code.\n *\n * The direcotry should be a subdiretory of top configuration directory\n * \"/usr/share/alsa/\".\n */\nstatic int add_include_path(struct filedesc *fd, char *dir)\n{\n\tstruct include_path *path;\n\n\tpath = calloc(1, sizeof(*path));\n\tif (!path)\n\t\treturn -ENOMEM;\n\n\tpath->dir = dir;\n\tlist_add_tail(&path->list, &fd->include_paths);\n\treturn 0;\n}\n\n/*\n * Free all include paths of a file descriptor.\n * param fd - File object that owns these paths to search files included by it.\n */\nstatic void free_include_paths(struct filedesc *fd)\n{\n\tstruct list_head *pos, *npos, *base;\n\tstruct include_path *path;\n\n\tbase = &fd->include_paths;\n\tlist_for_each_safe(pos, npos, base) {\n\t\tpath = list_entry(pos, struct include_path, list);\n\t\tlist_del(&path->list);\n\t\tif (path->dir)\n\t\t\tfree(path->dir);\n\t\tfree(path);\n\t}\n}\n\n/**\n * \\brief Returns the default top-level config directory\n * \\return The top-level config directory path string\n *\n * This function returns the string of the top-level config directory path.\n * If the path is specified via the environment variable \\c ALSA_CONFIG_DIR\n * and the value is a valid path, it returns this value.  If unspecified, it\n * returns the default value, \"/usr/share/alsa\".\n */\nconst char *snd_config_topdir(void)\n{\n\tstatic char *topdir;\n\n\tif (!topdir) {\n\t\ttopdir = getenv(\"ALSA_CONFIG_DIR\");\n\t\tif (!topdir || *topdir != '/' || strlen(topdir) >= PATH_MAX)\n\t\t\ttopdir = ALSA_CONFIG_DIR;\n\t}\n\treturn topdir;\n}\n\nstatic char *_snd_config_path(const char *name)\n{\n\tconst char *root = snd_config_topdir();\n\tchar *path = malloc(strlen(root) + strlen(name) + 2);\n\tif (!path)\n\t\treturn NULL;\n\tsprintf(path, \"%s/%s\", root, name);\n\treturn path;\n}\n\n/*\n * Search and open a file, and creates a new input object reading from the file.\n * param inputp - The functions puts the pointer to the new input object\n *               at the address specified by \\p inputp.\n * param file - Name of the configuration file.\n * param include_paths - Optional, addtional directories to search the file.\n * return - Zero if successful, otherwise a negative error code.\n *\n * This function will search and open the file in the following order\n * of priority:\n * 1. directly open the file by its name;\n * 2. search for the file name in top configuration directory\n *     \"/usr/share/alsa/\";\n * 3. search for the file name in in additional configuration directories\n *     specified by users, via alsaconf syntax\n *     <searchdir:relative-path/to/user/share/alsa>;\n *     These directories should be subdirectories of /usr/share/alsa.\n */\nstatic int input_stdio_open(snd_input_t **inputp, const char *file,\n\t\t\t    struct list_head *include_paths)\n{\n\tstruct list_head *pos, *base;\n\tstruct include_path *path;\n\tchar full_path[PATH_MAX + 1];\n\tint err = 0;\n\n\terr = snd_input_stdio_open(inputp, file, \"r\");\n\tif (err == 0)\n\t\tgoto out;\n\n\tif (file[0] == '/') /* not search file with absolute path */\n\t\treturn err;\n\n\t/* search file in top configuration directory /usr/share/alsa */\n\tsnprintf(full_path, PATH_MAX, \"%s/%s\", snd_config_topdir(), file);\n\terr = snd_input_stdio_open(inputp, full_path, \"r\");\n\tif (err == 0)\n\t\tgoto out;\n\n\t/* search file in user specified include paths. These directories\n\t * are subdirectories of /usr/share/alsa.\n\t */\n\tif (include_paths) {\n\t\tbase = include_paths;\n\t\tlist_for_each(pos, base) {\n\t\t\tpath = list_entry(pos, struct include_path, list);\n\t\t\tif (!path->dir)\n\t\t\t\tcontinue;\n\n\t\t\tsnprintf(full_path, PATH_MAX, \"%s/%s\", path->dir, file);\n\t\t\terr = snd_input_stdio_open(inputp, full_path, \"r\");\n\t\t\tif (err == 0)\n\t\t\t\tgoto out;\n\t\t}\n\t}\n\nout:\n\treturn err;\n}\n\nstatic int safe_strtoll(const char *str, long long *val)\n{\n\tlong long v;\n\tint endidx;\n\tif (!*str)\n\t\treturn -EINVAL;\n\terrno = 0;\n\tif (sscanf(str, \"%lli%n\", &v, &endidx) < 1)\n\t\treturn -EINVAL;\n\tif (str[endidx])\n\t\treturn -EINVAL;\n\t*val = v;\n\treturn 0;\n}\n\nint safe_strtol(const char *str, long *val)\n{\n\tchar *end;\n\tlong v;\n\tif (!*str)\n\t\treturn -EINVAL;\n\terrno = 0;\n\tv = strtol(str, &end, 0);\n\tif (errno)\n\t\treturn -errno;\n\tif (*end)\n\t\treturn -EINVAL;\n\t*val = v;\n\treturn 0;\n}\n\nstatic int safe_strtod(const char *str, double *val)\n{\n\tchar *end;\n\tdouble v;\n#ifdef HAVE_USELOCALE\n\tlocale_t saved_locale, c_locale;\n#else\n\tchar *saved_locale;\n\tchar locstr[64]; /* enough? */\n#endif\n\tint err;\n\n\tif (!*str)\n\t\treturn -EINVAL;\n#ifdef HAVE_USELOCALE\n\tc_locale = newlocale(LC_NUMERIC_MASK, \"C\", 0);\n\tsaved_locale = uselocale(c_locale);\n#else\n\tsaved_locale = setlocale(LC_NUMERIC, NULL);\n\tif (saved_locale) {\n\t\tsnprintf(locstr, sizeof(locstr), \"%s\", saved_locale);\n\t\tsetlocale(LC_NUMERIC, \"C\");\n\t}\n#endif\n\terrno = 0;\n\tv = strtod(str, &end);\n\terr = -errno;\n#ifdef HAVE_USELOCALE\n\tif (c_locale != (locale_t)0) {\n\t\tuselocale(saved_locale);\n\t\tfreelocale(c_locale);\n\t}\n#else\n\tif (saved_locale)\n\t\tsetlocale(LC_NUMERIC, locstr);\n#endif\n\tif (err)\n\t\treturn err;\n\tif (*end)\n\t\treturn -EINVAL;\n\t*val = v;\n\treturn 0;\n}\n\nstatic int get_char(input_t *input)\n{\n\tint c;\n\tstruct filedesc *fd;\n\tif (input->unget) {\n\t\tinput->unget = 0;\n\t\treturn input->ch;\n\t}\n again:\n\tfd = input->current;\n\tc = snd_input_getc(fd->in);\n\tswitch (c) {\n\tcase '\\n':\n\t\tfd->column = 0;\n\t\tfd->line++;\n\t\tbreak;\n\tcase '\\t':\n\t\tfd->column += 8 - fd->column % 8;\n\t\tbreak;\n\tcase EOF:\n\t\tif (fd->next) {\n\t\t\tsnd_input_close(fd->in);\n\t\t\tfree(fd->name);\n\t\t\tinput->current = fd->next;\n\t\t\tfree(fd);\n\t\t\tgoto again;\n\t\t}\n\t\treturn LOCAL_UNEXPECTED_EOF;\n\tdefault:\n\t\tfd->column++;\n\t\tbreak;\n\t}\n\treturn (unsigned char)c;\n}\n\nstatic void unget_char(int c, input_t *input)\n{\n\tassert(!input->unget);\n\tinput->ch = c;\n\tinput->unget = 1;\n}\n\nstatic int get_delimstring(char **string, int delim, input_t *input);\n\nstatic int get_char_skip_comments(input_t *input)\n{\n\tint c;\n\twhile (1) {\n\t\tc = get_char(input);\n\t\tif (c == '<') {\n\t\t\tchar *str;\n\t\t\tsnd_input_t *in;\n\t\t\tstruct filedesc *fd;\n\t\t\tDIR *dirp;\n\t\t\tint err = get_delimstring(&str, '>', input);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\n\t\t\tif (!strncmp(str, \"searchdir:\", 10)) {\n\t\t\t\t/* directory to search included files */\n\t\t\t\tchar *tmp = _snd_config_path(str + 10);\n\t\t\t\tfree(str);\n\t\t\t\tif (tmp == NULL)\n\t\t\t\t\treturn -ENOMEM;\n\t\t\t\tstr = tmp;\n\n\t\t\t\tdirp = opendir(str);\n\t\t\t\tif (!dirp) {\n\t\t\t\t\tSNDERR(\"Invalid search dir %s\", str);\n\t\t\t\t\tfree(str);\n\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\t\t\t\tclosedir(dirp);\n\n\t\t\t\terr = add_include_path(input->current, str);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Cannot add search dir %s\", str);\n\t\t\t\t\tfree(str);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!strncmp(str, \"confdir:\", 8)) {\n\t\t\t\t/* file in the specified directory */\n\t\t\t\tchar *tmp = _snd_config_path(str + 8);\n\t\t\t\tfree(str);\n\t\t\t\tif (tmp == NULL)\n\t\t\t\t\treturn -ENOMEM;\n\t\t\t\tstr = tmp;\n\t\t\t\terr = snd_input_stdio_open(&in, str, \"r\");\n\t\t\t} else { /* absolute or relative file path */\n\t\t\t\terr = input_stdio_open(&in, str,\n\t\t\t\t\t\t&input->current->include_paths);\n\t\t\t}\n\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Cannot access file %s\", str);\n\t\t\t\tfree(str);\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\tfd = malloc(sizeof(*fd));\n\t\t\tif (!fd) {\n\t\t\t\tfree(str);\n\t\t\t\treturn -ENOMEM;\n\t\t\t}\n\t\t\tfd->name = str;\n\t\t\tfd->in = in;\n\t\t\tfd->next = input->current;\n\t\t\tfd->line = 1;\n\t\t\tfd->column = 0;\n\t\t\tINIT_LIST_HEAD(&fd->include_paths);\n\t\t\tinput->current = fd;\n\t\t\tcontinue;\n\t\t}\n\t\tif (c != '#')\n\t\t\tbreak;\n\t\twhile (1) {\n\t\t\tc = get_char(input);\n\t\t\tif (c < 0)\n\t\t\t\treturn c;\n\t\t\tif (c == '\\n')\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\t\n\treturn c;\n}\n\t\t\t\n\nstatic int get_nonwhite(input_t *input)\n{\n\tint c;\n\twhile (1) {\n\t\tc = get_char_skip_comments(input);\n\t\tswitch (c) {\n\t\tcase ' ':\n\t\tcase '\\f':\n\t\tcase '\\t':\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn c;\n\t\t}\n\t}\n}\n\nstatic int get_quotedchar(input_t *input)\n{\n\tint c;\n\tc = get_char(input);\n\tswitch (c) {\n\tcase 'n':\n\t\treturn '\\n';\n\tcase 't':\n\t\treturn '\\t';\n\tcase 'v':\n\t\treturn '\\v';\n\tcase 'b':\n\t\treturn '\\b';\n\tcase 'r':\n\t\treturn '\\r';\n\tcase 'f':\n\t\treturn '\\f';\n\tcase '0' ... '7':\n\t{\n\t\tint num = c - '0';\n\t\tint i = 1;\n\t\tdo {\n\t\t\tc = get_char(input);\n\t\t\tif (c < '0' || c > '7') {\n\t\t\t\tunget_char(c, input);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum = num * 8 + c - '0';\n\t\t\ti++;\n\t\t} while (i < 3);\n\t\treturn num;\n\t}\n\tdefault:\n\t\treturn c;\n\t}\n}\n\n#define LOCAL_STR_BUFSIZE\t64\nstruct local_string {\n\tchar *buf;\n\tsize_t alloc;\n\tsize_t idx;\n\tchar tmpbuf[LOCAL_STR_BUFSIZE];\n};\n\nstatic void init_local_string(struct local_string *s)\n{\n\tmemset(s, 0, sizeof(*s));\n\ts->buf = s->tmpbuf;\n\ts->alloc = LOCAL_STR_BUFSIZE;\n}\n\nstatic void free_local_string(struct local_string *s)\n{\n\tif (s->buf != s->tmpbuf)\n\t\tfree(s->buf);\n}\n\nstatic int add_char_local_string(struct local_string *s, int c)\n{\n\tif (s->idx >= s->alloc) {\n\t\tsize_t nalloc = s->alloc * 2;\n\t\tif (s->buf == s->tmpbuf) {\n\t\t\ts->buf = malloc(nalloc);\n\t\t\tif (s->buf == NULL)\n\t\t\t\treturn -ENOMEM;\n\t\t\tmemcpy(s->buf, s->tmpbuf, s->alloc);\n\t\t} else {\n\t\t\tchar *ptr = realloc(s->buf, nalloc);\n\t\t\tif (ptr == NULL)\n\t\t\t\treturn -ENOMEM;\n\t\t\ts->buf = ptr;\n\t\t}\n\t\ts->alloc = nalloc;\n\t}\n\ts->buf[s->idx++] = c;\n\treturn 0;\n}\n\nstatic char *copy_local_string(struct local_string *s)\n{\n\tchar *dst = malloc(s->idx + 1);\n\tif (dst) {\n\t\tmemcpy(dst, s->buf, s->idx);\n\t\tdst[s->idx] = '\\0';\n\t}\n\treturn dst;\n}\n\nstatic int get_freestring(char **string, int id, input_t *input)\n{\n\tstruct local_string str;\n\tint c;\n\n\tinit_local_string(&str);\n\twhile (1) {\n\t\tc = get_char(input);\n\t\tif (c < 0) {\n\t\t\tif (c == LOCAL_UNEXPECTED_EOF) {\n\t\t\t\t*string = copy_local_string(&str);\n\t\t\t\tif (! *string)\n\t\t\t\t\tc = -ENOMEM;\n\t\t\t\telse\n\t\t\t\t\tc = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tswitch (c) {\n\t\tcase '.':\n\t\t\tif (!id)\n\t\t\t\tbreak;\n\t\tcase ' ':\n\t\tcase '\\f':\n\t\tcase '\\t':\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\tcase '=':\n\t\tcase ',':\n\t\tcase ';':\n\t\tcase '{':\n\t\tcase '}':\n\t\tcase '[':\n\t\tcase ']':\n\t\tcase '\\'':\n\t\tcase '\"':\n\t\tcase '\\\\':\n\t\tcase '#':\n\t\t\t*string = copy_local_string(&str);\n\t\t\tif (! *string)\n\t\t\t\tc = -ENOMEM;\n\t\t\telse {\n\t\t\t\tunget_char(c, input);\n\t\t\t\tc = 0;\n\t\t\t}\n\t\t\tgoto _out;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tif (add_char_local_string(&str, c) < 0) {\n\t\t\tc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t}\n _out:\n\tfree_local_string(&str);\n\treturn c;\n}\n\t\t\t\nstatic int get_delimstring(char **string, int delim, input_t *input)\n{\n\tstruct local_string str;\n\tint c;\n\n\tinit_local_string(&str);\n\twhile (1) {\n\t\tc = get_char(input);\n\t\tif (c < 0)\n\t\t\tbreak;\n\t\tif (c == '\\\\') {\n\t\t\tc = get_quotedchar(input);\n\t\t\tif (c < 0)\n\t\t\t\tbreak;\n\t\t\tif (c == '\\n')\n\t\t\t\tcontinue;\n\t\t} else if (c == delim) {\n\t\t\t*string = copy_local_string(&str);\n\t\t\tif (! *string)\n\t\t\t\tc = -ENOMEM;\n\t\t\telse\n\t\t\t\tc = 0;\n\t\t\tbreak;\n\t\t}\n\t\tif (add_char_local_string(&str, c) < 0) {\n\t\t\tc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t}\n\t free_local_string(&str);\n\t return c;\n}\n\n/* Return 0 for free string, 1 for delimited string */\nstatic int get_string(char **string, int id, input_t *input)\n{\n\tint c = get_nonwhite(input), err;\n\tif (c < 0)\n\t\treturn c;\n\tswitch (c) {\n\tcase '=':\n\tcase ',':\n\tcase ';':\n\tcase '.':\n\tcase '{':\n\tcase '}':\n\tcase '[':\n\tcase ']':\n\tcase '\\\\':\n\t\treturn LOCAL_UNEXPECTED_CHAR;\n\tcase '\\'':\n\tcase '\"':\n\t\terr = get_delimstring(string, c, input);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\treturn 1;\n\tdefault:\n\t\tunget_char(c, input);\n\t\terr = get_freestring(string, id, input);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\treturn 0;\n\t}\n}\n\nstatic int _snd_config_make(snd_config_t **config, char **id, snd_config_type_t type)\n{\n\tsnd_config_t *n;\n\tassert(config);\n\tn = calloc(1, sizeof(*n));\n\tif (n == NULL) {\n\t\tif (*id) {\n\t\t\tfree(*id);\n\t\t\t*id = NULL;\n\t\t}\n\t\treturn -ENOMEM;\n\t}\n\tif (id) {\n\t\tn->id = *id;\n\t\t*id = NULL;\n\t}\n\tn->type = type;\n\tif (type == SND_CONFIG_TYPE_COMPOUND)\n\t\tINIT_LIST_HEAD(&n->u.compound.fields);\n\t*config = n;\n\treturn 0;\n}\n\t\n\nstatic int _snd_config_make_add(snd_config_t **config, char **id,\n\t\t\t\tsnd_config_type_t type, snd_config_t *parent)\n{\n\tsnd_config_t *n;\n\tint err;\n\tassert(parent->type == SND_CONFIG_TYPE_COMPOUND);\n\terr = _snd_config_make(&n, id, type);\n\tif (err < 0)\n\t\treturn err;\n\tn->parent = parent;\n\tlist_add_tail(&n->list, &parent->u.compound.fields);\n\t*config = n;\n\treturn 0;\n}\n\nstatic int _snd_config_search(snd_config_t *config, \n\t\t\t      const char *id, int len, snd_config_t **result)\n{\n\tsnd_config_iterator_t i, next;\n\tsnd_config_for_each(i, next, config) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tif (len < 0) {\n\t\t\tif (strcmp(n->id, id) != 0)\n\t\t\t\tcontinue;\n\t\t} else if (strlen(n->id) != (size_t) len ||\n\t\t\t   memcmp(n->id, id, (size_t) len) != 0)\n\t\t\t\tcontinue;\n\t\tif (result)\n\t\t\t*result = n;\n\t\treturn 0;\n\t}\n\treturn -ENOENT;\n}\n\nstatic int parse_value(snd_config_t **_n, snd_config_t *parent, input_t *input, char **id, int skip)\n{\n\tsnd_config_t *n = *_n;\n\tchar *s;\n\tint err;\n\n\terr = get_string(&s, 0, input);\n\tif (err < 0)\n\t\treturn err;\n\tif (skip) {\n\t\tfree(s);\n\t\treturn 0;\n\t}\n\tif (err == 0 && ((s[0] >= '0' && s[0] <= '9') || s[0] == '-')) {\n\t\tlong long i;\n\t\terrno = 0;\n\t\terr = safe_strtoll(s, &i);\n\t\tif (err < 0) {\n\t\t\tdouble r;\n\t\t\terr = safe_strtod(s, &r);\n\t\t\tif (err >= 0) {\n\t\t\t\tfree(s);\n\t\t\t\tif (n) {\n\t\t\t\t\tif (n->type != SND_CONFIG_TYPE_REAL) {\n\t\t\t\t\t\tSNDERR(\"%s is not a real\", *id);\n\t\t\t\t\t\treturn -EINVAL;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\terr = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_REAL, parent);\n\t\t\t\t\tif (err < 0)\n\t\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\tn->u.real = r;\n\t\t\t\t*_n = n;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tfree(s);\n\t\t\tif (n) {\n\t\t\t\tif (n->type != SND_CONFIG_TYPE_INTEGER && n->type != SND_CONFIG_TYPE_INTEGER64) {\n\t\t\t\t\tSNDERR(\"%s is not an integer\", *id);\n\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (i <= INT_MAX) \n\t\t\t\t\terr = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_INTEGER, parent);\n\t\t\t\telse\n\t\t\t\t\terr = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_INTEGER64, parent);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t}\n\t\t\tif (n->type == SND_CONFIG_TYPE_INTEGER) \n\t\t\t\tn->u.integer = (long) i;\n\t\t\telse \n\t\t\t\tn->u.integer64 = i;\n\t\t\t*_n = n;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (n) {\n\t\tif (n->type != SND_CONFIG_TYPE_STRING) {\n\t\t\tSNDERR(\"%s is not a string\", *id);\n\t\t\tfree(s);\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else {\n\t\terr = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_STRING, parent);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\tfree(n->u.string);\n\tn->u.string = s;\n\t*_n = n;\n\treturn 0;\n}\n\nstatic int parse_defs(snd_config_t *parent, input_t *input, int skip, int override);\nstatic int parse_array_defs(snd_config_t *farther, input_t *input, int skip, int override);\n\nstatic int parse_array_def(snd_config_t *parent, input_t *input, int idx, int skip, int override)\n{\n\tchar *id = NULL;\n\tint c;\n\tint err;\n\tsnd_config_t *n = NULL;\n\n\tif (!skip) {\n\t\tchar static_id[12];\n\t\tsnprintf(static_id, sizeof(static_id), \"%i\", idx);\n\t\tid = strdup(static_id);\n\t\tif (id == NULL)\n\t\t\treturn -ENOMEM;\n\t}\n\tc = get_nonwhite(input);\n\tif (c < 0) {\n\t\terr = c;\n\t\tgoto __end;\n\t}\n\tswitch (c) {\n\tcase '{':\n\tcase '[':\n\t{\n\t\tchar endchr;\n\t\tif (!skip) {\n\t\t\tif (n) {\n\t\t\t\tif (n->type != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\t\tSNDERR(\"%s is not a compound\", id);\n\t\t\t\t\terr = -EINVAL;\n\t\t\t\t\tgoto __end;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = _snd_config_make_add(&n, &id, SND_CONFIG_TYPE_COMPOUND, parent);\n\t\t\t\tif (err < 0)\n\t\t\t\t\tgoto __end;\n\t\t\t}\n\t\t}\n\t\tif (c == '{') {\n\t\t\terr = parse_defs(n, input, skip, override);\n\t\t\tendchr = '}';\n\t\t} else {\n\t\t\terr = parse_array_defs(n, input, skip, override);\n\t\t\tendchr = ']';\n\t\t}\n\t\tc = get_nonwhite(input);\n\t\tif (c < 0) {\n\t\t\terr = c;\n\t\t\tgoto __end;\n\t\t}\n\t\tif (c != endchr) {\n\t\t\tif (n)\n\t\t\t\tsnd_config_delete(n);\n\t\t\terr = LOCAL_UNEXPECTED_CHAR;\n\t\t\tgoto __end;\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\tunget_char(c, input);\n\t\terr = parse_value(&n, parent, input, &id, skip);\n\t\tif (err < 0)\n\t\t\tgoto __end;\n\t\tbreak;\n\t}\n\terr = 0;\n      __end:\n\tfree(id);\n      \treturn err;\n}\n\nstatic int parse_array_defs(snd_config_t *parent, input_t *input, int skip, int override)\n{\n\tint idx = 0;\n\twhile (1) {\n\t\tint c = get_nonwhite(input), err;\n\t\tif (c < 0)\n\t\t\treturn c;\n\t\tunget_char(c, input);\n\t\tif (c == ']')\n\t\t\treturn 0;\n\t\terr = parse_array_def(parent, input, idx++, skip, override);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\treturn 0;\n}\n\nstatic int parse_def(snd_config_t *parent, input_t *input, int skip, int override)\n{\n\tchar *id = NULL;\n\tint c;\n\tint err;\n\tsnd_config_t *n;\n\tenum {MERGE_CREATE, MERGE, OVERRIDE, DONT_OVERRIDE} mode;\n\twhile (1) {\n\t\tc = get_nonwhite(input);\n\t\tif (c < 0)\n\t\t\treturn c;\n\t\tswitch (c) {\n\t\tcase '+':\n\t\t\tmode = MERGE_CREATE;\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tmode = MERGE;\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\tmode = DONT_OVERRIDE;\n\t\t\tbreak;\n\t\tcase '!':\n\t\t\tmode = OVERRIDE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmode = !override ? MERGE_CREATE : OVERRIDE;\n\t\t\tunget_char(c, input);\n\t\t}\n\t\terr = get_string(&id, 1, input);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tc = get_nonwhite(input);\n\t\tif (c != '.')\n\t\t\tbreak;\n\t\tif (skip) {\n\t\t\tfree(id);\n\t\t\tcontinue;\n\t\t}\n\t\tif (_snd_config_search(parent, id, -1, &n) == 0) {\n\t\t\tif (mode == DONT_OVERRIDE) {\n\t\t\t\tskip = 1;\n\t\t\t\tfree(id);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (mode != OVERRIDE) {\n\t\t\t\tif (n->type != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\t\tSNDERR(\"%s is not a compound\", id);\n\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\t\t\t\tn->u.compound.join = 1;\n\t\t\t\tparent = n;\n\t\t\t\tfree(id);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsnd_config_delete(n);\n\t\t}\n\t\tif (mode == MERGE) {\n\t\t\tSNDERR(\"%s does not exists\", id);\n\t\t\terr = -ENOENT;\n\t\t\tgoto __end;\n\t\t}\n\t\terr = _snd_config_make_add(&n, &id, SND_CONFIG_TYPE_COMPOUND, parent);\n\t\tif (err < 0)\n\t\t\tgoto __end;\n\t\tn->u.compound.join = 1;\n\t\tparent = n;\n\t}\n\tif (c == '=') {\n\t\tc = get_nonwhite(input);\n\t\tif (c < 0)\n\t\t\treturn c;\n\t}\n\tif (!skip) {\n\t\tif (_snd_config_search(parent, id, -1, &n) == 0) {\n\t\t\tif (mode == DONT_OVERRIDE) {\n\t\t\t\tskip = 1;\n\t\t\t\tn = NULL;\n\t\t\t} else if (mode == OVERRIDE) {\n\t\t\t\tsnd_config_delete(n);\n\t\t\t\tn = NULL;\n\t\t\t}\n\t\t} else {\n\t\t\tn = NULL;\n\t\t\tif (mode == MERGE) {\n\t\t\t\tSNDERR(\"%s does not exists\", id);\n\t\t\t\terr = -ENOENT;\n\t\t\t\tgoto __end;\n\t\t\t}\n\t\t}\n\t}\n\tswitch (c) {\n\tcase '{':\n\tcase '[':\n\t{\n\t\tchar endchr;\n\t\tif (!skip) {\n\t\t\tif (n) {\n\t\t\t\tif (n->type != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\t\tSNDERR(\"%s is not a compound\", id);\n\t\t\t\t\terr = -EINVAL;\n\t\t\t\t\tgoto __end;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = _snd_config_make_add(&n, &id, SND_CONFIG_TYPE_COMPOUND, parent);\n\t\t\t\tif (err < 0)\n\t\t\t\t\tgoto __end;\n\t\t\t}\n\t\t}\n\t\tif (c == '{') {\n\t\t\terr = parse_defs(n, input, skip, override);\n\t\t\tendchr = '}';\n\t\t} else {\n\t\t\terr = parse_array_defs(n, input, skip, override);\n\t\t\tendchr = ']';\n\t\t}\n\t\tc = get_nonwhite(input);\n\t\tif (c != endchr) {\n\t\t\tif (n)\n\t\t\t\tsnd_config_delete(n);\n\t\t\terr = LOCAL_UNEXPECTED_CHAR;\n\t\t\tgoto __end;\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\tunget_char(c, input);\n\t\terr = parse_value(&n, parent, input, &id, skip);\n\t\tif (err < 0)\n\t\t\tgoto __end;\n\t\tbreak;\n\t}\n\tc = get_nonwhite(input);\n\tswitch (c) {\n\tcase ';':\n\tcase ',':\n\t\tbreak;\n\tdefault:\n\t\tunget_char(c, input);\n\t}\n      __end:\n\tfree(id);\n\treturn err;\n}\n\t\t\nstatic int parse_defs(snd_config_t *parent, input_t *input, int skip, int override)\n{\n\tint c, err;\n\twhile (1) {\n\t\tc = get_nonwhite(input);\n\t\tif (c < 0)\n\t\t\treturn c == LOCAL_UNEXPECTED_EOF ? 0 : c;\n\t\tunget_char(c, input);\n\t\tif (c == '}')\n\t\t\treturn 0;\n\t\terr = parse_def(parent, input, skip, override);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\treturn 0;\n}\n\nstatic void string_print(char *str, int id, snd_output_t *out)\n{\n\tunsigned char *p = (unsigned char *)str;\n\tif (!p || !*p) {\n\t\tsnd_output_puts(out, \"''\");\n\t\treturn;\n\t}\n\tif (!id) {\n\t\tswitch (*p) {\n\t\tcase '0' ... '9':\n\t\tcase '-':\n\t\t\tgoto quoted;\n\t\t}\n\t}\n loop:\n\tswitch (*p) {\n\tcase 0:\n\t\tgoto nonquoted;\n\tcase 1 ... 31:\n\tcase 127 ... 255:\n\tcase ' ':\n\tcase '=':\n\tcase ';':\n\tcase ',':\n\tcase '.':\n\tcase '{':\n\tcase '}':\n\tcase '\\'':\n\tcase '\"':\n\t\tgoto quoted;\n\tdefault:\n\t\tp++;\n\t\tgoto loop;\n\t}\n nonquoted:\n\tsnd_output_puts(out, str);\n\treturn;\n quoted:\n\tsnd_output_putc(out, '\\'');\n\tp = (unsigned char *)str;\n\twhile (*p) {\n\t\tint c;\n\t\tc = *p;\n\t\tswitch (c) {\n\t\tcase '\\n':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 'n');\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 't');\n\t\t\tbreak;\n\t\tcase '\\v':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 'v');\n\t\t\tbreak;\n\t\tcase '\\b':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 'b');\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 'r');\n\t\t\tbreak;\n\t\tcase '\\f':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, 'f');\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\t\tsnd_output_putc(out, '\\\\');\n\t\t\tsnd_output_putc(out, c);\n\t\t\tbreak;\n\t\tcase 32 ... '\\'' - 1:\n\t\tcase '\\'' + 1 ... 126:\n\t\t\tsnd_output_putc(out, c);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsnd_output_printf(out, \"\\\\%04o\", c);\n\t\t\tbreak;\n\t\t}\n\t\tp++;\n\t}\n\tsnd_output_putc(out, '\\'');\n}\n\nstatic int _snd_config_save_children(snd_config_t *config, snd_output_t *out,\n\t\t\t\t     unsigned int level, unsigned int joins);\n\nstatic int _snd_config_save_node_value(snd_config_t *n, snd_output_t *out,\n\t\t\t\t       unsigned int level)\n{\n\tint err;\n\tunsigned int k;\n\tswitch (n->type) {\n\tcase SND_CONFIG_TYPE_INTEGER:\n\t\tsnd_output_printf(out, \"%ld\", n->u.integer);\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_INTEGER64:\n\t\tsnd_output_printf(out, \"%lld\", n->u.integer64);\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_REAL:\n\t\tsnd_output_printf(out, \"%-16g\", n->u.real);\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_STRING:\n\t\tstring_print(n->u.string, 0, out);\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_POINTER:\n\t\tSNDERR(\"cannot save runtime pointer type\");\n\t\treturn -EINVAL;\n\tcase SND_CONFIG_TYPE_COMPOUND:\n\t\tsnd_output_putc(out, '{');\n\t\tsnd_output_putc(out, '\\n');\n\t\terr = _snd_config_save_children(n, out, level + 1, 0);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tfor (k = 0; k < level; ++k) {\n\t\t\tsnd_output_putc(out, '\\t');\n\t\t}\n\t\tsnd_output_putc(out, '}');\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic void id_print(snd_config_t *n, snd_output_t *out, unsigned int joins)\n{\n\tif (joins > 0) {\n\t\tassert(n->parent);\n\t\tid_print(n->parent, out, joins - 1);\n\t\tsnd_output_putc(out, '.');\n\t}\n\tstring_print(n->id, 1, out);\n}\n\nstatic int _snd_config_save_children(snd_config_t *config, snd_output_t *out,\n\t\t\t\t     unsigned int level, unsigned int joins)\n{\n\tunsigned int k;\n\tint err;\n\tsnd_config_iterator_t i, next;\n\tassert(config && out);\n\tsnd_config_for_each(i, next, config) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tif (n->type == SND_CONFIG_TYPE_COMPOUND &&\n\t\t    n->u.compound.join) {\n\t\t\terr = _snd_config_save_children(n, out, level, joins + 1);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (k = 0; k < level; ++k) {\n\t\t\tsnd_output_putc(out, '\\t');\n\t\t}\n\t\tid_print(n, out, joins);\n#if 0\n\t\tsnd_output_putc(out, ' ');\n\t\tsnd_output_putc(out, '=');\n#endif\n\t\tsnd_output_putc(out, ' ');\n\t\terr = _snd_config_save_node_value(n, out, level);\n\t\tif (err < 0)\n\t\t\treturn err;\n#if 0\n\t\tsnd_output_putc(out, ';');\n#endif\n\t\tsnd_output_putc(out, '\\n');\n\t}\n\treturn 0;\n}\n#endif\n\n\n/**\n * \\brief Substitutes one configuration node to another.\n * \\param dst Handle to the destination node.\n * \\param src Handle to the source node. Must not be the same as \\a dst.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * If both nodes are compounds, the source compound node members are\n * appended to the destination compound node.\n *\n * If the destination node is a compound and the source node is\n * an ordinary type, the compound members are deleted (including\n * their contents).\n *\n * Otherwise, the source node's value replaces the destination node's\n * value.\n *\n * In any case, a successful call to this function frees the source\n * node.\n */\nint snd_config_substitute(snd_config_t *dst, snd_config_t *src)\n{\n\tassert(dst && src);\n\tif (dst->type == SND_CONFIG_TYPE_COMPOUND &&\n\t    src->type == SND_CONFIG_TYPE_COMPOUND) {\t/* append */\n\t\tsnd_config_iterator_t i, next;\n\t\tsnd_config_for_each(i, next, src) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tn->parent = dst;\n\t\t}\n\t\tsrc->u.compound.fields.next->prev = &dst->u.compound.fields;\n\t\tsrc->u.compound.fields.prev->next = &dst->u.compound.fields;\n\t} else if (dst->type == SND_CONFIG_TYPE_COMPOUND) {\n\t\tint err;\n\t\terr = snd_config_delete_compound_members(dst);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\tfree(dst->id);\n\tdst->id = src->id;\n\tdst->type = src->type;\n\tdst->u = src->u;\n\tfree(src);\n\treturn 0;\n}\n\n/**\n * \\brief Converts an ASCII string to a configuration node type.\n * \\param[in] ascii A string containing a configuration node type.\n * \\param[out] type The node type corresponding to \\a ascii.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function recognizes at least the following node types:\n * <dl>\n * <dt>integer<dt>#SND_CONFIG_TYPE_INTEGER\n * <dt>integer64<dt>#SND_CONFIG_TYPE_INTEGER64\n * <dt>real<dt>#SND_CONFIG_TYPE_REAL\n * <dt>string<dt>#SND_CONFIG_TYPE_STRING\n * <dt>compound<dt>#SND_CONFIG_TYPE_COMPOUND\n * </dl>\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>Unknown note type in \\a type.\n * </dl>\n */\nint snd_config_get_type_ascii(const char *ascii, snd_config_type_t *type)\n{\n\tassert(ascii && type);\n\tif (!strcmp(ascii, \"integer\")) {\n\t\t*type = SND_CONFIG_TYPE_INTEGER;\n\t\treturn 0;\n\t}\n\tif (!strcmp(ascii, \"integer64\")) {\n\t\t*type = SND_CONFIG_TYPE_INTEGER64;\n\t\treturn 0;\n\t}\n\tif (!strcmp(ascii, \"real\")) {\n\t\t*type = SND_CONFIG_TYPE_REAL;\n\t\treturn 0;\n\t}\n\tif (!strcmp(ascii, \"string\")) {\n\t\t*type = SND_CONFIG_TYPE_STRING;\n\t\treturn 0;\n\t}\n\tif (!strcmp(ascii, \"compound\")) {\n\t\t*type = SND_CONFIG_TYPE_COMPOUND;\n\t\treturn 0;\n\t}\n\treturn -EINVAL;\n}\n\n/**\n * \\brief Returns the type of a configuration node.\n * \\param config Handle to the configuration node.\n * \\return The node's type.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_type_t snd_config_get_type(const snd_config_t *config)\n{\n\treturn config->type;\n}\n\n/**\n * \\brief Returns the id of a configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] id The function puts the pointer to the id string at the\n *                address specified by \\a id.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * The returned string is owned by the configuration node; the application\n * must not modify or delete it, and the string becomes invalid when the\n * node's id changes or when the node is freed.\n *\n * If the node does not have an id, \\a *id is set to \\c NULL.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_get_id(const snd_config_t *config, const char **id)\n{\n\tassert(config && id);\n\t*id = config->id;\n\treturn 0;\n}\n\n/**\n * \\brief Sets the id of a configuration node.\n * \\param config Handle to the configuration node.\n * \\param id The new node id, must not be \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function stores a copy of \\a id in the node.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EEXIST<dd>One of \\a config's siblings already has the id \\a id.\n * <dt>-EINVAL<dd>The id of a node with a parent cannot be set to \\c NULL.\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n */\nint snd_config_set_id(snd_config_t *config, const char *id)\n{\n\tsnd_config_iterator_t i, next;\n\tchar *new_id;\n\tassert(config);\n\tif (id) {\n\t\tif (config->parent) {\n\t\t\tsnd_config_for_each(i, next, config->parent) {\n\t\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\t\tif (n != config && strcmp(id, n->id) == 0)\n\t\t\t\t\treturn -EEXIST;\n\t\t\t}\n\t\t}\n\t\tnew_id = strdup(id);\n\t\tif (!new_id)\n\t\t\treturn -ENOMEM;\n\t} else {\n\t\tif (config->parent)\n\t\t\treturn -EINVAL;\n\t\tnew_id = NULL;\n\t}\n\tfree(config->id);\n\tconfig->id = new_id;\n\treturn 0;\n}\n\n/**\n * \\brief Creates a top level configuration node.\n * \\param[out] config Handle to the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * The returned node is an empty compound node without a parent and\n * without an id.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_top(snd_config_t **config)\n{\n\tassert(config);\n\treturn _snd_config_make(config, 0, SND_CONFIG_TYPE_COMPOUND);\n}\n\nstatic int snd_config_load1(snd_config_t *config, snd_input_t *in, int override)\n{\n\tint err;\n\tinput_t input;\n\tstruct filedesc *fd, *fd_next;\n\tassert(config && in);\n\tfd = malloc(sizeof(*fd));\n\tif (!fd)\n\t\treturn -ENOMEM;\n\tfd->name = NULL;\n\tfd->in = in;\n\tfd->line = 1;\n\tfd->column = 0;\n\tfd->next = NULL;\n\tINIT_LIST_HEAD(&fd->include_paths);\n\tinput.current = fd;\n\tinput.unget = 0;\n\terr = parse_defs(config, &input, 0, override);\n\tfd = input.current;\n\tif (err < 0) {\n\t\tconst char *str;\n\t\tswitch (err) {\n\t\tcase LOCAL_UNTERMINATED_STRING:\n\t\t\tstr = \"Unterminated string\";\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\tcase LOCAL_UNTERMINATED_QUOTE:\n\t\t\tstr = \"Unterminated quote\";\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\tcase LOCAL_UNEXPECTED_CHAR:\n\t\t\tstr = \"Unexpected char\";\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\tcase LOCAL_UNEXPECTED_EOF:\n\t\t\tstr = \"Unexpected end of file\";\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstr = strerror(-err);\n\t\t\tbreak;\n\t\t}\n\t\tSNDERR(\"%s:%d:%d:%s\", fd->name ? fd->name : \"_toplevel_\", fd->line, fd->column, str);\n\t\tgoto _end;\n\t}\n\tif (get_char(&input) != LOCAL_UNEXPECTED_EOF) {\n\t\tSNDERR(\"%s:%d:%d:Unexpected }\", fd->name ? fd->name : \"\", fd->line, fd->column);\n\t\terr = -EINVAL;\n\t\tgoto _end;\n\t}\n _end:\n\twhile (fd->next) {\n\t\tfd_next = fd->next;\n\t\tsnd_input_close(fd->in);\n\t\tfree(fd->name);\n\t\tfree_include_paths(fd);\n\t\tfree(fd);\n\t\tfd = fd_next;\n\t}\n\n\tfree_include_paths(fd);\n\tfree(fd);\n\treturn err;\n}\n\n/**\n * \\brief Loads a configuration tree.\n * \\param config Handle to a top level configuration node.\n * \\param in Input handle to read the configuration from.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * The definitions loaded from the input are added to \\a config, which\n * must be a compound node.\n *\n * \\par Errors:\n * Any errors encountered when parsing the input or returned by hooks or\n * functions.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_load(snd_config_t *config, snd_input_t *in)\n{\n\treturn snd_config_load1(config, in, 0);\n}\n\n/**\n * \\brief Loads a configuration tree and overrides existing configuration nodes.\n * \\param config Handle to a top level configuration node.\n * \\param in Input handle to read the configuration from.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function loads definitions from \\a in into \\a config like\n * #snd_config_load, but the default mode for input nodes is 'override'\n * (!) instead of 'merge+create' (+).\n */\nint snd_config_load_override(snd_config_t *config, snd_input_t *in)\n{\n\treturn snd_config_load1(config, in, 1);\n}\n\n/**\n * \\brief Adds a child to a compound configuration node.\n * \\param parent Handle to a compound configuration node.\n * \\param child Handle to the configuration node to be added.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function makes the node \\a child a child of the node \\a parent.\n *\n * The parent node then owns the child node, i.e., the child node gets\n * deleted together with its parent.\n *\n * \\a child must have an id.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a child does not have an id.\n * <dt>-EINVAL<dd>\\a child already has a parent.\n * <dt>-EEXIST<dd>\\a parent already contains a child node with the same\n *                id as \\a child.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_add(snd_config_t *parent, snd_config_t *child)\n{\n\tsnd_config_iterator_t i, next;\n\tassert(parent && child);\n\tif (!child->id || child->parent)\n\t\treturn -EINVAL;\n\tsnd_config_for_each(i, next, parent) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tif (strcmp(child->id, n->id) == 0)\n\t\t\treturn -EEXIST;\n\t}\n\tchild->parent = parent;\n\tlist_add_tail(&child->list, &parent->u.compound.fields);\n\treturn 0;\n}\n\n/**\n * \\brief Removes a configuration node from its tree.\n * \\param config Handle to the configuration node to be removed.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function makes \\a config a top-level node, i.e., if \\a config\n * has a parent, then \\a config is removed from the list of the parent's\n * children.\n *\n * This functions does \\e not free the removed node.\n *\n * \\sa snd_config_delete\n */\nint snd_config_remove(snd_config_t *config)\n{\n\tassert(config);\n\tif (config->parent)\n\t\tlist_del(&config->list);\n\tconfig->parent = NULL;\n\treturn 0;\n}\n\n/**\n * \\brief Frees a configuration node.\n * \\param config Handle to the configuration node to be deleted.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function frees a configuration node and all its resources.\n *\n * If the node is a child node, it is removed from the tree before being\n * deleted.\n *\n * If the node is a compound node, its descendants (the whole subtree)\n * are deleted recursively.\n *\n * The function is supposed to be called only for locally copied config\n * trees.  For the global tree, take the reference via #snd_config_update_ref\n * and free it via #snd_config_unref.\n *\n * \\par Conforming to:\n * LSB 3.2\n *\n * \\sa snd_config_remove\n */\nint snd_config_delete(snd_config_t *config)\n{\n\tassert(config);\n\tif (config->refcount > 0) {\n\t\tconfig->refcount--;\n\t\treturn 0;\n\t}\n\tswitch (config->type) {\n\tcase SND_CONFIG_TYPE_COMPOUND:\n\t{\n\t\tint err;\n\t\tstruct list_head *i;\n\t\ti = config->u.compound.fields.next;\n\t\twhile (i != &config->u.compound.fields) {\n\t\t\tstruct list_head *nexti = i->next;\n\t\t\tsnd_config_t *child = snd_config_iterator_entry(i);\n\t\t\terr = snd_config_delete(child);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\ti = nexti;\n\t\t}\n\t\tbreak;\n\t}\n\tcase SND_CONFIG_TYPE_STRING:\n\t\tfree(config->u.string);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\tif (config->parent)\n\t\tlist_del(&config->list);\n\tfree(config->id);\n\tfree(config);\n\treturn 0;\n}\n\n/**\n * \\brief Deletes the children of a node.\n * \\param config Handle to the compound configuration node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function removes and frees all children of a configuration node.\n *\n * Any compound nodes among the children of \\a config are deleted\n * recursively.\n *\n * After a successful call to this function, \\a config is an empty\n * compound node.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a compound node.\n * </dl>\n */\nint snd_config_delete_compound_members(const snd_config_t *config)\n{\n\tint err;\n\tstruct list_head *i;\n\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_COMPOUND)\n\t\treturn -EINVAL;\n\ti = config->u.compound.fields.next;\n\twhile (i != &config->u.compound.fields) {\n\t\tstruct list_head *nexti = i->next;\n\t\tsnd_config_t *child = snd_config_iterator_entry(i);\n\t\terr = snd_config_delete(child);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\ti = nexti;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Creates a configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] type The type of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions creates a new node of the specified type.\n * The new node has id \\a id, which may be \\c NULL.\n *\n * The value of the new node is zero (for numbers), or \\c NULL (for\n * strings and pointers), or empty (for compound nodes).\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n */\nint snd_config_make(snd_config_t **config, const char *id,\n\t\t    snd_config_type_t type)\n{\n\tchar *id1;\n\tassert(config);\n\tif (id) {\n\t\tid1 = strdup(id);\n\t\tif (!id1)\n\t\t\treturn -ENOMEM;\n\t} else\n\t\tid1 = NULL;\n\treturn _snd_config_make(config, &id1, type);\n}\n\n/**\n * \\brief Creates an integer configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_INTEGER and\n * with value \\c 0.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n *\n * \\sa snd_config_imake_integer\n */\nint snd_config_make_integer(snd_config_t **config, const char *id)\n{\n\treturn snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER);\n}\n\n/**\n * \\brief Creates a 64-bit-integer configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_INTEGER64\n * and with value \\c 0.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n *\n * \\sa snd_config_imake_integer64\n */\nint snd_config_make_integer64(snd_config_t **config, const char *id)\n{\n\treturn snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER64);\n}\n\n/**\n * \\brief Creates a real number configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_REAL and\n * with value \\c 0.0.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\sa snd_config_imake_real\n */\nint snd_config_make_real(snd_config_t **config, const char *id)\n{\n\treturn snd_config_make(config, id, SND_CONFIG_TYPE_REAL);\n}\n\n/**\n * \\brief Creates a string configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_STRING and\n * with value \\c NULL.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n *\n * \\sa snd_config_imake_string\n */\nint snd_config_make_string(snd_config_t **config, const char *id)\n{\n\treturn snd_config_make(config, id, SND_CONFIG_TYPE_STRING);\n}\n\n/**\n * \\brief Creates a pointer configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_POINTER and\n * with value \\c NULL.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\sa snd_config_imake_pointer\n */\nint snd_config_make_pointer(snd_config_t **config, const char *id)\n{\n\treturn snd_config_make(config, id, SND_CONFIG_TYPE_POINTER);\n}\n\n/**\n * \\brief Creates an empty compound configuration node.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] join Join flag.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new empty node of type\n * #SND_CONFIG_TYPE_COMPOUND.\n *\n * \\a join determines how the compound node's id is printed when the\n * configuration is saved to a text file.  For example, if the join flag\n * of compound node \\c a is zero, the output will look as follows:\n * \\code\n * a {\n *     b \"hello\"\n *     c 42\n * }\n * \\endcode\n * If, however, the join flag of \\c a is nonzero, its id will be joined\n * with its children's ids, like this:\n * \\code\n * a.b \"hello\"\n * a.c 42\n * \\endcode\n * An \\e empty compound node with its join flag set would result in no\n * output, i.e., after saving and reloading the configuration file, that\n * compound node would be lost.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_make_compound(snd_config_t **config, const char *id,\n\t\t\t     int join)\n{\n\tint err;\n\terr = snd_config_make(config, id, SND_CONFIG_TYPE_COMPOUND);\n\tif (err < 0)\n\t\treturn err;\n\t(*config)->u.compound.join = join;\n\treturn 0;\n}\n\n/**\n * \\brief Creates an integer configuration node with the given initial value.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] value The initial value of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_INTEGER and\n * with value \\a value.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_imake_integer(snd_config_t **config, const char *id, const long value)\n{\n\tint err;\n\t\n\terr = snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER);\n\tif (err < 0)\n\t\treturn err;\n\t(*config)->u.integer = value;\n\treturn 0;\n}\n\n/**\n * \\brief Creates a 64-bit-integer configuration node with the given initial value.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] value The initial value of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_INTEGER64\n * and with value \\a value.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_imake_integer64(snd_config_t **config, const char *id, const long long value)\n{\n\tint err;\n\t\n\terr = snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER64);\n\tif (err < 0)\n\t\treturn err;\n\t(*config)->u.integer64 = value;\n\treturn 0;\n}\n\n/**\n * \\brief Creates a real number configuration node with the given initial value.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] value The initial value of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_REAL and\n * with value \\a value.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n */\nint snd_config_imake_real(snd_config_t **config, const char *id, const double value)\n{\n\tint err;\n\t\n\terr = snd_config_make(config, id, SND_CONFIG_TYPE_REAL);\n\tif (err < 0)\n\t\treturn err;\n\t(*config)->u.real = value;\n\treturn 0;\n}\n\n/**\n * \\brief Creates a string configuration node with the given initial value.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] value The initial value of the new node.  May be \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_STRING and\n * with a copy of the string \\c value.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_imake_string(snd_config_t **config, const char *id, const char *value)\n{\n\tint err;\n\tsnd_config_t *tmp;\n\t\n\terr = snd_config_make(&tmp, id, SND_CONFIG_TYPE_STRING);\n\tif (err < 0)\n\t\treturn err;\n\tif (value) {\n\t\ttmp->u.string = strdup(value);\n\t\tif (!tmp->u.string) {\n\t\t\tsnd_config_delete(tmp);\n\t\t\treturn -ENOMEM;\n\t\t}\n\t} else {\n\t\ttmp->u.string = NULL;\n\t}\n\t*config = tmp;\n\treturn 0;\n}\n\nint snd_config_imake_safe_string(snd_config_t **config, const char *id, const char *value)\n{\n\tint err;\n\tsnd_config_t *tmp;\n\tchar *c;\n\n\terr = snd_config_make(&tmp, id, SND_CONFIG_TYPE_STRING);\n\tif (err < 0)\n\t\treturn err;\n\tif (value) {\n\t\ttmp->u.string = strdup(value);\n\t\tif (!tmp->u.string) {\n\t\t\tsnd_config_delete(tmp);\n\t\t\treturn -ENOMEM;\n\t\t}\n\n\t\tfor (c = tmp->u.string; *c; c++) {\n\t\t\tif (*c == ' ' || *c == '-' || *c == '_' ||\n\t\t\t\t(*c >= '0' && *c <= '9') ||\n\t\t\t\t(*c >= 'a' && *c <= 'z') ||\n\t\t\t\t(*c >= 'A' && *c <= 'Z'))\n\t\t\t\t\tcontinue;\n\t\t\t*c = '_';\n\t\t}\n\t} else {\n\t\ttmp->u.string = NULL;\n\t}\n\t*config = tmp;\n\treturn 0;\n}\n\n\n/**\n * \\brief Creates a pointer configuration node with the given initial value.\n * \\param[out] config The function puts the handle to the new node at\n *                    the address specified by \\a config.\n * \\param[in] id The id of the new node.\n * \\param[in] value The initial value of the new node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function creates a new node of type #SND_CONFIG_TYPE_POINTER and\n * with value \\c value.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n */\nint snd_config_imake_pointer(snd_config_t **config, const char *id, const void *value)\n{\n\tint err;\n\t\n\terr = snd_config_make(config, id, SND_CONFIG_TYPE_POINTER);\n\tif (err < 0)\n\t\treturn err;\n\t(*config)->u.ptr = value;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of an integer configuration node.\n * \\param config Handle to the configuration node.\n * \\param value The new value for the node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not an integer node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_set_integer(snd_config_t *config, long value)\n{\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_INTEGER)\n\t\treturn -EINVAL;\n\tconfig->u.integer = value;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of a 64-bit-integer configuration node.\n * \\param config Handle to the configuration node.\n * \\param value The new value for the node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a 64-bit-integer node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_set_integer64(snd_config_t *config, long long value)\n{\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_INTEGER64)\n\t\treturn -EINVAL;\n\tconfig->u.integer64 = value;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of a real-number configuration node.\n * \\param config Handle to the configuration node.\n * \\param value The new value for the node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a real-number node.\n * </dl>\n */\nint snd_config_set_real(snd_config_t *config, double value)\n{\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_REAL)\n\t\treturn -EINVAL;\n\tconfig->u.real = value;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of a string configuration node.\n * \\param config Handle to the configuration node.\n * \\param value The new value for the node.  May be \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function deletes the old string in the node and stores a copy of\n * \\a value string in the node.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a string node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_set_string(snd_config_t *config, const char *value)\n{\n\tchar *new_string;\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_STRING)\n\t\treturn -EINVAL;\n\tif (value) {\n\t\tnew_string = strdup(value);\n\t\tif (!new_string)\n\t\t\treturn -ENOMEM;\n\t} else {\n\t\tnew_string = NULL;\n\t}\n\tfree(config->u.string);\n\tconfig->u.string = new_string;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of a pointer configuration node.\n * \\param config Handle to the configuration node.\n * \\param value The new value for the node.  May be \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function does not free the old pointer in the node.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a pointer node.\n * </dl>\n */\nint snd_config_set_pointer(snd_config_t *config, const void *value)\n{\n\tassert(config);\n\tif (config->type != SND_CONFIG_TYPE_POINTER)\n\t\treturn -EINVAL;\n\tconfig->u.ptr = value;\n\treturn 0;\n}\n\n/**\n * \\brief Changes the value of a configuration node.\n * \\param config Handle to the configuration node.\n * \\param ascii The new value for the node, as an ASCII string.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function changes the node's value to a new value that is parsed\n * from the string \\a ascii.  \\a ascii must not be \\c NULL, not even for\n * a string node.\n *\n * The node's type does not change, i.e., the string must contain a\n * valid value with the same type as the node's type.  For a string\n * node, the node's new value is a copy of \\a ascii.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a number or string node.\n * <dt>-EINVAL<dd>The value in \\a ascii cannot be parsed.\n * <dt>-ERANGE<dd>The value in \\a ascii is too big for the node's type.\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_set_ascii(snd_config_t *config, const char *ascii)\n{\n\tassert(config && ascii);\n\tswitch (config->type) {\n\tcase SND_CONFIG_TYPE_INTEGER:\n\t\t{\n\t\t\tlong i;\n\t\t\tint err = safe_strtol(ascii, &i);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tconfig->u.integer = i;\n\t\t}\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_INTEGER64:\n\t\t{\n\t\t\tlong long i;\n\t\t\tint err = safe_strtoll(ascii, &i);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tconfig->u.integer64 = i;\n\t\t}\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_REAL:\n\t\t{\n\t\t\tdouble d;\n\t\t\tint err = safe_strtod(ascii, &d);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tconfig->u.real = d;\n\t\t\tbreak;\n\t\t}\n\tcase SND_CONFIG_TYPE_STRING:\n\t\t{\n\t\t\tchar *ptr = strdup(ascii);\n\t\t\tif (ptr == NULL)\n\t\t\t\treturn -ENOMEM;\n\t\t\tfree(config->u.string);\n\t\t\tconfig->u.string = ptr;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of an integer configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The node's value.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not an integer node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_get_integer(const snd_config_t *config, long *ptr)\n{\n\tassert(config && ptr);\n\tif (config->type != SND_CONFIG_TYPE_INTEGER)\n\t\treturn -EINVAL;\n\t*ptr = config->u.integer;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a 64-bit-integer configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The node's value.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a 64-bit-integer node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_get_integer64(const snd_config_t *config, long long *ptr)\n{\n\tassert(config && ptr);\n\tif (config->type != SND_CONFIG_TYPE_INTEGER64)\n\t\treturn -EINVAL;\n\t*ptr = config->u.integer64;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a real-number configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The node's value.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a real-number node.\n * </dl>\n */\nint snd_config_get_real(const snd_config_t *config, double *ptr)\n{\n\tassert(config && ptr);\n\tif (config->type != SND_CONFIG_TYPE_REAL)\n\t\treturn -EINVAL;\n\t*ptr = config->u.real;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a real or integer configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The node's value.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * If the node's type is integer or integer64, the value is converted\n * to the \\c double type on the fly.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a number node.\n * </dl>\n */\nint snd_config_get_ireal(const snd_config_t *config, double *ptr)\n{\n\tassert(config && ptr);\n\tif (config->type == SND_CONFIG_TYPE_REAL)\n\t\t*ptr = config->u.real;\n\telse if (config->type == SND_CONFIG_TYPE_INTEGER)\n\t\t*ptr = config->u.integer;\n\telse if (config->type == SND_CONFIG_TYPE_INTEGER64)\n\t\t*ptr = config->u.integer64;\n\telse\n\t\treturn -EINVAL;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a string configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The function puts the node's value at the address\n *                 specified by \\a ptr.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * The returned string is owned by the configuration node; the\n * application must not modify or delete it, and the string becomes\n * invalid when the node's value changes or when the node is freed.\n *\n * The string may be \\c NULL.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a string node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_get_string(const snd_config_t *config, const char **ptr)\n{\n\tassert(config && ptr);\n\tif (config->type != SND_CONFIG_TYPE_STRING)\n\t\treturn -EINVAL;\n\t*ptr = config->u.string;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a pointer configuration node.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ptr The function puts the node's value at the address\n *                 specified by \\a ptr.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a string node.\n * </dl>\n */\nint snd_config_get_pointer(const snd_config_t *config, const void **ptr)\n{\n\tassert(config && ptr);\n\tif (config->type != SND_CONFIG_TYPE_POINTER)\n\t\treturn -EINVAL;\n\t*ptr = config->u.ptr;\n\treturn 0;\n}\n\n/**\n * \\brief Returns the value of a configuration node as a string.\n * \\param[in] config Handle to the configuration node.\n * \\param[out] ascii The function puts the pointer to the returned\n *                   string at the address specified by \\a ascii.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function dynamically allocates the returned string.  The\n * application is responsible for deleting it with \\c free() when it is\n * no longer used.\n *\n * For a string node with \\c NULL value, the returned string is \\c NULL.\n *\n * Supported node types are #SND_CONFIG_TYPE_INTEGER,\n * #SND_CONFIG_TYPE_INTEGER64, #SND_CONFIG_TYPE_REAL, and\n * #SND_CONFIG_TYPE_STRING.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>\\a config is not a (64-bit) integer or real number or\n *                string node.\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_get_ascii(const snd_config_t *config, char **ascii)\n{\n\tassert(config && ascii);\n\tswitch (config->type) {\n\tcase SND_CONFIG_TYPE_INTEGER:\n\t\t{\n\t\t\tchar res[12];\n\t\t\tint err;\n\t\t\terr = snprintf(res, sizeof(res), \"%li\", config->u.integer);\n\t\t\tif (err < 0 || err == sizeof(res)) {\n\t\t\t\tassert(0);\n\t\t\t\treturn -ENOMEM;\n\t\t\t}\n\t\t\t*ascii = strdup(res);\n\t\t}\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_INTEGER64:\n\t\t{\n\t\t\tchar res[32];\n\t\t\tint err;\n\t\t\terr = snprintf(res, sizeof(res), \"%lli\", config->u.integer64);\n\t\t\tif (err < 0 || err == sizeof(res)) {\n\t\t\t\tassert(0);\n\t\t\t\treturn -ENOMEM;\n\t\t\t}\n\t\t\t*ascii = strdup(res);\n\t\t}\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_REAL:\n\t\t{\n\t\t\tchar res[32];\n\t\t\tint err;\n\t\t\terr = snprintf(res, sizeof(res), \"%-16g\", config->u.real);\n\t\t\tif (err < 0 || err == sizeof(res)) {\n\t\t\t\tassert(0);\n\t\t\t\treturn -ENOMEM;\n\t\t\t}\n\t\t\tif (res[0]) {\t\t/* trim the string */\n\t\t\t\tchar *ptr;\n\t\t\t\tptr = res + strlen(res) - 1;\n\t\t\t\twhile (ptr != res && *ptr == ' ')\n\t\t\t\t\tptr--;\n\t\t\t\tif (*ptr != ' ')\n\t\t\t\t\tptr++;\n\t\t\t\t*ptr = '\\0';\n\t\t\t}\n\t\t\t*ascii = strdup(res);\n\t\t}\n\t\tbreak;\n\tcase SND_CONFIG_TYPE_STRING:\n\t\tif (config->u.string)\n\t\t\t*ascii = strdup(config->u.string);\n\t\telse {\n\t\t\t*ascii = NULL;\n\t\t\treturn 0;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\tif (*ascii == NULL)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief Compares the id of a configuration node to a given string.\n * \\param config Handle to the configuration node.\n * \\param id ASCII id.\n * \\return The same value as the result of the \\c strcmp function, i.e.,\n *         less than zero if \\a config's id is lexicographically less\n *         than \\a id, zero if \\a config's id is equal to id, greater\n *         than zero otherwise.\n */\nint snd_config_test_id(const snd_config_t *config, const char *id)\n{\n\tassert(config && id);\n\tif (config->id)\n\t\treturn strcmp(config->id, id);\n\telse\n\t\treturn -1;\n}\n\n/**\n * \\brief Dumps the contents of a configuration node or tree.\n * \\param config Handle to the (root) configuration node.\n * \\param out Output handle.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function writes a textual representation of \\a config's value to\n * the output \\a out.\n *\n * \\par Errors:\n * <dl>\n * <dt>-EINVAL<dd>A node in the tree has a type that cannot be printed,\n *                i.e., #SND_CONFIG_TYPE_POINTER.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_save(snd_config_t *config, snd_output_t *out)\n{\n\tassert(config && out);\n\tif (config->type == SND_CONFIG_TYPE_COMPOUND)\n\t\treturn _snd_config_save_children(config, out, 0, 0);\n\telse\n\t\treturn _snd_config_save_node_value(config, out, 0);\n}\n\n/*\n *  *** search macros ***\n */\n\n#ifndef DOC_HIDDEN\n\n#define SND_CONFIG_SEARCH(config, key, result, extra_code) \\\n{ \\\n\tsnd_config_t *n; \\\n\tint err; \\\n\tconst char *p; \\\n\tassert(config && key); \\\n\twhile (1) { \\\n\t\tif (config->type != SND_CONFIG_TYPE_COMPOUND) \\\n\t\t\treturn -ENOENT; \\\n\t\t{ extra_code ; } \\\n\t\tp = strchr(key, '.'); \\\n\t\tif (p) { \\\n\t\t\terr = _snd_config_search(config, key, p - key, &n); \\\n\t\t\tif (err < 0) \\\n\t\t\t\treturn err; \\\n\t\t\tconfig = n; \\\n\t\t\tkey = p + 1; \\\n\t\t} else \\\n\t\t\treturn _snd_config_search(config, key, -1, result); \\\n\t} \\\n}\n\n#define SND_CONFIG_SEARCHA(root, config, key, result, fcn, extra_code) \\\n{ \\\n\tsnd_config_t *n; \\\n\tint err; \\\n\tconst char *p; \\\n\tassert(config && key); \\\n\twhile (1) { \\\n\t\tif (config->type != SND_CONFIG_TYPE_COMPOUND) { \\\n\t\t\tif (snd_config_get_string(config, &p) < 0) \\\n\t\t\t\treturn -ENOENT; \\\n\t\t\terr = fcn(root, root, p, &config); \\\n\t\t\tif (err < 0) \\\n\t\t\t\treturn err; \\\n\t\t} \\\n\t\t{ extra_code ; } \\\n\t\tp = strchr(key, '.'); \\\n\t\tif (p) { \\\n\t\t\terr = _snd_config_search(config, key, p - key, &n); \\\n\t\t\tif (err < 0) \\\n\t\t\t\treturn err; \\\n\t\t\tconfig = n; \\\n\t\t\tkey = p + 1; \\\n\t\t} else \\\n\t\t\treturn _snd_config_search(config, key, -1, result); \\\n\t} \\\n}\n\n#define SND_CONFIG_SEARCHV(config, result, fcn) \\\n{ \\\n\tsnd_config_t *n; \\\n\tva_list arg; \\\n\tassert(config); \\\n\tva_start(arg, result); \\\n\twhile (1) { \\\n\t\tconst char *k = va_arg(arg, const char *); \\\n\t\tint err; \\\n\t\tif (!k) \\\n\t\t\tbreak; \\\n\t\terr = fcn(config, k, &n); \\\n\t\tif (err < 0) \\\n\t\t\treturn err; \\\n\t\tconfig = n; \\\n\t} \\\n\tva_end(arg); \\\n\tif (result) \\\n\t\t*result = n; \\\n\treturn 0; \\\n}\n\n#define SND_CONFIG_SEARCHVA(root, config, result, fcn) \\\n{ \\\n\tsnd_config_t *n; \\\n\tva_list arg; \\\n\tassert(config); \\\n\tva_start(arg, result); \\\n\twhile (1) { \\\n\t\tconst char *k = va_arg(arg, const char *); \\\n\t\tint err; \\\n\t\tif (!k) \\\n\t\t\tbreak; \\\n\t\terr = fcn(root, config, k, &n); \\\n\t\tif (err < 0) \\\n\t\t\treturn err; \\\n\t\tconfig = n; \\\n\t} \\\n\tva_end(arg); \\\n\tif (result) \\\n\t\t*result = n; \\\n\treturn 0; \\\n}\n\n#define SND_CONFIG_SEARCH_ALIAS(config, base, key, result, fcn1, fcn2) \\\n{ \\\n\tsnd_config_t *res = NULL; \\\n\tchar *old_key; \\\n\tint err, first = 1, maxloop = 1000; \\\n\tassert(config && key); \\\n\twhile (1) { \\\n\t\told_key = strdup(key); \\\n\t\tif (old_key == NULL) { \\\n\t\t\terr = -ENOMEM; \\\n\t\t\tres = NULL; \\\n\t\t\tbreak; \\\n\t\t} \\\n\t\terr = first && base ? -EIO : fcn1(config, config, key, &res); \\\n\t\tif (err < 0) { \\\n\t\t\tif (!base) \\\n\t\t\t\tbreak; \\\n\t\t\terr = fcn2(config, config, &res, base, key, NULL); \\\n\t\t\tif (err < 0) \\\n\t\t\t\tbreak; \\\n\t\t} \\\n\t\tif (snd_config_get_string(res, &key) < 0) \\\n\t\t\tbreak; \\\n\t\tassert(key); \\\n\t\tif (!first && (strcmp(key, old_key) == 0 || maxloop <= 0)) { \\\n\t\t\tif (maxloop == 0) \\\n\t\t\t\tSNDERR(\"maximum loop count reached (circular configuration?)\"); \\\n\t\t\telse \\\n\t\t\t\tSNDERR(\"key %s refers to itself\", key); \\\n\t\t\terr = -EINVAL; \\\n\t\t\tres = NULL; \\\n\t\t\tbreak; \\\n\t\t} \\\n\t\tfree(old_key); \\\n\t\tfirst = 0; \\\n\t\tmaxloop--; \\\n\t} \\\n\tfree(old_key); \\\n\tif (!res) \\\n\t\treturn err; \\\n\tif (result) \\\n\t\t*result = res; \\\n\treturn 0; \\\n}\n\n#endif /* DOC_HIDDEN */\n\n/**\n * \\brief Searches for a node in a configuration tree.\n * \\param[in] config Handle to the root of the configuration (sub)tree to search.\n * \\param[in] key Search key: one or more node ids, separated with dots.\n * \\param[out] result When \\a result != \\c NULL, the function puts the\n *                    handle to the node found at the address specified\n *                    by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function searches for a child node of \\a config that is\n * identified by \\a key, which contains either the id of a direct child\n * node of \\a config, or a series of ids, separated with dots, where\n * each id specifies a node that is contained in the previous compound\n * node.\n *\n * In the following example, the comment after each node shows the\n * search key to find that node, assuming that \\a config is a handle to\n * the compound node with id \\c config:\n * \\code\n * config {\n *     a 42               # \"a\"\n *     b {                # \"b\"\n *         c \"cee\"        # \"b.c\"\n *         d {            # \"b.d\"\n *             e 2.71828  # \"b.d.e\"\n *         }\n *     }\n * }\n * \\endcode\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_search(snd_config_t *config, const char *key, snd_config_t **result)\n{\n\tSND_CONFIG_SEARCH(config, key, result, );\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, expanding aliases.\n * \\param[in] root Handle to the root configuration node containing\n *                 alias definitions.\n * \\param[in] config Handle to the root of the configuration (sub)tree to search.\n * \\param[in] key Search key: one or more node keys, separated with dots.\n * \\param[out] result When \\a result != \\c NULL, the function puts the\n *                    handle to the node found at the address specified\n *                    by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config like\n * #snd_config_search.  However, any compound node can also be\n * identified by an alias, which is a string node whose value is taken\n * as the id of a compound node below \\a root.\n *\n * \\a root must be a compound node.\n * \\a root and \\a config may be the same node.\n *\n * For example, with the following configuration, the call\n * \\code\n * snd_config_searcha(root, config, \"a.b.c.d\", &result);\n * \\endcode\n * would return the node with id \\c d:\n * \\code\n * config {\n *     a {\n *         b bb\n *     }\n * }\n * root {\n *     bb {\n *         c cc\n *     }\n *     cc ccc\n *     ccc {\n *         d {\n *             x \"icks\"\n *         }\n *     }\n * }\n * \\endcode\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound or string node.\n * </dl>\n */\nint snd_config_searcha(snd_config_t *root, snd_config_t *config, const char *key, snd_config_t **result)\n{\n\tSND_CONFIG_SEARCHA(root, config, key, result, snd_config_searcha, );\n}\n\n/**\n * \\brief Searches for a node in a configuration tree.\n * \\param[in] config Handle to the root of the configuration (sub)tree to search.\n * \\param[out] result When \\a result != \\c NULL, the function puts the\n *                    handle to the node found at the address specified\n *                    by \\a result.\n * \\param[in] ... One or more concatenated dot-separated search keys,\n *                terminated with \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config like\n * #snd_config_search, but the search key is the concatenation of all\n * passed search key strings.  For example, the call\n * \\code\n * snd_config_searchv(cfg, &res, \"a\", \"b.c\", \"d.e\", NULL);\n * \\endcode\n * is equivalent to the call\n * \\code\n * snd_config_search(cfg, \"a.b.c.d.e\", &res);\n * \\endcode\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in a search key does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_searchv(snd_config_t *config, snd_config_t **result, ...)\n{\n\tSND_CONFIG_SEARCHV(config, result, snd_config_search);\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, expanding aliases.\n * \\param[in] root Handle to the root configuration node containing\n *                 alias definitions.\n * \\param[in] config Handle to the root of the configuration (sub)tree to search.\n * \\param[out] result When \\a result != \\c NULL, the function puts the\n *                    handle to the node found at the address specified\n *                    by \\a result.\n * \\param[in] ... One or more concatenated dot separated search keys,\n *                terminated with \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function searches for a child node of \\a config, allowing\n * aliases, like #snd_config_searcha, but the search key is the\n * concatenation of all passed seach key strings, like with\n * #snd_config_searchv.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in a search key does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound or string node.\n * </dl>\n */\nint snd_config_searchva(snd_config_t *root, snd_config_t *config, snd_config_t **result, ...)\n{\n\tSND_CONFIG_SEARCHVA(root, config, result, snd_config_searcha);\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, expanding aliases.\n * \\param[in] config Handle to the root of the configuration (sub)tree to search.\n * \\param[in] base Search key base, or \\c NULL.\n * \\param[in] key Search key suffix.\n * \\param[out] result When \\a result != \\c NULL, the function puts the\n *                    handle to the node found at the address specified\n *                    by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config, allowing\n * aliases, like #snd_config_searcha.  However, alias definitions are\n * searched below \\a config (there is no separate \\a root parameter),\n * and \\a base specifies a seach key that identifies a compound node\n * that is used to search for an alias definitions that is not found\n * directly below \\a config and that does not contain a period.  In\n * other words, when \\c \"id\" is not found in \\a config, this function\n * also tries \\c \"base.id\".\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound or string node.\n * </dl>\n */\nint snd_config_search_alias(snd_config_t *config,\n\t\t\t    const char *base, const char *key,\n\t\t\t    snd_config_t **result)\n{\n\tSND_CONFIG_SEARCH_ALIAS(config, base, key, result,\n\t\t\t\tsnd_config_searcha, snd_config_searchva);\n}\n\nstatic int snd_config_hooks(snd_config_t *config, snd_config_t *private_data);\n\n/**\n * \\brief Searches for a node in a configuration tree and expands hooks.\n * \\param[in,out] config Handle to the root of the configuration\n *                       (sub)tree to search.\n * \\param[in] key Search key: one or more node keys, separated with dots.\n * \\param[out] result The function puts the handle to the node found at\n *                    the address specified by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config like\n * #snd_config_search, but any compound nodes to be searched that\n * contain hooks are modified by the respective hook functions.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n * Additionally, any errors encountered when parsing the hook\n * definitions or returned by the hook functions.\n */\nint snd_config_search_hooks(snd_config_t *config, const char *key, snd_config_t **result)\n{\n\tSND_CONFIG_SEARCH(config, key, result, \\\n\t\t\t\t\terr = snd_config_hooks(config, NULL); \\\n\t\t\t\t\tif (err < 0) \\\n\t\t\t\t\t\treturn err; \\\n\t\t\t );\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, expanding aliases and hooks.\n * \\param[in] root Handle to the root configuration node containing\n *                 alias definitions.\n * \\param[in,out] config Handle to the root of the configuration\n *                       (sub)tree to search.\n * \\param[in] key Search key: one or more node keys, separated with dots.\n * \\param[out] result The function puts the handle to the node found at\n *                    the address specified by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function searches for a child node of \\a config, allowing\n * aliases, like #snd_config_searcha, and expanding hooks, like\n * #snd_config_search_hooks.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n * Additionally, any errors encountered when parsing the hook\n * definitions or returned by the hook functions.\n */\nint snd_config_searcha_hooks(snd_config_t *root, snd_config_t *config, const char *key, snd_config_t **result)\n{\n\tSND_CONFIG_SEARCHA(root, config, key, result,\n\t\t\t\t\tsnd_config_searcha_hooks,\n\t\t\t\t\terr = snd_config_hooks(config, NULL); \\\n\t\t\t\t\tif (err < 0) \\\n\t\t\t\t\t\treturn err; \\\n\t\t\t );\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, expanding aliases and hooks.\n * \\param[in] root Handle to the root configuration node containing\n *                 alias definitions.\n * \\param[in,out] config Handle to the root of the configuration\n *                       (sub)tree to search.\n * \\param[out] result The function puts the handle to the node found at\n *                    the address specified by \\a result.\n * \\param[in] ... One or more concatenated dot separated search keys,\n *                terminated with \\c NULL.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function searches for a child node of \\a config, allowing\n * aliases and expanding hooks like #snd_config_searcha_hooks, but the\n * search key is the concatenation of all passed seach key strings, like\n * with #snd_config_searchv.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n * Additionally, any errors encountered when parsing the hook\n * definitions or returned by the hook functions.\n */\nint snd_config_searchva_hooks(snd_config_t *root, snd_config_t *config,\n\t\t\t      snd_config_t **result, ...)\n{\n\tSND_CONFIG_SEARCHVA(root, config, result, snd_config_searcha_hooks);\n}\n\n/**\n * \\brief Searches for a node in a configuration tree, using an alias and expanding hooks.\n * \\param[in] config Handle to the root of the configuration (sub)tree\n *                   to search.\n * \\param[in] base Search key base, or \\c NULL.\n * \\param[in] key Search key suffix.\n * \\param[out] result The function puts the handle to the node found at\n *                    the address specified by \\a result.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config, allowing\n * aliases, like #snd_config_search_alias, and expanding hooks, like\n * #snd_config_search_hooks.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n * Additionally, any errors encountered when parsing the hook\n * definitions or returned by the hook functions.\n */\nint snd_config_search_alias_hooks(snd_config_t *config,\n\t\t\t\t  const char *base, const char *key,\n\t\t\t\t  snd_config_t **result)\n{\n\tSND_CONFIG_SEARCH_ALIAS(config, base, key, result,\n\t\t\t\tsnd_config_searcha_hooks,\n\t\t\t\tsnd_config_searchva_hooks);\n}\n\n/** The name of the environment variable containing the files list for #snd_config_update. */\n#define ALSA_CONFIG_PATH_VAR \"ALSA_CONFIG_PATH\"\n\n/**\n * \\ingroup Config\n * \\brief Configuration top-level node (the global configuration).\n *\n * This variable contains a handle to the top-level configuration node,\n * as loaded from global configuration file.\n *\n * This variable is initialized or updated by #snd_config_update.\n * Functions like #snd_pcm_open (that use a device name from the global\n * configuration) automatically call #snd_config_update.  Before the\n * first call to #snd_config_update, this variable is \\c NULL.\n *\n * The global configuration files are specified in the environment\n * variable \\c ALSA_CONFIG_PATH.  If this is not set, the default value\n * is \"/usr/share/alsa/alsa.conf\".\n *\n * \\warning Whenever the configuration tree is updated, all string\n * pointers and configuration node handles previously obtained from this\n * variable may become invalid.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_t *snd_config = NULL;\n\n#ifndef DOC_HIDDEN\nstruct finfo {\n\tchar *name;\n\tdev_t dev;\n\tino_t ino;\n\ttime_t mtime;\n};\n\nstruct _snd_config_update {\n\tunsigned int count;\n\tstruct finfo *finfo;\n};\n#endif /* DOC_HIDDEN */\n\nstatic snd_config_update_t *snd_config_global_update = NULL;\n\nstatic int snd_config_hooks_call(snd_config_t *root, snd_config_t *config, snd_config_t *private_data)\n{\n\tvoid *h = NULL;\n\tsnd_config_t *c, *func_conf = NULL;\n\tchar *buf = NULL;\n\tconst char *lib = NULL, *func_name = NULL;\n\tconst char *str;\n\tint (*func)(snd_config_t *root, snd_config_t *config, snd_config_t **dst, snd_config_t *private_data) = NULL;\n\tint err;\n\n\terr = snd_config_search(config, \"func\", &c);\n\tif (err < 0) {\n\t\tSNDERR(\"Field func is missing\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(c, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for field func\");\n\t\treturn err;\n\t}\n\tassert(str);\n\terr = snd_config_search_definition(root, \"hook_func\", str, &func_conf);\n\tif (err >= 0) {\n\t\tsnd_config_iterator_t i, next;\n\t\tif (snd_config_get_type(func_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for func %s definition\", str);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, func_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id = n->id;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"func\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &func_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t}\n\t}\n\tif (!func_name) {\n\t\tint len = 16 + strlen(str) + 1;\n\t\tbuf = malloc(len);\n\t\tif (! buf) {\n\t\t\terr = -ENOMEM;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnprintf(buf, len, \"snd_config_hook_%s\", str);\n\t\tbuf[len-1] = '\\0';\n\t\tfunc_name = buf;\n\t}\n\th = snd_dlopen(lib, RTLD_NOW);\n\tfunc = h ? snd_dlsym(h, func_name, SND_DLSYM_VERSION(SND_CONFIG_DLSYM_VERSION_HOOK)) : NULL;\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", func_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n\t_err:\n\tif (func_conf)\n\t\tsnd_config_delete(func_conf);\n\tif (err >= 0) {\n\t\tsnd_config_t *nroot;\n\t\terr = func(root, config, &nroot, private_data);\n\t\tif (err < 0)\n\t\t\tSNDERR(\"function %s returned error: %s\", func_name, snd_strerror(err));\n\t\tsnd_dlclose(h);\n\t\tif (err >= 0 && nroot)\n\t\t\terr = snd_config_substitute(root, nroot);\n\t}\n\tfree(buf);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\nstatic int snd_config_hooks(snd_config_t *config, snd_config_t *private_data)\n{\n\tsnd_config_t *n;\n\tsnd_config_iterator_t i, next;\n\tint err, hit, idx = 0;\n\n\tif ((err = snd_config_search(config, \"@hooks\", &n)) < 0)\n\t\treturn 0;\n\tsnd_config_lock();\n\tsnd_config_remove(n);\n\tdo {\n\t\thit = 0;\n\t\tsnd_config_for_each(i, next, n) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id = n->id;\n\t\t\tlong i;\n\t\t\terr = safe_strtol(id, &i);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"id of field %s is not and integer\", id);\n\t\t\t\terr = -EINVAL;\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\tif (i == idx) {\n\t\t\t\terr = snd_config_hooks_call(config, n, private_data);\n\t\t\t\tif (err < 0)\n\t\t\t\t\tgoto _err;\n\t\t\t\tidx++;\n\t\t\t\thit = 1;\n\t\t\t}\n\t\t}\n\t} while (hit);\n\terr = 0;\n       _err:\n\tsnd_config_delete(n);\n\tsnd_config_unlock();\n\treturn err;\n}\n\nstatic int config_filename_filter(const struct dirent *dirent)\n{\n\tsize_t flen;\n\n\tif (dirent == NULL)\n\t\treturn 0;\n\tif (dirent->d_type == DT_DIR)\n\t\treturn 0;\n\n\tflen = strlen(dirent->d_name);\n\tif (flen <= 5)\n\t\treturn 0;\n\n\tif (strncmp(&dirent->d_name[flen-5], \".conf\", 5) == 0)\n\t\treturn 1;\n\n\treturn 0;\n}\n\nstatic int config_file_open(snd_config_t *root, const char *filename)\n{\n\tsnd_input_t *in;\n\tint err;\n\n\terr = snd_input_stdio_open(&in, filename, \"r\");\n\tif (err >= 0) {\n\t\terr = snd_config_load(root, in);\n\t\tsnd_input_close(in);\n\t\tif (err < 0)\n\t\t\tSNDERR(\"%s may be old or corrupted: consider to remove or fix it\", filename);\n\t} else\n\t\tSNDERR(\"cannot access file %s\", filename);\n\n\treturn err;\n}\n\n/**\n * \\brief Loads and parses the given configurations files.\n * \\param[in] root Handle to the root configuration node.\n * \\param[in] config Handle to the configuration node for this hook.\n * \\param[out] dst The function puts the handle to the configuration\n *                 node loaded from the file(s) at the address specified\n *                 by \\a dst.\n * \\param[in] private_data Handle to the private data configuration node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * See \\ref confhooks for an example.\n */\nint snd_config_hook_load(snd_config_t *root, snd_config_t *config, snd_config_t **dst, snd_config_t *private_data)\n{\n\tsnd_config_t *n;\n\tsnd_config_iterator_t i, next;\n\tstruct finfo *fi = NULL;\n\tint err, idx = 0, fi_count = 0, errors = 1, hit;\n\n\tassert(root && dst);\n\tif ((err = snd_config_search(config, \"errors\", &n)) >= 0) {\n\t\tchar *tmp;\n\t\terr = snd_config_get_ascii(n, &tmp);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\terrors = snd_config_get_bool_ascii(tmp);\n\t\tfree(tmp);\n\t\tif (errors < 0) {\n\t\t\tSNDERR(\"Invalid bool value in field errors\");\n\t\t\treturn errors;\n\t\t}\n\t}\n\tif ((err = snd_config_search(config, \"files\", &n)) < 0) {\n\t\tSNDERR(\"Unable to find field files in the pre-load section\");\n\t\treturn -EINVAL;\n\t}\n\tif ((err = snd_config_expand(n, root, NULL, private_data, &n)) < 0) {\n\t\tSNDERR(\"Unable to expand filenames in the pre-load section\");\n\t\treturn err;\n\t}\n\tif (snd_config_get_type(n) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"Invalid type for field filenames\");\n\t\tgoto _err;\n\t}\n\tsnd_config_for_each(i, next, n) {\n\t\tsnd_config_t *c = snd_config_iterator_entry(i);\n\t\tconst char *str;\n\t\tif ((err = snd_config_get_string(c, &str)) < 0) {\n\t\t\tSNDERR(\"Field %s is not a string\", c->id);\n\t\t\tgoto _err;\n\t\t}\n\t\tfi_count++;\n\t}\n\tfi = calloc(fi_count, sizeof(*fi));\n\tif (fi == NULL) {\n\t\terr = -ENOMEM;\n\t\tgoto _err;\n\t}\n\tdo {\n\t\thit = 0;\n\t\tsnd_config_for_each(i, next, n) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id = n->id;\n\t\t\tlong i;\n\t\t\terr = safe_strtol(id, &i);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"id of field %s is not and integer\", id);\n\t\t\t\terr = -EINVAL;\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\tif (i == idx) {\n\t\t\t\tchar *name;\n\t\t\t\tif ((err = snd_config_get_ascii(n, &name)) < 0)\n\t\t\t\t\tgoto _err;\n\t\t\t\tif ((err = snd_user_file(name, &fi[idx].name)) < 0)\n\t\t\t\t\tfi[idx].name = name;\n\t\t\t\telse\n\t\t\t\t\tfree(name);\n\t\t\t\tidx++;\n\t\t\t\thit = 1;\n\t\t\t}\n\t\t}\n\t} while (hit);\n\tfor (idx = 0; idx < fi_count; idx++) {\n\t\tstruct stat st;\n\t\tif (!errors && access(fi[idx].name, R_OK) < 0)\n\t\t\tcontinue;\n\t\tif (stat(fi[idx].name, &st) < 0) {\n\t\t\tSNDERR(\"cannot stat file/directory %s\", fi[idx].name);\n\t\t\tcontinue;\n\t\t}\n\t\tif (S_ISDIR(st.st_mode)) {\n\t\t\tstruct dirent **namelist;\n\t\t\tint n;\n\n#ifndef DOC_HIDDEN\n#if defined(_GNU_SOURCE) && !defined(__NetBSD__) && !defined(__FreeBSD__) && !defined(__sun)\n#define SORTFUNC\tversionsort\n#else\n#define SORTFUNC\talphasort\n#endif\n#endif\n\t\t\tn = scandir(fi[idx].name, &namelist, config_filename_filter, SORTFUNC);\n\t\t\tif (n > 0) {\n\t\t\t\tint j;\n\t\t\t\terr = 0;\n\t\t\t\tfor (j = 0; j < n; ++j) {\n\t\t\t\t\tif (err >= 0) {\n\t\t\t\t\t\tint sl = strlen(fi[idx].name) + strlen(namelist[j]->d_name) + 2;\n\t\t\t\t\t\tchar *filename = malloc(sl);\n\t\t\t\t\t\tsnprintf(filename, sl, \"%s/%s\", fi[idx].name, namelist[j]->d_name);\n\t\t\t\t\t\tfilename[sl-1] = '\\0';\n\n\t\t\t\t\t\terr = config_file_open(root, filename);\n\t\t\t\t\t\tfree(filename);\n\t\t\t\t\t}\n\t\t\t\t\tfree(namelist[j]);\n\t\t\t\t}\n\t\t\t\tfree(namelist);\n\t\t\t\tif (err < 0)\n\t\t\t\t\tgoto _err;\n\t\t\t}\n\t\t} else if ((err = config_file_open(root, fi[idx].name)) < 0)\n\t\t\tgoto _err;\n\t}\n\t*dst = NULL;\n\terr = 0;\n       _err:\n\tif (fi)\n\t\tfor (idx = 0; idx < fi_count; idx++)\n\t\t\tfree(fi[idx].name);\n\tfree(fi);\n\tsnd_config_delete(n);\n\treturn err;\n}\n#ifndef DOC_HIDDEN\nSND_DLSYM_BUILD_VERSION(snd_config_hook_load, SND_CONFIG_DLSYM_VERSION_HOOK);\n#endif\n\n#ifndef DOC_HIDDEN\nint snd_determine_driver(int card, char **driver);\n#endif\n\n/**\n * \\brief Loads and parses the given configurations files for each\n *        installed sound card.\n * \\param[in] root Handle to the root configuration node.\n * \\param[in] config Handle to the configuration node for this hook.\n * \\param[out] dst The function puts the handle to the configuration\n *                 node loaded from the file(s) at the address specified\n *                 by \\a dst.\n * \\param[in] private_data Handle to the private data configuration node.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This function works like #snd_config_hook_load, but the files are\n * loaded once for each sound card.  The driver name is available with\n * the \\c private_string function to customize the file name.\n */\nint snd_config_hook_load_for_all_cards(snd_config_t *root, snd_config_t *config, snd_config_t **dst, snd_config_t *private_data ATTRIBUTE_UNUSED)\n{\n\tint card = -1, err;\n\t\n\tdo {\n\t\terr = snd_card_next(&card);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tif (card >= 0) {\n\t\t\tsnd_config_t *n, *private_data = NULL;\n\t\t\tconst char *driver;\n\t\t\tchar *fdriver = NULL;\n\t\t\terr = snd_determine_driver(card, &fdriver);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tif (snd_config_search(root, fdriver, &n) >= 0) {\n\t\t\t\tif (snd_config_get_string(n, &driver) < 0)\n\t\t\t\t\tgoto __err;\n\t\t\t\tassert(driver);\n\t\t\t\twhile (1) {\n\t\t\t\t\tchar *s = strchr(driver, '.');\n\t\t\t\t\tif (s == NULL)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdriver = s + 1;\n\t\t\t\t}\n\t\t\t\tif (snd_config_search(root, driver, &n) >= 0)\n\t\t\t\t\tgoto __err;\n\t\t\t} else {\n\t\t\t\tdriver = fdriver;\n\t\t\t}\n\t\t\terr = snd_config_imake_string(&private_data, \"string\", driver);\n\t\t\tif (err < 0)\n\t\t\t\tgoto __err;\n\t\t\terr = snd_config_hook_load(root, config, &n, private_data);\n\t\t      __err:\n\t\t\tif (private_data)\n\t\t\t\tsnd_config_delete(private_data);\n\t\t\tfree(fdriver);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t}\n\t} while (card >= 0);\n\t*dst = NULL;\n\treturn 0;\n}\n#ifndef DOC_HIDDEN\nSND_DLSYM_BUILD_VERSION(snd_config_hook_load_for_all_cards, SND_CONFIG_DLSYM_VERSION_HOOK);\n#endif\n\n/** \n * \\brief Updates a configuration tree by rereading the configuration files (if needed).\n * \\param[in,out] _top Address of the handle to the top-level node.\n * \\param[in,out] _update Address of a pointer to private update information.\n * \\param[in] cfgs A list of configuration file names, delimited with ':'.\n *                 If \\p cfgs is \\c NULL, the default global\n *                 configuration file is used.\n * \\return 0 if \\a _top was up to date, 1 if the configuration files\n *         have been reread, otherwise a negative error code.\n *\n * The variables pointed to by \\a _top and \\a _update can be initialized\n * to \\c NULL before the first call to this function.  The private\n * update information holds information about all used configuration\n * files that allows this function to detects changes to them; this data\n * can be freed with #snd_config_update_free.\n *\n * The global configuration files are specified in the environment variable\n * \\c ALSA_CONFIG_PATH.\n *\n * \\warning If the configuration tree is reread, all string pointers and\n * configuration node handles previously obtained from this tree become\n * invalid.\n *\n * \\par Errors:\n * Any errors encountered when parsing the input or returned by hooks or\n * functions.\n */\nint snd_config_update_r(snd_config_t **_top, snd_config_update_t **_update, const char *cfgs)\n{\n\tint err;\n\tconst char *configs, *c;\n\tunsigned int k;\n\tsize_t l;\n\tsnd_config_update_t *local;\n\tsnd_config_update_t *update;\n\tsnd_config_t *top;\n\t\n\tassert(_top && _update);\n\ttop = *_top;\n\tupdate = *_update;\n\tconfigs = cfgs;\n\tif (!configs) {\n\t\tconfigs = getenv(ALSA_CONFIG_PATH_VAR);\n\t\tif (!configs || !*configs) {\n\t\t\tconst char *topdir = snd_config_topdir();\n\t\t\tchar *s = alloca(strlen(topdir) +\n\t\t\t\t\t strlen(\"alsa.conf\") + 2);\n\t\t\tsprintf(s, \"%s/alsa.conf\", topdir);\n\t\t\tconfigs = s;\n\t\t}\n\t}\n\tfor (k = 0, c = configs; (l = strcspn(c, \": \")) > 0; ) {\n\t\tc += l;\n\t\tk++;\n\t\tif (!*c)\n\t\t\tbreak;\n\t\tc++;\n\t}\n\tif (k == 0) {\n\t\tlocal = NULL;\n\t\tgoto _reread;\n\t}\n\tlocal = (snd_config_update_t *)calloc(1, sizeof(snd_config_update_t));\n\tif (!local)\n\t\treturn -ENOMEM;\n\tlocal->count = k;\n\tlocal->finfo = calloc(local->count, sizeof(struct finfo));\n\tif (!local->finfo) {\n\t\tfree(local);\n\t\treturn -ENOMEM;\n\t}\n\tfor (k = 0, c = configs; (l = strcspn(c, \": \")) > 0; ) {\n\t\tchar name[l + 1];\n\t\tmemcpy(name, c, l);\n\t\tname[l] = 0;\n\t\terr = snd_user_file(name, &local->finfo[k].name);\n\t\tif (err < 0)\n\t\t\tgoto _end;\n\t\tc += l;\n\t\tk++;\n\t\tif (!*c)\n\t\t\tbreak;\n\t\tc++;\n\t}\n\tfor (k = 0; k < local->count; ++k) {\n\t\tstruct stat st;\n\t\tstruct finfo *lf = &local->finfo[k];\n\t\tif (stat(lf->name, &st) >= 0) {\n\t\t\tlf->dev = st.st_dev;\n\t\t\tlf->ino = st.st_ino;\n\t\t\tlf->mtime = st.st_mtime;\n\t\t} else {\n\t\t\tSNDERR(\"Cannot access file %s\", lf->name);\n\t\t\tfree(lf->name);\n\t\t\tmemmove(&local->finfo[k], &local->finfo[k+1], sizeof(struct finfo) * (local->count - k - 1));\n\t\t\tk--;\n\t\t\tlocal->count--;\n\t\t}\n\t}\n\tif (!update)\n\t\tgoto _reread;\n\tif (local->count != update->count)\n\t\tgoto _reread;\n\tfor (k = 0; k < local->count; ++k) {\n\t\tstruct finfo *lf = &local->finfo[k];\n\t\tstruct finfo *uf = &update->finfo[k];\n\t\tif (strcmp(lf->name, uf->name) != 0 ||\n\t\t    lf->dev != uf->dev ||\n\t\t    lf->ino != uf->ino ||\n\t\t    lf->mtime != uf->mtime)\n\t\t\tgoto _reread;\n\t}\n\terr = 0;\n\n _end:\n\tif (err < 0) {\n\t\tif (top) {\n\t\t\tsnd_config_delete(top);\n\t\t\t*_top = NULL;\n\t\t}\n\t\tif (update) {\n\t\t\tsnd_config_update_free(update);\n\t\t\t*_update = NULL;\n\t\t}\n\t}\n\tif (local)\n\t\tsnd_config_update_free(local);\n\treturn err;\n\n _reread:\n \t*_top = NULL;\n \t*_update = NULL;\n \tif (update) {\n \t\tsnd_config_update_free(update);\n \t\tupdate = NULL;\n \t}\n\tif (top) {\n\t\tsnd_config_delete(top);\n\t\ttop = NULL;\n\t}\n\terr = snd_config_top(&top);\n\tif (err < 0)\n\t\tgoto _end;\n\tif (!local)\n\t\tgoto _skip;\n\tfor (k = 0; k < local->count; ++k) {\n\t\tsnd_input_t *in;\n\t\terr = snd_input_stdio_open(&in, local->finfo[k].name, \"r\");\n\t\tif (err >= 0) {\n\t\t\terr = snd_config_load(top, in);\n\t\t\tsnd_input_close(in);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"%s may be old or corrupted: consider to remove or fix it\", local->finfo[k].name);\n\t\t\t\tgoto _end;\n\t\t\t}\n\t\t} else {\n\t\t\tSNDERR(\"cannot access file %s\", local->finfo[k].name);\n\t\t}\n\t}\n _skip:\n\terr = snd_config_hooks(top, NULL);\n\tif (err < 0) {\n\t\tSNDERR(\"hooks failed, removing configuration\");\n\t\tgoto _end;\n\t}\n\t*_top = top;\n\t*_update = local;\n\treturn 1;\n}\n\n/** \n * \\brief Updates #snd_config by rereading the global configuration files (if needed).\n * \\return 0 if #snd_config was up to date, 1 if #snd_config was\n *         updated, otherwise a negative error code.\n *\n * \\warning Whenever #snd_config is updated, all string pointers and\n * configuration node handles previously obtained from it may become\n * invalid.\n * For safer operations, use #snd_config_update_ref and release the config\n * via #snd_config_unref.\n *\n * \\par Errors:\n * Any errors encountered when parsing the input or returned by hooks or\n * functions.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_update(void)\n{\n\tint err;\n\n\tsnd_config_lock();\n\terr = snd_config_update_r(&snd_config, &snd_config_global_update, NULL);\n\tsnd_config_unlock();\n\treturn err;\n}\n\n/**\n * \\brief Updates #snd_config and takes its reference.\n * \\return 0 if #snd_config was up to date, 1 if #snd_config was\n *         updated, otherwise a negative error code.\n *\n * Unlike #snd_config_update, this function increases a reference counter\n * so that the obtained tree won't be deleted until unreferenced by\n * #snd_config_unref.\n *\n * This function is supposed to be thread-safe.\n */\nint snd_config_update_ref(snd_config_t **top)\n{\n\tint err;\n\n\tif (top)\n\t\t*top = NULL;\n\tsnd_config_lock();\n\terr = snd_config_update_r(&snd_config, &snd_config_global_update, NULL);\n\tif (err >= 0) {\n\t\tif (snd_config) {\n\t\t\tif (top) {\n\t\t\t\tsnd_config->refcount++;\n\t\t\t\t*top = snd_config;\n\t\t\t}\n\t\t} else {\n\t\t\terr = -ENODEV;\n\t\t}\n\t}\n\tsnd_config_unlock();\n\treturn err;\n}\n\n/**\n * \\brief Take the reference of the config tree.\n *\n * Increases a reference counter of the given config tree.\n *\n * This function is supposed to be thread-safe.\n */\nvoid snd_config_ref(snd_config_t *cfg)\n{\n\tsnd_config_lock();\n\tif (cfg)\n\t\tcfg->refcount++;\n\tsnd_config_unlock();\n}\n\n/**\n * \\brief Unreference the config tree.\n *\n * Decreases a reference counter of the given config tree, and eventually\n * deletes the tree if all references are gone.  This is the counterpart of\n * #snd_config_unref.\n *\n * Also, the config taken via #snd_config_update_ref must be unreferenced\n * by this function, too.\n *\n * This function is supposed to be thread-safe.\n */\nvoid snd_config_unref(snd_config_t *cfg)\n{\n\tsnd_config_lock();\n\tif (cfg)\n\t\tsnd_config_delete(cfg);\n\tsnd_config_unlock();\n}\n\n/** \n * \\brief Frees a private update structure.\n * \\param[in] update The private update structure to free.\n * \\return Zero if successful, otherwise a negative error code.\n */\nint snd_config_update_free(snd_config_update_t *update)\n{\n\tunsigned int k;\n\n\tassert(update);\n\tfor (k = 0; k < update->count; k++)\n\t\tfree(update->finfo[k].name);\n\tfree(update->finfo);\n\tfree(update);\n\treturn 0;\n}\n\n/** \n * \\brief Frees the global configuration tree in #snd_config.\n * \\return Zero if successful, otherwise a negative error code.\n *\n * This functions releases all resources of the global configuration\n * tree, and sets #snd_config to \\c NULL.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_update_free_global(void)\n{\n\tsnd_config_lock();\n\tif (snd_config)\n\t\tsnd_config_delete(snd_config);\n\tsnd_config = NULL;\n\tif (snd_config_global_update)\n\t\tsnd_config_update_free(snd_config_global_update);\n\tsnd_config_global_update = NULL;\n\tsnd_config_unlock();\n\t/* FIXME: better to place this in another place... */\n\tsnd_dlobj_cache_cleanup();\n\n\treturn 0;\n}\n\n/**\n * \\brief Returns an iterator pointing to a node's first child.\n * \\param[in] config Handle to a configuration node.\n * \\return An iterator pointing to \\a config's first child.\n *\n * \\a config must be a compound node.\n *\n * The returned iterator is valid if it is not equal to the return value\n * of #snd_config_iterator_end on \\a config.\n *\n * Use #snd_config_iterator_entry to get the handle of the node pointed\n * to.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_iterator_t snd_config_iterator_first(const snd_config_t *config)\n{\n\tassert(config->type == SND_CONFIG_TYPE_COMPOUND);\n\treturn config->u.compound.fields.next;\n}\n\n/**\n * \\brief Returns an iterator pointing to the next sibling.\n * \\param[in] iterator An iterator pointing to a child configuration node.\n * \\return An iterator pointing to the next sibling of \\a iterator.\n *\n * The returned iterator is valid if it is not equal to the return value\n * of #snd_config_iterator_end on the node's parent.\n *\n * Use #snd_config_iterator_entry to get the handle of the node pointed\n * to.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_iterator_t snd_config_iterator_next(const snd_config_iterator_t iterator)\n{\n\treturn iterator->next;\n}\n\n/**\n * \\brief Returns an iterator that ends a node's children list.\n * \\param[in] config Handle to a configuration node.\n * \\return An iterator that indicates the end of \\a config's children list.\n *\n * \\a config must be a compound node.\n *\n * The return value can be understood as pointing past the last child of\n * \\a config.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_iterator_t snd_config_iterator_end(const snd_config_t *config)\n{\n\tassert(config->type == SND_CONFIG_TYPE_COMPOUND);\n\treturn (const snd_config_iterator_t)&config->u.compound.fields;\n}\n\n/**\n * \\brief Returns the configuration node handle pointed to by an iterator.\n * \\param[in] iterator A configuration node iterator.\n * \\return The configuration node handle pointed to by \\a iterator.\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nsnd_config_t *snd_config_iterator_entry(const snd_config_iterator_t iterator)\n{\n\treturn list_entry(iterator, snd_config_t, list);\n}\n\n#ifndef DOC_HIDDEN\ntypedef enum _snd_config_walk_pass {\n\tSND_CONFIG_WALK_PASS_PRE,\n\tSND_CONFIG_WALK_PASS_POST,\n\tSND_CONFIG_WALK_PASS_LEAF,\n} snd_config_walk_pass_t;\n#endif\n\n/* Return 1 if node needs to be attached to parent */\n/* Return 2 if compound is replaced with standard node */\n#ifndef DOC_HIDDEN\ntypedef int (*snd_config_walk_callback_t)(snd_config_t *src,\n\t\t\t\t\t  snd_config_t *root,\n\t\t\t\t\t  snd_config_t **dst,\n\t\t\t\t\t  snd_config_walk_pass_t pass,\n\t\t\t\t\t  snd_config_t *private_data);\n#endif\n\nstatic int snd_config_walk(snd_config_t *src,\n\t\t\t   snd_config_t *root,\n\t\t\t   snd_config_t **dst, \n\t\t\t   snd_config_walk_callback_t callback,\n\t\t\t   snd_config_t *private_data)\n{\n\tint err;\n\tsnd_config_iterator_t i, next;\n\n\tswitch (snd_config_get_type(src)) {\n\tcase SND_CONFIG_TYPE_COMPOUND:\n\t\terr = callback(src, root, dst, SND_CONFIG_WALK_PASS_PRE, private_data);\n\t\tif (err <= 0)\n\t\t\treturn err;\n\t\tsnd_config_for_each(i, next, src) {\n\t\t\tsnd_config_t *s = snd_config_iterator_entry(i);\n\t\t\tsnd_config_t *d = NULL;\n\n\t\t\terr = snd_config_walk(s, root, (dst && *dst) ? &d : NULL,\n\t\t\t\t\t      callback, private_data);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _error;\n\t\t\tif (err && d) {\n\t\t\t\terr = snd_config_add(*dst, d);\n\t\t\t\tif (err < 0)\n\t\t\t\t\tgoto _error;\n\t\t\t}\n\t\t}\n\t\terr = callback(src, root, dst, SND_CONFIG_WALK_PASS_POST, private_data);\n\t\tif (err <= 0) {\n\t\t_error:\n\t\t\tif (dst && *dst)\n\t\t\t\tsnd_config_delete(*dst);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\terr = callback(src, root, dst, SND_CONFIG_WALK_PASS_LEAF, private_data);\n\t\tbreak;\n\t}\n\treturn err;\n}\n\nstatic int _snd_config_copy(snd_config_t *src,\n\t\t\t    snd_config_t *root ATTRIBUTE_UNUSED,\n\t\t\t    snd_config_t **dst,\n\t\t\t    snd_config_walk_pass_t pass,\n\t\t\t    snd_config_t *private_data ATTRIBUTE_UNUSED)\n{\n\tint err;\n\tconst char *id = src->id;\n\tsnd_config_type_t type = snd_config_get_type(src);\n\tswitch (pass) {\n\tcase SND_CONFIG_WALK_PASS_PRE:\n\t\terr = snd_config_make_compound(dst, id, src->u.compound.join);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tbreak;\n\tcase SND_CONFIG_WALK_PASS_LEAF:\n\t\terr = snd_config_make(dst, id, type);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tswitch (type) {\n\t\tcase SND_CONFIG_TYPE_INTEGER:\n\t\t{\n\t\t\tlong v;\n\t\t\terr = snd_config_get_integer(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\tsnd_config_set_integer(*dst, v);\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_INTEGER64:\n\t\t{\n\t\t\tlong long v;\n\t\t\terr = snd_config_get_integer64(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\tsnd_config_set_integer64(*dst, v);\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_REAL:\n\t\t{\n\t\t\tdouble v;\n\t\t\terr = snd_config_get_real(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\tsnd_config_set_real(*dst, v);\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_STRING:\n\t\t{\n\t\t\tconst char *s;\n\t\t\terr = snd_config_get_string(src, &s);\n\t\t\tassert(err >= 0);\n\t\t\terr = snd_config_set_string(*dst, s);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tassert(0);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn 1;\n}\n\n/**\n * \\brief Creates a copy of a configuration node.\n * \\param[out] dst The function puts the handle to the new configuration\n *                 node at the address specified by \\a dst.\n * \\param[in] src Handle to the source configuration node.\n * \\return A non-negative value if successful, otherwise a negative error code.\n *\n * This function creates a deep copy, i.e., if \\a src is a compound\n * node, all children are copied recursively.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOMEM<dd>Out of memory.\n * </dl>\n *\n * \\par Conforming to:\n * LSB 3.2\n */\nint snd_config_copy(snd_config_t **dst,\n\t\t    snd_config_t *src)\n{\n\treturn snd_config_walk(src, NULL, dst, _snd_config_copy, NULL);\n}\n\nstatic int _snd_config_expand(snd_config_t *src,\n\t\t\t      snd_config_t *root ATTRIBUTE_UNUSED,\n\t\t\t      snd_config_t **dst,\n\t\t\t      snd_config_walk_pass_t pass,\n\t\t\t      snd_config_t *private_data)\n{\n\tint err;\n\tconst char *id = src->id;\n\tsnd_config_type_t type = snd_config_get_type(src);\n\tswitch (pass) {\n\tcase SND_CONFIG_WALK_PASS_PRE:\n\t{\n\t\tif (id && strcmp(id, \"@args\") == 0)\n\t\t\treturn 0;\n\t\terr = snd_config_make_compound(dst, id, src->u.compound.join);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tbreak;\n\t}\n\tcase SND_CONFIG_WALK_PASS_LEAF:\n\t\tswitch (type) {\n\t\tcase SND_CONFIG_TYPE_INTEGER:\n\t\t{\n\t\t\tlong v;\n\t\t\terr = snd_config_get_integer(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\terr = snd_config_imake_integer(dst, id, v);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_INTEGER64:\n\t\t{\n\t\t\tlong long v;\n\t\t\terr = snd_config_get_integer64(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\terr = snd_config_imake_integer64(dst, id, v);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_REAL:\n\t\t{\n\t\t\tdouble v;\n\t\t\terr = snd_config_get_real(src, &v);\n\t\t\tassert(err >= 0);\n\t\t\terr = snd_config_imake_real(dst, id, v);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tbreak;\n\t\t}\n\t\tcase SND_CONFIG_TYPE_STRING:\n\t\t{\n\t\t\tconst char *s;\n\t\t\tsnd_config_t *val;\n\t\t\tsnd_config_t *vars = private_data;\n\t\t\tsnd_config_get_string(src, &s);\n\t\t\tif (s && *s == '$') {\n\t\t\t\ts++;\n\t\t\t\tif (snd_config_search(vars, s, &val) < 0)\n\t\t\t\t\treturn 0;\n\t\t\t\terr = snd_config_copy(dst, val);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t\terr = snd_config_set_id(*dst, id);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tsnd_config_delete(*dst);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = snd_config_imake_string(dst, id, s);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tassert(0);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn 1;\n}\n\nstatic int _snd_config_evaluate(snd_config_t *src,\n\t\t\t\tsnd_config_t *root,\n\t\t\t\tsnd_config_t **dst ATTRIBUTE_UNUSED,\n\t\t\t\tsnd_config_walk_pass_t pass,\n\t\t\t\tsnd_config_t *private_data)\n{\n\tint err;\n\tif (pass == SND_CONFIG_WALK_PASS_PRE) {\n\t\tchar *buf = NULL;\n\t\tconst char *lib = NULL, *func_name = NULL;\n\t\tconst char *str;\n\t\tint (*func)(snd_config_t **dst, snd_config_t *root,\n\t\t\t    snd_config_t *src, snd_config_t *private_data) = NULL;\n\t\tvoid *h = NULL;\n\t\tsnd_config_t *c, *func_conf = NULL;\n\t\terr = snd_config_search(src, \"@func\", &c);\n\t\tif (err < 0)\n\t\t\treturn 1;\n\t\terr = snd_config_get_string(c, &str);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Invalid type for @func\");\n\t\t\treturn err;\n\t\t}\n\t\tassert(str);\n\t\terr = snd_config_search_definition(root, \"func\", str, &func_conf);\n\t\tif (err >= 0) {\n\t\t\tsnd_config_iterator_t i, next;\n\t\t\tif (snd_config_get_type(func_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\tSNDERR(\"Invalid type for func %s definition\", str);\n\t\t\t\terr = -EINVAL;\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\tsnd_config_for_each(i, next, func_conf) {\n\t\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\t\tconst char *id = n->id;\n\t\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\t\tif (err < 0) {\n\t\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\t\tgoto _err;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strcmp(id, \"func\") == 0) {\n\t\t\t\t\terr = snd_config_get_string(n, &func_name);\n\t\t\t\t\tif (err < 0) {\n\t\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\t\tgoto _err;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\t}\n\t\t}\n\t\tif (!func_name) {\n\t\t\tint len = 9 + strlen(str) + 1;\n\t\t\tbuf = malloc(len);\n\t\t\tif (! buf) {\n\t\t\t\terr = -ENOMEM;\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\tsnprintf(buf, len, \"snd_func_%s\", str);\n\t\t\tbuf[len-1] = '\\0';\n\t\t\tfunc_name = buf;\n\t\t}\n\t\th = snd_dlopen(lib, RTLD_NOW);\n\t\tif (h)\n\t\t\tfunc = snd_dlsym(h, func_name, SND_DLSYM_VERSION(SND_CONFIG_DLSYM_VERSION_EVALUATE));\n\t\terr = 0;\n\t\tif (!h) {\n\t\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\t\terr = -ENOENT;\n\t\t\tgoto _errbuf;\n\t\t} else if (!func) {\n\t\t\tSNDERR(\"symbol %s is not defined inside %s\", func_name, lib);\n\t\t\tsnd_dlclose(h);\n\t\t\terr = -ENXIO;\n\t\t\tgoto _errbuf;\n\t\t}\n\t       _err:\n\t\tif (func_conf)\n\t\t\tsnd_config_delete(func_conf);\n\t\tif (err >= 0) {\n\t\t\tsnd_config_t *eval;\n\t\t\terr = func(&eval, root, src, private_data);\n\t\t\tif (err < 0)\n\t\t\t\tSNDERR(\"function %s returned error: %s\", func_name, snd_strerror(err));\n\t\t\tsnd_dlclose(h);\n\t\t\tif (err >= 0 && eval) {\n\t\t\t\t/* substitute merges compound members */\n\t\t\t\t/* we don't want merging at all */\n\t\t\t\terr = snd_config_delete_compound_members(src);\n\t\t\t\tif (err >= 0)\n\t\t\t\t\terr = snd_config_substitute(src, eval);\n\t\t\t}\n\t\t}\n\t       _errbuf:\n\t\tfree(buf);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n/**\n * \\brief Evaluates a configuration node at runtime.\n * \\param[in,out] config Handle to the source configuration node.\n * \\param[in] root Handle to the root of the source configuration.\n * \\param[in] private_data Handle to the private data node for runtime evaluation.\n * \\param result Must be \\c NULL.\n * \\return A non-negative value if successful, otherwise a negative error code.\n *\n * This function evaluates any functions (\\c \\@func) in \\a config and\n * replaces those nodes with the respective function results.\n */\nint snd_config_evaluate(snd_config_t *config, snd_config_t *root,\n\t\t        snd_config_t *private_data, snd_config_t **result)\n{\n\t/* FIXME: Only in place evaluation is currently implemented */\n\tassert(result == NULL);\n\treturn snd_config_walk(config, root, result, _snd_config_evaluate, private_data);\n}\n\nstatic int load_defaults(snd_config_t *subs, snd_config_t *defs)\n{\n\tsnd_config_iterator_t d, dnext;\n\tsnd_config_for_each(d, dnext, defs) {\n\t\tsnd_config_t *def = snd_config_iterator_entry(d);\n\t\tsnd_config_iterator_t f, fnext;\n\t\tif (snd_config_get_type(def) != SND_CONFIG_TYPE_COMPOUND)\n\t\t\tcontinue;\n\t\tsnd_config_for_each(f, fnext, def) {\n\t\t\tsnd_config_t *fld = snd_config_iterator_entry(f);\n\t\t\tconst char *id = fld->id;\n\t\t\tif (strcmp(id, \"type\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"default\") == 0) {\n\t\t\t\tsnd_config_t *deflt;\n\t\t\t\tint err;\n\t\t\t\terr = snd_config_copy(&deflt, fld);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t\terr = snd_config_set_id(deflt, def->id);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tsnd_config_delete(deflt);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\terr = snd_config_add(subs, deflt);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tsnd_config_delete(deflt);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\treturn 0;\n}\n\nstatic void skip_blank(const char **ptr)\n{\n\twhile (1) {\n\t\tswitch (**ptr) {\n\t\tcase ' ':\n\t\tcase '\\f':\n\t\tcase '\\t':\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t\t}\n\t\t(*ptr)++;\n\t}\n}\n\nstatic int parse_char(const char **ptr)\n{\n\tint c;\n\tassert(**ptr == '\\\\');\n\t(*ptr)++;\n\tc = **ptr;\n\tswitch (c) {\n\tcase 'n':\n\t\tc = '\\n';\n\t\tbreak;\n\tcase 't':\n\t\tc = '\\t';\n\t\tbreak;\n\tcase 'v':\n\t\tc = '\\v';\n\t\tbreak;\n\tcase 'b':\n\t\tc = '\\b';\n\t\tbreak;\n\tcase 'r':\n\t\tc = '\\r';\n\t\tbreak;\n\tcase 'f':\n\t\tc = '\\f';\n\t\tbreak;\n\tcase '0' ... '7':\n\t{\n\t\tint num = c - '0';\n\t\tint i = 1;\n\t\t(*ptr)++;\n\t\tdo {\n\t\t\tc = **ptr;\n\t\t\tif (c < '0' || c > '7')\n\t\t\t\tbreak;\n\t\t\tnum = num * 8 + c - '0';\n\t\t\ti++;\n\t\t\t(*ptr)++;\n\t\t} while (i < 3);\n\t\treturn num;\n\t}\n\tdefault:\n\t\tbreak;\n\t}\n\t(*ptr)++;\n\treturn c;\n}\n\nstatic int parse_id(const char **ptr)\n{\n\tif (!**ptr)\n\t\treturn -EINVAL;\n\twhile (1) {\n\t\tswitch (**ptr) {\n\t\tcase '\\f':\n\t\tcase '\\t':\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\tcase ',':\n\t\tcase '=':\n\t\tcase '\\0':\n\t\t\treturn 0;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\t(*ptr)++;\n\t}\n}\n\nstatic int parse_string(const char **ptr, char **val)\n{\n\tconst size_t bufsize = 256;\n\tchar _buf[bufsize];\n\tchar *buf = _buf;\n\tsize_t alloc = bufsize;\n\tchar delim = **ptr;\n\tsize_t idx = 0;\n\t(*ptr)++;\n\twhile (1) {\n\t\tint c = **ptr;\n\t\tswitch (c) {\n\t\tcase '\\0':\n\t\t\tSNDERR(\"Unterminated string\");\n\t\t\treturn -EINVAL;\n\t\tcase '\\\\':\n\t\t\tc = parse_char(ptr);\n\t\t\tif (c < 0)\n\t\t\t\treturn c;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t(*ptr)++;\n\t\t\tif (c == delim) {\n\t\t\t\t*val = malloc(idx + 1);\n\t\t\t\tif (!*val)\n\t\t\t\t\treturn -ENOMEM;\n\t\t\t\tmemcpy(*val, buf, idx);\n\t\t\t\t(*val)[idx] = 0;\n\t\t\t\tif (alloc > bufsize)\n\t\t\t\t\tfree(buf);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tif (idx >= alloc) {\n\t\t\tsize_t old_alloc = alloc;\n\t\t\talloc *= 2;\n\t\t\tif (old_alloc == bufsize) {\n\t\t\t\tbuf = malloc(alloc);\n\t\t\t\tmemcpy(buf, _buf, old_alloc);\n\t\t\t} else {\n\t\t\t\tbuf = realloc(buf, alloc);\n\t\t\t}\n\t\t\tif (!buf)\n\t\t\t\treturn -ENOMEM;\n\t\t}\n\t\tbuf[idx++] = c;\n\t}\n}\n\t\t\t\t\n\n/* Parse var=val or val */\nstatic int parse_arg(const char **ptr, unsigned int *varlen, char **val)\n{\n\tconst char *str;\n\tint err, vallen;\n\tskip_blank(ptr);\n\tstr = *ptr;\n\tif (*str == '\"' || *str == '\\'') {\n\t\terr = parse_string(ptr, val);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\t*varlen = 0;\n\t\treturn 0;\n\t}\n\terr = parse_id(ptr);\n\tif (err < 0)\n\t\treturn err;\n\tvallen = *ptr - str;\n\tskip_blank(ptr);\n\tif (**ptr != '=') {\n\t\t*varlen = 0;\n\t\tgoto _value;\n\t}\n\t*varlen = vallen;\n\t(*ptr)++;\n\tskip_blank(ptr);\n\tstr = *ptr;\n\tif (*str == '\"' || *str == '\\'') {\n\t\terr = parse_string(ptr, val);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\treturn 0;\n\t}\n\terr = parse_id(ptr);\n\tif (err < 0)\n\t\treturn err;\n\tvallen = *ptr - str;\n _value:\n\t*val = malloc(vallen + 1);\n\tif (!*val)\n\t\treturn -ENOMEM;\n\tmemcpy(*val, str, vallen);\n\t(*val)[vallen] = 0;\n\treturn 0;\n}\n\n\n/* val1, val2, ...\n * var1=val1,var2=val2,...\n * { conf syntax }\n */\nstatic int parse_args(snd_config_t *subs, const char *str, snd_config_t *defs)\n{\n\tint err;\n\tint arg = 0;\n\tif (str == NULL)\n\t\treturn 0;\n\tskip_blank(&str);\n\tif (!*str)\n\t\treturn 0;\n\tif (*str == '{') {\n\t\tint len = strlen(str);\n\t\tsnd_input_t *input;\n\t\tsnd_config_iterator_t i, next;\n\t\twhile (1) {\n\t\t\tswitch (str[--len]) {\n\t\t\tcase ' ':\n\t\t\tcase '\\f':\n\t\t\tcase '\\t':\n\t\t\tcase '\\n':\n\t\t\tcase '\\r':\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (str[len] != '}')\n\t\t\treturn -EINVAL;\n\t\terr = snd_input_buffer_open(&input, str + 1, len - 1);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\terr = snd_config_load_override(subs, input);\n\t\tsnd_input_close(input);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tsnd_config_for_each(i, next, subs) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tsnd_config_t *d;\n\t\t\tconst char *id = n->id;\n\t\t\terr = snd_config_search(defs, id, &d);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Unknown parameter %s\", id);\n\t\t\t\treturn err;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\twhile (1) {\n\t\tchar buf[256];\n\t\tconst char *var = buf;\n\t\tunsigned int varlen;\n\t\tsnd_config_t *def, *sub, *typ;\n\t\tconst char *new = str;\n\t\tconst char *tmp;\n\t\tchar *val = NULL;\n\t\terr = parse_arg(&new, &varlen, &val);\n\t\tif (err < 0)\n\t\t\tgoto _err;\n\t\tif (varlen > 0) {\n\t\t\tassert(varlen < sizeof(buf));\n\t\t\tmemcpy(buf, str, varlen);\n\t\t\tbuf[varlen] = 0;\n\t\t} else {\n\t\t\tsprintf(buf, \"%d\", arg);\n\t\t}\n\t\terr = snd_config_search_alias(defs, NULL, var, &def);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Unknown parameter %s\", var);\n\t\t\tgoto _err;\n\t\t}\n\t\tif (snd_config_get_type(def) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Parameter %s definition is not correct\", var);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tvar = def->id;\n\t\terr = snd_config_search(subs, var, &sub);\n\t\tif (err >= 0)\n\t\t\tsnd_config_delete(sub);\n\t\terr = snd_config_search(def, \"type\", &typ);\n\t\tif (err < 0) {\n\t\t_invalid_type:\n\t\t\tSNDERR(\"Parameter %s definition is missing a valid type info\", var);\n\t\t\tgoto _err;\n\t\t}\n\t\terr = snd_config_get_string(typ, &tmp);\n\t\tif (err < 0 || !tmp)\n\t\t\tgoto _invalid_type;\n\t\tif (strcmp(tmp, \"integer\") == 0) {\n\t\t\tlong v;\n\t\t\terr = snd_config_make(&sub, var, SND_CONFIG_TYPE_INTEGER);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t\terr = safe_strtol(val, &v);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Parameter %s must be an integer\", var);\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\terr = snd_config_set_integer(sub, v);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t} else if (strcmp(tmp, \"integer64\") == 0) {\n\t\t\tlong long v;\n\t\t\terr = snd_config_make(&sub, var, SND_CONFIG_TYPE_INTEGER64);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t\terr = safe_strtoll(val, &v);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Parameter %s must be an integer\", var);\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\terr = snd_config_set_integer64(sub, v);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t} else if (strcmp(tmp, \"real\") == 0) {\n\t\t\tdouble v;\n\t\t\terr = snd_config_make(&sub, var, SND_CONFIG_TYPE_REAL);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t\terr = safe_strtod(val, &v);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Parameter %s must be a real\", var);\n\t\t\t\tgoto _err;\n\t\t\t}\n\t\t\terr = snd_config_set_real(sub, v);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t} else if (strcmp(tmp, \"string\") == 0) {\n\t\t\terr = snd_config_make(&sub, var, SND_CONFIG_TYPE_STRING);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t\terr = snd_config_set_string(sub, val);\n\t\t\tif (err < 0)\n\t\t\t\tgoto _err;\n\t\t} else {\n\t\t\terr = -EINVAL;\n\t\t\tgoto _invalid_type;\n\t\t}\n\t\terr = snd_config_set_id(sub, var);\n\t\tif (err < 0)\n\t\t\tgoto _err;\n\t\terr = snd_config_add(subs, sub);\n\t\tif (err < 0) {\n\t\t_err:\n\t\t\tfree(val);\n\t\t\treturn err;\n\t\t}\n\t\tfree(val);\n\t\tif (!*new)\n\t\t\tbreak;\n\t\tif (*new != ',')\n\t\t\treturn -EINVAL;\n\t\tstr = new + 1;\n\t\targ++;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Expands a configuration node, applying arguments and functions.\n * \\param[in] config Handle to the configuration node.\n * \\param[in] root Handle to the root configuration node.\n * \\param[in] args Arguments string, can be \\c NULL.\n * \\param[in] private_data Handle to the private data node for functions.\n * \\param[out] result The function puts the handle to the result\n *                    configuration node at the address specified by\n *                    \\a result.\n * \\return A non-negative value if successful, otherwise a negative error code.\n *\n * If \\a config has arguments (defined by a child with id \\c \\@args),\n * this function replaces any string node beginning with $ with the\n * respective argument value, or the default argument value, or nothing.\n * Furthermore, any functions are evaluated (see #snd_config_evaluate).\n * The resulting copy of \\a config is returned in \\a result.\n */\nint snd_config_expand(snd_config_t *config, snd_config_t *root, const char *args,\n\t\t      snd_config_t *private_data, snd_config_t **result)\n{\n\tint err;\n\tsnd_config_t *defs, *subs = NULL, *res;\n\terr = snd_config_search(config, \"@args\", &defs);\n\tif (err < 0) {\n\t\tif (args != NULL) {\n\t\t\tSNDERR(\"Unknown parameters %s\", args);\n\t\t\treturn -EINVAL;\n\t\t}\n\t\terr = snd_config_copy(&res, config);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t} else {\n\t\terr = snd_config_top(&subs);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\terr = load_defaults(subs, defs);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Load defaults error: %s\", snd_strerror(err));\n\t\t\tgoto _end;\n\t\t}\n\t\terr = parse_args(subs, args, defs);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Parse arguments error: %s\", snd_strerror(err));\n\t\t\tgoto _end;\n\t\t}\n\t\terr = snd_config_evaluate(subs, root, private_data, NULL);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Args evaluate error: %s\", snd_strerror(err));\n\t\t\tgoto _end;\n\t\t}\n\t\terr = snd_config_walk(config, root, &res, _snd_config_expand, subs);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Expand error (walk): %s\", snd_strerror(err));\n\t\t\tgoto _end;\n\t\t}\n\t}\n\terr = snd_config_evaluate(res, root, private_data, NULL);\n\tif (err < 0) {\n\t\tSNDERR(\"Evaluate error: %s\", snd_strerror(err));\n\t\tsnd_config_delete(res);\n\t\tgoto _end;\n\t}\n\t*result = res;\n\terr = 1;\n _end:\n \tif (subs)\n\t\tsnd_config_delete(subs);\n\treturn err;\n}\n\n/**\n * \\brief Searches for a definition in a configuration tree, using\n *        aliases and expanding hooks and arguments.\n * \\param[in] config Handle to the configuration (sub)tree to search.\n * \\param[in] base Implicit key base, or \\c NULL for none.\n * \\param[in] name Key suffix, optionally with arguments.\n * \\param[out] result The function puts the handle to the expanded found\n *                    node at the address specified by \\a result.\n * \\return A non-negative value if successful, otherwise a negative error code.\n *\n * This functions searches for a child node of \\a config, allowing\n * aliases and expanding hooks, like #snd_config_search_alias_hooks.\n *\n * If \\a name contains a colon (:), the rest of the string after the\n * colon contains arguments that are expanded as with\n * #snd_config_expand.\n *\n * In any case, \\a result is a new node that must be freed by the\n * caller.\n *\n * \\par Errors:\n * <dl>\n * <dt>-ENOENT<dd>An id in \\a key or an alias id does not exist.\n * <dt>-ENOENT<dd>\\a config or one of its child nodes to be searched is\n *                not a compound node.\n * </dl>\n * Additionally, any errors encountered when parsing the hook\n * definitions or arguments, or returned by (hook) functions.\n */\nint snd_config_search_definition(snd_config_t *config,\n\t\t\t\t const char *base, const char *name,\n\t\t\t\t snd_config_t **result)\n{\n\tsnd_config_t *conf;\n\tchar *key;\n\tconst char *args = strchr(name, ':');\n\tint err;\n\tif (args) {\n\t\targs++;\n\t\tkey = alloca(args - name);\n\t\tmemcpy(key, name, args - name - 1);\n\t\tkey[args - name - 1] = '\\0';\n\t} else {\n\t\tkey = (char *) name;\n\t}\n\t/*\n\t *  if key contains dot (.), the implicit base is ignored\n\t *  and the key starts from root given by the 'config' parameter\n\t */\n\tsnd_config_lock();\n\terr = snd_config_search_alias_hooks(config, strchr(key, '.') ? NULL : base, key, &conf);\n\tif (err < 0) {\n\t\tsnd_config_unlock();\n\t\treturn err;\n\t}\n\terr = snd_config_expand(conf, config, args, NULL, result);\n\tsnd_config_unlock();\n\treturn err;\n}\n\n#ifndef DOC_HIDDEN\nvoid snd_config_set_hop(snd_config_t *conf, int hop)\n{\n\tconf->hop = hop;\n}\n\nint snd_config_check_hop(snd_config_t *conf)\n{\n\tif (conf) {\n\t\tif (conf->hop >= SND_CONF_MAX_HOPS) {\n\t\t\tSYSERR(\"Too many definition levels (looped?)\\n\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\treturn conf->hop;\n\t}\n\treturn 0;\n}\n#endif\n\n#if 0\n/* Not strictly needed, but useful to check for memory leaks */\nvoid _snd_config_end(void) __attribute__ ((destructor));\n\nstatic void _snd_config_end(void)\n{\n\tint k;\n\tif (snd_config)\n\t\tsnd_config_delete(snd_config);\n\tsnd_config = 0;\n\tfor (k = 0; k < files_info_count; ++k)\n\t\tfree(files_info[k].name);\n\tfree(files_info);\n\tfiles_info = NULL;\n\tfiles_info_count = 0;\n}\n#endif\n\nsize_t page_size(void)\n{\n\tlong s = sysconf(_SC_PAGE_SIZE);\n\tassert(s > 0);\n\treturn s;\n}\n\nsize_t page_align(size_t size)\n{\n\tsize_t r;\n\tlong psz = page_size();\n\tr = size % psz;\n\tif (r)\n\t\treturn size + psz - r;\n\treturn size;\n}\n\nsize_t page_ptr(size_t object_offset, size_t object_size, size_t *offset, size_t *mmap_offset)\n{\n\tsize_t r;\n\tlong psz = page_size();\n\tassert(offset);\n\tassert(mmap_offset);\n\t*mmap_offset = object_offset;\n\tobject_offset %= psz;\n\t*mmap_offset -= object_offset;\n\tobject_size += object_offset;\n\tr = object_size % psz;\n\tif (r)\n\t\tr = object_size + psz - r;\n\telse\n\t\tr = object_size;\n\t*offset = object_offset;\n\treturn r;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/seq/seq.c": "/**\n * \\file seq/seq.c\n * \\brief Sequencer Interface\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 2000-2001\n *\n * See \\ref seq page for more details.\n */\n\n/* \n *  Sequencer Interface - main file\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n/*! \\page seq Sequencer interface\n\n\\section seq_general General\n\nThe ALSA sequencer interface is designed to deliver the MIDI-like\nevents between clients/ports.\nA typical usage is the MIDI patch-bay.  A MIDI application can be\nconnected arbitrarily from/to the other MIDI clients.\nThe routing between clients can be changed dynamically, so the\napplication can handle incoming or outgoing MIDI events regardless of\nthe devices or the application connections.\n\nThe sequencer core stuff only takes care of two things:\nscheduling events and dispatching them to the destination at the\nright time.  All processing of MIDI events has to be done within the clients.\nThe event can be dispatched immediately without queueing, too.\nThe event scheduling can be done either on a MIDI tempo queue or\non a wallclock-time queue.\n\n\\section seq_client Client and Port\n\nA <i>client</i> is created at each time #snd_seq_open() is called.\nLater on, the attributes of client such as its name string can be changed\nvia #snd_seq_set_client_info().  There are helper functions for ease of use,\ne.g. #snd_seq_set_client_name() and #snd_seq_set_client_event_filter().\nA typical code would be like below:\n\\code\n// create a new client\nsnd_seq_t *open_client()\n{\n        snd_seq_t *handle;\n        int err;\n        err = snd_seq_open(&handle, \"default\", SND_SEQ_OPEN_INPUT, 0);\n        if (err < 0)\n                return NULL;\n        snd_seq_set_client_name(handle, \"My Client\");\n\treturn handle;\n}\n\\endcode\n\nYou'll need to know the id number of the client eventually, for example,\nwhen accessing to a certain port (see the section \\ref seq_subs).\nThe client id can be obtained by #snd_seq_client_id() function.\n\nA client can have one or more <i>ports</i> to communicate between other\nclients.  A port is corresponding to the MIDI port in the case of MIDI device,\nbut in general it is nothing but the access point between other clients.\nEach port may have capability flags, which specify the read/write\naccessibility and subscription permissions of the port.\nFor creation of a port, call #snd_seq_create_port()\nwith the appropriate port attribute specified in #snd_seq_port_info_t\nrecord.\n\nFor creating a port for the normal use, there is a helper function\n#snd_seq_create_simple_port().  An example with this function is like below.\n\\code\n// create a new port; return the port id\n// port will be writable and accept the write-subscription.\nint my_new_port(snd_seq_t *handle)\n{\n\treturn snd_seq_create_simple_port(handle, \"my port\",\n\t\t\tSND_SEQ_PORT_CAP_WRITE|SND_SEQ_PORT_CAP_SUBS_WRITE,\n\t\t\tSND_SEQ_PORT_TYPE_MIDI_GENERIC);\n}\n\\endcode\n\n\\section seq_memory Memory Pool\n\nEach client owns memory pools on kernel space\nfor each input and output events.\nHere, input and output mean\ninput (read) from other clients and output (write) to others, respectively.\nSince memory pool of each client is independent from others,\nit avoids such a situation that a client eats the whole events pool\nand interfere other clients' response.\n\nThe all scheduled output events or input events from dispatcher are stored\non these pools until delivered to other clients or extracted to user space.\nThe size of input/output pools can be changed independently.\nThe output pool has also a room size, which is used to wake up the\nthread when it falls into sleep in blocking write mode.\n\nNote that ports on the same client share the same memory pool.\nIf a port fills the memory pool, another can't use it any more.\nFor avoiding this, multiple clients can be used.\n\nFor chancing the pool size and the condition, access to #snd_seq_client_pool_t\nrecord.  There are helper functions, #snd_seq_set_client_pool_output(),\n#snd_seq_set_client_pool_output_room() and #snd_seq_set_client_pool_input(),\nfor setting the total output-pool size, the output-room size and the input-pool\nsize, respectively.\n\n\\section seq_subs Subscription\n\nOne of the new features in ALSA sequencer system is <i>subscription</i> of ports.\nIn general, subscription is a connection between two sequencer ports.\nEven though an event can be delivered to a port without subscription\nusing an explicit destination address,\nthe subscription mechanism provides us more abstraction.\n\nSuppose a MIDI input device which sends events from a keyboard.\nThe port associated with this device has READ capability - which means\nthis port is readable from other ports.\nIf a user program wants to capture events from keyboard and store them\nas MIDI stream, this program must subscribe itself to the MIDI port\nfor read.\nThen, a connection from MIDI input port to this program is established.\nFrom this time, events from keyboard are automatically sent to this program.\nTimestamps will be updated according to the subscribed queue.\n\\code\n        MIDI input port (keyboard)\n            |\n            V\n        ALSA sequencer - update timestamp\n            |\n            V\n        application port\n\\endcode\n\nThere is another subscription type for opposite direction:\nSuppose a MIDI sequencer program which sends events to a MIDI output device.\nIn ALSA system, MIDI device is not opened until the associated MIDI port\nis accessed.  Thus, in order to activate MIDI device, we have to subscribe\nto MIDI port for write.\nAfter this connection is established, events will be properly sent\nto MIDI output device.\n\\code\n        application port\n            |\n            V\n        ALSA sequencer - events are scheduled\n            |\n            V\n        MIDI output port (WaveTable etc.)\n\\endcode\n\nFrom the viewpoint of subscription, the examples above are special cases.\nBasically, subscription means the connection between two arbitrary ports.\nFor example, imagine a filter application which modifies\nthe MIDI events like program, velocity or chorus effects.\nThis application can accept arbitrary MIDI input\nand send to arbitrary port, just like a Unix pipe application using\nstdin and stdout files.\nWe can even connect several filter applications which work individually\nin order to process the MIDI events.\nSubscription can be used for this purpose.\nThe connection between ports can be done also by the \"third\" client.\nThus, filter applications have to manage\nonly input and output events regardless of receiver/sender addresses.\n\\code\n        sequencer port #1\n            |\n            V\n        ALSA sequencer (scheduled or real-time)\n            |\n            V\n        sequencer port #2\n\\endcode\n\nFor the detail about subscription, see the section \\ref seq_subs_more.\n\n\\section seq_events Sequencer Events\n\nMessaging between clients is performed by sending events from one client to\nanother. These events contain high-level MIDI oriented messages or sequencer\nspecific messages.\n\nAll the sequencer events are stored in a sequencer event record,\n#snd_seq_event_t type.\nApplication can send and receive these event records to/from other\nclients via sequencer.\nAn event has several storage types according to its usage.\nFor example, a SYSEX message is stored on the variable length event,\nand a large synth sample data is delivered using a user-space data pointer.\n\n\n\\subsection seq_ev_struct Structure of an event\n\nAn event consists of the following items:\n<ul>\n<li>The type of the event\n<li>Event flags.  It describes various conditions:\n  <ul>\n  <li>time stamp; \"real time\" / \"song ticks\"\n  <li>time mode; \"absolute\" / \"relative to current time\"\n  </ul>\n<li>Timestamp of the event.\n<li>Scheduling queue id.\n<li>Source address of the event, given by the combination\n  of client id and port id numbers.\n<li>Destination address of the event.\n<li>The actual event data. (up to 12 bytes)\n</ul>\n\nThe actual record is shown in #snd_seq_event_t.\nThe type field contains the type of the event\n(1 byte).\nThe flags field consists of bit flags which\ndescribe several conditions of the event (1 byte).\nIt includes the time-stamp mode, data storage type, and scheduling priority.\nThe tag field is an arbitrary tag.\nThis tag can used for removing a distinct event from the event queue\nvia #snd_seq_remove_events().\nThe queue field is the queue id for scheduling.\nThe source and dest fields are source and destination addresses.\nThe data field is a union of event data.\n\n\\subsection seq_ev_queue Scheduling queue\n\nAn event can be delivered either on scheduled or direct dispatch mode.\nOn the scheduling mode, an event is once stored on the priority queue\nand delivered later (or even immediately) to the destination,\nwhereas on the direct dispatch mode, an event is passed to the destination\nwithout any queue.\n\nFor a scheduled delivery, a queue to process the event must exist.\nUsually, a client creates its own queue by\n#snd_seq_alloc_queue() function.\nAlternatively, a queue may be shared among several clients.\nFor scheduling an event on the specified queue,\na client needs to fill queue field\nwith the preferred queue id.\n\nMeanwhile, for dispatching an event directly, just\nuse #SND_SEQ_QUEUE_DIRECT as the target queue id.\nA macro #snd_seq_ev_set_direct() is provided for ease\nand compatibility.\n\nNote that scheduling at the current or earlier time is different\nfrom the direct dispatch mode even though the event is delivered immediately.\nOn the former scheme, an event is once stored on priority queue, then\ndelivered actually.  Thus, it acquires a space from memory pool.\nOn the other hand, the latter is passed without using memory pool.\nAlthough the direct dispatched event needs less memory, it means also\nthat the event cannot be resent if the destination is unable to receive it\nmomentarily.\n\n\\subsection seq_ev_time Time stamp\n\nThe timestamp of the event can either specified in\n<i>real time</i> or in <i>song ticks</i>.\nThe former means the wallclock time while the latter corresponds to\nthe MIDI ticks.\nWhich format is used is determined by the event flags.\n\nThe resolution of real-time value is in nano second.\nSince 64 bit length is required for the actual time calculation,\nit is represented by\na structure of pair of second and nano second\ndefined as #snd_seq_real_time_t type.\nThe song tick is defined simply as a 32 bit integer,\ndefined as #snd_seq_tick_time_t type.\nThe time stored in an event record is a union of these two different\ntime values.\n\nNote that the time format used for real time events is very similar to\ntimeval struct used for Unix system time.\nThe absurd resolution of the timestamps allows us to perform very accurate\nconversions between songposition and real time. Round-off errors can be\nneglected.\n\nIf a timestamp with a\n<i>relative</i> timestamp is delivered to ALSA, the\nspecified timestamp will be used as an offset to the current time of the\nqueue the event is sent into.\nAn <i>absolute</i> timestamp is on the contrary the time\ncounted from the moment when the queue started.\n\nAn client that relies on these relative timestamps is the MIDI input port.\nAs each sequencer queue has it's own clock the only way to deliver events at\nthe right time is by using the relative timestamp format. When the event\narrives at the queue it is normalized to absolute format.\n\nThe timestamp format is specified in the flag bitfield masked by\n#SND_SEQ_TIME_STAMP_MASK.\nTo schedule the event in a real-time queue or in a tick queue,\nmacros #snd_seq_ev_schedule_real() and\n#snd_seq_ev_schedule_tick() are provided, respectively.\n\n\\subsection seq_ev_addr Source and destination addresses\n\nTo identify the source and destination of an event, the addressing field\ncontains a combination of client id and port id numbers, defined as\n#snd_seq_addr_t type.\nWhen an event is passed to sequencer from a client, sequencer fills\nsource.client field\nwith the sender's id automatically.\nIt is the responsibility of sender client to \nfill the port id of source.port and\nboth client and port of dest field.\n\nIf an existing address is set to the destination,\nthe event is simply delivered to it.\nWhen #SND_SEQ_ADDRESS_SUBSCRIBERS is set to the destination client id,\nthe event is delivered to all the clients connected to the source port.\n\n\nA sequencer core has two pre-defined system ports on the system client\n#SND_SEQ_CLIENT_SYSTEM: #SND_SEQ_PORT_SYSTEM_TIMER and #SND_SEQ_PORT_SYSTEM_ANNOUNCE.\nThe #SND_SEQ_PORT_SYSTEM_TIMER is the system timer port,\nand #SND_SEQ_PORT_SYSTEM_ANNOUNCE is the system\nannounce port.\nIn order to control a queue from a client, client should send a\nqueue-control event\nlike start, stop and continue queue, change tempo, etc.\nto the system timer port.\nThen the sequencer system handles the queue according to the received event.\nThis port supports subscription. The received timer events are \nbroadcasted to all subscribed clients.\n\nThe latter port does not receive messages but supports subscription.\nWhen each client or port is attached, detached or modified,\nan announcement is sent to subscribers from this port.\n\n\\subsection seq_ev_data Data storage type\n\nSome events like SYSEX message, however, need larger data space\nthan the standard data.\nFor such events, ALSA sequencer provides several different data storage types.\nThe data type is specified in the flag bits masked by #SND_SEQ_EVENT_LENGTH_MASK.\nThe following data types are available:\n\n\\par Fixed size data\nNormal events stores their parameters on\ndata field (12 byte).\nThe flag-bit type is  #SND_SEQ_EVENT_LENGTH_FIXED.\nA macro #snd_seq_ev_set_fixed() is provided to set this type.\n\n\\par Variable length data\nSYSEX or a returned error use this type.\nThe actual data is stored on an extra allocated space.\nOn sequencer kernel, the whole extra-data is duplicated, so that the event\ncan be scheduled on queue.\nThe data contains only the length and the\npointer of extra-data.\nThe flag-bit type is  #SND_SEQ_EVENT_LENGTH_VARIABLE.\nA macro #snd_seq_ev_set_variable() is provided to set this type.\n\n\\par User-space data\nThis type refers also an extra data space like variable length data,\nbut the extra-data is not duplicated but\nbut referred as a user-space data on kernel,\nso that it reduces the time and resource for transferring\nlarge bulk of data like synth sample wave.\nThis data type, however, can be used only for direct dispatch mode,\nand supposed to be used only for a special purpose like a bulk data\ntransfer.\nThe data length and pointer are stored also in\ndata.ext field as well as variable length data.\nThe flag-bit type is  #SND_SEQ_EVENT_LENGTH_VARUSR.\nA macro #snd_seq_ev_set_varusr() is provided to set this type.\n\n\\subsection seq_ev_sched Scheduling priority\n\nThere are two priorities for scheduling:\n\\par Normal priority\nIf an event with the same scheduling time is already present on the queue,\nthe new event is appended to the older.\n\\par High priority\nIf an event with the same scheduling time is already present on the queue,\nthe new event is inserted before others.\n\nThe scheduling priority is set in the flag bitfeld masked by #SND_SEQ_PRIORITY_MASK.\nA macro #snd_seq_ev_set_priority() is provided to set the mode type.\n\n\\section seq_queue Event Queues\n\\subsection seq_ev_control Creation of a queue\n\nCreating a queue is done usually by calling #snd_seq_alloc_queue.\nYou can create a queue with a certain name by #snd_seq_alloc_named_queue(), too.\n\\code\n// create a queue and return its id\nint my_queue(snd_seq_t *handle)\n{\n\treturn snd_seq_alloc_named_queue(handle, \"my queue\");\n}\n\\endcode\nThese functions are the wrapper to the function #snd_seq_create_queue().\nFor releasing the allocated queue, call #snd_seq_free_queue() with the\nobtained queue id.\n\nOnce when a queue is created, the two queues are associated to that\nqueue record in fact: one is the realtime queue and another is the\ntick queue.  These two queues are bound together to work\nsynchronously.  Hence, when you schedule an event, you have to choose\nwhich queue type is used as described in the section \\ref\nseq_ev_time.\n\n\\subsection seq_ev_tempo Setting queue tempo\n\nThe tempo (or the speed) of the scheduling queue is variable.\nIn the case of <i>tick</i> queue, the tempo is controlled\nin the manner of MIDI.  There are two parameters to define the\nactual tempo, PPQ (pulse per quarter note) and MIDI tempo.\nThe former defines the base resolution of the ticks, while\nthe latter defines the beat tempo in microseconds.\nAs default, 96 PPQ and 120 BPM are used, respectively.\nThat is, the tempo is set to 500000 (= 60 * 1000000 / 120).\nNote that PPQ cannot be changed while the queue is running.\nIt must be set before the queue is started.\n\nOn the other hand, in the case of <i>realtime</i> queue, the\ntime resolution is fixed to nanoseconds.  There is, however,\na parameter to change the speed of this queue, called <i>skew</i>.\nYou can make the queue faster or slower by setting the skew value\nbigger or smaller.  In the API, the skew is defined by two values,\nthe skew base and the skew value.  The actual skew is the fraction\nof them, <i>value/base</i>.  As default, the skew base is set to 16bit\n(0x10000) and the skew value is the identical, so that the queue is\nprocessed as well as in the real world.\n\nWhen the tempo of realtime queue is changed, the tempo of\nthe associated tick queue is changed together, too.\nThat's the reason why two queues are created always.\nThis feature can be used to synchronize the event queue with\nthe external synchronization source like SMPTE.  In such a case,\nthe realtime queue is skewed to match with the external source,\nso that both the realtime timestamp and the MIDI timestamp are\nsynchronized.\n\nFor setting these tempo parameters, use #snd_seq_queue_tempo_t record.\nFor example, to set the tempo of the queue <code>q</code> to\n48 PPQ, 60 BPM,\n\\code\nvoid set_tempo(snd_seq_t *handle)\n{\n        snd_seq_queue_tempo_t *tempo;\n        snd_seq_queue_tempo_alloca(&tempo);\n        snd_seq_queue_tempo_set_tempo(tempo, 1000000); // 60 BPM\n        snd_seq_queue_tempo_set_ppq(tempo, 48); // 48 PPQ\n        snd_seq_set_queue_tempo(handle, tempo);\n}\n\\endcode\n\nFor changing the (running) queue's tempo on the fly, you can either\nset the tempo via #snd_seq_set_queue_tempo() or send a MIDI tempo event\nto the system timer port.  For example,\n\\code\nint change_tempo(snd_seq_t *handle, int q, unsigned int tempo)\n{\n\tsnd_seq_event_t ev;\n\tsnd_seq_ev_clear(&ev);\n\tev.dest.client = SND_SEQ_CLIENT_SYSTEM;\n\tev.dest.port = SND_SEQ_PORT_SYSTEM_TIMER;\n\tev.source.client = my_client_id;\n\tev.source.port = my_port_id;\n\tev.queue = SND_SEQ_QUEUE_DIRECT; // no scheduling\n\tev.data.queue.queue = q;\t// affected queue id\n\tev.data.queue.value = tempo;\t// new tempo in microsec.\n\treturn snd_seq_event_output(handle, &ev);\n}\n\\endcode\nThere is a helper function to do this easily,\n#snd_seq_change_queue_tempo().\nSet NULL to the last argument, if you don't need any\nspecial settings.\n\nIn the above example, the tempo is changed immediately after\nthe buffer is flushed by #snd_seq_drain_output() call.\nYou can schedule the event in a certain queue so that the tempo\nchange happens at the scheduled time, too.\n\n\\subsection seq_ev_start Starting and stopping a queue\n\nTo start, stop, or continue a queue, you need to send a queue-control\nevent to the system timer port as well.  There are helper functions,\n#snd_seq_start_queue(), #snd_seq_stop_queue() and\n#snd_seq_continue_queue().\nNote that if the last argument of these functions is NULL, the\nevent is sent (i.e. operated) immediately after the buffer flush.\nIf you want to schedule the event at the certain time, set up\nthe event record and provide the pointer of that event record as the\nargument.\n\nOnly calling these functions doesn't deliver the event to the\nsequencer core but only put to the output buffer.  You'll need to\ncall #snd_seq_drain_output() eventually.\n\n\n\\section seq_subs_more More inside the subscription\n\n\\subsection seq_subs_perm Permissions\n\nEach ALSA port can have capability flags.\nThe most basic capability flags are\n#SND_SEQ_PORT_CAP_READ and #SND_SEQ_PORT_CAP_WRITE.\nThe former means that the port allows to send events to other ports,\nwhereas the latter capability means\nthat the port allows to receive events from other ports.\nYou may have noticed that meanings of \\c READ and \\c WRITE\nare permissions of the port from the viewpoint of other ports.\n\nFor allowing subscription from/to other clients, another capability\nflags must be set together with read/write capabilities above.\nFor allowing read and write subscriptions,\n#SND_SEQ_PORT_CAP_SUBS_READ and\n#SND_SEQ_PORT_CAP_SUBS_WRITE are used,\nrespectively.\nFor example, the port with MIDI input device always has\n#SND_SEQ_PORT_CAP_SUBS_READ capability,\nand the port with MIDI output device always has\n#SND_SEQ_PORT_CAP_SUBS_WRITE capability together with\n#SND_SEQ_PORT_CAP_READ and #SND_SEQ_PORT_CAP_WRITE capabilities,\nrespectively.\nObviously, these flags have no influence\nif \\c READ or \\c WRITE> capability is not set.\n\nNote that these flags are not necessary if the client subscribes itself\nto the specified port.\nFor example, when a port makes READ subscription\nto MIDI input port, this port must have #SND_SEQ_PORT_CAP_WRITE capability,\nbut no #SND_SEQ_PORT_CAP_SUBS_WRITE capability is required.\nOnly MIDI input port must have #SND_SEQ_PORT_CAP_SUBS_READ capability.\n\nAs default, the connection of ports via the third client is always allowed\nif proper read and write (subscription) capabilities are set both to the\nsource and destination ports.\nFor prohibiting this behavior, set a capability\n#SND_SEQ_PORT_CAP_NO_EXPORT to the port.\nIf this flag is set, subscription must be done by sender or receiver\nclient itself.\nIt is useful to avoid unexpected disconnection.\nThe ports which won't accept subscription should have this capability\nfor better security.\n\n\\subsection seq_subs_handle Subscription handlers\n\nIn ALSA library, subscription is done via\n#snd_seq_subscribe_port() function.\nIt takes the argument of #snd_seq_port_subscribe_t record pointer.\nSuppose that you have a client which will receive data from\na MIDI input device.  The source and destination addresses\nare like the below;\n\\code\nsnd_seq_addr_t sender, dest;\nsender.client = MIDI_input_client;\nsender.port = MIDI_input_port;\ndest.client = my_client;\ndest.port = my_port;\n\\endcode\nTo set these values as the connection call like this.\n\\code\nsnd_seq_port_subscribe_t *subs;\nsnd_seq_port_subscribe_alloca(&subs);\nsnd_seq_port_subscribe_set_sender(subs, &sender);\nsnd_seq_port_subscribe_set_dest(subs, &dest);\nsnd_seq_subscribe_port(handle, subs);\n\\endcode\n\nWhen the connection should be exclusively done only between\na certain pair, set <i>exclusive</i> attribute to the subscription\nrecord before calling #snd_seq_subscribe_port.\n\\code\nsnd_seq_port_subscribe_set_exclusive(subs, 1);\n\\endcode\nThe succeeding subscriptions will be refused.\n\nThe timestamp can be updated independently on each connection.\nWhen set up, the timestamp of incoming queue to the destination port\nis updated automatically to the time of the specified queue.\n\\code\nsnd_seq_port_subscribe_set_time_update(subs, 1);\nsnd_seq_port_subscribe_set_queue(subs, q);\n\\endcode\nFor getting the wallclock time (sec/nsec pair), set <i>real</i> attribute:\n\\code\nsnd_seq_port_subscribe_set_time_real(subs, 1);\n\\endcode\nOtherwise, the timestamp is stored in tick unit.\nThis feature is useful when receiving events from MIDI input device.\nThe event time is automatically set in the event record.\n\nNote that an outsider client may connect other ports.\nIn this case, however, the subscription may be refused\nif #SND_SEQ_PORT_CAP_NO_EXPORT capability is set in either sender or receiver port.\n\n\\section seq_subs_ex Examples of subscription\n\n\\subsection seq_subs_ex_capt Capture from keyboard\n\nAssume MIDI input port = 64:0, application port = 128:0, and\nqueue for timestamp = 1 with real-time stamp.\nThe application port must have capability #SND_SEQ_PORT_CAP_WRITE.\n\\code\nvoid capture_keyboard(snd_seq_t *seq)\n{\n        snd_seq_addr_t sender, dest;\n        snd_seq_port_subscribe_t *subs;\n        sender.client = 64;\n        sender.port = 0;\n        dest.client = 128;\n        dest.port = 0;\n        snd_seq_port_subscribe_alloca(&subs);\n        snd_seq_port_subscribe_set_sender(subs, &sender);\n        snd_seq_port_subscribe_set_dest(subs, &dest);\n        snd_seq_port_subscribe_set_queue(subs, 1);\n        snd_seq_port_subscribe_set_time_update(subs, 1);\n        snd_seq_port_subscribe_set_time_real(subs, 1);\n        snd_seq_subscribe_port(seq, subs);\n}\n\\endcode\n\n\\subsection seq_subs_ex_out Output to MIDI device\n\nAssume MIDI output port = 65:1 and application port = 128:0.\nThe application port must have capability #SND_SEQ_PORT_CAP_READ.\n\\code\nvoid subscribe_output(snd_seq_t *seq)\n{\n        snd_seq_addr_t sender, dest;\n        snd_seq_port_subscribe_t *subs;\n        sender.client = 128;\n        sender.port = 0;\n        dest.client = 65;\n        dest.port = 1;\n        snd_seq_port_subscribe_alloca(&subs);\n        snd_seq_port_subscribe_set_sender(subs, &sender);\n        snd_seq_port_subscribe_set_dest(subs, &dest);\n        snd_seq_subscribe_port(seq, subs);\n}\n\\endcode\nThis example can be simplified by using #snd_seq_connect_to() function.\n\\code\nvoid subscribe_output(snd_seq_t *seq)\n{\n        snd_seq_connect_to(seq, 0, 65, 1);\n}\n\\endcode\n\n\\subsection seq_subs_ex_arbit Arbitrary connection\n\nAssume connection from application 128:0 to 129:0,\nand that subscription is done by the third application (130:0).\nThe sender must have capabilities both\n#SND_SEQ_PORT_CAP_READ and\n#SND_SEQ_PORT_CAP_SUBS_READ,\nand the receiver\n#SND_SEQ_PORT_CAP_WRITE and\n#SND_SEQ_PORT_CAP_SUBS_WRITE, respectively.\n\\code\n// ..in the third application (130:0) ..\nvoid coupling(snd_seq_t *seq)\n{\n        snd_seq_addr_t sender, dest;\n        snd_seq_port_subscribe_t *subs;\n        sender.client = 128;\n        sender.port = 0;\n        dest.client = 129;\n        dest.port = 0;\n        snd_seq_port_subscribe_alloca(&subs);\n        snd_seq_port_subscribe_set_sender(subs, &sender);\n        snd_seq_port_subscribe_set_dest(subs, &dest);\n        snd_seq_subscribe_port(seq, subs);\n}\n\\endcode\n\n\\section seq_ex_event Event Processing\n\n\\subsection seq_ex_address Addressing\n\nNow, two ports are connected by subscription.  Then how to send events?\n\nThe subscribed port doesn't have to know the exact sender address.\nInstead, there is a special address for subscribers,\n#SND_SEQ_ADDRESS_SUBSCRIBERS.\nThe sender must set this value as the destination client.\nDestination port is ignored.\n\nThe other values in source and destination addresses are identical with\nthe normal event record.\nIf the event is scheduled, proper queue and timestamp values must be set.\n\nThere is a convenient function to set the address in an event record.\nIn order to set destination as subscribers, use\n#snd_seq_ev_set_subs().\n\n\\subsection Scheduled Delivery\n\nIf we send an event at the scheduled time <code>t</code> (tick)\non the queue <code>Q</code>,\nthe sender must set both schedule queue and time in the\nevent record.\nThe program appears like this:\n\\code\nvoid schedule_event(snd_seq_t *seq)\n{\n        snd_seq_event_t ev;\n\n        snd_seq_ev_clear(&ev);\n        snd_seq_ev_set_source(&ev, my_port);\n        snd_seq_ev_set_subs(&ev);\n        snd_seq_ev_schedule_tick(&ev, Q, 0, t);\n        ... // set event type, data, so on..\n\n        snd_seq_event_output(seq, &ev);\n        ...\n        snd_seq_drain_output(seq);  // if necessary\n}\n\\endcode\nOf course, you can use realtime stamp, too.\n\n\\subsection seq_ex_direct Direct Delivery\n\nIf the event is sent immediately without enqueued, the sender doesn't take\ncare of queue and timestamp.\nAs well as the case above, there is a function to set the direct delivery,\n#snd_seq_ev_set_direct().\nThe program can be more simplified as follows:\n\\code\nvoid direct_delivery(snd_seq_t *seq)\n{\n        snd_seq_event_t ev;\n\n        snd_seq_ev_clear(&ev);\n        snd_seq_ev_set_source(&ev, port);\n        snd_seq_ev_set_subs(&ev);\n        snd_seq_ev_set_direct(&ev);\n        ... // set event type, data, so on..\n\n        snd_seq_event_output(seq, &ev);\n        snd_seq_drain_output(seq);\n}\n\\endcode\nYou should flush event soon after output event.\nOtherwise, the event is enqueued on output queue of ALSA library\n(not in the kernel!), and will be never processed until\nthis queue becomes full.\n\n\\subsection seq_ex_filter Filter Application\n\nA typical filter program, which receives an event and sends it immediately\nafter some modification, will appear as following:\n\\code\nvoid event_filter(snd_seq_t *seq, snd_seq_event_t *ev)\n{\n        while (snd_seq_event_input(seq, &ev) >= 0) {\n                //.. modify input event ..\n\n                snd_seq_ev_set_source(ev, my_port);\n                snd_seq_ev_set_subs(ev);\n                snd_seq_ev_set_direct(ev);\n                snd_seq_event_output(seq, ev);\n                snd_seq_drain_output(seq);\n        }\n}\n\\endcode\n\n*/\n\n#include <sys/poll.h>\n#include \"seq_local.h\"\n\n/****************************************************************************\n *                                                                          *\n *                                seq.h                                     *\n *                              Sequencer                                   *\n *                                                                          *\n ****************************************************************************/\n\n/**\n * \\brief get identifier of sequencer handle\n * \\param seq sequencer handle\n * \\return ASCII identifier of sequencer handle\n *\n * Returns the ASCII identifier of the given sequencer handle. It's the same\n * identifier specified in snd_seq_open().\n *\n * \\sa snd_seq_open()\n */\nconst char *snd_seq_name(snd_seq_t *seq)\n{\n\tassert(seq);\n\treturn seq->name;\n}\n\n/**\n * \\brief get type of sequencer handle\n * \\param seq sequencer handle\n * \\return type of sequencer handle\n *\n * Returns the type #snd_seq_type_t of the given sequencer handle.\n *\n * \\sa snd_seq_open()\n */\nsnd_seq_type_t snd_seq_type(snd_seq_t *seq)\n{\n\tassert(seq);\n\treturn seq->type;\n}\n\nstatic int snd_seq_open_conf(snd_seq_t **seqp, const char *name,\n\t\t\t     snd_config_t *seq_root, snd_config_t *seq_conf,\n\t\t\t     int streams, int mode)\n{\n\tconst char *str;\n\tchar buf[256];\n\tint err;\n\tsnd_config_t *conf, *type_conf = NULL;\n\tsnd_config_iterator_t i, next;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL;\n\tint (*open_func)(snd_seq_t **, const char *,\n\t\t\t snd_config_t *, snd_config_t *, \n\t\t\t int, int) = NULL;\n#ifndef PIC\n\textern void *snd_seq_open_symbols(void);\n#endif\n\tvoid *h = NULL;\n\tif (snd_config_get_type(seq_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tif (name)\n\t\t\tSNDERR(\"Invalid type for SEQ %s definition\", name);\n\t\telse\n\t\t\tSNDERR(\"Invalid type for SEQ definition\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_search(seq_conf, \"type\", &conf);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_id(conf, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(conf, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(seq_root, \"seq_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for SEQ type %s definition\", str);\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_seq_%s_open\", str);\n\t}\n#ifndef PIC\n\tsnd_seq_open_symbols();\n#endif\n\th = snd_dlopen(lib, RTLD_NOW);\n\tif (h)\n\t\topen_func = snd_dlsym(h, open_name, SND_DLSYM_VERSION(SND_SEQ_DLSYM_VERSION));\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (! err) {\n\t\terr = open_func(seqp, name, seq_root, seq_conf, streams, mode);\n\t\tif (err < 0)\n\t\t\tsnd_dlclose(h);\n\t\telse\n\t\t\t(*seqp)->dl_handle = h;\n\t}\n\treturn err;\n}\n\nstatic int snd_seq_open_noupdate(snd_seq_t **seqp, snd_config_t *root,\n\t\t\t\t const char *name, int streams, int mode,\n\t\t\t\t int hop)\n{\n\tint err;\n\tsnd_config_t *seq_conf;\n\terr = snd_config_search_definition(root, \"seq\", name, &seq_conf);\n\tif (err < 0) {\n\t\tSNDERR(\"Unknown SEQ %s\", name);\n\t\treturn err;\n\t}\n\tsnd_config_set_hop(seq_conf, hop);\n\terr = snd_seq_open_conf(seqp, name, root, seq_conf, streams, mode);\n\tsnd_config_delete(seq_conf);\n\treturn err;\n}\n\n\n/**\n * \\brief Open the ALSA sequencer\n *\n * \\param seqp Pointer to a snd_seq_t pointer.  This pointer must be\n * kept and passed to most of the other sequencer functions.\n * \\param name The sequencer's \"name\".  This is \\em not a name you make\n * up for your own purposes; it has special significance to the ALSA\n * library.  Usually you need to pass \\c \"default\" here.\n * \\param streams The read/write mode of the sequencer.  Can be one of\n * three values:\n * - #SND_SEQ_OPEN_OUTPUT - open the sequencer for output only\n * - #SND_SEQ_OPEN_INPUT - open the sequencer for input only\n * - #SND_SEQ_OPEN_DUPLEX - open the sequencer for output and input\n * \\note Internally, these are translated to \\c O_WRONLY, \\c O_RDONLY and\n * \\c O_RDWR respectively and used as the second argument to the C library\n * open() call.\n * \\param mode Optional modifier.  Can be either 0, or\n * #SND_SEQ_NONBLOCK, which will make read/write operations\n * non-blocking.  This can also be set later using #snd_seq_nonblock().\n * \\return 0 on success otherwise a negative error code\n *\n * Creates a new handle and opens a connection to the kernel\n * sequencer interface.\n * After a client is created successfully, an event\n * with #SND_SEQ_EVENT_CLIENT_START is broadcast to announce port.\n *\n * \\sa snd_seq_open_lconf(), snd_seq_close(), snd_seq_type(), snd_seq_name(),\n *     snd_seq_nonblock(), snd_seq_client_id()\n */\nint snd_seq_open(snd_seq_t **seqp, const char *name, \n\t\t int streams, int mode)\n{\n\tsnd_config_t *top;\n\tint err;\n\n\tassert(seqp && name);\n\terr = snd_config_update_ref(&top);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_seq_open_noupdate(seqp, top, name, streams, mode, 0);\n\tsnd_config_unref(top);\n\treturn err;\n}\n\n/**\n * \\brief Open the ALSA sequencer using local configuration\n *\n * \\param seqp Pointer to a snd_seq_t pointer.\n * \\param name The name to open\n * \\param streams The read/write mode of the sequencer.\n * \\param mode Optional modifier\n * \\param lconf Local configuration\n * \\return 0 on success otherwise a negative error code\n *\n * See the snd_seq_open() function for further details. The extension\n * is that the given configuration is used to resolve abstract name.\n *\n * \\sa snd_seq_open()\n */\nint snd_seq_open_lconf(snd_seq_t **seqp, const char *name, \n\t\t       int streams, int mode, snd_config_t *lconf)\n{\n\tassert(seqp && name && lconf);\n\treturn snd_seq_open_noupdate(seqp, lconf, name, streams, mode, 0);\n}\n\n#ifndef DOC_HIDDEN\nint _snd_seq_open_lconf(snd_seq_t **seqp, const char *name, \n\t\t\tint streams, int mode, snd_config_t *lconf,\n\t\t\tsnd_config_t *parent_conf)\n{\n\tint hop;\n\tassert(seqp && name && lconf);\n\tif ((hop = snd_config_check_hop(parent_conf)) < 0)\n\t\treturn hop;\n\treturn snd_seq_open_noupdate(seqp, lconf, name, streams, mode, hop + 1);\n}\n#endif\n\n/**\n * \\brief Close the sequencer\n * \\param seq Handle returned from #snd_seq_open()\n * \\return 0 on success otherwise a negative error code\n *\n * Closes the sequencer client and releases its resources.\n * After a client is closed, an event with\n * #SND_SEQ_EVENT_CLIENT_EXIT is broadcast to announce port.\n * The connection between other clients are disconnected.\n * Call this just before exiting your program.\n *\n * \\sa snd_seq_close()\n */\nint snd_seq_close(snd_seq_t *seq)\n{\n\tint err;\n\tassert(seq);\n\terr = seq->ops->close(seq);\n\tif (seq->dl_handle)\n\t\tsnd_dlclose(seq->dl_handle);\n\tfree(seq->obuf);\n\tfree(seq->ibuf);\n\tfree(seq->tmpbuf);\n\tfree(seq->name);\n\tfree(seq);\n\treturn err;\n}\n\n/**\n * \\brief Returns the number of poll descriptors\n * \\param seq sequencer handle\n * \\param events the poll events to be checked (\\c POLLIN and \\c POLLOUT)\n * \\return the number of poll descriptors.\n *\n * Get the number of poll descriptors.  The polling events to be checked\n * can be specified by the second argument.  When both input and output\n * are checked, pass \\c POLLIN|POLLOUT\n *\n * \\sa snd_seq_poll_descriptors()\n */\nint snd_seq_poll_descriptors_count(snd_seq_t *seq, short events)\n{\n\tint result = 0;\n\tassert(seq);\n\tif (events & POLLIN) {\n\t\tassert(seq->streams & SND_SEQ_OPEN_INPUT);\n\t\tresult++;\n\t}\n\tif (events & POLLOUT) {\n\t\tassert(seq->streams & SND_SEQ_OPEN_OUTPUT);\n\t\tresult++;\n\t}\n\treturn result ? 1 : 0;\n}\n\n/**\n * \\brief Get poll descriptors\n * \\param seq sequencer handle\n * \\param pfds array of poll descriptors\n * \\param space space in the poll descriptor array\n * \\param events polling events to be checked (\\c POLLIN and \\c POLLOUT)\n * \\return count of filled descriptors\n *\n * Get poll descriptors assigned to the sequencer handle.\n * Since a sequencer handle can duplex streams, you need to set which direction(s)\n * is/are polled in \\a events argument.  When \\c POLLIN bit is specified,\n * the incoming events to the ports are checked.\n *\n * To check the returned poll-events, call #snd_seq_poll_descriptors_revents()\n * instead of reading the pollfd structs directly.\n *\n * \\sa snd_seq_poll_descriptors_count(), snd_seq_poll_descriptors_revents()\n */\nint snd_seq_poll_descriptors(snd_seq_t *seq, struct pollfd *pfds, unsigned int space, short events)\n{\n\tshort revents = 0;\n\n\tassert(seq);\n\tif ((events & POLLIN) && space >= 1) {\n\t\tassert(seq->streams & SND_SEQ_OPEN_INPUT);\n\t\trevents |= POLLIN|POLLERR|POLLNVAL;\n\t}\n\tif ((events & POLLOUT) && space >= 1) {\n\t\tassert(seq->streams & SND_SEQ_OPEN_OUTPUT);\n\t\trevents |= POLLOUT|POLLERR|POLLNVAL;\n\t}\n\tif (!revents)\n\t\treturn 0;\n\tpfds->fd = seq->poll_fd;\n\tpfds->events = revents;\n\treturn 1;\n}\n\n/**\n * \\brief get returned events from poll descriptors\n * \\param seq sequencer handle\n * \\param pfds array of poll descriptors\n * \\param nfds count of poll descriptors\n * \\param revents returned events\n * \\return zero if success, otherwise a negative error code\n *\n * \\sa snd_seq_poll_descriptors()\n */\nint snd_seq_poll_descriptors_revents(snd_seq_t *seq, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)\n{\n        assert(seq && pfds && revents);\n        if (nfds == 1) {\n                *revents = pfds->revents;\n                return 0;\n        }\n        return -EINVAL;\n}\n\n/**\n * \\brief Set nonblock mode\n * \\param seq sequencer handle\n * \\param nonblock 0 = block, 1 = nonblock mode\n * \\return 0 on success otherwise a negative error code\n *\n * Change the blocking mode of the given client.\n * In block mode, the client falls into sleep when it fills the\n * output memory pool with full events.  The client will be woken up\n * after a certain amount of free space becomes available.\n *\n * \\sa snd_seq_open()\n */\nint snd_seq_nonblock(snd_seq_t *seq, int nonblock)\n{\n\tint err;\n\tassert(seq);\n\terr = seq->ops->nonblock(seq, nonblock);\n\tif (err < 0)\n\t\treturn err;\n\tif (nonblock)\n\t\tseq->mode |= SND_SEQ_NONBLOCK;\n\telse\n\t\tseq->mode &= ~SND_SEQ_NONBLOCK;\n\treturn 0;\n}\n\n/**\n * \\brief Get the client id\n * \\param seq sequencer handle\n * \\return the client id\n *\n * Returns the id of the specified client.\n * If an error occurs, function returns the negative error code.\n * A client id is necessary to inquiry or to set the client information.\n * A user client is assigned from 128 to 191.\n *\n * \\sa snd_seq_open()\n */\nint snd_seq_client_id(snd_seq_t *seq)\n{\n\tassert(seq);\n\treturn seq->client;\n}\n\n/**\n * \\brief Return the size of output buffer\n * \\param seq sequencer handle\n * \\return the size of output buffer in bytes\n *\n * Obtains the size of output buffer.\n * This buffer is used to store decoded byte-stream of output events\n * before transferring to sequencer.\n *\n * \\sa snd_seq_set_output_buffer_size()\n */\nsize_t snd_seq_get_output_buffer_size(snd_seq_t *seq)\n{\n\tassert(seq);\n\tif (!seq->obuf)\n\t\treturn 0;\n\treturn seq->obufsize;\n}\n\n/**\n * \\brief Return the size of input buffer\n * \\param seq sequencer handle\n * \\return the size of input buffer in bytes\n *\n * Obtains the size of input buffer.\n * This buffer is used to read byte-stream of input events from sequencer.\n *\n * \\sa snd_seq_set_input_buffer_size()\n */\nsize_t snd_seq_get_input_buffer_size(snd_seq_t *seq)\n{\n\tassert(seq);\n\tif (!seq->ibuf)\n\t\treturn 0;\n\treturn seq->ibufsize * sizeof(snd_seq_event_t);\n}\n\n/**\n * \\brief Change the size of output buffer\n * \\param seq sequencer handle\n * \\param size the size of output buffer to be changed in bytes\n * \\return 0 on success otherwise a negative error code\n *\n * Changes the size of output buffer.\n *\n * \\sa snd_seq_get_output_buffer_size()\n */\nint snd_seq_set_output_buffer_size(snd_seq_t *seq, size_t size)\n{\n\tassert(seq && seq->obuf);\n\tassert(size >= sizeof(snd_seq_event_t));\n\tsnd_seq_drop_output(seq);\n\tif (size != seq->obufsize) {\n\t\tchar *newbuf;\n\t\tnewbuf = calloc(1, size);\n\t\tif (newbuf == NULL)\n\t\t\treturn -ENOMEM;\n\t\tfree(seq->obuf);\n\t\tseq->obuf = newbuf;\n\t\tseq->obufsize = size;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Resize the input buffer\n * \\param seq sequencer handle\n * \\param size the size of input buffer to be changed in bytes\n * \\return 0 on success otherwise a negative error code\n *\n * Changes the size of input buffer.\n *\n * \\sa snd_seq_get_input_buffer_size()\n */\nint snd_seq_set_input_buffer_size(snd_seq_t *seq, size_t size)\n{\n\tassert(seq && seq->ibuf);\n\tassert(size >= sizeof(snd_seq_event_t));\n\tsnd_seq_drop_input(seq);\n\tsize = (size + sizeof(snd_seq_event_t) - 1) / sizeof(snd_seq_event_t);\n\tif (size != seq->ibufsize) {\n\t\tsnd_seq_event_t *newbuf;\n\t\tnewbuf = calloc(sizeof(snd_seq_event_t), size);\n\t\tif (newbuf == NULL)\n\t\t\treturn -ENOMEM;\n\t\tfree(seq->ibuf);\n\t\tseq->ibuf = newbuf;\n\t\tseq->ibufsize = size;\n\t}\n\treturn 0;\n}\n\n\n/**\n * \\brief Get size of #snd_seq_system_info_t\n * \\return size in bytes\n */\nsize_t snd_seq_system_info_sizeof()\n{\n\treturn sizeof(snd_seq_system_info_t);\n}\n\n/**\n * \\brief Allocate an empty #snd_seq_system_info_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_system_info_malloc(snd_seq_system_info_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_system_info_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief Frees a previously allocated #snd_seq_system_info_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_system_info_free(snd_seq_system_info_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief Copy one #snd_seq_system_info_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_system_info_copy(snd_seq_system_info_t *dst, const snd_seq_system_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get maximum number of queues\n * \\param info #snd_seq_system_info_t container\n * \\return maximum number of queues\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_queues(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->queues;\n}\n\n/**\n * \\brief Get maximum number of clients\n * \\param info #snd_seq_system_info_t container\n * \\return maximum number of clients\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_clients(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->clients;\n}\n\n/**\n * \\brief Get maximum number of ports\n * \\param info #snd_seq_system_info_t container\n * \\return maximum number of ports\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_ports(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->ports;\n}\n\n/**\n * \\brief Get maximum number of channels\n * \\param info #snd_seq_system_info_t container\n * \\return maximum number of channels\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_channels(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->channels;\n}\n\n/**\n * \\brief Get the current number of clients\n * \\param info #snd_seq_system_info_t container\n * \\return current number of clients\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_cur_clients(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->cur_clients;\n}\n\n/**\n * \\brief Get the current number of queues\n * \\param info #snd_seq_system_info_t container\n * \\return current number of queues\n *\n * \\sa snd_seq_system_info()\n */\nint snd_seq_system_info_get_cur_queues(const snd_seq_system_info_t *info)\n{\n\tassert(info);\n\treturn info->cur_queues;\n}\n\n/**\n * \\brief obtain the sequencer system information\n * \\param seq sequencer handle\n * \\param info the pointer to be stored\n * \\return 0 on success otherwise a negative error code\n *\n * Stores the global system information of ALSA sequencer system.\n * The returned data contains\n * the maximum available numbers of queues, clients, ports and channels.\n */\nint snd_seq_system_info(snd_seq_t *seq, snd_seq_system_info_t * info)\n{\n\tassert(seq && info);\n\treturn seq->ops->system_info(seq, info);\n}\n\n\n/*----------------------------------------------------------------*/\n\n/**\n * \\brief get size of #snd_seq_client_info_t\n * \\return size in bytes\n */\nsize_t snd_seq_client_info_sizeof()\n{\n\treturn sizeof(snd_seq_client_info_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_client_info_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_client_info_malloc(snd_seq_client_info_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_client_info_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_client_info_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_client_info_free(snd_seq_client_info_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_client_info_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_client_info_copy(snd_seq_client_info_t *dst, const snd_seq_client_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get client id of a client_info container\n * \\param info client_info container\n * \\return client id\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_set_client(), snd_seq_client_id()\n */\nint snd_seq_client_info_get_client(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->client;\n}\n\n/**\n * \\brief Get client type of a client_info container\n * \\param info client_info container\n * \\return client type\n *\n * The client type is either #SND_SEQ_KERNEL_CLIENT or #SND_SEQ_USER_CLIENT\n * for kernel or user client respectively.\n *\n * \\sa snd_seq_get_client_info()\n */\nsnd_seq_client_type_t snd_seq_client_info_get_type(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->type;\n}\n\n/**\n * \\brief Get the name of a client_info container\n * \\param info client_info container\n * \\return name string\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_set_name()\n */\nconst char *snd_seq_client_info_get_name(snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->name;\n}\n\n/**\n * \\brief Get the broadcast filter usage of a client_info container\n * \\param info client_info container\n * \\return 1 if broadcast is accepted\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_set_broadcast_filter()\n */\nint snd_seq_client_info_get_broadcast_filter(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn (info->filter & SNDRV_SEQ_FILTER_BROADCAST) ? 1 : 0;\n}\n\n/**\n * \\brief Get the error-bounce usage of a client_info container\n * \\param info client_info container\n * \\return 1 if error-bounce is enabled\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_set_error_bounce()\n */\nint snd_seq_client_info_get_error_bounce(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn (info->filter & SNDRV_SEQ_FILTER_BOUNCE) ? 1 : 0;\n}\n\n/**\n * \\brief Get the sound card number.\n * \\param info client_info container\n * \\return card number or -1 if value is not available.\n *\n * Only available for #SND_SEQ_KERNEL_CLIENT clients.\n *\n * The card number can be used to query state about the hardware\n * device providing this client, by concatenating <code>\"hw:CARD=\"</code>\n * with the card number and using it as the <code>name</code> parameter\n * to #snd_ctl_open().\n *\n * \\note\n * The return value of -1 is returned for two different conditions: when the\n * running kernel does not support this operation, and when the client\n * does not have a hardware card attached. See\n * #snd_seq_client_info_get_pid() for a way to determine if the\n * currently running kernel has support for this operation.\n *\n * \\sa snd_seq_client_info_get_pid(),\n *     snd_card_get_name(),\n *     snd_card_get_longname(),\n *     snd_ctl_open(),\n *     snd_ctl_card_info()\n */\nint snd_seq_client_info_get_card(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->card;\n}\n\n/**\n * \\brief Get the owning PID.\n * \\param info client_info container\n * \\return pid or -1 if value is not available.\n *\n * Only available for #SND_SEQ_USER_CLIENT clients.\n *\n * \\note\n * The functionality for getting a client's PID and getting a\n * client's card was added to the kernel at the same time, so you can\n * use this function to determine if the running kernel\n * supports reporting these values. If your own client has a valid\n * PID as reported by this function, then the running kernel supports\n * both #snd_seq_client_info_get_card() and #snd_seq_client_info_get_pid().\n *\n * \\note\n * Example code for determining kernel support:\n * \\code\n *   int is_get_card_or_pid_supported(snd_seq_t *seq)\n *   {\n *   \tsnd_seq_client_info_t *my_client_info;\n *   \tsnd_seq_client_info_alloca(&my_client_info);\n *   \tsnd_seq_get_client_info(seq, my_client_info);\n *   \treturn snd_seq_client_info_get_pid(my_client_info) != -1;\n *   }\n * \\endcode\n *\n * \\sa snd_seq_client_info_get_card()\n */\nint snd_seq_client_info_get_pid(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->pid;\n}\n\n/**\n * \\brief (DEPRECATED) Get the event filter bitmap of a client_info container\n * \\param info client_info container\n * \\return NULL if no event filter, or pointer to event filter bitmap\n *\n * Use #snd_seq_client_info_event_filter_check() instead.\n *\n * \\sa snd_seq_client_info_event_filter_add(),\n *     snd_seq_client_info_event_filter_del(),\n *     snd_seq_client_info_event_filter_check(),\n *     snd_seq_client_info_event_filter_clear(),\n *     snd_seq_get_client_info()\n */\nconst unsigned char *snd_seq_client_info_get_event_filter(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\tif (info->filter & SNDRV_SEQ_FILTER_USE_EVENT)\n\t\treturn info->event_filter;\n\telse\n\t\treturn NULL;\n}\n\n/**\n * \\brief Disable event filtering of a client_info container\n * \\param info client_info container\n *\n * Remove all event types added with #snd_seq_client_info_event_filter_add and clear\n * the event filtering flag of this client_info container.\n * \n * \\sa snd_seq_client_info_event_filter_add(),\n *     snd_seq_client_info_event_filter_del(),\n *     snd_seq_client_info_event_filter_check(),\n *     snd_seq_get_client_info(),\n *     snd_seq_set_client_info()\n */\nvoid snd_seq_client_info_event_filter_clear(snd_seq_client_info_t *info)\n{\n       assert(info);\n       info->filter &= ~SNDRV_SEQ_FILTER_USE_EVENT;\n       memset(info->event_filter, 0, sizeof(info->event_filter));\n}\n\n/**\n * \\brief Add an event type to the event filtering of a client_info container\n * \\param info client_info container\n * \\param event_type event type to be added\n * \n * Set the event filtering flag of this client_info and add the specified event type to the \n * filter bitmap of this client_info container.\n *\n * \\sa snd_seq_get_client_info(),\n *     snd_seq_set_client_info(),\n *     snd_seq_client_info_event_filter_del(),\n *     snd_seq_client_info_event_filter_check(),\n *     snd_seq_client_info_event_filter_clear()\n */\nvoid snd_seq_client_info_event_filter_add(snd_seq_client_info_t *info, int event_type)\n{\n       assert(info);\n       info->filter |= SNDRV_SEQ_FILTER_USE_EVENT;\n       snd_seq_set_bit(event_type, info->event_filter);\n}\n\n/**\n * \\brief Remove an event type from the event filtering of a client_info container\n * \\param info client_info container\n * \\param event_type event type to be removed\n *\n * Removes the specified event from the filter bitmap of this client_info container. It will\n * not clear the event filtering flag, use #snd_seq_client_info_event_filter_clear instead.\n *\n * \\sa snd_seq_get_client_info(),\n *     snd_seq_set_client_info(),\n *     snd_seq_client_info_event_filter_add(),\n *     snd_seq_client_info_event_filter_check(),\n *     snd_seq_client_info_event_filter_clear()\n */\nvoid snd_seq_client_info_event_filter_del(snd_seq_client_info_t *info, int event_type)\n{\n       assert(info);\n       snd_seq_unset_bit(event_type, info->event_filter);\n}\n\n/**\n * \\brief Check if an event type is present in the event filtering of a client_info container\n * \\param info client_info container\n * \\param event_type event type to be checked\n * \\return 1 if the event type is present, 0 otherwise\n *\n * Test if the event type is in the filter bitmap of this client_info container.\n *\n * \\sa snd_seq_get_client_info(),\n *     snd_seq_set_client_info(),\n *     snd_seq_client_info_event_filter_add(),\n *     snd_seq_client_info_event_filter_del(),\n *     snd_seq_client_info_event_filter_clear()\n */\nint snd_seq_client_info_event_filter_check(snd_seq_client_info_t *info, int event_type)\n{\n       assert(info);\n       return snd_seq_get_bit(event_type, info->event_filter);\n} \n\n/**\n * \\brief Get the number of opened ports of a client_info container\n * \\param info client_info container\n * \\return number of opened ports\n *\n * \\sa snd_seq_get_client_info()\n */\nint snd_seq_client_info_get_num_ports(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->num_ports;\n}\n\n/**\n * \\brief Get the number of lost events of a client_info container\n * \\param info client_info container\n * \\return number of lost events\n *\n * \\sa snd_seq_get_client_info()\n */\nint snd_seq_client_info_get_event_lost(const snd_seq_client_info_t *info)\n{\n\tassert(info);\n\treturn info->event_lost;\n}\n\n/**\n * \\brief Set the client id of a client_info container\n * \\param info client_info container\n * \\param client client id\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_get_client()\n */\nvoid snd_seq_client_info_set_client(snd_seq_client_info_t *info, int client)\n{\n\tassert(info);\n\tinfo->client = client;\n}\n\n/**\n * \\brief Set the name of a client_info container\n * \\param info client_info container\n * \\param name name string\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_get_name(),\n *     snd_seq_set_client_name()\n */\nvoid snd_seq_client_info_set_name(snd_seq_client_info_t *info, const char *name)\n{\n\tassert(info && name);\n\tstrncpy(info->name, name, sizeof(info->name));\n}\n\n/**\n * \\brief Set the broadcast filter usage of a client_info container\n * \\param info client_info container\n * \\param val non-zero if broadcast is accepted\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_get_broadcast_filter()\n */\nvoid snd_seq_client_info_set_broadcast_filter(snd_seq_client_info_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->filter |= SNDRV_SEQ_FILTER_BROADCAST;\n\telse\n\t\tinfo->filter &= ~SNDRV_SEQ_FILTER_BROADCAST;\n}\n\n/**\n * \\brief Set the error-bounce usage of a client_info container\n * \\param info client_info container\n * \\param val non-zero if error is bounced\n *\n * \\sa snd_seq_get_client_info(), snd_seq_client_info_get_error_bounce()\n */\nvoid snd_seq_client_info_set_error_bounce(snd_seq_client_info_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->filter |= SNDRV_SEQ_FILTER_BOUNCE;\n\telse\n\t\tinfo->filter &= ~SNDRV_SEQ_FILTER_BOUNCE;\n}\n\n/**\n * \\brief (DEPRECATED) Set the event filter bitmap of a client_info container\n * \\param info client_info container\n * \\param filter event filter bitmap, pass NULL for no event filtering\n *\n * Use #snd_seq_client_info_event_filter_add instead.\n *\n * \\sa snd_seq_client_info_event_filter_add(),\n *     snd_seq_client_info_event_filter_del(),\n *     snd_seq_client_info_event_filter_check(),\n *     snd_seq_client_info_event_filter_clear(),\n *     snd_seq_set_client_info()\n */\nvoid snd_seq_client_info_set_event_filter(snd_seq_client_info_t *info, unsigned char *filter)\n{\n\tassert(info);\n\tif (! filter)\n\t\tinfo->filter &= ~SNDRV_SEQ_FILTER_USE_EVENT;\n\telse {\n\t\tinfo->filter |= SNDRV_SEQ_FILTER_USE_EVENT;\n\t\tmemcpy(info->event_filter, filter, sizeof(info->event_filter));\n\t}\n}\n\n\n/**\n * \\brief obtain the information of the given client\n * \\param seq sequencer handle\n * \\param client client id\n * \\param info the pointer to be stored\n * \\return 0 on success otherwise a negative error code\n * \n * Obtains the information of the client with a client id specified by\n * info argument.\n * The obtained information is written on info parameter.\n *\n * \\sa snd_seq_get_client_info()\n */\nint snd_seq_get_any_client_info(snd_seq_t *seq, int client, snd_seq_client_info_t *info)\n{\n\tassert(seq && info && client >= 0);\n\tmemset(info, 0, sizeof(snd_seq_client_info_t));\n\tinfo->client = client;\n\treturn seq->ops->get_client_info(seq, info);\n}\n\n/**\n * \\brief obtain the current client information\n * \\param seq sequencer handle\n * \\param info the pointer to be stored\n * \\return 0 on success otherwise a negative error code\n *\n * Obtains the information of the current client stored on info.\n * client and type fields are ignored.\n *\n * \\sa snd_seq_get_any_client_info(), snd_seq_set_client_info(),\n *     snd_seq_query_next_client()\n */\nint snd_seq_get_client_info(snd_seq_t *seq, snd_seq_client_info_t *info)\n{\n\treturn snd_seq_get_any_client_info(seq, seq->client, info);\n}\n\n/**\n * \\brief set the current client information\n * \\param seq sequencer handle\n * \\param info the client info data to set\n * \\return 0 on success otherwise a negative error code\n *\n * Obtains the information of the current client stored on info.\n * client and type fields are ignored.\n *\n * \\sa snd_seq_get_client_info()\n */\nint snd_seq_set_client_info(snd_seq_t *seq, snd_seq_client_info_t *info)\n{\n\tassert(seq && info);\n\tinfo->client = seq->client;\n\tinfo->type = USER_CLIENT;\n\treturn seq->ops->set_client_info(seq, info);\n}\n\n/**\n * \\brief query the next client\n * \\param seq sequencer handle\n * \\param info query pattern and result\n *\n * Queries the next client.\n * The search begins at the client with an id one greater than\n * client field in info.\n * If a client is found, its attributes are stored in info,\n * and zero is returned.\n * Otherwise returns a negative error code.\n *\n * \\sa snd_seq_get_any_client_info()\n */\nint snd_seq_query_next_client(snd_seq_t *seq, snd_seq_client_info_t *info)\n{\n\tassert(seq && info);\n\treturn seq->ops->query_next_client(seq, info);\n}\n\n\n/*----------------------------------------------------------------*/\n\n\n/*\n * Port\n */\n\n/**\n * \\brief get size of #snd_seq_port_info_t\n * \\return size in bytes\n */\nsize_t snd_seq_port_info_sizeof()\n{\n\treturn sizeof(snd_seq_port_info_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_port_info_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_port_info_malloc(snd_seq_port_info_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_port_info_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_port_info_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_port_info_free(snd_seq_port_info_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_port_info_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_port_info_copy(snd_seq_port_info_t *dst, const snd_seq_port_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get client id of a port_info container\n * \\param info port_info container\n * \\return client id\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_client()\n */\nint snd_seq_port_info_get_client(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->addr.client;\n}\n\n/**\n * \\brief Get port id of a port_info container\n * \\param info port_info container\n * \\return port id\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_port()\n */\nint snd_seq_port_info_get_port(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->addr.port;\n}\n\n/**\n * \\brief Get client/port address of a port_info container\n * \\param info port_info container\n * \\return client/port address pointer\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_addr()\n */\nconst snd_seq_addr_t *snd_seq_port_info_get_addr(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *) &info->addr;\n}\n\n/**\n * \\brief Get the name of a port_info container\n * \\param info port_info container\n * \\return name string\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_name()\n */\nconst char *snd_seq_port_info_get_name(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->name;\n}\n\n/**\n * \\brief Get the capability bits of a port_info container\n * \\param info port_info container\n * \\return capability bits\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_capability()\n */\nunsigned int snd_seq_port_info_get_capability(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->capability;\n}\n\n/**\n * \\brief Get the type bits of a port_info container\n * \\param info port_info container\n * \\return port type bits\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_type()\n */\nunsigned int snd_seq_port_info_get_type(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->type;\n}\n\n/**\n * \\brief Get the number of read subscriptions of a port_info container\n * \\param info port_info container\n * \\return number of read subscriptions\n *\n * \\sa snd_seq_get_port_info()\n */\nint snd_seq_port_info_get_read_use(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->read_use;\n}\n\n/**\n * \\brief Get the number of write subscriptions of a port_info container\n * \\param info port_info container\n * \\return number of write subscriptions\n *\n * \\sa snd_seq_get_port_info()\n */\nint snd_seq_port_info_get_write_use(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->write_use;\n}\n\n/**\n * \\brief Get the midi channels of a port_info container\n * \\param info port_info container\n * \\return number of midi channels (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_midi_channels()\n */\nint snd_seq_port_info_get_midi_channels(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->midi_channels;\n}\n\n/**\n * \\brief Get the midi voices of a port_info container\n * \\param info port_info container\n * \\return number of midi voices (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_midi_voices()\n */\nint snd_seq_port_info_get_midi_voices(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->midi_voices;\n}\n\n/**\n * \\brief Get the synth voices of a port_info container\n * \\param info port_info container\n * \\return number of synth voices (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_synth_voices()\n */\nint snd_seq_port_info_get_synth_voices(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->synth_voices;\n}\n\n/**\n * \\brief Get the port-specified mode of a port_info container\n * \\param info port_info container\n * \\return 1 if port id is specified at creation\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_port_specified()\n */\nint snd_seq_port_info_get_port_specified(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_FLG_GIVEN_PORT) ? 1 : 0;\n}\n\n/**\n * \\brief Get the time-stamping mode of the given port in a port_info container\n * \\param info port_info container\n * \\return 1 if the port updates timestamps of incoming events\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_timestamping()\n */\nint snd_seq_port_info_get_timestamping(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_FLG_TIMESTAMP) ? 1 : 0;\n}\n\n/**\n * \\brief Get whether the time-stamping of the given port is real-time mode\n * \\param info port_info container\n * \\return 1 if the time-stamping is in the real-time mode\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_timestamp_real()\n */\nint snd_seq_port_info_get_timestamp_real(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_FLG_TIME_REAL) ? 1 : 0;\n}\n\n/**\n * \\brief Get the queue id to update timestamps\n * \\param info port_info container\n * \\return the queue id to get the timestamps\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_set_timestamp_queue()\n */\nint snd_seq_port_info_get_timestamp_queue(const snd_seq_port_info_t *info)\n{\n\tassert(info);\n\treturn info->time_queue;\n}\n\n/**\n * \\brief Set the client id of a port_info container\n * \\param info port_info container\n * \\param client client id\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_client()\n */\nvoid snd_seq_port_info_set_client(snd_seq_port_info_t *info, int client)\n{\n\tassert(info);\n\tinfo->addr.client = client;\n}\n\n/**\n * \\brief Set the port id of a port_info container\n * \\param info port_info container\n * \\param port port id\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_port()\n */\nvoid snd_seq_port_info_set_port(snd_seq_port_info_t *info, int port)\n{\n\tassert(info);\n\tinfo->addr.port = port;\n}\n\n/**\n * \\brief Set the client/port address of a port_info container\n * \\param info port_info container\n * \\param addr client/port address\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_addr()\n */\nvoid snd_seq_port_info_set_addr(snd_seq_port_info_t *info, const snd_seq_addr_t *addr)\n{\n\tassert(info);\n\tinfo->addr = *(const struct sndrv_seq_addr *)addr;\n}\n\n/**\n * \\brief Set the name of a port_info container\n * \\param info port_info container\n * \\param name name string\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_name()\n */\nvoid snd_seq_port_info_set_name(snd_seq_port_info_t *info, const char *name)\n{\n\tassert(info && name);\n\tstrncpy(info->name, name, sizeof(info->name));\n}\n\n/**\n * \\brief set the capability bits of a port_info container\n * \\param info port_info container\n * \\param capability capability bits\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_capability()\n */\nvoid snd_seq_port_info_set_capability(snd_seq_port_info_t *info, unsigned int capability)\n{\n\tassert(info);\n\tinfo->capability = capability;\n}\n\n/**\n * \\brief Get the type bits of a port_info container\n * \\param info port_info container\n * \\param type port type bits\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_type()\n */\nvoid snd_seq_port_info_set_type(snd_seq_port_info_t *info, unsigned int type)\n{\n\tassert(info);\n\tinfo->type = type;\n}\n\n/**\n * \\brief set the midi channels of a port_info container\n * \\param info port_info container\n * \\param channels midi channels (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_midi_channels()\n */\nvoid snd_seq_port_info_set_midi_channels(snd_seq_port_info_t *info, int channels)\n{\n\tassert(info);\n\tinfo->midi_channels = channels;\n}\n\n/**\n * \\brief set the midi voices of a port_info container\n * \\param info port_info container\n * \\param voices midi voices (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_midi_voices()\n */\nvoid snd_seq_port_info_set_midi_voices(snd_seq_port_info_t *info, int voices)\n{\n\tassert(info);\n\tinfo->midi_voices = voices;\n}\n\n/**\n * \\brief set the synth voices of a port_info container\n * \\param info port_info container\n * \\param voices synth voices (default 0)\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_synth_voice()\n */\nvoid snd_seq_port_info_set_synth_voices(snd_seq_port_info_t *info, int voices)\n{\n\tassert(info);\n\tinfo->synth_voices = voices;\n}\n\n/**\n * \\brief Set the port-specified mode of a port_info container\n * \\param info port_info container\n * \\param val non-zero if specifying the port id at creation\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_port_specified()\n */\nvoid snd_seq_port_info_set_port_specified(snd_seq_port_info_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_FLG_GIVEN_PORT;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_FLG_GIVEN_PORT;\n}\n\n/**\n * \\brief Set the time-stamping mode of the given port\n * \\param info port_info container\n * \\param enable non-zero if updating the timestamps of incoming events\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_timestamping()\n */\nvoid snd_seq_port_info_set_timestamping(snd_seq_port_info_t *info, int enable)\n{\n\tassert(info);\n\tif (enable)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_FLG_TIMESTAMP;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_FLG_TIMESTAMP;\n}\n\n/**\n * \\brief Set whether the timestime is updated in the real-time mode\n * \\param info port_info container\n * \\param enable non-zero if updating the timestamps in real-time mode\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_timestamp_real()\n */\nvoid snd_seq_port_info_set_timestamp_real(snd_seq_port_info_t *info, int enable)\n{\n\tassert(info);\n\tif (enable)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_FLG_TIME_REAL;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_FLG_TIME_REAL;\n}\n\n/**\n * \\brief Set the queue id for timestamping\n * \\param info port_info container\n * \\param queue the queue id to get timestamps\n *\n * \\sa snd_seq_get_port_info(), snd_seq_port_info_get_timestamp_queue()\n */\nvoid snd_seq_port_info_set_timestamp_queue(snd_seq_port_info_t *info, int queue)\n{\n\tassert(info);\n\tinfo->time_queue = queue;\n}\n\n\n/**\n * \\brief create a sequencer port on the current client\n * \\param seq sequencer handle\n * \\param port port information for the new port\n * \\return 0 on success otherwise a negative error code\n *\n * Creates a sequencer port on the current client.\n * The attributes of created port is specified in \\a info argument.\n *\n * The client field in \\a info argument is overwritten with the current client id.\n * The port id to be created can be specified via #snd_seq_port_info_set_port_specified.\n * You can get the created port id by reading the port pointer via #snd_seq_port_info_get_port.\n *\n * Each port has the capability bit-masks to specify the access capability\n * of the port from other clients.\n * The capability bit flags are defined as follows:\n * - #SND_SEQ_PORT_CAP_READ Readable from this port\n * - #SND_SEQ_PORT_CAP_WRITE Writable to this port.\n * - #SND_SEQ_PORT_CAP_SYNC_READ For synchronization (not implemented)\n * - #SND_SEQ_PORT_CAP_SYNC_WRITE For synchronization (not implemented)\n * - #SND_SEQ_PORT_CAP_DUPLEX Read/write duplex access is supported\n * - #SND_SEQ_PORT_CAP_SUBS_READ Read subscription is allowed\n * - #SND_SEQ_PORT_CAP_SUBS_WRITE Write subscription is allowed\n * - #SND_SEQ_PORT_CAP_NO_EXPORT Subscription management from 3rd client is disallowed\n *\n * Each port has also the type bitmasks defined as follows:\n * - #SND_SEQ_PORT_TYPE_SPECIFIC Hardware specific port\n * - #SND_SEQ_PORT_TYPE_MIDI_GENERIC Generic MIDI device\n * - #SND_SEQ_PORT_TYPE_MIDI_GM General MIDI compatible device\n * - #SND_SEQ_PORT_TYPE_MIDI_GM2 General MIDI 2 compatible device\n * - #SND_SEQ_PORT_TYPE_MIDI_GS GS compatible device\n * - #SND_SEQ_PORT_TYPE_MIDI_XG XG compatible device\n * - #SND_SEQ_PORT_TYPE_MIDI_MT32 MT-32 compatible device\n * - #SND_SEQ_PORT_TYPE_HARDWARE Implemented in hardware\n * - #SND_SEQ_PORT_TYPE_SOFTWARE Implemented in software\n * - #SND_SEQ_PORT_TYPE_SYNTHESIZER Generates sound\n * - #SND_SEQ_PORT_TYPE_PORT Connects to other device(s)\n * - #SND_SEQ_PORT_TYPE_APPLICATION Application (sequencer/editor)\n *\n * A port may contain specific midi channels, midi voices and synth voices.\n * These values could be zero as default.\n *\n * \\sa snd_seq_delete_port(), snd_seq_get_port_info(),\n *     snd_seq_create_simple_port()\n */\nint snd_seq_create_port(snd_seq_t *seq, snd_seq_port_info_t * port)\n{\n\tassert(seq && port);\n\tport->addr.client = seq->client;\n\treturn seq->ops->create_port(seq, port);\n}\n\n/**\n * \\brief delete a sequencer port on the current client\n * \\param seq sequencer handle\n * \\param port port to be deleted\n * \\return 0 on success otherwise a negative error code\n *\n * Deletes the existing sequencer port on the current client.\n *\n * \\sa snd_seq_create_port(), snd_seq_delete_simple_port()\n */\nint snd_seq_delete_port(snd_seq_t *seq, int port)\n{\n\tsnd_seq_port_info_t pinfo;\n\tassert(seq);\n\tmemset(&pinfo, 0, sizeof(pinfo));\n\tpinfo.addr.client = seq->client;\n\tpinfo.addr.port = port;\n\treturn seq->ops->delete_port(seq, &pinfo);\n}\n\n/**\n * \\brief obtain the information of a port on an arbitrary client\n * \\param seq sequencer handle\n * \\param client client id to get\n * \\param port port id to get\n * \\param info pointer information returns\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_get_port_info()\n */\nint snd_seq_get_any_port_info(snd_seq_t *seq, int client, int port, snd_seq_port_info_t * info)\n{\n\tassert(seq && info && client >= 0 && port >= 0);\n\tmemset(info, 0, sizeof(snd_seq_port_info_t));\n\tinfo->addr.client = client;\n\tinfo->addr.port = port;\n\treturn seq->ops->get_port_info(seq, info);\n}\n\n/**\n * \\brief obtain the information of a port on the current client\n * \\param seq sequencer handle\n * \\param port port id to get\n * \\param info pointer information returns\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_create_port(), snd_seq_get_any_port_info(), snd_seq_set_port_info(),\n *     snd_seq_query_next_port()\n */\nint snd_seq_get_port_info(snd_seq_t *seq, int port, snd_seq_port_info_t * info)\n{\n\treturn snd_seq_get_any_port_info(seq, seq->client, port, info);\n}\n\n/**\n * \\brief set the information of a port on the current client\n * \\param seq sequencer handle\n * \\param port port to be set\n * \\param info port information to be set\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_set_port_info()\n */\nint snd_seq_set_port_info(snd_seq_t *seq, int port, snd_seq_port_info_t * info)\n{\n\tassert(seq && info && port >= 0);\n\tinfo->addr.client = seq->client;\n\tinfo->addr.port = port;\n\treturn seq->ops->set_port_info(seq, info);\n}\n\n/**\n * \\brief query the next matching port\n * \\param seq sequencer handle\n * \\param info query pattern and result\n\n * Queries the next matching port on the client specified in\n * \\a info argument.\n * The search begins at the next port specified in\n * port field of \\a info argument.\n * For finding the first port at a certain client, give -1.\n *\n * If a matching port is found, its attributes are stored on\n * \\a info and function returns zero.\n * Otherwise, a negative error code is returned.\n *\n * \\sa snd_seq_get_port_info()\n */\nint snd_seq_query_next_port(snd_seq_t *seq, snd_seq_port_info_t *info)\n{\n\tassert(seq && info);\n\treturn seq->ops->query_next_port(seq, info);\n}\n\n\n/*----------------------------------------------------------------*/\n\n/*\n * subscription\n */\n\n\n/**\n * \\brief get size of #snd_seq_port_subscribe_t\n * \\return size in bytes\n */\nsize_t snd_seq_port_subscribe_sizeof()\n{\n\treturn sizeof(snd_seq_port_subscribe_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_port_subscribe_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_port_subscribe_malloc(snd_seq_port_subscribe_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_port_subscribe_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_port_subscribe_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_port_subscribe_free(snd_seq_port_subscribe_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_port_subscribe_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_port_subscribe_copy(snd_seq_port_subscribe_t *dst, const snd_seq_port_subscribe_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get sender address of a port_subscribe container\n * \\param info port_subscribe container\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_sender()\n */\nconst snd_seq_addr_t *snd_seq_port_subscribe_get_sender(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *)&info->sender;\n}\n\n/**\n * \\brief Get destination address of a port_subscribe container\n * \\param info port_subscribe container\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_dest()\n */\nconst snd_seq_addr_t *snd_seq_port_subscribe_get_dest(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *)&info->dest;\n}\n\n/**\n * \\brief Get the queue id of a port_subscribe container\n * \\param info port_subscribe container\n * \\return queue id\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_queue()\n */\nint snd_seq_port_subscribe_get_queue(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the exclusive mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\return 1 if exclusive mode\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_exclusive()\n */\nint snd_seq_port_subscribe_get_exclusive(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_EXCLUSIVE) ? 1 : 0;\n}\n\n/**\n * \\brief Get the time-update mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\return 1 if update timestamp\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_time_update()\n */\nint snd_seq_port_subscribe_get_time_update(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_TIMESTAMP) ? 1 : 0;\n}\n\n/**\n * \\brief Get the real-time update mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\return 1 if real-time update mode\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_set_time_real()\n */\nint snd_seq_port_subscribe_get_time_real(const snd_seq_port_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_TIME_REAL) ? 1 : 0;\n}\n\n/**\n * \\brief Set sender address of a port_subscribe container\n * \\param info port_subscribe container\n * \\param addr sender address\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_sender()\n */\nvoid snd_seq_port_subscribe_set_sender(snd_seq_port_subscribe_t *info, const snd_seq_addr_t *addr)\n{\n\tassert(info);\n\tmemcpy(&info->sender, addr, sizeof(*addr));\n}\n      \n/**\n * \\brief Set destination address of a port_subscribe container\n * \\param info port_subscribe container\n * \\param addr destination address\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_dest()\n */\nvoid snd_seq_port_subscribe_set_dest(snd_seq_port_subscribe_t *info, const snd_seq_addr_t *addr)\n{\n\tassert(info);\n\tmemcpy(&info->dest, addr, sizeof(*addr));\n}\n\n/**\n * \\brief Set the queue id of a port_subscribe container\n * \\param info port_subscribe container\n * \\param q queue id\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_queue()\n */\nvoid snd_seq_port_subscribe_set_queue(snd_seq_port_subscribe_t *info, int q)\n{\n\tassert(info);\n\tinfo->queue = q;\n}\n\n/**\n * \\brief Set the exclusive mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\param val non-zero to enable\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_exclusive()\n */\nvoid snd_seq_port_subscribe_set_exclusive(snd_seq_port_subscribe_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_SUBS_EXCLUSIVE;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_SUBS_EXCLUSIVE;\n}\n\n/**\n * \\brief Set the time-update mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\param val non-zero to enable\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_time_update()\n */\nvoid snd_seq_port_subscribe_set_time_update(snd_seq_port_subscribe_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_SUBS_TIMESTAMP;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_SUBS_TIMESTAMP;\n}\n\n/**\n * \\brief Set the real-time mode of a port_subscribe container\n * \\param info port_subscribe container\n * \\param val non-zero to enable\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_port_subscribe_get_time_real()\n */\nvoid snd_seq_port_subscribe_set_time_real(snd_seq_port_subscribe_t *info, int val)\n{\n\tassert(info);\n\tif (val)\n\t\tinfo->flags |= SNDRV_SEQ_PORT_SUBS_TIME_REAL;\n\telse\n\t\tinfo->flags &= ~SNDRV_SEQ_PORT_SUBS_TIME_REAL;\n}\n\n\n/**\n * \\brief obtain subscription information\n * \\param seq sequencer handle\n * \\param sub pointer to return the subscription information\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_query_port_subscribers()\n */\nint snd_seq_get_port_subscription(snd_seq_t *seq, snd_seq_port_subscribe_t * sub)\n{\n\tassert(seq && sub);\n\treturn seq->ops->get_port_subscription(seq, sub);\n}\n\n/**\n * \\brief subscribe a port connection\n * \\param seq sequencer handle\n * \\param sub subscription information\n * \\return 0 on success otherwise a negative error code\n *\n * Subscribes a connection between two ports.\n * The subscription information is stored in sub argument.\n *\n * \\sa snd_seq_get_port_subscription(), snd_seq_unsubscribe_port(),\n *     snd_seq_connect_from(), snd_seq_connect_to()\n */\nint snd_seq_subscribe_port(snd_seq_t *seq, snd_seq_port_subscribe_t * sub)\n{\n\tassert(seq && sub);\n\treturn seq->ops->subscribe_port(seq, sub);\n}\n\n/**\n * \\brief unsubscribe a connection between ports\n * \\param seq sequencer handle\n * \\param sub subscription information to disconnect\n * \\return 0 on success otherwise a negative error code\n *\n * Unsubscribes a connection between two ports,\n * described in sender and dest fields in sub argument.\n *\n * \\sa snd_seq_subscribe_port(), snd_seq_disconnect_from(), snd_seq_disconnect_to()\n */\nint snd_seq_unsubscribe_port(snd_seq_t *seq, snd_seq_port_subscribe_t * sub)\n{\n\tassert(seq && sub);\n\treturn seq->ops->unsubscribe_port(seq, sub);\n}\n\n\n/**\n * \\brief get size of #snd_seq_query_subscribe_t\n * \\return size in bytes\n */\nsize_t snd_seq_query_subscribe_sizeof()\n{\n\treturn sizeof(snd_seq_query_subscribe_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_query_subscribe_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_query_subscribe_malloc(snd_seq_query_subscribe_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_query_subscribe_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_query_subscribe_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_query_subscribe_free(snd_seq_query_subscribe_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_query_subscribe_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_query_subscribe_copy(snd_seq_query_subscribe_t *dst, const snd_seq_query_subscribe_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the client id of a query_subscribe container\n * \\param info query_subscribe container\n * \\return client id\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_set_client()\n */\nint snd_seq_query_subscribe_get_client(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->root.client;\n}\n\n/**\n * \\brief Get the port id of a query_subscribe container\n * \\param info query_subscribe container\n * \\return port id\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_set_port()\n */\nint snd_seq_query_subscribe_get_port(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->root.port;\n}\n\n/**\n * \\brief Get the client/port address of a query_subscribe container\n * \\param info query_subscribe container\n * \\return client/port address pointer\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_set_root()\n */\nconst snd_seq_addr_t *snd_seq_query_subscribe_get_root(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *)&info->root;\n}\n\n/**\n * \\brief Get the query type of a query_subscribe container\n * \\param info query_subscribe container\n * \\return query type\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_set_type()\n */\nsnd_seq_query_subs_type_t snd_seq_query_subscribe_get_type(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->type;\n}\n\n/**\n * \\brief Get the index of subscriber of a query_subscribe container\n * \\param info query_subscribe container\n * \\return subscriber's index\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_set_index()\n */\nint snd_seq_query_subscribe_get_index(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->index;\n}\n\n/**\n * \\brief Get the number of subscriptions of a query_subscribe container\n * \\param info query_subscribe container\n * \\return number of subscriptions\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nint snd_seq_query_subscribe_get_num_subs(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->num_subs;\n}\t\n\n/**\n * \\brief Get the address of subscriber of a query_subscribe container\n * \\param info query_subscribe container\n * \\return subscriber's address pointer\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nconst snd_seq_addr_t *snd_seq_query_subscribe_get_addr(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *)&info->addr;\n}\n\n/**\n * \\brief Get the queue id of subscriber of a query_subscribe container\n * \\param info query_subscribe container\n * \\return subscriber's queue id\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nint snd_seq_query_subscribe_get_queue(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the exclusive mode of a query_subscribe container\n * \\param info query_subscribe container\n * \\return 1 if exclusive mode\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nint snd_seq_query_subscribe_get_exclusive(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_EXCLUSIVE) ? 1 : 0;\n}\n\n/**\n * \\brief Get the time-update mode of a query_subscribe container\n * \\param info query_subscribe container\n * \\return 1 if update timestamp\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nint snd_seq_query_subscribe_get_time_update(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_TIMESTAMP) ? 1 : 0;\n}\n\n/**\n * \\brief Get the real-time update mode of a query_subscribe container\n * \\param info query_subscribe container\n * \\return 1 if real-time update mode\n *\n * \\sa snd_seq_query_port_subscribers()\n */\nint snd_seq_query_subscribe_get_time_real(const snd_seq_query_subscribe_t *info)\n{\n\tassert(info);\n\treturn (info->flags & SNDRV_SEQ_PORT_SUBS_TIMESTAMP) ? 1 : 0;\n}\n\n/**\n * \\brief Set the client id of a query_subscribe container\n * \\param info query_subscribe container\n * \\param client client id\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_get_client()\n */\nvoid snd_seq_query_subscribe_set_client(snd_seq_query_subscribe_t *info, int client)\n{\n\tassert(info);\n\tinfo->root.client = client;\n}\n\n/**\n * \\brief Set the port id of a query_subscribe container\n * \\param info query_subscribe container\n * \\param port port id\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_get_port()\n */\nvoid snd_seq_query_subscribe_set_port(snd_seq_query_subscribe_t *info, int port)\n{\n\tassert(info);\n\tinfo->root.port = port;\n}\n\n/**\n * \\brief Set the client/port address of a query_subscribe container\n * \\param info query_subscribe container\n * \\param addr client/port address pointer\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_get_root()\n */\nvoid snd_seq_query_subscribe_set_root(snd_seq_query_subscribe_t *info, const snd_seq_addr_t *addr)\n{\n\tassert(info);\n\tinfo->root = *(const struct snd_seq_addr *)addr;\n}\n\n/**\n * \\brief Set the query type of a query_subscribe container\n * \\param info query_subscribe container\n * \\param type query type\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_get_type()\n */\nvoid snd_seq_query_subscribe_set_type(snd_seq_query_subscribe_t *info, snd_seq_query_subs_type_t type)\n{\n\tassert(info);\n\tinfo->type = type;\n}\n\n/**\n * \\brief Set the subscriber's index to be queried\n * \\param info query_subscribe container\n * \\param index index to be queried\n *\n * \\sa snd_seq_query_port_subscribers(), snd_seq_query_subscribe_get_index()\n */\nvoid snd_seq_query_subscribe_set_index(snd_seq_query_subscribe_t *info, int index)\n{\n\tassert(info);\n\tinfo->index = index;\n}\n\n\n/**\n * \\brief query port subscriber list\n * \\param seq sequencer handle\n * \\param subs subscription to query\n * \\return 0 on success otherwise a negative error code\n *\n * Queries the subscribers accessing to a port.\n * The query information is specified in subs argument.\n *\n * At least, the client id, the port id, the index number and\n * the query type must be set to perform a proper query.\n * As the query type, #SND_SEQ_QUERY_SUBS_READ or #SND_SEQ_QUERY_SUBS_WRITE\n * can be specified to check whether the readers or the writers to the port.\n * To query the first subscription, set 0 to the index number.  To list up\n * all the subscriptions, call this function with the index numbers from 0\n * until this returns a negative value.\n *\n * \\sa snd_seq_get_port_subscription()\n */\nint snd_seq_query_port_subscribers(snd_seq_t *seq, snd_seq_query_subscribe_t * subs)\n{\n\tassert(seq && subs);\n\treturn seq->ops->query_port_subscribers(seq, subs);\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * queue handlers\n */\n\n/**\n * \\brief get size of #snd_seq_queue_info_t\n * \\return size in bytes\n */\nsize_t snd_seq_queue_info_sizeof()\n{\n\treturn sizeof(snd_seq_queue_info_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_queue_info_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_queue_info_malloc(snd_seq_queue_info_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_queue_info_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_queue_info_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_queue_info_free(snd_seq_queue_info_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_queue_info_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_queue_info_copy(snd_seq_queue_info_t *dst, const snd_seq_queue_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the queue id of a queue_info container\n * \\param info queue_info container\n * \\return queue id\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_set_queue()\n */\nint snd_seq_queue_info_get_queue(const snd_seq_queue_info_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the name of a queue_info container\n * \\param info queue_info container\n * \\return name string\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_set_name()\n */\nconst char *snd_seq_queue_info_get_name(const snd_seq_queue_info_t *info)\n{\n\tassert(info);\n\treturn info->name;\n}\n\n/**\n * \\brief Get the owner client id of a queue_info container\n * \\param info queue_info container\n * \\return owner client id\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_set_owner()\n */\nint snd_seq_queue_info_get_owner(const snd_seq_queue_info_t *info)\n{\n\tassert(info);\n\treturn info->owner;\n}\n\n/**\n * \\brief Get the lock status of a queue_info container\n * \\param info queue_info container\n * \\return lock status --- non-zero = locked\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_set_locked()\n */\nint snd_seq_queue_info_get_locked(const snd_seq_queue_info_t *info)\n{\n\tassert(info);\n\treturn info->locked;\n}\n\n/**\n * \\brief Get the conditional bit flags of a queue_info container\n * \\param info queue_info container\n * \\return conditional bit flags\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_set_flags()\n */\nunsigned int snd_seq_queue_info_get_flags(const snd_seq_queue_info_t *info)\n{\n\tassert(info);\n\treturn info->flags;\n}\n\n/**\n * \\brief Set the name of a queue_info container\n * \\param info queue_info container\n * \\param name name string\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_get_name()\n */\nvoid snd_seq_queue_info_set_name(snd_seq_queue_info_t *info, const char *name)\n{\n\tassert(info && name);\n\tstrncpy(info->name, name, sizeof(info->name));\n}\n\n/**\n * \\brief Set the owner client id of a queue_info container\n * \\param info queue_info container\n * \\param owner client id\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_get_owner()\n */\nvoid snd_seq_queue_info_set_owner(snd_seq_queue_info_t *info, int owner)\n{\n\tassert(info);\n\tinfo->owner = owner;\n}\n\n/**\n * \\brief Set the lock status of a queue_info container\n * \\param info queue_info container\n * \\param locked lock status\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_get_locked()\n */\nvoid snd_seq_queue_info_set_locked(snd_seq_queue_info_t *info, int locked)\n{\n\tassert(info);\n\tinfo->locked = locked;\n}\n\n/**\n * \\brief Set the conditional bit flags of a queue_info container\n * \\param info queue_info container\n * \\param flags conditional bit flags\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_queue_info_get_flags()\n */\nvoid snd_seq_queue_info_set_flags(snd_seq_queue_info_t *info, unsigned int flags)\n{\n\tassert(info);\n\tinfo->flags = flags;\n}\n\n\n/**\n * \\brief create a queue\n * \\param seq sequencer handle\n * \\param info queue information to initialize\n * \\return the queue id (zero or positive) on success otherwise a negative error code\n *\n * \\sa snd_seq_alloc_queue()\n */\nint snd_seq_create_queue(snd_seq_t *seq, snd_seq_queue_info_t *info)\n{\n\tint err;\n\tassert(seq && info);\n\tinfo->owner = seq->client;\n\terr = seq->ops->create_queue(seq, info);\n\tif (err < 0)\n\t\treturn err;\n\treturn info->queue;\n}\n\n/**\n * \\brief allocate a queue with the specified name\n * \\param seq sequencer handle\n * \\param name the name of the new queue\n * \\return the queue id (zero or positive) on success otherwise a negative error code\n *\n * \\sa snd_seq_alloc_queue()\n */ \nint snd_seq_alloc_named_queue(snd_seq_t *seq, const char *name)\n{\n\tsnd_seq_queue_info_t info;\n\tmemset(&info, 0, sizeof(info));\n\tinfo.locked = 1;\n\tif (name)\n\t\tstrncpy(info.name, name, sizeof(info.name) - 1);\n\treturn snd_seq_create_queue(seq, &info);\n}\n\n/**\n * \\brief allocate a queue\n * \\param seq sequencer handle\n * \\return the queue id (zero or positive) on success otherwise a negative error code\n *\n * \\sa snd_seq_alloc_named_queue(), snd_seq_create_queue(), snd_seq_free_queue(),\n *     snd_seq_get_queue_info()\n */ \nint snd_seq_alloc_queue(snd_seq_t *seq)\n{\n\treturn snd_seq_alloc_named_queue(seq, NULL);\n}\n\n/**\n * \\brief delete the specified queue\n * \\param seq sequencer handle\n * \\param q queue id to delete\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_alloc_queue()\n */\nint snd_seq_free_queue(snd_seq_t *seq, int q)\n{\n\tsnd_seq_queue_info_t info;\n\tassert(seq);\n\tmemset(&info, 0, sizeof(info));\n\tinfo.queue = q;\n\treturn seq->ops->delete_queue(seq, &info);\n}\n\n/**\n * \\brief obtain queue attributes\n * \\param seq sequencer handle\n * \\param q queue id to query\n * \\param info information returned\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_alloc_queue(), snd_seq_set_queue_info(), snd_seq_query_named_queue()\n */\nint snd_seq_get_queue_info(snd_seq_t *seq, int q, snd_seq_queue_info_t *info)\n{\n\tassert(seq && info);\n\tinfo->queue = q;\n\treturn seq->ops->get_queue_info(seq, info);\n}\n\n/**\n * \\brief change the queue attributes\n * \\param seq sequencer handle\n * \\param q queue id to change\n * \\param info information changed\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_get_queue_info()\n */\nint snd_seq_set_queue_info(snd_seq_t *seq, int q, snd_seq_queue_info_t *info)\n{\n\tassert(seq && info);\n\tinfo->queue = q;\n\treturn seq->ops->set_queue_info(seq, info);\n}\n\n/**\n * \\brief query the matching queue with the specified name\n * \\param seq sequencer handle\n * \\param name the name string to query\n * \\return the queue id if found or negative error code\n *\n * Searches the matching queue with the specified name string.\n *\n * \\sa snd_seq_get_queue_info()\n */\nint snd_seq_query_named_queue(snd_seq_t *seq, const char *name)\n{\n\tint err;\n\tsnd_seq_queue_info_t info;\n\tassert(seq && name);\n\tstrncpy(info.name, name, sizeof(info.name));\n\terr = seq->ops->get_named_queue(seq, &info);\n\tif (err < 0)\n\t\treturn err;\n\treturn info.queue;\n}\n\n/**\n * \\brief Get the queue usage flag to the client\n * \\param seq sequencer handle\n * \\param q queue id\n * \\return 1 = client is allowed to access the queue, 0 = not allowed, \n *     otherwise a negative error code\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_set_queue_usage()\n */\nint snd_seq_get_queue_usage(snd_seq_t *seq, int q)\n{\n\tstruct snd_seq_queue_client info;\n\tint err;\n\tassert(seq);\n\tmemset(&info, 0, sizeof(info));\n\tinfo.queue = q;\n\tinfo.client = seq->client;\n\tif ((err = seq->ops->get_queue_client(seq, &info)) < 0)\n\t\treturn err;\n\treturn info.used;\n}\n\n/**\n * \\brief Set the queue usage flag to the client\n * \\param seq sequencer handle\n * \\param q queue id\n * \\param used non-zero if the client is allowed\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_get_queue_info(), snd_seq_set_queue_usage()\n */\nint snd_seq_set_queue_usage(snd_seq_t *seq, int q, int used)\n{\n\tstruct snd_seq_queue_client info;\n\tassert(seq);\n\tmemset(&info, 0, sizeof(info));\n\tinfo.queue = q;\n\tinfo.client = seq->client;\n\tinfo.used = used ? 1 : 0;\n\treturn seq->ops->set_queue_client(seq, &info);\n}\n\n\n/**\n * \\brief get size of #snd_seq_queue_status_t\n * \\return size in bytes\n */\nsize_t snd_seq_queue_status_sizeof()\n{\n\treturn sizeof(snd_seq_queue_status_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_queue_status_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_queue_status_malloc(snd_seq_queue_status_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_queue_status_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_queue_status_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_queue_status_free(snd_seq_queue_status_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_queue_status_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_queue_status_copy(snd_seq_queue_status_t *dst, const snd_seq_queue_status_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the queue id of a queue_status container\n * \\param info queue_status container\n * \\return queue id\n *\n * \\sa snd_seq_get_queue_status()\n */\nint snd_seq_queue_status_get_queue(const snd_seq_queue_status_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the number of events of a queue_status container\n * \\param info queue_status container\n * \\return number of events\n *\n * \\sa snd_seq_get_queue_status()\n */\nint snd_seq_queue_status_get_events(const snd_seq_queue_status_t *info)\n{\n\tassert(info);\n\treturn info->events;\n}\n\n/**\n * \\brief Get the tick time of a queue_status container\n * \\param info queue_status container\n * \\return tick time\n *\n * \\sa snd_seq_get_queue_status()\n */\nsnd_seq_tick_time_t snd_seq_queue_status_get_tick_time(const snd_seq_queue_status_t *info)\n{\n\tassert(info);\n\treturn info->tick;\n}\n\n/**\n * \\brief Get the real time of a queue_status container\n * \\param info queue_status container\n *\n * \\sa snd_seq_get_queue_status()\n */\nconst snd_seq_real_time_t *snd_seq_queue_status_get_real_time(const snd_seq_queue_status_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_real_time_t *)&info->time;\n}\n\n/**\n * \\brief Get the running status bits of a queue_status container\n * \\param info queue_status container\n * \\return running status bits\n *\n * \\sa snd_seq_get_queue_status()\n */\nunsigned int snd_seq_queue_status_get_status(const snd_seq_queue_status_t *info)\n{\n\tassert(info);\n\treturn info->running;\n}\n\n\n/**\n * \\brief obtain the running state of the queue\n * \\param seq sequencer handle\n * \\param q queue id to query\n * \\param status pointer to store the current status\n * \\return 0 on success otherwise a negative error code\n *\n * Obtains the running state of the specified queue q.\n */\nint snd_seq_get_queue_status(snd_seq_t *seq, int q, snd_seq_queue_status_t * status)\n{\n\tassert(seq && status);\n\tmemset(status, 0, sizeof(snd_seq_queue_status_t));\n\tstatus->queue = q;\n\treturn seq->ops->get_queue_status(seq, status);\n}\n\n\n/**\n * \\brief get size of #snd_seq_queue_tempo_t\n * \\return size in bytes\n */\nsize_t snd_seq_queue_tempo_sizeof()\n{\n\treturn sizeof(snd_seq_queue_tempo_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_queue_tempo_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_queue_tempo_malloc(snd_seq_queue_tempo_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_queue_tempo_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_queue_tempo_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_queue_tempo_free(snd_seq_queue_tempo_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_queue_tempo_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_queue_tempo_copy(snd_seq_queue_tempo_t *dst, const snd_seq_queue_tempo_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the queue id of a queue_status container\n * \\param info queue_status container\n * \\return queue id\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nint snd_seq_queue_tempo_get_queue(const snd_seq_queue_tempo_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the tempo of a queue_status container\n * \\param info queue_status container\n * \\return tempo value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nunsigned int snd_seq_queue_tempo_get_tempo(const snd_seq_queue_tempo_t *info)\n{\n\tassert(info);\n\treturn info->tempo;\n}\n\n/**\n * \\brief Get the ppq of a queue_status container\n * \\param info queue_status container\n * \\return ppq value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nint snd_seq_queue_tempo_get_ppq(const snd_seq_queue_tempo_t *info)\n{\n\tassert(info);\n\treturn info->ppq;\n}\n\n/**\n * \\brief Get the timer skew value of a queue_status container\n * \\param info queue_status container\n * \\return timer skew value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nunsigned int snd_seq_queue_tempo_get_skew(const snd_seq_queue_tempo_t *info)\n{\n\tassert(info);\n\treturn info->skew_value;\n}\n\n/**\n * \\brief Get the timer skew base value of a queue_status container\n * \\param info queue_status container\n * \\return timer skew base value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nunsigned int snd_seq_queue_tempo_get_skew_base(const snd_seq_queue_tempo_t *info)\n{\n\tassert(info);\n\treturn info->skew_base;\n}\n\n/**\n * \\brief Set the tempo of a queue_status container\n * \\param info queue_status container\n * \\param tempo tempo value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nvoid snd_seq_queue_tempo_set_tempo(snd_seq_queue_tempo_t *info, unsigned int tempo)\n{\n\tassert(info);\n\tinfo->tempo = tempo;\n}\n\n/**\n * \\brief Set the ppq of a queue_status container\n * \\param info queue_status container\n * \\param ppq ppq value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nvoid snd_seq_queue_tempo_set_ppq(snd_seq_queue_tempo_t *info, int ppq)\n{\n\tassert(info);\n\tinfo->ppq = ppq;\n}\n\n/**\n * \\brief Set the timer skew value of a queue_status container\n * \\param info queue_status container\n * \\param skew timer skew value\n *\n * The skew of timer is calculated as skew / base.\n * For example, to play with double speed, pass base * 2 as the skew value.\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nvoid snd_seq_queue_tempo_set_skew(snd_seq_queue_tempo_t *info, unsigned int skew)\n{\n\tassert(info);\n\tinfo->skew_value = skew;\n}\n\n/**\n * \\brief Set the timer skew base value of a queue_status container\n * \\param info queue_status container\n * \\param base timer skew base value\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nvoid snd_seq_queue_tempo_set_skew_base(snd_seq_queue_tempo_t *info, unsigned int base)\n{\n\tassert(info);\n\tinfo->skew_base = base;\n}\n\n/**\n * \\brief obtain the current tempo of the queue\n * \\param seq sequencer handle\n * \\param q queue id to be queried\n * \\param tempo pointer to store the current tempo\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_set_queue_tempo()\n */\nint snd_seq_get_queue_tempo(snd_seq_t *seq, int q, snd_seq_queue_tempo_t * tempo)\n{\n\tassert(seq && tempo);\n\tmemset(tempo, 0, sizeof(snd_seq_queue_tempo_t));\n\ttempo->queue = q;\n\treturn seq->ops->get_queue_tempo(seq, tempo);\n}\n\n/**\n * \\brief set the tempo of the queue\n * \\param seq sequencer handle\n * \\param q queue id to change the tempo\n * \\param tempo tempo information\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_get_queue_tempo()\n */\nint snd_seq_set_queue_tempo(snd_seq_t *seq, int q, snd_seq_queue_tempo_t * tempo)\n{\n\tassert(seq && tempo);\n\ttempo->queue = q;\n\treturn seq->ops->set_queue_tempo(seq, tempo);\n}\n\n\n/*----------------------------------------------------------------*/\n\n/**\n * \\brief get size of #snd_seq_queue_timer_t\n * \\return size in bytes\n */\nsize_t snd_seq_queue_timer_sizeof()\n{\n\treturn sizeof(snd_seq_queue_timer_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_queue_timer_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_queue_timer_malloc(snd_seq_queue_timer_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_queue_timer_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_queue_timer_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_queue_timer_free(snd_seq_queue_timer_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_queue_timer_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_queue_timer_copy(snd_seq_queue_timer_t *dst, const snd_seq_queue_timer_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the queue id of a queue_timer container\n * \\param info queue_timer container\n * \\return queue id\n *\n * \\sa snd_seq_get_queue_timer()\n */\nint snd_seq_queue_timer_get_queue(const snd_seq_queue_timer_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the timer type of a queue_timer container\n * \\param info queue_timer container\n * \\return timer type\n *\n * \\sa snd_seq_get_queue_timer()\n */\nsnd_seq_queue_timer_type_t snd_seq_queue_timer_get_type(const snd_seq_queue_timer_t *info)\n{\n\tassert(info);\n\treturn (snd_seq_queue_timer_type_t)info->type;\n}\n\n/**\n * \\brief Get the timer id of a queue_timer container\n * \\param info queue_timer container\n * \\return timer id pointer\n *\n * \\sa snd_seq_get_queue_timer()\n */\nconst snd_timer_id_t *snd_seq_queue_timer_get_id(const snd_seq_queue_timer_t *info)\n{\n\tassert(info);\n\treturn &info->u.alsa.id;\n}\n\n/**\n * \\brief Get the timer resolution of a queue_timer container\n * \\param info queue_timer container\n * \\return timer resolution\n *\n * \\sa snd_seq_get_queue_timer()\n */\nunsigned int snd_seq_queue_timer_get_resolution(const snd_seq_queue_timer_t *info)\n{\n\tassert(info);\n\treturn info->u.alsa.resolution;\n}\n\n/**\n * \\brief Set the timer type of a queue_timer container\n * \\param info queue_timer container\n * \\param type timer type\n *\n * \\sa snd_seq_get_queue_timer()\n */\nvoid snd_seq_queue_timer_set_type(snd_seq_queue_timer_t *info, snd_seq_queue_timer_type_t type)\n{\n\tassert(info);\n\tinfo->type = (int)type;\n}\n\t\n/**\n * \\brief Set the timer id of a queue_timer container\n * \\param info queue_timer container\n * \\param id timer id pointer\n *\n * \\sa snd_seq_get_queue_timer()\n */\nvoid snd_seq_queue_timer_set_id(snd_seq_queue_timer_t *info, const snd_timer_id_t *id)\n{\n\tassert(info && id);\n\tinfo->u.alsa.id = *id;\n}\n\n/**\n * \\brief Set the timer resolution of a queue_timer container\n * \\param info queue_timer container\n * \\param resolution timer resolution\n *\n * \\sa snd_seq_get_queue_timer()\n */\nvoid snd_seq_queue_timer_set_resolution(snd_seq_queue_timer_t *info, unsigned int resolution)\n{\n\tassert(info);\n\tinfo->u.alsa.resolution = resolution;\n}\n\n\n/**\n * \\brief obtain the queue timer information\n * \\param seq sequencer handle\n * \\param q queue id to query\n * \\param timer pointer to store the timer information\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_set_queue_timer()\n */\nint snd_seq_get_queue_timer(snd_seq_t *seq, int q, snd_seq_queue_timer_t * timer)\n{\n\tassert(seq && timer);\n\tmemset(timer, 0, sizeof(snd_seq_queue_timer_t));\n\ttimer->queue = q;\n\treturn seq->ops->get_queue_timer(seq, timer);\n}\n\n/**\n * \\brief set the queue timer information\n * \\param seq sequencer handle\n * \\param q queue id to change the timer\n * \\param timer timer information\n * \\return 0 on success otherwise a negative error code\n *\n * \\sa snd_seq_get_queue_timer()\n */\nint snd_seq_set_queue_timer(snd_seq_t *seq, int q, snd_seq_queue_timer_t * timer)\n{\n\tassert(seq && timer);\n\ttimer->queue = q;\n\treturn seq->ops->set_queue_timer(seq, timer);\n}\n\n/*----------------------------------------------------------------*/\n\n#ifndef DOC_HIDDEN\n/**\n * \\brief (DEPRECATED) create an event cell\n * \\return the cell pointer allocated\n *\n * create an event cell via malloc.  the returned pointer must be released\n * by the application itself via normal free() call,\n * not via snd_seq_free_event().\n */\nsnd_seq_event_t *snd_seq_create_event(void)\n{\n\treturn (snd_seq_event_t *) calloc(1, sizeof(snd_seq_event_t));\n}\n#endif\n\n/**\n * \\brief (DEPRECATED) free an event\n *\n * In the former version, this function was used to\n * release the event pointer which was allocated by snd_seq_event_input().\n * In the current version, the event record is not allocated, so\n * you don't have to call this function any more.\n */\n#ifndef DOXYGEN\nint snd_seq_free_event(snd_seq_event_t *ev ATTRIBUTE_UNUSED)\n#else\nint snd_seq_free_event(snd_seq_event_t *ev)\n#endif\n{\n\treturn 0;\n}\n\n/**\n * \\brief calculates the (encoded) byte-stream size of the event\n * \\param ev the event\n * \\return the size of decoded bytes\n */\nssize_t snd_seq_event_length(snd_seq_event_t *ev)\n{\n\tssize_t len = sizeof(snd_seq_event_t);\n\tassert(ev);\n\tif (snd_seq_ev_is_variable(ev))\n\t\tlen += ev->data.ext.len;\n\treturn len;\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * output to sequencer\n */\n\n/**\n * \\brief output an event\n * \\param seq sequencer handle\n * \\param ev event to be output\n * \\return the number of remaining events or a negative error code\n *\n * An event is once expanded on the output buffer.\n * The output buffer will be drained automatically if it becomes full.\n *\n * If events remain unprocessed on output buffer before drained,\n * the size of total byte data on output buffer is returned.\n * If the output buffer is empty, this returns zero.\n *\n * \\sa snd_seq_event_output_direct(), snd_seq_event_output_buffer(),\n *    snd_seq_event_output_pending(), snd_seq_drain_output(),\n *    snd_seq_drop_output(), snd_seq_extract_output(),\n *    snd_seq_remove_events()\n */\nint snd_seq_event_output(snd_seq_t *seq, snd_seq_event_t *ev)\n{\n\tint result;\n\n\tresult = snd_seq_event_output_buffer(seq, ev);\n\tif (result == -EAGAIN) {\n\t\tresult = snd_seq_drain_output(seq);\n\t\tif (result < 0)\n\t\t\treturn result;\n\t\treturn snd_seq_event_output_buffer(seq, ev);\n\t}\n\treturn result;\n}\n\n/**\n * \\brief output an event onto the lib buffer without draining buffer\n * \\param seq sequencer handle\n * \\param ev event to be output\n * \\return the byte size of remaining events. \\c -EAGAIN if the buffer becomes full.\n *\n * This function doesn't drain buffer unlike snd_seq_event_output().\n *\n * \\sa snd_seq_event_output()\n */\nint snd_seq_event_output_buffer(snd_seq_t *seq, snd_seq_event_t *ev)\n{\n\tint len;\n\tassert(seq && ev);\n\tlen = snd_seq_event_length(ev);\n\tif (len < 0)\n\t\treturn -EINVAL;\n\tif ((size_t) len >= seq->obufsize)\n\t\treturn -EINVAL;\n\tif ((seq->obufsize - seq->obufused) < (size_t) len)\n\t\treturn -EAGAIN;\n\tmemcpy(seq->obuf + seq->obufused, ev, sizeof(snd_seq_event_t));\n\tseq->obufused += sizeof(snd_seq_event_t);\n\tif (snd_seq_ev_is_variable(ev)) {\n\t\tmemcpy(seq->obuf + seq->obufused, ev->data.ext.ptr, ev->data.ext.len);\n\t\tseq->obufused += ev->data.ext.len;\n\t}\n\treturn seq->obufused;\n}\n\n/*\n * allocate the temporary buffer\n */\nstatic int alloc_tmpbuf(snd_seq_t *seq, size_t len)\n{\n\tsize_t size = ((len + sizeof(snd_seq_event_t) - 1) / sizeof(snd_seq_event_t));\n\tif (seq->tmpbuf == NULL) {\n\t\tif (size > DEFAULT_TMPBUF_SIZE)\n\t\t\tseq->tmpbufsize = size;\n\t\telse\n\t\t\tseq->tmpbufsize = DEFAULT_TMPBUF_SIZE;\n\t\tseq->tmpbuf = malloc(seq->tmpbufsize * sizeof(snd_seq_event_t));\n\t\tif (seq->tmpbuf == NULL)\n\t\t\treturn -ENOMEM;\n\t}  else if (len > seq->tmpbufsize) {\n\t\tseq->tmpbuf = realloc(seq->tmpbuf, size * sizeof(snd_seq_event_t));\n\t\tif (seq->tmpbuf == NULL)\n\t\t\treturn -ENOMEM;\n\t\tseq->tmpbufsize = size;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief output an event directly to the sequencer NOT through output buffer\n * \\param seq sequencer handle\n * \\param ev event to be output\n * \\return the byte size sent to sequencer or a negative error code\n *\n * This function sends an event to the sequencer directly not through the\n * output buffer.  When the event is a variable length event, a temporary\n * buffer is allocated inside alsa-lib and the data is copied there before\n * actually sent.\n *\n * \\sa snd_seq_event_output()\n */\nint snd_seq_event_output_direct(snd_seq_t *seq, snd_seq_event_t *ev)\n{\n\tssize_t len;\n\tvoid *buf;\n\n\tlen = snd_seq_event_length(ev);\n\tif (len < 0)\n\t\treturn len;\n\telse if (len == sizeof(*ev)) {\n\t\tbuf = ev;\n\t} else {\n\t\tif (alloc_tmpbuf(seq, (size_t)len) < 0)\n\t\t\treturn -ENOMEM;\n\t\t*seq->tmpbuf = *ev;\n\t\tmemcpy(seq->tmpbuf + 1, ev->data.ext.ptr, ev->data.ext.len);\n\t\tbuf = seq->tmpbuf;\n\t}\n\treturn seq->ops->write(seq, buf, (size_t) len);\n}\n\n/**\n * \\brief return the size of pending events on output buffer\n * \\param seq sequencer handle\n * \\return the byte size of total of pending events\n *\n * \\sa snd_seq_event_output()\n */\nint snd_seq_event_output_pending(snd_seq_t *seq)\n{\n\tassert(seq);\n\treturn seq->obufused;\n}\n\n/**\n * \\brief drain output buffer to sequencer\n * \\param seq sequencer handle\n * \\return 0 when all events are drained and sent to sequencer.\n *         When events still remain on the buffer, the byte size of remaining\n *         events are returned.  On error a negative error code is returned.\n *\n * This function drains all pending events on the output buffer.\n * The function returns immediately after the events are sent to the queues\n * regardless whether the events are processed or not.\n * To get synchronization with the all event processes, use\n * #snd_seq_sync_output_queue() after calling this function.\n *\n * \\sa snd_seq_event_output(), snd_seq_sync_output_queue()\n */\nint snd_seq_drain_output(snd_seq_t *seq)\n{\n\tssize_t result, processed = 0;\n\tassert(seq);\n\twhile (seq->obufused > 0) {\n\t\tresult = seq->ops->write(seq, seq->obuf, seq->obufused);\n\t\tif (result < 0) {\n\t\t\tif (result == -EAGAIN && processed)\n\t\t\t\treturn seq->obufused;\n\t\t\treturn result;\n\t\t}\n\t\tif ((size_t)result < seq->obufused)\n\t\t\tmemmove(seq->obuf, seq->obuf + result, seq->obufused - result);\n\t\tseq->obufused -= result;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief extract the first event in output buffer\n * \\param seq sequencer handle\n * \\param ev_res event pointer to be extracted\n * \\return 0 on success otherwise a negative error code\n *\n * Extracts the first event in output buffer.\n * If ev_res is NULL, just remove the event.\n *\n * \\sa snd_seq_event_output()\n */\nint snd_seq_extract_output(snd_seq_t *seq, snd_seq_event_t **ev_res)\n{\n\tsize_t len, olen;\n\tsnd_seq_event_t ev;\n\tassert(seq);\n\tif (ev_res)\n\t\t*ev_res = NULL;\n\tif ((olen = seq->obufused) < sizeof(snd_seq_event_t))\n\t\treturn -ENOENT;\n\tmemcpy(&ev, seq->obuf, sizeof(snd_seq_event_t));\n\tlen = snd_seq_event_length(&ev);\n\tif (ev_res) {\n\t\t/* extract the event */\n\t\tif (alloc_tmpbuf(seq, len) < 0)\n\t\t\treturn -ENOMEM;\n\t\tmemcpy(seq->tmpbuf, seq->obuf, len);\n\t\t*ev_res = seq->tmpbuf;\n\t}\n\tseq->obufused = olen - len;\n\tmemmove(seq->obuf, seq->obuf + len, seq->obufused);\n\treturn 0;\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * input from sequencer\n */\n\n/*\n * read from sequencer to input buffer\n */\nstatic ssize_t snd_seq_event_read_buffer(snd_seq_t *seq)\n{\n\tssize_t len;\n\tlen = (seq->ops->read)(seq, seq->ibuf, seq->ibufsize * sizeof(snd_seq_event_t));\n\tif (len < 0)\n\t\treturn len;\n\tseq->ibuflen = len / sizeof(snd_seq_event_t);\n\tseq->ibufptr = 0;\n\treturn seq->ibuflen;\n}\n\nstatic int snd_seq_event_retrieve_buffer(snd_seq_t *seq, snd_seq_event_t **retp)\n{\n\tsize_t ncells;\n\tsnd_seq_event_t *ev;\n\n\t*retp = ev = &seq->ibuf[seq->ibufptr];\n\tseq->ibufptr++;\n\tseq->ibuflen--;\n\tif (! snd_seq_ev_is_variable(ev))\n\t\treturn 1;\n\tncells = (ev->data.ext.len + sizeof(snd_seq_event_t) - 1) / sizeof(snd_seq_event_t);\n\tif (seq->ibuflen < ncells) {\n\t\tseq->ibuflen = 0; /* clear buffer */\n\t\t*retp = NULL;\n\t\treturn -EINVAL;\n\t}\n\tev->data.ext.ptr = ev + 1;\n\tseq->ibuflen -= ncells;\n\tseq->ibufptr += ncells;\n\treturn 1;\n}\n\n/**\n * \\brief retrieve an event from sequencer\n * \\param seq sequencer handle\n * \\param ev event pointer to be stored\n * \\return \n *\n * Obtains an input event from sequencer.\n * The event is created via snd_seq_create_event(), and its pointer is stored on\n * ev argument.\n *\n * This function firstly receives the event byte-stream data from sequencer\n * as much as possible at once.  Then it retrieves the first event record\n * and store the pointer on ev.\n * By calling this function sequentially, events are extracted from the input buffer.\n *\n * If there is no input from sequencer, function falls into sleep\n * in blocking mode until an event is received,\n * or returns \\c -EAGAIN error in non-blocking mode.\n * Occasionally, this function may return \\c -ENOSPC error.\n * This means that the input FIFO of sequencer overran, and some events are\n * lost.\n * Once this error is returned, the input FIFO is cleared automatically.\n *\n * Function returns the byte size of remaining events on the input buffer\n * if an event is successfully received.\n * Application can determine from the returned value whether to call\n * input once more or not.\n *\n * \\sa snd_seq_event_input_pending(), snd_seq_drop_input()\n */\nint snd_seq_event_input(snd_seq_t *seq, snd_seq_event_t **ev)\n{\n\tint err;\n\tassert(seq);\n\t*ev = NULL;\n\tif (seq->ibuflen <= 0) {\n\t\tif ((err = snd_seq_event_read_buffer(seq)) < 0)\n\t\t\treturn err;\n\t}\n\n\treturn snd_seq_event_retrieve_buffer(seq, ev);\n}\n\n/*\n * read input data from sequencer if available\n */\nstatic int snd_seq_event_input_feed(snd_seq_t *seq, int timeout)\n{\n\tstruct pollfd pfd;\n\tint err;\n\tpfd.fd = seq->poll_fd;\n\tpfd.events = POLLIN;\n\terr = poll(&pfd, 1, timeout);\n\tif (err < 0) {\n\t\tSYSERR(\"poll\");\n\t\treturn -errno;\n\t}\n\tif (pfd.revents & POLLIN) \n\t\treturn snd_seq_event_read_buffer(seq);\n\treturn seq->ibuflen;\n}\n\n/**\n * \\brief check events in input buffer\n * \\return the byte size of remaining input events on input buffer.\n *\n * If events remain on the input buffer of user-space, function returns\n * the total byte size of events on it.\n * If fetch_sequencer argument is non-zero,\n * this function checks the presence of events on sequencer FIFO\n * When events exist, they are transferred to the input buffer,\n * and the number of received events are returned.\n * If fetch_sequencer argument is zero and\n * no events remain on the input buffer, function simply returns zero.\n *\n * \\sa snd_seq_event_input()\n */\nint snd_seq_event_input_pending(snd_seq_t *seq, int fetch_sequencer)\n{\n\tif (seq->ibuflen == 0 && fetch_sequencer) {\n\t\treturn snd_seq_event_input_feed(seq, 0);\n\t}\n\treturn seq->ibuflen;\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * clear event buffers\n */\n\n/**\n * \\brief remove all events on user-space output buffer\n * \\param seq sequencer handle\n *\n * Removes all events on user-space output buffer.\n * Unlike snd_seq_drain_output(), this function doesn't remove\n * events on output memory pool of sequencer.\n *\n * \\sa snd_seq_drop_output()\n */\nint snd_seq_drop_output_buffer(snd_seq_t *seq)\n{\n\tassert(seq);\n\tseq->obufused = 0;\n\treturn 0;\n}\n\n/**\n * \\brief remove all events on user-space input FIFO\n * \\param seq sequencer handle\n *\n * \\sa snd_seq_drop_input()\n */\nint snd_seq_drop_input_buffer(snd_seq_t *seq)\n{\n\tassert(seq);\n\tseq->ibufptr = 0;\n\tseq->ibuflen = 0;\n\treturn 0;\n}\n\n/**\n * \\brief remove all events on output buffer\n * \\param seq sequencer handle\n *\n * Removes all events on both user-space output buffer and\n * output memory pool on kernel.\n *\n * \\sa snd_seq_drain_output(), snd_seq_drop_output_buffer(), snd_seq_remove_events()\n */\nint snd_seq_drop_output(snd_seq_t *seq)\n{\n\tsnd_seq_remove_events_t rminfo;\n\tassert(seq);\n\n\tmemset(&rminfo, 0, sizeof(rminfo));\n\trminfo.remove_mode = SNDRV_SEQ_REMOVE_OUTPUT;\n\n\treturn snd_seq_remove_events(seq, &rminfo);\n}\n\n/**\n * \\brief clear input buffer and and remove events in sequencer queue\n * \\param seq sequencer handle\n *\n * \\sa snd_seq_drop_input_buffer(), snd_seq_remove_events()\n */\nint snd_seq_drop_input(snd_seq_t *seq)\n{\n\tsnd_seq_remove_events_t rminfo;\n\tassert(seq);\n\n\tmemset(&rminfo, 0, sizeof(rminfo));\n\trminfo.remove_mode = SNDRV_SEQ_REMOVE_INPUT;\n\n\treturn snd_seq_remove_events(seq, &rminfo);\n}\n\n\n/**\n * \\brief get size of #snd_seq_remove_events_t\n * \\return size in bytes\n */\nsize_t snd_seq_remove_events_sizeof()\n{\n\treturn sizeof(snd_seq_remove_events_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_remove_events_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_remove_events_malloc(snd_seq_remove_events_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_remove_events_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_remove_events_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_remove_events_free(snd_seq_remove_events_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_remove_events_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_remove_events_copy(snd_seq_remove_events_t *dst, const snd_seq_remove_events_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the removal condition bits\n * \\param info remove_events container\n * \\return removal condition bits\n *\n * \\sa snd_seq_remove_events()\n */\nunsigned int snd_seq_remove_events_get_condition(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn info->remove_mode;\n}\n\n/**\n * \\brief Get the queue as removal condition\n * \\param info remove_events container\n * \\return queue id\n *\n * \\sa snd_seq_remove_events()\n */\nint snd_seq_remove_events_get_queue(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn info->queue;\n}\n\n/**\n * \\brief Get the event timestamp as removal condition\n * \\param info remove_events container\n * \\return time stamp\n *\n * \\sa snd_seq_remove_events()\n */\nconst snd_seq_timestamp_t *snd_seq_remove_events_get_time(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_timestamp_t *)&info->time;\n}\n\n/**\n * \\brief Get the event destination address as removal condition\n * \\param info remove_events container\n * \\return destination address\n *\n * \\sa snd_seq_remove_events()\n */\nconst snd_seq_addr_t *snd_seq_remove_events_get_dest(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn (const snd_seq_addr_t *)&info->dest;\n}\n\n/**\n * \\brief Get the event channel as removal condition\n * \\param info remove_events container\n * \\return channel number\n *\n * \\sa snd_seq_remove_events()\n */\nint snd_seq_remove_events_get_channel(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn info->channel;\n}\n\n/**\n * \\brief Get the event type as removal condition\n * \\param info remove_events container\n * \\return event type\n *\n * \\sa snd_seq_remove_events()\n */\nint snd_seq_remove_events_get_event_type(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn info->type;\n}\n\n/**\n * \\brief Get the event tag id as removal condition\n * \\param info remove_events container\n * \\return tag id\n *\n * \\sa snd_seq_remove_events()\n */\nint snd_seq_remove_events_get_tag(const snd_seq_remove_events_t *info)\n{\n\tassert(info);\n\treturn info->tag;\n}\n\n/**\n * \\brief Set the removal condition bits\n * \\param info remove_events container\n * \\param flags removal condition bits\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_condition(snd_seq_remove_events_t *info, unsigned int flags)\n{\n\tassert(info);\n\tinfo->remove_mode = flags;\n}\n\n/**\n * \\brief Set the queue as removal condition\n * \\param info remove_events container\n * \\param queue queue id\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_queue(snd_seq_remove_events_t *info, int queue)\n{\n\tassert(info);\n\tinfo->queue = queue;\n}\n\n/**\n * \\brief Set the timestamp as removal condition\n * \\param info remove_events container\n * \\param time timestamp pointer\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_time(snd_seq_remove_events_t *info, const snd_seq_timestamp_t *time)\n{\n\tassert(info);\n\tinfo->time = *(const union sndrv_seq_timestamp *)time;\n}\n\n/**\n * \\brief Set the destination address as removal condition\n * \\param info remove_events container\n * \\param addr destination address\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_dest(snd_seq_remove_events_t *info, const snd_seq_addr_t *addr)\n{\n\tassert(info);\n\tinfo->dest = *(const struct sndrv_seq_addr *)addr;\n}\n\n/**\n * \\brief Set the channel as removal condition\n * \\param info remove_events container\n * \\param channel channel number\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_channel(snd_seq_remove_events_t *info, int channel)\n{\n\tassert(info);\n\tinfo->channel = channel;\n}\n\n/**\n * \\brief Set the event type as removal condition\n * \\param info remove_events container\n * \\param type event type\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_event_type(snd_seq_remove_events_t *info, int type)\n{\n\tassert(info);\n\tinfo->type = type;\n}\n\n/**\n * \\brief Set the event tag as removal condition\n * \\param info remove_events container\n * \\param tag tag id\n *\n * \\sa snd_seq_remove_events()\n */\nvoid snd_seq_remove_events_set_tag(snd_seq_remove_events_t *info, int tag)\n{\n\tassert(info);\n\tinfo->tag = tag;\n}\n\n\n/* compare timestamp between events */\n/* return 1 if a >= b; otherwise return 0 */\nstatic inline int snd_seq_compare_tick_time(snd_seq_tick_time_t *a, snd_seq_tick_time_t *b)\n{\n\t/* compare ticks */\n\treturn (*a >= *b);\n}\n\nstatic inline int snd_seq_compare_real_time(snd_seq_real_time_t *a, snd_seq_real_time_t *b)\n{\n\t/* compare real time */\n\tif (a->tv_sec > b->tv_sec)\n\t\treturn 1;\n\tif ((a->tv_sec == b->tv_sec) && (a->tv_nsec >= b->tv_nsec))\n\t\treturn 1;\n\treturn 0;\n}\n\n/* Routine to match events to be removed */\nstatic int remove_match(snd_seq_remove_events_t *info, snd_seq_event_t *ev)\n{\n\tint res;\n\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_DEST) {\n\t\tif (ev->dest.client != info->dest.client ||\n\t\t\t\tev->dest.port != info->dest.port)\n\t\t\treturn 0;\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_DEST_CHANNEL) {\n\t\tif (! snd_seq_ev_is_channel_type(ev))\n\t\t\treturn 0;\n\t\t/* data.note.channel and data.control.channel are identical */\n\t\tif (ev->data.note.channel != info->channel)\n\t\t\treturn 0;\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_TIME_AFTER) {\n\t\tif (info->remove_mode & SNDRV_SEQ_REMOVE_TIME_TICK)\n\t\t\tres = snd_seq_compare_tick_time(&ev->time.tick, &info->time.tick);\n\t\telse\n\t\t\tres = snd_seq_compare_real_time(&ev->time.time, (snd_seq_real_time_t *)&info->time.time);\n\t\tif (!res)\n\t\t\treturn 0;\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_TIME_BEFORE) {\n\t\tif (info->remove_mode & SNDRV_SEQ_REMOVE_TIME_TICK)\n\t\t\tres = snd_seq_compare_tick_time(&ev->time.tick, &info->time.tick);\n\t\telse\n\t\t\tres = snd_seq_compare_real_time(&ev->time.time, (snd_seq_real_time_t *)&info->time.time);\n\t\tif (res)\n\t\t\treturn 0;\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_EVENT_TYPE) {\n\t\tif (ev->type != info->type)\n\t\t\treturn 0;\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_IGNORE_OFF) {\n\t\t/* Do not remove off events */\n\t\tswitch (ev->type) {\n\t\tcase SND_SEQ_EVENT_NOTEOFF:\n\t\t/* case SND_SEQ_EVENT_SAMPLE_STOP: */\n\t\t\treturn 0;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (info->remove_mode & SNDRV_SEQ_REMOVE_TAG_MATCH) {\n\t\tif (info->tag != ev->tag)\n\t\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n/**\n * \\brief remove events on input/output buffers and pools\n * \\param seq sequencer handle\n * \\param rmp remove event container\n *\n * Removes matching events with the given condition from input/output buffers\n * and pools.\n * The removal condition is specified in \\a rmp argument.\n *\n * \\sa snd_seq_event_output(), snd_seq_drop_output(), snd_seq_reset_pool_output()\n */\nint snd_seq_remove_events(snd_seq_t *seq, snd_seq_remove_events_t *rmp)\n{\n\tif (rmp->remove_mode & SNDRV_SEQ_REMOVE_INPUT) {\n\t\t/*\n\t\t * First deal with any events that are still buffered\n\t\t * in the library.\n\t\t */\n\t\tsnd_seq_drop_input_buffer(seq);\n\t}\n\n\tif (rmp->remove_mode & SNDRV_SEQ_REMOVE_OUTPUT) {\n\t\t/*\n\t\t * First deal with any events that are still buffered\n\t\t * in the library.\n\t\t */\n\t\t if (! (rmp->remove_mode & ~(SNDRV_SEQ_REMOVE_INPUT|SNDRV_SEQ_REMOVE_OUTPUT))) {\n\t\t\t /* The simple case - remove all */\n\t\t\t snd_seq_drop_output_buffer(seq);\n\t\t} else {\n\t\t\tchar *ep;\n\t\t\tsize_t len;\n\t\t\tsnd_seq_event_t *ev;\n\n\t\t\tep = seq->obuf;\n\t\t\twhile (ep - seq->obuf < (ssize_t)seq->obufused) {\n\n\t\t\t\tev = (snd_seq_event_t *)ep;\n\t\t\t\tlen = snd_seq_event_length(ev);\n\n\t\t\t\tif (remove_match(rmp, ev)) {\n\t\t\t\t\t/* Remove event */\n\t\t\t\t\tseq->obufused -= len;\n\t\t\t\t\tmemmove(ep, ep + len, seq->obufused - (ep - seq->obuf));\n\t\t\t\t} else {\n\t\t\t\t\tep += len;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn seq->ops->remove_events(seq, rmp);\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * client memory pool\n */\n\n/**\n * \\brief get size of #snd_seq_client_pool_t\n * \\return size in bytes\n */\nsize_t snd_seq_client_pool_sizeof()\n{\n\treturn sizeof(snd_seq_client_pool_t);\n}\n\n/**\n * \\brief allocate an empty #snd_seq_client_pool_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_seq_client_pool_malloc(snd_seq_client_pool_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_seq_client_pool_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees a previously allocated #snd_seq_client_pool_t\n * \\param obj pointer to object to free\n */\nvoid snd_seq_client_pool_free(snd_seq_client_pool_t *obj)\n{\n\tfree(obj);\n}\n\n/**\n * \\brief copy one #snd_seq_client_pool_t to another\n * \\param dst pointer to destination\n * \\param src pointer to source\n */\nvoid snd_seq_client_pool_copy(snd_seq_client_pool_t *dst, const snd_seq_client_pool_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n/**\n * \\brief Get the client id of a queue_info container\n * \\param info client_pool container\n * \\return client id\n */\nint snd_seq_client_pool_get_client(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->client;\n}\n\n/**\n * \\brief Get the output pool size of a queue_info container\n * \\param info client_pool container\n * \\return output pool size\n */\nsize_t snd_seq_client_pool_get_output_pool(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->output_pool;\n}\n\n/**\n * \\brief Get the input pool size of a queue_info container\n * \\param info client_pool container\n * \\return input pool size\n */\nsize_t snd_seq_client_pool_get_input_pool(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->input_pool;\n}\n\n/**\n * \\brief Get the output room size of a queue_info container\n * \\param info client_pool container\n * \\return output room size\n */\nsize_t snd_seq_client_pool_get_output_room(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->output_room;\n}\n\n/**\n * \\brief Get the available size on output pool of a queue_info container\n * \\param info client_pool container\n * \\return available output size\n */\nsize_t snd_seq_client_pool_get_output_free(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->output_free;\n}\n\n/**\n * \\brief Get the available size on input pool of a queue_info container\n * \\param info client_pool container\n * \\return available input size\n */\nsize_t snd_seq_client_pool_get_input_free(const snd_seq_client_pool_t *info)\n{\n\tassert(info);\n\treturn info->input_free;\n}\n\n/**\n * \\brief Set the output pool size of a queue_info container\n * \\param info client_pool container\n * \\param size output pool size\n */\nvoid snd_seq_client_pool_set_output_pool(snd_seq_client_pool_t *info, size_t size)\n{\n\tassert(info);\n\tinfo->output_pool = size;\n}\n\n/**\n * \\brief Set the input pool size of a queue_info container\n * \\param info client_pool container\n * \\param size input pool size\n */\nvoid snd_seq_client_pool_set_input_pool(snd_seq_client_pool_t *info, size_t size)\n{\n\tassert(info);\n\tinfo->input_pool = size;\n}\n\n/**\n * \\brief Set the output room size of a queue_info container\n * \\param info client_pool container\n * \\param size output room size\n */\nvoid snd_seq_client_pool_set_output_room(snd_seq_client_pool_t *info, size_t size)\n{\n\tassert(info);\n\tinfo->output_room = size;\n}\n\n\n/**\n * \\brief obtain the pool information of the current client\n * \\param seq sequencer handle\n * \\param info information to be stored\n */\nint snd_seq_get_client_pool(snd_seq_t *seq, snd_seq_client_pool_t *info)\n{\n\tassert(seq && info);\n\tinfo->client = seq->client;\n\treturn seq->ops->get_client_pool(seq, info);\n}\n\n/**\n * \\brief set the pool information\n * \\param seq sequencer handle\n * \\param info information to update\n *\n * Sets the pool information of the current client.\n * The client field in \\a info is replaced automatically with the current id.\n */\nint snd_seq_set_client_pool(snd_seq_t *seq, snd_seq_client_pool_t *info)\n{\n\tassert(seq && info);\n\tinfo->client = seq->client;\n\treturn seq->ops->set_client_pool(seq, info);\n}\n\n/*----------------------------------------------------------------*/\n\n/*\n * misc.\n */\n\n/**\n * \\brief set a bit flag\n */\nvoid snd_seq_set_bit(int nr, void *array)\n{\n\t((unsigned int *)array)[nr >> 5] |= 1UL << (nr & 31);\n}\n\n/**\n * \\brief unset a bit flag\n */\nvoid snd_seq_unset_bit(int nr, void *array)\n{\n       ((unsigned int *)array)[nr >> 5] &= ~(1UL << (nr & 31));\n}\n\n/**\n * \\brief change a bit flag\n */\nint snd_seq_change_bit(int nr, void *array)\n{\n\tint result;\n\n\tresult = ((((unsigned int *)array)[nr >> 5]) & (1UL << (nr & 31))) ? 1 : 0;\n\t((unsigned int *)array)[nr >> 5] ^= 1UL << (nr & 31);\n\treturn result;\n}\n\n/**\n * \\brief get a bit flag state\n */\nint snd_seq_get_bit(int nr, void *array)\n{\n\treturn ((((unsigned int *)array)[nr >> 5]) & (1UL << (nr & 31))) ? 1 : 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/hwdep/hwdep.c": "/**\n * \\file hwdep/hwdep.c\n * \\brief HwDep Interface (hardware dependent)\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2000-2001\n *\n * HwDep (hardware dependent) Interface is designed for individual hardware\n * access. This interface does not cover any API specification.\n */\n/*\n *  Hardware dependent Interface - main file\n *  Copyright (c) 2000 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#include \"hwdep_local.h\"\n\nstatic int snd_hwdep_open_conf(snd_hwdep_t **hwdep,\n\t\t\t       const char *name, snd_config_t *hwdep_root,\n\t\t\t       snd_config_t *hwdep_conf, int mode)\n{\n\tconst char *str;\n\tchar buf[256];\n\tint err;\n\tsnd_config_t *conf, *type_conf = NULL;\n\tsnd_config_iterator_t i, next;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL;\n\tint (*open_func)(snd_hwdep_t **, const char *, snd_config_t *, snd_config_t *, int) = NULL;\n#ifndef PIC\n\textern void *snd_hwdep_open_symbols(void);\n#endif\n\tvoid *h = NULL;\n\tif (snd_config_get_type(hwdep_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tif (name)\n\t\t\tSNDERR(\"Invalid type for HWDEP %s definition\", name);\n\t\telse\n\t\t\tSNDERR(\"Invalid type for HWDEP definition\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_search(hwdep_conf, \"type\", &conf);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_id(conf, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(conf, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(hwdep_root, \"hwdep_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for HWDEP type %s definition\", str);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_hwdep_%s_open\", str);\n\t}\n#ifndef PIC\n\tsnd_hwdep_open_symbols();\n#endif\n\th = snd_dlopen(lib, RTLD_NOW);\n\tif (h)\n\t\topen_func = snd_dlsym(h, open_name, SND_DLSYM_VERSION(SND_HWDEP_DLSYM_VERSION));\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (err >= 0) {\n\t\terr = open_func(hwdep, name, hwdep_root, hwdep_conf, mode);\n\t\tif (err >= 0) {\n\t\t\t(*hwdep)->dl_handle = h;\n\t\t} else {\n\t\t\tsnd_dlclose(h);\n\t\t}\n\t}\n\treturn err;\n}\n\nstatic int snd_hwdep_open_noupdate(snd_hwdep_t **hwdep, snd_config_t *root, const char *name, int mode)\n{\n\tint err;\n\tsnd_config_t *hwdep_conf;\n\terr = snd_config_search_definition(root, \"hwdep\", name, &hwdep_conf);\n\tif (err < 0) {\n\t\tSNDERR(\"Unknown HwDep %s\", name);\n\t\treturn err;\n\t}\n\terr = snd_hwdep_open_conf(hwdep, name, root, hwdep_conf, mode);\n\tsnd_config_delete(hwdep_conf);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the HwDep interface.\n * \\param hwdep Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the HwDep handle\n * \\param mode Open mode\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the HwDep interface specified with\n * an ASCII identifier and mode.\n */\nint snd_hwdep_open(snd_hwdep_t **hwdep, const char *name, int mode)\n{\n\tsnd_config_t *top;\n\tint err;\n\n\tassert(hwdep && name);\n\terr = snd_config_update_ref(&top);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_hwdep_open_noupdate(hwdep, top, name, mode);\n\tsnd_config_unref(top);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the HwDep interface using local configuration\n * \\param hwdep Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the HwDep handle\n * \\param mode Open mode\n * \\param lconf The local configuration tree\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the HwDep interface specified with\n * an ASCII identifier and mode.\n */\nint snd_hwdep_open_lconf(snd_hwdep_t **hwdep, const char *name,\n\t\t\t int mode, snd_config_t *lconf)\n{\n\tassert(hwdep && name && lconf);\n\treturn snd_hwdep_open_noupdate(hwdep, lconf, name, mode);\n}\n\n/**\n * \\brief close HwDep handle\n * \\param hwdep HwDep handle\n * \\return 0 on success otherwise a negative error code\n *\n * Closes the specified HwDep handle and frees all associated\n * resources.\n */\nint snd_hwdep_close(snd_hwdep_t *hwdep)\n{\n\tint err;\n  \tassert(hwdep);\n\terr = hwdep->ops->close(hwdep);\n\tif (hwdep->dl_handle)\n\t\tsnd_dlclose(hwdep->dl_handle);\n\tfree(hwdep->name);\n\tfree(hwdep);\n\treturn err;\n}\n\n/**\n * \\brief get identifier of HwDep handle\n * \\param hwdep a Hwdep handle\n * \\return ascii identifier of HwDep handle\n *\n * Returns the ASCII identifier of given HwDep handle. It's the same\n * identifier specified in snd_hwdep_open().\n */\nconst char *snd_hwdep_name(snd_hwdep_t *hwdep)\n{\n\tassert(hwdep);\n\treturn hwdep->name;\n}\n\n/**\n * \\brief get type of HwDep handle\n * \\param hwdep a HwDep handle\n * \\return type of HwDep handle\n *\n * Returns the type #snd_hwdep_type_t of given HwDep handle.\n */\nsnd_hwdep_type_t snd_hwdep_type(snd_hwdep_t *hwdep)\n{\n\tassert(hwdep);\n\treturn hwdep->type;\n}\n\n/**\n * \\brief get count of poll descriptors for HwDep handle\n * \\param hwdep HwDep handle\n * \\return count of poll descriptors\n */\nint snd_hwdep_poll_descriptors_count(snd_hwdep_t *hwdep)\n{\n\tassert(hwdep);\n\treturn 1;\n}\n\n/**\n * \\brief get poll descriptors\n * \\param hwdep HwDep handle\n * \\param pfds array of poll descriptors\n * \\param space space in the poll descriptor array\n * \\return count of filled descriptors\n */\nint snd_hwdep_poll_descriptors(snd_hwdep_t *hwdep, struct pollfd *pfds, unsigned int space)\n{\n\tassert(hwdep);\n\tif (space >= 1) {\n\t\tpfds->fd = hwdep->poll_fd;\n\t\tswitch (hwdep->mode & O_ACCMODE) {\n\t\tcase O_WRONLY:\n\t\t\tpfds->events = POLLOUT|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tcase O_RDONLY:\n\t\t\tpfds->events = POLLIN|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tcase O_RDWR:\n\t\t\tpfds->events = POLLOUT|POLLIN|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn -EIO;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief get returned events from poll descriptors\n * \\param hwdep HwDep  handle\n * \\param pfds array of poll descriptors\n * \\param nfds count of poll descriptors\n * \\param revents returned events\n * \\return zero if success, otherwise a negative error code\n */\nint snd_hwdep_poll_descriptors_revents(snd_hwdep_t *hwdep, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)\n{\n        assert(hwdep && pfds && revents);\n        if (nfds == 1) {\n                *revents = pfds->revents;\n                return 0;\n        }\n        return -EINVAL;\n}                                                                       \n                                                                       \n/**\n * \\brief set nonblock mode\n * \\param hwdep HwDep handle\n * \\param nonblock 0 = block, 1 = nonblock mode\n * \\return 0 on success otherwise a negative error code\n */\nint snd_hwdep_nonblock(snd_hwdep_t *hwdep, int nonblock)\n{\n\tint err;\n\tassert(hwdep);\n\tif ((err = hwdep->ops->nonblock(hwdep, nonblock)) < 0)\n\t\treturn err;\n\tif (nonblock)\n\t\thwdep->mode |= SND_HWDEP_OPEN_NONBLOCK;\n\telse\n\t\thwdep->mode &= ~SND_HWDEP_OPEN_NONBLOCK;\n\treturn 0;\n}\n\n/**\n * \\brief get size of the snd_hwdep_info_t structure in bytes\n * \\return size of the snd_hwdep_info_t structure in bytes\n */\nsize_t snd_hwdep_info_sizeof()\n{\n\treturn sizeof(snd_hwdep_info_t);\n}\n\n/**\n * \\brief allocate a new snd_hwdep_info_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_hwdep_info_t structure using the standard\n * malloc C library function.\n */\nint snd_hwdep_info_malloc(snd_hwdep_info_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_hwdep_info_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_hwdep_info_t structure\n * \\param info pointer to the snd_hwdep_info_t structure to free\n *\n * Frees the given snd_hwdep_info_t structure using the standard\n * free C library function.\n */\nvoid snd_hwdep_info_free(snd_hwdep_info_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_hwdep_info_t structure to another\n * \\param dst destination snd_hwdep_info_t structure\n * \\param src source snd_hwdep_info_t structure\n */\nvoid snd_hwdep_info_copy(snd_hwdep_info_t *dst, const snd_hwdep_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief get hwdep card number\n * \\param obj pointer to a snd_hwdep_info_t structure\n * \\return hwdep card number\n */\nint snd_hwdep_info_get_card(const snd_hwdep_info_t *obj)\n{\n\tassert(obj);\n\treturn obj->card;\n}\n\n/**\n * \\brief get hwdep device number\n * \\param info pointer to a snd_hwdep_info_t structure\n * \\return hwdep device number\n */\nunsigned int snd_hwdep_info_get_device(const snd_hwdep_info_t *info)\n{\n\tassert(info);\n\treturn info->device;\n}\n\n/**\n * \\brief get hwdep driver identifier\n * \\param obj pointer to a snd_hwdep_info_t structure\n * \\return hwdep driver identifier\n */\nconst char *snd_hwdep_info_get_id(const snd_hwdep_info_t *obj)\n{\n\tassert(obj);\n\treturn (const char *)obj->id;\n}\n\n/**\n * \\brief get hwdep driver name\n * \\param obj pointer to a snd_hwdep_info_t structure\n * \\return hwdep driver name\n */\nconst char *snd_hwdep_info_get_name(const snd_hwdep_info_t *obj)\n{\n\tassert(obj);\n\treturn (const char *)obj->name;\n}\n\n/**\n * \\brief get hwdep protocol interface\n * \\param obj pointer to a snd_hwdep_info_t structure\n * \\return hwdep protocol interface\n */\nsnd_hwdep_iface_t snd_hwdep_info_get_iface(const snd_hwdep_info_t *obj)\n{\n\tassert(obj);\n\treturn obj->iface;\n}\n\n/**\n * \\brief set hwdep device number\n * \\param obj pointer to a snd_hwdep_info_t structure\n * \\param val hwdep device\n */\nvoid snd_hwdep_info_set_device(snd_hwdep_info_t *obj, unsigned int val)\n{\n\tassert(obj);\n\tobj->device = val;\n}\n\n/**\n * \\brief get information about HwDep handle\n * \\param hwdep HwDep handle\n * \\param info pointer to a snd_hwdep_info_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_hwdep_info(snd_hwdep_t *hwdep, snd_hwdep_info_t * info)\n{\n\tassert(hwdep);\n\tassert(info);\n\treturn hwdep->ops->info(hwdep, info);\n}\n\n/**\n * \\brief do hardware dependent ioctl\n * \\param hwdep HwDep handle\n * \\param request ioctl command\n * \\param arg ioctl argument\n * \\return 0 on success otherwise a negative error code\n */\nint snd_hwdep_ioctl(snd_hwdep_t *hwdep, unsigned int request, void * arg)\n{\n\tassert(hwdep);\n\treturn hwdep->ops->ioctl(hwdep, request, arg);\n}\n\n/**\n * \\brief write bytes using HwDep handle\n * \\param hwdep HwDep handle\n * \\param buffer buffer containing bytes to write\n * \\param size output buffer size in bytes\n */\nssize_t snd_hwdep_write(snd_hwdep_t *hwdep, const void *buffer, size_t size)\n{\n\tassert(hwdep);\n\tassert(((hwdep->mode & O_ACCMODE) == O_WRONLY) || ((hwdep->mode & O_ACCMODE) == O_RDWR));\n\tassert(buffer || size == 0);\n\treturn hwdep->ops->write(hwdep, buffer, size);\n}\n\n/**\n * \\brief read bytes using HwDep handle\n * \\param hwdep HwDep handle\n * \\param buffer buffer to store the input bytes\n * \\param size input buffer size in bytes\n */\nssize_t snd_hwdep_read(snd_hwdep_t *hwdep, void *buffer, size_t size)\n{\n\tassert(hwdep);\n\tassert(((hwdep->mode & O_ACCMODE) == O_RDONLY) || ((hwdep->mode & O_ACCMODE) == O_RDWR));\n\tassert(buffer || size == 0);\n\treturn (hwdep->ops->read)(hwdep, buffer, size);\n}\n\n/**\n * \\brief get the DSP status information\n * \\param hwdep HwDep handle\n * \\param info pointer to a snd_hwdep_dsp_status_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_hwdep_dsp_status(snd_hwdep_t *hwdep, snd_hwdep_dsp_status_t *info)\n{\n\tassert(hwdep);\n\tassert(info);\n\treturn hwdep->ops->ioctl(hwdep, SNDRV_HWDEP_IOCTL_DSP_STATUS, (void*)info);\n}\n\n/**\n * \\brief load the DSP block\n * \\param hwdep HwDep handle\n * \\param block pointer to a snd_hwdep_dsp_image_t structure to transfer\n * \\return 0 on success otherwise a negative error code\n */\nint snd_hwdep_dsp_load(snd_hwdep_t *hwdep, snd_hwdep_dsp_image_t *block)\n{\n\tassert(hwdep);\n\tassert(block);\n\treturn hwdep->ops->ioctl(hwdep, SNDRV_HWDEP_IOCTL_DSP_LOAD, (void*)block);\n}\n\n/**\n * \\brief get size of the snd_hwdep_dsp_status_t structure in bytes\n * \\return size of the snd_hwdep_dsp_status_t structure in bytes\n */\nsize_t snd_hwdep_dsp_status_sizeof()\n{\n\treturn sizeof(snd_hwdep_dsp_status_t);\n}\n\n/**\n * \\brief allocate a new snd_hwdep_dsp_status_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_hwdep_dsp_status_t structure using the standard\n * malloc C library function.\n */\nint snd_hwdep_dsp_status_malloc(snd_hwdep_dsp_status_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_hwdep_dsp_status_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_hwdep_dsp_status_t structure\n * \\param info pointer to the snd_hwdep_dsp_status_t structure to free\n *\n * Frees the given snd_hwdep_dsp_status_t structure using the standard\n * free C library function.\n */\nvoid snd_hwdep_dsp_status_free(snd_hwdep_dsp_status_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_hwdep_dsp_status_t structure to another\n * \\param dst destination snd_hwdep_dsp_status_t structure\n * \\param src source snd_hwdep_dsp_status_t structure\n */\nvoid snd_hwdep_dsp_status_copy(snd_hwdep_dsp_status_t *dst, const snd_hwdep_dsp_status_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief get the driver version of dsp loader\n * \\param obj pointer to a snd_hwdep_dsp_status_t structure\n * \\return the driver version\n */\nunsigned int snd_hwdep_dsp_status_get_version(const snd_hwdep_dsp_status_t *obj)\n{\n\tassert(obj);\n\treturn obj->version;\n}\n\n/**\n * \\brief get the driver id of dsp loader\n * \\param obj pointer to a snd_hwdep_dsp_status_t structure\n * \\return the driver id string\n */\nconst char *snd_hwdep_dsp_status_get_id(const snd_hwdep_dsp_status_t *obj)\n{\n\tassert(obj);\n\treturn (const char *)obj->id;\n}\n\n/**\n * \\brief get number of dsp blocks\n * \\param obj pointer to a snd_hwdep_dsp_status_t structure\n * \\return number of dsp blocks\n */\nunsigned int snd_hwdep_dsp_status_get_num_dsps(const snd_hwdep_dsp_status_t *obj)\n{\n\tassert(obj);\n\treturn obj->num_dsps;\n}\n\n/**\n * \\brief get the bit flags of the loaded dsp blocks\n * \\param info pointer to a snd_hwdep_dsp_status_t structure\n * \\return the big flags of the loaded dsp blocks\n */\nunsigned int snd_hwdep_dsp_status_get_dsp_loaded(const snd_hwdep_dsp_status_t *info)\n{\n\tassert(info);\n\treturn info->dsp_loaded;\n}\n\n/**\n * \\brief get the chip status of dsp loader\n * \\param obj pointer to a snd_hwdep_dsp_status_t structure\n * \\return non-zero if all DSP blocks are loaded and the chip is ready\n */\nunsigned int snd_hwdep_dsp_status_get_chip_ready(const snd_hwdep_dsp_status_t *obj)\n{\n\tassert(obj);\n\treturn obj->chip_ready;\n}\n\n/**\n * \\brief get size of the snd_hwdep_dsp_image_t structure in bytes\n * \\return size of the snd_hwdep_dsp_image_t structure in bytes\n */\nsize_t snd_hwdep_dsp_image_sizeof()\n{\n\treturn sizeof(snd_hwdep_dsp_image_t);\n}\n\n/**\n * \\brief allocate a new snd_hwdep_dsp_image_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_hwdep_dsp_image_t structure using the standard\n * malloc C library function.\n */\nint snd_hwdep_dsp_image_malloc(snd_hwdep_dsp_image_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_hwdep_dsp_image_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_hwdep_dsp_image_t structure\n * \\param info pointer to the snd_hwdep_dsp_image_t structure to free\n *\n * Frees the given snd_hwdep_dsp_image_t structure using the standard\n * free C library function.\n */\nvoid snd_hwdep_dsp_image_free(snd_hwdep_dsp_image_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_hwdep_dsp_image_t structure to another\n * \\param dst destination snd_hwdep_dsp_image_t structure\n * \\param src source snd_hwdep_dsp_image_t structure\n */\nvoid snd_hwdep_dsp_image_copy(snd_hwdep_dsp_image_t *dst, const snd_hwdep_dsp_image_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief get the DSP block index\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\return the index of the DSP block\n */\nunsigned int snd_hwdep_dsp_image_get_index(const snd_hwdep_dsp_image_t *obj)\n{\n\tassert(obj);\n\treturn obj->index;\n}\n\n/**\n * \\brief get the name of the DSP block\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\return the name string of the DSP block\n */\nconst char *snd_hwdep_dsp_image_get_name(const snd_hwdep_dsp_image_t *obj)\n{\n\tassert(obj);\n\treturn (const char *)obj->name;\n}\n\n/**\n * \\brief get the length of the DSP block\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\return the length of the DSP block in bytes\n */\nsize_t snd_hwdep_dsp_image_get_length(const snd_hwdep_dsp_image_t *obj)\n{\n\tassert(obj);\n\treturn obj->length;\n}\n\n/**\n * \\brief get the image pointer of the DSP block\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\return the image pointer of the DSP block\n */\nconst void *snd_hwdep_dsp_image_get_image(const snd_hwdep_dsp_image_t *obj)\n{\n\tassert(obj);\n\treturn obj->image;\n}\n\n/**\n * \\brief set the DSP block index\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\param index the index value to set\n */\nvoid snd_hwdep_dsp_image_set_index(snd_hwdep_dsp_image_t *obj, unsigned int index)\n{\n\tassert(obj);\n\tobj->index = index;\n}\n\n/**\n * \\brief set the name of the DSP block\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\param name the name string\n */\nvoid snd_hwdep_dsp_image_set_name(snd_hwdep_dsp_image_t *obj, const char *name)\n{\n\tassert(obj && name);\n\tstrncpy((char *)obj->name, name, sizeof(obj->name));\n\tobj->name[sizeof(obj->name)-1] = 0;\n}\n\n/**\n * \\brief set the DSP block length\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\param length the length of the DSP block\n */\nvoid snd_hwdep_dsp_image_set_length(snd_hwdep_dsp_image_t *obj, size_t length)\n{\n\tassert(obj);\n\tobj->length = length;\n}\n\n/**\n * \\brief set the DSP block image pointer\n * \\param obj pointer to a snd_hwdep_dsp_image_t structure\n * \\param image the DSP image pointer\n */\nvoid snd_hwdep_dsp_image_set_image(snd_hwdep_dsp_image_t *obj, void *image)\n{\n\tassert(obj);\n\tobj->image = image;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/rawmidi/rawmidi.c": "/**\n * \\file rawmidi/rawmidi.c\n * \\brief RawMidi Interface\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\date 2000-2001\n *\n * See the \\ref rawmidi page for more details.\n */\n/*\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n/*! \\page rawmidi RawMidi interface\n\n<P>RawMidi Interface is designed to write or read raw (unchanged) MIDI\ndata over the MIDI line without any timestamps defined in interface. MIDI\nstands Musical Instrument Digital Interface and more information about\nthis standard can be found at http://www.midi.org.\n\n\\section rawmidi_general_overview General overview\n\nThe rawmidi implementation uses ring buffers to store outgoing and incoming\nMIDI stream. The buffer size is tunable and drivers report underruns for incoming\nstream as well.\n\n\\section rawmidi_open Open handling\n\nRawMidi devices are opened exclusively for a selected direction.\nWhile more than one process may not open a given MIDI device in the same\ndirection simultaneously, separate processes may open a single MIDI device\nin different directions (i.e. process one opens a MIDI device in write\ndirection and process two opens the same device in read direction).\n\n\\subsection rawmidi_open_nonblock Nonblocking open (flag)\n\nUsing #SND_RAWMIDI_NONBLOCK flag for snd_rawmidi_open() or snd_rawmidi_open_lconf()\ninstruct device driver to return the -EBUSY error when device is already occupied\nwith another application. This flag also changes behaviour of snd_rawmidi_write()\nand snd_rawmidi_read() returning -EAGAIN when no more bytes can be processed.\n\nNote: In opposite (default) behaviour, application is blocked until device resources\nare free.\n\n\\subsection rawmidi_open_append Append open (flag)\n\nUsing #SND_RAWMIDI_APPEND flag (output only) instruct device driver to append\ncontents of written buffer - passed by snd_rawmidi_write() - atomically\nto output ring buffer in the kernel space. This flag also means that device\nis not opened exclusively, so more applications can share given rawmidi device.\nNote that applications must send the whole MIDI message including the running status,\nbecause another writing application might break the MIDI message in the output\nbuffer.\n\n\\subsection rawmidi_open_sync Sync open (flag)\n\nUsing #SND_RAWMIDI_SYNC flag (output only) assures that the contents of output\nbuffer specified using snd_rawmidi_write() is always drained before the function\nexits. This behaviour is same like 'snd_rawmidi_write() followed by\nsnd_rawmidi_drain() immediately'.\n\n\\subsection rawmidi_io I/O handling\n\nThere is only standard read/write access to device internal ring buffer. Use\nsnd_rawmidi_read() and snd_rawmidi_write() functions to obtain / write MIDI bytes.\n\n\\subsection rawmidi_dev_names RawMidi naming conventions\n\nThe ALSA library uses a generic string representation for names of devices.\nThe devices might be virtual, physical or a mix of both. The generic string\nis passed to \\link ::snd_rawmidi_open() \\endlink or \\link ::snd_rawmidi_open_lconf() \\endlink.\nIt contains two parts: device name and arguments. Devices and arguments are described\nin configuration files. The usual place for default definitions is at /usr/share/alsa/alsa.conf.\n\n\\subsection rawmidi_dev_names_default \n\nThe default device is equal to hw device. The defaults are used:\n\ndefaults.rawmidi.card 0\ndefaults.rawmidi.device 0\ndefaults.rawmidi.subdevice -1\n\nThese defaults can be freely overwritten in local configuration files.\n\nExample:\n\n\\code\ndefault\n\\endcode\n\n\\subsection rawmidi_dev_names_hw HW device\n\nThe hw device description uses the hw plugin. The three arguments (in order: CARD,DEV,SUBDEV)\nspecify card number or identifier, device number and subdevice number (-1 means any).\n\nExample:\n\n\\code\nhw\nhw:0\nhw:0,0\nhw:supersonic,1\nhw:soundwave,1,2\nhw:DEV=1,CARD=soundwave,SUBDEV=2\n\\endcode\n\n\\section rawmidi_examples Examples\n\nThe full featured examples with cross-links:\n\n\\par Simple input/output test program\n\\ref example_test_rawmidi \"example code\"\n\\par\nThis example shows open and read/write rawmidi operations.\n\n*/\n\n/**\n * \\example ../test/rawmidi.c\n * \\anchor example_test_rawmidi\n */\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <string.h>\n#include \"rawmidi_local.h\"\n\n/**\n * \\brief setup the default parameters\n * \\param rawmidi RawMidi handle\n * \\param params pointer to a snd_rawmidi_params_t structure\n * \\return 0 on success otherwise a negative error code\n */\nstatic int snd_rawmidi_params_default(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t *params)\n{\n\tassert(rawmidi);\n\tassert(params);\n\tparams->buffer_size = page_size();\n\tparams->avail_min = 1;\n\tparams->no_active_sensing = 1;\n\treturn 0;\n}\n\nstatic int snd_rawmidi_open_conf(snd_rawmidi_t **inputp, snd_rawmidi_t **outputp,\n\t\t\t\t const char *name, snd_config_t *rawmidi_root,\n\t\t\t\t snd_config_t *rawmidi_conf, int mode)\n{\n\tconst char *str;\n\tchar buf[256];\n\tint err;\n\tsnd_config_t *conf, *type_conf = NULL;\n\tsnd_config_iterator_t i, next;\n\tsnd_rawmidi_params_t params;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL;\n\tint (*open_func)(snd_rawmidi_t **, snd_rawmidi_t **,\n\t\t\t const char *, snd_config_t *, snd_config_t *, int) = NULL;\n#ifndef PIC\n\textern void *snd_rawmidi_open_symbols(void);\n#endif\n\tvoid *h = NULL;\n\tif (snd_config_get_type(rawmidi_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tif (name)\n\t\t\tSNDERR(\"Invalid type for RAWMIDI %s definition\", name);\n\t\telse\n\t\t\tSNDERR(\"Invalid type for RAWMIDI definition\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_search(rawmidi_conf, \"type\", &conf);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_id(conf, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(conf, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(rawmidi_root, \"rawmidi_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for RAWMIDI type %s definition\", str);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_rawmidi_%s_open\", str);\n\t}\n#ifndef PIC\n\tsnd_rawmidi_open_symbols();\n#endif\n\th = snd_dlopen(lib, RTLD_NOW);\n\tif (h)\n\t\topen_func = snd_dlsym(h, open_name, SND_DLSYM_VERSION(SND_RAWMIDI_DLSYM_VERSION));\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (err >= 0)\n\t\terr = open_func(inputp, outputp, name, rawmidi_root, rawmidi_conf, mode);\n\tif (err < 0) {\n\t\tif (h)\n\t\t\tsnd_dlclose(h);\n\t\treturn err;\n\t}\n\tif (inputp) {\n\t\t(*inputp)->dl_handle = h; h = NULL;\n\t\tsnd_rawmidi_params_default(*inputp, &params);\n\t\terr = snd_rawmidi_params(*inputp, &params);\n\t\tassert(err >= 0);\n\t}\n\tif (outputp) {\n\t\t(*outputp)->dl_handle = h;\n\t\tsnd_rawmidi_params_default(*outputp, &params);\n\t\terr = snd_rawmidi_params(*outputp, &params);\n\t\tassert(err >= 0);\n\t}\n\treturn 0;\n}\n\nstatic int snd_rawmidi_open_noupdate(snd_rawmidi_t **inputp, snd_rawmidi_t **outputp,\n\t\t\t\t     snd_config_t *root, const char *name, int mode)\n{\n\tint err;\n\tsnd_config_t *rawmidi_conf;\n\terr = snd_config_search_definition(root, \"rawmidi\", name, &rawmidi_conf);\n\tif (err < 0) {\n\t\tSNDERR(\"Unknown RawMidi %s\", name);\n\t\treturn err;\n\t}\n\terr = snd_rawmidi_open_conf(inputp, outputp, name, root, rawmidi_conf, mode);\n\tsnd_config_delete(rawmidi_conf);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the RawMidi interface.\n * \\param inputp Returned input handle (NULL if not wanted)\n * \\param outputp Returned output handle (NULL if not wanted)\n * \\param name ASCII identifier of the RawMidi handle\n * \\param mode Open mode\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the RawMidi interface specified with\n * an ASCII identifier and mode.\n */\nint snd_rawmidi_open(snd_rawmidi_t **inputp, snd_rawmidi_t **outputp,\n\t\t     const char *name, int mode)\n{\n\tsnd_config_t *top;\n\tint err;\n\n\tassert((inputp || outputp) && name);\n\terr = snd_config_update_ref(&top);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_rawmidi_open_noupdate(inputp, outputp, top, name, mode);\n\tsnd_config_unref(top);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the RawMidi interface using local configuration\n * \\param inputp Returned input handle (NULL if not wanted)\n * \\param outputp Returned output handle (NULL if not wanted)\n * \\param name ASCII identifier of the RawMidi handle\n * \\param mode Open mode\n * \\param lconf Local configuration\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the RawMidi interface specified with\n * an ASCII identifier and mode.\n */\nint snd_rawmidi_open_lconf(snd_rawmidi_t **inputp, snd_rawmidi_t **outputp,\n\t\t\t   const char *name, int mode, snd_config_t *lconf)\n{\n\tassert((inputp || outputp) && name && lconf);\n\treturn snd_rawmidi_open_noupdate(inputp, outputp, lconf, name, mode);\n}\n\n/**\n * \\brief close RawMidi handle\n * \\param rawmidi RawMidi handle\n * \\return 0 on success otherwise a negative error code\n *\n * Closes the specified RawMidi handle and frees all associated\n * resources.\n */\nint snd_rawmidi_close(snd_rawmidi_t *rawmidi)\n{\n\tint err;\n  \tassert(rawmidi);\n\terr = rawmidi->ops->close(rawmidi);\n\tfree(rawmidi->name);\n\tif (rawmidi->dl_handle)\n\t\tsnd_dlclose(rawmidi->dl_handle);\n\tfree(rawmidi);\n\treturn err;\n}\n\n/**\n * \\brief get identifier of RawMidi handle\n * \\param rawmidi a RawMidi handle\n * \\return ascii identifier of RawMidi handle\n *\n * Returns the ASCII identifier of given RawMidi handle. It's the same\n * identifier specified in snd_rawmidi_open().\n */\nconst char *snd_rawmidi_name(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn rawmidi->name;\n}\n\n/**\n * \\brief get type of RawMidi handle\n * \\param rawmidi a RawMidi handle\n * \\return type of RawMidi handle\n *\n * Returns the type #snd_rawmidi_type_t of given RawMidi handle.\n */\nsnd_rawmidi_type_t snd_rawmidi_type(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn rawmidi->type;\n}\n\n/**\n * \\brief get stream (direction) of RawMidi handle\n * \\param rawmidi a RawMidi handle\n * \\return stream of RawMidi handle\n *\n * Returns the stream #snd_rawmidi_stream_t of given RawMidi handle.\n */\nsnd_rawmidi_stream_t snd_rawmidi_stream(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn rawmidi->stream;\n}\n\n/**\n * \\brief get count of poll descriptors for RawMidi handle\n * \\param rawmidi RawMidi handle\n * \\return count of poll descriptors\n */\nint snd_rawmidi_poll_descriptors_count(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn 1;\n}\n\n/**\n * \\brief get poll descriptors\n * \\param rawmidi RawMidi handle\n * \\param pfds array of poll descriptors\n * \\param space space in the poll descriptor array\n * \\return count of filled descriptors\n */\nint snd_rawmidi_poll_descriptors(snd_rawmidi_t *rawmidi, struct pollfd *pfds, unsigned int space)\n{\n\tassert(rawmidi);\n\tif (space >= 1) {\n\t\tpfds->fd = rawmidi->poll_fd;\n\t\tpfds->events = rawmidi->stream == SND_RAWMIDI_STREAM_OUTPUT ? (POLLOUT|POLLERR|POLLNVAL) : (POLLIN|POLLERR|POLLNVAL);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief get returned events from poll descriptors\n * \\param rawmidi rawmidi RawMidi handle\n * \\param pfds array of poll descriptors\n * \\param nfds count of poll descriptors\n * \\param revents returned events\n * \\return zero if success, otherwise a negative error code\n */\nint snd_rawmidi_poll_descriptors_revents(snd_rawmidi_t *rawmidi, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)\n{\n        assert(rawmidi && pfds && revents);\n        if (nfds == 1) {\n                *revents = pfds->revents;\n                return 0;\n        }\n        return -EINVAL;\n}\n\n/**\n * \\brief set nonblock mode\n * \\param rawmidi RawMidi handle\n * \\param nonblock 0 = block, 1 = nonblock mode\n * \\return 0 on success otherwise a negative error code\n *\n * The nonblock mode cannot be used when the stream is in\n * #SND_RAWMIDI_APPEND state.\n */\nint snd_rawmidi_nonblock(snd_rawmidi_t *rawmidi, int nonblock)\n{\n\tint err;\n\tassert(rawmidi);\n\tassert(!(rawmidi->mode & SND_RAWMIDI_APPEND));\n\tif ((err = rawmidi->ops->nonblock(rawmidi, nonblock)) < 0)\n\t\treturn err;\n\tif (nonblock)\n\t\trawmidi->mode |= SND_RAWMIDI_NONBLOCK;\n\telse\n\t\trawmidi->mode &= ~SND_RAWMIDI_NONBLOCK;\n\treturn 0;\n}\n\n/**\n * \\brief get size of the snd_rawmidi_info_t structure in bytes\n * \\return size of the snd_rawmidi_info_t structure in bytes\n */\nsize_t snd_rawmidi_info_sizeof()\n{\n\treturn sizeof(snd_rawmidi_info_t);\n}\n\n/**\n * \\brief allocate a new snd_rawmidi_info_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_rawmidi_params_t structure using the standard\n * malloc C library function.\n */\nint snd_rawmidi_info_malloc(snd_rawmidi_info_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_rawmidi_info_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_rawmidi_info_t structure\n * \\param info pointer to the snd_rawmidi_info_t structure to free\n *\n * Frees the given snd_rawmidi_params_t structure using the standard\n * free C library function.\n */\nvoid snd_rawmidi_info_free(snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_rawmidi_info_t structure to another\n * \\param dst destination snd_rawmidi_info_t structure\n * \\param src source snd_rawmidi_info_t structure\n */\nvoid snd_rawmidi_info_copy(snd_rawmidi_info_t *dst, const snd_rawmidi_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief get rawmidi device number\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi device number\n */\nunsigned int snd_rawmidi_info_get_device(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->device;\n}\n\n/**\n * \\brief get rawmidi subdevice number\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi subdevice number\n */\nunsigned int snd_rawmidi_info_get_subdevice(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->subdevice;\n}\n\n/**\n * \\brief get rawmidi stream identification\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi stream identification\n */\nsnd_rawmidi_stream_t snd_rawmidi_info_get_stream(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->stream;\n}\n\n/**\n * \\brief get rawmidi card number\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi card number\n */\nint snd_rawmidi_info_get_card(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->card;\n}\n\n/**\n * \\brief get rawmidi flags\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi flags\n */\nunsigned int snd_rawmidi_info_get_flags(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->flags;\n}\n\n/**\n * \\brief get rawmidi hardware driver identifier\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi hardware driver identifier\n */\nconst char *snd_rawmidi_info_get_id(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn (const char *)info->id;\n}\n\n/**\n * \\brief get rawmidi hardware driver name\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi hardware driver name\n */\nconst char *snd_rawmidi_info_get_name(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn (const char *)info->name;\n}\n\n/**\n * \\brief get rawmidi subdevice name\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi subdevice name\n */\nconst char *snd_rawmidi_info_get_subdevice_name(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn (const char *)info->subname;\n}\n\n/**\n * \\brief get rawmidi count of subdevices\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi count of subdevices\n */\nunsigned int snd_rawmidi_info_get_subdevices_count(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->subdevices_count;\n}\n\n/**\n * \\brief get rawmidi available count of subdevices\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\return rawmidi available count of subdevices\n */\nunsigned int snd_rawmidi_info_get_subdevices_avail(const snd_rawmidi_info_t *info)\n{\n\tassert(info);\n\treturn info->subdevices_avail;\n}\n\n/**\n * \\brief set rawmidi device number\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\param val device number\n */\nvoid snd_rawmidi_info_set_device(snd_rawmidi_info_t *info, unsigned int val)\n{\n\tassert(info);\n\tinfo->device = val;\n}\n\n/**\n * \\brief set rawmidi subdevice number\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\param val subdevice number\n */\nvoid snd_rawmidi_info_set_subdevice(snd_rawmidi_info_t *info, unsigned int val)\n{\n\tassert(info);\n\tinfo->subdevice = val;\n}\n\n/**\n * \\brief set rawmidi stream identifier\n * \\param info pointer to a snd_rawmidi_info_t structure\n * \\param val rawmidi stream identifier\n */\nvoid snd_rawmidi_info_set_stream(snd_rawmidi_info_t *info, snd_rawmidi_stream_t val)\n{\n\tassert(info);\n\tinfo->stream = val;\n}\n\n/**\n * \\brief get information about RawMidi handle\n * \\param rawmidi RawMidi handle\n * \\param info pointer to a snd_rawmidi_info_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_rawmidi_info(snd_rawmidi_t *rawmidi, snd_rawmidi_info_t * info)\n{\n\tassert(rawmidi);\n\tassert(info);\n\treturn rawmidi->ops->info(rawmidi, info);\n}\n\n/**\n * \\brief get size of the snd_rawmidi_params_t structure in bytes\n * \\return size of the snd_rawmidi_params_t structure in bytes\n */\nsize_t snd_rawmidi_params_sizeof()\n{\n\treturn sizeof(snd_rawmidi_params_t);\n}\n\n/**\n * \\brief allocate the snd_rawmidi_params_t structure\n * \\param params returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_rawmidi_params_t structure using the standard\n * malloc C library function.\n */\nint snd_rawmidi_params_malloc(snd_rawmidi_params_t **params)\n{\n\tassert(params);\n\t*params = calloc(1, sizeof(snd_rawmidi_params_t));\n\tif (!*params)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_rawmidi_params_t structure\n * \\param params pointer to the #snd_rawmidi_params_t structure to free\n *\n * Frees the given snd_rawmidi_params_t structure using the standard\n * free C library function.\n */\nvoid snd_rawmidi_params_free(snd_rawmidi_params_t *params)\n{\n\tassert(params);\n\tfree(params);\n}\n\n/**\n * \\brief copy one snd_rawmidi_params_t structure to another\n * \\param dst destination snd_rawmidi_params_t structure\n * \\param src source snd_rawmidi_params_t structure\n */\nvoid snd_rawmidi_params_copy(snd_rawmidi_params_t *dst, const snd_rawmidi_params_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief set rawmidi I/O ring buffer size\n * \\param rawmidi RawMidi handle\n * \\param params pointer to a snd_rawmidi_params_t structure\n * \\param val size in bytes\n * \\return 0 on success otherwise a negative error code\n */\n#ifndef DOXYGEN\nint snd_rawmidi_params_set_buffer_size(snd_rawmidi_t *rawmidi ATTRIBUTE_UNUSED, snd_rawmidi_params_t *params, size_t val)\n#else\nint snd_rawmidi_params_set_buffer_size(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t *params, size_t val)\n#endif\n{\n\tassert(rawmidi && params);\n\tassert(val > params->avail_min);\n\tparams->buffer_size = val;\n\treturn 0;\n}\n\n/**\n * \\brief get rawmidi I/O ring buffer size\n * \\param params pointer to a snd_rawmidi_params_t structure\n * \\return size of rawmidi I/O ring buffer in bytes\n */\nsize_t snd_rawmidi_params_get_buffer_size(const snd_rawmidi_params_t *params)\n{\n\tassert(params);\n\treturn params->buffer_size;\n}\n\n/**\n * \\brief set minimum available bytes in rawmidi I/O ring buffer for wakeup\n * \\param rawmidi RawMidi handle\n * \\param params pointer to a snd_rawmidi_params_t structure\n * \\param val desired value\n */\n#ifndef DOXYGEN\nint snd_rawmidi_params_set_avail_min(snd_rawmidi_t *rawmidi ATTRIBUTE_UNUSED, snd_rawmidi_params_t *params, size_t val)\n#else\nint snd_rawmidi_params_set_avail_min(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t *params, size_t val)\n#endif\n{\n\tassert(rawmidi && params);\n\tassert(val < params->buffer_size);\n\tparams->avail_min = val;\n\treturn 0;\n}\n\n/**\n * \\brief get minimum available bytes in rawmidi I/O ring buffer for wakeup\n * \\param params pointer to snd_rawmidi_params_t structure\n * \\return minimum available bytes\n */\nsize_t snd_rawmidi_params_get_avail_min(const snd_rawmidi_params_t *params)\n{\n\tassert(params);\n\treturn params->avail_min;\n}\n\n/**\n * \\brief set no-active-sensing action on snd_rawmidi_close()\n * \\param rawmidi RawMidi handle\n * \\param params pointer to snd_rawmidi_params_t structure\n * \\param val value: 0 = enable to send the active sensing message, 1 = disable\n * \\return 0 on success otherwise a negative error code\n */\n#ifndef DOXYGEN\nint snd_rawmidi_params_set_no_active_sensing(snd_rawmidi_t *rawmidi ATTRIBUTE_UNUSED, snd_rawmidi_params_t *params, int val)\n#else\nint snd_rawmidi_params_set_no_active_sensing(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t *params, int val)\n#endif\n{\n\tassert(rawmidi && params);\n\tparams->no_active_sensing = val;\n\treturn 0;\n}\n\n/**\n * \\brief get no-active-sensing action status\n * \\param params pointer to snd_rawmidi_params_t structure\n * \\return the current status (0 = enable, 1 = disable the active sensing message)\n */\nint snd_rawmidi_params_get_no_active_sensing(const snd_rawmidi_params_t *params)\n{\n\tassert(params);\n\treturn params->no_active_sensing;\n}\n\n/**\n * \\brief set parameters about rawmidi stream\n * \\param rawmidi RawMidi handle\n * \\param params pointer to a snd_rawmidi_params_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_rawmidi_params(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t * params)\n{\n\tint err;\n\tassert(rawmidi);\n\tassert(params);\n\terr = rawmidi->ops->params(rawmidi, params);\n\tif (err < 0)\n\t\treturn err;\n\trawmidi->buffer_size = params->buffer_size;\n\trawmidi->avail_min = params->avail_min;\n\trawmidi->no_active_sensing = params->no_active_sensing;\n\treturn 0;\n}\n\n/**\n * \\brief get current parameters about rawmidi stream\n * \\param rawmidi RawMidi handle\n * \\param params pointer to a snd_rawmidi_params_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_rawmidi_params_current(snd_rawmidi_t *rawmidi, snd_rawmidi_params_t *params)\n{\n\tassert(rawmidi);\n\tassert(params);\n\tparams->buffer_size = rawmidi->buffer_size;\n\tparams->avail_min = rawmidi->avail_min;\n\tparams->no_active_sensing = rawmidi->no_active_sensing;\n\treturn 0;\n}\n\n/**\n * \\brief get size of the snd_rawmidi_status_t structure in bytes\n * \\return size of the snd_rawmidi_status_t structure in bytes\n */\nsize_t snd_rawmidi_status_sizeof()\n{\n\treturn sizeof(snd_rawmidi_status_t);\n}\n\n/**\n * \\brief allocate the snd_rawmidi_status_t structure\n * \\param ptr returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_rawmidi_status_t structure using the standard\n * malloc C library function.\n */\nint snd_rawmidi_status_malloc(snd_rawmidi_status_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_rawmidi_status_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_rawmidi_status_t structure\n * \\param status pointer to the snd_rawmidi_status_t structure to free\n *\n * Frees the given snd_rawmidi_status_t structure using the standard\n * free C library function.\n */\nvoid snd_rawmidi_status_free(snd_rawmidi_status_t *status)\n{\n\tassert(status);\n\tfree(status);\n}\n\n/**\n * \\brief copy one snd_rawmidi_status_t structure to another\n * \\param dst destination snd_rawmidi_status_t structure\n * \\param src source snd_rawmidi_status_t structure\n */\nvoid snd_rawmidi_status_copy(snd_rawmidi_status_t *dst, const snd_rawmidi_status_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief get the start timestamp\n * \\param status pointer to a snd_rawmidi_status_t structure\n * \\param tstamp returned timestamp value\n */\nvoid snd_rawmidi_status_get_tstamp(const snd_rawmidi_status_t *status, snd_htimestamp_t *tstamp)\n{\n\tassert(status && tstamp);\n\t*tstamp = status->tstamp;\n}\n\n/**\n * \\brief get current available bytes in the rawmidi I/O ring buffer\n * \\param status pointer to a snd_rawmidi_status_t structure\n * \\return current available bytes in the rawmidi I/O ring buffer\n */\nsize_t snd_rawmidi_status_get_avail(const snd_rawmidi_status_t *status)\n{\n\tassert(status);\n\treturn status->avail;\n}\n\n/**\n * \\brief get count of xruns\n * \\param status pointer to a snd_rawmidi_status_t structure\n * \\return count of xruns\n */\nsize_t snd_rawmidi_status_get_xruns(const snd_rawmidi_status_t *status)\n{\n\tassert(status);\n\treturn status->xruns;\n}\n\n/**\n * \\brief get status of rawmidi stream\n * \\param rawmidi RawMidi handle\n * \\param status pointer to a snd_rawmidi_status_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_rawmidi_status(snd_rawmidi_t *rawmidi, snd_rawmidi_status_t * status)\n{\n\tassert(rawmidi);\n\tassert(status);\n\treturn rawmidi->ops->status(rawmidi, status);\n}\n\n/**\n * \\brief drop all bytes in the rawmidi I/O ring buffer immediately\n * \\param rawmidi RawMidi handle\n * \\return 0 on success otherwise a negative error code\n */\nint snd_rawmidi_drop(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn rawmidi->ops->drop(rawmidi);\n}\n\n/**\n * \\brief drain all bytes in the rawmidi I/O ring buffer\n * \\param rawmidi RawMidi handle\n * \\return 0 on success otherwise a negative error code\n *\n * Waits until all MIDI bytes are not drained (sent) to the\n * hardware device.\n */\nint snd_rawmidi_drain(snd_rawmidi_t *rawmidi)\n{\n\tassert(rawmidi);\n\treturn rawmidi->ops->drain(rawmidi);\n}\n\n/**\n * \\brief write MIDI bytes to MIDI stream\n * \\param rawmidi RawMidi handle\n * \\param buffer buffer containing MIDI bytes\n * \\param size output buffer size in bytes\n */\nssize_t snd_rawmidi_write(snd_rawmidi_t *rawmidi, const void *buffer, size_t size)\n{\n\tassert(rawmidi);\n\tassert(rawmidi->stream == SND_RAWMIDI_STREAM_OUTPUT);\n\tassert(buffer || size == 0);\n\treturn rawmidi->ops->write(rawmidi, buffer, size);\n}\n\n/**\n * \\brief read MIDI bytes from MIDI stream\n * \\param rawmidi RawMidi handle\n * \\param buffer buffer to store the input MIDI bytes\n * \\param size input buffer size in bytes\n */\nssize_t snd_rawmidi_read(snd_rawmidi_t *rawmidi, void *buffer, size_t size)\n{\n\tassert(rawmidi);\n\tassert(rawmidi->stream == SND_RAWMIDI_STREAM_INPUT);\n\tassert(buffer || size == 0);\n\treturn (rawmidi->ops->read)(rawmidi, buffer, size);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/mixer/simple_abst.c": "/**\n * \\file mixer/simple_abst.c\n * \\brief Mixer Simple Element Class Interface - Module Abstraction\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2005\n *\n * Mixer simple element class interface.\n */\n/*\n *  Mixer Interface - simple controls - abstraction module\n *  Copyright (c) 2005 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#include <math.h>\n#include <dlfcn.h>\n#include \"config.h\"\n#include \"asoundlib.h\"\n#include \"mixer_simple.h\"\n\n#ifndef DOC_HIDDEN\n\n#define SO_PATH ALSA_PLUGIN_DIR \"/smixer\"\n\ntypedef struct _class_priv {\n\tchar *device;\n\tsnd_ctl_t *ctl;\n\tsnd_hctl_t *hctl;\n\tint attach_flag;\n\tsnd_ctl_card_info_t *info;\n\tvoid *dlhandle;\n\tvoid *private_data;\n\tvoid (*private_free)(snd_mixer_class_t *class);\n} class_priv_t;\n\ntypedef int (*snd_mixer_sbasic_init_t)(snd_mixer_class_t *class);\ntypedef int (*snd_mixer_sfbasic_init_t)(snd_mixer_class_t *class,\n\t\t\t\t\tsnd_mixer_t *mixer,\n\t\t\t\t\tconst char *device);\n\n#endif /* !DOC_HIDDEN */\n\nstatic int try_open(snd_mixer_class_t *class, const char *lib)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\tsnd_mixer_event_t event_func;\n\tsnd_mixer_sbasic_init_t init_func = NULL;\n\tchar *xlib, *path;\n\tvoid *h;\n\tint err = 0;\n\n\tif (!lib)\n\t\treturn -ENXIO;\n\tpath = getenv(\"ALSA_MIXER_SIMPLE_MODULES\");\n\tif (!path)\n\t\tpath = SO_PATH;\n\txlib = malloc(strlen(lib) + strlen(path) + 1 + 1);\n\tif (xlib == NULL)\n\t\treturn -ENOMEM;\n\tstrcpy(xlib, path);\n\tstrcat(xlib, \"/\");\n\tstrcat(xlib, lib);\n\th = snd_dlopen(xlib, RTLD_NOW);\n\tif (h == NULL) {\n\t\tSNDERR(\"Unable to open library '%s'\", xlib);\n\t\tfree(xlib);\n\t\treturn -ENXIO;\n\t}\n\tpriv->dlhandle = h;\n\tevent_func = snd_dlsym(h, \"alsa_mixer_simple_event\", NULL);\n\tif (event_func == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_simple_event' was not found in '%s'\", xlib);\n\t\terr = -ENXIO;\n\t}\n\tif (err == 0) {\n\t\tinit_func = snd_dlsym(h, \"alsa_mixer_simple_init\", NULL);\n\t\tif (init_func == NULL) {\n\t\t\tSNDERR(\"Symbol 'alsa_mixer_simple_init' was not found in '%s'\", xlib);\n\t\t\terr = -ENXIO;\n\t\t}\n\t}\n\tfree(xlib);\n\terr = err == 0 ? init_func(class) : err;\n\tif (err < 0)\n\t\treturn err;\n\tsnd_mixer_class_set_event(class, event_func);\n\treturn 1;\n}\n\nstatic int try_open_full(snd_mixer_class_t *class, snd_mixer_t *mixer,\n\t\t\t const char *lib, const char *device)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\tsnd_mixer_event_t event_func;\n\tsnd_mixer_sfbasic_init_t init_func = NULL;\n\tchar *xlib, *path;\n\tvoid *h;\n\tint err = 0;\n\n\tpath = getenv(\"ALSA_MIXER_SIMPLE_MODULES\");\n\tif (!path)\n\t\tpath = SO_PATH;\n\txlib = malloc(strlen(lib) + strlen(path) + 1 + 1);\n\tif (xlib == NULL)\n\t\treturn -ENOMEM;\n\tstrcpy(xlib, path);\n\tstrcat(xlib, \"/\");\n\tstrcat(xlib, lib);\n\t/* note python modules requires RTLD_GLOBAL */\n\th = snd_dlopen(xlib, RTLD_NOW|RTLD_GLOBAL);\n\tif (h == NULL) {\n\t\tSNDERR(\"Unable to open library '%s'\", xlib);\n\t\tfree(xlib);\n\t\treturn -ENXIO;\n\t}\n\tpriv->dlhandle = h;\n\tevent_func = snd_dlsym(h, \"alsa_mixer_simple_event\", NULL);\n\tif (event_func == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_simple_event' was not found in '%s'\", xlib);\n\t\terr = -ENXIO;\n\t}\n\tif (err == 0) {\n\t\tinit_func = snd_dlsym(h, \"alsa_mixer_simple_finit\", NULL);\n\t\tif (init_func == NULL) {\n\t\t\tSNDERR(\"Symbol 'alsa_mixer_simple_finit' was not found in '%s'\", xlib);\n\t\t\terr = -ENXIO;\n\t\t}\n\t}\n\tfree(xlib);\n\terr = err == 0 ? init_func(class, mixer, device) : err;\n\tif (err < 0)\n\t\treturn err;\n\tsnd_mixer_class_set_event(class, event_func);\n\treturn 1;\n}\n\nstatic int match(snd_mixer_class_t *class, const char *lib, const char *searchl)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\tconst char *components;\n\n\tif (searchl == NULL)\n\t\treturn try_open(class, lib);\n\tcomponents = snd_ctl_card_info_get_components(priv->info);\n\twhile (*components != '\\0') {\n\t\tif (!strncmp(components, searchl, strlen(searchl)))\n\t\t\treturn try_open(class, lib);\n\t\twhile (*components != ' ' && *components != '\\0')\n\t\t\tcomponents++;\n\t\twhile (*components == ' ' && *components != '\\0')\n\t\t\tcomponents++;\n\t}\n\treturn 0;\n}\n\nstatic int find_full(snd_mixer_class_t *class, snd_mixer_t *mixer,\n\t\t     snd_config_t *top, const char *device)\n{\n\tsnd_config_iterator_t i, next;\n\tchar *lib;\n\tconst char *id;\n\tint err;\n\n\tsnd_config_for_each(i, next, top) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"_full\"))\n\t\t\tcontinue;\n\t\terr = snd_config_get_string(n, (const char **)&lib);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\terr = try_open_full(class, mixer, lib, device);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\treturn 0;\n\t}\n\treturn -ENOENT;\n}\n\nstatic int find_module(snd_mixer_class_t *class, snd_config_t *top)\n{\n\tsnd_config_iterator_t i, next;\n\tsnd_config_iterator_t j, jnext;\n\tchar *lib, *searchl;\n\tconst char *id;\n\tint err;\n\n\tsnd_config_for_each(i, next, top) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (*id == '_')\n\t\t\tcontinue;\n\t\tsearchl = NULL;\n\t\tlib = NULL;\n\t\tsnd_config_for_each(j, jnext, n) {\n\t\t\tsnd_config_t *m = snd_config_iterator_entry(j);\n\t\t\tif (snd_config_get_id(m, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (!strcmp(id, \"searchl\")) {\n\t\t\t\terr = snd_config_get_string(m, (const char **)&searchl);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!strcmp(id, \"lib\")) {\n\t\t\t\terr = snd_config_get_string(m, (const char **)&lib);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\terr = match(class, lib, searchl);\n\t\tif (err == 1)\n\t\t\treturn 0;\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\treturn -ENOENT;\n}\n\nstatic void private_free(snd_mixer_class_t *class)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\t\n\tif (priv->private_free)\n\t\tpriv->private_free(class);\n\tif (priv->dlhandle)\n\t\tsnd_dlclose(priv->dlhandle);\n\tif (priv->info)\n\t\tsnd_ctl_card_info_free(priv->info);\n\tif (priv->hctl) {\n\t\tif (priv->attach_flag)\n\t\t\tsnd_mixer_detach_hctl(snd_mixer_class_get_mixer(class), priv->hctl);\n\t\tsnd_hctl_close(priv->hctl);\n\t} else if (priv->ctl)\n\t\tsnd_ctl_close(priv->ctl);\n\tfree(priv->device);\n\tfree(priv);\n}\n\n/**\n * \\brief Register mixer simple element class - basic abstraction\n * \\param mixer Mixer handle\n * \\param options Options container\n * \\param classp Pointer to returned mixer simple element class handle (or NULL\n * \\return 0 on success otherwise a negative error code\n */\nint snd_mixer_simple_basic_register(snd_mixer_t *mixer,\n\t\t\t\t    struct snd_mixer_selem_regopt *options,\n\t\t\t\t    snd_mixer_class_t **classp)\n{\n\tsnd_mixer_class_t *class;\n\tclass_priv_t *priv = calloc(1, sizeof(*priv));\n\tconst char *file;\n\tsnd_input_t *input;\n\tsnd_config_t *top = NULL;\n\tint err;\n\n\tif (priv == NULL)\n\t\treturn -ENOMEM;\n\tif (options->device == NULL) {\n\t\tfree(priv);\n\t\treturn -EINVAL;\n\t}\n\tif (snd_mixer_class_malloc(&class)) {\n\t\tfree(priv);\n\t\treturn -ENOMEM;\n\t}\n\tpriv->device = strdup(options->device);\n\tif (priv->device == NULL) {\n\t\tfree(priv);\n\t\tsnd_mixer_class_free(class);\n\t\treturn -ENOMEM;\n\t}\n\tsnd_mixer_class_set_compare(class, snd_mixer_selem_compare);\n\tsnd_mixer_class_set_private(class, priv);\n\tsnd_mixer_class_set_private_free(class, private_free);\n\tfile = getenv(\"ALSA_MIXER_SIMPLE\");\n\tif (!file) {\n\t\tconst char *topdir = snd_config_topdir();\n\t\tchar *s = alloca(strlen(topdir) + strlen(\"smixer.conf\") + 2);\n\t\tsprintf(s, \"%s/smixer.conf\", topdir);\n\t\tfile = s;\n\t}\n\terr = snd_config_top(&top);\n\tif (err >= 0) {\n\t\terr = snd_input_stdio_open(&input, file, \"r\");\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"unable to open simple mixer configuration file '%s'\", file);\n\t\t\tgoto __error;\n\t\t}\n\t\terr = snd_config_load(top, input);\n\t\tsnd_input_close(input);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"%s may be old or corrupted: consider to remove or fix it\", file);\n\t\t\tgoto __error;\n\t\t}\n\t\terr = find_full(class, mixer, top, priv->device);\n\t\tif (err >= 0)\n\t\t\tgoto __full;\n\t}\n\tif (err >= 0) {\n\t\terr = snd_ctl_open(&priv->ctl, priv->device, 0);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"unable to open control device '%s': %s\", priv->device, snd_strerror(err));\n\t\t\tgoto __error;\n\t\t}\n\t\terr = snd_hctl_open_ctl(&priv->hctl, priv->ctl);\n\t\tif (err < 0)\n\t\t\tgoto __error;\n\t\terr = snd_ctl_card_info_malloc(&priv->info);\n\t\tif (err < 0)\n\t\t\tgoto __error;\n\t\terr = snd_ctl_card_info(priv->ctl, priv->info);\n\t\tif (err < 0)\n\t\t\tgoto __error;\n\t}\n\tif (err >= 0)\n\t\terr = find_module(class, top);\n\tif (err >= 0)\n\t\terr = snd_mixer_attach_hctl(mixer, priv->hctl);\n\tif (err >= 0) {\n\t\tpriv->attach_flag = 1;\n\t\terr = snd_mixer_class_register(class, mixer);\n\t}\n      __full:\n\tif (err < 0) {\n\t      __error:\n\t\tif (top)\n\t\t\tsnd_config_delete(top);\n\t      \tif (class)\n\t\t\tsnd_mixer_class_free(class);\n\t\treturn err;\n\t}\n\tif (top)\n\t\tsnd_config_delete(top);\n\tif (classp)\n\t\t*classp = class;\n\treturn 0;\n}\n\n/**\n * \\brief Basic Mixer Abstraction - Get information about device\n * \\param class Mixer class\n * \\param info Info structure\n * \\return 0 on success otherwise a negative error code\n */\nint snd_mixer_sbasic_info(const snd_mixer_class_t *class, sm_class_basic_t *info)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\n\tif (class == NULL || info == NULL)\n\t\treturn -EINVAL;\n\tinfo->device = priv->device;\n\tinfo->ctl = priv->ctl;\n\tinfo->hctl = priv->hctl;\n\tinfo->info = priv->info;\n\treturn 0;\n}\n\n/**\n * \\brief Get private data for basic abstraction\n * \\param class Mixer class\n * \\return private data\n */\nvoid *snd_mixer_sbasic_get_private(const snd_mixer_class_t *class)\n{\n\tclass_priv_t *priv = snd_mixer_class_get_private(class);\n\n\tif (class == NULL)\n\t\treturn NULL;\n\treturn priv->private_data;\n}\n\n/**\n * \\brief Set private data for basic abstraction\n * \\param class Mixer class\n * \\param private_data Private data\n */\nvoid snd_mixer_sbasic_set_private(const snd_mixer_class_t *class, void *private_data)\n{\n\tclass_priv_t *priv;\n\n\tif (class == NULL)\n\t\treturn;\n\tpriv = snd_mixer_class_get_private(class);\n\tpriv->private_data = private_data;\n}\n\n/**\n * \\brief Set private data free callback for basic abstraction\n * \\param class Mixer class\n * \\param private_free free callback for private data\n */\nvoid snd_mixer_sbasic_set_private_free(const snd_mixer_class_t *class, void (*private_free)(snd_mixer_class_t *class))\n{\n\tclass_priv_t *priv;\n\n\tif (class == NULL)\n\t\treturn;\n\tpriv = snd_mixer_class_get_private(class);\n\tpriv->private_free = private_free;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/pcm/pcm_hooks.c": "/**\n * \\file pcm/pcm_hooks.c\n * \\ingroup PCM_Hook\n * \\brief PCM Hook Interface\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2000-2001\n */\n/*\n *  PCM - Hook functions\n *  Copyright (c) 2001 by Abramo Bagnara <abramo@alsa-project.org>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n  \n#include \"pcm_local.h\"\n#include \"pcm_generic.h\"\n\n#ifndef PIC\n/* entry for static linking */\nconst char *_snd_module_pcm_hooks = \"\";\n#endif\n\n#ifndef DOC_HIDDEN\nstruct _snd_pcm_hook {\n\tsnd_pcm_t *pcm;\n\tsnd_pcm_hook_func_t func;\n\tvoid *private_data;\n\tstruct list_head list;\n};\n\nstruct snd_pcm_hook_dllist {\n\tvoid *dlobj;\n\tstruct list_head list;\n};\n\ntypedef struct {\n\tsnd_pcm_generic_t gen;\n\tstruct list_head hooks[SND_PCM_HOOK_TYPE_LAST + 1];\n\tstruct list_head dllist;\n} snd_pcm_hooks_t;\n#endif\n\nstatic int hook_add_dlobj(snd_pcm_t *pcm, void *dlobj)\n{\n\tsnd_pcm_hooks_t *h = pcm->private_data;\n\tstruct snd_pcm_hook_dllist *dl;\n\n\tdl = malloc(sizeof(*dl));\n\tif (!dl)\n\t\treturn -ENOMEM;\n\n\tdl->dlobj = dlobj;\n\tlist_add_tail(&dl->list, &h->dllist);\n\treturn 0;\n}\n\nstatic void hook_remove_dlobj(struct snd_pcm_hook_dllist *dl)\n{\n\tlist_del(&dl->list);\n\tsnd_dlclose(dl->dlobj);\n\tfree(dl);\n}\n\nstatic int snd_pcm_hooks_close(snd_pcm_t *pcm)\n{\n\tsnd_pcm_hooks_t *h = pcm->private_data;\n\tstruct list_head *pos, *next;\n\tunsigned int k;\n\tint res = 0, err;\n\n\tlist_for_each_safe(pos, next, &h->hooks[SND_PCM_HOOK_TYPE_CLOSE]) {\n\t\tsnd_pcm_hook_t *hook = list_entry(pos, snd_pcm_hook_t, list);\n\t\terr = hook->func(hook);\n\t\tif (err < 0)\n\t\t\tres = err;\n\t}\n\tfor (k = 0; k <= SND_PCM_HOOK_TYPE_LAST; ++k) {\n\t\tstruct list_head *hooks = &h->hooks[k];\n\t\twhile (!list_empty(hooks)) {\n\t\t\tsnd_pcm_hook_t *hook;\n\t\t\tpos = hooks->next;\n\t\t\thook = list_entry(pos, snd_pcm_hook_t, list);\n\t\t\tsnd_pcm_hook_remove(hook);\n\t\t}\n\t}\n\twhile (!list_empty(&h->dllist)) {\n\t\tpos = h->dllist.next;\n\t\thook_remove_dlobj(list_entry(pos, struct snd_pcm_hook_dllist, list));\n\t}\n\terr = snd_pcm_generic_close(pcm);\n\tif (err < 0)\n\t\tres = err;\n\treturn res;\n}\n\nstatic int snd_pcm_hooks_hw_params(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)\n{\n\tsnd_pcm_hooks_t *h = pcm->private_data;\n\tstruct list_head *pos, *next;\n\tint err = snd_pcm_generic_hw_params(pcm, params);\n\tif (err < 0)\n\t\treturn err;\n\tlist_for_each_safe(pos, next, &h->hooks[SND_PCM_HOOK_TYPE_HW_PARAMS]) {\n\t\tsnd_pcm_hook_t *hook = list_entry(pos, snd_pcm_hook_t, list);\n\t\terr = hook->func(hook);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\treturn 0;\n}\n\nstatic int snd_pcm_hooks_hw_free(snd_pcm_t *pcm)\n{\n\tsnd_pcm_hooks_t *h = pcm->private_data;\n\tstruct list_head *pos, *next;\n\tint err = snd_pcm_generic_hw_free(pcm);\n\tif (err < 0)\n\t\treturn err;\n\tlist_for_each_safe(pos, next, &h->hooks[SND_PCM_HOOK_TYPE_HW_FREE]) {\n\t\tsnd_pcm_hook_t *hook = list_entry(pos, snd_pcm_hook_t, list);\n\t\terr = hook->func(hook);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\treturn 0;\n}\n\nstatic void snd_pcm_hooks_dump(snd_pcm_t *pcm, snd_output_t *out)\n{\n\tsnd_pcm_hooks_t *h = pcm->private_data;\n\tsnd_output_printf(out, \"Hooks PCM\\n\");\n\tif (pcm->setup) {\n\t\tsnd_output_printf(out, \"Its setup is:\\n\");\n\t\tsnd_pcm_dump_setup(pcm, out);\n\t}\n\tsnd_output_printf(out, \"Slave: \");\n\tsnd_pcm_dump(h->gen.slave, out);\n}\n\nstatic const snd_pcm_ops_t snd_pcm_hooks_ops = {\n\t.close = snd_pcm_hooks_close,\n\t.info = snd_pcm_generic_info,\n\t.hw_refine = snd_pcm_generic_hw_refine,\n\t.hw_params = snd_pcm_hooks_hw_params,\n\t.hw_free = snd_pcm_hooks_hw_free,\n\t.sw_params = snd_pcm_generic_sw_params,\n\t.channel_info = snd_pcm_generic_channel_info,\n\t.dump = snd_pcm_hooks_dump,\n\t.nonblock = snd_pcm_generic_nonblock,\n\t.async = snd_pcm_generic_async,\n\t.mmap = snd_pcm_generic_mmap,\n\t.munmap = snd_pcm_generic_munmap,\n\t.query_chmaps = snd_pcm_generic_query_chmaps,\n\t.get_chmap = snd_pcm_generic_get_chmap,\n\t.set_chmap = snd_pcm_generic_set_chmap,\n};\n\nstatic const snd_pcm_fast_ops_t snd_pcm_hooks_fast_ops = {\n\t.status = snd_pcm_generic_status,\n\t.state = snd_pcm_generic_state,\n\t.hwsync = snd_pcm_generic_hwsync,\n\t.delay = snd_pcm_generic_delay,\n\t.prepare = snd_pcm_generic_prepare,\n\t.reset = snd_pcm_generic_reset,\n\t.start = snd_pcm_generic_start,\n\t.drop = snd_pcm_generic_drop,\n\t.drain = snd_pcm_generic_drain,\n\t.pause = snd_pcm_generic_pause,\n\t.rewindable = snd_pcm_generic_rewindable,\n\t.rewind = snd_pcm_generic_rewind,\n\t.forwardable = snd_pcm_generic_forwardable,\n\t.forward = snd_pcm_generic_forward,\n\t.resume = snd_pcm_generic_resume,\n\t.link = snd_pcm_generic_link,\n\t.link_slaves = snd_pcm_generic_link_slaves,\n\t.unlink = snd_pcm_generic_unlink,\n\t.writei = snd_pcm_generic_writei,\n\t.writen = snd_pcm_generic_writen,\n\t.readi = snd_pcm_generic_readi,\n\t.readn = snd_pcm_generic_readn,\n\t.avail_update = snd_pcm_generic_avail_update,\n\t.mmap_commit = snd_pcm_generic_mmap_commit,\n\t.htimestamp = snd_pcm_generic_htimestamp,\n\t.poll_descriptors_count = snd_pcm_generic_poll_descriptors_count,\n\t.poll_descriptors = snd_pcm_generic_poll_descriptors,\n\t.poll_revents = snd_pcm_generic_poll_revents,\n\t.may_wait_for_avail_min = snd_pcm_generic_may_wait_for_avail_min,\n};\n\n/**\n * \\brief Creates a new hooks PCM\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param slave Slave PCM\n * \\param close_slave If set, slave PCM handle is closed when hooks PCM is closed\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *\t    changed in future.\n */\nint snd_pcm_hooks_open(snd_pcm_t **pcmp, const char *name, snd_pcm_t *slave, int close_slave)\n{\n\tsnd_pcm_t *pcm;\n\tsnd_pcm_hooks_t *h;\n\tunsigned int k;\n\tint err;\n\tassert(pcmp && slave);\n\th = calloc(1, sizeof(snd_pcm_hooks_t));\n\tif (!h)\n\t\treturn -ENOMEM;\n\th->gen.slave = slave;\n\th->gen.close_slave = close_slave;\n\tfor (k = 0; k <= SND_PCM_HOOK_TYPE_LAST; ++k) {\n\t\tINIT_LIST_HEAD(&h->hooks[k]);\n\t}\n\tINIT_LIST_HEAD(&h->dllist);\n\terr = snd_pcm_new(&pcm, SND_PCM_TYPE_HOOKS, name, slave->stream, slave->mode);\n\tif (err < 0) {\n\t\tfree(h);\n\t\treturn err;\n\t}\n\tpcm->ops = &snd_pcm_hooks_ops;\n\tpcm->fast_ops = &snd_pcm_hooks_fast_ops;\n\tpcm->private_data = h;\n\tpcm->poll_fd = slave->poll_fd;\n\tpcm->poll_events = slave->poll_events;\n\tpcm->mmap_shadow = 1;\n\tpcm->tstamp_type = slave->tstamp_type;\n\tsnd_pcm_link_hw_ptr(pcm, slave);\n\tsnd_pcm_link_appl_ptr(pcm, slave);\n\t*pcmp = pcm;\n\n\treturn 0;\n}\n\n/*! \\page pcm_plugins\n\n\\section pcm_plugins_hooks Plugin: hooks\n\nThis plugin is used to call some 'hook' function when this plugin is opened,\nmodified or closed.\nTypically, it is used to change control values for a certain state\nspecially for the PCM (see the example below).\n\n\\code\n# Hook arguments definition\nhook_args.NAME {\n\t...\t\t\t# Arbitrary arguments\n}\n\n# PCM hook type\npcm_hook_type.NAME {\n\t[lib STR]\t\t# Library file (default libasound.so)\n\t[install STR]\t\t# Install function (default _snd_pcm_hook_NAME_install)\n}\n\n# PCM hook definition\npcm_hook.NAME {\n\ttype STR\t\t# PCM Hook type (see pcm_hook_type)\n\t[args STR]\t\t# Arguments for install function (see hook_args)\n\t# or\n\t[args { }]\t\t# Arguments for install function\n}\n\n# PCM hook plugin\npcm.NAME {\n\ttype hooks\t\t# PCM with hooks\n\tslave STR\t\t# Slave name\n\t# or\n\tslave {\t\t\t# Slave definition\n\t  \tpcm STR\t\t# Slave PCM name\n\t\t# or\n\t  \tpcm { }\t\t# Slave PCM definition\n\t}\n\thooks {\n\t\tID STR\t\t# Hook name (see pcm_hook)\n\t\t# or\n\t\tID { }\t\t# Hook definition (see pcm_hook)\n\t}\n}\n\\endcode\n\nExample:\n\n\\code\n\thooks.0 {\n\t\ttype ctl_elems\n\t\thook_args [\n\t\t\t{\n\t\t\t\tname \"Wave Surround Playback Volume\"\n\t\t\t\tpreserve true\n\t\t\t\tlock true\n\t\t\t\toptional true\n\t\t\t\tvalue [ 0 0 ]\n\t\t\t}\n\t\t\t{\n\t\t\t\tname \"EMU10K1 PCM Send Volume\"\n\t\t\t\tindex { @func private_pcm_subdevice }\n\t\t\t\tlock true\n\t\t\t\tvalue [ 0 0 0 0 0 0 255 0 0 0 0 255 ]\n\t\t\t}\n\t\t]\n\t}\n\\endcode\nHere, the controls \"Wave Surround Playback Volume\" and \"EMU10K1 PCM Send Volume\"\nare set to the given values when this pcm is accessed.  Since these controls\ntake multi-dimensional values, the <code>value</code> field is written as\nan array.\nWhen <code>preserve</code> is true, the old values are saved and restored\nwhen the pcm is closed.  The <code>lock</code> means that the control is\nlocked during this pcm is opened, and cannot be changed by others.\nWhen <code>optional</code> is set, no error is returned but ignored\neven if the specified control doesn't exist.\n\n\\subsection pcm_plugins_hooks_funcref Function reference\n\n<UL>\n  <LI>The function ctl_elems - _snd_pcm_hook_ctl_elems_install() - installs\n      CTL settings described by given configuration.\n  <LI>snd_pcm_hooks_open()\n  <LI>_snd_pcm_hooks_open()\n</UL>\n\n*/\n\nstatic int snd_pcm_hook_add_conf(snd_pcm_t *pcm, snd_config_t *root, snd_config_t *conf)\n{\n\tint err;\n\tchar buf[256];\n\tconst char *str, *id;\n\tconst char *lib = NULL, *install = NULL;\n\tsnd_config_t *type = NULL, *args = NULL;\n\tsnd_config_iterator_t i, next;\n\tint (*install_func)(snd_pcm_t *pcm, snd_config_t *args) = NULL;\n\tvoid *h = NULL;\n\n\tif (snd_config_get_type(conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"Invalid hook definition\");\n\t\treturn -EINVAL;\n\t}\n\tsnd_config_for_each(i, next, conf) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"type\") == 0) {\n\t\t\ttype = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"hook_args\") == 0) {\n\t\t\targs = n;\n\t\t\tcontinue;\n\t\t}\n\t\tSNDERR(\"Unknown field %s\", id);\n\t\treturn -EINVAL;\n\t}\n\tif (!type) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_get_id(type, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(type, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(root, \"pcm_hook_type\", str, &type);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for PCM type %s definition\", str);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"install\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &install);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!install) {\n\t\tinstall = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_pcm_hook_%s_install\", str);\n\t}\n\th = snd_dlopen(lib, RTLD_NOW);\n\tinstall_func = h ? snd_dlsym(h, install, SND_DLSYM_VERSION(SND_PCM_DLSYM_VERSION)) : NULL;\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\",\n\t\t       lib ? lib : \"[builtin]\");\n\t\terr = -ENOENT;\n\t} else if (!install_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", install,\n\t\t       lib ? lib : \"[builtin]\");\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type)\n\t\tsnd_config_delete(type);\n\tif (err < 0)\n\t\treturn err;\n\n\tif (args && snd_config_get_string(args, &str) >= 0) {\n\t\terr = snd_config_search_definition(root, \"hook_args\", str, &args);\n\t\tif (err < 0)\n\t\t\tSNDERR(\"unknown hook_args %s\", str);\n\t\telse\n\t\t\terr = install_func(pcm, args);\n\t\tsnd_config_delete(args);\n\t} else\n\t\terr = install_func(pcm, args);\n\n\tif (err >= 0)\n\t\terr = hook_add_dlobj(pcm, h);\n\n\tif (err < 0) {\n\t\tif(h)\n\t\t\tsnd_dlclose(h);\n\t\treturn err;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Creates a new hooks PCM\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param root Root configuration node\n * \\param conf Configuration node with hooks PCM description\n * \\param stream PCM Stream\n * \\param mode PCM Mode\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *\t    changed in future.\n */\nint _snd_pcm_hooks_open(snd_pcm_t **pcmp, const char *name,\n\t\t\tsnd_config_t *root, snd_config_t *conf, \n\t\t\tsnd_pcm_stream_t stream, int mode)\n{\n\tsnd_config_iterator_t i, next;\n\tint err;\n\tsnd_pcm_t *rpcm = NULL, *spcm;\n\tsnd_config_t *slave = NULL, *sconf;\n\tsnd_config_t *hooks = NULL;\n\tsnd_config_for_each(i, next, conf) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (snd_pcm_conf_generic_id(id))\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"slave\") == 0) {\n\t\t\tslave = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"hooks\") == 0) {\n\t\t\tif (snd_config_get_type(n) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\thooks = n;\n\t\t\tcontinue;\n\t\t}\n\t\tSNDERR(\"Unknown field %s\", id);\n\t\treturn -EINVAL;\n\t}\n\tif (!slave) {\n\t\tSNDERR(\"slave is not defined\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_pcm_slave_conf(root, slave, &sconf, 0);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_open_slave(&spcm, root, sconf, stream, mode, conf);\n\tsnd_config_delete(sconf);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_hooks_open(&rpcm, name, spcm, 1);\n\tif (err < 0) {\n\t\tsnd_pcm_close(spcm);\n\t\treturn err;\n\t}\n\tif (!hooks)\n\t\tgoto _done;\n\tsnd_config_for_each(i, next, hooks) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *str;\n\t\tif (snd_config_get_string(n, &str) >= 0) {\n\t\t\terr = snd_config_search_definition(root, \"pcm_hook\", str, &n);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"unknown pcm_hook %s\", str);\n\t\t\t} else {\n\t\t\t\terr = snd_pcm_hook_add_conf(rpcm, root, n);\n\t\t\t\tsnd_config_delete(n);\n\t\t\t}\n\t\t} else\n\t\t\terr = snd_pcm_hook_add_conf(rpcm, root, n);\n\t\tif (err < 0) {\n\t\t\tsnd_pcm_close(rpcm);\n\t\t\treturn err;\n\t\t}\n\t}\n _done:\n\t*pcmp = rpcm;\n\treturn 0;\n}\n#ifndef DOC_HIDDEN\nSND_DLSYM_BUILD_VERSION(_snd_pcm_hooks_open, SND_PCM_DLSYM_VERSION);\n#endif\n\n/**\n * \\brief Get PCM handle for a PCM hook\n * \\param hook PCM hook handle\n * \\return PCM handle\n */\nsnd_pcm_t *snd_pcm_hook_get_pcm(snd_pcm_hook_t *hook)\n{\n\tassert(hook);\n\treturn hook->pcm;\n}\n\n/**\n * \\brief Get callback function private data for a PCM hook\n * \\param hook PCM hook handle\n * \\return callback function private data\n */\nvoid *snd_pcm_hook_get_private(snd_pcm_hook_t *hook)\n{\n\tassert(hook);\n\treturn hook->private_data;\n}\n\n/**\n * \\brief Set callback function private data for a PCM hook\n * \\param hook PCM hook handle\n * \\param private_data The private data value\n */\nvoid snd_pcm_hook_set_private(snd_pcm_hook_t *hook, void *private_data)\n{\n\tassert(hook);\n\thook->private_data = private_data;\n}\n\n/**\n * \\brief Add a PCM hook at end of hooks chain\n * \\param hookp Returned PCM hook handle\n * \\param pcm PCM handle\n * \\param type PCM hook type\n * \\param func PCM hook callback function\n * \\param private_data PCM hook private data\n * \\return 0 on success otherwise a negative error code\n *\n * Warning: an hook callback function cannot remove an hook of the same type\n * different from itself\n */\nint snd_pcm_hook_add(snd_pcm_hook_t **hookp, snd_pcm_t *pcm,\n\t\t     snd_pcm_hook_type_t type,\n\t\t     snd_pcm_hook_func_t func, void *private_data)\n{\n\tsnd_pcm_hook_t *h;\n\tsnd_pcm_hooks_t *hooks;\n\tassert(hookp && func);\n\tassert(snd_pcm_type(pcm) == SND_PCM_TYPE_HOOKS);\n\th = calloc(1, sizeof(*h));\n\tif (!h)\n\t\treturn -ENOMEM;\n\th->pcm = pcm;\n\th->func = func;\n\th->private_data = private_data;\n\thooks = pcm->private_data;\n\tlist_add_tail(&h->list, &hooks->hooks[type]);\n\t*hookp = h;\n\treturn 0;\n}\n\n/**\n * \\brief Remove a PCM hook\n * \\param hook PCM hook handle\n * \\return 0 on success otherwise a negative error code\n *\n * Warning: an hook callback cannot remove an hook of the same type\n * different from itself\n */\nint snd_pcm_hook_remove(snd_pcm_hook_t *hook)\n{\n\tassert(hook);\n\tlist_del(&hook->list);\n\tfree(hook);\n\treturn 0;\n}\n\n/*\n *\n */\n\nstatic int snd_pcm_hook_ctl_elems_hw_params(snd_pcm_hook_t *hook)\n{\n\tsnd_sctl_t *h = snd_pcm_hook_get_private(hook);\n\treturn snd_sctl_install(h);\n}\n\nstatic int snd_pcm_hook_ctl_elems_hw_free(snd_pcm_hook_t *hook)\n{\n\tsnd_sctl_t *h = snd_pcm_hook_get_private(hook);\n\treturn snd_sctl_remove(h);\n}\n\nstatic int snd_pcm_hook_ctl_elems_close(snd_pcm_hook_t *hook)\n{\n\tsnd_sctl_t *h = snd_pcm_hook_get_private(hook);\n\tint err = snd_sctl_free(h);\n\tsnd_pcm_hook_set_private(hook, NULL);\n\treturn err;\n}\n\n/**\n * \\brief Install CTL settings using hardware associated with PCM handle\n * \\param pcm PCM handle\n * \\param conf Configuration node with CTL settings\n * \\return zero on success otherwise a negative error code\n */\nint _snd_pcm_hook_ctl_elems_install(snd_pcm_t *pcm, snd_config_t *conf)\n{\n\tint err;\n\tint card;\n\tsnd_pcm_info_t info = {0};\n\tchar ctl_name[16];\n\tsnd_ctl_t *ctl;\n\tsnd_sctl_t *sctl = NULL;\n\tsnd_config_t *pcm_conf = NULL;\n\tsnd_pcm_hook_t *h_hw_params = NULL, *h_hw_free = NULL, *h_close = NULL;\n\tassert(conf);\n\tassert(snd_config_get_type(conf) == SND_CONFIG_TYPE_COMPOUND);\n\n\terr = snd_pcm_info(pcm, &info);\n\tif (err < 0)\n\t\treturn err;\n\tcard = snd_pcm_info_get_card(&info);\n\tif (card < 0) {\n\t\tSNDERR(\"No card for this PCM\");\n\t\treturn -EINVAL;\n\t}\n\tsprintf(ctl_name, \"hw:%d\", card);\n\terr = snd_ctl_open(&ctl, ctl_name, 0);\n\tif (err < 0) {\n\t\tSNDERR(\"Cannot open CTL %s\", ctl_name);\n\t\treturn err;\n\t}\n\terr = snd_config_imake_pointer(&pcm_conf, \"pcm_handle\", pcm);\n\tif (err < 0)\n\t\tgoto _err;\n\terr = snd_sctl_build(&sctl, ctl, conf, pcm_conf, 0);\n\tif (err < 0)\n\t\tgoto _err;\n\terr = snd_pcm_hook_add(&h_hw_params, pcm, SND_PCM_HOOK_TYPE_HW_PARAMS,\n\t\t\t       snd_pcm_hook_ctl_elems_hw_params, sctl);\n\tif (err < 0)\n\t\tgoto _err;\n\terr = snd_pcm_hook_add(&h_hw_free, pcm, SND_PCM_HOOK_TYPE_HW_FREE,\n\t\t\t       snd_pcm_hook_ctl_elems_hw_free, sctl);\n\tif (err < 0)\n\t\tgoto _err;\n\terr = snd_pcm_hook_add(&h_close, pcm, SND_PCM_HOOK_TYPE_CLOSE,\n\t\t\t       snd_pcm_hook_ctl_elems_close, sctl);\n\tif (err < 0)\n\t\tgoto _err;\n\tsnd_config_delete(pcm_conf);\n\treturn 0;\n _err:\n\tif (h_hw_params)\n\t\tsnd_pcm_hook_remove(h_hw_params);\n\tif (h_hw_free)\n\t\tsnd_pcm_hook_remove(h_hw_free);\n\tif (h_close)\n\t\tsnd_pcm_hook_remove(h_close);\n\tif (sctl)\n\t\tsnd_sctl_free(sctl);\n\tif (pcm_conf)\n\t\tsnd_config_delete(pcm_conf);\n\treturn err;\n}\n#ifndef DOC_HIDDEN\nSND_DLSYM_BUILD_VERSION(_snd_pcm_hook_ctl_elems_install, SND_PCM_DLSYM_VERSION);\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/pcm/pcm_meter.c": "/**\n * \\file pcm/pcm_meter.c\n * \\brief Helper functions for #SND_PCM_TYPE_METER PCM scopes\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\date 2001\n *\n * Helper functions for #SND_PCM_TYPE_METER PCM scopes\n */\n/*\n *  PCM - Meter plugin\n *  Copyright (c) 2001 by Abramo Bagnara <abramo@alsa-project.org>\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n  \n\n#include \"bswap.h\"\n#include <time.h>\n#include <pthread.h>\n#include <dlfcn.h>\n#include \"pcm_local.h\"\n#include \"pcm_plugin.h\"\n\n#define atomic_read(ptr)    __atomic_load_n(ptr, __ATOMIC_SEQ_CST )\n#define atomic_add(ptr, n)  __atomic_add_fetch(ptr, n, __ATOMIC_SEQ_CST)\n#define atomic_dec(ptr)     __atomic_sub_fetch(ptr, 1, __ATOMIC_SEQ_CST)\n\n#ifndef PIC\n/* entry for static linking */\nconst char *_snd_module_pcm_meter = \"\";\n#endif\n\n#ifndef DOC_HIDDEN\n#define FREQUENCY 50\n\nstruct _snd_pcm_scope {\n\tint enabled;\n\tchar *name;\n\tconst snd_pcm_scope_ops_t *ops;\n\tvoid *private_data;\n\tstruct list_head list;\n};\n\ntypedef struct _snd_pcm_meter {\n\tsnd_pcm_generic_t gen;\n\tsnd_pcm_uframes_t rptr;\n\tsnd_pcm_uframes_t buf_size;\n\tsnd_pcm_channel_area_t *buf_areas;\n\tsnd_pcm_uframes_t now;\n\tunsigned char *buf;\n\tstruct list_head scopes;\n\tint closed;\n\tint running;\n\tint reset;\n\tpthread_t thread;\n\tpthread_mutex_t update_mutex;\n\tpthread_mutex_t running_mutex;\n\tpthread_cond_t running_cond;\n\tstruct timespec delay;\n\tvoid *dl_handle;\n} snd_pcm_meter_t;\n\nstatic void snd_pcm_meter_add_frames(snd_pcm_t *pcm,\n\t\t\t\t     const snd_pcm_channel_area_t *areas,\n\t\t\t\t     snd_pcm_uframes_t ptr,\n\t\t\t\t     snd_pcm_uframes_t frames)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\twhile (frames > 0) {\n\t\tsnd_pcm_uframes_t n = frames;\n\t\tsnd_pcm_uframes_t dst_offset = ptr % meter->buf_size;\n\t\tsnd_pcm_uframes_t src_offset = ptr % pcm->buffer_size;\n\t\tsnd_pcm_uframes_t dst_cont = meter->buf_size - dst_offset;\n\t\tsnd_pcm_uframes_t src_cont = pcm->buffer_size - src_offset;\n\t\tif (n > dst_cont)\n\t\t\tn = dst_cont;\n\t\tif (n > src_cont)\n\t\t\tn = src_cont;\n\t\tsnd_pcm_areas_copy(meter->buf_areas, dst_offset, \n\t\t\t\t   areas, src_offset,\n\t\t\t\t   pcm->channels, n, pcm->format);\n\t\tframes -= n;\n\t\tptr += n;\n\t\tif (ptr == pcm->boundary)\n\t\t\tptr = 0;\n\t}\n}\n\nstatic void snd_pcm_meter_update_main(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_sframes_t frames;\n\tsnd_pcm_uframes_t rptr, old_rptr;\n\tconst snd_pcm_channel_area_t *areas;\n\tint locked;\n\tlocked = (pthread_mutex_trylock(&meter->update_mutex) >= 0);\n\tareas = snd_pcm_mmap_areas(pcm);\n\trptr = *pcm->hw.ptr;\n\told_rptr = meter->rptr;\n\tmeter->rptr = rptr;\n\tframes = rptr - old_rptr;\n\tif (frames < 0)\n\t\tframes += pcm->boundary;\n\tif (frames > 0) {\n\t\tassert((snd_pcm_uframes_t) frames <= pcm->buffer_size);\n\t\tsnd_pcm_meter_add_frames(pcm, areas, old_rptr,\n\t\t\t\t\t (snd_pcm_uframes_t) frames);\n\t}\n\tif (locked)\n\t\tpthread_mutex_unlock(&meter->update_mutex);\n}\n\nstatic int snd_pcm_meter_update_scope(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_sframes_t frames;\n\tsnd_pcm_uframes_t rptr, old_rptr;\n\tconst snd_pcm_channel_area_t *areas;\n\tint reset = 0;\n\t/* Wait main thread */\n\tpthread_mutex_lock(&meter->update_mutex);\n\tareas = snd_pcm_mmap_areas(pcm);\n _again:\n\trptr = *pcm->hw.ptr;\n\told_rptr = meter->rptr;\n\tif (atomic_read(&meter->reset)) {\n\t\treset = 1;\n\t\tatomic_dec(&meter->reset);\n\t\tgoto _again;\n\t}\n\tmeter->rptr = rptr;\n\tframes = rptr - old_rptr;\n\tif (frames < 0)\n\t\tframes += pcm->boundary;\n\tif (frames > 0) {\n\t\tassert((snd_pcm_uframes_t) frames <= pcm->buffer_size);\n\t\tsnd_pcm_meter_add_frames(pcm, areas, old_rptr,\n\t\t\t\t\t (snd_pcm_uframes_t) frames);\n\t}\n\tpthread_mutex_unlock(&meter->update_mutex);\n\treturn reset;\n}\n\nstatic int snd_pcm_scope_remove(snd_pcm_scope_t *scope)\n{\n\tfree(scope->name);\n\tscope->ops->close(scope);\n\tlist_del(&scope->list);\n\tfree(scope);\n\treturn 0;\n}\n\nstatic int snd_pcm_scope_enable(snd_pcm_scope_t *scope)\n{\n\tint err;\n\tassert(!scope->enabled);\n\terr = scope->ops->enable(scope);\n\tscope->enabled = (err >= 0);\n\treturn err;\n}\n\nstatic int snd_pcm_scope_disable(snd_pcm_scope_t *scope)\n{\n\tassert(scope->enabled);\n\tscope->ops->disable(scope);\n\tscope->enabled = 0;\n\treturn 0;\n}\n\nstatic void *snd_pcm_meter_thread(void *data)\n{\n\tsnd_pcm_t *pcm = data;\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_t *spcm = meter->gen.slave;\n\tstruct list_head *pos;\n\tsnd_pcm_scope_t *scope;\n\tint reset;\n\tlist_for_each(pos, &meter->scopes) {\n\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\tsnd_pcm_scope_enable(scope);\n\t}\n\twhile (!meter->closed) {\n\t\tsnd_pcm_sframes_t now;\n\t\tsnd_pcm_status_t status;\n\t\tint err;\n\t\tpthread_mutex_lock(&meter->running_mutex);\n\t\terr = snd_pcm_status(spcm, &status);\n\t\tassert(err >= 0);\n\t\tif (status.state != SND_PCM_STATE_RUNNING &&\n\t\t    (status.state != SND_PCM_STATE_DRAINING ||\n\t\t     spcm->stream != SND_PCM_STREAM_PLAYBACK)) {\n\t\t\tif (meter->running) {\n\t\t\t\tlist_for_each(pos, &meter->scopes) {\n\t\t\t\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\t\t\t\tscope->ops->stop(scope);\n\t\t\t\t}\n\t\t\t\tmeter->running = 0;\n\t\t\t}\n\t\t\tpthread_cond_wait(&meter->running_cond,\n\t\t\t\t\t  &meter->running_mutex);\n\t\t\tpthread_mutex_unlock(&meter->running_mutex);\n\t\t\tcontinue;\n\t\t}\n\t\tpthread_mutex_unlock(&meter->running_mutex);\n\t\tif (pcm->stream == SND_PCM_STREAM_PLAYBACK) {\n\t\t\tnow = status.appl_ptr - status.delay;\n\t\t\tif (now < 0)\n\t\t\t\tnow += pcm->boundary;\n\t\t} else {\n\t\t\tnow = status.appl_ptr + status.delay;\n\t\t\tif ((snd_pcm_uframes_t) now >= pcm->boundary)\n\t\t\t\tnow -= pcm->boundary;\n\t\t}\n\t\tmeter->now = now;\n\t\tif (pcm->stream == SND_PCM_STREAM_CAPTURE)\n\t\t\treset = snd_pcm_meter_update_scope(pcm);\n\t\telse {\n\t\t\treset = 0;\n\t\t\twhile (atomic_read(&meter->reset)) {\n\t\t\t\treset = 1;\n\t\t\t\tatomic_dec(&meter->reset);\n\t\t\t}\n\t\t}\n\t\tif (reset) {\n\t\t\tlist_for_each(pos, &meter->scopes) {\n\t\t\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\t\t\tif (scope->enabled)\n\t\t\t\t\tscope->ops->reset(scope);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif (!meter->running) {\n\t\t\tlist_for_each(pos, &meter->scopes) {\n\t\t\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\t\t\tif (scope->enabled)\n\t\t\t\t\tscope->ops->start(scope);\n\t\t\t}\n\t\t\tmeter->running = 1;\n\t\t}\n\t\tlist_for_each(pos, &meter->scopes) {\n\t\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\t\tif (scope->enabled)\n\t\t\t\tscope->ops->update(scope);\n\t\t}\n\t        nanosleep(&meter->delay, NULL);\n\t}\n\tlist_for_each(pos, &meter->scopes) {\n\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\tif (scope->enabled)\n\t\t\tsnd_pcm_scope_disable(scope);\n\t}\n\treturn NULL;\n}\n\nstatic int snd_pcm_meter_close(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tstruct list_head *pos, *npos;\n\tint err = 0;\n\tpthread_mutex_destroy(&meter->update_mutex);\n\tpthread_mutex_destroy(&meter->running_mutex);\n\tpthread_cond_destroy(&meter->running_cond);\n\tif (meter->gen.close_slave)\n\t\terr = snd_pcm_close(meter->gen.slave);\n\tlist_for_each_safe(pos, npos, &meter->scopes) {\n\t\tsnd_pcm_scope_t *scope;\n\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\tsnd_pcm_scope_remove(scope);\n\t}\n\tif (meter->dl_handle)\n\t\tsnd_dlclose(meter->dl_handle);\n\tfree(meter);\n\treturn err;\n}\n\nstatic int snd_pcm_meter_prepare(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tint err;\n\tatomic_add(&meter->reset, 1);\n\terr = snd_pcm_prepare(meter->gen.slave);\n\tif (err >= 0) {\n\t\tif (pcm->stream == SND_PCM_STREAM_PLAYBACK)\n\t\t\tmeter->rptr = *pcm->appl.ptr;\n\t\telse\n\t\t\tmeter->rptr = *pcm->hw.ptr;\n\t}\n\treturn err;\n}\n\nstatic int snd_pcm_meter_reset(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tint err = snd_pcm_reset(meter->gen.slave);\n\tif (err >= 0) {\n\t\tif (pcm->stream == SND_PCM_STREAM_PLAYBACK)\n\t\t\tmeter->rptr = *pcm->appl.ptr;\n\t}\n\treturn err;\n}\n\nstatic int snd_pcm_meter_start(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tint err;\n\tpthread_mutex_lock(&meter->running_mutex);\n\terr = snd_pcm_start(meter->gen.slave);\n\tif (err >= 0)\n\t\tpthread_cond_signal(&meter->running_cond);\n\tpthread_mutex_unlock(&meter->running_mutex);\n\treturn err;\n}\n\nstatic snd_pcm_sframes_t snd_pcm_meter_rewind(snd_pcm_t *pcm, snd_pcm_uframes_t frames)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_sframes_t err = snd_pcm_rewind(meter->gen.slave, frames);\n\tif (err > 0 && pcm->stream == SND_PCM_STREAM_PLAYBACK)\n\t\tmeter->rptr = *pcm->appl.ptr;\n\treturn err;\n}\n\nstatic snd_pcm_sframes_t snd_pcm_meter_forward(snd_pcm_t *pcm, snd_pcm_uframes_t frames)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_sframes_t err = INTERNAL(snd_pcm_forward)(meter->gen.slave, frames);\n\tif (err > 0 && pcm->stream == SND_PCM_STREAM_PLAYBACK)\n\t\tmeter->rptr = *pcm->appl.ptr;\n\treturn err;\n}\n\nstatic snd_pcm_sframes_t snd_pcm_meter_mmap_commit(snd_pcm_t *pcm,\n\t\t\t\t\t\t   snd_pcm_uframes_t offset,\n\t\t\t\t\t\t   snd_pcm_uframes_t size)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_uframes_t old_rptr = *pcm->appl.ptr;\n\tsnd_pcm_sframes_t result = snd_pcm_mmap_commit(meter->gen.slave, offset, size);\n\tif (result <= 0)\n\t\treturn result;\n\tif (pcm->stream == SND_PCM_STREAM_PLAYBACK) {\n\t\tsnd_pcm_meter_add_frames(pcm, snd_pcm_mmap_areas(pcm), old_rptr, result);\n\t\tmeter->rptr = *pcm->appl.ptr;\n\t}\n\treturn result;\n}\n\nstatic snd_pcm_sframes_t snd_pcm_meter_avail_update(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_pcm_sframes_t result = snd_pcm_avail_update(meter->gen.slave);\n\tif (result <= 0)\n\t\treturn result;\n\tif (pcm->stream == SND_PCM_STREAM_CAPTURE)\n\t\tsnd_pcm_meter_update_main(pcm);\n\treturn result;\n}\n\nstatic int snd_pcm_meter_hw_refine_cprepare(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params)\n{\n\tint err;\n\tsnd_pcm_access_mask_t access_mask = { SND_PCM_ACCBIT_SHM };\n\terr = _snd_pcm_hw_param_set_mask(params, SND_PCM_HW_PARAM_ACCESS,\n\t\t\t\t\t &access_mask);\n\tif (err < 0)\n\t\treturn err;\n\tparams->info &= ~(SND_PCM_INFO_MMAP | SND_PCM_INFO_MMAP_VALID);\n\treturn 0;\n}\n\nstatic int snd_pcm_meter_hw_refine_sprepare(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *sparams)\n{\n\tsnd_pcm_access_mask_t saccess_mask = { SND_PCM_ACCBIT_MMAP };\n\t_snd_pcm_hw_params_any(sparams);\n\t_snd_pcm_hw_param_set_mask(sparams, SND_PCM_HW_PARAM_ACCESS,\n\t\t\t\t   &saccess_mask);\n\treturn 0;\n}\n\nstatic int snd_pcm_meter_hw_refine_schange(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params,\n\t\t\t\t\t  snd_pcm_hw_params_t *sparams)\n{\n\tint err;\n\tunsigned int links = ~SND_PCM_HW_PARBIT_ACCESS;\n\terr = _snd_pcm_hw_params_refine(sparams, links, params);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\t\nstatic int snd_pcm_meter_hw_refine_cchange(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params,\n\t\t\t\t\t  snd_pcm_hw_params_t *sparams)\n{\n\tint err;\n\tunsigned int links = ~SND_PCM_HW_PARBIT_ACCESS;\n\terr = _snd_pcm_hw_params_refine(params, links, sparams);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\nstatic int snd_pcm_meter_hw_refine_slave(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\treturn snd_pcm_hw_refine(meter->gen.slave, params);\n}\n\nstatic int snd_pcm_meter_hw_params_slave(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\treturn _snd_pcm_hw_params_internal(meter->gen.slave, params);\n}\n\nstatic int snd_pcm_meter_hw_refine(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)\n{\n\treturn snd_pcm_hw_refine_slave(pcm, params,\n\t\t\t\t       snd_pcm_meter_hw_refine_cprepare,\n\t\t\t\t       snd_pcm_meter_hw_refine_cchange,\n\t\t\t\t       snd_pcm_meter_hw_refine_sprepare,\n\t\t\t\t       snd_pcm_meter_hw_refine_schange,\n\t\t\t\t       snd_pcm_meter_hw_refine_slave);\n}\n\nstatic int snd_pcm_meter_hw_params(snd_pcm_t *pcm, snd_pcm_hw_params_t * params)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tunsigned int channel;\n\tsnd_pcm_t *slave = meter->gen.slave;\n\tsize_t buf_size_bytes;\n\tint err;\n\terr = snd_pcm_hw_params_slave(pcm, params,\n\t\t\t\t      snd_pcm_meter_hw_refine_cchange,\n\t\t\t\t      snd_pcm_meter_hw_refine_sprepare,\n\t\t\t\t      snd_pcm_meter_hw_refine_schange,\n\t\t\t\t      snd_pcm_meter_hw_params_slave);\n\tif (err < 0)\n\t\treturn err;\n\t/* more than 1 second of buffer */\n\tmeter->buf_size = slave->buffer_size;\n\twhile (meter->buf_size < slave->rate)\n\t\tmeter->buf_size *= 2;\n\tbuf_size_bytes = snd_pcm_frames_to_bytes(slave, meter->buf_size);\n\tassert(!meter->buf);\n\tmeter->buf = malloc(buf_size_bytes);\n\tif (!meter->buf)\n\t\treturn -ENOMEM;\n\tmeter->buf_areas = malloc(sizeof(*meter->buf_areas) * slave->channels);\n\tif (!meter->buf_areas) {\n\t\tfree(meter->buf);\n\t\treturn -ENOMEM;\n\t}\n\tfor (channel = 0; channel < slave->channels; ++channel) {\n\t\tsnd_pcm_channel_area_t *a = &meter->buf_areas[channel];\n\t\ta->addr = meter->buf + buf_size_bytes / slave->channels * channel;\n\t\ta->first = 0;\n\t\ta->step = slave->sample_bits;\n\t}\n\tmeter->closed = 0;\n\terr = pthread_create(&meter->thread, NULL, snd_pcm_meter_thread, pcm);\n\tassert(err == 0);\n\treturn 0;\n}\n\nstatic int snd_pcm_meter_hw_free(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tint err;\n\tmeter->closed = 1;\n\tpthread_mutex_lock(&meter->running_mutex);\n\tpthread_cond_signal(&meter->running_cond);\n\tpthread_mutex_unlock(&meter->running_mutex);\n\terr = pthread_join(meter->thread, 0);\n\tassert(err == 0);\n\tfree(meter->buf);\n\tfree(meter->buf_areas);\n\tmeter->buf = NULL;\n\tmeter->buf_areas = NULL;\n\treturn snd_pcm_hw_free(meter->gen.slave);\n}\n\nstatic void snd_pcm_meter_dump(snd_pcm_t *pcm, snd_output_t *out)\n{\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tsnd_output_printf(out, \"Meter PCM\\n\");\n\tif (pcm->setup) {\n\t\tsnd_output_printf(out, \"Its setup is:\\n\");\n\t\tsnd_pcm_dump_setup(pcm, out);\n\t}\n\tsnd_output_printf(out, \"Slave: \");\n\tsnd_pcm_dump(meter->gen.slave, out);\n}\n\nstatic const snd_pcm_ops_t snd_pcm_meter_ops = {\n\t.close = snd_pcm_meter_close,\n\t.info = snd_pcm_generic_info,\n\t.hw_refine = snd_pcm_meter_hw_refine,\n\t.hw_params = snd_pcm_meter_hw_params,\n\t.hw_free = snd_pcm_meter_hw_free,\n\t.sw_params = snd_pcm_generic_sw_params,\n\t.channel_info = snd_pcm_generic_channel_info,\n\t.dump = snd_pcm_meter_dump,\n\t.nonblock = snd_pcm_generic_nonblock,\n\t.async = snd_pcm_generic_async,\n\t.mmap = snd_pcm_generic_mmap,\n\t.munmap = snd_pcm_generic_munmap,\n\t.query_chmaps = snd_pcm_generic_query_chmaps,\n\t.get_chmap = snd_pcm_generic_get_chmap,\n\t.set_chmap = snd_pcm_generic_set_chmap,\n};\n\nstatic const snd_pcm_fast_ops_t snd_pcm_meter_fast_ops = {\n\t.status = snd_pcm_generic_status,\n\t.state = snd_pcm_generic_state,\n\t.hwsync = snd_pcm_generic_hwsync,\n\t.delay = snd_pcm_generic_delay,\n\t.prepare = snd_pcm_meter_prepare,\n\t.reset = snd_pcm_meter_reset,\n\t.start = snd_pcm_meter_start,\n\t.drop = snd_pcm_generic_drop,\n\t.drain = snd_pcm_generic_drain,\n\t.pause = snd_pcm_generic_pause,\n\t.rewindable = snd_pcm_generic_rewindable,\n\t.rewind = snd_pcm_meter_rewind,\n\t.forwardable = snd_pcm_generic_forwardable,\n\t.forward = snd_pcm_meter_forward,\n\t.resume = snd_pcm_generic_resume,\n\t.writei = snd_pcm_mmap_writei,\n\t.writen = snd_pcm_mmap_writen,\n\t.readi = snd_pcm_mmap_readi,\n\t.readn = snd_pcm_mmap_readn,\n\t.avail_update = snd_pcm_meter_avail_update,\n\t.mmap_commit = snd_pcm_meter_mmap_commit,\n\t.htimestamp = snd_pcm_generic_htimestamp,\n\t.poll_descriptors_count = snd_pcm_generic_poll_descriptors_count,\n\t.poll_descriptors = snd_pcm_generic_poll_descriptors,\n\t.poll_revents = snd_pcm_generic_poll_revents,\n\t.may_wait_for_avail_min = snd_pcm_generic_may_wait_for_avail_min,\n};\n\n/**\n * \\brief Creates a new Meter PCM\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param frequency Update frequency\n * \\param slave Slave PCM handle\n * \\param close_slave When set, the slave PCM handle is closed with copy PCM\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *          changed in future.\n */\nint snd_pcm_meter_open(snd_pcm_t **pcmp, const char *name, unsigned int frequency,\n\t\t       snd_pcm_t *slave, int close_slave)\n{\n\tsnd_pcm_t *pcm;\n\tsnd_pcm_meter_t *meter;\n\tint err;\n\tassert(pcmp);\n\tmeter = calloc(1, sizeof(snd_pcm_meter_t));\n\tif (!meter)\n\t\treturn -ENOMEM;\n\tmeter->gen.slave = slave;\n\tmeter->gen.close_slave = close_slave;\n\tmeter->delay.tv_sec = 0;\n\tmeter->delay.tv_nsec = 1000000000 / frequency;\n\tINIT_LIST_HEAD(&meter->scopes);\n\n\terr = snd_pcm_new(&pcm, SND_PCM_TYPE_METER, name, slave->stream, slave->mode);\n\tif (err < 0) {\n\t\tfree(meter);\n\t\treturn err;\n\t}\n\tpcm->mmap_rw = 1;\n\tpcm->mmap_shadow = 1;\n\tpcm->ops = &snd_pcm_meter_ops;\n\tpcm->fast_ops = &snd_pcm_meter_fast_ops;\n\tpcm->private_data = meter;\n\tpcm->poll_fd = slave->poll_fd;\n\tpcm->poll_events = slave->poll_events;\n\tpcm->tstamp_type = slave->tstamp_type;\n\tsnd_pcm_link_hw_ptr(pcm, slave);\n\tsnd_pcm_link_appl_ptr(pcm, slave);\n\t*pcmp = pcm;\n\n\tpthread_mutex_init(&meter->update_mutex, NULL);\n\tpthread_mutex_init(&meter->running_mutex, NULL);\n\tpthread_cond_init(&meter->running_cond, NULL);\n\treturn 0;\n}\n\n\nstatic int snd_pcm_meter_add_scope_conf(snd_pcm_t *pcm, const char *name,\n\t\t\t\t\tsnd_config_t *root, snd_config_t *conf)\n{\n\tchar buf[256];\n\tsnd_config_iterator_t i, next;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL, *str = NULL;\n\tsnd_config_t *c, *type_conf = NULL;\n\tint (*open_func)(snd_pcm_t *, const char *,\n\t\t\t snd_config_t *, snd_config_t *) = NULL;\n\tsnd_pcm_meter_t *meter = pcm->private_data;\n\tvoid *h = NULL;\n\tint err;\n\n\tif (snd_config_get_type(conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"Invalid type for scope %s\", str);\n\t\terr = -EINVAL;\n\t\tgoto _err;\n\t}\n\terr = snd_config_search(conf, \"type\", &c);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\tgoto _err;\n\t}\n\terr = snd_config_get_id(c, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\tgoto _err;\n\t}\n\terr = snd_config_get_string(c, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\tgoto _err;\n\t}\n\terr = snd_config_search_definition(root, \"pcm_scope_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_pcm_scope_%s_open\", str);\n\t}\n\th = snd_dlopen(lib, RTLD_NOW);\n\topen_func = h ? dlsym(h, open_name) : NULL;\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (! err) {\n\t\terr = open_func(pcm, name, root, conf);\n\t\tif (err < 0)\n\t\t\tsnd_dlclose(h);\n\t\telse\n\t\t\tmeter->dl_handle = h;\n\t}\n\treturn err;\n}\n\n/*! \\page pcm_plugins\n\n\\section pcm_plugins_meter Plugin: Meter\n\nShow meter (visual waveform representation).\n\n\\code\npcm_scope_type.NAME {\n\t[lib STR]\t\t# Library file (default libasound.so)\n\t[open STR]\t\t# Open function (default _snd_pcm_scope_NAME_open)\n}\n\npcm_scope.name {\n\ttype STR\t\t# Scope type\n\t...\n}\n\npcm.name {\n        type meter              # Meter PCM\n        slave STR               # Slave name\n        # or\n        slave {                 # Slave definition\n                pcm STR         # Slave PCM name\n                # or\n                pcm { }         # Slave PCM definition\n        }\n\t[frequency INT]\t\t# Updates per second\n\tscopes {\n\t\tID STR\t\t# Scope name (see pcm_scope)\n\t\t# or\n\t\tID { }\t\t# Scope definition (see pcm_scope)\n\t}\n}\n\\endcode\n\n\\subsection pcm_plugins_meter_funcref Function reference\n\n<UL>\n  <LI>snd_pcm_meter_open()\n  <LI>_snd_pcm_meter_open()\n</UL>\n\n*/\n\n/**\n * \\brief Creates a new Meter PCM\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param root Root configuration node\n * \\param conf Configuration node with Meter PCM description\n * \\param stream Stream type\n * \\param mode Stream mode\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *          changed in future.\n */\nint _snd_pcm_meter_open(snd_pcm_t **pcmp, const char *name,\n\t\t\tsnd_config_t *root, snd_config_t *conf, \n\t\t\tsnd_pcm_stream_t stream, int mode)\n{\n\tsnd_config_iterator_t i, next;\n\tint err;\n\tsnd_pcm_t *spcm;\n\tsnd_config_t *slave = NULL, *sconf;\n\tlong frequency = -1;\n\tsnd_config_t *scopes = NULL;\n\tsnd_config_for_each(i, next, conf) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (snd_pcm_conf_generic_id(id))\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"slave\") == 0) {\n\t\t\tslave = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"frequency\") == 0) {\n\t\t\terr = snd_config_get_integer(n, &frequency);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"scopes\") == 0) {\n\t\t\tif (snd_config_get_type(n) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tscopes = n;\n\t\t\tcontinue;\n\t\t}\n\t\tSNDERR(\"Unknown field %s\", id);\n\t\treturn -EINVAL;\n\t}\n\tif (!slave) {\n\t\tSNDERR(\"slave is not defined\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_pcm_slave_conf(root, slave, &sconf, 0);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_open_slave(&spcm, root, sconf, stream, mode, conf);\n\tsnd_config_delete(sconf);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_meter_open(pcmp, name, frequency > 0 ? (unsigned int) frequency : FREQUENCY, spcm, 1);\n\tif (err < 0) {\n\t\tsnd_pcm_close(spcm);\n\t\treturn err;\n\t}\n\tif (!scopes)\n\t\treturn 0;\n\tsnd_config_for_each(i, next, scopes) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id, *str;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (snd_config_get_string(n, &str) >= 0) {\n\t\t\terr = snd_config_search_definition(root, \"pcm_scope\", str, &n);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"unknown pcm_scope %s\", str);\n\t\t\t} else {\n\t\t\t\terr = snd_pcm_meter_add_scope_conf(*pcmp, id, root, n);\n\t\t\t\tsnd_config_delete(n);\n\t\t\t}\n\t\t} else\n\t\t\terr = snd_pcm_meter_add_scope_conf(*pcmp, id, root, n);\n\t\tif (err < 0) {\n\t\t\tsnd_pcm_close(*pcmp);\n\t\t\treturn err;\n\t\t}\n\t}\n\treturn 0;\n}\nSND_DLSYM_BUILD_VERSION(_snd_pcm_meter_open, SND_PCM_DLSYM_VERSION);\n\n#endif\n\n/**\n * \\brief Add a scope to a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\param scope Scope handle\n * \\return 0 on success otherwise a negative error code\n */\nint snd_pcm_meter_add_scope(snd_pcm_t *pcm, snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tlist_add_tail(&scope->list, &meter->scopes);\n\treturn 0;\n}\n\n/**\n * \\brief Search an installed scope inside a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\param name scope name\n * \\return pointer to found scope or NULL if none is found\n */\nsnd_pcm_scope_t *snd_pcm_meter_search_scope(snd_pcm_t *pcm, const char *name)\n{\n\tsnd_pcm_meter_t *meter;\n\tstruct list_head *pos;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tlist_for_each(pos, &meter->scopes) {\n\t\tsnd_pcm_scope_t *scope;\n\t\tscope = list_entry(pos, snd_pcm_scope_t, list);\n\t\tif (scope->name && strcmp(scope->name, name) == 0)\n\t\t\treturn scope;\n\t}\n\treturn NULL;\n}\n\n/**\n * \\brief Get meter buffer size from a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\return meter buffer size in frames\n */\nsnd_pcm_uframes_t snd_pcm_meter_get_bufsize(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\treturn meter->buf_size;\n}\n\n/**\n * \\brief Get meter channels from a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\return meter channels count\n */\nunsigned int snd_pcm_meter_get_channels(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\treturn meter->gen.slave->channels;\n}\n\n/**\n * \\brief Get meter rate from a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\return approximate rate\n */\nunsigned int snd_pcm_meter_get_rate(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\treturn meter->gen.slave->rate;\n}\n\n/**\n * \\brief Get meter \"now\" frame pointer from a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\return \"now\" frame pointer in frames (0 ... boundary - 1) see #snd_pcm_meter_get_boundary\n */\nsnd_pcm_uframes_t snd_pcm_meter_get_now(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\treturn meter->now;\n}\n\n/**\n * \\brief Get boundary for frame pointers from a #SND_PCM_TYPE_METER PCM\n * \\param pcm PCM handle\n * \\return boundary in frames\n */\nsnd_pcm_uframes_t snd_pcm_meter_get_boundary(snd_pcm_t *pcm)\n{\n\tsnd_pcm_meter_t *meter;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\treturn meter->gen.slave->boundary;\n}\n\n/**\n * \\brief Set name of a #SND_PCM_TYPE_METER PCM scope\n * \\param scope PCM meter scope\n * \\param val scope name\n */\nvoid snd_pcm_scope_set_name(snd_pcm_scope_t *scope, const char *val)\n{\n\tscope->name = strdup(val);\n}\n\n/**\n * \\brief Get name of a #SND_PCM_TYPE_METER PCM scope\n * \\param scope PCM meter scope\n * \\return scope name\n */\nconst char *snd_pcm_scope_get_name(snd_pcm_scope_t *scope)\n{\n\treturn scope->name;\n}\n\n/**\n * \\brief Set callbacks for a #SND_PCM_TYPE_METER PCM scope\n * \\param scope PCM meter scope\n * \\param val callbacks\n */\nvoid snd_pcm_scope_set_ops(snd_pcm_scope_t *scope, const snd_pcm_scope_ops_t *val)\n{\n\tscope->ops = val;\n}\n\n/**\n * \\brief Get callbacks private value for a #SND_PCM_TYPE_METER PCM scope\n * \\param scope PCM meter scope\n * \\return Private data value\n */\nvoid *snd_pcm_scope_get_callback_private(snd_pcm_scope_t *scope)\n{\n\treturn scope->private_data;\n}\n\n/**\n * \\brief Get callbacks private value for a #SND_PCM_TYPE_METER PCM scope\n * \\param scope PCM meter scope\n * \\param val Private data value\n */\nvoid snd_pcm_scope_set_callback_private(snd_pcm_scope_t *scope, void *val)\n{\n\tscope->private_data = val;\n}\n\n#ifndef DOC_HIDDEN\ntypedef struct _snd_pcm_scope_s16 {\n\tsnd_pcm_t *pcm;\n\tsnd_pcm_adpcm_state_t *adpcm_states;\n\tunsigned int index;\n\tsnd_pcm_uframes_t old;\n\tint16_t *buf;\n\tsnd_pcm_channel_area_t *buf_areas;\n} snd_pcm_scope_s16_t;\n\nstatic int s16_enable(snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_scope_s16_t *s16 = scope->private_data;\n\tsnd_pcm_meter_t *meter = s16->pcm->private_data;\n\tsnd_pcm_t *spcm = meter->gen.slave;\n\tsnd_pcm_channel_area_t *a;\n\tunsigned int c;\n\tint idx;\n\tif (spcm->format == SND_PCM_FORMAT_S16 &&\n\t    spcm->access == SND_PCM_ACCESS_MMAP_NONINTERLEAVED) {\n\t\ts16->buf = (int16_t *) meter->buf;\n\t\treturn -EINVAL;\n\t}\n\tswitch (spcm->format) {\n\tcase SND_PCM_FORMAT_A_LAW:\n\tcase SND_PCM_FORMAT_MU_LAW:\n\tcase SND_PCM_FORMAT_IMA_ADPCM:\n\t\tidx = snd_pcm_linear_put_index(SND_PCM_FORMAT_S16, SND_PCM_FORMAT_S16);\n\t\tbreak;\n\tcase SND_PCM_FORMAT_S8:\n\tcase SND_PCM_FORMAT_S16_LE:\n\tcase SND_PCM_FORMAT_S16_BE:\n\tcase SND_PCM_FORMAT_S24_LE:\n\tcase SND_PCM_FORMAT_S24_BE:\n\tcase SND_PCM_FORMAT_S32_LE:\n\tcase SND_PCM_FORMAT_S32_BE:\n\tcase SND_PCM_FORMAT_U8:\n\tcase SND_PCM_FORMAT_U16_LE:\n\tcase SND_PCM_FORMAT_U16_BE:\n\tcase SND_PCM_FORMAT_U24_LE:\n\tcase SND_PCM_FORMAT_U24_BE:\n\tcase SND_PCM_FORMAT_U32_LE:\n\tcase SND_PCM_FORMAT_U32_BE:\n\t\tidx = snd_pcm_linear_convert_index(spcm->format, SND_PCM_FORMAT_S16);\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\ts16->index = idx;\n\tif (spcm->format == SND_PCM_FORMAT_IMA_ADPCM) {\n\t\ts16->adpcm_states = calloc(spcm->channels, sizeof(*s16->adpcm_states));\n\t\tif (!s16->adpcm_states)\n\t\t\treturn -ENOMEM;\n\t}\n\ts16->buf = malloc(meter->buf_size * 2 * spcm->channels);\n\tif (!s16->buf) {\n\t\tfree(s16->adpcm_states);\n\t\treturn -ENOMEM;\n\t}\n\ta = calloc(spcm->channels, sizeof(*a));\n\tif (!a) {\n\t\tfree(s16->buf);\n\t\tfree(s16->adpcm_states);\n\t\treturn -ENOMEM;\n\t}\n\ts16->buf_areas = a;\n\tfor (c = 0; c < spcm->channels; c++, a++) {\n\t\ta->addr = s16->buf + c * meter->buf_size;\n\t\ta->first = 0;\n\t\ta->step = 16;\n\t}\n\treturn 0;\n}\n\nstatic void s16_disable(snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_scope_s16_t *s16 = scope->private_data;\n\tfree(s16->adpcm_states);\n\ts16->adpcm_states = NULL;\n\tfree(s16->buf);\n\ts16->buf = NULL;\n\tfree(s16->buf_areas);\n\ts16->buf_areas = 0;\n}\n\nstatic void s16_close(snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_scope_s16_t *s16 = scope->private_data;\n\tfree(s16);\n}\n\nstatic void s16_start(snd_pcm_scope_t *scope ATTRIBUTE_UNUSED)\n{\n}\n\nstatic void s16_stop(snd_pcm_scope_t *scope ATTRIBUTE_UNUSED)\n{\n}\n\nstatic void s16_update(snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_scope_s16_t *s16 = scope->private_data;\n\tsnd_pcm_meter_t *meter = s16->pcm->private_data;\n\tsnd_pcm_t *spcm = meter->gen.slave;\n\tsnd_pcm_sframes_t size;\n\tsnd_pcm_uframes_t offset;\n\tsize = meter->now - s16->old;\n\tif (size < 0)\n\t\tsize += spcm->boundary;\n\toffset = s16->old % meter->buf_size;\n\twhile (size > 0) {\n\t\tsnd_pcm_uframes_t frames = size;\n\t\tsnd_pcm_uframes_t cont = meter->buf_size - offset;\n\t\tif (frames > cont)\n\t\t\tframes = cont;\n\t\tswitch (spcm->format) {\n\t\tcase SND_PCM_FORMAT_A_LAW:\n\t\t\tsnd_pcm_alaw_decode(s16->buf_areas, offset,\n\t\t\t\t\t    meter->buf_areas, offset,\n\t\t\t\t\t    spcm->channels, frames,\n\t\t\t\t\t    s16->index);\n\t\t\tbreak;\n\t\tcase SND_PCM_FORMAT_MU_LAW:\n\t\t\tsnd_pcm_mulaw_decode(s16->buf_areas, offset,\n\t\t\t\t\t     meter->buf_areas, offset,\n\t\t\t\t\t     spcm->channels, frames,\n\t\t\t\t\t     s16->index);\n\t\t\tbreak;\n\t\tcase SND_PCM_FORMAT_IMA_ADPCM:\n\t\t\tsnd_pcm_adpcm_decode(s16->buf_areas, offset,\n\t\t\t\t\t     meter->buf_areas, offset,\n\t\t\t\t\t     spcm->channels, frames,\n\t\t\t\t\t     s16->index,\n\t\t\t\t\t     s16->adpcm_states);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsnd_pcm_linear_convert(s16->buf_areas, offset,\n\t\t\t\t\t       meter->buf_areas, offset,\n\t\t\t\t\t       spcm->channels, frames,\n\t\t\t\t\t       s16->index);\n\t\t\tbreak;\n\t\t}\n\t\tif (frames == cont)\n\t\t\toffset = 0;\n\t\telse\n\t\t\toffset += frames;\n\t\tsize -= frames;\n\t}\n\ts16->old = meter->now;\n}\n\nstatic void s16_reset(snd_pcm_scope_t *scope)\n{\n\tsnd_pcm_scope_s16_t *s16 = scope->private_data;\n\tsnd_pcm_meter_t *meter = s16->pcm->private_data;\n\ts16->old = meter->now;\n}\n\nstatic const snd_pcm_scope_ops_t s16_ops = {\n\t.enable = s16_enable,\n\t.disable = s16_disable,\n\t.close = s16_close,\n\t.start = s16_start,\n\t.stop = s16_stop,\n\t.update = s16_update,\n\t.reset = s16_reset,\n};\n\n#endif\n\n/**\n * \\brief Add a s16 pseudo scope to a #SND_PCM_TYPE_METER PCM\n * \\param pcm The pcm handle\n * \\param name Scope name\n * \\param scopep Pointer to newly created and added scope\n * \\return 0 on success otherwise a negative error code\n *\n * s16 pseudo scope convert #SND_PCM_TYPE_METER PCM frames in CPU endian \n * 16 bit frames for use with other scopes. Don't forget to insert it before\n * and to not insert it more time (see #snd_pcm_meter_search_scope)\n */\nint snd_pcm_scope_s16_open(snd_pcm_t *pcm, const char *name,\n\t\t\t   snd_pcm_scope_t **scopep)\n{\n\tsnd_pcm_meter_t *meter;\n\tsnd_pcm_scope_t *scope;\n\tsnd_pcm_scope_s16_t *s16;\n\tassert(pcm->type == SND_PCM_TYPE_METER);\n\tmeter = pcm->private_data;\n\tscope = calloc(1, sizeof(*scope));\n\tif (!scope)\n\t\treturn -ENOMEM;\n\ts16 = calloc(1, sizeof(*s16));\n\tif (!s16) {\n\t\tfree(scope);\n\t\treturn -ENOMEM;\n\t}\n\tif (name)\n\t\tscope->name = strdup(name);\n\ts16->pcm = pcm;\n\tscope->ops = &s16_ops;\n\tscope->private_data = s16;\n\tlist_add_tail(&scope->list, &meter->scopes);\n\t*scopep = scope;\n\treturn 0;\n}\n\n/**\n * \\brief Get s16 pseudo scope frames buffer for a channel\n * \\param scope s16 pseudo scope handle\n * \\param channel Channel\n * \\return Pointer to channel buffer\n */\nint16_t *snd_pcm_scope_s16_get_channel_buffer(snd_pcm_scope_t *scope,\n\t\t\t\t\t      unsigned int channel)\n{\n\tsnd_pcm_scope_s16_t *s16;\n\tsnd_pcm_meter_t *meter;\n\tassert(scope->ops == &s16_ops);\n\ts16 = scope->private_data;\n\tmeter = s16->pcm->private_data;\n\tassert(meter->gen.slave->setup);\n\tassert(s16->buf_areas);\n\tassert(channel < meter->gen.slave->channels);\n\treturn s16->buf_areas[channel].addr;\n}\n\n/**\n * \\brief allocate an invalid #snd_pcm_scope_t using standard malloc\n * \\param ptr returned pointer\n * \\return 0 on success otherwise negative error code\n */\nint snd_pcm_scope_malloc(snd_pcm_scope_t **ptr)\n{\n\tassert(ptr);\n\t*ptr = calloc(1, sizeof(snd_pcm_scope_t));\n\tif (!*ptr)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/pcm/pcm_ladspa.c": "/**\n * \\file pcm/pcm_ladspa.c\n * \\ingroup PCM_Plugins\n * \\brief ALSA Plugin <-> LADSPA Plugin Interface\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2001,2006\n */\n/*\n *  PCM - LADSPA integration plugin\n *  Copyright (c) 2001-2006 by Jaroslav Kysela <perex@perex.cz>\n *  Copyright (c) 2005 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n *\n * perex@perex.cz 2005/12/13\n *   The LADSPA plugin rewrite was sponsored by MediaNet AG\n *   http://www.medianet.ag\n */\n  \n#include <dirent.h>\n#include <locale.h>\n#include <math.h>\n#include \"pcm_local.h\"\n#include \"pcm_plugin.h\"\n\n#include \"ladspa.h\"\n\n#ifndef PIC\n/* entry for static linking */\nconst char *_snd_module_pcm_ladspa = \"\";\n#endif\n\n#ifndef DOC_HIDDEN\n\n#define NO_ASSIGN\t0xffffffff\n\ntypedef enum _snd_pcm_ladspa_policy {\n\tSND_PCM_LADSPA_POLICY_NONE,\t\t/* use bindings only */\n\tSND_PCM_LADSPA_POLICY_DUPLICATE\t\t/* duplicate bindings for all channels */\n} snd_pcm_ladspa_policy_t;\n\ntypedef struct {\n\t/* This field need to be the first */\n\tsnd_pcm_plugin_t plug;\n\t/* Plugin custom fields */\n\tstruct list_head pplugins;\n\tstruct list_head cplugins;\n\tunsigned int channels;\t\t\t/* forced input channels, 0 = auto */\n\tunsigned int allocated;\t\t\t/* count of allocated samples */\n\tLADSPA_Data *zero[2];\t\t\t/* zero input or dummy output */\n} snd_pcm_ladspa_t;\n \ntypedef struct {\n        unsigned int size;\n        unsigned int *array;\n} snd_pcm_ladspa_array_t;\n\ntypedef struct {\n        snd_pcm_ladspa_array_t channels;\n        snd_pcm_ladspa_array_t ports;\n\tLADSPA_Data **m_data;\n        LADSPA_Data **data;\n} snd_pcm_ladspa_eps_t;\n\ntypedef struct snd_pcm_ladspa_instance {\n\tstruct list_head list;\n\tconst LADSPA_Descriptor *desc;\n\tLADSPA_Handle *handle;\n\tunsigned int depth;\n\tsnd_pcm_ladspa_eps_t input;\n\tsnd_pcm_ladspa_eps_t output;\n\tstruct snd_pcm_ladspa_instance *prev;\n\tstruct snd_pcm_ladspa_instance *next;\n} snd_pcm_ladspa_instance_t;\n\ntypedef struct {\n\tLADSPA_PortDescriptor pdesc;\t\t/* port description */\n\tunsigned int port_bindings_size;\t/* size of array */\n\tunsigned int *port_bindings;\t\t/* index = channel number, value = LADSPA port */\n\tunsigned int controls_size;\t\t/* size of array */\n\tunsigned char *controls_initialized;\t/* initialized by ALSA user */\n\tLADSPA_Data *controls;\t\t\t/* index = LADSPA control port index */\n} snd_pcm_ladspa_plugin_io_t;\n\ntypedef struct {\n\tstruct list_head list;\n\tsnd_pcm_ladspa_policy_t policy;\n\tchar *filename;\n\tvoid *dl_handle;\n\tconst LADSPA_Descriptor *desc;\n\tsnd_pcm_ladspa_plugin_io_t input;\n\tsnd_pcm_ladspa_plugin_io_t output;\n\tstruct list_head instances;\t\t/* one LADSPA plugin might be used multiple times */\n} snd_pcm_ladspa_plugin_t;\n\n#endif /* DOC_HIDDEN */\n\nstatic unsigned int snd_pcm_ladspa_count_ports(snd_pcm_ladspa_plugin_t *lplug,\n                                               LADSPA_PortDescriptor pdesc)\n{\n        unsigned int res = 0, idx;\n        for (idx = 0; idx < lplug->desc->PortCount; idx++) {\n                if ((lplug->desc->PortDescriptors[idx] & pdesc) == pdesc)\n                        res++;\n        }\n        return res;\n}\n\nstatic int snd_pcm_ladspa_find_port(unsigned int *res,\n\t\t\t\t    snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t    LADSPA_PortDescriptor pdesc,\n\t\t\t\t    unsigned int port_idx)\n{\n\tunsigned long idx;\n\n\tfor (idx = 0; idx < lplug->desc->PortCount; idx++)\n\t\tif ((lplug->desc->PortDescriptors[idx] & pdesc) == pdesc) {\n\t\t\tif (port_idx == 0) {\n\t\t\t\t*res = idx;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tport_idx--;\n\t\t}\n\treturn -EINVAL;\n}\n\nstatic int snd_pcm_ladspa_find_sport(unsigned int *res,\n\t\t\t\t     snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t     LADSPA_PortDescriptor pdesc,\n\t\t\t\t     const char *port_name)\n{\n\tunsigned long idx;\n\n\tfor (idx = 0; idx < lplug->desc->PortCount; idx++)\n\t\tif ((lplug->desc->PortDescriptors[idx] & pdesc) == pdesc &&\n\t\t    !strcmp(lplug->desc->PortNames[idx], port_name)) {\n\t\t\t*res = idx;\n\t\t\treturn 0;\n\t\t}\n\treturn -EINVAL;\n}\n\nstatic int snd_pcm_ladspa_find_port_idx(unsigned int *res,\n\t\t\t\t\tsnd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t\tLADSPA_PortDescriptor pdesc,\n\t\t\t\t\tunsigned int port)\n{\n\tunsigned long idx;\n\tunsigned int r = 0;\n\n\tif (port >= lplug->desc->PortCount)\n\t\treturn -EINVAL;\n\tfor (idx = 0; idx < port; idx++)\n\t\tif ((lplug->desc->PortDescriptors[idx] & pdesc) == pdesc)\n\t\t\tr++;\n\t*res = r;\n\treturn 0;\n}\n\nstatic void snd_pcm_ladspa_free_io(snd_pcm_ladspa_plugin_io_t *io)\n{\n\tfree(io->controls);\n\tfree(io->controls_initialized);\n}\n\nstatic void snd_pcm_ladspa_free_plugins(struct list_head *plugins)\n{\n\twhile (!list_empty(plugins)) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(plugins->next, snd_pcm_ladspa_plugin_t, list);\n                snd_pcm_ladspa_free_io(&plugin->input);\n                snd_pcm_ladspa_free_io(&plugin->output);\n\t\tif (plugin->dl_handle)\n\t\t\tdlclose(plugin->dl_handle);\n\t\tfree(plugin->filename);\n\t\tlist_del(&plugin->list);\n\t\tfree(plugin);\n\t}\n}\n\nstatic void snd_pcm_ladspa_free(snd_pcm_ladspa_t *ladspa)\n{\n        unsigned int idx;\n\n\tsnd_pcm_ladspa_free_plugins(&ladspa->pplugins);\n\tsnd_pcm_ladspa_free_plugins(&ladspa->cplugins);\n\tfor (idx = 0; idx < 2; idx++) {\n\t\tfree(ladspa->zero[idx]);\n                ladspa->zero[idx] = NULL;\n        }\n        ladspa->allocated = 0;\n}\n\nstatic int snd_pcm_ladspa_close(snd_pcm_t *pcm)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\n\tsnd_pcm_ladspa_free(ladspa);\n\treturn snd_pcm_generic_close(pcm);\n}\n\nstatic int snd_pcm_ladspa_hw_refine_cprepare(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tint err;\n\tsnd_pcm_access_mask_t access_mask = { SND_PCM_ACCBIT_SHMN };\n\terr = _snd_pcm_hw_param_set_mask(params, SND_PCM_HW_PARAM_ACCESS,\n\t\t\t\t\t &access_mask);\n\tif (err < 0)\n\t\treturn err;\n\terr = _snd_pcm_hw_params_set_format(params, SND_PCM_FORMAT_FLOAT);\n\tif (err < 0)\n\t\treturn err;\n\terr = _snd_pcm_hw_params_set_subformat(params, SND_PCM_SUBFORMAT_STD);\n\tif (err < 0)\n\t\treturn err;\n        if (ladspa->channels > 0 && pcm->stream == SND_PCM_STREAM_PLAYBACK) {\n        \terr = _snd_pcm_hw_param_set(params, SND_PCM_HW_PARAM_CHANNELS, ladspa->channels, 0);\n        \tif (err < 0)\n        \t\treturn err;\n        }\n\tparams->info &= ~(SND_PCM_INFO_MMAP | SND_PCM_INFO_MMAP_VALID);\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_hw_refine_sprepare(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *sparams)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tsnd_pcm_access_mask_t saccess_mask = { SND_PCM_ACCBIT_MMAPN };\n\t_snd_pcm_hw_params_any(sparams);\n\t_snd_pcm_hw_param_set_mask(sparams, SND_PCM_HW_PARAM_ACCESS,\n\t\t\t\t   &saccess_mask);\n\t_snd_pcm_hw_params_set_format(sparams, SND_PCM_FORMAT_FLOAT);\n\t_snd_pcm_hw_params_set_subformat(sparams, SND_PCM_SUBFORMAT_STD);\n        if (ladspa->channels > 0 && pcm->stream == SND_PCM_STREAM_CAPTURE)\n                _snd_pcm_hw_param_set(sparams, SND_PCM_HW_PARAM_CHANNELS, ladspa->channels, 0);\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_hw_refine_schange(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params,\n\t\t\t\t\t    snd_pcm_hw_params_t *sparams)\n{\n\tint err;\n\tunsigned int links = (SND_PCM_HW_PARBIT_CHANNELS |\n\t\t\t      SND_PCM_HW_PARBIT_RATE |\n\t\t\t      SND_PCM_HW_PARBIT_PERIOD_SIZE |\n\t\t\t      SND_PCM_HW_PARBIT_BUFFER_SIZE |\n\t\t\t      SND_PCM_HW_PARBIT_PERIODS |\n\t\t\t      SND_PCM_HW_PARBIT_PERIOD_TIME |\n\t\t\t      SND_PCM_HW_PARBIT_BUFFER_TIME |\n\t\t\t      SND_PCM_HW_PARBIT_TICK_TIME);\n\terr = _snd_pcm_hw_params_refine(sparams, links, params);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\t\nstatic int snd_pcm_ladspa_hw_refine_cchange(snd_pcm_t *pcm ATTRIBUTE_UNUSED, snd_pcm_hw_params_t *params,\n\t\t\t\t\t    snd_pcm_hw_params_t *sparams)\n{\n\tint err;\n\tunsigned int links = (SND_PCM_HW_PARBIT_CHANNELS |\n\t\t\t      SND_PCM_HW_PARBIT_RATE |\n\t\t\t      SND_PCM_HW_PARBIT_PERIOD_SIZE |\n\t\t\t      SND_PCM_HW_PARBIT_BUFFER_SIZE |\n\t\t\t      SND_PCM_HW_PARBIT_PERIODS |\n\t\t\t      SND_PCM_HW_PARBIT_PERIOD_TIME |\n\t\t\t      SND_PCM_HW_PARBIT_BUFFER_TIME |\n\t\t\t      SND_PCM_HW_PARBIT_TICK_TIME);\n\terr = _snd_pcm_hw_params_refine(params, links, sparams);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_hw_refine(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)\n{\n\treturn snd_pcm_hw_refine_slave(pcm, params,\n\t\t\t\t       snd_pcm_ladspa_hw_refine_cprepare,\n\t\t\t\t       snd_pcm_ladspa_hw_refine_cchange,\n\t\t\t\t       snd_pcm_ladspa_hw_refine_sprepare,\n\t\t\t\t       snd_pcm_ladspa_hw_refine_schange,\n\t\t\t\t       snd_pcm_generic_hw_refine);\n}\n\nstatic int snd_pcm_ladspa_hw_params(snd_pcm_t *pcm, snd_pcm_hw_params_t * params)\n{\n\t// snd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tint err = snd_pcm_hw_params_slave(pcm, params,\n\t\t\t\t\t  snd_pcm_ladspa_hw_refine_cchange,\n\t\t\t\t\t  snd_pcm_ladspa_hw_refine_sprepare,\n\t\t\t\t\t  snd_pcm_ladspa_hw_refine_schange,\n\t\t\t\t\t  snd_pcm_generic_hw_params);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\nstatic void snd_pcm_ladspa_free_eps(snd_pcm_ladspa_eps_t *eps)\n{\n\tfree(eps->channels.array);\n\tfree(eps->ports.array);\n}\n\nstatic void snd_pcm_ladspa_free_instances(snd_pcm_t *pcm, snd_pcm_ladspa_t *ladspa, int cleanup)\n{\n\tstruct list_head *list, *pos, *pos1, *next1;\n\tunsigned int idx;\n\t\n\tlist = pcm->stream == SND_PCM_STREAM_PLAYBACK ? &ladspa->pplugins : &ladspa->cplugins;\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n\t\tlist_for_each_safe(pos1, next1, &plugin->instances) {\n\t\t\tsnd_pcm_ladspa_instance_t *instance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n\t\t\tif (plugin->desc->deactivate)\n\t\t\t\tplugin->desc->deactivate(instance->handle);\n\t\t\tif (cleanup) {\n\t\t\t\tif (plugin->desc->cleanup)\n\t\t\t\t\tplugin->desc->cleanup(instance->handle);\n\t\t\t\tif (instance->input.m_data) {\n\t\t\t\t        for (idx = 0; idx < instance->input.channels.size; idx++)\n\t\t\t\t\t\tfree(instance->input.m_data[idx]);\n\t\t\t\t\tfree(instance->input.m_data);\n                                }\n\t\t\t\tif (instance->output.m_data) {\n\t\t\t\t        for (idx = 0; idx < instance->output.channels.size; idx++)\n\t\t\t\t\t\tfree(instance->output.m_data[idx]);\n\t\t\t\t\tfree(instance->output.m_data);\n                                }\n                                free(instance->input.data);\n                                free(instance->output.data);\n\t\t\t\tlist_del(&(instance->list));\n\t\t\t\tsnd_pcm_ladspa_free_eps(&instance->input);\n\t\t\t\tsnd_pcm_ladspa_free_eps(&instance->output);\n\t\t\t\tfree(instance);\n\t\t\t} else {\n\t\t\t\tif (plugin->desc->activate)\n\t\t\t\t\tplugin->desc->activate(instance->handle);\n\t\t\t}\n\t\t}\n\t\tif (cleanup) {\n\t\t\tassert(list_empty(&plugin->instances));\n\t\t}\n\t}\n}\n\nstatic int snd_pcm_ladspa_add_to_carray(snd_pcm_ladspa_array_t *array,\n                                        unsigned int idx,\n                                        unsigned int val)\n{\n        unsigned int *narray;\n        unsigned int idx1;\n\n        if (idx >= array->size) {\n                narray = realloc(array->array, sizeof(unsigned int) * (idx + 1));\n                if (narray == NULL)\n                        return -ENOMEM;\n                for (idx1 = array->size; idx1 < idx; idx1++)\n                        narray[idx1] = NO_ASSIGN;\n                array->array = narray;\n                array->size = idx + 1;\n                array->array[idx] = val;\n                return 0;\n        }\n        if (array->array[idx] == NO_ASSIGN)\n                array->array[idx] = val;\n        else\n                return -EINVAL;\n        return 0;\n}\n\nstatic int snd_pcm_ladspa_add_to_array(snd_pcm_ladspa_array_t *array,\n                                       unsigned int idx,\n                                       unsigned int val)\n{\n        unsigned int *narray;\n        unsigned int idx1;\n\n        if (idx >= array->size) {\n                narray = realloc(array->array, sizeof(unsigned int) * (idx + 1));\n                if (narray == NULL)\n                        return -ENOMEM;\n                for (idx1 = array->size; idx1 < idx; idx1++)\n                        narray[idx1] = NO_ASSIGN;\n                array->array = narray;\n                array->size = idx + 1;\n        }\n        array->array[idx] = val;\n        return 0;\n}\n\nstatic int snd_pcm_ladspa_connect_plugin1(snd_pcm_ladspa_plugin_t *plugin,\n\t\t\t\t\t  snd_pcm_ladspa_plugin_io_t *io,\n\t\t\t\t\t  snd_pcm_ladspa_eps_t *eps)\n{\n\tunsigned int port, channels, idx, idx1;\n\tint err;\n\n\tassert(plugin->policy == SND_PCM_LADSPA_POLICY_NONE);\n\tchannels = io->port_bindings_size > 0 ?\n\t                io->port_bindings_size :\n\t                snd_pcm_ladspa_count_ports(plugin, io->pdesc | LADSPA_PORT_AUDIO);\n\tfor (idx = idx1 = 0; idx < channels; idx++) {\n\t\tif (io->port_bindings_size > 0)\n        \t\tport = io->port_bindings[idx];\n                else {\n        \t\terr = snd_pcm_ladspa_find_port(&port, plugin, io->pdesc | LADSPA_PORT_AUDIO, idx);\n        \t\tif (err < 0) {\n        \t\t        SNDERR(\"unable to find audio %s port %u plugin '%s'\", io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", idx, plugin->desc->Name);\n        \t\t\treturn err;\n                        }\n                }\n                if (port == NO_ASSIGN)\n                \tcontinue;\n        \terr = snd_pcm_ladspa_add_to_carray(&eps->channels, idx1, idx);\n        \tif (err < 0) {\n        \t\tSNDERR(\"unable to add channel %u for audio %s plugin '%s'\", idx, io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", plugin->desc->Name);\n        \t        return err;\n                }\n        \terr = snd_pcm_ladspa_add_to_array(&eps->ports, idx1, port);\n        \tif (err < 0) {\n        \t\tSNDERR(\"unable to add port %u for audio %s plugin '%s'\", port, io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", plugin->desc->Name);\n        \t        return err;\n                }\n                idx1++;\n\t}\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_connect_plugin(snd_pcm_ladspa_plugin_t *plugin,\n\t\t\t\t\t snd_pcm_ladspa_instance_t *instance)\n{\n        int err;\n        \n        err = snd_pcm_ladspa_connect_plugin1(plugin, &plugin->input, &instance->input);\n        if (err < 0)\n                return err;\n        err = snd_pcm_ladspa_connect_plugin1(plugin, &plugin->output, &instance->output);\n        if (err < 0)\n                return err;\n        return 0;\n}\n\nstatic int snd_pcm_ladspa_connect_plugin_duplicate1(snd_pcm_ladspa_plugin_t *plugin,\n                                                    snd_pcm_ladspa_plugin_io_t *io,\n                                                    snd_pcm_ladspa_eps_t *eps,\n                                                    unsigned int idx)\n{\n\tunsigned int port;\n\tint err;\n\n\tassert(plugin->policy == SND_PCM_LADSPA_POLICY_DUPLICATE);\n\tif (io->port_bindings_size > 0) {\n\t\tport = io->port_bindings[0];\n\t} else {\n\t\terr = snd_pcm_ladspa_find_port(&port, plugin, io->pdesc | LADSPA_PORT_AUDIO, 0);\n\t\tif (err < 0) {\n\t\t        SNDERR(\"unable to find audio %s port %u plugin '%s'\", io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", (unsigned int)0, plugin->desc->Name);\n\t\t\treturn err;\n                }\n\t}\n\terr = snd_pcm_ladspa_add_to_carray(&eps->channels, 0, idx);\n\tif (err < 0) {\n        \tSNDERR(\"unable to add channel %u for audio %s plugin '%s'\", idx, io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", plugin->desc->Name);\n\t        return err;\n        }\n        err = snd_pcm_ladspa_add_to_array(&eps->ports, 0, port);\n        if (err < 0) {\n        \tSNDERR(\"unable to add port %u for audio %s plugin '%s'\", port, io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", plugin->desc->Name);\n        \treturn err;\n        }\n        return 0;\n}\n\nstatic int snd_pcm_ladspa_connect_plugin_duplicate(snd_pcm_ladspa_plugin_t *plugin,\n\t\t\t\t\t\t   snd_pcm_ladspa_plugin_io_t *in_io,\n\t\t\t\t\t\t   snd_pcm_ladspa_plugin_io_t *out_io,\n\t\t\t\t\t\t   snd_pcm_ladspa_instance_t *instance,\n\t\t\t\t\t\t   unsigned int idx)\n{\n\tint err;\n\n\terr = snd_pcm_ladspa_connect_plugin_duplicate1(plugin, in_io, &instance->input, idx);\n\tif (err < 0)\n\t        return err;\n\terr = snd_pcm_ladspa_connect_plugin_duplicate1(plugin, out_io, &instance->output, idx);\n\tif (err < 0)\n\t        return err;\n        return 0;\n}\n\nstatic void snd_pcm_ladspa_get_default_cvalue(const LADSPA_Descriptor * desc, unsigned int port, LADSPA_Data *val) \n{\n        LADSPA_PortRangeHintDescriptor hdesc;\n\n        hdesc = desc->PortRangeHints[port].HintDescriptor;\n        switch (hdesc & LADSPA_HINT_DEFAULT_MASK) {\n        case LADSPA_HINT_DEFAULT_MINIMUM:\n                *val = desc->PortRangeHints[port].LowerBound;\n                break;\n        case LADSPA_HINT_DEFAULT_LOW:\n                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {\n                        *val = exp(log(desc->PortRangeHints[port].LowerBound)\n                                        * 0.75\n                                        + log(desc->PortRangeHints[port].UpperBound)\n                                        * 0.25);\n                } else {\n                        *val = (desc->PortRangeHints[port].LowerBound * 0.75) +\n                               (desc->PortRangeHints[port].UpperBound * 0.25);\n                }\n                break;\n        case LADSPA_HINT_DEFAULT_MIDDLE:\n                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {\n                        *val = sqrt(desc->PortRangeHints[port].LowerBound *\n                                    desc->PortRangeHints[port].UpperBound);\n                } else {\n                        *val = 0.5 *\n                               (desc->PortRangeHints[port].LowerBound +\n                                desc->PortRangeHints[port].UpperBound);\n                }\n                break;\n        case LADSPA_HINT_DEFAULT_HIGH:\n                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {\n                        *val = exp(log(desc->PortRangeHints[port].LowerBound)\n                                        * 0.25\n                                        + log(desc->PortRangeHints[port].UpperBound)\n                                        * 0.75);\n                } else {\n                        *val = (desc->PortRangeHints[port].LowerBound * 0.25) +\n                               (desc->PortRangeHints[port].UpperBound * 0.75);\n                }\n                break;\n        case LADSPA_HINT_DEFAULT_MAXIMUM:\n                *val = desc->PortRangeHints[port].UpperBound;\n                break;\n        case LADSPA_HINT_DEFAULT_0:\n                *val = 0;\n                break;\n        case LADSPA_HINT_DEFAULT_1:\n                *val = 1;\n                break;\n        case LADSPA_HINT_DEFAULT_100:\n                *val = 100;\n                break;\n        case LADSPA_HINT_DEFAULT_440:\n                *val = 440;\n                break;\n        default:\n                *val = 0;\t/* reasonable default, if everything fails */\n                break;\n        }\n}\n\nstatic int snd_pcm_ladspa_connect_controls(snd_pcm_ladspa_plugin_t *plugin,\n\t\t\t\t\t   snd_pcm_ladspa_plugin_io_t *io,\n\t\t\t\t\t   snd_pcm_ladspa_instance_t *instance)\n{\n\tunsigned long idx, midx;\n\n\tfor (idx = midx = 0; idx < plugin->desc->PortCount; idx++)\n\t\tif ((plugin->desc->PortDescriptors[idx] & (io->pdesc | LADSPA_PORT_CONTROL)) == (io->pdesc | LADSPA_PORT_CONTROL)) {\n\t\t\tif (io->controls_size > midx) {\n\t\t\t        if (!io->controls_initialized[midx])\n\t\t\t                snd_pcm_ladspa_get_default_cvalue(plugin->desc, idx, &io->controls[midx]);\n\t\t\t\tplugin->desc->connect_port(instance->handle, idx, &io->controls[midx]);\n\t\t\t} else {\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tmidx++;\n\t\t}\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_check_connect(snd_pcm_ladspa_plugin_t *plugin,\n                                        snd_pcm_ladspa_plugin_io_t *io,\n                                        snd_pcm_ladspa_eps_t *eps,\n                                        unsigned int depth)\n{\n        unsigned int idx, midx;\n        int err = 0;\n\n\tfor (idx = midx = 0; idx < plugin->desc->PortCount; idx++)\n\t\tif ((plugin->desc->PortDescriptors[idx] & (io->pdesc | LADSPA_PORT_AUDIO)) == (io->pdesc | LADSPA_PORT_AUDIO)) {\n                        if (eps->channels.array[midx] == NO_ASSIGN) {\n                                SNDERR(\"%s port for plugin %s depth %u is not connected\", io->pdesc & LADSPA_PORT_INPUT ? \"input\" : \"output\", plugin->desc->Name, depth);\n                                err++;\n                        }\n\t\t\tmidx++;\n\t\t}\n        if (err > 0) {\n                SNDERR(\"%i connection errors total\", err);\n                return -EINVAL;\n        }\n        return 0;\n}\n\nstatic int snd_pcm_ladspa_allocate_instances(snd_pcm_t *pcm, snd_pcm_ladspa_t *ladspa)\n{\n\tstruct list_head *list, *pos;\n\tunsigned int depth, idx, count;\n        unsigned int in_channels;\n\tunsigned int in_ports, out_ports;\n\tsnd_pcm_ladspa_instance_t *instance = NULL;\n\tint err;\n\t\n\tlist = pcm->stream == SND_PCM_STREAM_PLAYBACK ? &ladspa->pplugins : &ladspa->cplugins;\n\tin_channels = ladspa->channels > 0 ? ladspa->channels :\n\t              (pcm->stream == SND_PCM_STREAM_PLAYBACK ? pcm->channels : ladspa->plug.gen.slave->channels);\n\tdepth = 0;\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n                in_ports = snd_pcm_ladspa_count_ports(plugin, LADSPA_PORT_INPUT | LADSPA_PORT_AUDIO);\n                out_ports = snd_pcm_ladspa_count_ports(plugin, LADSPA_PORT_OUTPUT | LADSPA_PORT_AUDIO);\n\t\tcount = 1;\n\t\tif (plugin->policy == SND_PCM_LADSPA_POLICY_DUPLICATE) {\n                        if (in_ports == 1 && out_ports == 1)\n                                count = in_channels;\n                        else\n                                plugin->policy = SND_PCM_LADSPA_POLICY_NONE;\n                }\n        \tfor (idx = 0; idx < count; idx++) {\n\t\t\tinstance = (snd_pcm_ladspa_instance_t *)calloc(1, sizeof(snd_pcm_ladspa_instance_t));\n\t\t\tif (instance == NULL)\n\t\t\t\treturn -ENOMEM;\n\t\t\tinstance->desc = plugin->desc;\n\t\t\tinstance->handle = plugin->desc->instantiate(plugin->desc, pcm->rate);\n\t\t\tinstance->depth = depth;\n\t\t\tif (instance->handle == NULL) {\n\t\t\t\tSNDERR(\"Unable to create instance of LADSPA plugin '%s'\", plugin->desc->Name);\n\t\t\t\tfree(instance);\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tlist_add_tail(&instance->list, &plugin->instances);\n\t\t\tif (plugin->policy == SND_PCM_LADSPA_POLICY_DUPLICATE) {\n\t\t\t\terr = snd_pcm_ladspa_connect_plugin_duplicate(plugin, &plugin->input, &plugin->output, instance, idx);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Unable to connect duplicate port of plugin '%s' channel %u depth %u\", plugin->desc->Name, idx, instance->depth);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t} else {\n                \t\terr = snd_pcm_ladspa_connect_plugin(plugin, instance);\n                \t\tif (err < 0) {\n\t                \t\tSNDERR(\"Unable to connect plugin '%s' depth %u\", plugin->desc->Name, depth);\n\t\t                \treturn err;\n                \t\t}\n\t\t\t}\n\t\t\terr = snd_pcm_ladspa_connect_controls(plugin, &plugin->input, instance);\n\t\t\tassert(err >= 0);\n\t\t\terr = snd_pcm_ladspa_connect_controls(plugin, &plugin->output, instance);\n\t\t\tassert(err >= 0);\n\t\t\tif (plugin->desc->activate)\n\t\t\t\tplugin->desc->activate(instance->handle);\n\t\t}\n\t\terr = snd_pcm_ladspa_check_connect(plugin, &plugin->input, &instance->input, depth);\n\t\tif (err < 0)\n\t\t        return err;\n\t\terr = snd_pcm_ladspa_check_connect(plugin, &plugin->output, &instance->output, depth);\n\t\tif (err < 0)\n\t\t        return err;\n\t\tdepth++;\n\t}\n\treturn 0;\n}\n\nstatic LADSPA_Data *snd_pcm_ladspa_allocate_zero(snd_pcm_ladspa_t *ladspa, unsigned int idx)\n{\n        if (ladspa->zero[idx] == NULL)\n                ladspa->zero[idx] = calloc(ladspa->allocated, sizeof(LADSPA_Data));\n        return ladspa->zero[idx];\n}\n\nstatic int snd_pcm_ladspa_allocate_memory(snd_pcm_t *pcm, snd_pcm_ladspa_t *ladspa)\n{\n\tstruct list_head *list, *pos, *pos1;\n\tsnd_pcm_ladspa_instance_t *instance;\n\tunsigned int channels = 16, nchannels;\n\tunsigned int ichannels, ochannels;\n\tvoid **pchannels, **npchannels;\n\tunsigned int idx, chn;\n\t\n        ladspa->allocated = 2048;\n        if (pcm->buffer_size > ladspa->allocated)\n                ladspa->allocated = pcm->buffer_size;\n        if (pcm->stream == SND_PCM_STREAM_PLAYBACK) {\n                ichannels = pcm->channels;\n                ochannels = ladspa->plug.gen.slave->channels;\n        } else {\n                ichannels = ladspa->plug.gen.slave->channels;\n                ochannels = pcm->channels;\n        }\n\tpchannels = calloc(1, sizeof(void *) * channels);\n\tif (pchannels == NULL)\n\t        return -ENOMEM;\n\tlist = pcm->stream == SND_PCM_STREAM_PLAYBACK ? &ladspa->pplugins : &ladspa->cplugins;\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n\t\tlist_for_each(pos1, &plugin->instances) {\n\t\t\tinstance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n\t\t\tnchannels = channels;\n\t\t\tfor (idx = 0; idx < instance->input.channels.size; idx++) {\n\t\t\t        chn = instance->input.channels.array[idx];\n\t\t\t        assert(instance->input.ports.array[idx] != NO_ASSIGN);\n        \t\t\tif (chn >= nchannels)\n        \t\t\t        nchannels = chn + 1;\n                        }\n\t\t\tfor (idx = 0; idx < instance->output.channels.size; idx++) {\n\t\t\t        chn = instance->output.channels.array[idx];\n\t\t\t        assert(instance->output.ports.array[idx] != NO_ASSIGN);\n        \t\t\tif (chn >= nchannels)\n        \t\t\t        nchannels = chn + 1;\n                        }\n                        if (nchannels != channels) {\n                                npchannels = realloc(pchannels, nchannels * sizeof(void *));\n                                if (npchannels == NULL) {\n                                        free(pchannels);\n                                        return -ENOMEM;\n                                }\n                                for (idx = channels; idx < nchannels; idx++)\n                                        npchannels[idx] = NULL;\n                                pchannels = npchannels;\n                        }\n                        assert(instance->input.data == NULL);\n                        assert(instance->input.m_data == NULL);\n                        assert(instance->output.data == NULL);\n                        assert(instance->output.m_data == NULL);\n                        instance->input.data = calloc(instance->input.channels.size, sizeof(void *));\n                        instance->input.m_data = calloc(instance->input.channels.size, sizeof(void *));\n                        instance->output.data = calloc(instance->output.channels.size, sizeof(void *));\n                        instance->output.m_data = calloc(instance->output.channels.size, sizeof(void *));\n                        if (instance->input.data == NULL ||\n                            instance->input.m_data == NULL ||\n                            instance->output.data == NULL ||\n                            instance->output.m_data == NULL) {\n                                free(pchannels);\n                                return -ENOMEM;\n                        }\n\t\t\tfor (idx = 0; idx < instance->input.channels.size; idx++) {\n\t\t\t        chn = instance->input.channels.array[idx];\n\t\t\t        if (pchannels[chn] == NULL && chn < ichannels) {\n\t\t\t                instance->input.data[idx] = NULL;\n\t\t\t                continue;\n                                }\n\t\t\t        instance->input.data[idx] = pchannels[chn];\n\t\t\t        if (instance->input.data[idx] == NULL) {\n                                        instance->input.data[idx] = snd_pcm_ladspa_allocate_zero(ladspa, 0);\n                                        if (instance->input.data[idx] == NULL) {\n                                                free(pchannels);\n                                                return -ENOMEM;\n                                        }\n                                }\n                        }\n                        for (idx = 0; idx < instance->output.channels.size; idx++) {\n\t\t\t        chn = instance->output.channels.array[idx];\n                                /* FIXME/OPTIMIZE: check if we can remove double alloc */\n                                /* if LADSPA plugin has no broken inplace */\n                                instance->output.data[idx] = malloc(sizeof(LADSPA_Data) * ladspa->allocated);\n                                if (instance->output.data[idx] == NULL) {\n                                        free(pchannels);\n                                        return -ENOMEM;\n                                }\n                                pchannels[chn] = instance->output.m_data[idx] = instance->output.data[idx];\n                        }\n\t\t}\n\t}\n\t/* OPTIMIZE: we have already allocated areas for ALSA output channels */\n\t/* next loop deallocates the last output LADSPA areas and connects */\n\t/* them to ALSA areas (NULL) or dummy area ladpsa->free[1] ; */\n\t/* this algorithm might be optimized to not allocate the last LADSPA outputs */\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n\t\tlist_for_each(pos1, &plugin->instances) {\n\t\t\tinstance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n                        for (idx = 0; idx < instance->output.channels.size; idx++) {\n        \t\t\tchn = instance->output.channels.array[idx];\n                                if (instance->output.data[idx] == pchannels[chn]) {\n\t\t\t\t\tfree(instance->output.m_data[idx]);\n\t\t\t\t\tinstance->output.m_data[idx] = NULL;\n                                        if (chn < ochannels) {\n                                                instance->output.data[idx] = NULL;\n                                        } else {\n                                                instance->output.data[idx] = snd_pcm_ladspa_allocate_zero(ladspa, 1);\n                                                if (instance->output.data[idx] == NULL) {\n                                                        free(pchannels);\n                                                        return -ENOMEM;\n                                                }\n                                        }\n                                }\n                        }\n                }\n        }\n#if 0\n        printf(\"zero[0] = %p\\n\", ladspa->zero[0]);\n        printf(\"zero[1] = %p\\n\", ladspa->zero[1]);\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n\t\tlist_for_each(pos1, &plugin->instances) {\n\t\t\tinstance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n                        for (idx = 0; idx < instance->input.channels.size; idx++)\n                                printf(\"%i:alloc-input%i:  data = %p, m_data = %p\\n\", instance->depth, idx, instance->input.data[idx], instance->input.m_data[idx]);\n                        for (idx = 0; idx < instance->output.channels.size; idx++)\n                                printf(\"%i:alloc-output%i:  data = %p, m_data = %p\\n\", instance->depth, idx, instance->output.data[idx], instance->output.m_data[idx]);\n\t\t}\n\t}\n#endif\n\tfree(pchannels);\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_init(snd_pcm_t *pcm)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tint err;\n\t\n\tsnd_pcm_ladspa_free_instances(pcm, ladspa, 1);\n\terr = snd_pcm_ladspa_allocate_instances(pcm, ladspa);\n\tif (err < 0) {\n\t\tsnd_pcm_ladspa_free_instances(pcm, ladspa, 1);\n\t\treturn err;\n\t}\n\terr = snd_pcm_ladspa_allocate_memory(pcm, ladspa);\n\tif (err < 0) {\n\t\tsnd_pcm_ladspa_free_instances(pcm, ladspa, 1);\n\t\treturn err;\n\t}\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_hw_free(snd_pcm_t *pcm)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\n\tsnd_pcm_ladspa_free_instances(pcm, ladspa, 1);\n\treturn snd_pcm_generic_hw_free(pcm);\n}\n\nstatic snd_pcm_uframes_t\nsnd_pcm_ladspa_write_areas(snd_pcm_t *pcm,\n\t\t\t   const snd_pcm_channel_area_t *areas,\n\t\t\t   snd_pcm_uframes_t offset,\n\t\t\t   snd_pcm_uframes_t size,\n\t\t\t   const snd_pcm_channel_area_t *slave_areas,\n\t\t\t   snd_pcm_uframes_t slave_offset,\n\t\t\t   snd_pcm_uframes_t *slave_sizep)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tsnd_pcm_ladspa_instance_t *instance;\n\tstruct list_head *pos, *pos1;\n\tLADSPA_Data *data;\n\tunsigned int idx, chn, size1, size2;\n\t\n\tif (size > *slave_sizep)\n\t\tsize = *slave_sizep;\n        size2 = size;\n#if 0\t/* no processing - for testing purposes only */\n\tsnd_pcm_areas_copy(slave_areas, slave_offset,\n\t\t\t   areas, offset,\n\t\t\t   pcm->channels, size, pcm->format);\n#else\n        while (size > 0) {\n                size1 = size;\n                if (size1 > ladspa->allocated)\n                        size1 = ladspa->allocated;\n        \tlist_for_each(pos, &ladspa->pplugins) {\n        \t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n        \t\tlist_for_each(pos1, &plugin->instances) {\n        \t\t\tinstance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n        \t\t\tfor (idx = 0; idx < instance->input.channels.size; idx++) {\n                                        chn = instance->input.channels.array[idx];\n                                        data = instance->input.data[idx];\n                                        if (data == NULL) {\n                                \t\tdata = (LADSPA_Data *)((char *)areas[chn].addr + (areas[chn].first / 8));\n                                       \t\tdata += offset;\n                                        }\n                                        instance->desc->connect_port(instance->handle, instance->input.ports.array[idx], data);\n        \t\t\t}\n        \t\t\tfor (idx = 0; idx < instance->output.channels.size; idx++) {\n                                        chn = instance->output.channels.array[idx];\n                                        data = instance->output.data[idx];\n                                        if (data == NULL) {\n                                \t\tdata = (LADSPA_Data *)((char *)slave_areas[chn].addr + (areas[chn].first / 8));\n                                \t\tdata += slave_offset;\n                                        }\n\t\t\t\t\tinstance->desc->connect_port(instance->handle, instance->output.ports.array[idx], data);\n        \t\t\t}\n        \t\t\tinstance->desc->run(instance->handle, size1);\n        \t\t}\n        \t}\n        \toffset += size1;\n        \tslave_offset += size1;\n        \tsize -= size1;\n\t}\n#endif\n\t*slave_sizep = size2;\n\treturn size2;\n}\n\nstatic snd_pcm_uframes_t\nsnd_pcm_ladspa_read_areas(snd_pcm_t *pcm,\n\t\t\t  const snd_pcm_channel_area_t *areas,\n\t\t\t  snd_pcm_uframes_t offset,\n\t\t\t  snd_pcm_uframes_t size,\n\t\t\t  const snd_pcm_channel_area_t *slave_areas,\n\t\t\t  snd_pcm_uframes_t slave_offset,\n\t\t\t  snd_pcm_uframes_t *slave_sizep)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\tsnd_pcm_ladspa_instance_t *instance;\n\tstruct list_head *pos, *pos1;\n\tLADSPA_Data *data;\n\tunsigned int idx, chn, size1, size2;;\n\n\tif (size > *slave_sizep)\n\t\tsize = *slave_sizep;\n        size2 = size;\n#if 0\t/* no processing - for testing purposes only */\n\tsnd_pcm_areas_copy(areas, offset,\n\t\t\t   slave_areas, slave_offset,\n\t\t\t   pcm->channels, size, pcm->format);\n#else\n        while (size > 0) {\n                size1 = size;\n                if (size1 > ladspa->allocated)\n                        size1 = ladspa->allocated;\n        \tlist_for_each(pos, &ladspa->cplugins) {\n        \t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n        \t\tlist_for_each(pos1, &plugin->instances) {\n        \t\t\tinstance = list_entry(pos1, snd_pcm_ladspa_instance_t, list);\n        \t\t\tfor (idx = 0; idx < instance->input.channels.size; idx++) {\n                                        chn = instance->input.channels.array[idx];\n                                        data = instance->input.data[idx];\n                                        if (data == NULL) {\n                                \t\tdata = (LADSPA_Data *)((char *)slave_areas[chn].addr + (areas[chn].first / 8));\n                                \t\tdata += slave_offset;\n                                        }\t\n                \t\t\tinstance->desc->connect_port(instance->handle, instance->input.ports.array[idx], data);\n        \t\t\t}\n        \t\t\tfor (idx = 0; idx < instance->output.channels.size; idx++) {\n                                        chn = instance->output.channels.array[idx];\n                                        data = instance->output.data[idx];\n                                        if (data == NULL) {\n                                \t\tdata = (LADSPA_Data *)((char *)areas[chn].addr + (areas[chn].first / 8));\n                                       \t\tdata += offset;\n                                        }\n        \t\t        \tinstance->desc->connect_port(instance->handle, instance->output.ports.array[idx], data);\n        \t\t\t}\n        \t\t\tinstance->desc->run(instance->handle, size1);\n        \t\t}\n        \t}\n        \toffset += size1;\n        \tslave_offset += size1;\n        \tsize -= size1;\n\t}\n#endif\n\t*slave_sizep = size2;\n\treturn size2;\n}\n\nstatic void snd_pcm_ladspa_dump_direction(snd_pcm_ladspa_plugin_t *plugin,\n                                          snd_pcm_ladspa_plugin_io_t *io,\n                                          snd_output_t *out)\n{\n\tunsigned int idx, midx;\n\n\tif (io->port_bindings_size == 0)\n\t\tgoto __control;\n\tsnd_output_printf(out, \"    Audio %s port bindings:\\n\", io->pdesc == LADSPA_PORT_INPUT ? \"input\" : \"output\");\n\tfor (idx = 0; idx < io->port_bindings_size; idx++) {\n\t\tif (io->port_bindings[idx] == NO_ASSIGN) \n\t\t\tsnd_output_printf(out, \"      %i -> NONE\\n\", idx);\n                else\n        \t\tsnd_output_printf(out, \"      %i -> %i\\n\", idx, io->port_bindings[idx]);\n\t}\n      __control:\n      \tif (io->controls_size == 0)\n      \t\treturn;\n\tsnd_output_printf(out, \"    Control %s port initial values:\\n\", io->pdesc == LADSPA_PORT_INPUT ? \"input\" : \"output\");\n\tfor (idx = midx = 0; idx < plugin->desc->PortCount; idx++) {\n\t\tif ((plugin->desc->PortDescriptors[idx] & (io->pdesc | LADSPA_PORT_CONTROL)) == (io->pdesc | LADSPA_PORT_CONTROL)) {\n        \t\tsnd_output_printf(out, \"      %i \\\"%s\\\" = %.8f\\n\", idx, plugin->desc->PortNames[idx], io->controls[midx]);\n        \t\tmidx++;\n                }\n        }\n}\n\nstatic void snd_pcm_ladspa_dump_array(snd_output_t *out,\n                                      snd_pcm_ladspa_array_t *array,\n                                      snd_pcm_ladspa_plugin_t *plugin)\n{\n        unsigned int size = array->size;\n        unsigned int val, idx = 0;\n\n        while (size-- > 0) {\n                if (idx > 0) {\n                        snd_output_putc(out, ',');\n                        snd_output_putc(out, ' ');\n                }\n                val = array->array[idx++];\n                if (val == NO_ASSIGN)\n                        snd_output_putc(out, '-');\n                else\n                        snd_output_printf(out, \"%u\", val);\n                if (plugin && val != NO_ASSIGN)\n                        snd_output_printf(out, \" \\\"%s\\\"\", plugin->desc->PortNames[val]);\n        }\n}\n\nstatic void snd_pcm_ladspa_plugins_dump(struct list_head *list, snd_output_t *out)\n{\n\tstruct list_head *pos, *pos2;\n\t\n\tlist_for_each(pos, list) {\n\t\tsnd_pcm_ladspa_plugin_t *plugin = list_entry(pos, snd_pcm_ladspa_plugin_t, list);\n\t\tsnd_output_printf(out, \"    Policy: %s\\n\", plugin->policy == SND_PCM_LADSPA_POLICY_NONE ? \"none\" : \"duplicate\");\n\t\tsnd_output_printf(out, \"    Filename: %s\\n\", plugin->filename);\n\t\tsnd_output_printf(out, \"    Plugin Name: %s\\n\", plugin->desc->Name);\n\t\tsnd_output_printf(out, \"    Plugin Label: %s\\n\", plugin->desc->Label);\n\t\tsnd_output_printf(out, \"    Plugin Unique ID: %lu\\n\", plugin->desc->UniqueID);\n                snd_output_printf(out, \"    Instances:\\n\");\n\t\tlist_for_each(pos2, &plugin->instances) {\n\t\t        snd_pcm_ladspa_instance_t *in = (snd_pcm_ladspa_instance_t *) pos2;\n\t\t        snd_output_printf(out, \"      Depth: %i\\n\", in->depth);\n\t\t        snd_output_printf(out, \"         InChannels: \");\n                        snd_pcm_ladspa_dump_array(out, &in->input.channels, NULL);\n                        snd_output_printf(out, \"\\n         InPorts: \");\n                        snd_pcm_ladspa_dump_array(out, &in->input.ports, plugin);\n                        snd_output_printf(out, \"\\n         OutChannels: \");\n                        snd_pcm_ladspa_dump_array(out, &in->output.channels, NULL);\n                        snd_output_printf(out, \"\\n         OutPorts: \");\n                        snd_pcm_ladspa_dump_array(out, &in->output.ports, plugin);\n                        snd_output_printf(out, \"\\n\");\n\t\t}\n\t\tsnd_pcm_ladspa_dump_direction(plugin, &plugin->input, out);\n\t\tsnd_pcm_ladspa_dump_direction(plugin, &plugin->output, out);\n\t}\n}\n\nstatic void snd_pcm_ladspa_dump(snd_pcm_t *pcm, snd_output_t *out)\n{\n\tsnd_pcm_ladspa_t *ladspa = pcm->private_data;\n\n\tsnd_output_printf(out, \"LADSPA PCM\\n\");\n\tsnd_output_printf(out, \"  Playback:\\n\");\n\tsnd_pcm_ladspa_plugins_dump(&ladspa->pplugins, out);\n\tsnd_output_printf(out, \"  Capture:\\n\");\n\tsnd_pcm_ladspa_plugins_dump(&ladspa->cplugins, out);\n\tif (pcm->setup) {\n\t\tsnd_output_printf(out, \"Its setup is:\\n\");\n\t\tsnd_pcm_dump_setup(pcm, out);\n\t}\n\tsnd_output_printf(out, \"Slave: \");\n\tsnd_pcm_dump(ladspa->plug.gen.slave, out);\n}\n\nstatic const snd_pcm_ops_t snd_pcm_ladspa_ops = {\n\t.close = snd_pcm_ladspa_close,\n\t.info = snd_pcm_generic_info,\n\t.hw_refine = snd_pcm_ladspa_hw_refine,\n\t.hw_params = snd_pcm_ladspa_hw_params,\n\t.hw_free = snd_pcm_ladspa_hw_free,\n\t.sw_params = snd_pcm_generic_sw_params,\n\t.channel_info = snd_pcm_generic_channel_info,\n\t.dump = snd_pcm_ladspa_dump,\n\t.nonblock = snd_pcm_generic_nonblock,\n\t.async = snd_pcm_generic_async,\n\t.mmap = snd_pcm_generic_mmap,\n\t.munmap = snd_pcm_generic_munmap,\n\t.query_chmaps = snd_pcm_generic_query_chmaps,\n\t.get_chmap = snd_pcm_generic_get_chmap,\n\t.set_chmap = snd_pcm_generic_set_chmap,\n};\n\nstatic int snd_pcm_ladspa_check_file(snd_pcm_ladspa_plugin_t * const plugin,\n\t\t\t\t     const char *filename,\n\t\t\t\t     const char *label,\n\t\t\t\t     const unsigned long ladspa_id)\n{\n\tvoid *handle;\n\n\tassert(filename);\n\thandle = dlopen(filename, RTLD_LAZY);\n\tif (handle) {\n\t\tLADSPA_Descriptor_Function fcn = (LADSPA_Descriptor_Function)dlsym(handle, \"ladspa_descriptor\");\n\t\tif (fcn) {\n\t\t\tlong idx;\n\t\t\tconst LADSPA_Descriptor *d;\n\t\t\tfor (idx = 0; (d = fcn(idx)) != NULL; idx++) {\n/*\n * avoid locale problems - see ALSA bug#1553\n */\n#if 0\n\t\t\t\tif (strcmp(label, d->Label))\n\t\t\t\t\tcontinue;\n#else\n                                char *labellocale;\n                                struct lconv *lc;\n                                if (label != NULL) {\n                                        lc = localeconv ();\n                                        labellocale = malloc (strlen (label) + 1);\n                                        if (labellocale == NULL) {\n                                        \tdlclose(handle);\n                                                return -ENOMEM;\n\t\t\t\t\t}\n                                        strcpy (labellocale, label);\n                                        if (strrchr(labellocale, '.'))\n                                                *strrchr (labellocale, '.') = *lc->decimal_point;\n                                        if (strcmp(label, d->Label) && strcmp(labellocale, d->Label)) {\n                                                free(labellocale);\n                                                continue;\n                                        }\n                                        free (labellocale);\n                                }\n#endif\n\t\t\t\tif (ladspa_id > 0 && d->UniqueID != ladspa_id)\n\t\t\t\t\tcontinue;\n\t\t\t\tplugin->filename = strdup(filename);\n\t\t\t\tif (plugin->filename == NULL) {\n\t\t\t\t\tdlclose(handle);\n\t\t\t\t\treturn -ENOMEM;\n\t\t\t\t}\n\t\t\t\tplugin->dl_handle = handle;\n\t\t\t\tplugin->desc = d;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tdlclose(handle);\n\t}\n\treturn -ENOENT;\n}\n\nstatic int snd_pcm_ladspa_check_dir(snd_pcm_ladspa_plugin_t * const plugin,\n\t\t\t\t    const char *path,\n\t\t\t\t    const char *label,\n\t\t\t\t    const unsigned long ladspa_id)\n{\n\tDIR *dir;\n\tstruct dirent * dirent;\n\tint len = strlen(path), err;\n\tint need_slash;\n\tchar *filename;\n\t\n\tif (len < 1)\n\t\treturn 0;\n\tneed_slash = path[len - 1] != '/';\n\t\n\tdir = opendir(path);\n\tif (!dir)\n\t\treturn -ENOENT;\n\t\t\n\twhile (1) {\n\t\tdirent = readdir(dir);\n\t\tif (!dirent) {\n\t\t\tclosedir(dir);\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\tfilename = malloc(len + strlen(dirent->d_name) + 1 + need_slash);\n\t\tif (filename == NULL) {\n\t\t\tclosedir(dir);\n\t\t\treturn -ENOMEM;\n\t\t}\n\t\tstrcpy(filename, path);\n\t\tif (need_slash)\n\t\t\tstrcat(filename, \"/\");\n\t\tstrcat(filename, dirent->d_name);\n\t\terr = snd_pcm_ladspa_check_file(plugin, filename, label, ladspa_id);\n\t\tfree(filename);\n\t\tif (err < 0 && err != -ENOENT) {\n\t\t\tclosedir(dir);\n\t\t\treturn err;\n\t\t}\n\t\tif (err > 0) {\n\t\t\tclosedir(dir);\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/* never reached */\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_look_for_plugin(snd_pcm_ladspa_plugin_t * const plugin,\n\t\t\t\t\t  const char *path,\n\t\t\t\t\t  const char *label,\n\t\t\t\t\t  const long ladspa_id)\n{\n\tconst char *c;\n\tsize_t l;\n\tint err;\n\t\n\tfor (c = path; (l = strcspn(c, \": \")) > 0; ) {\n\t\tchar name[l + 1];\n\t\tchar *fullpath;\n\t\tmemcpy(name, c, l);\n\t\tname[l] = 0;\n\t\terr = snd_user_file(name, &fullpath);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\terr = snd_pcm_ladspa_check_dir(plugin, fullpath, label, ladspa_id);\n\t\tfree(fullpath);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t\tif (err > 0)\n\t\t\treturn 0;\n\t\tc += l;\n\t\tif (!*c)\n\t\t\tbreak;\n\t\tc++;\n\t}\n\treturn -ENOENT;\n}\t\t\t\t\t  \n\nstatic int snd_pcm_ladspa_add_default_controls(snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t\t       snd_pcm_ladspa_plugin_io_t *io) \n{\n\tunsigned int count = 0;\n\tLADSPA_Data *array;\n\tunsigned char *initialized;\n\tunsigned long idx;\n\n\tfor (idx = 0; idx < lplug->desc->PortCount; idx++)\n\t\tif ((lplug->desc->PortDescriptors[idx] & (io->pdesc | LADSPA_PORT_CONTROL)) == (io->pdesc | LADSPA_PORT_CONTROL))\n\t\t\tcount++;\n\tarray = (LADSPA_Data *)calloc(count, sizeof(LADSPA_Data));\n\tif (!array)\n\t\treturn -ENOMEM;\n\tinitialized = (unsigned char *)calloc(count, sizeof(unsigned char));\n\tif (!initialized) {\n\t\tfree(array);\n\t\treturn -ENOMEM;\n\t}\n\tio->controls_size = count;\n\tio->controls_initialized = initialized;\n\tio->controls = array;\n\n\treturn 0;\n}\t\n\nstatic int snd_pcm_ladspa_parse_controls(snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t\t snd_pcm_ladspa_plugin_io_t *io,\n\t\t\t\t\t snd_config_t *controls) \n{\n\tsnd_config_iterator_t i, next;\n\tint err;\n\n\tif (snd_config_get_type(controls) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"controls definition must be a compound\");\n\t\treturn -EINVAL;\n\t}\n\n\tsnd_config_for_each(i, next, controls) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tlong lval;\n\t\tunsigned int port, uval;\n\t\tdouble dval;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\terr = safe_strtol(id, &lval);\n\t\tif (err >= 0) {\n\t\t\terr = snd_pcm_ladspa_find_port(&port, lplug, io->pdesc | LADSPA_PORT_CONTROL, lval);\n\t\t} else {\n\t\t\terr = snd_pcm_ladspa_find_sport(&port, lplug, io->pdesc | LADSPA_PORT_CONTROL, id);\n\t\t}\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Unable to find an control port (%s)\", id);\n\t\t\treturn err;\n\t\t}\n\t\tif (snd_config_get_ireal(n, &dval) < 0) {\n\t\t\tSNDERR(\"Control port %s has not an float or integer value\", id);\n\t\t\treturn err;\n\t\t}\n\t\terr = snd_pcm_ladspa_find_port_idx(&uval, lplug, io->pdesc | LADSPA_PORT_CONTROL, port);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"internal error\");\n\t\t\treturn err;\n\t\t}\n\t\tio->controls_initialized[uval] = 1;\n\t\tio->controls[uval] = (LADSPA_Data)dval;\n\t}\n\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_parse_bindings(snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t\t snd_pcm_ladspa_plugin_io_t *io,\n\t\t\t\t\t snd_config_t *bindings) \n{\n\tunsigned int count = 0;\n\tunsigned int *array;\n\tsnd_config_iterator_t i, next;\n\tint err;\n\n\tif (snd_config_get_type(bindings) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"bindings definition must be a compound\");\n\t\treturn -EINVAL;\n\t}\n\tsnd_config_for_each(i, next, bindings) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tlong channel;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\terr = safe_strtol(id, &channel);\n\t\tif (err < 0 || channel < 0) {\n\t\t\tSNDERR(\"Invalid channel number: %s\", id);\n\t\t\treturn -EINVAL;\n\t\t}\n\t\tif (lplug->policy == SND_PCM_LADSPA_POLICY_DUPLICATE && channel > 0) {\n\t\t\tSNDERR(\"Wrong channel specification for duplicate policy\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\tif (count < (unsigned int)(channel + 1))\n\t\t\tcount = (unsigned int)(channel + 1);\n\t}\n\tif (count > 0) {\n\t\tarray = (unsigned int *)malloc(count * sizeof(unsigned int));\n\t\tif (! array)\n\t\t\treturn -ENOMEM;\n\t\tmemset(array, 0xff, count * sizeof(unsigned int));\n\t\tio->port_bindings_size = count;\n\t\tio->port_bindings = array;\n\t\tsnd_config_for_each(i, next, bindings) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id, *sport;\n\t\t\tlong channel, port;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\terr = safe_strtol(id, &channel);\n\t\t\tif (err < 0 || channel < 0) {\n\t\t\t\tassert(0);\t/* should never happen */\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\terr = snd_config_get_integer(n, &port);\n\t\t\tif (err >= 0) {\n\t\t\t\terr = snd_pcm_ladspa_find_port(&array[channel], lplug, io->pdesc | LADSPA_PORT_AUDIO, port);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Unable to find an audio port (%li) for channel %s\", port, id);\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\terr = snd_config_get_string(n, &sport);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Invalid LADSPA port field type for %s\", id);\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\terr = snd_pcm_ladspa_find_sport(&array[channel], lplug, io->pdesc | LADSPA_PORT_AUDIO, sport);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"Unable to find an audio port (%s) for channel %s\", sport, id);\n\t\t\t\treturn err;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_parse_ioconfig(snd_pcm_ladspa_plugin_t *lplug,\n\t\t\t\t\t snd_pcm_ladspa_plugin_io_t *io,\n\t\t\t\t\t snd_config_t *conf)\n{\n\tsnd_config_iterator_t i, next;\n\tsnd_config_t *bindings = NULL, *controls = NULL;\n\tint err;\n\n\t/* always add default controls for both input and output */\n\terr = snd_pcm_ladspa_add_default_controls(lplug, io);\n\tif (err < 0) {\n\t\tSNDERR(\"error adding default controls\");\n\t\treturn err;\n\t}\n\t\t\n\tif (conf == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (snd_config_get_type(conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"input or output definition must be a compound\");\n\t\treturn -EINVAL;\n\t}\n\tsnd_config_for_each(i, next, conf) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"bindings\") == 0) {\n\t\t\tbindings = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"controls\") == 0) {\n\t\t\tcontrols = n;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\t/* ignore values of parameters for output controls */\n\tif (controls && !(io->pdesc & LADSPA_PORT_OUTPUT)) {\n \t\terr = snd_pcm_ladspa_parse_controls(lplug, io, controls);\n\t\tif (err < 0) \n\t\t\treturn err;\n\t}\n\n\tif (bindings) {\n \t\terr = snd_pcm_ladspa_parse_bindings(lplug, io, bindings);\n\t\tif (err < 0) \n\t\t\treturn err;\n\t}\n\n\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_add_plugin(struct list_head *list,\n\t\t\t\t     const char *path,\n\t\t\t\t     snd_config_t *plugin,\n\t\t\t\t     int reverse)\n{\n\tsnd_config_iterator_t i, next;\n\tconst char *label = NULL, *filename = NULL;\n\tlong ladspa_id = 0;\n\tint err;\n\tsnd_pcm_ladspa_plugin_t *lplug;\n\tsnd_pcm_ladspa_policy_t policy = SND_PCM_LADSPA_POLICY_DUPLICATE;\n\tsnd_config_t *input = NULL, *output = NULL;\n\n\tsnd_config_for_each(i, next, plugin) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"label\") == 0) {\n\t\t\terr = snd_config_get_string(n, &label);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"id\") == 0) {\n\t\t\terr = snd_config_get_integer(n, &ladspa_id);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"filename\") == 0) {\n\t\t\terr = snd_config_get_string(n, &filename);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"input\") == 0) {\n\t\t\tinput = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"output\") == 0) {\n\t\t\toutput = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"policy\") == 0) {\n\t\t\tconst char *str;\n\t\t\terr = snd_config_get_string(n, &str);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"policy field must be a string\");\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\tif (strcmp(str, \"none\") == 0)\n\t\t\t\tpolicy = SND_PCM_LADSPA_POLICY_NONE;\n\t\t\telse if (strcmp(str, \"duplicate\") == 0)\n\t\t\t\tpolicy = SND_PCM_LADSPA_POLICY_DUPLICATE;\n\t\t\telse {\n\t\t\t\tSNDERR(\"unknown policy definition\");\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t}\n\tif (label == NULL && ladspa_id <= 0) {\n\t\tSNDERR(\"no plugin label or id\");\n\t\treturn -EINVAL;\n\t}\n\tlplug = (snd_pcm_ladspa_plugin_t *)calloc(1, sizeof(snd_pcm_ladspa_plugin_t));\n\tif (lplug == NULL)\n\t\treturn -ENOMEM;\n\tlplug->policy = policy;\n\tlplug->input.pdesc = LADSPA_PORT_INPUT;\n\tlplug->output.pdesc = LADSPA_PORT_OUTPUT;\n\tINIT_LIST_HEAD(&lplug->instances);\n\tif (filename) {\n\t\terr = snd_pcm_ladspa_check_file(lplug, filename, label, ladspa_id);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Unable to load plugin '%s' ID %li, filename '%s'\", label, ladspa_id, filename);\n\t\t\tfree(lplug);\n\t\t\treturn err;\n\t\t}\n\t} else {\n\t\terr = snd_pcm_ladspa_look_for_plugin(lplug, path, label, ladspa_id);\n\t\tif (err < 0) {\n\t\t\tSNDERR(\"Unable to find or load plugin '%s' ID %li, path '%s'\", label, ladspa_id, path);\n\t\t\tfree(lplug);\n\t\t\treturn err;\n\t\t}\n\t}\n\tif (!reverse) {\n\t\tlist_add_tail(&lplug->list, list);\n\t} else {\n\t\tlist_add(&lplug->list, list);\n\t}\n\terr = snd_pcm_ladspa_parse_ioconfig(lplug, &lplug->input, input);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_ladspa_parse_ioconfig(lplug, &lplug->output, output);\n\tif (err < 0)\n\t\treturn err;\n\treturn 0;\n}\n\nstatic int snd_pcm_ladspa_build_plugins(struct list_head *list,\n\t\t\t\t\tconst char *path,\n\t\t\t\t\tsnd_config_t *plugins,\n\t\t\t\t\tint reverse)\n{\n\tsnd_config_iterator_t i, next;\n\tint idx = 0, hit, err;\n\n\tif (plugins == NULL)\t/* nothing TODO */\n\t\treturn 0;\n\tif (snd_config_get_type(plugins) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tSNDERR(\"plugins must be defined inside a compound\");\n\t\treturn -EINVAL;\n\t}\n\tdo {\n\t\thit = 0;\n\t\tsnd_config_for_each(i, next, plugins) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tlong i;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\terr = safe_strtol(id, &i);\n\t\t\tif (err < 0) {\n\t\t\t\tSNDERR(\"id of field %s is not an integer\", id);\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\tif (i == idx) {\n\t\t\t\tidx++;\n\t\t\t\terr = snd_pcm_ladspa_add_plugin(list, path, n, reverse);\n\t\t\t\tif (err < 0)\n\t\t\t\t\treturn err;\n\t\t\t\thit = 1;\n\t\t\t}\n\t\t}\n\t} while (hit);\n\tif (list_empty(list)) {\n\t\tSNDERR(\"empty plugin list is not accepted\");\n\t\treturn -EINVAL;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief Creates a new LADSPA<->ALSA Plugin\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param ladspa_path The path for LADSPA plugins\n * \\param channels Force input channel count to LADSPA plugin chain, 0 = no force (auto)\n * \\param ladspa_pplugins The playback configuration\n * \\param ladspa_cplugins The capture configuration\n * \\param slave Slave PCM handle\n * \\param close_slave When set, the slave PCM handle is closed with copy PCM\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *          changed in future.\n */\nint snd_pcm_ladspa_open(snd_pcm_t **pcmp, const char *name,\n\t\t\tconst char *ladspa_path,\n\t\t\tunsigned int channels,\n\t\t\tsnd_config_t *ladspa_pplugins,\n\t\t\tsnd_config_t *ladspa_cplugins,\n\t\t\tsnd_pcm_t *slave, int close_slave)\n{\n\tsnd_pcm_t *pcm;\n\tsnd_pcm_ladspa_t *ladspa;\n\tint err, reverse = 0;\n\n\tassert(pcmp && (ladspa_pplugins || ladspa_cplugins) && slave);\n\n\tif (!ladspa_path && !(ladspa_path = getenv(\"LADSPA_PATH\")))\n\t\treturn -ENOENT;\n\tladspa = calloc(1, sizeof(snd_pcm_ladspa_t));\n\tif (!ladspa)\n\t\treturn -ENOMEM;\n\tsnd_pcm_plugin_init(&ladspa->plug);\n\tladspa->plug.init = snd_pcm_ladspa_init;\n\tladspa->plug.read = snd_pcm_ladspa_read_areas;\n\tladspa->plug.write = snd_pcm_ladspa_write_areas;\n\tladspa->plug.undo_read = snd_pcm_plugin_undo_read_generic;\n\tladspa->plug.undo_write = snd_pcm_plugin_undo_write_generic;\n\tladspa->plug.gen.slave = slave;\n\tladspa->plug.gen.close_slave = close_slave;\n\n\tINIT_LIST_HEAD(&ladspa->pplugins);\n\tINIT_LIST_HEAD(&ladspa->cplugins);\n\tladspa->channels = channels;\n\n\tif (slave->stream == SND_PCM_STREAM_PLAYBACK) {\n\t\terr = snd_pcm_ladspa_build_plugins(&ladspa->pplugins, ladspa_path, ladspa_pplugins, reverse);\n\t\tif (err < 0) {\n\t\t\tsnd_pcm_ladspa_free(ladspa);\n\t\t\treturn err;\n\t\t}\n\t}\n\tif (slave->stream == SND_PCM_STREAM_CAPTURE) {\n\t\tif (ladspa_cplugins == ladspa_pplugins)\n\t\t\treverse = 1;\n\t\terr = snd_pcm_ladspa_build_plugins(&ladspa->cplugins, ladspa_path, ladspa_cplugins, reverse);\n\t\tif (err < 0) {\n\t\t\tsnd_pcm_ladspa_free(ladspa);\n\t\t\treturn err;\n\t\t}\n\t}\n\n\terr = snd_pcm_new(&pcm, SND_PCM_TYPE_LADSPA, name, slave->stream, slave->mode);\n\tif (err < 0) {\n\t\tsnd_pcm_ladspa_free(ladspa);\n\t\treturn err;\n\t}\n\tpcm->ops = &snd_pcm_ladspa_ops;\n\tpcm->fast_ops = &snd_pcm_plugin_fast_ops;\n\tpcm->private_data = ladspa;\n\tpcm->poll_fd = slave->poll_fd;\n\tpcm->poll_events = slave->poll_events;\n\tpcm->tstamp_type = slave->tstamp_type;\n\tsnd_pcm_set_hw_ptr(pcm, &ladspa->plug.hw_ptr, -1, 0);\n\tsnd_pcm_set_appl_ptr(pcm, &ladspa->plug.appl_ptr, -1, 0);\n\t*pcmp = pcm;\n\n\treturn 0;\n}\n\n/*! \\page pcm_plugins\n\n\\section pcm_plugins_ladpsa Plugin: LADSPA <-> ALSA\n\nThis plugin allows to apply a set of LADPSA plugins.\nThe input and output format is always #SND_PCM_FORMAT_FLOAT (note: this type\ncan be either little or big-endian depending on architecture).\n\nThe policy duplicate means that there must be only one binding definition for\nchannel zero. This definition is automatically duplicated for all channels.\nIf the LADSPA plugin has multiple audio inputs or outputs the policy duplicate\nis automatically switched to policy none.\n\nThe plugin serialization works as expected. You can eventually use more\nchannels (inputs / outputs) inside the LADPSA plugin chain than processed\nin the ALSA plugin chain. If ALSA channel does not exist for given LADSPA\ninput audio port, zero samples are given to this LADSPA port. On the output\nside (ALSA next plugin input), the valid channels are checked, too.\nIf specific ALSA channel does not exist, the LADSPA output port is\nconnected to a dummy sample area.\n\nInstances of LADSPA plugins are created dynamically.\n\n\\code\npcm.name {\n        type ladspa             # ALSA<->LADSPA PCM\n        slave STR               # Slave name\n        # or\n        slave {                 # Slave definition\n                pcm STR         # Slave PCM name\n                # or\n                pcm { }         # Slave PCM definition\n        }\n        [channels INT]\t\t# count input channels (input to LADSPA plugin chain)\n\t[path STR]\t\t# Path (directory) with LADSPA plugins\n\tplugins |\t\t# Definition for both directions\n        playback_plugins |\t# Definition for playback direction\n\tcapture_plugins {\t# Definition for capture direction\n\t\tN {\t\t# Configuration for LADPSA plugin N\n\t\t\t[id INT]\t# LADSPA plugin ID (for example 1043)\n\t\t\t[label STR]\t# LADSPA plugin label (for example 'delay_5s')\n\t\t\t[filename STR]\t# Full filename of .so library with LADSPA plugin code\n\t\t\t[policy STR]\t# Policy can be 'none' or 'duplicate'\n\t\t\tinput | output {\n\t\t\t\tbindings {\n\t\t\t\t\tC INT or STR\t# C - channel, INT - audio port index, STR - audio port name\n\t\t\t\t}\n\t\t\t\tcontrols {\n\t\t\t\t        # valid only in the input block\n\t\t\t\t\tI INT or REAL\t# I - control port index, INT or REAL - control value\n\t\t\t\t\t# or\n\t\t\t\t\tSTR INT or REAL\t# STR - control port name, INT or REAL - control value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\\endcode\n\n\\subsection pcm_plugins_ladspa_funcref Function reference\n\n<UL>\n  <LI>snd_pcm_ladspa_open()\n  <LI>_snd_pcm_ladspa_open()\n</UL>\n\n*/\n\n/**\n * \\brief Creates a new LADSPA<->ALSA PCM\n * \\param pcmp Returns created PCM handle\n * \\param name Name of PCM\n * \\param root Root configuration node\n * \\param conf Configuration node with LADSPA<->ALSA PCM description\n * \\param stream Stream type\n * \\param mode Stream mode\n * \\retval zero on success otherwise a negative error code\n * \\warning Using of this function might be dangerous in the sense\n *          of compatibility reasons. The prototype might be freely\n *          changed in future.\n */\nint _snd_pcm_ladspa_open(snd_pcm_t **pcmp, const char *name,\n\t\t\t snd_config_t *root, snd_config_t *conf, \n\t\t\t snd_pcm_stream_t stream, int mode)\n{\n\tsnd_config_iterator_t i, next;\n\tint err;\n\tsnd_pcm_t *spcm;\n\tsnd_config_t *slave = NULL, *sconf;\n\tconst char *path = NULL;\n\tlong channels = 0;\n\tsnd_config_t *plugins = NULL, *pplugins = NULL, *cplugins = NULL;\n\tsnd_config_for_each(i, next, conf) {\n\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\tconst char *id;\n\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\tcontinue;\n\t\tif (snd_pcm_conf_generic_id(id))\n\t\t\tcontinue;\n\t\tif (strcmp(id, \"slave\") == 0) {\n\t\t\tslave = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"path\") == 0) {\n\t\t\tsnd_config_get_string(n, &path);\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"channels\") == 0) {\n\t\t\tsnd_config_get_integer(n, &channels);\n\t\t\tif (channels > 1024)\n\t\t\t        channels = 1024;\n                        if (channels < 0)\n                                channels = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"plugins\") == 0) {\n\t\t\tplugins = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"playback_plugins\") == 0) {\n\t\t\tpplugins = n;\n\t\t\tcontinue;\n\t\t}\n\t\tif (strcmp(id, \"capture_plugins\") == 0) {\n\t\t\tcplugins = n;\n\t\t\tcontinue;\n\t\t}\n\t\tSNDERR(\"Unknown field %s\", id);\n\t\treturn -EINVAL;\n\t}\n\tif (!slave) {\n\t\tSNDERR(\"slave is not defined\");\n\t\treturn -EINVAL;\n\t}\n\tif (plugins) {\n\t\tif (pplugins || cplugins) {\n\t\t\tSNDERR(\"'plugins' definition cannot be combined with 'playback_plugins' or 'capture_plugins'\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\tpplugins = plugins;\n\t\tcplugins = plugins;\n\t}\n\terr = snd_pcm_slave_conf(root, slave, &sconf, 0);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_open_slave(&spcm, root, sconf, stream, mode, conf);\n\tsnd_config_delete(sconf);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_pcm_ladspa_open(pcmp, name, path, channels, pplugins, cplugins, spcm, 1);\n\tif (err < 0)\n\t\tsnd_pcm_close(spcm);\n\treturn err;\n}\n#ifndef DOC_HIDDEN\nSND_DLSYM_BUILD_VERSION(_snd_pcm_ladspa_open, SND_PCM_DLSYM_VERSION);\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/timer/timer_query.c": "/**\n * \\file timer/timer_query.c\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 2001\n *\n * Timer Query Interface is designed to obtain identification of timers.\n */\n/*\n *  Timer Query Interface - main file\n *  Copyright (c) 2001 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#include \"timer_local.h\"\n\nstatic int snd_timer_query_open_conf(snd_timer_query_t **timer,\n\t\t\t\t     const char *name, snd_config_t *timer_root,\n\t\t\t\t     snd_config_t *timer_conf, int mode)\n{\n\tconst char *str;\n\tchar buf[256];\n\tint err;\n\tsnd_config_t *conf, *type_conf = NULL;\n\tsnd_config_iterator_t i, next;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL;\n\tint (*open_func)(snd_timer_query_t **, const char *, snd_config_t *, snd_config_t *, int) = NULL;\n#ifndef PIC\n\textern void *snd_timer_query_open_symbols(void);\n#endif\n\tvoid *h = NULL;\n\tif (snd_config_get_type(timer_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tif (name)\n\t\t\tSNDERR(\"Invalid type for TIMER %s definition\", name);\n\t\telse\n\t\t\tSNDERR(\"Invalid type for TIMER definition\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_search(timer_conf, \"type\", &conf);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_id(conf, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(conf, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(timer_root, \"timer_query_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for TIMER type %s definition\", str);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_timer_query_%s_open\", str);\n\t}\n#ifndef PIC\n\tsnd_timer_query_open_symbols();\n#endif\n\th = snd_dlopen(lib, RTLD_NOW);\n\tif (h)\n\t\topen_func = snd_dlsym(h, open_name, SND_DLSYM_VERSION(SND_TIMER_QUERY_DLSYM_VERSION));\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (! err) {\n\t\terr = open_func(timer, name, timer_root, timer_conf, mode);\n\t\tif (err < 0)\n\t\t\tsnd_dlclose(h);\n\t\telse\n\t\t\t(*timer)->dl_handle = h;\n\t}\n\treturn err;\n}\n\nstatic int snd_timer_query_open_noupdate(snd_timer_query_t **timer, snd_config_t *root, const char *name, int mode)\n{\n\tint err;\n\tsnd_config_t *timer_conf;\n\terr = snd_config_search_definition(root, \"timer_query\", name, &timer_conf);\n\tif (err < 0) {\n\t\tSNDERR(\"Unknown timer %s\", name);\n\t\treturn err;\n\t}\n\terr = snd_timer_query_open_conf(timer, name, root, timer_conf, mode);\n\tsnd_config_delete(timer_conf);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the timer query interface.\n * \\param timer Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the RawMidi handle\n * \\param mode Open mode\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the RawMidi interface specified with\n * an ASCII identifier and mode.\n */\nint snd_timer_query_open(snd_timer_query_t **timer, const char *name, int mode)\n{\n\tsnd_config_t *top;\n\tint err;\n\n\tassert(timer && name);\n\terr = snd_config_update_ref(&top);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_timer_query_open_noupdate(timer, top, name, mode);\n\tsnd_config_unref(top);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the timer query interface using local configuration\n * \\param timer Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the RawMidi handle\n * \\param mode Open mode\n * \\param lconf Local configuration\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the RawMidi interface specified with\n * an ASCII identifier and mode.\n */\nint snd_timer_query_open_lconf(snd_timer_query_t **timer, const char *name,\n\t\t\t       int mode, snd_config_t *lconf)\n{\n\tassert(timer && name && lconf);\n\treturn snd_timer_query_open_noupdate(timer, lconf, name, mode);\n}\n\n/**\n * \\brief close timer query handle\n * \\param timer timer handle\n * \\return 0 on success otherwise a negative error code\n *\n * Closes the specified timer handle and frees all associated\n * resources.\n */\nint snd_timer_query_close(snd_timer_query_t *timer)\n{\n\tint err;\n  \tassert(timer);\n\terr = timer->ops->close(timer);\n\tif (timer->dl_handle)\n\t\tsnd_dlclose(timer->dl_handle);\n\tfree(timer->name);\n\tfree(timer);\n\treturn err;\n}\n\n/**\n * \\brief obtain the next timer identification\n * \\param timer timer handle\n * \\param tid timer identification\n * \\return 0 on success otherwise a negative error code\n *\n * if tid->dev_class is -1, then the first device is returned\n * if result tid->dev_class is -1, no more devices are left\n */\nint snd_timer_query_next_device(snd_timer_query_t *timer, snd_timer_id_t *tid)\n{\n  \tassert(timer);\n  \tassert(tid);\n\treturn timer->ops->next_device(timer, tid);\n}\n\n/**\n * \\brief get size of the snd_timer_ginfo_t structure in bytes\n * \\return size of the snd_timer_ginfo_t structure in bytes\n */\nsize_t snd_timer_ginfo_sizeof(void)\n{\n\treturn sizeof(snd_timer_ginfo_t);\n}\n\n/**\n * \\brief allocate a new snd_timer_ginfo_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_timer_info_t structure using the standard\n * malloc C library function.\n */\nint snd_timer_ginfo_malloc(snd_timer_ginfo_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_timer_ginfo_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_timer_ginfo_t structure\n * \\param info pointer to the snd_timer_ginfo_t structure to free\n *\n * Frees the given snd_timer_info_t structure using the standard\n * free C library function.\n */\nvoid snd_timer_ginfo_free(snd_timer_ginfo_t *info)\n{\n\tassert(info);\n\tfree(info);  \n}\n  \n/**\n * \\brief copy one snd_timer_info_t structure to another\n * \\param dst destination snd_timer_info_t structure\n * \\param src source snd_timer_info_t structure\n */\nvoid snd_timer_ginfo_copy(snd_timer_ginfo_t *dst, const snd_timer_ginfo_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief set timer identification\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return zero on success otherwise a negative error number\n */\nint snd_timer_ginfo_set_tid(snd_timer_ginfo_t *obj, snd_timer_id_t *tid)\n{\n\tobj->tid = *((snd_timer_id_t *)tid);\n\treturn 0;\n}\n\n/**\n * \\brief get timer identification\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return pointer to snd_timer_id_t\n */\nsnd_timer_id_t *snd_timer_ginfo_get_tid(snd_timer_ginfo_t *obj)\n{\n\treturn (snd_timer_id_t *)&obj->tid;\n}\n\n/**\n * \\brief get timer flags\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer flags\n */\nunsigned int snd_timer_ginfo_get_flags(snd_timer_ginfo_t *obj)\n{\n\treturn obj->flags;\n}\n\n/**\n * \\brief get associated card with timer\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return associated card\n */\nint snd_timer_ginfo_get_card(snd_timer_ginfo_t *obj)\n{\n\treturn obj->card;\n}\n\n/**\n * \\brief get timer identification\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer identification\n */\nchar *snd_timer_ginfo_get_id(snd_timer_ginfo_t *obj)\n{\n\treturn (char *)obj->id;\n}\n\n/**\n * \\brief get timer name\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer name\n */\nchar *snd_timer_ginfo_get_name(snd_timer_ginfo_t *obj)\n{\n\treturn (char *)obj->name;\n}\n\n/**\n * \\brief get timer resolution in ns\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer resolution in ns\n */\nunsigned long snd_timer_ginfo_get_resolution(snd_timer_ginfo_t *obj)\n{\n\treturn obj->resolution;\n}\n\n/**\n * \\brief get timer minimal resolution in ns\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer minimal resolution in ns\n */\nunsigned long snd_timer_ginfo_get_resolution_min(snd_timer_ginfo_t *obj)\n{\n\treturn obj->resolution_min;\n}\n\n/**\n * \\brief get timer maximal resolution in ns\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return timer maximal resolution in ns\n */\nunsigned long snd_timer_ginfo_get_resolution_max(snd_timer_ginfo_t *obj)\n{\n\treturn obj->resolution_max;\n}\n\n/**\n * \\brief get current timer clients\n * \\param obj pointer to #snd_timer_ginfo_t structure\n * \\return current timer clients\n */\nunsigned int snd_timer_ginfo_get_clients(snd_timer_ginfo_t *obj)\n{\n\treturn obj->clients;\n}\n\n/**\n * \\brief obtain the timer global information\n * \\param timer timer handle\n * \\param info timer information\n * \\return 0 on success otherwise a negative error code\n */\n#ifndef DOXYGEN\nint INTERNAL(snd_timer_query_info)(snd_timer_query_t *timer, snd_timer_ginfo_t *info)\n#else\nint snd_timer_query_info(snd_timer_query_t *timer, snd_timer_ginfo_t *info)\n#endif\n{\n  \tassert(timer);\n  \tassert(info);\n\treturn timer->ops->info(timer, info);\n}\nuse_default_symbol_version(__snd_timer_query_info, snd_timer_query_info, ALSA_0.9.0);\n\n/**\n * \\brief set the timer global parameters\n * \\param timer timer handle\n * \\param params timer parameters\n * \\return 0 on success otherwise a negative error code\n */\n#ifndef DOXYGEN\nint INTERNAL(snd_timer_query_params)(snd_timer_query_t *timer, snd_timer_gparams_t *params)\n#else\nint snd_timer_query_params(snd_timer_query_t *timer, snd_timer_gparams_t *params)\n#endif\n{\n  \tassert(timer);\n  \tassert(params);\n\treturn timer->ops->params(timer, params);\n}\nuse_default_symbol_version(__snd_timer_query_params, snd_timer_query_params, ALSA_0.9.0);\n\n/**\n * \\brief get the timer global status\n * \\param timer timer handle\n * \\param status timer status\n * \\return 0 on success otherwise a negative error code\n */\n#ifndef DOXYGEN\nint INTERNAL(snd_timer_query_status)(snd_timer_query_t *timer, snd_timer_gstatus_t *status)\n#else\nint snd_timer_query_status(snd_timer_query_t *timer, snd_timer_gstatus_t *status)\n#endif\n{\n  \tassert(timer);\n  \tassert(status);\n\treturn timer->ops->status(timer, status);\n}\nuse_default_symbol_version(__snd_timer_query_status, snd_timer_query_status, ALSA_0.9.0);\n\n/**\n * \\brief get size of the snd_timer_id_t structure in bytes\n * \\return size of the snd_timer_id_t structure in bytes\n */\nsize_t snd_timer_id_sizeof()\n{\n\treturn sizeof(snd_timer_id_t);\n}\n\n/**\n * \\brief allocate a new snd_timer_id_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_timer_id_t structure using the standard\n * malloc C library function.\n */\nint snd_timer_id_malloc(snd_timer_id_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_timer_id_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_timer_id_t structure\n * \\param info pointer to the snd_timer_id_t structure to free\n *\n * Frees the given snd_timer_id_t structure using the standard\n * free C library function.\n */\nvoid snd_timer_id_free(snd_timer_id_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_timer_id_t structure to another\n * \\param dst destination snd_timer_id_t structure\n * \\param src source snd_timer_id_t structure\n */\nvoid snd_timer_id_copy(snd_timer_id_t *dst, const snd_timer_id_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief set timer class\n * \\param tid pointer to #snd_timer_id_t structure\n * \\param dev_class class of timer device\n */\nvoid snd_timer_id_set_class(snd_timer_id_t * tid, int dev_class)\n{\n\tassert(tid);\n\ttid->dev_class = dev_class;\n}\n\n/**\n * \\brief get timer class\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return timer class\n */\nint snd_timer_id_get_class(snd_timer_id_t * tid)\n{\n\tassert(tid);\n\treturn tid->dev_class;\n}\n\n/**\n * \\brief set timer sub-class\n * \\param tid pointer to #snd_timer_id_t structure\n * \\param dev_sclass sub-class of timer device\n */\nvoid snd_timer_id_set_sclass(snd_timer_id_t * tid, int dev_sclass)\n{\n\tassert(tid);\n\ttid->dev_sclass = dev_sclass;\n}\n\n/**\n * \\brief get timer sub-class\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return timer sub-class\n */\nint snd_timer_id_get_sclass(snd_timer_id_t * tid)\n{\n\tassert(tid);\n\treturn tid->dev_sclass;\n}\n\n/**\n * \\brief set timer card\n * \\param tid pointer to #snd_timer_id_t structure\n * \\param card card number\n */\nvoid snd_timer_id_set_card(snd_timer_id_t * tid, int card)\n{\n\tassert(tid);\n\ttid->card = card;\n}\n\n/**\n * \\brief get timer card\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return timer card number\n */\nint snd_timer_id_get_card(snd_timer_id_t * tid)\n{\n\tassert(tid);\n\treturn tid->card;\n}\n\n/**\n * \\brief set timer device\n * \\param tid pointer to #snd_timer_id_t structure\n * \\param device device number\n */\nvoid snd_timer_id_set_device(snd_timer_id_t * tid, int device)\n{\n\tassert(tid);\n\ttid->device = device;\n}\n\n/**\n * \\brief get timer device\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return timer device number\n */\nint snd_timer_id_get_device(snd_timer_id_t * tid)\n{\n\tassert(tid);\n\treturn tid->device;\n}\n\n/**\n * \\brief set timer subdevice\n * \\param tid pointer to #snd_timer_id_t structure\n * \\param subdevice subdevice number\n */\nvoid snd_timer_id_set_subdevice(snd_timer_id_t * tid, int subdevice)\n{\n\tassert(tid);\n\ttid->subdevice = subdevice;\n}\n\n/**\n * \\brief get timer subdevice\n * \\param tid pointer to #snd_timer_id_t structure\n * \\return timer subdevice number\n */\nint snd_timer_id_get_subdevice(snd_timer_id_t * tid)\n{\n\tassert(tid);\n\treturn tid->subdevice;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/src/timer/timer.c": "/**\n * \\file timer/timer.c\n * \\brief Timer Interface\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\date 1998-2001\n *\n * Timer Interface is designed to access timers.\n * See \\ref timer page for more details.\n */\n/*\n *  Timer Interface - main file\n *  Copyright (c) 1998-2001 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n/*! \\page timer Timer interface\n\n<P> Timer interface is designed to use internal timers in sound hardware, but\nit can be driven with any timer.\n\n\\section timer_general_overview General overview\n\nThe timer implementation uses ring buffer to store information about timing\nevents. In this buffer is recorded count of ticks and current tick resolution\nin nanoseconds.\n\n\\section timer_open Opening\n\nTimer devices can be opened in two ways. When #SND_TIMER_OPEN_NONBLOCK flag\nis used, then the open functions return immediately with -EBUSY error code when\nresources are occupied with another application. When #SND_TIMER_OPEN_NONBLOCK\nis not used (by default) the open functions block the application requesting\ndevice until resources are not free.\n\n\\section timer_events Events\n\nEvents are read via snd_timer_read() function.\n\n\\section timer_examples Examples\n\nThe full featured examples with cross-links:\n\n\\par Simple timer test program\n\\ref example_test_timer \"example code\"\n\\par\nThis example shows opening a timer device and reading of timer events.\n\n*/\n\n/**\n * \\example ../test/timer.c\n * \\anchor example_test_timer\n */\n\n#include \"timer_local.h\"\n\n#include <signal.h>\n\nstatic int snd_timer_open_conf(snd_timer_t **timer,\n\t\t\t       const char *name, snd_config_t *timer_root,\n\t\t\t       snd_config_t *timer_conf, int mode)\n{\n\tconst char *str;\n\tchar buf[256];\n\tint err;\n\tsnd_config_t *conf, *type_conf = NULL;\n\tsnd_config_iterator_t i, next;\n\tconst char *id;\n\tconst char *lib = NULL, *open_name = NULL;\n\tint (*open_func)(snd_timer_t **, const char *, snd_config_t *, snd_config_t *, int) = NULL;\n#ifndef PIC\n\textern void *snd_timer_open_symbols(void);\n#endif\n\tvoid *h = NULL;\n\tif (snd_config_get_type(timer_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\tif (name)\n\t\t\tSNDERR(\"Invalid type for TIMER %s definition\", name);\n\t\telse\n\t\t\tSNDERR(\"Invalid type for TIMER definition\");\n\t\treturn -EINVAL;\n\t}\n\terr = snd_config_search(timer_conf, \"type\", &conf);\n\tif (err < 0) {\n\t\tSNDERR(\"type is not defined\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_id(conf, &id);\n\tif (err < 0) {\n\t\tSNDERR(\"unable to get id\");\n\t\treturn err;\n\t}\n\terr = snd_config_get_string(conf, &str);\n\tif (err < 0) {\n\t\tSNDERR(\"Invalid type for %s\", id);\n\t\treturn err;\n\t}\n\terr = snd_config_search_definition(timer_root, \"timer_type\", str, &type_conf);\n\tif (err >= 0) {\n\t\tif (snd_config_get_type(type_conf) != SND_CONFIG_TYPE_COMPOUND) {\n\t\t\tSNDERR(\"Invalid type for TIMER type %s definition\", str);\n\t\t\tgoto _err;\n\t\t}\n\t\tsnd_config_for_each(i, next, type_conf) {\n\t\t\tsnd_config_t *n = snd_config_iterator_entry(i);\n\t\t\tconst char *id;\n\t\t\tif (snd_config_get_id(n, &id) < 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"comment\") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (strcmp(id, \"lib\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &lib);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (strcmp(id, \"open\") == 0) {\n\t\t\t\terr = snd_config_get_string(n, &open_name);\n\t\t\t\tif (err < 0) {\n\t\t\t\t\tSNDERR(\"Invalid type for %s\", id);\n\t\t\t\t\tgoto _err;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSNDERR(\"Unknown field %s\", id);\n\t\t\terr = -EINVAL;\n\t\t\tgoto _err;\n\t\t}\n\t}\n\tif (!open_name) {\n\t\topen_name = buf;\n\t\tsnprintf(buf, sizeof(buf), \"_snd_timer_%s_open\", str);\n\t}\n#ifndef PIC\n\tsnd_timer_open_symbols();\n#endif\n\th = snd_dlopen(lib, RTLD_NOW);\n\tif (h)\n\t\topen_func = snd_dlsym(h, open_name, SND_DLSYM_VERSION(SND_TIMER_DLSYM_VERSION));\n\terr = 0;\n\tif (!h) {\n\t\tSNDERR(\"Cannot open shared library %s\", lib);\n\t\terr = -ENOENT;\n\t} else if (!open_func) {\n\t\tSNDERR(\"symbol %s is not defined inside %s\", open_name, lib);\n\t\tsnd_dlclose(h);\n\t\terr = -ENXIO;\n\t}\n       _err:\n\tif (type_conf)\n\t\tsnd_config_delete(type_conf);\n\tif (! err) {\n\t\terr = open_func(timer, name, timer_root, timer_conf, mode);\n\t\tif (err < 0)\n\t\t\tsnd_dlclose(h);\n\t\telse\n\t\t\t(*timer)->dl_handle = h;\n\t}\n\treturn err;\n}\n\nstatic int snd_timer_open_noupdate(snd_timer_t **timer, snd_config_t *root, const char *name, int mode)\n{\n\tint err;\n\tsnd_config_t *timer_conf;\n\terr = snd_config_search_definition(root, \"timer\", name, &timer_conf);\n\tif (err < 0) {\n\t\tSNDERR(\"Unknown timer %s\", name);\n\t\treturn err;\n\t}\n\terr = snd_timer_open_conf(timer, name, root, timer_conf, mode);\n\tsnd_config_delete(timer_conf);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the timer interface.\n * \\param timer Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the timer handle\n * \\param mode Open mode\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the timer interface specified with\n * an ASCII identifier and mode.\n */\nint snd_timer_open(snd_timer_t **timer, const char *name, int mode)\n{\n\tsnd_config_t *top;\n\tint err;\n\n\tassert(timer && name);\n\terr = snd_config_update_ref(&top);\n\tif (err < 0)\n\t\treturn err;\n\terr = snd_timer_open_noupdate(timer, top, name, mode);\n\tsnd_config_unref(top);\n\treturn err;\n}\n\n/**\n * \\brief Opens a new connection to the timer interface using local configuration\n * \\param timer Returned handle (NULL if not wanted)\n * \\param name ASCII identifier of the timer handle\n * \\param mode Open mode\n * \\param lconf Local configuration\n * \\return 0 on success otherwise a negative error code\n *\n * Opens a new connection to the timer interface specified with\n * an ASCII identifier and mode.\n */\nint snd_timer_open_lconf(snd_timer_t **timer, const char *name,\n\t\t\t int mode, snd_config_t *lconf)\n{\n\tassert(timer && name && lconf);\n\treturn snd_timer_open_noupdate(timer, lconf, name, mode);\n}\n\n/**\n * \\brief close timer handle\n * \\param timer timer handle\n * \\return 0 on success otherwise a negative error code\n *\n * Closes the specified timer handle and frees all associated\n * resources.\n */\nint snd_timer_close(snd_timer_t *timer)\n{\n\tint err;\n  \tassert(timer);\n\twhile (!list_empty(&timer->async_handlers)) {\n\t\tsnd_async_handler_t *h = list_entry(timer->async_handlers.next, snd_async_handler_t, hlist);\n\t\tsnd_async_del_handler(h);\n\t}\n\terr = timer->ops->close(timer);\n\tif (timer->dl_handle)\n\t\tsnd_dlclose(timer->dl_handle);\n\tfree(timer->name);\n\tfree(timer);\n\treturn err;\n}\n\n/**\n * \\brief get identifier of timer handle\n * \\param timer a timer handle\n * \\return ascii identifier of timer handle\n *\n * Returns the ASCII identifier of given timer handle. It's the same\n * identifier specified in snd_timer_open().\n */\nconst char *snd_timer_name(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn timer->name;\n}\n\n/**\n * \\brief get type of timer handle\n * \\param timer a timer handle\n * \\return type of timer handle\n *\n * Returns the type #snd_timer_type_t of given timer handle.\n */\nsnd_timer_type_t snd_timer_type(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn timer->type;\n}\n\n/**\n * \\brief Add an async handler for a timer\n * \\param handler Returned handler handle\n * \\param timer timer handle\n * \\param callback Callback function\n * \\param private_data Callback private data\n * \\return 0 otherwise a negative error code on failure\n *\n * The asynchronous callback is called when new timer event occurs.\n */\nint snd_async_add_timer_handler(snd_async_handler_t **handler, snd_timer_t *timer,\n\t\t\t\tsnd_async_callback_t callback, void *private_data)\n{\n\tint err;\n\tint was_empty;\n\tsnd_async_handler_t *h;\n\terr = snd_async_add_handler(&h, timer->poll_fd,\n\t\t\t\t    callback, private_data);\n\tif (err < 0)\n\t\treturn err;\n\th->type = SND_ASYNC_HANDLER_TIMER;\n\th->u.timer = timer;\n\twas_empty = list_empty(&timer->async_handlers);\n\tlist_add_tail(&h->hlist, &timer->async_handlers);\n\tif (was_empty) {\n\t\terr = snd_timer_async(timer, snd_async_handler_get_signo(h), getpid());\n\t\tif (err < 0) {\n\t\t\tsnd_async_del_handler(h);\n\t\t\treturn err;\n\t\t}\n\t}\n\t*handler = h;\n\treturn 0;\n}\n\n/**\n * \\brief Return timer handle related to an async handler\n * \\param handler Async handler handle\n * \\return timer handle\n */\nsnd_timer_t *snd_async_handler_get_timer(snd_async_handler_t *handler)\n{\n\tif (handler->type != SND_ASYNC_HANDLER_TIMER) {\n\t\tSNDMSG(\"invalid handler type %d\", handler->type);\n\t\treturn NULL;\n\t}\n\treturn handler->u.timer;\n}                                                            \n\n/**\n * \\brief get count of poll descriptors for timer handle\n * \\param timer timer handle\n * \\return count of poll descriptors\n */\nint snd_timer_poll_descriptors_count(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn 1;\n}\n\n/**\n * \\brief get poll descriptors\n * \\param timer timer handle\n * \\param pfds array of poll descriptors\n * \\param space space in the poll descriptor array\n * \\return count of filled descriptors\n */\nint snd_timer_poll_descriptors(snd_timer_t *timer, struct pollfd *pfds, unsigned int space)\n{\n\tassert(timer);\n\tif (space >= 1) {\n\t\tpfds->fd = timer->poll_fd;\n\t\tswitch (timer->mode & O_ACCMODE) {\n\t\tcase O_WRONLY:\n\t\t\tpfds->events = POLLOUT|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tcase O_RDONLY:\n\t\t\tpfds->events = POLLIN|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tcase O_RDWR:\n\t\t\tpfds->events = POLLOUT|POLLIN|POLLERR|POLLNVAL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn -EIO;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n * \\brief get returned events from poll descriptors\n * \\param timer timer handle\n * \\param pfds array of poll descriptors\n * \\param nfds count of poll descriptors\n * \\param revents returned events\n * \\return zero if success, otherwise a negative error code\n */\nint snd_timer_poll_descriptors_revents(snd_timer_t *timer, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)\n{\n        assert(timer && pfds && revents);\n        if (nfds == 1) {\n                *revents = pfds->revents;\n                return 0;\n        }\n        return -EINVAL;\n}\n\n/**\n * \\brief set nonblock mode\n * \\param timer timer handle\n * \\param nonblock 0 = block, 1 = nonblock mode\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_nonblock(snd_timer_t *timer, int nonblock)\n{\n\tint err;\n\tassert(timer);\n\tif ((err = timer->ops->nonblock(timer, nonblock)) < 0)\n\t\treturn err;\n\tif (nonblock)\n\t\ttimer->mode |= SND_TIMER_OPEN_NONBLOCK;\n\telse\n\t\ttimer->mode &= ~SND_TIMER_OPEN_NONBLOCK;\n\treturn 0;\n}\n\n#ifndef DOC_HIDDEN\n/**\n * \\brief set async mode\n * \\param timer timer handle\n * \\param sig Signal to raise: < 0 disable, 0 default (SIGIO)\n * \\param pid Process ID to signal: 0 current\n * \\return 0 on success otherwise a negative error code\n *\n * A signal is raised every period.\n */\nint snd_timer_async(snd_timer_t *timer, int sig, pid_t pid)\n{\n\tassert(timer);\n        if (sig == 0)\n                sig = SIGIO;\n\tif (pid == 0)\n\t\tpid = getpid();\n\treturn timer->ops->async(timer, sig, pid);\n}\n#endif\n\n/**\n * \\brief get size of the snd_timer_info_t structure in bytes\n * \\return size of the snd_timer_info_t structure in bytes\n */\nsize_t snd_timer_info_sizeof()\n{\n\treturn sizeof(snd_timer_info_t);\n}\n\n/**\n * \\brief allocate a new snd_timer_info_t structure\n * \\param info returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_timer_info_t structure using the standard\n * malloc C library function.\n */\nint snd_timer_info_malloc(snd_timer_info_t **info)\n{\n\tassert(info);\n\t*info = calloc(1, sizeof(snd_timer_info_t));\n\tif (!*info)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_timer_info_t structure\n * \\param info pointer to the snd_timer_info_t structure to free\n *\n * Frees the given snd_timer_info_t structure using the standard\n * free C library function.\n */\nvoid snd_timer_info_free(snd_timer_info_t *info)\n{\n\tassert(info);\n\tfree(info);\n}\n\n/**\n * \\brief copy one snd_timer_info_t structure to another\n * \\param dst destination snd_timer_info_t structure\n * \\param src source snd_timer_info_t structure\n */\nvoid snd_timer_info_copy(snd_timer_info_t *dst, const snd_timer_info_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief determine, if timer is slave\n * \\param info pointer to #snd_timer_info_t structure\n * \\return nonzero if timer is slave\n */\nint snd_timer_info_is_slave(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn info->flags & SNDRV_TIMER_FLG_SLAVE ? 1 : 0;\n}\n\n/**\n * \\brief get timer card\n * \\param info pointer to #snd_timer_info_t structure\n * \\return timer card number\n */\nint snd_timer_info_get_card(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn info->card;\n}\n\n/**\n * \\brief get timer id\n * \\param info pointer to #snd_timer_info_t structure\n * \\return timer id\n */\nconst char *snd_timer_info_get_id(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn (const char *)info->id;\n}\n\n/**\n * \\brief get timer name\n * \\param info pointer to #snd_timer_info_t structure\n * \\return timer name\n */\nconst char *snd_timer_info_get_name(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn (const char *)info->name;\n}\n\n\n/**\n * \\brief get timer resolution in us\n * \\param info pointer to #snd_timer_info_t structure\n * \\return timer resolution\n */\nlong snd_timer_info_get_resolution(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn info->resolution;\n}\n\n/**\n * \\brief get information about timer handle\n * \\param timer timer handle\n * \\param info pointer to a snd_timer_info_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_info(snd_timer_t *timer, snd_timer_info_t * info)\n{\n\tassert(timer);\n\tassert(info);\n\treturn timer->ops->info(timer, info);\n}\n\n/**\n * \\brief get size of the snd_timer_params_t structure in bytes\n * \\return size of the snd_timer_params_t structure in bytes\n */\nsize_t snd_timer_params_sizeof()\n{\n\treturn sizeof(snd_timer_params_t);\n}\n\n/**\n * \\brief allocate a new snd_timer_params_t structure\n * \\param params returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_timer_params_t structure using the standard\n * malloc C library function.\n */\nint snd_timer_params_malloc(snd_timer_params_t **params)\n{\n\tassert(params);\n\t*params = calloc(1, sizeof(snd_timer_params_t));\n\tif (!*params)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_timer_params_t structure\n * \\param params pointer to the snd_timer_params_t structure to free\n *\n * Frees the given snd_timer_params_t structure using the standard\n * free C library function.\n */\nvoid snd_timer_params_free(snd_timer_params_t *params)\n{\n\tassert(params);\n\tfree(params);\n}\n\n/**\n * \\brief copy one snd_timer_params_t structure to another\n * \\param dst destination snd_timer_params_t structure\n * \\param src source snd_timer_params_t structure\n */\nvoid snd_timer_params_copy(snd_timer_params_t *dst, const snd_timer_params_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n/**\n * \\brief set timer auto start\n * \\param params pointer to #snd_timer_params_t structure\n * \\param auto_start The boolean value to set\n */\nint snd_timer_params_set_auto_start(snd_timer_params_t * params, int auto_start)\n{\n\tassert(params);\n\tif (auto_start)\n\t\tparams->flags |= SNDRV_TIMER_PSFLG_AUTO;\n\telse\n\t\tparams->flags &= ~SNDRV_TIMER_PSFLG_AUTO;\n\treturn 0;\n}\n\n/**\n * \\brief determine if timer has auto start flag\n * \\param params pointer to #snd_timer_params_t structure\n * \\return nonzero if timer has auto start flag\n */\nint snd_timer_params_get_auto_start(snd_timer_params_t * params)\n{\n\tassert(params);\n\treturn params->flags & SNDRV_TIMER_PSFLG_AUTO ? 1 : 0;\n}\n\n/**\n * \\brief set timer exclusive use\n * \\param params pointer to #snd_timer_params_t structure\n * \\param exclusive The boolean value to set\n */\n#ifndef DOXYGEN\nint INTERNAL(snd_timer_params_set_exclusive)(snd_timer_params_t * params, int exclusive)\n#else\nint snd_timer_params_set_exclusive(snd_timer_params_t * params, int exclusive)\n#endif\n{\n\tassert(params);\n\tif (exclusive)\n\t\tparams->flags |= SNDRV_TIMER_PSFLG_EXCLUSIVE;\n\telse\n\t\tparams->flags &= ~SNDRV_TIMER_PSFLG_EXCLUSIVE;\n\treturn 0;\n}\nuse_default_symbol_version(__snd_timer_params_set_exclusive, snd_timer_params_set_exclusive, ALSA_0.9.0);\n\n/**\n * \\brief determine if timer has exclusive flag\n * \\param params pointer to #snd_timer_params_t structure\n * \\return nonzero if timer has exclusive flag\n */\n#ifndef DOXYGEN\nint INTERNAL(snd_timer_params_get_exclusive)(snd_timer_params_t * params)\n#else\nint snd_timer_params_get_exclusive(snd_timer_params_t * params)\n#endif\n{\n\tassert(params);\n\treturn params->flags & SNDRV_TIMER_PSFLG_EXCLUSIVE ? 1 : 0;\n}\nuse_default_symbol_version(__snd_timer_params_get_exclusive, snd_timer_params_get_exclusive, ALSA_0.9.0);\n\n/**\n * \\brief set timer early event\n * \\param params pointer to #snd_timer_params_t structure\n * \\param early_event The boolean value to set\n */\nint snd_timer_params_set_early_event(snd_timer_params_t * params, int early_event)\n{\n\tassert(params);\n\tif (early_event)\n\t\tparams->flags |= SNDRV_TIMER_PSFLG_EARLY_EVENT;\n\telse\n\t\tparams->flags &= ~SNDRV_TIMER_PSFLG_EARLY_EVENT;\n\treturn 0;\n}\n\n/**\n * \\brief determine if timer has early event flag\n * \\param params pointer to #snd_timer_params_t structure\n * \\return nonzero if timer has early event flag set\n */\nint snd_timer_params_get_early_event(snd_timer_params_t * params)\n{\n\tassert(params);\n\treturn params->flags & SNDRV_TIMER_PSFLG_EARLY_EVENT ? 1 : 0;\n}\n\n/**\n * \\brief set timer ticks\n * \\param params pointer to #snd_timer_params_t structure\n * \\param ticks Ticks to set\n */\nvoid snd_timer_params_set_ticks(snd_timer_params_t * params, long ticks)\n{\n\tassert(params);\n\tparams->ticks = ticks;\n}\n\n/**\n * \\brief get timer ticks\n * \\param params pointer to #snd_timer_params_t structure\n * \\return timer ticks\n */\nlong snd_timer_params_get_ticks(snd_timer_params_t * params)\n{\n\tassert(params);\n\treturn params->ticks;\n}\n\n/**\n * \\brief set timer queue size (32-1024)\n * \\param params pointer to #snd_timer_params_t structure\n * \\param queue_size The queue size to set\n */\nvoid snd_timer_params_set_queue_size(snd_timer_params_t * params, long queue_size)\n{\n\tassert(params);\n\tparams->queue_size = queue_size;\n}\n\n/**\n * \\brief get queue size\n * \\param params pointer to #snd_timer_params_t structure\n * \\return queue size\n */\nlong snd_timer_params_get_queue_size(snd_timer_params_t * params)\n{\n\tassert(params);\n\treturn params->queue_size;\n}\n\n/**\n * \\brief set timer event filter\n * \\param params pointer to #snd_timer_params_t structure\n * \\param filter The event filter bits to set\n */\n#ifndef DOXYGEN\nvoid INTERNAL(snd_timer_params_set_filter)(snd_timer_params_t * params, unsigned int filter)\n#else\nvoid snd_timer_params_set_filter(snd_timer_params_t * params, unsigned int filter)\n#endif\n{\n\tassert(params);\n\tparams->filter = filter;\n}\nuse_default_symbol_version(__snd_timer_params_set_filter, snd_timer_params_set_filter, ALSA_0.9.0);\n\n/**\n * \\brief get timer event filter\n * \\param params pointer to #snd_timer_params_t structure\n * \\return timer event filter\n */\n#ifndef DOXYGEN\nunsigned int INTERNAL(snd_timer_params_get_filter)(snd_timer_params_t * params)\n#else\nunsigned int snd_timer_params_get_filter(snd_timer_params_t * params)\n#endif\n{\n\tassert(params);\n\treturn params->filter;\n}\nuse_default_symbol_version(__snd_timer_params_get_filter, snd_timer_params_get_filter, ALSA_0.9.0);\n\n/**\n * \\brief set parameters for timer handle\n * \\param timer timer handle\n * \\param params pointer to a #snd_timer_params_t structure\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_params(snd_timer_t *timer, snd_timer_params_t * params)\n{\n\tassert(timer);\n\tassert(params);\n\treturn timer->ops->params(timer, params);\n}\n\n/**\n * \\brief get size of the snd_timer_status_t structure in bytes\n * \\return size of the snd_timer_status_t structure in bytes\n */\nsize_t snd_timer_status_sizeof()\n{\n\treturn sizeof(snd_timer_status_t);\n}\n\n/**\n * \\brief allocate a new snd_timer_status_t structure\n * \\param status returned pointer\n * \\return 0 on success otherwise a negative error code if fails\n *\n * Allocates a new snd_timer_status_t structure using the standard\n * malloc C library function.\n */\nint snd_timer_status_malloc(snd_timer_status_t **status)\n{\n\tassert(status);\n\t*status = calloc(1, sizeof(snd_timer_status_t));\n\tif (!*status)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n/**\n * \\brief frees the snd_timer_status_t structure\n * \\param status pointer to the snd_timer_status_t structure to free\n *\n * Frees the given snd_timer_status_t structure using the standard\n * free C library function.\n */\nvoid snd_timer_status_free(snd_timer_status_t *status)\n{\n\tassert(status);\n\tfree(status);\n}\n\n/**\n * \\brief copy one snd_timer_status_t structure to another\n * \\param dst destination snd_timer_status_t structure\n * \\param src source snd_timer_status_t structure\n */\nvoid snd_timer_status_copy(snd_timer_status_t *dst, const snd_timer_status_t *src)\n{\n\tassert(dst && src);\n\t*dst = *src;\n}\n\n\n\n/**\n * \\brief get timestamp\n * \\param status pointer to #snd_timer_status_t structure\n * \\return timestamp\n */\nsnd_htimestamp_t snd_timer_status_get_timestamp(snd_timer_status_t * status)\n{\n\tassert(status);\n\treturn status->tstamp;\n}\n\n/**\n * \\brief get resolution in us\n * \\param status pointer to #snd_timer_status_t structure\n * \\return resolution\n */\nlong snd_timer_status_get_resolution(snd_timer_status_t * status)\n{\n\tassert(status);\n\treturn status->resolution;\n}\n\n/**\n * \\brief get master tick lost count\n * \\param status pointer to #snd_timer_status_t structure\n * \\return master tick lost count\n */\nlong snd_timer_status_get_lost(snd_timer_status_t * status)\n{\n\tassert(status);\n\treturn status->lost;\n}\n\n/**\n * \\brief get overrun count\n * \\param status pointer to #snd_timer_status_t structure\n * \\return overrun count\n */\nlong snd_timer_status_get_overrun(snd_timer_status_t * status)\n{\n\tassert(status);\n\treturn status->overrun;\n}\n\n/**\n * \\brief get count of used queue elements\n * \\param status pointer to #snd_timer_status_t structure\n * \\return count of used queue elements\n */\nlong snd_timer_status_get_queue(snd_timer_status_t * status)\n{\n\tassert(status);\n\treturn status->queue;\n}\n\n/**\n * \\brief get status from timer handle\n * \\param timer timer handle\n * \\param status pointer to a #snd_timer_status_t structure to be filled\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_status(snd_timer_t *timer, snd_timer_status_t * status)\n{\n\tassert(timer);\n\tassert(status);\n\treturn timer->ops->status(timer, status);\n}\n\n/**\n * \\brief start the timer\n * \\param timer timer handle\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_start(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn timer->ops->rt_start(timer);\n}\n\n/**\n * \\brief stop the timer\n * \\param timer timer handle\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_stop(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn timer->ops->rt_stop(timer);\n}\n\n/**\n * \\brief continue the timer\n * \\param timer timer handle\n * \\return 0 on success otherwise a negative error code\n */\nint snd_timer_continue(snd_timer_t *timer)\n{\n\tassert(timer);\n\treturn timer->ops->rt_continue(timer);\n}\n\n/**\n * \\brief read bytes using timer handle\n * \\param timer timer handle\n * \\param buffer buffer to store the input bytes\n * \\param size input buffer size in bytes\n */\nssize_t snd_timer_read(snd_timer_t *timer, void *buffer, size_t size)\n{\n\tassert(timer);\n\tassert(((timer->mode & O_ACCMODE) == O_RDONLY) || ((timer->mode & O_ACCMODE) == O_RDWR));\n\tassert(buffer || size == 0);\n\treturn (timer->ops->read)(timer, buffer, size);\n}\n\n/**\n * \\brief (DEPRECATED) get maximum timer ticks\n * \\param info pointer to #snd_timer_info_t structure\n * \\return maximum timer ticks\n */\nlong snd_timer_info_get_ticks(snd_timer_info_t * info)\n{\n\tassert(info);\n\treturn 1;\n}\n#ifndef DOC_HIDDEN\nlink_warning(snd_timer_info_get_ticks, \"Warning: snd_timer_info_get_ticks is deprecated\");\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/hwdep.h": "/**\n * \\file include/hwdep.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_HWDEP_H\n#define __ALSA_HWDEP_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup HwDep Hardware Dependant Interface\n *  The Hardware Dependant Interface.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_HWDEP_DLSYM_VERSION\t\t_dlsym_hwdep_001\n\n/** HwDep information container */\ntypedef struct _snd_hwdep_info snd_hwdep_info_t;\n\n/** HwDep DSP status container */\ntypedef struct _snd_hwdep_dsp_status snd_hwdep_dsp_status_t;\n\n/** HwDep DSP image container */\ntypedef struct _snd_hwdep_dsp_image snd_hwdep_dsp_image_t;\n\n/** HwDep interface */\ntypedef enum _snd_hwdep_iface {\n\tSND_HWDEP_IFACE_OPL2 = 0,\t/**< OPL2 raw driver */\n\tSND_HWDEP_IFACE_OPL3,\t\t/**< OPL3 raw driver */\n\tSND_HWDEP_IFACE_OPL4,\t\t/**< OPL4 raw driver */\n\tSND_HWDEP_IFACE_SB16CSP,\t/**< SB16CSP driver */\n\tSND_HWDEP_IFACE_EMU10K1,\t/**< EMU10K1 driver */\n\tSND_HWDEP_IFACE_YSS225,\t\t/**< YSS225 driver */\n\tSND_HWDEP_IFACE_ICS2115,\t/**< ICS2115 driver */\n\tSND_HWDEP_IFACE_SSCAPE,\t\t/**< Ensoniq SoundScape ISA card (MC68EC000) */\n\tSND_HWDEP_IFACE_VX,\t\t/**< Digigram VX cards */\n\tSND_HWDEP_IFACE_MIXART,\t\t/**< Digigram miXart cards */\n\tSND_HWDEP_IFACE_USX2Y,\t\t/**< Tascam US122, US224 & US428 usb */\n\tSND_HWDEP_IFACE_EMUX_WAVETABLE,\t/**< EmuX wavetable */\n\tSND_HWDEP_IFACE_BLUETOOTH,\t/**< Bluetooth audio */\n\tSND_HWDEP_IFACE_USX2Y_PCM,\t/**< Tascam US122, US224 & US428 raw USB PCM */\n\tSND_HWDEP_IFACE_PCXHR,\t\t/**< Digigram PCXHR */\n\tSND_HWDEP_IFACE_SB_RC,\t\t/**< SB Extigy/Audigy2NX remote control */\n\tSND_HWDEP_IFACE_HDA,\t\t/**< HD-audio */\n\tSND_HWDEP_IFACE_USB_STREAM,\t/**< direct access to usb stream */\n\tSND_HWDEP_IFACE_FW_DICE,\t/**< TC DICE FireWire device */\n\tSND_HWDEP_IFACE_FW_FIREWORKS,\t/**< Echo Audio Fireworks based device */\n\tSND_HWDEP_IFACE_FW_BEBOB,\t/**< BridgeCo BeBoB based device */\n\tSND_HWDEP_IFACE_FW_OXFW,\t/**< Oxford OXFW970/971 based device */\n\tSND_HWDEP_IFACE_FW_DIGI00X,\t/* Digidesign Digi 002/003 family */\n\tSND_HWDEP_IFACE_FW_TASCAM,\t/* TASCAM FireWire series */\n\tSND_HWDEP_IFACE_LINE6,\t\t/* Line6 USB processors */\n\tSND_HWDEP_IFACE_FW_MOTU,\t/* MOTU FireWire series */\n\tSND_HWDEP_IFACE_FW_FIREFACE,\t/* RME Fireface series */\n\n\tSND_HWDEP_IFACE_LAST = SND_HWDEP_IFACE_FW_FIREFACE,\t/**< last known hwdep interface */\n} snd_hwdep_iface_t;\n\n/** open for reading */\n#define SND_HWDEP_OPEN_READ\t\t(O_RDONLY)\n/** open for writing */\n#define SND_HWDEP_OPEN_WRITE\t\t(O_WRONLY)\n/** open for reading and writing */\n#define SND_HWDEP_OPEN_DUPLEX\t\t(O_RDWR)\n/** open mode flag: open in nonblock mode */\n#define SND_HWDEP_OPEN_NONBLOCK\t\t(O_NONBLOCK)\n\n/** HwDep handle type */\ntypedef enum _snd_hwdep_type {\n\t/** Kernel level HwDep */\n\tSND_HWDEP_TYPE_HW,\n\t/** Shared memory client HwDep (not yet implemented) */\n\tSND_HWDEP_TYPE_SHM,\n\t/** INET client HwDep (not yet implemented) */\n\tSND_HWDEP_TYPE_INET\n} snd_hwdep_type_t;\n\n/** HwDep handle */\ntypedef struct _snd_hwdep snd_hwdep_t;\n\nint snd_hwdep_open(snd_hwdep_t **hwdep, const char *name, int mode);\nint snd_hwdep_close(snd_hwdep_t *hwdep);\nint snd_hwdep_poll_descriptors(snd_hwdep_t *hwdep, struct pollfd *pfds, unsigned int space);\nint snd_hwdep_poll_descriptors_count(snd_hwdep_t *hwdep);\nint snd_hwdep_poll_descriptors_revents(snd_hwdep_t *hwdep, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nint snd_hwdep_nonblock(snd_hwdep_t *hwdep, int nonblock);\nint snd_hwdep_info(snd_hwdep_t *hwdep, snd_hwdep_info_t * info);\nint snd_hwdep_dsp_status(snd_hwdep_t *hwdep, snd_hwdep_dsp_status_t *status);\nint snd_hwdep_dsp_load(snd_hwdep_t *hwdep, snd_hwdep_dsp_image_t *block);\nint snd_hwdep_ioctl(snd_hwdep_t *hwdep, unsigned int request, void * arg);\nssize_t snd_hwdep_write(snd_hwdep_t *hwdep, const void *buffer, size_t size);\nssize_t snd_hwdep_read(snd_hwdep_t *hwdep, void *buffer, size_t size);\n\nsize_t snd_hwdep_info_sizeof(void);\n/** allocate #snd_hwdep_info_t container on stack */\n#define snd_hwdep_info_alloca(ptr) __snd_alloca(ptr, snd_hwdep_info)\nint snd_hwdep_info_malloc(snd_hwdep_info_t **ptr);\nvoid snd_hwdep_info_free(snd_hwdep_info_t *obj);\nvoid snd_hwdep_info_copy(snd_hwdep_info_t *dst, const snd_hwdep_info_t *src);\n\nunsigned int snd_hwdep_info_get_device(const snd_hwdep_info_t *obj);\nint snd_hwdep_info_get_card(const snd_hwdep_info_t *obj);\nconst char *snd_hwdep_info_get_id(const snd_hwdep_info_t *obj);\nconst char *snd_hwdep_info_get_name(const snd_hwdep_info_t *obj);\nsnd_hwdep_iface_t snd_hwdep_info_get_iface(const snd_hwdep_info_t *obj);\nvoid snd_hwdep_info_set_device(snd_hwdep_info_t *obj, unsigned int val);\n\nsize_t snd_hwdep_dsp_status_sizeof(void);\n/** allocate #snd_hwdep_dsp_status_t container on stack */\n#define snd_hwdep_dsp_status_alloca(ptr) __snd_alloca(ptr, snd_hwdep_dsp_status)\nint snd_hwdep_dsp_status_malloc(snd_hwdep_dsp_status_t **ptr);\nvoid snd_hwdep_dsp_status_free(snd_hwdep_dsp_status_t *obj);\nvoid snd_hwdep_dsp_status_copy(snd_hwdep_dsp_status_t *dst, const snd_hwdep_dsp_status_t *src);\n\nunsigned int snd_hwdep_dsp_status_get_version(const snd_hwdep_dsp_status_t *obj);\nconst char *snd_hwdep_dsp_status_get_id(const snd_hwdep_dsp_status_t *obj);\nunsigned int snd_hwdep_dsp_status_get_num_dsps(const snd_hwdep_dsp_status_t *obj);\nunsigned int snd_hwdep_dsp_status_get_dsp_loaded(const snd_hwdep_dsp_status_t *obj);\nunsigned int snd_hwdep_dsp_status_get_chip_ready(const snd_hwdep_dsp_status_t *obj);\n\nsize_t snd_hwdep_dsp_image_sizeof(void);\n/** allocate #snd_hwdep_dsp_image_t container on stack */\n#define snd_hwdep_dsp_image_alloca(ptr) __snd_alloca(ptr, snd_hwdep_dsp_image)\nint snd_hwdep_dsp_image_malloc(snd_hwdep_dsp_image_t **ptr);\nvoid snd_hwdep_dsp_image_free(snd_hwdep_dsp_image_t *obj);\nvoid snd_hwdep_dsp_image_copy(snd_hwdep_dsp_image_t *dst, const snd_hwdep_dsp_image_t *src);\n\nunsigned int snd_hwdep_dsp_image_get_index(const snd_hwdep_dsp_image_t *obj);\nconst char *snd_hwdep_dsp_image_get_name(const snd_hwdep_dsp_image_t *obj);\nconst void *snd_hwdep_dsp_image_get_image(const snd_hwdep_dsp_image_t *obj);\nsize_t snd_hwdep_dsp_image_get_length(const snd_hwdep_dsp_image_t *obj);\n\nvoid snd_hwdep_dsp_image_set_index(snd_hwdep_dsp_image_t *obj, unsigned int _index);\nvoid snd_hwdep_dsp_image_set_name(snd_hwdep_dsp_image_t *obj, const char *name);\nvoid snd_hwdep_dsp_image_set_image(snd_hwdep_dsp_image_t *obj, void *buffer);\nvoid snd_hwdep_dsp_image_set_length(snd_hwdep_dsp_image_t *obj, size_t length);\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_HWDEP_H */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/control.h": "/**\n * \\file include/control.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_CONTROL_H\n#define __ALSA_CONTROL_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup Control Control Interface\n *  The control interface.\n *  See \\ref control page for more details.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_CONTROL_DLSYM_VERSION\t_dlsym_control_001\n\n/** IEC958 structure */\ntypedef struct snd_aes_iec958 {\n\tunsigned char status[24];\t/**< AES/IEC958 channel status bits */\n\tunsigned char subcode[147];\t/**< AES/IEC958 subcode bits */\n\tunsigned char pad;\t\t/**< nothing */\n\tunsigned char dig_subframe[4];\t/**< AES/IEC958 subframe bits */\n} snd_aes_iec958_t;\n\n/** CTL card info container */\ntypedef struct _snd_ctl_card_info snd_ctl_card_info_t;\n\n/** CTL element identifier container */\ntypedef struct _snd_ctl_elem_id snd_ctl_elem_id_t;\n\n/** CTL element identifier list container */\ntypedef struct _snd_ctl_elem_list snd_ctl_elem_list_t;\n\n/** CTL element info container */\ntypedef struct _snd_ctl_elem_info snd_ctl_elem_info_t;\n\n/** CTL element value container */\ntypedef struct _snd_ctl_elem_value snd_ctl_elem_value_t;\n\n/** CTL event container */\ntypedef struct _snd_ctl_event snd_ctl_event_t;\n\n/** CTL element type */\ntypedef enum _snd_ctl_elem_type {\n\t/** Invalid type */\n\tSND_CTL_ELEM_TYPE_NONE = 0,\n\t/** Boolean contents */\n\tSND_CTL_ELEM_TYPE_BOOLEAN,\n\t/** Integer contents */\n\tSND_CTL_ELEM_TYPE_INTEGER,\n\t/** Enumerated contents */\n\tSND_CTL_ELEM_TYPE_ENUMERATED,\n\t/** Bytes contents */\n\tSND_CTL_ELEM_TYPE_BYTES,\n\t/** IEC958 (S/PDIF) setting content */\n\tSND_CTL_ELEM_TYPE_IEC958,\n\t/** 64-bit integer contents */\n\tSND_CTL_ELEM_TYPE_INTEGER64,\n\tSND_CTL_ELEM_TYPE_LAST = SND_CTL_ELEM_TYPE_INTEGER64\n} snd_ctl_elem_type_t;\n\n/** CTL related interface */\ntypedef enum _snd_ctl_elem_iface {\n\t/** Card level */\n\tSND_CTL_ELEM_IFACE_CARD = 0,\n\t/** Hardware dependent device */\n\tSND_CTL_ELEM_IFACE_HWDEP,\n\t/** Mixer */\n\tSND_CTL_ELEM_IFACE_MIXER,\n\t/** PCM */\n\tSND_CTL_ELEM_IFACE_PCM,\n\t/** RawMidi */\n\tSND_CTL_ELEM_IFACE_RAWMIDI,\n\t/** Timer */\n\tSND_CTL_ELEM_IFACE_TIMER,\n\t/** Sequencer */\n\tSND_CTL_ELEM_IFACE_SEQUENCER,\n\tSND_CTL_ELEM_IFACE_LAST = SND_CTL_ELEM_IFACE_SEQUENCER\n} snd_ctl_elem_iface_t;\n\n/** Event class */\ntypedef enum _snd_ctl_event_type {\n\t/** Elements related event */\n\tSND_CTL_EVENT_ELEM = 0,\n\tSND_CTL_EVENT_LAST = SND_CTL_EVENT_ELEM\n}snd_ctl_event_type_t;\n\n/** Element has been removed (Warning: test this first and if set don't\n  * test the other masks) \\hideinitializer */\n#define SND_CTL_EVENT_MASK_REMOVE \t(~0U)\n/** Element value has been changed \\hideinitializer */\n#define SND_CTL_EVENT_MASK_VALUE\t(1<<0)\n/** Element info has been changed \\hideinitializer */\n#define SND_CTL_EVENT_MASK_INFO\t\t(1<<1)\n/** Element has been added \\hideinitializer */\n#define SND_CTL_EVENT_MASK_ADD\t\t(1<<2)\n/** Element's TLV value has been changed \\hideinitializer */\n#define SND_CTL_EVENT_MASK_TLV\t\t(1<<3)\n\n/** CTL name helper */\n#define SND_CTL_NAME_NONE\t\t\t\t\"\"\n/** CTL name helper */\n#define SND_CTL_NAME_PLAYBACK\t\t\t\t\"Playback \"\n/** CTL name helper */\n#define SND_CTL_NAME_CAPTURE\t\t\t\t\"Capture \"\n\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_NONE\t\t\t\"\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_SWITCH\t\t\t\"Switch\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_VOLUME\t\t\t\"Volume\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_DEFAULT\t\t\t\"Default\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_MASK\t\t\t\"Mask\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_CON_MASK\t\t\t\"Con Mask\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_PRO_MASK\t\t\t\"Pro Mask\"\n/** CTL name helper */\n#define SND_CTL_NAME_IEC958_PCM_STREAM\t\t\t\"PCM Stream\"\n/** Element name for IEC958 (S/PDIF) */\n#define SND_CTL_NAME_IEC958(expl,direction,what)\t\"IEC958 \" expl SND_CTL_NAME_##direction SND_CTL_NAME_IEC958_##what\n\n/** Mask for the major Power State identifier */\n#define SND_CTL_POWER_MASK\t\t0xff00\n/** ACPI/PCI Power State D0 */\n#define SND_CTL_POWER_D0          \t0x0000\n/** ACPI/PCI Power State D1 */\n#define SND_CTL_POWER_D1     \t     \t0x0100\n/** ACPI/PCI Power State D2 */\n#define SND_CTL_POWER_D2 \t        0x0200\n/** ACPI/PCI Power State D3 */\n#define SND_CTL_POWER_D3         \t0x0300\n/** ACPI/PCI Power State D3hot */\n#define SND_CTL_POWER_D3hot\t\t(SND_CTL_POWER_D3|0x0000)\n/** ACPI/PCI Power State D3cold */\n#define SND_CTL_POWER_D3cold\t      \t(SND_CTL_POWER_D3|0x0001)\n\n/** TLV type - Container */\n#define SND_CTL_TLVT_CONTAINER\t\t0x0000\n/** TLV type - basic dB scale */\n#define SND_CTL_TLVT_DB_SCALE\t\t0x0001\n/** TLV type - linear volume */\n#define SND_CTL_TLVT_DB_LINEAR\t\t0x0002\n/** TLV type - dB range container */\n#define SND_CTL_TLVT_DB_RANGE\t\t0x0003\n/** TLV type - dB scale specified by min/max values */\n#define SND_CTL_TLVT_DB_MINMAX\t\t0x0004\n/** TLV type - dB scale specified by min/max values (with mute) */\n#define SND_CTL_TLVT_DB_MINMAX_MUTE\t0x0005\n\n/** Mute state */\n#define SND_CTL_TLV_DB_GAIN_MUTE\t-9999999\n\n/** TLV type - fixed channel map positions */\n#define SND_CTL_TLVT_CHMAP_FIXED\t0x00101\n/** TLV type - freely swappable channel map positions */\n#define SND_CTL_TLVT_CHMAP_VAR\t\t0x00102\n/** TLV type - pair-wise swappable channel map positions */\n#define SND_CTL_TLVT_CHMAP_PAIRED\t0x00103\n\n/** CTL type */\ntypedef enum _snd_ctl_type {\n\t/** Kernel level CTL */\n\tSND_CTL_TYPE_HW,\n\t/** Shared memory client CTL */\n\tSND_CTL_TYPE_SHM,\n\t/** INET client CTL (not yet implemented) */\n\tSND_CTL_TYPE_INET,\n\t/** External control plugin */\n\tSND_CTL_TYPE_EXT\n} snd_ctl_type_t;\n\n/** Non blocking mode (flag for open mode) \\hideinitializer */\n#define SND_CTL_NONBLOCK\t\t0x0001\n\n/** Async notification (flag for open mode) \\hideinitializer */\n#define SND_CTL_ASYNC\t\t\t0x0002\n\n/** Read only (flag for open mode) \\hideinitializer */\n#define SND_CTL_READONLY\t\t0x0004\n\n/** CTL handle */\ntypedef struct _snd_ctl snd_ctl_t;\n\n/** Don't destroy the ctl handle when close */\n#define SND_SCTL_NOFREE\t\t\t0x0001\n\n/** SCTL type */\ntypedef struct _snd_sctl snd_sctl_t;\n\nint snd_card_load(int card);\nint snd_card_next(int *card);\nint snd_card_get_index(const char *name);\nint snd_card_get_name(int card, char **name);\nint snd_card_get_longname(int card, char **name);\n\nint snd_device_name_hint(int card, const char *iface, void ***hints);\nint snd_device_name_free_hint(void **hints);\nchar *snd_device_name_get_hint(const void *hint, const char *id);\n\nint snd_ctl_open(snd_ctl_t **ctl, const char *name, int mode);\nint snd_ctl_open_lconf(snd_ctl_t **ctl, const char *name, int mode, snd_config_t *lconf);\nint snd_ctl_open_fallback(snd_ctl_t **ctl, snd_config_t *root, const char *name, const char *orig_name, int mode);\nint snd_ctl_close(snd_ctl_t *ctl);\nint snd_ctl_nonblock(snd_ctl_t *ctl, int nonblock);\nstatic __inline__ int snd_ctl_abort(snd_ctl_t *ctl) { return snd_ctl_nonblock(ctl, 2); }\nint snd_async_add_ctl_handler(snd_async_handler_t **handler, snd_ctl_t *ctl, \n\t\t\t      snd_async_callback_t callback, void *private_data);\nsnd_ctl_t *snd_async_handler_get_ctl(snd_async_handler_t *handler);\nint snd_ctl_poll_descriptors_count(snd_ctl_t *ctl);\nint snd_ctl_poll_descriptors(snd_ctl_t *ctl, struct pollfd *pfds, unsigned int space);\nint snd_ctl_poll_descriptors_revents(snd_ctl_t *ctl, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nint snd_ctl_subscribe_events(snd_ctl_t *ctl, int subscribe);\nint snd_ctl_card_info(snd_ctl_t *ctl, snd_ctl_card_info_t *info);\nint snd_ctl_elem_list(snd_ctl_t *ctl, snd_ctl_elem_list_t *list);\nint snd_ctl_elem_info(snd_ctl_t *ctl, snd_ctl_elem_info_t *info);\nint snd_ctl_elem_read(snd_ctl_t *ctl, snd_ctl_elem_value_t *data);\nint snd_ctl_elem_write(snd_ctl_t *ctl, snd_ctl_elem_value_t *data);\nint snd_ctl_elem_lock(snd_ctl_t *ctl, snd_ctl_elem_id_t *id);\nint snd_ctl_elem_unlock(snd_ctl_t *ctl, snd_ctl_elem_id_t *id);\nint snd_ctl_elem_tlv_read(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t  unsigned int *tlv, unsigned int tlv_size);\nint snd_ctl_elem_tlv_write(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t   const unsigned int *tlv);\nint snd_ctl_elem_tlv_command(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t     const unsigned int *tlv);\n#ifdef __ALSA_HWDEP_H\nint snd_ctl_hwdep_next_device(snd_ctl_t *ctl, int * device);\nint snd_ctl_hwdep_info(snd_ctl_t *ctl, snd_hwdep_info_t * info);\n#endif\n#ifdef __ALSA_PCM_H\nint snd_ctl_pcm_next_device(snd_ctl_t *ctl, int *device);\nint snd_ctl_pcm_info(snd_ctl_t *ctl, snd_pcm_info_t * info);\nint snd_ctl_pcm_prefer_subdevice(snd_ctl_t *ctl, int subdev);\n#endif\n#ifdef __ALSA_RAWMIDI_H\nint snd_ctl_rawmidi_next_device(snd_ctl_t *ctl, int * device);\nint snd_ctl_rawmidi_info(snd_ctl_t *ctl, snd_rawmidi_info_t * info);\nint snd_ctl_rawmidi_prefer_subdevice(snd_ctl_t *ctl, int subdev);\n#endif\nint snd_ctl_set_power_state(snd_ctl_t *ctl, unsigned int state);\nint snd_ctl_get_power_state(snd_ctl_t *ctl, unsigned int *state);\n\nint snd_ctl_read(snd_ctl_t *ctl, snd_ctl_event_t *event);\nint snd_ctl_wait(snd_ctl_t *ctl, int timeout);\nconst char *snd_ctl_name(snd_ctl_t *ctl);\nsnd_ctl_type_t snd_ctl_type(snd_ctl_t *ctl);\n\nconst char *snd_ctl_elem_type_name(snd_ctl_elem_type_t type);\nconst char *snd_ctl_elem_iface_name(snd_ctl_elem_iface_t iface);\nconst char *snd_ctl_event_type_name(snd_ctl_event_type_t type);\n\nunsigned int snd_ctl_event_elem_get_mask(const snd_ctl_event_t *obj);\nunsigned int snd_ctl_event_elem_get_numid(const snd_ctl_event_t *obj);\nvoid snd_ctl_event_elem_get_id(const snd_ctl_event_t *obj, snd_ctl_elem_id_t *ptr);\nsnd_ctl_elem_iface_t snd_ctl_event_elem_get_interface(const snd_ctl_event_t *obj);\nunsigned int snd_ctl_event_elem_get_device(const snd_ctl_event_t *obj);\nunsigned int snd_ctl_event_elem_get_subdevice(const snd_ctl_event_t *obj);\nconst char *snd_ctl_event_elem_get_name(const snd_ctl_event_t *obj);\nunsigned int snd_ctl_event_elem_get_index(const snd_ctl_event_t *obj);\n\nint snd_ctl_elem_list_alloc_space(snd_ctl_elem_list_t *obj, unsigned int entries);\nvoid snd_ctl_elem_list_free_space(snd_ctl_elem_list_t *obj);\n\nchar *snd_ctl_ascii_elem_id_get(snd_ctl_elem_id_t *id);\nint snd_ctl_ascii_elem_id_parse(snd_ctl_elem_id_t *dst, const char *str);\nint snd_ctl_ascii_value_parse(snd_ctl_t *handle,\n\t\t\t      snd_ctl_elem_value_t *dst,\n\t\t\t      snd_ctl_elem_info_t *info,\n\t\t\t      const char *value);\n\nsize_t snd_ctl_elem_id_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_elem_id_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_elem_id_alloca(ptr) __snd_alloca(ptr, snd_ctl_elem_id)\nint snd_ctl_elem_id_malloc(snd_ctl_elem_id_t **ptr);\nvoid snd_ctl_elem_id_free(snd_ctl_elem_id_t *obj);\nvoid snd_ctl_elem_id_clear(snd_ctl_elem_id_t *obj);\nvoid snd_ctl_elem_id_copy(snd_ctl_elem_id_t *dst, const snd_ctl_elem_id_t *src);\nunsigned int snd_ctl_elem_id_get_numid(const snd_ctl_elem_id_t *obj);\nsnd_ctl_elem_iface_t snd_ctl_elem_id_get_interface(const snd_ctl_elem_id_t *obj);\nunsigned int snd_ctl_elem_id_get_device(const snd_ctl_elem_id_t *obj);\nunsigned int snd_ctl_elem_id_get_subdevice(const snd_ctl_elem_id_t *obj);\nconst char *snd_ctl_elem_id_get_name(const snd_ctl_elem_id_t *obj);\nunsigned int snd_ctl_elem_id_get_index(const snd_ctl_elem_id_t *obj);\nvoid snd_ctl_elem_id_set_numid(snd_ctl_elem_id_t *obj, unsigned int val);\nvoid snd_ctl_elem_id_set_interface(snd_ctl_elem_id_t *obj, snd_ctl_elem_iface_t val);\nvoid snd_ctl_elem_id_set_device(snd_ctl_elem_id_t *obj, unsigned int val);\nvoid snd_ctl_elem_id_set_subdevice(snd_ctl_elem_id_t *obj, unsigned int val);\nvoid snd_ctl_elem_id_set_name(snd_ctl_elem_id_t *obj, const char *val);\nvoid snd_ctl_elem_id_set_index(snd_ctl_elem_id_t *obj, unsigned int val);\n\nsize_t snd_ctl_card_info_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_card_info_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_card_info_alloca(ptr) __snd_alloca(ptr, snd_ctl_card_info)\nint snd_ctl_card_info_malloc(snd_ctl_card_info_t **ptr);\nvoid snd_ctl_card_info_free(snd_ctl_card_info_t *obj);\nvoid snd_ctl_card_info_clear(snd_ctl_card_info_t *obj);\nvoid snd_ctl_card_info_copy(snd_ctl_card_info_t *dst, const snd_ctl_card_info_t *src);\nint snd_ctl_card_info_get_card(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_id(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_driver(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_name(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_longname(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_mixername(const snd_ctl_card_info_t *obj);\nconst char *snd_ctl_card_info_get_components(const snd_ctl_card_info_t *obj);\n\nsize_t snd_ctl_event_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_event_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_event_alloca(ptr) __snd_alloca(ptr, snd_ctl_event)\nint snd_ctl_event_malloc(snd_ctl_event_t **ptr);\nvoid snd_ctl_event_free(snd_ctl_event_t *obj);\nvoid snd_ctl_event_clear(snd_ctl_event_t *obj);\nvoid snd_ctl_event_copy(snd_ctl_event_t *dst, const snd_ctl_event_t *src);\nsnd_ctl_event_type_t snd_ctl_event_get_type(const snd_ctl_event_t *obj);\n\nsize_t snd_ctl_elem_list_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_elem_list_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_elem_list_alloca(ptr) __snd_alloca(ptr, snd_ctl_elem_list)\nint snd_ctl_elem_list_malloc(snd_ctl_elem_list_t **ptr);\nvoid snd_ctl_elem_list_free(snd_ctl_elem_list_t *obj);\nvoid snd_ctl_elem_list_clear(snd_ctl_elem_list_t *obj);\nvoid snd_ctl_elem_list_copy(snd_ctl_elem_list_t *dst, const snd_ctl_elem_list_t *src);\nvoid snd_ctl_elem_list_set_offset(snd_ctl_elem_list_t *obj, unsigned int val);\nunsigned int snd_ctl_elem_list_get_used(const snd_ctl_elem_list_t *obj);\nunsigned int snd_ctl_elem_list_get_count(const snd_ctl_elem_list_t *obj);\nvoid snd_ctl_elem_list_get_id(const snd_ctl_elem_list_t *obj, unsigned int idx, snd_ctl_elem_id_t *ptr);\nunsigned int snd_ctl_elem_list_get_numid(const snd_ctl_elem_list_t *obj, unsigned int idx);\nsnd_ctl_elem_iface_t snd_ctl_elem_list_get_interface(const snd_ctl_elem_list_t *obj, unsigned int idx);\nunsigned int snd_ctl_elem_list_get_device(const snd_ctl_elem_list_t *obj, unsigned int idx);\nunsigned int snd_ctl_elem_list_get_subdevice(const snd_ctl_elem_list_t *obj, unsigned int idx);\nconst char *snd_ctl_elem_list_get_name(const snd_ctl_elem_list_t *obj, unsigned int idx);\nunsigned int snd_ctl_elem_list_get_index(const snd_ctl_elem_list_t *obj, unsigned int idx);\n\nsize_t snd_ctl_elem_info_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_elem_info_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_elem_info_alloca(ptr) __snd_alloca(ptr, snd_ctl_elem_info)\nint snd_ctl_elem_info_malloc(snd_ctl_elem_info_t **ptr);\nvoid snd_ctl_elem_info_free(snd_ctl_elem_info_t *obj);\nvoid snd_ctl_elem_info_clear(snd_ctl_elem_info_t *obj);\nvoid snd_ctl_elem_info_copy(snd_ctl_elem_info_t *dst, const snd_ctl_elem_info_t *src);\nsnd_ctl_elem_type_t snd_ctl_elem_info_get_type(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_readable(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_writable(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_volatile(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_inactive(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_locked(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_tlv_readable(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_tlv_writable(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_tlv_commandable(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_owner(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_is_user(const snd_ctl_elem_info_t *obj);\npid_t snd_ctl_elem_info_get_owner(const snd_ctl_elem_info_t *obj);\nunsigned int snd_ctl_elem_info_get_count(const snd_ctl_elem_info_t *obj);\nlong snd_ctl_elem_info_get_min(const snd_ctl_elem_info_t *obj);\nlong snd_ctl_elem_info_get_max(const snd_ctl_elem_info_t *obj);\nlong snd_ctl_elem_info_get_step(const snd_ctl_elem_info_t *obj);\nlong long snd_ctl_elem_info_get_min64(const snd_ctl_elem_info_t *obj);\nlong long snd_ctl_elem_info_get_max64(const snd_ctl_elem_info_t *obj);\nlong long snd_ctl_elem_info_get_step64(const snd_ctl_elem_info_t *obj);\nunsigned int snd_ctl_elem_info_get_items(const snd_ctl_elem_info_t *obj);\nvoid snd_ctl_elem_info_set_item(snd_ctl_elem_info_t *obj, unsigned int val);\nconst char *snd_ctl_elem_info_get_item_name(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_get_dimensions(const snd_ctl_elem_info_t *obj);\nint snd_ctl_elem_info_get_dimension(const snd_ctl_elem_info_t *obj, unsigned int idx);\nint snd_ctl_elem_info_set_dimension(snd_ctl_elem_info_t *info,\n\t\t\t\t    const int dimension[4]);\nvoid snd_ctl_elem_info_get_id(const snd_ctl_elem_info_t *obj, snd_ctl_elem_id_t *ptr);\nunsigned int snd_ctl_elem_info_get_numid(const snd_ctl_elem_info_t *obj);\nsnd_ctl_elem_iface_t snd_ctl_elem_info_get_interface(const snd_ctl_elem_info_t *obj);\nunsigned int snd_ctl_elem_info_get_device(const snd_ctl_elem_info_t *obj);\nunsigned int snd_ctl_elem_info_get_subdevice(const snd_ctl_elem_info_t *obj);\nconst char *snd_ctl_elem_info_get_name(const snd_ctl_elem_info_t *obj);\nunsigned int snd_ctl_elem_info_get_index(const snd_ctl_elem_info_t *obj);\nvoid snd_ctl_elem_info_set_id(snd_ctl_elem_info_t *obj, const snd_ctl_elem_id_t *ptr);\nvoid snd_ctl_elem_info_set_numid(snd_ctl_elem_info_t *obj, unsigned int val);\nvoid snd_ctl_elem_info_set_interface(snd_ctl_elem_info_t *obj, snd_ctl_elem_iface_t val);\nvoid snd_ctl_elem_info_set_device(snd_ctl_elem_info_t *obj, unsigned int val);\nvoid snd_ctl_elem_info_set_subdevice(snd_ctl_elem_info_t *obj, unsigned int val);\nvoid snd_ctl_elem_info_set_name(snd_ctl_elem_info_t *obj, const char *val);\nvoid snd_ctl_elem_info_set_index(snd_ctl_elem_info_t *obj, unsigned int val);\n\nint snd_ctl_add_integer_elem_set(snd_ctl_t *ctl, snd_ctl_elem_info_t *info,\n\t\t\t\t unsigned int element_count,\n\t\t\t\t unsigned int member_count,\n\t\t\t\t long min, long max, long step);\nint snd_ctl_add_integer64_elem_set(snd_ctl_t *ctl, snd_ctl_elem_info_t *info,\n\t\t\t\t   unsigned int element_count,\n\t\t\t\t   unsigned int member_count,\n\t\t\t\t   long long min, long long max,\n\t\t\t\t   long long step);\nint snd_ctl_add_boolean_elem_set(snd_ctl_t *ctl, snd_ctl_elem_info_t *info,\n\t\t\t\t unsigned int element_count,\n\t\t\t\t unsigned int member_count);\nint snd_ctl_add_enumerated_elem_set(snd_ctl_t *ctl, snd_ctl_elem_info_t *info,\n\t\t\t\t    unsigned int element_count,\n\t\t\t\t    unsigned int member_count,\n\t\t\t\t    unsigned int items,\n\t\t\t\t    const char *const labels[]);\nint snd_ctl_add_bytes_elem_set(snd_ctl_t *ctl, snd_ctl_elem_info_t *info,\n\t\t\t       unsigned int element_count,\n\t\t\t       unsigned int member_count);\n\nint snd_ctl_elem_add_integer(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, long imin, long imax, long istep);\nint snd_ctl_elem_add_integer64(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, long long imin, long long imax, long long istep);\nint snd_ctl_elem_add_boolean(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count);\nint snd_ctl_elem_add_enumerated(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, unsigned int items, const char *const names[]);\nint snd_ctl_elem_add_iec958(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id);\nint snd_ctl_elem_remove(snd_ctl_t *ctl, snd_ctl_elem_id_t *id);\n\nsize_t snd_ctl_elem_value_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_ctl_elem_value_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_ctl_elem_value_alloca(ptr) __snd_alloca(ptr, snd_ctl_elem_value)\nint snd_ctl_elem_value_malloc(snd_ctl_elem_value_t **ptr);\nvoid snd_ctl_elem_value_free(snd_ctl_elem_value_t *obj);\nvoid snd_ctl_elem_value_clear(snd_ctl_elem_value_t *obj);\nvoid snd_ctl_elem_value_copy(snd_ctl_elem_value_t *dst, const snd_ctl_elem_value_t *src);\nint snd_ctl_elem_value_compare(snd_ctl_elem_value_t *left, const snd_ctl_elem_value_t *right);\nvoid snd_ctl_elem_value_get_id(const snd_ctl_elem_value_t *obj, snd_ctl_elem_id_t *ptr);\nunsigned int snd_ctl_elem_value_get_numid(const snd_ctl_elem_value_t *obj);\nsnd_ctl_elem_iface_t snd_ctl_elem_value_get_interface(const snd_ctl_elem_value_t *obj);\nunsigned int snd_ctl_elem_value_get_device(const snd_ctl_elem_value_t *obj);\nunsigned int snd_ctl_elem_value_get_subdevice(const snd_ctl_elem_value_t *obj);\nconst char *snd_ctl_elem_value_get_name(const snd_ctl_elem_value_t *obj);\nunsigned int snd_ctl_elem_value_get_index(const snd_ctl_elem_value_t *obj);\nvoid snd_ctl_elem_value_set_id(snd_ctl_elem_value_t *obj, const snd_ctl_elem_id_t *ptr);\nvoid snd_ctl_elem_value_set_numid(snd_ctl_elem_value_t *obj, unsigned int val);\nvoid snd_ctl_elem_value_set_interface(snd_ctl_elem_value_t *obj, snd_ctl_elem_iface_t val);\nvoid snd_ctl_elem_value_set_device(snd_ctl_elem_value_t *obj, unsigned int val);\nvoid snd_ctl_elem_value_set_subdevice(snd_ctl_elem_value_t *obj, unsigned int val);\nvoid snd_ctl_elem_value_set_name(snd_ctl_elem_value_t *obj, const char *val);\nvoid snd_ctl_elem_value_set_index(snd_ctl_elem_value_t *obj, unsigned int val);\nint snd_ctl_elem_value_get_boolean(const snd_ctl_elem_value_t *obj, unsigned int idx);\nlong snd_ctl_elem_value_get_integer(const snd_ctl_elem_value_t *obj, unsigned int idx);\nlong long snd_ctl_elem_value_get_integer64(const snd_ctl_elem_value_t *obj, unsigned int idx);\nunsigned int snd_ctl_elem_value_get_enumerated(const snd_ctl_elem_value_t *obj, unsigned int idx);\nunsigned char snd_ctl_elem_value_get_byte(const snd_ctl_elem_value_t *obj, unsigned int idx);\nvoid snd_ctl_elem_value_set_boolean(snd_ctl_elem_value_t *obj, unsigned int idx, long val);\nvoid snd_ctl_elem_value_set_integer(snd_ctl_elem_value_t *obj, unsigned int idx, long val);\nvoid snd_ctl_elem_value_set_integer64(snd_ctl_elem_value_t *obj, unsigned int idx, long long val);\nvoid snd_ctl_elem_value_set_enumerated(snd_ctl_elem_value_t *obj, unsigned int idx, unsigned int val);\nvoid snd_ctl_elem_value_set_byte(snd_ctl_elem_value_t *obj, unsigned int idx, unsigned char val);\nvoid snd_ctl_elem_set_bytes(snd_ctl_elem_value_t *obj, void *data, size_t size);\nconst void * snd_ctl_elem_value_get_bytes(const snd_ctl_elem_value_t *obj);\nvoid snd_ctl_elem_value_get_iec958(const snd_ctl_elem_value_t *obj, snd_aes_iec958_t *ptr);\nvoid snd_ctl_elem_value_set_iec958(snd_ctl_elem_value_t *obj, const snd_aes_iec958_t *ptr);\n\nint snd_tlv_parse_dB_info(unsigned int *tlv, unsigned int tlv_size,\n\t\t\t  unsigned int **db_tlvp);\nint snd_tlv_get_dB_range(unsigned int *tlv, long rangemin, long rangemax,\n\t\t\t long *min, long *max);\nint snd_tlv_convert_to_dB(unsigned int *tlv, long rangemin, long rangemax,\n\t\t\t  long volume, long *db_gain);\nint snd_tlv_convert_from_dB(unsigned int *tlv, long rangemin, long rangemax,\n\t\t\t    long db_gain, long *value, int xdir);\nint snd_ctl_get_dB_range(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t long *min, long *max);\nint snd_ctl_convert_to_dB(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t  long volume, long *db_gain);\nint snd_ctl_convert_from_dB(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id,\n\t\t\t    long db_gain, long *value, int xdir);\n\n/**\n *  \\defgroup HControl High level Control Interface\n *  \\ingroup Control\n *  The high level control interface.\n *  See \\ref hcontrol page for more details.\n *  \\{\n */\n\n/** HCTL element handle */\ntypedef struct _snd_hctl_elem snd_hctl_elem_t;\n\n/** HCTL handle */\ntypedef struct _snd_hctl snd_hctl_t;\n\n/**\n * \\brief Compare function for sorting HCTL elements\n * \\param e1 First element\n * \\param e2 Second element\n * \\return -1 if e1 < e2, 0 if e1 == e2, 1 if e1 > e2\n */\ntypedef int (*snd_hctl_compare_t)(const snd_hctl_elem_t *e1,\n\t\t\t\t  const snd_hctl_elem_t *e2);\nint snd_hctl_compare_fast(const snd_hctl_elem_t *c1,\n\t\t\t  const snd_hctl_elem_t *c2);\n/** \n * \\brief HCTL callback function\n * \\param hctl HCTL handle\n * \\param mask event mask\n * \\param elem related HCTL element (if any)\n * \\return 0 on success otherwise a negative error code\n */\ntypedef int (*snd_hctl_callback_t)(snd_hctl_t *hctl,\n\t\t\t\t   unsigned int mask,\n\t\t\t\t   snd_hctl_elem_t *elem);\n/** \n * \\brief HCTL element callback function\n * \\param elem HCTL element\n * \\param mask event mask\n * \\return 0 on success otherwise a negative error code\n */\ntypedef int (*snd_hctl_elem_callback_t)(snd_hctl_elem_t *elem,\n\t\t\t\t\tunsigned int mask);\n\nint snd_hctl_open(snd_hctl_t **hctl, const char *name, int mode);\nint snd_hctl_open_ctl(snd_hctl_t **hctlp, snd_ctl_t *ctl);\nint snd_hctl_close(snd_hctl_t *hctl);\nint snd_hctl_nonblock(snd_hctl_t *hctl, int nonblock);\nstatic __inline__ int snd_hctl_abort(snd_hctl_t *hctl) { return snd_hctl_nonblock(hctl, 2); }\nint snd_hctl_poll_descriptors_count(snd_hctl_t *hctl);\nint snd_hctl_poll_descriptors(snd_hctl_t *hctl, struct pollfd *pfds, unsigned int space);\nint snd_hctl_poll_descriptors_revents(snd_hctl_t *ctl, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nunsigned int snd_hctl_get_count(snd_hctl_t *hctl);\nint snd_hctl_set_compare(snd_hctl_t *hctl, snd_hctl_compare_t hsort);\nsnd_hctl_elem_t *snd_hctl_first_elem(snd_hctl_t *hctl);\nsnd_hctl_elem_t *snd_hctl_last_elem(snd_hctl_t *hctl);\nsnd_hctl_elem_t *snd_hctl_find_elem(snd_hctl_t *hctl, const snd_ctl_elem_id_t *id);\nvoid snd_hctl_set_callback(snd_hctl_t *hctl, snd_hctl_callback_t callback);\nvoid snd_hctl_set_callback_private(snd_hctl_t *hctl, void *data);\nvoid *snd_hctl_get_callback_private(snd_hctl_t *hctl);\nint snd_hctl_load(snd_hctl_t *hctl);\nint snd_hctl_free(snd_hctl_t *hctl);\nint snd_hctl_handle_events(snd_hctl_t *hctl);\nconst char *snd_hctl_name(snd_hctl_t *hctl);\nint snd_hctl_wait(snd_hctl_t *hctl, int timeout);\nsnd_ctl_t *snd_hctl_ctl(snd_hctl_t *hctl);\n\nsnd_hctl_elem_t *snd_hctl_elem_next(snd_hctl_elem_t *elem);\nsnd_hctl_elem_t *snd_hctl_elem_prev(snd_hctl_elem_t *elem);\nint snd_hctl_elem_info(snd_hctl_elem_t *elem, snd_ctl_elem_info_t * info);\nint snd_hctl_elem_read(snd_hctl_elem_t *elem, snd_ctl_elem_value_t * value);\nint snd_hctl_elem_write(snd_hctl_elem_t *elem, snd_ctl_elem_value_t * value);\nint snd_hctl_elem_tlv_read(snd_hctl_elem_t *elem, unsigned int *tlv, unsigned int tlv_size);\nint snd_hctl_elem_tlv_write(snd_hctl_elem_t *elem, const unsigned int *tlv);\nint snd_hctl_elem_tlv_command(snd_hctl_elem_t *elem, const unsigned int *tlv);\n\nsnd_hctl_t *snd_hctl_elem_get_hctl(snd_hctl_elem_t *elem);\n\nvoid snd_hctl_elem_get_id(const snd_hctl_elem_t *obj, snd_ctl_elem_id_t *ptr);\nunsigned int snd_hctl_elem_get_numid(const snd_hctl_elem_t *obj);\nsnd_ctl_elem_iface_t snd_hctl_elem_get_interface(const snd_hctl_elem_t *obj);\nunsigned int snd_hctl_elem_get_device(const snd_hctl_elem_t *obj);\nunsigned int snd_hctl_elem_get_subdevice(const snd_hctl_elem_t *obj);\nconst char *snd_hctl_elem_get_name(const snd_hctl_elem_t *obj);\nunsigned int snd_hctl_elem_get_index(const snd_hctl_elem_t *obj);\nvoid snd_hctl_elem_set_callback(snd_hctl_elem_t *obj, snd_hctl_elem_callback_t val);\nvoid * snd_hctl_elem_get_callback_private(const snd_hctl_elem_t *obj);\nvoid snd_hctl_elem_set_callback_private(snd_hctl_elem_t *obj, void * val);\n\n/** \\} */\n\n/** \\} */\n\n/**\n *  \\defgroup SControl Setup Control Interface\n *  \\ingroup Control\n *  The setup control interface - set or modify control elements from a configuration file.\n *  \\{\n */\n\nint snd_sctl_build(snd_sctl_t **ctl, snd_ctl_t *handle, snd_config_t *config,\n\t\t   snd_config_t *private_data, int mode);\nint snd_sctl_free(snd_sctl_t *handle);\nint snd_sctl_install(snd_sctl_t *handle);\nint snd_sctl_remove(snd_sctl_t *handle);\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_CONTROL_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/global.h": "/**\n * \\file include/global.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_GLOBAL_H_\n#define __ALSA_GLOBAL_H_\n\n/* for timeval and timespec */\n#include <time.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup Global Global defines and functions\n *  Global defines and functions.\n *  \\par\n *  The ALSA library implementation uses these macros and functions.\n *  Most applications probably do not need them.\n *  \\{\n */\n\nconst char *snd_asoundlib_version(void);\n\n#ifndef ATTRIBUTE_UNUSED\n/** do not print warning (gcc) when function parameter is not used */\n#define ATTRIBUTE_UNUSED __attribute__ ((__unused__))\n#endif\n\n#ifdef PIC /* dynamic build */\n\n/** \\hideinitializer \\brief Helper macro for #SND_DLSYM_BUILD_VERSION. */\n#define __SND_DLSYM_VERSION(name, version) _ ## name ## version\n/**\n * \\hideinitializer\n * \\brief Appends the build version to the name of a versioned dynamic symbol.\n */\n#define SND_DLSYM_BUILD_VERSION(name, version) char __SND_DLSYM_VERSION(name, version);\n\n#else /* static build */\n\nstruct snd_dlsym_link {\n\tstruct snd_dlsym_link *next;\n\tconst char *dlsym_name;\n\tconst void *dlsym_ptr;\n};\n\nextern struct snd_dlsym_link *snd_dlsym_start;\n\n/** \\hideinitializer \\brief Helper macro for #SND_DLSYM_BUILD_VERSION. */\n#define __SND_DLSYM_VERSION(prefix, name, version) _ ## prefix ## name ## version\n/**\n * \\hideinitializer\n * \\brief Appends the build version to the name of a versioned dynamic symbol.\n */\n#define SND_DLSYM_BUILD_VERSION(name, version) \\\n  static struct snd_dlsym_link __SND_DLSYM_VERSION(snd_dlsym_, name, version); \\\n  void __SND_DLSYM_VERSION(snd_dlsym_constructor_, name, version) (void) __attribute__ ((constructor)); \\\n  void __SND_DLSYM_VERSION(snd_dlsym_constructor_, name, version) (void) { \\\n    __SND_DLSYM_VERSION(snd_dlsym_, name, version).next = snd_dlsym_start; \\\n    __SND_DLSYM_VERSION(snd_dlsym_, name, version).dlsym_name = # name; \\\n    __SND_DLSYM_VERSION(snd_dlsym_, name, version).dlsym_ptr = (void *)&name; \\\n    snd_dlsym_start = &__SND_DLSYM_VERSION(snd_dlsym_, name, version); \\\n  }\n\n#endif\n\n#ifndef __STRING\n/** \\brief Return 'x' argument as string */\n#define __STRING(x)     #x\n#endif\n\n/** \\brief Returns the version of a dynamic symbol as a string. */\n#define SND_DLSYM_VERSION(version) __STRING(version)\n\nvoid *snd_dlopen(const char *file, int mode);\nvoid *snd_dlsym(void *handle, const char *name, const char *version);\nint snd_dlclose(void *handle);\n\n\n/** \\brief alloca helper macro. */\n#define __snd_alloca(ptr,type) do { *ptr = (type##_t *) alloca(type##_sizeof()); memset(*ptr, 0, type##_sizeof()); } while (0)\n\n/**\n * \\brief Internal structure for an async notification client handler.\n *\n * The ALSA library uses a pointer to this structure as a handle to an async\n * notification object. Applications don't access its contents directly.\n */\ntypedef struct _snd_async_handler snd_async_handler_t;\n\n/**\n * \\brief Async notification callback.\n *\n * See the #snd_async_add_handler function for details.\n */\ntypedef void (*snd_async_callback_t)(snd_async_handler_t *handler);\n\nint snd_async_add_handler(snd_async_handler_t **handler, int fd, \n\t\t\t  snd_async_callback_t callback, void *private_data);\nint snd_async_del_handler(snd_async_handler_t *handler);\nint snd_async_handler_get_fd(snd_async_handler_t *handler);\nint snd_async_handler_get_signo(snd_async_handler_t *handler);\nvoid *snd_async_handler_get_callback_private(snd_async_handler_t *handler);\n\nstruct snd_shm_area *snd_shm_area_create(int shmid, void *ptr);\nstruct snd_shm_area *snd_shm_area_share(struct snd_shm_area *area);\nint snd_shm_area_destroy(struct snd_shm_area *area);\n\nint snd_user_file(const char *file, char **result);\n\n#ifdef __GLIBC__\n#if !defined(_POSIX_C_SOURCE) && !defined(_POSIX_SOURCE)\nstruct timeval {\n\ttime_t\t\ttv_sec;\t\t/* seconds */\n\tlong\t\ttv_usec;\t/* microseconds */\n};\n\nstruct timespec {\n\ttime_t\t\ttv_sec;\t\t/* seconds */\n\tlong\t\ttv_nsec;\t/* nanoseconds */\n};\n#endif\n#endif\n\n/** Timestamp */\ntypedef struct timeval snd_timestamp_t;\n/** Hi-res timestamp */\ntypedef struct timespec snd_htimestamp_t;\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_GLOBAL_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/conf.h": "/**\n * \\file include/conf.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_CONF_H\n#define __ALSA_CONF_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup Config Configuration Interface\n *  The configuration functions and types allow you to read, enumerate,\n *  modify and write the contents of ALSA configuration files.\n *  \\{\n */\n\n/** \\brief \\c dlsym version for the config evaluate callback. */\n#define SND_CONFIG_DLSYM_VERSION_EVALUATE\t_dlsym_config_evaluate_001\n/** \\brief \\c dlsym version for the config hook callback. */\n#define SND_CONFIG_DLSYM_VERSION_HOOK\t\t_dlsym_config_hook_001\n\n/** \\brief Configuration node type. */\ntypedef enum _snd_config_type {\n\t/** Integer number. */\n        SND_CONFIG_TYPE_INTEGER,\n\t/** 64-bit integer number. */\n        SND_CONFIG_TYPE_INTEGER64,\n\t/** Real number. */\n        SND_CONFIG_TYPE_REAL,\n\t/** Character string. */\n        SND_CONFIG_TYPE_STRING,\n        /** Pointer (runtime only, cannot be saved). */\n        SND_CONFIG_TYPE_POINTER,\n\t/** Compound node. */\n\tSND_CONFIG_TYPE_COMPOUND = 1024\n} snd_config_type_t;\n\n/**\n * \\brief Internal structure for a configuration node object.\n *\n * The ALSA library uses a pointer to this structure as a handle to a\n * configuration node. Applications don't access its contents directly.\n */\ntypedef struct _snd_config snd_config_t;\n/**\n * \\brief Type for a configuration compound iterator.\n *\n * The ALSA library uses this pointer type as a handle to a configuration\n * compound iterator. Applications don't directly access the contents of\n * the structure pointed to by this type.\n */\ntypedef struct _snd_config_iterator *snd_config_iterator_t;\n/**\n * \\brief Internal structure for a configuration private update object.\n *\n * The ALSA library uses this structure to save private update information.\n */\ntypedef struct _snd_config_update snd_config_update_t;\n\nextern snd_config_t *snd_config;\n\nconst char *snd_config_topdir(void);\n\nint snd_config_top(snd_config_t **config);\n\nint snd_config_load(snd_config_t *config, snd_input_t *in);\nint snd_config_load_override(snd_config_t *config, snd_input_t *in);\nint snd_config_save(snd_config_t *config, snd_output_t *out);\nint snd_config_update(void);\nint snd_config_update_r(snd_config_t **top, snd_config_update_t **update, const char *path);\nint snd_config_update_free(snd_config_update_t *update);\nint snd_config_update_free_global(void);\n\nint snd_config_update_ref(snd_config_t **top);\nvoid snd_config_ref(snd_config_t *top);\nvoid snd_config_unref(snd_config_t *top);\n\nint snd_config_search(snd_config_t *config, const char *key,\n\t\t      snd_config_t **result);\nint snd_config_searchv(snd_config_t *config, \n\t\t       snd_config_t **result, ...);\nint snd_config_search_definition(snd_config_t *config,\n\t\t\t\t const char *base, const char *key,\n\t\t\t\t snd_config_t **result);\n\nint snd_config_expand(snd_config_t *config, snd_config_t *root,\n\t\t      const char *args, snd_config_t *private_data,\n\t\t      snd_config_t **result);\nint snd_config_evaluate(snd_config_t *config, snd_config_t *root,\n\t\t\tsnd_config_t *private_data, snd_config_t **result);\n\nint snd_config_add(snd_config_t *config, snd_config_t *leaf);\nint snd_config_delete(snd_config_t *config);\nint snd_config_delete_compound_members(const snd_config_t *config);\nint snd_config_copy(snd_config_t **dst, snd_config_t *src);\n\nint snd_config_make(snd_config_t **config, const char *key,\n\t\t    snd_config_type_t type);\nint snd_config_make_integer(snd_config_t **config, const char *key);\nint snd_config_make_integer64(snd_config_t **config, const char *key);\nint snd_config_make_real(snd_config_t **config, const char *key);\nint snd_config_make_string(snd_config_t **config, const char *key);\nint snd_config_make_pointer(snd_config_t **config, const char *key);\nint snd_config_make_compound(snd_config_t **config, const char *key, int join);\n\nint snd_config_imake_integer(snd_config_t **config, const char *key, const long value);\nint snd_config_imake_integer64(snd_config_t **config, const char *key, const long long value);\nint snd_config_imake_real(snd_config_t **config, const char *key, const double value);\nint snd_config_imake_string(snd_config_t **config, const char *key, const char *ascii);\nint snd_config_imake_safe_string(snd_config_t **config, const char *key, const char *ascii);\nint snd_config_imake_pointer(snd_config_t **config, const char *key, const void *ptr);\n\nsnd_config_type_t snd_config_get_type(const snd_config_t *config);\n\nint snd_config_set_id(snd_config_t *config, const char *id);\nint snd_config_set_integer(snd_config_t *config, long value);\nint snd_config_set_integer64(snd_config_t *config, long long value);\nint snd_config_set_real(snd_config_t *config, double value);\nint snd_config_set_string(snd_config_t *config, const char *value);\nint snd_config_set_ascii(snd_config_t *config, const char *ascii);\nint snd_config_set_pointer(snd_config_t *config, const void *ptr);\nint snd_config_get_id(const snd_config_t *config, const char **value);\nint snd_config_get_integer(const snd_config_t *config, long *value);\nint snd_config_get_integer64(const snd_config_t *config, long long *value);\nint snd_config_get_real(const snd_config_t *config, double *value);\nint snd_config_get_ireal(const snd_config_t *config, double *value);\nint snd_config_get_string(const snd_config_t *config, const char **value);\nint snd_config_get_ascii(const snd_config_t *config, char **value);\nint snd_config_get_pointer(const snd_config_t *config, const void **value);\nint snd_config_test_id(const snd_config_t *config, const char *id);\n\nsnd_config_iterator_t snd_config_iterator_first(const snd_config_t *node);\nsnd_config_iterator_t snd_config_iterator_next(const snd_config_iterator_t iterator);\nsnd_config_iterator_t snd_config_iterator_end(const snd_config_t *node);\nsnd_config_t *snd_config_iterator_entry(const snd_config_iterator_t iterator);\n\n/**\n * \\brief Helper macro to iterate over the children of a compound node.\n * \\param[in,out] pos Iterator variable for the current node.\n * \\param[in,out] next Temporary iterator variable for the next node.\n * \\param[in] node Handle to the compound configuration node to iterate over.\n *\n * Use this macro like a \\c for statement, e.g.:\n * \\code\n * snd_config_iterator_t pos, next;\n * snd_config_for_each(pos, next, node) {\n *     snd_config_t *entry = snd_config_iterator_entry(pos);\n *     ...\n * }\n * \\endcode\n *\n * This macro allows deleting or removing the current node.\n */\n#define snd_config_for_each(pos, next, node) \\\n\tfor (pos = snd_config_iterator_first(node), next = snd_config_iterator_next(pos); pos != snd_config_iterator_end(node); pos = next, next = snd_config_iterator_next(pos))\n\n/* Misc functions */\n\nint snd_config_get_bool_ascii(const char *ascii);\nint snd_config_get_bool(const snd_config_t *conf);\nint snd_config_get_ctl_iface_ascii(const char *ascii);\nint snd_config_get_ctl_iface(const snd_config_t *conf);\n\n/* Names functions */\n\n/**\n * Device-name list element\n */\ntypedef struct snd_devname snd_devname_t;\n\n/**\n * Device-name list element (definition)\n */\nstruct snd_devname {\n\tchar *name;\t/**< Device name string */\n\tchar *comment;\t/**< Comments */\n\tsnd_devname_t *next;\t/**< Next pointer */\n};\n\nint snd_names_list(const char *iface, snd_devname_t **list);\nvoid snd_names_list_free(snd_devname_t *list);\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_CONF_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/seq.h": "/**\n * \\file include/seq.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n */\n/*\n * Application interface library for the ALSA driver\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_SEQ_H\n#define __ALSA_SEQ_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup Sequencer MIDI Sequencer\n *  MIDI Sequencer Interface.\n *  See \\ref seq page for more details.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_SEQ_DLSYM_VERSION\t\t_dlsym_seq_001\n\n/** Sequencer handle */\ntypedef struct _snd_seq snd_seq_t;\n\n/**\n * sequencer opening stream types\n */\n#define SND_SEQ_OPEN_OUTPUT\t1\t/**< open for output (write) */\n#define SND_SEQ_OPEN_INPUT\t2\t/**< open for input (read) */\n#define SND_SEQ_OPEN_DUPLEX\t(SND_SEQ_OPEN_OUTPUT|SND_SEQ_OPEN_INPUT)\t/**< open for both input and output (read/write) */\n\n/**\n * sequencer opening mode\n */\n#define SND_SEQ_NONBLOCK\t0x0001\t/**< non-blocking mode (flag to open mode) */\n\n/** sequencer handle type */\ntypedef enum _snd_seq_type {\n\tSND_SEQ_TYPE_HW,\t\t/**< hardware */\n\tSND_SEQ_TYPE_SHM,\t\t/**< shared memory (NYI) */\n\tSND_SEQ_TYPE_INET\t\t/**< network (NYI) */\n} snd_seq_type_t;\n\n/** special client (port) ids */\n#define SND_SEQ_ADDRESS_UNKNOWN\t\t253\t/**< unknown source */\n#define SND_SEQ_ADDRESS_SUBSCRIBERS\t254\t/**< send event to all subscribed ports */\n#define SND_SEQ_ADDRESS_BROADCAST\t255\t/**< send event to all queues/clients/ports/channels */\n\n/** known client numbers */\n#define SND_SEQ_CLIENT_SYSTEM\t\t0\t/**< system client */\n\n/*\n */\nint snd_seq_open(snd_seq_t **handle, const char *name, int streams, int mode);\nint snd_seq_open_lconf(snd_seq_t **handle, const char *name, int streams, int mode, snd_config_t *lconf);\nconst char *snd_seq_name(snd_seq_t *seq);\nsnd_seq_type_t snd_seq_type(snd_seq_t *seq);\nint snd_seq_close(snd_seq_t *handle);\nint snd_seq_poll_descriptors_count(snd_seq_t *handle, short events);\nint snd_seq_poll_descriptors(snd_seq_t *handle, struct pollfd *pfds, unsigned int space, short events);\nint snd_seq_poll_descriptors_revents(snd_seq_t *seq, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nint snd_seq_nonblock(snd_seq_t *handle, int nonblock);\nint snd_seq_client_id(snd_seq_t *handle);\n\nsize_t snd_seq_get_output_buffer_size(snd_seq_t *handle);\nsize_t snd_seq_get_input_buffer_size(snd_seq_t *handle);\nint snd_seq_set_output_buffer_size(snd_seq_t *handle, size_t size);\nint snd_seq_set_input_buffer_size(snd_seq_t *handle, size_t size);\n\n/** system information container */\ntypedef struct _snd_seq_system_info snd_seq_system_info_t;\n\nsize_t snd_seq_system_info_sizeof(void);\n/** allocate a #snd_seq_system_info_t container on stack */\n#define snd_seq_system_info_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_system_info)\nint snd_seq_system_info_malloc(snd_seq_system_info_t **ptr);\nvoid snd_seq_system_info_free(snd_seq_system_info_t *ptr);\nvoid snd_seq_system_info_copy(snd_seq_system_info_t *dst, const snd_seq_system_info_t *src);\n\nint snd_seq_system_info_get_queues(const snd_seq_system_info_t *info);\nint snd_seq_system_info_get_clients(const snd_seq_system_info_t *info);\nint snd_seq_system_info_get_ports(const snd_seq_system_info_t *info);\nint snd_seq_system_info_get_channels(const snd_seq_system_info_t *info);\nint snd_seq_system_info_get_cur_clients(const snd_seq_system_info_t *info);\nint snd_seq_system_info_get_cur_queues(const snd_seq_system_info_t *info);\n\nint snd_seq_system_info(snd_seq_t *handle, snd_seq_system_info_t *info);\n\n/** \\} */\n\n\n/**\n *  \\defgroup SeqClient Sequencer Client Interface\n *  Sequencer Client Interface\n *  \\ingroup Sequencer\n *  \\{\n */\n\n/** client information container */\ntypedef struct _snd_seq_client_info snd_seq_client_info_t;\n\n/** client types */\ntypedef enum snd_seq_client_type {\n\tSND_SEQ_USER_CLIENT     = 1,\t/**< user client */\n\tSND_SEQ_KERNEL_CLIENT   = 2\t/**< kernel client */\n} snd_seq_client_type_t;\n                        \nsize_t snd_seq_client_info_sizeof(void);\n/** allocate a #snd_seq_client_info_t container on stack */\n#define snd_seq_client_info_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_client_info)\nint snd_seq_client_info_malloc(snd_seq_client_info_t **ptr);\nvoid snd_seq_client_info_free(snd_seq_client_info_t *ptr);\nvoid snd_seq_client_info_copy(snd_seq_client_info_t *dst, const snd_seq_client_info_t *src);\n\nint snd_seq_client_info_get_client(const snd_seq_client_info_t *info);\nsnd_seq_client_type_t snd_seq_client_info_get_type(const snd_seq_client_info_t *info);\nconst char *snd_seq_client_info_get_name(snd_seq_client_info_t *info);\nint snd_seq_client_info_get_broadcast_filter(const snd_seq_client_info_t *info);\nint snd_seq_client_info_get_error_bounce(const snd_seq_client_info_t *info);\nint snd_seq_client_info_get_card(const snd_seq_client_info_t *info);\nint snd_seq_client_info_get_pid(const snd_seq_client_info_t *info);\nconst unsigned char *snd_seq_client_info_get_event_filter(const snd_seq_client_info_t *info);\nint snd_seq_client_info_get_num_ports(const snd_seq_client_info_t *info);\nint snd_seq_client_info_get_event_lost(const snd_seq_client_info_t *info);\n\nvoid snd_seq_client_info_set_client(snd_seq_client_info_t *info, int client);\nvoid snd_seq_client_info_set_name(snd_seq_client_info_t *info, const char *name);\nvoid snd_seq_client_info_set_broadcast_filter(snd_seq_client_info_t *info, int val);\nvoid snd_seq_client_info_set_error_bounce(snd_seq_client_info_t *info, int val);\nvoid snd_seq_client_info_set_event_filter(snd_seq_client_info_t *info, unsigned char *filter);\n\nvoid snd_seq_client_info_event_filter_clear(snd_seq_client_info_t *info);\nvoid snd_seq_client_info_event_filter_add(snd_seq_client_info_t *info, int event_type);\nvoid snd_seq_client_info_event_filter_del(snd_seq_client_info_t *info, int event_type);\nint snd_seq_client_info_event_filter_check(snd_seq_client_info_t *info, int event_type);\n\nint snd_seq_get_client_info(snd_seq_t *handle, snd_seq_client_info_t *info);\nint snd_seq_get_any_client_info(snd_seq_t *handle, int client, snd_seq_client_info_t *info);\nint snd_seq_set_client_info(snd_seq_t *handle, snd_seq_client_info_t *info);\nint snd_seq_query_next_client(snd_seq_t *handle, snd_seq_client_info_t *info);\n\n/*\n */\n\n/** client pool information container */\ntypedef struct _snd_seq_client_pool snd_seq_client_pool_t;\n\nsize_t snd_seq_client_pool_sizeof(void);\n/** allocate a #snd_seq_client_pool_t container on stack */\n#define snd_seq_client_pool_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_client_pool)\nint snd_seq_client_pool_malloc(snd_seq_client_pool_t **ptr);\nvoid snd_seq_client_pool_free(snd_seq_client_pool_t *ptr);\nvoid snd_seq_client_pool_copy(snd_seq_client_pool_t *dst, const snd_seq_client_pool_t *src);\n\nint snd_seq_client_pool_get_client(const snd_seq_client_pool_t *info);\nsize_t snd_seq_client_pool_get_output_pool(const snd_seq_client_pool_t *info);\nsize_t snd_seq_client_pool_get_input_pool(const snd_seq_client_pool_t *info);\nsize_t snd_seq_client_pool_get_output_room(const snd_seq_client_pool_t *info);\nsize_t snd_seq_client_pool_get_output_free(const snd_seq_client_pool_t *info);\nsize_t snd_seq_client_pool_get_input_free(const snd_seq_client_pool_t *info);\nvoid snd_seq_client_pool_set_output_pool(snd_seq_client_pool_t *info, size_t size);\nvoid snd_seq_client_pool_set_input_pool(snd_seq_client_pool_t *info, size_t size);\nvoid snd_seq_client_pool_set_output_room(snd_seq_client_pool_t *info, size_t size);\n\nint snd_seq_get_client_pool(snd_seq_t *handle, snd_seq_client_pool_t *info);\nint snd_seq_set_client_pool(snd_seq_t *handle, snd_seq_client_pool_t *info);\n\n\n/** \\} */\n\n\n/**\n *  \\defgroup SeqPort Sequencer Port Interface\n *  Sequencer Port Interface\n *  \\ingroup Sequencer\n *  \\{\n */\n\n/** port information container */\ntypedef struct _snd_seq_port_info snd_seq_port_info_t;\n\n/** known port numbers */\n#define SND_SEQ_PORT_SYSTEM_TIMER\t0\t/**< system timer port */\n#define SND_SEQ_PORT_SYSTEM_ANNOUNCE\t1\t/**< system announce port */\n\n/** port capabilities (32 bits) */\n#define SND_SEQ_PORT_CAP_READ\t\t(1<<0)\t/**< readable from this port */\n#define SND_SEQ_PORT_CAP_WRITE\t\t(1<<1)\t/**< writable to this port */\n\n#define SND_SEQ_PORT_CAP_SYNC_READ\t(1<<2)\t/**< allow read subscriptions */\n#define SND_SEQ_PORT_CAP_SYNC_WRITE\t(1<<3)\t/**< allow write subscriptions */\n\n#define SND_SEQ_PORT_CAP_DUPLEX\t\t(1<<4)\t/**< allow read/write duplex */\n\n#define SND_SEQ_PORT_CAP_SUBS_READ\t(1<<5)\t/**< allow read subscription */\n#define SND_SEQ_PORT_CAP_SUBS_WRITE\t(1<<6)\t/**< allow write subscription */\n#define SND_SEQ_PORT_CAP_NO_EXPORT\t(1<<7)\t/**< routing not allowed */\n\n/* port type */\n/** Messages sent from/to this port have device-specific semantics. */\n#define SND_SEQ_PORT_TYPE_SPECIFIC\t(1<<0)\n/** This port understands MIDI messages. */\n#define SND_SEQ_PORT_TYPE_MIDI_GENERIC\t(1<<1)\n/** This port is compatible with the General MIDI specification. */\n#define SND_SEQ_PORT_TYPE_MIDI_GM\t(1<<2)\n/** This port is compatible with the Roland GS standard. */\n#define SND_SEQ_PORT_TYPE_MIDI_GS\t(1<<3)\n/** This port is compatible with the Yamaha XG specification. */\n#define SND_SEQ_PORT_TYPE_MIDI_XG\t(1<<4)\n/** This port is compatible with the Roland MT-32. */\n#define SND_SEQ_PORT_TYPE_MIDI_MT32\t(1<<5)\n/** This port is compatible with the General MIDI 2 specification. */\n#define SND_SEQ_PORT_TYPE_MIDI_GM2\t(1<<6)\n/** This port understands SND_SEQ_EVENT_SAMPLE_xxx messages\n    (these are not MIDI messages). */\n#define SND_SEQ_PORT_TYPE_SYNTH\t\t(1<<10)\n/** Instruments can be downloaded to this port\n    (with SND_SEQ_EVENT_INSTR_xxx messages sent directly). */\n#define SND_SEQ_PORT_TYPE_DIRECT_SAMPLE (1<<11)\n/** Instruments can be downloaded to this port\n    (with SND_SEQ_EVENT_INSTR_xxx messages sent directly or through a queue). */\n#define SND_SEQ_PORT_TYPE_SAMPLE\t(1<<12)\n/** This port is implemented in hardware. */\n#define SND_SEQ_PORT_TYPE_HARDWARE\t(1<<16)\n/** This port is implemented in software. */\n#define SND_SEQ_PORT_TYPE_SOFTWARE\t(1<<17)\n/** Messages sent to this port will generate sounds. */\n#define SND_SEQ_PORT_TYPE_SYNTHESIZER\t(1<<18)\n/** This port may connect to other devices\n    (whose characteristics are not known). */\n#define SND_SEQ_PORT_TYPE_PORT\t\t(1<<19)\n/** This port belongs to an application, such as a sequencer or editor. */\n#define SND_SEQ_PORT_TYPE_APPLICATION\t(1<<20)\n\n\nsize_t snd_seq_port_info_sizeof(void);\n/** allocate a #snd_seq_port_info_t container on stack */\n#define snd_seq_port_info_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_port_info)\nint snd_seq_port_info_malloc(snd_seq_port_info_t **ptr);\nvoid snd_seq_port_info_free(snd_seq_port_info_t *ptr);\nvoid snd_seq_port_info_copy(snd_seq_port_info_t *dst, const snd_seq_port_info_t *src);\n\nint snd_seq_port_info_get_client(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_port(const snd_seq_port_info_t *info);\nconst snd_seq_addr_t *snd_seq_port_info_get_addr(const snd_seq_port_info_t *info);\nconst char *snd_seq_port_info_get_name(const snd_seq_port_info_t *info);\nunsigned int snd_seq_port_info_get_capability(const snd_seq_port_info_t *info);\nunsigned int snd_seq_port_info_get_type(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_midi_channels(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_midi_voices(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_synth_voices(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_read_use(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_write_use(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_port_specified(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_timestamping(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_timestamp_real(const snd_seq_port_info_t *info);\nint snd_seq_port_info_get_timestamp_queue(const snd_seq_port_info_t *info);\n\nvoid snd_seq_port_info_set_client(snd_seq_port_info_t *info, int client);\nvoid snd_seq_port_info_set_port(snd_seq_port_info_t *info, int port);\nvoid snd_seq_port_info_set_addr(snd_seq_port_info_t *info, const snd_seq_addr_t *addr);\nvoid snd_seq_port_info_set_name(snd_seq_port_info_t *info, const char *name);\nvoid snd_seq_port_info_set_capability(snd_seq_port_info_t *info, unsigned int capability);\nvoid snd_seq_port_info_set_type(snd_seq_port_info_t *info, unsigned int type);\nvoid snd_seq_port_info_set_midi_channels(snd_seq_port_info_t *info, int channels);\nvoid snd_seq_port_info_set_midi_voices(snd_seq_port_info_t *info, int voices);\nvoid snd_seq_port_info_set_synth_voices(snd_seq_port_info_t *info, int voices);\nvoid snd_seq_port_info_set_port_specified(snd_seq_port_info_t *info, int val);\nvoid snd_seq_port_info_set_timestamping(snd_seq_port_info_t *info, int enable);\nvoid snd_seq_port_info_set_timestamp_real(snd_seq_port_info_t *info, int realtime);\nvoid snd_seq_port_info_set_timestamp_queue(snd_seq_port_info_t *info, int queue);\n\nint snd_seq_create_port(snd_seq_t *handle, snd_seq_port_info_t *info);\nint snd_seq_delete_port(snd_seq_t *handle, int port);\nint snd_seq_get_port_info(snd_seq_t *handle, int port, snd_seq_port_info_t *info);\nint snd_seq_get_any_port_info(snd_seq_t *handle, int client, int port, snd_seq_port_info_t *info);\nint snd_seq_set_port_info(snd_seq_t *handle, int port, snd_seq_port_info_t *info);\nint snd_seq_query_next_port(snd_seq_t *handle, snd_seq_port_info_t *info);\n\n/** \\} */\n\n\n/**\n *  \\defgroup SeqSubscribe Sequencer Port Subscription\n *  Sequencer Port Subscription\n *  \\ingroup Sequencer\n *  \\{\n */\n\n/** port subscription container */\ntypedef struct _snd_seq_port_subscribe snd_seq_port_subscribe_t;\n\nsize_t snd_seq_port_subscribe_sizeof(void);\n/** allocate a #snd_seq_port_subscribe_t container on stack */\n#define snd_seq_port_subscribe_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_port_subscribe)\nint snd_seq_port_subscribe_malloc(snd_seq_port_subscribe_t **ptr);\nvoid snd_seq_port_subscribe_free(snd_seq_port_subscribe_t *ptr);\nvoid snd_seq_port_subscribe_copy(snd_seq_port_subscribe_t *dst, const snd_seq_port_subscribe_t *src);\n\nconst snd_seq_addr_t *snd_seq_port_subscribe_get_sender(const snd_seq_port_subscribe_t *info);\nconst snd_seq_addr_t *snd_seq_port_subscribe_get_dest(const snd_seq_port_subscribe_t *info);\nint snd_seq_port_subscribe_get_queue(const snd_seq_port_subscribe_t *info);\nint snd_seq_port_subscribe_get_exclusive(const snd_seq_port_subscribe_t *info);\nint snd_seq_port_subscribe_get_time_update(const snd_seq_port_subscribe_t *info);\nint snd_seq_port_subscribe_get_time_real(const snd_seq_port_subscribe_t *info);\n\nvoid snd_seq_port_subscribe_set_sender(snd_seq_port_subscribe_t *info, const snd_seq_addr_t *addr);\nvoid snd_seq_port_subscribe_set_dest(snd_seq_port_subscribe_t *info, const snd_seq_addr_t *addr);\nvoid snd_seq_port_subscribe_set_queue(snd_seq_port_subscribe_t *info, int q);\nvoid snd_seq_port_subscribe_set_exclusive(snd_seq_port_subscribe_t *info, int val);\nvoid snd_seq_port_subscribe_set_time_update(snd_seq_port_subscribe_t *info, int val);\nvoid snd_seq_port_subscribe_set_time_real(snd_seq_port_subscribe_t *info, int val);\n\nint snd_seq_get_port_subscription(snd_seq_t *handle, snd_seq_port_subscribe_t *sub);\nint snd_seq_subscribe_port(snd_seq_t *handle, snd_seq_port_subscribe_t *sub);\nint snd_seq_unsubscribe_port(snd_seq_t *handle, snd_seq_port_subscribe_t *sub);\n\n/*\n */\n\n/** subscription query container */\ntypedef struct _snd_seq_query_subscribe snd_seq_query_subscribe_t;\n\n/** type of query subscription */\ntypedef enum {\n\tSND_SEQ_QUERY_SUBS_READ,\t/**< query read subscriptions */\n\tSND_SEQ_QUERY_SUBS_WRITE\t/**< query write subscriptions */\n} snd_seq_query_subs_type_t;\n\nsize_t snd_seq_query_subscribe_sizeof(void);\n/** allocate a #snd_seq_query_subscribe_t container on stack */\n#define snd_seq_query_subscribe_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_query_subscribe)\nint snd_seq_query_subscribe_malloc(snd_seq_query_subscribe_t **ptr);\nvoid snd_seq_query_subscribe_free(snd_seq_query_subscribe_t *ptr);\nvoid snd_seq_query_subscribe_copy(snd_seq_query_subscribe_t *dst, const snd_seq_query_subscribe_t *src);\n\nint snd_seq_query_subscribe_get_client(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_port(const snd_seq_query_subscribe_t *info);\nconst snd_seq_addr_t *snd_seq_query_subscribe_get_root(const snd_seq_query_subscribe_t *info);\nsnd_seq_query_subs_type_t snd_seq_query_subscribe_get_type(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_index(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_num_subs(const snd_seq_query_subscribe_t *info);\nconst snd_seq_addr_t *snd_seq_query_subscribe_get_addr(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_queue(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_exclusive(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_time_update(const snd_seq_query_subscribe_t *info);\nint snd_seq_query_subscribe_get_time_real(const snd_seq_query_subscribe_t *info);\n\nvoid snd_seq_query_subscribe_set_client(snd_seq_query_subscribe_t *info, int client);\nvoid snd_seq_query_subscribe_set_port(snd_seq_query_subscribe_t *info, int port);\nvoid snd_seq_query_subscribe_set_root(snd_seq_query_subscribe_t *info, const snd_seq_addr_t *addr);\nvoid snd_seq_query_subscribe_set_type(snd_seq_query_subscribe_t *info, snd_seq_query_subs_type_t type);\nvoid snd_seq_query_subscribe_set_index(snd_seq_query_subscribe_t *info, int _index);\n\nint snd_seq_query_port_subscribers(snd_seq_t *seq, snd_seq_query_subscribe_t * subs);\n\n/** \\} */\n\n\n/**\n *  \\defgroup SeqQueue Sequencer Queue Interface\n *  Sequencer Queue Interface\n *  \\ingroup Sequencer\n *  \\{\n */\n\n/** queue information container */\ntypedef struct _snd_seq_queue_info snd_seq_queue_info_t;\n/** queue status container */\ntypedef struct _snd_seq_queue_status snd_seq_queue_status_t;\n/** queue tempo container */\ntypedef struct _snd_seq_queue_tempo snd_seq_queue_tempo_t;\n/** queue timer information container */\ntypedef struct _snd_seq_queue_timer snd_seq_queue_timer_t;\n\n/** special queue ids */\n#define SND_SEQ_QUEUE_DIRECT\t\t253\t/**< direct dispatch */\n\nsize_t snd_seq_queue_info_sizeof(void);\n/** allocate a #snd_seq_queue_info_t container on stack */\n#define snd_seq_queue_info_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_queue_info)\nint snd_seq_queue_info_malloc(snd_seq_queue_info_t **ptr);\nvoid snd_seq_queue_info_free(snd_seq_queue_info_t *ptr);\nvoid snd_seq_queue_info_copy(snd_seq_queue_info_t *dst, const snd_seq_queue_info_t *src);\n\nint snd_seq_queue_info_get_queue(const snd_seq_queue_info_t *info);\nconst char *snd_seq_queue_info_get_name(const snd_seq_queue_info_t *info);\nint snd_seq_queue_info_get_owner(const snd_seq_queue_info_t *info);\nint snd_seq_queue_info_get_locked(const snd_seq_queue_info_t *info);\nunsigned int snd_seq_queue_info_get_flags(const snd_seq_queue_info_t *info);\n\nvoid snd_seq_queue_info_set_name(snd_seq_queue_info_t *info, const char *name);\nvoid snd_seq_queue_info_set_owner(snd_seq_queue_info_t *info, int owner);\nvoid snd_seq_queue_info_set_locked(snd_seq_queue_info_t *info, int locked);\nvoid snd_seq_queue_info_set_flags(snd_seq_queue_info_t *info, unsigned int flags);\n\nint snd_seq_create_queue(snd_seq_t *seq, snd_seq_queue_info_t *info);\nint snd_seq_alloc_named_queue(snd_seq_t *seq, const char *name);\nint snd_seq_alloc_queue(snd_seq_t *handle);\nint snd_seq_free_queue(snd_seq_t *handle, int q);\nint snd_seq_get_queue_info(snd_seq_t *seq, int q, snd_seq_queue_info_t *info);\nint snd_seq_set_queue_info(snd_seq_t *seq, int q, snd_seq_queue_info_t *info);\nint snd_seq_query_named_queue(snd_seq_t *seq, const char *name);\n\nint snd_seq_get_queue_usage(snd_seq_t *handle, int q);\nint snd_seq_set_queue_usage(snd_seq_t *handle, int q, int used);\n\n/*\n */\nsize_t snd_seq_queue_status_sizeof(void);\n/** allocate a #snd_seq_queue_status_t container on stack */\n#define snd_seq_queue_status_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_queue_status)\nint snd_seq_queue_status_malloc(snd_seq_queue_status_t **ptr);\nvoid snd_seq_queue_status_free(snd_seq_queue_status_t *ptr);\nvoid snd_seq_queue_status_copy(snd_seq_queue_status_t *dst, const snd_seq_queue_status_t *src);\n\nint snd_seq_queue_status_get_queue(const snd_seq_queue_status_t *info);\nint snd_seq_queue_status_get_events(const snd_seq_queue_status_t *info);\nsnd_seq_tick_time_t snd_seq_queue_status_get_tick_time(const snd_seq_queue_status_t *info);\nconst snd_seq_real_time_t *snd_seq_queue_status_get_real_time(const snd_seq_queue_status_t *info);\nunsigned int snd_seq_queue_status_get_status(const snd_seq_queue_status_t *info);\n\nint snd_seq_get_queue_status(snd_seq_t *handle, int q, snd_seq_queue_status_t *status);\n\n/*\n */\nsize_t snd_seq_queue_tempo_sizeof(void);\n/** allocate a #snd_seq_queue_tempo_t container on stack */\n#define snd_seq_queue_tempo_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_queue_tempo)\nint snd_seq_queue_tempo_malloc(snd_seq_queue_tempo_t **ptr);\nvoid snd_seq_queue_tempo_free(snd_seq_queue_tempo_t *ptr);\nvoid snd_seq_queue_tempo_copy(snd_seq_queue_tempo_t *dst, const snd_seq_queue_tempo_t *src);\n\nint snd_seq_queue_tempo_get_queue(const snd_seq_queue_tempo_t *info);\nunsigned int snd_seq_queue_tempo_get_tempo(const snd_seq_queue_tempo_t *info);\nint snd_seq_queue_tempo_get_ppq(const snd_seq_queue_tempo_t *info);\nunsigned int snd_seq_queue_tempo_get_skew(const snd_seq_queue_tempo_t *info);\nunsigned int snd_seq_queue_tempo_get_skew_base(const snd_seq_queue_tempo_t *info);\nvoid snd_seq_queue_tempo_set_tempo(snd_seq_queue_tempo_t *info, unsigned int tempo);\nvoid snd_seq_queue_tempo_set_ppq(snd_seq_queue_tempo_t *info, int ppq);\nvoid snd_seq_queue_tempo_set_skew(snd_seq_queue_tempo_t *info, unsigned int skew);\nvoid snd_seq_queue_tempo_set_skew_base(snd_seq_queue_tempo_t *info, unsigned int base);\n\nint snd_seq_get_queue_tempo(snd_seq_t *handle, int q, snd_seq_queue_tempo_t *tempo);\nint snd_seq_set_queue_tempo(snd_seq_t *handle, int q, snd_seq_queue_tempo_t *tempo);\n\n/*\n */\n\n/** sequencer timer sources */\ntypedef enum {\n\tSND_SEQ_TIMER_ALSA = 0,\t\t/* ALSA timer */\n\tSND_SEQ_TIMER_MIDI_CLOCK = 1,\t/* Midi Clock (CLOCK event) */\n\tSND_SEQ_TIMER_MIDI_TICK = 2\t/* Midi Timer Tick (TICK event */\n} snd_seq_queue_timer_type_t;\n\nsize_t snd_seq_queue_timer_sizeof(void);\n/** allocate a #snd_seq_queue_timer_t container on stack */\n#define snd_seq_queue_timer_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_queue_timer)\nint snd_seq_queue_timer_malloc(snd_seq_queue_timer_t **ptr);\nvoid snd_seq_queue_timer_free(snd_seq_queue_timer_t *ptr);\nvoid snd_seq_queue_timer_copy(snd_seq_queue_timer_t *dst, const snd_seq_queue_timer_t *src);\n\nint snd_seq_queue_timer_get_queue(const snd_seq_queue_timer_t *info);\nsnd_seq_queue_timer_type_t snd_seq_queue_timer_get_type(const snd_seq_queue_timer_t *info);\nconst snd_timer_id_t *snd_seq_queue_timer_get_id(const snd_seq_queue_timer_t *info);\nunsigned int snd_seq_queue_timer_get_resolution(const snd_seq_queue_timer_t *info);\n\nvoid snd_seq_queue_timer_set_type(snd_seq_queue_timer_t *info, snd_seq_queue_timer_type_t type);\nvoid snd_seq_queue_timer_set_id(snd_seq_queue_timer_t *info, const snd_timer_id_t *id);\nvoid snd_seq_queue_timer_set_resolution(snd_seq_queue_timer_t *info, unsigned int resolution);\n\nint snd_seq_get_queue_timer(snd_seq_t *handle, int q, snd_seq_queue_timer_t *timer);\nint snd_seq_set_queue_timer(snd_seq_t *handle, int q, snd_seq_queue_timer_t *timer);\n\n/** \\} */\n\n/**\n *  \\defgroup SeqEvent Sequencer Event API\n *  Sequencer Event API\n *  \\ingroup Sequencer\n *  \\{\n */\n\nint snd_seq_free_event(snd_seq_event_t *ev);\nssize_t snd_seq_event_length(snd_seq_event_t *ev);\nint snd_seq_event_output(snd_seq_t *handle, snd_seq_event_t *ev);\nint snd_seq_event_output_buffer(snd_seq_t *handle, snd_seq_event_t *ev);\nint snd_seq_event_output_direct(snd_seq_t *handle, snd_seq_event_t *ev);\nint snd_seq_event_input(snd_seq_t *handle, snd_seq_event_t **ev);\nint snd_seq_event_input_pending(snd_seq_t *seq, int fetch_sequencer);\nint snd_seq_drain_output(snd_seq_t *handle);\nint snd_seq_event_output_pending(snd_seq_t *seq);\nint snd_seq_extract_output(snd_seq_t *handle, snd_seq_event_t **ev);\nint snd_seq_drop_output(snd_seq_t *handle);\nint snd_seq_drop_output_buffer(snd_seq_t *handle);\nint snd_seq_drop_input(snd_seq_t *handle);\nint snd_seq_drop_input_buffer(snd_seq_t *handle);\n\n/** event removal conditionals */\ntypedef struct _snd_seq_remove_events snd_seq_remove_events_t;\n\n/** Remove conditional flags */\n#define SND_SEQ_REMOVE_INPUT\t\t(1<<0)\t/**< Flush input queues */\n#define SND_SEQ_REMOVE_OUTPUT\t\t(1<<1)\t/**< Flush output queues */\n#define SND_SEQ_REMOVE_DEST\t\t(1<<2)\t/**< Restrict by destination q:client:port */\n#define SND_SEQ_REMOVE_DEST_CHANNEL\t(1<<3)\t/**< Restrict by channel */\n#define SND_SEQ_REMOVE_TIME_BEFORE\t(1<<4)\t/**< Restrict to before time */\n#define SND_SEQ_REMOVE_TIME_AFTER\t(1<<5)\t/**< Restrict to time or after */\n#define SND_SEQ_REMOVE_TIME_TICK\t(1<<6)\t/**< Time is in ticks */\n#define SND_SEQ_REMOVE_EVENT_TYPE\t(1<<7)\t/**< Restrict to event type */\n#define SND_SEQ_REMOVE_IGNORE_OFF \t(1<<8)\t/**< Do not flush off events */\n#define SND_SEQ_REMOVE_TAG_MATCH \t(1<<9)\t/**< Restrict to events with given tag */\n\nsize_t snd_seq_remove_events_sizeof(void);\n/** allocate a #snd_seq_remove_events_t container on stack */\n#define snd_seq_remove_events_alloca(ptr) \\\n\t__snd_alloca(ptr, snd_seq_remove_events)\nint snd_seq_remove_events_malloc(snd_seq_remove_events_t **ptr);\nvoid snd_seq_remove_events_free(snd_seq_remove_events_t *ptr);\nvoid snd_seq_remove_events_copy(snd_seq_remove_events_t *dst, const snd_seq_remove_events_t *src);\n\nunsigned int snd_seq_remove_events_get_condition(const snd_seq_remove_events_t *info);\nint snd_seq_remove_events_get_queue(const snd_seq_remove_events_t *info);\nconst snd_seq_timestamp_t *snd_seq_remove_events_get_time(const snd_seq_remove_events_t *info);\nconst snd_seq_addr_t *snd_seq_remove_events_get_dest(const snd_seq_remove_events_t *info);\nint snd_seq_remove_events_get_channel(const snd_seq_remove_events_t *info);\nint snd_seq_remove_events_get_event_type(const snd_seq_remove_events_t *info);\nint snd_seq_remove_events_get_tag(const snd_seq_remove_events_t *info);\n\nvoid snd_seq_remove_events_set_condition(snd_seq_remove_events_t *info, unsigned int flags);\nvoid snd_seq_remove_events_set_queue(snd_seq_remove_events_t *info, int queue);\nvoid snd_seq_remove_events_set_time(snd_seq_remove_events_t *info, const snd_seq_timestamp_t *time);\nvoid snd_seq_remove_events_set_dest(snd_seq_remove_events_t *info, const snd_seq_addr_t *addr);\nvoid snd_seq_remove_events_set_channel(snd_seq_remove_events_t *info, int channel);\nvoid snd_seq_remove_events_set_event_type(snd_seq_remove_events_t *info, int type);\nvoid snd_seq_remove_events_set_tag(snd_seq_remove_events_t *info, int tag);\n\nint snd_seq_remove_events(snd_seq_t *handle, snd_seq_remove_events_t *info);\n\n/** \\} */\n\n/**\n *  \\defgroup SeqMisc Sequencer Miscellaneous\n *  Sequencer Miscellaneous\n *  \\ingroup Sequencer\n *  \\{\n */\n\nvoid snd_seq_set_bit(int nr, void *array);\nvoid snd_seq_unset_bit(int nr, void *array);\nint snd_seq_change_bit(int nr, void *array);\nint snd_seq_get_bit(int nr, void *array);\n\n/** \\} */\n\n\n/**\n *  \\defgroup SeqEvType Sequencer Event Type Checks\n *  Sequencer Event Type Checks\n *  \\ingroup Sequencer\n *  \\{\n */\n\n/* event type macros */\nenum {\n\tSND_SEQ_EVFLG_RESULT,\n\tSND_SEQ_EVFLG_NOTE,\n\tSND_SEQ_EVFLG_CONTROL,\n\tSND_SEQ_EVFLG_QUEUE,\n\tSND_SEQ_EVFLG_SYSTEM,\n\tSND_SEQ_EVFLG_MESSAGE,\n\tSND_SEQ_EVFLG_CONNECTION,\n\tSND_SEQ_EVFLG_SAMPLE,\n\tSND_SEQ_EVFLG_USERS,\n\tSND_SEQ_EVFLG_INSTR,\n\tSND_SEQ_EVFLG_QUOTE,\n\tSND_SEQ_EVFLG_NONE,\n\tSND_SEQ_EVFLG_RAW,\n\tSND_SEQ_EVFLG_FIXED,\n\tSND_SEQ_EVFLG_VARIABLE,\n\tSND_SEQ_EVFLG_VARUSR\n};\n\nenum {\n\tSND_SEQ_EVFLG_NOTE_ONEARG,\n\tSND_SEQ_EVFLG_NOTE_TWOARG\n};\n\nenum {\n\tSND_SEQ_EVFLG_QUEUE_NOARG,\n\tSND_SEQ_EVFLG_QUEUE_TICK,\n\tSND_SEQ_EVFLG_QUEUE_TIME,\n\tSND_SEQ_EVFLG_QUEUE_VALUE\n};\n\n/**\n * Exported event type table\n *\n * This table is referred by snd_seq_ev_is_xxx.\n */\nextern const unsigned int snd_seq_event_types[];\n\n#define _SND_SEQ_TYPE(x)\t(1<<(x))\t/**< master type - 24bit */\n#define _SND_SEQ_TYPE_OPT(x)\t((x)<<24)\t/**< optional type - 8bit */\n\n/** check the event type */\n#define snd_seq_type_check(ev,x) (snd_seq_event_types[(ev)->type] & _SND_SEQ_TYPE(x))\n\n/** event type check: result events */\n#define snd_seq_ev_is_result_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_RESULT)\n/** event type check: note events */\n#define snd_seq_ev_is_note_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_NOTE)\n/** event type check: control events */\n#define snd_seq_ev_is_control_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_CONTROL)\n/** event type check: channel specific events */\n#define snd_seq_ev_is_channel_type(ev) \\\n\t(snd_seq_event_types[(ev)->type] & (_SND_SEQ_TYPE(SND_SEQ_EVFLG_NOTE) | _SND_SEQ_TYPE(SND_SEQ_EVFLG_CONTROL)))\n\n/** event type check: queue control events */\n#define snd_seq_ev_is_queue_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_QUEUE)\n/** event type check: system status messages */\n#define snd_seq_ev_is_message_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_MESSAGE)\n/** event type check: system status messages */\n#define snd_seq_ev_is_subscribe_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_CONNECTION)\n/** event type check: sample messages */\n#define snd_seq_ev_is_sample_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_SAMPLE)\n/** event type check: user-defined messages */\n#define snd_seq_ev_is_user_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_USERS)\n/** event type check: instrument layer events */\n#define snd_seq_ev_is_instr_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_INSTR)\n/** event type check: fixed length events */\n#define snd_seq_ev_is_fixed_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_FIXED)\n/** event type check: variable length events */\n#define snd_seq_ev_is_variable_type(ev)\t\\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_VARIABLE)\n/** event type check: user pointer events */\n#define snd_seq_ev_is_varusr_type(ev) \\\n\tsnd_seq_type_check(ev, SND_SEQ_EVFLG_VARUSR)\n/** event type check: reserved for kernel */\n#define snd_seq_ev_is_reserved(ev) \\\n\t(! snd_seq_event_types[(ev)->type])\n\n/**\n * macros to check event flags\n */\n/** prior events */\n#define snd_seq_ev_is_prior(ev)\t\\\n\t(((ev)->flags & SND_SEQ_PRIORITY_MASK) == SND_SEQ_PRIORITY_HIGH)\n\n/** get the data length type */\n#define snd_seq_ev_length_type(ev) \\\n\t((ev)->flags & SND_SEQ_EVENT_LENGTH_MASK)\n/** fixed length events */\n#define snd_seq_ev_is_fixed(ev)\t\\\n\t(snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_FIXED)\n/** variable length events */\n#define snd_seq_ev_is_variable(ev) \\\n\t(snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_VARIABLE)\n/** variable length on user-space */\n#define snd_seq_ev_is_varusr(ev) \\\n\t(snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_VARUSR)\n\n/** time-stamp type */\n#define snd_seq_ev_timestamp_type(ev) \\\n\t((ev)->flags & SND_SEQ_TIME_STAMP_MASK)\n/** event is in tick time */\n#define snd_seq_ev_is_tick(ev) \\\n\t(snd_seq_ev_timestamp_type(ev) == SND_SEQ_TIME_STAMP_TICK)\n/** event is in real-time */\n#define snd_seq_ev_is_real(ev) \\\n\t(snd_seq_ev_timestamp_type(ev) == SND_SEQ_TIME_STAMP_REAL)\n\n/** time-mode type */\n#define snd_seq_ev_timemode_type(ev) \\\n\t((ev)->flags & SND_SEQ_TIME_MODE_MASK)\n/** scheduled in absolute time */\n#define snd_seq_ev_is_abstime(ev) \\\n\t(snd_seq_ev_timemode_type(ev) == SND_SEQ_TIME_MODE_ABS)\n/** scheduled in relative time */\n#define snd_seq_ev_is_reltime(ev) \\\n\t(snd_seq_ev_timemode_type(ev) == SND_SEQ_TIME_MODE_REL)\n\n/** direct dispatched events */\n#define snd_seq_ev_is_direct(ev) \\\n\t((ev)->queue == SND_SEQ_QUEUE_DIRECT)\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_SEQ_H */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/pcm.h": "/**\n * \\file include/pcm.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver.\n * See the \\ref pcm page for more details.\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_PCM_H\n#define __ALSA_PCM_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup PCM PCM Interface\n *  See the \\ref pcm page for more details.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_PCM_DLSYM_VERSION\t\t_dlsym_pcm_001\n\n/** PCM generic info container */\ntypedef struct _snd_pcm_info snd_pcm_info_t;\n\n/** PCM hardware configuration space container\n *\n *  snd_pcm_hw_params_t is an opaque structure which contains a set of possible\n *  PCM hardware configurations. For example, a given instance might include a\n *  range of buffer sizes, a range of period sizes, and a set of several sample\n *  formats. Some subset of all possible combinations these sets may be valid,\n *  but not necessarily any combination will be valid.\n *\n *  When a parameter is set or restricted using a snd_pcm_hw_params_set*\n *  function, all of the other ranges will be updated to exclude as many\n *  impossible configurations as possible. Attempting to set a parameter\n *  outside of its acceptable range will result in the function failing\n *  and an error code being returned.\n */\ntypedef struct _snd_pcm_hw_params snd_pcm_hw_params_t;\n\n/** PCM software configuration container */\ntypedef struct _snd_pcm_sw_params snd_pcm_sw_params_t;\n/** PCM status container */\n typedef struct _snd_pcm_status snd_pcm_status_t;\n/** PCM access types mask */\ntypedef struct _snd_pcm_access_mask snd_pcm_access_mask_t;\n/** PCM formats mask */\ntypedef struct _snd_pcm_format_mask snd_pcm_format_mask_t;\n/** PCM subformats mask */\ntypedef struct _snd_pcm_subformat_mask snd_pcm_subformat_mask_t;\n\n/** PCM class */\ntypedef enum _snd_pcm_class {\n\t/** standard device */\n\n\tSND_PCM_CLASS_GENERIC = 0,\n\t/** multichannel device */\n\tSND_PCM_CLASS_MULTI,\n\t/** software modem device */\n\tSND_PCM_CLASS_MODEM,\n\t/** digitizer device */\n\tSND_PCM_CLASS_DIGITIZER,\n\tSND_PCM_CLASS_LAST = SND_PCM_CLASS_DIGITIZER\n} snd_pcm_class_t;\n\n/** PCM subclass */\ntypedef enum _snd_pcm_subclass {\n\t/** subdevices are mixed together */\n\tSND_PCM_SUBCLASS_GENERIC_MIX = 0,\n\t/** multichannel subdevices are mixed together */\n\tSND_PCM_SUBCLASS_MULTI_MIX,\n\tSND_PCM_SUBCLASS_LAST = SND_PCM_SUBCLASS_MULTI_MIX\n} snd_pcm_subclass_t;\n\n/** PCM stream (direction) */\ntypedef enum _snd_pcm_stream {\n\t/** Playback stream */\n\tSND_PCM_STREAM_PLAYBACK = 0,\n\t/** Capture stream */\n\tSND_PCM_STREAM_CAPTURE,\n\tSND_PCM_STREAM_LAST = SND_PCM_STREAM_CAPTURE\n} snd_pcm_stream_t;\n\n/** PCM access type */\ntypedef enum _snd_pcm_access {\n\t/** mmap access with simple interleaved channels */\n\tSND_PCM_ACCESS_MMAP_INTERLEAVED = 0,\n\t/** mmap access with simple non interleaved channels */\n\tSND_PCM_ACCESS_MMAP_NONINTERLEAVED,\n\t/** mmap access with complex placement */\n\tSND_PCM_ACCESS_MMAP_COMPLEX,\n\t/** snd_pcm_readi/snd_pcm_writei access */\n\tSND_PCM_ACCESS_RW_INTERLEAVED,\n\t/** snd_pcm_readn/snd_pcm_writen access */\n\tSND_PCM_ACCESS_RW_NONINTERLEAVED,\n\tSND_PCM_ACCESS_LAST = SND_PCM_ACCESS_RW_NONINTERLEAVED\n} snd_pcm_access_t;\n\n/** PCM sample format */\ntypedef enum _snd_pcm_format {\n\t/** Unknown */\n\tSND_PCM_FORMAT_UNKNOWN = -1,\n\t/** Signed 8 bit */\n\tSND_PCM_FORMAT_S8 = 0,\n\t/** Unsigned 8 bit */\n\tSND_PCM_FORMAT_U8,\n\t/** Signed 16 bit Little Endian */\n\tSND_PCM_FORMAT_S16_LE,\n\t/** Signed 16 bit Big Endian */\n\tSND_PCM_FORMAT_S16_BE,\n\t/** Unsigned 16 bit Little Endian */\n\tSND_PCM_FORMAT_U16_LE,\n\t/** Unsigned 16 bit Big Endian */\n\tSND_PCM_FORMAT_U16_BE,\n\t/** Signed 24 bit Little Endian using low three bytes in 32-bit word */\n\tSND_PCM_FORMAT_S24_LE,\n\t/** Signed 24 bit Big Endian using low three bytes in 32-bit word */\n\tSND_PCM_FORMAT_S24_BE,\n\t/** Unsigned 24 bit Little Endian using low three bytes in 32-bit word */\n\tSND_PCM_FORMAT_U24_LE,\n\t/** Unsigned 24 bit Big Endian using low three bytes in 32-bit word */\n\tSND_PCM_FORMAT_U24_BE,\n\t/** Signed 32 bit Little Endian */\n\tSND_PCM_FORMAT_S32_LE,\n\t/** Signed 32 bit Big Endian */\n\tSND_PCM_FORMAT_S32_BE,\n\t/** Unsigned 32 bit Little Endian */\n\tSND_PCM_FORMAT_U32_LE,\n\t/** Unsigned 32 bit Big Endian */\n\tSND_PCM_FORMAT_U32_BE,\n\t/** Float 32 bit Little Endian, Range -1.0 to 1.0 */\n\tSND_PCM_FORMAT_FLOAT_LE,\n\t/** Float 32 bit Big Endian, Range -1.0 to 1.0 */\n\tSND_PCM_FORMAT_FLOAT_BE,\n\t/** Float 64 bit Little Endian, Range -1.0 to 1.0 */\n\tSND_PCM_FORMAT_FLOAT64_LE,\n\t/** Float 64 bit Big Endian, Range -1.0 to 1.0 */\n\tSND_PCM_FORMAT_FLOAT64_BE,\n\t/** IEC-958 Little Endian */\n\tSND_PCM_FORMAT_IEC958_SUBFRAME_LE,\n\t/** IEC-958 Big Endian */\n\tSND_PCM_FORMAT_IEC958_SUBFRAME_BE,\n\t/** Mu-Law */\n\tSND_PCM_FORMAT_MU_LAW,\n\t/** A-Law */\n\tSND_PCM_FORMAT_A_LAW,\n\t/** Ima-ADPCM */\n\tSND_PCM_FORMAT_IMA_ADPCM,\n\t/** MPEG */\n\tSND_PCM_FORMAT_MPEG,\n\t/** GSM */\n\tSND_PCM_FORMAT_GSM,\n\t/** Special */\n\tSND_PCM_FORMAT_SPECIAL = 31,\n\t/** Signed 24bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_S24_3LE = 32,\n\t/** Signed 24bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_S24_3BE,\n\t/** Unsigned 24bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_U24_3LE,\n\t/** Unsigned 24bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_U24_3BE,\n\t/** Signed 20bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_S20_3LE,\n\t/** Signed 20bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_S20_3BE,\n\t/** Unsigned 20bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_U20_3LE,\n\t/** Unsigned 20bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_U20_3BE,\n\t/** Signed 18bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_S18_3LE,\n\t/** Signed 18bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_S18_3BE,\n\t/** Unsigned 18bit Little Endian in 3bytes format */\n\tSND_PCM_FORMAT_U18_3LE,\n\t/** Unsigned 18bit Big Endian in 3bytes format */\n\tSND_PCM_FORMAT_U18_3BE,\n\t/* G.723 (ADPCM) 24 kbit/s, 8 samples in 3 bytes */\n\tSND_PCM_FORMAT_G723_24,\n\t/* G.723 (ADPCM) 24 kbit/s, 1 sample in 1 byte */\n\tSND_PCM_FORMAT_G723_24_1B,\n\t/* G.723 (ADPCM) 40 kbit/s, 8 samples in 3 bytes */\n\tSND_PCM_FORMAT_G723_40,\n\t/* G.723 (ADPCM) 40 kbit/s, 1 sample in 1 byte */\n\tSND_PCM_FORMAT_G723_40_1B,\n\t/* Direct Stream Digital (DSD) in 1-byte samples (x8) */\n\tSND_PCM_FORMAT_DSD_U8,\n\t/* Direct Stream Digital (DSD) in 2-byte samples (x16) */\n\tSND_PCM_FORMAT_DSD_U16_LE,\n\t/* Direct Stream Digital (DSD) in 4-byte samples (x32) */\n\tSND_PCM_FORMAT_DSD_U32_LE,\n\t/* Direct Stream Digital (DSD) in 2-byte samples (x16) */\n\tSND_PCM_FORMAT_DSD_U16_BE,\n\t/* Direct Stream Digital (DSD) in 4-byte samples (x32) */\n\tSND_PCM_FORMAT_DSD_U32_BE,\n\tSND_PCM_FORMAT_LAST = SND_PCM_FORMAT_DSD_U32_BE,\n\n#if __BYTE_ORDER == __LITTLE_ENDIAN\n\t/** Signed 16 bit CPU endian */\n\tSND_PCM_FORMAT_S16 = SND_PCM_FORMAT_S16_LE,\n\t/** Unsigned 16 bit CPU endian */\n\tSND_PCM_FORMAT_U16 = SND_PCM_FORMAT_U16_LE,\n\t/** Signed 24 bit CPU endian */\n\tSND_PCM_FORMAT_S24 = SND_PCM_FORMAT_S24_LE,\n\t/** Unsigned 24 bit CPU endian */\n\tSND_PCM_FORMAT_U24 = SND_PCM_FORMAT_U24_LE,\n\t/** Signed 32 bit CPU endian */\n\tSND_PCM_FORMAT_S32 = SND_PCM_FORMAT_S32_LE,\n\t/** Unsigned 32 bit CPU endian */\n\tSND_PCM_FORMAT_U32 = SND_PCM_FORMAT_U32_LE,\n\t/** Float 32 bit CPU endian */\n\tSND_PCM_FORMAT_FLOAT = SND_PCM_FORMAT_FLOAT_LE,\n\t/** Float 64 bit CPU endian */\n\tSND_PCM_FORMAT_FLOAT64 = SND_PCM_FORMAT_FLOAT64_LE,\n\t/** IEC-958 CPU Endian */\n\tSND_PCM_FORMAT_IEC958_SUBFRAME = SND_PCM_FORMAT_IEC958_SUBFRAME_LE\n#elif __BYTE_ORDER == __BIG_ENDIAN\n\t/** Signed 16 bit CPU endian */\n\tSND_PCM_FORMAT_S16 = SND_PCM_FORMAT_S16_BE,\n\t/** Unsigned 16 bit CPU endian */\n\tSND_PCM_FORMAT_U16 = SND_PCM_FORMAT_U16_BE,\n\t/** Signed 24 bit CPU endian */\n\tSND_PCM_FORMAT_S24 = SND_PCM_FORMAT_S24_BE,\n\t/** Unsigned 24 bit CPU endian */\n\tSND_PCM_FORMAT_U24 = SND_PCM_FORMAT_U24_BE,\n\t/** Signed 32 bit CPU endian */\n\tSND_PCM_FORMAT_S32 = SND_PCM_FORMAT_S32_BE,\n\t/** Unsigned 32 bit CPU endian */\n\tSND_PCM_FORMAT_U32 = SND_PCM_FORMAT_U32_BE,\n\t/** Float 32 bit CPU endian */\n\tSND_PCM_FORMAT_FLOAT = SND_PCM_FORMAT_FLOAT_BE,\n\t/** Float 64 bit CPU endian */\n\tSND_PCM_FORMAT_FLOAT64 = SND_PCM_FORMAT_FLOAT64_BE,\n\t/** IEC-958 CPU Endian */\n\tSND_PCM_FORMAT_IEC958_SUBFRAME = SND_PCM_FORMAT_IEC958_SUBFRAME_BE\n#else\n#error \"Unknown endian\"\n#endif\n} snd_pcm_format_t;\n\n/** PCM sample subformat */\ntypedef enum _snd_pcm_subformat {\n\t/** Standard */\n\tSND_PCM_SUBFORMAT_STD = 0,\n\tSND_PCM_SUBFORMAT_LAST = SND_PCM_SUBFORMAT_STD\n} snd_pcm_subformat_t;\n\n/** PCM state */\ntypedef enum _snd_pcm_state {\n\t/** Open */\n\tSND_PCM_STATE_OPEN = 0,\n\t/** Setup installed */ \n\tSND_PCM_STATE_SETUP,\n\t/** Ready to start */\n\tSND_PCM_STATE_PREPARED,\n\t/** Running */\n\tSND_PCM_STATE_RUNNING,\n\t/** Stopped: underrun (playback) or overrun (capture) detected */\n\tSND_PCM_STATE_XRUN,\n\t/** Draining: running (playback) or stopped (capture) */\n\tSND_PCM_STATE_DRAINING,\n\t/** Paused */\n\tSND_PCM_STATE_PAUSED,\n\t/** Hardware is suspended */\n\tSND_PCM_STATE_SUSPENDED,\n\t/** Hardware is disconnected */\n\tSND_PCM_STATE_DISCONNECTED,\n\tSND_PCM_STATE_LAST = SND_PCM_STATE_DISCONNECTED\n} snd_pcm_state_t;\n\n/** PCM start mode */\ntypedef enum _snd_pcm_start {\n\t/** Automatic start on data read/write */\n\tSND_PCM_START_DATA = 0,\n\t/** Explicit start */\n\tSND_PCM_START_EXPLICIT,\n\tSND_PCM_START_LAST = SND_PCM_START_EXPLICIT\n} snd_pcm_start_t;\n\n/** PCM xrun mode */\ntypedef enum _snd_pcm_xrun {\n\t/** Xrun detection disabled */\n\tSND_PCM_XRUN_NONE = 0,\n\t/** Stop on xrun detection */\n\tSND_PCM_XRUN_STOP,\n\tSND_PCM_XRUN_LAST = SND_PCM_XRUN_STOP\n} snd_pcm_xrun_t;\n\n/** PCM timestamp mode */\ntypedef enum _snd_pcm_tstamp {\n\t/** No timestamp */\n\tSND_PCM_TSTAMP_NONE = 0,\n\t/** Update timestamp at every hardware position update */\n\tSND_PCM_TSTAMP_ENABLE,\n\t/** Equivalent with #SND_PCM_TSTAMP_ENABLE,\n\t * just for compatibility with older versions\n\t */\n\tSND_PCM_TSTAMP_MMAP = SND_PCM_TSTAMP_ENABLE,\n\tSND_PCM_TSTAMP_LAST = SND_PCM_TSTAMP_ENABLE\n} snd_pcm_tstamp_t;\n\ntypedef enum _snd_pcm_tstamp_type {\n\tSND_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0,\t/**< gettimeofday equivalent */\n\tSND_PCM_TSTAMP_TYPE_MONOTONIC,\t/**< posix_clock_monotonic equivalent */\n\tSND_PCM_TSTAMP_TYPE_MONOTONIC_RAW,\t/**< monotonic_raw (no NTP) */\n\tSND_PCM_TSTAMP_TYPE_LAST = SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW,\n} snd_pcm_tstamp_type_t;\n\ntypedef struct _snd_pcm_audio_tstamp_config {\n\t/* 5 of max 16 bits used */\n\tunsigned int type_requested:4;\n\tunsigned int report_delay:1; /* add total delay to A/D or D/A */\n} snd_pcm_audio_tstamp_config_t;\n\ntypedef struct _snd_pcm_audio_tstamp_report {\n\t/* 6 of max 16 bits used for bit-fields */\n\n\t/* for backwards compatibility */\n\tunsigned int valid:1;\n\n\t/* actual type if hardware could not support requested timestamp */\n\tunsigned int actual_type:4;\n\n\t/* accuracy represented in ns units */\n\tunsigned int accuracy_report:1; /* 0 if accuracy unknown, 1 if accuracy field is valid */\n\tunsigned int accuracy; /* up to 4.29s, will be packed in separate field  */\n} snd_pcm_audio_tstamp_report_t;\n\n/** Unsigned frames quantity */\ntypedef unsigned long snd_pcm_uframes_t;\n/** Signed frames quantity */\ntypedef long snd_pcm_sframes_t;\n\n/** Non blocking mode (flag for open mode) \\hideinitializer */\n#define SND_PCM_NONBLOCK\t\t0x00000001\n/** Async notification (flag for open mode) \\hideinitializer */\n#define SND_PCM_ASYNC\t\t\t0x00000002\n/** In an abort state (internal, not allowed for open) */\n#define SND_PCM_ABORT\t\t\t0x00008000\n/** Disable automatic (but not forced!) rate resamplinig */\n#define SND_PCM_NO_AUTO_RESAMPLE\t0x00010000\n/** Disable automatic (but not forced!) channel conversion */\n#define SND_PCM_NO_AUTO_CHANNELS\t0x00020000\n/** Disable automatic (but not forced!) format conversion */\n#define SND_PCM_NO_AUTO_FORMAT\t\t0x00040000\n/** Disable soft volume control */\n#define SND_PCM_NO_SOFTVOL\t\t0x00080000\n\n/** PCM handle */\ntypedef struct _snd_pcm snd_pcm_t;\n\n/** PCM type */\nenum _snd_pcm_type {\n\t/** Kernel level PCM */\n\tSND_PCM_TYPE_HW = 0,\n\t/** Hooked PCM */\n\tSND_PCM_TYPE_HOOKS,\n\t/** One or more linked PCM with exclusive access to selected\n\t    channels */\n\tSND_PCM_TYPE_MULTI,\n\t/** File writing plugin */\n\tSND_PCM_TYPE_FILE,\n\t/** Null endpoint PCM */\n\tSND_PCM_TYPE_NULL,\n\t/** Shared memory client PCM */\n\tSND_PCM_TYPE_SHM,\n\t/** INET client PCM (not yet implemented) */\n\tSND_PCM_TYPE_INET,\n\t/** Copying plugin */\n\tSND_PCM_TYPE_COPY,\n\t/** Linear format conversion PCM */\n\tSND_PCM_TYPE_LINEAR,\n\t/** A-Law format conversion PCM */\n\tSND_PCM_TYPE_ALAW,\n\t/** Mu-Law format conversion PCM */\n\tSND_PCM_TYPE_MULAW,\n\t/** IMA-ADPCM format conversion PCM */\n\tSND_PCM_TYPE_ADPCM,\n\t/** Rate conversion PCM */\n\tSND_PCM_TYPE_RATE,\n\t/** Attenuated static route PCM */\n\tSND_PCM_TYPE_ROUTE,\n\t/** Format adjusted PCM */\n\tSND_PCM_TYPE_PLUG,\n\t/** Sharing PCM */\n\tSND_PCM_TYPE_SHARE,\n\t/** Meter plugin */\n\tSND_PCM_TYPE_METER,\n\t/** Mixing PCM */\n\tSND_PCM_TYPE_MIX,\n\t/** Attenuated dynamic route PCM (not yet implemented) */\n\tSND_PCM_TYPE_DROUTE,\n\t/** Loopback server plugin (not yet implemented) */\n\tSND_PCM_TYPE_LBSERVER,\n\t/** Linear Integer <-> Linear Float format conversion PCM */\n\tSND_PCM_TYPE_LINEAR_FLOAT,\n\t/** LADSPA integration plugin */\n\tSND_PCM_TYPE_LADSPA,\n\t/** Direct Mixing plugin */\n\tSND_PCM_TYPE_DMIX,\n\t/** Jack Audio Connection Kit plugin */\n\tSND_PCM_TYPE_JACK,\n\t/** Direct Snooping plugin */\n\tSND_PCM_TYPE_DSNOOP,\n\t/** Direct Sharing plugin */\n\tSND_PCM_TYPE_DSHARE,\n\t/** IEC958 subframe plugin */\n\tSND_PCM_TYPE_IEC958,\n\t/** Soft volume plugin */\n\tSND_PCM_TYPE_SOFTVOL,\n\t/** External I/O plugin */\n\tSND_PCM_TYPE_IOPLUG,\n\t/** External filter plugin */\n\tSND_PCM_TYPE_EXTPLUG,\n\t/** Mmap-emulation plugin */\n\tSND_PCM_TYPE_MMAP_EMUL,\n\tSND_PCM_TYPE_LAST = SND_PCM_TYPE_MMAP_EMUL\n};\n\n/** PCM type */\ntypedef enum _snd_pcm_type snd_pcm_type_t;\n\n/** PCM area specification */\ntypedef struct _snd_pcm_channel_area {\n\t/** base address of channel samples */\n\tvoid *addr;\n\t/** offset to first sample in bits */\n\tunsigned int first;\n\t/** samples distance in bits */\n\tunsigned int step;\n} snd_pcm_channel_area_t;\n\n/** PCM synchronization ID */\ntypedef union _snd_pcm_sync_id {\n\t/** 8-bit ID */\n\tunsigned char id[16];\n\t/** 16-bit ID */\n\tunsigned short id16[8];\n\t/** 32-bit ID */\n\tunsigned int id32[4];\n} snd_pcm_sync_id_t;\n\n/** #SND_PCM_TYPE_METER scope handle */\ntypedef struct _snd_pcm_scope snd_pcm_scope_t;\n\nint snd_pcm_open(snd_pcm_t **pcm, const char *name, \n\t\t snd_pcm_stream_t stream, int mode);\nint snd_pcm_open_lconf(snd_pcm_t **pcm, const char *name, \n\t\t       snd_pcm_stream_t stream, int mode,\n\t\t       snd_config_t *lconf);\nint snd_pcm_open_fallback(snd_pcm_t **pcm, snd_config_t *root,\n\t\t\t  const char *name, const char *orig_name,\n\t\t\t  snd_pcm_stream_t stream, int mode);\n\nint snd_pcm_close(snd_pcm_t *pcm);\nconst char *snd_pcm_name(snd_pcm_t *pcm);\nsnd_pcm_type_t snd_pcm_type(snd_pcm_t *pcm);\nsnd_pcm_stream_t snd_pcm_stream(snd_pcm_t *pcm);\nint snd_pcm_poll_descriptors_count(snd_pcm_t *pcm);\nint snd_pcm_poll_descriptors(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int space);\nint snd_pcm_poll_descriptors_revents(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nint snd_pcm_nonblock(snd_pcm_t *pcm, int nonblock);\nstatic __inline__ int snd_pcm_abort(snd_pcm_t *pcm) { return snd_pcm_nonblock(pcm, 2); }\nint snd_async_add_pcm_handler(snd_async_handler_t **handler, snd_pcm_t *pcm, \n\t\t\t      snd_async_callback_t callback, void *private_data);\nsnd_pcm_t *snd_async_handler_get_pcm(snd_async_handler_t *handler);\nint snd_pcm_info(snd_pcm_t *pcm, snd_pcm_info_t *info);\nint snd_pcm_hw_params_current(snd_pcm_t *pcm, snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params(snd_pcm_t *pcm, snd_pcm_hw_params_t *params);\nint snd_pcm_hw_free(snd_pcm_t *pcm);\nint snd_pcm_sw_params_current(snd_pcm_t *pcm, snd_pcm_sw_params_t *params);\nint snd_pcm_sw_params(snd_pcm_t *pcm, snd_pcm_sw_params_t *params);\nint snd_pcm_prepare(snd_pcm_t *pcm);\nint snd_pcm_reset(snd_pcm_t *pcm);\nint snd_pcm_status(snd_pcm_t *pcm, snd_pcm_status_t *status);\nint snd_pcm_start(snd_pcm_t *pcm);\nint snd_pcm_drop(snd_pcm_t *pcm);\nint snd_pcm_drain(snd_pcm_t *pcm);\nint snd_pcm_pause(snd_pcm_t *pcm, int enable);\nsnd_pcm_state_t snd_pcm_state(snd_pcm_t *pcm);\nint snd_pcm_hwsync(snd_pcm_t *pcm);\nint snd_pcm_delay(snd_pcm_t *pcm, snd_pcm_sframes_t *delayp);\nint snd_pcm_resume(snd_pcm_t *pcm);\nint snd_pcm_htimestamp(snd_pcm_t *pcm, snd_pcm_uframes_t *avail, snd_htimestamp_t *tstamp);\nsnd_pcm_sframes_t snd_pcm_avail(snd_pcm_t *pcm);\nsnd_pcm_sframes_t snd_pcm_avail_update(snd_pcm_t *pcm);\nint snd_pcm_avail_delay(snd_pcm_t *pcm, snd_pcm_sframes_t *availp, snd_pcm_sframes_t *delayp);\nsnd_pcm_sframes_t snd_pcm_rewindable(snd_pcm_t *pcm);\nsnd_pcm_sframes_t snd_pcm_rewind(snd_pcm_t *pcm, snd_pcm_uframes_t frames);\nsnd_pcm_sframes_t snd_pcm_forwardable(snd_pcm_t *pcm);\nsnd_pcm_sframes_t snd_pcm_forward(snd_pcm_t *pcm, snd_pcm_uframes_t frames);\nsnd_pcm_sframes_t snd_pcm_writei(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_readi(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_writen(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_readn(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size);\nint snd_pcm_wait(snd_pcm_t *pcm, int timeout);\n\nint snd_pcm_link(snd_pcm_t *pcm1, snd_pcm_t *pcm2);\nint snd_pcm_unlink(snd_pcm_t *pcm);\n\n/** channel mapping API version number */\n#define SND_CHMAP_API_VERSION\t((1 << 16) | (0 << 8) | 1)\n\n/** channel map list type */\nenum snd_pcm_chmap_type {\n\tSND_CHMAP_TYPE_NONE = 0,/**< unspecified channel position */\n\tSND_CHMAP_TYPE_FIXED,\t/**< fixed channel position */\n\tSND_CHMAP_TYPE_VAR,\t/**< freely swappable channel position */\n\tSND_CHMAP_TYPE_PAIRED,\t/**< pair-wise swappable channel position */\n\tSND_CHMAP_TYPE_LAST = SND_CHMAP_TYPE_PAIRED, /**< last entry */\n};\n\n/** channel positions */\nenum snd_pcm_chmap_position {\n\tSND_CHMAP_UNKNOWN = 0,\t/**< unspecified */\n\tSND_CHMAP_NA,\t\t/**< N/A, silent */\n\tSND_CHMAP_MONO,\t\t/**< mono stream */\n\tSND_CHMAP_FL,\t\t/**< front left */\n\tSND_CHMAP_FR,\t\t/**< front right */\n\tSND_CHMAP_RL,\t\t/**< rear left */\n\tSND_CHMAP_RR,\t\t/**< rear right */\n\tSND_CHMAP_FC,\t\t/**< front center */\n\tSND_CHMAP_LFE,\t\t/**< LFE */\n\tSND_CHMAP_SL,\t\t/**< side left */\n\tSND_CHMAP_SR,\t\t/**< side right */\n\tSND_CHMAP_RC,\t\t/**< rear center */\n\tSND_CHMAP_FLC,\t\t/**< front left center */\n\tSND_CHMAP_FRC,\t\t/**< front right center */\n\tSND_CHMAP_RLC,\t\t/**< rear left center */\n\tSND_CHMAP_RRC,\t\t/**< rear right center */\n\tSND_CHMAP_FLW,\t\t/**< front left wide */\n\tSND_CHMAP_FRW,\t\t/**< front right wide */\n\tSND_CHMAP_FLH,\t\t/**< front left high */\n\tSND_CHMAP_FCH,\t\t/**< front center high */\n\tSND_CHMAP_FRH,\t\t/**< front right high */\n\tSND_CHMAP_TC,\t\t/**< top center */\n\tSND_CHMAP_TFL,\t\t/**< top front left */\n\tSND_CHMAP_TFR,\t\t/**< top front right */\n\tSND_CHMAP_TFC,\t\t/**< top front center */\n\tSND_CHMAP_TRL,\t\t/**< top rear left */\n\tSND_CHMAP_TRR,\t\t/**< top rear right */\n\tSND_CHMAP_TRC,\t\t/**< top rear center */\n\tSND_CHMAP_TFLC,\t\t/**< top front left center */\n\tSND_CHMAP_TFRC,\t\t/**< top front right center */\n\tSND_CHMAP_TSL,\t\t/**< top side left */\n\tSND_CHMAP_TSR,\t\t/**< top side right */\n\tSND_CHMAP_LLFE,\t\t/**< left LFE */\n\tSND_CHMAP_RLFE,\t\t/**< right LFE */\n\tSND_CHMAP_BC,\t\t/**< bottom center */\n\tSND_CHMAP_BLC,\t\t/**< bottom left center */\n\tSND_CHMAP_BRC,\t\t/**< bottom right center */\n\tSND_CHMAP_LAST = SND_CHMAP_BRC,\n};\n\n/** bitmask for channel position */\n#define SND_CHMAP_POSITION_MASK\t\t0xffff\n\n/** bit flag indicating the channel is phase inverted */\n#define SND_CHMAP_PHASE_INVERSE\t\t(0x01 << 16)\n/** bit flag indicating the non-standard channel value */\n#define SND_CHMAP_DRIVER_SPEC\t\t(0x02 << 16)\n\n/** the channel map header */\ntypedef struct snd_pcm_chmap {\n\tunsigned int channels;\t/**< number of channels */\n\tunsigned int pos[0];\t/**< channel position array */\n} snd_pcm_chmap_t;\n\n/** the header of array items returned from snd_pcm_query_chmaps() */\ntypedef struct snd_pcm_chmap_query {\n\tenum snd_pcm_chmap_type type;\t/**< channel map type */\n\tsnd_pcm_chmap_t map;\t\t/**< available channel map */\n} snd_pcm_chmap_query_t;\n\n\nsnd_pcm_chmap_query_t **snd_pcm_query_chmaps(snd_pcm_t *pcm);\nsnd_pcm_chmap_query_t **snd_pcm_query_chmaps_from_hw(int card, int dev,\n\t\t\t\t\t\t     int subdev,\n\t\t\t\t\t\t     snd_pcm_stream_t stream);\nvoid snd_pcm_free_chmaps(snd_pcm_chmap_query_t **maps);\nsnd_pcm_chmap_t *snd_pcm_get_chmap(snd_pcm_t *pcm);\nint snd_pcm_set_chmap(snd_pcm_t *pcm, const snd_pcm_chmap_t *map);\n\nconst char *snd_pcm_chmap_type_name(enum snd_pcm_chmap_type val);\nconst char *snd_pcm_chmap_name(enum snd_pcm_chmap_position val);\nconst char *snd_pcm_chmap_long_name(enum snd_pcm_chmap_position val);\nint snd_pcm_chmap_print(const snd_pcm_chmap_t *map, size_t maxlen, char *buf);\nunsigned int snd_pcm_chmap_from_string(const char *str);\nsnd_pcm_chmap_t *snd_pcm_chmap_parse_string(const char *str);\n\n//int snd_pcm_mixer_element(snd_pcm_t *pcm, snd_mixer_t *mixer, snd_mixer_elem_t **elem);\n\n/*\n * application helpers - these functions are implemented on top\n * of the basic API\n */\n\nint snd_pcm_recover(snd_pcm_t *pcm, int err, int silent);\nint snd_pcm_set_params(snd_pcm_t *pcm,\n                       snd_pcm_format_t format,\n                       snd_pcm_access_t access,\n                       unsigned int channels,\n                       unsigned int rate,\n                       int soft_resample,\n                       unsigned int latency);\nint snd_pcm_get_params(snd_pcm_t *pcm,\n                       snd_pcm_uframes_t *buffer_size,\n                       snd_pcm_uframes_t *period_size);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Info Stream Information\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_info_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_pcm_info_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_info_alloca(ptr) __snd_alloca(ptr, snd_pcm_info)\nint snd_pcm_info_malloc(snd_pcm_info_t **ptr);\nvoid snd_pcm_info_free(snd_pcm_info_t *obj);\nvoid snd_pcm_info_copy(snd_pcm_info_t *dst, const snd_pcm_info_t *src);\nunsigned int snd_pcm_info_get_device(const snd_pcm_info_t *obj);\nunsigned int snd_pcm_info_get_subdevice(const snd_pcm_info_t *obj);\nsnd_pcm_stream_t snd_pcm_info_get_stream(const snd_pcm_info_t *obj);\nint snd_pcm_info_get_card(const snd_pcm_info_t *obj);\nconst char *snd_pcm_info_get_id(const snd_pcm_info_t *obj);\nconst char *snd_pcm_info_get_name(const snd_pcm_info_t *obj);\nconst char *snd_pcm_info_get_subdevice_name(const snd_pcm_info_t *obj);\nsnd_pcm_class_t snd_pcm_info_get_class(const snd_pcm_info_t *obj);\nsnd_pcm_subclass_t snd_pcm_info_get_subclass(const snd_pcm_info_t *obj);\nunsigned int snd_pcm_info_get_subdevices_count(const snd_pcm_info_t *obj);\nunsigned int snd_pcm_info_get_subdevices_avail(const snd_pcm_info_t *obj);\nsnd_pcm_sync_id_t snd_pcm_info_get_sync(const snd_pcm_info_t *obj);\nvoid snd_pcm_info_set_device(snd_pcm_info_t *obj, unsigned int val);\nvoid snd_pcm_info_set_subdevice(snd_pcm_info_t *obj, unsigned int val);\nvoid snd_pcm_info_set_stream(snd_pcm_info_t *obj, snd_pcm_stream_t val);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_HW_Params Hardware Parameters\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nint snd_pcm_hw_params_any(snd_pcm_t *pcm, snd_pcm_hw_params_t *params);\n\nint snd_pcm_hw_params_can_mmap_sample_resolution(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_double(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_batch(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_block_transfer(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_monotonic(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_can_overrange(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_can_pause(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_can_resume(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_half_duplex(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_is_joint_duplex(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_can_sync_start(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_can_disable_period_wakeup(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_supports_audio_wallclock_ts(const snd_pcm_hw_params_t *params); /* deprecated, use audio_ts_type */\nint snd_pcm_hw_params_supports_audio_ts_type(const snd_pcm_hw_params_t *params, int type);\nint snd_pcm_hw_params_get_rate_numden(const snd_pcm_hw_params_t *params,\n\t\t\t\t      unsigned int *rate_num,\n\t\t\t\t      unsigned int *rate_den);\nint snd_pcm_hw_params_get_sbits(const snd_pcm_hw_params_t *params);\nint snd_pcm_hw_params_get_fifo_size(const snd_pcm_hw_params_t *params);\n\n#if 0\ntypedef struct _snd_pcm_hw_strategy snd_pcm_hw_strategy_t;\n\n/* choices need to be sorted on ascending badness */\ntypedef struct _snd_pcm_hw_strategy_simple_choices_list {\n\tunsigned int value;\n\tunsigned int badness;\n} snd_pcm_hw_strategy_simple_choices_list_t;\n\nint snd_pcm_hw_params_strategy(snd_pcm_t *pcm, snd_pcm_hw_params_t *params,\n\t\t\t       const snd_pcm_hw_strategy_t *strategy,\n\t\t\t       unsigned int badness_min,\n\t\t\t       unsigned int badness_max);\n\nvoid snd_pcm_hw_strategy_free(snd_pcm_hw_strategy_t *strategy);\nint snd_pcm_hw_strategy_simple(snd_pcm_hw_strategy_t **strategyp,\n\t\t\t       unsigned int badness_min,\n\t\t\t       unsigned int badness_max);\nint snd_pcm_hw_params_try_explain_failure(snd_pcm_t *pcm,\n\t\t\t\t\t  snd_pcm_hw_params_t *fail,\n\t\t\t\t\t  snd_pcm_hw_params_t *success,\n\t\t\t\t\t  unsigned int depth,\n\t\t\t\t\t  snd_output_t *out);\n\n#endif\n\nsize_t snd_pcm_hw_params_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_pcm_hw_params_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_hw_params_alloca(ptr) __snd_alloca(ptr, snd_pcm_hw_params)\nint snd_pcm_hw_params_malloc(snd_pcm_hw_params_t **ptr);\nvoid snd_pcm_hw_params_free(snd_pcm_hw_params_t *obj);\nvoid snd_pcm_hw_params_copy(snd_pcm_hw_params_t *dst, const snd_pcm_hw_params_t *src);\n\n#if !defined(ALSA_LIBRARY_BUILD) && !defined(ALSA_PCM_OLD_HW_PARAMS_API)\n\nint snd_pcm_hw_params_get_access(const snd_pcm_hw_params_t *params, snd_pcm_access_t *_access);\nint snd_pcm_hw_params_test_access(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t _access);\nint snd_pcm_hw_params_set_access(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t _access);\nint snd_pcm_hw_params_set_access_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t *_access);\nint snd_pcm_hw_params_set_access_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t *_access);\nint snd_pcm_hw_params_set_access_mask(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_mask_t *mask);\nint snd_pcm_hw_params_get_access_mask(snd_pcm_hw_params_t *params, snd_pcm_access_mask_t *mask);\n\nint snd_pcm_hw_params_get_format(const snd_pcm_hw_params_t *params, snd_pcm_format_t *val);\nint snd_pcm_hw_params_test_format(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t val);\nint snd_pcm_hw_params_set_format(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t val);\nint snd_pcm_hw_params_set_format_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t *format);\nint snd_pcm_hw_params_set_format_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t *format);\nint snd_pcm_hw_params_set_format_mask(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_mask_t *mask);\nvoid snd_pcm_hw_params_get_format_mask(snd_pcm_hw_params_t *params, snd_pcm_format_mask_t *mask);\n\nint snd_pcm_hw_params_get_subformat(const snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat);\nint snd_pcm_hw_params_test_subformat(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t subformat);\nint snd_pcm_hw_params_set_subformat(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t subformat);\nint snd_pcm_hw_params_set_subformat_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat);\nint snd_pcm_hw_params_set_subformat_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat);\nint snd_pcm_hw_params_set_subformat_mask(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_mask_t *mask);\nvoid snd_pcm_hw_params_get_subformat_mask(snd_pcm_hw_params_t *params, snd_pcm_subformat_mask_t *mask);\n\nint snd_pcm_hw_params_get_channels(const snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_get_channels_min(const snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_get_channels_max(const snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_test_channels(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val);\nint snd_pcm_hw_params_set_channels(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val);\nint snd_pcm_hw_params_set_channels_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_channels_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_channels_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, unsigned int *max);\nint snd_pcm_hw_params_set_channels_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_channels_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_channels_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\n\nint snd_pcm_hw_params_get_rate(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_rate_min(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_rate_max(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_test_rate(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_rate(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_rate_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_rate_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_rate_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir);\nint snd_pcm_hw_params_set_rate_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_rate_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_rate_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_rate_resample(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val);\nint snd_pcm_hw_params_get_rate_resample(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_export_buffer(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val);\nint snd_pcm_hw_params_get_export_buffer(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\nint snd_pcm_hw_params_set_period_wakeup(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val);\nint snd_pcm_hw_params_get_period_wakeup(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val);\n\nint snd_pcm_hw_params_get_period_time(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_period_time_min(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_period_time_max(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_test_period_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_period_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_period_time_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_period_time_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_period_time_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir);\nint snd_pcm_hw_params_set_period_time_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_period_time_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_period_time_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\n\nint snd_pcm_hw_params_get_period_size(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir);\nint snd_pcm_hw_params_get_period_size_min(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir);\nint snd_pcm_hw_params_get_period_size_max(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir);\nint snd_pcm_hw_params_test_period_size(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val, int dir);\nint snd_pcm_hw_params_set_period_size(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val, int dir);\nint snd_pcm_hw_params_set_period_size_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir);\nint snd_pcm_hw_params_set_period_size_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir);\nint snd_pcm_hw_params_set_period_size_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *min, int *mindir, snd_pcm_uframes_t *max, int *maxdir);\nint snd_pcm_hw_params_set_period_size_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir);\nint snd_pcm_hw_params_set_period_size_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir);\nint snd_pcm_hw_params_set_period_size_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir);\nint snd_pcm_hw_params_set_period_size_integer(snd_pcm_t *pcm, snd_pcm_hw_params_t *params);\n\nint snd_pcm_hw_params_get_periods(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_periods_min(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_periods_max(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_test_periods(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_periods(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_periods_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_periods_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_periods_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir);\nint snd_pcm_hw_params_set_periods_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_periods_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_periods_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_periods_integer(snd_pcm_t *pcm, snd_pcm_hw_params_t *params);\n\nint snd_pcm_hw_params_get_buffer_time(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_buffer_time_min(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_get_buffer_time_max(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_test_buffer_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_buffer_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir);\nint snd_pcm_hw_params_set_buffer_time_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_buffer_time_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_buffer_time_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir);\nint snd_pcm_hw_params_set_buffer_time_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_buffer_time_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\nint snd_pcm_hw_params_set_buffer_time_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir);\n\nint snd_pcm_hw_params_get_buffer_size(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_get_buffer_size_min(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_get_buffer_size_max(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_test_buffer_size(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_hw_params_set_buffer_size(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_hw_params_set_buffer_size_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_set_buffer_size_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_set_buffer_size_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *min, snd_pcm_uframes_t *max);\nint snd_pcm_hw_params_set_buffer_size_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_set_buffer_size_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_hw_params_set_buffer_size_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\n\n#endif /* !ALSA_LIBRARY_BUILD && !ALSA_PCM_OLD_HW_PARAMS_API */\n\nint snd_pcm_hw_params_get_min_align(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_SW_Params Software Parameters\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_sw_params_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_pcm_sw_params_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_sw_params_alloca(ptr) __snd_alloca(ptr, snd_pcm_sw_params)\nint snd_pcm_sw_params_malloc(snd_pcm_sw_params_t **ptr);\nvoid snd_pcm_sw_params_free(snd_pcm_sw_params_t *obj);\nvoid snd_pcm_sw_params_copy(snd_pcm_sw_params_t *dst, const snd_pcm_sw_params_t *src);\nint snd_pcm_sw_params_get_boundary(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val);\n\n#if !defined(ALSA_LIBRARY_BUILD) && !defined(ALSA_PCM_OLD_SW_PARAMS_API)\n\nint snd_pcm_sw_params_set_tstamp_mode(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_t val);\nint snd_pcm_sw_params_get_tstamp_mode(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_t *val);\nint snd_pcm_sw_params_set_tstamp_type(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t val);\nint snd_pcm_sw_params_get_tstamp_type(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t *val);\nint snd_pcm_sw_params_set_avail_min(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_sw_params_get_avail_min(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_sw_params_set_period_event(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, int val);\nint snd_pcm_sw_params_get_period_event(const snd_pcm_sw_params_t *params, int *val);\nint snd_pcm_sw_params_set_start_threshold(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_sw_params_get_start_threshold(const snd_pcm_sw_params_t *paramsm, snd_pcm_uframes_t *val);\nint snd_pcm_sw_params_set_stop_threshold(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_sw_params_get_stop_threshold(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_sw_params_set_silence_threshold(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_sw_params_get_silence_threshold(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val);\nint snd_pcm_sw_params_set_silence_size(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val);\nint snd_pcm_sw_params_get_silence_size(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val);\n\n#endif /* !ALSA_LIBRARY_BUILD && !ALSA_PCM_OLD_SW_PARAMS_API */\n\n/** \\} */\n\n/* include old API */\n#ifndef ALSA_LIBRARY_BUILD\n#if defined(ALSA_PCM_OLD_HW_PARAMS_API) || defined(ALSA_PCM_OLD_SW_PARAMS_API)\n#include \"pcm_old.h\"\n#endif\n#endif\n\n/**\n * \\defgroup PCM_Access Access Mask Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_access_mask_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an empty #snd_pcm_access_mask_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_access_mask_alloca(ptr) __snd_alloca(ptr, snd_pcm_access_mask)\nint snd_pcm_access_mask_malloc(snd_pcm_access_mask_t **ptr);\nvoid snd_pcm_access_mask_free(snd_pcm_access_mask_t *obj);\nvoid snd_pcm_access_mask_copy(snd_pcm_access_mask_t *dst, const snd_pcm_access_mask_t *src);\nvoid snd_pcm_access_mask_none(snd_pcm_access_mask_t *mask);\nvoid snd_pcm_access_mask_any(snd_pcm_access_mask_t *mask);\nint snd_pcm_access_mask_test(const snd_pcm_access_mask_t *mask, snd_pcm_access_t val);\nint snd_pcm_access_mask_empty(const snd_pcm_access_mask_t *mask);\nvoid snd_pcm_access_mask_set(snd_pcm_access_mask_t *mask, snd_pcm_access_t val);\nvoid snd_pcm_access_mask_reset(snd_pcm_access_mask_t *mask, snd_pcm_access_t val);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Format Format Mask Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_format_mask_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an empty #snd_pcm_format_mask_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_format_mask_alloca(ptr) __snd_alloca(ptr, snd_pcm_format_mask)\nint snd_pcm_format_mask_malloc(snd_pcm_format_mask_t **ptr);\nvoid snd_pcm_format_mask_free(snd_pcm_format_mask_t *obj);\nvoid snd_pcm_format_mask_copy(snd_pcm_format_mask_t *dst, const snd_pcm_format_mask_t *src);\nvoid snd_pcm_format_mask_none(snd_pcm_format_mask_t *mask);\nvoid snd_pcm_format_mask_any(snd_pcm_format_mask_t *mask);\nint snd_pcm_format_mask_test(const snd_pcm_format_mask_t *mask, snd_pcm_format_t val);\nint snd_pcm_format_mask_empty(const snd_pcm_format_mask_t *mask);\nvoid snd_pcm_format_mask_set(snd_pcm_format_mask_t *mask, snd_pcm_format_t val);\nvoid snd_pcm_format_mask_reset(snd_pcm_format_mask_t *mask, snd_pcm_format_t val);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_SubFormat Subformat Mask Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_subformat_mask_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an empty #snd_pcm_subformat_mask_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_subformat_mask_alloca(ptr) __snd_alloca(ptr, snd_pcm_subformat_mask)\nint snd_pcm_subformat_mask_malloc(snd_pcm_subformat_mask_t **ptr);\nvoid snd_pcm_subformat_mask_free(snd_pcm_subformat_mask_t *obj);\nvoid snd_pcm_subformat_mask_copy(snd_pcm_subformat_mask_t *dst, const snd_pcm_subformat_mask_t *src);\nvoid snd_pcm_subformat_mask_none(snd_pcm_subformat_mask_t *mask);\nvoid snd_pcm_subformat_mask_any(snd_pcm_subformat_mask_t *mask);\nint snd_pcm_subformat_mask_test(const snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val);\nint snd_pcm_subformat_mask_empty(const snd_pcm_subformat_mask_t *mask);\nvoid snd_pcm_subformat_mask_set(snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val);\nvoid snd_pcm_subformat_mask_reset(snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Status Status Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nsize_t snd_pcm_status_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_pcm_status_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_pcm_status_alloca(ptr) __snd_alloca(ptr, snd_pcm_status)\nint snd_pcm_status_malloc(snd_pcm_status_t **ptr);\nvoid snd_pcm_status_free(snd_pcm_status_t *obj);\nvoid snd_pcm_status_copy(snd_pcm_status_t *dst, const snd_pcm_status_t *src);\nsnd_pcm_state_t snd_pcm_status_get_state(const snd_pcm_status_t *obj);\nvoid snd_pcm_status_get_trigger_tstamp(const snd_pcm_status_t *obj, snd_timestamp_t *ptr);\nvoid snd_pcm_status_get_trigger_htstamp(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr);\nvoid snd_pcm_status_get_tstamp(const snd_pcm_status_t *obj, snd_timestamp_t *ptr);\nvoid snd_pcm_status_get_htstamp(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr);\nvoid snd_pcm_status_get_audio_htstamp(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr);\nvoid snd_pcm_status_get_driver_htstamp(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr);\nvoid snd_pcm_status_get_audio_htstamp_report(const snd_pcm_status_t *obj,\n\t\t\t\t\t     snd_pcm_audio_tstamp_report_t *audio_tstamp_report);\nvoid snd_pcm_status_set_audio_htstamp_config(snd_pcm_status_t *obj,\n\t\t\t\t\t     snd_pcm_audio_tstamp_config_t *audio_tstamp_config);\n\nstatic inline void snd_pcm_pack_audio_tstamp_config(unsigned int *data,\n\t\t\t\t\t\tsnd_pcm_audio_tstamp_config_t *config)\n{\n\t*data = config->report_delay;\n\t*data <<= 4;\n\t*data |= config->type_requested;\n}\n\nstatic inline void snd_pcm_unpack_audio_tstamp_report(unsigned int data, unsigned int accuracy,\n\t\t\t\t\t\tsnd_pcm_audio_tstamp_report_t *report)\n{\n\tdata >>= 16;\n\treport->valid = data & 1;\n\treport->actual_type = (data >> 1) & 0xF;\n\treport->accuracy_report = (data >> 5) & 1;\n\treport->accuracy = accuracy;\n}\n\nsnd_pcm_sframes_t snd_pcm_status_get_delay(const snd_pcm_status_t *obj);\nsnd_pcm_uframes_t snd_pcm_status_get_avail(const snd_pcm_status_t *obj);\nsnd_pcm_uframes_t snd_pcm_status_get_avail_max(const snd_pcm_status_t *obj);\nsnd_pcm_uframes_t snd_pcm_status_get_overrange(const snd_pcm_status_t *obj);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Description Description Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nconst char *snd_pcm_type_name(snd_pcm_type_t type);\nconst char *snd_pcm_stream_name(const snd_pcm_stream_t stream);\nconst char *snd_pcm_access_name(const snd_pcm_access_t _access);\nconst char *snd_pcm_format_name(const snd_pcm_format_t format);\nconst char *snd_pcm_format_description(const snd_pcm_format_t format);\nconst char *snd_pcm_subformat_name(const snd_pcm_subformat_t subformat);\nconst char *snd_pcm_subformat_description(const snd_pcm_subformat_t subformat);\nsnd_pcm_format_t snd_pcm_format_value(const char* name);\nconst char *snd_pcm_tstamp_mode_name(const snd_pcm_tstamp_t mode);\nconst char *snd_pcm_state_name(const snd_pcm_state_t state);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Dump Debug Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nint snd_pcm_dump(snd_pcm_t *pcm, snd_output_t *out);\nint snd_pcm_dump_hw_setup(snd_pcm_t *pcm, snd_output_t *out);\nint snd_pcm_dump_sw_setup(snd_pcm_t *pcm, snd_output_t *out);\nint snd_pcm_dump_setup(snd_pcm_t *pcm, snd_output_t *out);\nint snd_pcm_hw_params_dump(snd_pcm_hw_params_t *params, snd_output_t *out);\nint snd_pcm_sw_params_dump(snd_pcm_sw_params_t *params, snd_output_t *out);\nint snd_pcm_status_dump(snd_pcm_status_t *status, snd_output_t *out);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Direct Direct Access (MMAP) Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nint snd_pcm_mmap_begin(snd_pcm_t *pcm,\n\t\t       const snd_pcm_channel_area_t **areas,\n\t\t       snd_pcm_uframes_t *offset,\n\t\t       snd_pcm_uframes_t *frames);\nsnd_pcm_sframes_t snd_pcm_mmap_commit(snd_pcm_t *pcm,\n\t\t\t\t      snd_pcm_uframes_t offset,\n\t\t\t\t      snd_pcm_uframes_t frames);\nsnd_pcm_sframes_t snd_pcm_mmap_writei(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_mmap_readi(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_mmap_writen(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size);\nsnd_pcm_sframes_t snd_pcm_mmap_readn(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size);                                                                \n\n/** \\} */\n\n/**\n * \\defgroup PCM_Helpers Helper Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\nint snd_pcm_format_signed(snd_pcm_format_t format);\nint snd_pcm_format_unsigned(snd_pcm_format_t format);\nint snd_pcm_format_linear(snd_pcm_format_t format);\nint snd_pcm_format_float(snd_pcm_format_t format);\nint snd_pcm_format_little_endian(snd_pcm_format_t format);\nint snd_pcm_format_big_endian(snd_pcm_format_t format);\nint snd_pcm_format_cpu_endian(snd_pcm_format_t format);\nint snd_pcm_format_width(snd_pcm_format_t format);\t\t\t/* in bits */\nint snd_pcm_format_physical_width(snd_pcm_format_t format);\t\t/* in bits */\nsnd_pcm_format_t snd_pcm_build_linear_format(int width, int pwidth, int unsignd, int big_endian);\nssize_t snd_pcm_format_size(snd_pcm_format_t format, size_t samples);\nu_int8_t snd_pcm_format_silence(snd_pcm_format_t format);\nu_int16_t snd_pcm_format_silence_16(snd_pcm_format_t format);\nu_int32_t snd_pcm_format_silence_32(snd_pcm_format_t format);\nu_int64_t snd_pcm_format_silence_64(snd_pcm_format_t format);\nint snd_pcm_format_set_silence(snd_pcm_format_t format, void *buf, unsigned int samples);\n\nsnd_pcm_sframes_t snd_pcm_bytes_to_frames(snd_pcm_t *pcm, ssize_t bytes);\nssize_t snd_pcm_frames_to_bytes(snd_pcm_t *pcm, snd_pcm_sframes_t frames);\nlong snd_pcm_bytes_to_samples(snd_pcm_t *pcm, ssize_t bytes);\nssize_t snd_pcm_samples_to_bytes(snd_pcm_t *pcm, long samples);\n\nint snd_pcm_area_silence(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset,\n\t\t\t unsigned int samples, snd_pcm_format_t format);\nint snd_pcm_areas_silence(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset,\n\t\t\t  unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format);\nint snd_pcm_area_copy(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset,\n\t\t      const snd_pcm_channel_area_t *src_channel, snd_pcm_uframes_t src_offset,\n\t\t      unsigned int samples, snd_pcm_format_t format);\nint snd_pcm_areas_copy(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset,\n\t\t       const snd_pcm_channel_area_t *src_channels, snd_pcm_uframes_t src_offset,\n\t\t       unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Hook Hook Extension\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\n/** type of pcm hook */\ntypedef enum _snd_pcm_hook_type {\n\tSND_PCM_HOOK_TYPE_HW_PARAMS = 0,\n\tSND_PCM_HOOK_TYPE_HW_FREE,\n\tSND_PCM_HOOK_TYPE_CLOSE,\n\tSND_PCM_HOOK_TYPE_LAST = SND_PCM_HOOK_TYPE_CLOSE\n} snd_pcm_hook_type_t;\n\n/** PCM hook container */\ntypedef struct _snd_pcm_hook snd_pcm_hook_t;\n/** PCM hook callback function */\ntypedef int (*snd_pcm_hook_func_t)(snd_pcm_hook_t *hook);\nsnd_pcm_t *snd_pcm_hook_get_pcm(snd_pcm_hook_t *hook);\nvoid *snd_pcm_hook_get_private(snd_pcm_hook_t *hook);\nvoid snd_pcm_hook_set_private(snd_pcm_hook_t *hook, void *private_data);\nint snd_pcm_hook_add(snd_pcm_hook_t **hookp, snd_pcm_t *pcm,\n\t\t     snd_pcm_hook_type_t type,\n\t\t     snd_pcm_hook_func_t func, void *private_data);\nint snd_pcm_hook_remove(snd_pcm_hook_t *hook);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Scope Scope Plugin Extension\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\n/** #SND_PCM_TYPE_METER scope functions */\ntypedef struct _snd_pcm_scope_ops {\n\t/** \\brief Enable and prepare it using current params\n\t * \\param scope scope handle\n\t */\n\tint (*enable)(snd_pcm_scope_t *scope);\n\t/** \\brief Disable\n\t * \\param scope scope handle\n\t */\n\tvoid (*disable)(snd_pcm_scope_t *scope);\n\t/** \\brief PCM has been started\n\t * \\param scope scope handle\n\t */\n\tvoid (*start)(snd_pcm_scope_t *scope);\n\t/** \\brief PCM has been stopped\n\t * \\param scope scope handle\n\t */\n\tvoid (*stop)(snd_pcm_scope_t *scope);\n\t/** \\brief New frames are present\n\t * \\param scope scope handle\n\t */\n\tvoid (*update)(snd_pcm_scope_t *scope);\n\t/** \\brief Reset status\n\t * \\param scope scope handle\n\t */\n\tvoid (*reset)(snd_pcm_scope_t *scope);\n\t/** \\brief PCM is closing\n\t * \\param scope scope handle\n\t */\n\tvoid (*close)(snd_pcm_scope_t *scope);\n} snd_pcm_scope_ops_t;\n\nsnd_pcm_uframes_t snd_pcm_meter_get_bufsize(snd_pcm_t *pcm);\nunsigned int snd_pcm_meter_get_channels(snd_pcm_t *pcm);\nunsigned int snd_pcm_meter_get_rate(snd_pcm_t *pcm);\nsnd_pcm_uframes_t snd_pcm_meter_get_now(snd_pcm_t *pcm);\nsnd_pcm_uframes_t snd_pcm_meter_get_boundary(snd_pcm_t *pcm);\nint snd_pcm_meter_add_scope(snd_pcm_t *pcm, snd_pcm_scope_t *scope);\nsnd_pcm_scope_t *snd_pcm_meter_search_scope(snd_pcm_t *pcm, const char *name);\nint snd_pcm_scope_malloc(snd_pcm_scope_t **ptr);\nvoid snd_pcm_scope_set_ops(snd_pcm_scope_t *scope,\n\t\t\t   const snd_pcm_scope_ops_t *val);\nvoid snd_pcm_scope_set_name(snd_pcm_scope_t *scope, const char *val);\nconst char *snd_pcm_scope_get_name(snd_pcm_scope_t *scope);\nvoid *snd_pcm_scope_get_callback_private(snd_pcm_scope_t *scope);\nvoid snd_pcm_scope_set_callback_private(snd_pcm_scope_t *scope, void *val);\nint snd_pcm_scope_s16_open(snd_pcm_t *pcm, const char *name,\n\t\t\t   snd_pcm_scope_t **scopep);\nint16_t *snd_pcm_scope_s16_get_channel_buffer(snd_pcm_scope_t *scope,\n\t\t\t\t\t      unsigned int channel);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Simple Simple setup functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\n/** Simple PCM latency type */\ntypedef enum _snd_spcm_latency {\n\t/** standard latency - for standard playback or capture\n            (estimated latency in one direction 350ms) */\n\tSND_SPCM_LATENCY_STANDARD = 0,\n\t/** medium latency - software phones etc.\n\t    (estimated latency in one direction maximally 25ms */\n\tSND_SPCM_LATENCY_MEDIUM,\n\t/** realtime latency - realtime applications (effect processors etc.)\n\t    (estimated latency in one direction 5ms and better) */\n\tSND_SPCM_LATENCY_REALTIME\n} snd_spcm_latency_t;\n\n/** Simple PCM xrun type */\ntypedef enum _snd_spcm_xrun_type {\n\t/** driver / library will ignore all xruns, the stream runs forever */\n\tSND_SPCM_XRUN_IGNORE = 0,\n\t/** driver / library stops the stream when an xrun occurs */\n\tSND_SPCM_XRUN_STOP\n} snd_spcm_xrun_type_t;\n\n/** Simple PCM duplex type */\ntypedef enum _snd_spcm_duplex_type {\n\t/** liberal duplex - the buffer and period sizes might not match */\n\tSND_SPCM_DUPLEX_LIBERAL = 0,\n\t/** pedantic duplex - the buffer and period sizes MUST match */\n\tSND_SPCM_DUPLEX_PEDANTIC\n} snd_spcm_duplex_type_t;\n\nint snd_spcm_init(snd_pcm_t *pcm,\n\t\t  unsigned int rate,\n\t\t  unsigned int channels,\n\t\t  snd_pcm_format_t format,\n\t\t  snd_pcm_subformat_t subformat,\n\t\t  snd_spcm_latency_t latency,\n\t\t  snd_pcm_access_t _access,\n\t\t  snd_spcm_xrun_type_t xrun_type);\n\nint snd_spcm_init_duplex(snd_pcm_t *playback_pcm,\n\t\t\t snd_pcm_t *capture_pcm,\n\t\t\t unsigned int rate,\n\t\t\t unsigned int channels,\n\t\t\t snd_pcm_format_t format,\n\t\t\t snd_pcm_subformat_t subformat,\n\t\t\t snd_spcm_latency_t latency,\n\t\t\t snd_pcm_access_t _access,\n\t\t\t snd_spcm_xrun_type_t xrun_type,\n\t\t\t snd_spcm_duplex_type_t duplex_type);\n\nint snd_spcm_init_get_params(snd_pcm_t *pcm,\n\t\t\t     unsigned int *rate,\n\t\t\t     snd_pcm_uframes_t *buffer_size,\n\t\t\t     snd_pcm_uframes_t *period_size);\n\n/** \\} */\n\n/**\n * \\defgroup PCM_Deprecated Deprecated Functions\n * \\ingroup PCM\n * See the \\ref pcm page for more details.\n * \\{\n */\n\n/* Deprecated functions, for compatibility */\nconst char *snd_pcm_start_mode_name(snd_pcm_start_t mode) __attribute__((deprecated));\nconst char *snd_pcm_xrun_mode_name(snd_pcm_xrun_t mode) __attribute__((deprecated));\nint snd_pcm_sw_params_set_start_mode(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_start_t val) __attribute__((deprecated));\nsnd_pcm_start_t snd_pcm_sw_params_get_start_mode(const snd_pcm_sw_params_t *params) __attribute__((deprecated));\nint snd_pcm_sw_params_set_xrun_mode(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_xrun_t val) __attribute__((deprecated));\nsnd_pcm_xrun_t snd_pcm_sw_params_get_xrun_mode(const snd_pcm_sw_params_t *params) __attribute__((deprecated));\n#if !defined(ALSA_LIBRARY_BUILD) && !defined(ALSA_PCM_OLD_SW_PARAMS_API)\nint snd_pcm_sw_params_set_xfer_align(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val) __attribute__((deprecated));\nint snd_pcm_sw_params_get_xfer_align(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val) __attribute__((deprecated));\nint snd_pcm_sw_params_set_sleep_min(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, unsigned int val) __attribute__((deprecated));\nint snd_pcm_sw_params_get_sleep_min(const snd_pcm_sw_params_t *params, unsigned int *val) __attribute__((deprecated));\n#endif /* !ALSA_LIBRARY_BUILD && !ALSA_PCM_OLD_SW_PARAMS_API */\n#if !defined(ALSA_LIBRARY_BUILD) && !defined(ALSA_PCM_OLD_HW_PARAMS_API)\nint snd_pcm_hw_params_get_tick_time(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_get_tick_time_min(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_get_tick_time_max(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_test_tick_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_min(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_max(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_minmax(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_near(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_first(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\nint snd_pcm_hw_params_set_tick_time_last(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated));\n#endif /* !ALSA_LIBRARY_BUILD && !ALSA_PCM_OLD_HW_PARAMS_API */\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __ALSA_PCM_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/timer.h": "/**\n * \\file include/timer.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_TIMER_H\n#define __ALSA_TIMER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup Timer Timer Interface\n *  Timer Interface. See \\ref timer page for more details.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_TIMER_DLSYM_VERSION\t\t_dlsym_timer_001\n/** dlsym version for interface entry callback */\n#define SND_TIMER_QUERY_DLSYM_VERSION\t_dlsym_timer_query_001\n\n/** timer identification structure */\ntypedef struct _snd_timer_id snd_timer_id_t;\n/** timer global info structure */\ntypedef struct _snd_timer_ginfo snd_timer_ginfo_t;\n/** timer global params structure */\ntypedef struct _snd_timer_gparams snd_timer_gparams_t;\n/** timer global status structure */\ntypedef struct _snd_timer_gstatus snd_timer_gstatus_t;\n/** timer info structure */\ntypedef struct _snd_timer_info snd_timer_info_t;\n/** timer params structure */\ntypedef struct _snd_timer_params snd_timer_params_t;\n/** timer status structure */\ntypedef struct _snd_timer_status snd_timer_status_t;\n/** timer master class */\ntypedef enum _snd_timer_class {\n\tSND_TIMER_CLASS_NONE = -1,\t/**< invalid */\n\tSND_TIMER_CLASS_SLAVE = 0,\t/**< slave timer */\n\tSND_TIMER_CLASS_GLOBAL,\t\t/**< global timer */\n\tSND_TIMER_CLASS_CARD,\t\t/**< card timer */\n\tSND_TIMER_CLASS_PCM,\t\t/**< PCM timer */\n\tSND_TIMER_CLASS_LAST = SND_TIMER_CLASS_PCM\t/**< last timer */\n} snd_timer_class_t;\n\n/** timer slave class */\ntypedef enum _snd_timer_slave_class {\n\tSND_TIMER_SCLASS_NONE = 0,\t\t/**< none */\n\tSND_TIMER_SCLASS_APPLICATION,\t\t/**< for internal use */\n\tSND_TIMER_SCLASS_SEQUENCER,\t\t/**< sequencer timer */\n\tSND_TIMER_SCLASS_OSS_SEQUENCER,\t\t/**< OSS sequencer timer */\n\tSND_TIMER_SCLASS_LAST = SND_TIMER_SCLASS_OSS_SEQUENCER\t/**< last slave timer */\n} snd_timer_slave_class_t;\n\n/** timer read event identification */\ntypedef enum _snd_timer_event {\n\tSND_TIMER_EVENT_RESOLUTION = 0,\t/* val = resolution in ns */\n\tSND_TIMER_EVENT_TICK,\t\t/* val = ticks */\n\tSND_TIMER_EVENT_START,\t\t/* val = resolution in ns */\n\tSND_TIMER_EVENT_STOP,\t\t/* val = 0 */\n\tSND_TIMER_EVENT_CONTINUE,\t/* val = resolution in ns */\n\tSND_TIMER_EVENT_PAUSE,\t\t/* val = 0 */\n\tSND_TIMER_EVENT_EARLY,\t\t/* val = 0 */\n\tSND_TIMER_EVENT_SUSPEND,\t/* val = 0 */\n\tSND_TIMER_EVENT_RESUME,\t\t/* val = resolution in ns */\n\t/* master timer events for slave timer instances */\n\tSND_TIMER_EVENT_MSTART = SND_TIMER_EVENT_START + 10,\n\tSND_TIMER_EVENT_MSTOP = SND_TIMER_EVENT_STOP + 10,\n\tSND_TIMER_EVENT_MCONTINUE = SND_TIMER_EVENT_CONTINUE + 10,\n\tSND_TIMER_EVENT_MPAUSE = SND_TIMER_EVENT_PAUSE + 10,\n\tSND_TIMER_EVENT_MSUSPEND = SND_TIMER_EVENT_SUSPEND + 10,\n\tSND_TIMER_EVENT_MRESUME = SND_TIMER_EVENT_RESUME + 10\t\n} snd_timer_event_t;\n\n/** timer read structure */\ntypedef struct _snd_timer_read {\n\tunsigned int resolution;\t/**< tick resolution in nanoseconds */\n        unsigned int ticks;\t\t/**< count of happened ticks */\n} snd_timer_read_t;\n\n/** timer tstamp + event read structure */\ntypedef struct _snd_timer_tread {\n\tsnd_timer_event_t event;\t/**< Timer event */\n\tsnd_htimestamp_t tstamp;\t/**< Time stamp of each event */\n\tunsigned int val;\t\t/**< Event value */\n} snd_timer_tread_t;\n\n/** global timer - system */\n#define SND_TIMER_GLOBAL_SYSTEM 0\n/** global timer - RTC */\n#define SND_TIMER_GLOBAL_RTC\t1\t/* Obsoleted, due to enough legacy. */\n/** global timer - HPET */\n#define SND_TIMER_GLOBAL_HPET\t2\n/** global timer - HRTIMER */\n#define SND_TIMER_GLOBAL_HRTIMER 3\n\n/** timer open mode flag - non-blocking behaviour */\n#define SND_TIMER_OPEN_NONBLOCK\t\t(1<<0)\n/** use timestamps and event notification - enhanced read */\n#define SND_TIMER_OPEN_TREAD\t\t(1<<1)\n\n/** timer handle type */\ntypedef enum _snd_timer_type {\n\t/** Kernel level HwDep */\n\tSND_TIMER_TYPE_HW = 0,\n\t/** Shared memory client timer (not yet implemented) */\n\tSND_TIMER_TYPE_SHM,\n\t/** INET client timer (not yet implemented) */\n\tSND_TIMER_TYPE_INET\n} snd_timer_type_t;\n\n/** timer query handle */\ntypedef struct _snd_timer_query snd_timer_query_t;\n/** timer handle */\ntypedef struct _snd_timer snd_timer_t;\n\n\nint snd_timer_query_open(snd_timer_query_t **handle, const char *name, int mode);\nint snd_timer_query_open_lconf(snd_timer_query_t **handle, const char *name, int mode, snd_config_t *lconf);\nint snd_timer_query_close(snd_timer_query_t *handle);\nint snd_timer_query_next_device(snd_timer_query_t *handle, snd_timer_id_t *tid);\nint snd_timer_query_info(snd_timer_query_t *handle, snd_timer_ginfo_t *info);\nint snd_timer_query_params(snd_timer_query_t *handle, snd_timer_gparams_t *params);\nint snd_timer_query_status(snd_timer_query_t *handle, snd_timer_gstatus_t *status);\n\nint snd_timer_open(snd_timer_t **handle, const char *name, int mode);\nint snd_timer_open_lconf(snd_timer_t **handle, const char *name, int mode, snd_config_t *lconf);\nint snd_timer_close(snd_timer_t *handle);\nint snd_async_add_timer_handler(snd_async_handler_t **handler, snd_timer_t *timer,\n\t\t\t\tsnd_async_callback_t callback, void *private_data);\nsnd_timer_t *snd_async_handler_get_timer(snd_async_handler_t *handler);\nint snd_timer_poll_descriptors_count(snd_timer_t *handle);\nint snd_timer_poll_descriptors(snd_timer_t *handle, struct pollfd *pfds, unsigned int space);\nint snd_timer_poll_descriptors_revents(snd_timer_t *timer, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);\nint snd_timer_info(snd_timer_t *handle, snd_timer_info_t *timer);\nint snd_timer_params(snd_timer_t *handle, snd_timer_params_t *params);\nint snd_timer_status(snd_timer_t *handle, snd_timer_status_t *status);\nint snd_timer_start(snd_timer_t *handle);\nint snd_timer_stop(snd_timer_t *handle);\nint snd_timer_continue(snd_timer_t *handle);\nssize_t snd_timer_read(snd_timer_t *handle, void *buffer, size_t size);\n\nsize_t snd_timer_id_sizeof(void);\n/** allocate #snd_timer_id_t container on stack */\n#define snd_timer_id_alloca(ptr) __snd_alloca(ptr, snd_timer_id)\nint snd_timer_id_malloc(snd_timer_id_t **ptr);\nvoid snd_timer_id_free(snd_timer_id_t *obj);\nvoid snd_timer_id_copy(snd_timer_id_t *dst, const snd_timer_id_t *src);\n\nvoid snd_timer_id_set_class(snd_timer_id_t *id, int dev_class);\nint snd_timer_id_get_class(snd_timer_id_t *id);\nvoid snd_timer_id_set_sclass(snd_timer_id_t *id, int dev_sclass);\nint snd_timer_id_get_sclass(snd_timer_id_t *id);\nvoid snd_timer_id_set_card(snd_timer_id_t *id, int card);\nint snd_timer_id_get_card(snd_timer_id_t *id);\nvoid snd_timer_id_set_device(snd_timer_id_t *id, int device);\nint snd_timer_id_get_device(snd_timer_id_t *id);\nvoid snd_timer_id_set_subdevice(snd_timer_id_t *id, int subdevice);\nint snd_timer_id_get_subdevice(snd_timer_id_t *id);\n\nsize_t snd_timer_ginfo_sizeof(void);\n/** allocate #snd_timer_ginfo_t container on stack */\n#define snd_timer_ginfo_alloca(ptr) __snd_alloca(ptr, snd_timer_ginfo)\nint snd_timer_ginfo_malloc(snd_timer_ginfo_t **ptr);\nvoid snd_timer_ginfo_free(snd_timer_ginfo_t *obj);\nvoid snd_timer_ginfo_copy(snd_timer_ginfo_t *dst, const snd_timer_ginfo_t *src);\n\nint snd_timer_ginfo_set_tid(snd_timer_ginfo_t *obj, snd_timer_id_t *tid);\nsnd_timer_id_t *snd_timer_ginfo_get_tid(snd_timer_ginfo_t *obj);\nunsigned int snd_timer_ginfo_get_flags(snd_timer_ginfo_t *obj);\nint snd_timer_ginfo_get_card(snd_timer_ginfo_t *obj);\nchar *snd_timer_ginfo_get_id(snd_timer_ginfo_t *obj);\nchar *snd_timer_ginfo_get_name(snd_timer_ginfo_t *obj);\nunsigned long snd_timer_ginfo_get_resolution(snd_timer_ginfo_t *obj);\nunsigned long snd_timer_ginfo_get_resolution_min(snd_timer_ginfo_t *obj);\nunsigned long snd_timer_ginfo_get_resolution_max(snd_timer_ginfo_t *obj);\nunsigned int snd_timer_ginfo_get_clients(snd_timer_ginfo_t *obj);\n\nsize_t snd_timer_info_sizeof(void);\n/** allocate #snd_timer_info_t container on stack */\n#define snd_timer_info_alloca(ptr) __snd_alloca(ptr, snd_timer_info)\nint snd_timer_info_malloc(snd_timer_info_t **ptr);\nvoid snd_timer_info_free(snd_timer_info_t *obj);\nvoid snd_timer_info_copy(snd_timer_info_t *dst, const snd_timer_info_t *src);\n\nint snd_timer_info_is_slave(snd_timer_info_t * info);\nint snd_timer_info_get_card(snd_timer_info_t * info);\nconst char *snd_timer_info_get_id(snd_timer_info_t * info);\nconst char *snd_timer_info_get_name(snd_timer_info_t * info);\nlong snd_timer_info_get_resolution(snd_timer_info_t * info);\n\nsize_t snd_timer_params_sizeof(void);\n/** allocate #snd_timer_params_t container on stack */\n#define snd_timer_params_alloca(ptr) __snd_alloca(ptr, snd_timer_params)\nint snd_timer_params_malloc(snd_timer_params_t **ptr);\nvoid snd_timer_params_free(snd_timer_params_t *obj);\nvoid snd_timer_params_copy(snd_timer_params_t *dst, const snd_timer_params_t *src);\n\nint snd_timer_params_set_auto_start(snd_timer_params_t * params, int auto_start);\nint snd_timer_params_get_auto_start(snd_timer_params_t * params);\nint snd_timer_params_set_exclusive(snd_timer_params_t * params, int exclusive);\nint snd_timer_params_get_exclusive(snd_timer_params_t * params);\nint snd_timer_params_set_early_event(snd_timer_params_t * params, int early_event);\nint snd_timer_params_get_early_event(snd_timer_params_t * params);\nvoid snd_timer_params_set_ticks(snd_timer_params_t * params, long ticks);\nlong snd_timer_params_get_ticks(snd_timer_params_t * params);\nvoid snd_timer_params_set_queue_size(snd_timer_params_t * params, long queue_size);\nlong snd_timer_params_get_queue_size(snd_timer_params_t * params);\nvoid snd_timer_params_set_filter(snd_timer_params_t * params, unsigned int filter);\nunsigned int snd_timer_params_get_filter(snd_timer_params_t * params);\n\nsize_t snd_timer_status_sizeof(void);\n/** allocate #snd_timer_status_t container on stack */\n#define snd_timer_status_alloca(ptr) __snd_alloca(ptr, snd_timer_status)\nint snd_timer_status_malloc(snd_timer_status_t **ptr);\nvoid snd_timer_status_free(snd_timer_status_t *obj);\nvoid snd_timer_status_copy(snd_timer_status_t *dst, const snd_timer_status_t *src);\n\nsnd_htimestamp_t snd_timer_status_get_timestamp(snd_timer_status_t * status);\nlong snd_timer_status_get_resolution(snd_timer_status_t * status);\nlong snd_timer_status_get_lost(snd_timer_status_t * status);\nlong snd_timer_status_get_overrun(snd_timer_status_t * status);\nlong snd_timer_status_get_queue(snd_timer_status_t * status);\n\n/* deprecated functions, for compatibility */\nlong snd_timer_info_get_ticks(snd_timer_info_t * info);\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /** __ALSA_TIMER_H */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/include/rawmidi.h": "/**\n * \\file include/rawmidi.h\n * \\brief Application interface library for the ALSA driver\n * \\author Jaroslav Kysela <perex@perex.cz>\n * \\author Abramo Bagnara <abramo@alsa-project.org>\n * \\author Takashi Iwai <tiwai@suse.de>\n * \\date 1998-2001\n *\n * Application interface library for the ALSA driver\n */\n/*\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n#ifndef __ALSA_RAWMIDI_H\n#define __ALSA_RAWMIDI_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n *  \\defgroup RawMidi RawMidi Interface\n *  The RawMidi Interface. See \\ref rawmidi page for more details.\n *  \\{\n */\n\n/** dlsym version for interface entry callback */\n#define SND_RAWMIDI_DLSYM_VERSION\t_dlsym_rawmidi_001\n\n/** RawMidi information container */\ntypedef struct _snd_rawmidi_info snd_rawmidi_info_t;\n/** RawMidi settings container */\ntypedef struct _snd_rawmidi_params snd_rawmidi_params_t;\n/** RawMidi status container */\ntypedef struct _snd_rawmidi_status snd_rawmidi_status_t;\n\n/** RawMidi stream (direction) */\ntypedef enum _snd_rawmidi_stream {\n\t/** Output stream */\n\tSND_RAWMIDI_STREAM_OUTPUT = 0,\n\t/** Input stream */\n\tSND_RAWMIDI_STREAM_INPUT,\n\tSND_RAWMIDI_STREAM_LAST = SND_RAWMIDI_STREAM_INPUT\n} snd_rawmidi_stream_t;\n\n/** Append (flag to open mode) \\hideinitializer */\n#define SND_RAWMIDI_APPEND\t0x0001\n/** Non blocking mode (flag to open mode) \\hideinitializer */\n#define SND_RAWMIDI_NONBLOCK\t0x0002\n/** Write sync mode (Flag to open mode) \\hideinitializer */\n#define SND_RAWMIDI_SYNC\t0x0004\n\n/** RawMidi handle */\ntypedef struct _snd_rawmidi snd_rawmidi_t;\n\n/** RawMidi type */\ntypedef enum _snd_rawmidi_type {\n\t/** Kernel level RawMidi */\n\tSND_RAWMIDI_TYPE_HW,\n\t/** Shared memory client RawMidi (not yet implemented) */\n\tSND_RAWMIDI_TYPE_SHM,\n\t/** INET client RawMidi (not yet implemented) */\n\tSND_RAWMIDI_TYPE_INET,\n\t/** Virtual (sequencer) RawMidi */\n\tSND_RAWMIDI_TYPE_VIRTUAL\n} snd_rawmidi_type_t;\n\nint snd_rawmidi_open(snd_rawmidi_t **in_rmidi, snd_rawmidi_t **out_rmidi,\n\t\t     const char *name, int mode);\nint snd_rawmidi_open_lconf(snd_rawmidi_t **in_rmidi, snd_rawmidi_t **out_rmidi,\n\t\t\t   const char *name, int mode, snd_config_t *lconf);\nint snd_rawmidi_close(snd_rawmidi_t *rmidi);\nint snd_rawmidi_poll_descriptors_count(snd_rawmidi_t *rmidi);\nint snd_rawmidi_poll_descriptors(snd_rawmidi_t *rmidi, struct pollfd *pfds, unsigned int space);\nint snd_rawmidi_poll_descriptors_revents(snd_rawmidi_t *rawmidi, struct pollfd *pfds, unsigned int nfds, unsigned short *revent);\nint snd_rawmidi_nonblock(snd_rawmidi_t *rmidi, int nonblock);\nsize_t snd_rawmidi_info_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_rawmidi_info_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_rawmidi_info_alloca(ptr) __snd_alloca(ptr, snd_rawmidi_info)\nint snd_rawmidi_info_malloc(snd_rawmidi_info_t **ptr);\nvoid snd_rawmidi_info_free(snd_rawmidi_info_t *obj);\nvoid snd_rawmidi_info_copy(snd_rawmidi_info_t *dst, const snd_rawmidi_info_t *src);\nunsigned int snd_rawmidi_info_get_device(const snd_rawmidi_info_t *obj);\nunsigned int snd_rawmidi_info_get_subdevice(const snd_rawmidi_info_t *obj);\nsnd_rawmidi_stream_t snd_rawmidi_info_get_stream(const snd_rawmidi_info_t *obj);\nint snd_rawmidi_info_get_card(const snd_rawmidi_info_t *obj);\nunsigned int snd_rawmidi_info_get_flags(const snd_rawmidi_info_t *obj);\nconst char *snd_rawmidi_info_get_id(const snd_rawmidi_info_t *obj);\nconst char *snd_rawmidi_info_get_name(const snd_rawmidi_info_t *obj);\nconst char *snd_rawmidi_info_get_subdevice_name(const snd_rawmidi_info_t *obj);\nunsigned int snd_rawmidi_info_get_subdevices_count(const snd_rawmidi_info_t *obj);\nunsigned int snd_rawmidi_info_get_subdevices_avail(const snd_rawmidi_info_t *obj);\nvoid snd_rawmidi_info_set_device(snd_rawmidi_info_t *obj, unsigned int val);\nvoid snd_rawmidi_info_set_subdevice(snd_rawmidi_info_t *obj, unsigned int val);\nvoid snd_rawmidi_info_set_stream(snd_rawmidi_info_t *obj, snd_rawmidi_stream_t val);\nint snd_rawmidi_info(snd_rawmidi_t *rmidi, snd_rawmidi_info_t * info);\nsize_t snd_rawmidi_params_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_rawmidi_params_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_rawmidi_params_alloca(ptr) __snd_alloca(ptr, snd_rawmidi_params)\nint snd_rawmidi_params_malloc(snd_rawmidi_params_t **ptr);\nvoid snd_rawmidi_params_free(snd_rawmidi_params_t *obj);\nvoid snd_rawmidi_params_copy(snd_rawmidi_params_t *dst, const snd_rawmidi_params_t *src);\nint snd_rawmidi_params_set_buffer_size(snd_rawmidi_t *rmidi, snd_rawmidi_params_t *params, size_t val);\nsize_t snd_rawmidi_params_get_buffer_size(const snd_rawmidi_params_t *params);\nint snd_rawmidi_params_set_avail_min(snd_rawmidi_t *rmidi, snd_rawmidi_params_t *params, size_t val);\nsize_t snd_rawmidi_params_get_avail_min(const snd_rawmidi_params_t *params);\nint snd_rawmidi_params_set_no_active_sensing(snd_rawmidi_t *rmidi, snd_rawmidi_params_t *params, int val);\nint snd_rawmidi_params_get_no_active_sensing(const snd_rawmidi_params_t *params);\nint snd_rawmidi_params(snd_rawmidi_t *rmidi, snd_rawmidi_params_t * params);\nint snd_rawmidi_params_current(snd_rawmidi_t *rmidi, snd_rawmidi_params_t *params);\nsize_t snd_rawmidi_status_sizeof(void);\n/** \\hideinitializer\n * \\brief allocate an invalid #snd_rawmidi_status_t using standard alloca\n * \\param ptr returned pointer\n */\n#define snd_rawmidi_status_alloca(ptr) __snd_alloca(ptr, snd_rawmidi_status)\nint snd_rawmidi_status_malloc(snd_rawmidi_status_t **ptr);\nvoid snd_rawmidi_status_free(snd_rawmidi_status_t *obj);\nvoid snd_rawmidi_status_copy(snd_rawmidi_status_t *dst, const snd_rawmidi_status_t *src);\nvoid snd_rawmidi_status_get_tstamp(const snd_rawmidi_status_t *obj, snd_htimestamp_t *ptr);\nsize_t snd_rawmidi_status_get_avail(const snd_rawmidi_status_t *obj);\nsize_t snd_rawmidi_status_get_xruns(const snd_rawmidi_status_t *obj);\nint snd_rawmidi_status(snd_rawmidi_t *rmidi, snd_rawmidi_status_t * status);\nint snd_rawmidi_drain(snd_rawmidi_t *rmidi);\nint snd_rawmidi_drop(snd_rawmidi_t *rmidi);\nssize_t snd_rawmidi_write(snd_rawmidi_t *rmidi, const void *buffer, size_t size);\nssize_t snd_rawmidi_read(snd_rawmidi_t *rmidi, void *buffer, size_t size);\nconst char *snd_rawmidi_name(snd_rawmidi_t *rmidi);\nsnd_rawmidi_type_t snd_rawmidi_type(snd_rawmidi_t *rmidi);\nsnd_rawmidi_stream_t snd_rawmidi_stream(snd_rawmidi_t *rawmidi);\n\n/** \\} */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* __RAWMIDI_H */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/modules/mixer/simple/sbasedl.c": "/*\n *  Mixer Interface - simple abstact module - base library (dlopen function)\n *  Copyright (c) 2005 by Jaroslav Kysela <perex@perex.cz>\n *\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as\n *   published by the Free Software Foundation; either version 2.1 of\n *   the License, or (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public\n *   License along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA\n *\n */\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#include <math.h>\n#include <dlfcn.h>\n#include \"config.h\"\n#include \"asoundlib.h\"\n#include \"mixer_abst.h\"\n#include \"sbase.h\"\n\n#define SO_PATH ALSA_PLUGIN_DIR \"/smixer\"\n\nint mixer_simple_basic_dlopen(snd_mixer_class_t *class,\n\t\t\t      bclass_base_ops_t **ops)\n{\n\tstruct bclass_private *priv = snd_mixer_sbasic_get_private(class);\n\tconst char *lib = \"smixer-sbase.so\";\n\tvoid (*initpriv)(snd_mixer_class_t *class, struct bclass_private *priv);\n\tchar *xlib, *path;\n\tvoid *h;\n\tint initflag = 0;\n\n\tif (priv == NULL) {\n\t\tpriv = calloc(1, sizeof(*priv));\n\t\tif (priv == NULL)\n\t\t\treturn -ENOMEM;\n\t\tinitflag = 1;\n\t}\n\tpath = getenv(\"ALSA_MIXER_SIMPLE_MODULES\");\n\tif (!path)\n\t\tpath = SO_PATH;\n\txlib = malloc(strlen(lib) + strlen(path) + 1 + 1);\n\tif (xlib == NULL) {\n\t\tif (initflag)\n\t\t\tfree(priv);\n\t\treturn -ENOMEM;\n\t}\n\tstrcpy(xlib, path);\n\tstrcat(xlib, \"/\");\n\tstrcat(xlib, lib);\n\th = snd_dlopen(xlib, RTLD_NOW);\n\tif (h == NULL) {\n\t\tSNDERR(\"Unable to open library '%s'\", xlib);\n\t\tgoto __error;\n\t}\n\tinitpriv = dlsym(h, \"alsa_mixer_sbasic_initpriv\");\n\tif (initpriv == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_sbasic_initpriv' was not found in '%s'\", xlib);\n\t\tgoto __error;\n\t}\n\tpriv->ops.event = dlsym(h, \"alsa_mixer_sbasic_event\");\n\tif (priv->ops.event == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_sbasic_event' was not found in '%s'\", xlib);\n\t\tgoto __error;\n\t}\n\tpriv->ops.selreg = dlsym(h, \"alsa_mixer_sbasic_selreg\");\n\tif (priv->ops.selreg == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_sbasic_selreg' was not found in '%s'\", xlib);\n\t\tgoto __error;\n\t}\n\tpriv->ops.sidreg = dlsym(h, \"alsa_mixer_sbasic_sidreg\");\n\tif (priv->ops.sidreg == NULL) {\n\t\tSNDERR(\"Symbol 'alsa_mixer_sbasic_sidreg' was not found in '%s'\", xlib);\n\t\tgoto __error;\n\t}\n\tfree(xlib);\n\tif (initflag)\n\t\tinitpriv(class, priv);\n\tpriv->dl_sbase = h;\n\tif (ops)\n\t\t*ops = &priv->ops;\n\treturn 1;\n\n      __error:\n      \tif (initflag)\n      \t\tfree(priv);\n\tif (h)\n\t\tsnd_dlclose(h);\n\tfree(xlib);\n\treturn -ENXIO;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/doc/pictures/wave1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-alsa-lib-1.1.4.1-ibqyceobohu4z2yh4g7hxv6yauwyp5nm/spack-src/doc/pictures/wave2.gif"
    ],
    "total_files": 429
}