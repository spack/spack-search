{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/src/OSspecific/POSIX/POSIX.C": "/*---------------------------------------------------------------------------*\\\n  =========                 |\n  \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n   \\\\    /   O peration     |\n    \\\\  /    A nd           | Copyright (C) 2011-2016 OpenFOAM Foundation\n     \\\\/     M anipulation  | Copyright (C) 2016-2017 OpenCFD Ltd.\n-------------------------------------------------------------------------------\nLicense\n    This file is part of OpenFOAM.\n\n    OpenFOAM is free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n    for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.\n\nDescription\n    POSIX versions of the functions declared in OSspecific.H\n\n\\*---------------------------------------------------------------------------*/\n\n#ifdef solarisGcc\n    #define _SYS_VNODE_H\n#endif\n\n#include \"OSspecific.H\"\n#include \"POSIX.H\"\n#include \"foamVersion.H\"\n#include \"fileName.H\"\n#include \"fileStat.H\"\n#include \"timer.H\"\n#include \"IFstream.H\"\n#include \"DynamicList.H\"\n#include \"CStringList.H\"\n#include \"SubList.H\"\n\n#include <fstream>\n#include <cstdlib>\n#include <cctype>\n\n#include <stdio.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <pwd.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/stat.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <dlfcn.h>\n#include <link.h>\n\n#include <netinet/in.h>\n#ifdef USE_RANDOM\n    #include <climits>\n    #if INT_MAX    != 2147483647\n        #error \"INT_MAX    != 2147483647\"\n        #error \"The random number generator may not work!\"\n    #endif\n#endif\n\n// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //\n\nnamespace Foam\n{\n    defineTypeNameAndDebug(POSIX, 0);\n}\n\n\n// * * * * * * * * * * * * * * Static Functions  * * * * * * * * * * * * * * //\n\n//\n//! \\cond fileScope\n//\n// Return true if filename appears to be a backup file\n//\nstatic inline bool isBackupName(const Foam::fileName& name)\n{\n    if (name.empty())\n    {\n        return false;\n    }\n    else if (name[name.size()-1] == '~')\n    {\n        return true;\n    }\n\n    // Now check the extension\n    const Foam::word ext = name.ext();\n    if (ext.empty())\n    {\n        return false;\n    }\n\n    return\n    (\n        ext == \"bak\" || ext == \"BAK\"\n     || ext == \"old\" || ext == \"save\"\n    );\n}\n\n//! \\endcond\n\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\npid_t Foam::pid()\n{\n    return ::getpid();\n}\n\n\npid_t Foam::ppid()\n{\n    return ::getppid();\n}\n\n\npid_t Foam::pgid()\n{\n    return ::getpgrp();\n}\n\n\nbool Foam::env(const std::string& envName)\n{\n    // An empty envName => always false\n    return !envName.empty() && ::getenv(envName.c_str()) != nullptr;\n}\n\n\nFoam::string Foam::getEnv(const std::string& envName)\n{\n    // Ignore an empty envName => always \"\"\n    char* env = envName.empty() ? nullptr : ::getenv(envName.c_str());\n\n    if (env)\n    {\n        return string(env);\n    }\n    else\n    {\n        // Return null-constructed string rather than string::null\n        // to avoid cyclic dependencies in the construction of globals\n        return string();\n    }\n}\n\n\nbool Foam::setEnv\n(\n    const word& envName,\n    const std::string& value,\n    const bool overwrite\n)\n{\n    // Ignore an empty envName => always false\n    return\n    (\n        !envName.empty()\n     && ::setenv(envName.c_str(), value.c_str(), overwrite) == 0\n    );\n}\n\n\nFoam::string Foam::hostName(bool full)\n{\n    char buf[128];\n    ::gethostname(buf, sizeof(buf));\n\n    // implementation as per hostname from net-tools\n    if (full)\n    {\n        struct hostent *hp = ::gethostbyname(buf);\n        if (hp)\n        {\n            return hp->h_name;\n        }\n    }\n\n    return buf;\n}\n\n\nFoam::string Foam::domainName()\n{\n    char buf[128];\n    ::gethostname(buf, sizeof(buf));\n\n    // implementation as per hostname from net-tools\n    struct hostent *hp = ::gethostbyname(buf);\n    if (hp)\n    {\n        char *p = ::strchr(hp->h_name, '.');\n        if (p)\n        {\n            ++p;\n            return p;\n        }\n    }\n\n    return string::null;\n}\n\n\nFoam::string Foam::userName()\n{\n    struct passwd* pw = ::getpwuid(::getuid());\n    if (pw != nullptr)\n    {\n        return pw->pw_name;\n    }\n    else\n    {\n        return string();\n    }\n}\n\n\nbool Foam::isAdministrator()\n{\n    return (::geteuid() == 0);\n}\n\n\nFoam::fileName Foam::home()\n{\n    char* env = ::getenv(\"HOME\");\n    if (env)\n    {\n        return fileName(env);\n    }\n\n    struct passwd* pw = ::getpwuid(::getuid());\n    if (pw)\n    {\n        return pw->pw_dir;\n    }\n    else\n    {\n        return fileName();\n    }\n}\n\n\nFoam::fileName Foam::home(const std::string& userName)\n{\n    // An empty userName => same as home()\n    if (userName.empty())\n    {\n        return Foam::home();\n    }\n\n    struct passwd* pw = ::getpwnam(userName.c_str());\n    if (pw)\n    {\n        return pw->pw_dir;\n    }\n    else\n    {\n        return fileName();\n    }\n}\n\n\nFoam::fileName Foam::cwd()\n{\n    label pathLengthLimit = POSIX::pathLengthChunk;\n    List<char> path(pathLengthLimit);\n\n    // Resize path if getcwd fails with an ERANGE error\n    while (pathLengthLimit == path.size())\n    {\n        if (::getcwd(path.data(), path.size()))\n        {\n            return path.data();\n        }\n        else if (errno == ERANGE)\n        {\n            // Increment path length up to the pathLengthMax limit\n            if\n            (\n                (pathLengthLimit += POSIX::pathLengthChunk)\n             >= POSIX::pathLengthMax\n            )\n            {\n                FatalErrorInFunction\n                    << \"Attempt to increase path length beyond limit of \"\n                    << POSIX::pathLengthMax\n                    << exit(FatalError);\n            }\n\n            path.setSize(pathLengthLimit);\n        }\n        else\n        {\n            break;\n        }\n    }\n\n    FatalErrorInFunction\n        << \"Couldn't get the current working directory\"\n        << exit(FatalError);\n\n    return fileName::null;\n}\n\n\nbool Foam::chDir(const fileName& dir)\n{\n    // Ignore an empty dir name => always false\n    return !dir.empty() && ::chdir(dir.c_str()) == 0;\n}\n\n\nbool Foam::mkDir(const fileName& pathName, mode_t mode)\n{\n    // Ignore an empty pathName => always false\n    if (pathName.empty())\n    {\n        return false;\n    }\n\n    // Construct path directory if does not exist\n    if (::mkdir(pathName.c_str(), mode) == 0)\n    {\n        // Directory made OK so return true\n        return true;\n    }\n    else\n    {\n        switch (errno)\n        {\n            case EPERM:\n            {\n                FatalErrorInFunction\n                    << \"The filesystem containing \" << pathName\n                    << \" does not support the creation of directories.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EEXIST:\n            {\n                // Directory already exists so simply return true\n                return true;\n            }\n\n            case EFAULT:\n            {\n                FatalErrorInFunction\n                    << \"\" << pathName\n                    << \" points outside your accessible address space.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EACCES:\n            {\n                FatalErrorInFunction\n                    << \"The parent directory does not allow write \"\n                       \"permission to the process,\"<< nl\n                    << \"or one of the directories in \" << pathName\n                    << \" did not allow search (execute) permission.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENAMETOOLONG:\n            {\n                FatalErrorInFunction\n                    << \"\" << pathName << \" is too long.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOENT:\n            {\n                // Part of the path does not exist so try to create it\n                if (pathName.path().size() && mkDir(pathName.path(), mode))\n                {\n                    return mkDir(pathName, mode);\n                }\n                else\n                {\n                    FatalErrorInFunction\n                        << \"Couldn't create directory \" << pathName\n                        << exit(FatalError);\n\n                    return false;\n                }\n            }\n\n            case ENOTDIR:\n            {\n                FatalErrorInFunction\n                    << \"A component used as a directory in \" << pathName\n                    << \" is not, in fact, a directory.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOMEM:\n            {\n                FatalErrorInFunction\n                    << \"Insufficient kernel memory was available to make \"\n                       \"directory \" << pathName << '.'\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EROFS:\n            {\n                FatalErrorInFunction\n                    << \"\" << pathName\n                    << \" refers to a file on a read-only filesystem.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ELOOP:\n            {\n                FatalErrorInFunction\n                    << \"Too many symbolic links were encountered in resolving \"\n                    << pathName << '.'\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOSPC:\n            {\n                FatalErrorInFunction\n                    << \"The device containing \" << pathName\n                    << \" has no room for the new directory or \"\n                    << \"the user's disk quota is exhausted.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            default:\n            {\n                FatalErrorInFunction\n                    << \"Couldn't create directory \" << pathName\n                    << exit(FatalError);\n\n                return false;\n            }\n        }\n    }\n}\n\n\nbool Foam::chMod(const fileName& name, const mode_t m)\n{\n    // Ignore an empty name => always false\n    return !name.empty() && ::chmod(name.c_str(), m) == 0;\n}\n\n\nmode_t Foam::mode(const fileName& name, const bool followLink)\n{\n    // Ignore an empty name => always 0\n    if (!name.empty())\n    {\n        fileStat fileStatus(name, followLink);\n        if (fileStatus.isValid())\n        {\n            return fileStatus.status().st_mode;\n        }\n    }\n\n    return 0;\n}\n\n\nFoam::fileName::Type Foam::type(const fileName& name, const bool followLink)\n{\n    // Ignore an empty name => always UNDEFINED\n    if (name.empty())\n    {\n        return fileName::UNDEFINED;\n    }\n\n    mode_t m = mode(name, followLink);\n\n    if (S_ISREG(m))\n    {\n        return fileName::FILE;\n    }\n    else if (S_ISLNK(m))\n    {\n        return fileName::LINK;\n    }\n    else if (S_ISDIR(m))\n    {\n        return fileName::DIRECTORY;\n    }\n\n    return fileName::UNDEFINED;\n}\n\n\nbool Foam::exists\n(\n    const fileName& name,\n    const bool checkGzip,\n    const bool followLink\n)\n{\n    // Ignore an empty name => always false\n    return\n    (\n        !name.empty()\n     && (mode(name, followLink) || isFile(name, checkGzip, followLink))\n    );\n}\n\n\nbool Foam::isDir(const fileName& name, const bool followLink)\n{\n    // Ignore an empty name => always false\n    return !name.empty() && S_ISDIR(mode(name, followLink));\n}\n\n\nbool Foam::isFile\n(\n    const fileName& name,\n    const bool checkGzip,\n    const bool followLink\n)\n{\n    // Ignore an empty name => always false\n    return\n    (\n        !name.empty()\n     && (\n            S_ISREG(mode(name, followLink))\n         || (checkGzip && S_ISREG(mode(name + \".gz\", followLink)))\n        )\n    );\n}\n\n\noff_t Foam::fileSize(const fileName& name, const bool followLink)\n{\n    // Ignore an empty name\n    if (!name.empty())\n    {\n        fileStat fileStatus(name, followLink);\n        if (fileStatus.isValid())\n        {\n            return fileStatus.status().st_size;\n        }\n    }\n\n    return -1;\n}\n\n\ntime_t Foam::lastModified(const fileName& name, const bool followLink)\n{\n    // Ignore an empty name\n    if (!name.empty())\n    {\n        fileStat fileStatus(name, followLink);\n        if (fileStatus.isValid())\n        {\n            return fileStatus.status().st_mtime;\n        }\n    }\n\n    return 0;\n}\n\n\ndouble Foam::highResLastModified(const fileName& name)\n{\n    // Ignore an empty name\n    if (!name.empty())\n    {\n        fileStat fileStatus(name);\n        if (fileStatus.isValid())\n        {\n            return\n                fileStatus.status().st_mtime\n              + 1e-9*fileStatus.status().st_atim.tv_nsec;\n        }\n    }\n\n    return 0;\n}\n\n\nFoam::fileNameList Foam::readDir\n(\n    const fileName& directory,\n    const fileName::Type type,\n    const bool filtergz,\n    const bool followLink\n)\n{\n    // Initial filename list size\n    // also used as increment if initial size found to be insufficient\n    static const int maxNnames = 100;\n\n    // Basic sanity: cannot strip '.gz' from directory names\n    const bool stripgz = filtergz && (type != fileName::DIRECTORY);\n    const word extgz(\"gz\");\n\n    // Open directory and set the structure pointer\n    // Do not attempt to open an empty directory name\n    DIR *source;\n    if\n    (\n        directory.empty()\n     || (source = ::opendir(directory.c_str())) == nullptr\n    )\n    {\n        if (POSIX::debug)\n        {\n            InfoInFunction\n                << \"cannot open directory \" << directory << endl;\n        }\n\n        return fileNameList();\n    }\n\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"reading directory \" << directory << endl;\n    }\n\n    label nEntries = 0;\n    fileNameList dirEntries(maxNnames);\n\n    // Read and parse all the entries in the directory\n    for (struct dirent *list; (list = ::readdir(source)) != nullptr; /*nil*/)\n    {\n        const fileName name(list->d_name);\n\n        // Ignore files/directories beginning with \".\"\n        // These are the \".\", \"..\" directories and any hidden files/dirs\n        if (name.empty() || name[0] == '.')\n        {\n            continue;\n        }\n\n        if\n        (\n            (type == fileName::DIRECTORY)\n         || (type == fileName::FILE && !isBackupName(name))\n        )\n        {\n            if ((directory/name).type(followLink) == type)\n            {\n                if (nEntries >= dirEntries.size())\n                {\n                    dirEntries.setSize(dirEntries.size() + maxNnames);\n                }\n\n                if (stripgz && name.hasExt(extgz))\n                {\n                    dirEntries[nEntries++] = name.lessExt();\n                }\n                else\n                {\n                    dirEntries[nEntries++] = name;\n                }\n            }\n        }\n    }\n\n    // Reset the length of the entries list\n    dirEntries.setSize(nEntries);\n    ::closedir(source);\n\n    return dirEntries;\n}\n\n\nbool Foam::cp(const fileName& src, const fileName& dest, const bool followLink)\n{\n    // Make sure source exists - this also handles an empty source name\n    if (!exists(src))\n    {\n        return false;\n    }\n\n    fileName destFile(dest);\n\n    // Check type of source file.\n    const fileName::Type srcType = src.type(followLink);\n    if (srcType == fileName::FILE)\n    {\n        // If dest is a directory, create the destination file name.\n        if (destFile.type() == fileName::DIRECTORY)\n        {\n            destFile = destFile/src.name();\n        }\n\n        // Make sure the destination directory exists.\n        if (!isDir(destFile.path()) && !mkDir(destFile.path()))\n        {\n            return false;\n        }\n\n        // Open and check streams.\n        std::ifstream srcStream(src.c_str());\n        if (!srcStream)\n        {\n            return false;\n        }\n\n        std::ofstream destStream(destFile.c_str());\n        if (!destStream)\n        {\n            return false;\n        }\n\n        // Copy character data.\n        char ch;\n        while (srcStream.get(ch))\n        {\n            destStream.put(ch);\n        }\n\n        // Final check.\n        if (!srcStream.eof() || !destStream)\n        {\n            return false;\n        }\n    }\n    else if (srcType == fileName::LINK)\n    {\n        // If dest is a directory, create the destination file name.\n        if (destFile.type() == fileName::DIRECTORY)\n        {\n            destFile = destFile/src.name();\n        }\n\n        // Make sure the destination directory exists.\n        if (!isDir(destFile.path()) && !mkDir(destFile.path()))\n        {\n            return false;\n        }\n\n        ln(src, destFile);\n    }\n    else if (srcType == fileName::DIRECTORY)\n    {\n        // If dest is a directory, create the destination file name.\n        if (destFile.type() == fileName::DIRECTORY)\n        {\n            destFile = destFile/src.components().last();\n        }\n\n        // Make sure the destination directory exists.\n        if (!isDir(destFile) && !mkDir(destFile))\n        {\n            return false;\n        }\n\n        // Copy files\n        fileNameList contents = readDir(src, fileName::FILE, false, followLink);\n        forAll(contents, i)\n        {\n            if (POSIX::debug)\n            {\n                InfoInFunction\n                    << \"Copying : \" << src/contents[i]\n                    << \" to \" << destFile/contents[i] << endl;\n            }\n\n            // File to file.\n            cp(src/contents[i], destFile/contents[i], followLink);\n        }\n\n        // Copy sub directories.\n        fileNameList subdirs = readDir\n        (\n            src,\n            fileName::DIRECTORY,\n            false,\n            followLink\n        );\n        forAll(subdirs, i)\n        {\n            if (POSIX::debug)\n            {\n                InfoInFunction\n                    << \"Copying : \" << src/subdirs[i]\n                    << \" to \" << destFile << endl;\n            }\n\n            // Dir to Dir.\n            cp(src/subdirs[i], destFile, followLink);\n        }\n    }\n    else\n    {\n        return false;\n    }\n\n    return true;\n}\n\n\nbool Foam::ln(const fileName& src, const fileName& dst)\n{\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"Create softlink from : \" << src << \" to \" << dst\n            << endl;\n    }\n\n    if (src.empty())\n    {\n        WarningInFunction\n            << \"source name is empty: not linking.\" << endl;\n        return false;\n    }\n\n    if (dst.empty())\n    {\n        WarningInFunction\n            << \"destination name is empty: not linking.\" << endl;\n        return false;\n    }\n\n    if (exists(dst))\n    {\n        WarningInFunction\n            << \"destination \" << dst << \" already exists. Not linking.\"\n            << endl;\n        return false;\n    }\n\n    if (src.isAbsolute() && !exists(src))\n    {\n        WarningInFunction\n            << \"source \" << src << \" does not exist.\" << endl;\n        return false;\n    }\n\n    if (::symlink(src.c_str(), dst.c_str()) == 0)\n    {\n        return true;\n    }\n    else\n    {\n        WarningInFunction\n            << \"symlink from \" << src << \" to \" << dst << \" failed.\" << endl;\n        return false;\n    }\n}\n\n\nbool Foam::mv(const fileName& src, const fileName& dst, const bool followLink)\n{\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"Move : \" << src << \" to \" << dst << endl;\n    }\n\n    // Ignore an empty names => always false\n    if (src.empty() || dst.empty())\n    {\n        return false;\n    }\n\n    if\n    (\n        dst.type() == fileName::DIRECTORY\n     && src.type(followLink) != fileName::DIRECTORY\n    )\n    {\n        const fileName dstName(dst/src.name());\n\n        return ::rename(src.c_str(), dstName.c_str()) == 0;\n    }\n    else\n    {\n        return ::rename(src.c_str(), dst.c_str()) == 0;\n    }\n}\n\n\nbool Foam::mvBak(const fileName& src, const std::string& ext)\n{\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"mvBak : \" << src << \" to extension \" << ext << endl;\n    }\n\n    // Ignore an empty name or extension => always false\n    if (src.empty() || ext.empty())\n    {\n        return false;\n    }\n\n    if (exists(src, false))\n    {\n        const int maxIndex = 99;\n        char index[3];\n\n        for (int n = 0; n <= maxIndex; ++n)\n        {\n            fileName dstName(src + \".\" + ext);\n            if (n)\n            {\n                ::sprintf(index, \"%02d\", n);\n                dstName += index;\n            }\n\n            // avoid overwriting existing files, except for the last\n            // possible index where we have no choice\n            if (!exists(dstName, false) || n == maxIndex)\n            {\n                return ::rename(src.c_str(), dstName.c_str()) == 0;\n            }\n        }\n    }\n\n    // fallthrough: nothing to do\n    return false;\n}\n\n\nbool Foam::rm(const fileName& file)\n{\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"Removing : \" << file << endl;\n    }\n\n    // Ignore an empty name => always false\n    if (file.empty())\n    {\n        return false;\n    }\n\n    // Try returning plain file name; if not there, try with .gz\n    if (::remove(file.c_str()) == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return ::remove(string(file + \".gz\").c_str()) == 0;\n    }\n}\n\n\nbool Foam::rmDir(const fileName& directory, const bool silent)\n{\n    // Open directory and set the structure pointer\n    // Do not attempt to open an empty directory name\n    DIR *source;\n    if\n    (\n        directory.empty()\n     || (source = ::opendir(directory.c_str())) == nullptr\n    )\n    {\n        if (!silent)\n        {\n            WarningInFunction\n                << \"cannot open directory \" << directory << endl;\n        }\n\n        return false;\n    }\n\n    if (POSIX::debug)\n    {\n        InfoInFunction\n            << \"removing directory \" << directory << endl;\n    }\n\n    // Process each directory entry, counting any errors encountered\n    label nErrors = 0;\n    for (struct dirent *list; (list = ::readdir(source)) != nullptr; /*nil*/)\n    {\n        const fileName name(list->d_name);\n        if (name.empty() || name == \".\" || name == \"..\")\n        {\n            // Ignore \".\" and \"..\" directories\n            continue;\n        }\n\n        const fileName path = directory/name;\n        if (path.type(false) == fileName::DIRECTORY)\n        {\n            if (!rmDir(path, true))  // Only report errors at the top-level\n            {\n                ++nErrors;\n            }\n        }\n        else\n        {\n            if (!rm(path))\n            {\n                ++nErrors;\n            }\n        }\n    }\n\n    if (nErrors)\n    {\n        if (!silent)\n        {\n            WarningInFunction\n                << \"failed to remove directory \" << directory << nl\n                << \"could not remove \" << nErrors << \" sub-entries\" << endl;\n        }\n    }\n    else\n    {\n        if (!rm(directory))\n        {\n            ++nErrors;\n            if (!silent)\n            {\n                WarningInFunction\n                    << \"failed to remove directory \" << directory << endl;\n            }\n        }\n    }\n\n    // clean up\n    ::closedir(source);\n    return !nErrors;\n}\n\n\nunsigned int Foam::sleep(const unsigned int sec)\n{\n    return ::sleep(sec);\n}\n\n\nvoid Foam::fdClose(const int fd)\n{\n    if (close(fd) != 0)\n    {\n        FatalErrorInFunction\n            << \"close error on \" << fd << endl\n            << abort(FatalError);\n    }\n}\n\n\nbool Foam::ping\n(\n    const std::string& destName,\n    const label destPort,\n    const label timeOut\n)\n{\n    struct hostent *hostPtr;\n    volatile int sockfd;\n    struct sockaddr_in destAddr;      // will hold the destination addr\n    u_int addr;\n\n    if ((hostPtr = ::gethostbyname(destName.c_str())) == nullptr)\n    {\n        FatalErrorInFunction\n            << \"gethostbyname error \" << h_errno << \" for host \" << destName\n            << abort(FatalError);\n    }\n\n    // Get first of the SLL of addresses\n    addr = (reinterpret_cast<struct in_addr*>(*(hostPtr->h_addr_list)))->s_addr;\n\n    // Allocate socket\n    sockfd = ::socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0)\n    {\n        FatalErrorInFunction\n            << \"socket error\"\n            << abort(FatalError);\n    }\n\n    // Fill sockaddr_in structure with dest address and port\n    memset(reinterpret_cast<char *>(&destAddr), '\\0', sizeof(destAddr));\n    destAddr.sin_family = AF_INET;\n    destAddr.sin_port = htons(ushort(destPort));\n    destAddr.sin_addr.s_addr = addr;\n\n\n    timer myTimer(timeOut);\n\n    if (timedOut(myTimer))\n    {\n        // Setjmp from timer jumps back to here\n        fdClose(sockfd);\n        return false;\n    }\n\n    if\n    (\n        ::connect\n        (\n            sockfd,\n            reinterpret_cast<struct sockaddr*>(&destAddr),\n            sizeof(struct sockaddr)\n        ) != 0\n    )\n    {\n        // Connection refused. Check if network was actually used or not.\n\n        int connectErr = errno;\n\n        fdClose(sockfd);\n\n        if (connectErr == ECONNREFUSED)\n        {\n            return true;\n        }\n        //perror(\"connect\");\n\n        return false;\n    }\n\n    fdClose(sockfd);\n\n    return true;\n}\n\n\nbool Foam::ping(const std::string& host, const label timeOut)\n{\n    return ping(host, 222, timeOut) || ping(host, 22, timeOut);\n}\n\n\nnamespace Foam\n{\n//! \\cond fileScope\nstatic int waitpid(const pid_t pid)\n{\n    // child status, return code from the exec etc.\n    int status = 0;\n\n    // in parent - blocking wait\n    // modest treatment of signals (in child)\n    // treat 'stopped' like exit (suspend/continue)\n    while (true)\n    {\n        pid_t wpid = ::waitpid(pid, &status, WUNTRACED);\n\n        if (wpid == -1)\n        {\n            FatalErrorInFunction\n                << \"some error occurred in child\"\n                << exit(FatalError);\n            break;\n        }\n\n        if (WIFEXITED(status))\n        {\n            // child exited, get its return status\n            return WEXITSTATUS(status);\n        }\n\n        if (WIFSIGNALED(status))\n        {\n            // child terminated by some signal\n            return WTERMSIG(status);\n        }\n\n        if (WIFSTOPPED(status))\n        {\n            // child stopped by some signal\n            return WSTOPSIG(status);\n        }\n\n        FatalErrorInFunction\n            << \"programming error, status from waitpid() not handled: \"\n            << status\n            << exit(FatalError);\n    }\n\n    return -1;  // should not happen\n}\n//! \\endcond\n}\n\n\nint Foam::system(const std::string& command)\n{\n    if (command.empty())\n    {\n        // Treat an empty command as a successful no-op.\n        // From 'man sh' POSIX (man sh):\n        //   \"If the command_string operand is an empty string,\n        //    sh shall exit with a zero exit status.\"\n        return 0;\n    }\n\n    pid_t child_pid = ::vfork();   // NB: vfork, not fork!\n    if (child_pid == -1)\n    {\n        FatalErrorInFunction\n            << \"vfork() failed for system command \" << command\n            << exit(FatalError);\n    }\n\n    if (child_pid == 0)\n    {\n        // in child\n\n        // execl uses the current environ\n        (void) ::execl\n        (\n            \"/bin/sh\",          // Path of the shell\n            \"sh\",               // Command-name (name for the shell)\n            \"-c\",               // Read commands from command_string operand\n            command.c_str(),    // Command string\n            reinterpret_cast<char *>(0)\n        );\n\n        // obviously failed, since exec should not return at all\n        FatalErrorInFunction\n            << \"exec failed: \" << command\n            << exit(FatalError);\n    }\n\n\n    // in parent - blocking wait\n    return waitpid(child_pid);\n}\n\n\nint Foam::system(const Foam::UList<Foam::string>& command)\n{\n    const int argc = command.size();\n\n    if (!argc)\n    {\n        // Treat an empty command as a successful no-op.\n        // For consistency with POSIX (man sh) behaviour for (sh -c command),\n        // which is what is mostly being replicated here.\n        return 0;\n    }\n\n    // NB: use vfork, not fork!\n    // vfork behaves more like a thread and avoids copy-on-write problems\n    // triggered by fork.\n    // The normal system() command has a fork buried in it that causes\n    // issues with infiniband and openmpi etc.\n    pid_t child_pid = ::vfork();\n    if (child_pid == -1)\n    {\n        FatalErrorInFunction\n            << \"vfork() failed for system command \" << command[0]\n            << exit(FatalError);\n    }\n\n    if (child_pid == 0)\n    {\n        // in child:\n        // Need command and arguments separately.\n        // args is a nullptr-terminated list of c-strings\n\n        CStringList args(SubList<string>(command, 0));\n        if (argc > 1)\n        {\n            args.reset(SubList<string>(command, argc-1, 1));\n        }\n\n        // execvp uses the current environ\n        (void) ::execvp(command[0].c_str(), args.strings());\n\n        // obviously failed, since exec should not return at all\n        FatalErrorInFunction\n            << \"exec(\" << command[0] << \", ...) failed\"\n            << exit(FatalError);\n    }\n\n\n    // in parent - blocking wait\n    return waitpid(child_pid);\n}\n\n\nvoid* Foam::dlOpen(const fileName& lib, const bool check)\n{\n    if (POSIX::debug)\n    {\n        std::cout<< \"dlOpen(const fileName&)\"\n            << \" : dlopen of \" << lib << std::endl;\n    }\n    void* handle = ::dlopen(lib.c_str(), RTLD_LAZY|RTLD_GLOBAL);\n\n    if (!handle && check)\n    {\n        WarningInFunction\n            << \"dlopen error : \" << ::dlerror()\n            << endl;\n    }\n\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlOpen(const fileName&)\"\n            << \" : dlopen of \" << lib\n            << \" handle \" << handle << std::endl;\n    }\n\n    return handle;\n}\n\n\nbool Foam::dlClose(void* handle)\n{\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlClose(void*)\"\n            << \" : dlclose of handle \" << handle << std::endl;\n    }\n    return ::dlclose(handle) == 0;\n}\n\n\nvoid* Foam::dlSym(void* handle, const std::string& symbol)\n{\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlSym(void*, const std::string&)\"\n            << \" : dlsym of \" << symbol << std::endl;\n    }\n    // clear any old errors - see manpage dlopen\n    (void) ::dlerror();\n\n    // get address of symbol\n    void* fun = ::dlsym(handle, symbol.c_str());\n\n    // find error (if any)\n    char *error = ::dlerror();\n\n    if (error)\n    {\n        WarningInFunction\n            << \"Cannot lookup symbol \" << symbol << \" : \" << error\n            << endl;\n    }\n\n    return fun;\n}\n\n\nbool Foam::dlSymFound(void* handle, const std::string& symbol)\n{\n    if (handle && !symbol.empty())\n    {\n        if (POSIX::debug)\n        {\n            std::cout\n                << \"dlSymFound(void*, const std::string&)\"\n                << \" : dlsym of \" << symbol << std::endl;\n        }\n\n        // clear any old errors - see manpage dlopen\n        (void) ::dlerror();\n\n        // get address of symbol\n        (void) ::dlsym(handle, symbol.c_str());\n\n        // symbol can be found if there was no error\n        return !::dlerror();\n    }\n    else\n    {\n        return false;\n    }\n}\n\n\nstatic int collectLibsCallback\n(\n    struct dl_phdr_info *info,\n    size_t size,\n    void *data\n)\n{\n    Foam::DynamicList<Foam::fileName>* ptr =\n        reinterpret_cast<Foam::DynamicList<Foam::fileName>*>(data);\n    ptr->append(info->dlpi_name);\n    return 0;\n}\n\n\nFoam::fileNameList Foam::dlLoaded()\n{\n    DynamicList<fileName> libs;\n    dl_iterate_phdr(collectLibsCallback, &libs);\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlLoaded()\"\n            << \" : determined loaded libraries :\" << libs.size() << std::endl;\n    }\n    return libs;\n}\n\nFoam::label Foam::osRandomBufferSize()\n{\n    #ifdef USE_RANDOM\n    return sizeof(random_data);\n    #else\n    return sizeof(drand48_data);\n    #endif\n}\n\n\nvoid Foam::osRandomSeed(const label seed)\n{\n    #ifdef USE_RANDOM\n    srandom((unsigned int)seed);\n    #else\n    srand48(seed);\n    #endif\n}\n\n\nFoam::label Foam::osRandomInteger()\n{\n    #ifdef USE_RANDOM\n    return random();\n    #else\n    return lrand48();\n    #endif\n}\n\n\nFoam::scalar Foam::osRandomDouble()\n{\n    #ifdef USE_RANDOM\n    return (scalar)random()/INT_MAX;\n    #else\n    return drand48();\n    #endif\n}\n\n\nvoid Foam::osRandomSeed(const label seed, List<char>& buffer)\n{\n    #ifdef USE_RANDOM\n    srandom_r((unsigned int)seed, reinterpret_cast<random_data*>(buffer.begin()));\n    #else\n    srand48_r(seed, reinterpret_cast<drand48_data*>(buffer.begin()));\n    #endif\n}\n\n\nFoam::label Foam::osRandomInteger(List<char>& buffer)\n{\n    #ifdef USE_RANDOM\n    int32_t result;\n    random_r(reinterpret_cast<random_data*>(buffer.begin()), &result);\n    return result;\n    #else\n    long result;\n    lrand48_r(reinterpret_cast<drand48_data*>(buffer.begin()), &result);\n    return result;\n    #endif\n}\n\n\nFoam::scalar Foam::osRandomDouble(List<char>& buffer)\n{\n    #ifdef USE_RANDOM\n    int32_t result;\n    random_r(reinterpret_cast<random_data*>(buffer.begin()), &result);\n    return (scalar)result/INT_MAX;\n    #else\n    double result;\n    drand48_r(reinterpret_cast<drand48_data*>(buffer.begin()), &result);\n    return result;\n    #endif\n}\n\n\n// ************************************************************************* //\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/applications/utilities/mesh/conversion/kivaToFoam/kiva3v-valves.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/src/meshTools/momentOfInertia/volInt.ps.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/p.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/B.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/nuTilda.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/U.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/nut.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/pimpleFoam/LES/channel395/0/k.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/simpleFoam/windAroundBuildings/constant/triSurface/buildings.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/incompressible/lumpedPointMotion/building/files/response.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/multiphase/driftFluxFoam/RAS/tank3D/constant/polyMesh/cells.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/multiphase/driftFluxFoam/RAS/tank3D/constant/polyMesh/neighbour.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/multiphase/driftFluxFoam/RAS/tank3D/constant/polyMesh/faces.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/multiphase/driftFluxFoam/RAS/tank3D/constant/polyMesh/points.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/multiphase/driftFluxFoam/RAS/tank3D/constant/polyMesh/owner.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/bullet.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/propellerTip.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/wigley-scaled-oriented.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/motorBike-passenger-helmet.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/wigley.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/DTC-scaled.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/flange.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/blob.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/motorBike.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/cyclone.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/nacaAirfoil/nacaAirfoil.vrt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/nacaAirfoil/nacaAirfoil.bnd.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/resources/geometry/nacaAirfoil/nacaAirfoil.cel.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/mesh/moveDynamicMesh/SnakeRiverCanyon/constant/triSurface/AcrossRiver.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/tutorials/mesh/moveDynamicMesh/SnakeRiverCanyon/constant/triSurface/ACROSSCYN.JPG",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-1706-eglertlf74esp3qjrin5koxped4djxju/spack-src/doc/Doxygen/OpenFOAMlogo.png"
    ],
    "total_files": 10009
}