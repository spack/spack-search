{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/src/dysect/libDysectAPI/include/LibDysectAPI.h": "/*\nCopyright (c) 2013-2014, Lawrence Livermore National Security, LLC.\nProduced at the Lawrence Livermore National Laboratory.\nWritten by Niklas Nielsen, Gregory Lee [lee218@llnl.gov], Dong Ahn.\nLLNL-CODE-645136.\nAll rights reserved.\n\nThis file is part of DysectAPI. For details, see https://github.com/lee218llnl/DysectAPI. Please also read dysect/LICENSE\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License (as published by the Free Software Foundation) version 2.1 dated February 1999.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and conditions of the GNU General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple\nPlace, Suite 330, Boston, MA 02111-1307 USA\n*/\n\n#ifndef __LIBDYSECT_API_H\n#define __LIBDYSECT_API_H\n\n#include <map>\n#include <stdio.h>\n#include <dlfcn.h>\n\n#define CLOCKID CLOCK_REALTIME\n#define SIG SIGRTMIN\n\n#include \"mrnet/MRNet.h\"\n#include \"lmon_api/lmon_proctab.h\"\n\n#ifdef __DYSECT_IS_BACKEND\n#include \"Event.h\"\n#include \"PCErrors.h\"\n#include \"local_var.h\"\n#include \"PlatFeatures.h\"\n#include \"ProcessSet.h\"\n#include \"PCErrors.h\"\n#include \"Symtab.h\"\n#include \"walker.h\"\n#include \"procstate.h\"\n#include \"frame.h\"\n#include \"swk_errors.h\"\n#include \"Type.h\"\n#else\n  #if defined(__DYSECT_IS_FRONTEND) || defined(__DYSECT_SESSION_BUILD)\n    #include \"DysectAPI/FEDummyDyninst.h\"\n  #endif\n#endif\n\n\ntypedef enum DysectStatus {\n  DysectOK = 0,\n  DysectFailure = 1,\n  DysectDetach\n} DysectStatus;\n\n\nnamespace DysectAPI {\n  typedef enum RunTimeErrorCode {\n    OK,\n    Error,\n    InvalidSystemState,\n    LibraryNotLoaded,\n    SymbolNotFound,\n    SessionCont,\n    SessionQuit,\n    DomainNotFound,\n    NetworkError,\n    DomainExpressionError,\n    StreamError,\n    OptimizedOut,\n  } DysectErrorCode;\n\n\n\n  class SessionLibrary {\n    void* libraryHandle;\n\n    bool loaded;\n\n  public:\n    SessionLibrary(const char* libPath, bool broadcast = false);\n\n    bool isLoaded();\n    DysectErrorCode loadLibrary(const char *path);\n\n    template<typename T> DysectErrorCode mapMethod(const char *name, T* method) {\n      if(!libraryHandle) {\n        return LibraryNotLoaded;\n      }\n\n      dlerror();\n      *method = (T) dlsym(libraryHandle, name);\n\n      const char *dlsym_error = dlerror();\n      if(dlsym_error) {\n        fprintf(stderr, \"Cannot load symbol '%s': %s\\n\", name, dlsym_error);\n        dlclose(libraryHandle);\n\n        return SymbolNotFound;\n      }\n\n      return OK;\n    }\n  };\n\n  bool isDysectTag(int tag);\n\n\nenum environmentType_t {\n  BackendEnvironment,\n  FrontendEnvironment,\n  unknownEnvironment\n};\n\n#ifdef __DYSECT_IS_FRONTEND\n  const environmentType_t environment = FrontendEnvironment;\n#elif __DYSECT_IS_BACKEND\n  const environmentType_t environment = BackendEnvironment;\n#else\n  const environmentType_t environment = unknownEnvironment;\n#endif\n\n}\n\ntypedef struct\n{\n    int count;\n    int *list;\n} IntList_t;\n\n#ifdef __DYSECT_IS_BACKEND\nstruct DysectBEContext_t {\n  MPIR_PROCDESC_EXT *processTable;\n  int processTableSize;\n  Dyninst::Stackwalker::WalkerSet *walkerSet;\n  char *hostname;\n  std::map<int, Dyninst::ProcControlAPI::Process::ptr> *mpiRankToProcessMap;\n  class STAT_BackEnd* statBE;\n};\n#else\nstruct DysectFEContext_t {\n  MRN::Network* network;\n  MPIR_PROCDESC_EXT *processTable;\n  int processTableSize;\n  std::map<int, IntList_t *>* mrnetRankToMpiRanksMap;\n  int upstreamFilterId;\n  class STAT_FrontEnd* statFE;\n};\n#endif\n\n\nconst int DysectGlobalReadyTag     = 0x7e000009;\nconst int DysectGlobalReadyRespTag = 0x7e00000A;\nconst int DysectGlobalStartTag     = 0x7e00000B;\nconst int DysectGlobalActionTag    = 0x7e00000C;\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/STATlogo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/src/dysect/dysect-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/.git/objects/pack/pack-201cb85991551eaa29861bde8de1709ef59f04c0.idx",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/.git/objects/pack/pack-201cb85991551eaa29861bde8de1709ef59f04c0.pack",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/stat_to_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/bgl4k_2d.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statview_screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/single_trace.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statbench_1m_3d.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/trace_and_merge.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_source_view.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_toolbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_attach_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_sample_multiple_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_eq_classes.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/stat_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statview_toolbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_proc_tab.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_node_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_bgl208k_screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statgui_screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/statview_prog_model.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/merged_traces.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/src/figs/bgl4k_3d.png",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/userguide/stat_userguide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-stat-develop-47hx2wrmtht72nwo3arjastvrbbofayt/spack-src/doc/quickstart/stat_quickstart.pdf"
    ],
    "total_files": 341
}