{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/src/OSspecific/POSIX/POSIX.C": "/*---------------------------------------------------------------------------*\\\n  =========                 |\n  \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n   \\\\    /   O peration     |\n    \\\\  /    A nd           | Copyright (C) 2011-2012 OpenFOAM Foundation\n     \\\\/     M anipulation  |\n-------------------------------------------------------------------------------\nLicense\n    This file is part of OpenFOAM.\n\n    OpenFOAM is free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n    for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.\n\nDescription\n    POSIX versions of the functions declared in OSspecific.H\n\n\\*---------------------------------------------------------------------------*/\n\n#ifdef solarisGcc\n# define _SYS_VNODE_H\n#endif\n\n#include \"OSspecific.H\"\n#include \"POSIX.H\"\n#include \"foamVersion.H\"\n#include \"fileName.H\"\n#include \"fileStat.H\"\n#include \"timer.H\"\n#include \"IFstream.H\"\n#include \"DynamicList.H\"\n\n#include <fstream>\n#include <cstdlib>\n#include <cctype>\n\n#include <stdio.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <pwd.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <dlfcn.h>\n#include <link.h>\n\n#include <netinet/in.h>\n\n#ifdef USE_RANDOM\n#   include <climits>\n#   if INT_MAX    != 2147483647\n#       error \"INT_MAX    != 2147483647\"\n#       error \"The random number generator may not work!\"\n#   endif\n#endif\n\n// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //\n\nnamespace Foam\n{\n    defineTypeNameAndDebug(POSIX, 0);\n}\n\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\npid_t Foam::pid()\n{\n    return ::getpid();\n}\n\n\npid_t Foam::ppid()\n{\n    return ::getppid();\n}\n\n\npid_t Foam::pgid()\n{\n    return ::getpgrp();\n}\n\n\nbool Foam::env(const word& envName)\n{\n    return ::getenv(envName.c_str()) != NULL;\n}\n\n\nFoam::string Foam::getEnv(const word& envName)\n{\n    char* env = ::getenv(envName.c_str());\n\n    if (env)\n    {\n        return string(env);\n    }\n    else\n    {\n        // Return null-constructed string rather than string::null\n        // to avoid cyclic dependencies in the construction of globals\n        return string();\n    }\n}\n\n\nbool Foam::setEnv\n(\n    const word& envName,\n    const std::string& value,\n    const bool overwrite\n)\n{\n    return setenv(envName.c_str(), value.c_str(), overwrite) == 0;\n}\n\n\nFoam::string Foam::hostName(bool full)\n{\n    char buf[128];\n    ::gethostname(buf, sizeof(buf));\n\n    // implementation as per hostname from net-tools\n    if (full)\n    {\n        struct hostent *hp = ::gethostbyname(buf);\n        if (hp)\n        {\n            return hp->h_name;\n        }\n    }\n\n    return buf;\n}\n\n\nFoam::string Foam::domainName()\n{\n    char buf[128];\n    ::gethostname(buf, sizeof(buf));\n\n    // implementation as per hostname from net-tools\n    struct hostent *hp = ::gethostbyname(buf);\n    if (hp)\n    {\n        char *p = ::strchr(hp->h_name, '.');\n        if (p)\n        {\n            ++p;\n            return p;\n        }\n    }\n\n    return string::null;\n}\n\n\nFoam::string Foam::userName()\n{\n    struct passwd* pw = ::getpwuid(::getuid());\n\n    if (pw != NULL)\n    {\n        return pw->pw_name;\n    }\n    else\n    {\n        return string::null;\n    }\n}\n\n\nbool Foam::isAdministrator()\n{\n    return (::geteuid() == 0);\n}\n\n\n// use $HOME environment variable or passwd info\nFoam::fileName Foam::home()\n{\n    char* env = ::getenv(\"HOME\");\n\n    if (env != NULL)\n    {\n        return fileName(env);\n    }\n    else\n    {\n        struct passwd* pw = ::getpwuid(getuid());\n\n        if (pw != NULL)\n        {\n            return pw->pw_dir;\n        }\n        else\n        {\n            return fileName::null;\n        }\n    }\n}\n\n\nFoam::fileName Foam::home(const string& userName)\n{\n    struct passwd* pw;\n\n    if (userName.size())\n    {\n        pw = ::getpwnam(userName.c_str());\n    }\n    else\n    {\n        char* env = ::getenv(\"HOME\");\n\n        if (env != NULL)\n        {\n            return fileName(env);\n        }\n\n        pw = ::getpwuid(::getuid());\n    }\n\n    if (pw != NULL)\n    {\n        return pw->pw_dir;\n    }\n    else\n    {\n        return fileName::null;\n    }\n}\n\n\nFoam::fileName Foam::cwd()\n{\n    char buf[256];\n    if (::getcwd(buf, sizeof(buf)))\n    {\n        return buf;\n    }\n    else\n    {\n        FatalErrorIn(\"Foam::cwd()\")\n            << \"Couldn't get the current working directory\"\n            << exit(FatalError);\n\n        return fileName::null;\n    }\n}\n\n\nbool Foam::chDir(const fileName& dir)\n{\n    return ::chdir(dir.c_str()) == 0;\n}\n\n\nFoam::fileNameList Foam::findEtcFiles\n(\n    const fileName& name,\n    bool mandatory,\n    bool findFirst\n)\n{\n    fileNameList results;\n\n    // Search for user files in\n    // * ~/.OpenFOAM/VERSION\n    // * ~/.OpenFOAM\n    //\n    fileName searchDir = home()/\".OpenFOAM\";\n    if (isDir(searchDir))\n    {\n        fileName fullName = searchDir/FOAMversion/name;\n        if (isFile(fullName))\n        {\n            results.append(fullName);\n            if (findFirst)\n            {\n                return results;\n            }\n        }\n\n        fullName = searchDir/name;\n        if (isFile(fullName))\n        {\n            results.append(fullName);\n            if (findFirst)\n            {\n                return results;\n            }\n        }\n    }\n\n    // Search for group (site) files in\n    // * $WM_PROJECT_SITE/VERSION\n    // * $WM_PROJECT_SITE\n    //\n    searchDir = getEnv(\"WM_PROJECT_SITE\");\n    if (searchDir.size())\n    {\n        if (isDir(searchDir))\n        {\n            fileName fullName = searchDir/FOAMversion/name;\n            if (isFile(fullName))\n            {\n                results.append(fullName);\n                if (findFirst)\n                {\n                    return results;\n                }\n            }\n\n            fullName = searchDir/name;\n            if (isFile(fullName))\n            {\n                results.append(fullName);\n                if (findFirst)\n                {\n                    return results;\n                }\n            }\n        }\n    }\n    else\n    {\n        // OR search for group (site) files in\n        // * $WM_PROJECT_INST_DIR/site/VERSION\n        // * $WM_PROJECT_INST_DIR/site\n        //\n        searchDir = getEnv(\"WM_PROJECT_INST_DIR\");\n        if (isDir(searchDir))\n        {\n            fileName fullName = searchDir/\"site\"/FOAMversion/name;\n            if (isFile(fullName))\n            {\n                results.append(fullName);\n                if (findFirst)\n                {\n                    return results;\n                }\n            }\n\n            fullName = searchDir/\"site\"/name;\n            if (isFile(fullName))\n            {\n                results.append(fullName);\n                if (findFirst)\n                {\n                    return results;\n                }\n            }\n        }\n    }\n\n    // Search for other (shipped) files in\n    // * $WM_PROJECT_DIR/etc\n    //\n    searchDir = getEnv(\"WM_PROJECT_DIR\");\n    if (isDir(searchDir))\n    {\n        fileName fullName = searchDir/\"etc\"/name;\n        if (isFile(fullName))\n        {\n            results.append(fullName);\n            if (findFirst)\n            {\n                return results;\n            }\n        }\n    }\n\n    // Not found\n    if (results.empty())\n    {\n        // Abort if the file is mandatory, otherwise return null\n        if (mandatory)\n        {\n            std::cerr\n                << \"--> FOAM FATAL ERROR in Foam::findEtcFiles() :\"\n                   \" could not find mandatory file\\n    '\"\n                << name.c_str() << \"'\\n\\n\" << std::endl;\n            ::exit(1);\n        }\n    }\n\n    // Return list of matching paths or empty list if none found\n    return results;\n}\n\n\nFoam::fileName Foam::findEtcFile(const fileName& name, bool mandatory)\n{\n    fileNameList results(findEtcFiles(name, mandatory, true));\n\n    if (results.size())\n    {\n        return results[0];\n    }\n    else\n    {\n        return fileName();\n    }\n}\n\n\nbool Foam::mkDir(const fileName& pathName, mode_t mode)\n{\n    // empty names are meaningless\n    if (pathName.empty())\n    {\n        return false;\n    }\n\n    // Construct instance path directory if does not exist\n    if (::mkdir(pathName.c_str(), mode) == 0)\n    {\n        // Directory made OK so return true\n        return true;\n    }\n    else\n    {\n        switch (errno)\n        {\n            case EPERM:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"The filesystem containing \" << pathName\n                    << \" does not support the creation of directories.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EEXIST:\n            {\n                // Directory already exists so simply return true\n                return true;\n            }\n\n            case EFAULT:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"\" << pathName\n                    << \" points outside your accessible address space.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EACCES:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"The parent directory does not allow write \"\n                       \"permission to the process,\"<< nl\n                    << \"or one of the directories in \" << pathName\n                    << \" did not allow search (execute) permission.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENAMETOOLONG:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"\" << pathName << \" is too long.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOENT:\n            {\n                // Part of the path does not exist so try to create it\n                if (pathName.path().size() && mkDir(pathName.path(), mode))\n                {\n                    return mkDir(pathName, mode);\n                }\n                else\n                {\n                    FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                        << \"Couldn't create directory \" << pathName\n                        << exit(FatalError);\n\n                    return false;\n                }\n            }\n\n            case ENOTDIR:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"A component used as a directory in \" << pathName\n                    << \" is not, in fact, a directory.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOMEM:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"Insufficient kernel memory was available to make \"\n                       \"directory \" << pathName << '.'\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case EROFS:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"\" << pathName\n                    << \" refers to a file on a read-only filesystem.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ELOOP:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"Too many symbolic links were encountered in resolving \"\n                    << pathName << '.'\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            case ENOSPC:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"The device containing \" << pathName\n                    << \" has no room for the new directory or \"\n                    << \"the user's disk quota is exhausted.\"\n                    << exit(FatalError);\n\n                return false;\n            }\n\n            default:\n            {\n                FatalErrorIn(\"Foam::mkDir(const fileName&, mode_t)\")\n                    << \"Couldn't create directory \" << pathName\n                    << exit(FatalError);\n\n                return false;\n            }\n        }\n    }\n}\n\n\n// Set the file mode\nbool Foam::chMod(const fileName& name, const mode_t m)\n{\n    return ::chmod(name.c_str(), m) == 0;\n}\n\n\n// Return the file mode\nmode_t Foam::mode(const fileName& name)\n{\n    fileStat fileStatus(name);\n    if (fileStatus.isValid())\n    {\n        return fileStatus.status().st_mode;\n    }\n    else\n    {\n        return 0;\n    }\n}\n\n\n// Return the file type: FILE or DIRECTORY\nFoam::fileName::Type Foam::type(const fileName& name)\n{\n    mode_t m = mode(name);\n\n    if (S_ISREG(m))\n    {\n        return fileName::FILE;\n    }\n    else if (S_ISDIR(m))\n    {\n        return fileName::DIRECTORY;\n    }\n    else\n    {\n        return fileName::UNDEFINED;\n    }\n}\n\n\n// Does the name exist in the filing system?\nbool Foam::exists(const fileName& name, const bool checkGzip)\n{\n    return mode(name) || isFile(name, checkGzip);\n}\n\n\n// Does the directory exist?\nbool Foam::isDir(const fileName& name)\n{\n    return S_ISDIR(mode(name));\n}\n\n\n// Does the file exist?\nbool Foam::isFile(const fileName& name, const bool checkGzip)\n{\n    return S_ISREG(mode(name)) || (checkGzip && S_ISREG(mode(name + \".gz\")));\n}\n\n\n// Return size of file\noff_t Foam::fileSize(const fileName& name)\n{\n    fileStat fileStatus(name);\n    if (fileStatus.isValid())\n    {\n        return fileStatus.status().st_size;\n    }\n    else\n    {\n        return -1;\n    }\n}\n\n\n// Return time of last file modification\ntime_t Foam::lastModified(const fileName& name)\n{\n    fileStat fileStatus(name);\n    if (fileStatus.isValid())\n    {\n        return fileStatus.status().st_mtime;\n    }\n    else\n    {\n        return 0;\n    }\n}\n\n\n// Read a directory and return the entries as a string list\nFoam::fileNameList Foam::readDir\n(\n    const fileName& directory,\n    const fileName::Type type,\n    const bool filtergz\n)\n{\n    // Initial filename list size\n    // also used as increment if initial size found to be insufficient\n    static const int maxNnames = 100;\n\n    if (POSIX::debug)\n    {\n        Info<< \"readDir(const fileName&, const fileType, const bool filtergz)\"\n            << \" : reading directory \" << directory << endl;\n    }\n\n    // Setup empty string list MAXTVALUES long\n    fileNameList dirEntries(maxNnames);\n\n    // Pointers to the directory entries\n    DIR *source;\n    struct dirent *list;\n\n    // Temporary variables and counters\n    label nEntries = 0;\n\n    // Attempt to open directory and set the structure pointer\n    if ((source = ::opendir(directory.c_str())) == NULL)\n    {\n        dirEntries.setSize(0);\n\n        if (POSIX::debug)\n        {\n            Info<< \"readDir(const fileName&, const fileType, \"\n                   \"const bool filtergz) : cannot open directory \"\n                << directory << endl;\n        }\n    }\n    else\n    {\n        // Read and parse all the entries in the directory\n        while ((list = ::readdir(source)) != NULL)\n        {\n            fileName fName(list->d_name);\n\n            // ignore files begining with ., i.e. '.', '..' and '.*'\n            if (fName.size() && fName[0] != '.')\n            {\n                word fExt = fName.ext();\n\n                if\n                (\n                    (type == fileName::DIRECTORY)\n                 ||\n                    (\n                        type == fileName::FILE\n                     && fName[fName.size()-1] != '~'\n                     && fExt != \"bak\"\n                     && fExt != \"BAK\"\n                     && fExt != \"old\"\n                     && fExt != \"save\"\n                    )\n                )\n                {\n                    if ((directory/fName).type() == type)\n                    {\n                        if (nEntries >= dirEntries.size())\n                        {\n                            dirEntries.setSize(dirEntries.size() + maxNnames);\n                        }\n\n                        if (filtergz && fExt == \"gz\")\n                        {\n                            dirEntries[nEntries++] = fName.lessExt();\n                        }\n                        else\n                        {\n                            dirEntries[nEntries++] = fName;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Reset the length of the entries list\n        dirEntries.setSize(nEntries);\n\n        ::closedir(source);\n    }\n\n    return dirEntries;\n}\n\n\n// Copy, recursively if necessary, the source to the destination\nbool Foam::cp(const fileName& src, const fileName& dest)\n{\n    // Make sure source exists.\n    if (!exists(src))\n    {\n        return false;\n    }\n\n    fileName destFile(dest);\n\n    // Check type of source file.\n    if (src.type() == fileName::FILE)\n    {\n        // If dest is a directory, create the destination file name.\n        if (destFile.type() == fileName::DIRECTORY)\n        {\n            destFile = destFile/src.name();\n        }\n\n        // Make sure the destination directory exists.\n        if (!isDir(destFile.path()) && !mkDir(destFile.path()))\n        {\n            return false;\n        }\n\n        // Open and check streams.\n        std::ifstream srcStream(src.c_str());\n        if (!srcStream)\n        {\n            return false;\n        }\n\n        std::ofstream destStream(destFile.c_str());\n        if (!destStream)\n        {\n            return false;\n        }\n\n        // Copy character data.\n        char ch;\n        while (srcStream.get(ch))\n        {\n            destStream.put(ch);\n        }\n\n        // Final check.\n        if (!srcStream.eof() || !destStream)\n        {\n            return false;\n        }\n    }\n    else if (src.type() == fileName::DIRECTORY)\n    {\n        // If dest is a directory, create the destination file name.\n        if (destFile.type() == fileName::DIRECTORY)\n        {\n            destFile = destFile/src.component(src.components().size() -1);\n        }\n\n        // Make sure the destination directory exists.\n        if (!isDir(destFile) && !mkDir(destFile))\n        {\n            return false;\n        }\n\n        // Copy files\n        fileNameList contents = readDir(src, fileName::FILE, false);\n        forAll(contents, i)\n        {\n            if (POSIX::debug)\n            {\n                Info<< \"Copying : \" << src/contents[i]\n                    << \" to \" << destFile/contents[i] << endl;\n            }\n\n            // File to file.\n            cp(src/contents[i], destFile/contents[i]);\n        }\n\n        // Copy sub directories.\n        fileNameList subdirs = readDir(src, fileName::DIRECTORY);\n        forAll(subdirs, i)\n        {\n            if (POSIX::debug)\n            {\n                Info<< \"Copying : \" << src/subdirs[i]\n                    << \" to \" << destFile << endl;\n            }\n\n            // Dir to Dir.\n            cp(src/subdirs[i], destFile);\n        }\n    }\n\n    return true;\n}\n\n\n// Create a softlink. dst should not exist. Returns true if successful.\nbool Foam::ln(const fileName& src, const fileName& dst)\n{\n    if (POSIX::debug)\n    {\n        Info<< \"Create softlink from : \" << src << \" to \" << dst\n            << endl;\n    }\n\n    if (exists(dst))\n    {\n        WarningIn(\"ln(const fileName&, const fileName&)\")\n            << \"destination \" << dst << \" already exists. Not linking.\"\n            << endl;\n        return false;\n    }\n\n    if (src.isAbsolute() && !exists(src))\n    {\n        WarningIn(\"ln(const fileName&, const fileName&)\")\n            << \"source \" << src << \" does not exist.\" << endl;\n        return false;\n    }\n\n    if (::symlink(src.c_str(), dst.c_str()) == 0)\n    {\n        return true;\n    }\n    else\n    {\n        WarningIn(\"ln(const fileName&, const fileName&)\")\n            << \"symlink from \" << src << \" to \" << dst << \" failed.\" << endl;\n        return false;\n    }\n}\n\n\n// Rename srcFile dstFile\nbool Foam::mv(const fileName& src, const fileName& dst)\n{\n    if (POSIX::debug)\n    {\n        Info<< \"Move : \" << src << \" to \" << dst << endl;\n    }\n\n    if\n    (\n        dst.type() == fileName::DIRECTORY\n     && src.type() != fileName::DIRECTORY\n    )\n    {\n        const fileName dstName(dst/src.name());\n\n        return ::rename(src.c_str(), dstName.c_str()) == 0;\n    }\n    else\n    {\n        return ::rename(src.c_str(), dst.c_str()) == 0;\n    }\n}\n\n\n//- Rename to a corresponding backup file\n//  If the backup file already exists, attempt with \"01\" .. \"99\" index\nbool Foam::mvBak(const fileName& src, const std::string& ext)\n{\n    if (POSIX::debug)\n    {\n        Info<< \"mvBak : \" << src << \" to extension \" << ext << endl;\n    }\n\n    if (exists(src, false))\n    {\n        const int maxIndex = 99;\n        char index[3];\n\n        for (int n = 0; n <= maxIndex; n++)\n        {\n            fileName dstName(src + \".\" + ext);\n            if (n)\n            {\n                sprintf(index, \"%02d\", n);\n                dstName += index;\n            }\n\n            // avoid overwriting existing files, except for the last\n            // possible index where we have no choice\n            if (!exists(dstName, false) || n == maxIndex)\n            {\n                return ::rename(src.c_str(), dstName.c_str()) == 0;\n            }\n\n        }\n    }\n\n    // fall-through: nothing to do\n    return false;\n}\n\n\n// Remove a file, returning true if successful otherwise false\nbool Foam::rm(const fileName& file)\n{\n    if (POSIX::debug)\n    {\n        Info<< \"Removing : \" << file << endl;\n    }\n\n    // Try returning plain file name; if not there, try with .gz\n    if (remove(file.c_str()) == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return ::remove(string(file + \".gz\").c_str()) == 0;\n    }\n}\n\n\n// Remove a dirctory and its contents\nbool Foam::rmDir(const fileName& directory)\n{\n    if (POSIX::debug)\n    {\n        Info<< \"rmDir(const fileName&) : \"\n            << \"removing directory \" << directory << endl;\n    }\n\n    // Pointers to the directory entries\n    DIR *source;\n    struct dirent *list;\n\n    // Attempt to open directory and set the structure pointer\n    if ((source = ::opendir(directory.c_str())) == NULL)\n    {\n        WarningIn(\"rmDir(const fileName&)\")\n            << \"cannot open directory \" << directory << endl;\n\n        return false;\n    }\n    else\n    {\n        // Read and parse all the entries in the directory\n        while ((list = ::readdir(source)) != NULL)\n        {\n            fileName fName(list->d_name);\n\n            if (fName != \".\" && fName != \"..\")\n            {\n                fileName path = directory/fName;\n\n                if (path.type() == fileName::DIRECTORY)\n                {\n                    if (!rmDir(path))\n                    {\n                        WarningIn(\"rmDir(const fileName&)\")\n                            << \"failed to remove directory \" << fName\n                            << \" while removing directory \" << directory\n                            << endl;\n\n                        ::closedir(source);\n\n                        return false;\n                    }\n                }\n                else\n                {\n                    if (!rm(path))\n                    {\n                        WarningIn(\"rmDir(const fileName&)\")\n                            << \"failed to remove file \" << fName\n                            << \" while removing directory \" << directory\n                            << endl;\n\n                        ::closedir(source);\n\n                        return false;\n                    }\n                }\n            }\n\n        }\n\n        if (!rm(directory))\n        {\n            WarningIn(\"rmDir(const fileName&)\")\n                << \"failed to remove directory \" << directory << endl;\n\n            ::closedir(source);\n\n            return false;\n        }\n\n        ::closedir(source);\n\n        return true;\n    }\n}\n\n\nunsigned int Foam::sleep(const unsigned int s)\n{\n    return ::sleep(s);\n}\n\n\nvoid Foam::fdClose(const int fd)\n{\n    if (close(fd) != 0)\n    {\n        FatalErrorIn\n        (\n            \"fdClose(const int fd)\"\n        )   << \"close error on \" << fd << endl\n            << abort(FatalError);\n    }\n}\n\n\nbool Foam::ping\n(\n    const string& destName,\n    const label destPort,\n    const label timeOut\n)\n{\n    struct hostent *hostPtr;\n    volatile int sockfd;\n    struct sockaddr_in destAddr;      // will hold the destination addr\n    u_int addr;\n\n    if ((hostPtr = ::gethostbyname(destName.c_str())) == NULL)\n    {\n        FatalErrorIn\n        (\n            \"Foam::ping(const string&, ...)\"\n        )   << \"gethostbyname error \" << h_errno << \" for host \" << destName\n            << abort(FatalError);\n    }\n\n    // Get first of the SLL of addresses\n    addr = (reinterpret_cast<struct in_addr*>(*(hostPtr->h_addr_list)))->s_addr;\n\n    // Allocate socket\n    sockfd = ::socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0)\n    {\n        FatalErrorIn\n        (\n            \"Foam::ping(const string&, const label)\"\n        )   << \"socket error\"\n            << abort(FatalError);\n    }\n\n    // Fill sockaddr_in structure with dest address and port\n    memset(reinterpret_cast<char *>(&destAddr), '\\0', sizeof(destAddr));\n    destAddr.sin_family = AF_INET;\n    destAddr.sin_port = htons(ushort(destPort));\n    destAddr.sin_addr.s_addr = addr;\n\n\n    timer myTimer(timeOut);\n\n    if (timedOut(myTimer))\n    {\n        // Setjmp from timer jumps back to here\n        fdClose(sockfd);\n        return false;\n    }\n\n    if\n    (\n        ::connect\n        (\n            sockfd,\n            reinterpret_cast<struct sockaddr*>(&destAddr),\n            sizeof(struct sockaddr)\n        ) != 0\n    )\n    {\n        // Connection refused. Check if network was actually used or not.\n\n        int connectErr = errno;\n\n        fdClose(sockfd);\n\n        if (connectErr == ECONNREFUSED)\n        {\n            return true;\n        }\n        //perror(\"connect\");\n\n        return false;\n    }\n\n    fdClose(sockfd);\n\n    return true;\n}\n\n\nbool Foam::ping(const string& hostname, const label timeOut)\n{\n    return ping(hostname, 222, timeOut) || ping(hostname, 22, timeOut);\n}\n\n\nint Foam::system(const std::string& command)\n{\n    return ::system(command.c_str());\n}\n\n\nvoid* Foam::dlOpen(const fileName& lib, const bool check)\n{\n    if (POSIX::debug)\n    {\n        std::cout<< \"dlOpen(const fileName&)\"\n            << \" : dlopen of \" << lib << std::endl;\n    }\n    void* handle = ::dlopen(lib.c_str(), RTLD_LAZY|RTLD_GLOBAL);\n\n    if (!handle && check)\n    {\n        WarningIn(\"dlOpen(const fileName&, const bool)\")\n            << \"dlopen error : \" << ::dlerror()\n            << endl;\n    }\n\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlOpen(const fileName&)\"\n            << \" : dlopen of \" << lib\n            << \" handle \" << handle << std::endl;\n    }\n\n    return handle;\n}\n\n\nbool Foam::dlClose(void* handle)\n{\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlClose(void*)\"\n            << \" : dlclose of handle \" << handle << std::endl;\n    }\n    return ::dlclose(handle) == 0;\n}\n\n\nvoid* Foam::dlSym(void* handle, const std::string& symbol)\n{\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlSym(void*, const std::string&)\"\n            << \" : dlsym of \" << symbol << std::endl;\n    }\n    // clear any old errors - see manpage dlopen\n    (void) ::dlerror();\n\n    // get address of symbol\n    void* fun = ::dlsym(handle, symbol.c_str());\n\n    // find error (if any)\n    char *error = ::dlerror();\n\n    if (error)\n    {\n        WarningIn(\"dlSym(void*, const std::string&)\")\n            << \"Cannot lookup symbol \" << symbol << \" : \" << error\n            << endl;\n    }\n\n    return fun;\n}\n\n\nbool Foam::dlSymFound(void* handle, const std::string& symbol)\n{\n    if (handle && !symbol.empty())\n    {\n        if (POSIX::debug)\n        {\n            std::cout\n                << \"dlSymFound(void*, const std::string&)\"\n                << \" : dlsym of \" << symbol << std::endl;\n        }\n\n        // clear any old errors - see manpage dlopen\n        (void) ::dlerror();\n\n        // get address of symbol\n        (void) ::dlsym(handle, symbol.c_str());\n\n        // symbol can be found if there was no error\n        return !::dlerror();\n    }\n    else\n    {\n        return false;\n    }\n}\n\n\nstatic int collectLibsCallback\n(\n    struct dl_phdr_info *info,\n    size_t size,\n    void *data\n)\n{\n    Foam::DynamicList<Foam::fileName>* ptr =\n        reinterpret_cast<Foam::DynamicList<Foam::fileName>*>(data);\n    ptr->append(info->dlpi_name);\n    return 0;\n}\n\n\nFoam::fileNameList Foam::dlLoaded()\n{\n    DynamicList<fileName> libs;\n    dl_iterate_phdr(collectLibsCallback, &libs);\n    if (POSIX::debug)\n    {\n        std::cout\n            << \"dlLoaded()\"\n            << \" : determined loaded libraries :\" << libs.size() << std::endl;\n    }\n    return libs;\n}\n\n\nvoid Foam::osRandomSeed(const label seed)\n{\n#ifdef USE_RANDOM\n    srandom((unsigned int)seed);\n#else\n    srand48(seed);\n#endif\n}\n\n\nFoam::label Foam::osRandomInteger()\n{\n#ifdef USE_RANDOM\n    return random();\n#else\n    return lrand48();\n#endif\n}\n\n\nFoam::scalar Foam::osRandomDouble()\n{\n#ifdef USE_RANDOM\n    return (scalar)random()/INT_MAX;\n#else\n    return drand48();\n#endif\n}\n\n\n// ************************************************************************* //\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/applications/utilities/mesh/conversion/kivaToFoam/kiva3v-valves.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/src/meshTools/momentOfInertia/volInt.ps.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/nuSgs.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/p.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/B.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/nuTilda.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/U.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/pimpleFoam/channel395/0/k.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/incompressible/simpleFoam/windAroundBuildings/constant/triSurface/buildings.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/multiphase/driftFluxFoam/ras/tank3D/constant/polyMesh/cells.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/multiphase/driftFluxFoam/ras/tank3D/constant/polyMesh/neighbour.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/multiphase/driftFluxFoam/ras/tank3D/constant/polyMesh/faces.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/multiphase/driftFluxFoam/ras/tank3D/constant/polyMesh/points.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/multiphase/driftFluxFoam/ras/tank3D/constant/polyMesh/owner.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/bullet.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/mixerVessel.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/propellerTip.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/wigley-scaled-oriented.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/wigley.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/DTC-scaled.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/flange.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/blob.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/motorBike.obj.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/resources/geometry/cyclone.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/mesh/moveDynamicMesh/SnakeRiverCanyon/constant/triSurface/AcrossRiver.stl.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/mesh/moveDynamicMesh/SnakeRiverCanyon/constant/triSurface/ACROSSCYN.JPG",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/compressible/sonicFoam/ras/nacaAirfoil/prostar/nacaAirfoil.vrt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/compressible/sonicFoam/ras/nacaAirfoil/prostar/nacaAirfoil.bnd.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/tutorials/compressible/sonicFoam/ras/nacaAirfoil/prostar/nacaAirfoil.cel.gz",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/OpenFOAMicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/OpenFOAMdocIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_corner_topright.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_bullet_full_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_bullet_half_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_head_corner_topleft_25px.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_head_corner_topright_25px.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_bullet_half_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/bg_bullet_full_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Doxygen/css/img/OpenFOAMlogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Guides-a4/ProgrammersGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Guides-a4/UserGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Guides-usletter/ProgrammersGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-openfoam-org-2.4.0-jp4wdjnr4ibmtbxxiaelb2pjfb5vwwmt/spack-src/doc/Guides-usletter/UserGuide.pdf"
    ],
    "total_files": 8486
}