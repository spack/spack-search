{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.6 Debian-2.4.6-0.1\"\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value returned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook functions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll also need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propagate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/s/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (including dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      # -fsanitize=*         Clang/GCC memory and address sanitizer\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*|-fsanitize=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type '$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/port/cplgetsymbol.cpp": "/******************************************************************************\n *\n * Project:  Common Portability Library\n * Purpose:  Fetch a function pointer from a shared library / DLL.\n * Author:   Frank Warmerdam, warmerdam@pobox.com\n *\n ******************************************************************************\n * Copyright (c) 1999, Frank Warmerdam\n * Copyright (c) 2009-2013, Even Rouault <even dot rouault at mines-paris dot org>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n ****************************************************************************/\n\n#include \"cpl_port.h\"\n#include \"cpl_conv.h\"\n\n#include <cstddef>\n\n#include \"cpl_config.h\"\n#include \"cpl_error.h\"\n#include \"cpl_string.h\"\n\nCPL_CVSID(\"$Id: cplgetsymbol.cpp 0f654dda9faabf9d86a44293f0f89903a8e97dd7 2018-04-15 20:18:32 +0200 Even Rouault $\")\n\n/* ==================================================================== */\n/*                  Unix Implementation                                 */\n/* ==================================================================== */\n\n/* MinGW32 might define HAVE_DLFCN_H, so skip the unix implementation */\n#if defined(HAVE_DLFCN_H) && !defined(WIN32)\n\n#define GOT_GETSYMBOL\n\n#include <dlfcn.h>\n\n/************************************************************************/\n/*                            CPLGetSymbol()                            */\n/************************************************************************/\n\n/**\n * Fetch a function pointer from a shared library / DLL.\n *\n * This function is meant to abstract access to shared libraries and\n * DLLs and performs functions similar to dlopen()/dlsym() on Unix and\n * LoadLibrary() / GetProcAddress() on Windows.\n *\n * If no support for loading entry points from a shared library is available\n * this function will always return NULL.   Rules on when this function\n * issues a CPLError() or not are not currently well defined, and will have\n * to be resolved in the future.\n *\n * Currently CPLGetSymbol() doesn't try to:\n * <ul>\n *  <li> prevent the reference count on the library from going up\n *    for every request, or given any opportunity to unload\n *    the library.\n *  <li> Attempt to look for the library in non-standard\n *    locations.\n *  <li> Attempt to try variations on the symbol name, like\n *    pre-pending or post-pending an underscore.\n * </ul>\n *\n * Some of these issues may be worked on in the future.\n *\n * @param pszLibrary the name of the shared library or DLL containing\n * the function.  May contain path to file.  If not system supplies search\n * paths will be used.\n * @param pszSymbolName the name of the function to fetch a pointer to.\n * @return A pointer to the function if found, or NULL if the function isn't\n * found, or the shared library can't be loaded.\n */\n\nvoid *CPLGetSymbol( const char * pszLibrary, const char * pszSymbolName )\n\n{\n    void *pLibrary = dlopen(pszLibrary, RTLD_LAZY);\n    if( pLibrary == nullptr )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"%s\", dlerror() );\n        return nullptr;\n    }\n\n    void *pSymbol = dlsym( pLibrary, pszSymbolName );\n\n#if (defined(__APPLE__) && defined(__MACH__))\n    /* On mach-o systems, C symbols have a leading underscore and depending\n     * on how dlcompat is configured it may or may not add the leading\n     * underscore.  If dlsym() fails, add an underscore and try again.\n     */\n    if( pSymbol == nullptr )\n    {\n        char withUnder[256] = {};\n        snprintf(withUnder, sizeof(withUnder), \"_%s\", pszSymbolName);\n        pSymbol = dlsym( pLibrary, withUnder );\n    }\n#endif\n\n    if( pSymbol == nullptr )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"%s\", dlerror() );\n        // Do not call dlclose here.  misc.py:misc_6() demonstrates the crash.\n        // coverity[leaked_storage]\n        return nullptr;\n    }\n\n    // coverity[leaked_storage]  It is not safe to call dlclose.\n    return( pSymbol );\n}\n\n#endif /* def __unix__ && defined(HAVE_DLFCN_H) */\n\n/* ==================================================================== */\n/*                 Windows Implementation                               */\n/* ==================================================================== */\n#if defined(WIN32)\n\n#define GOT_GETSYMBOL\n\n#include <windows.h>\n\n/************************************************************************/\n/*                            CPLGetSymbol()                            */\n/************************************************************************/\n\nvoid *CPLGetSymbol( const char * pszLibrary, const char * pszSymbolName )\n\n{\n    void *pLibrary = nullptr;\n    void *pSymbol = nullptr;\n\n    // Avoid error boxes to pop up (#5211, #5525).\n    UINT uOldErrorMode =\n        SetErrorMode(SEM_NOOPENFILEERRORBOX | SEM_FAILCRITICALERRORS);\n\n#if defined(_MSC_VER) || __MSVCRT_VERSION__ >= 0x0601\n    if( CPLTestBool( CPLGetConfigOption( \"GDAL_FILENAME_IS_UTF8\", \"YES\" ) ) )\n    {\n        wchar_t *pwszFilename =\n            CPLRecodeToWChar( pszLibrary, CPL_ENC_UTF8, CPL_ENC_UCS2 );\n        pLibrary = LoadLibraryW(pwszFilename);\n        CPLFree( pwszFilename );\n    }\n    else\n#endif\n    {\n        pLibrary = LoadLibraryA(pszLibrary);\n    }\n\n    if( pLibrary <= (void*)HINSTANCE_ERROR )\n    {\n        LPVOID lpMsgBuf = nullptr;\n        int nLastError = GetLastError();\n\n        // Restore old error mode.\n        SetErrorMode(uOldErrorMode);\n\n        FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER\n                       | FORMAT_MESSAGE_FROM_SYSTEM\n                       | FORMAT_MESSAGE_IGNORE_INSERTS,\n                       nullptr, nLastError,\n                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                       reinterpret_cast<LPTSTR>(&lpMsgBuf), 0, nullptr );\n\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Can't load requested DLL: %s\\n%d: %s\",\n                  pszLibrary, nLastError, static_cast<const char *>(lpMsgBuf) );\n        return nullptr;\n    }\n\n    // Restore old error mode.\n    SetErrorMode(uOldErrorMode);\n\n    pSymbol = reinterpret_cast<void *>(GetProcAddress( static_cast<HINSTANCE>(pLibrary), pszSymbolName ));\n\n    if( pSymbol == nullptr )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Can't find requested entry point: %s\", pszSymbolName );\n        return nullptr;\n    }\n\n    return( pSymbol );\n}\n\n#endif  // def _WIN32\n\n/* ==================================================================== */\n/*      Dummy implementation.                                           */\n/* ==================================================================== */\n\n#ifndef GOT_GETSYMBOL\n\n/************************************************************************/\n/*                            CPLGetSymbol()                            */\n/*                                                                      */\n/*      Dummy implementation.                                           */\n/************************************************************************/\n\nvoid *CPLGetSymbol(const char *pszLibrary, const char *pszEntryPoint)\n\n{\n    CPLDebug( \"CPL\",\n              \"CPLGetSymbol(%s,%s) called.  Failed as this is stub\"\n              \" implementation.\", pszLibrary, pszEntryPoint );\n    return nullptr;\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/port/vsipreload.cpp": "/******************************************************************************\n *\n * Project:  CPL - Common Portability Library\n * Purpose:  Standalone shared library that can be LD_PRELOAD'ed as an overload of\n *           libc to enable VSI Virtual FILE API to be used with binaries using\n *           regular libc for I/O.\n * Author:   Even Rouault <even dot rouault at mines dash paris.org>\n *\n ******************************************************************************\n * Copyright (c) 2013, Even Rouault <even dot rouault at mines-paris dot org>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n ****************************************************************************/\n\n// WARNING: Linux glibc ONLY\n// Might work with some adaptations (mainly around 64bit symbols) on other Unix systems\n\n// Compile:\n// g++ -Wall -fPIC port/vsipreload.cpp -shared -o vsipreload.so -Iport -L. -L.libs -lgdal\n\n// Run:\n// LD_PRELOAD=./vsipreload.so ....\n// e.g:\n// LD_PRELOAD=./vsipreload.so gdalinfo /vsicurl/http://download.osgeo.org/gdal/data/ecw/spif83.ecw\n// LD_PRELOAD=./vsipreload.so gdalinfo 'HDF4_EOS:EOS_GRID:\"/vsicurl/http://download.osgeo.org/gdal/data/hdf4/MOD09Q1G_EVI.A2006233.h07v03.005.2008338190308.hdf\":MODIS_NACP_EVI:MODIS_EVI'\n// LD_PRELOAD=./vsipreload.so ogrinfo /vsicurl/http://svn.osgeo.org/gdal/trunk/autotest/ogr/data/testavc -ro\n// even non GDAL binaries :\n// LD_PRELOAD=./vsipreload.so h5dump -d /x /vsicurl/http://download.osgeo.org/gdal/data/netcdf/utm-big-chunks.nc\n// LD_PRELOAD=./vsipreload.so sqlite3 /vsicurl/http://download.osgeo.org/gdal/data/sqlite3/polygon.db \"select * from polygon limit 10\"\n// LD_PRELOAD=./vsipreload.so ls -al /vsicurl/http://download.osgeo.org/gdal/data/sqlite3\n// LD_PRELOAD=./vsipreload.so find /vsicurl/http://download.osgeo.org/gdal/data/sqlite3\n\n#define _GNU_SOURCE 1\n#define _LARGEFILE64_SOURCE 1\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <dlfcn.h>\n#include <string.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#include <set>\n#include <map>\n#include <string>\n#include \"cpl_vsi.h\"\n#include \"cpl_multiproc.h\"\n#include \"cpl_string.h\"\n#include \"cpl_hash_set.h\"\n\nCPL_CVSID(\"$Id: vsipreload.cpp 7b937306fdeb31f6adefa6675d83ccd60f99e619 2018-11-25 23:10:44 +0100 Even Rouault $\")\n\nstatic int DEBUG_VSIPRELOAD = 0;\nstatic int DEBUG_VSIPRELOAD_ONLY_VSIL = 1;\n#define DEBUG_OUTPUT_READ 0\n\n#ifndef NO_FSTATAT\n#define HAVE_FSTATAT\n#endif\n\n#define DECLARE_SYMBOL(x, retType, args) \\\n    typedef retType (*fn ## x ## Type)args;\\\n    static fn ## x ## Type pfn ## x = nullptr\n\nDECLARE_SYMBOL(fopen, FILE*, (const char *path, const char *mode));\nDECLARE_SYMBOL(fopen64, FILE*, (const char *path, const char *mode));\nDECLARE_SYMBOL(fread, size_t, (void *ptr, size_t size, size_t nmemb,\n                               FILE *stream));\nDECLARE_SYMBOL(fwrite, size_t, (const void *ptr, size_t size, size_t nmemb,\n                                FILE *stream));\nDECLARE_SYMBOL(fclose, int, (FILE *stream));\nDECLARE_SYMBOL(__xstat, int, (int ver, const char *path, struct stat *buf));\nDECLARE_SYMBOL(__lxstat, int, (int ver, const char *path, struct stat *buf));\nDECLARE_SYMBOL(__xstat64, int, (int ver, const char *path, struct stat64 *buf));\nDECLARE_SYMBOL(fseeko64, int, (FILE *stream, off64_t off, int whence));\nDECLARE_SYMBOL(fseek, int, (FILE *stream, off_t off, int whence));\nDECLARE_SYMBOL(ftello64, off64_t, (FILE *stream));\nDECLARE_SYMBOL(ftell, off_t, (FILE *stream));\nDECLARE_SYMBOL(feof, int, (FILE *stream));\nDECLARE_SYMBOL(fflush, int, (FILE *stream));\nDECLARE_SYMBOL(fgetpos, int, (FILE *stream, fpos_t *pos));\nDECLARE_SYMBOL(fsetpos, int, (FILE *stream, fpos_t *pos));\nDECLARE_SYMBOL(fileno, int, (FILE *stream));\nDECLARE_SYMBOL(ferror, int, (FILE *stream));\nDECLARE_SYMBOL(clearerr, void, (FILE *stream));\n\nDECLARE_SYMBOL(fdopen, FILE*, (int fd, const char *mode));\nDECLARE_SYMBOL(freopen, FILE*, (const char *path, const char *mode,\n                                FILE *stream));\n\nDECLARE_SYMBOL(open, int, (const char *path, int flags, mode_t mode));\nDECLARE_SYMBOL(open64, int, (const char *path, int flags, mode_t mode));\n// DECLARE_SYMBOL(creat, int, (const char *path, mode_t mode));\nDECLARE_SYMBOL(close, int, (int fd));\nDECLARE_SYMBOL(read, ssize_t, (int fd, void *buf, size_t count));\nDECLARE_SYMBOL(write, ssize_t, (int fd, const void *buf, size_t count));\nDECLARE_SYMBOL(fsync, int, (int fd));\nDECLARE_SYMBOL(fdatasync, int, (int fd));\nDECLARE_SYMBOL(__fxstat, int, (int ver, int fd, struct stat *__stat_buf));\nDECLARE_SYMBOL(__fxstat64, int, (int ver, int fd, struct stat64 *__stat_buf));\n#ifdef HAVE_FSTATAT\nDECLARE_SYMBOL(__fxstatat, int, (int ver, int dirfd, const char *pathname,\n                                 struct stat *buf, int flags));\n#endif\n\nDECLARE_SYMBOL(lseek, off_t, (int fd, off_t off, int whence));\nDECLARE_SYMBOL(lseek64, off64_t , (int fd, off64_t off, int whence));\n\nDECLARE_SYMBOL(truncate, int, (const char *path, off_t length));\nDECLARE_SYMBOL(ftruncate, int, (int fd, off_t length));\n\nDECLARE_SYMBOL(opendir, DIR* , (const char *name));\nDECLARE_SYMBOL(readdir, struct dirent*, (DIR *dirp));\nDECLARE_SYMBOL(readdir64, struct dirent64*, (DIR *dirp));\nDECLARE_SYMBOL(closedir, int, (DIR *dirp));\nDECLARE_SYMBOL(dirfd, int, (DIR *dirp));\nDECLARE_SYMBOL(fchdir, int, (int fd));\n\nstatic CPLLock* hLock = nullptr;\n\ntypedef struct\n{\n    char*  pszDirname;\n    char** papszDir;\n    int    nIter;\n    struct dirent ent;\n    struct dirent64 ent64;\n    int    fd;\n} VSIDIRPreload;\n\nstd::set<VSILFILE*> oSetFiles;\nstd::map<int, VSILFILE*> oMapfdToVSI;\nstd::map<VSILFILE*, int> oMapVSITofd;\nstd::map<VSILFILE*, std::string> oMapVSIToString;\nstd::set<VSIDIRPreload*> oSetVSIDIRPreload;\nstd::map<int, VSIDIRPreload*> oMapfdToVSIDIRPreload;\nstd::map<int, std::string> oMapDirFdToName;\nstd::string osCurDir;\n\n/************************************************************************/\n/*                             myinit()                                 */\n/************************************************************************/\n\n#define LOAD_SYMBOL(x) \\\n    pfn ## x = (fn ## x ## Type) dlsym(RTLD_NEXT, #x); \\\n    assert(pfn ## x)\n\nstatic void myinit()\n{\n    CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n\n    if( pfnfopen64 != nullptr ) return;\n    DEBUG_VSIPRELOAD = getenv(\"DEBUG_VSIPRELOAD\") != nullptr;\n    LOAD_SYMBOL(fopen);\n    LOAD_SYMBOL(fopen64);\n    LOAD_SYMBOL(fread);\n    LOAD_SYMBOL(fwrite);\n    LOAD_SYMBOL(fclose);\n    LOAD_SYMBOL(fseeko64);\n    LOAD_SYMBOL(fseek);\n    LOAD_SYMBOL(__xstat);\n    LOAD_SYMBOL(__lxstat);\n    LOAD_SYMBOL(__xstat64);\n    LOAD_SYMBOL(ftello64);\n    LOAD_SYMBOL(ftell);\n    LOAD_SYMBOL(feof);\n    LOAD_SYMBOL(fflush);\n    LOAD_SYMBOL(fgetpos);\n    LOAD_SYMBOL(fsetpos);\n    LOAD_SYMBOL(fileno);\n    LOAD_SYMBOL(ferror);\n    LOAD_SYMBOL(clearerr);\n\n    LOAD_SYMBOL(fdopen);\n    LOAD_SYMBOL(freopen);\n\n    LOAD_SYMBOL(open);\n    LOAD_SYMBOL(open64);\n    // LOAD_SYMBOL(creat);\n    LOAD_SYMBOL(close);\n    LOAD_SYMBOL(read);\n    LOAD_SYMBOL(write);\n    LOAD_SYMBOL(fsync);\n    LOAD_SYMBOL(fdatasync);\n    LOAD_SYMBOL(__fxstat);\n    LOAD_SYMBOL(__fxstat64);\n#ifdef HAVE_FSTATAT\n    LOAD_SYMBOL(__fxstatat);\n#endif\n    LOAD_SYMBOL(lseek);\n    LOAD_SYMBOL(lseek64);\n\n    LOAD_SYMBOL(truncate);\n    LOAD_SYMBOL(ftruncate);\n\n    LOAD_SYMBOL(opendir);\n    LOAD_SYMBOL(readdir);\n    LOAD_SYMBOL(readdir64);\n    LOAD_SYMBOL(closedir);\n    LOAD_SYMBOL(dirfd);\n    LOAD_SYMBOL(fchdir);\n}\n\n/************************************************************************/\n/*                          getVSILFILE()                               */\n/************************************************************************/\n\nstatic VSILFILE* getVSILFILE( FILE* stream )\n{\n    CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n    std::set<VSILFILE*>::iterator oIter = oSetFiles.find((VSILFILE*)stream);\n    VSILFILE* ret = nullptr;\n    if( oIter != oSetFiles.end() )\n        ret = *oIter;\n    else\n        ret = nullptr;\n    return ret;\n}\n\n/************************************************************************/\n/*                          getVSILFILE()                               */\n/************************************************************************/\n\nstatic VSILFILE* getVSILFILE( int fd )\n{\n    CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n    std::map<int, VSILFILE*>::iterator oIter = oMapfdToVSI.find(fd);\n    VSILFILE* ret = nullptr;\n    if( oIter != oMapfdToVSI.end() )\n        ret = oIter->second;\n    else\n        ret = nullptr;\n    return ret;\n}\n\n/************************************************************************/\n/*                        VSIFSeekLHelper()                             */\n/************************************************************************/\n\nstatic int VSIFSeekLHelper( VSILFILE* fpVSIL, off64_t off, int whence )\n{\n    if( off < 0 && whence == SEEK_CUR )\n    {\n        return VSIFSeekL(fpVSIL, VSIFTellL(fpVSIL) + off, SEEK_SET);\n    }\n    else if( off < 0 && whence == SEEK_END )\n    {\n        VSIFSeekL(fpVSIL, 0, SEEK_END);\n        return VSIFSeekL(fpVSIL, VSIFTellL(fpVSIL) + off, SEEK_SET);\n    }\n\n    return VSIFSeekL(fpVSIL, off, whence);\n}\n\n/************************************************************************/\n/*                          VSIFopenHelper()                            */\n/************************************************************************/\n\nstatic VSILFILE* VSIFfopenHelper( const char *path, const char *mode )\n{\n    VSILFILE* fpVSIL = VSIFOpenL(path, mode);\n    if( fpVSIL != nullptr )\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n        oSetFiles.insert(fpVSIL);\n        oMapVSIToString[fpVSIL] = path;\n    }\n    return fpVSIL;\n}\n\n/************************************************************************/\n/*                         getfdFromVSILFILE()                          */\n/************************************************************************/\n\nstatic int getfdFromVSILFILE( VSILFILE* fpVSIL )\n{\n    CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n\n    int fd = 0;\n    std::map<VSILFILE*, int>::iterator oIter = oMapVSITofd.find(fpVSIL);\n    if( oIter != oMapVSITofd.end() )\n        fd = oIter->second;\n    else\n    {\n        fd = open(\"/dev/zero\", O_RDONLY);\n        assert(fd >= 0);\n        oMapVSITofd[fpVSIL] = fd;\n        oMapfdToVSI[fd] = fpVSIL;\n    }\n    return fd;\n}\n\n/************************************************************************/\n/*                          VSIFopenHelper()                            */\n/************************************************************************/\n\nstatic int VSIFopenHelper( const char *path, int flags )\n{\n    const char* pszMode = \"rb\";\n    if( (flags & 3) == O_RDONLY )\n        pszMode = \"rb\";\n    else if( (flags & 3) == O_WRONLY )\n    {\n        if( flags & O_APPEND )\n            pszMode = \"ab\";\n        else\n            pszMode = \"wb\";\n    }\n    else\n    {\n        if( flags & O_APPEND )\n            pszMode = \"ab+\";\n        else\n            pszMode = \"rb+\";\n    }\n    VSILFILE* fpVSIL = VSIFfopenHelper(path, pszMode );\n    int fd = 0;\n    if( fpVSIL != nullptr )\n    {\n        if( flags & O_TRUNC )\n        {\n            VSIFTruncateL(fpVSIL, 0);\n            VSIFSeekL(fpVSIL, 0, SEEK_SET);\n        }\n        fd = getfdFromVSILFILE(fpVSIL);\n    }\n    else\n        fd = -1;\n    return fd;\n}\n\n/************************************************************************/\n/*                    GET_DEBUG_VSIPRELOAD_COND()                             */\n/************************************************************************/\n\nstatic bool GET_DEBUG_VSIPRELOAD_COND( const char* path )\n{\n    return\n        DEBUG_VSIPRELOAD &&\n    // cppcheck-suppress knownConditionTrueFalse\n        (!DEBUG_VSIPRELOAD_ONLY_VSIL || STARTS_WITH(path, \"/vsi\"));\n}\n\nstatic bool GET_DEBUG_VSIPRELOAD_COND(VSILFILE* fpVSIL)\n{\n    // cppcheck-suppress knownConditionTrueFalse\n    return DEBUG_VSIPRELOAD && (!DEBUG_VSIPRELOAD_ONLY_VSIL || fpVSIL != nullptr);\n}\n\nstatic bool GET_DEBUG_VSIPRELOAD_COND(VSIDIRPreload* dirP)\n{\n    return\n        DEBUG_VSIPRELOAD &&\n    // cppcheck-suppress knownConditionTrueFalse\n        (!DEBUG_VSIPRELOAD_ONLY_VSIL ||\n         oSetVSIDIRPreload.find(dirP) != oSetVSIDIRPreload.end());\n}\n\n/************************************************************************/\n/*                     copyVSIStatBufLToBuf()                           */\n/************************************************************************/\n\nstatic void copyVSIStatBufLToBuf( VSIStatBufL* bufSrc, struct stat *buf )\n{\n    buf->st_dev = bufSrc->st_dev;\n    buf->st_ino = bufSrc->st_ino;\n    // S_IXUSR | S_IXGRP | S_IXOTH;\n    buf->st_mode = bufSrc->st_mode | S_IRUSR | S_IRGRP | S_IROTH;\n    buf->st_nlink = 1;   // bufSrc->st_nlink;\n    buf->st_uid = bufSrc->st_uid;\n    buf->st_gid = bufSrc->st_gid;\n    buf->st_rdev = bufSrc->st_rdev;\n    buf->st_size = bufSrc->st_size;\n    buf->st_blksize = bufSrc->st_blksize;\n    buf->st_blocks = bufSrc->st_blocks;\n    buf->st_atime = bufSrc->st_atime;\n    buf->st_mtime = bufSrc->st_mtime;\n    buf->st_ctime = bufSrc->st_ctime;\n}\n\n/************************************************************************/\n/*                     copyVSIStatBufLToBuf64()                         */\n/************************************************************************/\n\nstatic void copyVSIStatBufLToBuf64( VSIStatBufL *bufSrc, struct stat64 *buf )\n{\n    buf->st_dev = bufSrc->st_dev;\n    buf->st_ino = bufSrc->st_ino;\n    // S_IXUSR | S_IXGRP | S_IXOTH;\n    buf->st_mode = bufSrc->st_mode | S_IRUSR | S_IRGRP | S_IROTH;\n    buf->st_nlink = 1; // bufSrc->st_nlink;\n    buf->st_uid = bufSrc->st_uid;\n    buf->st_gid = bufSrc->st_gid;\n    buf->st_rdev = bufSrc->st_rdev;\n    buf->st_size = bufSrc->st_size;\n    buf->st_blksize = bufSrc->st_blksize;\n    buf->st_blocks = bufSrc->st_blocks;\n    buf->st_atime = bufSrc->st_atime;\n    buf->st_mtime = bufSrc->st_mtime;\n    buf->st_ctime = bufSrc->st_ctime;\n}\n\n/************************************************************************/\n/*                             fopen()                                  */\n/************************************************************************/\n\nFILE CPL_DLL *fopen( const char *path, const char *mode )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fopen(%s, %s)\\n\", path, mode);\n    FILE* ret;\n    if( STARTS_WITH(path, \"/vsi\") )\n        ret = (FILE*) VSIFfopenHelper(path, mode);\n    else\n        ret = pfnfopen(path, mode);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fopen() = %p\\n\", ret);\n    return ret;\n}\n\n/************************************************************************/\n/*                            fopen64()                                 */\n/************************************************************************/\n\nFILE CPL_DLL *fopen64( const char *path, const char *mode )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fopen64(%s, %s)\\n\", path, mode);\n    FILE* ret;\n    if( STARTS_WITH(path, \"/vsi\") )\n        ret = (FILE*) VSIFfopenHelper(path, mode);\n    else\n        ret = pfnfopen64(path, mode);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fopen64() = %p\\n\", ret);\n    return ret;\n}\n\n/************************************************************************/\n/*                            fread()                                   */\n/************************************************************************/\n\nsize_t CPL_DLL fread( void *ptr, size_t size, size_t nmemb, FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fread(stream=%p,size=%d,nmemb=%d)\\n\",\n                stream, static_cast<int>(size), static_cast<int>(nmemb));\n    size_t ret = 0;\n    if( fpVSIL )\n        ret = VSIFReadL(ptr, size, nmemb, fpVSIL);\n    else\n        ret = pfnfread(ptr, size, nmemb, stream);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fread(stream=%p,size=%d,nmemb=%d) -> %d\\n\",\n                stream, static_cast<int>(size), static_cast<int>(nmemb),\n                static_cast<int>(ret));\n    return ret;\n}\n\n/************************************************************************/\n/*                            fwrite()                                  */\n/************************************************************************/\n\nsize_t CPL_DLL fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fwrite(stream=%p,size=%d,nmemb=%d)\\n\",\n                stream, static_cast<int>(size), static_cast<int>(nmemb));\n    size_t ret = 0;\n    if( fpVSIL != nullptr )\n        ret = VSIFWriteL(ptr, size, nmemb, fpVSIL);\n    else\n        ret = pfnfwrite(ptr, size, nmemb, stream);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fwrite(stream=%p,size=%d,nmemb=%d) -> %d\\n\",\n                stream, static_cast<int>(size), static_cast<int>(nmemb),\n                static_cast<int>(ret));\n    return ret;\n}\n\n/************************************************************************/\n/*                            fclose()                                  */\n/************************************************************************/\n\nint CPL_DLL fclose( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fclose(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n\n        int ret = VSIFCloseL(fpVSIL);\n        oMapVSIToString.erase(fpVSIL);\n        oSetFiles.erase(fpVSIL);\n\n        std::map<VSILFILE*, int>::iterator oIter = oMapVSITofd.find(fpVSIL);\n        if( oIter != oMapVSITofd.end() )\n        {\n            int fd = oIter->second;\n            pfnclose(fd);\n            oMapVSITofd.erase(oIter);\n            oMapfdToVSI.erase(fd);\n        }\n\n        return ret;\n    }\n    else\n        return pfnfclose(stream);\n}\n\n/************************************************************************/\n/*                            __xstat()                                 */\n/************************************************************************/\n\nint CPL_DLL __xstat( int ver, const char *path, struct stat *buf )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD && (!osCurDir.empty() && path[0] != '/') )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"__xstat(%s)\\n\", path);\n    if( (!osCurDir.empty() && path[0] != '/') || STARTS_WITH(path, \"/vsi\") )\n    {\n        VSIStatBufL sStatBufL;\n        std::string newpath;\n        if( (!osCurDir.empty() && path[0] != '/') )\n        {\n            newpath = CPLFormFilename(osCurDir.c_str(), path, nullptr);\n            path = newpath.c_str();\n        }\n        const int ret = VSIStatL(path, &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(path));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__xstat(%s) ret = 0, mode = %d, size=%d\\n\",\n                        path, sStatBufL.st_mode,\n                        static_cast<int>(sStatBufL.st_size));\n        }\n        return ret;\n    }\n    else\n    {\n        int ret = pfn__xstat(ver, path, buf);\n        if( ret == 0 )\n        {\n            if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr,\n                \"__xstat ret = 0, mode = %d\\n\", buf->st_mode);\n        }\n        return ret;\n    }\n}\n\n/************************************************************************/\n/*                           __lxstat()                                 */\n/************************************************************************/\n\nint CPL_DLL __lxstat( int ver, const char *path, struct stat *buf )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD && (!osCurDir.empty() && path[0] != '/') )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"__lxstat(%s)\\n\", path);\n    if( (!osCurDir.empty() && path[0] != '/') || STARTS_WITH(path, \"/vsi\") )\n    {\n        VSIStatBufL sStatBufL;\n        std::string newpath;\n        if( (!osCurDir.empty() && path[0] != '/') )\n        {\n            newpath = CPLFormFilename(osCurDir.c_str(), path, nullptr);\n            path = newpath.c_str();\n        }\n        const int ret = VSIStatL(path, &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(path));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__lxstat(%s) ret = 0, mode = %d, size=%d\\n\",\n                        path, sStatBufL.st_mode,\n                        static_cast<int>(sStatBufL.st_size));\n        }\n        return ret;\n    }\n    else\n    {\n        int ret = pfn__lxstat(ver, path, buf);\n        if( ret == 0 )\n        {\n            if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr,\n                \"__lxstat ret = 0, mode = %d\\n\", buf->st_mode);\n        }\n        return ret;\n    }\n}\n\n/************************************************************************/\n/*                           __xstat64()                                */\n/************************************************************************/\n\nint CPL_DLL __xstat64( int ver, const char *path, struct stat64 *buf )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD && (!osCurDir.empty() && path[0] != '/') )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"__xstat64(%s)\\n\", path);\n    if( (!osCurDir.empty() && path[0] != '/') || STARTS_WITH(path, \"/vsi\") )\n    {\n        VSIStatBufL sStatBufL;\n        std::string newpath;\n        if( (!osCurDir.empty() && path[0] != '/') )\n        {\n            newpath = CPLFormFilename(osCurDir.c_str(), path, nullptr);\n            path = newpath.c_str();\n        }\n        const int ret = VSIStatL(path, &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(path));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf64(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__xstat64(%s) ret = 0, mode = %d, size = %d\\n\",\n                        path, buf->st_mode, static_cast<int>(buf->st_size));\n        }\n        return ret;\n    }\n    else\n        return pfn__xstat64(ver, path, buf);\n}\n\n/************************************************************************/\n/*                           fseeko64()                                 */\n/************************************************************************/\n\nint CPL_DLL fseeko64( FILE *stream, off64_t off, int whence )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fseeko64(stream=%p, off=%d, whence=%d)\\n\",\n                stream, static_cast<int>(off), whence);\n    if( fpVSIL != nullptr )\n        return VSIFSeekLHelper(fpVSIL, off, whence);\n    else\n        return pfnfseeko64(stream, off, whence);\n}\n\n/************************************************************************/\n/*                           fseeko()                                 */\n/************************************************************************/\n\nint CPL_DLL fseeko( FILE *stream, off_t off, int whence )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fseeko(stream=%p, off=%d, whence=%d)\\n\",\n                stream, static_cast<int>(off), whence);\n    if( fpVSIL != nullptr )\n        return VSIFSeekLHelper(fpVSIL, off, whence);\n    else\n        return pfnfseeko64(stream, off, whence);\n}\n\n/************************************************************************/\n/*                            fseek()                                   */\n/************************************************************************/\n\nint CPL_DLL fseek( FILE *stream, off_t off, int whence )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fseek(stream=%p, off=%d, whence=%d)\\n\",\n                stream, static_cast<int>(off), whence);\n    if( fpVSIL != nullptr )\n        return VSIFSeekLHelper(fpVSIL, off, whence);\n    else\n        return pfnfseek(stream, off, whence);\n}\n\n/************************************************************************/\n/*                           ftello64()                                 */\n/************************************************************************/\n\noff64_t CPL_DLL ftello64( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"ftello64(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n        return VSIFTellL(fpVSIL);\n    else\n        return pfnftello64(stream);\n}\n\n/************************************************************************/\n/*                            ftello()                                  */\n/************************************************************************/\n\noff_t CPL_DLL ftello( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"ftello(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n        return VSIFTellL(fpVSIL);\n    else\n        return pfnftello64(stream);\n}\n\n/************************************************************************/\n/*                            ftell()                                   */\n/************************************************************************/\n\noff_t CPL_DLL ftell( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"ftell(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n        return VSIFTellL(fpVSIL);\n    else\n        return pfnftell(stream);\n}\n\n/************************************************************************/\n/*                             feof()                                   */\n/************************************************************************/\n\nint CPL_DLL feof( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"feof(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n        return VSIFEofL(fpVSIL);\n    else\n        return pfnfeof(stream);\n}\n\n/************************************************************************/\n/*                            rewind()                                  */\n/************************************************************************/\n\nvoid CPL_DLL rewind( FILE *stream )\n{\n    fseek(stream, 0, SEEK_SET);\n}\n\n/************************************************************************/\n/*                            fflush()                                  */\n/************************************************************************/\n\nint CPL_DLL fflush( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fflush(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n        return 0;\n    else\n        return pfnfflush(stream);\n}\n\n/************************************************************************/\n/*                            fgetpos()                                 */\n/************************************************************************/\n\nint CPL_DLL fgetpos( FILE *stream, fpos_t *pos )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fgetpos(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"fgetpos() unimplemented for VSILFILE\\n\");\n        return -1; // FIXME\n    }\n    else\n        return pfnfgetpos(stream, pos);\n}\n\n/************************************************************************/\n/*                            fsetpos()                                 */\n/************************************************************************/\n\nint CPL_DLL fsetpos( FILE *stream, fpos_t *pos )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fsetpos(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"fsetpos() unimplemented for VSILFILE\\n\");\n        return -1; // FIXME\n    }\n    else\n        return pfnfsetpos(stream, pos);\n}\n\n/************************************************************************/\n/*                             fileno()                                 */\n/************************************************************************/\n\nint CPL_DLL fileno( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fileno(stream=%p)\\n\", stream);\n    int fd = 0;\n    if( fpVSIL != nullptr )\n        fd = getfdFromVSILFILE(fpVSIL);\n    else\n        fd = pfnfileno(stream);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"fileno(stream=%p) = %d\\n\", stream, fd);\n    return fd;\n}\n\n/************************************************************************/\n/*                             ferror()                                 */\n/************************************************************************/\n\nint CPL_DLL ferror( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"ferror(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"ferror() unimplemented for VSILFILE\\n\");\n        return 0; // FIXME ?\n    }\n    else\n        return pfnferror(stream);\n}\n\n/************************************************************************/\n/*                             clearerr()                               */\n/************************************************************************/\n\nvoid CPL_DLL clearerr( FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"clearerr(stream=%p)\\n\", stream);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"clearerr() unimplemented for VSILFILE\\n\");\n    }\n    else\n        pfnclearerr(stream);\n}\n\n/************************************************************************/\n/*                             fdopen()                                 */\n/************************************************************************/\n\nFILE CPL_DLL * fdopen( int fd, const char *mode )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fdopen(fd=%d)\\n\", fd);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"fdopen() unimplemented for VSILFILE\\n\");\n        return nullptr; // FIXME ?\n    }\n    else\n        return pfnfdopen(fd, mode);\n}\n\n/************************************************************************/\n/*                             freopen()                                */\n/************************************************************************/\n\nFILE CPL_DLL *freopen( const char *path, const char *mode, FILE *stream )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(stream);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"freopen(path=%s,mode=%s,stream=%p)\\n\",\n                path, mode, stream);\n    if( fpVSIL != nullptr )\n    {\n        fprintf(stderr, \"freopen() unimplemented for VSILFILE\\n\");\n        return nullptr; // FIXME ?\n    }\n    else\n        return pfnfreopen(path, mode, stream);\n}\n\n/************************************************************************/\n/*                              open()                                  */\n/************************************************************************/\n\nint CPL_DLL open( const char *path, int flags, ... )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD && !osCurDir.empty() && path[0] != '/' )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND )\n    {\n        if( !osCurDir.empty() && path[0] != '/' )\n            fprintf(stderr, \"open(%s)\\n\",\n                    CPLFormFilename(osCurDir.c_str(), path, nullptr));\n        else\n            fprintf(stderr, \"open(%s)\\n\", path);\n    }\n\n    va_list args;\n    va_start(args, flags);\n    mode_t mode = va_arg(args, mode_t);\n    int fd = 0;\n    if( !osCurDir.empty() && path[0] != '/' &&\n        (flags & 3) == O_RDONLY && (flags & O_DIRECTORY) != 0 )\n    {\n        VSIStatBufL sStatBufL;\n        char* newname =\n            const_cast<char *>(CPLFormFilename(osCurDir.c_str(), path, nullptr));\n        if( strchr(osCurDir.c_str(), '/') != nullptr && strcmp(path, \"..\") == 0 )\n        {\n            char* lastslash = strrchr(newname, '/');\n            if( lastslash != nullptr )\n            {\n                *lastslash = 0;\n                lastslash = strrchr(newname, '/');\n                if( lastslash != nullptr )\n                    *lastslash = 0;\n            }\n        }\n        if( VSIStatL(newname, &sStatBufL) == 0 &&\n            S_ISDIR(sStatBufL.st_mode) )\n        {\n            fd = open(\"/dev/zero\", O_RDONLY);\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX)\n            oMapDirFdToName[fd] = newname;\n        }\n        else\n            fd = -1;\n    }\n    else if( STARTS_WITH(path, \"/vsi\") )\n        fd = VSIFopenHelper(path, flags);\n    else\n        fd = pfnopen(path, flags, mode);\n    va_end(args);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"open(%s) = %d\\n\", path, fd);\n    return fd;\n}\n\n/************************************************************************/\n/*                             open64()                                 */\n/************************************************************************/\n\nint CPL_DLL open64( const char *path, int flags, ... )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD && !osCurDir.empty() && path[0] != '/' )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND )\n    {\n        if( !osCurDir.empty() && path[0] != '/' )\n            fprintf(stderr, \"open64(%s)\\n\",\n                    CPLFormFilename(osCurDir.c_str(), path, nullptr));\n        else\n            fprintf(stderr, \"open64(%s)\\n\", path);\n    }\n\n    va_list args;\n    va_start(args, flags);\n    mode_t mode = va_arg(args, mode_t);\n    int fd = 0;\n    if( !osCurDir.empty() && path[0] != '/' &&\n        (flags & 3) == O_RDONLY && (flags & O_DIRECTORY) != 0 )\n    {\n        VSIStatBufL sStatBufL;\n        char* newname =\n            const_cast<char *>(CPLFormFilename(osCurDir.c_str(), path, nullptr));\n        if( strchr(osCurDir.c_str(), '/') != nullptr && strcmp(path, \"..\") == 0 )\n        {\n            char* lastslash = strrchr(newname, '/');\n            if( lastslash != nullptr )\n            {\n                *lastslash = 0;\n                lastslash = strrchr(newname, '/');\n                if( lastslash != nullptr )\n                    *lastslash = 0;\n            }\n        }\n        if( VSIStatL(newname, &sStatBufL) == 0 &&\n            S_ISDIR(sStatBufL.st_mode) )\n        {\n            fd = open(\"/dev/zero\", O_RDONLY);\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX)\n            oMapDirFdToName[fd] = newname;\n        }\n        else\n            fd = -1;\n    }\n    else if( STARTS_WITH(path, \"/vsi\") )\n        fd = VSIFopenHelper(path, flags);\n    else\n        fd = pfnopen64(path, flags, mode);\n    va_end(args);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"open64(%s) = %d\\n\", path, fd);\n    return fd;\n}\n\n/************************************************************************/\n/*                             creat()                                  */\n/************************************************************************/\n\nint CPL_DLL creat( const char *path, mode_t mode )\n{\n    return open64(path, O_CREAT|O_WRONLY|O_TRUNC, mode);\n}\n\n/************************************************************************/\n/*                             close()                                  */\n/************************************************************************/\n\nint CPL_DLL close( int fd )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n        assert( oMapfdToVSIDIRPreload.find(fd) == oMapfdToVSIDIRPreload.end() );\n\n        // cppcheck-suppress redundantIfRemove\n        if( oMapDirFdToName.find(fd) != oMapDirFdToName.end())\n        {\n            oMapDirFdToName.erase(fd);\n            if( DEBUG_VSIPRELOAD )\n                DEBUG_VSIPRELOAD_COND = 1;\n        }\n    }\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"close(fd=%d)\\n\", fd);\n    if( fpVSIL != nullptr )\n    {\n        VSIFCloseL(fpVSIL);\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n        oSetFiles.erase(fpVSIL);\n        pfnclose(oMapVSITofd[fpVSIL]);\n        oMapVSITofd.erase(fpVSIL);\n        oMapfdToVSI.erase(fd);\n        oMapVSIToString.erase(fpVSIL);\n        return 0;\n    }\n    else\n        return pfnclose(fd);\n}\n\n/************************************************************************/\n/*                              read()                                  */\n/************************************************************************/\n\nssize_t CPL_DLL read( int fd, void *buf, size_t count )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"read(fd=%d, count=%d)\\n\",\n                fd, static_cast<int>(count));\n    ssize_t ret = 0;\n    if( fpVSIL != nullptr )\n        ret = VSIFReadL(buf, 1, count, fpVSIL);\n    else\n        ret = pfnread(fd, buf, count);\n    if( DEBUG_VSIPRELOAD_COND && DEBUG_OUTPUT_READ && ret < 40 )\n    {\n        fprintf(stderr, \"read() : \");\n        for( int i = 0; i < ret; i++ )\n        {\n            if( ((unsigned char*)buf)[i] >= 'A' &&\n                ((unsigned char*)buf)[i] <= 'Z' )\n                fprintf(stderr, \"%c \", ((unsigned char*)buf)[i]);\n            else\n                fprintf(stderr, \"\\\\%02X \", ((unsigned char*)buf)[i]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"read() -> %d\\n\", static_cast<int>(ret));\n    return ret;\n}\n\n/************************************************************************/\n/*                              write()                                 */\n/************************************************************************/\n\nssize_t CPL_DLL write( int fd, const void *buf, size_t count )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"write(fd=%d, count=%d)\\n\",\n                fd, static_cast<int>(count));\n    if( fpVSIL != nullptr )\n        return VSIFWriteL(buf, 1, count, fpVSIL);\n    else\n        return pfnwrite(fd, buf, count);\n}\n\n/************************************************************************/\n/*                              fsync()                                 */\n/************************************************************************/\n\nint CPL_DLL fsync( int fd )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fsync(fd=%d)\\n\", fd);\n    if( fpVSIL != nullptr )\n        return 0;\n    else\n        return pfnfsync(fd);\n}\n\n/************************************************************************/\n/*                           fdatasync()                                */\n/************************************************************************/\n\nint CPL_DLL fdatasync( int fd )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fdatasync(fd=%d)\\n\", fd);\n    if( fpVSIL != nullptr )\n        return 0;\n    else\n        return pfnfdatasync(fd);\n}\n\n/************************************************************************/\n/*                            __fxstat()                                */\n/************************************************************************/\n\nint CPL_DLL __fxstat( int ver, int fd, struct stat *buf )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    std::string name;\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX)\n        if( oMapDirFdToName.find(fd) != oMapDirFdToName.end())\n        {\n            name = oMapDirFdToName[fd];\n            if( DEBUG_VSIPRELOAD )\n                DEBUG_VSIPRELOAD_COND = 1;\n        }\n    }\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"__fxstat(fd=%d)\\n\", fd);\n    if( !name.empty() )\n    {\n        VSIStatBufL sStatBufL;\n        if( DEBUG_VSIPRELOAD_COND )\n            fprintf(stderr, \"__fxstat(%s)\\n\", name.c_str());\n        int ret = VSIStatL(name.c_str(), &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(name.c_str()));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__fxstat ret = 0, mode = %d, size = %d\\n\",\n                        sStatBufL.st_mode, static_cast<int>(sStatBufL.st_size));\n        }\n        return ret;\n    }\n    else if( fpVSIL != nullptr )\n    {\n        VSIStatBufL sStatBufL;\n        {\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n            name = oMapVSIToString[fpVSIL];\n        }\n        int ret = VSIStatL(name.c_str(), &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(name.c_str()));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__fxstat ret = 0, mode = %d, size = %d\\n\",\n                        sStatBufL.st_mode, static_cast<int>(sStatBufL.st_size));\n        }\n        return ret;\n    }\n    else\n        return pfn__fxstat(ver, fd, buf);\n}\n\n/************************************************************************/\n/*                           __fxstat64()                               */\n/************************************************************************/\n\nint CPL_DLL __fxstat64( int ver, int fd, struct stat64 *buf )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"__fxstat64(fd=%d)\\n\", fd);\n    if( fpVSIL != nullptr )\n    {\n        VSIStatBufL sStatBufL;\n        std::string name;\n        {\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n            name = oMapVSIToString[fpVSIL];\n        }\n        int ret = VSIStatL(name.c_str(), &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(name.c_str()));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf64(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__fxstat64 ret = 0, mode = %d, size = %d\\n\",\n                        buf->st_mode, static_cast<int>(buf->st_size));\n        }\n        return ret;\n    }\n    else\n        return pfn__fxstat64(ver, fd, buf);\n}\n\n/************************************************************************/\n/*                           __fxstatat()                               */\n/************************************************************************/\n\n#ifdef HAVE_FSTATAT\nint CPL_DLL __fxstatat( int ver, int dirfd, const char *pathname, struct stat *buf,\n                int flags )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(pathname);\n    if( DEBUG_VSIPRELOAD && !osCurDir.empty() )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"__fxstatat(dirfd=%d,pathname=%s,flags=%d)\\n\",\n                dirfd, pathname, flags);\n\n    if( !osCurDir.empty() || STARTS_WITH(pathname, \"/vsi\") )\n    {\n        VSIStatBufL sStatBufL;\n        if( !osCurDir.empty() && dirfd == AT_FDCWD && pathname[0] != '/' )\n            pathname = CPLFormFilename(osCurDir.c_str(), pathname, nullptr);\n        const int ret = VSIStatL(pathname, &sStatBufL);\n        sStatBufL.st_ino = static_cast<int>(CPLHashSetHashStr(pathname));\n        if( ret == 0 )\n        {\n            copyVSIStatBufLToBuf(&sStatBufL, buf);\n            if( DEBUG_VSIPRELOAD_COND )\n                fprintf(stderr,\n                        \"__fxstatat(%s) ret = 0, mode = %d, size = %d\\n\",\n                        pathname, buf->st_mode, static_cast<int>(buf->st_size));\n        }\n        return ret;\n    }\n    else\n        return pfn__fxstatat(ver, dirfd, pathname, buf, flags);\n}\n#endif\n\n/************************************************************************/\n/*                              lseek()                                 */\n/************************************************************************/\n\noff_t CPL_DLL lseek( int fd, off_t off, int whence )\n{\n    myinit();\n    off_t ret;\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr,\n                \"lseek(fd=%d, off=%d, whence=%d)\\n\",\n                fd, static_cast<int>(off), whence);\n    if( fpVSIL != nullptr )\n    {\n        VSIFSeekLHelper(fpVSIL, off, whence);\n        ret = VSIFTellL(fpVSIL);\n    }\n    else\n        ret = pfnlseek(fd, off, whence);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"lseek() -> ret = %d\\n\", static_cast<int>(ret));\n    return ret;\n}\n\n/************************************************************************/\n/*                             lseek64()                                */\n/************************************************************************/\n\noff64_t CPL_DLL lseek64( int fd, off64_t off, int whence )\n{\n    myinit();\n    off_t ret;\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr,\n                \"lseek64(fd=%d, off=%d, whence=%d)\\n\",\n                fd, static_cast<int>(off), whence);\n    if( fpVSIL != nullptr )\n    {\n        VSIFSeekLHelper(fpVSIL, off, whence);\n        ret = VSIFTellL(fpVSIL);\n    }\n    else\n        ret = pfnlseek64(fd, off, whence);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr,\n                \"lseek64() -> ret = %d\\n\", static_cast<int>(ret));\n    return ret;\n}\n\n/************************************************************************/\n/*                            truncate()                                */\n/************************************************************************/\n\nint CPL_DLL truncate( const char *path, off_t length )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"truncate(%s)\\n\", path);\n\n    int ret = 0;\n    if( STARTS_WITH(path, \"/vsi\") )\n    {\n        VSILFILE* fpVSIL = VSIFOpenL(path, \"wb+\");\n        if( fpVSIL )\n        {\n            ret = VSIFTruncateL(fpVSIL, length);\n            VSIFCloseL(fpVSIL);\n        }\n        else\n            ret = -1;\n    }\n    else\n        ret = pfntruncate(path, length);\n    return ret;\n}\n\n/************************************************************************/\n/*                           ftruncate()                                */\n/************************************************************************/\n\nint CPL_DLL ftruncate( int fd, off_t length )\n{\n    myinit();\n    VSILFILE* fpVSIL = getVSILFILE(fd);\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(fpVSIL);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"ftruncate(fd=%d)\\n\", fd);\n    int ret = 0;\n    if( fpVSIL != nullptr )\n    {\n        ret = VSIFTruncateL(fpVSIL, length);\n    }\n    else\n        ret = pfnftruncate(fd, length);\n    return ret;\n}\n\n/************************************************************************/\n/*                             opendir()                                */\n/************************************************************************/\n\nDIR CPL_DLL *opendir( const char *name )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(name);\n    if( DEBUG_VSIPRELOAD && !osCurDir.empty() )\n        DEBUG_VSIPRELOAD_COND = 1;\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"opendir(%s)\\n\", name);\n\n    DIR * ret;\n    if( !osCurDir.empty() || STARTS_WITH(name, \"/vsi\") )\n    {\n        char** papszDir;\n        if( !osCurDir.empty() && name[0] != '/' )\n            name = CPLFormFilename(osCurDir.c_str(), name, nullptr);\n        papszDir = VSIReadDir(name);\n        if( papszDir == nullptr )\n        {\n            VSIStatBufL sStatBufL;\n            if( VSIStatL(name, &sStatBufL) == 0 && S_ISDIR(sStatBufL.st_mode) )\n            {\n                papszDir = static_cast<char **>(CPLMalloc(sizeof(char*)));\n                papszDir[0] = nullptr;\n            }\n        }\n        if( papszDir == nullptr )\n            ret = nullptr;\n        else\n        {\n            VSIDIRPreload* mydir = static_cast<VSIDIRPreload *>(malloc(sizeof(VSIDIRPreload)));\n            mydir->pszDirname = CPLStrdup(name);\n            mydir->papszDir = papszDir;\n            mydir->nIter = 0;\n            mydir->fd = -1;\n            ret = (DIR*)mydir;\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n            oSetVSIDIRPreload.insert(mydir);\n        }\n    }\n    else\n    {\n        ret = pfnopendir(name);\n    }\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"opendir(%s) -> %p\\n\", name, ret);\n    return ret;\n}\n\n/************************************************************************/\n/*                             filldir()                                */\n/************************************************************************/\n\nstatic bool filldir( VSIDIRPreload* mydir )\n{\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(mydir);\n    char* pszName = mydir->papszDir[mydir->nIter++];\n    if( pszName == nullptr )\n        return false;\n    mydir->ent.d_ino = 0;\n    mydir->ent.d_off = 0;\n    mydir->ent.d_reclen = sizeof(mydir->ent);\n    VSIStatBufL sStatBufL;\n    CPL_IGNORE_RET_VAL(VSIStatL(CPLFormFilename(mydir->pszDirname, pszName, nullptr), &sStatBufL));\n    if( DEBUG_VSIPRELOAD_COND && S_ISDIR(sStatBufL.st_mode) )\n        fprintf(stderr, \"%s is dir\\n\", pszName);\n    mydir->ent.d_type = S_ISDIR(sStatBufL.st_mode) ? DT_DIR :\n                        S_ISREG(sStatBufL.st_mode) ? DT_REG :\n                        S_ISLNK(sStatBufL.st_mode) ? DT_LNK :\n                        DT_UNKNOWN;\n    strncpy(mydir->ent.d_name, pszName, 256);\n    mydir->ent.d_name[255] = '\\0';\n\n    mydir->ent64.d_ino = 0;\n    mydir->ent64.d_off = 0;\n    mydir->ent64.d_reclen = sizeof(mydir->ent64);\n    mydir->ent64.d_type = mydir->ent.d_type;\n    strcpy(mydir->ent64.d_name, mydir->ent.d_name);\n\n    return true;\n}\n\n/************************************************************************/\n/*                             readdir()                                */\n/************************************************************************/\n\nstruct dirent CPL_DLL *readdir( DIR *dirp )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND((VSIDIRPreload*)dirp);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"readdir(%p)\\n\", dirp);\n    if( oSetVSIDIRPreload.find((VSIDIRPreload*)dirp) != oSetVSIDIRPreload.end() )\n    {\n        VSIDIRPreload* mydir = (VSIDIRPreload*)dirp;\n        if( !filldir(mydir) )\n            return nullptr;\n\n        return &(mydir->ent);\n    }\n    else\n        return pfnreaddir(dirp);\n}\n\n/************************************************************************/\n/*                             readdir64()                              */\n/************************************************************************/\n\nstruct dirent64 CPL_DLL *readdir64( DIR *dirp )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND((VSIDIRPreload*)dirp);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"readdir64(%p)\\n\", dirp);\n    if( oSetVSIDIRPreload.find((VSIDIRPreload*)dirp) != oSetVSIDIRPreload.end() )\n    {\n        VSIDIRPreload* mydir = (VSIDIRPreload*)dirp;\n        if( !filldir(mydir) )\n            return nullptr;\n\n        return &(mydir->ent64);\n    }\n    else\n        return pfnreaddir64(dirp);\n}\n\n/************************************************************************/\n/*                             closedir()                               */\n/************************************************************************/\n\nint CPL_DLL closedir( DIR *dirp )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND((VSIDIRPreload*)dirp);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"closedir(%p)\\n\", dirp);\n    if( oSetVSIDIRPreload.find((VSIDIRPreload*)dirp) != oSetVSIDIRPreload.end() )\n    {\n        VSIDIRPreload* mydir = (VSIDIRPreload*)dirp;\n        CPLFree(mydir->pszDirname);\n        CSLDestroy(mydir->papszDir);\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n        if( mydir->fd >= 0 )\n        {\n            oMapfdToVSIDIRPreload.erase(mydir->fd);\n            close(mydir->fd);\n        }\n        oSetVSIDIRPreload.erase(mydir);\n        free(mydir);\n        return 0;\n    }\n    else\n        return pfnclosedir(dirp);\n}\n\n/************************************************************************/\n/*                               dirfd()                                */\n/************************************************************************/\n\nint CPL_DLL dirfd( DIR *dirp )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND((VSIDIRPreload*)dirp);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"dirfd(%p)\\n\", dirp);\n    int ret = 0;\n    if( oSetVSIDIRPreload.find((VSIDIRPreload*)dirp) != oSetVSIDIRPreload.end() )\n    {\n        VSIDIRPreload* mydir = (VSIDIRPreload*)dirp;\n        if( mydir->fd < 0 )\n        {\n            mydir->fd = open(\"/dev/zero\", O_RDONLY);\n            CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n            oMapfdToVSIDIRPreload[mydir->fd] = mydir;\n        }\n        ret = mydir->fd;\n    }\n    else\n        ret = pfndirfd(dirp);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"dirfd(%p) -> %d\\n\", dirp, ret);\n    return ret;\n}\n\n/************************************************************************/\n/*                              fchdir()                                */\n/************************************************************************/\n\nint CPL_DLL fchdir( int fd )\n{\n    VSIDIRPreload* mydir = nullptr;\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX);\n        if( oMapfdToVSIDIRPreload.find(fd) != oMapfdToVSIDIRPreload.end() )\n            mydir = oMapfdToVSIDIRPreload[fd];\n    }\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(mydir);\n    std::string name;\n    {\n        CPLLockHolderD(&hLock, LOCK_RECURSIVE_MUTEX)\n        if( oMapDirFdToName.find(fd) != oMapDirFdToName.end())\n        {\n            name = oMapDirFdToName[fd];\n            if( DEBUG_VSIPRELOAD )\n                DEBUG_VSIPRELOAD_COND = 1;\n        }\n    }\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"fchdir(%d)\\n\", fd);\n    if( !name.empty() )\n    {\n        osCurDir = name;\n        if( DEBUG_VSIPRELOAD_COND )\n            fprintf(stderr, \"fchdir(%d) -> %s\\n\", fd, osCurDir.c_str());\n        return 0;\n    }\n    else if( mydir != nullptr )\n    {\n        osCurDir = mydir->pszDirname;\n        if( DEBUG_VSIPRELOAD_COND )\n            fprintf(stderr, \"fchdir(%d) -> %s\\n\", fd, osCurDir.c_str());\n        return 0;\n    }\n    else\n    {\n        osCurDir = \"\";\n        if( DEBUG_VSIPRELOAD_COND )\n            fprintf(stderr, \"fchdir(%d) -> %s\\n\", fd, osCurDir.c_str());\n        return pfnfchdir(fd);\n    }\n}\n\n/************************************************************************/\n/*                        acl_extended_file()                           */\n/************************************************************************/\n\n// #include <acl/acl.h>\nextern \"C\" int CPL_DLL acl_extended_file(const char *name);\nDECLARE_SYMBOL(acl_extended_file, int, (const char *name));\n\nint acl_extended_file( const char *path )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND )\n        fprintf(stderr, \"acl_extended_file(%s)\\n\", path);\n    int ret = 0;\n    if( STARTS_WITH(path, \"/vsi\") )\n        ret = -1;\n    else\n    {\n        if( pfnacl_extended_file == nullptr )\n            pfnacl_extended_file =\n                (fnacl_extended_fileType) dlsym(RTLD_NEXT, \"acl_extended_file\");\n        if( pfnacl_extended_file == nullptr )\n            ret = -1;\n        else\n            ret = pfnacl_extended_file(path);\n    }\n    return ret;\n}\n\n/************************************************************************/\n/*                          getfilecon()                                */\n/************************************************************************/\n\n// #include <selinux/selinux.h>\nextern \"C\" int CPL_DLL getfilecon(const char *name, void* con);\nDECLARE_SYMBOL(getfilecon, int, (const char *name, void* con));\n\nint getfilecon( const char *path, /*security_context_t **/ void* con )\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"getfilecon(%s)\\n\", path);\n    int ret = 0;\n    if( STARTS_WITH(path, \"/vsi\") )\n    {\n        errno = ENOTSUP;\n        ret = -1;\n    }\n    else\n    {\n        if( pfngetfilecon == nullptr )\n            pfngetfilecon = (fngetfileconType) dlsym(RTLD_NEXT, \"getfilecon\");\n        if( pfngetfilecon == nullptr )\n            ret = -1;\n        else\n            ret = pfngetfilecon(path, con);\n    }\n    return ret;\n}\n\n/************************************************************************/\n/*                          lgetfilecon()                                */\n/************************************************************************/\n\n// #include <selinux/selinux.h>\nextern \"C\" int CPL_DLL lgetfilecon(const char *name, void* con);\nDECLARE_SYMBOL(lgetfilecon, int, (const char *name, void* con));\n\nint lgetfilecon(const char *path, /*security_context_t **/ void* con)\n{\n    myinit();\n    int DEBUG_VSIPRELOAD_COND = GET_DEBUG_VSIPRELOAD_COND(path);\n    if( DEBUG_VSIPRELOAD_COND ) fprintf(stderr, \"lgetfilecon(%s)\\n\", path);\n    int ret = 0;\n    if( STARTS_WITH(path, \"/vsi\") )\n    {\n        errno = ENOTSUP;\n        ret = -1;\n    }\n    else\n    {\n        if( pfnlgetfilecon == nullptr )\n            pfnlgetfilecon =\n                (fnlgetfileconType) dlsym(RTLD_NEXT, \"lgetfilecon\");\n        if( pfnlgetfilecon == nullptr )\n            ret = -1;\n        else\n            ret = pfnlgetfilecon(path, con);\n    }\n    return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permission to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/gtiff/geotiff.cpp": "/******************************************************************************\n *\n * Project:  GeoTIFF Driver\n * Purpose:  GDAL GeoTIFF support.\n * Author:   Frank Warmerdam, warmerdam@pobox.com\n *\n ******************************************************************************\n * Copyright (c) 1998, 2002, Frank Warmerdam <warmerdam@pobox.com>\n * Copyright (c) 2007-2015, Even Rouault <even dot rouault at spatialys dot com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n ****************************************************************************/\n\n// If we use sunpro compiler on linux. Weird idea indeed!\n#if defined(__SUNPRO_CC) && defined(__linux__)\n#define _GNU_SOURCE\n#elif defined(__GNUC__) && !defined(_GNU_SOURCE)\n// Required to use RTLD_DEFAULT of dlfcn.h.\n#define _GNU_SOURCE\n#endif\n\n#include \"cpl_port.h\"  // Must be first.\n#include \"gtiff.h\"\n\n#include <cassert>\n#include <cerrno>\n#include <climits>\n#include <cmath>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#if HAVE_FCNTL_H\n#include <fcntl.h>\n#endif\n#if HAVE_SYS_STAT_H\n#  include <sys/stat.h>\n#endif\n\n#include <algorithm>\n#include <memory>\n#include <mutex>\n#include <set>\n#include <string>\n#include <vector>\n\n#include \"cpl_config.h\"\n#include \"cpl_conv.h\"\n#include \"cpl_error.h\"\n#include \"cpl_minixml.h\"\n#include \"cpl_multiproc.h\"\n#include \"cpl_port.h\"\n#include \"cpl_progress.h\"\n#include \"cpl_string.h\"\n#include \"cpl_virtualmem.h\"\n#include \"cpl_vsi.h\"\n#include \"cpl_vsi_virtual.h\"\n#include \"cpl_worker_thread_pool.h\"\n#include \"cplkeywordparser.h\"\n#include \"gdal.h\"\n#include \"gdal_frmts.h\"\n#include \"gdal_mdreader.h\"\n#include \"gdal_pam.h\"\n#include \"gdal_priv.h\"\n#include \"gdal_priv_templates.hpp\"\n#include \"geo_normalize.h\"\n#include \"geotiff.h\"\n#include \"geovalues.h\"\n#include \"gt_jpeg_copy.h\"\n#include \"gt_overview.h\"\n#include \"gt_wkt_srs.h\"\n#include \"gt_wkt_srs_priv.h\"\n#include \"ogr_spatialref.h\"\n#include \"ogr_proj_p.h\"\n#include \"tiff.h\"\n#include \"tif_float.h\"\n#include \"tiffio.h\"\n#ifdef INTERNAL_LIBTIFF\n#  include \"tiffiop.h\"\n#  include \"tif_lerc.h\"\n#    ifdef WEBP_SUPPORT\n#      include \"webp/encode.h\"\n#    endif\n#endif\n#include \"tiffvers.h\"\n#include \"tifvsi.h\"\n#include \"xtiffio.h\"\n\nCPL_CVSID(\"$Id: geotiff.cpp 8b99fd4d3ad3db542705722876fcf484486f46d6 2019-12-17 14:27:30 +0100 Even Rouault $\")\n\nstatic bool bGlobalInExternalOvr = false;\nstatic std::mutex gMutexThreadPool;\nCPLWorkerThreadPool *gpoCompressThreadPool = nullptr;\n\n// Only libtiff 4.0.4 can handle between 32768 and 65535 directories.\n#if TIFFLIB_VERSION >= 20120922\n#define SUPPORTS_MORE_THAN_32768_DIRECTORIES\n#endif\n\nconst char* const szJPEGGTiffDatasetTmpPrefix = \"/vsimem/gtiffdataset_jpg_tmp_\";\n\ntypedef enum\n{\n    GTIFFTAGTYPE_STRING,\n    GTIFFTAGTYPE_SHORT,\n    GTIFFTAGTYPE_FLOAT,\n    GTIFFTAGTYPE_BYTE_STRING\n} GTIFFTagTypes;\n\ntypedef struct\n{\n    const char    *pszTagName;\n    int            nTagVal;\n    GTIFFTagTypes  eType;\n} GTIFFTags;\n\nstatic const GTIFFTags asTIFFTags[] =\n{\n    { \"TIFFTAG_DOCUMENTNAME\", TIFFTAG_DOCUMENTNAME, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_IMAGEDESCRIPTION\", TIFFTAG_IMAGEDESCRIPTION,\n        GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_SOFTWARE\", TIFFTAG_SOFTWARE, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_DATETIME\", TIFFTAG_DATETIME, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_ARTIST\", TIFFTAG_ARTIST, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_HOSTCOMPUTER\", TIFFTAG_HOSTCOMPUTER, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_COPYRIGHT\", TIFFTAG_COPYRIGHT, GTIFFTAGTYPE_STRING },\n    { \"TIFFTAG_XRESOLUTION\", TIFFTAG_XRESOLUTION, GTIFFTAGTYPE_FLOAT },\n    { \"TIFFTAG_YRESOLUTION\", TIFFTAG_YRESOLUTION, GTIFFTAGTYPE_FLOAT },\n    // Dealt as special case.\n    { \"TIFFTAG_RESOLUTIONUNIT\", TIFFTAG_RESOLUTIONUNIT, GTIFFTAGTYPE_SHORT },\n    { \"TIFFTAG_MINSAMPLEVALUE\", TIFFTAG_MINSAMPLEVALUE, GTIFFTAGTYPE_SHORT },\n    { \"TIFFTAG_MAXSAMPLEVALUE\", TIFFTAG_MAXSAMPLEVALUE, GTIFFTAGTYPE_SHORT },\n\n    // GeoTIFF DGIWG tags\n    { \"GEO_METADATA\", TIFFTAG_GEO_METADATA, GTIFFTAGTYPE_BYTE_STRING },\n    { \"TIFF_RSID\", TIFFTAG_TIFF_RSID, GTIFFTAGTYPE_STRING },\n};\n\nconst char szPROFILE_BASELINE[] = \"BASELINE\";\nconst char szPROFILE_GeoTIFF[] = \"GeoTIFF\";\nconst char szPROFILE_GDALGeoTIFF[] = \"GDALGeoTIFF\";\n\n/************************************************************************/\n/*                          GTIFFSetInExternalOvr()                     */\n/************************************************************************/\n\nvoid GTIFFSetInExternalOvr( bool b )\n{\n    bGlobalInExternalOvr = b;\n}\n\n/************************************************************************/\n/*                     GTIFFGetOverviewBlockSize()                      */\n/************************************************************************/\n\nvoid GTIFFGetOverviewBlockSize( int* pnBlockXSize, int* pnBlockYSize )\n{\n    const char* pszVal = CPLGetConfigOption(\"GDAL_TIFF_OVR_BLOCKSIZE\", \"128\");\n    int nOvrBlockSize = atoi(pszVal);\n    if( nOvrBlockSize < 64 || nOvrBlockSize > 4096 ||\n        !CPLIsPowerOfTwo(nOvrBlockSize) )\n    {\n        static bool bHasWarned = false;\n        if( !bHasWarned )\n        {\n            CPLError( CE_Warning, CPLE_NotSupported,\n                      \"Wrong value for GDAL_TIFF_OVR_BLOCKSIZE : %s. \"\n                      \"Should be a power of 2 between 64 and 4096. \"\n                      \"Defaulting to 128\",\n                      pszVal );\n            bHasWarned = true;\n        }\n        nOvrBlockSize = 128;\n    }\n\n    *pnBlockXSize = nOvrBlockSize;\n    *pnBlockYSize = nOvrBlockSize;\n}\n\nenum\n{\n    ENDIANNESS_NATIVE,\n    ENDIANNESS_LITTLE,\n    ENDIANNESS_BIG\n};\n\n/************************************************************************/\n/* ==================================================================== */\n/*                          GTiffDataset                                */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffBitmapBand;\nclass GTiffDataset;\nclass GTiffJPEGOverviewBand;\nclass GTiffJPEGOverviewDS;\nclass GTiffRasterBand;\nclass GTiffRGBABand;\n\ntypedef enum\n{\n    VIRTUAL_MEM_IO_NO,\n    VIRTUAL_MEM_IO_YES,\n    VIRTUAL_MEM_IO_IF_ENOUGH_RAM\n} VirtualMemIOEnum;\n\n#if !defined(__MINGW32__)\nnamespace {\n#endif\ntypedef struct\n{\n    GTiffDataset *poDS;\n    bool          bTIFFIsBigEndian;\n    char         *pszTmpFilename;\n    int           nHeight;\n    uint16        nPredictor;\n    GByte        *pabyBuffer;\n    GPtrDiff_t    nBufferSize;\n    int           nStripOrTile;\n\n    GByte        *pabyCompressedBuffer;  // Owned by pszTmpFilename.\n    GPtrDiff_t    nCompressedBufferSize;\n    bool          bReady;\n} GTiffCompressionJob;\n#if !defined(__MINGW32__)\n}\n#endif\n\nclass GTiffDataset final : public GDALPamDataset\n{\n    CPL_DISALLOW_COPY_ASSIGN(GTiffDataset)\n\n    friend class GTiffBitmapBand;\n    friend class GTiffJPEGOverviewDS;\n    friend class GTiffJPEGOverviewBand;\n    friend class GTiffOddBitsBand;\n    friend class GTiffRasterBand;\n    friend class GTiffRGBABand;\n    friend class GTiffSplitBand;\n    friend class GTiffSplitBitmapBand;\n\n    friend void  GTIFFSetJpegQuality( GDALDatasetH hGTIFFDS, int nJpegQuality );\n    friend void  GTIFFSetJpegTablesMode( GDALDatasetH hGTIFFDS, int nJpegTablesMode );\n\n    TIFF       *hTIFF;\n    VSILFILE   *fpL;\n#if defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n    uint32      nStripArrayAlloc;\n    vsi_l_offset m_nFileSize; // 0 when unknown, only valid in GA_ReadOnly mode\n#endif\n\n    bool        bStreamingIn;\n\n    bool        bStreamingOut;\n    CPLString   osTmpFilename{};\n    VSILFILE*   fpToWrite;\n    int         nLastWrittenBlockId;\n\n    GTiffDataset **ppoActiveDSRef;\n    GTiffDataset *poActiveDS;  // Only used in actual base.\n\n    bool        bScanDeferred;\n    void        ScanDirectories();\n\n    toff_t      nDirOffset;\n    bool        bBase;\n    // Useful for closing TIFF handle opened by GTIFF_DIR:\n    bool        bCloseTIFFHandle;\n\n    uint16      nPlanarConfig;\n    uint16      nSamplesPerPixel;\n    uint16      nBitsPerSample;\n    uint32      nRowsPerStrip;\n    uint16      nPhotometric;\n    uint16      nSampleFormat;\n    uint16      nCompression;\n\n    int         nBlocksPerBand;\n\n    int         nBlockXSize;\n    int         nBlockYSize;\n\n    int         nLoadedBlock;  // Or tile.\n    bool        bLoadedBlockDirty;\n    GByte       *pabyBlockBuf;\n\n    CPLErr      LoadBlockBuf( int nBlockId, bool bReadFromDisk = true );\n    CPLErr      FlushBlockBuf();\n    bool        bWriteErrorInFlushBlockBuf;\n\n    OGRSpatialReference oSRS{};\n    CPLString   m_osVertUnit{};\n    bool        bLookedForProjection;\n    bool        bLookedForMDAreaOrPoint;\n\n    void        LoadMDAreaOrPoint();\n    void        LookForProjection();\n#ifdef ESRI_BUILD\n    void        AdjustLinearUnit( short UOMLength );\n#endif\n\n    double      adfGeoTransform[6];\n    bool        bGeoTransformValid;\n\n    bool        bTreatAsRGBA;\n    bool        bCrystalized;\n\n    void        Crystalize();  // TODO: Spelling.\n    void        RestoreVolatileParameters(TIFF* l_hTIFF);\n\n    GDALColorTable *poColorTable;\n\n    void        WriteGeoTIFFInfo();\n    bool        SetDirectory( toff_t nDirOffset = 0 );\n\n    int         nOverviewCount;\n    GTiffDataset **papoOverviewDS;\n\n    // If > 0, the implicit JPEG overviews are visible through\n    // GetOverviewCount().\n    int         nJPEGOverviewVisibilityCounter;\n    // Currently visible overviews. Generally == nJPEGOverviewCountOri.\n    int         nJPEGOverviewCount;\n    int         nJPEGOverviewCountOri;  // Size of papoJPEGOverviewDS.\n    GTiffJPEGOverviewDS **papoJPEGOverviewDS;\n    int         GetJPEGOverviewCount();\n\n    int         nGCPCount;\n    GDAL_GCP    *pasGCPList;\n\n    bool        IsBlockAvailable( int nBlockId,\n                                  vsi_l_offset* pnOffset = nullptr,\n                                  vsi_l_offset* pnSize = nullptr,\n                                  bool *pbErrOccurred = nullptr );\n\n    bool        bGeoTIFFInfoChanged;\n    bool        bForceUnsetGTOrGCPs;\n    bool        bForceUnsetProjection;\n\n    bool        bNoDataChanged;\n    bool        bNoDataSet;\n    double      dfNoDataValue;\n\n    bool        bMetadataChanged;\n    bool        bColorProfileMetadataChanged;\n    bool        m_bForceUnsetRPC = false;\n\n    bool        bNeedsRewrite;\n\n    void        ApplyPamInfo();\n    void        PushMetadataToPam();\n\n    GDALMultiDomainMetadata oGTiffMDMD{};\n\n    CPLString   osProfile{};\n    char      **papszCreationOptions;\n\n    bool        bLoadingOtherBands;\n\n    void*        pabyTempWriteBuffer;\n    GPtrDiff_t   nTempWriteBufferSize;\n    bool         WriteEncodedTile( uint32 tile, GByte* pabyData,\n                                   int bPreserveDataBuffer );\n    bool         WriteEncodedStrip( uint32 strip, GByte* pabyData,\n                                    int bPreserveDataBuffer );\n    template<class T>\n    bool         HasOnlyNoDataT( const T* pBuffer, int nWidth, int nHeight,\n                                int nLineStride, int nComponents ) const;\n    bool         HasOnlyNoData( const void* pBuffer, int nWidth, int nHeight,\n                                int nLineStride, int nComponents );\n    inline bool  IsFirstPixelEqualToNoData( const void* pBuffer );\n\n    GTiffDataset* poMaskDS;\n    GTiffDataset* poBaseDS;\n    bool          bIsOverview_ = false;\n\n    CPLString    osFilename{};\n\n    bool         bWriteEmptyTiles;\n    bool         bFillEmptyTilesAtClosing;\n    void         FillEmptyTiles();\n\n    void         FlushDirectory();\n    CPLErr       CleanOverviews();\n\n    // Used for the all-in-on-strip case.\n    int           nLastLineRead;\n    int           nLastBandRead;\n    bool          bTreatAsSplit;\n    bool          bTreatAsSplitBitmap;\n\n    bool          bClipWarn;\n\n    bool          bIMDRPCMetadataLoaded;\n    char**        papszMetadataFiles;\n    void          LoadMetadata();\n\n    bool          bEXIFMetadataLoaded;\n    void          LoadEXIFMetadata();\n\n    bool          bICCMetadataLoaded;\n    void          LoadICCProfile();\n\n    bool          bHasWarnedDisableAggressiveBandCaching;\n\n    bool          bDontReloadFirstBlock;  // Hack for libtiff 3.X and #3633.\n\n    int           nZLevel;\n    int           nLZMAPreset;\n    int           nZSTDLevel;\n    int           nWebPLevel;\n    bool          bWebPLossless;\n    int           nJpegQuality;\n    int           nJpegTablesMode;\n#if HAVE_LERC\n    double        dfMaxZError = 0.0;\n    uint32        anLercAddCompressionAndVersion[2]{0,0};\n#endif\n\n    bool          bPromoteTo8Bits;\n\n    bool          bDebugDontWriteBlocks;\n\n    CPLErr        RegisterNewOverviewDataset( toff_t nOverviewOffset, int l_nJpegQuality );\n    CPLErr        CreateOverviewsFromSrcOverviews( GDALDataset* poSrcDS );\n    CPLErr        CreateInternalMaskOverviews( int nOvrBlockXSize,\n                                               int nOvrBlockYSize );\n\n    bool          bIsFinalized;\n    int           Finalize();\n\n    bool          bIgnoreReadErrors;\n\n    CPLString     osGeorefFilename{};\n\n    bool          bDirectIO;\n\n    VirtualMemIOEnum eVirtualMemIOUsage;\n    CPLVirtualMem* psVirtualMemIOMapping;\n\n    GTIFFKeysFlavorEnum eGeoTIFFKeysFlavor;\n\n    CPLVirtualMem *pBaseMapping;\n    int            nRefBaseMapping;\n\n    bool           bHasDiscardedLsb;\n    std::vector<int> anMaskLsb{};\n    std::vector<int> anOffsetLsb{};\n    void           DiscardLsb(GByte* pabyBuffer, GPtrDiff_t nBytes, int iBand) const;\n    void           GetDiscardLsbOption( char** papszOptions );\n\n    CPLWorkerThreadPool *poCompressThreadPool;\n    std::vector<GTiffCompressionJob> asCompressionJobs{};\n    CPLMutex      *hCompressThreadPoolMutex;\n    void           InitCompressionThreads( char** papszOptions );\n    void           InitCreationOrOpenOptions( char** papszOptions );\n    static void    ThreadCompressionFunc( void* pData );\n    void           WaitCompletionForBlock( int nBlockId );\n    void           WriteRawStripOrTile( int nStripOrTile,\n                                        GByte* pabyCompressedBuffer,\n                                        GPtrDiff_t nCompressedBufferSize );\n    bool           SubmitCompressionJob( int nStripOrTile, GByte* pabyData,\n                                         GPtrDiff_t cc, int nHeight) ;\n\n    int            GuessJPEGQuality( bool& bOutHasQuantizationTable,\n                                     bool& bOutHasHuffmanTable );\n\n    void           SetJPEGQualityAndTablesModeFromFile();\n\n    int            DirectIO( GDALRWFlag eRWFlag,\n                             int nXOff, int nYOff, int nXSize, int nYSize,\n                             void * pData, int nBufXSize, int nBufYSize,\n                             GDALDataType eBufType,\n                             int nBandCount, int *panBandMap,\n                             GSpacing nPixelSpace, GSpacing nLineSpace,\n                             GSpacing nBandSpace,\n                             GDALRasterIOExtraArg* psExtraArg );\n\n    int            VirtualMemIO( GDALRWFlag eRWFlag,\n                                 int nXOff, int nYOff, int nXSize, int nYSize,\n                                 void * pData, int nBufXSize, int nBufYSize,\n                                 GDALDataType eBufType,\n                                 int nBandCount, int *panBandMap,\n                                 GSpacing nPixelSpace, GSpacing nLineSpace,\n                                 GSpacing nBandSpace,\n                                 GDALRasterIOExtraArg* psExtraArg );\n\n    GByte          *m_pTempBufferForCommonDirectIO;\n    size_t          m_nTempBufferForCommonDirectIOSize;\n    template<class FetchBuffer> CPLErr CommonDirectIO(\n        FetchBuffer& oFetcher,\n        int nXOff, int nYOff, int nXSize, int nYSize,\n        void * pData, int nBufXSize, int nBufYSize,\n        GDALDataType eBufType,\n        int nBandCount, int *panBandMap,\n        GSpacing nPixelSpace, GSpacing nLineSpace,\n        GSpacing nBandSpace );\n\n    bool        m_bReadGeoTransform;\n    bool        m_bLoadPam;\n    void        LoadGeoreferencingAndPamIfNeeded();\n\n    bool        m_bHasGotSiblingFiles;\n    char      **GetSiblingFiles();\n\n    void        IdentifyAuthorizedGeoreferencingSources();\n    bool        m_bHasIdentifiedAuthorizedGeoreferencingSources;\n    int         m_nPAMGeorefSrcIndex;\n    int         m_nINTERNALGeorefSrcIndex;\n    int         m_nTABFILEGeorefSrcIndex;\n    int         m_nWORLDFILEGeorefSrcIndex;\n    int         m_nGeoTransformGeorefSrcIndex;\n\n    void        FlushCacheInternal( bool bFlushDirectory );\n\n    int         m_nHasOptimizedReadMultiRange = -1;\n    int         HasOptimizedReadMultiRange();\n\n  protected:\n    virtual int         CloseDependentDatasets() override;\n\n  public:\n             GTiffDataset();\n    virtual ~GTiffDataset();\n\n    const OGRSpatialReference* GetSpatialRef() const override;\n    CPLErr SetSpatialRef(const OGRSpatialReference* poSRS) override;\n\n    virtual CPLErr GetGeoTransform( double * ) override;\n    virtual CPLErr SetGeoTransform( double * ) override;\n\n    virtual int    GetGCPCount() override;\n    const OGRSpatialReference* GetGCPSpatialRef() const override;\n    virtual const GDAL_GCP *GetGCPs() override;\n    CPLErr SetGCPs( int nGCPCountIn, const GDAL_GCP *pasGCPListIn,\n                    const OGRSpatialReference* poSRS ) override;\n\n    virtual CPLErr IRasterIO( GDALRWFlag eRWFlag,\n                              int nXOff, int nYOff, int nXSize, int nYSize,\n                              void * pData, int nBufXSize, int nBufYSize,\n                              GDALDataType eBufType,\n                              int nBandCount, int *panBandMap,\n                              GSpacing nPixelSpace, GSpacing nLineSpace,\n                              GSpacing nBandSpace,\n                              GDALRasterIOExtraArg* psExtraArg ) override;\n    virtual char **GetFileList() override;\n\n    virtual CPLErr IBuildOverviews( const char *, int, int *, int, int *,\n                                    GDALProgressFunc, void * ) override;\n\n    CPLErr         OpenOffset( TIFF *, GTiffDataset **ppoActiveDSRef,\n                               toff_t nDirOffset, bool bBaseIn, GDALAccess,\n                               bool bAllowRGBAInterface = true,\n                               bool bReadGeoTransform = false );\n\n    static GDALDataset *OpenDir( GDALOpenInfo * );\n    static GDALDataset *Open( GDALOpenInfo * );\n    static int          Identify( GDALOpenInfo * );\n    static GDALDataset *Create( const char * pszFilename,\n                                int nXSize, int nYSize, int nBands,\n                                GDALDataType eType, char ** papszParmList );\n    static GDALDataset *CreateCopy( const char * pszFilename,\n                                    GDALDataset *poSrcDS,\n                                    int bStrict, char ** papszOptions,\n                                    GDALProgressFunc pfnProgress,\n                                    void * pProgressData );\n    virtual void    FlushCache() override;\n\n    virtual char  **GetMetadataDomainList() override;\n    virtual CPLErr  SetMetadata( char **, const char * = \"\" ) override;\n    virtual char  **GetMetadata( const char * pszDomain = \"\" ) override;\n    virtual CPLErr  SetMetadataItem( const char*, const char*,\n                                     const char* = \"\" ) override;\n    virtual const char *GetMetadataItem( const char * pszName,\n                                         const char * pszDomain = \"\" ) override;\n    virtual void   *GetInternalHandle( const char * ) override;\n\n    virtual CPLErr          CreateMaskBand( int nFlags ) override;\n\n    // Only needed by createcopy and close code.\n    static void     WriteRPC( GDALDataset *, TIFF *, int, const char *,\n                              const char *, char **,\n                              bool bWriteOnlyInPAMIfNeeded = false );\n    static bool     WriteMetadata( GDALDataset *, TIFF *, bool, const char *,\n                                   const char *, char **,\n                                   bool bExcludeRPBandIMGFileWriting = false );\n    static void     WriteNoDataValue( TIFF *, double );\n    static void     UnsetNoDataValue( TIFF * );\n\n    static TIFF *   CreateLL( const char * pszFilename,\n                              int nXSize, int nYSize, int nBands,\n                              GDALDataType eType,\n                              double dfExtraSpaceForOverviews,\n                              char **papszParmList,\n                              VSILFILE** pfpL,\n                              CPLString& osTmpFilename );\n\n    CPLErr   WriteEncodedTileOrStrip( uint32 tile_or_strip, void* data,\n                                      int bPreserveDataBuffer );\n\n    static void SaveICCProfile( GTiffDataset *pDS, TIFF *hTIFF,\n                                char **papszParmList, uint32 nBitsPerSample );\n};\n\n/************************************************************************/\n/* ==================================================================== */\n/*                        GTiffJPEGOverviewDS                           */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffJPEGOverviewDS final : public GDALDataset\n{\n    CPL_DISALLOW_COPY_ASSIGN(GTiffJPEGOverviewDS)\n\n    friend class GTiffJPEGOverviewBand;\n    GTiffDataset* poParentDS;\n    int nOverviewLevel;\n\n    int        nJPEGTableSize;\n    GByte     *pabyJPEGTable;\n    CPLString  osTmpFilenameJPEGTable{};\n\n    CPLString    osTmpFilename{};\n    GDALDataset* poJPEGDS;\n    // Valid block id of the parent DS that match poJPEGDS.\n    int          nBlockId;\n\n  public:\n    GTiffJPEGOverviewDS( GTiffDataset* poParentDS, int nOverviewLevel,\n                         const void* pJPEGTable, int nJPEGTableSize );\n    virtual ~GTiffJPEGOverviewDS();\n\n    virtual CPLErr IRasterIO( GDALRWFlag eRWFlag,\n                              int nXOff, int nYOff, int nXSize, int nYSize,\n                              void * pData, int nBufXSize, int nBufYSize,\n                              GDALDataType eBufType,\n                              int nBandCount, int *panBandMap,\n                              GSpacing nPixelSpace, GSpacing nLineSpace,\n                              GSpacing nBandSpace,\n                              GDALRasterIOExtraArg* psExtraArg ) override;\n};\n\nclass GTiffJPEGOverviewBand final : public GDALRasterBand\n{\n  public:\n    GTiffJPEGOverviewBand( GTiffJPEGOverviewDS* poDS, int nBand );\n    virtual ~GTiffJPEGOverviewBand() {}\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n};\n\n/************************************************************************/\n/*                        GTiffJPEGOverviewDS()                         */\n/************************************************************************/\n\nGTiffJPEGOverviewDS::GTiffJPEGOverviewDS( GTiffDataset* poParentDSIn,\n                                          int nOverviewLevelIn,\n                                          const void* pJPEGTable,\n                                          int nJPEGTableSizeIn ) :\n    poParentDS(poParentDSIn),\n    nOverviewLevel(nOverviewLevelIn),\n    nJPEGTableSize(nJPEGTableSizeIn),\n    pabyJPEGTable(nullptr),\n    poJPEGDS(nullptr),\n    nBlockId(-1)\n{\n    ShareLockWithParentDataset(poParentDSIn);\n\n    osTmpFilenameJPEGTable.Printf(\"/vsimem/jpegtable_%p\", this);\n\n    const GByte abyAdobeAPP14RGB[] = {\n        0xFF, 0xEE, 0x00, 0x0E, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x00,\n        0x64, 0x00, 0x00, 0x00, 0x00, 0x00 };\n    const bool bAddAdobe =\n        poParentDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n        poParentDS->nPhotometric != PHOTOMETRIC_YCBCR &&\n        poParentDS->nBands == 3;\n    pabyJPEGTable =\n        static_cast<GByte*>( CPLMalloc(\n            nJPEGTableSize + (bAddAdobe ? sizeof(abyAdobeAPP14RGB) : 0)) );\n    memcpy(pabyJPEGTable, pJPEGTable, nJPEGTableSize);\n    if( bAddAdobe )\n    {\n        memcpy( pabyJPEGTable + nJPEGTableSize, abyAdobeAPP14RGB,\n                sizeof(abyAdobeAPP14RGB) );\n        nJPEGTableSize += sizeof(abyAdobeAPP14RGB);\n    }\n    CPL_IGNORE_RET_VAL(\n        VSIFCloseL(\n            VSIFileFromMemBuffer(\n                osTmpFilenameJPEGTable, pabyJPEGTable, nJPEGTableSize, TRUE )));\n\n    const int nScaleFactor = 1 << nOverviewLevel;\n    nRasterXSize = (poParentDS->nRasterXSize + nScaleFactor - 1) / nScaleFactor;\n    nRasterYSize = (poParentDS->nRasterYSize + nScaleFactor - 1) / nScaleFactor;\n\n    for( int i = 1; i <= poParentDS->nBands; ++i )\n        SetBand(i, new GTiffJPEGOverviewBand(this, i));\n\n    SetMetadataItem( \"INTERLEAVE\", \"PIXEL\", \"IMAGE_STRUCTURE\" );\n    if( poParentDS->nPhotometric == PHOTOMETRIC_YCBCR )\n        SetMetadataItem( \"COMPRESSION\", \"YCbCr JPEG\", \"IMAGE_STRUCTURE\" );\n    else\n        SetMetadataItem( \"COMPRESSION\", \"JPEG\", \"IMAGE_STRUCTURE\" );\n}\n\n/************************************************************************/\n/*                       ~GTiffJPEGOverviewDS()                         */\n/************************************************************************/\n\nGTiffJPEGOverviewDS::~GTiffJPEGOverviewDS()\n{\n    if( poJPEGDS != nullptr )\n        GDALClose( poJPEGDS );\n    VSIUnlink(osTmpFilenameJPEGTable);\n    if( !osTmpFilename.empty() )\n        VSIUnlink(osTmpFilename);\n}\n\n/************************************************************************/\n/*                            IRasterIO()                               */\n/************************************************************************/\n\nCPLErr GTiffJPEGOverviewDS::IRasterIO(\n    GDALRWFlag eRWFlag,\n    int nXOff, int nYOff, int nXSize, int nYSize,\n    void * pData, int nBufXSize, int nBufYSize,\n    GDALDataType eBufType,\n    int nBandCount, int *panBandMap,\n    GSpacing nPixelSpace, GSpacing nLineSpace,\n    GSpacing nBandSpace,\n    GDALRasterIOExtraArg* psExtraArg )\n\n{\n    // For non-single strip JPEG-IN-TIFF, the block based strategy will\n    // be the most efficient one, to avoid decompressing the JPEG content\n    // for each requested band.\n    if( nBandCount > 1 && poParentDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n        (poParentDS->nBlockXSize < poParentDS->nRasterXSize ||\n         poParentDS->nBlockYSize > 1) )\n    {\n        return BlockBasedRasterIO( eRWFlag, nXOff, nYOff, nXSize, nYSize,\n                                   pData, nBufXSize, nBufYSize,\n                                   eBufType, nBandCount, panBandMap,\n                                   nPixelSpace, nLineSpace, nBandSpace,\n                                   psExtraArg );\n    }\n\n    return GDALDataset::IRasterIO(\n        eRWFlag, nXOff, nYOff, nXSize, nYSize,\n        pData, nBufXSize, nBufYSize, eBufType,\n        nBandCount, panBandMap, nPixelSpace, nLineSpace, nBandSpace,\n        psExtraArg );\n}\n\n/************************************************************************/\n/*                        GTiffJPEGOverviewBand()                       */\n/************************************************************************/\n\nGTiffJPEGOverviewBand::GTiffJPEGOverviewBand( GTiffJPEGOverviewDS* poDSIn,\n                                              int nBandIn )\n{\n    poDS = poDSIn;\n    nBand = nBandIn;\n    eDataType =\n        poDSIn->poParentDS->GetRasterBand(nBandIn)->GetRasterDataType();\n    poDSIn->poParentDS->GetRasterBand(nBandIn)->\n        GetBlockSize(&nBlockXSize, &nBlockYSize);\n    const int nScaleFactor = 1 << poDSIn->nOverviewLevel;\n    nBlockXSize = (nBlockXSize + nScaleFactor - 1) / nScaleFactor;\n    nBlockYSize = (nBlockYSize + nScaleFactor - 1) / nScaleFactor;\n}\n\n/************************************************************************/\n/*                          IReadBlock()                                */\n/************************************************************************/\n\nCPLErr GTiffJPEGOverviewBand::IReadBlock( int nBlockXOff, int nBlockYOff,\n                                          void *pImage )\n{\n    GTiffJPEGOverviewDS* poGDS = cpl::down_cast<GTiffJPEGOverviewDS *>(poDS);\n\n    // Compute the source block ID.\n    int nBlockId = 0;\n    int nParentBlockXSize, nParentBlockYSize;\n    poGDS->poParentDS->GetRasterBand(1)->\n        GetBlockSize(&nParentBlockXSize, &nParentBlockYSize);\n    const bool bIsSingleStripAsSplit = (nParentBlockYSize == 1 &&\n                           poGDS->poParentDS->nBlockYSize != nParentBlockYSize);\n    if( !bIsSingleStripAsSplit )\n    {\n        int l_nBlocksPerRow = DIV_ROUND_UP(poGDS->poParentDS->nRasterXSize,\n                                               poGDS->poParentDS->nBlockXSize);\n        nBlockId = nBlockYOff * l_nBlocksPerRow + nBlockXOff;\n    }\n    if( poGDS->poParentDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n    {\n        nBlockId += (nBand-1) * poGDS->poParentDS->nBlocksPerBand;\n    }\n\n    if( !poGDS->poParentDS->SetDirectory() )\n        return CE_Failure;\n\n    // Make sure it is available.\n    const int nDataTypeSize = GDALGetDataTypeSizeBytes(eDataType);\n    vsi_l_offset nOffset = 0;\n    vsi_l_offset nByteCount = 0;\n    bool bErrOccurred = false;\n    if( !poGDS->poParentDS->IsBlockAvailable(nBlockId, &nOffset, &nByteCount, &bErrOccurred) )\n    {\n        memset(pImage, 0, static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * nDataTypeSize );\n        if( bErrOccurred )\n            return CE_Failure;\n        return CE_None;\n    }\n\n    const int nScaleFactor = 1 << poGDS->nOverviewLevel;\n    if( poGDS->poJPEGDS == nullptr || nBlockId != poGDS->nBlockId )\n    {\n        if( nByteCount < 2 )\n            return CE_Failure;\n        nOffset += 2;  // Skip leading 0xFF 0xF8.\n        nByteCount -= 2;\n\n        // Special case for last strip that might be smaller than other strips\n        // In which case we must invalidate the dataset.\n        TIFF* hTIFF = poGDS->poParentDS->hTIFF;\n        if( !TIFFIsTiled( hTIFF ) && !bIsSingleStripAsSplit &&\n            (nBlockYOff + 1 ==\n                 DIV_ROUND_UP( poGDS->poParentDS->nRasterYSize,\n                               poGDS->poParentDS->nBlockYSize ) ||\n             (poGDS->poJPEGDS != nullptr &&\n              poGDS->poJPEGDS->GetRasterYSize() !=\n              nBlockYSize * nScaleFactor)) )\n        {\n            if( poGDS->poJPEGDS != nullptr )\n                GDALClose( poGDS->poJPEGDS );\n            poGDS->poJPEGDS = nullptr;\n        }\n\n        CPLString osFileToOpen;\n        poGDS->osTmpFilename.Printf(\"/vsimem/sparse_%p\", poGDS);\n        VSILFILE* fp = VSIFOpenL(poGDS->osTmpFilename, \"wb+\");\n\n        // If the size of the JPEG strip/tile is small enough, we will\n        // read it from the TIFF file and forge a in-memory JPEG file with\n        // the JPEG table followed by the JPEG data.\n        const bool bInMemoryJPEGFile = nByteCount < 256 * 256;\n        if( bInMemoryJPEGFile )\n        {\n            // If the previous file was opened as a /vsisparse/, must re-open.\n            if( poGDS->poJPEGDS != nullptr &&\n                STARTS_WITH(poGDS->poJPEGDS->GetDescription(), \"/vsisparse/\") )\n            {\n                GDALClose( poGDS->poJPEGDS );\n                poGDS->poJPEGDS = nullptr;\n            }\n            osFileToOpen = poGDS->osTmpFilename;\n\n            bool bError = false;\n            if( VSIFSeekL(fp, poGDS->nJPEGTableSize + nByteCount - 1, SEEK_SET)\n                != 0 )\n                bError = true;\n            char ch = 0;\n            if( !bError && VSIFWriteL(&ch, 1, 1, fp) != 1 )\n                bError = true;\n            GByte* pabyBuffer =\n                VSIGetMemFileBuffer( poGDS->osTmpFilename, nullptr, FALSE);\n            memcpy(pabyBuffer, poGDS->pabyJPEGTable, poGDS->nJPEGTableSize);\n            VSILFILE* fpTIF = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n            if( !bError && VSIFSeekL(fpTIF, nOffset, SEEK_SET) != 0 )\n                bError = true;\n            if( VSIFReadL( pabyBuffer + poGDS->nJPEGTableSize,\n                           static_cast<size_t>(nByteCount), 1, fpTIF) != 1 )\n                bError = true;\n            if( bError )\n            {\n                CPL_IGNORE_RET_VAL(VSIFCloseL(fp));\n                return CE_Failure;\n            }\n        }\n        else\n        {\n            // If the JPEG strip/tile is too big (e.g. a single-strip\n            // JPEG-in-TIFF), we will use /vsisparse mechanism to make a\n            // fake JPEG file.\n\n            // Always re-open.\n            GDALClose( poGDS->poJPEGDS );\n            poGDS->poJPEGDS = nullptr;\n\n            osFileToOpen =\n                CPLSPrintf(\"/vsisparse/%s\", poGDS->osTmpFilename.c_str());\n\n            if( VSIFPrintfL(\n                    fp,\n                    \"<VSISparseFile><SubfileRegion>\"\n                    \"<Filename relative='0'>%s</Filename>\"\n                    \"<DestinationOffset>0</DestinationOffset>\"\n                    \"<SourceOffset>0</SourceOffset>\"\n                    \"<RegionLength>%d</RegionLength>\"\n                    \"</SubfileRegion>\"\n                    \"<SubfileRegion>\"\n                    \"<Filename relative='0'>%s</Filename>\"\n                    \"<DestinationOffset>%d</DestinationOffset>\"\n                    \"<SourceOffset>\" CPL_FRMT_GUIB \"</SourceOffset>\"\n                    \"<RegionLength>\" CPL_FRMT_GUIB \"</RegionLength>\"\n                    \"</SubfileRegion></VSISparseFile>\",\n                    poGDS->osTmpFilenameJPEGTable.c_str(),\n                    static_cast<int>(poGDS->nJPEGTableSize),\n                    poGDS->poParentDS->GetDescription(),\n                    static_cast<int>(poGDS->nJPEGTableSize),\n                    nOffset,\n                    nByteCount) < 0 )\n            {\n                CPL_IGNORE_RET_VAL(VSIFCloseL(fp));\n                return CE_Failure;\n            }\n        }\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fp));\n\n        if( poGDS->poJPEGDS == nullptr )\n        {\n            const char* apszDrivers[] = { \"JPEG\", nullptr };\n\n            CPLString osOldVal;\n            if( poGDS->poParentDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n                poGDS->nBands == 4 )\n            {\n                osOldVal =\n                    CPLGetThreadLocalConfigOption(\"GDAL_JPEG_TO_RGB\", \"\");\n                CPLSetThreadLocalConfigOption(\"GDAL_JPEG_TO_RGB\", \"NO\");\n            }\n\n            poGDS->poJPEGDS =\n                static_cast<GDALDataset *>( GDALOpenEx(\n                    osFileToOpen,\n                    GDAL_OF_RASTER | GDAL_OF_INTERNAL,\n                    apszDrivers, nullptr, nullptr) );\n\n            if( poGDS->poJPEGDS != nullptr )\n            {\n                // Force all implicit overviews to be available, even for\n                // small tiles.\n                CPLSetThreadLocalConfigOption( \"JPEG_FORCE_INTERNAL_OVERVIEWS\",\n                                               \"YES\");\n                GDALGetOverviewCount(GDALGetRasterBand(poGDS->poJPEGDS, 1));\n                CPLSetThreadLocalConfigOption( \"JPEG_FORCE_INTERNAL_OVERVIEWS\",\n                                               nullptr);\n\n                poGDS->nBlockId = nBlockId;\n            }\n\n            if( poGDS->poParentDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n                poGDS->nBands == 4 )\n            {\n                CPLSetThreadLocalConfigOption(\n                    \"GDAL_JPEG_TO_RGB\",\n                    !osOldVal.empty() ? osOldVal.c_str() : nullptr );\n            }\n        }\n        else\n        {\n            // Trick: we invalidate the JPEG dataset to force a reload\n            // of the new content.\n            CPLErrorReset();\n            poGDS->poJPEGDS->FlushCache();\n            if( CPLGetLastErrorNo() != 0 )\n            {\n                GDALClose( poGDS->poJPEGDS );\n                poGDS->poJPEGDS = nullptr;\n                return CE_Failure;\n            }\n            poGDS->nBlockId = nBlockId;\n        }\n    }\n\n    CPLErr eErr = CE_Failure;\n    if( poGDS->poJPEGDS )\n    {\n        GDALDataset* l_poDS = poGDS->poJPEGDS;\n\n        int nReqXOff = 0;\n        int nReqYOff = 0;\n        int nReqXSize = 0;\n        int nReqYSize = 0;\n        if( bIsSingleStripAsSplit )\n        {\n            nReqYOff = nBlockYOff * nScaleFactor;\n            nReqXSize = l_poDS->GetRasterXSize();\n            nReqYSize = nScaleFactor;\n        }\n        else\n        {\n            if( nBlockXSize == poGDS->GetRasterXSize() )\n            {\n                nReqXSize = l_poDS->GetRasterXSize();\n            }\n            else\n            {\n                nReqXSize = nBlockXSize * nScaleFactor;\n            }\n            nReqYSize = nBlockYSize * nScaleFactor;\n        }\n        int nBufXSize = nBlockXSize;\n        int nBufYSize = nBlockYSize;\n        if( nBlockXOff == DIV_ROUND_UP(poGDS->poParentDS->nRasterXSize,\n                                       poGDS->poParentDS->nBlockXSize) - 1 )\n        {\n            nReqXSize = poGDS->poParentDS->nRasterXSize -\n                                nBlockXOff * poGDS->poParentDS->nBlockXSize;\n        }\n        if( nReqXOff + nReqXSize > l_poDS->GetRasterXSize() )\n        {\n            nReqXSize = l_poDS->GetRasterXSize() - nReqXOff;\n        }\n        if( !bIsSingleStripAsSplit &&\n            nBlockYOff == DIV_ROUND_UP(poGDS->poParentDS->nRasterYSize,\n                                       poGDS->poParentDS->nBlockYSize) - 1 )\n        {\n            nReqYSize = poGDS->poParentDS->nRasterYSize -\n                                nBlockYOff * poGDS->poParentDS->nBlockYSize;\n        }\n        if( nReqYOff + nReqYSize > l_poDS->GetRasterYSize() )\n        {\n            nReqYSize = l_poDS->GetRasterYSize() - nReqYOff;\n        }\n        if( nBlockXOff * nBlockXSize > poGDS->GetRasterXSize() - nBufXSize )\n        {\n            memset(pImage, 0, static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * nDataTypeSize);\n            nBufXSize = poGDS->GetRasterXSize() - nBlockXOff * nBlockXSize;\n        }\n        if( nBlockYOff * nBlockYSize > poGDS->GetRasterYSize() - nBufYSize )\n        {\n            memset(pImage, 0, static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * nDataTypeSize);\n            nBufYSize = poGDS->GetRasterYSize() - nBlockYOff * nBlockYSize;\n        }\n\n        const int nSrcBand =\n            poGDS->poParentDS->nPlanarConfig == PLANARCONFIG_SEPARATE ?\n            1 : nBand;\n        if( nSrcBand <= l_poDS->GetRasterCount() )\n        {\n            eErr = l_poDS->GetRasterBand(nSrcBand)->RasterIO(GF_Read,\n                                 nReqXOff, nReqYOff, nReqXSize, nReqYSize,\n                                 pImage,\n                                 nBufXSize, nBufYSize, eDataType,\n                                 0, static_cast<GPtrDiff_t>(nBlockXSize) * nDataTypeSize, nullptr );\n        }\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                        GTIFFSetJpegQuality()                         */\n/* Called by GTIFFBuildOverviews() to set the jpeg quality on the IFD   */\n/* of the .ovr file.                                                    */\n/************************************************************************/\n\nvoid GTIFFSetJpegQuality( GDALDatasetH hGTIFFDS, int nJpegQuality )\n{\n    CPLAssert(\n        EQUAL(GDALGetDriverShortName(GDALGetDatasetDriver(hGTIFFDS)), \"GTIFF\"));\n\n    GTiffDataset* const poDS = static_cast<GTiffDataset *>(hGTIFFDS);\n    poDS->nJpegQuality = nJpegQuality;\n\n    poDS->ScanDirectories();\n\n    for( int i = 0; i < poDS->nOverviewCount; ++i )\n        poDS->papoOverviewDS[i]->nJpegQuality = nJpegQuality;\n}\n\n/************************************************************************/\n/*                     GTIFFSetJpegTablesMode()                         */\n/* Called by GTIFFBuildOverviews() to set the jpeg tables mode on the   */\n/* of the .ovr file.                                                    */\n/************************************************************************/\n\nvoid GTIFFSetJpegTablesMode( GDALDatasetH hGTIFFDS, int nJpegTablesMode )\n{\n    CPLAssert(\n        EQUAL(GDALGetDriverShortName(GDALGetDatasetDriver(hGTIFFDS)), \"GTIFF\"));\n\n    GTiffDataset* const poDS = static_cast<GTiffDataset *>(hGTIFFDS);\n    poDS->nJpegTablesMode = nJpegTablesMode;\n\n    poDS->ScanDirectories();\n\n    for( int i = 0; i < poDS->nOverviewCount; ++i )\n        poDS->papoOverviewDS[i]->nJpegTablesMode = nJpegTablesMode;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                            GTiffRasterBand                           */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffRasterBand : public GDALPamRasterBand\n{\n    CPL_DISALLOW_COPY_ASSIGN(GTiffRasterBand)\n\n    friend class GTiffDataset;\n\n    GDALColorInterp    eBandInterp;\n\n    bool               bHaveOffsetScale;\n    double             dfOffset;\n    double             dfScale;\n    CPLString          osUnitType{};\n    CPLString          osDescription{};\n\n    int                DirectIO( GDALRWFlag eRWFlag,\n                                 int nXOff, int nYOff, int nXSize, int nYSize,\n                                 void * pData, int nBufXSize, int nBufYSize,\n                                 GDALDataType eBufType,\n                                 GSpacing nPixelSpace, GSpacing nLineSpace,\n                                 GDALRasterIOExtraArg* psExtraArg );\n\n    std::set<GTiffRasterBand **> aSetPSelf{};\n    static void     DropReferenceVirtualMem( void* pUserData );\n    CPLVirtualMem * GetVirtualMemAutoInternal( GDALRWFlag eRWFlag,\n                                               int *pnPixelSpace,\n                                               GIntBig *pnLineSpace,\n                                               char **papszOptions );\n\n    void*           CacheMultiRange( int nXOff, int nYOff,\n                                     int nXSize, int nYSize,\n                                     int nBufXSize, int nBufYSize,\n                                     GDALRasterIOExtraArg* psExtraArg );\n\nprotected:\n    GTiffDataset       *poGDS;\n    GDALMultiDomainMetadata oGTiffMDMD{};\n\n    bool               bNoDataSet;\n    double             dfNoDataValue;\n\n    void NullBlock( void *pData );\n    CPLErr FillCacheForOtherBands( int nBlockXOff, int nBlockYOff );\n\npublic:\n             GTiffRasterBand( GTiffDataset *, int );\n    virtual ~GTiffRasterBand();\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n    virtual CPLErr IWriteBlock( int, int, void * ) override;\n\n    virtual int IGetDataCoverageStatus( int nXOff, int nYOff,\n                                        int nXSize, int nYSize,\n                                        int nMaskFlagStop,\n                                        double* pdfDataPct) override;\n\n    virtual CPLErr IRasterIO( GDALRWFlag eRWFlag,\n                              int nXOff, int nYOff, int nXSize, int nYSize,\n                              void * pData, int nBufXSize, int nBufYSize,\n                              GDALDataType eBufType,\n                              GSpacing nPixelSpace, GSpacing nLineSpace,\n                              GDALRasterIOExtraArg* psExtraArg ) override final;\n\n    virtual const char *GetDescription() const override final;\n    virtual void        SetDescription( const char * ) override final;\n\n    virtual GDALColorInterp GetColorInterpretation() override /*final*/;\n    virtual GDALColorTable *GetColorTable() override /*final*/;\n    virtual CPLErr          SetColorTable( GDALColorTable * ) override final;\n    virtual double          GetNoDataValue( int * ) override final;\n    virtual CPLErr          SetNoDataValue( double ) override final;\n    virtual CPLErr DeleteNoDataValue() override final;\n\n    virtual double GetOffset( int *pbSuccess = nullptr ) override final;\n    virtual CPLErr SetOffset( double dfNewValue ) override final;\n    virtual double GetScale( int *pbSuccess = nullptr ) override final;\n    virtual CPLErr SetScale( double dfNewValue ) override final;\n    virtual const char* GetUnitType() override final;\n    virtual CPLErr SetUnitType( const char *pszNewValue ) override final;\n    virtual CPLErr SetColorInterpretation( GDALColorInterp ) override final;\n\n    virtual char      **GetMetadataDomainList() override final;\n    virtual CPLErr  SetMetadata( char **, const char * = \"\" ) override final;\n    virtual char  **GetMetadata( const char * pszDomain = \"\" ) override final;\n    virtual CPLErr  SetMetadataItem( const char*, const char*,\n                                     const char* = \"\" ) override final;\n    virtual const char *GetMetadataItem(\n        const char * pszName, const char * pszDomain = \"\" ) override final;\n    virtual int    GetOverviewCount()  override final;\n    virtual GDALRasterBand *GetOverview( int ) override final;\n\n    virtual GDALRasterBand *GetMaskBand() override final;\n    virtual int             GetMaskFlags() override final;\n    virtual CPLErr          CreateMaskBand( int nFlags )  override final;\n\n    virtual CPLVirtualMem  *GetVirtualMemAuto( GDALRWFlag eRWFlag,\n                                               int *pnPixelSpace,\n                                               GIntBig *pnLineSpace,\n                                               char **papszOptions )  override final;\n\n    GDALRasterAttributeTable* GetDefaultRAT() override final;\n    virtual CPLErr  GetHistogram(\n        double dfMin, double dfMax,\n        int nBuckets, GUIntBig * panHistogram,\n        int bIncludeOutOfRange, int bApproxOK,\n        GDALProgressFunc, void *pProgressData )  override final;\n\n    virtual CPLErr GetDefaultHistogram( double *pdfMin, double *pdfMax,\n                                        int *pnBuckets,\n                                        GUIntBig ** ppanHistogram,\n                                        int bForce,\n                                        GDALProgressFunc,\n                                        void *pProgressData)  override final;\n};\n\n/************************************************************************/\n/*                           GTiffRasterBand()                          */\n/************************************************************************/\n\nGTiffRasterBand::GTiffRasterBand( GTiffDataset *poDSIn, int nBandIn ) :\n    eBandInterp(GCI_Undefined),\n    bHaveOffsetScale(false),\n    dfOffset(0.0),\n    dfScale(1.0),\n    poGDS(poDSIn),\n    bNoDataSet(false),\n    dfNoDataValue(-9999.0)\n{\n    poDS = poDSIn;\n    nBand = nBandIn;\n\n/* -------------------------------------------------------------------- */\n/*      Get the GDAL data type.                                         */\n/* -------------------------------------------------------------------- */\n    const uint16 nBitsPerSample = poGDS->nBitsPerSample;\n    const uint16 nSampleFormat = poGDS->nSampleFormat;\n\n    eDataType = GDT_Unknown;\n\n    if( nBitsPerSample <= 8 )\n    {\n        eDataType = GDT_Byte;\n        if( nSampleFormat == SAMPLEFORMAT_INT )\n            oGTiffMDMD.SetMetadataItem( \"PIXELTYPE\", \"SIGNEDBYTE\",\n                                        \"IMAGE_STRUCTURE\" );\n    }\n    else if( nBitsPerSample <= 16 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_INT )\n            eDataType = GDT_Int16;\n        else\n            eDataType = GDT_UInt16;\n    }\n    else if( nBitsPerSample == 32 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_COMPLEXINT )\n            eDataType = GDT_CInt16;\n        else if( nSampleFormat == SAMPLEFORMAT_IEEEFP )\n            eDataType = GDT_Float32;\n        else if( nSampleFormat == SAMPLEFORMAT_INT )\n            eDataType = GDT_Int32;\n        else\n            eDataType = GDT_UInt32;\n    }\n    else if( nBitsPerSample == 64 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_IEEEFP )\n            eDataType = GDT_Float64;\n        else if( nSampleFormat == SAMPLEFORMAT_COMPLEXIEEEFP )\n            eDataType = GDT_CFloat32;\n        else if( nSampleFormat == SAMPLEFORMAT_COMPLEXINT )\n            eDataType = GDT_CInt32;\n    }\n    else if( nBitsPerSample == 128 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_COMPLEXIEEEFP )\n            eDataType = GDT_CFloat64;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Try to work out band color interpretation.                      */\n/* -------------------------------------------------------------------- */\n    bool bLookForExtraSamples = false;\n\n    if( poGDS->poColorTable != nullptr && nBand == 1 )\n    {\n        eBandInterp = GCI_PaletteIndex;\n    }\n    else if( poGDS->nPhotometric == PHOTOMETRIC_RGB\n             || (poGDS->nPhotometric == PHOTOMETRIC_YCBCR\n                 && poGDS->nCompression == COMPRESSION_JPEG\n                 && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\",\n                                                    \"YES\") )) )\n    {\n        if( nBand == 1 )\n            eBandInterp = GCI_RedBand;\n        else if( nBand == 2 )\n            eBandInterp = GCI_GreenBand;\n        else if( nBand == 3 )\n            eBandInterp = GCI_BlueBand;\n        else\n            bLookForExtraSamples = true;\n    }\n    else if( poGDS->nPhotometric == PHOTOMETRIC_YCBCR )\n    {\n        if( nBand == 1 )\n            eBandInterp = GCI_YCbCr_YBand;\n        else if( nBand == 2 )\n            eBandInterp = GCI_YCbCr_CbBand;\n        else if( nBand == 3 )\n            eBandInterp = GCI_YCbCr_CrBand;\n        else\n            bLookForExtraSamples = true;\n    }\n    else if( poGDS->nPhotometric == PHOTOMETRIC_SEPARATED )\n    {\n        if( nBand == 1 )\n            eBandInterp = GCI_CyanBand;\n        else if( nBand == 2 )\n            eBandInterp = GCI_MagentaBand;\n        else if( nBand == 3 )\n            eBandInterp = GCI_YellowBand;\n        else if( nBand == 4 )\n            eBandInterp = GCI_BlackBand;\n        else\n            bLookForExtraSamples = true;\n    }\n    else if( poGDS->nPhotometric == PHOTOMETRIC_MINISBLACK && nBand == 1 )\n    {\n        eBandInterp = GCI_GrayIndex;\n    }\n    else\n    {\n        bLookForExtraSamples = true;\n    }\n\n    if( bLookForExtraSamples )\n    {\n        uint16 *v = nullptr;\n        uint16 count = 0;\n\n        if( TIFFGetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES, &count, &v ) )\n        {\n            const int nBaseSamples = poGDS->nSamplesPerPixel - count;\n            const int nExpectedBaseSamples =\n                (poGDS->nPhotometric == PHOTOMETRIC_MINISBLACK) ? 1 :\n                (poGDS->nPhotometric == PHOTOMETRIC_MINISWHITE) ? 1 :\n                (poGDS->nPhotometric == PHOTOMETRIC_RGB) ? 3 :\n                (poGDS->nPhotometric == PHOTOMETRIC_YCBCR) ? 3 :\n                (poGDS->nPhotometric == PHOTOMETRIC_SEPARATED) ? 4 : 0;\n\n            if( nExpectedBaseSamples > 0 &&\n                nBand == nExpectedBaseSamples + 1 &&\n                nBaseSamples != nExpectedBaseSamples )\n            {\n                CPLError(CE_Warning, CPLE_AppDefined,\n                         \"Wrong number of ExtraSamples : %d. %d were expected\",\n                         count, poGDS->nSamplesPerPixel - nExpectedBaseSamples);\n            }\n\n            if( nBand > nBaseSamples\n                && nBand-nBaseSamples-1 < count\n                && (v[nBand-nBaseSamples-1] == EXTRASAMPLE_ASSOCALPHA\n                    || v[nBand-nBaseSamples-1] == EXTRASAMPLE_UNASSALPHA) )\n                eBandInterp = GCI_AlphaBand;\n            else\n                eBandInterp = GCI_Undefined;\n        }\n        else\n        {\n            eBandInterp = GCI_Undefined;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Establish block size for strip or tiles.                        */\n/* -------------------------------------------------------------------- */\n    nBlockXSize = poGDS->nBlockXSize;\n    nBlockYSize = poGDS->nBlockYSize;\n}\n\n/************************************************************************/\n/*                          ~GTiffRasterBand()                          */\n/************************************************************************/\n\nGTiffRasterBand::~GTiffRasterBand()\n{\n    // So that any future DropReferenceVirtualMem() will not try to access the\n    // raster band object, but this would not conform to the advertised\n    // contract.\n    if( !aSetPSelf.empty() )\n    {\n        CPLError( CE_Warning, CPLE_AppDefined,\n                  \"Virtual memory objects still exist at GTiffRasterBand \"\n                  \"destruction\" );\n        std::set<GTiffRasterBand**>::iterator oIter = aSetPSelf.begin();\n        for( ; oIter != aSetPSelf.end(); ++oIter )\n            *(*oIter) = nullptr;\n    }\n}\n\n/************************************************************************/\n/*                        FetchBufferDirectIO                           */\n/************************************************************************/\n\nclass FetchBufferDirectIO final\n{\n    VSILFILE*    fp;\n    GByte       *pTempBuffer;\n    size_t       nTempBufferSize;\n\npublic:\n            FetchBufferDirectIO( VSILFILE* fpIn,\n                                 GByte* pTempBufferIn,\n                                 size_t nTempBufferSizeIn ) :\n                fp(fpIn),\n                pTempBuffer(pTempBufferIn),\n                nTempBufferSize(nTempBufferSizeIn) {}\n\n    const GByte* FetchBytes( vsi_l_offset nOffset,\n                             int nPixels, int nDTSize,\n                             bool bIsByteSwapped, bool bIsComplex,\n                             int nBlockId )\n    {\n        if( !FetchBytes(pTempBuffer, nOffset, nPixels, nDTSize, bIsByteSwapped,\n                        bIsComplex, nBlockId) )\n        {\n            return nullptr;\n        }\n        return pTempBuffer;\n    }\n\n    bool FetchBytes( GByte* pabyDstBuffer,\n                     vsi_l_offset nOffset,\n                     int nPixels, int nDTSize,\n                     bool bIsByteSwapped, bool bIsComplex,\n                     int nBlockId )\n    {\n        vsi_l_offset nSeekForward = 0;\n        if( nOffset <= VSIFTellL(fp) ||\n            (nSeekForward = nOffset - VSIFTellL(fp)) > nTempBufferSize )\n        {\n            if( VSIFSeekL(fp, nOffset, SEEK_SET) != 0 )\n            {\n                CPLError(CE_Failure, CPLE_FileIO,\n                         \"Cannot seek to block %d\", nBlockId);\n                return false;\n            }\n        }\n        else\n        {\n            while( nSeekForward > 0 )\n            {\n                vsi_l_offset nToRead = nSeekForward;\n                if( nToRead > nTempBufferSize )\n                    nToRead = nTempBufferSize;\n                if( VSIFReadL(pTempBuffer, static_cast<size_t>(nToRead),\n                              1, fp) != 1 )\n                {\n                    CPLError(CE_Failure, CPLE_FileIO,\n                             \"Cannot seek to block %d\", nBlockId);\n                    return false;\n                }\n                nSeekForward -= nToRead;\n            }\n        }\n        if( VSIFReadL(pabyDstBuffer, nPixels * nDTSize, 1, fp) != 1 )\n        {\n            CPLError(CE_Failure, CPLE_FileIO,\n                     \"Missing data for block %d\", nBlockId);\n            return false;\n        }\n\n        if( bIsByteSwapped )\n        {\n            if( bIsComplex )\n                GDALSwapWords( pabyDstBuffer, nDTSize / 2, 2 * nPixels,\n                               nDTSize / 2 );\n            else\n                GDALSwapWords( pabyDstBuffer, nDTSize, nPixels, nDTSize);\n        }\n        return true;\n    }\n\n    static const EMULATED_BOOL bMinimizeIO = true;\n};\n\n/************************************************************************/\n/*                           DirectIO()                                 */\n/************************************************************************/\n\n// Reads directly bytes from the file using ReadMultiRange(), and by-pass\n// block reading. Restricted to simple TIFF configurations\n// (uncompressed data, standard data types). Particularly useful to extract\n// sub-windows of data on a large /vsicurl dataset).\n// Returns -1 if DirectIO() can't be supported on that file.\n\nint GTiffRasterBand::DirectIO( GDALRWFlag eRWFlag,\n                               int nXOff, int nYOff, int nXSize, int nYSize,\n                               void * pData, int nBufXSize, int nBufYSize,\n                               GDALDataType eBufType,\n                               GSpacing nPixelSpace, GSpacing nLineSpace,\n                               GDALRasterIOExtraArg* psExtraArg )\n{\n    const int nDTSizeBits = GDALGetDataTypeSizeBits(eDataType);\n    if( !(eRWFlag == GF_Read &&\n          poGDS->nCompression == COMPRESSION_NONE &&\n          (poGDS->nPhotometric == PHOTOMETRIC_MINISBLACK ||\n           poGDS->nPhotometric == PHOTOMETRIC_RGB ||\n           poGDS->nPhotometric == PHOTOMETRIC_PALETTE) &&\n          poGDS->nBitsPerSample == nDTSizeBits &&\n          poGDS->SetDirectory() /* very important to make hTIFF uptodate! */) )\n    {\n        return -1;\n    }\n\n    // Only know how to deal with nearest neighbour in this optimized routine.\n    if( (nXSize != nBufXSize || nYSize != nBufYSize) &&\n        psExtraArg != nullptr &&\n        psExtraArg->eResampleAlg != GRIORA_NearestNeighbour )\n    {\n        return -1;\n    }\n\n#if DEBUG_VERBOSE\n    CPLDebug( \"GTiff\", \"DirectIO(%d,%d,%d,%d -> %dx%d)\",\n              nXOff, nYOff, nXSize, nYSize,\n              nBufXSize, nBufYSize );\n#endif\n\n    // Make sure that TIFFTAG_STRIPOFFSETS is up-to-date.\n    if( poGDS->GetAccess() == GA_Update )\n    {\n        poGDS->FlushCache();\n        VSI_TIFFFlushBufferedWrite( TIFFClientdata( poGDS->hTIFF ) );\n    }\n\n    if( TIFFIsTiled( poGDS->hTIFF ) )\n    {\n        if( poGDS->m_pTempBufferForCommonDirectIO == nullptr )\n        {\n            const int nDTSize = nDTSizeBits / 8;\n            poGDS->m_nTempBufferForCommonDirectIOSize =\n                static_cast<size_t>(\n                    static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * nDTSize *\n                    (poGDS->nPlanarConfig == PLANARCONFIG_CONTIG ?\n                     poGDS->nBands : 1) );\n\n            poGDS->m_pTempBufferForCommonDirectIO =\n                static_cast<GByte *>( VSI_MALLOC_VERBOSE(\n                    poGDS->m_nTempBufferForCommonDirectIOSize ) );\n            if( poGDS->m_pTempBufferForCommonDirectIO == nullptr )\n                return CE_Failure;\n        }\n\n        VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( poGDS->hTIFF ));\n        FetchBufferDirectIO oFetcher(fp, poGDS->m_pTempBufferForCommonDirectIO,\n                                     poGDS->m_nTempBufferForCommonDirectIOSize);\n\n        return poGDS->CommonDirectIO(\n            oFetcher,\n            nXOff, nYOff, nXSize, nYSize,\n            pData, nBufXSize, nBufYSize,\n            eBufType,\n            1, &nBand,\n            nPixelSpace, nLineSpace,\n            0 );\n    }\n\n    // Get strip offsets.\n    toff_t *panTIFFOffsets = nullptr;\n    if( !TIFFGetField( poGDS->hTIFF, TIFFTAG_STRIPOFFSETS, &panTIFFOffsets ) ||\n        panTIFFOffsets == nullptr )\n    {\n        return CE_Failure;\n    }\n\n    // Sub-sampling or over-sampling can only be done at last stage.\n    int nReqXSize = nXSize;\n    // Can do sub-sampling at the extraction stage.\n    const int nReqYSize = std::min(nBufYSize, nYSize);\n    // TODO(schwehr): Make ppData be GByte**.\n    void** ppData = static_cast<void **>(\n        VSI_MALLOC_VERBOSE(nReqYSize * sizeof(void*)) );\n    vsi_l_offset* panOffsets = static_cast<vsi_l_offset *>(\n        VSI_MALLOC_VERBOSE(nReqYSize * sizeof(vsi_l_offset)) );\n    size_t* panSizes = static_cast<size_t *>(\n        VSI_MALLOC_VERBOSE(nReqYSize * sizeof(size_t)) );\n    const int nDTSize = GDALGetDataTypeSizeBytes(eDataType);\n    void* pTmpBuffer = nullptr;\n    int eErr = CE_None;\n    int nContigBands =\n        poGDS->nPlanarConfig == PLANARCONFIG_CONTIG ? poGDS->nBands : 1;\n    int nSrcPixelSize = nDTSize * nContigBands;\n\n    if( ppData == nullptr || panOffsets == nullptr || panSizes == nullptr )\n        eErr = CE_Failure;\n    else if( nXSize != nBufXSize || nYSize != nBufYSize ||\n             eBufType != eDataType ||\n             nPixelSpace != GDALGetDataTypeSizeBytes(eBufType) ||\n             nContigBands > 1 )\n    {\n        // We need a temporary buffer for over-sampling/sub-sampling\n        // and/or data type conversion.\n        pTmpBuffer = VSI_MALLOC_VERBOSE(nReqXSize * nReqYSize * nSrcPixelSize);\n        if( pTmpBuffer == nullptr )\n            eErr = CE_Failure;\n    }\n\n    // Prepare data extraction.\n    const double dfSrcYInc = nYSize / static_cast<double>( nBufYSize );\n\n    for( int iLine = 0; eErr == CE_None && iLine < nReqYSize; ++iLine )\n    {\n        if( pTmpBuffer == nullptr )\n            ppData[iLine] = static_cast<GByte *>(pData) + iLine * nLineSpace;\n        else\n            ppData[iLine] =\n                static_cast<GByte *>(pTmpBuffer) +\n                iLine * nReqXSize * nSrcPixelSize;\n        int nSrcLine = 0;\n        if( nBufYSize < nYSize )  // Sub-sampling in y.\n            nSrcLine = nYOff + static_cast<int>((iLine + 0.5) * dfSrcYInc);\n        else\n            nSrcLine = nYOff + iLine;\n\n        const int nBlockXOff = 0;\n        const int nBlockYOff = nSrcLine / nBlockYSize;\n        const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n        nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n        int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n        if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        {\n            nBlockId += (nBand-1) * poGDS->nBlocksPerBand;\n        }\n\n        panOffsets[iLine] = panTIFFOffsets[nBlockId];\n        if( panOffsets[iLine] == 0 )  // We don't support sparse files.\n            eErr = -1;\n\n        panOffsets[iLine] +=\n            (nXOff + nYOffsetInBlock * nBlockXSize) * nSrcPixelSize;\n        panSizes[iLine] = nReqXSize * nSrcPixelSize;\n    }\n\n    // Extract data from the file.\n    if( eErr == CE_None )\n    {\n        VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( poGDS->hTIFF ));\n        const int nRet =\n            VSIFReadMultiRangeL( nReqYSize, ppData, panOffsets, panSizes, fp );\n        if( nRet != 0 )\n            eErr = CE_Failure;\n    }\n\n    // Byte-swap if necessary.\n    if( eErr == CE_None && TIFFIsByteSwapped(poGDS->hTIFF) )\n    {\n        for( int iLine = 0; iLine < nReqYSize; ++iLine )\n        {\n            if( GDALDataTypeIsComplex(eDataType) )\n                GDALSwapWords( ppData[iLine], nDTSize / 2,\n                               2 * nReqXSize * nContigBands, nDTSize / 2 );\n            else\n                GDALSwapWords( ppData[iLine], nDTSize,\n                               nReqXSize * nContigBands, nDTSize );\n        }\n    }\n\n    // Over-sampling/sub-sampling and/or data type conversion.\n    const double dfSrcXInc = nXSize / static_cast<double>( nBufXSize );\n    if( eErr == CE_None && pTmpBuffer != nullptr )\n    {\n        for( int iY=0; iY < nBufYSize; ++iY )\n        {\n            const int iSrcY =\n                nBufYSize <= nYSize ?\n                iY : static_cast<int>((iY + 0.5) * dfSrcYInc);\n\n            GByte* pabySrcData =\n                static_cast<GByte*>(ppData[iSrcY]) +\n                (nContigBands > 1 ? (nBand-1) : 0) * nDTSize;\n            GByte* pabyDstData =\n                static_cast<GByte *>(pData) + iY * nLineSpace;\n            if( nBufXSize == nXSize )\n            {\n                GDALCopyWords( pabySrcData,\n                               eDataType,\n                               nSrcPixelSize,\n                               pabyDstData,\n                               eBufType,\n                               static_cast<int>(nPixelSpace),\n                               nBufXSize );\n            }\n            else\n            {\n                if( eDataType == GDT_Byte && eBufType == GDT_Byte )\n                {\n                    double dfSrcX = 0.5 * dfSrcXInc;\n                    for( int iX = 0; iX < nBufXSize; ++iX, dfSrcX += dfSrcXInc )\n                    {\n                        const int iSrcX = static_cast<int>(dfSrcX);\n                        pabyDstData[iX * nPixelSpace] =\n                            pabySrcData[iSrcX * nSrcPixelSize];\n                    }\n                }\n                else\n                {\n                    double dfSrcX = 0.5 * dfSrcXInc;\n                    for( int iX = 0; iX < nBufXSize; ++iX, dfSrcX += dfSrcXInc )\n                    {\n                        const int iSrcX = static_cast<int>(dfSrcX);\n                        GDALCopyWords( pabySrcData + iSrcX * nSrcPixelSize,\n                                       eDataType, 0,\n                                       pabyDstData + iX * nPixelSpace,\n                                       eBufType, 0, 1 );\n                    }\n                }\n            }\n        }\n    }\n\n    // Cleanup.\n    CPLFree(pTmpBuffer);\n    CPLFree(ppData);\n    CPLFree(panOffsets);\n    CPLFree(panSizes);\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                           GetVirtualMemAuto()                        */\n/************************************************************************/\n\nCPLVirtualMem* GTiffRasterBand::GetVirtualMemAuto( GDALRWFlag eRWFlag,\n                                                   int *pnPixelSpace,\n                                                   GIntBig *pnLineSpace,\n                                                   char **papszOptions )\n{\n    const char* pszImpl = CSLFetchNameValueDef(\n            papszOptions, \"USE_DEFAULT_IMPLEMENTATION\", \"AUTO\");\n    if( EQUAL(pszImpl, \"YES\") || EQUAL(pszImpl, \"ON\") ||\n        EQUAL(pszImpl, \"1\") || EQUAL(pszImpl, \"TRUE\") )\n    {\n        return GDALRasterBand::GetVirtualMemAuto( eRWFlag, pnPixelSpace,\n                                                  pnLineSpace, papszOptions );\n    }\n\n    CPLVirtualMem *psRet =\n        GetVirtualMemAutoInternal( eRWFlag, pnPixelSpace, pnLineSpace,\n                                   papszOptions );\n    if( psRet != nullptr )\n    {\n        CPLDebug(\"GTiff\", \"GetVirtualMemAuto(): Using memory file mapping\");\n        return psRet;\n    }\n\n    if( EQUAL(pszImpl, \"NO\") || EQUAL(pszImpl, \"OFF\") ||\n        EQUAL(pszImpl, \"0\") || EQUAL(pszImpl, \"FALSE\") )\n    {\n        return nullptr;\n    }\n\n    CPLDebug(\"GTiff\", \"GetVirtualMemAuto(): Defaulting to base implementation\");\n    return GDALRasterBand::GetVirtualMemAuto( eRWFlag, pnPixelSpace,\n                                              pnLineSpace, papszOptions );\n}\n\n\n/************************************************************************/\n/*                           GetDefaultRAT()                            */\n/************************************************************************/\n\nGDALRasterAttributeTable *GTiffRasterBand::GetDefaultRAT()\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n    return GDALPamRasterBand::GetDefaultRAT();\n}\n\n/************************************************************************/\n/*                           GetHistogram()                             */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::GetHistogram(\n    double dfMin, double dfMax,\n    int nBuckets, GUIntBig * panHistogram,\n    int bIncludeOutOfRange, int bApproxOK,\n    GDALProgressFunc pfnProgress, void *pProgressData )\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n    return GDALPamRasterBand::GetHistogram( dfMin, dfMax,\n                                            nBuckets, panHistogram,\n                                            bIncludeOutOfRange, bApproxOK,\n                                            pfnProgress, pProgressData );\n}\n\n/************************************************************************/\n/*                       GetDefaultHistogram()                          */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::GetDefaultHistogram( double *pdfMin, double *pdfMax,\n                                             int *pnBuckets,\n                                             GUIntBig ** ppanHistogram,\n                                             int bForce,\n                                             GDALProgressFunc pfnProgress,\n                                             void *pProgressData )\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n    return GDALPamRasterBand::GetDefaultHistogram( pdfMin, pdfMax,\n                                                   pnBuckets, ppanHistogram,\n                                                   bForce,\n                                                   pfnProgress, pProgressData );\n}\n\n/************************************************************************/\n/*                     DropReferenceVirtualMem()                        */\n/************************************************************************/\n\nvoid GTiffRasterBand::DropReferenceVirtualMem( void* pUserData )\n{\n    // This function may also be called when the dataset and rasterband\n    // objects have been destroyed.\n    // If they are still alive, it updates the reference counter of the\n    // base mapping to invalidate the pointer to it if needed.\n\n    GTiffRasterBand** ppoSelf = static_cast<GTiffRasterBand **>( pUserData );\n    GTiffRasterBand* poSelf = *ppoSelf;\n\n    if( poSelf != nullptr )\n    {\n        if( --(poSelf->poGDS->nRefBaseMapping) == 0 )\n        {\n            poSelf->poGDS->pBaseMapping = nullptr;\n        }\n        poSelf->aSetPSelf.erase(ppoSelf);\n    }\n    CPLFree(pUserData);\n}\n\n/************************************************************************/\n/*                     GetVirtualMemAutoInternal()                      */\n/************************************************************************/\n\nCPLVirtualMem* GTiffRasterBand::GetVirtualMemAutoInternal( GDALRWFlag eRWFlag,\n                                                           int *pnPixelSpace,\n                                                           GIntBig *pnLineSpace,\n                                                           char **papszOptions )\n{\n    int nLineSize = nBlockXSize * GDALGetDataTypeSizeBytes(eDataType);\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n        nLineSize *= poGDS->nBands;\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n    {\n        // In case of a pixel interleaved file, we save virtual memory space\n        // by reusing a base mapping that embraces the whole imagery.\n        if( poGDS->pBaseMapping != nullptr )\n        {\n            // Offset between the base mapping and the requested mapping.\n            vsi_l_offset nOffset =\n                static_cast<vsi_l_offset>(nBand - 1) *\n                GDALGetDataTypeSizeBytes(eDataType);\n\n            GTiffRasterBand** ppoSelf =\n                static_cast<GTiffRasterBand** >(\n                    CPLCalloc(1, sizeof(GTiffRasterBand*)) );\n            *ppoSelf = this;\n\n            CPLVirtualMem* pVMem = CPLVirtualMemDerivedNew(\n                poGDS->pBaseMapping,\n                nOffset,\n                CPLVirtualMemGetSize(poGDS->pBaseMapping) - nOffset,\n                GTiffRasterBand::DropReferenceVirtualMem,\n                ppoSelf);\n            if( pVMem == nullptr )\n            {\n                CPLFree(ppoSelf);\n                return nullptr;\n            }\n\n            // Mechanism used so that the memory mapping object can be\n            // destroyed after the raster band.\n            aSetPSelf.insert(ppoSelf);\n            ++poGDS->nRefBaseMapping;\n            *pnPixelSpace = GDALGetDataTypeSizeBytes(eDataType);\n            if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n                *pnPixelSpace *= poGDS->nBands;\n            *pnLineSpace = nLineSize;\n            return pVMem;\n        }\n    }\n\n    if( !poGDS->SetDirectory() )  // Very important to make hTIFF up-to-date.\n        return nullptr;\n    VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( poGDS->hTIFF ));\n\n    vsi_l_offset nLength = static_cast<vsi_l_offset>(nRasterYSize) * nLineSize;\n\n    if( !(CPLIsVirtualMemFileMapAvailable() &&\n          VSIFGetNativeFileDescriptorL(fp) != nullptr &&\n#if SIZEOF_VOIDP == 4\n          nLength == static_cast<size_t>(nLength) &&\n#endif\n          poGDS->nCompression == COMPRESSION_NONE &&\n          (poGDS->nPhotometric == PHOTOMETRIC_MINISBLACK ||\n           poGDS->nPhotometric == PHOTOMETRIC_RGB ||\n           poGDS->nPhotometric == PHOTOMETRIC_PALETTE) &&\n          poGDS->nBitsPerSample == GDALGetDataTypeSizeBits(eDataType) &&\n          !TIFFIsTiled( poGDS->hTIFF ) && !TIFFIsByteSwapped(poGDS->hTIFF)) )\n    {\n        return nullptr;\n    }\n\n    // Make sure that TIFFTAG_STRIPOFFSETS is up-to-date.\n    if( poGDS->GetAccess() == GA_Update )\n    {\n        poGDS->FlushCache();\n        VSI_TIFFFlushBufferedWrite( TIFFClientdata( poGDS->hTIFF ) );\n    }\n\n    // Get strip offsets.\n    toff_t *panTIFFOffsets = nullptr;\n    if( !TIFFGetField( poGDS->hTIFF, TIFFTAG_STRIPOFFSETS, &panTIFFOffsets ) ||\n        panTIFFOffsets == nullptr )\n    {\n        return nullptr;\n    }\n\n    GPtrDiff_t nBlockSize =\n        static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * GDALGetDataTypeSizeBytes(eDataType);\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n        nBlockSize *= poGDS->nBands;\n\n    int nBlocks = poGDS->nBlocksPerBand;\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        nBlocks *= poGDS->nBands;\n    int i = 0;  // Used after for.\n    for( ; i < nBlocks; ++i )\n    {\n        if( panTIFFOffsets[i] != 0 )\n            break;\n    }\n    if( i == nBlocks )\n    {\n        // All zeroes.\n        if( poGDS->eAccess == GA_Update )\n        {\n            // Initialize the file with empty blocks so that the file has\n            // the appropriate size.\n\n            toff_t* panByteCounts = nullptr;\n            if( !TIFFGetField( poGDS->hTIFF, TIFFTAG_STRIPBYTECOUNTS,\n                               &panByteCounts ) ||\n                panByteCounts == nullptr )\n            {\n                return nullptr;\n            }\n            if( VSIFSeekL(fp, 0, SEEK_END) != 0 )\n                return nullptr;\n            vsi_l_offset nBaseOffset = VSIFTellL(fp);\n\n            // Just write one tile with libtiff to put it in appropriate state.\n            GByte* pabyData =\n                static_cast<GByte*>(VSI_CALLOC_VERBOSE(1, nBlockSize));\n            if( pabyData == nullptr )\n            {\n                return nullptr;\n            }\n            const auto ret =\n                    TIFFWriteEncodedStrip( poGDS->hTIFF, 0, pabyData,\n                                           nBlockSize );\n            VSI_TIFFFlushBufferedWrite( TIFFClientdata( poGDS->hTIFF ) );\n            VSIFree(pabyData);\n            if( ret != nBlockSize )\n            {\n                return nullptr;\n            }\n            CPLAssert(panTIFFOffsets[0] == nBaseOffset);\n            CPLAssert(panByteCounts[0] == static_cast<toff_t>(nBlockSize));\n\n            // Now simulate the writing of other blocks.\n            const vsi_l_offset nDataSize =\n                static_cast<vsi_l_offset>(nBlockSize) * nBlocks;\n            if( VSIFTruncateL(fp, nBaseOffset + nDataSize) != 0 )\n                return nullptr;\n\n            for( i = 1; i < nBlocks; ++i)\n            {\n                panTIFFOffsets[i] =\n                    nBaseOffset + i * static_cast<toff_t>(nBlockSize);\n                panByteCounts[i] = nBlockSize;\n            }\n        }\n        else\n        {\n            CPLDebug( \"GTiff\", \"Sparse files not supported in file mapping\" );\n            return nullptr;\n        }\n    }\n\n    GIntBig nBlockSpacing = 0;\n    bool bCompatibleSpacing = true;\n    toff_t nPrevOffset = 0;\n    for( i = 0; i < poGDS->nBlocksPerBand; ++i )\n    {\n        toff_t nCurOffset = 0;\n        if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n            nCurOffset =\n                panTIFFOffsets[poGDS->nBlocksPerBand * (nBand - 1) + i];\n        else\n            nCurOffset = panTIFFOffsets[i];\n        if( nCurOffset == 0 )\n        {\n            bCompatibleSpacing = false;\n            break;\n        }\n        if( i > 0 )\n        {\n            const GIntBig nCurSpacing = nCurOffset - nPrevOffset;\n            if( i == 1 )\n            {\n                if( nCurSpacing !=\n                    static_cast<GIntBig>(nBlockYSize) * nLineSize )\n                {\n                    bCompatibleSpacing = false;\n                    break;\n                }\n                nBlockSpacing = nCurSpacing;\n            }\n            else if( nBlockSpacing != nCurSpacing )\n            {\n                bCompatibleSpacing = false;\n                break;\n            }\n        }\n        nPrevOffset = nCurOffset;\n    }\n\n    if( !bCompatibleSpacing )\n    {\n        return nullptr;\n    }\n\n    vsi_l_offset nOffset = 0;\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n    {\n        CPLAssert( poGDS->pBaseMapping == nullptr );\n        nOffset = panTIFFOffsets[0];\n    }\n    else\n    {\n        nOffset = panTIFFOffsets[poGDS->nBlocksPerBand * (nBand - 1)];\n    }\n    CPLVirtualMem* pVMem = CPLVirtualMemFileMapNew(\n        fp, nOffset, nLength,\n        eRWFlag == GF_Write ? VIRTUALMEM_READWRITE : VIRTUALMEM_READONLY,\n        nullptr, nullptr);\n    if( pVMem == nullptr )\n    {\n        return nullptr;\n    }\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n    {\n        // TODO(schwehr): Revisit this block.\n        poGDS->pBaseMapping = pVMem;\n        pVMem = GetVirtualMemAutoInternal( eRWFlag,\n                                           pnPixelSpace,\n                                           pnLineSpace,\n                                           papszOptions );\n        // Drop ref on base mapping.\n        CPLVirtualMemFree(poGDS->pBaseMapping);\n        if( pVMem == nullptr )\n            poGDS->pBaseMapping = nullptr;\n    }\n    else\n    {\n        *pnPixelSpace = GDALGetDataTypeSizeBytes(eDataType);\n        if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n            *pnPixelSpace *= poGDS->nBands;\n        *pnLineSpace = nLineSize;\n    }\n    return pVMem;\n}\n\n/************************************************************************/\n/*                     HasOptimizedReadMultiRange()                     */\n/************************************************************************/\n\nint GTiffDataset::HasOptimizedReadMultiRange()\n{\n    if( m_nHasOptimizedReadMultiRange >= 0 )\n        return m_nHasOptimizedReadMultiRange;\n    m_nHasOptimizedReadMultiRange =\n        VSIHasOptimizedReadMultiRange(osFilename);\n    return m_nHasOptimizedReadMultiRange;\n}\n\n/************************************************************************/\n/*                            IRasterIO()                               */\n/************************************************************************/\n\nCPLErr GTiffDataset::IRasterIO( GDALRWFlag eRWFlag,\n                                int nXOff, int nYOff, int nXSize, int nYSize,\n                                void * pData, int nBufXSize, int nBufYSize,\n                                GDALDataType eBufType,\n                                int nBandCount, int *panBandMap,\n                                GSpacing nPixelSpace, GSpacing nLineSpace,\n                                GSpacing nBandSpace,\n                                GDALRasterIOExtraArg* psExtraArg )\n\n{\n    // Try to pass the request to the most appropriate overview dataset.\n    if( nBufXSize < nXSize && nBufYSize < nYSize )\n    {\n        int bTried = FALSE;\n        ++nJPEGOverviewVisibilityCounter;\n        const CPLErr eErr =\n            TryOverviewRasterIO( eRWFlag,\n                                 nXOff, nYOff, nXSize, nYSize,\n                                 pData, nBufXSize, nBufYSize,\n                                 eBufType,\n                                 nBandCount, panBandMap,\n                                 nPixelSpace, nLineSpace,\n                                 nBandSpace,\n                                 psExtraArg,\n                                 &bTried );\n        --nJPEGOverviewVisibilityCounter;\n        if( bTried )\n            return eErr;\n    }\n\n    if( eVirtualMemIOUsage != VIRTUAL_MEM_IO_NO )\n    {\n        const int nErr = VirtualMemIO(\n            eRWFlag, nXOff, nYOff, nXSize, nYSize,\n            pData, nBufXSize, nBufYSize, eBufType,\n            nBandCount, panBandMap, nPixelSpace, nLineSpace,\n            nBandSpace, psExtraArg );\n        if( nErr >= 0 )\n            return static_cast<CPLErr>(nErr);\n    }\n    if( bDirectIO )\n    {\n        const int nErr = DirectIO(\n            eRWFlag, nXOff, nYOff, nXSize, nYSize,\n            pData, nBufXSize, nBufYSize, eBufType,\n            nBandCount, panBandMap, nPixelSpace, nLineSpace,\n            nBandSpace, psExtraArg );\n        if( nErr >= 0 )\n            return static_cast<CPLErr>(nErr);\n    }\n\n    void* pBufferedData = nullptr;\n    if( eAccess == GA_ReadOnly &&\n        eRWFlag == GF_Read &&\n        nPlanarConfig == PLANARCONFIG_CONTIG &&\n        HasOptimizedReadMultiRange() )\n    {\n        pBufferedData = cpl::down_cast<GTiffRasterBand *>(\n            GetRasterBand(1))->CacheMultiRange(nXOff, nYOff,\n                                               nXSize, nYSize,\n                                               nBufXSize, nBufYSize,\n                                               psExtraArg);\n    }\n\n    ++nJPEGOverviewVisibilityCounter;\n    const CPLErr eErr =\n        GDALPamDataset::IRasterIO(\n            eRWFlag, nXOff, nYOff, nXSize, nYSize,\n            pData, nBufXSize, nBufYSize, eBufType,\n            nBandCount, panBandMap, nPixelSpace, nLineSpace,\n            nBandSpace, psExtraArg);\n    nJPEGOverviewVisibilityCounter--;\n\n    if( pBufferedData )\n    {\n        VSIFree( pBufferedData );\n        VSI_TIFFSetCachedRanges( TIFFClientdata( hTIFF ),\n                                 0, nullptr, nullptr, nullptr );\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                        FetchBufferVirtualMemIO                       */\n/************************************************************************/\n\nclass FetchBufferVirtualMemIO final\n{\n    const GByte* pabySrcData;\n    size_t       nMappingSize;\n    GByte       *pTempBuffer;\n\npublic:\n            FetchBufferVirtualMemIO( const GByte* pabySrcDataIn,\n                                     size_t nMappingSizeIn,\n                                     GByte* pTempBufferIn ) :\n                pabySrcData(pabySrcDataIn),\n                nMappingSize(nMappingSizeIn),\n                pTempBuffer(pTempBufferIn) {}\n\n    const GByte* FetchBytes( vsi_l_offset nOffset,\n                             int nPixels, int nDTSize,\n                             bool bIsByteSwapped, bool bIsComplex,\n                             int nBlockId )\n    {\n        if( nOffset + nPixels * nDTSize > nMappingSize )\n        {\n            CPLError(CE_Failure, CPLE_FileIO,\n                     \"Missing data for block %d\", nBlockId);\n            return nullptr;\n        }\n        if( !bIsByteSwapped )\n            return pabySrcData + nOffset;\n        memcpy(pTempBuffer, pabySrcData + nOffset, nPixels * nDTSize);\n        if( bIsComplex )\n            GDALSwapWords( pTempBuffer, nDTSize / 2, 2 * nPixels, nDTSize / 2);\n        else\n            GDALSwapWords( pTempBuffer, nDTSize, nPixels, nDTSize);\n        return pTempBuffer;\n    }\n\n    bool FetchBytes( GByte* pabyDstBuffer,\n                     vsi_l_offset nOffset,\n                     int nPixels, int nDTSize,\n                     bool bIsByteSwapped, bool bIsComplex,\n                     int nBlockId )\n    {\n        if( nOffset + nPixels * nDTSize > nMappingSize )\n        {\n            CPLError(CE_Failure, CPLE_FileIO,\n                     \"Missing data for block %d\", nBlockId);\n            return false;\n        }\n        memcpy(pabyDstBuffer, pabySrcData + nOffset, nPixels * nDTSize);\n        if( bIsByteSwapped )\n        {\n            if( bIsComplex )\n                GDALSwapWords( pabyDstBuffer, nDTSize / 2, 2 * nPixels,\n                               nDTSize / 2);\n            else\n                GDALSwapWords( pabyDstBuffer, nDTSize, nPixels, nDTSize);\n        }\n        return true;\n    }\n\n    static const EMULATED_BOOL bMinimizeIO = false;\n};\n\n/************************************************************************/\n/*                         VirtualMemIO()                               */\n/************************************************************************/\n\nint GTiffDataset::VirtualMemIO( GDALRWFlag eRWFlag,\n                                int nXOff, int nYOff, int nXSize, int nYSize,\n                                void * pData, int nBufXSize, int nBufYSize,\n                                GDALDataType eBufType,\n                                int nBandCount, int *panBandMap,\n                                GSpacing nPixelSpace, GSpacing nLineSpace,\n                                GSpacing nBandSpace,\n                                GDALRasterIOExtraArg* psExtraArg )\n{\n    if( eAccess == GA_Update || eRWFlag == GF_Write || bStreamingIn )\n        return -1;\n\n    // Only know how to deal with nearest neighbour in this optimized routine.\n    if( (nXSize != nBufXSize || nYSize != nBufYSize) &&\n        psExtraArg != nullptr &&\n        psExtraArg->eResampleAlg != GRIORA_NearestNeighbour )\n    {\n        return -1;\n    }\n\n    if( !SetDirectory() )\n        return CE_Failure;\n\n    const GDALDataType eDataType = GetRasterBand(1)->GetRasterDataType();\n    const int nDTSizeBits = GDALGetDataTypeSizeBits(eDataType);\n    if( !(nCompression == COMPRESSION_NONE &&\n        (nPhotometric == PHOTOMETRIC_MINISBLACK ||\n        nPhotometric == PHOTOMETRIC_RGB ||\n        nPhotometric == PHOTOMETRIC_PALETTE) &&\n        nBitsPerSample == nDTSizeBits) )\n    {\n        eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n        return -1;\n    }\n\n    size_t nMappingSize = 0;\n    GByte* pabySrcData = nullptr;\n    if( STARTS_WITH(osFilename, \"/vsimem/\") )\n    {\n        vsi_l_offset nDataLength = 0;\n        pabySrcData =\n            VSIGetMemFileBuffer(osFilename, &nDataLength, FALSE);\n        nMappingSize = static_cast<size_t>(nDataLength);\n        if( pabySrcData == nullptr )\n            return -1;\n    }\n    else if( psVirtualMemIOMapping == nullptr )\n    {\n        VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n        if( !CPLIsVirtualMemFileMapAvailable() ||\n            VSIFGetNativeFileDescriptorL(fp) == nullptr )\n        {\n            eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n            return -1;\n        }\n        if( VSIFSeekL(fp, 0, SEEK_END) != 0 )\n        {\n            eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n            return -1;\n        }\n        const vsi_l_offset nLength = VSIFTellL(fp);\n        if( static_cast<size_t>(nLength) != nLength )\n        {\n            eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n            return -1;\n        }\n        if( eVirtualMemIOUsage == VIRTUAL_MEM_IO_IF_ENOUGH_RAM )\n        {\n            GIntBig nRAM = CPLGetUsablePhysicalRAM();\n            if( static_cast<GIntBig>(nLength) > nRAM )\n            {\n                CPLDebug( \"GTiff\",\n                          \"Not enough RAM to map whole file into memory.\" );\n                eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n                return -1;\n            }\n        }\n        psVirtualMemIOMapping = CPLVirtualMemFileMapNew(\n            fp, 0, nLength, VIRTUALMEM_READONLY, nullptr, nullptr);\n        if( psVirtualMemIOMapping == nullptr )\n        {\n            eVirtualMemIOUsage = VIRTUAL_MEM_IO_NO;\n            return -1;\n        }\n        eVirtualMemIOUsage = VIRTUAL_MEM_IO_YES;\n    }\n\n    if( psVirtualMemIOMapping )\n    {\n#ifdef DEBUG\n        CPLDebug(\"GTiff\", \"Using VirtualMemIO\");\n#endif\n        nMappingSize = CPLVirtualMemGetSize(psVirtualMemIOMapping);\n        pabySrcData = static_cast<GByte *>(\n            CPLVirtualMemGetAddr(psVirtualMemIOMapping) );\n    }\n\n    if( TIFFIsByteSwapped(hTIFF) && m_pTempBufferForCommonDirectIO == nullptr )\n    {\n        const int nDTSize = nDTSizeBits / 8;\n        m_nTempBufferForCommonDirectIOSize =\n            static_cast<size_t>(nBlockXSize * nDTSize *\n                (nPlanarConfig == PLANARCONFIG_CONTIG ? nBands : 1));\n        if( TIFFIsTiled(hTIFF) )\n            m_nTempBufferForCommonDirectIOSize *= nBlockYSize;\n\n        m_pTempBufferForCommonDirectIO =\n            static_cast<GByte *>(\n                VSI_MALLOC_VERBOSE(m_nTempBufferForCommonDirectIOSize) );\n        if( m_pTempBufferForCommonDirectIO == nullptr )\n            return CE_Failure;\n    }\n    FetchBufferVirtualMemIO oFetcher( pabySrcData, nMappingSize,\n                                      m_pTempBufferForCommonDirectIO );\n\n    return CommonDirectIO( oFetcher,\n                           nXOff, nYOff, nXSize, nYSize,\n                           pData, nBufXSize, nBufYSize,\n                           eBufType,\n                           nBandCount, panBandMap,\n                           nPixelSpace, nLineSpace,\n                           nBandSpace );\n}\n\n/************************************************************************/\n/*                   CopyContigByteMultiBand()                          */\n/************************************************************************/\n\nstatic inline void CopyContigByteMultiBand(\n    const GByte* CPL_RESTRICT pabySrc, int nSrcStride,\n    GByte* CPL_RESTRICT pabyDest, int nDestStride,\n    int nIters, int nBandCount )\n{\n    if( nBandCount == 3 )\n    {\n        if( nSrcStride == 3 && nDestStride == 4 )\n        {\n            while( nIters >= 8 )\n            {\n                pabyDest[4*0+0] = pabySrc[3*0+0];\n                pabyDest[4*0+1] = pabySrc[3*0+1];\n                pabyDest[4*0+2] = pabySrc[3*0+2];\n                pabyDest[4*1+0] = pabySrc[3*1+0];\n                pabyDest[4*1+1] = pabySrc[3*1+1];\n                pabyDest[4*1+2] = pabySrc[3*1+2];\n                pabyDest[4*2+0] = pabySrc[3*2+0];\n                pabyDest[4*2+1] = pabySrc[3*2+1];\n                pabyDest[4*2+2] = pabySrc[3*2+2];\n                pabyDest[4*3+0] = pabySrc[3*3+0];\n                pabyDest[4*3+1] = pabySrc[3*3+1];\n                pabyDest[4*3+2] = pabySrc[3*3+2];\n                pabyDest[4*4+0] = pabySrc[3*4+0];\n                pabyDest[4*4+1] = pabySrc[3*4+1];\n                pabyDest[4*4+2] = pabySrc[3*4+2];\n                pabyDest[4*5+0] = pabySrc[3*5+0];\n                pabyDest[4*5+1] = pabySrc[3*5+1];\n                pabyDest[4*5+2] = pabySrc[3*5+2];\n                pabyDest[4*6+0] = pabySrc[3*6+0];\n                pabyDest[4*6+1] = pabySrc[3*6+1];\n                pabyDest[4*6+2] = pabySrc[3*6+2];\n                pabyDest[4*7+0] = pabySrc[3*7+0];\n                pabyDest[4*7+1] = pabySrc[3*7+1];\n                pabyDest[4*7+2] = pabySrc[3*7+2];\n                pabySrc += 3 * 8;\n                pabyDest += 4 * 8;\n                nIters -= 8;\n            }\n            while( nIters-- > 0 )\n            {\n                pabyDest[0] = pabySrc[0];\n                pabyDest[1] = pabySrc[1];\n                pabyDest[2] = pabySrc[2];\n                pabySrc += 3;\n                pabyDest += 4;\n            }\n        }\n        else\n        {\n            while( nIters-- > 0 )\n            {\n                pabyDest[0] = pabySrc[0];\n                pabyDest[1] = pabySrc[1];\n                pabyDest[2] = pabySrc[2];\n                pabySrc += nSrcStride;\n                pabyDest += nDestStride;\n            }\n        }\n    }\n    else\n    {\n        while( nIters-- > 0 )\n        {\n            for( int iBand = 0; iBand < nBandCount; ++iBand )\n                pabyDest[iBand] = pabySrc[iBand];\n            pabySrc += nSrcStride;\n            pabyDest += nDestStride;\n        }\n    }\n}\n\n/************************************************************************/\n/*                         CommonDirectIO()                             */\n/************************************************************************/\n\n// #define DEBUG_REACHED_VIRTUAL_MEM_IO\n#ifdef DEBUG_REACHED_VIRTUAL_MEM_IO\nstatic int anReachedVirtualMemIO[52] = { 0 };\n#define REACHED(x) anReachedVirtualMemIO[x] = 1\n#else\n#define REACHED(x)\n#endif\n\ntemplate<class FetchBuffer> CPLErr GTiffDataset::CommonDirectIO(\n    FetchBuffer& oFetcher,\n    int nXOff, int nYOff, int nXSize, int nYSize,\n    void * pData, int nBufXSize, int nBufYSize,\n    GDALDataType eBufType,\n    int nBandCount, int *panBandMap,\n    GSpacing nPixelSpace, GSpacing nLineSpace,\n    GSpacing nBandSpace )\n{\n    const GDALDataType eDataType = GetRasterBand(1)->GetRasterDataType();\n    const int nDTSize = GDALGetDataTypeSizeBytes(eDataType);\n    const bool bIsComplex = CPL_TO_BOOL(GDALDataTypeIsComplex(eDataType));\n    const int nBufDTSize = GDALGetDataTypeSizeBytes(eBufType);\n\n    // Get strip offsets.\n    toff_t *panOffsets = nullptr;\n    if( !TIFFGetField( hTIFF, (TIFFIsTiled( hTIFF )) ?\n                       TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS,\n                       &panOffsets ) ||\n        panOffsets == nullptr )\n    {\n        return CE_Failure;\n    }\n\n    bool bUseContigImplementation =\n        nPlanarConfig == PLANARCONFIG_CONTIG &&\n        nBandCount > 1 &&\n        nBandSpace == nBufDTSize;\n    if( bUseContigImplementation )\n    {\n        for( int iBand = 0; iBand < nBandCount; ++iBand )\n        {\n            const int nBand = panBandMap[iBand];\n            if( nBand != iBand + 1 )\n            {\n                bUseContigImplementation = false;\n                break;\n            }\n        }\n    }\n\n    const int nBandsPerBlock =\n        nPlanarConfig == PLANARCONFIG_SEPARATE ? 1 : nBands;\n    const int nBandsPerBlockDTSize = nBandsPerBlock * nDTSize;\n    const int nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n    const bool bNoTypeChange = (eDataType == eBufType);\n    const bool bNoXResampling = (nXSize == nBufXSize );\n    const bool bNoXResamplingNoTypeChange = (bNoTypeChange && bNoXResampling);\n    const bool bByteOnly = (bNoTypeChange && nDTSize == 1 );\n    const bool bByteNoXResampling = ( bByteOnly && bNoXResamplingNoTypeChange );\n    const bool bIsByteSwapped = CPL_TO_BOOL(TIFFIsByteSwapped(hTIFF));\n    const double dfSrcXInc = nXSize / static_cast<double>( nBufXSize );\n    const double dfSrcYInc = nYSize / static_cast<double>( nBufYSize );\n\n    int bNoDataSetIn = FALSE;\n    double dfNoData = GetRasterBand(1)->GetNoDataValue( &bNoDataSetIn );\n    GByte abyNoData = 0;\n    if( !bNoDataSetIn )\n        dfNoData = 0;\n    else if( dfNoData >= 0 && dfNoData <= 255 )\n        abyNoData = static_cast<GByte>(dfNoData + 0.5);\n\n    if( FetchBuffer::bMinimizeIO &&\n             TIFFIsTiled( hTIFF ) && bNoXResampling && (nYSize == nBufYSize ) &&\n             nPlanarConfig == PLANARCONFIG_CONTIG && nBandCount > 1 )\n    {\n        GByte* pabyData = static_cast<GByte *>(pData);\n        for( int y = 0; y < nBufYSize; )\n        {\n            const int nSrcLine = nYOff + y;\n            const int nBlockYOff = nSrcLine / nBlockYSize;\n            const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n            const int nUsedBlockHeight =\n                std::min( nBufYSize - y,\n                          nBlockYSize - nYOffsetInBlock );\n\n            int nBlockXOff = nXOff / nBlockXSize;\n            int nXOffsetInBlock = nXOff % nBlockXSize;\n            int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n            int x = 0;\n            while( x < nBufXSize )\n            {\n                const toff_t nCurOffset = panOffsets[nBlockId];\n                const int nUsedBlockWidth =\n                    std::min( nBlockXSize - nXOffsetInBlock,\n                              nBufXSize - x );\n\n                if( nCurOffset == 0 )\n                {\n                    REACHED(30);\n                    for( int k = 0; k < nUsedBlockHeight; ++k )\n                    {\n                        GByte* pabyLocalData =\n                            pabyData + (y + k) * nLineSpace + x * nPixelSpace;\n                        for( int iBand = 0; iBand < nBandCount; ++iBand )\n                        {\n                            GByte* pabyLocalDataBand =\n                                pabyLocalData + iBand * nBandSpace;\n\n                            GDALCopyWords(\n                                &dfNoData, GDT_Float64, 0,\n                                pabyLocalDataBand, eBufType,\n                                static_cast<int>(nPixelSpace),\n                                nUsedBlockWidth );\n                        }\n                    }\n                }\n                else\n                {\n                    const int nByteOffsetInBlock =\n                        nYOffsetInBlock * nBlockXSize * nBandsPerBlockDTSize;\n                    const GByte* pabyLocalSrcDataK0 = oFetcher.FetchBytes(\n                            nCurOffset + nByteOffsetInBlock,\n                            nBlockXSize *\n                            nUsedBlockHeight * nBandsPerBlock,\n                            nDTSize, bIsByteSwapped, bIsComplex, nBlockId);\n                    if( pabyLocalSrcDataK0 == nullptr )\n                        return CE_Failure;\n\n                    for( int k = 0; k < nUsedBlockHeight; ++k )\n                    {\n                        GByte* pabyLocalData =\n                            pabyData + (y + k) * nLineSpace + x * nPixelSpace;\n                        const GByte* pabyLocalSrcData =\n                            pabyLocalSrcDataK0 +\n                            (k * nBlockXSize + nXOffsetInBlock) *\n                            nBandsPerBlockDTSize;\n\n                        if( bUseContigImplementation && nBands == nBandCount &&\n                            nPixelSpace == nBandsPerBlockDTSize )\n                        {\n                            REACHED(31);\n                            GDALCopyWords( pabyLocalSrcData,\n                                           eDataType, nDTSize,\n                                           pabyLocalData,\n                                           eBufType, nBufDTSize,\n                                           nUsedBlockWidth * nBands );\n                        }\n                        else\n                        {\n                            REACHED(32);\n                            for( int iBand = 0; iBand < nBandCount; ++iBand )\n                            {\n                                GByte* pabyLocalDataBand =\n                                    pabyLocalData + iBand * nBandSpace;\n                                const GByte* pabyLocalSrcDataBand =\n                                    pabyLocalSrcData +\n                                    (panBandMap[iBand]-1) * nDTSize;\n\n                                GDALCopyWords(\n                                    pabyLocalSrcDataBand,\n                                    eDataType, nBandsPerBlockDTSize,\n                                    pabyLocalDataBand,\n                                    eBufType, static_cast<int>(nPixelSpace),\n                                    nUsedBlockWidth );\n                            }\n                        }\n                    }\n                }\n\n                nXOffsetInBlock = 0;\n                ++nBlockXOff;\n                ++nBlockId;\n                x += nUsedBlockWidth;\n            }\n\n            y += nUsedBlockHeight;\n        }\n    }\n    else if( FetchBuffer::bMinimizeIO &&\n             TIFFIsTiled( hTIFF ) && bNoXResampling &&\n             (nYSize == nBufYSize ) )\n             // && (nPlanarConfig == PLANARCONFIG_SEPARATE || nBandCount == 1) )\n    {\n        for( int iBand = 0; iBand < nBandCount; ++iBand )\n        {\n            GByte* pabyData = static_cast<GByte *>(pData) + iBand * nBandSpace;\n            const int nBand = panBandMap[iBand];\n            for( int y = 0; y < nBufYSize; )\n            {\n                const int nSrcLine = nYOff + y;\n                const int nBlockYOff = nSrcLine / nBlockYSize;\n                const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n                const int nUsedBlockHeight =\n                    std::min( nBufYSize - y,\n                              nBlockYSize - nYOffsetInBlock);\n\n                int nBlockXOff = nXOff / nBlockXSize;\n                int nXOffsetInBlock = nXOff % nBlockXSize;\n                int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n                if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n                {\n                    REACHED(33);\n                    nBlockId += nBlocksPerBand * (nBand - 1);\n                }\n                else\n                {\n                    REACHED(34);\n                }\n\n                int x = 0;\n                while( x < nBufXSize )\n                {\n                    const toff_t nCurOffset = panOffsets[nBlockId];\n                    const int nUsedBlockWidth =\n                        std::min(\n                            nBlockXSize - nXOffsetInBlock,\n                            nBufXSize - x);\n\n                    if( nCurOffset == 0 )\n                    {\n                        REACHED(35);\n                        for( int k = 0; k < nUsedBlockHeight; ++k )\n                        {\n                            GByte* pabyLocalData =\n                                pabyData + (y + k) * nLineSpace + x * nPixelSpace;\n\n                            GDALCopyWords(\n                                &dfNoData, GDT_Float64, 0,\n                                pabyLocalData, eBufType,\n                                static_cast<int>(nPixelSpace),\n                                nUsedBlockWidth );\n                        }\n                    }\n                    else\n                    {\n                        const int nByteOffsetInBlock =\n                            nYOffsetInBlock * nBlockXSize *\n                            nBandsPerBlockDTSize;\n                        const GByte* pabyLocalSrcDataK0 =\n                            oFetcher.FetchBytes(\n                                nCurOffset + nByteOffsetInBlock,\n                                nBlockXSize *\n                                nUsedBlockHeight * nBandsPerBlock,\n                                nDTSize, bIsByteSwapped, bIsComplex, nBlockId);\n                        if( pabyLocalSrcDataK0 == nullptr )\n                            return CE_Failure;\n\n                        if( nPlanarConfig == PLANARCONFIG_CONTIG )\n                        {\n                            REACHED(36);\n                            pabyLocalSrcDataK0 += (nBand - 1) * nDTSize;\n                        }\n                        else\n                        {\n                            REACHED(37);\n                        }\n\n                        for( int k = 0; k < nUsedBlockHeight; ++k )\n                        {\n                            GByte* pabyLocalData =\n                                pabyData + (y + k) * nLineSpace +\n                                x * nPixelSpace;\n                            const GByte* pabyLocalSrcData =\n                                pabyLocalSrcDataK0 +\n                                (k * nBlockXSize + nXOffsetInBlock) *\n                                nBandsPerBlockDTSize;\n\n                            GDALCopyWords(\n                                pabyLocalSrcData,\n                                eDataType, nBandsPerBlockDTSize,\n                                pabyLocalData,\n                                eBufType, static_cast<int>(nPixelSpace),\n                                nUsedBlockWidth);\n                        }\n                    }\n\n                    nXOffsetInBlock = 0;\n                    ++nBlockXOff;\n                    ++nBlockId;\n                    x += nUsedBlockWidth;\n                }\n\n                y += nUsedBlockHeight;\n            }\n        }\n    }\n    else if( FetchBuffer::bMinimizeIO &&\n             TIFFIsTiled( hTIFF ) &&\n             nPlanarConfig == PLANARCONFIG_CONTIG && nBandCount > 1 )\n    {\n        GByte* pabyData = static_cast<GByte *>(pData);\n        int anSrcYOffset[256] = { 0 };\n        for( int y = 0; y < nBufYSize; )\n        {\n            const double dfYOffStart = nYOff + (y + 0.5) * dfSrcYInc;\n            const int nSrcLine = static_cast<int>(dfYOffStart);\n            const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n            const int nBlockYOff = nSrcLine / nBlockYSize;\n            const int nBaseByteOffsetInBlock =\n                nYOffsetInBlock * nBlockXSize * nBandsPerBlockDTSize;\n            int ychunk = 1;\n            int nLastSrcLineK = nSrcLine;\n            anSrcYOffset[0] = 0;\n            for( int k = 1; k < nBufYSize - y; ++k )\n            {\n                int nSrcLineK =\n                    nYOff + static_cast<int>((y + k + 0.5) * dfSrcYInc);\n                const int nBlockYOffK = nSrcLineK / nBlockYSize;\n                if( k < 256)\n                    anSrcYOffset[k] =\n                        ((nSrcLineK % nBlockYSize) - nYOffsetInBlock) *\n                        nBlockXSize * nBandsPerBlockDTSize;\n                if( nBlockYOffK != nBlockYOff )\n                {\n                    break;\n                }\n                ++ychunk;\n                nLastSrcLineK = nSrcLineK;\n            }\n            const int nUsedBlockHeight = nLastSrcLineK - nSrcLine + 1;\n            // CPLAssert(nUsedBlockHeight <= nBlockYSize);\n\n            double dfSrcX = nXOff + 0.5 * dfSrcXInc;\n            int nCurBlockXOff = 0;\n            int nNextBlockXOff = 0;\n            toff_t nCurOffset = 0;\n            const GByte* pabyLocalSrcDataStartLine = nullptr;\n            for( int x = 0; x < nBufXSize; ++x, dfSrcX += dfSrcXInc)\n            {\n                const int nSrcPixel = static_cast<int>(dfSrcX);\n                if( nSrcPixel >= nNextBlockXOff )\n                {\n                    const int nBlockXOff = nSrcPixel / nBlockXSize;\n                    nCurBlockXOff = nBlockXOff * nBlockXSize;\n                    nNextBlockXOff = nCurBlockXOff + nBlockXSize;\n                    const int nBlockId =\n                        nBlockXOff + nBlockYOff * nBlocksPerRow;\n                    nCurOffset = panOffsets[nBlockId];\n                    if( nCurOffset != 0 )\n                    {\n                        pabyLocalSrcDataStartLine =\n                            oFetcher.FetchBytes(\n                                nCurOffset + nBaseByteOffsetInBlock,\n                                nBlockXSize *\n                                nBandsPerBlock * nUsedBlockHeight,\n                                nDTSize,\n                                bIsByteSwapped, bIsComplex, nBlockId);\n                        if( pabyLocalSrcDataStartLine == nullptr )\n                            return CE_Failure;\n                    }\n                }\n\n                if( nCurOffset == 0 )\n                {\n                    REACHED(38);\n\n                    for( int k = 0; k < ychunk; ++k )\n                    {\n                        GByte* const pabyLocalData =\n                            pabyData + (y + k) * nLineSpace + x * nPixelSpace;\n                        for( int iBand = 0; iBand < nBandCount; ++iBand )\n                        {\n                            GDALCopyWords(\n                                &dfNoData, GDT_Float64, 0,\n                                pabyLocalData + nBandSpace * iBand, eBufType, 0,\n                                1);\n                        }\n                    }\n                }\n                else\n                {\n                    const int nXOffsetInBlock = nSrcPixel - nCurBlockXOff;\n                    double dfYOff = dfYOffStart;\n                    const GByte* const pabyLocalSrcDataK0 =\n                        pabyLocalSrcDataStartLine +\n                        nXOffsetInBlock * nBandsPerBlockDTSize;\n                    GByte* pabyLocalData =\n                        pabyData + y * nLineSpace + x * nPixelSpace;\n                    for( int k = 0;\n                         k < ychunk;\n                         ++k, pabyLocalData += nLineSpace )\n                    {\n                        const GByte* pabyLocalSrcData = nullptr;\n                        if( ychunk <= 256 )\n                        {\n                            REACHED(39);\n                            pabyLocalSrcData =\n                                pabyLocalSrcDataK0 + anSrcYOffset[k];\n                        }\n                        else\n                        {\n                            REACHED(40);\n                            const int nYOffsetInBlockK =\n                                static_cast<int>(dfYOff) % nBlockYSize;\n                            // CPLAssert(\n                            //     nYOffsetInBlockK - nYOffsetInBlock <=\n                            //     nUsedBlockHeight);\n                            pabyLocalSrcData =\n                                pabyLocalSrcDataK0 +\n                                (nYOffsetInBlockK - nYOffsetInBlock) *\n                                nBlockXSize * nBandsPerBlockDTSize;\n                            dfYOff += dfSrcYInc;\n                        }\n\n                        if( bByteOnly )\n                        {\n                            REACHED(41);\n                            for( int iBand=0; iBand < nBandCount; ++iBand )\n                            {\n                                GByte* pabyLocalDataBand =\n                                    pabyLocalData + iBand * nBandSpace;\n                                const GByte* pabyLocalSrcDataBand =\n                                    pabyLocalSrcData + (panBandMap[iBand]-1);\n                                *pabyLocalDataBand = *pabyLocalSrcDataBand;\n                            }\n                        }\n                        else\n                        {\n                            REACHED(42);\n                            for( int iBand = 0; iBand < nBandCount; ++iBand )\n                            {\n                                GByte* pabyLocalDataBand =\n                                    pabyLocalData + iBand * nBandSpace;\n                                const GByte* pabyLocalSrcDataBand =\n                                    pabyLocalSrcData +\n                                    (panBandMap[iBand]-1) * nDTSize;\n\n                                GDALCopyWords( pabyLocalSrcDataBand,\n                                               eDataType, 0,\n                                               pabyLocalDataBand,\n                                               eBufType, 0,\n                                               1 );\n                            }\n                        }\n                    }\n                }\n            }\n\n            y += ychunk;\n        }\n    }\n    else if( FetchBuffer::bMinimizeIO &&\n             TIFFIsTiled( hTIFF ) )\n             // && (nPlanarConfig == PLANARCONFIG_SEPARATE || nBandCount == 1) )\n    {\n        for( int iBand = 0; iBand < nBandCount; ++iBand )\n        {\n            GByte* pabyData = static_cast<GByte*>(pData) + iBand * nBandSpace;\n            const int nBand = panBandMap[iBand];\n            int anSrcYOffset[256] = { 0 };\n            for( int y = 0; y < nBufYSize; )\n            {\n                const double dfYOffStart = nYOff + (y + 0.5) * dfSrcYInc;\n                const int nSrcLine = static_cast<int>(dfYOffStart);\n                const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n                const int nBlockYOff = nSrcLine / nBlockYSize;\n                const int nBaseByteOffsetInBlock =\n                    nYOffsetInBlock * nBlockXSize * nBandsPerBlockDTSize;\n                int ychunk = 1;\n                int nLastSrcLineK = nSrcLine;\n                anSrcYOffset[0] = 0;\n                for( int k = 1; k < nBufYSize - y; ++k )\n                {\n                    const int nSrcLineK =\n                        nYOff + static_cast<int>((y + k + 0.5) * dfSrcYInc);\n                    const int nBlockYOffK = nSrcLineK / nBlockYSize;\n                    if( k < 256)\n                        anSrcYOffset[k] =\n                            ((nSrcLineK % nBlockYSize) - nYOffsetInBlock) *\n                            nBlockXSize * nBandsPerBlockDTSize;\n                    if( nBlockYOffK != nBlockYOff )\n                    {\n                        break;\n                    }\n                    ++ychunk;\n                    nLastSrcLineK = nSrcLineK;\n                }\n                const int nUsedBlockHeight = nLastSrcLineK - nSrcLine + 1;\n                // CPLAssert(nUsedBlockHeight <= nBlockYSize);\n\n                double dfSrcX = nXOff + 0.5 * dfSrcXInc;\n                int nCurBlockXOff = 0;\n                int nNextBlockXOff = 0;\n                toff_t nCurOffset = 0;\n                const GByte* pabyLocalSrcDataStartLine = nullptr;\n                for( int x = 0; x < nBufXSize; ++x, dfSrcX += dfSrcXInc )\n                {\n                    int nSrcPixel = static_cast<int>(dfSrcX);\n                    if( nSrcPixel >= nNextBlockXOff )\n                    {\n                        const int nBlockXOff = nSrcPixel / nBlockXSize;\n                        nCurBlockXOff = nBlockXOff * nBlockXSize;\n                        nNextBlockXOff = nCurBlockXOff + nBlockXSize;\n                        int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n                        if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n                        {\n                            REACHED(43);\n                            nBlockId += nBlocksPerBand * (nBand - 1);\n                        }\n                        else\n                        {\n                            REACHED(44);\n                        }\n                        nCurOffset = panOffsets[nBlockId];\n                        if( nCurOffset != 0 )\n                        {\n                            pabyLocalSrcDataStartLine =\n                                oFetcher.FetchBytes(\n                                    nCurOffset + nBaseByteOffsetInBlock,\n                                    nBlockXSize *\n                                    nBandsPerBlock * nUsedBlockHeight,\n                                    nDTSize,\n                                    bIsByteSwapped, bIsComplex, nBlockId);\n                            if( pabyLocalSrcDataStartLine == nullptr )\n                                return CE_Failure;\n\n                            if( nPlanarConfig == PLANARCONFIG_CONTIG )\n                            {\n                                REACHED(45);\n                                pabyLocalSrcDataStartLine +=\n                                    (nBand - 1) * nDTSize;\n                            }\n                            else\n                            {\n                                REACHED(46);\n                            }\n                        }\n                    }\n\n                    if( nCurOffset == 0 )\n                    {\n                        REACHED(47);\n\n                        for( int k = 0; k < ychunk; ++k )\n                        {\n                            GByte* const pabyLocalData =\n                                pabyData + (y + k) * nLineSpace + x * nPixelSpace;\n\n                            GDALCopyWords( &dfNoData, GDT_Float64, 0,\n                                           pabyLocalData, eBufType, 0,\n                                           1 );\n                        }\n                    }\n                    else\n                    {\n                        const int nXOffsetInBlock = nSrcPixel - nCurBlockXOff;\n                        double dfYOff = dfYOffStart;\n                        const GByte* const pabyLocalSrcDataK0 =\n                            pabyLocalSrcDataStartLine +\n                            nXOffsetInBlock * nBandsPerBlockDTSize;\n                        GByte* pabyLocalData =\n                            pabyData + y * nLineSpace + x * nPixelSpace;\n                        for( int k = 0;\n                             k < ychunk;\n                             ++k, pabyLocalData += nLineSpace )\n                        {\n                            const GByte* pabyLocalSrcData = nullptr;\n                            if( ychunk <= 256 )\n                            {\n                                REACHED(48);\n                                pabyLocalSrcData =\n                                    pabyLocalSrcDataK0 + anSrcYOffset[k];\n                            }\n                            else\n                            {\n                                REACHED(49);\n                                const int nYOffsetInBlockK =\n                                    static_cast<int>(dfYOff) % nBlockYSize;\n                                // CPLAssert(\n                                //     nYOffsetInBlockK - nYOffsetInBlock <=\n                                //     nUsedBlockHeight);\n                                pabyLocalSrcData = pabyLocalSrcDataK0 +\n                                    (nYOffsetInBlockK - nYOffsetInBlock) *\n                                    nBlockXSize * nBandsPerBlockDTSize;\n                                dfYOff += dfSrcYInc;\n                            }\n\n                            if( bByteOnly )\n                            {\n                                REACHED(50);\n\n                                *pabyLocalData = *pabyLocalSrcData;\n                            }\n                            else\n                            {\n                                REACHED(51);\n\n                                GDALCopyWords( pabyLocalSrcData,\n                                               eDataType, 0,\n                                               pabyLocalData,\n                                               eBufType, 0,\n                                               1 );\n                            }\n                        }\n                    }\n                }\n\n                y += ychunk;\n            }\n        }\n    }\n    else if( bUseContigImplementation )\n    {\n        if( !FetchBuffer::bMinimizeIO && TIFFIsTiled( hTIFF ) )\n        {\n            GByte* pabyData = static_cast<GByte *>(pData);\n            for( int y = 0; y < nBufYSize; ++y )\n            {\n                const int nSrcLine =\n                    nYOff + static_cast<int>((y + 0.5) * dfSrcYInc);\n                const int nBlockYOff = nSrcLine / nBlockYSize;\n                const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n                const int nBaseByteOffsetInBlock =\n                    nYOffsetInBlock * nBlockXSize * nBandsPerBlockDTSize;\n\n                if( bNoXResampling )\n                {\n                    GByte* pabyLocalData = pabyData + y * nLineSpace;\n                    int nBlockXOff = nXOff / nBlockXSize;\n                    int nXOffsetInBlock = nXOff % nBlockXSize;\n                    int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n                    int x = 0;\n                    while( x < nBufXSize )\n                    {\n                        const int nByteOffsetInBlock = nBaseByteOffsetInBlock +\n                                        nXOffsetInBlock * nBandsPerBlockDTSize;\n                        const toff_t nCurOffset = panOffsets[nBlockId];\n                        const int nUsedBlockWidth =\n                            std::min(\n                                nBlockXSize - nXOffsetInBlock,\n                                nBufXSize - x);\n\n                        int nIters = nUsedBlockWidth;\n                        if( nCurOffset == 0 )\n                        {\n                            if( bByteNoXResampling )\n                            {\n                                REACHED(0);\n                                while( nIters-- > 0 )\n                                {\n                                    for( int iBand = 0;\n                                         iBand < nBandCount;\n                                         ++iBand )\n                                    {\n                                        pabyLocalData[iBand] = abyNoData;\n                                    }\n                                    pabyLocalData += nPixelSpace;\n                                }\n                            }\n                            else\n                            {\n                                REACHED(1);\n                                while( nIters-- > 0 )\n                                {\n                                    GDALCopyWords(\n                                        &dfNoData, GDT_Float64, 0,\n                                        pabyLocalData, eBufType,\n                                        static_cast<int>(nBandSpace),\n                                        nBandCount);\n                                    pabyLocalData += nPixelSpace;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if( bNoTypeChange && nBands == nBandCount &&\n                                nPixelSpace == nBandsPerBlockDTSize )\n                            {\n                                REACHED(2);\n                                if( !oFetcher.FetchBytes(\n                                        pabyLocalData,\n                                        nCurOffset + nByteOffsetInBlock,\n                                        nIters * nBandsPerBlock, nDTSize,\n                                        bIsByteSwapped, bIsComplex, nBlockId) )\n                                {\n                                    return CE_Failure;\n                                }\n                                pabyLocalData +=\n                                    nIters * nBandsPerBlock * nDTSize;\n                            }\n                            else\n                            {\n                                const GByte* pabyLocalSrcData =\n                                    oFetcher.FetchBytes(\n                                        nCurOffset + nByteOffsetInBlock,\n                                        nIters * nBandsPerBlock, nDTSize,\n                                        bIsByteSwapped, bIsComplex, nBlockId);\n                                if( pabyLocalSrcData == nullptr )\n                                    return CE_Failure;\n                                if( bByteNoXResampling )\n                                {\n                                    REACHED(3);\n                                    CopyContigByteMultiBand(\n                                        pabyLocalSrcData,\n                                        nBandsPerBlockDTSize,\n                                        pabyLocalData,\n                                        static_cast<int>(nPixelSpace),\n                                        nIters,\n                                        nBandCount);\n                                    pabyLocalData += nIters * nPixelSpace;\n                                }\n                                else\n                                {\n                                    REACHED(4);\n                                    while( nIters-- > 0 )\n                                    {\n                                        GDALCopyWords(\n                                            pabyLocalSrcData,\n                                            eDataType, nDTSize,\n                                            pabyLocalData,\n                                            eBufType,\n                                            static_cast<int>(nBandSpace),\n                                            nBandCount);\n                                        pabyLocalSrcData +=\n                                            nBandsPerBlockDTSize;\n                                        pabyLocalData += nPixelSpace;\n                                    }\n                                }\n                            }\n                        }\n\n                        nXOffsetInBlock = 0;\n                        ++nBlockXOff;\n                        ++nBlockId;\n                        x += nUsedBlockWidth;\n                    }\n                }\n                else  // Contig, tiled, potential resampling & data type change.\n                {\n                    const GByte* pabyLocalSrcDataStartLine = nullptr;\n                    GByte* pabyLocalData = pabyData + y * nLineSpace;\n                    double dfSrcX = nXOff + 0.5 * dfSrcXInc;\n                    int nCurBlockXOff = 0;\n                    int nNextBlockXOff = 0;\n                    toff_t nCurOffset = 0;\n                    for( int x = 0; x < nBufXSize; ++x, dfSrcX += dfSrcXInc )\n                    {\n                        int nSrcPixel = static_cast<int>(dfSrcX);\n                        if( nSrcPixel >= nNextBlockXOff )\n                        {\n                            const int nBlockXOff = nSrcPixel / nBlockXSize;\n                            nCurBlockXOff = nBlockXOff * nBlockXSize;\n                            nNextBlockXOff = nCurBlockXOff + nBlockXSize;\n                            const int nBlockId =\n                                nBlockXOff + nBlockYOff * nBlocksPerRow;\n                            nCurOffset = panOffsets[nBlockId];\n                            if( nCurOffset != 0 )\n                            {\n                                pabyLocalSrcDataStartLine =\n                                    oFetcher.FetchBytes(\n                                        nCurOffset + nBaseByteOffsetInBlock,\n                                        nBlockXSize *\n                                        nBandsPerBlock,\n                                        nDTSize,\n                                        bIsByteSwapped, bIsComplex, nBlockId);\n                                if( pabyLocalSrcDataStartLine == nullptr )\n                                    return CE_Failure;\n                            }\n                        }\n                        const int nXOffsetInBlock = nSrcPixel - nCurBlockXOff;\n\n                        if( nCurOffset == 0 )\n                        {\n                            REACHED(5);\n                            GDALCopyWords(\n                                &dfNoData, GDT_Float64, 0,\n                                pabyLocalData,\n                                eBufType,\n                                static_cast<int>(nBandSpace),\n                                nBandCount );\n                            pabyLocalData += nPixelSpace;\n                        }\n                        else\n                        {\n                            const GByte* pabyLocalSrcData =\n                                pabyLocalSrcDataStartLine +\n                                nXOffsetInBlock * nBandsPerBlockDTSize;\n\n                            REACHED(6);\n                            if( bByteOnly )\n                            {\n                                for( int iBand = 0; iBand < nBands; ++iBand )\n                                    pabyLocalData[iBand] =\n                                        pabyLocalSrcData[iBand];\n                            }\n                            else\n                            {\n                                GDALCopyWords(\n                                    pabyLocalSrcData,\n                                    eDataType, nDTSize,\n                                    pabyLocalData,\n                                    eBufType,\n                                    static_cast<int>(nBandSpace),\n                                    nBandCount );\n                            }\n                            pabyLocalData += nPixelSpace;\n                        }\n                    }\n                }\n            }\n        }\n        else  // Contig, stripped organized.\n        {\n            GByte* pabyData = static_cast<GByte*>(pData);\n            for( int y = 0; y < nBufYSize; ++y )\n            {\n                const int nSrcLine =\n                    nYOff + static_cast<int>((y + 0.5) * dfSrcYInc);\n                const int nBlockYOff = nSrcLine / nBlockYSize;\n                const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n                const int nBlockId = nBlockYOff;\n                const toff_t nCurOffset = panOffsets[nBlockId];\n                if( nCurOffset == 0 )\n                {\n                    REACHED(7);\n                    for( int x = 0; x < nBufXSize; ++x )\n                    {\n                        GDALCopyWords(\n                            &dfNoData, GDT_Float64, 0,\n                            pabyData + y * nLineSpace + x * nPixelSpace,\n                            eBufType, static_cast<int>(nBandSpace),\n                            nBandCount);\n                    }\n                }\n                else\n                {\n                    GByte* pabyLocalData = pabyData + y * nLineSpace;\n                    const int nBaseByteOffsetInBlock =\n                        (nYOffsetInBlock * nBlockXSize + nXOff) *\n                        nBandsPerBlockDTSize;\n\n                    if( bNoXResamplingNoTypeChange && nBands == nBandCount &&\n                        nPixelSpace == nBandsPerBlockDTSize )\n                    {\n                        REACHED(8);\n                        if( !oFetcher.FetchBytes(\n                               pabyLocalData,\n                               nCurOffset + nBaseByteOffsetInBlock,\n                               nXSize * nBandsPerBlock, nDTSize, bIsByteSwapped,\n                               bIsComplex, nBlockId) )\n                        {\n                            return CE_Failure;\n                        }\n                    }\n                    else\n                    {\n                        const GByte* pabyLocalSrcData = oFetcher.FetchBytes(\n                            nCurOffset + nBaseByteOffsetInBlock,\n                            nXSize * nBandsPerBlock, nDTSize, bIsByteSwapped,\n                            bIsComplex, nBlockId);\n                        if( pabyLocalSrcData == nullptr )\n                            return CE_Failure;\n\n                        if( bByteNoXResampling )\n                        {\n                            REACHED(9);\n                            CopyContigByteMultiBand(\n                                pabyLocalSrcData,\n                                nBandsPerBlockDTSize,\n                                pabyLocalData,\n                                static_cast<int>(nPixelSpace),\n                                nBufXSize,\n                                nBandCount);\n                        }\n                        else if( bByteOnly )\n                        {\n                            REACHED(10);\n                            double dfSrcX = 0.5 * dfSrcXInc;\n                            for( int x = 0;\n                                 x < nBufXSize;\n                                 ++x, dfSrcX += dfSrcXInc )\n                            {\n                                const int nSrcPixelMinusXOff =\n                                    static_cast<int>(dfSrcX);\n                                for( int iBand = 0;\n                                     iBand < nBandCount;\n                                     ++iBand )\n                                {\n                                    pabyLocalData[x * nPixelSpace + iBand] =\n                                        pabyLocalSrcData[nSrcPixelMinusXOff *\n                                                         nBandsPerBlockDTSize +\n                                                         iBand];\n                                }\n                            }\n                        }\n                        else\n                        {\n                            REACHED(11);\n                            double dfSrcX = 0.5 * dfSrcXInc;\n                            for( int x = 0;\n                                 x < nBufXSize;\n                                 ++x, dfSrcX += dfSrcXInc )\n                            {\n                                int nSrcPixelMinusXOff =\n                                    static_cast<int>(dfSrcX);\n                                GDALCopyWords(\n                                    pabyLocalSrcData +\n                                    nSrcPixelMinusXOff * nBandsPerBlockDTSize,\n                                    eDataType, nDTSize,\n                                    pabyLocalData + x * nPixelSpace,\n                                    eBufType,\n                                    static_cast<int>(nBandSpace),\n                                    nBandCount );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else  // Non-contig reading case.\n    {\n        if( !FetchBuffer::bMinimizeIO && TIFFIsTiled( hTIFF ) )\n        {\n            for( int iBand = 0; iBand < nBandCount; ++iBand )\n            {\n                const int nBand = panBandMap[iBand];\n                GByte* const pabyData =\n                    static_cast<GByte*>(pData) + iBand * nBandSpace;\n                for( int y = 0; y < nBufYSize; ++y )\n                {\n                    const int nSrcLine =\n                        nYOff + static_cast<int>((y + 0.5) * dfSrcYInc);\n                    const int nBlockYOff = nSrcLine / nBlockYSize;\n                    const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n\n                    int nBaseByteOffsetInBlock =\n                        nYOffsetInBlock * nBlockXSize * nBandsPerBlockDTSize;\n                    if( nPlanarConfig == PLANARCONFIG_CONTIG )\n                    {\n                        REACHED(12);\n                        nBaseByteOffsetInBlock += (nBand - 1) * nDTSize;\n                    }\n                    else\n                    {\n                        REACHED(13);\n                    }\n\n                    if( bNoXResampling )\n                    {\n                        GByte* pabyLocalData = pabyData + y * nLineSpace;\n                        int nBlockXOff = nXOff / nBlockXSize;\n                        int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n                        if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n                        {\n                            REACHED(14);\n                            nBlockId += nBlocksPerBand * (nBand - 1);\n                        }\n                        else\n                        {\n                            REACHED(15);\n                        }\n                        int nXOffsetInBlock = nXOff % nBlockXSize;\n\n                        int x = 0;\n                        while( x < nBufXSize )\n                        {\n                            const int nByteOffsetInBlock =\n                                nBaseByteOffsetInBlock +\n                                nXOffsetInBlock * nBandsPerBlockDTSize;\n                            const toff_t nCurOffset = panOffsets[nBlockId];\n                            const int nUsedBlockWidth =\n                                std::min(\n                                    nBlockXSize - nXOffsetInBlock,\n                                    nBufXSize - x );\n                            int nIters = nUsedBlockWidth;\n\n                            if( nCurOffset == 0 )\n                            {\n                                REACHED(16);\n                                GDALCopyWords(\n                                    &dfNoData, GDT_Float64, 0,\n                                    pabyLocalData, eBufType,\n                                    static_cast<int>(nPixelSpace),\n                                    nIters);\n                                pabyLocalData += nIters * nPixelSpace;\n                            }\n                            else\n                            {\n                                if( bNoTypeChange &&\n                                    nPixelSpace == nBandsPerBlockDTSize )\n                                {\n                                    REACHED(17);\n                                    if( !oFetcher.FetchBytes(\n                                           pabyLocalData,\n                                           nCurOffset + nByteOffsetInBlock,\n                                           (nIters - 1) * nBandsPerBlock + 1,\n                                           nDTSize,\n                                           bIsByteSwapped, bIsComplex,\n                                           nBlockId) )\n                                    {\n                                        return CE_Failure;\n                                    }\n                                    pabyLocalData += nIters * nPixelSpace;\n                                }\n                                else\n                                {\n                                    const GByte* pabyLocalSrcData =\n                                        oFetcher.FetchBytes(\n                                            nCurOffset + nByteOffsetInBlock,\n                                            (nIters - 1) * nBandsPerBlock + 1,\n                                            nDTSize,\n                                            bIsByteSwapped,\n                                            bIsComplex,\n                                            nBlockId );\n                                    if( pabyLocalSrcData == nullptr )\n                                        return CE_Failure;\n\n                                    REACHED(18);\n                                    GDALCopyWords(\n                                        pabyLocalSrcData, eDataType,\n                                        nBandsPerBlockDTSize,\n                                        pabyLocalData, eBufType,\n                                        static_cast<int>(nPixelSpace),\n                                        nIters );\n                                    pabyLocalData += nIters * nPixelSpace;\n                                }\n                            }\n\n                            nXOffsetInBlock = 0;\n                            ++nBlockXOff;\n                            ++nBlockId;\n                            x += nUsedBlockWidth;\n                        }\n                    }\n                    else\n                    {\n                        // Non-contig reading, tiled, potential resampling and\n                        // data type change.\n\n                        const GByte* pabyLocalSrcDataStartLine = nullptr;\n                        GByte* pabyLocalData = pabyData + y * nLineSpace;\n                        double dfSrcX = nXOff + 0.5 * dfSrcXInc;\n                        int nCurBlockXOff = 0;\n                        int nNextBlockXOff = 0;\n                        toff_t nCurOffset = 0;\n                        for( int x = 0; x < nBufXSize; ++x, dfSrcX += dfSrcXInc)\n                        {\n                            const int nSrcPixel = static_cast<int>(dfSrcX);\n                            if( nSrcPixel >= nNextBlockXOff )\n                            {\n                                const int nBlockXOff = nSrcPixel / nBlockXSize;\n                                nCurBlockXOff = nBlockXOff * nBlockXSize;\n                                nNextBlockXOff = nCurBlockXOff + nBlockXSize;\n                                int nBlockId =\n                                    nBlockXOff + nBlockYOff * nBlocksPerRow;\n                                if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n                                {\n                                    REACHED(19);\n                                    nBlockId += nBlocksPerBand * (nBand - 1);\n                                }\n                                else\n                                {\n                                    REACHED(20);\n                                }\n                                nCurOffset = panOffsets[nBlockId];\n                                if( nCurOffset != 0 )\n                                {\n                                    pabyLocalSrcDataStartLine =\n                                        oFetcher.FetchBytes(\n                                            nCurOffset + nBaseByteOffsetInBlock,\n                                            nBlockXSize * nBandsPerBlock,\n                                            nDTSize,\n                                            bIsByteSwapped,\n                                            bIsComplex,\n                                            nBlockId);\n                                    if( pabyLocalSrcDataStartLine == nullptr )\n                                        return CE_Failure;\n                                }\n                            }\n                            const int nXOffsetInBlock =\n                                nSrcPixel - nCurBlockXOff;\n\n                            if( nCurOffset == 0 )\n                            {\n                                REACHED(21);\n                                GDALCopyWords( &dfNoData, GDT_Float64, 0,\n                                               pabyLocalData,\n                                               eBufType, 0,\n                                               1 );\n                                pabyLocalData += nPixelSpace;\n                            }\n                            else\n                            {\n                                const GByte* pabyLocalSrcData =\n                                    pabyLocalSrcDataStartLine +\n                                    nXOffsetInBlock * nBandsPerBlockDTSize;\n\n                                REACHED(22);\n                                if( bByteOnly )\n                                {\n                                    *pabyLocalData = *pabyLocalSrcData;\n                                }\n                                else\n                                {\n                                    GDALCopyWords(pabyLocalSrcData,\n                                                eDataType, 0,\n                                                pabyLocalData,\n                                                eBufType, 0,\n                                                1);\n                                }\n                                pabyLocalData += nPixelSpace;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else  // Non-contig reading, stripped.\n        {\n            for( int iBand = 0; iBand < nBandCount; ++iBand )\n            {\n                const int nBand = panBandMap[iBand];\n                GByte* pabyData =\n                    static_cast<GByte *>(pData) + iBand * nBandSpace;\n                for( int y = 0; y < nBufYSize; ++y )\n                {\n                    const int nSrcLine =\n                        nYOff + static_cast<int>((y + 0.5) * dfSrcYInc);\n                    const int nBlockYOff = nSrcLine / nBlockYSize;\n                    const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n                    int nBlockId = nBlockYOff;\n                    if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n                    {\n                        REACHED(23);\n                        nBlockId += nBlocksPerBand * (nBand - 1);\n                    }\n                    else\n                    {\n                        REACHED(24);\n                    }\n                    const toff_t nCurOffset = panOffsets[nBlockId];\n                    if( nCurOffset == 0 )\n                    {\n                        REACHED(25);\n                        GDALCopyWords(\n                            &dfNoData, GDT_Float64, 0,\n                            pabyData + y * nLineSpace,\n                            eBufType,\n                            static_cast<int>(nPixelSpace),\n                            nBufXSize);\n                    }\n                    else\n                    {\n                        int nBaseByteOffsetInBlock =\n                            (nYOffsetInBlock * nBlockXSize + nXOff) *\n                            nBandsPerBlockDTSize;\n                        if( nPlanarConfig == PLANARCONFIG_CONTIG )\n                            nBaseByteOffsetInBlock += (nBand - 1) * nDTSize;\n\n                        GByte* pabyLocalData = pabyData + y * nLineSpace;\n                        if( bNoXResamplingNoTypeChange &&\n                            nPixelSpace == nBandsPerBlockDTSize )\n                        {\n                            REACHED(26);\n                            if( !oFetcher.FetchBytes(\n                                pabyLocalData,\n                                nCurOffset + nBaseByteOffsetInBlock,\n                                (nXSize - 1) * nBandsPerBlock + 1, nDTSize,\n                                bIsByteSwapped, bIsComplex, nBlockId) )\n                            {\n                                return CE_Failure;\n                            }\n                        }\n                        else\n                        {\n                            const GByte* pabyLocalSrcData = oFetcher.FetchBytes(\n                                nCurOffset + nBaseByteOffsetInBlock,\n                                (nXSize - 1) * nBandsPerBlock + 1, nDTSize,\n                                bIsByteSwapped, bIsComplex, nBlockId);\n                            if( pabyLocalSrcData == nullptr )\n                                return CE_Failure;\n\n                            if( bNoXResamplingNoTypeChange )\n                            {\n                                REACHED(27);\n                                GDALCopyWords(pabyLocalSrcData,\n                                              eDataType, nBandsPerBlockDTSize,\n                                              pabyLocalData, eBufType,\n                                              static_cast<int>(nPixelSpace),\n                                              nBufXSize);\n                            }\n                            else if( bByteOnly )\n                            {\n                                REACHED(28);\n                                double dfSrcX = 0.5 * dfSrcXInc;\n                                for( int x = 0;\n                                     x < nBufXSize;\n                                     ++x, dfSrcX += dfSrcXInc )\n                                {\n                                    const int nSrcPixelMinusXOff =\n                                        static_cast<int>(dfSrcX);\n                                    pabyLocalData[x * nPixelSpace] =\n                                        pabyLocalSrcData[nSrcPixelMinusXOff *\n                                                         nBandsPerBlockDTSize];\n                                }\n                            }\n                            else\n                            {\n                                REACHED(29);\n                                double dfSrcX = 0.5 * dfSrcXInc;\n                                for( int x = 0;\n                                     x < nBufXSize;\n                                     ++x, dfSrcX += dfSrcXInc )\n                                {\n                                    const int nSrcPixelMinusXOff =\n                                        static_cast<int>(dfSrcX);\n                                    GDALCopyWords(\n                                        pabyLocalSrcData +\n                                        nSrcPixelMinusXOff *\n                                        nBandsPerBlockDTSize,\n                                        eDataType, 0,\n                                        pabyLocalData + x * nPixelSpace,\n                                        eBufType, 0,\n                                        1 );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                           DirectIO()                                 */\n/************************************************************************/\n\n// Reads directly bytes from the file using ReadMultiRange(), and by-pass\n// block reading. Restricted to simple TIFF configurations\n// (uncompressed data, standard data types). Particularly useful to extract\n// sub-windows of data on a large /vsicurl dataset).\n// Returns -1 if DirectIO() can't be supported on that file.\n\nint GTiffDataset::DirectIO( GDALRWFlag eRWFlag,\n                            int nXOff, int nYOff, int nXSize, int nYSize,\n                            void * pData, int nBufXSize, int nBufYSize,\n                            GDALDataType eBufType,\n                            int nBandCount, int *panBandMap,\n                            GSpacing nPixelSpace, GSpacing nLineSpace,\n                            GSpacing nBandSpace,\n                            GDALRasterIOExtraArg* psExtraArg )\n{\n    const GDALDataType eDataType = GetRasterBand(1)->GetRasterDataType();\n    const int nDTSizeBits = GDALGetDataTypeSizeBits(eDataType);\n    if( !(eRWFlag == GF_Read &&\n          nCompression == COMPRESSION_NONE &&\n          (nPhotometric == PHOTOMETRIC_MINISBLACK ||\n           nPhotometric == PHOTOMETRIC_RGB ||\n           nPhotometric == PHOTOMETRIC_PALETTE) &&\n          nBitsPerSample == nDTSizeBits &&\n          SetDirectory() /* Very important to make hTIFF uptodate! */ ) )\n    {\n        return -1;\n    }\n\n    // Only know how to deal with nearest neighbour in this optimized routine.\n    if( (nXSize != nBufXSize || nYSize != nBufYSize) &&\n        psExtraArg != nullptr &&\n        psExtraArg->eResampleAlg != GRIORA_NearestNeighbour )\n    {\n        return -1;\n    }\n\n    // If the file is band interleave or only one band is requested, then\n    // fallback to band DirectIO.\n    bool bUseBandRasterIO = false;\n    if( nPlanarConfig == PLANARCONFIG_SEPARATE || nBandCount == 1 )\n    {\n        bUseBandRasterIO = true;\n    }\n    else\n    {\n        // For simplicity, only deals with \"naturally ordered\" bands.\n        for( int iBand = 0; iBand < nBandCount; ++iBand )\n        {\n            if( panBandMap[iBand] != iBand + 1)\n            {\n                bUseBandRasterIO = true;\n                break;\n            }\n        }\n    }\n    if( bUseBandRasterIO )\n    {\n        CPLErr eErr = CE_None;\n        for( int iBand = 0; eErr == CE_None && iBand < nBandCount; ++iBand )\n        {\n            eErr = GetRasterBand(panBandMap[iBand])->RasterIO(\n                eRWFlag, nXOff, nYOff, nXSize, nYSize,\n                static_cast<GByte *>(pData) + iBand * nBandSpace,\n                nBufXSize, nBufYSize,\n                eBufType,\n                nPixelSpace, nLineSpace,\n                psExtraArg );\n        }\n        return eErr;\n    }\n\n#if DEBUG_VERBOSE\n    CPLDebug( \"GTiff\", \"DirectIO(%d,%d,%d,%d -> %dx%d)\",\n              nXOff, nYOff, nXSize, nYSize,\n              nBufXSize, nBufYSize );\n#endif\n\n    // No need to look if overviews can satisfy the request as it has already */\n    // been done in GTiffDataset::IRasterIO().\n\n    // Make sure that TIFFTAG_STRIPOFFSETS is up-to-date.\n    if( GetAccess() == GA_Update )\n    {\n        FlushCache();\n        VSI_TIFFFlushBufferedWrite( TIFFClientdata( hTIFF ) );\n    }\n\n    if( TIFFIsTiled( hTIFF ) )\n    {\n        if( m_pTempBufferForCommonDirectIO == nullptr )\n        {\n            const int nDTSize = nDTSizeBits / 8;\n            m_nTempBufferForCommonDirectIOSize =\n                static_cast<size_t>(static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * nDTSize *\n                ((nPlanarConfig == PLANARCONFIG_CONTIG) ? nBands : 1));\n\n            m_pTempBufferForCommonDirectIO =\n                static_cast<GByte *>(\n                    VSI_MALLOC_VERBOSE(m_nTempBufferForCommonDirectIOSize) );\n            if( m_pTempBufferForCommonDirectIO == nullptr )\n                return CE_Failure;\n        }\n\n        VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n        FetchBufferDirectIO oFetcher(fp, m_pTempBufferForCommonDirectIO,\n                                     m_nTempBufferForCommonDirectIOSize);\n\n        return CommonDirectIO( oFetcher,\n                               nXOff, nYOff, nXSize, nYSize,\n                               pData, nBufXSize, nBufYSize,\n                               eBufType,\n                               nBandCount, panBandMap,\n                               nPixelSpace, nLineSpace,\n                              nBandSpace );\n    }\n\n    // Get strip offsets.\n    toff_t *panTIFFOffsets = nullptr;\n    if( !TIFFGetField( hTIFF, TIFFTAG_STRIPOFFSETS, &panTIFFOffsets ) ||\n        panTIFFOffsets == nullptr )\n    {\n        return CE_Failure;\n    }\n\n    // Sub-sampling or over-sampling can only be done at last stage.\n    int nReqXSize = nXSize;\n    // Can do sub-sampling at the extraction stage.\n    const int nReqYSize = std::min(nBufYSize, nYSize);\n    void** ppData =\n        static_cast<void **>( VSI_MALLOC_VERBOSE(nReqYSize * sizeof(void*)) );\n    vsi_l_offset* panOffsets =\n        static_cast<vsi_l_offset *>(\n            VSI_MALLOC_VERBOSE(nReqYSize * sizeof(vsi_l_offset)) );\n    size_t* panSizes =\n        static_cast<size_t *>( VSI_MALLOC_VERBOSE(nReqYSize * sizeof(size_t)) );\n    const int nDTSize = GDALGetDataTypeSizeBytes(eDataType);\n    void* pTmpBuffer = nullptr;\n    int eErr = CE_None;\n    int nContigBands = nBands;\n    const int nSrcPixelSize = nDTSize * nContigBands;\n\n    if( ppData == nullptr || panOffsets == nullptr || panSizes == nullptr )\n    {\n        eErr = CE_Failure;\n    }\n    // For now we always allocate a temp buffer as it is easier.\n    else\n        // if( nXSize != nBufXSize || nYSize != nBufYSize ||\n        //   eBufType != eDataType ||\n        //   nPixelSpace != GDALGetDataTypeSizeBytes(eBufType) ||\n        //   check if the user buffer is large enough )\n    {\n        // We need a temporary buffer for over-sampling/sub-sampling\n        // and/or data type conversion.\n        pTmpBuffer = VSI_MALLOC_VERBOSE(nReqXSize * nReqYSize * nSrcPixelSize);\n        if( pTmpBuffer == nullptr )\n            eErr = CE_Failure;\n    }\n\n    // Prepare data extraction.\n    const double dfSrcYInc = nYSize / static_cast<double>( nBufYSize );\n\n    for( int iLine = 0; eErr == CE_None && iLine < nReqYSize; ++iLine )\n    {\n        ppData[iLine] =\n            static_cast<GByte *>(pTmpBuffer) +\n            iLine * nReqXSize * nSrcPixelSize;\n        int nSrcLine = 0;\n        if( nBufYSize < nYSize )  // Sub-sampling in y.\n            nSrcLine = nYOff + static_cast<int>((iLine + 0.5) * dfSrcYInc);\n        else\n            nSrcLine = nYOff + iLine;\n\n        const int nBlockXOff = 0;\n        const int nBlockYOff = nSrcLine / nBlockYSize;\n        const int nYOffsetInBlock = nSrcLine % nBlockYSize;\n        const int nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n        const int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n        panOffsets[iLine] = panTIFFOffsets[nBlockId];\n        if( panOffsets[iLine] == 0)  // We don't support sparse files.\n            eErr = -1;\n\n        panOffsets[iLine] +=\n            (nXOff + nYOffsetInBlock * nBlockXSize) * nSrcPixelSize;\n        panSizes[iLine] = nReqXSize * nSrcPixelSize;\n    }\n\n    // Extract data from the file.\n    if( eErr == CE_None )\n    {\n        VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n        const int nRet =\n            VSIFReadMultiRangeL(nReqYSize, ppData, panOffsets, panSizes, fp);\n        if( nRet != 0 )\n            eErr = CE_Failure;\n    }\n\n    // Byte-swap if necessary.\n    if( eErr == CE_None && TIFFIsByteSwapped(hTIFF) )\n    {\n        for( int iLine = 0; iLine < nReqYSize; ++iLine )\n        {\n            if( GDALDataTypeIsComplex(eDataType) )\n                GDALSwapWords( ppData[iLine], nDTSize / 2,\n                               2 * nReqXSize * nContigBands, nDTSize / 2);\n            else\n                GDALSwapWords( ppData[iLine], nDTSize,\n                               nReqXSize * nContigBands, nDTSize);\n        }\n    }\n\n    // Over-sampling/sub-sampling and/or data type conversion.\n    const double dfSrcXInc = nXSize / static_cast<double>( nBufXSize );\n    if( eErr == CE_None && pTmpBuffer != nullptr )\n    {\n        for( int iY = 0; iY < nBufYSize; ++iY )\n        {\n            const int iSrcY =\n                nBufYSize <= nYSize ?\n                iY : static_cast<int>((iY + 0.5) * dfSrcYInc);\n            // Optimization: no resampling, no data type change, number of\n            // bands requested == number of bands and buffer is packed\n            // pixel-interleaved.\n            if( nBufXSize == nXSize && nContigBands == nBandCount &&\n                eDataType == eBufType &&\n                nBandSpace == nDTSize &&\n                nPixelSpace == nBandCount * nBandSpace )\n            {\n                memcpy(\n                    static_cast<GByte *>(pData) + iY * nLineSpace,\n                    ppData[iSrcY],\n                    static_cast<size_t>(nReqXSize * nPixelSpace) );\n            }\n            // Other optimization: no resampling, no data type change,\n            // data type is Byte.\n            else if( nBufXSize == nXSize &&\n                     eDataType == eBufType && eDataType == GDT_Byte )\n            {\n                GByte* pabySrcData = static_cast<GByte *>(ppData[iSrcY]);\n                GByte* pabyDstData =\n                    static_cast<GByte *>(pData) + iY * nLineSpace;\n                if( nBandSpace == 1 && nPixelSpace > nBandCount )\n                {\n                    // Buffer is pixel-interleaved (with some stridding\n                    // between pixels).\n                    CopyContigByteMultiBand( pabySrcData, nSrcPixelSize,\n                                             pabyDstData,\n                                             static_cast<int>(nPixelSpace),\n                                             nBufXSize, nBandCount );\n                }\n                else\n                {\n                    for( int iBand = 0; iBand < nBandCount; ++iBand )\n                    {\n                        GDALCopyWords(\n                            pabySrcData + iBand, GDT_Byte, nSrcPixelSize,\n                            pabyDstData + iBand * nBandSpace,\n                            GDT_Byte, static_cast<int>(nPixelSpace),\n                            nBufXSize );\n                    }\n                }\n            }\n            else  // General case.\n            {\n                for( int iBand = 0; iBand < nBandCount; ++iBand )\n                {\n                    GByte* pabySrcData =\n                        static_cast<GByte *>(ppData[iSrcY]) + iBand * nDTSize;\n                    GByte* pabyDstData =\n                        static_cast<GByte *>(pData) +\n                        iBand * nBandSpace + iY * nLineSpace;\n                    if( eDataType == GDT_Byte && eBufType == GDT_Byte )\n                    {\n                        double dfSrcX = 0.5 * dfSrcXInc;\n                        for( int iX = 0;\n                             iX < nBufXSize;\n                             ++iX, dfSrcX += dfSrcXInc)\n                        {\n                            int iSrcX = static_cast<int>(dfSrcX);\n                            pabyDstData[iX * nPixelSpace] =\n                                pabySrcData[iSrcX * nSrcPixelSize];\n                        }\n                    }\n                    else\n                    {\n                        double dfSrcX = 0.5 * dfSrcXInc;\n                        for( int iX = 0;\n                             iX < nBufXSize;\n                             ++iX, dfSrcX += dfSrcXInc)\n                        {\n                            int iSrcX = static_cast<int>(dfSrcX);\n                            GDALCopyWords( pabySrcData + iSrcX * nSrcPixelSize,\n                                        eDataType, 0,\n                                        pabyDstData + iX * nPixelSpace,\n                                        eBufType, 0, 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    CPLFree(pTmpBuffer);\n    CPLFree(ppData);\n    CPLFree(panOffsets);\n    CPLFree(panSizes);\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                         CacheMultiRange()                            */\n/************************************************************************/\n\nvoid* GTiffRasterBand::CacheMultiRange( int nXOff, int nYOff,\n                                        int nXSize, int nYSize,\n                                        int nBufXSize, int nBufYSize,\n                                        GDALRasterIOExtraArg* psExtraArg )\n{\n    void* pBufferedData = nullptr;\n    // Same logic as in GDALRasterBand::IRasterIO()\n    double dfXOff = nXOff;\n    double dfYOff = nYOff;\n    double dfXSize = nXSize;\n    double dfYSize = nYSize;\n    if( psExtraArg->bFloatingPointWindowValidity )\n    {\n        dfXOff = psExtraArg->dfXOff;\n        dfYOff = psExtraArg->dfYOff;\n        dfXSize = psExtraArg->dfXSize;\n        dfYSize = psExtraArg->dfYSize;\n    }\n    const double dfSrcXInc = dfXSize / static_cast<double>( nBufXSize );\n    const double dfSrcYInc = dfYSize / static_cast<double>( nBufYSize );\n    const double EPS = 1e-10;\n    const int nBlockX1 = static_cast<int>(std::max(0.0, (0+0.5) * dfSrcXInc + dfXOff + EPS)) / nBlockXSize;\n    const int nBlockY1 = static_cast<int>(std::max(0.0, (0+0.5) * dfSrcYInc + dfYOff + EPS)) / nBlockYSize;\n    const int nBlockX2 = static_cast<int>(std::min(static_cast<double>(nRasterXSize - 1), (nBufXSize-1+0.5) * dfSrcXInc + dfXOff + EPS)) / nBlockXSize;\n    const int nBlockY2 = static_cast<int>(std::min(static_cast<double>(nRasterYSize - 1), (nBufYSize-1+0.5) * dfSrcYInc + dfYOff + EPS)) / nBlockYSize;\n\n    thandle_t th = TIFFClientdata( poGDS->hTIFF );\n    if( poGDS->SetDirectory() && !VSI_TIFFHasCachedRanges(th) )\n    {\n        std::vector< std::pair<vsi_l_offset, size_t> > aOffsetSize;\n        size_t nTotalSize = 0;\n        nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n        const unsigned int nMaxRawBlockCacheSize =\n            atoi(CPLGetConfigOption(\"GDAL_MAX_RAW_BLOCK_CACHE_SIZE\",\n                                    \"10485760\"));\n        for( int iY = nBlockY1; iY <= nBlockY2; iY ++)\n        {\n            for( int iX = nBlockX1; iX <= nBlockX2; iX ++)\n            {\n                GDALRasterBlock* poBlock = TryGetLockedBlockRef(iX, iY);\n                if( poBlock != nullptr )\n                {\n                    poBlock->DropLock();\n                    continue;\n                }\n                int nBlockId = iX + iY * nBlocksPerRow;\n                if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n                    nBlockId += (nBand - 1) * poGDS->nBlocksPerBand;\n                vsi_l_offset nOffset = 0;\n                vsi_l_offset nSize = 0;\n                if( poGDS->IsBlockAvailable(nBlockId, &nOffset, &nSize) )\n                {\n                    if( nTotalSize + nSize < nMaxRawBlockCacheSize )\n                    {\n#ifdef DEBUG_VERBOSE\n                        CPLDebug(\"GTiff\",\n                                 \"Precaching for block (%d, %d), \"\n                                 CPL_FRMT_GUIB \"-\" CPL_FRMT_GUIB,\n                                 iX, iY,\n                                 nOffset,\n                                 nOffset + static_cast<size_t>(nSize) - 1);\n#endif\n                        aOffsetSize.push_back(\n                            std::pair<vsi_l_offset, size_t>\n                                (nOffset, static_cast<size_t>(nSize)) );\n                        nTotalSize += static_cast<size_t>(nSize);\n                    }\n                }\n            }\n        }\n\n        std::sort(aOffsetSize.begin(), aOffsetSize.end());\n\n        if( nTotalSize > 0 )\n        {\n            pBufferedData = VSI_MALLOC_VERBOSE(nTotalSize);\n            if( pBufferedData )\n            {\n                std::vector<vsi_l_offset> anOffsets;\n                std::vector<size_t> anSizes;\n                std::vector<void*> apData;\n                anOffsets.push_back(aOffsetSize[0].first);\n                apData.push_back(static_cast<GByte *>(pBufferedData));\n                size_t nChunkSize = aOffsetSize[0].second;\n                size_t nAccOffset = 0;\n                for( size_t i = 0; i < aOffsetSize.size()-1; i++ )\n                {\n                    if ( aOffsetSize[i].first + aOffsetSize[i].second == aOffsetSize[i+1].first ) \n                    {\n                        nChunkSize += aOffsetSize[i+1].second;\n                    } else \n                    {\n                        //terminate current block\n                        anSizes.push_back(nChunkSize);\n                        nAccOffset += nChunkSize;\n                        //start a new range\n                        anOffsets.push_back(aOffsetSize[i+1].first);\n                        apData.push_back(static_cast<GByte*>(pBufferedData) + nAccOffset);\n                        nChunkSize = aOffsetSize[i+1].second;\n                    }\n                }\n                //terminate last block \n                anSizes.push_back(nChunkSize);\n\n                VSILFILE* fp = VSI_TIFFGetVSILFile(th);\n\n\n                if( VSIFReadMultiRangeL(\n                                    static_cast<int>(anSizes.size()),\n                                    &apData[0],\n                                    &anOffsets[0],\n                                    &anSizes[0],\n                                    fp ) == 0 )\n                {\n                    VSI_TIFFSetCachedRanges( th,\n                                             static_cast<int>(anSizes.size()),\n                                             &apData[0],\n                                             &anOffsets[0],\n                                             &anSizes[0] );\n                }\n            }\n        }\n    }\n    return pBufferedData;\n}\n\n/************************************************************************/\n/*                            IRasterIO()                               */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::IRasterIO( GDALRWFlag eRWFlag,\n                                   int nXOff, int nYOff, int nXSize, int nYSize,\n                                   void * pData, int nBufXSize, int nBufYSize,\n                                   GDALDataType eBufType,\n                                   GSpacing nPixelSpace, GSpacing nLineSpace,\n                                   GDALRasterIOExtraArg* psExtraArg )\n{\n#if DEBUG_VERBOSE\n    CPLDebug( \"GTiff\", \"RasterIO(%d, %d, %d, %d, %d, %d)\",\n              nXOff, nYOff, nXSize, nYSize, nBufXSize, nBufYSize );\n#endif\n\n    // Try to pass the request to the most appropriate overview dataset.\n    if( nBufXSize < nXSize && nBufYSize < nYSize )\n    {\n        int bTried = FALSE;\n        ++poGDS->nJPEGOverviewVisibilityCounter;\n        const CPLErr eErr =\n            TryOverviewRasterIO( eRWFlag,\n                                 nXOff, nYOff, nXSize, nYSize,\n                                 pData, nBufXSize, nBufYSize,\n                                 eBufType,\n                                 nPixelSpace, nLineSpace,\n                                 psExtraArg,\n                                 &bTried );\n        --poGDS->nJPEGOverviewVisibilityCounter;\n        if( bTried )\n            return eErr;\n    }\n\n    if( poGDS->eVirtualMemIOUsage != VIRTUAL_MEM_IO_NO )\n    {\n        const int nErr = poGDS->VirtualMemIO(\n            eRWFlag, nXOff, nYOff, nXSize, nYSize,\n            pData, nBufXSize, nBufYSize, eBufType,\n            1, &nBand, nPixelSpace, nLineSpace, 0, psExtraArg);\n        if( nErr >= 0 )\n            return static_cast<CPLErr>(nErr);\n    }\n    if( poGDS->bDirectIO )\n    {\n        int nErr = DirectIO(eRWFlag, nXOff, nYOff, nXSize, nYSize,\n                            pData, nBufXSize, nBufYSize, eBufType,\n                            nPixelSpace, nLineSpace, psExtraArg);\n        if( nErr >= 0 )\n            return static_cast<CPLErr>(nErr);\n    }\n\n    void* pBufferedData = nullptr;\n    if( poGDS->eAccess == GA_ReadOnly &&\n        eRWFlag == GF_Read &&\n        poGDS->HasOptimizedReadMultiRange() )\n    {\n        pBufferedData = CacheMultiRange(nXOff, nYOff, nXSize, nYSize,\n                                        nBufXSize, nBufYSize,\n                                        psExtraArg);\n    }\n\n    if( poGDS->nBands != 1 &&\n        poGDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n        eRWFlag == GF_Read &&\n        nXSize == nBufXSize && nYSize == nBufYSize )\n    {\n        const int nBlockX1 = nXOff / nBlockXSize;\n        const int nBlockY1 = nYOff / nBlockYSize;\n        const int nBlockX2 = (nXOff + nXSize - 1) / nBlockXSize;\n        const int nBlockY2 = (nYOff + nYSize - 1) / nBlockYSize;\n        const int nXBlocks = nBlockX2 - nBlockX1 + 1;\n        const int nYBlocks = nBlockY2 - nBlockY1 + 1;\n        const GIntBig nRequiredMem =\n            static_cast<GIntBig>(poGDS->nBands) * nXBlocks * nYBlocks *\n            nBlockXSize * nBlockYSize *\n            GDALGetDataTypeSizeBytes(eDataType);\n        if( nRequiredMem > GDALGetCacheMax64() )\n        {\n            if( !poGDS->bHasWarnedDisableAggressiveBandCaching )\n            {\n                CPLDebug( \"GTiff\",\n                          \"Disable aggressive band caching. \"\n                          \"Cache not big enough. \"\n                          \"At least \" CPL_FRMT_GIB \" bytes necessary\",\n                          nRequiredMem );\n                poGDS->bHasWarnedDisableAggressiveBandCaching = true;\n            }\n            poGDS->bLoadingOtherBands = true;\n        }\n    }\n\n    ++poGDS->nJPEGOverviewVisibilityCounter;\n    const CPLErr eErr =\n        GDALPamRasterBand::IRasterIO( eRWFlag, nXOff, nYOff, nXSize, nYSize,\n                                      pData, nBufXSize, nBufYSize, eBufType,\n                                      nPixelSpace, nLineSpace, psExtraArg );\n    --poGDS->nJPEGOverviewVisibilityCounter;\n\n    poGDS->bLoadingOtherBands = false;\n\n    if( pBufferedData )\n    {\n        VSIFree( pBufferedData );\n        VSI_TIFFSetCachedRanges( TIFFClientdata( poGDS->hTIFF ),\n                                 0, nullptr, nullptr, nullptr );\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                       IGetDataCoverageStatus()                       */\n/************************************************************************/\n\nint GTiffRasterBand::IGetDataCoverageStatus( int nXOff, int nYOff,\n                                             int nXSize, int nYSize,\n                                             int nMaskFlagStop,\n                                             double* pdfDataPct)\n{\n    if( eAccess == GA_Update )\n        poGDS->FlushCache();\n\n    if( !poGDS->SetDirectory() )\n    {\n        return GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED |\n               GDAL_DATA_COVERAGE_STATUS_DATA;\n    }\n\n    const int iXBlockStart = nXOff / nBlockXSize;\n    const int iXBlockEnd = (nXOff + nXSize - 1) / nBlockXSize;\n    const int iYBlockStart = nYOff / nBlockYSize;\n    const int iYBlockEnd = (nYOff + nYSize - 1) / nBlockYSize;\n    int nStatus = 0;\n    VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( poGDS->hTIFF ));\n    GIntBig nPixelsData = 0;\n    // We need to compute this here as it might not have been computed\n    // previously (which sucks...)\n    nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n    for( int iY = iYBlockStart; iY <= iYBlockEnd; ++iY )\n    {\n        for( int iX = iXBlockStart; iX <= iXBlockEnd; ++iX )\n        {\n            const int nBlockIdBand0 =\n                iX + iY * nBlocksPerRow;\n            int nBlockId = nBlockIdBand0;\n            if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n                nBlockId = nBlockIdBand0 + (nBand - 1) * poGDS->nBlocksPerBand;\n            vsi_l_offset nOffset = 0;\n            vsi_l_offset nLength = 0;\n            bool bHasData = false;\n            if( !poGDS->IsBlockAvailable(nBlockId,&nOffset,&nLength) )\n            {\n                nStatus |= GDAL_DATA_COVERAGE_STATUS_EMPTY;\n            }\n            else\n            {\n                if( poGDS->nCompression == COMPRESSION_NONE &&\n                    poGDS->eAccess == GA_ReadOnly &&\n                    (!bNoDataSet || dfNoDataValue == 0.0) )\n                {\n                    VSIRangeStatus eStatus =\n                          VSIFGetRangeStatusL( fp, nOffset, nLength );\n                    if( eStatus == VSI_RANGE_STATUS_HOLE )\n                    {\n                        nStatus |= GDAL_DATA_COVERAGE_STATUS_EMPTY;\n                    }\n                    else\n                    {\n                        bHasData = true;\n                    }\n                }\n                else\n                {\n                    bHasData = true;\n                }\n            }\n            if( bHasData )\n            {\n                const int nXBlockRight =\n                    ( iX * nBlockXSize > INT_MAX - nBlockXSize ) ? INT_MAX :\n                    (iX + 1) * nBlockXSize;\n                const int nYBlockBottom =\n                    ( iY * nBlockYSize > INT_MAX - nBlockYSize ) ? INT_MAX :\n                    (iY + 1) * nBlockYSize;\n\n                nPixelsData +=\n                    (std::min( nXBlockRight, nXOff + nXSize ) -\n                     std::max( iX * nBlockXSize, nXOff )) *\n                    (std::min( nYBlockBottom, nYOff + nYSize ) -\n                     std::max( iY * nBlockYSize, nYOff ));\n                nStatus |= GDAL_DATA_COVERAGE_STATUS_DATA;\n            }\n            if( nMaskFlagStop != 0 && (nMaskFlagStop & nStatus) != 0 )\n            {\n                if( pdfDataPct )\n                    *pdfDataPct = -1.0;\n                return nStatus;\n            }\n        }\n    }\n    if( pdfDataPct )\n        *pdfDataPct =\n          100.0 * nPixelsData /\n          (static_cast<GIntBig>(nXSize) * nYSize);\n    return nStatus;\n}\n\n/************************************************************************/\n/*                             IReadBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,\n                                    void * pImage )\n\n{\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    GPtrDiff_t nBlockBufSize = 0;\n    if( TIFFIsTiled(poGDS->hTIFF) )\n    {\n        nBlockBufSize = static_cast<GPtrDiff_t>(TIFFTileSize( poGDS->hTIFF ));\n    }\n    else\n    {\n        CPLAssert( nBlockXOff == 0 );\n        nBlockBufSize = static_cast<GPtrDiff_t>(TIFFStripSize( poGDS->hTIFF ));\n    }\n\n    CPLAssert(nBlocksPerRow != 0);\n    const int nBlockIdBand0 =\n        nBlockXOff + nBlockYOff * nBlocksPerRow;\n    int nBlockId = nBlockIdBand0;\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        nBlockId = nBlockIdBand0 + (nBand - 1) * poGDS->nBlocksPerBand;\n\n/* -------------------------------------------------------------------- */\n/*      The bottom most partial tiles and strips are sometimes only     */\n/*      partially encoded.  This code reduces the requested data so     */\n/*      an error won't be reported in this case. (#1179)                */\n/* -------------------------------------------------------------------- */\n    auto nBlockReqSize = nBlockBufSize;\n\n    if( nBlockYOff * nBlockYSize > nRasterYSize - nBlockYSize )\n    {\n        nBlockReqSize = (nBlockBufSize / nBlockYSize)\n            * (nBlockYSize - static_cast<int>(\n                (static_cast<GIntBig>(nBlockYOff + 1) * nBlockYSize)\n                    % nRasterYSize));\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle the case of a strip or tile that doesn't exist yet.      */\n/*      Just set to zeros and return.                                   */\n/* -------------------------------------------------------------------- */\n    vsi_l_offset nOffset = 0;\n    bool bErrOccurred = false;\n    if( nBlockId != poGDS->nLoadedBlock &&\n        !poGDS->IsBlockAvailable(nBlockId, &nOffset, nullptr, &bErrOccurred) )\n    {\n        NullBlock( pImage );\n        if( bErrOccurred )\n            return CE_Failure;\n        return CE_None;\n    }\n\n    if( poGDS->bStreamingIn &&\n        !(poGDS->nBands > 1 &&\n          poGDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n          nBlockId == poGDS->nLoadedBlock) )\n    {\n        if( nOffset < VSIFTellL(poGDS->fpL) )\n        {\n            CPLError( CE_Failure, CPLE_NotSupported,\n                      \"Trying to load block %d at offset \" CPL_FRMT_GUIB\n                      \" whereas current pos is \" CPL_FRMT_GUIB\n                      \" (backward read not supported)\",\n                      nBlockId, static_cast<GUIntBig>(nOffset),\n                      static_cast<GUIntBig>(VSIFTellL(poGDS->fpL)) );\n            return CE_Failure;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle simple case (separate, onesampleperpixel)                */\n/* -------------------------------------------------------------------- */\n    if( poGDS->nBands == 1\n        || poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n    {\n        if( nBlockReqSize < nBlockBufSize )\n            memset( pImage, 0, nBlockBufSize );\n\n        CPLErr eErr = CE_None;\n        if( TIFFIsTiled( poGDS->hTIFF ) )\n        {\n            if( TIFFReadEncodedTile( poGDS->hTIFF, nBlockId, pImage,\n                                     nBlockReqSize ) == -1\n                && !poGDS->bIgnoreReadErrors )\n            {\n                memset( pImage, 0, nBlockBufSize );\n                CPLError( CE_Failure, CPLE_AppDefined,\n                          \"TIFFReadEncodedTile() failed.\" );\n\n                eErr = CE_Failure;\n            }\n        }\n        else\n        {\n            if( TIFFReadEncodedStrip( poGDS->hTIFF, nBlockId, pImage,\n                                      nBlockReqSize ) == -1\n                && !poGDS->bIgnoreReadErrors )\n            {\n                memset( pImage, 0, nBlockBufSize );\n                CPLError( CE_Failure, CPLE_AppDefined,\n                        \"TIFFReadEncodedStrip() failed.\" );\n\n                eErr = CE_Failure;\n            }\n        }\n\n        return eErr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Load desired block                                              */\n/* -------------------------------------------------------------------- */\n    {\n        const CPLErr eErr = poGDS->LoadBlockBuf( nBlockId );\n        if( eErr != CE_None )\n        {\n            memset( pImage, 0,\n                    static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize\n                    * GDALGetDataTypeSizeBytes(eDataType) );\n            return eErr;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Special case for YCbCr subsampled data.                         */\n/* -------------------------------------------------------------------- */\n\n    // Removed \"Special case for YCbCr\" added in r9432; disabled in r9470\n\n    const int nWordBytes = poGDS->nBitsPerSample / 8;\n    GByte* pabyImage = poGDS->pabyBlockBuf + (nBand - 1) * nWordBytes;\n\n    GDALCopyWords64(pabyImage, eDataType, poGDS->nBands * nWordBytes,\n                  pImage, eDataType, nWordBytes,\n                  static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize);\n\n    const CPLErr eErr = FillCacheForOtherBands(nBlockXOff, nBlockYOff);\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                       FillCacheForOtherBands()                       */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::FillCacheForOtherBands( int nBlockXOff, int nBlockYOff )\n\n{\n/* -------------------------------------------------------------------- */\n/*      In the fairly common case of pixel interleaved 8bit data        */\n/*      that is multi-band, lets push the rest of the data into the     */\n/*      block cache too, to avoid (hopefully) having to redecode it.    */\n/*                                                                      */\n/*      Our following logic actually depends on the fact that the       */\n/*      this block is already loaded, so subsequent calls will end      */\n/*      up back in this method and pull from the loaded block.          */\n/*                                                                      */\n/*      Be careful not entering this portion of code from               */\n/*      the other bands, otherwise we'll get very deep nested calls     */\n/*      and O(nBands^2) performance !                                   */\n/*                                                                      */\n/*      If there are many bands and the block cache size is not big     */\n/*      enough to accommodate the size of all the blocks, don't enter   */\n/* -------------------------------------------------------------------- */\n    CPLErr eErr = CE_None;\n    if( poGDS->nBands != 1 &&\n        poGDS->nBands < 128 && // avoid caching for datasets with too many bands\n        !poGDS->bLoadingOtherBands &&\n        static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize * GDALGetDataTypeSizeBytes(eDataType) <\n        GDALGetCacheMax64() / poGDS->nBands )\n    {\n        poGDS->bLoadingOtherBands = true;\n\n        for( int iOtherBand = 1; iOtherBand <= poGDS->nBands; ++iOtherBand )\n        {\n            if( iOtherBand == nBand )\n                continue;\n\n            GDALRasterBlock *poBlock = poGDS->GetRasterBand(iOtherBand)->\n                GetLockedBlockRef(nBlockXOff,nBlockYOff);\n            if( poBlock == nullptr )\n            {\n                eErr = CE_Failure;\n                break;\n            }\n            poBlock->DropLock();\n        }\n\n        poGDS->bLoadingOtherBands = false;\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                            IWriteBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::IWriteBlock( int nBlockXOff, int nBlockYOff,\n                                     void * pImage )\n\n{\n    if( poGDS->bDebugDontWriteBlocks )\n        return CE_None;\n\n    if( poGDS->bWriteErrorInFlushBlockBuf )\n    {\n        // Report as an error if a previously loaded block couldn't be written\n        // correctly.\n        poGDS->bWriteErrorInFlushBlockBuf = false;\n        return CE_Failure;\n    }\n\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    CPLAssert( poGDS != nullptr\n               && nBlockXOff >= 0\n               && nBlockYOff >= 0\n               && pImage != nullptr );\n    CPLAssert(nBlocksPerRow != 0);\n\n/* -------------------------------------------------------------------- */\n/*      Handle case of \"separate\" images                                */\n/* -------------------------------------------------------------------- */\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE\n        || poGDS->nBands == 1 )\n    {\n        const int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow\n            + (nBand - 1) * poGDS->nBlocksPerBand;\n\n        const CPLErr eErr =\n            poGDS->WriteEncodedTileOrStrip(nBlockId, pImage, true);\n\n        return eErr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle case of pixel interleaved (PLANARCONFIG_CONTIG) images.  */\n/* -------------------------------------------------------------------- */\n    const int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n     // Why 10 ? Somewhat arbitrary\n    constexpr int MAX_BANDS_FOR_DIRTY_CHECK = 10;\n    GDALRasterBlock* apoBlocks[MAX_BANDS_FOR_DIRTY_CHECK] = {};\n    const int nBands = poGDS->nBands;\n    bool bAllBlocksDirty = false;\n\n/* -------------------------------------------------------------------- */\n/*     If all blocks are cached and dirty then we do not need to reload */\n/*     the tile/strip from disk                                         */\n/* -------------------------------------------------------------------- */\n    if( nBands <= MAX_BANDS_FOR_DIRTY_CHECK )\n    {\n        bAllBlocksDirty = true;\n        for( int iBand = 0; iBand < nBands; ++iBand )\n        {\n            if( iBand + 1 != nBand )\n            {\n                apoBlocks[iBand] =\n                    cpl::down_cast<GTiffRasterBand *>(\n                        poGDS->GetRasterBand( iBand + 1 ))\n                            ->TryGetLockedBlockRef( nBlockXOff, nBlockYOff );\n\n                if( apoBlocks[iBand] == nullptr )\n                {\n                    bAllBlocksDirty = false;\n                }\n                else if( !apoBlocks[iBand]->GetDirty() )\n                {\n                    apoBlocks[iBand]->DropLock();\n                    apoBlocks[iBand] = nullptr;\n                    bAllBlocksDirty = false;\n                }\n            }\n            else\n                apoBlocks[iBand] = nullptr;\n        }\n#if DEBUG_VERBOSE\n        if( bAllBlocksDirty )\n            CPLDebug(\"GTIFF\", \"Saved reloading block %d\", nBlockId);\n        else\n            CPLDebug(\"GTIFF\", \"Must reload block %d\", nBlockId);\n#endif\n    }\n\n    {\n        const CPLErr eErr = poGDS->LoadBlockBuf( nBlockId, !bAllBlocksDirty );\n        if( eErr != CE_None )\n        {\n            if( nBands <= MAX_BANDS_FOR_DIRTY_CHECK )\n            {\n                for( int iBand = 0; iBand < nBands; ++iBand )\n                {\n                    if( apoBlocks[iBand] != nullptr )\n                        apoBlocks[iBand]->DropLock();\n                }\n            }\n            return eErr;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      On write of pixel interleaved data, we might as well flush      */\n/*      out any other bands that are dirty in our cache.  This is       */\n/*      especially helpful when writing compressed blocks.              */\n/* -------------------------------------------------------------------- */\n    const int nWordBytes = poGDS->nBitsPerSample / 8;\n\n    for( int iBand = 0; iBand < nBands; ++iBand )\n    {\n        const GByte *pabyThisImage = nullptr;\n        GDALRasterBlock *poBlock = nullptr;\n\n        if( iBand + 1 == nBand )\n        {\n            pabyThisImage = static_cast<GByte *>( pImage );\n        }\n        else\n        {\n            if( nBands <= MAX_BANDS_FOR_DIRTY_CHECK )\n                poBlock = apoBlocks[iBand];\n            else\n                poBlock = cpl::down_cast<GTiffRasterBand *>(\n                    poGDS->GetRasterBand( iBand + 1 ))\n                        ->TryGetLockedBlockRef( nBlockXOff, nBlockYOff );\n\n            if( poBlock == nullptr )\n                continue;\n\n            if( !poBlock->GetDirty() )\n            {\n                poBlock->DropLock();\n                continue;\n            }\n\n            pabyThisImage = static_cast<GByte *>( poBlock->GetDataRef() );\n        }\n\n        GByte *pabyOut = poGDS->pabyBlockBuf + iBand*nWordBytes;\n\n        GDALCopyWords64(pabyThisImage, eDataType, nWordBytes,\n                      pabyOut, eDataType, nWordBytes * nBands,\n                      static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize);\n\n        if( poBlock != nullptr )\n        {\n            poBlock->MarkClean();\n            poBlock->DropLock();\n        }\n    }\n\n    if( bAllBlocksDirty )\n    {\n        // We can synchronously write the block now.\n        const CPLErr eErr =\n            poGDS->WriteEncodedTileOrStrip(nBlockId, poGDS->pabyBlockBuf, true);\n        poGDS->bLoadedBlockDirty = false;\n        return eErr;\n    }\n\n    poGDS->bLoadedBlockDirty = true;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                           SetDescription()                           */\n/************************************************************************/\n\nvoid GTiffRasterBand::SetDescription( const char *pszDescription )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( pszDescription == nullptr )\n        pszDescription = \"\";\n\n    if( osDescription != pszDescription )\n        poGDS->bMetadataChanged = true;\n\n    osDescription = pszDescription;\n}\n\n/************************************************************************/\n/*                           GetDescription()                           */\n/************************************************************************/\n\nconst char *GTiffRasterBand::GetDescription() const\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    return osDescription;\n}\n\n/************************************************************************/\n/*                             GetOffset()                              */\n/************************************************************************/\n\ndouble GTiffRasterBand::GetOffset( int *pbSuccess )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( pbSuccess )\n        *pbSuccess = bHaveOffsetScale;\n    return dfOffset;\n}\n\n/************************************************************************/\n/*                             SetOffset()                              */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetOffset( double dfNewValue )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( !bHaveOffsetScale || dfNewValue != dfOffset )\n        poGDS->bMetadataChanged = true;\n\n    bHaveOffsetScale = true;\n    dfOffset = dfNewValue;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                              GetScale()                              */\n/************************************************************************/\n\ndouble GTiffRasterBand::GetScale( int *pbSuccess )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( pbSuccess )\n        *pbSuccess = bHaveOffsetScale;\n    return dfScale;\n}\n\n/************************************************************************/\n/*                              SetScale()                              */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetScale( double dfNewValue )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( !bHaveOffsetScale || dfNewValue != dfScale )\n        poGDS->bMetadataChanged = true;\n\n    bHaveOffsetScale = true;\n    dfScale = dfNewValue;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                            GetUnitType()                             */\n/************************************************************************/\n\nconst char* GTiffRasterBand::GetUnitType()\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n    if( osUnitType.empty() )\n    {\n        poGDS->LookForProjection();\n        return poGDS->m_osVertUnit.c_str();\n    }\n\n    return osUnitType.c_str();\n}\n\n/************************************************************************/\n/*                           SetUnitType()                              */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetUnitType( const char* pszNewValue )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    CPLString osNewValue(pszNewValue ? pszNewValue : \"\");\n    if( osNewValue.compare(osUnitType) != 0 )\n        poGDS->bMetadataChanged = true;\n\n    osUnitType = osNewValue;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                      GetMetadataDomainList()                         */\n/************************************************************************/\n\nchar **GTiffRasterBand::GetMetadataDomainList()\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    return CSLDuplicate(oGTiffMDMD.GetDomainList());\n}\n\n/************************************************************************/\n/*                            GetMetadata()                             */\n/************************************************************************/\n\nchar **GTiffRasterBand::GetMetadata( const char * pszDomain )\n\n{\n    if( pszDomain == nullptr || !EQUAL(pszDomain, \"IMAGE_STRUCTURE\") )\n    {\n        poGDS->LoadGeoreferencingAndPamIfNeeded();\n    }\n\n    return oGTiffMDMD.GetMetadata( pszDomain );\n}\n\n/************************************************************************/\n/*                            SetMetadata()                             */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetMetadata( char ** papszMD, const char *pszDomain )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( poGDS->bStreamingOut && poGDS->bCrystalized )\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"Cannot modify metadata at that point in a streamed \"\n                  \"output file\" );\n        return CE_Failure;\n    }\n\n    if( pszDomain == nullptr || !EQUAL(pszDomain,\"_temporary_\") )\n    {\n        if( papszMD != nullptr || GetMetadata(pszDomain) != nullptr )\n        {\n            poGDS->bMetadataChanged = true;\n            // Cancel any existing metadata from PAM file.\n            if( eAccess == GA_Update &&\n                GDALPamRasterBand::GetMetadata(pszDomain) != nullptr )\n                GDALPamRasterBand::SetMetadata(nullptr, pszDomain);\n        }\n    }\n\n    return oGTiffMDMD.SetMetadata( papszMD, pszDomain );\n}\n\n/************************************************************************/\n/*                          GetMetadataItem()                           */\n/************************************************************************/\n\nconst char *GTiffRasterBand::GetMetadataItem( const char * pszName,\n                                              const char * pszDomain )\n\n{\n    if( pszDomain == nullptr || !EQUAL(pszDomain, \"IMAGE_STRUCTURE\") )\n    {\n        poGDS->LoadGeoreferencingAndPamIfNeeded();\n    }\n\n    if( pszName != nullptr && pszDomain != nullptr && EQUAL(pszDomain, \"TIFF\") )\n    {\n        int nBlockXOff = 0;\n        int nBlockYOff = 0;\n\n        if( EQUAL(pszName, \"JPEGTABLES\") )\n        {\n            if( !poGDS->SetDirectory() )\n                return nullptr;\n\n            uint32 nJPEGTableSize = 0;\n            void* pJPEGTable = nullptr;\n            if( TIFFGetField( poGDS->hTIFF, TIFFTAG_JPEGTABLES,\n                              &nJPEGTableSize, &pJPEGTable ) != 1 ||\n                pJPEGTable == nullptr || nJPEGTableSize > INT_MAX )\n            {\n                return nullptr;\n            }\n            char* const pszHex =\n                CPLBinaryToHex( nJPEGTableSize, static_cast<const GByte*>(pJPEGTable) );\n            const char* pszReturn = CPLSPrintf(\"%s\", pszHex);\n            CPLFree(pszHex);\n\n            return pszReturn;\n        }\n\n        if( EQUAL(pszName, \"IFD_OFFSET\") )\n        {\n            if( !poGDS->SetDirectory() )\n                return nullptr;\n\n            return CPLSPrintf( CPL_FRMT_GUIB,\n                               static_cast<GUIntBig>(poGDS->nDirOffset) );\n        }\n\n        if( sscanf( pszName, \"BLOCK_OFFSET_%d_%d\",\n                         &nBlockXOff, &nBlockYOff ) == 2 )\n        {\n            if( !poGDS->SetDirectory() )\n                return nullptr;\n\n            nBlocksPerRow =\n                DIV_ROUND_UP(poGDS->nRasterXSize, poGDS->nBlockXSize);\n            nBlocksPerColumn =\n                DIV_ROUND_UP(poGDS->nRasterYSize, poGDS->nBlockYSize);\n            if( nBlockXOff < 0 || nBlockXOff >= nBlocksPerRow ||\n                nBlockYOff < 0 || nBlockYOff >= nBlocksPerColumn )\n                return nullptr;\n\n            int nBlockId = nBlockYOff * nBlocksPerRow + nBlockXOff;\n            if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n            {\n                nBlockId += (nBand - 1) * poGDS->nBlocksPerBand;\n            }\n\n            vsi_l_offset nOffset = 0;\n            if( !poGDS->IsBlockAvailable(nBlockId, &nOffset) )\n            {\n                return nullptr;\n            }\n\n            return CPLSPrintf( CPL_FRMT_GUIB, static_cast<GUIntBig>(nOffset) );\n        }\n\n        if( sscanf( pszName, \"BLOCK_SIZE_%d_%d\",\n                    &nBlockXOff, &nBlockYOff ) == 2 )\n        {\n            if( !poGDS->SetDirectory() )\n                return nullptr;\n\n            nBlocksPerRow =\n                DIV_ROUND_UP(poGDS->nRasterXSize, poGDS->nBlockXSize);\n            nBlocksPerColumn =\n                DIV_ROUND_UP(poGDS->nRasterYSize, poGDS->nBlockYSize);\n            if( nBlockXOff < 0 || nBlockXOff >= nBlocksPerRow ||\n                nBlockYOff < 0 || nBlockYOff >= nBlocksPerColumn )\n                return nullptr;\n\n            int nBlockId = nBlockYOff * nBlocksPerRow + nBlockXOff;\n            if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n            {\n                nBlockId += (nBand - 1) * poGDS->nBlocksPerBand;\n            }\n\n            vsi_l_offset nByteCount = 0;\n            if( !poGDS->IsBlockAvailable(nBlockId, nullptr, &nByteCount) )\n            {\n                return nullptr;\n            }\n\n            return CPLSPrintf(CPL_FRMT_GUIB, static_cast<GUIntBig>(nByteCount));\n        }\n    }\n    return oGTiffMDMD.GetMetadataItem( pszName, pszDomain );\n}\n\n/************************************************************************/\n/*                          SetMetadataItem()                           */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetMetadataItem( const char *pszName,\n                                         const char *pszValue,\n                                         const char *pszDomain )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( poGDS->bStreamingOut && poGDS->bCrystalized )\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"Cannot modify metadata at that point in a streamed \"\n                  \"output file\" );\n        return CE_Failure;\n    }\n\n    if( pszDomain == nullptr || !EQUAL(pszDomain,\"_temporary_\") )\n    {\n        poGDS->bMetadataChanged = true;\n        // Cancel any existing metadata from PAM file.\n        if( eAccess == GA_Update &&\n            GDALPamRasterBand::GetMetadataItem(pszName, pszDomain) != nullptr )\n            GDALPamRasterBand::SetMetadataItem(pszName, nullptr, pszDomain);\n    }\n\n    return oGTiffMDMD.SetMetadataItem( pszName, pszValue, pszDomain );\n}\n\n/************************************************************************/\n/*                       GetColorInterpretation()                       */\n/************************************************************************/\n\nGDALColorInterp GTiffRasterBand::GetColorInterpretation()\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    return eBandInterp;\n}\n\n/************************************************************************/\n/*                         GTiffGetAlphaValue()                         */\n/************************************************************************/\n\nuint16 GTiffGetAlphaValue(const char* pszValue, uint16 nDefault)\n{\n    if( pszValue == nullptr )\n        return nDefault;\n    if( EQUAL(pszValue, \"YES\") )\n        return DEFAULT_ALPHA_TYPE;\n    if( EQUAL(pszValue, \"PREMULTIPLIED\") )\n        return EXTRASAMPLE_ASSOCALPHA;\n    if( EQUAL(pszValue, \"NON-PREMULTIPLIED\") )\n        return EXTRASAMPLE_UNASSALPHA;\n    if( EQUAL(pszValue, \"NO\") ||\n        EQUAL(pszValue, \"UNSPECIFIED\") )\n        return EXTRASAMPLE_UNSPECIFIED;\n\n    return nDefault;\n}\n\n/************************************************************************/\n/*                       SetColorInterpretation()                       */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetColorInterpretation( GDALColorInterp eInterp )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( eInterp == eBandInterp )\n        return CE_None;\n\n    eBandInterp = eInterp;\n\n    if( eAccess != GA_Update )\n    {\n        CPLDebug( \"GTIFF\", \"ColorInterpretation %s for band %d goes to PAM \"\n                  \"instead of TIFF tag\",\n                  GDALGetColorInterpretationName(eInterp), nBand );\n        return GDALPamRasterBand::SetColorInterpretation( eInterp );\n    }\n\n    if( poGDS->bCrystalized )\n    {\n        if( !poGDS->SetDirectory() )\n            return CE_Failure;\n    }\n\n    poGDS->bNeedsRewrite = true;\n    poGDS->bMetadataChanged = true;\n\n    // Try to autoset TIFFTAG_PHOTOMETRIC = PHOTOMETRIC_RGB if possible.\n    if( poGDS->nBands >= 3 &&\n        poGDS->nCompression != COMPRESSION_JPEG &&\n        poGDS->nPhotometric != PHOTOMETRIC_RGB &&\n        CSLFetchNameValue( poGDS->papszCreationOptions,\n                           \"PHOTOMETRIC\" ) == nullptr &&\n        ((nBand == 1 && eInterp == GCI_RedBand) ||\n         (nBand == 2 && eInterp == GCI_GreenBand) ||\n         (nBand == 3 && eInterp == GCI_BlueBand)) )\n    {\n        if( poGDS->GetRasterBand(1)->GetColorInterpretation() == GCI_RedBand &&\n            poGDS->GetRasterBand(2)->GetColorInterpretation() == GCI_GreenBand &&\n            poGDS->GetRasterBand(3)->GetColorInterpretation() == GCI_BlueBand )\n        {\n            poGDS->nPhotometric = PHOTOMETRIC_RGB;\n            TIFFSetField( poGDS->hTIFF, TIFFTAG_PHOTOMETRIC,\n                          poGDS->nPhotometric );\n\n            // We need to update the number of extra samples.\n            uint16 *v = nullptr;\n            uint16 count = 0;\n            const uint16 nNewExtraSamplesCount =\n                static_cast<uint16>(poGDS->nBands - 3);\n            if( poGDS->nBands >= 4 &&\n                TIFFGetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES,\n                              &count, &v ) &&\n                count > nNewExtraSamplesCount )\n            {\n                uint16 * const pasNewExtraSamples =\n                    static_cast<uint16 *>( CPLMalloc(\n                        nNewExtraSamplesCount * sizeof(uint16) ) );\n                memcpy( pasNewExtraSamples, v + count - nNewExtraSamplesCount,\n                        nNewExtraSamplesCount * sizeof(uint16) );\n\n                TIFFSetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES,\n                              nNewExtraSamplesCount, pasNewExtraSamples );\n\n                CPLFree(pasNewExtraSamples);\n            }\n        }\n        return CE_None;\n    }\n\n    // On the contrary, cancel the above if needed\n    if( poGDS->nCompression != COMPRESSION_JPEG &&\n        poGDS->nPhotometric == PHOTOMETRIC_RGB &&\n        CSLFetchNameValue( poGDS->papszCreationOptions,\n                           \"PHOTOMETRIC\") == nullptr &&\n        ((nBand == 1 && eInterp != GCI_RedBand) ||\n         (nBand == 2 && eInterp != GCI_GreenBand) ||\n         (nBand == 3 && eInterp != GCI_BlueBand)) )\n    {\n        poGDS->nPhotometric = PHOTOMETRIC_MINISBLACK;\n        TIFFSetField(poGDS->hTIFF, TIFFTAG_PHOTOMETRIC, poGDS->nPhotometric);\n\n        // We need to update the number of extra samples.\n        uint16 *v = nullptr;\n        uint16 count = 0;\n        const uint16 nNewExtraSamplesCount =\n            static_cast<uint16>(poGDS->nBands - 1);\n        if( poGDS->nBands >= 2 )\n        {\n            TIFFGetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES, &count, &v );\n            if( nNewExtraSamplesCount > count )\n            {\n                uint16 * const pasNewExtraSamples =\n                    static_cast<uint16 *>( CPLMalloc(\n                        nNewExtraSamplesCount * sizeof(uint16) ) );\n                for( int i = 0;\n                     i < static_cast<int>(nNewExtraSamplesCount - count);\n                     ++i )\n                    pasNewExtraSamples[i] = EXTRASAMPLE_UNSPECIFIED;\n                if( count > 0 )\n                {\n                    memcpy( pasNewExtraSamples + nNewExtraSamplesCount - count,\n                            v,\n                            count * sizeof(uint16) );\n                }\n\n                TIFFSetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES,\n                              nNewExtraSamplesCount, pasNewExtraSamples );\n\n                CPLFree(pasNewExtraSamples);\n            }\n        }\n    }\n\n    // Mark alpha band / undefined in extrasamples.\n    if( eInterp == GCI_AlphaBand || eInterp == GCI_Undefined )\n    {\n        uint16 *v = nullptr;\n        uint16 count = 0;\n        if( TIFFGetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES, &count, &v ) )\n        {\n            const int nBaseSamples = poGDS->nSamplesPerPixel - count;\n\n            if( eInterp == GCI_AlphaBand )\n            {\n                for( int i = 1; i <= poGDS->nBands; ++i )\n                {\n                    if( i != nBand &&\n                        poGDS->GetRasterBand(i)->GetColorInterpretation() ==\n                        GCI_AlphaBand )\n                    {\n                        if( i == nBaseSamples + 1 &&\n                            CSLFetchNameValue( poGDS->papszCreationOptions,\n                                            \"ALPHA\" ) != nullptr )\n                        {\n                            CPLError(\n                                CE_Warning, CPLE_AppDefined,\n                                \"Band %d was already identified as alpha band, \"\n                                \"and band %d is now marked as alpha too. \"\n                                \"Presumably ALPHA creation option is not needed\",\n                                i, nBand );\n                        }\n                        else\n                        {\n                            CPLError(\n                                CE_Warning, CPLE_AppDefined,\n                                \"Band %d was already identified as alpha band, \"\n                                \"and band %d is now marked as alpha too\",\n                                i, nBand );\n                        }\n                    }\n                }\n            }\n\n            if( nBand > nBaseSamples && nBand - nBaseSamples - 1 < count )\n            {\n                // We need to allocate a new array as (current) libtiff\n                // versions will not like that we reuse the array we got from\n                // TIFFGetField().\n\n                uint16* pasNewExtraSamples =\n                    static_cast<uint16 *>(\n                        CPLMalloc( count * sizeof(uint16) ) );\n                memcpy( pasNewExtraSamples, v, count * sizeof(uint16) );\n                if( eInterp == GCI_AlphaBand )\n                {\n                    pasNewExtraSamples[nBand - nBaseSamples - 1] =\n                        GTiffGetAlphaValue(CPLGetConfigOption(\"GTIFF_ALPHA\", nullptr),\n                                            DEFAULT_ALPHA_TYPE);\n                }\n                else\n                {\n                    pasNewExtraSamples[nBand - nBaseSamples - 1] =\n                        EXTRASAMPLE_UNSPECIFIED;\n                }\n\n                TIFFSetField( poGDS->hTIFF, TIFFTAG_EXTRASAMPLES,\n                              count, pasNewExtraSamples);\n\n                CPLFree(pasNewExtraSamples);\n\n                return CE_None;\n            }\n        }\n    }\n\n    if( poGDS->nPhotometric != PHOTOMETRIC_MINISBLACK &&\n        CSLFetchNameValue( poGDS->papszCreationOptions, \"PHOTOMETRIC\") == nullptr )\n    {\n        poGDS->nPhotometric = PHOTOMETRIC_MINISBLACK;\n        TIFFSetField(poGDS->hTIFF, TIFFTAG_PHOTOMETRIC, poGDS->nPhotometric);\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                           GetColorTable()                            */\n/************************************************************************/\n\nGDALColorTable *GTiffRasterBand::GetColorTable()\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( nBand == 1 )\n        return poGDS->poColorTable;\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                           SetColorTable()                            */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetColorTable( GDALColorTable * poCT )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n/* -------------------------------------------------------------------- */\n/*      Check if this is even a candidate for applying a PCT.           */\n/* -------------------------------------------------------------------- */\n    if( nBand != 1)\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"SetColorTable() can only be called on band 1.\" );\n        return CE_Failure;\n    }\n\n    if( poGDS->nSamplesPerPixel != 1 && poGDS->nSamplesPerPixel != 2)\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"SetColorTable() not supported for multi-sample TIFF \"\n                  \"files.\" );\n        return CE_Failure;\n    }\n\n    if( eDataType != GDT_Byte && eDataType != GDT_UInt16 )\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"SetColorTable() only supported for Byte or UInt16 bands \"\n                  \"in TIFF format.\" );\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      We are careful about calling SetDirectory() to avoid            */\n/*      prematurely crystallizing the directory.  (#2820)               */\n/* -------------------------------------------------------------------- */\n    if( poGDS->bCrystalized )\n    {\n        if( !poGDS->SetDirectory() )\n            return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Is this really a request to clear the color table?              */\n/* -------------------------------------------------------------------- */\n    if( poCT == nullptr || poCT->GetColorEntryCount() == 0 )\n    {\n        TIFFSetField( poGDS->hTIFF, TIFFTAG_PHOTOMETRIC,\n                      PHOTOMETRIC_MINISBLACK );\n\n#ifdef HAVE_UNSETFIELD\n        TIFFUnsetField( poGDS->hTIFF, TIFFTAG_COLORMAP );\n#else\n        CPLDebug(\n            \"GTiff\",\n            \"TIFFUnsetField() not supported, colormap may not be cleared.\" );\n#endif\n\n        if( poGDS->poColorTable )\n        {\n            delete poGDS->poColorTable;\n            poGDS->poColorTable = nullptr;\n        }\n\n        return CE_None;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write out the colortable, and update the configuration.         */\n/* -------------------------------------------------------------------- */\n    int nColors = 65536;\n\n    if( eDataType == GDT_Byte )\n        nColors = 256;\n\n    unsigned short *panTRed = static_cast<unsigned short *>(\n        CPLMalloc(sizeof(unsigned short)*nColors) );\n    unsigned short *panTGreen = static_cast<unsigned short *>(\n        CPLMalloc(sizeof(unsigned short)*nColors) );\n    unsigned short *panTBlue = static_cast<unsigned short *>(\n        CPLMalloc(sizeof(unsigned short)*nColors) );\n\n    for( int iColor = 0; iColor < nColors; ++iColor )\n    {\n        if( iColor < poCT->GetColorEntryCount() )\n        {\n            GDALColorEntry sRGB;\n            poCT->GetColorEntryAsRGB( iColor, &sRGB );\n\n            panTRed[iColor] = static_cast<unsigned short>(257 * sRGB.c1);\n            panTGreen[iColor] = static_cast<unsigned short>(257 * sRGB.c2);\n            panTBlue[iColor] = static_cast<unsigned short>(257 * sRGB.c3);\n        }\n        else\n        {\n            panTRed[iColor] = 0;\n            panTGreen[iColor] = 0;\n            panTBlue[iColor] = 0;\n        }\n    }\n\n    TIFFSetField( poGDS->hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_PALETTE );\n    TIFFSetField( poGDS->hTIFF, TIFFTAG_COLORMAP,\n                  panTRed, panTGreen, panTBlue );\n\n    CPLFree( panTRed );\n    CPLFree( panTGreen );\n    CPLFree( panTBlue );\n\n    if( poGDS->poColorTable )\n        delete poGDS->poColorTable;\n\n    // libtiff 3.X needs setting this in all cases (creation or update)\n    // whereas libtiff 4.X would just need it if there\n    // was no color table before.\n    poGDS->bNeedsRewrite = true;\n\n    poGDS->poColorTable = poCT->Clone();\n    eBandInterp = GCI_PaletteIndex;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                           GetNoDataValue()                           */\n/************************************************************************/\n\ndouble GTiffRasterBand::GetNoDataValue( int * pbSuccess )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( bNoDataSet )\n    {\n        if( pbSuccess )\n            *pbSuccess = TRUE;\n\n        return dfNoDataValue;\n    }\n\n    if( poGDS->bNoDataSet )\n    {\n        if( pbSuccess )\n            *pbSuccess = TRUE;\n\n        return poGDS->dfNoDataValue;\n    }\n\n    return GDALPamRasterBand::GetNoDataValue( pbSuccess );\n}\n\n/************************************************************************/\n/*                           SetNoDataValue()                           */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::SetNoDataValue( double dfNoData )\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( poGDS->bNoDataSet && poGDS->dfNoDataValue == dfNoData )\n    {\n        bNoDataSet = true;\n        dfNoDataValue = dfNoData;\n        return CE_None;\n    }\n\n    if( poGDS->nBands > 1 && poGDS->osProfile == szPROFILE_GDALGeoTIFF )\n    {\n        int bOtherBandHasNoData = FALSE;\n        const int nOtherBand = nBand > 1 ? 1 : 2;\n        double dfOtherNoData = poGDS->GetRasterBand(nOtherBand)->\n                                    GetNoDataValue(&bOtherBandHasNoData);\n        if( bOtherBandHasNoData && dfOtherNoData != dfNoData )\n        {\n            CPLError(CE_Warning, CPLE_AppDefined,\n                 \"Setting nodata to %.18g on band %d, but band %d has nodata \"\n                 \"at %.18g. The TIFFTAG_GDAL_NODATA only support one value \"\n                 \"per dataset. This value of %.18g will be used for all bands \"\n                 \"on re-opening\",\n                 dfNoData, nBand, nOtherBand, dfOtherNoData, dfNoData);\n        }\n    }\n\n    if( poGDS->bStreamingOut && poGDS->bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify nodata at that point in a streamed output file\" );\n        return CE_Failure;\n    }\n\n    poGDS->bNoDataSet = true;\n    poGDS->dfNoDataValue = dfNoData;\n\n    poGDS->bNoDataChanged = true;\n\n    bNoDataSet = true;\n    dfNoDataValue = dfNoData;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                        DeleteNoDataValue()                           */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::DeleteNoDataValue()\n\n{\n    poGDS->LoadGeoreferencingAndPamIfNeeded();\n\n    if( !poGDS->bNoDataSet )\n        return CE_None;\n\n    if( poGDS->bStreamingOut && poGDS->bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify nodata at that point in a streamed output file\" );\n        return CE_Failure;\n    }\n\n    poGDS->bNoDataSet = false;\n    poGDS->dfNoDataValue = -9999.0;\n\n    poGDS->bNoDataChanged = true;\n\n    bNoDataSet = false;\n    dfNoDataValue = -9999.0;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                             NullBlock()                              */\n/*                                                                      */\n/*      Set the block data to the null value if it is set, or zero      */\n/*      if there is no null data value.                                 */\n/************************************************************************/\n\nvoid GTiffRasterBand::NullBlock( void *pData )\n\n{\n    const GPtrDiff_t nWords = static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize;\n    const int nChunkSize = std::max(1, GDALGetDataTypeSizeBytes(eDataType));\n\n    int bNoDataSetIn = FALSE;\n    const double dfNoData = GetNoDataValue( &bNoDataSetIn );\n    if( !bNoDataSetIn )\n    {\n#ifdef ESRI_BUILD\n        if( poGDS->nBitsPerSample >= 2 )\n            memset( pData, 0, nWords * nChunkSize );\n        else\n            memset( pData, 1, nWords * nChunkSize );\n#else\n        memset( pData, 0, nWords * nChunkSize );\n#endif\n    }\n    else\n    {\n        // Will convert nodata value to the right type and copy efficiently.\n        GDALCopyWords64( &dfNoData, GDT_Float64, 0,\n                       pData, eDataType, nChunkSize, nWords);\n    }\n}\n\n/************************************************************************/\n/*                          GetOverviewCount()                          */\n/************************************************************************/\n\nint GTiffRasterBand::GetOverviewCount()\n\n{\n    poGDS->ScanDirectories();\n\n    if( poGDS->nOverviewCount > 0 )\n    {\n        return poGDS->nOverviewCount;\n    }\n\n    const int nOverviewCount = GDALRasterBand::GetOverviewCount();\n    if( nOverviewCount > 0 )\n        return nOverviewCount;\n\n    // Implicit JPEG overviews are normally hidden, except when doing\n    // IRasterIO() operations.\n    if( poGDS->nJPEGOverviewVisibilityCounter )\n        return poGDS->GetJPEGOverviewCount();\n\n    return 0;\n}\n\n/************************************************************************/\n/*                            GetOverview()                             */\n/************************************************************************/\n\nGDALRasterBand *GTiffRasterBand::GetOverview( int i )\n\n{\n    poGDS->ScanDirectories();\n\n    if( poGDS->nOverviewCount > 0 )\n    {\n        // Do we have internal overviews?\n        if( i < 0 || i >= poGDS->nOverviewCount )\n            return nullptr;\n\n        return poGDS->papoOverviewDS[i]->GetRasterBand(nBand);\n    }\n\n    GDALRasterBand* const poOvrBand = GDALRasterBand::GetOverview( i );\n    if( poOvrBand != nullptr )\n        return poOvrBand;\n\n    // For consistency with GetOverviewCount(), we should also test\n    // nJPEGOverviewVisibilityCounter, but it is also convenient to be able\n    // to query them for testing purposes.\n    if( i >= 0 && i < poGDS->GetJPEGOverviewCount() )\n        return poGDS->papoJPEGOverviewDS[i]->GetRasterBand(nBand);\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                           GetMaskFlags()                             */\n/************************************************************************/\n\nint GTiffRasterBand::GetMaskFlags()\n{\n    poGDS->ScanDirectories();\n\n    if( poGDS->poMaskDS != nullptr )\n    {\n        if( poGDS->poMaskDS->GetRasterCount() == 1)\n        {\n            return GMF_PER_DATASET;\n        }\n\n        return 0;\n    }\n\n    if( poGDS->bIsOverview_ )\n    {\n        return poGDS->poBaseDS->GetRasterBand(nBand)->GetMaskFlags();\n    }\n\n    return GDALPamRasterBand::GetMaskFlags();\n}\n\n/************************************************************************/\n/*                            GetMaskBand()                             */\n/************************************************************************/\n\nGDALRasterBand *GTiffRasterBand::GetMaskBand()\n{\n    poGDS->ScanDirectories();\n\n    if( poGDS->poMaskDS != nullptr )\n    {\n        if( poGDS->poMaskDS->GetRasterCount() == 1 )\n            return poGDS->poMaskDS->GetRasterBand(1);\n\n        return poGDS->poMaskDS->GetRasterBand(nBand);\n    }\n\n    if( poGDS->bIsOverview_ )\n    {\n        GDALRasterBand* poBaseMask =\n            poGDS->poBaseDS->GetRasterBand(nBand)->GetMaskBand();\n        if( poBaseMask )\n        {\n            const int nOverviews = poBaseMask->GetOverviewCount();\n            for( int i = 0; i < nOverviews; i++ )\n            {\n                GDALRasterBand* poOvr = poBaseMask->GetOverview(i);\n                if( poOvr &&\n                    poOvr->GetXSize() == GetXSize() &&\n                    poOvr->GetYSize() == GetYSize() )\n                {\n                    return poOvr;\n                }\n            }\n        }\n    }\n\n    return GDALPamRasterBand::GetMaskBand();\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                             GTiffSplitBand                           */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffSplitBand final : public GTiffRasterBand\n{\n    friend class GTiffDataset;\n\n  public:\n             GTiffSplitBand( GTiffDataset *, int );\n    virtual ~GTiffSplitBand() {}\n\n    virtual int IGetDataCoverageStatus( int nXOff, int nYOff,\n                                        int nXSize, int nYSize,\n                                        int nMaskFlagStop,\n                                        double* pdfDataPct) override;\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n    virtual CPLErr IWriteBlock( int, int, void * ) override;\n};\n\n/************************************************************************/\n/*                           GTiffSplitBand()                           */\n/************************************************************************/\n\nGTiffSplitBand::GTiffSplitBand( GTiffDataset *poDSIn, int nBandIn ) :\n    GTiffRasterBand( poDSIn, nBandIn )\n{\n    nBlockXSize = poDS->GetRasterXSize();\n    nBlockYSize = 1;\n}\n\n/************************************************************************/\n/*                       IGetDataCoverageStatus()                       */\n/************************************************************************/\n\nint GTiffSplitBand::IGetDataCoverageStatus( int , int ,\n                                             int , int ,\n                                             int ,\n                                             double* )\n{\n     return GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED |\n            GDAL_DATA_COVERAGE_STATUS_DATA;\n}\n\n/************************************************************************/\n/*                             IReadBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffSplitBand::IReadBlock( int /* nBlockXOff */, int nBlockYOff,\n                                   void * pImage )\n\n{\n    // Optimization when reading the same line in a contig multi-band TIFF.\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG && poGDS->nBands > 1 &&\n        poGDS->nLastLineRead == nBlockYOff )\n    {\n        goto extract_band_data;\n    }\n\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n        poGDS->nBands > 1 )\n    {\n        if( poGDS->pabyBlockBuf == nullptr )\n        {\n            poGDS->pabyBlockBuf =\n                static_cast<GByte *>(\n                    VSI_MALLOC_VERBOSE(TIFFScanlineSize(poGDS->hTIFF)) );\n            if( poGDS->pabyBlockBuf == nullptr )\n            {\n                return CE_Failure;\n            }\n        }\n    }\n    else\n    {\n        CPLAssert(TIFFScanlineSize(poGDS->hTIFF) == nBlockXSize);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Read through to target scanline.                                */\n/* -------------------------------------------------------------------- */\n    if( poGDS->nLastLineRead >= nBlockYOff )\n        poGDS->nLastLineRead = -1;\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE && poGDS->nBands > 1 )\n    {\n        // If we change of band, we must start reading the\n        // new strip from its beginning.\n        if( poGDS->nLastBandRead != nBand )\n            poGDS->nLastLineRead = -1;\n        poGDS->nLastBandRead = nBand;\n    }\n\n    while( poGDS->nLastLineRead < nBlockYOff )\n    {\n        ++poGDS->nLastLineRead;\n        if( TIFFReadScanline(\n                poGDS->hTIFF,\n                poGDS->pabyBlockBuf ? poGDS->pabyBlockBuf : pImage,\n                poGDS->nLastLineRead,\n                (poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE) ?\n                 static_cast<uint16>(nBand - 1) : 0 ) == -1\n            && !poGDS->bIgnoreReadErrors )\n        {\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"TIFFReadScanline() failed.\" );\n            poGDS->nLastLineRead = -1;\n            return CE_Failure;\n        }\n    }\n\nextract_band_data:\n/* -------------------------------------------------------------------- */\n/*      Extract band data from contig buffer.                           */\n/* -------------------------------------------------------------------- */\n    if( poGDS->pabyBlockBuf != nullptr )\n    {\n        for( int iPixel = 0, iSrcOffset= nBand - 1, iDstOffset = 0;\n             iPixel < nBlockXSize;\n             ++iPixel, iSrcOffset += poGDS->nBands, ++iDstOffset )\n        {\n            static_cast<GByte *>(pImage)[iDstOffset] =\n                poGDS->pabyBlockBuf[iSrcOffset];\n        }\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                            IWriteBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffSplitBand::IWriteBlock( int /* nBlockXOff */, int /* nBlockYOff */,\n                                    void * /* pImage */ )\n\n{\n    CPLError( CE_Failure, CPLE_AppDefined,\n              \"Split bands are read-only.\" );\n    return CE_Failure;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                             GTiffRGBABand                            */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffRGBABand final : public GTiffRasterBand\n{\n    friend class GTiffDataset;\n\n  public:\n                   GTiffRGBABand( GTiffDataset *, int );\n    virtual ~GTiffRGBABand() {}\n\n    virtual int IGetDataCoverageStatus( int nXOff, int nYOff,\n                                        int nXSize, int nYSize,\n                                        int nMaskFlagStop,\n                                        double* pdfDataPct) override;\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n    virtual CPLErr IWriteBlock( int, int, void * ) override;\n\n    virtual GDALColorInterp GetColorInterpretation() override;\n};\n\n/************************************************************************/\n/*                           GTiffRGBABand()                            */\n/************************************************************************/\n\nGTiffRGBABand::GTiffRGBABand( GTiffDataset *poDSIn, int nBandIn ) :\n    GTiffRasterBand( poDSIn, nBandIn )\n{\n    eDataType = GDT_Byte;\n}\n\n/************************************************************************/\n/*                       IGetDataCoverageStatus()                       */\n/************************************************************************/\n\nint GTiffRGBABand::IGetDataCoverageStatus( int , int ,\n                                             int , int ,\n                                             int ,\n                                             double* )\n{\n     return GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED |\n            GDAL_DATA_COVERAGE_STATUS_DATA;\n}\n\n/************************************************************************/\n/*                            IWriteBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffRGBABand::IWriteBlock( int, int, void * )\n\n{\n    CPLError( CE_Failure, CPLE_AppDefined,\n              \"RGBA interpreted raster bands are read-only.\" );\n    return CE_Failure;\n}\n\n/************************************************************************/\n/*                             IReadBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffRGBABand::IReadBlock( int nBlockXOff, int nBlockYOff,\n                                  void * pImage )\n\n{\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    CPLAssert( nBlocksPerRow != 0 );\n    const auto nBlockBufSize = 4 * static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize;\n    const int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n#ifdef INTERNAL_LIBTIFF\n    if( poGDS->nCompression == COMPRESSION_OJPEG )\n    {\n        // Need to fetch all offsets for Old-JPEG compression\n        if( poGDS->pabyBlockBuf == nullptr )\n        {\n            toff_t *panByteCounts = nullptr;\n            toff_t *panOffsets = nullptr;\n            const bool bIsTiled = CPL_TO_BOOL( TIFFIsTiled(poGDS->hTIFF) );\n\n            if( bIsTiled )\n            {\n                TIFFGetField( poGDS->hTIFF, TIFFTAG_TILEBYTECOUNTS, &panByteCounts );\n                TIFFGetField( poGDS->hTIFF, TIFFTAG_TILEOFFSETS, &panOffsets );\n            }\n            else\n            {\n                TIFFGetField( poGDS->hTIFF, TIFFTAG_STRIPBYTECOUNTS, &panByteCounts );\n                TIFFGetField( poGDS->hTIFF, TIFFTAG_STRIPOFFSETS, &panOffsets );\n            }\n        }\n    }\n#endif\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n    {\n        for( int iBand = 0; iBand < poGDS->nSamplesPerPixel; iBand ++ )\n        {\n            int nBlockIdBand = nBlockId + iBand * poGDS->nBlocksPerBand;\n            if( !poGDS->IsBlockAvailable(nBlockIdBand) )\n                return CE_Failure;\n        }\n    }\n    else\n    {\n        if( !poGDS->IsBlockAvailable(nBlockId) )\n            return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Allocate a temporary buffer for this strip.                     */\n/* -------------------------------------------------------------------- */\n    if( poGDS->pabyBlockBuf == nullptr )\n    {\n        poGDS->pabyBlockBuf =\n            static_cast<GByte *>(\n                VSI_MALLOC3_VERBOSE( 4, nBlockXSize, nBlockYSize ) );\n        if( poGDS->pabyBlockBuf == nullptr )\n            return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Read the strip                                                  */\n/* -------------------------------------------------------------------- */\n    CPLErr eErr = CE_None;\n\n    if( poGDS->nLoadedBlock != nBlockId )\n    {\n        if( TIFFIsTiled( poGDS->hTIFF ) )\n        {\n#if defined(INTERNAL_LIBTIFF) || TIFFLIB_VERSION > 20161119\n            if( TIFFReadRGBATileExt(\n                   poGDS->hTIFF,\n                   nBlockXOff * nBlockXSize,\n                   nBlockYOff * nBlockYSize,\n                   reinterpret_cast<uint32 *>(poGDS->pabyBlockBuf),\n                   !poGDS->bIgnoreReadErrors) == 0\n                && !poGDS->bIgnoreReadErrors )\n#else\n            if( TIFFReadRGBATile(\n                   poGDS->hTIFF,\n                   nBlockXOff * nBlockXSize,\n                   nBlockYOff * nBlockYSize,\n                   reinterpret_cast<uint32 *>(poGDS->pabyBlockBuf)) == 0\n                && !poGDS->bIgnoreReadErrors )\n#endif\n            {\n                // Once TIFFError() is properly hooked, this can go away.\n                CPLError( CE_Failure, CPLE_AppDefined,\n                          \"TIFFReadRGBATile() failed.\" );\n\n                memset( poGDS->pabyBlockBuf, 0, nBlockBufSize );\n\n                eErr = CE_Failure;\n            }\n        }\n        else\n        {\n#if defined(INTERNAL_LIBTIFF) || TIFFLIB_VERSION > 20161119\n            if( TIFFReadRGBAStripExt(\n                   poGDS->hTIFF,\n                   nBlockId * nBlockYSize,\n                   reinterpret_cast<uint32 *>(poGDS->pabyBlockBuf),\n                   !poGDS->bIgnoreReadErrors) == 0\n                && !poGDS->bIgnoreReadErrors )\n#else\n            if( TIFFReadRGBAStrip(\n                   poGDS->hTIFF,\n                   nBlockId * nBlockYSize,\n                   reinterpret_cast<uint32 *>(poGDS->pabyBlockBuf)) == 0\n                && !poGDS->bIgnoreReadErrors )\n#endif\n            {\n                // Once TIFFError() is properly hooked, this can go away.\n                CPLError( CE_Failure, CPLE_AppDefined,\n                          \"TIFFReadRGBAStrip() failed.\" );\n\n                memset( poGDS->pabyBlockBuf, 0, nBlockBufSize );\n\n                eErr = CE_Failure;\n            }\n        }\n    }\n\n    poGDS->nLoadedBlock = nBlockId;\n\n/* -------------------------------------------------------------------- */\n/*      Handle simple case of eight bit data, and pixel interleaving.   */\n/* -------------------------------------------------------------------- */\n    int nThisBlockYSize = nBlockYSize;\n\n    if( nBlockYOff * nBlockYSize > GetYSize() - nBlockYSize\n        && !TIFFIsTiled( poGDS->hTIFF ) )\n        nThisBlockYSize = GetYSize() - nBlockYOff * nBlockYSize;\n\n#ifdef CPL_LSB\n    const int nBO = nBand - 1;\n#else\n    const int nBO = 4 - nBand;\n#endif\n\n    for( int iDestLine = 0; iDestLine < nThisBlockYSize; ++iDestLine )\n    {\n        const auto nSrcOffset =\n            static_cast<GPtrDiff_t>(nThisBlockYSize - iDestLine - 1) * nBlockXSize * 4;\n\n        GDALCopyWords(\n            poGDS->pabyBlockBuf + nBO + nSrcOffset, GDT_Byte, 4,\n            static_cast<GByte *>(pImage)+static_cast<GPtrDiff_t>(iDestLine)*nBlockXSize, GDT_Byte, 1,\n            nBlockXSize );\n    }\n\n    if( eErr == CE_None )\n        eErr = FillCacheForOtherBands(nBlockXOff, nBlockYOff);\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                       GetColorInterpretation()                       */\n/************************************************************************/\n\nGDALColorInterp GTiffRGBABand::GetColorInterpretation()\n\n{\n    if( nBand == 1 )\n        return GCI_RedBand;\n    if( nBand == 2 )\n        return GCI_GreenBand;\n    if( nBand == 3 )\n        return GCI_BlueBand;\n\n    return GCI_AlphaBand;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                             GTiffOddBitsBand                         */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffOddBitsBand : public GTiffRasterBand\n{\n    friend class GTiffDataset;\n  public:\n\n                   GTiffOddBitsBand( GTiffDataset *, int );\n    virtual ~GTiffOddBitsBand() {}\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n    virtual CPLErr IWriteBlock( int, int, void * ) override;\n};\n\n/************************************************************************/\n/*                           GTiffOddBitsBand()                         */\n/************************************************************************/\n\nGTiffOddBitsBand::GTiffOddBitsBand( GTiffDataset *poGDSIn, int nBandIn )\n        : GTiffRasterBand( poGDSIn, nBandIn )\n\n{\n    eDataType = GDT_Unknown;\n    if( (poGDS->nBitsPerSample == 16 || poGDS->nBitsPerSample == 24) &&\n        poGDS->nSampleFormat == SAMPLEFORMAT_IEEEFP )\n        eDataType = GDT_Float32;\n    // FIXME ? in autotest we currently open gcore/data/int24.tif\n    // which is declared as signed, but we consider it as unsigned\n    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||\n              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&\n             poGDS->nBitsPerSample < 8 )\n        eDataType = GDT_Byte;\n    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||\n              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&\n             poGDS->nBitsPerSample > 8 && poGDS->nBitsPerSample < 16 )\n        eDataType = GDT_UInt16;\n    else if( (poGDS->nSampleFormat == SAMPLEFORMAT_UINT ||\n              poGDS->nSampleFormat == SAMPLEFORMAT_INT) &&\n             poGDS->nBitsPerSample > 16 && poGDS->nBitsPerSample < 32 )\n        eDataType = GDT_UInt32;\n}\n\n/************************************************************************/\n/*                            FloatToHalf()                             */\n/************************************************************************/\n\nstatic GUInt16 FloatToHalf( GUInt32 iFloat32, bool& bHasWarned )\n{\n    GUInt32 iSign =     (iFloat32 >> 31) & 0x00000001;\n    GUInt32 iExponent = (iFloat32 >> 23) & 0x000000ff;\n    GUInt32 iMantissa = iFloat32         & 0x007fffff;\n\n    if (iExponent == 255)\n    {\n        if (iMantissa == 0)\n        {\n/* -------------------------------------------------------------------- */\n/*       Positive or negative infinity.                                 */\n/* -------------------------------------------------------------------- */\n\n            return static_cast<GUInt16>((iSign << 15) | 0x7C00);\n        }\n        else\n        {\n/* -------------------------------------------------------------------- */\n/*       NaN -- preserve sign and significand bits.                     */\n/* -------------------------------------------------------------------- */\n            if( iMantissa >> 13 )\n                return static_cast<GUInt16>((iSign << 15) | 0x7C00 |\n                                                            (iMantissa >> 13));\n\n            return static_cast<GUInt16>((iSign << 15) | 0x7E00);\n        }\n    }\n\n    if( iExponent <= 127 - 15 )\n    {\n        // Zero, float32 denormalized number or float32 too small normalized\n        // number\n        if( 13 + 1 + 127 - 15 - iExponent >= 32 )\n            return static_cast<GUInt16>(iSign << 15);\n\n        // Return a denormalized number\n        return static_cast<GUInt16>((iSign << 15) |\n                ((iMantissa | 0x00800000) >> (13 + 1 + 127 - 15 - iExponent)));\n    }\n    if( iExponent - (127 - 15) >= 31 )\n    {\n        if( !bHasWarned )\n        {\n            bHasWarned = true;\n            float fVal = 0.0f;\n            memcpy(&fVal, &iFloat32, 4);\n            CPLError(\n                CE_Failure, CPLE_AppDefined,\n                \"Value %.8g is beyond range of float16. Converted to %sinf\",\n                fVal, (fVal > 0) ? \"+\" : \"-\");\n        }\n        return static_cast<GUInt16>((iSign << 15) | 0x7C00);  // Infinity\n    }\n\n/* -------------------------------------------------------------------- */\n/*       Normalized number.                                             */\n/* -------------------------------------------------------------------- */\n\n    iExponent = iExponent - (127 - 15);\n    iMantissa = iMantissa >> 13;\n\n/* -------------------------------------------------------------------- */\n/*       Assemble sign, exponent and mantissa.                          */\n/* -------------------------------------------------------------------- */\n\n    // coverity[overflow_sink]\n    return static_cast<GUInt16>((iSign << 15) | (iExponent << 10) | iMantissa);\n}\n\n/************************************************************************/\n/*                            IWriteBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffOddBitsBand::IWriteBlock( int nBlockXOff, int nBlockYOff,\n                                      void *pImage )\n\n{\n    if( poGDS->bWriteErrorInFlushBlockBuf )\n    {\n        // Report as an error if a previously loaded block couldn't be written\n        // correctly.\n        poGDS->bWriteErrorInFlushBlockBuf = false;\n        return CE_Failure;\n    }\n\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    CPLAssert( poGDS != nullptr\n               && nBlockXOff >= 0\n               && nBlockYOff >= 0\n               && pImage != nullptr );\n\n    if( eDataType == GDT_Float32 && poGDS->nBitsPerSample != 16 )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Writing float data with nBitsPerSample = %d is unsupported\",\n                 poGDS->nBitsPerSample);\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Load the block buffer.                                          */\n/* -------------------------------------------------------------------- */\n    CPLAssert(nBlocksPerRow != 0);\n    int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        nBlockId += (nBand - 1) * poGDS->nBlocksPerBand;\n\n    // Only read content from disk in the CONTIG case.\n    {\n        const CPLErr eErr =\n            poGDS->LoadBlockBuf( nBlockId,\n                                 poGDS->nPlanarConfig == PLANARCONFIG_CONTIG &&\n                                 poGDS->nBands > 1 );\n        if( eErr != CE_None )\n            return eErr;\n    }\n\n    const GUInt32 nMaxVal = (1U << poGDS->nBitsPerSample) - 1;\n\n/* -------------------------------------------------------------------- */\n/*      Handle case of \"separate\" images or single band images where    */\n/*      no interleaving with other data is required.                    */\n/* -------------------------------------------------------------------- */\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE\n        || poGDS->nBands == 1 )\n    {\n        // TODO(schwehr): Create a CplNumBits8Aligned.\n        // Bits per line rounds up to next byte boundary.\n        GInt64 nBitsPerLine = static_cast<GInt64>(nBlockXSize) * poGDS->nBitsPerSample;\n        if( (nBitsPerLine & 7) != 0 )\n            nBitsPerLine = (nBitsPerLine + 7) & (~7);\n\n        GPtrDiff_t iPixel = 0;\n\n        // Small optimization in 1 bit case.\n        if( poGDS->nBitsPerSample == 1 )\n        {\n            for( int iY = 0; iY < nBlockYSize; ++iY, iPixel += nBlockXSize )\n            {\n                GInt64 iBitOffset = iY * nBitsPerLine;\n\n                const GByte* pabySrc =\n                    static_cast<const GByte*>(pImage) + iPixel;\n                auto iByteOffset = iBitOffset / 8;\n                int iX = 0;  // Used after for.\n                for( ; iX + 7 < nBlockXSize; iX += 8, iByteOffset++ )\n                {\n                    int nRes = (!(!pabySrc[iX+0])) << 7;\n                    nRes |= (!(!pabySrc[iX+1])) << 6;\n                    nRes |= (!(!pabySrc[iX+2])) << 5;\n                    nRes |= (!(!pabySrc[iX+3])) << 4;\n                    nRes |= (!(!pabySrc[iX+4])) << 3;\n                    nRes |= (!(!pabySrc[iX+5])) << 2;\n                    nRes |= (!(!pabySrc[iX+6])) << 1;\n                    nRes |= (!(!pabySrc[iX+7])) << 0;\n                    poGDS->pabyBlockBuf[iByteOffset] = static_cast<GByte>(nRes);\n                }\n                iBitOffset = iByteOffset * 8;\n                if( iX < nBlockXSize )\n                {\n                    int nRes = 0;\n                    for( ; iX < nBlockXSize; ++iX )\n                    {\n                        if( pabySrc[iX] )\n                            nRes |= (0x80 >>(iBitOffset & 7) );\n                        ++iBitOffset;\n                    }\n                    poGDS->pabyBlockBuf[iBitOffset>>3] =\n                        static_cast<GByte>(nRes);\n                }\n            }\n\n            poGDS->bLoadedBlockDirty = true;\n\n            return CE_None;\n        }\n\n        if( eDataType == GDT_Float32 && poGDS->nBitsPerSample == 16 )\n        {\n            for( ; iPixel < static_cast<GPtrDiff_t>(nBlockYSize) * nBlockXSize; iPixel++ )\n            {\n                GUInt32 nInWord = static_cast<GUInt32 *>(pImage)[iPixel];\n                GUInt16 nHalf = FloatToHalf(nInWord, poGDS->bClipWarn);\n                reinterpret_cast<GUInt16*>(poGDS->pabyBlockBuf)[iPixel] = nHalf;\n            }\n\n            poGDS->bLoadedBlockDirty = true;\n\n            return CE_None;\n        }\n\n        // Initialize to zero as we set the buffer with binary or operations.\n        if( poGDS->nBitsPerSample != 24 )\n            memset(poGDS->pabyBlockBuf, 0, static_cast<size_t>((nBitsPerLine / 8) * nBlockYSize));\n\n        for( int iY = 0; iY < nBlockYSize; ++iY )\n        {\n            GInt64 iBitOffset = iY * nBitsPerLine;\n\n            if( poGDS->nBitsPerSample == 12 )\n            {\n                for( int iX = 0; iX < nBlockXSize; ++iX )\n                {\n                    GUInt32 nInWord = static_cast<GUInt16 *>(pImage)[iPixel++];\n                    if( nInWord > nMaxVal )\n                    {\n                        nInWord = nMaxVal;\n                        if( !poGDS->bClipWarn )\n                        {\n                            poGDS->bClipWarn = true;\n                            CPLError(\n                                CE_Warning, CPLE_AppDefined,\n                                \"One or more pixels clipped to fit %d bit \"\n                                \"domain.\", poGDS->nBitsPerSample );\n                        }\n                    }\n\n                    if( (iBitOffset % 8) == 0 )\n                    {\n                        poGDS->pabyBlockBuf[iBitOffset>>3] =\n                            static_cast<GByte>(nInWord >> 4);\n                        // Let 4 lower bits to zero as they're going to be\n                        // overridden by the next word.\n                        poGDS->pabyBlockBuf[(iBitOffset>>3)+1] =\n                            static_cast<GByte>((nInWord & 0xf) << 4);\n                    }\n                    else\n                    {\n                        // Must or to preserve the 4 upper bits written\n                        // for the previous word.\n                        poGDS->pabyBlockBuf[iBitOffset>>3] |=\n                            static_cast<GByte>(nInWord >> 8);\n                        poGDS->pabyBlockBuf[(iBitOffset>>3)+1] =\n                            static_cast<GByte>(nInWord & 0xff);\n                    }\n\n                    iBitOffset += poGDS->nBitsPerSample;\n                }\n                continue;\n            }\n\n            for( int iX = 0; iX < nBlockXSize; ++iX )\n            {\n                GUInt32 nInWord = 0;\n                if( eDataType == GDT_Byte )\n                {\n                    nInWord = static_cast<GByte *>(pImage)[iPixel++];\n                }\n                else if( eDataType == GDT_UInt16 )\n                {\n                    nInWord = static_cast<GUInt16 *>(pImage)[iPixel++];\n                }\n                else if( eDataType == GDT_UInt32 )\n                {\n                    nInWord = static_cast<GUInt32 *>(pImage)[iPixel++];\n                }\n                else\n                {\n                    CPLAssert(false);\n                }\n\n                if( nInWord > nMaxVal )\n                {\n                    nInWord = nMaxVal;\n                    if( !poGDS->bClipWarn )\n                    {\n                        poGDS->bClipWarn = true;\n                        CPLError(\n                            CE_Warning, CPLE_AppDefined,\n                            \"One or more pixels clipped to fit %d bit domain.\",\n                            poGDS->nBitsPerSample );\n                    }\n                }\n\n                if( poGDS->nBitsPerSample == 24 )\n                {\n/* -------------------------------------------------------------------- */\n/*      Special case for 24bit data which is pre-byteswapped since      */\n/*      the size falls on a byte boundary ... ugh (#2361).              */\n/* -------------------------------------------------------------------- */\n#ifdef CPL_MSB\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 0] =\n                        static_cast<GByte>( nInWord );\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 1] =\n                        static_cast<GByte>( nInWord >> 8 );\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 2] =\n                        static_cast<GByte>( nInWord >> 16 );\n#else\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 0] =\n                        static_cast<GByte>( nInWord >> 16 );\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 1] =\n                        static_cast<GByte>( nInWord >> 8 );\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 2] =\n                        static_cast<GByte>( nInWord );\n#endif\n                    iBitOffset += 24;\n                }\n                else\n                {\n                    for( int iBit = 0; iBit < poGDS->nBitsPerSample; ++iBit )\n                    {\n                        if( nInWord &\n                            (1 << (poGDS->nBitsPerSample - 1 - iBit)) )\n                            poGDS->pabyBlockBuf[iBitOffset>>3] |=\n                                ( 0x80 >> (iBitOffset & 7) );\n                        ++iBitOffset;\n                    }\n                }\n            }\n        }\n\n        poGDS->bLoadedBlockDirty = true;\n\n        return CE_None;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle case of pixel interleaved (PLANARCONFIG_CONTIG) images.  */\n/* -------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------- */\n/*      On write of pixel interleaved data, we might as well flush      */\n/*      out any other bands that are dirty in our cache.  This is       */\n/*      especially helpful when writing compressed blocks.              */\n/* -------------------------------------------------------------------- */\n    for( int iBand = 0; iBand < poGDS->nBands; ++iBand )\n    {\n        const GByte *pabyThisImage = nullptr;\n        GDALRasterBlock *poBlock = nullptr;\n\n        if( iBand + 1 == nBand )\n        {\n            pabyThisImage = static_cast<GByte *>( pImage );\n        }\n        else\n        {\n            poBlock =\n                cpl::down_cast<GTiffOddBitsBand *>(\n                    poGDS->GetRasterBand( iBand + 1 ))\n                        ->TryGetLockedBlockRef( nBlockXOff, nBlockYOff );\n\n            if( poBlock == nullptr )\n                continue;\n\n            if( !poBlock->GetDirty() )\n            {\n                poBlock->DropLock();\n                continue;\n            }\n\n            pabyThisImage = static_cast<GByte *>(poBlock->GetDataRef());\n        }\n\n        const int iPixelBitSkip = poGDS->nBitsPerSample * poGDS->nBands;\n        const int iBandBitOffset = iBand * poGDS->nBitsPerSample;\n\n        // Bits per line rounds up to next byte boundary.\n        GInt64 nBitsPerLine = static_cast<GInt64>(nBlockXSize) * iPixelBitSkip;\n        if( (nBitsPerLine & 7) != 0 )\n            nBitsPerLine = (nBitsPerLine + 7) & (~7);\n\n        GPtrDiff_t iPixel = 0;\n\n        if( eDataType == GDT_Float32 && poGDS->nBitsPerSample == 16 )\n        {\n            for( ; iPixel < static_cast<GPtrDiff_t>(nBlockYSize) * nBlockXSize; iPixel++ )\n            {\n                GUInt32 nInWord = reinterpret_cast<const GUInt32 *>(\n                                                        pabyThisImage)[iPixel];\n                GUInt16 nHalf = FloatToHalf(nInWord, poGDS->bClipWarn);\n                reinterpret_cast<GUInt16*>(poGDS->pabyBlockBuf)[\n                                    iPixel * poGDS->nBands + iBand] = nHalf;\n            }\n\n            if( poBlock != nullptr )\n            {\n                poBlock->MarkClean();\n                poBlock->DropLock();\n            }\n            continue;\n        }\n\n        for( int iY = 0; iY < nBlockYSize; ++iY )\n        {\n            GInt64 iBitOffset = iBandBitOffset + iY * nBitsPerLine;\n\n            if( poGDS->nBitsPerSample == 12 )\n            {\n                for( int iX = 0; iX < nBlockXSize; ++iX )\n                {\n                    GUInt32 nInWord =\n                        reinterpret_cast<const GUInt16 *>(\n                            pabyThisImage)[iPixel++];\n                    if( nInWord > nMaxVal )\n                    {\n                        nInWord = nMaxVal;\n                        if( !poGDS->bClipWarn )\n                        {\n                            poGDS->bClipWarn = true;\n                            CPLError(\n                                CE_Warning, CPLE_AppDefined,\n                                \"One or more pixels clipped to fit %d bit \"\n                                \"domain.\", poGDS->nBitsPerSample );\n                        }\n                    }\n\n                    if( (iBitOffset % 8) == 0 )\n                    {\n                        poGDS->pabyBlockBuf[iBitOffset>>3] =\n                            static_cast<GByte>( nInWord >> 4 );\n                        poGDS->pabyBlockBuf[(iBitOffset>>3)+1] =\n                            static_cast<GByte>(\n                                ((nInWord & 0xf) << 4) |\n                                (poGDS->pabyBlockBuf[(iBitOffset>>3)+1] &\n                                 0xf) );\n                    }\n                    else\n                    {\n                        poGDS->pabyBlockBuf[iBitOffset>>3] =\n                            static_cast<GByte>(\n                                (poGDS->pabyBlockBuf[iBitOffset>>3] &\n                                 0xf0) |\n                                (nInWord >> 8));\n                        poGDS->pabyBlockBuf[(iBitOffset>>3)+1] =\n                            static_cast<GByte>(nInWord & 0xff);\n                    }\n\n                    iBitOffset += iPixelBitSkip;\n                }\n                continue;\n            }\n\n            for( int iX = 0; iX < nBlockXSize; ++iX )\n            {\n                GUInt32 nInWord = 0;\n                if( eDataType == GDT_Byte )\n                {\n                    nInWord =\n                        static_cast<const GByte *>(pabyThisImage)[iPixel++];\n                }\n                else if( eDataType == GDT_UInt16 )\n                {\n                    nInWord = reinterpret_cast<const GUInt16 *>(\n                        pabyThisImage)[iPixel++];\n                }\n                else if( eDataType == GDT_UInt32 )\n                {\n                    nInWord = reinterpret_cast<const GUInt32 *>(\n                        pabyThisImage)[iPixel++];\n                }\n                else\n                {\n                    CPLAssert(false);\n                }\n\n                if( nInWord > nMaxVal )\n                {\n                    nInWord = nMaxVal;\n                    if( !poGDS->bClipWarn )\n                    {\n                        poGDS->bClipWarn = true;\n                        CPLError(\n                            CE_Warning, CPLE_AppDefined,\n                            \"One or more pixels clipped to fit %d bit domain.\",\n                            poGDS->nBitsPerSample );\n                    }\n                }\n\n                if( poGDS->nBitsPerSample == 24 )\n                {\n/* -------------------------------------------------------------------- */\n/*      Special case for 24bit data which is pre-byteswapped since      */\n/*      the size falls on a byte boundary ... ugh (#2361).              */\n/* -------------------------------------------------------------------- */\n#ifdef CPL_MSB\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 0] =\n                        static_cast<GByte>(nInWord);\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 1] =\n                        static_cast<GByte>(nInWord >> 8);\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 2] =\n                        static_cast<GByte>(nInWord >> 16);\n#else\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 0] =\n                        static_cast<GByte>(nInWord >> 16);\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 1] =\n                        static_cast<GByte>(nInWord >> 8);\n                    poGDS->pabyBlockBuf[(iBitOffset>>3) + 2] =\n                        static_cast<GByte>(nInWord);\n#endif\n                    iBitOffset += 24;\n                }\n                else\n                {\n                    for( int iBit = 0; iBit < poGDS->nBitsPerSample; ++iBit )\n                    {\n                        // TODO(schwehr): Revisit this block.\n                        if( nInWord &\n                            (1 << (poGDS->nBitsPerSample - 1 - iBit)) )\n                        {\n                            poGDS->pabyBlockBuf[iBitOffset>>3] |=\n                                ( 0x80 >> (iBitOffset & 7) );\n                        }\n                        else\n                        {\n                            // We must explicitly unset the bit as we\n                            // may update an existing block.\n                            poGDS->pabyBlockBuf[iBitOffset>>3] &=\n                                ~(0x80 >>(iBitOffset & 7));\n                        }\n\n                        ++iBitOffset;\n                    }\n                }\n\n                iBitOffset = iBitOffset + iPixelBitSkip - poGDS->nBitsPerSample;\n            }\n        }\n\n        if( poBlock != nullptr )\n        {\n            poBlock->MarkClean();\n            poBlock->DropLock();\n        }\n    }\n\n    poGDS->bLoadedBlockDirty = true;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                             IReadBlock()                             */\n/************************************************************************/\n\nstatic void ExpandPacked8ToByte1( const GByte * const CPL_RESTRICT pabySrc,\n                                  GByte* const CPL_RESTRICT pabyDest,\n                                  GPtrDiff_t nBytes )\n{\n    for( decltype(nBytes) i = 0, j = 0; i < nBytes; i++, j+= 8 )\n    {\n        const GByte byVal = pabySrc[i];\n        pabyDest[j+0] = (byVal >> 7) & 0x1;\n        pabyDest[j+1] = (byVal >> 6) & 0x1;\n        pabyDest[j+2] = (byVal >> 5) & 0x1;\n        pabyDest[j+3] = (byVal >> 4) & 0x1;\n        pabyDest[j+4] = (byVal >> 3) & 0x1;\n        pabyDest[j+5] = (byVal >> 2) & 0x1;\n        pabyDest[j+6] = (byVal >> 1) & 0x1;\n        pabyDest[j+7] = (byVal >> 0) & 0x1;\n    }\n}\n\n#if defined(__GNUC__) || defined(_MSC_VER)\n// Signedness of char implementation dependent, so be explicit.\n// Assumes 2-complement integer types and sign extension of right shifting\n// GCC guarantees such:\n// https://gcc.gnu.org/onlinedocs/gcc/Integers-implementation.html#Integers-implementation\nstatic inline GByte ExtractBitAndConvertTo255(GByte byVal, int nBit)\n{\n    return\n        static_cast<GByte>(static_cast<signed char>(byVal << (7 - nBit)) >> 7);\n}\n#else\n// Portable way\nstatic inline GByte ExtractBitAndConvertTo255(GByte byVal, int nBit)\n{\n    return (byVal & (1 << nBit)) ? 255 : 0;\n}\n#endif\n\nstatic void ExpandPacked8ToByte255( const GByte * const CPL_RESTRICT pabySrc,\n                                    GByte* const CPL_RESTRICT pabyDest,\n                                    GPtrDiff_t nBytes )\n{\n    for( decltype(nBytes) i = 0, j = 0; i < nBytes; i++, j += 8 )\n    {\n        const GByte byVal = pabySrc[i];\n        pabyDest[j+0] = ExtractBitAndConvertTo255(byVal, 7);\n        pabyDest[j+1] = ExtractBitAndConvertTo255(byVal, 6);\n        pabyDest[j+2] = ExtractBitAndConvertTo255(byVal, 5);\n        pabyDest[j+3] = ExtractBitAndConvertTo255(byVal, 4);\n        pabyDest[j+4] = ExtractBitAndConvertTo255(byVal, 3);\n        pabyDest[j+5] = ExtractBitAndConvertTo255(byVal, 2);\n        pabyDest[j+6] = ExtractBitAndConvertTo255(byVal, 1);\n        pabyDest[j+7] = ExtractBitAndConvertTo255(byVal, 0);\n    }\n}\n\nCPLErr GTiffOddBitsBand::IReadBlock( int nBlockXOff, int nBlockYOff,\n                                     void * pImage )\n\n{\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    CPLAssert(nBlocksPerRow != 0);\n    int nBlockId = nBlockXOff + nBlockYOff * nBlocksPerRow;\n\n    if( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        nBlockId += (nBand - 1) * poGDS->nBlocksPerBand;\n\n/* -------------------------------------------------------------------- */\n/*      Handle the case of a strip in a writable file that doesn't      */\n/*      exist yet, but that we want to read.  Just set to zeros and     */\n/*      return.                                                         */\n/* -------------------------------------------------------------------- */\n    if( nBlockId != poGDS->nLoadedBlock )\n    {\n        bool bErrOccurred = false;\n        if( !poGDS->IsBlockAvailable(nBlockId, nullptr, nullptr, &bErrOccurred) )\n        {\n            NullBlock( pImage );\n            if( bErrOccurred )\n                return CE_Failure;\n            return CE_None;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Load the block buffer.                                          */\n/* -------------------------------------------------------------------- */\n    {\n        const CPLErr eErr = poGDS->LoadBlockBuf( nBlockId );\n        if( eErr != CE_None )\n            return eErr;\n    }\n\n    if( poGDS->nBitsPerSample == 1 &&\n        (poGDS->nBands == 1 || poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE ) )\n    {\n/* -------------------------------------------------------------------- */\n/*      Translate 1bit data to eight bit.                               */\n/* -------------------------------------------------------------------- */\n        GPtrDiff_t iDstOffset = 0;\n        const GByte * const CPL_RESTRICT pabyBlockBuf = poGDS->pabyBlockBuf;\n        GByte* CPL_RESTRICT pabyDest = static_cast<GByte *>(pImage);\n\n        for( int iLine = 0; iLine < nBlockYSize; ++iLine )\n        {\n            GPtrDiff_t iSrcOffsetByte = static_cast<GPtrDiff_t>((nBlockXSize + 7) >> 3) * iLine;\n\n            if( !poGDS->bPromoteTo8Bits )\n            {\n                ExpandPacked8ToByte1( pabyBlockBuf + iSrcOffsetByte,\n                                      pabyDest + iDstOffset,\n                                      nBlockXSize / 8 );\n            }\n            else\n            {\n                ExpandPacked8ToByte255( pabyBlockBuf + iSrcOffsetByte,\n                                        pabyDest + iDstOffset,\n                                        nBlockXSize / 8 );\n            }\n            GPtrDiff_t iSrcOffsetBit = (iSrcOffsetByte + nBlockXSize / 8) * 8;\n            iDstOffset += nBlockXSize & ~0x7;\n            const GByte bSetVal = poGDS->bPromoteTo8Bits ? 255 : 1;\n            for( int iPixel = nBlockXSize & ~0x7 ;\n                 iPixel < nBlockXSize;\n                 ++iPixel, ++iSrcOffsetBit )\n            {\n                if( pabyBlockBuf[iSrcOffsetBit >>3] &\n                    (0x80 >> (iSrcOffsetBit & 0x7)) )\n                    static_cast<GByte *>(pImage)[iDstOffset++] = bSetVal;\n                else\n                    static_cast<GByte *>(pImage)[iDstOffset++] = 0;\n            }\n        }\n    }\n/* -------------------------------------------------------------------- */\n/*      Handle the case of 16- and 24-bit floating point data as per    */\n/*      TIFF Technical Note 3.                                          */\n/* -------------------------------------------------------------------- */\n    else if( eDataType == GDT_Float32 )\n    {\n        const int nWordBytes = poGDS->nBitsPerSample / 8;\n        const GByte *pabyImage = poGDS->pabyBlockBuf +\n            ( ( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE ) ? 0 :\n              (nBand - 1) * nWordBytes );\n        const int iSkipBytes =\n            ( poGDS->nPlanarConfig == PLANARCONFIG_SEPARATE ) ?\n            nWordBytes : poGDS->nBands * nWordBytes;\n\n        const auto nBlockPixels = static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize;\n        if( poGDS->nBitsPerSample == 16 )\n        {\n            for( GPtrDiff_t i = 0; i < nBlockPixels; ++i )\n            {\n                static_cast<GUInt32 *>(pImage)[i] =\n                    HalfToFloat( *reinterpret_cast<const GUInt16 *>(pabyImage) );\n                pabyImage += iSkipBytes;\n            }\n        }\n        else if( poGDS->nBitsPerSample == 24 )\n        {\n            for( GPtrDiff_t i = 0; i < nBlockPixels; ++i )\n            {\n#ifdef CPL_MSB\n                static_cast<GUInt32 *>(pImage)[i] =\n                    TripleToFloat(\n                        ( static_cast<GUInt32>(*(pabyImage + 0)) << 16)\n                        | (static_cast<GUInt32>(*(pabyImage + 1)) << 8)\n                        | static_cast<GUInt32>(*(pabyImage + 2)) );\n#else\n                static_cast<GUInt32 *>(pImage)[i] =\n                    TripleToFloat(\n                        ( static_cast<GUInt32>(*(pabyImage + 2)) << 16)\n                        | (static_cast<GUInt32>(*(pabyImage + 1)) << 8)\n                        | static_cast<GUInt32>(*pabyImage) );\n#endif\n                pabyImage += iSkipBytes;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Special case for moving 12bit data somewhat more efficiently.   */\n/* -------------------------------------------------------------------- */\n    else if( poGDS->nBitsPerSample == 12 )\n    {\n        int iPixelBitSkip = 0;\n        int iBandBitOffset = 0;\n\n        if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n        {\n            iPixelBitSkip = poGDS->nBands * poGDS->nBitsPerSample;\n            iBandBitOffset = (nBand - 1) * poGDS->nBitsPerSample;\n        }\n        else\n        {\n            iPixelBitSkip = poGDS->nBitsPerSample;\n        }\n\n        // Bits per line rounds up to next byte boundary.\n        GPtrDiff_t nBitsPerLine = static_cast<GPtrDiff_t>(nBlockXSize) * iPixelBitSkip;\n        if( (nBitsPerLine & 7) != 0 )\n            nBitsPerLine = (nBitsPerLine + 7) & (~7);\n\n        int iPixel = 0;\n        for( int iY = 0; iY < nBlockYSize; ++iY )\n        {\n            GPtrDiff_t iBitOffset = iBandBitOffset + iY * nBitsPerLine;\n\n            for( int iX = 0; iX < nBlockXSize; ++iX )\n            {\n                const auto iByte = iBitOffset >> 3;\n\n                if( (iBitOffset & 0x7) == 0 )\n                {\n                    // Starting on byte boundary.\n\n                    static_cast<GUInt16 *>(pImage)[iPixel++] =\n                        (poGDS->pabyBlockBuf[iByte] << 4)\n                        | (poGDS->pabyBlockBuf[iByte+1] >> 4);\n                }\n                else\n                {\n                    // Starting off byte boundary.\n\n                    static_cast<GUInt16 *>(pImage)[iPixel++] =\n                        ((poGDS->pabyBlockBuf[iByte] & 0xf) << 8)\n                        | (poGDS->pabyBlockBuf[iByte+1]);\n                }\n                iBitOffset += iPixelBitSkip;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Special case for 24bit data which is pre-byteswapped since      */\n/*      the size falls on a byte boundary ... ugh (#2361).              */\n/* -------------------------------------------------------------------- */\n    else if( poGDS->nBitsPerSample == 24 )\n    {\n        int iPixelByteSkip = 0;\n        int iBandByteOffset = 0;\n\n        if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n        {\n            iPixelByteSkip = (poGDS->nBands * poGDS->nBitsPerSample) / 8;\n            iBandByteOffset = ((nBand - 1) * poGDS->nBitsPerSample) / 8;\n        }\n        else\n        {\n            iPixelByteSkip = poGDS->nBitsPerSample / 8;\n        }\n\n        const GPtrDiff_t nBytesPerLine = static_cast<GPtrDiff_t>(nBlockXSize) * iPixelByteSkip;\n\n        GPtrDiff_t iPixel = 0;\n        for( int iY = 0; iY < nBlockYSize; ++iY )\n        {\n            GByte *pabyImage =\n                poGDS->pabyBlockBuf + iBandByteOffset + iY * nBytesPerLine;\n\n            for( int iX = 0; iX < nBlockXSize; ++iX )\n            {\n#ifdef CPL_MSB\n                static_cast<GUInt32 *>(pImage)[iPixel++] =\n                    ( static_cast<GUInt32>(*(pabyImage + 2)) << 16)\n                    | (static_cast<GUInt32>(*(pabyImage + 1)) << 8)\n                    | static_cast<GUInt32>(*(pabyImage + 0));\n#else\n                static_cast<GUInt32 *>(pImage)[iPixel++] =\n                    ( static_cast<GUInt32>(*(pabyImage + 0)) << 16)\n                    | (static_cast<GUInt32>(*(pabyImage + 1)) << 8)\n                    | static_cast<GUInt32>(*(pabyImage + 2));\n#endif\n                pabyImage += iPixelByteSkip;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle 1-32 bit integer data.                                   */\n/* -------------------------------------------------------------------- */\n    else\n    {\n        unsigned iPixelBitSkip = 0;\n        unsigned iBandBitOffset = 0;\n\n        if( poGDS->nPlanarConfig == PLANARCONFIG_CONTIG )\n        {\n            iPixelBitSkip = poGDS->nBands * poGDS->nBitsPerSample;\n            iBandBitOffset = (nBand - 1) * poGDS->nBitsPerSample;\n        }\n        else\n        {\n            iPixelBitSkip = poGDS->nBitsPerSample;\n        }\n\n        // Bits per line rounds up to next byte boundary.\n        GUIntBig nBitsPerLine = static_cast<GUIntBig>(nBlockXSize) * iPixelBitSkip;\n        if( (nBitsPerLine & 7) != 0 )\n            nBitsPerLine = (nBitsPerLine + 7) & (~7);\n\n        const GByte * const pabyBlockBuf = poGDS->pabyBlockBuf;\n        const unsigned nBitsPerSample = poGDS->nBitsPerSample;\n        GPtrDiff_t iPixel = 0;\n\n        if( nBitsPerSample == 1 && eDataType == GDT_Byte )\n        {\n          for( unsigned iY = 0; iY < static_cast<unsigned>(nBlockYSize); ++iY )\n          {\n            GUIntBig iBitOffset = iBandBitOffset + iY * nBitsPerLine;\n\n            for( unsigned iX = 0; iX < static_cast<unsigned>(nBlockXSize); ++iX )\n            {\n                if( pabyBlockBuf[iBitOffset>>3] & (0x80 >>(iBitOffset & 7)) )\n                    static_cast<GByte *>(pImage)[iPixel] = 1;\n                else\n                    static_cast<GByte *>(pImage)[iPixel] = 0;\n                iBitOffset += iPixelBitSkip;\n                iPixel++;\n            }\n          }\n        }\n        else\n        {\n          for( unsigned iY = 0; iY < static_cast<unsigned>(nBlockYSize); ++iY )\n          {\n            GUIntBig iBitOffset = iBandBitOffset + iY * nBitsPerLine;\n\n            for( unsigned iX = 0; iX < static_cast<unsigned>(nBlockXSize); ++iX )\n            {\n                unsigned nOutWord = 0;\n\n                for( unsigned iBit = 0; iBit < nBitsPerSample; ++iBit )\n                {\n                    if( pabyBlockBuf[iBitOffset>>3]\n                        & (0x80 >>(iBitOffset & 7)) )\n                        nOutWord |= (1 << (nBitsPerSample - 1 - iBit));\n                    ++iBitOffset;\n                }\n\n                iBitOffset = iBitOffset + iPixelBitSkip - nBitsPerSample;\n\n                if( eDataType == GDT_Byte )\n                {\n                    static_cast<GByte *>(pImage)[iPixel++] =\n                        static_cast<GByte>(nOutWord);\n                }\n                else if( eDataType == GDT_UInt16 )\n                {\n                  static_cast<GUInt16 *>(pImage)[iPixel++] =\n                      static_cast<GUInt16>(nOutWord);\n                }\n                else if( eDataType == GDT_UInt32 )\n                {\n                  static_cast<GUInt32 *>(pImage)[iPixel++] = nOutWord;\n                }\n                else\n                {\n                    CPLAssert(false);\n                }\n            }\n          }\n        }\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                             GTiffBitmapBand                          */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffBitmapBand : public GTiffOddBitsBand\n{\n    friend class GTiffDataset;\n\n    GDALColorTable *poColorTable = nullptr;\n\n    CPL_DISALLOW_COPY_ASSIGN(GTiffBitmapBand)\n\n  public:\n\n                   GTiffBitmapBand( GTiffDataset *, int );\n    virtual       ~GTiffBitmapBand();\n\n    virtual GDALColorInterp GetColorInterpretation() override;\n    virtual GDALColorTable *GetColorTable() override;\n};\n\n/************************************************************************/\n/*                           GTiffBitmapBand()                          */\n/************************************************************************/\n\nGTiffBitmapBand::GTiffBitmapBand( GTiffDataset *poDSIn, int nBandIn )\n        : GTiffOddBitsBand( poDSIn, nBandIn )\n\n{\n    eDataType = GDT_Byte;\n\n    if( poDSIn->poColorTable != nullptr )\n    {\n        poColorTable = poDSIn->poColorTable->Clone();\n    }\n    else\n    {\n#ifdef ESRI_BUILD\n        poColorTable = nullptr;\n#else\n        const GDALColorEntry oWhite = { 255, 255, 255, 255 };\n        const GDALColorEntry oBlack = { 0, 0, 0, 255 };\n\n        poColorTable = new GDALColorTable();\n\n        if( poDSIn->nPhotometric == PHOTOMETRIC_MINISWHITE )\n        {\n            poColorTable->SetColorEntry( 0, &oWhite );\n            poColorTable->SetColorEntry( 1, &oBlack );\n        }\n        else\n        {\n            poColorTable->SetColorEntry( 0, &oBlack );\n            poColorTable->SetColorEntry( 1, &oWhite );\n        }\n#endif  // not defined ESRI_BUILD.\n    }\n}\n\n/************************************************************************/\n/*                          ~GTiffBitmapBand()                          */\n/************************************************************************/\n\nGTiffBitmapBand::~GTiffBitmapBand()\n\n{\n    delete poColorTable;\n}\n\n/************************************************************************/\n/*                       GetColorInterpretation()                       */\n/************************************************************************/\n\nGDALColorInterp GTiffBitmapBand::GetColorInterpretation()\n\n{\n    if( poGDS->bPromoteTo8Bits )\n        return GCI_Undefined;\n\n    return GCI_PaletteIndex;\n}\n\n/************************************************************************/\n/*                           GetColorTable()                            */\n/************************************************************************/\n\nGDALColorTable *GTiffBitmapBand::GetColorTable()\n\n{\n    if( poGDS->bPromoteTo8Bits )\n        return nullptr;\n\n    return poColorTable;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                          GTiffSplitBitmapBand                        */\n/* ==================================================================== */\n/************************************************************************/\n\nclass GTiffSplitBitmapBand final : public GTiffBitmapBand\n{\n    friend class GTiffDataset;\n    int nLastLineValid;\n\n  public:\n\n                   GTiffSplitBitmapBand( GTiffDataset *, int );\n    virtual       ~GTiffSplitBitmapBand();\n\n    virtual int IGetDataCoverageStatus( int nXOff, int nYOff,\n                                        int nXSize, int nYSize,\n                                        int nMaskFlagStop,\n                                        double* pdfDataPct) override;\n\n    virtual CPLErr IReadBlock( int, int, void * ) override;\n    virtual CPLErr IWriteBlock( int, int, void * ) override;\n};\n\n/************************************************************************/\n/*                       GTiffSplitBitmapBand()                         */\n/************************************************************************/\n\nGTiffSplitBitmapBand::GTiffSplitBitmapBand( GTiffDataset *poDSIn, int nBandIn )\n        : GTiffBitmapBand( poDSIn, nBandIn )\n        , nLastLineValid( -1 )\n\n{\n    nBlockXSize = poDS->GetRasterXSize();\n    nBlockYSize = 1;\n}\n\n/************************************************************************/\n/*                      ~GTiffSplitBitmapBand()                         */\n/************************************************************************/\n\nGTiffSplitBitmapBand::~GTiffSplitBitmapBand() {}\n\n\n/************************************************************************/\n/*                       IGetDataCoverageStatus()                       */\n/************************************************************************/\n\nint GTiffSplitBitmapBand::IGetDataCoverageStatus( int , int ,\n                                             int , int ,\n                                             int ,\n                                             double* )\n{\n     return GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED |\n            GDAL_DATA_COVERAGE_STATUS_DATA;\n}\n\n/************************************************************************/\n/*                            GTIFFErrorHandler()                       */\n/************************************************************************/\n\nnamespace {\nclass GTIFFErrorStruct final\n{\n  public:\n    CPLErr type;\n    CPLErrorNum no;\n    CPLString msg{};\n\n    GTIFFErrorStruct() : type(CE_None), no(CPLE_None) {}\n    GTIFFErrorStruct(CPLErr eErrIn, CPLErrorNum noIn, const char* msgIn) :\n        type(eErrIn), no(noIn), msg(msgIn) {}\n};\n}\n\nstatic void CPL_STDCALL GTIFFErrorHandler( CPLErr eErr, CPLErrorNum no,\n                                           const char* msg )\n{\n    std::vector<GTIFFErrorStruct>* paoErrors =\n        static_cast<std::vector<GTIFFErrorStruct> *>(\n            CPLGetErrorHandlerUserData());\n    paoErrors->push_back(GTIFFErrorStruct(eErr, no, msg));\n}\n\n/************************************************************************/\n/*                             IReadBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffSplitBitmapBand::IReadBlock( int /* nBlockXOff */, int nBlockYOff,\n                                         void * pImage )\n\n{\n    if( nLastLineValid >= 0 && nBlockYOff > nLastLineValid )\n        return CE_Failure;\n\n    if( !poGDS->SetDirectory() )\n        return CE_Failure;\n\n    if( poGDS->pabyBlockBuf == nullptr )\n    {\n        poGDS->pabyBlockBuf =\n            static_cast<GByte *>(\n                VSI_MALLOC_VERBOSE(TIFFScanlineSize(poGDS->hTIFF)) );\n        if( poGDS->pabyBlockBuf == nullptr )\n        {\n            return CE_Failure;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Read through to target scanline.                                */\n/* -------------------------------------------------------------------- */\n    if( poGDS->nLastLineRead >= nBlockYOff )\n        poGDS->nLastLineRead = -1;\n\n    while( poGDS->nLastLineRead < nBlockYOff )\n    {\n        ++poGDS->nLastLineRead;\n\n        std::vector<GTIFFErrorStruct> aoErrors;\n        CPLPushErrorHandlerEx(GTIFFErrorHandler, &aoErrors);\n        int nRet = TIFFReadScanline( poGDS->hTIFF, poGDS->pabyBlockBuf,\n                                     poGDS->nLastLineRead, 0 );\n        CPLPopErrorHandler();\n\n        for( size_t iError = 0; iError < aoErrors.size(); ++iError )\n        {\n            CPLError( aoErrors[iError].type,\n                      aoErrors[iError].no,\n                      \"%s\",\n                      aoErrors[iError].msg.c_str() );\n            // FAX decoding only handles EOF condition as a warning, so\n            // catch it so as to turn on error when attempting to read\n            // following lines, to avoid performance issues.\n            if(  !poGDS->bIgnoreReadErrors &&\n                    aoErrors[iError].msg.find(\"Premature EOF\") !=\n                                                    std::string::npos )\n            {\n                nLastLineValid = nBlockYOff;\n                nRet = -1;\n            }\n        }\n\n        if( nRet == -1\n            && !poGDS->bIgnoreReadErrors )\n        {\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"TIFFReadScanline() failed.\" );\n            poGDS->nLastLineRead = -1;\n            return CE_Failure;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Translate 1bit data to eight bit.                               */\n/* -------------------------------------------------------------------- */\n    int iSrcOffset = 0;\n    int iDstOffset = 0;\n\n    for( int iPixel = 0; iPixel < nBlockXSize; ++iPixel, ++iSrcOffset )\n    {\n        if( poGDS->pabyBlockBuf[iSrcOffset >>3] & (0x80 >> (iSrcOffset & 0x7)) )\n            static_cast<GByte *>(pImage)[iDstOffset++] = 1;\n        else\n            static_cast<GByte *>(pImage)[iDstOffset++] = 0;\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                            IWriteBlock()                             */\n/************************************************************************/\n\nCPLErr GTiffSplitBitmapBand::IWriteBlock( int /* nBlockXOff */,\n                                          int /* nBlockYOff */,\n                                          void * /* pImage */ )\n\n{\n    CPLError( CE_Failure, CPLE_AppDefined,\n              \"Split bitmap bands are read-only.\" );\n    return CE_Failure;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                            GTiffDataset                              */\n/* ==================================================================== */\n/************************************************************************/\n\n/************************************************************************/\n/*                            GTiffDataset()                            */\n/************************************************************************/\n\nGTiffDataset::GTiffDataset() :\n    hTIFF(nullptr),\n    fpL(nullptr),\n#if defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n    nStripArrayAlloc(0),\n    m_nFileSize(0),\n#endif\n    bStreamingIn(false),\n    bStreamingOut(false),\n    fpToWrite(nullptr),\n    nLastWrittenBlockId(-1),\n    ppoActiveDSRef(nullptr),\n    poActiveDS(nullptr),\n    bScanDeferred(true),\n    nDirOffset(0),\n    bBase(true),\n    bCloseTIFFHandle(false),\n    nPlanarConfig(0),\n    nSamplesPerPixel(0),\n    nBitsPerSample(0),\n    nRowsPerStrip(0),\n    nPhotometric(0),\n    nSampleFormat(0),\n    nCompression(0),\n    nBlocksPerBand(0),\n    nBlockXSize(0),\n    nBlockYSize(0),\n    nLoadedBlock(-1),\n    bLoadedBlockDirty(false),\n    pabyBlockBuf(nullptr),\n    bWriteErrorInFlushBlockBuf(false),\n    bLookedForProjection(false),\n    bLookedForMDAreaOrPoint(false),\n    bGeoTransformValid(false),\n    bTreatAsRGBA(false),\n    bCrystalized(true),\n    poColorTable(nullptr),\n    nOverviewCount(0),\n    papoOverviewDS(nullptr),\n    nJPEGOverviewVisibilityCounter(0),\n    nJPEGOverviewCount(-1),\n    nJPEGOverviewCountOri(0),\n    papoJPEGOverviewDS(nullptr),\n    nGCPCount(0),\n    pasGCPList(nullptr),\n    bGeoTIFFInfoChanged(false),\n    bForceUnsetGTOrGCPs(false),\n    bForceUnsetProjection(false),\n    bNoDataChanged(false),\n    bNoDataSet(false),\n    dfNoDataValue(-9999.0),\n    bMetadataChanged(false),\n    bColorProfileMetadataChanged(false),\n    bNeedsRewrite(false),\n    osProfile(szPROFILE_GDALGeoTIFF),\n    papszCreationOptions(nullptr),\n    bLoadingOtherBands(false),\n    pabyTempWriteBuffer(nullptr),\n    nTempWriteBufferSize(0),\n    poMaskDS(nullptr),\n    poBaseDS(nullptr),\n    bWriteEmptyTiles(true),\n    bFillEmptyTilesAtClosing(false),\n    nLastLineRead(-1),\n    nLastBandRead(-1),\n    bTreatAsSplit(false),\n    bTreatAsSplitBitmap(false),\n    bClipWarn(false),\n    bIMDRPCMetadataLoaded(false),\n    papszMetadataFiles(nullptr),\n    bEXIFMetadataLoaded(false),\n    bICCMetadataLoaded(false),\n    bHasWarnedDisableAggressiveBandCaching(false),\n    bDontReloadFirstBlock(false),\n    nZLevel(-1),\n    nLZMAPreset(-1),\n    nZSTDLevel(-1),\n    nWebPLevel(-1),\n    bWebPLossless(false),\n    nJpegQuality(-1),\n    nJpegTablesMode(-1),\n    bPromoteTo8Bits(false),\n    bDebugDontWriteBlocks(false),\n    bIsFinalized(false),\n    bIgnoreReadErrors(false),\n    bDirectIO(false),\n    eVirtualMemIOUsage(VIRTUAL_MEM_IO_NO),\n    psVirtualMemIOMapping(nullptr),\n    eGeoTIFFKeysFlavor(GEOTIFF_KEYS_STANDARD),\n    pBaseMapping(nullptr),\n    nRefBaseMapping(0),\n    bHasDiscardedLsb(false),\n    poCompressThreadPool(nullptr),\n    hCompressThreadPoolMutex(nullptr),\n    m_pTempBufferForCommonDirectIO(nullptr),\n    m_nTempBufferForCommonDirectIOSize(0),\n    m_bReadGeoTransform(false),\n    m_bLoadPam(false),\n    m_bHasGotSiblingFiles(false),\n    m_bHasIdentifiedAuthorizedGeoreferencingSources(false),\n    m_nPAMGeorefSrcIndex(-1),\n    m_nINTERNALGeorefSrcIndex(-1),\n    m_nTABFILEGeorefSrcIndex(-1),\n    m_nWORLDFILEGeorefSrcIndex(-1),\n    m_nGeoTransformGeorefSrcIndex(-1)\n{\n    adfGeoTransform[0] = 0.0;\n    adfGeoTransform[1] = 1.0;\n    adfGeoTransform[2] = 0.0;\n    adfGeoTransform[3] = 0.0;\n    adfGeoTransform[4] = 0.0;\n    adfGeoTransform[5] = 1.0;\n\n    bDebugDontWriteBlocks =\n        CPLTestBool(CPLGetConfigOption(\"GTIFF_DONT_WRITE_BLOCKS\", \"NO\"));\n\n    bIgnoreReadErrors =\n        CPLTestBool(CPLGetConfigOption(\"GTIFF_IGNORE_READ_ERRORS\", \"NO\"));\n\n    bDirectIO = CPLTestBool(CPLGetConfigOption(\"GTIFF_DIRECT_IO\", \"NO\"));\n\n    const char* pszVirtualMemIO =\n        CPLGetConfigOption(\"GTIFF_VIRTUAL_MEM_IO\", \"NO\");\n    if( EQUAL(pszVirtualMemIO, \"IF_ENOUGH_RAM\") )\n        eVirtualMemIOUsage = VIRTUAL_MEM_IO_IF_ENOUGH_RAM;\n    else if( CPLTestBool(pszVirtualMemIO) )\n        eVirtualMemIOUsage = VIRTUAL_MEM_IO_YES;\n\n    oSRS.SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);\n}\n\n/************************************************************************/\n/*                           ~GTiffDataset()                            */\n/************************************************************************/\n\nGTiffDataset::~GTiffDataset()\n\n{\n    Finalize();\n    if( !osTmpFilename.empty() )\n        VSIUnlink(osTmpFilename);\n}\n\n/************************************************************************/\n/*                             Finalize()                               */\n/************************************************************************/\n\nint GTiffDataset::Finalize()\n{\n    if( bIsFinalized )\n        return FALSE;\n\n    bool bHasDroppedRef = false;\n\n    Crystalize();\n\n    if( bColorProfileMetadataChanged )\n    {\n        SaveICCProfile(this, nullptr, nullptr, 0);\n        bColorProfileMetadataChanged = false;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Handle forcing xml:ESRI data to be written to PAM.              */\n/* -------------------------------------------------------------------- */\n    if( CPLTestBool(CPLGetConfigOption( \"ESRI_XML_PAM\", \"NO\" )) )\n    {\n        char **papszESRIMD = GTiffDataset::GetMetadata(\"xml:ESRI\");\n        if( papszESRIMD )\n        {\n            GDALPamDataset::SetMetadata( papszESRIMD, \"xml:ESRI\");\n        }\n    }\n\n    if( psVirtualMemIOMapping )\n        CPLVirtualMemFree( psVirtualMemIOMapping );\n    psVirtualMemIOMapping = nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Fill in missing blocks with empty data.                         */\n/* -------------------------------------------------------------------- */\n    if( bFillEmptyTilesAtClosing )\n    {\n/* -------------------------------------------------------------------- */\n/*  Ensure any blocks write cached by GDAL gets pushed through libtiff. */\n/* -------------------------------------------------------------------- */\n        FlushCacheInternal( false /* do not call FlushDirectory */ );\n\n        FillEmptyTiles();\n        bFillEmptyTilesAtClosing = false;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Force a complete flush, including either rewriting(moving)      */\n/*      of writing in place the current directory.                      */\n/* -------------------------------------------------------------------- */\n    FlushCacheInternal( true );\n\n    // Destroy compression pool.\n    if( poCompressThreadPool )\n    {\n        poCompressThreadPool->WaitCompletion();\n\n        // Save thread pool for later reuse.\n        {\n            std::lock_guard<std::mutex> oLock(gMutexThreadPool);\n            delete gpoCompressThreadPool;\n            gpoCompressThreadPool = poCompressThreadPool;\n            poCompressThreadPool = nullptr;\n        }\n\n        for( int i = 0; i < static_cast<int>(asCompressionJobs.size()); ++i )\n        {\n            CPLFree(asCompressionJobs[i].pabyBuffer);\n            if( asCompressionJobs[i].pszTmpFilename )\n            {\n                VSIUnlink(asCompressionJobs[i].pszTmpFilename);\n                CPLFree(asCompressionJobs[i].pszTmpFilename);\n            }\n        }\n        CPLDestroyMutex(hCompressThreadPoolMutex);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If there is still changed metadata, then presumably we want     */\n/*      to push it into PAM.                                            */\n/* -------------------------------------------------------------------- */\n    if( bMetadataChanged )\n    {\n        PushMetadataToPam();\n        bMetadataChanged = false;\n        GDALPamDataset::FlushCache();\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Cleanup overviews.                                              */\n/* -------------------------------------------------------------------- */\n    if( bBase )\n    {\n        for( int i = 0; i < nOverviewCount; ++i )\n        {\n            delete papoOverviewDS[i];\n            bHasDroppedRef = true;\n        }\n        nOverviewCount = 0;\n\n        for( int i = 0; i < nJPEGOverviewCountOri; ++i )\n        {\n            delete papoJPEGOverviewDS[i];\n            bHasDroppedRef = true;\n        }\n        nJPEGOverviewCount = 0;\n        nJPEGOverviewCountOri = 0;\n        CPLFree( papoJPEGOverviewDS );\n        papoJPEGOverviewDS = nullptr;\n    }\n\n    // If we are a mask dataset, we can have overviews, but we don't\n    // own them. We can only free the array, not the overviews themselves.\n    CPLFree( papoOverviewDS );\n    papoOverviewDS = nullptr;\n\n    // poMaskDS is owned by the main image and the overviews\n    // so because of the latter case, we can delete it even if\n    // we are not the base image.\n    if( poMaskDS )\n    {\n        delete poMaskDS;\n        poMaskDS = nullptr;\n        bHasDroppedRef = true;\n    }\n\n    if( poColorTable != nullptr )\n        delete poColorTable;\n    poColorTable = nullptr;\n\n    if( bBase || bCloseTIFFHandle )\n    {\n        XTIFFClose( hTIFF );\n        hTIFF = nullptr;\n        if( fpL != nullptr )\n        {\n            if( VSIFCloseL( fpL ) != 0 )\n            {\n                CPLError(CE_Failure, CPLE_FileIO, \"I/O error\");\n            }\n            fpL = nullptr;\n        }\n    }\n\n    if( fpToWrite != nullptr )\n    {\n        if( VSIFCloseL( fpToWrite ) != 0 )\n        {\n            CPLError(CE_Failure, CPLE_FileIO, \"I/O error\");\n        }\n        fpToWrite = nullptr;\n    }\n\n    if( nGCPCount > 0 )\n    {\n        GDALDeinitGCPs( nGCPCount, pasGCPList );\n        CPLFree( pasGCPList );\n        pasGCPList = nullptr;\n        nGCPCount = 0;\n    }\n\n    CSLDestroy( papszCreationOptions );\n    papszCreationOptions = nullptr;\n\n    CPLFree(pabyTempWriteBuffer);\n    pabyTempWriteBuffer = nullptr;\n\n    if( ppoActiveDSRef != nullptr && *ppoActiveDSRef == this )\n        *ppoActiveDSRef = nullptr;\n    ppoActiveDSRef = nullptr;\n\n    bIMDRPCMetadataLoaded = false;\n    CSLDestroy(papszMetadataFiles);\n    papszMetadataFiles = nullptr;\n\n    VSIFree(m_pTempBufferForCommonDirectIO);\n    m_pTempBufferForCommonDirectIO = nullptr;\n\n    bIsFinalized = true;\n\n    return bHasDroppedRef;\n}\n\n/************************************************************************/\n/*                        CloseDependentDatasets()                      */\n/************************************************************************/\n\nint GTiffDataset::CloseDependentDatasets()\n{\n    if( !bBase )\n        return FALSE;\n\n    int bHasDroppedRef = GDALPamDataset::CloseDependentDatasets();\n\n    bHasDroppedRef |= Finalize();\n\n    return bHasDroppedRef;\n}\n\n/************************************************************************/\n/*                        GetJPEGOverviewCount()                        */\n/************************************************************************/\n\nint GTiffDataset::GetJPEGOverviewCount()\n{\n    if( nJPEGOverviewCount >= 0 )\n        return nJPEGOverviewCount;\n\n    nJPEGOverviewCount = 0;\n    if( !bBase || eAccess != GA_ReadOnly || nCompression != COMPRESSION_JPEG ||\n        (nRasterXSize < 256 && nRasterYSize < 256) ||\n        !CPLTestBool(CPLGetConfigOption(\"GTIFF_IMPLICIT_JPEG_OVR\", \"YES\")) ||\n        GDALGetDriverByName(\"JPEG\") == nullptr )\n    {\n        return 0;\n    }\n    const char* pszSourceColorSpace =\n        oGTiffMDMD.GetMetadataItem( \"SOURCE_COLOR_SPACE\", \"IMAGE_STRUCTURE\" );\n    if( pszSourceColorSpace != nullptr && EQUAL(pszSourceColorSpace, \"CMYK\") )\n    {\n        // We cannot handle implicit overviews on JPEG CMYK datasets converted\n        // to RGBA This would imply doing the conversion in\n        // GTiffJPEGOverviewBand.\n        return 0;\n    }\n\n    // libjpeg-6b only supports 2, 4 and 8 scale denominators.\n    // TODO: Later versions support more.\n    for( int i = 2; i >= 0; i-- )\n    {\n        if( nRasterXSize >= (256 << i) || nRasterYSize >= (256 << i) )\n        {\n            nJPEGOverviewCount = i + 1;\n            break;\n        }\n    }\n    if( nJPEGOverviewCount == 0 )\n        return 0;\n\n    if( !SetDirectory() )\n    {\n        nJPEGOverviewCount = 0;\n        return 0;\n    }\n\n    // Get JPEG tables.\n    uint32 nJPEGTableSize = 0;\n    void* pJPEGTable = nullptr;\n    GByte abyFFD8[] = { 0xFF, 0xD8 };\n    if( TIFFGetField(hTIFF, TIFFTAG_JPEGTABLES, &nJPEGTableSize, &pJPEGTable) )\n    {\n        if( pJPEGTable == nullptr ||\n            nJPEGTableSize > INT_MAX ||\n            static_cast<GByte*>(pJPEGTable)[nJPEGTableSize-1] != 0xD9 )\n        {\n            nJPEGOverviewCount = 0;\n            return 0;\n        }\n        nJPEGTableSize--;  // Remove final 0xD9.\n    }\n    else\n    {\n        pJPEGTable = abyFFD8;\n        nJPEGTableSize = 2;\n    }\n\n    papoJPEGOverviewDS =\n        static_cast<GTiffJPEGOverviewDS **>(\n            CPLMalloc( sizeof(GTiffJPEGOverviewDS*) * nJPEGOverviewCount ) );\n    for( int i = 0; i < nJPEGOverviewCount; ++i )\n    {\n        papoJPEGOverviewDS[i] =\n            new GTiffJPEGOverviewDS(\n                this, i + 1,\n                pJPEGTable, static_cast<int>(nJPEGTableSize) );\n    }\n\n    nJPEGOverviewCountOri = nJPEGOverviewCount;\n\n    return nJPEGOverviewCount;\n}\n\n/************************************************************************/\n/*                           FillEmptyTiles()                           */\n/************************************************************************/\n\nvoid GTiffDataset::FillEmptyTiles()\n\n{\n    if( !SetDirectory() )\n        return;\n\n/* -------------------------------------------------------------------- */\n/*      How many blocks are there in this file?                         */\n/* -------------------------------------------------------------------- */\n    const int nBlockCount =\n        nPlanarConfig == PLANARCONFIG_SEPARATE ?\n        nBlocksPerBand * nBands :\n        nBlocksPerBand;\n\n/* -------------------------------------------------------------------- */\n/*      Fetch block maps.                                               */\n/* -------------------------------------------------------------------- */\n    toff_t *panByteCounts = nullptr;\n\n    if( TIFFIsTiled( hTIFF ) )\n        TIFFGetField( hTIFF, TIFFTAG_TILEBYTECOUNTS, &panByteCounts );\n    else\n        TIFFGetField( hTIFF, TIFFTAG_STRIPBYTECOUNTS, &panByteCounts );\n\n    if( panByteCounts == nullptr )\n    {\n        // Got here with libtiff 3.9.3 and tiff_write_8 test.\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"FillEmptyTiles() failed because panByteCounts == NULL\" );\n        return;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Prepare a blank data buffer to write for uninitialized blocks.  */\n/* -------------------------------------------------------------------- */\n    const GPtrDiff_t nBlockBytes =\n        TIFFIsTiled( hTIFF ) ?\n        static_cast<GPtrDiff_t>(TIFFTileSize(hTIFF)) :\n        static_cast<GPtrDiff_t>(TIFFStripSize(hTIFF));\n\n    GByte *pabyData =\n        static_cast<GByte *>( VSI_CALLOC_VERBOSE(nBlockBytes, 1) );\n    if( pabyData == nullptr )\n    {\n        return;\n    }\n\n    // Force tiles completely filled with the nodata value to be written.\n    bWriteEmptyTiles = true;\n\n/* -------------------------------------------------------------------- */\n/*      If set, fill data buffer with no data value.                    */\n/* -------------------------------------------------------------------- */\n    if( bNoDataSet && dfNoDataValue != 0.0 )\n    {\n        const GDALDataType eDataType = GetRasterBand( 1 )->GetRasterDataType();\n        const int nDataTypeSize = GDALGetDataTypeSizeBytes( eDataType );\n        if( nDataTypeSize &&\n            nDataTypeSize * 8 == static_cast<int>(nBitsPerSample) )\n        {\n            GDALCopyWords64( &dfNoDataValue, GDT_Float64, 0,\n                           pabyData, eDataType,\n                           nDataTypeSize,\n                           nBlockBytes / nDataTypeSize );\n        }\n        else if( nDataTypeSize )\n        {\n            // Handle non power-of-two depths.\n            // Ideally make a packed buffer, but that is a bit tedious,\n            // so use the normal I/O interfaces.\n\n            CPLFree( pabyData );\n\n            pabyData = static_cast<GByte *>(\n                VSI_MALLOC3_VERBOSE(nBlockXSize, nBlockYSize, nDataTypeSize) );\n            if( pabyData == nullptr )\n                return;\n            GDALCopyWords64( &dfNoDataValue, GDT_Float64, 0,\n                           pabyData, eDataType,\n                           nDataTypeSize,\n                           static_cast<GPtrDiff_t>(nBlockXSize) * nBlockYSize );\n            const int nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n            for( int iBlock = 0; iBlock < nBlockCount; ++iBlock )\n            {\n                if( panByteCounts[iBlock] == 0 )\n                {\n                    if( nPlanarConfig == PLANARCONFIG_SEPARATE || nBands == 1 )\n                    {\n                        CPL_IGNORE_RET_VAL( GetRasterBand(\n                            1 + iBlock / nBlocksPerBand )->WriteBlock(\n                                (iBlock % nBlocksPerBand) % nBlocksPerRow,\n                                (iBlock % nBlocksPerBand) / nBlocksPerRow,\n                                pabyData ) );\n                    }\n                    else\n                    {\n                        // In contig case, don't directly call WriteBlock(), as\n                        // it could cause useless decompression-recompression.\n                        const int nXOff =\n                            (iBlock % nBlocksPerRow) * nBlockXSize;\n                        const int nYOff =\n                            (iBlock / nBlocksPerRow) * nBlockYSize;\n                        const int nXSize =\n                            (nXOff + nBlockXSize <= nRasterXSize) ?\n                            nBlockXSize : nRasterXSize - nXOff;\n                        const int nYSize =\n                            (nYOff + nBlockYSize <= nRasterYSize) ?\n                            nBlockYSize : nRasterYSize - nYOff;\n                        for( int iBand = 1; iBand <= nBands; ++iBand )\n                        {\n                            CPL_IGNORE_RET_VAL( GetRasterBand( iBand )->\n                                RasterIO(\n                                    GF_Write, nXOff, nYOff, nXSize, nYSize,\n                                    pabyData, nXSize, nYSize,\n                                    eDataType, 0, 0, nullptr ) );\n                        }\n                    }\n                }\n            }\n            CPLFree( pabyData );\n            return;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      When we must fill with zeroes, try to create non-sparse file    */\n/*      w.r.t TIFF spec ... as a sparse file w.r.t filesystem, ie by    */\n/*      seeking to end of file instead of writing zero blocks.          */\n/* -------------------------------------------------------------------- */\n    else if( nCompression == COMPRESSION_NONE && (nBitsPerSample % 8) == 0 )\n    {\n        // Only use libtiff to write the first sparse block to ensure that it\n        // will serialize offset and count arrays back to disk.\n        int nCountBlocksToZero = 0;\n        for( int iBlock = 0; iBlock < nBlockCount; ++iBlock )\n        {\n            if( panByteCounts[iBlock] == 0 )\n            {\n                if( nCountBlocksToZero == 0 )\n                {\n                    const bool bWriteEmptyTilesBak = bWriteEmptyTiles;\n                    bWriteEmptyTiles = true;\n                    const bool bOK =\n                        WriteEncodedTileOrStrip( iBlock, pabyData,\n                                                 FALSE ) == CE_None;\n                    bWriteEmptyTiles = bWriteEmptyTilesBak;\n                    if( !bOK )\n                        break;\n                }\n                nCountBlocksToZero++;\n            }\n        }\n        CPLFree( pabyData );\n\n        --nCountBlocksToZero;\n\n        // And then seek to end of file for other ones.\n        if( nCountBlocksToZero > 0 )\n        {\n            toff_t *panByteOffsets = nullptr;\n\n            if( TIFFIsTiled( hTIFF ) )\n                TIFFGetField( hTIFF, TIFFTAG_TILEOFFSETS, &panByteOffsets );\n            else\n                TIFFGetField( hTIFF, TIFFTAG_STRIPOFFSETS, &panByteOffsets );\n\n            if( panByteOffsets == nullptr )\n            {\n                CPLError(\n                    CE_Failure, CPLE_AppDefined,\n                    \"FillEmptyTiles() failed because panByteOffsets == NULL\");\n                return;\n            }\n\n            VSILFILE* fpTIF = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n            VSIFSeekL( fpTIF, 0, SEEK_END );\n            const vsi_l_offset nOffset = VSIFTellL(fpTIF);\n\n            vsi_l_offset iBlockToZero = 0;\n            for( int iBlock = 0; iBlock < nBlockCount; ++iBlock )\n            {\n                if( panByteCounts[iBlock] == 0 )\n                {\n                    panByteOffsets[iBlock] = static_cast<toff_t>(\n                                        nOffset + iBlockToZero * nBlockBytes);\n                    panByteCounts[iBlock] = nBlockBytes;\n                    iBlockToZero++;\n                }\n            }\n            CPLAssert( iBlockToZero ==\n                       static_cast<vsi_l_offset>(nCountBlocksToZero) );\n\n            if( VSIFTruncateL( fpTIF,\n                               nOffset + iBlockToZero * nBlockBytes ) != 0 )\n            {\n                CPLError(CE_Failure, CPLE_FileIO,\n                         \"Cannot initialize empty blocks\");\n            }\n        }\n\n        return;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Check all blocks, writing out data for uninitialized blocks.    */\n/* -------------------------------------------------------------------- */\n\n    GByte* pabyRaw = nullptr;\n    vsi_l_offset nRawSize = 0;\n    for( int iBlock = 0; iBlock < nBlockCount; ++iBlock )\n    {\n        if( panByteCounts[iBlock] == 0 )\n        {\n            if( pabyRaw == nullptr )\n            {\n                if( WriteEncodedTileOrStrip( iBlock, pabyData, FALSE\n                                                                ) != CE_None )\n                    break;\n\n                vsi_l_offset nOffset = 0;\n                bool b = IsBlockAvailable( iBlock, &nOffset, &nRawSize);\n#ifdef DEBUG\n                CPLAssert(b);\n#else\n                CPL_IGNORE_RET_VAL(b);\n#endif\n                // When using compression, get back the compressed block\n                // so we can use the raw API to write it faster.\n                if( nCompression != COMPRESSION_NONE )\n                {\n                    pabyRaw = static_cast<GByte*>(\n                            VSI_MALLOC_VERBOSE(static_cast<size_t>(nRawSize)));\n                    if( pabyRaw )\n                    {\n                        VSILFILE* fp = VSI_TIFFGetVSILFile(\n                                                    TIFFClientdata( hTIFF ));\n                        const vsi_l_offset nCurOffset = VSIFTellL(fp);\n                        VSIFSeekL(fp, nOffset, SEEK_SET);\n                        VSIFReadL(pabyRaw, 1, static_cast<size_t>(nRawSize), fp);\n                        VSIFSeekL(fp, nCurOffset, SEEK_SET);\n                    }\n                }\n            }\n            else\n            {\n                WriteRawStripOrTile( iBlock, pabyRaw,\n                                     static_cast<GPtrDiff_t>(nRawSize) );\n            }\n        }\n    }\n\n    CPLFree( pabyData );\n    VSIFree( pabyRaw );\n}\n\n/************************************************************************/\n/*                         HasOnlyNoData()                              */\n/************************************************************************/\n\ntemplate<class T>\nstatic inline bool IsEqualToNoData( T value, T noDataValue )\n{\n    return value == noDataValue;\n}\n\ntemplate<> bool IsEqualToNoData<float>( float value, float noDataValue )\n{\n    return\n        CPLIsNan(noDataValue) ?\n        CPL_TO_BOOL(CPLIsNan(value)) : value == noDataValue;\n}\n\ntemplate<> bool IsEqualToNoData<double>( double value, double noDataValue )\n{\n    return\n        CPLIsNan(noDataValue) ?\n        CPL_TO_BOOL(CPLIsNan(value)) : value == noDataValue;\n}\n\ntemplate<class T>\nbool GTiffDataset::HasOnlyNoDataT( const T* pBuffer, int nWidth, int nHeight,\n                                   int nLineStride, int nComponents ) const\n{\n    const T noDataValue = static_cast<T>((bNoDataSet) ? dfNoDataValue : 0.0);\n    // Fast test: check the 4 corners and the middle pixel.\n    for( int iBand = 0; iBand < nComponents; iBand++ )\n    {\n        if( !(IsEqualToNoData(pBuffer[iBand], noDataValue) &&\n              IsEqualToNoData(\n                  pBuffer[static_cast<size_t>(nWidth - 1) * nComponents +\n                          iBand],\n                  noDataValue) &&\n              IsEqualToNoData(\n                  pBuffer[(static_cast<size_t>(nHeight-1)/2 * nLineStride +\n                           (nWidth - 1)/2) * nComponents + iBand],\n                  noDataValue) &&\n              IsEqualToNoData(\n                  pBuffer[static_cast<size_t>(nHeight - 1) * nLineStride *\n                          nComponents + iBand], noDataValue) &&\n              IsEqualToNoData(\n                  pBuffer[(static_cast<size_t>(nHeight - 1) * nLineStride +\n                           nWidth - 1) * nComponents + iBand], noDataValue) ) )\n        {\n            return false;\n        }\n    }\n\n    // Test all pixels.\n    for( int iY = 0; iY < nHeight; iY++ )\n    {\n        for( int iX = 0; iX < nWidth * nComponents; iX++ )\n        {\n            if( !IsEqualToNoData(\n                   pBuffer[iY * static_cast<size_t>(nLineStride) * nComponents +\n                           iX], noDataValue) )\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nbool GTiffDataset::HasOnlyNoData( const void* pBuffer, int nWidth, int nHeight,\n                                  int nLineStride, int nComponents )\n{\n    const GDALDataType eDT = GetRasterBand(1)->GetRasterDataType();\n\n    // In the case where the nodata is 0, we can compare several bytes at\n    // once. Select the largest natural integer type for the architecture.\n#if SIZEOF_VOIDP == 8 || defined(__x86_64__)\n    // We test __x86_64__ for x32 arch where SIZEOF_VOIDP == 4\n    typedef GUInt64 WordType;\n#else\n    typedef unsigned int WordType;\n#endif\n    if( (!bNoDataSet || dfNoDataValue == 0.0) && nWidth == nLineStride\n#ifdef CPL_CPU_REQUIRES_ALIGNED_ACCESS\n        && CPL_IS_ALIGNED(pBuffer, sizeof(WordType))\n#endif\n        )\n    {\n        const GByte* pabyBuffer = static_cast<const GByte*>(pBuffer);\n        const size_t nSize = static_cast<size_t>(nWidth) * nHeight *\n                             nComponents * GDALGetDataTypeSizeBytes(eDT);\n        size_t i = 0;\n        for( ; i + sizeof(WordType) - 1 < nSize; i += sizeof(WordType) )\n        {\n            if( *(reinterpret_cast<const WordType*>(pabyBuffer + i)) )\n                return false;\n        }\n        for( ; i < nSize; i++ )\n        {\n            if( pabyBuffer[i] )\n                return false;\n        }\n        return true;\n    }\n\n    if( nBitsPerSample == 8 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_INT )\n        {\n            return HasOnlyNoDataT(static_cast<const signed char*>(pBuffer),\n                                  nWidth, nHeight, nLineStride, nComponents);\n        }\n        return HasOnlyNoDataT(static_cast<const GByte*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 16 && eDT == GDT_UInt16 )\n    {\n        return HasOnlyNoDataT(static_cast<const GUInt16*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 16 && eDT== GDT_Int16 )\n    {\n        return HasOnlyNoDataT(static_cast<const GInt16*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_UInt32 )\n    {\n        return HasOnlyNoDataT(static_cast<const GUInt32*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_Int32 )\n    {\n        return HasOnlyNoDataT(static_cast<const GInt32*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_Float32 )\n    {\n        return HasOnlyNoDataT(static_cast<const float*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    if( nBitsPerSample == 64 && eDT == GDT_Float64 )\n    {\n        return HasOnlyNoDataT(static_cast<const double*>(pBuffer),\n                              nWidth, nHeight, nLineStride, nComponents);\n    }\n    return false;\n}\n\n/************************************************************************/\n/*                     IsFirstPixelEqualToNoData()                      */\n/************************************************************************/\n\ninline bool GTiffDataset::IsFirstPixelEqualToNoData( const void* pBuffer )\n{\n    const GDALDataType eDT = GetRasterBand(1)->GetRasterDataType();\n    const double dfEffectiveNoData = (bNoDataSet) ? dfNoDataValue : 0.0;\n    if( nBitsPerSample == 8 )\n    {\n        if( nSampleFormat == SAMPLEFORMAT_INT )\n        {\n            return GDALIsValueInRange<signed char>(dfEffectiveNoData) &&\n                   *(static_cast<const signed char*>(pBuffer)) ==\n                        static_cast<signed char>(dfEffectiveNoData);\n        }\n        return GDALIsValueInRange<GByte>(dfEffectiveNoData) &&\n               *(static_cast<const GByte*>(pBuffer)) ==\n                        static_cast<GByte>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 16 && eDT == GDT_UInt16 )\n    {\n        return GDALIsValueInRange<GUInt16>(dfEffectiveNoData) &&\n               *(static_cast<const GUInt16*>(pBuffer)) ==\n                        static_cast<GUInt16>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 16 && eDT == GDT_Int16 )\n    {\n        return GDALIsValueInRange<GInt16>(dfEffectiveNoData) &&\n               *(static_cast<const GInt16*>(pBuffer)) ==\n                        static_cast<GInt16>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_UInt32 )\n    {\n        return GDALIsValueInRange<GUInt32>(dfEffectiveNoData) &&\n               *(static_cast<const GUInt32*>(pBuffer)) ==\n                        static_cast<GUInt32>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_Int32 )\n    {\n        return GDALIsValueInRange<GInt32>(dfEffectiveNoData) &&\n               *(static_cast<const GInt32*>(pBuffer)) ==\n                        static_cast<GInt32>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 32 && eDT == GDT_Float32 )\n    {\n        if( CPLIsNan(dfNoDataValue) )\n            return CPL_TO_BOOL(\n                CPLIsNan(*(static_cast<const float*>(pBuffer))));\n        return GDALIsValueInRange<float>(dfEffectiveNoData) &&\n               *(static_cast<const float*>(pBuffer)) ==\n                        static_cast<float>(dfEffectiveNoData);\n    }\n    if( nBitsPerSample == 64 && eDT == GDT_Float64 )\n    {\n        if( CPLIsNan(dfEffectiveNoData) )\n            return CPL_TO_BOOL(\n                CPLIsNan(*(static_cast<const double*>(pBuffer))));\n        return *(static_cast<const double*>(pBuffer)) == dfEffectiveNoData;\n    }\n    return false;\n}\n\n/************************************************************************/\n/*                        WriteEncodedTile()                            */\n/************************************************************************/\n\nbool GTiffDataset::WriteEncodedTile( uint32 tile, GByte *pabyData,\n                                     int bPreserveDataBuffer )\n{\n    int iRow = 0;\n    int iColumn = 0;\n    int nBlocksPerRow = 1;\n    int nBlocksPerColumn = 1;\n\n/* -------------------------------------------------------------------- */\n/*      Don't write empty blocks in some cases.                         */\n/* -------------------------------------------------------------------- */\n    if( !bWriteEmptyTiles && IsFirstPixelEqualToNoData(pabyData) )\n    {\n        if( !IsBlockAvailable(tile) )\n        {\n            const int nComponents =\n                nPlanarConfig == PLANARCONFIG_CONTIG ? nBands : 1;\n            nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n            nBlocksPerColumn = DIV_ROUND_UP(nRasterYSize, nBlockYSize);\n\n            iColumn = (tile % nBlocksPerBand) % nBlocksPerRow;\n            iRow = (tile % nBlocksPerBand) / nBlocksPerRow;\n\n            const int nActualBlockWidth =\n                ( iColumn == nBlocksPerRow - 1 ) ?\n                nRasterXSize - iColumn * nBlockXSize : nBlockXSize;\n            const int nActualBlockHeight =\n                ( iRow == nBlocksPerColumn - 1 ) ?\n                nRasterYSize - iRow * nBlockYSize : nBlockYSize;\n\n            if( HasOnlyNoData(pabyData,\n                              nActualBlockWidth, nActualBlockHeight,\n                              nBlockXSize, nComponents ) )\n            {\n                return true;\n            }\n        }\n    }\n\n    // Do we need to spread edge values right or down for a partial\n    // JPEG encoded tile?  We do this to avoid edge artifacts.\n    bool bNeedTileFill = false;\n    if( nCompression == COMPRESSION_JPEG )\n    {\n        nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n        nBlocksPerColumn = DIV_ROUND_UP(nRasterYSize, nBlockYSize);\n\n        iColumn = (tile % nBlocksPerBand) % nBlocksPerRow;\n        iRow = (tile % nBlocksPerBand) / nBlocksPerRow;\n\n        // Is this a partial right edge tile?\n        if( iRow == nBlocksPerRow - 1\n            && nRasterXSize % nBlockXSize != 0 )\n            bNeedTileFill = true;\n\n        // Is this a partial bottom edge tile?\n        if( iColumn == nBlocksPerColumn - 1\n            && nRasterYSize % nBlockYSize != 0 )\n            bNeedTileFill = true;\n    }\n\n    // If we need to fill out the tile, or if we want to prevent\n    // TIFFWriteEncodedTile from altering the buffer as part of\n    // byte swapping the data on write then we will need a temporary\n    // working buffer.  If not, we can just do a direct write.\n    const GPtrDiff_t cc = static_cast<GPtrDiff_t>(TIFFTileSize( hTIFF ));\n\n    if( bPreserveDataBuffer\n        && (TIFFIsByteSwapped(hTIFF) || bNeedTileFill || bHasDiscardedLsb) )\n    {\n        if( cc != nTempWriteBufferSize )\n        {\n            pabyTempWriteBuffer = CPLRealloc(pabyTempWriteBuffer, cc);\n            nTempWriteBufferSize = cc;\n        }\n        memcpy(pabyTempWriteBuffer, pabyData, cc);\n\n        pabyData = static_cast<GByte *>( pabyTempWriteBuffer );\n    }\n\n    // Perform tile fill if needed.\n    // TODO: we should also handle the case of nBitsPerSample == 12\n    // but this is more involved.\n    if( bNeedTileFill && nBitsPerSample == 8 )\n    {\n        const int nComponents =\n            nPlanarConfig == PLANARCONFIG_CONTIG ? nBands : 1;\n\n        CPLDebug( \"GTiff\", \"Filling out jpeg edge tile on write.\" );\n\n        const int nRightPixelsToFill =\n            iColumn == nBlocksPerRow - 1 ?\n            nBlockXSize * (iColumn + 1) - nRasterXSize :\n            0;\n        const int nBottomPixelsToFill =\n            iRow == nBlocksPerColumn - 1 ?\n            nBlockYSize * (iRow + 1) - nRasterYSize :\n            0;\n\n        // Fill out to the right.\n        const int iSrcX = nBlockXSize - nRightPixelsToFill - 1;\n\n        for( int iX = iSrcX + 1; iX < nBlockXSize; ++iX )\n        {\n            for( int iY = 0; iY < nBlockYSize; ++iY )\n            {\n                memcpy( pabyData + (static_cast<GPtrDiff_t>(nBlockXSize) * iY + iX) * nComponents,\n                        pabyData + (static_cast<GPtrDiff_t>(nBlockXSize) * iY + iSrcX) * nComponents,\n                        nComponents );\n            }\n        }\n\n        // Now fill out the bottom.\n        const int iSrcY = nBlockYSize - nBottomPixelsToFill - 1;\n        for( int iY = iSrcY + 1; iY < nBlockYSize; ++iY )\n        {\n            memcpy( pabyData + static_cast<GPtrDiff_t>(nBlockXSize) * nComponents * iY,\n                    pabyData + static_cast<GPtrDiff_t>(nBlockXSize) * nComponents * iSrcY,\n                    static_cast<GPtrDiff_t>(nBlockXSize) * nComponents );\n        }\n    }\n\n    if( bHasDiscardedLsb )\n    {\n        const int iBand =\n            nPlanarConfig == PLANARCONFIG_SEPARATE ?\n            static_cast<int>(tile) / nBlocksPerBand : -1;\n        DiscardLsb(pabyData, cc, iBand);\n    }\n\n    if( bStreamingOut )\n    {\n        if( tile != static_cast<uint32>(nLastWrittenBlockId + 1) )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"Attempt to write block %d whereas %d was expected\",\n                     tile, nLastWrittenBlockId + 1);\n            return false;\n        }\n        if( static_cast<GPtrDiff_t>( VSIFWriteL(pabyData, 1, cc, fpToWrite) ) != cc )\n        {\n            CPLError( CE_Failure, CPLE_FileIO, \"Could not write \" CPL_FRMT_GUIB \" bytes\",\n                      static_cast<GUIntBig>(cc) );\n            return false;\n        }\n        nLastWrittenBlockId = tile;\n        return true;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we do compression in a worker thread ?                   */\n/* -------------------------------------------------------------------- */\n    if( SubmitCompressionJob(tile, pabyData, cc, nBlockYSize) )\n        return true;\n\n    // libtiff 4.0.6 or older do not always properly report write errors.\n#if !defined(INTERNAL_LIBTIFF) && (!defined(TIFFLIB_VERSION) || (TIFFLIB_VERSION <= 20150912))\n    const CPLErr eBefore = CPLGetLastErrorType();\n#endif\n    const bool bRet =\n        TIFFWriteEncodedTile(hTIFF, tile, pabyData, cc) == cc;\n#if !defined(INTERNAL_LIBTIFF) && (!defined(TIFFLIB_VERSION) || (TIFFLIB_VERSION <= 20150912))\n    if( eBefore == CE_None && CPLGetLastErrorType() == CE_Failure )\n        return false;\n#endif\n    return bRet;\n}\n\n/************************************************************************/\n/*                        WriteEncodedStrip()                           */\n/************************************************************************/\n\nbool GTiffDataset::WriteEncodedStrip( uint32 strip, GByte* pabyData,\n                                      int bPreserveDataBuffer )\n{\n    GPtrDiff_t cc = static_cast<GPtrDiff_t>(TIFFStripSize( hTIFF ));\n\n/* -------------------------------------------------------------------- */\n/*      If this is the last strip in the image, and is partial, then    */\n/*      we need to trim the number of scanlines written to the          */\n/*      amount of valid data we have. (#2748)                           */\n/* -------------------------------------------------------------------- */\n    const int nStripWithinBand = strip % nBlocksPerBand;\n    int nStripHeight = nRowsPerStrip;\n\n    if( nStripWithinBand * nStripHeight > GetRasterYSize() - nStripHeight )\n    {\n        nStripHeight = GetRasterYSize() - nStripWithinBand * nRowsPerStrip;\n        cc = (cc / nRowsPerStrip) * nStripHeight;\n        CPLDebug( \"GTiff\", \"Adjusted bytes to write from \" CPL_FRMT_GUIB \" to \" CPL_FRMT_GUIB \".\",\n                  static_cast<GUIntBig>(TIFFStripSize(hTIFF)),\n                  static_cast<GUIntBig>(cc) );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Don't write empty blocks in some cases.                         */\n/* -------------------------------------------------------------------- */\n    if( !bWriteEmptyTiles && IsFirstPixelEqualToNoData(pabyData) )\n    {\n        if( !IsBlockAvailable(strip) )\n        {\n            const int nComponents =\n                nPlanarConfig == PLANARCONFIG_CONTIG ? nBands : 1;\n\n            if( HasOnlyNoData(pabyData,\n                              nBlockXSize, nStripHeight,\n                              nBlockXSize, nComponents ) )\n            {\n                return true;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      TIFFWriteEncodedStrip can alter the passed buffer if            */\n/*      byte-swapping is necessary so we use a temporary buffer         */\n/*      before calling it.                                              */\n/* -------------------------------------------------------------------- */\n    if( bPreserveDataBuffer && (TIFFIsByteSwapped(hTIFF) || bHasDiscardedLsb) )\n    {\n        if( cc != nTempWriteBufferSize )\n        {\n            pabyTempWriteBuffer = CPLRealloc(pabyTempWriteBuffer, cc);\n            nTempWriteBufferSize = cc;\n        }\n        memcpy(pabyTempWriteBuffer, pabyData, cc);\n        pabyData = static_cast<GByte *>( pabyTempWriteBuffer );\n    }\n\n    if( bHasDiscardedLsb )\n    {\n        int iBand =\n            nPlanarConfig == PLANARCONFIG_SEPARATE ?\n            static_cast<int>(strip) / nBlocksPerBand : -1;\n        DiscardLsb(pabyData, cc, iBand);\n    }\n\n    if( bStreamingOut )\n    {\n        if( strip != static_cast<uint32>(nLastWrittenBlockId + 1) )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"Attempt to write block %d whereas %d was expected\",\n                     strip, nLastWrittenBlockId + 1);\n            return false;\n        }\n        if( static_cast<GPtrDiff_t>(VSIFWriteL(pabyData, 1, cc, fpToWrite)) != cc )\n        {\n            CPLError(CE_Failure, CPLE_FileIO, \"Could not write \" CPL_FRMT_GUIB \" bytes\",\n                     static_cast<GUIntBig>(cc));\n            return false;\n        }\n        nLastWrittenBlockId = strip;\n        return true;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we do compression in a worker thread ?                   */\n/* -------------------------------------------------------------------- */\n    if( SubmitCompressionJob(strip, pabyData, cc, nStripHeight) )\n        return true;\n\n    // libtiff 4.0.6 or older do not always properly report write errors.\n#if !defined(INTERNAL_LIBTIFF) && (!defined(TIFFLIB_VERSION) || (TIFFLIB_VERSION <= 20150912))\n    CPLErr eBefore = CPLGetLastErrorType();\n#endif\n    bool bRet = TIFFWriteEncodedStrip( hTIFF, strip, pabyData, cc) == cc;\n#if !defined(INTERNAL_LIBTIFF) && (!defined(TIFFLIB_VERSION) || (TIFFLIB_VERSION <= 20150912))\n    if( eBefore == CE_None && CPLGetLastErrorType() == CE_Failure )\n        bRet = FALSE;\n#endif\n    return bRet;\n}\n\n/************************************************************************/\n/*                        InitCompressionThreads()                      */\n/************************************************************************/\n\nvoid GTiffDataset::InitCompressionThreads( char** papszOptions )\n{\n    // Raster == tile, then no need for threads\n    if( nBlockXSize == nRasterXSize && nBlockYSize == nRasterYSize )\n        return;\n\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"NUM_THREADS\" );\n    if( pszValue == nullptr )\n        pszValue = CPLGetConfigOption(\"GDAL_NUM_THREADS\", nullptr);\n    if( pszValue )\n    {\n        const int nThreads =\n            EQUAL(pszValue, \"ALL_CPUS\") ? CPLGetNumCPUs() : atoi(pszValue);\n        if( nThreads > 1 )\n        {\n            if( nCompression == COMPRESSION_NONE ||\n                nCompression == COMPRESSION_JPEG )\n            {\n                CPLDebug( \"GTiff\",\n                          \"NUM_THREADS ignored with uncompressed or JPEG\" );\n            }\n            else\n            {\n                CPLDebug(\"GTiff\", \"Using %d threads for compression\", nThreads);\n\n                // Try to reuse previously created thread pool\n                {\n                    std::lock_guard<std::mutex> oLock(gMutexThreadPool);\n                    if( gpoCompressThreadPool &&\n                        gpoCompressThreadPool->GetThreadCount() == nThreads )\n                    {\n                        poCompressThreadPool = gpoCompressThreadPool;\n                    }\n                    else\n                    {\n                        delete gpoCompressThreadPool;\n                    }\n                    gpoCompressThreadPool = nullptr;\n                }\n\n                if( poCompressThreadPool == nullptr )\n                {\n                    poCompressThreadPool = new CPLWorkerThreadPool();\n                    if( !poCompressThreadPool->Setup(nThreads, nullptr, nullptr) )\n                    {\n                        delete poCompressThreadPool;\n                        poCompressThreadPool = nullptr;\n                    }\n                }\n                if( poCompressThreadPool != nullptr )\n                {\n                    // Add a margin of an extra job w.r.t thread number\n                    // so as to optimize compression time (enables the main\n                    // thread to do boring I/O while all CPUs are working).\n                    asCompressionJobs.resize(nThreads + 1);\n                    memset(&asCompressionJobs[0], 0,\n                           asCompressionJobs.size() *\n                           sizeof(GTiffCompressionJob));\n                    for( int i = 0;\n                         i < static_cast<int>(asCompressionJobs.size());\n                         ++i )\n                    {\n                        asCompressionJobs[i].pszTmpFilename =\n                            CPLStrdup(CPLSPrintf(\"/vsimem/gtiff/thread/job/%p\",\n                                                 &asCompressionJobs[i]));\n                        asCompressionJobs[i].nStripOrTile = -1;\n                    }\n                    hCompressThreadPoolMutex = CPLCreateMutex();\n                    CPLReleaseMutex(hCompressThreadPoolMutex);\n\n                    // This is kind of a hack, but basically using\n                    // TIFFWriteRawStrip/Tile and then TIFFReadEncodedStrip/Tile\n                    // does not work on a newly created file, because\n                    // TIFF_MYBUFFER is not set in tif_flags\n                    // (if using TIFFWriteEncodedStrip/Tile first,\n                    // TIFFWriteBufferSetup() is automatically called).\n                    // This should likely rather fixed in libtiff itself.\n                    CPL_IGNORE_RET_VAL(\n                        TIFFWriteBufferSetup(hTIFF, nullptr, -1));\n                }\n            }\n        }\n        else if( nThreads < 0 ||\n                 (!EQUAL(pszValue, \"0\") &&\n                  !EQUAL(pszValue, \"1\") &&\n                  !EQUAL(pszValue, \"ALL_CPUS\")) )\n        {\n            CPLError(CE_Warning, CPLE_AppDefined,\n                     \"Invalid value for NUM_THREADS: %s\", pszValue);\n        }\n    }\n}\n\n/************************************************************************/\n/*                       GetGTIFFKeysFlavor()                           */\n/************************************************************************/\n\nstatic GTIFFKeysFlavorEnum GetGTIFFKeysFlavor( char** papszOptions )\n{\n    const char* pszGeoTIFFKeysFlavor =\n        CSLFetchNameValueDef( papszOptions, \"GEOTIFF_KEYS_FLAVOR\", \"STANDARD\" );\n    if( EQUAL(pszGeoTIFFKeysFlavor, \"ESRI_PE\") )\n        return GEOTIFF_KEYS_ESRI_PE;\n    return GEOTIFF_KEYS_STANDARD;\n}\n\n/************************************************************************/\n/*                      InitCreationOrOpenOptions()                     */\n/************************************************************************/\n\nvoid GTiffDataset::InitCreationOrOpenOptions( char** papszOptions )\n{\n    InitCompressionThreads(papszOptions);\n\n    eGeoTIFFKeysFlavor = GetGTIFFKeysFlavor(papszOptions);\n}\n\n/************************************************************************/\n/*                      ThreadCompressionFunc()                         */\n/************************************************************************/\n\nvoid GTiffDataset::ThreadCompressionFunc( void* pData )\n{\n    GTiffCompressionJob* psJob = static_cast<GTiffCompressionJob *>(pData);\n    GTiffDataset* poDS = psJob->poDS;\n\n    VSILFILE* fpTmp = VSIFOpenL(psJob->pszTmpFilename, \"wb+\");\n    TIFF* hTIFFTmp = VSI_TIFFOpen(psJob->pszTmpFilename,\n        psJob->bTIFFIsBigEndian ? \"wb+\" : \"wl+\", fpTmp);\n    CPLAssert( hTIFFTmp != nullptr );\n    TIFFSetField(hTIFFTmp, TIFFTAG_IMAGEWIDTH, poDS->nBlockXSize);\n    TIFFSetField(hTIFFTmp, TIFFTAG_IMAGELENGTH, psJob->nHeight);\n    TIFFSetField(hTIFFTmp, TIFFTAG_BITSPERSAMPLE, poDS->nBitsPerSample);\n    TIFFSetField(hTIFFTmp, TIFFTAG_COMPRESSION, poDS->nCompression);\n    if( psJob->nPredictor != PREDICTOR_NONE )\n        TIFFSetField(hTIFFTmp, TIFFTAG_PREDICTOR, psJob->nPredictor);\n\n    TIFFSetField(hTIFFTmp, TIFFTAG_PHOTOMETRIC, poDS->nPhotometric);\n    TIFFSetField(hTIFFTmp, TIFFTAG_SAMPLEFORMAT, poDS->nSampleFormat);\n    TIFFSetField(hTIFFTmp, TIFFTAG_SAMPLESPERPIXEL, poDS->nSamplesPerPixel);\n    TIFFSetField(hTIFFTmp, TIFFTAG_ROWSPERSTRIP, poDS->nBlockYSize);\n    TIFFSetField(hTIFFTmp, TIFFTAG_PLANARCONFIG, poDS->nPlanarConfig);\n\n    poDS->RestoreVolatileParameters(hTIFFTmp);\n\n    bool bOK =\n        TIFFWriteEncodedStrip(hTIFFTmp, 0, psJob->pabyBuffer,\n                              psJob->nBufferSize) == psJob->nBufferSize;\n\n    toff_t nOffset = 0;\n    if( bOK )\n    {\n        toff_t* panOffsets = nullptr;\n        toff_t* panByteCounts = nullptr;\n        TIFFGetField(hTIFFTmp, TIFFTAG_STRIPOFFSETS, &panOffsets);\n        TIFFGetField(hTIFFTmp, TIFFTAG_STRIPBYTECOUNTS, &panByteCounts);\n\n        nOffset = panOffsets[0];\n        psJob->nCompressedBufferSize = static_cast<GPtrDiff_t>(panByteCounts[0]);\n    }\n    else\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Error when compressing strip/tile %d\",\n                  psJob->nStripOrTile);\n    }\n\n    XTIFFClose(hTIFFTmp);\n    if( VSIFCloseL(fpTmp) != 0 )\n    {\n        if( bOK )\n        {\n            bOK = false;\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"Error when compressing strip/tile %d\",\n                      psJob->nStripOrTile);\n        }\n    }\n\n    if( bOK )\n    {\n        vsi_l_offset nFileSize = 0;\n        GByte* pabyCompressedBuffer = VSIGetMemFileBuffer(psJob->pszTmpFilename,\n                                                          &nFileSize,\n                                                          FALSE);\n        CPLAssert( static_cast<vsi_l_offset>(nOffset + psJob->nCompressedBufferSize) <= nFileSize );\n        psJob->pabyCompressedBuffer = pabyCompressedBuffer + nOffset;\n    }\n    else\n    {\n        psJob->pabyCompressedBuffer = nullptr;\n        psJob->nCompressedBufferSize = 0;\n    }\n\n    CPLAcquireMutex(poDS->hCompressThreadPoolMutex, 1000.0);\n    psJob->bReady = true;\n    CPLReleaseMutex(poDS->hCompressThreadPoolMutex);\n}\n\n/************************************************************************/\n/*                        WriteRawStripOrTile()                         */\n/************************************************************************/\n\nvoid GTiffDataset::WriteRawStripOrTile( int nStripOrTile,\n                                        GByte* pabyCompressedBuffer,\n                                        GPtrDiff_t nCompressedBufferSize )\n{\n#ifdef DEBUG_VERBOSE\n    CPLDebug(\"GTIFF\", \"Writing raw strip/tile %d, size \" CPL_FRMT_GUIB,\n             nStripOrTile, static_cast<GUIntBig>(nCompressedBufferSize));\n#endif\n    toff_t *panOffsets = nullptr;\n    if( TIFFGetField(\n            hTIFF,\n            TIFFIsTiled( hTIFF ) ?\n            TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS, &panOffsets ) &&\n            panOffsets[nStripOrTile] != 0 )\n    {\n        // Make sure that if the tile/strip already exists,\n        // we write at end of file.\n        TIFFSetWriteOffset(hTIFF, 0);\n    }\n    if( TIFFIsTiled( hTIFF ) )\n        TIFFWriteRawTile( hTIFF, nStripOrTile, pabyCompressedBuffer,\n                          nCompressedBufferSize );\n    else\n        TIFFWriteRawStrip( hTIFF, nStripOrTile, pabyCompressedBuffer,\n                           nCompressedBufferSize );\n}\n\n/************************************************************************/\n/*                        WaitCompletionForBlock()                      */\n/************************************************************************/\n\nvoid GTiffDataset::WaitCompletionForBlock(int nBlockId)\n{\n    if( poCompressThreadPool != nullptr )\n    {\n        for( int i = 0; i < static_cast<int>(asCompressionJobs.size()); ++i )\n        {\n            if( asCompressionJobs[i].nStripOrTile == nBlockId )\n            {\n                CPLDebug(\"GTIFF\",\n                         \"Waiting for worker job to finish handling block %d\",\n                         nBlockId);\n\n                CPLAcquireMutex(hCompressThreadPoolMutex, 1000.0);\n                const bool bReady = asCompressionJobs[i].bReady;\n                CPLReleaseMutex(hCompressThreadPoolMutex);\n                if( !bReady )\n                {\n                    poCompressThreadPool->WaitCompletion(0);\n                    CPLAssert( asCompressionJobs[i].bReady );\n                }\n\n                if( asCompressionJobs[i].nCompressedBufferSize )\n                {\n                    WriteRawStripOrTile(asCompressionJobs[i].nStripOrTile,\n                                  asCompressionJobs[i].pabyCompressedBuffer,\n                                  asCompressionJobs[i].nCompressedBufferSize);\n                }\n                asCompressionJobs[i].pabyCompressedBuffer = nullptr;\n                asCompressionJobs[i].nBufferSize = 0;\n                asCompressionJobs[i].bReady = false;\n                asCompressionJobs[i].nStripOrTile = -1;\n                return;\n            }\n        }\n    }\n}\n\n/************************************************************************/\n/*                      SubmitCompressionJob()                          */\n/************************************************************************/\n\nbool GTiffDataset::SubmitCompressionJob( int nStripOrTile, GByte* pabyData,\n                                         GPtrDiff_t cc, int nHeight )\n{\n/* -------------------------------------------------------------------- */\n/*      Should we do compression in a worker thread ?                   */\n/* -------------------------------------------------------------------- */\n    if( !( poCompressThreadPool != nullptr &&\n           (nCompression == COMPRESSION_ADOBE_DEFLATE ||\n            nCompression == COMPRESSION_LZW ||\n            nCompression == COMPRESSION_PACKBITS ||\n            nCompression == COMPRESSION_LZMA ||\n            nCompression == COMPRESSION_ZSTD ||\n            nCompression == COMPRESSION_LERC ||\n            nCompression == COMPRESSION_WEBP) ) )\n        return false;\n\n    int nNextCompressionJobAvail = -1;\n    // Wait that at least one job is finished.\n    poCompressThreadPool->WaitCompletion(\n        static_cast<int>(asCompressionJobs.size() - 1) );\n    for( int i = 0; i < static_cast<int>(asCompressionJobs.size()); ++i )\n    {\n        CPLAcquireMutex(hCompressThreadPoolMutex, 1000.0);\n        const bool bReady = asCompressionJobs[i].bReady;\n        CPLReleaseMutex(hCompressThreadPoolMutex);\n        if( bReady )\n        {\n            if( asCompressionJobs[i].nCompressedBufferSize )\n            {\n                WriteRawStripOrTile( asCompressionJobs[i].nStripOrTile,\n                                asCompressionJobs[i].pabyCompressedBuffer,\n                                asCompressionJobs[i].nCompressedBufferSize );\n            }\n            asCompressionJobs[i].pabyCompressedBuffer = nullptr;\n            asCompressionJobs[i].nBufferSize = 0;\n            asCompressionJobs[i].bReady = false;\n            asCompressionJobs[i].nStripOrTile = -1;\n        }\n        if( asCompressionJobs[i].nBufferSize == 0 )\n        {\n            if( nNextCompressionJobAvail < 0 )\n                nNextCompressionJobAvail = i;\n        }\n    }\n    CPLAssert(nNextCompressionJobAvail >= 0);\n\n    GTiffCompressionJob* psJob = &asCompressionJobs[nNextCompressionJobAvail];\n    psJob->poDS = this;\n    psJob->bTIFFIsBigEndian = CPL_TO_BOOL( TIFFIsBigEndian(hTIFF) );\n    psJob->pabyBuffer =\n        static_cast<GByte*>( CPLRealloc(psJob->pabyBuffer, cc) );\n    memcpy(psJob->pabyBuffer, pabyData, cc);\n    psJob->nBufferSize = cc;\n    psJob->nHeight = nHeight;\n    psJob->nStripOrTile = nStripOrTile;\n    psJob->nPredictor = PREDICTOR_NONE;\n    if( nCompression == COMPRESSION_LZW ||\n        nCompression == COMPRESSION_ADOBE_DEFLATE ||\n        nCompression == COMPRESSION_ZSTD )\n    {\n        TIFFGetField( hTIFF, TIFFTAG_PREDICTOR, &psJob->nPredictor );\n    }\n\n    poCompressThreadPool->SubmitJob(ThreadCompressionFunc, psJob);\n    return true;\n}\n\n/************************************************************************/\n/*                          DiscardLsb()                                */\n/************************************************************************/\n\nvoid GTiffDataset::DiscardLsb( GByte* pabyBuffer, GPtrDiff_t nBytes, int iBand ) const\n{\n    if( nBitsPerSample == 8 )\n    {\n        if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n        {\n            const int nMask = anMaskLsb[iBand];\n            const int nOffset = anOffsetLsb[iBand];\n            for( decltype(nBytes) i = 0; i < nBytes; ++i )\n            {\n                // Keep 255 in case it is alpha.\n                if( pabyBuffer[i] != 255 )\n                    pabyBuffer[i] =\n                        static_cast<GByte>((pabyBuffer[i] & nMask) | nOffset);\n            }\n        }\n        else\n        {\n            for( decltype(nBytes) i = 0; i < nBytes; i += nBands )\n            {\n                for( int j = 0; j < nBands; ++j )\n                {\n                    // Keep 255 in case it is alpha.\n                    if( pabyBuffer[i + j] != 255 )\n                        pabyBuffer[i + j] =\n                            static_cast<GByte>((pabyBuffer[i + j] &\n                                                anMaskLsb[j]) | anOffsetLsb[j]);\n                }\n            }\n        }\n    }\n    else if( nBitsPerSample == 16 )\n    {\n        if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n        {\n            const int nMask = anMaskLsb[iBand];\n            const int nOffset = anOffsetLsb[iBand];\n            for( decltype(nBytes) i = 0; i < nBytes/2; ++i )\n            {\n                reinterpret_cast<GUInt16*>(pabyBuffer)[i] =\n                    static_cast<GUInt16>(\n                        (reinterpret_cast<GUInt16 *>(pabyBuffer)[i] & nMask) |\n                        nOffset);\n            }\n        }\n        else\n        {\n            for( decltype(nBytes) i = 0; i < nBytes/2; i += nBands )\n            {\n                for( int j = 0; j < nBands; ++j )\n                {\n                    reinterpret_cast<GUInt16*>(pabyBuffer)[i + j] =\n                        static_cast<GUInt16>(\n                            (reinterpret_cast<GUInt16*>(pabyBuffer)[i + j] &\n                             anMaskLsb[j]) |\n                            anOffsetLsb[j]);\n                }\n            }\n        }\n    }\n    else if( nBitsPerSample == 32 )\n    {\n        if( nPlanarConfig == PLANARCONFIG_SEPARATE )\n        {\n            const int nMask = anMaskLsb[iBand];\n            const int nOffset = anOffsetLsb[iBand];\n            for( decltype(nBytes) i = 0; i < nBytes/4; ++i )\n            {\n                reinterpret_cast<GUInt32 *>(pabyBuffer)[i] =\n                    (reinterpret_cast<GUInt32*>(pabyBuffer)[i] & nMask) |\n                    nOffset;\n            }\n        }\n        else\n        {\n            for( decltype(nBytes) i = 0; i < nBytes/4; i += nBands )\n            {\n                for( int j = 0; j < nBands; ++j )\n                {\n                    reinterpret_cast<GUInt32 *>(pabyBuffer)[i + j] =\n                        (reinterpret_cast<GUInt32 *>(pabyBuffer)[i + j] &\n                         anMaskLsb[j]) |\n                        anOffsetLsb[j];\n                }\n            }\n        }\n    }\n}\n\n/************************************************************************/\n/*                  WriteEncodedTileOrStrip()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::WriteEncodedTileOrStrip( uint32 tile_or_strip, void* data,\n                                              int bPreserveDataBuffer )\n{\n    CPLErr eErr = CE_None;\n\n    if( TIFFIsTiled( hTIFF ) )\n    {\n        if( !(WriteEncodedTile(\n               tile_or_strip,\n               static_cast<GByte *>(data),\n               bPreserveDataBuffer)) )\n        {\n            eErr = CE_Failure;\n        }\n    }\n    else\n    {\n        if( !(WriteEncodedStrip(\n               tile_or_strip,\n               static_cast<GByte *>(data),\n               bPreserveDataBuffer)) )\n        {\n            eErr = CE_Failure;\n        }\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                           FlushBlockBuf()                            */\n/************************************************************************/\n\nCPLErr GTiffDataset::FlushBlockBuf()\n\n{\n    if( nLoadedBlock < 0 || !bLoadedBlockDirty )\n        return CE_None;\n\n    bLoadedBlockDirty = false;\n\n    if( !SetDirectory() )\n        return CE_Failure;\n\n    const CPLErr eErr =\n        WriteEncodedTileOrStrip(nLoadedBlock, pabyBlockBuf, true);\n    if( eErr != CE_None )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                    \"WriteEncodedTile/Strip() failed.\" );\n        bWriteErrorInFlushBlockBuf = true;\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                            LoadBlockBuf()                            */\n/*                                                                      */\n/*      Load working block buffer with request block (tile/strip).      */\n/************************************************************************/\n\nCPLErr GTiffDataset::LoadBlockBuf( int nBlockId, bool bReadFromDisk )\n\n{\n    if( nLoadedBlock == nBlockId )\n        return CE_None;\n\n/* -------------------------------------------------------------------- */\n/*      If we have a dirty loaded block, flush it out first.            */\n/* -------------------------------------------------------------------- */\n    if( nLoadedBlock != -1 && bLoadedBlockDirty )\n    {\n        const CPLErr eErr = FlushBlockBuf();\n        if( eErr != CE_None )\n            return eErr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Get block size.                                                 */\n/* -------------------------------------------------------------------- */\n    const GPtrDiff_t nBlockBufSize =\n        static_cast<GPtrDiff_t>(\n            TIFFIsTiled(hTIFF) ? TIFFTileSize(hTIFF) : TIFFStripSize(hTIFF));\n    if( !nBlockBufSize )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Bogus block size; unable to allocate a buffer.\" );\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Allocate a temporary buffer for this strip.                     */\n/* -------------------------------------------------------------------- */\n    if( pabyBlockBuf == nullptr )\n    {\n        pabyBlockBuf =\n            static_cast<GByte *>( VSI_CALLOC_VERBOSE( 1, nBlockBufSize ) );\n        if( pabyBlockBuf == nullptr )\n        {\n            return CE_Failure;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*  When called from ::IWriteBlock in separate cases (or in single band */\n/*  geotiffs), the ::IWriteBlock will override the content of the buffer*/\n/*  with pImage, so we don't need to read data from disk                */\n/* -------------------------------------------------------------------- */\n    if( !bReadFromDisk || bStreamingOut )\n    {\n        nLoadedBlock = nBlockId;\n        return CE_None;\n    }\n\n    // libtiff 3.X doesn't like mixing read&write of JPEG compressed blocks\n    // The below hack is necessary due to another hack that consist in\n    // writing zero block to force creation of JPEG tables.\n    if( nBlockId == 0 && bDontReloadFirstBlock )\n    {\n        bDontReloadFirstBlock = false;\n        memset( pabyBlockBuf, 0, nBlockBufSize );\n        nLoadedBlock = nBlockId;\n        return CE_None;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      The bottom most partial tiles and strips are sometimes only     */\n/*      partially encoded.  This code reduces the requested data so     */\n/*      an error won't be reported in this case. (#1179)                */\n/* -------------------------------------------------------------------- */\n    auto nBlockReqSize = nBlockBufSize;\n    const int nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n    const int nBlockYOff = (nBlockId % nBlocksPerBand) / nBlocksPerRow;\n\n    if( nBlockYOff * nBlockYSize > nRasterYSize - nBlockYSize )\n    {\n        nBlockReqSize = (nBlockBufSize / nBlockYSize)\n            * (nBlockYSize - static_cast<int>(\n                (static_cast<GIntBig>(nBlockYOff + 1) * nBlockYSize) %\n                    nRasterYSize));\n        memset( pabyBlockBuf, 0, nBlockBufSize );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If we don't have this block already loaded, and we know it      */\n/*      doesn't yet exist on disk, just zero the memory buffer and      */\n/*      pretend we loaded it.                                           */\n/* -------------------------------------------------------------------- */\n    bool bErrOccurred = false;\n    if( !IsBlockAvailable( nBlockId, nullptr, nullptr, &bErrOccurred ) )\n    {\n        memset( pabyBlockBuf, 0, nBlockBufSize );\n        nLoadedBlock = nBlockId;\n        if( bErrOccurred )\n            return CE_Failure;\n        return CE_None;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Load the block, if it isn't our current block.                  */\n/* -------------------------------------------------------------------- */\n    CPLErr eErr = CE_None;\n    if( TIFFIsTiled( hTIFF ) )\n    {\n        if( TIFFReadEncodedTile(hTIFF, nBlockId, pabyBlockBuf,\n                                nBlockReqSize) == -1\n            && !bIgnoreReadErrors )\n        {\n            // Once TIFFError() is properly hooked, this can go away.\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"TIFFReadEncodedTile() failed.\" );\n\n            memset( pabyBlockBuf, 0, nBlockBufSize );\n\n            eErr = CE_Failure;\n        }\n    }\n    else\n    {\n        if( TIFFReadEncodedStrip(hTIFF, nBlockId, pabyBlockBuf,\n                                 nBlockReqSize) == -1\n            && !bIgnoreReadErrors )\n        {\n            // Once TIFFError() is properly hooked, this can go away.\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"TIFFReadEncodedStrip() failed.\" );\n\n            memset( pabyBlockBuf, 0, nBlockBufSize );\n\n            eErr = CE_Failure;\n        }\n    }\n\n    if( eErr == CE_None )\n    {\n        nLoadedBlock = nBlockId;\n    }\n    else\n    {\n        nLoadedBlock = -1;\n    }\n    bLoadedBlockDirty = false;\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                   GTiffFillStreamableOffsetAndCount()                */\n/************************************************************************/\n\nstatic void GTiffFillStreamableOffsetAndCount( TIFF* hTIFF, int nSize )\n{\n    uint32 nXSize = 0;\n    uint32 nYSize = 0;\n    TIFFGetField( hTIFF, TIFFTAG_IMAGEWIDTH, &nXSize );\n    TIFFGetField( hTIFF, TIFFTAG_IMAGELENGTH, &nYSize );\n    const bool bIsTiled = CPL_TO_BOOL( TIFFIsTiled(hTIFF) );\n    const int nBlockCount =\n        bIsTiled ? TIFFNumberOfTiles(hTIFF) : TIFFNumberOfStrips(hTIFF);\n\n    toff_t *panOffset = nullptr;\n    TIFFGetField( hTIFF, bIsTiled ? TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS,\n                  &panOffset );\n    toff_t *panSize = nullptr;\n    TIFFGetField( hTIFF,\n                  bIsTiled ? TIFFTAG_TILEBYTECOUNTS : TIFFTAG_STRIPBYTECOUNTS,\n                  &panSize );\n    toff_t nOffset = nSize;\n    // Trick to avoid clang static analyzer raising false positive about\n    // divide by zero later.\n    int nBlocksPerBand = 1;\n    uint32 nRowsPerStrip = 0;\n    if( !bIsTiled )\n    {\n        TIFFGetField( hTIFF, TIFFTAG_ROWSPERSTRIP, &nRowsPerStrip);\n        if( nRowsPerStrip > static_cast<uint32>(nYSize) )\n            nRowsPerStrip = nYSize;\n        nBlocksPerBand = DIV_ROUND_UP(nYSize, nRowsPerStrip);\n    }\n    for( int i = 0; i < nBlockCount; ++i )\n    {\n        GPtrDiff_t cc = bIsTiled ? static_cast<GPtrDiff_t>(TIFFTileSize(hTIFF)) :\n                            static_cast<GPtrDiff_t>(TIFFStripSize(hTIFF));\n        if( !bIsTiled )\n        {\n/* -------------------------------------------------------------------- */\n/*      If this is the last strip in the image, and is partial, then    */\n/*      we need to trim the number of scanlines written to the          */\n/*      amount of valid data we have. (#2748)                           */\n/* -------------------------------------------------------------------- */\n            int nStripWithinBand = i % nBlocksPerBand;\n            if( nStripWithinBand * nRowsPerStrip > nYSize - nRowsPerStrip )\n            {\n                cc = (cc / nRowsPerStrip)\n                    * (nYSize - nStripWithinBand * nRowsPerStrip);\n            }\n        }\n        panOffset[i] = nOffset;\n        panSize[i] = cc;\n        nOffset += cc;\n    }\n}\n\n/************************************************************************/\n/*                             Crystalize()                             */\n/*                                                                      */\n/*      Make sure that the directory information is written out for     */\n/*      a new file, require before writing any imagery data.            */\n/************************************************************************/\n\nvoid GTiffDataset::Crystalize()\n\n{\n    if( bCrystalized )\n        return;\n\n    // TODO: libtiff writes extended tags in the order they are specified\n    // and not in increasing order.\n    WriteMetadata( this, hTIFF, true, osProfile, osFilename,\n                   papszCreationOptions );\n    WriteGeoTIFFInfo();\n    if( bNoDataSet )\n        WriteNoDataValue( hTIFF, dfNoDataValue );\n\n    bMetadataChanged = false;\n    bGeoTIFFInfoChanged = false;\n    bNoDataChanged = false;\n    bNeedsRewrite = false;\n\n    bCrystalized = true;\n\n    TIFFWriteCheck( hTIFF, TIFFIsTiled(hTIFF), \"GTiffDataset::Crystalize\");\n\n    TIFFWriteDirectory( hTIFF );\n    if( bStreamingOut )\n    {\n        // We need to write twice the directory to be sure that custom\n        // TIFF tags are correctly sorted and that padding bytes have been\n        // added.\n        TIFFSetDirectory( hTIFF, 0 );\n        TIFFWriteDirectory( hTIFF );\n\n        if( VSIFSeekL( fpL, 0, SEEK_END ) != 0 )\n        {\n            CPLError(CE_Failure, CPLE_FileIO, \"Could not seek\");\n        }\n        const int nSize = static_cast<int>( VSIFTellL(fpL) );\n\n        TIFFSetDirectory( hTIFF, 0 );\n        GTiffFillStreamableOffsetAndCount( hTIFF, nSize );\n        TIFFWriteDirectory( hTIFF );\n\n        vsi_l_offset nDataLength = 0;\n        void* pabyBuffer =\n            VSIGetMemFileBuffer( osTmpFilename, &nDataLength, FALSE);\n        if( static_cast<int>(\n                VSIFWriteL( pabyBuffer, 1,\n                            static_cast<int>(nDataLength), fpToWrite ) ) !=\n            static_cast<int>(nDataLength) )\n        {\n            CPLError( CE_Failure, CPLE_FileIO, \"Could not write %d bytes\",\n                      static_cast<int>(nDataLength) );\n        }\n        // In case of single strip file, there's a libtiff check that would\n        // issue a warning since the file hasn't the required size.\n        CPLPushErrorHandler(CPLQuietErrorHandler);\n        TIFFSetDirectory( hTIFF, 0 );\n        CPLPopErrorHandler();\n    }\n    else\n    {\n        TIFFSetDirectory( hTIFF,\n                      static_cast<tdir_t>(TIFFNumberOfDirectories(hTIFF) - 1) );\n    }\n\n    RestoreVolatileParameters( hTIFF );\n\n    nDirOffset = TIFFCurrentDirOffset( hTIFF );\n}\n\n#if defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n\nstatic\nbool GTiffCacheOffsetOrCount( VSILFILE* fp,\n                              bool bSwab,\n                              vsi_l_offset nBaseOffset,\n                              int nBlockId,\n                              uint32 nstrips,\n                              uint64* panVals,\n                              size_t sizeofval )\n{\n    constexpr vsi_l_offset IO_CACHE_PAGE_SIZE = 4096;\n\n    const int sizeofvalint = static_cast<int>(sizeofval);\n    const vsi_l_offset nOffset = nBaseOffset + sizeofval * nBlockId;\n    const vsi_l_offset nOffsetStartPage =\n        (nOffset / IO_CACHE_PAGE_SIZE) * IO_CACHE_PAGE_SIZE;\n    vsi_l_offset nOffsetEndPage = nOffsetStartPage + IO_CACHE_PAGE_SIZE;\n\n    if( nOffset + sizeofval > nOffsetEndPage )\n        nOffsetEndPage += IO_CACHE_PAGE_SIZE;\n    vsi_l_offset nLastStripOffset = nBaseOffset + nstrips * sizeofval;\n    if( nLastStripOffset < nOffsetEndPage )\n        nOffsetEndPage = nLastStripOffset;\n    if( nOffsetStartPage >= nOffsetEndPage )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Cannot read offset/size for strile %d\", nBlockId);\n        panVals[nBlockId] = 0;\n        return false;\n    }\n    if( VSIFSeekL(fp, nOffsetStartPage, SEEK_SET) != 0 )\n    {\n        panVals[nBlockId] = 0;\n        return false;\n    }\n\n    const size_t nToRead =\n        static_cast<size_t>(nOffsetEndPage - nOffsetStartPage);\n    GByte buffer[2 * IO_CACHE_PAGE_SIZE] = {};  // TODO(schwehr): Off the stack.\n    const size_t nRead = VSIFReadL(buffer, 1, nToRead, fp);\n    if( nRead < nToRead )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Cannot read offset/size for strile around ~%d\", nBlockId);\n        return false;\n    }\n    int iStartBefore =\n        - static_cast<int>((nOffset - nOffsetStartPage) / sizeofval);\n    if( nBlockId + iStartBefore < 0 )\n        iStartBefore = -nBlockId;\n    for( int i = iStartBefore;\n         static_cast<uint32>(nBlockId + i) < nstrips &&\n         static_cast<GIntBig>(nOffset) + (i + 1) * sizeofvalint <=\n         static_cast<GIntBig>(nOffsetEndPage);\n         ++i )\n    {\n        if( sizeofval == 2 )\n        {\n            uint16 val;\n            memcpy(&val,\n                   buffer + (nOffset - nOffsetStartPage) + i * sizeofvalint,\n                   sizeof(val));\n            if( bSwab )\n                CPL_SWAP16PTR(&val);\n            panVals[nBlockId + i] = val;\n        }\n        else if( sizeofval == 4 )\n        {\n            uint32 val;\n            memcpy(&val,\n                   buffer + (nOffset - nOffsetStartPage) + i * sizeofvalint,\n                   sizeof(val));\n            if( bSwab )\n                CPL_SWAP32PTR(&val);\n            panVals[nBlockId + i] = val;\n        }\n        else\n        {\n            uint64 val;\n            memcpy(&val,\n                   buffer + (nOffset - nOffsetStartPage) + i * sizeofvalint,\n                   sizeof(val));\n            if( bSwab )\n                CPL_SWAP64PTR(&val);\n            panVals[nBlockId + i] = val;\n        }\n    }\n    return true;\n}\n\nstatic bool ReadStripArray( VSILFILE* fp,\n                            TIFF* hTIFF,\n                            const TIFFDirEntry* psEntry,\n                            int nBlockId,\n                            uint32 nStripArrayAlloc,\n                            uint64* panOffsetOrCountArray )\n{\n    const bool bSwab = (hTIFF->tif_flags & TIFF_SWAB) != 0;\n    if( (hTIFF->tif_flags&TIFF_BIGTIFF) &&\n        psEntry->tdir_type == TIFF_SHORT &&\n        psEntry->tdir_count <= 4 )\n    {\n        uint16 offset;\n        const GByte* src = reinterpret_cast<const GByte*>(\n                                    &(psEntry->tdir_offset.toff_long8));\n        for( size_t i = 0; i < 4 && i < nStripArrayAlloc; i++ )\n        {\n            memcpy(&offset, src + sizeof(offset) * i, sizeof(offset));\n            if( bSwab )\n                CPL_SWAP16PTR(&offset);\n            panOffsetOrCountArray[i] = offset;\n        }\n        return true;\n    }\n    else if( (hTIFF->tif_flags&TIFF_BIGTIFF) &&\n        psEntry->tdir_type == TIFF_LONG &&\n        psEntry->tdir_count <= 2 )\n    {\n        uint32 offset;\n        const GByte* src = reinterpret_cast<const GByte*>(\n                                    &(psEntry->tdir_offset.toff_long8));\n        for( size_t i = 0; i < 2 && i < nStripArrayAlloc; i++ )\n        {\n            memcpy(&offset, src + sizeof(offset) * i, sizeof(offset));\n            if( bSwab )\n                CPL_SWAP32PTR(&offset);\n            panOffsetOrCountArray[i] = offset;\n        }\n        return true;\n    }\n    else if( (hTIFF->tif_flags&TIFF_BIGTIFF) &&\n        psEntry->tdir_type == TIFF_LONG8 &&\n        psEntry->tdir_count <= 1 )\n    {\n        uint64 offset = psEntry->tdir_offset.toff_long8;\n        if( bSwab )\n            CPL_SWAP64PTR(&offset);\n        panOffsetOrCountArray[0] = offset;\n        return true;\n    }\n    else if( !(hTIFF->tif_flags&TIFF_BIGTIFF) &&\n        psEntry->tdir_type == TIFF_SHORT &&\n        psEntry->tdir_count <= 2 )\n    {\n        uint16 offset;\n        const GByte* src = reinterpret_cast<const GByte*>(\n                                    &(psEntry->tdir_offset.toff_long));\n\n        for( size_t i = 0; i < 2 && i < nStripArrayAlloc; i++ )\n        {\n            memcpy(&offset, src + sizeof(offset) * i, sizeof(offset));\n            if( bSwab )\n                CPL_SWAP16PTR(&offset);\n            panOffsetOrCountArray[i] = offset;\n        }\n        return true;\n    }\n    else if( !(hTIFF->tif_flags&TIFF_BIGTIFF) &&\n        psEntry->tdir_type == TIFF_LONG &&\n        psEntry->tdir_count <= 1 )\n    {\n        uint32 offset = psEntry->tdir_offset.toff_long;\n        if( bSwab )\n            CPL_SWAP32PTR(&offset);\n        panOffsetOrCountArray[0] = offset;\n        return true;\n    }\n    else\n    {\n        vsi_l_offset l_nDirOffset = 0;\n        if( hTIFF->tif_flags&TIFF_BIGTIFF )\n        {\n            uint64 offset = psEntry->tdir_offset.toff_long8;\n            if( bSwab )\n                CPL_SWAP64PTR(&offset);\n            l_nDirOffset = offset;\n        }\n        else\n        {\n            uint32 offset = psEntry->tdir_offset.toff_long;\n            if( bSwab )\n                CPL_SWAP32PTR(&offset);\n            l_nDirOffset = offset;\n        }\n\n        if( psEntry->tdir_type == TIFF_SHORT )\n        {\n            return GTiffCacheOffsetOrCount(fp,\n                                    bSwab,\n                                    l_nDirOffset,\n                                    nBlockId,\n                                    nStripArrayAlloc,\n                                    panOffsetOrCountArray,\n                                    sizeof(uint16));\n        }\n        else if( psEntry->tdir_type == TIFF_LONG )\n        {\n            return GTiffCacheOffsetOrCount(fp,\n                                    bSwab,\n                                    l_nDirOffset,\n                                    nBlockId,\n                                    nStripArrayAlloc,\n                                    panOffsetOrCountArray,\n                                    sizeof(uint32));\n        }\n        else\n        {\n            return GTiffCacheOffsetOrCount(fp,\n                                    bSwab,\n                                    l_nDirOffset,\n                                    nBlockId,\n                                    nStripArrayAlloc,\n                                    panOffsetOrCountArray,\n                                    sizeof(uint64));\n        }\n    }\n}\n\n#endif  // #if defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n\n/************************************************************************/\n/*                          IsBlockAvailable()                          */\n/*                                                                      */\n/*      Return true if the indicated strip/tile is available.  We       */\n/*      establish this by testing if the stripbytecount is zero.  If    */\n/*      zero then the block has never been committed to disk.           */\n/************************************************************************/\n\nbool GTiffDataset::IsBlockAvailable( int nBlockId,\n                                     vsi_l_offset* pnOffset,\n                                     vsi_l_offset* pnSize,\n                                     bool *pbErrOccurred )\n\n{\n    if( pbErrOccurred )\n        *pbErrOccurred = false;\n\n    WaitCompletionForBlock(nBlockId);\n\n#if defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n    // Optimization to avoid fetching the whole Strip/TileCounts and\n    // Strip/TileOffsets arrays.\n\n    // Note: if strip choping is in effect, _TIFFFillStrilesInternal()\n    // will have 0-memset td_stripoffset_entry/td_stripbytecount_entry, so\n    // we won't enter the below block\n\n    if( eAccess == GA_ReadOnly &&\n        hTIFF->tif_dir.td_stripoffset_entry.tdir_tag != 0 &&\n        hTIFF->tif_dir.td_stripbytecount_entry.tdir_tag != 0 &&\n        !bStreamingIn )\n    {\n        if( !((hTIFF->tif_dir.td_stripoffset_entry.tdir_type == TIFF_SHORT ||\n               hTIFF->tif_dir.td_stripoffset_entry.tdir_type == TIFF_LONG ||\n               hTIFF->tif_dir.td_stripoffset_entry.tdir_type == TIFF_LONG8) &&\n              (hTIFF->tif_dir.td_stripbytecount_entry.tdir_type == TIFF_SHORT ||\n               hTIFF->tif_dir.td_stripbytecount_entry.tdir_type == TIFF_LONG ||\n               hTIFF->tif_dir.td_stripbytecount_entry.tdir_type == TIFF_LONG8)) )\n        {\n            if( nStripArrayAlloc == 0 )\n            {\n                CPLError(CE_Failure, CPLE_NotSupported,\n                         \"Unhandled type for StripOffset/StripByteCount\");\n                nStripArrayAlloc = ~nStripArrayAlloc;\n            }\n            if( pnOffset )\n                *pnOffset = 0;\n            if( pnSize )\n                *pnSize = 0;\n            if( pbErrOccurred )\n                *pbErrOccurred = true;\n            return false;\n        }\n\n        // The size of tags can be actually lesser than the number of strips\n        // (libtiff accepts such files)\n        if( static_cast<uint32>(nBlockId) >=\n                hTIFF->tif_dir.td_stripoffset_entry.tdir_count ||\n            static_cast<uint32>(nBlockId) >=\n                hTIFF->tif_dir.td_stripbytecount_entry.tdir_count )\n        {\n            // In case the tags aren't large enough.\n            if( pnOffset )\n                *pnOffset = 0;\n            if( pnSize )\n                *pnSize = 0;\n            if( pbErrOccurred )\n                *pbErrOccurred = true;\n            return false;\n        }\n\n        if( hTIFF->tif_dir.td_stripoffset == nullptr )\n        {\n            nStripArrayAlloc = 0;\n        }\n        if( static_cast<uint32>(nBlockId) >= nStripArrayAlloc )\n        {\n            if( nBlockId > 1000000 )\n            {\n                // Avoid excessive memory allocation attempt\n                if( m_nFileSize == 0 )\n                {\n                    VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n                    const vsi_l_offset nCurOffset = VSIFTellL(fp);\n                    CPL_IGNORE_RET_VAL( VSIFSeekL(fp, 0, SEEK_END) );\n                    m_nFileSize = VSIFTellL(fp);\n                    CPL_IGNORE_RET_VAL( VSIFSeekL(fp, nCurOffset, SEEK_SET) );\n                }\n                // For such a big blockid we need at least a TIFF_LONG\n                if( static_cast<vsi_l_offset>(nBlockId) >\n                                        m_nFileSize / (2 * sizeof(GUInt32)) )\n                {\n                    CPLError(CE_Failure, CPLE_AppDefined, \"File too short\");\n                    if( pnOffset )\n                        *pnOffset = 0;\n                    if( pnSize )\n                        *pnSize = 0;\n                    if( pbErrOccurred )\n                        *pbErrOccurred = true;\n                    return false;\n                }\n            }\n\n            uint32 nStripArrayAllocBefore = nStripArrayAlloc;\n            uint32 nStripArrayAllocNew;\n            if( nStripArrayAlloc == 0 &&\n                hTIFF->tif_dir.td_nstrips < 1024 * 1024 )\n            {\n                nStripArrayAllocNew = hTIFF->tif_dir.td_nstrips;\n            }\n            else\n            {\n                nStripArrayAllocNew = std::max(\n                    static_cast<uint32>(nBlockId) + 1, 1024U * 512U );\n                if( nStripArrayAllocNew < UINT_MAX / 2  )\n                    nStripArrayAllocNew *= 2;\n                nStripArrayAllocNew = std::min(\n                    nStripArrayAllocNew, hTIFF->tif_dir.td_nstrips);\n            }\n            CPLAssert( static_cast<uint32>(nBlockId) < nStripArrayAllocNew );\n            const uint64 nArraySize64 =\n                static_cast<uint64>(sizeof(uint64)) * nStripArrayAllocNew;\n            const size_t nArraySize = static_cast<size_t>(nArraySize64);\n#if SIZEOF_VOIDP == 4\n            if( nArraySize != nArraySize64 )\n            {\n                CPLError(CE_Failure, CPLE_OutOfMemory,\n                         \"Cannot allocate strip offset and bytecount arrays\");\n                if( pbErrOccurred )\n                    *pbErrOccurred = true;\n                return false;\n            }\n#endif\n            uint64* offsetArray = static_cast<uint64 *>(\n                _TIFFrealloc( hTIFF->tif_dir.td_stripoffset, nArraySize ) );\n            uint64* bytecountArray = static_cast<uint64 *>(\n                _TIFFrealloc( hTIFF->tif_dir.td_stripbytecount, nArraySize ) );\n            if( offsetArray )\n                hTIFF->tif_dir.td_stripoffset = offsetArray;\n            if( bytecountArray )\n                hTIFF->tif_dir.td_stripbytecount = bytecountArray;\n            if( offsetArray && bytecountArray )\n            {\n                nStripArrayAlloc = nStripArrayAllocNew;\n                memset(hTIFF->tif_dir.td_stripoffset + nStripArrayAllocBefore,\n                    0xFF,\n                    (nStripArrayAlloc - nStripArrayAllocBefore) * sizeof(uint64) );\n                memset(hTIFF->tif_dir.td_stripbytecount + nStripArrayAllocBefore,\n                    0xFF,\n                    (nStripArrayAlloc - nStripArrayAllocBefore) * sizeof(uint64) );\n            }\n            else\n            {\n                CPLError(CE_Failure, CPLE_OutOfMemory,\n                         \"Cannot allocate strip offset and bytecount arrays\");\n                _TIFFfree(hTIFF->tif_dir.td_stripoffset);\n                hTIFF->tif_dir.td_stripoffset = nullptr;\n                _TIFFfree(hTIFF->tif_dir.td_stripbytecount);\n                hTIFF->tif_dir.td_stripbytecount = nullptr;\n                nStripArrayAlloc = 0;\n            }\n        }\n        if( hTIFF->tif_dir.td_stripbytecount == nullptr )\n        {\n            if( pbErrOccurred )\n                *pbErrOccurred = true;\n            return false;\n        }\n        if( ~(hTIFF->tif_dir.td_stripoffset[nBlockId]) == 0 ||\n            ~(hTIFF->tif_dir.td_stripbytecount[nBlockId]) == 0 )\n        {\n            VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n            const vsi_l_offset nCurOffset = VSIFTellL(fp);\n            if( ~(hTIFF->tif_dir.td_stripoffset[nBlockId]) == 0 )\n            {\n                if( !ReadStripArray( fp,\n                                hTIFF,\n                                &hTIFF->tif_dir.td_stripoffset_entry,\n                                nBlockId,\n                                nStripArrayAlloc,\n                                hTIFF->tif_dir.td_stripoffset ) )\n                {\n                    if( pbErrOccurred )\n                        *pbErrOccurred = true;\n                    return false;\n                }\n            }\n\n            if( ~(hTIFF->tif_dir.td_stripbytecount[nBlockId]) == 0 )\n            {\n                if( !ReadStripArray( fp,\n                                hTIFF,\n                                &hTIFF->tif_dir.td_stripbytecount_entry,\n                                nBlockId,\n                                nStripArrayAlloc,\n                                hTIFF->tif_dir.td_stripbytecount ) )\n                {\n                    if( pbErrOccurred )\n                        *pbErrOccurred = true;\n                    return false;\n                }\n            }\n            if( VSIFSeekL(fp, nCurOffset, SEEK_SET) != 0 )\n            {\n                // For some reason Coverity reports:\n                // Value of non-local \"this->hTIFF->tif_dir.td_stripoffset\"\n                // that was verified to be \"NULL\" is not restored as it was\n                // along other paths.\n                // coverity[end_of_path]\n                if( pbErrOccurred )\n                    *pbErrOccurred = true;\n                return false;\n            }\n        }\n        if( pnOffset )\n            *pnOffset = hTIFF->tif_dir.td_stripoffset[nBlockId];\n        if( pnSize )\n            *pnSize = hTIFF->tif_dir.td_stripbytecount[nBlockId];\n        return hTIFF->tif_dir.td_stripbytecount[nBlockId] != 0;\n    }\n#endif  // defined(INTERNAL_LIBTIFF) && defined(DEFER_STRILE_LOAD)\n    toff_t *panByteCounts = nullptr;\n    toff_t *panOffsets = nullptr;\n    const bool bIsTiled = CPL_TO_BOOL( TIFFIsTiled(hTIFF) );\n\n    if( ( bIsTiled\n          && TIFFGetField( hTIFF, TIFFTAG_TILEBYTECOUNTS, &panByteCounts )\n          && (pnOffset == nullptr ||\n              TIFFGetField( hTIFF, TIFFTAG_TILEOFFSETS, &panOffsets )) )\n        || ( !bIsTiled\n          && TIFFGetField( hTIFF, TIFFTAG_STRIPBYTECOUNTS, &panByteCounts )\n          && (pnOffset == nullptr ||\n              TIFFGetField( hTIFF, TIFFTAG_STRIPOFFSETS, &panOffsets )) ) )\n    {\n        if( panByteCounts == nullptr || (pnOffset != nullptr && panOffsets == nullptr) )\n        {\n            if( pbErrOccurred )\n                *pbErrOccurred = true;\n            return false;\n        }\n        const int nBlockCount =\n            bIsTiled ? TIFFNumberOfTiles(hTIFF) : TIFFNumberOfStrips(hTIFF);\n        if( nBlockId >= nBlockCount )\n        {\n            if( pbErrOccurred )\n                *pbErrOccurred = true;\n            return false;\n        }\n\n        if( pnOffset )\n            *pnOffset = panOffsets[nBlockId];\n        if( pnSize )\n            *pnSize = panByteCounts[nBlockId];\n        return panByteCounts[nBlockId] != 0;\n    }\n    else\n    {\n        if( pbErrOccurred )\n            *pbErrOccurred = true;\n    }\n\n    return false;\n}\n\n/************************************************************************/\n/*                             FlushCache()                             */\n/*                                                                      */\n/*      We override this so we can also flush out local tiff strip      */\n/*      cache if need be.                                               */\n/************************************************************************/\n\nvoid GTiffDataset::FlushCache()\n\n{\n    FlushCacheInternal( true );\n}\n\nvoid GTiffDataset::FlushCacheInternal( bool bFlushDirectory )\n{\n    if( bIsFinalized || ppoActiveDSRef == nullptr )\n        return;\n\n    GDALPamDataset::FlushCache();\n\n    if( bLoadedBlockDirty && nLoadedBlock != -1 )\n        FlushBlockBuf();\n\n    CPLFree( pabyBlockBuf );\n    pabyBlockBuf = nullptr;\n    nLoadedBlock = -1;\n    bLoadedBlockDirty = false;\n\n    // Finish compression\n    if( poCompressThreadPool )\n    {\n        poCompressThreadPool->WaitCompletion();\n\n        // Flush remaining data\n        for( int i = 0; i < static_cast<int>(asCompressionJobs.size()); ++i )\n        {\n            if( asCompressionJobs[i].bReady )\n            {\n                if( asCompressionJobs[i].nCompressedBufferSize )\n                {\n                    WriteRawStripOrTile( asCompressionJobs[i].nStripOrTile,\n                                   asCompressionJobs[i].pabyCompressedBuffer,\n                                   asCompressionJobs[i].nCompressedBufferSize );\n                }\n                asCompressionJobs[i].pabyCompressedBuffer = nullptr;\n                asCompressionJobs[i].nBufferSize = 0;\n                asCompressionJobs[i].bReady = false;\n                asCompressionJobs[i].nStripOrTile = -1;\n            }\n        }\n    }\n\n    if( bFlushDirectory && GetAccess() == GA_Update )\n    {\n        if( !SetDirectory() )\n            return;\n        FlushDirectory();\n    }\n}\n\n/************************************************************************/\n/*                           FlushDirectory()                           */\n/************************************************************************/\n\nvoid GTiffDataset::FlushDirectory()\n\n{\n    if( GetAccess() == GA_Update )\n    {\n        if( bMetadataChanged )\n        {\n            if( !SetDirectory() )\n                return;\n            bNeedsRewrite =\n                    WriteMetadata( this, hTIFF, true, osProfile, osFilename,\n                                   papszCreationOptions );\n            bMetadataChanged = false;\n\n            if( m_bForceUnsetRPC )\n            {\n#ifdef HAVE_UNSETFIELD\n                double *padfRPCTag = nullptr;\n                uint16 nCount;\n                if( TIFFGetField( hTIFF, TIFFTAG_RPCCOEFFICIENT, &nCount, &padfRPCTag ) )\n                {\n                    std::vector<double> zeroes(92);\n                    TIFFSetField( hTIFF, TIFFTAG_RPCCOEFFICIENT, 92, zeroes.data() );\n                    TIFFUnsetField( hTIFF, TIFFTAG_RPCCOEFFICIENT );\n                    bNeedsRewrite = true;\n                }\n#endif\n                GDALWriteRPCTXTFile( osFilename, nullptr );\n                GDALWriteRPBFile( osFilename, nullptr );\n            }\n        }\n\n        if( bGeoTIFFInfoChanged )\n        {\n            if( !SetDirectory() )\n                return;\n            WriteGeoTIFFInfo();\n            bGeoTIFFInfoChanged = false;\n        }\n\n        if( bNoDataChanged )\n        {\n            if( !SetDirectory() )\n                return;\n            if( bNoDataSet )\n            {\n                WriteNoDataValue( hTIFF, dfNoDataValue );\n            }\n            else\n            {\n                UnsetNoDataValue( hTIFF );\n            }\n            bNeedsRewrite = true;\n            bNoDataChanged = false;\n        }\n\n        if( bNeedsRewrite )\n        {\n#if defined(TIFFLIB_VERSION)\n#if defined(HAVE_TIFFGETSIZEPROC)\n            if( !SetDirectory() )\n                return;\n\n            const TIFFSizeProc pfnSizeProc = TIFFGetSizeProc( hTIFF );\n\n            nDirOffset = pfnSizeProc( TIFFClientdata( hTIFF ) );\n            if( (nDirOffset % 2) == 1 )\n                ++nDirOffset;\n\n            TIFFRewriteDirectory( hTIFF );\n\n            TIFFSetSubDirectory( hTIFF, nDirOffset );\n#elif TIFFLIB_VERSION > 20010925 && TIFFLIB_VERSION != 20011807\n            if( !SetDirectory() )\n                return;\n\n            TIFFRewriteDirectory( hTIFF );\n#endif\n#endif\n            bNeedsRewrite = false;\n        }\n    }\n\n    // There are some circumstances in which we can reach this point\n    // without having made this our directory (SetDirectory()) in which\n    // case we should not risk a flush.\n    if( GetAccess() == GA_Update && TIFFCurrentDirOffset(hTIFF) == nDirOffset )\n    {\n#if defined(BIGTIFF_SUPPORT)\n        const TIFFSizeProc pfnSizeProc = TIFFGetSizeProc( hTIFF );\n\n        toff_t nNewDirOffset = pfnSizeProc( TIFFClientdata( hTIFF ) );\n        if( (nNewDirOffset % 2) == 1 )\n            ++nNewDirOffset;\n\n        TIFFFlush( hTIFF );\n\n        if( nDirOffset != TIFFCurrentDirOffset( hTIFF ) )\n        {\n            nDirOffset = nNewDirOffset;\n            CPLDebug( \"GTiff\",\n                      \"directory moved during flush in FlushDirectory()\" );\n        }\n#else\n        // For libtiff 3.X, the above causes regressions and crashes in\n        // tiff_write.py and tiff_ovr.py.\n        TIFFFlush( hTIFF );\n#endif\n    }\n}\n\n/************************************************************************/\n/*                           CleanOverviews()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::CleanOverviews()\n\n{\n    CPLAssert( bBase );\n\n    ScanDirectories();\n\n    FlushDirectory();\n    *ppoActiveDSRef = nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Cleanup overviews objects, and get offsets to all overview      */\n/*      directories.                                                    */\n/* -------------------------------------------------------------------- */\n    std::vector<toff_t> anOvDirOffsets;\n\n    for( int i = 0; i < nOverviewCount; ++i )\n    {\n        anOvDirOffsets.push_back( papoOverviewDS[i]->nDirOffset );\n        delete papoOverviewDS[i];\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Loop through all the directories, translating the offsets       */\n/*      into indexes we can use with TIFFUnlinkDirectory().             */\n/* -------------------------------------------------------------------- */\n    std::vector<uint16> anOvDirIndexes;\n    int iThisOffset = 1;\n\n    TIFFSetDirectory( hTIFF, 0 );\n\n    while( true )\n    {\n        for( int i = 0; i < nOverviewCount; ++i )\n        {\n            if( anOvDirOffsets[i] == TIFFCurrentDirOffset( hTIFF ) )\n            {\n                CPLDebug( \"GTiff\", \"%d -> %d\",\n                          static_cast<int>(anOvDirOffsets[i]), iThisOffset );\n                anOvDirIndexes.push_back( static_cast<uint16>(iThisOffset) );\n            }\n        }\n\n        if( TIFFLastDirectory( hTIFF ) )\n            break;\n\n        TIFFReadDirectory( hTIFF );\n        ++iThisOffset;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Actually unlink the target directories.  Note that we do        */\n/*      this from last to first so as to avoid renumbering any of       */\n/*      the earlier directories we need to remove.                      */\n/* -------------------------------------------------------------------- */\n    while( !anOvDirIndexes.empty() )\n    {\n        TIFFUnlinkDirectory( hTIFF, anOvDirIndexes.back() );\n        anOvDirIndexes.pop_back();\n    }\n\n    CPLFree( papoOverviewDS );\n\n    nOverviewCount = 0;\n    papoOverviewDS = nullptr;\n\n    if( !SetDirectory() )\n        return CE_Failure;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                   RegisterNewOverviewDataset()                       */\n/************************************************************************/\n\nCPLErr GTiffDataset::RegisterNewOverviewDataset(toff_t nOverviewOffset,\n                                                int l_nJpegQuality)\n{\n    GTiffDataset* poODS = new GTiffDataset();\n    poODS->ShareLockWithParentDataset(this);\n    poODS->osFilename = osFilename;\n    poODS->nJpegQuality = l_nJpegQuality;\n    poODS->nZLevel = nZLevel;\n    poODS->nLZMAPreset = nLZMAPreset;\n    poODS->nZSTDLevel = nZSTDLevel;\n    poODS->nWebPLevel = nWebPLevel;\n    poODS->bWebPLossless = bWebPLossless;\n    poODS->nJpegTablesMode = nJpegTablesMode;\n#if HAVE_LERC\n    poODS->dfMaxZError = dfMaxZError;\n    memcpy(poODS->anLercAddCompressionAndVersion, anLercAddCompressionAndVersion,\n           sizeof(anLercAddCompressionAndVersion));\n#endif\n\n    if( poODS->OpenOffset( hTIFF, ppoActiveDSRef, nOverviewOffset, false,\n                            GA_Update ) != CE_None )\n    {\n        delete poODS;\n        return CE_Failure;\n    }\n\n    ++nOverviewCount;\n    papoOverviewDS = static_cast<GTiffDataset **>(\n        CPLRealloc( papoOverviewDS,\n                    nOverviewCount * (sizeof(void*))) );\n    papoOverviewDS[nOverviewCount-1] = poODS;\n    poODS->poBaseDS = this;\n    poODS->bIsOverview_ = true;\n    return CE_None;\n}\n\n/************************************************************************/\n/*                     CreateTIFFColorTable()                           */\n/************************************************************************/\n\nstatic void CreateTIFFColorTable(GDALColorTable* poColorTable,\n                                 int nBits,\n                                 std::vector<unsigned short>& anTRed,\n                                 std::vector<unsigned short>& anTGreen,\n                                 std::vector<unsigned short>& anTBlue,\n                                 unsigned short*& panRed,\n                                 unsigned short*& panGreen,\n                                 unsigned short*& panBlue)\n{\n    int nColors;\n\n    if( nBits == 8 )\n        nColors = 256;\n    else if( nBits < 8 )\n        nColors = 1 << nBits;\n    else\n        nColors = 65536;\n\n    anTRed.resize(nColors,0);\n    anTGreen.resize(nColors,0);\n    anTBlue.resize(nColors,0);\n\n    for( int iColor = 0; iColor < nColors; ++iColor )\n    {\n        if( iColor < poColorTable->GetColorEntryCount() )\n        {\n            GDALColorEntry sRGB;\n\n            poColorTable->GetColorEntryAsRGB( iColor, &sRGB );\n\n            anTRed[iColor] = static_cast<unsigned short>(257 * sRGB.c1);\n            anTGreen[iColor] = static_cast<unsigned short>(257 * sRGB.c2);\n            anTBlue[iColor] = static_cast<unsigned short>(257 * sRGB.c3);\n        }\n        else\n        {\n            anTRed[iColor] = 0;\n            anTGreen[iColor] = 0;\n            anTBlue[iColor] = 0;\n        }\n    }\n\n    panRed = &(anTRed[0]);\n    panGreen = &(anTGreen[0]);\n    panBlue = &(anTBlue[0]);\n}\n\n/************************************************************************/\n/*                  CreateOverviewsFromSrcOverviews()                   */\n/************************************************************************/\n\nCPLErr GTiffDataset::CreateOverviewsFromSrcOverviews(GDALDataset* poSrcDS)\n{\n    CPLAssert(poSrcDS->GetRasterCount() != 0);\n    CPLAssert(nOverviewCount == 0);\n\n    ScanDirectories();\n\n/* -------------------------------------------------------------------- */\n/*      Move to the directory for this dataset.                         */\n/* -------------------------------------------------------------------- */\n    if( !SetDirectory() )\n        return CE_Failure;\n    FlushDirectory();\n\n    int nOvBitsPerSample = nBitsPerSample;\n\n/* -------------------------------------------------------------------- */\n/*      Do we have a palette?  If so, create a TIFF compatible version. */\n/* -------------------------------------------------------------------- */\n    std::vector<unsigned short> anTRed;\n    std::vector<unsigned short> anTGreen;\n    std::vector<unsigned short> anTBlue;\n    unsigned short *panRed = nullptr;\n    unsigned short *panGreen = nullptr;\n    unsigned short *panBlue = nullptr;\n\n    if( nPhotometric == PHOTOMETRIC_PALETTE && poColorTable != nullptr )\n    {\n        CreateTIFFColorTable(poColorTable, nOvBitsPerSample,\n                             anTRed, anTGreen, anTBlue,\n                             panRed, panGreen, panBlue);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Do we need some metadata for the overviews?                     */\n/* -------------------------------------------------------------------- */\n    CPLString osMetadata;\n\n    GTIFFBuildOverviewMetadata( \"NONE\", this, osMetadata );\n\n/* -------------------------------------------------------------------- */\n/*      Fetch extra sample tag                                          */\n/* -------------------------------------------------------------------- */\n    uint16 *panExtraSampleValues = nullptr;\n    uint16 nExtraSamples = 0;\n\n    if( TIFFGetField( hTIFF, TIFFTAG_EXTRASAMPLES, &nExtraSamples,\n                      &panExtraSampleValues) )\n    {\n        uint16* panExtraSampleValuesNew =\n            static_cast<uint16*>(\n                CPLMalloc(nExtraSamples * sizeof(uint16)) );\n        memcpy( panExtraSampleValuesNew, panExtraSampleValues,\n                nExtraSamples * sizeof(uint16));\n        panExtraSampleValues = panExtraSampleValuesNew;\n    }\n    else\n    {\n        panExtraSampleValues = nullptr;\n        nExtraSamples = 0;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Fetch predictor tag                                             */\n/* -------------------------------------------------------------------- */\n    uint16 nPredictor = PREDICTOR_NONE;\n    if( nCompression == COMPRESSION_LZW ||\n        nCompression == COMPRESSION_ADOBE_DEFLATE ||\n        nCompression == COMPRESSION_ZSTD )\n        TIFFGetField( hTIFF, TIFFTAG_PREDICTOR, &nPredictor );\n    int nOvrBlockXSize = 0;\n    int nOvrBlockYSize = 0;\n    GTIFFGetOverviewBlockSize(&nOvrBlockXSize, &nOvrBlockYSize);\n\n    int nSrcOverviews = poSrcDS->GetRasterBand(1)->GetOverviewCount();\n    CPLErr eErr = CE_None;\n\n    for( int i = 0; i < nSrcOverviews && eErr == CE_None; ++i )\n    {\n        GDALRasterBand* poOvrBand = poSrcDS->GetRasterBand(1)->GetOverview(i);\n\n        int nOXSize = poOvrBand->GetXSize();\n        int nOYSize = poOvrBand->GetYSize();\n\n        int nOvrJpegQuality = nJpegQuality;\n        if( nCompression == COMPRESSION_JPEG &&\n            CPLGetConfigOption( \"JPEG_QUALITY_OVERVIEW\", nullptr ) != nullptr )\n        {\n            nOvrJpegQuality =\n                atoi(CPLGetConfigOption(\"JPEG_QUALITY_OVERVIEW\",\"75\"));\n        }\n\n        CPLString osNoData; // don't move this in inner scope\n        const char* pszNoData = nullptr;\n        if( bNoDataSet )\n        {\n            osNoData = GTiffFormatGDALNoDataTagValue(dfNoDataValue);\n            pszNoData = osNoData.c_str();\n        }\n\n        toff_t nOverviewOffset =\n                GTIFFWriteDirectory(hTIFF, FILETYPE_REDUCEDIMAGE,\n                                    nOXSize, nOYSize,\n                                    nOvBitsPerSample, nPlanarConfig,\n                                    nSamplesPerPixel,\n                                    nOvrBlockXSize,\n                                    nOvrBlockYSize,\n                                    TRUE,\n                                    nCompression, nPhotometric, nSampleFormat,\n                                    nPredictor,\n                                    panRed, panGreen, panBlue,\n                                    nExtraSamples, panExtraSampleValues,\n                                    osMetadata,\n                                    nOvrJpegQuality >= 0 ?\n                                        CPLSPrintf(\"%d\", nOvrJpegQuality) : nullptr,\n                                    CPLSPrintf(\"%d\", nJpegTablesMode),\n                                    pszNoData,\n#ifdef HAVE_LERC\n                                    anLercAddCompressionAndVersion\n#else\n                                    nullptr\n#endif\n                                   );\n\n        if( nOverviewOffset == 0 )\n            eErr = CE_Failure;\n        else\n            eErr = RegisterNewOverviewDataset(nOverviewOffset, nOvrJpegQuality);\n    }\n\n    CPLFree(panExtraSampleValues);\n    panExtraSampleValues = nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Create overviews for the mask.                                  */\n/* -------------------------------------------------------------------- */\n    if( eErr == CE_None && nSrcOverviews > 0 &&\n        poSrcDS->GetRasterBand(1)->GetOverview(0)->GetMaskFlags() == GMF_PER_DATASET )\n    {\n        eErr = CreateInternalMaskOverviews(nOvrBlockXSize, nOvrBlockYSize);\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                       CreateInternalMaskOverviews()                  */\n/************************************************************************/\n\nCPLErr GTiffDataset::CreateInternalMaskOverviews(int nOvrBlockXSize,\n                                                 int nOvrBlockYSize)\n{\n    ScanDirectories();\n\n/* -------------------------------------------------------------------- */\n/*      Create overviews for the mask.                                  */\n/* -------------------------------------------------------------------- */\n    CPLErr eErr = CE_None;\n\n    const char* pszInternalMask =\n        CPLGetConfigOption(\"GDAL_TIFF_INTERNAL_MASK\", nullptr);\n    if( poMaskDS != nullptr &&\n        poMaskDS->GetRasterCount() == 1 &&\n        (pszInternalMask == nullptr || CPLTestBool(pszInternalMask)) )\n    {\n        int nMaskOvrCompression;\n        if( strstr(GDALGetMetadataItem(GDALGetDriverByName( \"GTiff\" ),\n                                       GDAL_DMD_CREATIONOPTIONLIST, nullptr ),\n                   \"<Value>DEFLATE</Value>\") != nullptr )\n            nMaskOvrCompression = COMPRESSION_ADOBE_DEFLATE;\n        else\n            nMaskOvrCompression = COMPRESSION_PACKBITS;\n\n        for( int i = 0; i < nOverviewCount; ++i )\n        {\n            if( papoOverviewDS[i]->poMaskDS == nullptr )\n            {\n                const toff_t nOverviewOffset =\n                    GTIFFWriteDirectory(\n                        hTIFF, FILETYPE_REDUCEDIMAGE | FILETYPE_MASK,\n                        papoOverviewDS[i]->nRasterXSize,\n                        papoOverviewDS[i]->nRasterYSize,\n                        1, PLANARCONFIG_CONTIG,\n                        1, nOvrBlockXSize, nOvrBlockYSize, TRUE,\n                        nMaskOvrCompression, PHOTOMETRIC_MASK,\n                        SAMPLEFORMAT_UINT, PREDICTOR_NONE,\n                        nullptr, nullptr, nullptr, 0, nullptr,\n                        \"\",\n                        nullptr, nullptr, nullptr, nullptr );\n\n                if( nOverviewOffset == 0 )\n                {\n                    eErr = CE_Failure;\n                    continue;\n                }\n\n                GTiffDataset *poODS = new GTiffDataset();\n                poODS->ShareLockWithParentDataset(this);\n                poODS->osFilename = osFilename;\n                if( poODS->OpenOffset( hTIFF, ppoActiveDSRef,\n                                       nOverviewOffset, false,\n                                       GA_Update ) != CE_None )\n                {\n                    delete poODS;\n                    eErr = CE_Failure;\n                }\n                else\n                {\n                    poODS->bPromoteTo8Bits =\n                        CPLTestBool(\n                            CPLGetConfigOption(\n                                \"GDAL_TIFF_INTERNAL_MASK_TO_8BIT\", \"YES\" ) );\n                    poODS->poBaseDS = this;\n                    papoOverviewDS[i]->poMaskDS = poODS;\n                    ++poMaskDS->nOverviewCount;\n                    poMaskDS->papoOverviewDS = static_cast<GTiffDataset **>(\n                        CPLRealloc(\n                            poMaskDS->papoOverviewDS,\n                            poMaskDS->nOverviewCount * (sizeof(void*))) );\n                    poMaskDS->papoOverviewDS[poMaskDS->nOverviewCount-1] =\n                        poODS;\n                }\n            }\n        }\n    }\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                          IBuildOverviews()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::IBuildOverviews(\n    const char * pszResampling,\n    int nOverviews, int * panOverviewList,\n    int nBandsIn, int * panBandList,\n    GDALProgressFunc pfnProgress, void * pProgressData )\n\n{\n    ScanDirectories();\n\n    // Make implicit JPEG overviews invisible, but do not destroy\n    // them in case they are already used (not sure that the client\n    // has the right to do that.  Behaviour maybe undefined in GDAL API.\n    nJPEGOverviewCount = 0;\n\n/* -------------------------------------------------------------------- */\n/*      If RRD or external OVR overviews requested, then invoke         */\n/*      generic handling.                                               */\n/* -------------------------------------------------------------------- */\n    bool bUseGenericHandling = false;\n\n    if( CPLTestBool(CPLGetConfigOption( \"USE_RRD\", \"NO\" ))\n        || CPLTestBool(CPLGetConfigOption( \"TIFF_USE_OVR\", \"NO\" )) )\n    {\n        bUseGenericHandling = true;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If we don't have read access, then create the overviews         */\n/*      externally.                                                     */\n/* -------------------------------------------------------------------- */\n    if( GetAccess() != GA_Update )\n    {\n        CPLDebug( \"GTiff\",\n                  \"File open for read-only accessing, \"\n                  \"creating overviews externally.\" );\n\n        bUseGenericHandling = true;\n    }\n\n    if( bUseGenericHandling )\n    {\n        if( nOverviewCount != 0 )\n        {\n            CPLError(\n                CE_Failure, CPLE_NotSupported,\n                \"Cannot add external overviews when there are already \"\n                \"internal overviews\" );\n            return CE_Failure;\n        }\n\n        CPLErr eErr = GDALDataset::IBuildOverviews(\n            pszResampling, nOverviews, panOverviewList,\n            nBandsIn, panBandList, pfnProgress, pProgressData );\n        if( eErr == CE_None && poMaskDS )\n        {\n            CPLError(CE_Warning, CPLE_NotSupported,\n                     \"Building external overviews whereas there is an internal \"\n                     \"mask is not fully supported. \"\n                     \"The overviews of the non-mask bands will be created, \"\n                     \"but not the overviews of the mask band.\");\n        }\n        return eErr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Our TIFF overview support currently only works safely if all    */\n/*      bands are handled at the same time.                             */\n/* -------------------------------------------------------------------- */\n    if( nBandsIn != GetRasterCount() )\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"Generation of overviews in TIFF currently only \"\n                  \"supported when operating on all bands.  \"\n                  \"Operation failed.\" );\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If zero overviews were requested, we need to clear all          */\n/*      existing overviews.                                             */\n/* -------------------------------------------------------------------- */\n    if( nOverviews == 0 )\n    {\n        if( nOverviewCount == 0 )\n            return GDALDataset::IBuildOverviews(\n                pszResampling, nOverviews, panOverviewList,\n                nBandsIn, panBandList, pfnProgress, pProgressData );\n\n        return CleanOverviews();\n    }\n\n/* -------------------------------------------------------------------- */\n/*      libtiff 3.X has issues when generating interleaved overviews.   */\n/*      so generate them one after another one.                         */\n/* -------------------------------------------------------------------- */\n\n    CPLErr eErr = CE_None;\n\n#ifndef BIGTIFF_SUPPORT\n    if( nOverviews > 1 )\n    {\n        double* padfOvrRasterFactor =\n            static_cast<double*>( CPLMalloc(sizeof(double) * nOverviews) );\n        double dfTotal = 0;\n        for( int i = 0; i < nOverviews; ++i )\n        {\n            if( panOverviewList[i] <= 0 )\n            {\n                CPLError(CE_Failure, CPLE_AppDefined,\n                         \"Invalid overview factor : %d\", panOverviewList[i]);\n                eErr = CE_Failure;\n                break;\n            }\n            padfOvrRasterFactor[i] =\n                1.0 / (panOverviewList[i] * panOverviewList[i]);\n            dfTotal += padfOvrRasterFactor[i];\n        }\n\n        double dfAcc = 0.0;\n        for( int i = 0; i < nOverviews && eErr == CE_None; ++i )\n        {\n            void *pScaledProgressData =\n                GDALCreateScaledProgress(\n                    dfAcc / dfTotal,\n                    (dfAcc + padfOvrRasterFactor[i]) / dfTotal,\n                    pfnProgress, pProgressData );\n            dfAcc += padfOvrRasterFactor[i];\n\n            eErr = IBuildOverviews(\n                pszResampling, 1, &panOverviewList[i],\n                nBandsIn, panBandList, GDALScaledProgress,\n                pScaledProgressData );\n\n            GDALDestroyScaledProgress(pScaledProgressData);\n        }\n\n        CPLFree(padfOvrRasterFactor);\n\n        return eErr;\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Initialize progress counter.                                    */\n/* -------------------------------------------------------------------- */\n    if( !pfnProgress( 0.0, nullptr, pProgressData ) )\n    {\n        CPLError( CE_Failure, CPLE_UserInterrupt, \"User terminated\" );\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Move to the directory for this dataset.                         */\n/* -------------------------------------------------------------------- */\n    if( !SetDirectory() )\n        return CE_Failure;\n    FlushDirectory();\n\n/* -------------------------------------------------------------------- */\n/*      If we are averaging bit data to grayscale we need to create     */\n/*      8bit overviews.                                                 */\n/* -------------------------------------------------------------------- */\n    int nOvBitsPerSample = nBitsPerSample;\n\n    if( STARTS_WITH_CI(pszResampling, \"AVERAGE_BIT2\") )\n        nOvBitsPerSample = 8;\n\n/* -------------------------------------------------------------------- */\n/*      Do we have a palette?  If so, create a TIFF compatible version. */\n/* -------------------------------------------------------------------- */\n    std::vector<unsigned short> anTRed;\n    std::vector<unsigned short> anTGreen;\n    std::vector<unsigned short> anTBlue;\n    unsigned short *panRed = nullptr;\n    unsigned short *panGreen = nullptr;\n    unsigned short *panBlue = nullptr;\n\n    if( nPhotometric == PHOTOMETRIC_PALETTE && poColorTable != nullptr )\n    {\n        CreateTIFFColorTable(poColorTable, nOvBitsPerSample,\n                             anTRed, anTGreen, anTBlue,\n                             panRed, panGreen, panBlue);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Do we need some metadata for the overviews?                     */\n/* -------------------------------------------------------------------- */\n    CPLString osMetadata;\n\n    GTIFFBuildOverviewMetadata( pszResampling, this, osMetadata );\n\n/* -------------------------------------------------------------------- */\n/*      Fetch extra sample tag                                          */\n/* -------------------------------------------------------------------- */\n    uint16 *panExtraSampleValues = nullptr;\n    uint16 nExtraSamples = 0;\n\n    if( TIFFGetField( hTIFF, TIFFTAG_EXTRASAMPLES, &nExtraSamples,\n                      &panExtraSampleValues) )\n    {\n        uint16* panExtraSampleValuesNew =\n            static_cast<uint16*>( CPLMalloc(nExtraSamples * sizeof(uint16)) );\n        memcpy( panExtraSampleValuesNew, panExtraSampleValues,\n                nExtraSamples * sizeof(uint16) );\n        panExtraSampleValues = panExtraSampleValuesNew;\n    }\n    else\n    {\n        panExtraSampleValues = nullptr;\n        nExtraSamples = 0;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Fetch predictor tag                                             */\n/* -------------------------------------------------------------------- */\n    uint16 nPredictor = PREDICTOR_NONE;\n    if( nCompression == COMPRESSION_LZW ||\n        nCompression == COMPRESSION_ADOBE_DEFLATE ||\n        nCompression == COMPRESSION_ZSTD )\n        TIFFGetField( hTIFF, TIFFTAG_PREDICTOR, &nPredictor );\n\n/* -------------------------------------------------------------------- */\n/*      Establish which of the overview levels we already have, and     */\n/*      which are new.  We assume that band 1 of the file is            */\n/*      representative.                                                 */\n/* -------------------------------------------------------------------- */\n    int nOvrBlockXSize = 0;\n    int nOvrBlockYSize = 0;\n    GTIFFGetOverviewBlockSize(&nOvrBlockXSize, &nOvrBlockYSize);\n    std::vector<bool> abRequireNewOverview(nOverviews, true);\n    for( int i = 0; i < nOverviews && eErr == CE_None; ++i )\n    {\n        for( int j = 0; j < nOverviewCount && eErr == CE_None; ++j )\n        {\n            GTiffDataset *poODS = papoOverviewDS[j];\n\n            const int nOvFactor =\n                GDALComputeOvFactor(poODS->GetRasterXSize(),\n                                    GetRasterXSize(),\n                                    poODS->GetRasterYSize(),\n                                    GetRasterYSize());\n\n            // If we already have a 1x1 overview and this new one would result\n            // in it too, then don't create it.\n            if( poODS->GetRasterXSize() == 1 &&\n                poODS->GetRasterYSize() == 1 &&\n                (GetRasterXSize() + panOverviewList[i] - 1)\n                    / panOverviewList[i] == 1 &&\n                (GetRasterYSize() + panOverviewList[i] - 1)\n                    / panOverviewList[i] == 1 )\n            {\n                abRequireNewOverview[i] = false;\n                break;\n            }\n\n            if( nOvFactor == panOverviewList[i]\n                || nOvFactor == GDALOvLevelAdjust2( panOverviewList[i],\n                                                    GetRasterXSize(),\n                                                    GetRasterYSize() ) )\n            {\n                abRequireNewOverview[i] = false;\n                break;\n            }\n        }\n\n        if( abRequireNewOverview[i] )\n        {\n            const int nOXSize =\n                (GetRasterXSize() + panOverviewList[i] - 1)\n                / panOverviewList[i];\n            const int nOYSize =\n                (GetRasterYSize() + panOverviewList[i] - 1)\n                / panOverviewList[i];\n\n            int nOvrJpegQuality = nJpegQuality;\n            if( nCompression == COMPRESSION_JPEG &&\n                CPLGetConfigOption( \"JPEG_QUALITY_OVERVIEW\", nullptr ) != nullptr )\n            {\n                nOvrJpegQuality =\n                    atoi(CPLGetConfigOption(\"JPEG_QUALITY_OVERVIEW\",\"75\"));\n            }\n\n            CPLString osNoData; // don't move this in inner scope\n            const char* pszNoData = nullptr;\n            if( bNoDataSet )\n            {\n                osNoData = GTiffFormatGDALNoDataTagValue(dfNoDataValue);\n                pszNoData = osNoData.c_str();\n            }\n\n            const toff_t nOverviewOffset =\n                GTIFFWriteDirectory(\n                    hTIFF, FILETYPE_REDUCEDIMAGE,\n                    nOXSize, nOYSize,\n                    nOvBitsPerSample, nPlanarConfig,\n                    nSamplesPerPixel, nOvrBlockXSize, nOvrBlockYSize, TRUE,\n                    nCompression, nPhotometric, nSampleFormat,\n                    nPredictor,\n                    panRed, panGreen, panBlue,\n                    nExtraSamples, panExtraSampleValues,\n                    osMetadata,\n                    nOvrJpegQuality >= 0 ?\n                                CPLSPrintf(\"%d\", nOvrJpegQuality) : nullptr,\n                    CPLSPrintf(\"%d\", nJpegTablesMode),\n                    pszNoData,\n#ifdef HAVE_LERC\n                    anLercAddCompressionAndVersion\n#else\n                    nullptr\n#endif\n            );\n\n            if( nOverviewOffset == 0 )\n                eErr = CE_Failure;\n            else\n                eErr = RegisterNewOverviewDataset(nOverviewOffset,\n                                                  nOvrJpegQuality);\n        }\n    }\n\n    CPLFree(panExtraSampleValues);\n    panExtraSampleValues = nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Create overviews for the mask.                                  */\n/* -------------------------------------------------------------------- */\n    if( eErr != CE_None )\n        return eErr;\n\n    eErr = CreateInternalMaskOverviews(nOvrBlockXSize, nOvrBlockYSize);\n\n/* -------------------------------------------------------------------- */\n/*      Refresh overviews for the mask                                  */\n/* -------------------------------------------------------------------- */\n    if( poMaskDS != nullptr &&\n        poMaskDS->GetRasterCount() == 1 )\n    {\n        int nMaskOverviews = 0;\n\n        GDALRasterBand **papoOverviewBands = static_cast<GDALRasterBand **>(\n            CPLCalloc(sizeof(void*),nOverviewCount) );\n        for( int i = 0; i < nOverviewCount; ++i )\n        {\n            if( papoOverviewDS[i]->poMaskDS != nullptr )\n            {\n                papoOverviewBands[nMaskOverviews++] =\n                        papoOverviewDS[i]->poMaskDS->GetRasterBand(1);\n            }\n        }\n        eErr = GDALRegenerateOverviews(\n            poMaskDS->GetRasterBand(1),\n            nMaskOverviews,\n            reinterpret_cast<GDALRasterBandH *>( papoOverviewBands ),\n            pszResampling, GDALDummyProgress, nullptr );\n        CPLFree(papoOverviewBands);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Refresh old overviews that were listed.                         */\n/* -------------------------------------------------------------------- */\n    if( nPlanarConfig == PLANARCONFIG_CONTIG &&\n        GDALDataTypeIsComplex(GetRasterBand( panBandList[0] )->\n                              GetRasterDataType()) == FALSE &&\n        GetRasterBand( panBandList[0] )->GetColorTable() == nullptr &&\n        (STARTS_WITH_CI(pszResampling, \"NEAR\") ||\n         EQUAL(pszResampling, \"AVERAGE\") ||\n         EQUAL(pszResampling, \"GAUSS\") ||\n         EQUAL(pszResampling, \"CUBIC\") ||\n         EQUAL(pszResampling, \"CUBICSPLINE\") ||\n         EQUAL(pszResampling, \"LANCZOS\") ||\n         EQUAL(pszResampling, \"BILINEAR\")) )\n    {\n        // In the case of pixel interleaved compressed overviews, we want to\n        // generate the overviews for all the bands block by block, and not\n        // band after band, in order to write the block once and not loose\n        // space in the TIFF file.  We also use that logic for uncompressed\n        // overviews, since GDALRegenerateOverviewsMultiBand() will be able to\n        // trigger cascading overview regeneration even in the presence\n        // of an alpha band.\n\n        int nNewOverviews = 0;\n\n        GDALRasterBand ***papapoOverviewBands =\n            static_cast<GDALRasterBand ***>(CPLCalloc(sizeof(void*),nBandsIn));\n        GDALRasterBand **papoBandList =\n            static_cast<GDALRasterBand **>(CPLCalloc(sizeof(void*),nBandsIn));\n        for( int iBand = 0; iBand < nBandsIn; ++iBand )\n        {\n            GDALRasterBand* poBand = GetRasterBand( panBandList[iBand] );\n\n            papoBandList[iBand] = poBand;\n            papapoOverviewBands[iBand] =\n                static_cast<GDALRasterBand **>( CPLCalloc(\n                    sizeof(void*), poBand->GetOverviewCount()) );\n\n            int iCurOverview = 0;\n            std::vector<bool> abAlreadyUsedOverviewBand(\n                poBand->GetOverviewCount(), false);\n\n            for( int i = 0; i < nOverviews; ++i )\n            {\n                for( int j = 0; j < poBand->GetOverviewCount(); ++j )\n                {\n                    if( abAlreadyUsedOverviewBand[j] )\n                        continue;\n\n                    int    nOvFactor;\n                    GDALRasterBand * poOverview = poBand->GetOverview( j );\n\n                    nOvFactor = GDALComputeOvFactor(poOverview->GetXSize(),\n                                                     poBand->GetXSize(),\n                                                     poOverview->GetYSize(),\n                                                     poBand->GetYSize());\n\n                    int bHasNoData = FALSE;\n                    double noDataValue = poBand->GetNoDataValue(&bHasNoData);\n\n                    if( bHasNoData )\n                        poOverview->SetNoDataValue(noDataValue);\n\n                    if( nOvFactor == panOverviewList[i]\n                        || nOvFactor == GDALOvLevelAdjust2(\n                                            panOverviewList[i],\n                                            poBand->GetXSize(),\n                                            poBand->GetYSize() ) )\n                    {\n                        abAlreadyUsedOverviewBand[j] = true;\n                        CPLAssert(iCurOverview < poBand->GetOverviewCount());\n                        papapoOverviewBands[iBand][iCurOverview] = poOverview;\n                        ++iCurOverview ;\n                        break;\n                    }\n                }\n            }\n\n            if( nNewOverviews == 0 )\n            {\n                nNewOverviews = iCurOverview;\n            }\n            else if( nNewOverviews != iCurOverview )\n            {\n                CPLAssert(false);\n                return CE_Failure;\n            }\n        }\n\n        GDALRegenerateOverviewsMultiBand( nBandsIn, papoBandList,\n                                          nNewOverviews, papapoOverviewBands,\n                                          pszResampling, pfnProgress,\n                                          pProgressData );\n\n        for( int iBand = 0; iBand < nBandsIn; ++iBand )\n        {\n            CPLFree(papapoOverviewBands[iBand]);\n        }\n        CPLFree(papapoOverviewBands);\n        CPLFree(papoBandList);\n    }\n    else\n    {\n        GDALRasterBand **papoOverviewBands = static_cast<GDALRasterBand **>(\n            CPLCalloc(sizeof(void*), nOverviews) );\n\n        for( int iBand = 0; iBand < nBandsIn && eErr == CE_None; ++iBand )\n        {\n            GDALRasterBand *poBand = GetRasterBand( panBandList[iBand] );\n            if( poBand == nullptr )\n            {\n                eErr = CE_Failure;\n                break;\n            }\n\n            std::vector<bool> abAlreadyUsedOverviewBand(\n                poBand->GetOverviewCount(), false);\n\n            int nNewOverviews = 0;\n            for( int i = 0; i < nOverviews; ++i )\n            {\n                for( int j = 0; j < poBand->GetOverviewCount(); ++j )\n                {\n                    if( abAlreadyUsedOverviewBand[j] )\n                        continue;\n\n                    GDALRasterBand * poOverview = poBand->GetOverview( j );\n\n                    int bHasNoData = FALSE;\n                    double noDataValue = poBand->GetNoDataValue(&bHasNoData);\n\n                    if( bHasNoData )\n                        poOverview->SetNoDataValue(noDataValue);\n\n                    const int nOvFactor =\n                        GDALComputeOvFactor(poOverview->GetXSize(),\n                                            poBand->GetXSize(),\n                                            poOverview->GetYSize(),\n                                            poBand->GetYSize());\n\n                    if( nOvFactor == panOverviewList[i]\n                        || nOvFactor == GDALOvLevelAdjust2(\n                                            panOverviewList[i],\n                                            poBand->GetXSize(),\n                                            poBand->GetYSize() ) )\n                    {\n                        abAlreadyUsedOverviewBand[j] = true;\n                        CPLAssert(nNewOverviews < poBand->GetOverviewCount());\n                        papoOverviewBands[nNewOverviews++] = poOverview;\n                        break;\n                    }\n                }\n            }\n\n            void *pScaledProgressData =\n                GDALCreateScaledProgress(\n                    iBand / static_cast<double>( nBandsIn ),\n                    (iBand + 1) / static_cast<double>( nBandsIn ),\n                    pfnProgress, pProgressData );\n\n            eErr = GDALRegenerateOverviews(\n                poBand,\n                nNewOverviews,\n                reinterpret_cast<GDALRasterBandH *>( papoOverviewBands ),\n                pszResampling,\n                GDALScaledProgress,\n                pScaledProgressData );\n\n            GDALDestroyScaledProgress( pScaledProgressData );\n        }\n\n    /* -------------------------------------------------------------------- */\n    /*      Cleanup                                                         */\n    /* -------------------------------------------------------------------- */\n        CPLFree( papoOverviewBands );\n    }\n\n    pfnProgress( 1.0, nullptr, pProgressData );\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                      GTiffWriteDummyGeokeyDirectory()                */\n/************************************************************************/\n\nstatic void GTiffWriteDummyGeokeyDirectory( TIFF* hTIFF )\n{\n    // If we have existing geokeys, try to wipe them\n    // by writing a dummy geokey directory. (#2546)\n    uint16 *panVI = nullptr;\n    uint16 nKeyCount = 0;\n\n    if( TIFFGetField( hTIFF, TIFFTAG_GEOKEYDIRECTORY,\n                        &nKeyCount, &panVI ) )\n    {\n        GUInt16 anGKVersionInfo[4] = { 1, 1, 0, 0 };\n        double adfDummyDoubleParams[1] = { 0.0 };\n        TIFFSetField( hTIFF, TIFFTAG_GEOKEYDIRECTORY,\n                        4, anGKVersionInfo );\n        TIFFSetField( hTIFF, TIFFTAG_GEODOUBLEPARAMS,\n                        1, adfDummyDoubleParams );\n        TIFFSetField( hTIFF, TIFFTAG_GEOASCIIPARAMS, \"\" );\n    }\n}\n\n/************************************************************************/\n/*               GTiffDatasetLibGeotiffErrorCallback()                  */\n/************************************************************************/\n\nstatic void GTiffDatasetLibGeotiffErrorCallback(GTIF*,\n                                                int level,\n                                                const char* pszMsg, ...)\n{\n    va_list ap;\n    va_start(ap, pszMsg);\n    CPLErrorV( (level == LIBGEOTIFF_WARNING ) ? CE_Warning : CE_Failure,\n               CPLE_AppDefined, pszMsg, ap );\n    va_end(ap);\n}\n\n/************************************************************************/\n/*                           GTiffDatasetGTIFNew()                      */\n/************************************************************************/\n\nstatic GTIF* GTiffDatasetGTIFNew( TIFF* hTIFF )\n{\n    GTIF* gtif = GTIFNewEx(hTIFF, GTiffDatasetLibGeotiffErrorCallback, nullptr);\n    if( gtif )\n    {\n        GTIFAttachPROJContext(gtif, OSRGetProjTLSContext());\n    }\n    return gtif;\n}\n\n/************************************************************************/\n/*                          WriteGeoTIFFInfo()                          */\n/************************************************************************/\n\nvoid GTiffDataset::WriteGeoTIFFInfo()\n\n{\n    bool bPixelIsPoint = false;\n    bool bPointGeoIgnore = false;\n\n    const char* pszAreaOrPoint =\n        GTiffDataset::GetMetadataItem( GDALMD_AREA_OR_POINT );\n    if( pszAreaOrPoint && EQUAL(pszAreaOrPoint, GDALMD_AOP_POINT) )\n    {\n        bPixelIsPoint = true;\n        bPointGeoIgnore =\n            CPLTestBool( CPLGetConfigOption( \"GTIFF_POINT_GEO_IGNORE\",\n                                             \"FALSE\") );\n    }\n\n    if( bForceUnsetGTOrGCPs )\n    {\n        bNeedsRewrite = true;\n        bForceUnsetGTOrGCPs = false;\n\n#ifdef HAVE_UNSETFIELD\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOPIXELSCALE );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOTIEPOINTS );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOTRANSMATRIX );\n#endif\n    }\n\n    if( bForceUnsetProjection )\n    {\n        bNeedsRewrite = true;\n        bForceUnsetProjection = false;\n\n#ifdef HAVE_UNSETFIELD\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOKEYDIRECTORY );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEODOUBLEPARAMS );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOASCIIPARAMS );\n#else\n        GTiffWriteDummyGeokeyDirectory(hTIFF);\n#endif\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write geotransform if valid.                                    */\n/* -------------------------------------------------------------------- */\n    if( bGeoTransformValid )\n    {\n        bNeedsRewrite = true;\n\n/* -------------------------------------------------------------------- */\n/*      Clear old tags to ensure we don't end up with conflicting       */\n/*      information. (#2625)                                            */\n/* -------------------------------------------------------------------- */\n#ifdef HAVE_UNSETFIELD\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOPIXELSCALE );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOTIEPOINTS );\n        TIFFUnsetField( hTIFF, TIFFTAG_GEOTRANSMATRIX );\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Write the transform.  If we have a normal north-up image we     */\n/*      use the tiepoint plus pixelscale otherwise we use a matrix.     */\n/* -------------------------------------------------------------------- */\n        if( adfGeoTransform[2] == 0.0 && adfGeoTransform[4] == 0.0\n                && adfGeoTransform[5] < 0.0 )\n        {\n            double dfOffset = 0.0;\n            if( !EQUAL(osProfile,szPROFILE_BASELINE) )\n            {\n                // In the case the SRS has a vertical component and we have\n                // a single band, encode its scale/offset in the GeoTIFF tags\n                int bHasScale = FALSE;\n                double dfScale = GetRasterBand(1)->GetScale(&bHasScale);\n                int bHasOffset = FALSE;\n                dfOffset = GetRasterBand(1)->GetOffset(&bHasOffset);\n                const bool bApplyScaleOffset =\n                    oSRS.IsVertical() &&\n                    GetRasterCount() == 1;\n                if( bApplyScaleOffset && !bHasScale )\n                    dfScale = 1.0;\n                if( !bApplyScaleOffset || !bHasOffset )\n                    dfOffset = 0.0;\n                const double adfPixelScale[3] = {\n                    adfGeoTransform[1], fabs(adfGeoTransform[5]),\n                    bApplyScaleOffset ? dfScale  : 0.0 };\n                TIFFSetField( hTIFF, TIFFTAG_GEOPIXELSCALE, 3, adfPixelScale );\n            }\n\n            double adfTiePoints[6] = {\n                0.0, 0.0, 0.0, adfGeoTransform[0], adfGeoTransform[3], dfOffset };\n\n            if( bPixelIsPoint && !bPointGeoIgnore )\n            {\n                adfTiePoints[3] +=\n                    adfGeoTransform[1] * 0.5 + adfGeoTransform[2] * 0.5;\n                adfTiePoints[4] +=\n                    adfGeoTransform[4] * 0.5 + adfGeoTransform[5] * 0.5;\n            }\n\n            if( !EQUAL(osProfile,szPROFILE_BASELINE) )\n                TIFFSetField( hTIFF, TIFFTAG_GEOTIEPOINTS, 6, adfTiePoints );\n        }\n        else\n        {\n            double adfMatrix[16] = {};\n\n            adfMatrix[0] = adfGeoTransform[1];\n            adfMatrix[1] = adfGeoTransform[2];\n            adfMatrix[3] = adfGeoTransform[0];\n            adfMatrix[4] = adfGeoTransform[4];\n            adfMatrix[5] = adfGeoTransform[5];\n            adfMatrix[7] = adfGeoTransform[3];\n            adfMatrix[15] = 1.0;\n\n            if( bPixelIsPoint && !bPointGeoIgnore )\n            {\n                adfMatrix[3] +=\n                    adfGeoTransform[1] * 0.5 + adfGeoTransform[2] * 0.5;\n                adfMatrix[7] +=\n                    adfGeoTransform[4] * 0.5 + adfGeoTransform[5] * 0.5;\n            }\n\n            if( !EQUAL(osProfile,szPROFILE_BASELINE) )\n                TIFFSetField( hTIFF, TIFFTAG_GEOTRANSMATRIX, 16, adfMatrix );\n        }\n\n        // Do we need a world file?\n        if( CPLFetchBool( papszCreationOptions, \"TFW\", false ) )\n            GDALWriteWorldFile( osFilename, \"tfw\", adfGeoTransform );\n        else if( CPLFetchBool( papszCreationOptions, \"WORLDFILE\", false ) )\n            GDALWriteWorldFile( osFilename, \"wld\", adfGeoTransform );\n    }\n    else if( GetGCPCount() > 0 )\n    {\n        bNeedsRewrite = true;\n\n        double *padfTiePoints = static_cast<double *>(\n            CPLMalloc( 6 * sizeof(double) * GetGCPCount() ) );\n\n        for( int iGCP = 0; iGCP < GetGCPCount(); ++iGCP )\n        {\n\n            padfTiePoints[iGCP*6+0] = pasGCPList[iGCP].dfGCPPixel;\n            padfTiePoints[iGCP*6+1] = pasGCPList[iGCP].dfGCPLine;\n            padfTiePoints[iGCP*6+2] = 0;\n            padfTiePoints[iGCP*6+3] = pasGCPList[iGCP].dfGCPX;\n            padfTiePoints[iGCP*6+4] = pasGCPList[iGCP].dfGCPY;\n            padfTiePoints[iGCP*6+5] = pasGCPList[iGCP].dfGCPZ;\n\n            if( bPixelIsPoint && !bPointGeoIgnore )\n            {\n                padfTiePoints[iGCP*6+0] += 0.5;\n                padfTiePoints[iGCP*6+1] += 0.5;\n            }\n        }\n\n        if( !EQUAL(osProfile,szPROFILE_BASELINE) )\n            TIFFSetField( hTIFF, TIFFTAG_GEOTIEPOINTS,\n                          6 * GetGCPCount(), padfTiePoints );\n        CPLFree( padfTiePoints );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write out projection definition.                                */\n/* -------------------------------------------------------------------- */\n    const bool bHasProjection = !oSRS.IsEmpty();\n    if( (bHasProjection || bPixelIsPoint)\n        && !EQUAL(osProfile,szPROFILE_BASELINE) )\n    {\n        bNeedsRewrite = true;\n\n        // If we have existing geokeys, try to wipe them\n        // by writing a dummy geokey directory. (#2546)\n        GTiffWriteDummyGeokeyDirectory(hTIFF);\n\n        GTIF *psGTIF = GTiffDatasetGTIFNew( hTIFF );\n\n        // Set according to coordinate system.\n        if( bHasProjection )\n        {\n            char* pszProjection = nullptr;\n            oSRS.exportToWkt(&pszProjection);\n            if( pszProjection && pszProjection[0] )\n                GTIFSetFromOGISDefnEx( psGTIF, pszProjection, eGeoTIFFKeysFlavor );\n            CPLFree(pszProjection);\n        }\n\n        if( bPixelIsPoint )\n        {\n            GTIFKeySet(psGTIF, GTRasterTypeGeoKey, TYPE_SHORT, 1,\n                       RasterPixelIsPoint);\n        }\n\n        GTIFWriteKeys( psGTIF );\n        GTIFFree( psGTIF );\n    }\n}\n\n/************************************************************************/\n/*                         AppendMetadataItem()                         */\n/************************************************************************/\n\nstatic void AppendMetadataItem( CPLXMLNode **ppsRoot, CPLXMLNode **ppsTail,\n                                const char *pszKey, const char *pszValue,\n                                int nBand, const char *pszRole,\n                                const char *pszDomain )\n\n{\n/* -------------------------------------------------------------------- */\n/*      Create the Item element, and subcomponents.                     */\n/* -------------------------------------------------------------------- */\n    CPLXMLNode *psItem = CPLCreateXMLNode( nullptr, CXT_Element, \"Item\" );\n    CPLCreateXMLNode( CPLCreateXMLNode( psItem, CXT_Attribute, \"name\"),\n                      CXT_Text, pszKey );\n\n    if( nBand > 0 )\n    {\n        char szBandId[32] = {};\n        snprintf( szBandId, sizeof(szBandId), \"%d\", nBand - 1 );\n        CPLCreateXMLNode( CPLCreateXMLNode( psItem,CXT_Attribute,\"sample\"),\n                          CXT_Text, szBandId );\n    }\n\n    if( pszRole != nullptr )\n        CPLCreateXMLNode( CPLCreateXMLNode( psItem,CXT_Attribute,\"role\"),\n                          CXT_Text, pszRole );\n\n    if( pszDomain != nullptr && strlen(pszDomain) > 0 )\n        CPLCreateXMLNode( CPLCreateXMLNode( psItem,CXT_Attribute,\"domain\"),\n                          CXT_Text, pszDomain );\n\n    char *pszEscapedItemValue = CPLEscapeString(pszValue,-1,CPLES_XML);\n    CPLCreateXMLNode( psItem, CXT_Text, pszEscapedItemValue );\n    CPLFree( pszEscapedItemValue );\n\n/* -------------------------------------------------------------------- */\n/*      Create root, if missing.                                        */\n/* -------------------------------------------------------------------- */\n    if( *ppsRoot == nullptr )\n        *ppsRoot = CPLCreateXMLNode( nullptr, CXT_Element, \"GDALMetadata\" );\n\n/* -------------------------------------------------------------------- */\n/*      Append item to tail.  We keep track of the tail to avoid        */\n/*      O(nsquared) time as the list gets longer.                       */\n/* -------------------------------------------------------------------- */\n    if( *ppsTail == nullptr )\n        CPLAddXMLChild( *ppsRoot, psItem );\n    else\n        CPLAddXMLSibling( *ppsTail, psItem );\n\n    *ppsTail = psItem;\n}\n\n/************************************************************************/\n/*                         WriteMDMetadata()                            */\n/************************************************************************/\n\nstatic void WriteMDMetadata( GDALMultiDomainMetadata *poMDMD, TIFF *hTIFF,\n                             CPLXMLNode **ppsRoot, CPLXMLNode **ppsTail,\n                             int nBand, const char * pszProfile )\n\n{\n\n/* ==================================================================== */\n/*      Process each domain.                                            */\n/* ==================================================================== */\n    char **papszDomainList = poMDMD->GetDomainList();\n    for( int iDomain = 0;\n         papszDomainList && papszDomainList[iDomain];\n         ++iDomain )\n    {\n        char **papszMD = poMDMD->GetMetadata( papszDomainList[iDomain] );\n        bool bIsXML = false;\n\n        if( EQUAL(papszDomainList[iDomain], \"IMAGE_STRUCTURE\") )\n            continue;  // Ignored.\n        if( EQUAL(papszDomainList[iDomain], \"COLOR_PROFILE\") )\n            continue;  // Ignored.\n        if( EQUAL(papszDomainList[iDomain], MD_DOMAIN_RPC) )\n            continue;  // Handled elsewhere.\n        if( EQUAL(papszDomainList[iDomain], \"xml:ESRI\")\n            && CPLTestBool(CPLGetConfigOption( \"ESRI_XML_PAM\", \"NO\" )) )\n            continue;  // Handled elsewhere.\n        if( EQUAL(papszDomainList[iDomain], \"xml:XMP\") )\n            continue;  // Handled in SetMetadata.\n\n        if( STARTS_WITH_CI(papszDomainList[iDomain], \"xml:\") )\n            bIsXML = true;\n\n/* -------------------------------------------------------------------- */\n/*      Process each item in this domain.                               */\n/* -------------------------------------------------------------------- */\n        for( int iItem = 0; papszMD && papszMD[iItem]; ++iItem )\n        {\n            const char *pszItemValue = nullptr;\n            char *pszItemName = nullptr;\n\n            if( bIsXML )\n            {\n                pszItemName = CPLStrdup(\"doc\");\n                pszItemValue = papszMD[iItem];\n            }\n            else\n            {\n                pszItemValue = CPLParseNameValue( papszMD[iItem], &pszItemName);\n                if( pszItemName == nullptr )\n                {\n                    CPLDebug( \"GTiff\",\n                              \"Invalid metadata item : %s\", papszMD[iItem] );\n                    continue;\n                }\n            }\n\n/* -------------------------------------------------------------------- */\n/*      Convert into XML item or handle as a special TIFF tag.          */\n/* -------------------------------------------------------------------- */\n            if( strlen(papszDomainList[iDomain]) == 0\n                && nBand == 0 &&\n                (STARTS_WITH_CI(pszItemName, \"TIFFTAG_\") ||\n                 (EQUAL(pszItemName, \"GEO_METADATA\") &&\n                  EQUAL(pszProfile, szPROFILE_GDALGeoTIFF)) ||\n                 (EQUAL(pszItemName, \"TIFF_RSID\") &&\n                  EQUAL(pszProfile, szPROFILE_GDALGeoTIFF))) )\n            {\n                if( EQUAL(pszItemName, \"TIFFTAG_RESOLUTIONUNIT\") )\n                {\n                    // ResolutionUnit can't be 0, which is the default if\n                    // atoi() fails.  Set to 1=Unknown.\n                    int v = atoi(pszItemValue);\n                    if( !v ) v = RESUNIT_NONE;\n                    TIFFSetField( hTIFF, TIFFTAG_RESOLUTIONUNIT, v);\n                }\n                else\n                {\n                    bool bFoundTag = false;\n                    size_t iTag = 0;  // Used after for.\n                    for( ;\n                         iTag < sizeof(asTIFFTags) / sizeof(asTIFFTags[0]);\n                         ++iTag )\n                    {\n                        if( EQUAL(pszItemName, asTIFFTags[iTag].pszTagName) )\n                        {\n                            bFoundTag = true;\n                            break;\n                        }\n                    }\n\n                    if( bFoundTag &&\n                        asTIFFTags[iTag].eType == GTIFFTAGTYPE_STRING )\n                        TIFFSetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                                      pszItemValue );\n                    else if( bFoundTag &&\n                             asTIFFTags[iTag].eType == GTIFFTAGTYPE_FLOAT )\n                        TIFFSetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                                      CPLAtof(pszItemValue) );\n                    else if( bFoundTag &&\n                             asTIFFTags[iTag].eType == GTIFFTAGTYPE_SHORT )\n                        TIFFSetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                                      atoi(pszItemValue) );\n                    else if( bFoundTag &&\n                             asTIFFTags[iTag].eType == GTIFFTAGTYPE_BYTE_STRING )\n                    {\n                        int nLen = static_cast<int>(strlen(pszItemValue));\n                        if( nLen )\n                        {\n                            TIFFSetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                                          nLen,\n                                          pszItemValue );\n                        }\n                    }\n                    else\n                        CPLError(\n                            CE_Warning, CPLE_NotSupported,\n                            \"%s metadata item is unhandled and \"\n                            \"will not be written\",\n                            pszItemName);\n                }\n            }\n            else if( nBand == 0 && EQUAL(pszItemName,GDALMD_AREA_OR_POINT) )\n            {\n                /* Do nothing, handled elsewhere. */;\n            }\n            else\n            {\n                AppendMetadataItem( ppsRoot, ppsTail,\n                                    pszItemName, pszItemValue,\n                                    nBand, nullptr, papszDomainList[iDomain] );\n            }\n\n            CPLFree( pszItemName );\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Remove TIFFTAG_xxxxxx that are already set but no longer in     */\n/*      the metadata list (#5619)                                       */\n/* -------------------------------------------------------------------- */\n        if( strlen(papszDomainList[iDomain]) == 0 && nBand == 0 )\n        {\n            for( size_t iTag = 0;\n                 iTag < sizeof(asTIFFTags) / sizeof(asTIFFTags[0]);\n                 ++iTag )\n            {\n                uint32 nCount = 0;\n                char* pszText = nullptr;\n                int16 nVal = 0;\n                float fVal = 0.0f;\n                const char* pszVal =\n                    CSLFetchNameValue(papszMD, asTIFFTags[iTag].pszTagName);\n                if( pszVal == nullptr &&\n                    ((asTIFFTags[iTag].eType == GTIFFTAGTYPE_STRING &&\n                      TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                                    &pszText )) ||\n                     (asTIFFTags[iTag].eType == GTIFFTAGTYPE_SHORT &&\n                      TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &nVal )) ||\n                     (asTIFFTags[iTag].eType == GTIFFTAGTYPE_FLOAT &&\n                      TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &fVal )) ||\n                     (asTIFFTags[iTag].eType == GTIFFTAGTYPE_BYTE_STRING &&\n                      TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &nCount, &pszText ))) )\n                {\n#ifdef HAVE_UNSETFIELD\n                    TIFFUnsetField( hTIFF, asTIFFTags[iTag].nTagVal );\n#else\n                    if( asTIFFTags[iTag].eType == GTIFFTAGTYPE_STRING )\n                    {\n                        TIFFSetField( hTIFF, asTIFFTags[iTag].nTagVal, \"\" );\n                    }\n#endif\n                }\n            }\n        }\n    }\n}\n\n/************************************************************************/\n/*                           WriteRPC()                                 */\n/************************************************************************/\n\nvoid GTiffDataset::WriteRPC( GDALDataset *poSrcDS, TIFF *l_hTIFF,\n                             int bSrcIsGeoTIFF,\n                             const char *pszProfile,\n                             const char *pszTIFFFilename,\n                             char **l_papszCreationOptions,\n                             bool bWriteOnlyInPAMIfNeeded )\n{\n/* -------------------------------------------------------------------- */\n/*      Handle RPC data written to TIFF RPCCoefficient tag, RPB file,   */\n/*      RPCTEXT file or PAM.                                            */\n/* -------------------------------------------------------------------- */\n    char **papszRPCMD = poSrcDS->GetMetadata(MD_DOMAIN_RPC);\n    if( papszRPCMD != nullptr )\n    {\n        bool bRPCSerializedOtherWay = false;\n\n        if( EQUAL(pszProfile,szPROFILE_GDALGeoTIFF) )\n        {\n            if( !bWriteOnlyInPAMIfNeeded )\n                GTiffDatasetWriteRPCTag( l_hTIFF, papszRPCMD );\n            bRPCSerializedOtherWay = true;\n        }\n\n        // Write RPB file if explicitly asked, or if a non GDAL specific\n        // profile is selected and RPCTXT is not asked.\n        bool bRPBExplicitlyAsked =\n            CPLFetchBool( l_papszCreationOptions, \"RPB\", false );\n        bool bRPBExplicitlyDenied =\n            !CPLFetchBool( l_papszCreationOptions, \"RPB\", true );\n        if( (!EQUAL(pszProfile,szPROFILE_GDALGeoTIFF) &&\n             !CPLFetchBool( l_papszCreationOptions, \"RPCTXT\", false ) &&\n             !bRPBExplicitlyDenied )\n            || bRPBExplicitlyAsked )\n        {\n            if( !bWriteOnlyInPAMIfNeeded )\n                GDALWriteRPBFile( pszTIFFFilename, papszRPCMD );\n            bRPCSerializedOtherWay = true;\n        }\n\n        if( CPLFetchBool( l_papszCreationOptions, \"RPCTXT\", false ) )\n        {\n            if( !bWriteOnlyInPAMIfNeeded )\n                GDALWriteRPCTXTFile( pszTIFFFilename, papszRPCMD );\n            bRPCSerializedOtherWay = true;\n        }\n\n        if( !bRPCSerializedOtherWay && bWriteOnlyInPAMIfNeeded &&\n            bSrcIsGeoTIFF )\n            cpl::down_cast<GTiffDataset*>(poSrcDS)->\n                GDALPamDataset::SetMetadata( papszRPCMD, MD_DOMAIN_RPC );\n    }\n}\n\n/************************************************************************/\n/*                  IsStandardColorInterpretation()                     */\n/************************************************************************/\n\nstatic bool IsStandardColorInterpretation(GDALDataset* poSrcDS,\n                                          uint16 nPhotometric,\n                                          char** papszCreationOptions)\n{\n    bool bStardardColorInterp = true;\n    if( nPhotometric == PHOTOMETRIC_MINISBLACK )\n    {\n        for( int i = 0; i < poSrcDS->GetRasterCount(); ++i )\n        {\n            const GDALColorInterp eInterp =\n                poSrcDS->GetRasterBand(i + 1)->GetColorInterpretation();\n            if( !(eInterp == GCI_GrayIndex || eInterp == GCI_Undefined ||\n                    (i > 0 && eInterp == GCI_AlphaBand)) )\n            {\n                bStardardColorInterp = false;\n                break;\n            }\n        }\n    }\n    else if( nPhotometric == PHOTOMETRIC_PALETTE )\n    {\n        bStardardColorInterp =\n            poSrcDS->GetRasterBand(1)->GetColorInterpretation() ==\n                GCI_PaletteIndex;\n    }\n    else if( nPhotometric == PHOTOMETRIC_RGB )\n    {\n        int iStart = 0;\n        if( EQUAL(CSLFetchNameValueDef(papszCreationOptions,\n                                       \"PHOTOMETRIC\", \"\"), \"RGB\") )\n        {\n            iStart = 3;\n            if( poSrcDS->GetRasterCount() == 4 &&\n                CSLFetchNameValue(papszCreationOptions, \"ALPHA\") != nullptr )\n            {\n                iStart = 4;\n            }\n        }\n        for( int i = iStart; i < poSrcDS->GetRasterCount(); ++i )\n        {\n            const GDALColorInterp eInterp =\n                poSrcDS->GetRasterBand(i+1)->GetColorInterpretation();\n            if( !((i == 0 && eInterp == GCI_RedBand) ||\n                    (i == 1 && eInterp == GCI_GreenBand) ||\n                    (i == 2 && eInterp == GCI_BlueBand) ||\n                    (i >= 3 && (eInterp == GCI_Undefined ||\n                                eInterp == GCI_AlphaBand))) )\n            {\n                bStardardColorInterp = false;\n                break;\n            }\n        }\n    }\n    else if( nPhotometric == PHOTOMETRIC_YCBCR &&\n             poSrcDS->GetRasterCount() == 3 )\n    {\n        // do nothing\n    }\n    else\n    {\n        bStardardColorInterp = false;\n    }\n    return bStardardColorInterp;\n}\n\n/************************************************************************/\n/*                           WriteMetadata()                            */\n/************************************************************************/\n\nbool GTiffDataset::WriteMetadata( GDALDataset *poSrcDS, TIFF *l_hTIFF,\n                                  bool bSrcIsGeoTIFF,\n                                  const char *pszProfile,\n                                  const char *pszTIFFFilename,\n                                  char **l_papszCreationOptions,\n                                  bool bExcludeRPBandIMGFileWriting)\n\n{\n/* -------------------------------------------------------------------- */\n/*      Convert all the remaining metadata into a simple XML            */\n/*      format.                                                         */\n/* -------------------------------------------------------------------- */\n    CPLXMLNode *psRoot = nullptr;\n    CPLXMLNode *psTail = nullptr;\n\n    if( bSrcIsGeoTIFF )\n    {\n        GTiffDataset* poSrcDSGTiff = cpl::down_cast<GTiffDataset *>(poSrcDS);\n        assert(poSrcDSGTiff);\n        WriteMDMetadata(\n            &poSrcDSGTiff->oGTiffMDMD,\n            l_hTIFF, &psRoot, &psTail, 0, pszProfile );\n    }\n    else\n    {\n        char **papszMD = poSrcDS->GetMetadata();\n\n        if( CSLCount(papszMD) > 0 )\n        {\n            GDALMultiDomainMetadata l_oMDMD;\n            l_oMDMD.SetMetadata( papszMD );\n\n            WriteMDMetadata( &l_oMDMD, l_hTIFF, &psRoot, &psTail,\n                             0, pszProfile );\n        }\n    }\n\n    if( !bExcludeRPBandIMGFileWriting )\n    {\n        WriteRPC(poSrcDS, l_hTIFF, bSrcIsGeoTIFF,\n                 pszProfile, pszTIFFFilename,\n                 l_papszCreationOptions);\n\n/* -------------------------------------------------------------------- */\n/*      Handle metadata data written to an IMD file.                    */\n/* -------------------------------------------------------------------- */\n        char **papszIMDMD = poSrcDS->GetMetadata(MD_DOMAIN_IMD);\n        if( papszIMDMD != nullptr )\n        {\n            GDALWriteIMDFile( pszTIFFFilename, papszIMDMD );\n        }\n    }\n\n    uint16 nPhotometric = 0;\n    if( !TIFFGetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, &(nPhotometric) ) )\n        nPhotometric = PHOTOMETRIC_MINISBLACK;\n\n    const bool bStardardColorInterp =\n        IsStandardColorInterpretation(poSrcDS, nPhotometric,\n                                      l_papszCreationOptions);\n\n/* -------------------------------------------------------------------- */\n/*      We also need to address band specific metadata, and special     */\n/*      \"role\" metadata.                                                */\n/* -------------------------------------------------------------------- */\n    for( int nBand = 1; nBand <= poSrcDS->GetRasterCount(); ++nBand )\n    {\n        GDALRasterBand *poBand = poSrcDS->GetRasterBand( nBand );\n\n        if( bSrcIsGeoTIFF )\n        {\n            GTiffRasterBand* poSrcBandGTiff = cpl::down_cast<GTiffRasterBand *>(poBand);\n            assert(poSrcBandGTiff);\n            WriteMDMetadata(\n                &poSrcBandGTiff->oGTiffMDMD,\n                l_hTIFF, &psRoot, &psTail, nBand, pszProfile );\n        }\n        else\n        {\n            char **papszMD = poBand->GetMetadata();\n\n            if( CSLCount(papszMD) > 0 )\n            {\n                GDALMultiDomainMetadata l_oMDMD;\n                l_oMDMD.SetMetadata( papszMD );\n\n                WriteMDMetadata( &l_oMDMD, l_hTIFF, &psRoot, &psTail, nBand,\n                                 pszProfile );\n            }\n        }\n\n        const double dfOffset = poBand->GetOffset();\n        const double dfScale = poBand->GetScale();\n        bool bGeoTIFFScaleOffsetInZ = false;\n        double adfGeoTransform[6];\n        // Check if we have already encoded scale/offset in the GeoTIFF tags\n        if( poSrcDS->GetGeoTransform(adfGeoTransform) == CE_None &&\n            adfGeoTransform[2] == 0.0 && adfGeoTransform[4] == 0.0\n            && adfGeoTransform[5] < 0.0 &&\n            poSrcDS->GetSpatialRef() &&\n            poSrcDS->GetSpatialRef()->IsVertical() &&\n            poSrcDS->GetRasterCount() == 1 )\n        {\n            bGeoTIFFScaleOffsetInZ = true;\n        }\n\n        if( (dfOffset != 0.0 || dfScale != 1.0) && !bGeoTIFFScaleOffsetInZ )\n        {\n            char szValue[128] = {};\n\n            CPLsnprintf( szValue, sizeof(szValue), \"%.18g\", dfOffset );\n            AppendMetadataItem( &psRoot, &psTail, \"OFFSET\", szValue, nBand,\n                                \"offset\", \"\" );\n            CPLsnprintf( szValue, sizeof(szValue), \"%.18g\", dfScale );\n            AppendMetadataItem( &psRoot, &psTail, \"SCALE\", szValue, nBand,\n                                \"scale\", \"\" );\n        }\n\n        const char* pszUnitType = poBand->GetUnitType();\n        if( pszUnitType != nullptr && pszUnitType[0] != '\\0' )\n            AppendMetadataItem( &psRoot, &psTail, \"UNITTYPE\",\n                                pszUnitType, nBand,\n                                \"unittype\", \"\" );\n\n        if( strlen(poBand->GetDescription()) > 0 )\n        {\n            AppendMetadataItem( &psRoot, &psTail, \"DESCRIPTION\",\n                                poBand->GetDescription(), nBand,\n                                \"description\", \"\" );\n        }\n\n        if( !bStardardColorInterp &&\n            !(nBand <= 3 &&  EQUAL(CSLFetchNameValueDef(\n                l_papszCreationOptions, \"PHOTOMETRIC\", \"\"), \"RGB\") ) )\n        {\n            AppendMetadataItem( &psRoot, &psTail, \"COLORINTERP\",\n                                GDALGetColorInterpretationName(\n                                    poBand->GetColorInterpretation()),\n                                nBand,\n                                \"colorinterp\", \"\" );\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write out the generic XML metadata if there is any.             */\n/* -------------------------------------------------------------------- */\n    if( psRoot != nullptr )\n    {\n        bool bRet = true;\n\n        if( EQUAL(pszProfile,szPROFILE_GDALGeoTIFF) )\n        {\n            char *pszXML_MD = CPLSerializeXMLTree( psRoot );\n            if( strlen(pszXML_MD) > 32000 )\n            {\n                if( bSrcIsGeoTIFF )\n                {\n                    if( cpl::down_cast<GTiffDataset *>(\n                           poSrcDS)->GetPamFlags() & GPF_DISABLED )\n                    {\n                        CPLError(\n                            CE_Warning, CPLE_AppDefined,\n                            \"Metadata exceeding 32000 bytes cannot be written \"\n                            \"into GeoTIFF.\" );\n                    }\n                    else\n                    {\n                        cpl::down_cast<GTiffDataset *>(poSrcDS)->\n                            PushMetadataToPam();\n                        CPLError(\n                            CE_Warning, CPLE_AppDefined,\n                            \"Metadata exceeding 32000 bytes cannot be written \"\n                            \"into GeoTIFF. Transferred to PAM instead.\" );\n                    }\n                }\n                else\n                {\n                    bRet = false;\n                }\n            }\n            else\n            {\n                TIFFSetField( l_hTIFF, TIFFTAG_GDAL_METADATA, pszXML_MD );\n            }\n            CPLFree( pszXML_MD );\n        }\n        else\n        {\n            if( bSrcIsGeoTIFF )\n                cpl::down_cast<GTiffDataset *>(poSrcDS)->PushMetadataToPam();\n            else\n                bRet = false;\n        }\n\n        CPLDestroyXMLNode( psRoot );\n\n        return bRet;\n    }\n\n    // If we have no more metadata but it existed before,\n    // remove the GDAL_METADATA tag.\n    if( EQUAL(pszProfile,szPROFILE_GDALGeoTIFF) )\n    {\n        char* pszText = nullptr;\n        if( TIFFGetField( l_hTIFF, TIFFTAG_GDAL_METADATA, &pszText ) )\n        {\n#ifdef HAVE_UNSETFIELD\n            TIFFUnsetField( l_hTIFF, TIFFTAG_GDAL_METADATA );\n#else\n            TIFFSetField( l_hTIFF, TIFFTAG_GDAL_METADATA, \"\" );\n#endif\n        }\n    }\n\n    return true;\n}\n\n/************************************************************************/\n/*                         PushMetadataToPam()                          */\n/*                                                                      */\n/*      When producing a strict profile TIFF or if our aggregate        */\n/*      metadata is too big for a single tiff tag we may end up         */\n/*      needing to write it via the PAM mechanisms.  This method        */\n/*      copies all the appropriate metadata into the PAM level          */\n/*      metadata object but with special care to avoid copying          */\n/*      metadata handled in other ways in TIFF format.                  */\n/************************************************************************/\n\nvoid GTiffDataset::PushMetadataToPam()\n\n{\n    if( GetPamFlags() & GPF_DISABLED )\n        return;\n\n    const bool bStardardColorInterp =\n        IsStandardColorInterpretation(this, nPhotometric, papszCreationOptions);\n\n    for( int nBand = 0; nBand <= GetRasterCount(); ++nBand )\n    {\n        GDALMultiDomainMetadata *poSrcMDMD = nullptr;\n        GTiffRasterBand *poBand = nullptr;\n\n        if( nBand == 0 )\n        {\n            poSrcMDMD = &(this->oGTiffMDMD);\n        }\n        else\n        {\n            poBand = cpl::down_cast<GTiffRasterBand *>(GetRasterBand(nBand));\n            poSrcMDMD = &(poBand->oGTiffMDMD);\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Loop over the available domains.                                */\n/* -------------------------------------------------------------------- */\n        char **papszDomainList = poSrcMDMD->GetDomainList();\n        for( int iDomain = 0;\n             papszDomainList && papszDomainList[iDomain];\n             ++iDomain )\n        {\n            char **papszMD = poSrcMDMD->GetMetadata( papszDomainList[iDomain] );\n\n            if( EQUAL(papszDomainList[iDomain],MD_DOMAIN_RPC)\n                || EQUAL(papszDomainList[iDomain],MD_DOMAIN_IMD)\n                || EQUAL(papszDomainList[iDomain],\"_temporary_\")\n                || EQUAL(papszDomainList[iDomain],\"IMAGE_STRUCTURE\")\n                || EQUAL(papszDomainList[iDomain],\"COLOR_PROFILE\") )\n                continue;\n\n            papszMD = CSLDuplicate(papszMD);\n\n            for( int i = CSLCount(papszMD)-1; i >= 0; --i )\n            {\n                if( STARTS_WITH_CI(papszMD[i], \"TIFFTAG_\")\n                    || EQUALN(papszMD[i],GDALMD_AREA_OR_POINT,\n                              strlen(GDALMD_AREA_OR_POINT)) )\n                    papszMD = CSLRemoveStrings( papszMD, i, 1, nullptr );\n            }\n\n            if( nBand == 0 )\n                GDALPamDataset::SetMetadata( papszMD, papszDomainList[iDomain]);\n            else\n                poBand->\n                    GDALPamRasterBand::SetMetadata( papszMD,\n                                                    papszDomainList[iDomain]);\n\n            CSLDestroy( papszMD );\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Handle some \"special domain\" stuff.                             */\n/* -------------------------------------------------------------------- */\n        if( poBand != nullptr )\n        {\n            poBand->GDALPamRasterBand::SetOffset( poBand->GetOffset() );\n            poBand->GDALPamRasterBand::SetScale( poBand->GetScale() );\n            poBand->GDALPamRasterBand::SetUnitType( poBand->GetUnitType() );\n            poBand->\n                GDALPamRasterBand::SetDescription( poBand->GetDescription() );\n            if( !bStardardColorInterp )\n            {\n                poBand->GDALPamRasterBand::SetColorInterpretation(\n                                        poBand->GetColorInterpretation() );\n            }\n        }\n    }\n    MarkPamDirty();\n}\n\n/************************************************************************/\n/*                     GTiffDatasetWriteRPCTag()                        */\n/*                                                                      */\n/*      Format a TAG according to:                                      */\n/*                                                                      */\n/*      http://geotiff.maptools.org/rpc_prop.html                       */\n/************************************************************************/\n\nvoid GTiffDatasetWriteRPCTag( TIFF *hTIFF, char **papszRPCMD )\n\n{\n    GDALRPCInfo sRPC;\n\n    if( !GDALExtractRPCInfo( papszRPCMD, &sRPC ) )\n        return;\n\n    double adfRPCTag[92] = {};\n    adfRPCTag[0] = -1.0;  // Error Bias\n    adfRPCTag[1] = -1.0;  // Error Random\n\n    adfRPCTag[2] = sRPC.dfLINE_OFF;\n    adfRPCTag[3] = sRPC.dfSAMP_OFF;\n    adfRPCTag[4] = sRPC.dfLAT_OFF;\n    adfRPCTag[5] = sRPC.dfLONG_OFF;\n    adfRPCTag[6] = sRPC.dfHEIGHT_OFF;\n    adfRPCTag[7] = sRPC.dfLINE_SCALE;\n    adfRPCTag[8] = sRPC.dfSAMP_SCALE;\n    adfRPCTag[9] = sRPC.dfLAT_SCALE;\n    adfRPCTag[10] = sRPC.dfLONG_SCALE;\n    adfRPCTag[11] = sRPC.dfHEIGHT_SCALE;\n\n    memcpy( adfRPCTag + 12, sRPC.adfLINE_NUM_COEFF, sizeof(double) * 20 );\n    memcpy( adfRPCTag + 32, sRPC.adfLINE_DEN_COEFF, sizeof(double) * 20 );\n    memcpy( adfRPCTag + 52, sRPC.adfSAMP_NUM_COEFF, sizeof(double) * 20 );\n    memcpy( adfRPCTag + 72, sRPC.adfSAMP_DEN_COEFF, sizeof(double) * 20 );\n\n    TIFFSetField( hTIFF, TIFFTAG_RPCCOEFFICIENT, 92, adfRPCTag );\n}\n\n/************************************************************************/\n/*                             ReadRPCTag()                             */\n/*                                                                      */\n/*      Format a TAG according to:                                      */\n/*                                                                      */\n/*      http://geotiff.maptools.org/rpc_prop.html                       */\n/************************************************************************/\n\nchar** GTiffDatasetReadRPCTag(TIFF* hTIFF)\n\n{\n    double *padfRPCTag = nullptr;\n    uint16 nCount;\n\n    if( !TIFFGetField( hTIFF, TIFFTAG_RPCCOEFFICIENT, &nCount, &padfRPCTag )\n        || nCount != 92 )\n        return nullptr;\n\n    CPLStringList asMD;\n    asMD.SetNameValue(RPC_LINE_OFF, CPLOPrintf(\"%.15g\", padfRPCTag[2]));\n    asMD.SetNameValue(RPC_SAMP_OFF, CPLOPrintf(\"%.15g\", padfRPCTag[3]));\n    asMD.SetNameValue(RPC_LAT_OFF, CPLOPrintf(\"%.15g\", padfRPCTag[4]));\n    asMD.SetNameValue(RPC_LONG_OFF, CPLOPrintf(\"%.15g\", padfRPCTag[5]));\n    asMD.SetNameValue(RPC_HEIGHT_OFF, CPLOPrintf(\"%.15g\", padfRPCTag[6]));\n    asMD.SetNameValue(RPC_LINE_SCALE, CPLOPrintf(\"%.15g\", padfRPCTag[7]));\n    asMD.SetNameValue(RPC_SAMP_SCALE, CPLOPrintf(\"%.15g\", padfRPCTag[8]));\n    asMD.SetNameValue(RPC_LAT_SCALE, CPLOPrintf(\"%.15g\", padfRPCTag[9]));\n    asMD.SetNameValue(RPC_LONG_SCALE, CPLOPrintf(\"%.15g\", padfRPCTag[10]));\n    asMD.SetNameValue(RPC_HEIGHT_SCALE, CPLOPrintf(\"%.15g\", padfRPCTag[11]));\n\n    CPLString osField;\n    CPLString osMultiField;\n\n    for( int i = 0; i < 20; ++i )\n    {\n        osField.Printf( \"%.15g\", padfRPCTag[12+i] );\n        if( i > 0 )\n            osMultiField += \" \";\n        else\n            osMultiField = \"\";\n        osMultiField += osField;\n    }\n    asMD.SetNameValue(RPC_LINE_NUM_COEFF, osMultiField );\n\n    for( int i = 0; i < 20; ++i )\n    {\n        osField.Printf( \"%.15g\", padfRPCTag[32+i] );\n        if( i > 0 )\n            osMultiField += \" \";\n        else\n            osMultiField = \"\";\n        osMultiField += osField;\n    }\n    asMD.SetNameValue( RPC_LINE_DEN_COEFF, osMultiField );\n\n    for( int i = 0; i < 20; ++i )\n    {\n        osField.Printf( \"%.15g\", padfRPCTag[52+i] );\n        if( i > 0 )\n            osMultiField += \" \";\n        else\n            osMultiField = \"\";\n        osMultiField += osField;\n    }\n    asMD.SetNameValue( RPC_SAMP_NUM_COEFF, osMultiField );\n\n    for( int i = 0; i < 20; ++i )\n    {\n        osField.Printf( \"%.15g\", padfRPCTag[72+i] );\n        if( i > 0 )\n            osMultiField += \" \";\n        else\n            osMultiField = \"\";\n        osMultiField += osField;\n    }\n    asMD.SetNameValue( RPC_SAMP_DEN_COEFF, osMultiField );\n\n    return asMD.StealList();\n}\n\n/************************************************************************/\n/*                  GTiffFormatGDALNoDataTagValue()                     */\n/************************************************************************/\n\nCPLString GTiffFormatGDALNoDataTagValue( double dfNoData )\n{\n    CPLString osVal;\n    if( CPLIsNan(dfNoData) )\n        osVal = \"nan\";\n    else\n        osVal.Printf(\"%.18g\", dfNoData);\n    return osVal;\n}\n\n/************************************************************************/\n/*                         WriteNoDataValue()                           */\n/************************************************************************/\n\nvoid GTiffDataset::WriteNoDataValue( TIFF *l_hTIFF, double dfNoData )\n\n{\n    CPLString osVal( GTiffFormatGDALNoDataTagValue(dfNoData) );\n    TIFFSetField( l_hTIFF, TIFFTAG_GDAL_NODATA, osVal.c_str() );\n}\n\n/************************************************************************/\n/*                         UnsetNoDataValue()                           */\n/************************************************************************/\n\nvoid GTiffDataset::UnsetNoDataValue( TIFF *l_hTIFF )\n\n{\n#ifdef HAVE_UNSETFIELD\n    TIFFUnsetField( l_hTIFF, TIFFTAG_GDAL_NODATA );\n#else\n    TIFFSetField( l_hTIFF, TIFFTAG_GDAL_NODATA, \"\" );\n#endif\n}\n\n/************************************************************************/\n/*                            SetDirectory()                            */\n/************************************************************************/\n\nbool GTiffDataset::SetDirectory( toff_t nNewOffset )\n\n{\n    Crystalize();\n\n    if( nNewOffset == 0 )\n        nNewOffset = nDirOffset;\n\n    if( TIFFCurrentDirOffset(hTIFF) == nNewOffset )\n    {\n        CPLAssert( *ppoActiveDSRef == this || *ppoActiveDSRef == nullptr );\n        *ppoActiveDSRef = this;\n        return true;\n    }\n\n    if( GetAccess() == GA_Update )\n    {\n        if( *ppoActiveDSRef != nullptr )\n            (*ppoActiveDSRef)->FlushDirectory();\n    }\n\n    if( nNewOffset == 0)\n        return true;\n\n    (*ppoActiveDSRef) = this;\n\n    const int nSetDirResult = TIFFSetSubDirectory( hTIFF, nNewOffset );\n    if( !nSetDirResult )\n        return false;\n\n    RestoreVolatileParameters( hTIFF );\n\n    return true;\n}\n\n/************************************************************************/\n/*                     RestoreVolatileParameters()                      */\n/************************************************************************/\n\nvoid GTiffDataset::RestoreVolatileParameters(TIFF* l_hTIFF)\n{\n\n/* -------------------------------------------------------------------- */\n/*      YCbCr JPEG compressed images should be translated on the fly    */\n/*      to RGB by libtiff/libjpeg unless specifically requested         */\n/*      otherwise.                                                      */\n/* -------------------------------------------------------------------- */\n    if( nCompression == COMPRESSION_JPEG\n        && nPhotometric == PHOTOMETRIC_YCBCR\n        && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\",\n                                              \"YES\") ) )\n    {\n        int nColorMode = JPEGCOLORMODE_RAW;  // Initialize to 0;\n\n        TIFFGetField( l_hTIFF, TIFFTAG_JPEGCOLORMODE, &nColorMode );\n        if( nColorMode != JPEGCOLORMODE_RGB )\n        {\n            TIFFSetField(l_hTIFF, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB);\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Propagate any quality settings.                                 */\n/* -------------------------------------------------------------------- */\n    if( GetAccess() == GA_Update )\n    {\n        // Now, reset zip and jpeg quality.\n        if(nJpegQuality > 0 && nCompression == COMPRESSION_JPEG)\n        {\n#ifdef DEBUG_VERBOSE\n            CPLDebug( \"GTiff\", \"Propagate JPEG_QUALITY(%d) in SetDirectory()\",\n                      nJpegQuality );\n#endif\n            TIFFSetField(l_hTIFF, TIFFTAG_JPEGQUALITY, nJpegQuality);\n        }\n        if(nJpegTablesMode >= 0 && nCompression == COMPRESSION_JPEG)\n            TIFFSetField(l_hTIFF, TIFFTAG_JPEGTABLESMODE, nJpegTablesMode);\n        if(nZLevel > 0 && (nCompression == COMPRESSION_ADOBE_DEFLATE ||\n                           nCompression == COMPRESSION_LERC) )\n            TIFFSetField(l_hTIFF, TIFFTAG_ZIPQUALITY, nZLevel);\n        if(nLZMAPreset > 0 && nCompression == COMPRESSION_LZMA)\n            TIFFSetField(l_hTIFF, TIFFTAG_LZMAPRESET, nLZMAPreset);\n        if( nZSTDLevel > 0 && (nCompression == COMPRESSION_ZSTD ||\n                               nCompression == COMPRESSION_LERC) )\n            TIFFSetField(l_hTIFF, TIFFTAG_ZSTD_LEVEL, nZSTDLevel);\n#if HAVE_LERC\n        if( nCompression == COMPRESSION_LERC )\n        {\n            TIFFSetField(l_hTIFF, TIFFTAG_LERC_MAXZERROR, dfMaxZError);\n            TIFFSetField(l_hTIFF, TIFFTAG_LERC_PARAMETERS, 2,\n                         anLercAddCompressionAndVersion);\n        }\n#endif\n        if( nWebPLevel > 0 && nCompression == COMPRESSION_WEBP)\n            TIFFSetField(l_hTIFF, TIFFTAG_WEBP_LEVEL, nWebPLevel);\n        if( bWebPLossless && nCompression == COMPRESSION_WEBP)\n            TIFFSetField(l_hTIFF, TIFFTAG_WEBP_LOSSLESS, 1);\n    }\n}\n\n/************************************************************************/\n/*                              Identify()                              */\n/************************************************************************/\n\nint GTiffDataset::Identify( GDALOpenInfo *poOpenInfo )\n\n{\n    const char *pszFilename = poOpenInfo->pszFilename;\n    if( STARTS_WITH_CI(pszFilename, \"GTIFF_RAW:\") )\n    {\n        pszFilename += strlen(\"GTIFF_RAW:\");\n        GDALOpenInfo oOpenInfo( pszFilename, poOpenInfo->eAccess );\n        return Identify(&oOpenInfo);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      We have a special hook for handling opening a specific          */\n/*      directory of a TIFF file.                                       */\n/* -------------------------------------------------------------------- */\n    if( STARTS_WITH_CI(pszFilename, \"GTIFF_DIR:\") )\n        return TRUE;\n\n/* -------------------------------------------------------------------- */\n/*      First we check to see if the file has the expected header       */\n/*      bytes.                                                          */\n/* -------------------------------------------------------------------- */\n    if( poOpenInfo->fpL == nullptr || poOpenInfo->nHeaderBytes < 2 )\n        return FALSE;\n\n    if( (poOpenInfo->pabyHeader[0] != 'I' || poOpenInfo->pabyHeader[1] != 'I')\n        && (poOpenInfo->pabyHeader[0] != 'M'\n        || poOpenInfo->pabyHeader[1] != 'M'))\n        return FALSE;\n\n#ifndef BIGTIFF_SUPPORT\n    if( (poOpenInfo->pabyHeader[2] == 0x2B && poOpenInfo->pabyHeader[3] == 0) ||\n        (poOpenInfo->pabyHeader[2] == 0 && poOpenInfo->pabyHeader[3] == 0x2B) )\n    {\n        CPLError( CE_Failure, CPLE_OpenFailed,\n                  \"This is a BigTIFF file.  BigTIFF is not supported by this \"\n                  \"version of GDAL and libtiff.\" );\n        return FALSE;\n    }\n#endif\n\n    if( (poOpenInfo->pabyHeader[2] != 0x2A || poOpenInfo->pabyHeader[3] != 0)\n        && (poOpenInfo->pabyHeader[3] != 0x2A || poOpenInfo->pabyHeader[2] != 0)\n        && (poOpenInfo->pabyHeader[2] != 0x2B || poOpenInfo->pabyHeader[3] != 0)\n        && (poOpenInfo->pabyHeader[3] != 0x2B ||\n            poOpenInfo->pabyHeader[2] != 0))\n        return FALSE;\n\n    return TRUE;\n}\n\n/************************************************************************/\n/*                          GTIFFExtendMemoryFile()                     */\n/************************************************************************/\n\nstatic bool GTIFFExtendMemoryFile( const CPLString& osTmpFilename,\n                                   VSILFILE* fpTemp,\n                                   VSILFILE* fpL,\n                                   int nNewLength,\n                                   GByte*& pabyBuffer,\n                                   vsi_l_offset& nDataLength )\n{\n    if( nNewLength <= static_cast<int>(nDataLength) )\n        return true;\n    if( VSIFSeekL(fpTemp, nNewLength - 1, SEEK_SET) != 0 )\n        return false;\n    char ch = 0;\n    if( VSIFWriteL(&ch, 1, 1, fpTemp) != 1 )\n        return false;\n    const int nOldDataLength = static_cast<int>(nDataLength);\n    pabyBuffer = static_cast<GByte*>(\n        VSIGetMemFileBuffer( osTmpFilename, &nDataLength, FALSE) );\n    const int nToRead = nNewLength - nOldDataLength;\n    const int nRead = static_cast<int>(\n        VSIFReadL( pabyBuffer + nOldDataLength, 1, nToRead, fpL) );\n    if( nRead != nToRead )\n    {\n        CPLError(CE_Failure, CPLE_FileIO,\n                 \"Needed to read %d bytes. Only %d got\", nToRead, nRead);\n        return false;\n    }\n    return true;\n}\n\n/************************************************************************/\n/*                         GTIFFMakeBufferedStream()                    */\n/************************************************************************/\n\nstatic bool GTIFFMakeBufferedStream(GDALOpenInfo* poOpenInfo)\n{\n    CPLString osTmpFilename;\n    static int nCounter = 0;\n    osTmpFilename.Printf(\"/vsimem/stream_%d.tif\", ++nCounter);\n    VSILFILE* fpTemp = VSIFOpenL(osTmpFilename, \"wb+\");\n    if( fpTemp == nullptr )\n        return false;\n    // The seek is needed for /vsistdin/ that has some rewind capabilities.\n    if( VSIFSeekL(poOpenInfo->fpL, poOpenInfo->nHeaderBytes, SEEK_SET) != 0 )\n    {\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n        return false;\n    }\n    CPLAssert( static_cast<int>( VSIFTellL(poOpenInfo->fpL) ) ==\n               poOpenInfo->nHeaderBytes );\n    if( VSIFWriteL(poOpenInfo->pabyHeader, poOpenInfo->nHeaderBytes,\n                   1, fpTemp) != 1 )\n    {\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n        return false;\n    }\n    vsi_l_offset nDataLength = 0;\n    GByte* pabyBuffer =\n        static_cast<GByte*>(\n            VSIGetMemFileBuffer( osTmpFilename, &nDataLength, FALSE) );\n    const bool bLittleEndian = (pabyBuffer[0] == 'I');\n#if CPL_IS_LSB\n    const bool bSwap = !bLittleEndian;\n#else\n    const bool bSwap = bLittleEndian;\n#endif\n    const bool bBigTIFF = pabyBuffer[2] == 43 || pabyBuffer[3] == 43;\n    vsi_l_offset nMaxOffset = 0;\n    if( bBigTIFF )\n    {\n        GUInt64 nTmp = 0;\n        memcpy(&nTmp, pabyBuffer + 8, 8);\n        if( bSwap ) CPL_SWAP64PTR(&nTmp);\n        if( nTmp != 16 )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"IFD start should be at offset 16 for a streamed BigTIFF\");\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        memcpy(&nTmp, pabyBuffer + 16, 8);\n        if( bSwap ) CPL_SWAP64PTR(&nTmp);\n        if( nTmp > 1024 )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"Too many tags : \" CPL_FRMT_GIB, nTmp);\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        const int nTags = static_cast<int>(nTmp);\n        const int nSpaceForTags = nTags * 20;\n        if( !GTIFFExtendMemoryFile(osTmpFilename, fpTemp, poOpenInfo->fpL,\n                                    24 + nSpaceForTags,\n                                    pabyBuffer, nDataLength) )\n        {\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        nMaxOffset = 24 + nSpaceForTags + 8;\n        for( int i = 0; i < nTags; ++i )\n        {\n            GUInt16 nTmp16 = 0;\n            memcpy(&nTmp16, pabyBuffer + 24 + i * 20, 2);\n            if( bSwap ) CPL_SWAP16PTR(&nTmp16);\n            const int nTag = nTmp16;\n            memcpy(&nTmp16, pabyBuffer + 24 + i * 20 + 2, 2);\n            if( bSwap ) CPL_SWAP16PTR(&nTmp16);\n            const int nDataType = nTmp16;\n            memcpy(&nTmp, pabyBuffer + 24 + i * 20 + 4, 8);\n            if( bSwap ) CPL_SWAP64PTR(&nTmp);\n            if( nTmp >= 16 * 1024 * 1024 )\n            {\n                CPLError(\n                    CE_Failure, CPLE_NotSupported,\n                    \"Too many elements for tag %d : \" CPL_FRMT_GUIB,\n                    nTag, nTmp );\n                CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n                VSIUnlink(osTmpFilename);\n                return false;\n            }\n            const GUInt32 nCount = static_cast<GUInt32>(nTmp);\n            const GUInt32 nTagSize =\n                TIFFDataWidth(static_cast<TIFFDataType>(nDataType)) * nCount;\n            if( nTagSize > 8 )\n            {\n                memcpy(&nTmp, pabyBuffer + 24 + i * 20 + 12, 8);\n                if( bSwap ) CPL_SWAP64PTR(&nTmp);\n                if( nTmp > GUINT64_MAX - nTagSize )\n                {\n                    CPLError(CE_Failure, CPLE_NotSupported,\n                             \"Overflow with tag %d\", nTag);\n                    CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n                    VSIUnlink(osTmpFilename);\n                    return false;\n                }\n                if( static_cast<vsi_l_offset>(nTmp + nTagSize) > nMaxOffset )\n                    nMaxOffset = nTmp + nTagSize;\n            }\n        }\n    }\n    else\n    {\n        GUInt32 nTmp = 0;\n        memcpy(&nTmp, pabyBuffer + 4, 4);\n        if( bSwap ) CPL_SWAP32PTR(&nTmp);\n        if( nTmp != 8 )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"IFD start should be at offset 8 for a streamed TIFF\");\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        GUInt16 nTmp16 = 0;\n        memcpy(&nTmp16, pabyBuffer + 8, 2);\n        if( bSwap ) CPL_SWAP16PTR(&nTmp16);\n        if( nTmp16 > 1024 )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"Too many tags : %d\", nTmp16);\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        const int nTags = nTmp16;\n        const int nSpaceForTags = nTags * 12;\n        if( !GTIFFExtendMemoryFile(osTmpFilename, fpTemp, poOpenInfo->fpL,\n                                   10 + nSpaceForTags,\n                                   pabyBuffer, nDataLength) )\n        {\n            CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n            VSIUnlink(osTmpFilename);\n            return false;\n        }\n        nMaxOffset = 10 + nSpaceForTags + 4;\n        for( int i = 0; i < nTags; ++i )\n        {\n            memcpy(&nTmp16, pabyBuffer + 10 + i * 12, 2);\n            if( bSwap ) CPL_SWAP16PTR(&nTmp16);\n            const int nTag = nTmp16;\n            memcpy(&nTmp16, pabyBuffer + 10 + i * 12 + 2, 2);\n            if( bSwap ) CPL_SWAP16PTR(&nTmp16);\n            const int nDataType = nTmp16;\n            memcpy(&nTmp, pabyBuffer + 10 + i * 12 + 4, 4);\n            if( bSwap ) CPL_SWAP32PTR(&nTmp);\n            if( nTmp >= 16 * 1024 * 1024 )\n            {\n                CPLError(CE_Failure, CPLE_NotSupported,\n                         \"Too many elements for tag %d : %u\", nTag, nTmp);\n                CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n                VSIUnlink(osTmpFilename);\n                return false;\n            }\n            const GUInt32 nCount = nTmp;\n            const GUInt32 nTagSize =\n                TIFFDataWidth(static_cast<TIFFDataType>(nDataType)) * nCount;\n            if( nTagSize > 4 )\n            {\n                memcpy(&nTmp, pabyBuffer + 10 + i * 12 + 8, 4);\n                if( bSwap ) CPL_SWAP32PTR(&nTmp);\n                if( nTmp > static_cast<GUInt32>(UINT_MAX - nTagSize) )\n                {\n                    CPLError(CE_Failure, CPLE_NotSupported,\n                             \"Overflow with tag %d\", nTag);\n                    CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n                    VSIUnlink(osTmpFilename);\n                    return false;\n                }\n                if( nTmp + nTagSize > nMaxOffset )\n                    nMaxOffset = nTmp + nTagSize;\n            }\n        }\n    }\n    if( nMaxOffset > 10 * 1024 * 1024 )\n    {\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n        VSIUnlink(osTmpFilename);\n        return false;\n    }\n    if( !GTIFFExtendMemoryFile(\n           osTmpFilename, fpTemp, poOpenInfo->fpL,\n           static_cast<int>(nMaxOffset), pabyBuffer, nDataLength) )\n    {\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTemp));\n        VSIUnlink(osTmpFilename);\n        return false;\n    }\n    CPLAssert(nDataLength == VSIFTellL(poOpenInfo->fpL));\n    poOpenInfo->fpL = reinterpret_cast<VSILFILE *>(\n        VSICreateBufferedReaderHandle(\n            reinterpret_cast<VSIVirtualHandle*>(poOpenInfo->fpL),\n            pabyBuffer,\n            static_cast<vsi_l_offset>(INT_MAX) << 32 ) );\n    if( VSIFCloseL(fpTemp) != 0 )\n        return false;\n    VSIUnlink(osTmpFilename);\n\n    return true;\n}\n\n/************************************************************************/\n/*                                Open()                                */\n/************************************************************************/\n\nGDALDataset *GTiffDataset::Open( GDALOpenInfo * poOpenInfo )\n\n{\n    const char *pszFilename = poOpenInfo->pszFilename;\n\n/* -------------------------------------------------------------------- */\n/*      Check if it looks like a TIFF file.                             */\n/* -------------------------------------------------------------------- */\n    if( !Identify(poOpenInfo) )\n        return nullptr;\n\n    bool bAllowRGBAInterface = true;\n    if( STARTS_WITH_CI(pszFilename, \"GTIFF_RAW:\") )\n    {\n        bAllowRGBAInterface = false;\n        pszFilename += strlen(\"GTIFF_RAW:\");\n    }\n\n/* -------------------------------------------------------------------- */\n/*      We have a special hook for handling opening a specific          */\n/*      directory of a TIFF file.                                       */\n/* -------------------------------------------------------------------- */\n    if( STARTS_WITH_CI(pszFilename, \"GTIFF_DIR:\") )\n        return OpenDir( poOpenInfo );\n\n    if( !GTiffOneTimeInit() )\n        return nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Try opening the dataset.                                        */\n/* -------------------------------------------------------------------- */\n    // Disable strip chop for now.\n    bool bStreaming = false;\n    const char* pszReadStreaming =\n        CPLGetConfigOption(\"TIFF_READ_STREAMING\", nullptr);\n    if( poOpenInfo->fpL == nullptr )\n    {\n        poOpenInfo->fpL =\n            VSIFOpenL( pszFilename,\n                       poOpenInfo->eAccess == GA_ReadOnly ? \"rb\" : \"r+b\" );\n        if( poOpenInfo->fpL == nullptr )\n            return nullptr;\n    }\n    else if( !(pszReadStreaming && !CPLTestBool(pszReadStreaming)) &&\n             poOpenInfo->nHeaderBytes >= 24 &&\n             // A pipe has no seeking capability, so its position is 0 despite\n             // having read bytes.\n             (static_cast<int>( VSIFTellL(poOpenInfo->fpL) ) ==\n              poOpenInfo->nHeaderBytes ||\n              strcmp(pszFilename, \"/vsistdin/\") == 0 ||\n              // STARTS_WITH(pszFilename, \"/vsicurl_streaming/\") ||\n              (pszReadStreaming && CPLTestBool(pszReadStreaming))) )\n    {\n        bStreaming = true;\n        if( !GTIFFMakeBufferedStream(poOpenInfo) )\n            return nullptr;\n    }\n\n    // Store errors/warnings and emit them later.\n    std::vector<GTIFFErrorStruct> aoErrors;\n    CPLPushErrorHandlerEx(GTIFFErrorHandler, &aoErrors);\n    CPLSetCurrentErrorHandlerCatchDebug( FALSE );\n    // Open and disable \"strip chopping\" (c option)\n    TIFF *l_hTIFF =\n        VSI_TIFFOpen( pszFilename,\n                      poOpenInfo->eAccess == GA_ReadOnly ? \"r\" : \"r+\",\n                      poOpenInfo->fpL );\n    CPLPopErrorHandler();\n\n    // Now emit errors and change their criticality if needed\n    // We only emit failures if we didn't manage to open the file.\n    // Otherwise it makes Python bindings unhappy (#5616).\n    for( size_t iError = 0; iError < aoErrors.size(); ++iError )\n    {\n        CPLError( (l_hTIFF == nullptr && aoErrors[iError].type == CE_Failure) ?\n                  CE_Failure : CE_Warning,\n                  aoErrors[iError].no,\n                  \"%s\",\n                  aoErrors[iError].msg.c_str() );\n    }\n    aoErrors.resize(0);\n\n    if( l_hTIFF == nullptr )\n        return nullptr;\n\n    uint32 nXSize = 0;\n    TIFFGetField( l_hTIFF, TIFFTAG_IMAGEWIDTH, &nXSize );\n    uint32 nYSize = 0;\n    TIFFGetField( l_hTIFF, TIFFTAG_IMAGELENGTH, &nYSize );\n\n    if( nXSize > INT_MAX || nYSize > INT_MAX )\n    {\n        // GDAL only supports signed 32bit dimensions.\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Too large image size: %u x %u\",\n                 nXSize, nYSize);\n        XTIFFClose( l_hTIFF );\n        return nullptr;\n    }\n\n    uint16 l_nCompression = 0;\n    if( !TIFFGetField( l_hTIFF, TIFFTAG_COMPRESSION, &(l_nCompression) ) )\n        l_nCompression = COMPRESSION_NONE;\n\n/* -------------------------------------------------------------------- */\n/*      Create a corresponding GDALDataset.                             */\n/* -------------------------------------------------------------------- */\n    GTiffDataset *poDS = new GTiffDataset();\n    poDS->SetDescription( pszFilename );\n    poDS->osFilename = pszFilename;\n    poDS->poActiveDS = poDS;\n    poDS->fpL = poOpenInfo->fpL;\n    poOpenInfo->fpL = nullptr;\n    poDS->bStreamingIn = bStreaming;\n    poDS->nCompression = l_nCompression;\n\n    // In the case of GDAL_DISABLE_READDIR_ON_OPEN = NO / EMPTY_DIR\n    if( poOpenInfo->AreSiblingFilesLoaded() &&\n        CSLCount( poOpenInfo->GetSiblingFiles() ) <= 1 )\n    {\n        poDS->oOvManager.TransferSiblingFiles( CSLDuplicate(\n                                            poOpenInfo->GetSiblingFiles() ) );\n        poDS->m_bHasGotSiblingFiles = true;\n    }\n\n    if( poDS->OpenOffset( l_hTIFF, &(poDS->poActiveDS),\n                          TIFFCurrentDirOffset(l_hTIFF), true,\n                          poOpenInfo->eAccess,\n                          bAllowRGBAInterface, true) != CE_None )\n    {\n        delete poDS;\n        return nullptr;\n    }\n\n    // Do we want blocks that are set to zero and that haven't yet being\n    // allocated as tile/strip to remain implicit?\n    if( CPLFetchBool( poOpenInfo->papszOpenOptions, \"SPARSE_OK\", false ) )\n        poDS->bWriteEmptyTiles = false;\n\n    if( poOpenInfo->eAccess == GA_Update )\n    {\n        poDS->InitCreationOrOpenOptions(poOpenInfo->papszOpenOptions);\n    }\n\n    poDS->m_bLoadPam = true;\n    poDS->bColorProfileMetadataChanged = false;\n    poDS->bMetadataChanged = false;\n    poDS->bGeoTIFFInfoChanged = false;\n    poDS->bNoDataChanged = false;\n    poDS->bForceUnsetGTOrGCPs = false;\n    poDS->bForceUnsetProjection = false;\n\n/* -------------------------------------------------------------------- */\n/*      Initialize info for external overviews.                         */\n/* -------------------------------------------------------------------- */\n    poDS->oOvManager.Initialize( poDS, pszFilename );\n    if( poOpenInfo->AreSiblingFilesLoaded() )\n        poDS->oOvManager.TransferSiblingFiles(\n            poOpenInfo->StealSiblingFiles() );\n\n    // For backward compatibility, in case GTIFF_POINT_GEO_IGNORE is defined\n    // load georeferencing right now so as to not require it to be defined\n    // at the GetGeoTransform() time.\n    if( CPLGetConfigOption(\"GTIFF_POINT_GEO_IGNORE\", nullptr) != nullptr )\n    {\n        poDS->LoadGeoreferencingAndPamIfNeeded();\n    }\n\n    return poDS;\n}\n\n/************************************************************************/\n/*                      GTiffDatasetSetAreaOrPointMD()                  */\n/************************************************************************/\n\nstatic void GTiffDatasetSetAreaOrPointMD( GTIF* hGTIF,\n                                          GDALMultiDomainMetadata& oGTiffMDMD )\n{\n    // Is this a pixel-is-point dataset?\n    short nRasterType = 0;\n\n    if( GDALGTIFKeyGetSHORT(hGTIF, GTRasterTypeGeoKey, &nRasterType,\n                    0, 1 ) == 1 )\n    {\n        if( nRasterType == static_cast<short>(RasterPixelIsPoint) )\n            oGTiffMDMD.SetMetadataItem(GDALMD_AREA_OR_POINT, GDALMD_AOP_POINT);\n        else\n            oGTiffMDMD.SetMetadataItem(GDALMD_AREA_OR_POINT, GDALMD_AOP_AREA);\n    }\n}\n\n/************************************************************************/\n/*                         LoadMDAreaOrPoint()                          */\n/************************************************************************/\n\n// This is a light version of LookForProjection(), which saves the\n// potential costly cost of GTIFGetOGISDefn(), since we just need to\n// access to a raw GeoTIFF key, and not build the full projection object.\n\nvoid GTiffDataset::LoadMDAreaOrPoint()\n{\n    if( bLookedForProjection || bLookedForMDAreaOrPoint ||\n        oGTiffMDMD.GetMetadataItem( GDALMD_AREA_OR_POINT ) != nullptr )\n        return;\n\n    bLookedForMDAreaOrPoint = true;\n\n    if( !SetDirectory() )\n        return;\n\n    GTIF* hGTIF = GTiffDatasetGTIFNew(hTIFF);\n\n    if( !hGTIF )\n    {\n        CPLError( CE_Warning, CPLE_AppDefined,\n                  \"GeoTIFF tags apparently corrupt, they are being ignored.\" );\n    }\n    else\n    {\n        GTiffDatasetSetAreaOrPointMD( hGTIF, oGTiffMDMD );\n\n        GTIFFree( hGTIF );\n    }\n}\n\n/************************************************************************/\n/*                         LookForProjection()                          */\n/************************************************************************/\n\nvoid GTiffDataset::LookForProjection()\n\n{\n    if( bLookedForProjection )\n        return;\n\n    bLookedForProjection = true;\n\n    IdentifyAuthorizedGeoreferencingSources();\n    if( m_nINTERNALGeorefSrcIndex < 0 )\n        return;\n\n    if( !SetDirectory() )\n        return;\n\n/* -------------------------------------------------------------------- */\n/*      Capture the GeoTIFF projection, if available.                   */\n/* -------------------------------------------------------------------- */\n    oSRS.Clear();\n\n    GTIF *hGTIF = GTiffDatasetGTIFNew(hTIFF);\n\n    if( !hGTIF )\n    {\n        CPLError( CE_Warning, CPLE_AppDefined,\n                  \"GeoTIFF tags apparently corrupt, they are being ignored.\" );\n    }\n    else\n    {\n        GTIFDefn *psGTIFDefn = GTIFAllocDefn();\n\n        if( GTIFGetDefn( hGTIF, psGTIFDefn ) )\n        {\n            OGRSpatialReferenceH hSRS = GTIFGetOGISDefnAsOSR( hGTIF, psGTIFDefn );\n            if( hSRS )\n            {\n                oSRS = *(OGRSpatialReference::FromHandle(hSRS));\n                OSRDestroySpatialReference(hSRS);\n            }\n\n            if( oSRS.IsCompound() )\n            {\n                const char* pszVertUnit = nullptr;\n                oSRS.GetTargetLinearUnits(\"COMPD_CS|VERT_CS\", &pszVertUnit);\n                if( pszVertUnit && !EQUAL(pszVertUnit, \"unknown\") )\n                {\n                    m_osVertUnit = pszVertUnit;\n                }\n\n                // Should we simplify away vertical CS stuff?\n                if( !CPLTestBool( CPLGetConfigOption(\"GTIFF_REPORT_COMPD_CS\",\n                                                    \"NO\") ) )\n                {\n                    CPLDebug( \"GTiff\", \"Got COMPD_CS, but stripping it.\" );\n\n                    oSRS.StripVertical();\n                }\n            }\n        }\n\n        // Check the tif linear unit and the CS linear unit.\n#ifdef ESRI_BUILD\n        AdjustLinearUnit(psGTIFDefn.UOMLength);\n#endif\n\n        GTIFFreeDefn(psGTIFDefn);\n\n        GTiffDatasetSetAreaOrPointMD( hGTIF, oGTiffMDMD );\n\n        GTIFFree( hGTIF );\n    }\n\n    bGeoTIFFInfoChanged = false;\n    bForceUnsetGTOrGCPs = false;\n    bForceUnsetProjection = false;\n}\n\n/************************************************************************/\n/*                          AdjustLinearUnit()                          */\n/*                                                                      */\n/*      The following code is only used in ESRI Builds and there is     */\n/*      outstanding discussion on whether it is even appropriate        */\n/*      then.                                                           */\n/************************************************************************/\n#ifdef ESRI_BUILD\n\nvoid GTiffDataset::AdjustLinearUnit( short UOMLength )\n{\n    if( !pszProjection || strlen(pszProjection) == 0 )\n        return;\n    if( UOMLength == 9001 )\n    {\n        char* pstr = strstr(pszProjection, \"PARAMETER\");\n        if( !pstr )\n            return;\n        pstr = strstr(pstr, \"UNIT[\");\n        if( !pstr )\n            return;\n        pstr = strchr(pstr, ',') + 1;\n        if( !pstr )\n            return;\n        char* pstr1 = strchr(pstr, ']');\n        if( !pstr1 || pstr1 - pstr >= 128 )\n            return;\n        char csUnitStr[128];\n        strncpy(csUnitStr, pstr, pstr1 - pstr);\n        csUnitStr[pstr1-pstr] = '\\0';\n        const double csUnit = CPLAtof(csUnitStr);\n        if( fabs(csUnit - 1.0) > 0.000001 )\n        {\n            for( long i = 0; i < 6; ++i )\n                adfGeoTransform[i] /= csUnit;\n        }\n    }\n}\n\n#endif  // def ESRI_BUILD\n\n/************************************************************************/\n/*                            ApplyPamInfo()                            */\n/*                                                                      */\n/*      PAM Information, if available, overrides the GeoTIFF            */\n/*      geotransform and projection definition.  Check for them         */\n/*      now.                                                            */\n/************************************************************************/\n\nvoid GTiffDataset::ApplyPamInfo()\n\n{\n    if( m_nPAMGeorefSrcIndex >= 0 &&\n        ((bGeoTransformValid &&\n          m_nPAMGeorefSrcIndex < m_nGeoTransformGeorefSrcIndex) ||\n          m_nGeoTransformGeorefSrcIndex < 0 || !bGeoTransformValid) )\n    {\n        double adfPamGeoTransform[6] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\n        if( GDALPamDataset::GetGeoTransform( adfPamGeoTransform ) == CE_None )\n        {\n            if( m_nGeoTransformGeorefSrcIndex == m_nWORLDFILEGeorefSrcIndex )\n                osGeorefFilename.clear();\n            memcpy(adfGeoTransform, adfPamGeoTransform, sizeof(double) * 6);\n            bGeoTransformValid = true;\n        }\n    }\n\n    if( m_nPAMGeorefSrcIndex >= 0 )\n    {\n        if( (m_nTABFILEGeorefSrcIndex < 0 ||\n             m_nPAMGeorefSrcIndex < m_nTABFILEGeorefSrcIndex) &&\n            (m_nINTERNALGeorefSrcIndex < 0 ||\n             m_nPAMGeorefSrcIndex < m_nINTERNALGeorefSrcIndex) )\n        {\n            const auto* poPamSRS = GDALPamDataset::GetSpatialRef();\n            if( poPamSRS )\n            {\n                oSRS = *poPamSRS;\n                bLookedForProjection = true;\n                // m_nProjectionGeorefSrcIndex = m_nPAMGeorefSrcIndex;\n            }\n        }\n        else\n        {\n            if( m_nINTERNALGeorefSrcIndex >= 0 )\n                LookForProjection();\n            if( oSRS.IsEmpty() )\n            {\n                const auto* poPamSRS = GDALPamDataset::GetSpatialRef();\n                if( poPamSRS )\n                {\n                    oSRS = *poPamSRS;\n                    bLookedForProjection = true;\n                    // m_nProjectionGeorefSrcIndex = m_nPAMGeorefSrcIndex;\n                }\n            }\n        }\n    }\n\n    int nPamGCPCount;\n    if( m_nPAMGeorefSrcIndex >= 0 &&\n        (nPamGCPCount = GDALPamDataset::GetGCPCount()) > 0 &&\n        ( (nGCPCount > 0 &&\n           m_nPAMGeorefSrcIndex < m_nGeoTransformGeorefSrcIndex) ||\n          m_nGeoTransformGeorefSrcIndex < 0 || nGCPCount == 0 ) )\n    {\n        if( nGCPCount > 0 )\n        {\n            GDALDeinitGCPs( nGCPCount, pasGCPList );\n            CPLFree( pasGCPList );\n            pasGCPList = nullptr;\n        }\n\n        nGCPCount = nPamGCPCount;\n        pasGCPList = GDALDuplicateGCPs(nGCPCount, GDALPamDataset::GetGCPs());\n\n        // m_nProjectionGeorefSrcIndex = m_nPAMGeorefSrcIndex;\n\n        const auto* poPamGCPSRS = GDALPamDataset::GetGCPSpatialRef();\n        if( poPamGCPSRS )\n            oSRS = *poPamGCPSRS;\n        else\n            oSRS.Clear();\n\n        bLookedForProjection = true;\n    }\n\n    if( m_nPAMGeorefSrcIndex >= 0 && nGCPCount == 0 )\n    {\n        CPLXMLNode *psValueAsXML = nullptr;\n        CPLXMLNode *psGeodataXform = nullptr;\n        char** papszXML = oMDMD.GetMetadata( \"xml:ESRI\" );\n        if (CSLCount(papszXML) == 1)\n        {\n            psValueAsXML = CPLParseXMLString( papszXML[0] );\n            if( psValueAsXML )\n                psGeodataXform = CPLGetXMLNode(psValueAsXML, \"=GeodataXform\");\n        }\n\n        const char* pszTIFFTagResUnit = GetMetadataItem(\"TIFFTAG_RESOLUTIONUNIT\");\n        const char* pszTIFFTagXRes = GetMetadataItem(\"TIFFTAG_XRESOLUTION\");\n        const char* pszTIFFTagYRes = GetMetadataItem(\"TIFFTAG_YRESOLUTION\");\n        if (psGeodataXform && pszTIFFTagResUnit &&pszTIFFTagXRes &&\n            pszTIFFTagYRes && atoi(pszTIFFTagResUnit) == 2 )\n        {\n            CPLXMLNode* psSourceGCPs = CPLGetXMLNode(psGeodataXform,\n                                                        \"SourceGCPs\");\n            CPLXMLNode* psTargetGCPs = CPLGetXMLNode(psGeodataXform,\n                                                        \"TargetGCPs\");\n            if( psSourceGCPs && psTargetGCPs )\n            {\n                std::vector<double> adfSourceGCPs, adfTargetGCPs;\n                for( CPLXMLNode* psIter = psSourceGCPs->psChild;\n                                    psIter != nullptr;\n                                    psIter = psIter->psNext )\n                {\n                    if( psIter->eType == CXT_Element &&\n                        EQUAL(psIter->pszValue, \"Double\") )\n                    {\n                        adfSourceGCPs.push_back(\n                            CPLAtof( CPLGetXMLValue(psIter, nullptr, \"\") ) );\n                    }\n                }\n                for( CPLXMLNode* psIter = psTargetGCPs->psChild;\n                                    psIter != nullptr;\n                                    psIter = psIter->psNext )\n                {\n                    if( psIter->eType == CXT_Element &&\n                        EQUAL(psIter->pszValue, \"Double\") )\n                    {\n                        adfTargetGCPs.push_back(\n                            CPLAtof( CPLGetXMLValue(psIter, nullptr, \"\") ) );\n                    }\n                }\n                if( adfSourceGCPs.size() == adfTargetGCPs.size() &&\n                    (adfSourceGCPs.size() % 2) == 0 )\n                {\n                    nGCPCount = static_cast<int>(\n                                            adfSourceGCPs.size() / 2);\n                    pasGCPList = static_cast<GDAL_GCP *>(\n                            CPLCalloc(sizeof(GDAL_GCP), nGCPCount) );\n                    for( int i = 0; i < nGCPCount; ++i )\n                    {\n                        pasGCPList[i].pszId = CPLStrdup(\"\");\n                        pasGCPList[i].pszInfo = CPLStrdup(\"\");\n                        // The origin used is the bottom left corner,\n                        // and raw values are in inches!\n                        pasGCPList[i].dfGCPPixel = adfSourceGCPs[2*i] *\n                                                        CPLAtof(pszTIFFTagXRes);\n                        pasGCPList[i].dfGCPLine = nRasterYSize -\n                                adfSourceGCPs[2*i+1] * CPLAtof(pszTIFFTagYRes);\n                        pasGCPList[i].dfGCPX = adfTargetGCPs[2*i];\n                        pasGCPList[i].dfGCPY = adfTargetGCPs[2*i+1];\n                    }\n                }\n            }\n        }\n        if( psValueAsXML )\n            CPLDestroyXMLNode(psValueAsXML);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Copy any PAM metadata into our GeoTIFF context, and with        */\n/*      the PAM info overriding the GeoTIFF context.                    */\n/* -------------------------------------------------------------------- */\n    char **papszPamDomains = oMDMD.GetDomainList();\n\n    for( int iDomain = 0;\n         papszPamDomains && papszPamDomains[iDomain] != nullptr;\n         ++iDomain )\n    {\n        const char *pszDomain = papszPamDomains[iDomain];\n        char **papszGT_MD = CSLDuplicate(oGTiffMDMD.GetMetadata( pszDomain ));\n        char **papszPAM_MD = oMDMD.GetMetadata( pszDomain );\n\n        papszGT_MD = CSLMerge( papszGT_MD, papszPAM_MD );\n\n        oGTiffMDMD.SetMetadata( papszGT_MD, pszDomain );\n        CSLDestroy( papszGT_MD );\n    }\n\n    for( int i = 1; i <= GetRasterCount(); ++i )\n    {\n        GTiffRasterBand* poBand =\n            cpl::down_cast<GTiffRasterBand *>(GetRasterBand(i));\n        papszPamDomains = poBand->oMDMD.GetDomainList();\n\n        for( int iDomain = 0;\n             papszPamDomains && papszPamDomains[iDomain] != nullptr;\n             ++iDomain )\n        {\n            const char *pszDomain = papszPamDomains[iDomain];\n            char **papszGT_MD =\n                CSLDuplicate(poBand->oGTiffMDMD.GetMetadata( pszDomain ));\n            char **papszPAM_MD = poBand->oMDMD.GetMetadata( pszDomain );\n\n            papszGT_MD = CSLMerge( papszGT_MD, papszPAM_MD );\n\n            poBand->oGTiffMDMD.SetMetadata( papszGT_MD, pszDomain );\n            CSLDestroy( papszGT_MD );\n        }\n    }\n}\n\n/************************************************************************/\n/*                              OpenDir()                               */\n/*                                                                      */\n/*      Open a specific directory as encoded into a filename.           */\n/************************************************************************/\n\nGDALDataset *GTiffDataset::OpenDir( GDALOpenInfo * poOpenInfo )\n\n{\n    bool bAllowRGBAInterface = true;\n    const char* pszFilename = poOpenInfo->pszFilename;\n    if( STARTS_WITH_CI(pszFilename, \"GTIFF_RAW:\") )\n    {\n        bAllowRGBAInterface = false;\n        pszFilename += strlen(\"GTIFF_RAW:\");\n    }\n\n    if( !STARTS_WITH_CI(pszFilename, \"GTIFF_DIR:\") ||\n        pszFilename[strlen(\"GTIFF_DIR:\")] == '\\0' )\n    {\n        return nullptr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Split out filename, and dir#/offset.                            */\n/* -------------------------------------------------------------------- */\n    pszFilename += strlen(\"GTIFF_DIR:\");\n    bool bAbsolute = false;\n\n    if( STARTS_WITH_CI(pszFilename, \"off:\") )\n    {\n        bAbsolute = true;\n        pszFilename += 4;\n    }\n\n    toff_t nOffset = atol(pszFilename);\n    pszFilename += 1;\n\n    while( *pszFilename != '\\0' && pszFilename[-1] != ':' )\n        ++pszFilename;\n\n    if( *pszFilename == '\\0' || nOffset == 0 )\n    {\n        CPLError(\n            CE_Failure, CPLE_OpenFailed,\n            \"Unable to extract offset or filename, should take the form:\\n\"\n            \"GTIFF_DIR:<dir>:filename or GTIFF_DIR:off:<dir_offset>:filename\" );\n        return nullptr;\n    }\n\n    if( poOpenInfo->eAccess == GA_Update &&\n        !CPLFetchBool(poOpenInfo->papszOpenOptions, \"ALLOW_UPDATE\", false) )\n    {\n        CPLError(\n            CE_Warning, CPLE_AppDefined,\n            \"Opening a specific TIFF directory is not supported in \"\n            \"update mode. Switching to read-only\" );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Try opening the dataset.                                        */\n/* -------------------------------------------------------------------- */\n    if( !GTiffOneTimeInit() )\n        return nullptr;\n\n    const char* pszFlag = poOpenInfo->eAccess == GA_Update ? \"r+\" : \"r\";\n    VSILFILE* l_fpL = VSIFOpenL(pszFilename, pszFlag);\n    if( l_fpL == nullptr )\n        return nullptr;\n    TIFF *l_hTIFF = VSI_TIFFOpen( pszFilename, pszFlag, l_fpL );\n    if( l_hTIFF == nullptr )\n    {\n        CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n        return nullptr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If a directory was requested by index, advance to it now.       */\n/* -------------------------------------------------------------------- */\n    if( !bAbsolute )\n    {\n        const toff_t nOffsetRequested = nOffset;\n        while( nOffset > 1 )\n        {\n            if( TIFFReadDirectory( l_hTIFF ) == 0 )\n            {\n                XTIFFClose( l_hTIFF );\n                CPLError(\n                    CE_Failure, CPLE_OpenFailed,\n                    \"Requested directory %lu not found.\",\n                    static_cast<long unsigned int>(nOffsetRequested));\n                CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n                return nullptr;\n            }\n            nOffset--;\n        }\n\n        nOffset = TIFFCurrentDirOffset( l_hTIFF );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Create a corresponding GDALDataset.                             */\n/* -------------------------------------------------------------------- */\n    GTiffDataset *poDS = new GTiffDataset();\n    poDS->SetDescription( poOpenInfo->pszFilename );\n    poDS->osFilename = poOpenInfo->pszFilename;\n    poDS->poActiveDS = poDS;\n    poDS->fpL = l_fpL;\n    poDS->hTIFF = l_hTIFF;\n    poDS->bCloseTIFFHandle = true;\n\n    if( !EQUAL(pszFilename,poOpenInfo->pszFilename)\n        && !STARTS_WITH_CI(poOpenInfo->pszFilename, \"GTIFF_RAW:\") )\n    {\n        poDS->SetPhysicalFilename( pszFilename );\n        poDS->SetSubdatasetName( poOpenInfo->pszFilename );\n        poDS->osFilename = pszFilename;\n    }\n\n    if( poOpenInfo->AreSiblingFilesLoaded() )\n        poDS->oOvManager.TransferSiblingFiles(\n            poOpenInfo->StealSiblingFiles() );\n\n    if( poDS->OpenOffset( l_hTIFF, &(poDS->poActiveDS),\n                          nOffset, false, poOpenInfo->eAccess,\n                          bAllowRGBAInterface, true ) != CE_None )\n    {\n        delete poDS;\n        return nullptr;\n    }\n\n    return poDS;\n}\n\n/************************************************************************/\n/*                   ConvertTransferFunctionToString()                  */\n/*                                                                      */\n/*      Convert a transfer function table into a string.                */\n/*      Used by LoadICCProfile().                                       */\n/************************************************************************/\nstatic CPLString ConvertTransferFunctionToString( const uint16 *pTable,\n                                                  uint32 nTableEntries )\n{\n    CPLString sValue;\n\n    for( uint32 i = 0; i < nTableEntries; ++i )\n    {\n        if( i == 0 )\n            sValue = sValue.Printf(\"%d\", static_cast<uint32>(pTable[i]));\n        else\n            sValue = sValue.Printf( \"%s, %d\",\n                                    sValue.c_str(),\n                                    static_cast<uint32>(pTable[i]));\n    }\n\n    return sValue;\n}\n\n/************************************************************************/\n/*                             LoadICCProfile()                         */\n/*                                                                      */\n/*      Load ICC Profile or colorimetric data into metadata             */\n/************************************************************************/\n\nvoid GTiffDataset::LoadICCProfile()\n{\n    if( bICCMetadataLoaded )\n        return;\n    bICCMetadataLoaded = true;\n\n    if( !SetDirectory() )\n        return;\n\n    uint32 nEmbedLen = 0;\n    uint8* pEmbedBuffer = nullptr;\n\n\n    if( TIFFGetField(hTIFF, TIFFTAG_ICCPROFILE, &nEmbedLen, &pEmbedBuffer) )\n    {\n        char *pszBase64Profile =\n            CPLBase64Encode(nEmbedLen, reinterpret_cast<const GByte*>(pEmbedBuffer));\n\n        oGTiffMDMD.SetMetadataItem( \"SOURCE_ICC_PROFILE\", pszBase64Profile,\n                                    \"COLOR_PROFILE\" );\n\n        CPLFree(pszBase64Profile);\n\n        return;\n    }\n\n    // Check for colorimetric tiff.\n    float* pCHR = nullptr;\n    float* pWP = nullptr;\n    uint16 *pTFR = nullptr;\n    uint16 *pTFG = nullptr;\n    uint16 *pTFB = nullptr;\n    uint16 *pTransferRange = nullptr;\n\n    if( TIFFGetField(hTIFF, TIFFTAG_PRIMARYCHROMATICITIES, &pCHR) )\n    {\n        if( TIFFGetField(hTIFF, TIFFTAG_WHITEPOINT, &pWP) )\n        {\n            if( !TIFFGetFieldDefaulted( hTIFF, TIFFTAG_TRANSFERFUNCTION, &pTFR,\n                                        &pTFG, &pTFB) )\n                return;\n\n            const int TIFFTAG_TRANSFERRANGE = 0x0156;\n            TIFFGetFieldDefaulted( hTIFF, TIFFTAG_TRANSFERRANGE,\n                                   &pTransferRange);\n\n            // Set all the colorimetric metadata.\n            oGTiffMDMD.SetMetadataItem(\n                \"SOURCE_PRIMARIES_RED\",\n                CPLString().Printf( \"%.9f, %.9f, 1.0\",\n                                    static_cast<double>(pCHR[0]),\n                                    static_cast<double>(pCHR[1]) ),\n                \"COLOR_PROFILE\" );\n            oGTiffMDMD.SetMetadataItem(\n                \"SOURCE_PRIMARIES_GREEN\",\n                CPLString().Printf( \"%.9f, %.9f, 1.0\",\n                                    static_cast<double>(pCHR[2]),\n                                    static_cast<double>(pCHR[3]) ),\n                \"COLOR_PROFILE\" );\n            oGTiffMDMD.SetMetadataItem(\n                \"SOURCE_PRIMARIES_BLUE\",\n                CPLString().Printf( \"%.9f, %.9f, 1.0\",\n                                    static_cast<double>(pCHR[4]),\n                                    static_cast<double>(pCHR[5]) ),\n                \"COLOR_PROFILE\" );\n\n            oGTiffMDMD.SetMetadataItem(\n                \"SOURCE_WHITEPOINT\",\n                CPLString().Printf( \"%.9f, %.9f, 1.0\",\n                                    static_cast<double>(pWP[0]),\n                                    static_cast<double>(pWP[1]) ),\n                \"COLOR_PROFILE\" );\n\n            // Set transfer function metadata.\n\n            // Get length of table.\n            const uint32 nTransferFunctionLength = 1 << nBitsPerSample;\n\n            oGTiffMDMD.SetMetadataItem(\n                \"TIFFTAG_TRANSFERFUNCTION_RED\",\n                ConvertTransferFunctionToString( pTFR, nTransferFunctionLength),\n                \"COLOR_PROFILE\" );\n\n            oGTiffMDMD.SetMetadataItem(\n                \"TIFFTAG_TRANSFERFUNCTION_GREEN\",\n                ConvertTransferFunctionToString( pTFG, nTransferFunctionLength),\n                \"COLOR_PROFILE\" );\n\n            oGTiffMDMD.SetMetadataItem(\n                \"TIFFTAG_TRANSFERFUNCTION_BLUE\",\n                ConvertTransferFunctionToString( pTFB, nTransferFunctionLength),\n                \"COLOR_PROFILE\" );\n\n            // Set transfer range.\n            if( pTransferRange )\n            {\n                oGTiffMDMD.SetMetadataItem(\n                    \"TIFFTAG_TRANSFERRANGE_BLACK\",\n                    CPLString().Printf( \"%d, %d, %d\",\n                                        static_cast<int>(pTransferRange[0]),\n                                        static_cast<int>(pTransferRange[2]),\n                                        static_cast<int>(pTransferRange[4])),\n                    \"COLOR_PROFILE\" );\n                oGTiffMDMD.SetMetadataItem(\n                    \"TIFFTAG_TRANSFERRANGE_WHITE\",\n                    CPLString().Printf( \"%d, %d, %d\",\n                                        static_cast<int>(pTransferRange[1]),\n                                        static_cast<int>(pTransferRange[3]),\n                                        static_cast<int>(pTransferRange[5])),\n                    \"COLOR_PROFILE\" );\n            }\n        }\n    }\n}\n\n/************************************************************************/\n/*                             SaveICCProfile()                         */\n/*                                                                      */\n/*      Save ICC Profile or colorimetric data into file                 */\n/* pDS:                                                                 */\n/*      Dataset that contains the metadata with the ICC or colorimetric */\n/*      data. If this argument is specified, all other arguments are    */\n/*      ignored. Set them to NULL or 0.                                 */\n/* hTIFF:                                                               */\n/*      Pointer to TIFF handle. Only needed if pDS is NULL or           */\n/*      pDS->hTIFF is NULL.                                             */\n/* papszParmList:                                                       */\n/*      Options containing the ICC profile or colorimetric metadata.    */\n/*      Ignored if pDS is not NULL.                                     */\n/* nBitsPerSample:                                                      */\n/*      Bits per sample. Ignored if pDS is not NULL.                    */\n/************************************************************************/\n\nvoid GTiffDataset::SaveICCProfile( GTiffDataset *pDS, TIFF *l_hTIFF,\n                                   char **papszParmList,\n                                   uint32 l_nBitsPerSample )\n{\n    if( (pDS != nullptr) && (pDS->eAccess != GA_Update) )\n        return;\n\n    if( l_hTIFF == nullptr )\n    {\n        if( pDS == nullptr )\n            return;\n\n        l_hTIFF = pDS->hTIFF;\n        if( l_hTIFF == nullptr )\n            return;\n    }\n\n    if( (papszParmList == nullptr) && (pDS == nullptr) )\n        return;\n\n    const char *pszValue = nullptr;\n    if( pDS != nullptr )\n        pszValue = pDS->GetMetadataItem(\"SOURCE_ICC_PROFILE\", \"COLOR_PROFILE\");\n    else\n        pszValue = CSLFetchNameValue(papszParmList, \"SOURCE_ICC_PROFILE\");\n    if( pszValue != nullptr )\n    {\n        char *pEmbedBuffer = CPLStrdup(pszValue);\n        int32 nEmbedLen =\n            CPLBase64DecodeInPlace(reinterpret_cast<GByte *>(pEmbedBuffer));\n\n        TIFFSetField(l_hTIFF, TIFFTAG_ICCPROFILE, nEmbedLen, pEmbedBuffer);\n\n        CPLFree(pEmbedBuffer);\n    }\n    else\n    {\n        // Output colorimetric data.\n        float pCHR[6] = {};  // Primaries.\n        uint16 pTXR[6] = {};  // Transfer range.\n        const char* pszCHRNames[] = {\n            \"SOURCE_PRIMARIES_RED\",\n            \"SOURCE_PRIMARIES_GREEN\",\n            \"SOURCE_PRIMARIES_BLUE\"\n        };\n        const char* pszTXRNames[] = {\n            \"TIFFTAG_TRANSFERRANGE_BLACK\",\n            \"TIFFTAG_TRANSFERRANGE_WHITE\"\n        };\n\n        // Output chromacities.\n        bool bOutputCHR = true;\n        for( int i = 0; i < 3 && bOutputCHR; ++i )\n        {\n            if( pDS != nullptr )\n                pszValue =\n                    pDS->GetMetadataItem(pszCHRNames[i], \"COLOR_PROFILE\");\n            else\n                pszValue = CSLFetchNameValue(papszParmList, pszCHRNames[i]);\n            if( pszValue == nullptr )\n            {\n                bOutputCHR = false;\n                break;\n            }\n\n            char** papszTokens =\n                CSLTokenizeString2(\n                    pszValue, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n\n            if( CSLCount( papszTokens ) != 3 )\n            {\n                bOutputCHR = false;\n                CSLDestroy( papszTokens );\n                break;\n            }\n\n            for( int j = 0; j < 3; ++j )\n            {\n                float v = static_cast<float>(CPLAtof(papszTokens[j]));\n\n                if( j == 2 )\n                {\n                    // Last term of xyY color must be 1.0.\n                    if( v != 1.0 )\n                    {\n                        bOutputCHR = false;\n                        break;\n                    }\n                }\n                else\n                {\n                    pCHR[i * 2 + j] = v;\n                }\n            }\n\n            CSLDestroy( papszTokens );\n        }\n\n        if( bOutputCHR )\n        {\n            TIFFSetField(l_hTIFF, TIFFTAG_PRIMARYCHROMATICITIES, pCHR);\n        }\n\n        // Output whitepoint.\n        if( pDS != nullptr )\n            pszValue =\n                pDS->GetMetadataItem(\"SOURCE_WHITEPOINT\", \"COLOR_PROFILE\");\n        else\n            pszValue = CSLFetchNameValue(papszParmList, \"SOURCE_WHITEPOINT\");\n        if( pszValue != nullptr )\n        {\n            char** papszTokens =\n                CSLTokenizeString2(\n                    pszValue, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n\n            bool bOutputWhitepoint = true;\n            float pWP[2] = { 0.0f, 0.0f };  // Whitepoint\n            if( CSLCount( papszTokens ) != 3 )\n            {\n                bOutputWhitepoint = false;\n            }\n            else\n            {\n                for( int j = 0; j < 3; ++j )\n                {\n                    const float v = static_cast<float>(CPLAtof(papszTokens[j]));\n\n                    if( j == 2 )\n                    {\n                        // Last term of xyY color must be 1.0.\n                        if( v != 1.0 )\n                        {\n                            bOutputWhitepoint = false;\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        pWP[j] = v;\n                    }\n                }\n            }\n            CSLDestroy( papszTokens );\n\n            if( bOutputWhitepoint )\n            {\n                TIFFSetField(l_hTIFF, TIFFTAG_WHITEPOINT, pWP);\n            }\n        }\n\n        // Set transfer function metadata.\n        char const *pszTFRed = nullptr;\n        if( pDS != nullptr )\n            pszTFRed =\n                pDS->GetMetadataItem( \"TIFFTAG_TRANSFERFUNCTION_RED\",\n                                      \"COLOR_PROFILE\" );\n        else\n            pszTFRed =\n                CSLFetchNameValue( papszParmList,\n                                   \"TIFFTAG_TRANSFERFUNCTION_RED\" );\n\n        char const *pszTFGreen = nullptr;\n        if( pDS != nullptr )\n            pszTFGreen =\n                pDS->GetMetadataItem( \"TIFFTAG_TRANSFERFUNCTION_GREEN\",\n                                      \"COLOR_PROFILE\" );\n        else\n            pszTFGreen =\n                CSLFetchNameValue( papszParmList,\n                                   \"TIFFTAG_TRANSFERFUNCTION_GREEN\" );\n\n        char const *pszTFBlue = nullptr;\n        if( pDS != nullptr )\n            pszTFBlue =\n                pDS->GetMetadataItem( \"TIFFTAG_TRANSFERFUNCTION_BLUE\",\n                                      \"COLOR_PROFILE\" );\n        else\n            pszTFBlue =\n                CSLFetchNameValue( papszParmList,\n                                   \"TIFFTAG_TRANSFERFUNCTION_BLUE\" );\n\n        if( (pszTFRed != nullptr) && (pszTFGreen != nullptr) && (pszTFBlue != nullptr) )\n        {\n            // Get length of table.\n            const int nTransferFunctionLength =\n                1 << ((pDS!=nullptr)?pDS->nBitsPerSample:l_nBitsPerSample);\n\n            char** papszTokensRed =\n                CSLTokenizeString2(\n                    pszTFRed, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n            char** papszTokensGreen =\n                CSLTokenizeString2(\n                    pszTFGreen, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n            char** papszTokensBlue =\n                CSLTokenizeString2(\n                    pszTFBlue, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n\n            if( (CSLCount( papszTokensRed ) == nTransferFunctionLength) &&\n                (CSLCount( papszTokensGreen ) == nTransferFunctionLength) &&\n                (CSLCount( papszTokensBlue ) == nTransferFunctionLength) )\n            {\n                uint16 *pTransferFuncRed =\n                    static_cast<uint16*>( CPLMalloc(\n                        sizeof(uint16) * nTransferFunctionLength ) );\n                uint16 *pTransferFuncGreen =\n                    static_cast<uint16*>( CPLMalloc(\n                        sizeof(uint16) * nTransferFunctionLength ) );\n                uint16 *pTransferFuncBlue =\n                    static_cast<uint16*>( CPLMalloc(\n                        sizeof(uint16) * nTransferFunctionLength ) );\n\n                // Convert our table in string format into int16 format.\n                for( int i = 0; i < nTransferFunctionLength; ++i )\n                {\n                    pTransferFuncRed[i] =\n                        static_cast<uint16>(atoi(papszTokensRed[i]));\n                    pTransferFuncGreen[i] =\n                        static_cast<uint16>(atoi(papszTokensGreen[i]));\n                    pTransferFuncBlue[i] =\n                        static_cast<uint16>(atoi(papszTokensBlue[i]));\n                }\n\n                TIFFSetField(l_hTIFF, TIFFTAG_TRANSFERFUNCTION,\n                    pTransferFuncRed, pTransferFuncGreen, pTransferFuncBlue);\n\n                CPLFree(pTransferFuncRed);\n                CPLFree(pTransferFuncGreen);\n                CPLFree(pTransferFuncBlue);\n            }\n\n            CSLDestroy( papszTokensRed );\n            CSLDestroy( papszTokensGreen );\n            CSLDestroy( papszTokensBlue );\n        }\n\n        // Output transfer range.\n        bool bOutputTransferRange = true;\n        for( int i = 0; (i < 2) && bOutputTransferRange; ++i )\n        {\n            if( pDS != nullptr )\n                pszValue = pDS->GetMetadataItem( pszTXRNames[i],\n                                                 \"COLOR_PROFILE\" );\n            else\n                pszValue = CSLFetchNameValue(papszParmList, pszTXRNames[i]);\n            if( pszValue == nullptr )\n            {\n                bOutputTransferRange = false;\n                break;\n            }\n\n            char** papszTokens =\n                CSLTokenizeString2(\n                    pszValue, \",\",\n                    CSLT_ALLOWEMPTYTOKENS | CSLT_STRIPLEADSPACES |\n                    CSLT_STRIPENDSPACES );\n\n            if( CSLCount( papszTokens ) != 3 )\n            {\n                bOutputTransferRange = false;\n                CSLDestroy( papszTokens );\n                break;\n            }\n\n            for( int j = 0; j < 3; ++j )\n            {\n                pTXR[i + j * 2] = static_cast<uint16>(atoi(papszTokens[j]));\n            }\n\n            CSLDestroy( papszTokens );\n        }\n\n        if( bOutputTransferRange )\n        {\n            const int TIFFTAG_TRANSFERRANGE = 0x0156;\n            TIFFSetField(l_hTIFF, TIFFTAG_TRANSFERRANGE, pTXR);\n        }\n    }\n}\n\n/************************************************************************/\n/*                             OpenOffset()                             */\n/*                                                                      */\n/*      Initialize the GTiffDataset based on a passed in file           */\n/*      handle, and directory offset to utilize.  This is called for    */\n/*      full res, and overview pages.                                   */\n/************************************************************************/\n\nCPLErr GTiffDataset::OpenOffset( TIFF *hTIFFIn,\n                                 GTiffDataset **ppoActiveDSRefIn,\n                                 toff_t nDirOffsetIn,\n                                 bool bBaseIn, GDALAccess eAccessIn,\n                                 bool bAllowRGBAInterface,\n                                 bool bReadGeoTransform )\n\n{\n    eAccess = eAccessIn;\n\n    hTIFF = hTIFFIn;\n    ppoActiveDSRef = ppoActiveDSRefIn;\n\n    nDirOffset = nDirOffsetIn;\n\n    if( !SetDirectory( nDirOffsetIn ) )\n        return CE_Failure;\n\n    bBase = bBaseIn;\n\n/* -------------------------------------------------------------------- */\n/*      Capture some information from the file that is of interest.     */\n/* -------------------------------------------------------------------- */\n    uint32 nXSize = 0;\n    uint32 nYSize = 0;\n    TIFFGetField( hTIFF, TIFFTAG_IMAGEWIDTH, &nXSize );\n    TIFFGetField( hTIFF, TIFFTAG_IMAGELENGTH, &nYSize );\n    if( nXSize > INT_MAX || nYSize > INT_MAX )\n    {\n        // GDAL only supports signed 32bit dimensions.\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Too large image size: %u x %u\",\n                 nXSize, nYSize);\n        return CE_Failure;\n    }\n    nRasterXSize = nXSize;\n    nRasterYSize = nYSize;\n\n    if( !TIFFGetField(hTIFF, TIFFTAG_SAMPLESPERPIXEL, &nSamplesPerPixel ) )\n        nBands = 1;\n    else\n        nBands = nSamplesPerPixel;\n\n    if( !TIFFGetField(hTIFF, TIFFTAG_BITSPERSAMPLE, &(nBitsPerSample)) )\n        nBitsPerSample = 1;\n\n    if( !TIFFGetField( hTIFF, TIFFTAG_PLANARCONFIG, &(nPlanarConfig) ) )\n        nPlanarConfig = PLANARCONFIG_CONTIG;\n\n    if( !TIFFGetField( hTIFF, TIFFTAG_PHOTOMETRIC, &(nPhotometric) ) )\n        nPhotometric = PHOTOMETRIC_MINISBLACK;\n\n    if( !TIFFGetField( hTIFF, TIFFTAG_SAMPLEFORMAT, &(nSampleFormat) ) )\n        nSampleFormat = SAMPLEFORMAT_UINT;\n\n    if( !TIFFGetField( hTIFF, TIFFTAG_COMPRESSION, &(nCompression) ) )\n        nCompression = COMPRESSION_NONE;\n\n#if defined(TIFFLIB_VERSION) && TIFFLIB_VERSION > 20031007 // 3.6.0\n    if( nCompression != COMPRESSION_NONE &&\n        !TIFFIsCODECConfigured(nCompression) )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Cannot open TIFF file due to missing codec.\" );\n        return CE_Failure;\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      YCbCr JPEG compressed images should be translated on the fly    */\n/*      to RGB by libtiff/libjpeg unless specifically requested         */\n/*      otherwise.                                                      */\n/* -------------------------------------------------------------------- */\n    if( nCompression == COMPRESSION_JPEG\n        && nPhotometric == PHOTOMETRIC_YCBCR\n        && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\", \"YES\") ) )\n    {\n        oGTiffMDMD.SetMetadataItem( \"SOURCE_COLOR_SPACE\", \"YCbCr\",\n                                    \"IMAGE_STRUCTURE\" );\n        int nColorMode = 0;\n        if( !TIFFGetField( hTIFF, TIFFTAG_JPEGCOLORMODE, &nColorMode ) ||\n            nColorMode != JPEGCOLORMODE_RGB )\n            TIFFSetField(hTIFF, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB);\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Get strip/tile layout.                                          */\n/* -------------------------------------------------------------------- */\n    if( TIFFIsTiled(hTIFF) )\n    {\n        uint32 l_nBlockXSize = 0;\n        uint32 l_nBlockYSize = 0;\n        TIFFGetField( hTIFF, TIFFTAG_TILEWIDTH, &(l_nBlockXSize) );\n        TIFFGetField( hTIFF, TIFFTAG_TILELENGTH, &(l_nBlockYSize) );\n        if( l_nBlockXSize > INT_MAX || l_nBlockYSize > INT_MAX )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"Too large block size: %u x %u\",\n                     l_nBlockXSize, l_nBlockYSize);\n            return CE_Failure;\n        }\n        nBlockXSize = static_cast<int>(l_nBlockXSize);\n        nBlockYSize = static_cast<int>(l_nBlockYSize);\n    }\n    else\n    {\n        if( !TIFFGetField( hTIFF, TIFFTAG_ROWSPERSTRIP,\n                           &(nRowsPerStrip) ) )\n        {\n            CPLError( CE_Warning, CPLE_AppDefined,\n                      \"RowsPerStrip not defined ... assuming all one strip.\" );\n            nRowsPerStrip = nYSize;  // Dummy value.\n        }\n\n        // If the rows per strip is larger than the file we will get\n        // confused.  libtiff internally will treat the rowsperstrip as\n        // the image height and it is best if we do too. (#4468)\n        if( nRowsPerStrip > static_cast<uint32>(nRasterYSize) )\n            nRowsPerStrip = nRasterYSize;\n\n        nBlockXSize = nRasterXSize;\n        nBlockYSize = nRowsPerStrip;\n    }\n\n    const int l_nBlocksPerColumn = DIV_ROUND_UP(nRasterYSize, nBlockYSize);\n    const int l_nBlocksPerRow = DIV_ROUND_UP(nRasterXSize, nBlockXSize);\n    if( l_nBlocksPerColumn > INT_MAX / l_nBlocksPerRow )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Too many blocks: %d x %d\",\n                  l_nBlocksPerRow, l_nBlocksPerColumn );\n        return CE_Failure;\n    }\n\n    // Note: we could potentially go up to UINT_MAX blocks, but currently\n    // we use a int nBlockId\n    nBlocksPerBand = l_nBlocksPerColumn * l_nBlocksPerRow;\n    if( nPlanarConfig == PLANARCONFIG_SEPARATE &&\n        nBlocksPerBand > INT_MAX / nBands )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Too many blocks: %d x %d x %d bands\",\n                  l_nBlocksPerRow, l_nBlocksPerColumn, nBands );\n        return CE_Failure;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we handle this using the GTiffBitmapBand?                */\n/* -------------------------------------------------------------------- */\n    bool bTreatAsBitmap = false;\n\n    if( nBitsPerSample == 1 && nBands == 1 )\n    {\n        bTreatAsBitmap = true;\n\n        // Lets treat large \"one row\" bitmaps using the scanline api.\n        if( !TIFFIsTiled(hTIFF)\n            && nBlockYSize == nRasterYSize\n            && nRasterYSize > 2000\n            // libtiff does not support reading JBIG files with\n            // TIFFReadScanline().\n            && nCompression != COMPRESSION_JBIG )\n        {\n            bTreatAsSplitBitmap = true;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we treat this via the RGBA interface?                    */\n/* -------------------------------------------------------------------- */\n    if(\n#ifdef DEBUG\n        CPLTestBool(CPLGetConfigOption(\"GTIFF_FORCE_RGBA\", \"NO\")) ||\n#endif\n        (bAllowRGBAInterface &&\n        !bTreatAsBitmap && !(nBitsPerSample > 8)\n        && (nPhotometric == PHOTOMETRIC_CIELAB ||\n            nPhotometric == PHOTOMETRIC_LOGL ||\n            nPhotometric == PHOTOMETRIC_LOGLUV ||\n            nPhotometric == PHOTOMETRIC_SEPARATED ||\n            ( nPhotometric == PHOTOMETRIC_YCBCR\n              && nCompression != COMPRESSION_JPEG ))) )\n    {\n        char szMessage[1024] = {};\n\n        if( TIFFRGBAImageOK( hTIFF, szMessage ) == 1 )\n        {\n            const char* pszSourceColorSpace = nullptr;\n            nBands = 4;\n            switch( nPhotometric )\n            {\n                case PHOTOMETRIC_CIELAB:\n                    pszSourceColorSpace = \"CIELAB\";\n                    break;\n                case PHOTOMETRIC_LOGL:\n                    pszSourceColorSpace = \"LOGL\";\n                    break;\n                case PHOTOMETRIC_LOGLUV:\n                    pszSourceColorSpace = \"LOGLUV\";\n                    break;\n                case PHOTOMETRIC_SEPARATED:\n                    pszSourceColorSpace = \"CMYK\";\n                    break;\n                case PHOTOMETRIC_YCBCR:\n                    pszSourceColorSpace = \"YCbCr\";\n                    nBands = 3; // probably true for other photometric values\n                    break;\n            }\n            if( pszSourceColorSpace )\n                oGTiffMDMD.SetMetadataItem( \"SOURCE_COLOR_SPACE\",\n                                            pszSourceColorSpace,\n                                            \"IMAGE_STRUCTURE\" );\n            bTreatAsRGBA = true;\n\n        }\n        else\n        {\n            CPLDebug( \"GTiff\", \"TIFFRGBAImageOK says:\\n%s\", szMessage );\n        }\n    }\n\n    // libtiff has various issues with OJPEG compression and chunky-strip\n    // support with the \"classic\" scanline/strip/tile interfaces, and that\n    // wouldn't work either, so better bail out.\n    if( nCompression == COMPRESSION_OJPEG &&\n        !bTreatAsRGBA )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Old-JPEG compression only supported through RGBA interface, \"\n                 \"which cannot be used probably because the file is corrupted\");\n        return CE_Failure;\n    }\n\n    // If photometric is YCbCr, scanline/strip/tile interfaces assumes that\n    // we are ready with downsampled data. And we are not.\n    if( nCompression != COMPRESSION_JPEG &&\n        nCompression != COMPRESSION_OJPEG &&\n        nPhotometric == PHOTOMETRIC_YCBCR &&\n        nPlanarConfig == PLANARCONFIG_CONTIG &&\n        !bTreatAsRGBA )\n    {\n        uint16 nF1, nF2;\n        TIFFGetFieldDefaulted(hTIFF,TIFFTAG_YCBCRSUBSAMPLING,&nF1,&nF2);\n        if( nF1 != 1 || nF2 != 1 )\n        {\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"Cannot open TIFF file with YCbCr, subsampling and \"\n                      \"BitsPerSample > 8 that is not JPEG compressed\" );\n            return CE_Failure;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we treat this via the split interface?                   */\n/* -------------------------------------------------------------------- */\n    if( !TIFFIsTiled(hTIFF)\n        && nBitsPerSample == 8\n        && nBlockYSize == nRasterYSize\n        && nRasterYSize > 2000\n        && !bTreatAsRGBA\n        && CPLTestBool(CPLGetConfigOption(\"GDAL_ENABLE_TIFF_SPLIT\", \"YES\")) )\n    {\n        // libtiff 3.9.2 (20091104) and older, libtiff 4.0.0beta5 (also\n        // 20091104) and older will crash when trying to open a\n        // all-in-one-strip YCbCr JPEG compressed TIFF (see #3259).\n#if (TIFFLIB_VERSION <= 20091104 && !defined(BIGTIFF_SUPPORT)) || \\\n    (TIFFLIB_VERSION <= 20091104 && defined(BIGTIFF_SUPPORT))\n        if( nPhotometric == PHOTOMETRIC_YCBCR &&\n            nCompression == COMPRESSION_JPEG )\n        {\n            CPLDebug(\n                \"GTiff\",\n                \"Avoid using split band to open all-in-one-strip \"\n                \"YCbCr JPEG compressed TIFF because of older libtiff\" );\n        }\n        else\n#endif\n        {\n            bTreatAsSplit = true;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we treat this via the odd bits interface?                */\n/* -------------------------------------------------------------------- */\n    bool bTreatAsOdd = false;\n    if( nSampleFormat == SAMPLEFORMAT_IEEEFP )\n    {\n        if( nBitsPerSample == 16 || nBitsPerSample == 24 )\n            bTreatAsOdd = true;\n    }\n    else if( !bTreatAsRGBA && !bTreatAsBitmap\n             && nBitsPerSample != 8\n             && nBitsPerSample != 16\n             && nBitsPerSample != 32\n             && nBitsPerSample != 64\n             && nBitsPerSample != 128 )\n    {\n        bTreatAsOdd = true;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      We can't support 'chunks' bigger than 2GB on 32 bit builds      */\n/* -------------------------------------------------------------------- */\n#if defined(BIGTIFF_SUPPORT) && SIZEOF_VOIDP == 4\n    uint64 nChunkSize = 0;\n    if( bTreatAsSplit || bTreatAsSplitBitmap )\n    {\n        nChunkSize = TIFFScanlineSize64( hTIFF );\n    }\n    else\n    {\n        if( TIFFIsTiled(hTIFF) )\n            nChunkSize = TIFFTileSize64( hTIFF );\n        else\n            nChunkSize = TIFFStripSize64( hTIFF );\n    }\n    if( bTreatAsRGBA )\n    {\n        nChunkSize = std::max(nChunkSize,\n                        4 * static_cast<uint64>(nBlockXSize) * nBlockYSize);\n    }\n    if( nChunkSize > static_cast<uint64>(INT_MAX) )\n    {\n        CPLError( CE_Failure, CPLE_NotSupported,\n                  \"Scanline/tile/strip size bigger than 2GB unsupported \"\n                  \"on 32-bit builds.\" );\n        return CE_Failure;\n    }\n#endif\n\n    const bool bMinIsWhite = nPhotometric == PHOTOMETRIC_MINISWHITE;\n\n/* -------------------------------------------------------------------- */\n/*      Check for NODATA                                                */\n/* -------------------------------------------------------------------- */\n    char *pszText = nullptr;\n    if( TIFFGetField( hTIFF, TIFFTAG_GDAL_NODATA, &pszText ) &&\n        !EQUAL(pszText, \"\") )\n    {\n        bNoDataSet = true;\n        dfNoDataValue = CPLAtofM( pszText );\n        if( nBitsPerSample == 32 && nSampleFormat == SAMPLEFORMAT_IEEEFP )\n        {\n            dfNoDataValue = GDALAdjustNoDataCloseToFloatMax(dfNoDataValue);\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Capture the color table if there is one.                        */\n/* -------------------------------------------------------------------- */\n    unsigned short *panRed = nullptr;\n    unsigned short *panGreen = nullptr;\n    unsigned short *panBlue = nullptr;\n\n    if( bTreatAsRGBA || nBitsPerSample > 16\n        || TIFFGetField( hTIFF, TIFFTAG_COLORMAP,\n                         &panRed, &panGreen, &panBlue) == 0 )\n    {\n        // Build inverted palette if we have inverted photometric.\n        // Pixel values remains unchanged.  Avoid doing this for *deep*\n        // data types (per #1882)\n        if( nBitsPerSample <= 16 && nPhotometric == PHOTOMETRIC_MINISWHITE )\n        {\n            poColorTable = new GDALColorTable();\n            const int nColorCount = 1 << nBitsPerSample;\n\n            for( int iColor = 0; iColor < nColorCount; ++iColor )\n            {\n                const short nValue =\n                    static_cast<short>(((255 * (nColorCount - 1 - iColor)) /\n                                        (nColorCount - 1)));\n                const GDALColorEntry oEntry =\n                    { nValue, nValue, nValue, static_cast<short>(255) };\n                poColorTable->SetColorEntry( iColor, &oEntry );\n            }\n\n            nPhotometric = PHOTOMETRIC_PALETTE;\n        }\n        else\n        {\n            poColorTable = nullptr;\n        }\n    }\n    else\n    {\n        unsigned short nMaxColor = 0;\n\n        poColorTable = new GDALColorTable();\n\n        const int nColorCount = 1 << nBitsPerSample;\n\n        for( int iColor = nColorCount - 1; iColor >= 0; iColor-- )\n        {\n            // TODO(schwehr): Ensure the color entries are never negative?\n            const unsigned short divisor = 257;\n            const GDALColorEntry oEntry = {\n                static_cast<short>(panRed[iColor] / divisor),\n                static_cast<short>(panGreen[iColor] / divisor),\n                static_cast<short>(panBlue[iColor] / divisor),\n                static_cast<short>(\n                    bNoDataSet && static_cast<int>(dfNoDataValue) == iColor\n                    ? 0\n                    : 255)\n            };\n\n            poColorTable->SetColorEntry( iColor, &oEntry );\n\n            nMaxColor = std::max(nMaxColor, panRed[iColor]);\n            nMaxColor = std::max(nMaxColor, panGreen[iColor]);\n            nMaxColor = std::max(nMaxColor, panBlue[iColor]);\n        }\n\n        // Bug 1384 - Some TIFF files are generated with color map entry\n        // values in range 0-255 instead of 0-65535 - try to handle these\n        // gracefully.\n        if( nMaxColor > 0 && nMaxColor < 256 )\n        {\n            CPLDebug(\n                \"GTiff\",\n                \"TIFF ColorTable seems to be improperly scaled, fixing up.\" );\n\n            for( int iColor = nColorCount - 1; iColor >= 0; iColor-- )\n            {\n                // TODO(schwehr): Ensure the color entries are never negative?\n                const GDALColorEntry oEntry = {\n                    static_cast<short>(panRed[iColor]),\n                    static_cast<short>(panGreen[iColor]),\n                    static_cast<short>(panBlue[iColor]),\n                    bNoDataSet &&\n                    static_cast<int>(dfNoDataValue) == iColor\n                    ? static_cast<short>(0)\n                    : static_cast<short>(255)\n                };\n\n                poColorTable->SetColorEntry( iColor, &oEntry );\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Create band information objects.                                */\n/* -------------------------------------------------------------------- */\n    for( int iBand = 0; iBand < nBands; ++iBand )\n    {\n        if( bTreatAsRGBA )\n            SetBand( iBand + 1, new GTiffRGBABand( this, iBand + 1 ) );\n        else if( bTreatAsSplitBitmap )\n            SetBand( iBand + 1, new GTiffSplitBitmapBand( this, iBand + 1 ) );\n        else if( bTreatAsSplit )\n            SetBand( iBand + 1, new GTiffSplitBand( this, iBand + 1 ) );\n        else if( bTreatAsBitmap )\n            SetBand( iBand + 1, new GTiffBitmapBand( this, iBand + 1 ) );\n        else if( bTreatAsOdd )\n            SetBand( iBand + 1, new GTiffOddBitsBand( this, iBand + 1 ) );\n        else\n            SetBand( iBand + 1, new GTiffRasterBand( this, iBand + 1 ) );\n    }\n\n    if( GetRasterBand(1)->GetRasterDataType() == GDT_Unknown )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Unsupported TIFF configuration: BitsPerSample(=%d) and \"\n                 \"SampleType(=%d)\",\n                 nBitsPerSample,\n                 nSampleFormat);\n        return CE_Failure;\n    }\n\n    m_bReadGeoTransform = bReadGeoTransform;\n\n/* -------------------------------------------------------------------- */\n/*      Capture some other potentially interesting information.         */\n/* -------------------------------------------------------------------- */\n    char szWorkMDI[200] = {};\n    uint16 nShort = 0;\n\n    for( size_t iTag = 0;\n         iTag < sizeof(asTIFFTags) / sizeof(asTIFFTags[0]);\n         ++iTag )\n    {\n        if( asTIFFTags[iTag].eType == GTIFFTAGTYPE_STRING )\n        {\n            if( TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &pszText ) )\n                oGTiffMDMD.SetMetadataItem( asTIFFTags[iTag].pszTagName,\n                                            pszText );\n        }\n        else if( asTIFFTags[iTag].eType == GTIFFTAGTYPE_FLOAT )\n        {\n            float fVal = 0.0;\n            if( TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &fVal ) )\n            {\n                CPLsnprintf( szWorkMDI, sizeof(szWorkMDI), \"%.8g\", fVal );\n                oGTiffMDMD.SetMetadataItem( asTIFFTags[iTag].pszTagName,\n                                            szWorkMDI );\n            }\n        }\n        else if( asTIFFTags[iTag].eType == GTIFFTAGTYPE_SHORT &&\n                 asTIFFTags[iTag].nTagVal != TIFFTAG_RESOLUTIONUNIT )\n        {\n            if( TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal, &nShort ) )\n            {\n                snprintf( szWorkMDI, sizeof(szWorkMDI), \"%d\", nShort );\n                oGTiffMDMD.SetMetadataItem( asTIFFTags[iTag].pszTagName,\n                                            szWorkMDI );\n            }\n        }\n        else if( asTIFFTags[iTag].eType == GTIFFTAGTYPE_BYTE_STRING )\n        {\n            uint32 nCount = 0;\n            if( TIFFGetField( hTIFF, asTIFFTags[iTag].nTagVal,\n                              &nCount, &pszText ) )\n            {\n                std::string osStr;\n                osStr.assign(pszText, nCount);\n                oGTiffMDMD.SetMetadataItem( asTIFFTags[iTag].pszTagName,\n                                            osStr.c_str() );\n            }\n        }\n    }\n\n    if( TIFFGetField( hTIFF, TIFFTAG_RESOLUTIONUNIT, &nShort ) )\n    {\n        if( nShort == RESUNIT_NONE )\n            snprintf( szWorkMDI, sizeof(szWorkMDI), \"%d (unitless)\", nShort );\n        else if( nShort == RESUNIT_INCH )\n            snprintf( szWorkMDI, sizeof(szWorkMDI),\n                      \"%d (pixels/inch)\", nShort );\n        else if( nShort == RESUNIT_CENTIMETER )\n            snprintf( szWorkMDI, sizeof(szWorkMDI), \"%d (pixels/cm)\", nShort );\n        else\n            snprintf( szWorkMDI, sizeof(szWorkMDI), \"%d\", nShort );\n        oGTiffMDMD.SetMetadataItem( \"TIFFTAG_RESOLUTIONUNIT\", szWorkMDI );\n    }\n\n    int nTagSize = 0;\n    void* pData = nullptr;\n    if( TIFFGetField( hTIFF, TIFFTAG_XMLPACKET, &nTagSize, &pData ) )\n    {\n        char* pszXMP =\n            static_cast<char *>( VSI_MALLOC_VERBOSE(nTagSize + 1) );\n        if( pszXMP )\n        {\n            memcpy(pszXMP, pData, nTagSize);\n            pszXMP[nTagSize] = '\\0';\n\n            char *apszMDList[2] = { pszXMP, nullptr };\n            oGTiffMDMD.SetMetadata(apszMDList, \"xml:XMP\");\n\n            CPLFree(pszXMP);\n        }\n    }\n\n    if( nCompression == COMPRESSION_NONE )\n        /* no compression tag */;\n    else if( nCompression == COMPRESSION_CCITTRLE )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"CCITTRLE\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_CCITTFAX3 )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"CCITTFAX3\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_CCITTFAX4 )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"CCITTFAX4\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_LZW )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"LZW\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_OJPEG )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"OJPEG\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_JPEG )\n    {\n        if( nPhotometric == PHOTOMETRIC_YCBCR )\n            oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"YCbCr JPEG\",\n                                        \"IMAGE_STRUCTURE\" );\n        else\n            oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"JPEG\",\n                                        \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_NEXT )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"NEXT\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_CCITTRLEW )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"CCITTRLEW\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_PACKBITS )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"PACKBITS\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_THUNDERSCAN )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"THUNDERSCAN\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_PIXARFILM )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"PIXARFILM\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_PIXARLOG )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"PIXARLOG\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_DEFLATE )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"DEFLATE\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_ADOBE_DEFLATE )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"DEFLATE\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_DCS )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"DCS\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_JBIG )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"JBIG\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_SGILOG )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"SGILOG\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_SGILOG24 )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"SGILOG24\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_JP2000 )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"JP2000\",\n                                    \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_LZMA )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"LZMA\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_ZSTD )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"ZSTD\", \"IMAGE_STRUCTURE\" );\n    }\n    else if( nCompression == COMPRESSION_LERC )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"LERC\", \"IMAGE_STRUCTURE\" );\n#if HAVE_LERC\n        uint32 nLercParamCount = 0;\n        uint32* panLercParms = nullptr;\n        if( TIFFGetField( hTIFF, TIFFTAG_LERC_PARAMETERS, &nLercParamCount,\n                          &panLercParms ) &&\n            nLercParamCount == 2 )\n        {\n            memcpy( anLercAddCompressionAndVersion, panLercParms,\n                    sizeof(anLercAddCompressionAndVersion) );\n        }\n\n        uint32 nAddVersion = LERC_ADD_COMPRESSION_NONE;\n        if( TIFFGetField( hTIFF, TIFFTAG_LERC_ADD_COMPRESSION, &nAddVersion ) &&\n            nAddVersion != LERC_ADD_COMPRESSION_NONE )\n        {\n            if( nAddVersion == LERC_ADD_COMPRESSION_DEFLATE )\n            {\n                oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"LERC_DEFLATE\",\n                                            \"IMAGE_STRUCTURE\" );\n            }\n            else if( nAddVersion == LERC_ADD_COMPRESSION_ZSTD )\n            {\n                oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"LERC_ZSTD\",\n                                            \"IMAGE_STRUCTURE\" );\n            }\n        }\n        uint32 nLercVersion = LERC_VERSION_2_4;\n        if( TIFFGetField( hTIFF, TIFFTAG_LERC_VERSION, &nLercVersion) )\n        {\n            if( nLercVersion == LERC_VERSION_2_4 )\n            {\n                oGTiffMDMD.SetMetadataItem( \"LERC_VERSION\", \"2.4\",\n                                            \"IMAGE_STRUCTURE\" );\n            }\n            else\n            {\n                CPLError(CE_Warning, CPLE_AppDefined,\n                         \"Unknown Lerc version: %d\", nLercVersion);\n            }\n        }\n#endif\n    }\n    else if( nCompression == COMPRESSION_WEBP )\n    {\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", \"WEBP\", \"IMAGE_STRUCTURE\" );\n    }\n    else\n    {\n        CPLString oComp;\n        oComp.Printf( \"%d\", nCompression);\n        oGTiffMDMD.SetMetadataItem( \"COMPRESSION\", oComp.c_str());\n    }\n\n    if( nPlanarConfig == PLANARCONFIG_CONTIG && nBands != 1 )\n        oGTiffMDMD.SetMetadataItem( \"INTERLEAVE\", \"PIXEL\", \"IMAGE_STRUCTURE\" );\n    else\n        oGTiffMDMD.SetMetadataItem( \"INTERLEAVE\", \"BAND\", \"IMAGE_STRUCTURE\" );\n\n    if( (GetRasterBand(1)->GetRasterDataType() == GDT_Byte &&\n         nBitsPerSample != 8 ) ||\n        (GetRasterBand(1)->GetRasterDataType() == GDT_UInt16 &&\n         nBitsPerSample != 16) ||\n        ((GetRasterBand(1)->GetRasterDataType() == GDT_UInt32 ||\n          GetRasterBand(1)->GetRasterDataType() == GDT_Float32) &&\n         nBitsPerSample != 32) )\n    {\n        for( int i = 0; i < nBands; ++i )\n            cpl::down_cast<GTiffRasterBand*>(GetRasterBand(i + 1))->\n                oGTiffMDMD.SetMetadataItem(\n                    \"NBITS\",\n                    CPLString().Printf(\n                        \"%d\", static_cast<int>(nBitsPerSample) ),\n                    \"IMAGE_STRUCTURE\" );\n    }\n\n    if( bMinIsWhite )\n        oGTiffMDMD.SetMetadataItem( \"MINISWHITE\", \"YES\", \"IMAGE_STRUCTURE\" );\n\n    if( TIFFGetField( hTIFF, TIFFTAG_GDAL_METADATA, &pszText ) )\n    {\n        CPLXMLNode *psRoot = CPLParseXMLString( pszText );\n        CPLXMLNode *psItem = nullptr;\n\n        if( psRoot != nullptr && psRoot->eType == CXT_Element\n            && EQUAL(psRoot->pszValue,\"GDALMetadata\") )\n            psItem = psRoot->psChild;\n\n        for( ; psItem != nullptr; psItem = psItem->psNext )\n        {\n\n            if( psItem->eType != CXT_Element\n                || !EQUAL(psItem->pszValue,\"Item\") )\n                continue;\n\n            const char *pszKey = CPLGetXMLValue( psItem, \"name\", nullptr );\n            const char *pszValue = CPLGetXMLValue( psItem, nullptr, nullptr );\n            int nBand =\n                atoi(CPLGetXMLValue( psItem, \"sample\", \"-1\" ));\n            if( nBand < -1 || nBand > 65535 )\n                continue;\n            nBand ++;\n            const char *pszRole = CPLGetXMLValue( psItem, \"role\", \"\" );\n            const char *pszDomain = CPLGetXMLValue( psItem, \"domain\", \"\" );\n\n            if( pszKey == nullptr || pszValue == nullptr )\n                continue;\n            if( EQUAL(pszDomain, \"IMAGE_STRUCTURE\") )\n                continue;\n\n            bool bIsXML = false;\n\n            if( STARTS_WITH_CI(pszDomain, \"xml:\") )\n                bIsXML = TRUE;\n\n            char *pszUnescapedValue =\n                CPLUnescapeString( pszValue, nullptr, CPLES_XML );\n            if( nBand == 0 )\n            {\n                if( bIsXML )\n                {\n                    char *apszMD[2] = { pszUnescapedValue, nullptr };\n                    oGTiffMDMD.SetMetadata( apszMD, pszDomain );\n                }\n                else\n                {\n                    oGTiffMDMD.SetMetadataItem( pszKey, pszUnescapedValue,\n                                                pszDomain );\n                }\n            }\n            else\n            {\n                GTiffRasterBand *poBand =\n                    cpl::down_cast<GTiffRasterBand*>(GetRasterBand(nBand));\n                if( poBand != nullptr )\n                {\n                    if( EQUAL(pszRole,\"scale\") )\n                    {\n                        poBand->bHaveOffsetScale = true;\n                        poBand->dfScale = CPLAtofM(pszUnescapedValue);\n                    }\n                    else if( EQUAL(pszRole,\"offset\") )\n                    {\n                        poBand->bHaveOffsetScale = true;\n                        poBand->dfOffset = CPLAtofM(pszUnescapedValue);\n                    }\n                    else if( EQUAL(pszRole,\"unittype\") )\n                    {\n                        poBand->osUnitType = pszUnescapedValue;\n                    }\n                    else if( EQUAL(pszRole,\"description\") )\n                    {\n                        poBand->osDescription = pszUnescapedValue;\n                    }\n                    else if( EQUAL(pszRole, \"colorinterp\") )\n                    {\n                        poBand->eBandInterp =\n                            GDALGetColorInterpretationByName(pszUnescapedValue);\n                    }\n                    else\n                    {\n                        if( bIsXML )\n                        {\n                            char *apszMD[2] = { pszUnescapedValue, nullptr };\n                            poBand->oGTiffMDMD.SetMetadata( apszMD, pszDomain );\n                        }\n                        else\n                        {\n                            poBand->oGTiffMDMD.SetMetadataItem(\n                                pszKey,\n                                pszUnescapedValue,\n                                pszDomain );\n                        }\n                    }\n                }\n            }\n            CPLFree( pszUnescapedValue );\n        }\n\n        CPLDestroyXMLNode( psRoot );\n    }\n\n    if( bStreamingIn )\n    {\n        toff_t* panOffsets = nullptr;\n        TIFFGetField( hTIFF,\n                      TIFFIsTiled( hTIFF ) ?\n                      TIFFTAG_TILEOFFSETS : TIFFTAG_STRIPOFFSETS,\n                      &panOffsets );\n        if( panOffsets )\n        {\n            int nBlockCount =\n                TIFFIsTiled(hTIFF) ?\n                TIFFNumberOfTiles(hTIFF) : TIFFNumberOfStrips(hTIFF);\n            for( int i = 1; i < nBlockCount; ++i )\n            {\n                if( panOffsets[i] < panOffsets[i-1] )\n                {\n                    oGTiffMDMD.SetMetadataItem( \"UNORDERED_BLOCKS\", \"YES\",\n                                                \"TIFF\");\n                    CPLDebug(\n                        \"GTIFF\",\n                        \"Offset of block %d is lower than previous block. \"\n                        \"Reader must be careful\",\n                        i );\n                    break;\n                }\n            }\n        }\n    }\n\n    if( nCompression == COMPRESSION_JPEG && eAccess == GA_Update )\n    {\n        SetJPEGQualityAndTablesModeFromFile();\n    }\n\n    CPLAssert(m_bReadGeoTransform == bReadGeoTransform);\n    CPLAssert(!bMetadataChanged);\n    bMetadataChanged = false;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                         GetSiblingFiles()                            */\n/************************************************************************/\n\nchar** GTiffDataset::GetSiblingFiles()\n{\n    if( m_bHasGotSiblingFiles )\n    {\n        return oOvManager.GetSiblingFiles();\n    }\n\n    m_bHasGotSiblingFiles = true;\n    const int nMaxFiles =\n        atoi(CPLGetConfigOption(\"GDAL_READDIR_LIMIT_ON_OPEN\", \"1000\"));\n    char** papszSiblingFiles =\n        VSIReadDirEx(CPLGetDirname(osFilename), nMaxFiles);\n    if( nMaxFiles > 0 && CSLCount(papszSiblingFiles) > nMaxFiles )\n    {\n        CPLDebug(\"GTiff\", \"GDAL_READDIR_LIMIT_ON_OPEN reached on %s\",\n                 CPLGetDirname(osFilename));\n        CSLDestroy(papszSiblingFiles);\n        papszSiblingFiles = nullptr;\n    }\n    oOvManager.TransferSiblingFiles( papszSiblingFiles );\n\n    return papszSiblingFiles;\n}\n\n/************************************************************************/\n/*                   IdentifyAuthorizedGeoreferencingSources()          */\n/************************************************************************/\n\nvoid GTiffDataset::IdentifyAuthorizedGeoreferencingSources()\n{\n    if( m_bHasIdentifiedAuthorizedGeoreferencingSources )\n        return;\n    m_bHasIdentifiedAuthorizedGeoreferencingSources = true;\n    CPLString osGeorefSources = CSLFetchNameValueDef( papszOpenOptions,\n        \"GEOREF_SOURCES\",\n        CPLGetConfigOption(\"GDAL_GEOREF_SOURCES\",\n                           \"PAM,INTERNAL,TABFILE,WORLDFILE\") );\n    char** papszTokens = CSLTokenizeString2(osGeorefSources, \",\", 0);\n    m_nPAMGeorefSrcIndex = CSLFindString(papszTokens, \"PAM\");\n    m_nINTERNALGeorefSrcIndex = CSLFindString(papszTokens, \"INTERNAL\");\n    m_nTABFILEGeorefSrcIndex = CSLFindString(papszTokens, \"TABFILE\");\n    m_nWORLDFILEGeorefSrcIndex = CSLFindString(papszTokens, \"WORLDFILE\");\n    CSLDestroy(papszTokens);\n}\n\n/************************************************************************/\n/*                     LoadGeoreferencingAndPamIfNeeded()               */\n/************************************************************************/\n\nvoid GTiffDataset::LoadGeoreferencingAndPamIfNeeded()\n\n{\n    if( !m_bReadGeoTransform && !m_bLoadPam )\n        return;\n\n    IdentifyAuthorizedGeoreferencingSources();\n\n/* -------------------------------------------------------------------- */\n/*      Get the transform or gcps from the GeoTIFF file.                */\n/* -------------------------------------------------------------------- */\n    if( m_bReadGeoTransform )\n    {\n        m_bReadGeoTransform = false;\n\n        if( !SetDirectory() )\n            return;\n\n        char *pszTabWKT = nullptr;\n        double *padfTiePoints = nullptr;\n        double *padfScale = nullptr;\n        double *padfMatrix = nullptr;\n        uint16 nCount = 0;\n        bool bPixelIsPoint = false;\n        short nRasterType = 0;\n        bool bPointGeoIgnore = false;\n\n        std::set<int> aoSetPriorities;\n        if( m_nINTERNALGeorefSrcIndex >= 0 )\n            aoSetPriorities.insert(m_nINTERNALGeorefSrcIndex);\n        if( m_nTABFILEGeorefSrcIndex >= 0 )\n            aoSetPriorities.insert(m_nTABFILEGeorefSrcIndex);\n        if( m_nWORLDFILEGeorefSrcIndex >= 0 )\n            aoSetPriorities.insert(m_nWORLDFILEGeorefSrcIndex);\n        std::set<int>::iterator oIter = aoSetPriorities.begin();\n        for( ; oIter != aoSetPriorities.end(); ++oIter )\n        {\n            int nIndex = *oIter;\n            if( m_nINTERNALGeorefSrcIndex == nIndex )\n            {\n                GTIF *psGTIF = GTiffDatasetGTIFNew( hTIFF );  // How expensive this is?\n\n                if( psGTIF )\n                {\n                    if( GDALGTIFKeyGetSHORT(psGTIF, GTRasterTypeGeoKey,\n                                            &nRasterType, 0, 1 ) == 1\n                        && nRasterType ==\n                           static_cast<short>(RasterPixelIsPoint) )\n                    {\n                        bPixelIsPoint = true;\n                        bPointGeoIgnore =\n                            CPLTestBool(\n                                CPLGetConfigOption(\"GTIFF_POINT_GEO_IGNORE\",\n                                                   \"FALSE\") );\n                    }\n\n                    GTIFFree( psGTIF );\n                }\n\n                adfGeoTransform[0] = 0.0;\n                adfGeoTransform[1] = 1.0;\n                adfGeoTransform[2] = 0.0;\n                adfGeoTransform[3] = 0.0;\n                adfGeoTransform[4] = 0.0;\n                adfGeoTransform[5] = 1.0;\n\n                uint16 nCountScale = 0;\n                if( TIFFGetField(hTIFF, TIFFTAG_GEOPIXELSCALE,\n                                 &nCountScale, &padfScale )\n                    && nCountScale >= 2\n                    && padfScale[0] != 0.0 && padfScale[1] != 0.0 )\n                {\n                    adfGeoTransform[1] = padfScale[0];\n                    if( padfScale[1] < 0 )\n                    {\n                        const char* pszOptionVal =\n                            CPLGetConfigOption(\"GTIFF_HONOUR_NEGATIVE_SCALEY\",\n                                               nullptr);\n                        if( pszOptionVal == nullptr )\n                        {\n                            CPLError(CE_Warning, CPLE_AppDefined,\n                                \"File with negative value for ScaleY in \"\n                                \"GeoPixelScale tag. This is rather \"\n                                \"unusual. GDAL, contrary to the GeoTIFF \"\n                                \"specification, assumes that the file \"\n                                \"was intended to be north-up, and will \"\n                                \"treat this file as if ScaleY was \"\n                                \"positive. You may override this behaviour \"\n                                \"by setting the GTIFF_HONOUR_NEGATIVE_SCALEY \"\n                                \"configuration option to YES\");\n                            adfGeoTransform[5] = padfScale[1];\n                        }\n                        else if( CPLTestBool(pszOptionVal) )\n                        {\n                            adfGeoTransform[5] = -padfScale[1];\n                        }\n                        else\n                        {\n                            adfGeoTransform[5] = padfScale[1];\n                        }\n                    }\n                    else\n                    {\n                        adfGeoTransform[5] = -padfScale[1];\n                    }\n\n                    if( TIFFGetField(hTIFF, TIFFTAG_GEOTIEPOINTS,\n                                     &nCount, &padfTiePoints )\n                        && nCount >= 6 )\n                    {\n                        adfGeoTransform[0] =\n                            padfTiePoints[3] -\n                            padfTiePoints[0] * adfGeoTransform[1];\n                        adfGeoTransform[3] =\n                            padfTiePoints[4] -\n                            padfTiePoints[1] * adfGeoTransform[5];\n\n                        if( bPixelIsPoint && !bPointGeoIgnore )\n                        {\n                            adfGeoTransform[0] -=\n                                (adfGeoTransform[1] * 0.5 +\n                                 adfGeoTransform[2] * 0.5);\n                            adfGeoTransform[3] -=\n                                (adfGeoTransform[4] * 0.5 +\n                                 adfGeoTransform[5] * 0.5);\n                        }\n\n                        bGeoTransformValid = true;\n                        m_nGeoTransformGeorefSrcIndex = nIndex;\n\n                        if( nCountScale >= 3 && GetRasterCount() == 1 &&\n                            (padfScale[2] != 0.0 ||\n                             padfTiePoints[2] != 0.0 ||\n                             padfTiePoints[5] != 0.0) )\n                        {\n                            LookForProjection();\n                            if( !oSRS.IsEmpty() && oSRS.IsVertical() )\n                            {\n                                /* modelTiePointTag = (pixel, line, z0, X, Y, Z0) */\n                                /* thus Z(some_point) = (z(some_point) - z0) * scaleZ + Z0 */\n                                /* equivalently written as */\n                                /* Z(some_point) = z(some_point) * scaleZ + offsetZ with */\n                                /* offsetZ = - z0 * scaleZ + Z0 */\n                                double dfScale = padfScale[2];\n                                double dfOffset =\n                                    -padfTiePoints[2] * dfScale + padfTiePoints[5];\n                                GTiffRasterBand* poBand =\n                                    cpl::down_cast<GTiffRasterBand*>(GetRasterBand(1));\n                                poBand->bHaveOffsetScale = true;\n                                poBand->dfScale = dfScale;\n                                poBand->dfOffset = dfOffset;\n                            }\n                        }\n                    }\n                }\n\n                else if( TIFFGetField(hTIFF, TIFFTAG_GEOTRANSMATRIX,\n                                      &nCount, &padfMatrix )\n                        && nCount == 16 )\n                {\n                    adfGeoTransform[0] = padfMatrix[3];\n                    adfGeoTransform[1] = padfMatrix[0];\n                    adfGeoTransform[2] = padfMatrix[1];\n                    adfGeoTransform[3] = padfMatrix[7];\n                    adfGeoTransform[4] = padfMatrix[4];\n                    adfGeoTransform[5] = padfMatrix[5];\n\n                    if( bPixelIsPoint && !bPointGeoIgnore )\n                    {\n                        adfGeoTransform[0] -=\n                            adfGeoTransform[1] * 0.5 + adfGeoTransform[2] * 0.5;\n                        adfGeoTransform[3] -=\n                            adfGeoTransform[4] * 0.5 + adfGeoTransform[5] * 0.5;\n                    }\n\n                    bGeoTransformValid = true;\n                    m_nGeoTransformGeorefSrcIndex = nIndex;\n                }\n                if( bGeoTransformValid )\n                    break;\n            }\n\n/* -------------------------------------------------------------------- */\n/*      Otherwise try looking for a .tab, .tfw, .tifw or .wld file.     */\n/* -------------------------------------------------------------------- */\n            if( m_nTABFILEGeorefSrcIndex == nIndex )\n            {\n                char* pszGeorefFilename = nullptr;\n\n                char** papszSiblingFiles = GetSiblingFiles();\n\n                // Begin with .tab since it can also have projection info.\n                const int bTabFileOK =\n                    GDALReadTabFile2( osFilename, adfGeoTransform,\n                                        &pszTabWKT, &nGCPCount, &pasGCPList,\n                                        papszSiblingFiles, &pszGeorefFilename );\n\n                if( bTabFileOK )\n                {\n                    m_nGeoTransformGeorefSrcIndex = nIndex;\n                    // if( pszTabWKT )\n                    // {\n                    //     m_nProjectionGeorefSrcIndex = nIndex;\n                    // }\n                    if( nGCPCount == 0 )\n                    {\n                        bGeoTransformValid = true;\n                    }\n                }\n\n                if( pszGeorefFilename )\n                {\n                    osGeorefFilename = pszGeorefFilename;\n                    CPLFree(pszGeorefFilename);\n                }\n                if( bGeoTransformValid )\n                    break;\n            }\n\n            if( m_nWORLDFILEGeorefSrcIndex == nIndex )\n            {\n                char* pszGeorefFilename = nullptr;\n\n                char** papszSiblingFiles = GetSiblingFiles();\n\n                bGeoTransformValid = CPL_TO_BOOL( GDALReadWorldFile2(\n                                osFilename, nullptr, adfGeoTransform,\n                                papszSiblingFiles, &pszGeorefFilename) );\n\n                if( !bGeoTransformValid )\n                {\n                    bGeoTransformValid =\n                        CPL_TO_BOOL( GDALReadWorldFile2(\n                            osFilename, \"wld\", adfGeoTransform,\n                            papszSiblingFiles, &pszGeorefFilename ) );\n                }\n                if( bGeoTransformValid )\n                    m_nGeoTransformGeorefSrcIndex = nIndex;\n\n                if( pszGeorefFilename )\n                {\n                    osGeorefFilename = pszGeorefFilename;\n                    CPLFree(pszGeorefFilename);\n                }\n                if( bGeoTransformValid )\n                    break;\n            }\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Check for GCPs.                                                 */\n/* -------------------------------------------------------------------- */\n        if( m_nINTERNALGeorefSrcIndex >= 0 &&\n            TIFFGetField(hTIFF,TIFFTAG_GEOTIEPOINTS,&nCount,&padfTiePoints )\n            && !bGeoTransformValid )\n        {\n            if( nGCPCount > 0 )\n            {\n                GDALDeinitGCPs( nGCPCount, pasGCPList );\n                CPLFree( pasGCPList );\n            }\n            nGCPCount = nCount / 6;\n            pasGCPList =\n                static_cast<GDAL_GCP *>(CPLCalloc(sizeof(GDAL_GCP), nGCPCount));\n\n            for( int iGCP = 0; iGCP < nGCPCount; ++iGCP )\n            {\n                char szID[32] = {};\n\n                snprintf( szID, sizeof(szID), \"%d\", iGCP + 1 );\n                pasGCPList[iGCP].pszId = CPLStrdup( szID );\n                pasGCPList[iGCP].pszInfo = CPLStrdup(\"\");\n                pasGCPList[iGCP].dfGCPPixel = padfTiePoints[iGCP*6+0];\n                pasGCPList[iGCP].dfGCPLine = padfTiePoints[iGCP*6+1];\n                pasGCPList[iGCP].dfGCPX = padfTiePoints[iGCP*6+3];\n                pasGCPList[iGCP].dfGCPY = padfTiePoints[iGCP*6+4];\n                pasGCPList[iGCP].dfGCPZ = padfTiePoints[iGCP*6+5];\n\n                if( bPixelIsPoint && !bPointGeoIgnore )\n                {\n                    pasGCPList[iGCP].dfGCPPixel -= 0.5;\n                    pasGCPList[iGCP].dfGCPLine -= 0.5;\n                }\n            }\n            m_nGeoTransformGeorefSrcIndex = m_nINTERNALGeorefSrcIndex;\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Did we find a tab file?  If so we will use its coordinate       */\n/*      system and give it precedence.                                  */\n/* -------------------------------------------------------------------- */\n        if( pszTabWKT != nullptr && oSRS.IsEmpty() )\n        {\n            oSRS.SetFromUserInput(pszTabWKT);\n            bLookedForProjection = true;\n        }\n\n        CPLFree( pszTabWKT );\n    }\n\n    if( m_bLoadPam && m_nPAMGeorefSrcIndex >= 0 )\n    {\n/* -------------------------------------------------------------------- */\n/*      Initialize any PAM information.                                 */\n/* -------------------------------------------------------------------- */\n        CPLAssert(!bColorProfileMetadataChanged);\n        CPLAssert(!bMetadataChanged);\n        CPLAssert(!bGeoTIFFInfoChanged);\n        CPLAssert(!bNoDataChanged);\n\n        // We must absolutely unset m_bLoadPam now, otherwise calling\n        // GetFileList() on a .tif with a .aux will result in an (almost)\n        // endless sequence of calls.\n        m_bLoadPam = false;\n\n        TryLoadXML( GetSiblingFiles() );\n        ApplyPamInfo();\n\n        bColorProfileMetadataChanged = false;\n        bMetadataChanged = false;\n        bGeoTIFFInfoChanged = false;\n        bNoDataChanged = false;\n\n        for( int i = 1; i <= nBands; ++i )\n        {\n            GTiffRasterBand* poBand =\n                cpl::down_cast<GTiffRasterBand *>(GetRasterBand(i));\n\n            /* Load scale, offset and unittype from PAM if available */\n            if( !poBand->bHaveOffsetScale )\n            {\n                int nHaveOffsetScale = FALSE;\n                poBand->dfScale =\n                    poBand->GDALPamRasterBand::GetScale( &nHaveOffsetScale );\n                poBand->bHaveOffsetScale = CPL_TO_BOOL(nHaveOffsetScale);\n                poBand->dfOffset = poBand->GDALPamRasterBand::GetOffset();\n            }\n            if( poBand->osUnitType.empty() )\n            {\n                const char* pszUnitType =\n                    poBand->GDALPamRasterBand::GetUnitType();\n                if( pszUnitType )\n                    poBand->osUnitType = pszUnitType;\n            }\n            if( poBand->osDescription.empty() )\n                poBand->osDescription =\n                    poBand->GDALPamRasterBand::GetDescription();\n\n            GDALColorInterp ePAMColorInterp =\n                poBand->GDALPamRasterBand::GetColorInterpretation();\n            if( ePAMColorInterp != GCI_Undefined )\n                poBand->eBandInterp = ePAMColorInterp;\n        }\n    }\n    m_bLoadPam = false;\n}\n\n/************************************************************************/\n/*                          ScanDirectories()                           */\n/*                                                                      */\n/*      Scan through all the directories finding overviews, masks       */\n/*      and subdatasets.                                                */\n/************************************************************************/\n\nvoid GTiffDataset::ScanDirectories()\n\n{\n/* -------------------------------------------------------------------- */\n/*      We only scan once.  We do not scan for non-base datasets.       */\n/* -------------------------------------------------------------------- */\n    if( !bScanDeferred )\n        return;\n\n    bScanDeferred = false;\n\n    if( !bBase )\n        return;\n\n    if( TIFFLastDirectory( hTIFF ) )\n        return;\n\n    CPLDebug( \"GTiff\", \"ScanDirectories()\" );\n\n/* ==================================================================== */\n/*      Scan all directories.                                           */\n/* ==================================================================== */\n    CPLStringList aosSubdatasets;\n    int iDirIndex = 0;\n\n    FlushDirectory();\n    while( !TIFFLastDirectory( hTIFF )\n           && (iDirIndex == 0 || TIFFReadDirectory( hTIFF ) != 0) )\n    {\n        // Only libtiff 4.0.4 can handle between 32768 and 65535 directories.\n#if !defined(SUPPORTS_MORE_THAN_32768_DIRECTORIES)\n        if( iDirIndex == 32768 )\n            break;\n#endif\n        toff_t nThisDir = TIFFCurrentDirOffset(hTIFF);\n        uint32 nSubType = 0;\n\n        *ppoActiveDSRef = nullptr; // Our directory no longer matches this ds.\n\n        ++iDirIndex;\n\n        if( !TIFFGetField(hTIFF, TIFFTAG_SUBFILETYPE, &nSubType) )\n            nSubType = 0;\n\n        /* Embedded overview of the main image */\n        if( (nSubType & FILETYPE_REDUCEDIMAGE) != 0 &&\n            (nSubType & FILETYPE_MASK) == 0 &&\n            iDirIndex != 1 &&\n            nOverviewCount < 30 /* to avoid DoS */ )\n        {\n            GTiffDataset *poODS = new GTiffDataset();\n            poODS->ShareLockWithParentDataset(this);\n            poODS->osFilename = osFilename;\n            if( poODS->OpenOffset( hTIFF, ppoActiveDSRef, nThisDir, false,\n                                   eAccess ) != CE_None\n                || poODS->GetRasterCount() != GetRasterCount() )\n            {\n                delete poODS;\n            }\n            else\n            {\n                CPLDebug( \"GTiff\", \"Opened %dx%d overview.\",\n                          poODS->GetRasterXSize(), poODS->GetRasterYSize());\n                ++nOverviewCount;\n                papoOverviewDS = static_cast<GTiffDataset **>(\n                    CPLRealloc(papoOverviewDS,\n                               nOverviewCount * (sizeof(void*))) );\n                papoOverviewDS[nOverviewCount-1] = poODS;\n                poODS->poBaseDS = this;\n                poODS->bIsOverview_ = true;\n            }\n        }\n        // Embedded mask of the main image.\n        else if( (nSubType & FILETYPE_MASK) != 0 &&\n                 (nSubType & FILETYPE_REDUCEDIMAGE) == 0 &&\n                 iDirIndex != 1 &&\n                 poMaskDS == nullptr )\n        {\n            poMaskDS = new GTiffDataset();\n            poMaskDS->ShareLockWithParentDataset(this);\n            poMaskDS->osFilename = osFilename;\n\n            // The TIFF6 specification - page 37 - only allows 1\n            // SamplesPerPixel and 1 BitsPerSample Here we support either 1 or\n            // 8 bit per sample and we support either 1 sample per pixel or as\n            // many samples as in the main image We don't check the value of\n            // the PhotometricInterpretation tag, which should be set to\n            // \"Transparency mask\" (4) according to the specification (page\n            // 36).  However, the TIFF6 specification allows image masks to\n            // have a higher resolution than the main image, what we don't\n            // support here.\n\n            if( poMaskDS->OpenOffset( hTIFF, ppoActiveDSRef, nThisDir,\n                                      false, eAccess ) != CE_None\n                || poMaskDS->GetRasterCount() == 0\n                || !(poMaskDS->GetRasterCount() == 1\n                     || poMaskDS->GetRasterCount() == GetRasterCount())\n                || poMaskDS->GetRasterXSize() != GetRasterXSize()\n                || poMaskDS->GetRasterYSize() != GetRasterYSize()\n                || poMaskDS->GetRasterBand(1)->GetRasterDataType() != GDT_Byte)\n            {\n                delete poMaskDS;\n                poMaskDS = nullptr;\n            }\n            else\n            {\n                CPLDebug( \"GTiff\", \"Opened band mask.\");\n                poMaskDS->poBaseDS = this;\n\n                poMaskDS->bPromoteTo8Bits =\n                    CPLTestBool(\n                        CPLGetConfigOption( \"GDAL_TIFF_INTERNAL_MASK_TO_8BIT\",\n                                            \"YES\" ) );\n            }\n        }\n\n        // Embedded mask of an overview.  The TIFF6 specification allows the\n        // combination of the FILETYPE_xxxx masks.\n        else if( (nSubType & FILETYPE_REDUCEDIMAGE) != 0 &&\n                 (nSubType & FILETYPE_MASK) != 0 &&\n                 iDirIndex != 1 )\n        {\n            GTiffDataset* poDS = new GTiffDataset();\n            poDS->ShareLockWithParentDataset(this);\n            poDS->osFilename = osFilename;\n            if( poDS->OpenOffset( hTIFF, ppoActiveDSRef, nThisDir, FALSE,\n                                  eAccess ) != CE_None\n                || poDS->GetRasterCount() == 0\n                || poDS->GetRasterBand(1)->GetRasterDataType() != GDT_Byte)\n            {\n                delete poDS;\n            }\n            else\n            {\n                int i = 0;  // Used after for.\n                for( ; i < nOverviewCount; ++i )\n                {\n                    if( cpl::down_cast<GTiffDataset *>(GDALDataset::FromHandle(\n                           papoOverviewDS[i]))->poMaskDS == nullptr &&\n                        poDS->GetRasterXSize() ==\n                        papoOverviewDS[i]->GetRasterXSize() &&\n                        poDS->GetRasterYSize() ==\n                        papoOverviewDS[i]->GetRasterYSize() &&\n                        (poDS->GetRasterCount() == 1 ||\n                         poDS->GetRasterCount() == GetRasterCount()))\n                    {\n                        CPLDebug(\n                            \"GTiff\", \"Opened band mask for %dx%d overview.\",\n                            poDS->GetRasterXSize(), poDS->GetRasterYSize());\n                        cpl::down_cast<GTiffDataset*>(GDALDataset::FromHandle(\n                            papoOverviewDS[i]))->\n                            poMaskDS = poDS;\n                        poDS->bPromoteTo8Bits =\n                            CPLTestBool(\n                                CPLGetConfigOption(\n                                    \"GDAL_TIFF_INTERNAL_MASK_TO_8BIT\",\n                                    \"YES\" ) );\n                        poDS->poBaseDS = this;\n                        break;\n                    }\n                }\n                if( i == nOverviewCount )\n                {\n                    delete poDS;\n                }\n            }\n        }\n        else if( nSubType == 0 || nSubType == FILETYPE_PAGE )\n        {\n            uint32 nXSize = 0;\n            uint32 nYSize = 0;\n\n            TIFFGetField( hTIFF, TIFFTAG_IMAGEWIDTH, &nXSize );\n            TIFFGetField( hTIFF, TIFFTAG_IMAGELENGTH, &nYSize );\n\n            if( nXSize > INT_MAX || nYSize > INT_MAX )\n            {\n                CPLDebug(\"GTiff\",\n                         \"Skipping directory with too large image: %u x %u\",\n                         nXSize, nYSize);\n            }\n            else\n            {\n                uint16 nSPP = 0;\n                if( !TIFFGetField(hTIFF, TIFFTAG_SAMPLESPERPIXEL, &nSPP ) )\n                    nSPP = 1;\n\n                CPLString osName, osDesc;\n                osName.Printf( \"SUBDATASET_%d_NAME=GTIFF_DIR:%d:%s\",\n                            iDirIndex, iDirIndex, osFilename.c_str() );\n                osDesc.Printf( \"SUBDATASET_%d_DESC=Page %d (%dP x %dL x %dB)\",\n                            iDirIndex, iDirIndex,\n                            static_cast<int>(nXSize),\n                            static_cast<int>(nYSize),\n                            nSPP );\n\n                aosSubdatasets.AddString(osName);\n                aosSubdatasets.AddString(osDesc);\n            }\n        }\n\n        // Make sure we are stepping from the expected directory regardless\n        // of churn done processing the above.\n        if( TIFFCurrentDirOffset(hTIFF) != nThisDir )\n            TIFFSetSubDirectory( hTIFF, nThisDir );\n        *ppoActiveDSRef = nullptr;\n    }\n\n    // Nasty hack. Probably something that should be fixed in libtiff\n    // In case the last directory cycles to the first directory, we have\n    // TIFFCurrentDirOffset(hTIFF) == nDirOffset, but the TIFFReadDirectory()\n    // hasn't done its job, so SetDirectory() would be confused and think it\n    // has nothing to do. To avoid that reset to a fake offset before calling\n    // SetDirectory()\n    // This can also occur if the last directory cycles to the IFD of the\n    // mask dataset and we activate this mask dataset.\n    // So always completely reset\n    TIFFSetSubDirectory( hTIFF, 0 );\n    *ppoActiveDSRef = nullptr;\n    CPL_IGNORE_RET_VAL( SetDirectory() );\n\n    // If we have a mask for the main image, loop over the overviews, and if\n    // they have a mask, let's set this mask as an overview of the main mask.\n    if( poMaskDS != nullptr )\n    {\n        for( int i = 0; i < nOverviewCount; ++i )\n        {\n            if( cpl::down_cast<GTiffDataset *>(GDALDataset::FromHandle(\n                   papoOverviewDS[i]))->poMaskDS != nullptr)\n            {\n                ++poMaskDS->nOverviewCount;\n                poMaskDS->papoOverviewDS = static_cast<GTiffDataset **>(\n                    CPLRealloc(poMaskDS->papoOverviewDS,\n                               poMaskDS->nOverviewCount * (sizeof(void*))) );\n                poMaskDS->papoOverviewDS[poMaskDS->nOverviewCount-1] =\n                    cpl::down_cast<GTiffDataset*>(GDALDataset::FromHandle(\n                        papoOverviewDS[i]))->poMaskDS;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Only keep track of subdatasets if we have more than one         */\n/*      subdataset (pair).                                              */\n/* -------------------------------------------------------------------- */\n    if( aosSubdatasets.size() > 2 )\n    {\n        oGTiffMDMD.SetMetadata( aosSubdatasets.List(), \"SUBDATASETS\" );\n    }\n}\n\nstatic int GTiffGetLZMAPreset(char** papszOptions)\n{\n    int nLZMAPreset = -1;\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"LZMA_PRESET\" );\n    if( pszValue != nullptr )\n    {\n        nLZMAPreset = atoi( pszValue );\n        if( !(nLZMAPreset >= 0 && nLZMAPreset <= 9) )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"LZMA_PRESET=%s value not recognised, ignoring.\",\n                      pszValue );\n            nLZMAPreset = -1;\n        }\n    }\n    return nLZMAPreset;\n}\n\nstatic int GTiffGetZSTDPreset(char** papszOptions)\n{\n    int nZSTDLevel = -1;\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"ZSTD_LEVEL\" );\n    if( pszValue != nullptr )\n    {\n        nZSTDLevel = atoi( pszValue );\n        if( !(nZSTDLevel >= 1 && nZSTDLevel <= 22) )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"ZSTD_LEVEL=%s value not recognised, ignoring.\",\n                      pszValue );\n            nZSTDLevel = -1;\n        }\n    }\n    return nZSTDLevel;\n}\n\n#if HAVE_LERC\nstatic double GTiffGetLERCMaxZError(char** papszOptions)\n{\n    return CPLAtof(CSLFetchNameValueDef( papszOptions, \"MAX_Z_ERROR\", \"0.0\") );\n}\n#endif\n\nstatic int GTiffGetWebPLevel(char** papszOptions)\n{\n    int nWebPLevel = -1;\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"WEBP_LEVEL\" );\n    if( pszValue != nullptr )\n    {\n        nWebPLevel = atoi( pszValue );\n        if( !(nWebPLevel >= 1 && nWebPLevel <= 100) )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"WEBP_LEVEL=%s value not recognised, ignoring.\",\n                      pszValue );\n            nWebPLevel = -1;\n        }\n    }\n    return nWebPLevel;\n}\n\nstatic bool GTiffGetWebPLossless(char** papszOptions)\n{\n    return CPLFetchBool( papszOptions, \"WEBP_LOSSLESS\", false);\n}\n\nstatic int GTiffGetZLevel(char** papszOptions)\n{\n    int nZLevel = -1;\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"ZLEVEL\" );\n    if( pszValue != nullptr )\n    {\n        nZLevel = atoi( pszValue );\n        if( nZLevel < 1 || nZLevel > 9 )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"ZLEVEL=%s value not recognised, ignoring.\",\n                      pszValue );\n            nZLevel = -1;\n        }\n    }\n    return nZLevel;\n}\n\nstatic int GTiffGetJpegQuality(char** papszOptions)\n{\n    int nJpegQuality = -1;\n    const char* pszValue = CSLFetchNameValue( papszOptions, \"JPEG_QUALITY\" );\n    if( pszValue != nullptr )\n    {\n        nJpegQuality = atoi( pszValue );\n        if( nJpegQuality < 1 || nJpegQuality > 100 )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"JPEG_QUALITY=%s value not recognised, ignoring.\",\n                      pszValue );\n            nJpegQuality = -1;\n        }\n    }\n    return nJpegQuality;\n}\n\nstatic int GTiffGetJpegTablesMode(char** papszOptions)\n{\n    return atoi(CSLFetchNameValueDef( papszOptions, \"JPEGTABLESMODE\",\n                                      CPLSPrintf(\"%d\",\n                                                knGTIFFJpegTablesModeDefault)));\n}\n\n/************************************************************************/\n/*                        GetDiscardLsbOption()                         */\n/************************************************************************/\n\nvoid GTiffDataset::GetDiscardLsbOption(char** papszOptions)\n{\n    const char* pszBits = CSLFetchNameValue( papszOptions, \"DISCARD_LSB\" );\n    if( pszBits == nullptr)\n        return;\n\n    if( nPhotometric == PHOTOMETRIC_PALETTE )\n    {\n        CPLError(CE_Warning, CPLE_AppDefined,\n                 \"DISCARD_LSB ignored on a paletted image\");\n        return;\n    }\n    if( !(nBitsPerSample == 8 || nBitsPerSample == 16 || nBitsPerSample == 32) )\n    {\n        CPLError(CE_Warning, CPLE_AppDefined,\n                 \"DISCARD_LSB ignored on non 8, 16 or 32 bits integer images\");\n        return;\n    }\n\n    char** papszTokens = CSLTokenizeString2( pszBits, \",\", 0 );\n    if( CSLCount(papszTokens) == 1 )\n    {\n        bHasDiscardedLsb = true;\n        for( int i = 0; i < nBands; ++i )\n        {\n            int nBits = atoi(papszTokens[0]);\n            anMaskLsb.push_back(~((1 << nBits)-1));\n            if( nBits > 1 )\n                anOffsetLsb.push_back(1 << (nBits - 1));\n            else\n                anOffsetLsb.push_back(0);\n        }\n    }\n    else if( CSLCount(papszTokens) == nBands )\n    {\n        bHasDiscardedLsb = true;\n        for( int i = 0; i < nBands; ++i )\n        {\n            int nBits = atoi(papszTokens[i]);\n            anMaskLsb.push_back(~((1 << nBits)-1));\n            if( nBits > 1 )\n                anOffsetLsb.push_back(1 << (nBits - 1));\n            else\n                anOffsetLsb.push_back(0);\n        }\n    }\n    else\n    {\n        CPLError(CE_Warning, CPLE_AppDefined,\n                 \"DISCARD_LSB ignored: wrong number of components\");\n    }\n    CSLDestroy(papszTokens);\n}\n\n/************************************************************************/\n/*                            GTiffCreate()                             */\n/*                                                                      */\n/*      Shared functionality between GTiffDataset::Create() and         */\n/*      GTiffCreateCopy() for creating TIFF file based on a set of      */\n/*      options and a configuration.                                    */\n/************************************************************************/\n\nTIFF *GTiffDataset::CreateLL( const char * pszFilename,\n                              int nXSize, int nYSize, int l_nBands,\n                              GDALDataType eType,\n                              double dfExtraSpaceForOverviews,\n                              char **papszParmList,\n                              VSILFILE** pfpL,\n                              CPLString& l_osTmpFilename )\n\n{\n    if( !GTiffOneTimeInit() )\n        return nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Blow on a few errors.                                           */\n/* -------------------------------------------------------------------- */\n    if( nXSize < 1 || nYSize < 1 || l_nBands < 1 )\n    {\n        CPLError(\n            CE_Failure, CPLE_AppDefined,\n            \"Attempt to create %dx%dx%d TIFF file, but width, height and bands\"\n            \"must be positive.\",\n            nXSize, nYSize, l_nBands );\n\n        return nullptr;\n    }\n\n    if( l_nBands > 65535 )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Attempt to create %dx%dx%d TIFF file, but bands \"\n                  \"must be lesser or equal to 65535.\",\n                  nXSize, nYSize, l_nBands );\n\n        return nullptr;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Setup values based on options.                                  */\n/* -------------------------------------------------------------------- */\n    const char *pszProfile = CSLFetchNameValue(papszParmList, \"PROFILE\");\n    if( pszProfile == nullptr )\n        pszProfile = szPROFILE_GDALGeoTIFF;\n\n    const bool bTiled = CPLFetchBool( papszParmList, \"TILED\", false );\n\n    int l_nBlockXSize = 0;\n    const char *pszValue = CSLFetchNameValue(papszParmList, \"BLOCKXSIZE\");\n    if( pszValue != nullptr )\n        l_nBlockXSize = atoi( pszValue );\n\n    int l_nBlockYSize = 0;\n    pszValue = CSLFetchNameValue(papszParmList, \"BLOCKYSIZE\");\n    if( pszValue != nullptr )\n        l_nBlockYSize = atoi( pszValue );\n\n    int nPlanar = 0;\n    pszValue = CSLFetchNameValue(papszParmList, \"INTERLEAVE\");\n    if( pszValue != nullptr )\n    {\n        if( EQUAL( pszValue, \"PIXEL\" ) )\n            nPlanar = PLANARCONFIG_CONTIG;\n        else if( EQUAL( pszValue, \"BAND\" ) )\n        {\n            nPlanar = PLANARCONFIG_SEPARATE;\n        }\n        else\n        {\n            CPLError( CE_Failure, CPLE_AppDefined,\n                      \"INTERLEAVE=%s unsupported, value must be PIXEL or BAND.\",\n                      pszValue );\n            return nullptr;\n        }\n    }\n    else\n    {\n        nPlanar = PLANARCONFIG_CONTIG;\n    }\n\n    int l_nCompression = COMPRESSION_NONE;\n    pszValue = CSLFetchNameValue( papszParmList, \"COMPRESS\" );\n    if( pszValue != nullptr )\n    {\n        l_nCompression = GTIFFGetCompressionMethod(pszValue, \"COMPRESS\");\n        if( l_nCompression < 0 )\n            return nullptr;\n    }\n\n    int nPredictor = PREDICTOR_NONE;\n    pszValue = CSLFetchNameValue( papszParmList, \"PREDICTOR\" );\n    if( pszValue != nullptr )\n        nPredictor = atoi( pszValue );\n\n    const int l_nZLevel = GTiffGetZLevel(papszParmList);\n    const int l_nLZMAPreset = GTiffGetLZMAPreset(papszParmList);\n    const int l_nZSTDLevel = GTiffGetZSTDPreset(papszParmList);\n    const int l_nWebPLevel = GTiffGetWebPLevel(papszParmList);\n    const bool l_bWebPLossless = GTiffGetWebPLossless(papszParmList);\n    const int l_nJpegQuality = GTiffGetJpegQuality(papszParmList);\n    const int l_nJpegTablesMode = GTiffGetJpegTablesMode(papszParmList);\n#if HAVE_LERC\n    const double l_dfMaxZError = GTiffGetLERCMaxZError(papszParmList);\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Streaming related code                                          */\n/* -------------------------------------------------------------------- */\n    const CPLString osOriFilename(pszFilename);\n    bool bStreaming =\n        strcmp(pszFilename, \"/vsistdout/\") == 0 ||\n        CPLFetchBool(papszParmList, \"STREAMABLE_OUTPUT\", false);\n#ifdef S_ISFIFO\n    if( !bStreaming )\n    {\n        VSIStatBufL sStat;\n        if( VSIStatExL( pszFilename, &sStat,\n                        VSI_STAT_EXISTS_FLAG | VSI_STAT_NATURE_FLAG) == 0 &&\n             S_ISFIFO(sStat.st_mode) )\n        {\n            bStreaming = true;\n        }\n    }\n#endif\n    if( bStreaming &&\n        !EQUAL( \"NONE\",\n                CSLFetchNameValueDef(papszParmList, \"COMPRESS\", \"NONE\")) )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Streaming only supported to uncompressed TIFF\" );\n        return nullptr;\n    }\n    if( bStreaming && CPLFetchBool(papszParmList, \"SPARSE_OK\", false) )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Streaming not supported with SPARSE_OK\" );\n        return nullptr;\n    }\n    if( bStreaming && CPLFetchBool(papszParmList, \"COPY_SRC_OVERVIEWS\", false) )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Streaming not supported with COPY_SRC_OVERVIEWS\" );\n        return nullptr;\n    }\n    if( bStreaming )\n    {\n        static int nCounter = 0;\n        l_osTmpFilename = CPLSPrintf(\"/vsimem/vsistdout_%d.tif\", ++nCounter);\n        pszFilename = l_osTmpFilename.c_str();\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Compute the uncompressed size.                                  */\n/* -------------------------------------------------------------------- */\n    const double dfUncompressedImageSize =\n        nXSize * static_cast<double>(nYSize) * l_nBands *\n        GDALGetDataTypeSizeBytes(eType)\n        + dfExtraSpaceForOverviews;\n\n    if( l_nCompression == COMPRESSION_NONE\n        && dfUncompressedImageSize > 4200000000.0 )\n    {\n#ifndef BIGTIFF_SUPPORT\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"A %d pixels x %d lines x %d bands %s image would be larger than \"\n            \"4GB but this is the largest size a TIFF can be, and BigTIFF \"\n            \"is unavailable.  Creation failed.\",\n            nXSize, nYSize, l_nBands, GDALGetDataTypeName(eType) );\n        return nullptr;\n#endif\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Check free space (only for big, non sparse, uncompressed)       */\n/* -------------------------------------------------------------------- */\n    if( l_nCompression == COMPRESSION_NONE &&\n        dfUncompressedImageSize >= 1e9 &&\n        !CPLFetchBool(papszParmList, \"SPARSE_OK\", false) &&\n        osOriFilename != \"/vsistdout/\" &&\n        osOriFilename != \"/vsistdout_redirect/\" &&\n        CPLTestBool(CPLGetConfigOption(\"CHECK_DISK_FREE_SPACE\", \"TRUE\")) )\n    {\n        GIntBig nFreeDiskSpace =\n            VSIGetDiskFreeSpace(CPLGetDirname(pszFilename));\n        if( nFreeDiskSpace >= 0 &&\n            nFreeDiskSpace < dfUncompressedImageSize )\n        {\n            CPLError( CE_Failure, CPLE_FileIO,\n                      \"Free disk space available is \" CPL_FRMT_GIB \" bytes, \"\n                      \"whereas \" CPL_FRMT_GIB \" are at least necessary. \"\n                      \"You can disable this check by defining the \"\n                      \"CHECK_DISK_FREE_SPACE configuration option to FALSE.\",\n                      nFreeDiskSpace,\n                      static_cast<GIntBig>(dfUncompressedImageSize) );\n            return nullptr;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should the file be created as a bigtiff file?                   */\n/* -------------------------------------------------------------------- */\n    const char *pszBIGTIFF = CSLFetchNameValue(papszParmList, \"BIGTIFF\");\n\n    if( pszBIGTIFF == nullptr )\n        pszBIGTIFF = \"IF_NEEDED\";\n\n    bool bCreateBigTIFF = false;\n    if( EQUAL(pszBIGTIFF, \"IF_NEEDED\") )\n    {\n        if( l_nCompression == COMPRESSION_NONE\n            && dfUncompressedImageSize > 4200000000.0 )\n            bCreateBigTIFF = true;\n    }\n    else if( EQUAL(pszBIGTIFF, \"IF_SAFER\") )\n    {\n        if( dfUncompressedImageSize > 2000000000.0 )\n            bCreateBigTIFF = true;\n    }\n    else\n    {\n        bCreateBigTIFF = CPLTestBool( pszBIGTIFF );\n        if( !bCreateBigTIFF && l_nCompression == COMPRESSION_NONE &&\n             dfUncompressedImageSize > 4200000000.0 )\n        {\n            CPLError(\n                CE_Failure, CPLE_NotSupported,\n                \"The TIFF file will be larger than 4GB, so BigTIFF is \"\n                \"necessary.  Creation failed.\");\n            return nullptr;\n        }\n    }\n\n#ifndef BIGTIFF_SUPPORT\n    if( bCreateBigTIFF )\n    {\n        CPLError( CE_Warning, CPLE_NotSupported,\n                  \"BigTIFF requested, but GDAL built without BigTIFF \"\n                  \"enabled libtiff, request ignored.\" );\n        bCreateBigTIFF = false;\n    }\n#endif\n\n    if( bCreateBigTIFF )\n        CPLDebug( \"GTiff\", \"File being created as a BigTIFF.\" );\n\n/* -------------------------------------------------------------------- */\n/*      Check if the user wishes a particular endianness                */\n/* -------------------------------------------------------------------- */\n\n    int eEndianness = ENDIANNESS_NATIVE;\n    pszValue = CSLFetchNameValue(papszParmList, \"ENDIANNESS\");\n    if( pszValue == nullptr )\n        pszValue = CPLGetConfigOption( \"GDAL_TIFF_ENDIANNESS\", nullptr );\n    if( pszValue != nullptr )\n    {\n        if( EQUAL(pszValue, \"LITTLE\") )\n        {\n            eEndianness = ENDIANNESS_LITTLE;\n        }\n        else if( EQUAL(pszValue, \"BIG\") )\n        {\n            eEndianness = ENDIANNESS_BIG;\n        }\n        else if( EQUAL(pszValue, \"INVERTED\") )\n        {\n#ifdef CPL_LSB\n            eEndianness = ENDIANNESS_BIG;\n#else\n            eEndianness = ENDIANNESS_LITTLE;\n#endif\n        }\n        else if( !EQUAL(pszValue, \"NATIVE\") )\n        {\n            CPLError(\n                CE_Warning, CPLE_NotSupported,\n                \"ENDIANNESS=%s not supported. Defaulting to NATIVE\", pszValue );\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Try opening the dataset.                                        */\n/* -------------------------------------------------------------------- */\n\n    const bool bAppend = CPLFetchBool(papszParmList, \"APPEND_SUBDATASET\", false);\n\n    char szOpeningFlag[5] = {};\n    strcpy(szOpeningFlag, bAppend ? \"r+\" : \"w+\");\n    if( bCreateBigTIFF )\n        strcat(szOpeningFlag, \"8\");\n    if( eEndianness == ENDIANNESS_BIG )\n        strcat(szOpeningFlag, \"b\");\n    else if( eEndianness == ENDIANNESS_LITTLE )\n        strcat(szOpeningFlag, \"l\");\n\n    VSILFILE* l_fpL = VSIFOpenL( pszFilename, bAppend ? \"r+b\" : \"w+b\" );\n    if( l_fpL == nullptr )\n    {\n        CPLError( CE_Failure, CPLE_OpenFailed,\n                  \"Attempt to create new tiff file `%s' failed: %s\",\n                  pszFilename, VSIStrerror(errno) );\n        return nullptr;\n    }\n    TIFF *l_hTIFF = VSI_TIFFOpen( pszFilename, szOpeningFlag, l_fpL );\n    if( l_hTIFF == nullptr )\n    {\n        if( CPLGetLastErrorNo() == 0 )\n            CPLError( CE_Failure, CPLE_OpenFailed,\n                      \"Attempt to create new tiff file `%s' \"\n                      \"failed in XTIFFOpen().\",\n                      pszFilename );\n        CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n        return nullptr;\n    }\n\n    if( bAppend )\n    {\n        // This is a bit of a hack to cause (*tif->tif_cleanup)(tif); to be called.\n        // See https://trac.osgeo.org/gdal/ticket/2055\n        TIFFSetField( l_hTIFF, TIFFTAG_COMPRESSION, COMPRESSION_NONE );\n#if defined(TIFFLIB_VERSION) && TIFFLIB_VERSION >= 20051201  // 3.8.0\n        TIFFFreeDirectory( l_hTIFF );\n#endif\n        TIFFCreateDirectory( l_hTIFF );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      How many bits per sample?  We have a special case if NBITS      */\n/*      specified for GDT_Byte, GDT_UInt16, GDT_UInt32.                 */\n/* -------------------------------------------------------------------- */\n    int l_nBitsPerSample = GDALGetDataTypeSizeBits(eType);\n    if( CSLFetchNameValue(papszParmList, \"NBITS\") != nullptr )\n    {\n        int nMinBits = 0;\n        int nMaxBits = 0;\n        l_nBitsPerSample = atoi(CSLFetchNameValue(papszParmList, \"NBITS\"));\n        if( eType == GDT_Byte )\n        {\n            nMinBits = 1;\n            nMaxBits = 8;\n        }\n        else if( eType == GDT_UInt16 )\n        {\n            nMinBits = 9;\n            nMaxBits = 16;\n        }\n        else if( eType == GDT_UInt32 )\n        {\n            nMinBits = 17;\n            nMaxBits = 32;\n        }\n        else if( eType == GDT_Float32 )\n        {\n            if( l_nBitsPerSample != 16 && l_nBitsPerSample != 32 )\n            {\n                CPLError(CE_Warning, CPLE_NotSupported,\n                     \"NBITS is not supported for data type %s\",\n                     GDALGetDataTypeName(eType));\n                l_nBitsPerSample = GDALGetDataTypeSizeBits(eType);\n            }\n        }\n        else\n        {\n            CPLError(CE_Warning, CPLE_NotSupported,\n                     \"NBITS is not supported for data type %s\",\n                     GDALGetDataTypeName(eType));\n            l_nBitsPerSample = GDALGetDataTypeSizeBits(eType);\n        }\n\n        if( nMinBits != 0 )\n        {\n            if( l_nBitsPerSample < nMinBits )\n            {\n                CPLError(CE_Warning, CPLE_AppDefined,\n                         \"NBITS=%d is invalid for data type %s. Using NBITS=%d\",\n                         l_nBitsPerSample, GDALGetDataTypeName(eType),\n                         nMinBits);\n                l_nBitsPerSample = nMinBits;\n            }\n            else if( l_nBitsPerSample > nMaxBits )\n            {\n                CPLError(CE_Warning, CPLE_AppDefined,\n                         \"NBITS=%d is invalid for data type %s. Using NBITS=%d\",\n                         l_nBitsPerSample, GDALGetDataTypeName(eType),\n                         nMaxBits);\n                l_nBitsPerSample = nMaxBits;\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Do we have a custom pixel type (just used for signed byte now). */\n/* -------------------------------------------------------------------- */\n    const char *pszPixelType = CSLFetchNameValue( papszParmList, \"PIXELTYPE\" );\n    if( pszPixelType == nullptr )\n        pszPixelType = \"\";\n\n/* -------------------------------------------------------------------- */\n/*      Setup some standard flags.                                      */\n/* -------------------------------------------------------------------- */\n    TIFFSetField( l_hTIFF, TIFFTAG_IMAGEWIDTH, nXSize );\n    TIFFSetField( l_hTIFF, TIFFTAG_IMAGELENGTH, nYSize );\n    TIFFSetField( l_hTIFF, TIFFTAG_BITSPERSAMPLE, l_nBitsPerSample );\n\n    uint16 l_nSampleFormat = 0;\n    if( (eType == GDT_Byte && EQUAL(pszPixelType,\"SIGNEDBYTE\"))\n        || eType == GDT_Int16 || eType == GDT_Int32 )\n        l_nSampleFormat = SAMPLEFORMAT_INT;\n    else if( eType == GDT_CInt16 || eType == GDT_CInt32 )\n        l_nSampleFormat = SAMPLEFORMAT_COMPLEXINT;\n    else if( eType == GDT_Float32 || eType == GDT_Float64 )\n        l_nSampleFormat = SAMPLEFORMAT_IEEEFP;\n    else if( eType == GDT_CFloat32 || eType == GDT_CFloat64 )\n        l_nSampleFormat = SAMPLEFORMAT_COMPLEXIEEEFP;\n    else\n        l_nSampleFormat = SAMPLEFORMAT_UINT;\n\n    TIFFSetField( l_hTIFF, TIFFTAG_SAMPLEFORMAT, l_nSampleFormat );\n    TIFFSetField( l_hTIFF, TIFFTAG_SAMPLESPERPIXEL, l_nBands );\n    TIFFSetField( l_hTIFF, TIFFTAG_PLANARCONFIG, nPlanar );\n\n/* -------------------------------------------------------------------- */\n/*      Setup Photometric Interpretation. Take this value from the user */\n/*      passed option or guess correct value otherwise.                 */\n/* -------------------------------------------------------------------- */\n    int nSamplesAccountedFor = 1;\n    bool bForceColorTable = false;\n\n    pszValue = CSLFetchNameValue(papszParmList,\"PHOTOMETRIC\");\n    if( pszValue != nullptr )\n    {\n        if( EQUAL( pszValue, \"MINISBLACK\" ) )\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC,\n                          PHOTOMETRIC_MINISBLACK );\n        else if( EQUAL( pszValue, \"MINISWHITE\" ) )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC,\n                          PHOTOMETRIC_MINISWHITE );\n        }\n        else if( EQUAL( pszValue, \"PALETTE\" ))\n        {\n            if( eType == GDT_Byte || eType == GDT_UInt16 )\n            {\n                TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC,\n                              PHOTOMETRIC_PALETTE );\n                nSamplesAccountedFor = 1;\n                bForceColorTable = true;\n            }\n            else\n            {\n                CPLError(\n                    CE_Warning, CPLE_AppDefined,\n                    \"PHOTOMETRIC=PALETTE only compatible with Byte or UInt16\" );\n            }\n        }\n        else if( EQUAL( pszValue, \"RGB\" ))\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB );\n            nSamplesAccountedFor = 3;\n        }\n        else if( EQUAL( pszValue, \"CMYK\" ))\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_SEPARATED );\n            nSamplesAccountedFor = 4;\n        }\n        else if( EQUAL( pszValue, \"YCBCR\" ))\n        {\n            // Because of subsampling, setting YCBCR without JPEG compression\n            // leads to a crash currently. Would need to make\n            // GTiffRasterBand::IWriteBlock() aware of subsampling so that it\n            // doesn't overrun buffer size returned by libtiff.\n            if( l_nCompression != COMPRESSION_JPEG )\n            {\n                CPLError(CE_Failure, CPLE_NotSupported,\n                         \"Currently, PHOTOMETRIC=YCBCR requires COMPRESS=JPEG\");\n                XTIFFClose(l_hTIFF);\n                CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n                return nullptr;\n            }\n\n            if( nPlanar == PLANARCONFIG_SEPARATE )\n            {\n                CPLError(CE_Failure, CPLE_NotSupported,\n                         \"PHOTOMETRIC=YCBCR requires INTERLEAVE=PIXEL\");\n                XTIFFClose(l_hTIFF);\n                CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n                return nullptr;\n            }\n\n            // YCBCR strictly requires 3 bands. Not less, not more Issue an\n            // explicit error message as libtiff one is a bit cryptic:\n            // TIFFVStripSize64:Invalid td_samplesperpixel value.\n            if( l_nBands != 3 )\n            {\n                CPLError(\n                    CE_Failure, CPLE_NotSupported,\n                    \"PHOTOMETRIC=YCBCR not supported on a %d-band raster: \"\n                    \"only compatible of a 3-band (RGB) raster\", l_nBands );\n                XTIFFClose(l_hTIFF);\n                CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n                return nullptr;\n            }\n\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_YCBCR );\n            nSamplesAccountedFor = 3;\n\n            // Explicitly register the subsampling so that JPEGFixupTags\n            // is a no-op (helps for cloud optimized geotiffs)\n            TIFFSetField( l_hTIFF, TIFFTAG_YCBCRSUBSAMPLING, 2, 2 );\n        }\n        else if( EQUAL( pszValue, \"CIELAB\" ))\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_CIELAB );\n            nSamplesAccountedFor = 3;\n        }\n        else if( EQUAL( pszValue, \"ICCLAB\" ))\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_ICCLAB );\n            nSamplesAccountedFor = 3;\n        }\n        else if( EQUAL( pszValue, \"ITULAB\" ))\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_ITULAB );\n            nSamplesAccountedFor = 3;\n        }\n        else\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"PHOTOMETRIC=%s value not recognised, ignoring.  \"\n                      \"Set the Photometric Interpretation as MINISBLACK.\",\n                      pszValue );\n            TIFFSetField(l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n        }\n\n        if( l_nBands < nSamplesAccountedFor )\n        {\n            CPLError( CE_Warning, CPLE_IllegalArg,\n                      \"PHOTOMETRIC=%s value does not correspond to number \"\n                      \"of bands (%d), ignoring.  \"\n                      \"Set the Photometric Interpretation as MINISBLACK.\",\n                      pszValue, l_nBands );\n            TIFFSetField(l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n        }\n    }\n    else\n    {\n        // If image contains 3 or 4 bands and datatype is Byte then we will\n        // assume it is RGB. In all other cases assume it is MINISBLACK.\n        if( l_nBands == 3 && eType == GDT_Byte )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB );\n            nSamplesAccountedFor = 3;\n        }\n        else if( l_nBands == 4 && eType == GDT_Byte )\n        {\n            uint16 v[1] = {\n                GTiffGetAlphaValue(CSLFetchNameValue(papszParmList, \"ALPHA\"),\n                                   DEFAULT_ALPHA_TYPE)\n            };\n\n            TIFFSetField( l_hTIFF, TIFFTAG_EXTRASAMPLES, 1, v);\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB );\n            nSamplesAccountedFor = 4;\n        }\n        else\n        {\n            TIFFSetField(l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n            nSamplesAccountedFor = 1;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If there are extra samples, we need to mark them with an        */\n/*      appropriate extrasamples definition here.                       */\n/* -------------------------------------------------------------------- */\n    if( l_nBands > nSamplesAccountedFor )\n    {\n        const int nExtraSamples = l_nBands - nSamplesAccountedFor;\n\n        uint16 *v = static_cast<uint16 *>(\n            CPLMalloc( sizeof(uint16) * nExtraSamples ) );\n\n        v[0] = GTiffGetAlphaValue( CSLFetchNameValue(papszParmList, \"ALPHA\"),\n                                   EXTRASAMPLE_UNSPECIFIED );\n\n        for( int i = 1; i < nExtraSamples; ++i )\n            v[i] = EXTRASAMPLE_UNSPECIFIED;\n\n        TIFFSetField(l_hTIFF, TIFFTAG_EXTRASAMPLES, nExtraSamples, v );\n\n        CPLFree(v);\n    }\n\n    // Set the ICC color profile.\n    if( !EQUAL(pszProfile,szPROFILE_BASELINE) )\n    {\n        SaveICCProfile(nullptr, l_hTIFF, papszParmList, l_nBitsPerSample);\n    }\n\n    // Set the compression method before asking the default strip size\n    // This is useful when translating to a JPEG-In-TIFF file where\n    // the default strip size is 8 or 16 depending on the photometric value.\n    TIFFSetField( l_hTIFF, TIFFTAG_COMPRESSION, l_nCompression );\n\n#if HAVE_LERC\n    if( l_nCompression == COMPRESSION_LERC )\n    {\n        const char* pszCompress =\n            CSLFetchNameValueDef( papszParmList, \"COMPRESS\", \"\" );\n        if( EQUAL(pszCompress , \"LERC_DEFLATE\" ) )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_LERC_ADD_COMPRESSION,\n                        LERC_ADD_COMPRESSION_DEFLATE );\n        }\n        else if( EQUAL(pszCompress, \"LERC_ZSTD\" ) )\n        {\n            if( TIFFSetField( l_hTIFF, TIFFTAG_LERC_ADD_COMPRESSION,\n                            LERC_ADD_COMPRESSION_ZSTD ) != 1 )\n            {\n                XTIFFClose(l_hTIFF);\n                CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n                return nullptr;\n            }\n        }\n    }\n    // TODO later: take into account LERC version\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Setup tiling/stripping flags.                                   */\n/* -------------------------------------------------------------------- */\n    if( bTiled )\n    {\n        if( l_nBlockXSize == 0 )\n            l_nBlockXSize = 256;\n\n        if( l_nBlockYSize == 0 )\n            l_nBlockYSize = 256;\n\n        if( !TIFFSetField( l_hTIFF, TIFFTAG_TILEWIDTH, l_nBlockXSize ) ||\n            !TIFFSetField( l_hTIFF, TIFFTAG_TILELENGTH, l_nBlockYSize ) )\n        {\n            XTIFFClose(l_hTIFF);\n            CPL_IGNORE_RET_VAL(VSIFCloseL(l_fpL));\n            return nullptr;\n        }\n    }\n    else\n    {\n        const uint32 l_nRowsPerStrip = std::min(nYSize,\n            l_nBlockYSize == 0\n            ? static_cast<int>(TIFFDefaultStripSize(l_hTIFF,0))\n            : l_nBlockYSize );\n\n        TIFFSetField( l_hTIFF, TIFFTAG_ROWSPERSTRIP, l_nRowsPerStrip );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Set compression related tags.                                   */\n/* -------------------------------------------------------------------- */\n    if( l_nCompression == COMPRESSION_LZW ||\n         l_nCompression == COMPRESSION_ADOBE_DEFLATE ||\n         l_nCompression == COMPRESSION_ZSTD )\n        TIFFSetField( l_hTIFF, TIFFTAG_PREDICTOR, nPredictor );\n    if( (l_nCompression == COMPRESSION_ADOBE_DEFLATE ||\n         l_nCompression == COMPRESSION_LERC) && l_nZLevel != -1 )\n        TIFFSetField( l_hTIFF, TIFFTAG_ZIPQUALITY, l_nZLevel );\n    if( l_nCompression == COMPRESSION_JPEG && l_nJpegQuality != -1 )\n        TIFFSetField( l_hTIFF, TIFFTAG_JPEGQUALITY, l_nJpegQuality );\n    if( l_nCompression == COMPRESSION_LZMA && l_nLZMAPreset != -1)\n        TIFFSetField( l_hTIFF, TIFFTAG_LZMAPRESET, l_nLZMAPreset );\n    if( (l_nCompression == COMPRESSION_ZSTD ||\n         l_nCompression == COMPRESSION_LERC) && l_nZSTDLevel != -1)\n        TIFFSetField( l_hTIFF, TIFFTAG_ZSTD_LEVEL, l_nZSTDLevel);\n#if HAVE_LERC\n    if( l_nCompression == COMPRESSION_LERC )\n    {\n        TIFFSetField( l_hTIFF, TIFFTAG_LERC_MAXZERROR, l_dfMaxZError );\n    }\n#endif\n    if( l_nCompression == COMPRESSION_WEBP && l_nWebPLevel != -1)\n        TIFFSetField( l_hTIFF, TIFFTAG_WEBP_LEVEL, l_nWebPLevel);\n    if( l_nCompression == COMPRESSION_WEBP && l_bWebPLossless)\n        TIFFSetField( l_hTIFF, TIFFTAG_WEBP_LOSSLESS, 1);\n\n    if( l_nCompression == COMPRESSION_JPEG )\n        TIFFSetField( l_hTIFF, TIFFTAG_JPEGTABLESMODE, l_nJpegTablesMode );\n\n/* -------------------------------------------------------------------- */\n/*      If we forced production of a file with photometric=palette,     */\n/*      we need to push out a default color table.                      */\n/* -------------------------------------------------------------------- */\n    if( bForceColorTable )\n    {\n        const int nColors = eType == GDT_Byte ? 256 : 65536;\n\n        unsigned short *panTRed = static_cast<unsigned short *>(\n            CPLMalloc(sizeof(unsigned short)*nColors) );\n        unsigned short *panTGreen = static_cast<unsigned short *>(\n            CPLMalloc(sizeof(unsigned short)*nColors) );\n        unsigned short *panTBlue = static_cast<unsigned short *>(\n            CPLMalloc(sizeof(unsigned short)*nColors) );\n\n        for( int iColor = 0; iColor < nColors; ++iColor )\n        {\n            if( eType == GDT_Byte )\n            {\n                panTRed[iColor] = static_cast<unsigned short>(257 * iColor);\n                panTGreen[iColor] = static_cast<unsigned short>(257 * iColor);\n                panTBlue[iColor] = static_cast<unsigned short>(257 * iColor);\n            }\n            else\n            {\n                panTRed[iColor] = static_cast<unsigned short>(iColor);\n                panTGreen[iColor] = static_cast<unsigned short>(iColor);\n                panTBlue[iColor] = static_cast<unsigned short>(iColor);\n            }\n        }\n\n        TIFFSetField( l_hTIFF, TIFFTAG_COLORMAP,\n                      panTRed, panTGreen, panTBlue );\n\n        CPLFree( panTRed );\n        CPLFree( panTGreen );\n        CPLFree( panTBlue );\n    }\n\n    // Would perhaps works with libtiff 3.X but didn't bother trying This trick\n    // creates a temporary in-memory file and fetches its JPEG tables so that\n    // we can directly set them, before tif_jpeg.c compute them at the first\n    // strip/tile writing, which is too late, since we have already crystalized\n    // the directory. This way we avoid a directory rewriting.\n#if defined(BIGTIFF_SUPPORT)\n    if( l_nCompression == COMPRESSION_JPEG &&\n        !STARTS_WITH(pszFilename, szJPEGGTiffDatasetTmpPrefix) &&\n        CPLTestBool(\n            CSLFetchNameValueDef(papszParmList, \"WRITE_JPEGTABLE_TAG\", \"YES\")) )\n    {\n        GTiffWriteJPEGTables( l_hTIFF,\n                              CSLFetchNameValue(papszParmList, \"PHOTOMETRIC\"),\n                              CSLFetchNameValue(papszParmList, \"JPEG_QUALITY\"),\n                              CSLFetchNameValue(papszParmList,\n                                                \"JPEGTABLESMODE\") );\n    }\n#endif\n\n    *pfpL = l_fpL;\n\n    return l_hTIFF;\n}\n\n/************************************************************************/\n/*                      GTiffWriteJPEGTables()                          */\n/*                                                                      */\n/*      Sets the TIFFTAG_JPEGTABLES (and TIFFTAG_REFERENCEBLACKWHITE)   */\n/*      tags immediately, instead of relying on the TIFF JPEG codec     */\n/*      to write them when it starts compressing imagery. This avoids   */\n/*      an IFD rewrite at the end of the file.                          */\n/*      Must be used after having set TIFFTAG_SAMPLESPERPIXEL,          */\n/*      TIFFTAG_BITSPERSAMPLE.                                          */\n/************************************************************************/\n\nvoid GTiffWriteJPEGTables( TIFF* hTIFF,\n                           const char* pszPhotometric,\n                           const char* pszJPEGQuality,\n                           const char* pszJPEGTablesMode )\n{\n    // Would perhaps works with libtiff 3.X but didn't bother trying This trick\n    // creates a temporary in-memory file and fetches its JPEG tables so that\n    // we can directly set them, before tif_jpeg.c compute them at the first\n    // strip/tile writing, which is too late, since we have already crystalized\n    // the directory. This way we avoid a directory rewriting.\n#if defined(BIGTIFF_SUPPORT)\n    uint16 nBands = 0;\n    if( !TIFFGetField( hTIFF, TIFFTAG_SAMPLESPERPIXEL,\n                        &nBands ) )\n        nBands = 1;\n\n    uint16 l_nBitsPerSample = 0;\n    if( !TIFFGetField(hTIFF, TIFFTAG_BITSPERSAMPLE,\n                        &(l_nBitsPerSample)) )\n        l_nBitsPerSample = 1;\n\n    CPLString osTmpFilenameIn;\n    osTmpFilenameIn.Printf(\"%s%p\", szJPEGGTiffDatasetTmpPrefix, hTIFF);\n    VSILFILE* fpTmp = nullptr;\n    CPLString osTmp;\n    char** papszLocalParameters = nullptr;\n    const int nInMemImageWidth = 16;\n    const int nInMemImageHeight = 16;\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"COMPRESS\", \"JPEG\" );\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"JPEG_QUALITY\",\n                                            pszJPEGQuality );\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"PHOTOMETRIC\", pszPhotometric );\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"BLOCKYSIZE\",\n                                            CPLSPrintf(\"%u\", nInMemImageHeight)\n                                          );\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"NBITS\",\n                                            CPLSPrintf(\"%u\", l_nBitsPerSample));\n    papszLocalParameters = CSLSetNameValue( papszLocalParameters,\n                                            \"JPEGTABLESMODE\",\n                                            pszJPEGTablesMode );\n\n    TIFF* hTIFFTmp = GTiffDataset::CreateLL(\n                    osTmpFilenameIn, nInMemImageWidth, nInMemImageHeight,\n                    (nBands <= 4) ? nBands : 1,\n                    (l_nBitsPerSample <= 8) ? GDT_Byte : GDT_UInt16, 0.0,\n                    papszLocalParameters, &fpTmp, osTmp );\n    CSLDestroy(papszLocalParameters);\n    if( hTIFFTmp )\n    {\n        uint16 l_nPhotometric = 0;\n        int nJpegTablesModeIn = 0;\n        TIFFGetField( hTIFFTmp, TIFFTAG_PHOTOMETRIC, &(l_nPhotometric) );\n        TIFFGetField( hTIFFTmp, TIFFTAG_JPEGTABLESMODE,\n                        &nJpegTablesModeIn );\n        TIFFWriteCheck( hTIFFTmp, FALSE, \"CreateLL\" );\n        TIFFWriteDirectory( hTIFFTmp );\n        TIFFSetDirectory( hTIFFTmp, 0 );\n        // Now, reset quality and jpegcolormode.\n        const int l_nJpegQuality = pszJPEGQuality ? atoi(pszJPEGQuality) : 0;\n        if(l_nJpegQuality > 0)\n            TIFFSetField(hTIFFTmp, TIFFTAG_JPEGQUALITY, l_nJpegQuality);\n        if( l_nPhotometric == PHOTOMETRIC_YCBCR\n            && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\",\n                                                \"YES\") ) )\n        {\n            TIFFSetField( hTIFFTmp, TIFFTAG_JPEGCOLORMODE,\n                            JPEGCOLORMODE_RGB);\n        }\n        if( nJpegTablesModeIn >= 0 )\n            TIFFSetField( hTIFFTmp, TIFFTAG_JPEGTABLESMODE,\n                            nJpegTablesModeIn);\n\n        GPtrDiff_t nBlockSize = static_cast<GPtrDiff_t>(nInMemImageWidth) * nInMemImageHeight *\n                                        ((nBands <= 4) ? nBands : 1);\n        if( l_nBitsPerSample == 12 )\n            nBlockSize = (nBlockSize * 3) / 2;\n        std::vector<GByte> abyZeroData( nBlockSize, 0 );\n        TIFFWriteEncodedStrip( hTIFFTmp, 0, &abyZeroData[0], nBlockSize);\n\n        uint32 nJPEGTableSize = 0;\n        void* pJPEGTable = nullptr;\n        if( TIFFGetField( hTIFFTmp, TIFFTAG_JPEGTABLES, &nJPEGTableSize,\n                            &pJPEGTable) )\n            TIFFSetField( hTIFF, TIFFTAG_JPEGTABLES, nJPEGTableSize,\n                            pJPEGTable);\n\n        float *ref = nullptr;\n        if( TIFFGetField(hTIFFTmp, TIFFTAG_REFERENCEBLACKWHITE, &ref) )\n            TIFFSetField(hTIFF, TIFFTAG_REFERENCEBLACKWHITE, ref);\n\n        XTIFFClose(hTIFFTmp);\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTmp));\n    }\n    VSIUnlink(osTmpFilenameIn);\n#endif\n}\n\n/************************************************************************/\n/*                            GuessJPEGQuality()                        */\n/*                                                                      */\n/*      Guess JPEG quality from JPEGTABLES tag.                         */\n/************************************************************************/\n\nstatic const GByte* GTIFFFindNextTable( const GByte* paby, GByte byMarker,\n                                        int nLen, int* pnLenTable )\n{\n    for( int i = 0; i + 1 < nLen; )\n    {\n        if( paby[i] != 0xFF )\n            return nullptr;\n        ++i;\n        if( paby[i] == 0xD8 )\n        {\n            ++i;\n            continue;\n        }\n        if( i + 2 >= nLen )\n            return nullptr;\n        int nMarkerLen = paby[i+1] * 256 + paby[i+2];\n        if( i+1+nMarkerLen >= nLen )\n            return nullptr;\n        if( paby[i] == byMarker )\n        {\n            if( pnLenTable ) *pnLenTable = nMarkerLen;\n            return paby + i + 1;\n        }\n        i += 1 + nMarkerLen;\n    }\n    return nullptr;\n}\n\n// We assume that if there are several quantization tables, they are\n// in the same order. Which is a reasonable assumption for updating\n// a file generated by ourselves.\nstatic bool GTIFFQuantizationTablesEqual( const GByte* paby1, int nLen1,\n                                          const GByte* paby2, int nLen2 )\n{\n    bool bFound = false;\n    while( true )\n    {\n        int nLenTable1 = 0;\n        int nLenTable2 = 0;\n        const GByte* paby1New =\n            GTIFFFindNextTable(paby1, 0xDB, nLen1, &nLenTable1);\n        const GByte* paby2New =\n            GTIFFFindNextTable(paby2, 0xDB, nLen2, &nLenTable2);\n        if( paby1New == nullptr && paby2New == nullptr )\n            return bFound;\n        if( paby1New == nullptr || paby2New == nullptr )\n            return false;\n        if( nLenTable1 != nLenTable2 )\n            return false;\n        if( memcmp(paby1New, paby2New, nLenTable1) != 0 )\n            return false;\n        paby1New += nLenTable1;\n        paby2New += nLenTable2;\n        nLen1 -= static_cast<int>(paby1New - paby1);\n        nLen2 -= static_cast<int>(paby2New - paby2);\n        paby1 = paby1New;\n        paby2 = paby2New;\n        bFound = true;\n    }\n}\n\nint GTiffDataset::GuessJPEGQuality( bool& bOutHasQuantizationTable,\n                                    bool& bOutHasHuffmanTable )\n{\n    CPLAssert( nCompression == COMPRESSION_JPEG );\n    uint32 nJPEGTableSize = 0;\n    void* pJPEGTable = nullptr;\n    if( !TIFFGetField(hTIFF, TIFFTAG_JPEGTABLES, &nJPEGTableSize, &pJPEGTable) )\n    {\n        bOutHasQuantizationTable = false;\n        bOutHasHuffmanTable = false;\n        return -1;\n    }\n\n    bOutHasQuantizationTable =\n        GTIFFFindNextTable( static_cast<const GByte*>(pJPEGTable), 0xDB,\n                            nJPEGTableSize, nullptr) != nullptr;\n    bOutHasHuffmanTable =\n        GTIFFFindNextTable( static_cast<const GByte*>(pJPEGTable), 0xC4,\n                            nJPEGTableSize, nullptr) != nullptr;\n    if( !bOutHasQuantizationTable )\n        return -1;\n\n    char** papszLocalParameters = nullptr;\n    papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                            \"COMPRESS\", \"JPEG\");\n    if( nPhotometric == PHOTOMETRIC_YCBCR )\n        papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                            \"PHOTOMETRIC\", \"YCBCR\");\n    else if( nPhotometric == PHOTOMETRIC_SEPARATED )\n        papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                            \"PHOTOMETRIC\", \"CMYK\");\n    papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                            \"BLOCKYSIZE\", \"16\");\n    if( nBitsPerSample == 12 )\n        papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                                \"NBITS\", \"12\");\n\n    CPLString osTmpFilenameIn;\n    osTmpFilenameIn.Printf( \"/vsimem/gtiffdataset_guess_jpeg_quality_tmp_%p\",\n                            this );\n\n    int nRet = -1;\n    for( int nQuality = 0; nQuality <= 100 && nRet < 0; ++nQuality )\n    {\n        VSILFILE* fpTmp = nullptr;\n        if( nQuality == 0 )\n            papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                                   \"JPEG_QUALITY\", \"75\");\n        else\n            papszLocalParameters = CSLSetNameValue(papszLocalParameters,\n                                \"JPEG_QUALITY\", CPLSPrintf(\"%d\", nQuality));\n\n        CPLPushErrorHandler(CPLQuietErrorHandler);\n        CPLString osTmp;\n        TIFF* hTIFFTmp =\n            CreateLL( osTmpFilenameIn, 16, 16, (nBands <= 4) ? nBands : 1,\n                      GetRasterBand(1)->GetRasterDataType(), 0.0,\n                      papszLocalParameters, &fpTmp, osTmp );\n        CPLPopErrorHandler();\n        if( !hTIFFTmp )\n        {\n            break;\n        }\n\n        TIFFWriteCheck( hTIFFTmp, FALSE, \"CreateLL\" );\n        TIFFWriteDirectory( hTIFFTmp );\n        TIFFSetDirectory( hTIFFTmp, 0 );\n        // Now reset jpegcolormode.\n        if( nPhotometric == PHOTOMETRIC_YCBCR\n            && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\",\n                                                \"YES\") ) )\n        {\n            TIFFSetField(hTIFFTmp, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB);\n        }\n\n        GByte abyZeroData[(16*16*4*3)/2] = {};\n        const int nBlockSize =\n            (16 * 16 * ((nBands <= 4) ? nBands : 1) * nBitsPerSample) / 8;\n        TIFFWriteEncodedStrip( hTIFFTmp, 0, abyZeroData, nBlockSize);\n\n        uint32 nJPEGTableSizeTry = 0;\n        void* pJPEGTableTry = nullptr;\n        if( TIFFGetField(hTIFFTmp, TIFFTAG_JPEGTABLES,\n                         &nJPEGTableSizeTry, &pJPEGTableTry) )\n        {\n            if( GTIFFQuantizationTablesEqual(\n                   static_cast<GByte *>(pJPEGTable), nJPEGTableSize,\n                   static_cast<GByte *>(pJPEGTableTry), nJPEGTableSizeTry) )\n            {\n                nRet = (nQuality == 0 ) ? 75 : nQuality;\n            }\n        }\n\n        XTIFFClose(hTIFFTmp);\n        CPL_IGNORE_RET_VAL(VSIFCloseL(fpTmp));\n    }\n\n    CSLDestroy(papszLocalParameters);\n    VSIUnlink(osTmpFilenameIn);\n\n    return nRet;\n}\n\n/************************************************************************/\n/*               SetJPEGQualityAndTablesModeFromFile()                  */\n/************************************************************************/\n\nvoid GTiffDataset::SetJPEGQualityAndTablesModeFromFile()\n{\n    bool bHasQuantizationTable = false;\n    bool bHasHuffmanTable = false;\n    int nQuality = GuessJPEGQuality( bHasQuantizationTable,\n                                     bHasHuffmanTable );\n    if( nQuality > 0 )\n    {\n        CPLDebug(\"GTiff\", \"Guessed JPEG quality to be %d\", nQuality);\n        nJpegQuality = nQuality;\n        TIFFSetField( hTIFF, TIFFTAG_JPEGQUALITY, nQuality );\n\n        // This means we will use the quantization tables from the\n        // JpegTables tag.\n        nJpegTablesMode = JPEGTABLESMODE_QUANT;\n    }\n    else\n    {\n        uint32 nJPEGTableSize = 0;\n        void* pJPEGTable = nullptr;\n        if( !TIFFGetField( hTIFF, TIFFTAG_JPEGTABLES,\n                            &nJPEGTableSize, &pJPEGTable) )\n        {\n            toff_t *panByteCounts = nullptr;\n            const int nBlockCount =\n                nPlanarConfig == PLANARCONFIG_SEPARATE\n                ? nBlocksPerBand * nBands\n                : nBlocksPerBand;\n            if( TIFFIsTiled( hTIFF ) )\n                TIFFGetField( hTIFF, TIFFTAG_TILEBYTECOUNTS,\n                                &panByteCounts );\n            else\n                TIFFGetField( hTIFF, TIFFTAG_STRIPBYTECOUNTS,\n                                &panByteCounts );\n\n            bool bFoundNonEmptyBlock = false;\n            if( panByteCounts != nullptr )\n            {\n                for( int iBlock = 0; iBlock < nBlockCount; ++iBlock )\n                {\n                    if( panByteCounts[iBlock] != 0 )\n                    {\n                        bFoundNonEmptyBlock = true;\n                        break;\n                    }\n                }\n            }\n            if( bFoundNonEmptyBlock )\n            {\n                CPLDebug(\"GTiff\", \"Could not guess JPEG quality. \"\n                            \"JPEG tables are missing, so going in \"\n                            \"TIFFTAG_JPEGTABLESMODE = 0/2 mode\");\n                // Write quantization tables in each strile.\n                nJpegTablesMode = 0;\n            }\n        }\n        else\n        {\n            if( bHasQuantizationTable )\n            {\n                // FIXME in libtiff: this is likely going to cause issues\n                // since libtiff will reuse in each strile the number of\n                // the global quantization table, which is invalid.\n                CPLDebug(\n                    \"GTiff\", \"Could not guess JPEG quality although JPEG \"\n                    \"quantization tables are present, so going in \"\n                    \"TIFFTAG_JPEGTABLESMODE = 0/2 mode\" );\n            }\n            else\n            {\n                CPLDebug(\"GTiff\", \"Could not guess JPEG quality since JPEG \"\n                        \"quantization tables are not present, so going in \"\n                        \"TIFFTAG_JPEGTABLESMODE = 0/2 mode\");\n            }\n\n            // Write quantization tables in each strile.\n            nJpegTablesMode = 0;\n        }\n    }\n    if( bHasHuffmanTable )\n    {\n        // If there are Huffman tables in header use them, otherwise\n        // if we use optimized tables, libtiff will currently reuse\n        // the number of the Huffman tables of the header for the\n        // optimized version of each strile, which is illegal.\n        nJpegTablesMode |= JPEGTABLESMODE_HUFF;\n    }\n    if( nJpegTablesMode >= 0 )\n        TIFFSetField( hTIFF, TIFFTAG_JPEGTABLESMODE,\n                        nJpegTablesMode);\n}\n\n/************************************************************************/\n/*                               Create()                               */\n/*                                                                      */\n/*      Create a new GeoTIFF or TIFF file.                              */\n/************************************************************************/\n\nGDALDataset *GTiffDataset::Create( const char * pszFilename,\n                                   int nXSize, int nYSize, int l_nBands,\n                                   GDALDataType eType,\n                                   char **papszParmList )\n\n{\n    VSILFILE* l_fpL = nullptr;\n    CPLString l_osTmpFilename;\n\n/* -------------------------------------------------------------------- */\n/*      Create the underlying TIFF file.                                */\n/* -------------------------------------------------------------------- */\n    TIFF *l_hTIFF = CreateLL(\n        pszFilename,\n        nXSize, nYSize, l_nBands,\n        eType, 0, papszParmList, &l_fpL, l_osTmpFilename );\n    const bool bStreaming = !l_osTmpFilename.empty();\n\n    if( l_hTIFF == nullptr )\n        return nullptr;\n\n/* -------------------------------------------------------------------- */\n/*      Create the new GTiffDataset object.                             */\n/* -------------------------------------------------------------------- */\n    GTiffDataset *poDS = new GTiffDataset();\n    poDS->hTIFF = l_hTIFF;\n    poDS->fpL = l_fpL;\n    if( bStreaming )\n    {\n        poDS->bStreamingOut = true;\n        poDS->osTmpFilename = l_osTmpFilename;\n        poDS->fpToWrite = VSIFOpenL( pszFilename, \"wb\" );\n        if( poDS->fpToWrite == nullptr )\n        {\n            VSIUnlink(l_osTmpFilename);\n            delete poDS;\n            return nullptr;\n        }\n    }\n    poDS->poActiveDS = poDS;\n    poDS->ppoActiveDSRef = &(poDS->poActiveDS);\n\n    poDS->nRasterXSize = nXSize;\n    poDS->nRasterYSize = nYSize;\n    poDS->eAccess = GA_Update;\n    poDS->bCrystalized = false;\n    poDS->nSamplesPerPixel = static_cast<uint16>(l_nBands);\n    poDS->osFilename = pszFilename;\n\n    // Don't try to load external metadata files (#6597).\n    poDS->bIMDRPCMetadataLoaded = true;\n\n    // Avoid premature crystalization that will cause directory re-writing if\n    // GetProjectionRef() or GetGeoTransform() are called on the newly created\n    // GeoTIFF.\n    poDS->bLookedForProjection = true;\n\n    TIFFGetField( l_hTIFF, TIFFTAG_SAMPLEFORMAT, &(poDS->nSampleFormat) );\n    TIFFGetField( l_hTIFF, TIFFTAG_PLANARCONFIG, &(poDS->nPlanarConfig) );\n    // Weird that we need this, but otherwise we get a Valgrind warning on\n    // tiff_write_124.\n    if( !TIFFGetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, &(poDS->nPhotometric) ) )\n        poDS->nPhotometric = PHOTOMETRIC_MINISBLACK;\n    TIFFGetField( l_hTIFF, TIFFTAG_BITSPERSAMPLE, &(poDS->nBitsPerSample) );\n    TIFFGetField( l_hTIFF, TIFFTAG_COMPRESSION, &(poDS->nCompression) );\n\n    if( TIFFIsTiled(l_hTIFF) )\n    {\n        TIFFGetField( l_hTIFF, TIFFTAG_TILEWIDTH, &(poDS->nBlockXSize) );\n        TIFFGetField( l_hTIFF, TIFFTAG_TILELENGTH, &(poDS->nBlockYSize) );\n    }\n    else\n    {\n        if( !TIFFGetField( l_hTIFF, TIFFTAG_ROWSPERSTRIP,\n                           &(poDS->nRowsPerStrip) ) )\n            poDS->nRowsPerStrip = 1;  // Dummy value.\n\n        poDS->nBlockXSize = nXSize;\n        poDS->nBlockYSize =\n            std::min( static_cast<int>(poDS->nRowsPerStrip) , nYSize );\n    }\n\n    poDS->nBlocksPerBand =\n        DIV_ROUND_UP(nYSize, poDS->nBlockYSize)\n        * DIV_ROUND_UP(nXSize, poDS->nBlockXSize);\n\n    if( CSLFetchNameValue( papszParmList, \"PROFILE\" ) != nullptr )\n        poDS->osProfile = CSLFetchNameValue( papszParmList, \"PROFILE\" );\n\n/* -------------------------------------------------------------------- */\n/*      YCbCr JPEG compressed images should be translated on the fly    */\n/*      to RGB by libtiff/libjpeg unless specifically requested         */\n/*      otherwise.                                                      */\n/* -------------------------------------------------------------------- */\n    if( poDS->nCompression == COMPRESSION_JPEG\n        && poDS->nPhotometric == PHOTOMETRIC_YCBCR\n        && CPLTestBool( CPLGetConfigOption(\"CONVERT_YCBCR_TO_RGB\", \"YES\") ) )\n    {\n        int nColorMode = 0;\n\n        poDS->SetMetadataItem(\"SOURCE_COLOR_SPACE\", \"YCbCr\", \"IMAGE_STRUCTURE\");\n        if( !TIFFGetField( l_hTIFF, TIFFTAG_JPEGCOLORMODE, &nColorMode ) ||\n            nColorMode != JPEGCOLORMODE_RGB )\n            TIFFSetField(l_hTIFF, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB);\n    }\n\n#ifdef HAVE_LERC\n    if( poDS->nCompression == COMPRESSION_LERC )\n    {\n        uint32 nLercParamCount = 0;\n        uint32* panLercParms = nullptr;\n        if( TIFFGetField( l_hTIFF, TIFFTAG_LERC_PARAMETERS, &nLercParamCount,\n                          &panLercParms ) &&\n            nLercParamCount == 2 )\n        {\n            memcpy( poDS->anLercAddCompressionAndVersion, panLercParms,\n                    sizeof(poDS->anLercAddCompressionAndVersion) );\n        }\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Read palette back as a color table if it has one.               */\n/* -------------------------------------------------------------------- */\n    unsigned short *panRed = nullptr;\n    unsigned short *panGreen = nullptr;\n    unsigned short *panBlue = nullptr;\n\n    if( poDS->nPhotometric == PHOTOMETRIC_PALETTE\n        && TIFFGetField( l_hTIFF, TIFFTAG_COLORMAP,\n                         &panRed, &panGreen, &panBlue) )\n    {\n\n        poDS->poColorTable = new GDALColorTable();\n\n        const int nColorCount = 1 << poDS->nBitsPerSample;\n\n        for( int iColor = nColorCount - 1; iColor >= 0; iColor-- )\n        {\n            const unsigned short divisor = 257;\n            const GDALColorEntry oEntry = {\n                static_cast<short>(panRed[iColor] / divisor),\n                static_cast<short>(panGreen[iColor] / divisor),\n                static_cast<short>(panBlue[iColor] / divisor),\n                static_cast<short>(255)\n            };\n\n            poDS->poColorTable->SetColorEntry( iColor, &oEntry );\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Do we want to ensure all blocks get written out on close to     */\n/*      avoid sparse files?                                             */\n/* -------------------------------------------------------------------- */\n    if( !CPLFetchBool( papszParmList, \"SPARSE_OK\", false ) )\n        poDS->bFillEmptyTilesAtClosing = true;\n\n    poDS->bWriteEmptyTiles = bStreaming ||\n        (poDS->nCompression != COMPRESSION_NONE &&\n         poDS->bFillEmptyTilesAtClosing);\n    // Only required for people writing non-compressed stripped files in the\n    // right order and wanting all tstrips to be written in the same order\n    // so that the end result can be memory mapped without knowledge of each\n    // strip offset.\n    if( CPLTestBool( CSLFetchNameValueDef( papszParmList,\n                              \"WRITE_EMPTY_TILES_SYNCHRONOUSLY\", \"FALSE\" )) ||\n         CPLTestBool( CSLFetchNameValueDef( papszParmList,\n                              \"@WRITE_EMPTY_TILES_SYNCHRONOUSLY\", \"FALSE\" )) )\n    {\n        poDS->bWriteEmptyTiles = true;\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Preserve creation options for consulting later (for instance    */\n/*      to decide if a TFW file should be written).                     */\n/* -------------------------------------------------------------------- */\n    poDS->papszCreationOptions = CSLDuplicate( papszParmList );\n\n    poDS->nZLevel = GTiffGetZLevel(papszParmList);\n    poDS->nLZMAPreset = GTiffGetLZMAPreset(papszParmList);\n    poDS->nZSTDLevel = GTiffGetZSTDPreset(papszParmList);\n    poDS->nWebPLevel = GTiffGetWebPLevel(papszParmList);\n    poDS->bWebPLossless = GTiffGetWebPLossless(papszParmList);\n    poDS->nJpegQuality = GTiffGetJpegQuality(papszParmList);\n    poDS->nJpegTablesMode = GTiffGetJpegTablesMode(papszParmList);\n#if HAVE_LERC\n    poDS->dfMaxZError = GTiffGetLERCMaxZError(papszParmList);\n#endif\n    poDS->InitCreationOrOpenOptions(papszParmList);\n\n#if !defined(BIGTIFF_SUPPORT)\n/* -------------------------------------------------------------------- */\n/*      If we are writing jpeg compression we need to write some        */\n/*      imagery to force the jpegtables to get created.  This is,       */\n/*      likely only needed with libtiff >= 3.9.3 (#3633)                */\n/* -------------------------------------------------------------------- */\n    if( poDS->nCompression == COMPRESSION_JPEG\n        && strstr(TIFFLIB_VERSION_STR, \"Version 3.9\") != nullptr )\n    {\n        CPLDebug( \"GDAL\",\n                  \"Writing zero block to force creation of JPEG tables.\" );\n        if( TIFFIsTiled( l_hTIFF ) )\n        {\n            const auto cc = TIFFTileSize( l_hTIFF );\n            unsigned char *pabyZeros =\n                static_cast<unsigned char *>(CPLCalloc(cc, 1));\n            TIFFWriteEncodedTile(l_hTIFF, 0, pabyZeros, cc);\n            CPLFree( pabyZeros );\n        }\n        else\n        {\n            const auto cc = TIFFStripSize( l_hTIFF );\n            unsigned char *pabyZeros =\n                static_cast<unsigned char *>(CPLCalloc(cc, 1));\n            TIFFWriteEncodedStrip(l_hTIFF, 0, pabyZeros, cc);\n            CPLFree( pabyZeros );\n        }\n        poDS->bDontReloadFirstBlock = true;\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Create band information objects.                                */\n/* -------------------------------------------------------------------- */\n    for( int iBand = 0; iBand < l_nBands; ++iBand )\n    {\n        if( poDS->nBitsPerSample == 8 ||\n            (poDS->nBitsPerSample == 16 && eType != GDT_Float32) ||\n            poDS->nBitsPerSample == 32 ||\n            poDS->nBitsPerSample == 64 ||\n            poDS->nBitsPerSample == 128)\n        {\n            poDS->SetBand( iBand + 1, new GTiffRasterBand( poDS, iBand + 1 ) );\n        }\n        else\n        {\n            poDS->SetBand( iBand + 1, new GTiffOddBitsBand( poDS, iBand + 1 ) );\n            poDS->GetRasterBand( iBand + 1 )->\n                SetMetadataItem( \"NBITS\",\n                                 CPLString().Printf(\"%d\",poDS->nBitsPerSample),\n                                 \"IMAGE_STRUCTURE\" );\n        }\n    }\n\n    poDS->GetDiscardLsbOption(papszParmList);\n\n    if( poDS->nPlanarConfig == PLANARCONFIG_CONTIG && l_nBands != 1 )\n        poDS->SetMetadataItem( \"INTERLEAVE\", \"PIXEL\", \"IMAGE_STRUCTURE\" );\n    else\n        poDS->SetMetadataItem( \"INTERLEAVE\", \"BAND\", \"IMAGE_STRUCTURE\" );\n\n    poDS->oOvManager.Initialize( poDS, pszFilename );\n\n    return poDS;\n}\n\n/************************************************************************/\n/*                             CreateCopy()                             */\n/************************************************************************/\n\nGDALDataset *\nGTiffDataset::CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,\n                          int bStrict, char ** papszOptions,\n                          GDALProgressFunc pfnProgress, void * pProgressData )\n\n{\n    if( poSrcDS->GetRasterCount() == 0 )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Unable to export GeoTIFF files with zero bands.\" );\n        return nullptr;\n    }\n\n    GDALRasterBand * const poPBand = poSrcDS->GetRasterBand(1);\n    const GDALDataType eType = poPBand->GetRasterDataType();\n\n/* -------------------------------------------------------------------- */\n/*      Check, whether all bands in input dataset has the same type.    */\n/* -------------------------------------------------------------------- */\n    const int l_nBands = poSrcDS->GetRasterCount();\n    for( int iBand = 2; iBand <= l_nBands; ++iBand )\n    {\n        if( eType != poSrcDS->GetRasterBand(iBand)->GetRasterDataType() )\n        {\n            if( bStrict )\n            {\n                CPLError(\n                    CE_Failure, CPLE_AppDefined,\n                    \"Unable to export GeoTIFF file with different datatypes \"\n                    \"per different bands. All bands should have the same \"\n                    \"types in TIFF.\" );\n                return nullptr;\n            }\n            else\n            {\n                CPLError(\n                    CE_Warning, CPLE_AppDefined,\n                    \"Unable to export GeoTIFF file with different datatypes \"\n                    \"per different bands. All bands should have the same \"\n                    \"types in TIFF.\" );\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Capture the profile.                                            */\n/* -------------------------------------------------------------------- */\n    const char *pszProfile = CSLFetchNameValue(papszOptions, \"PROFILE\");\n    if( pszProfile == nullptr )\n        pszProfile = szPROFILE_GDALGeoTIFF;\n\n    if( !EQUAL(pszProfile, szPROFILE_BASELINE)\n        && !EQUAL(pszProfile, szPROFILE_GeoTIFF)\n        && !EQUAL(pszProfile, szPROFILE_GDALGeoTIFF) )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"PROFILE=%s not supported in GTIFF driver.\",\n                  pszProfile );\n        return nullptr;\n    }\n\n    const bool bGeoTIFF = !EQUAL(pszProfile, szPROFILE_BASELINE);\n\n/* -------------------------------------------------------------------- */\n/*      Special handling for NBITS.  Copy from band metadata if found.  */\n/* -------------------------------------------------------------------- */\n    char **papszCreateOptions = CSLDuplicate( papszOptions );\n\n    if( poPBand->GetMetadataItem( \"NBITS\", \"IMAGE_STRUCTURE\" ) != nullptr\n        && atoi(poPBand->GetMetadataItem( \"NBITS\", \"IMAGE_STRUCTURE\" )) > 0\n        && CSLFetchNameValue( papszCreateOptions, \"NBITS\") == nullptr )\n    {\n        papszCreateOptions =\n            CSLSetNameValue( papszCreateOptions, \"NBITS\",\n                             poPBand->GetMetadataItem( \"NBITS\",\n                                                       \"IMAGE_STRUCTURE\" ) );\n    }\n\n    if( CSLFetchNameValue( papszOptions, \"PIXELTYPE\" ) == nullptr\n        && eType == GDT_Byte\n        && poPBand->GetMetadataItem( \"PIXELTYPE\", \"IMAGE_STRUCTURE\" ) )\n    {\n        papszCreateOptions =\n            CSLSetNameValue( papszCreateOptions, \"PIXELTYPE\",\n                             poPBand->GetMetadataItem(\n                                 \"PIXELTYPE\", \"IMAGE_STRUCTURE\" ) );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Color profile.  Copy from band metadata if found.              */\n/* -------------------------------------------------------------------- */\n    if( bGeoTIFF )\n    {\n        const char* pszOptionsMD[] = {\n            \"SOURCE_ICC_PROFILE\",\n            \"SOURCE_PRIMARIES_RED\",\n            \"SOURCE_PRIMARIES_GREEN\",\n            \"SOURCE_PRIMARIES_BLUE\",\n            \"SOURCE_WHITEPOINT\",\n            \"TIFFTAG_TRANSFERFUNCTION_RED\",\n            \"TIFFTAG_TRANSFERFUNCTION_GREEN\",\n            \"TIFFTAG_TRANSFERFUNCTION_BLUE\",\n            \"TIFFTAG_TRANSFERRANGE_BLACK\",\n            \"TIFFTAG_TRANSFERRANGE_WHITE\",\n            nullptr\n        };\n\n        // Copy all the tags.  Options will override tags in the source.\n        int i = 0;\n        while(pszOptionsMD[i] != nullptr)\n        {\n            char const *pszMD =\n                CSLFetchNameValue(papszOptions, pszOptionsMD[i]);\n            if( pszMD == nullptr )\n                pszMD = poSrcDS->GetMetadataItem( pszOptionsMD[i],\n                                                  \"COLOR_PROFILE\" );\n\n            if( (pszMD != nullptr) && !EQUAL(pszMD, \"\") )\n            {\n                papszCreateOptions =\n                    CSLSetNameValue( papszCreateOptions, pszOptionsMD[i],\n                                     pszMD );\n\n                // If an ICC profile exists, other tags are not needed.\n                if( EQUAL(pszOptionsMD[i], \"SOURCE_ICC_PROFILE\") )\n                    break;\n            }\n\n            ++i;\n        }\n    }\n\n    double dfExtraSpaceForOverviews = 0;\n    if( CPLFetchBool(papszOptions, \"COPY_SRC_OVERVIEWS\", false) )\n    {\n        const int nSrcOverviews = poSrcDS->GetRasterBand(1)->GetOverviewCount();\n        if( nSrcOverviews )\n        {\n            for( int j = 1; j <= l_nBands; ++j )\n            {\n                if( poSrcDS->GetRasterBand(j)->GetOverviewCount() !=\n                                                        nSrcOverviews )\n                {\n                    CPLError(\n                        CE_Failure, CPLE_NotSupported,\n                        \"COPY_SRC_OVERVIEWS cannot be used when the bands have \"\n                        \"not the same number of overview levels.\" );\n                    CSLDestroy(papszCreateOptions);\n                    return nullptr;\n                }\n                for( int i = 0; i < nSrcOverviews; ++i )\n                {\n                    GDALRasterBand* poOvrBand =\n                        poSrcDS->GetRasterBand(j)->GetOverview(i);\n                    if( poOvrBand == nullptr )\n                    {\n                        CPLError(\n                            CE_Failure, CPLE_NotSupported,\n                            \"COPY_SRC_OVERVIEWS cannot be used when one \"\n                            \"overview band is NULL.\" );\n                        CSLDestroy(papszCreateOptions);\n                        return nullptr;\n                    }\n                    GDALRasterBand* poOvrFirstBand =\n                        poSrcDS->GetRasterBand(1)->GetOverview(i);\n                    if( poOvrBand->GetXSize() != poOvrFirstBand->GetXSize() ||\n                        poOvrBand->GetYSize() != poOvrFirstBand->GetYSize() )\n                    {\n                        CPLError(\n                            CE_Failure, CPLE_NotSupported,\n                            \"COPY_SRC_OVERVIEWS cannot be used when the \"\n                            \"overview bands have not the same dimensions \"\n                            \"among bands.\" );\n                        CSLDestroy(papszCreateOptions);\n                        return nullptr;\n                    }\n                }\n            }\n\n            for( int i = 0; i < nSrcOverviews; ++i )\n            {\n                dfExtraSpaceForOverviews +=\n                    static_cast<double>(\n                      poSrcDS->GetRasterBand(1)->GetOverview(i)->GetXSize() ) *\n                      poSrcDS->GetRasterBand(1)->GetOverview(i)->GetYSize();\n            }\n            dfExtraSpaceForOverviews *=\n                                l_nBands * GDALGetDataTypeSizeBytes(eType);\n        }\n        else\n        {\n            CPLDebug(\"GTiff\", \"No source overviews to copy\");\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Should we use optimized way of copying from an input JPEG       */\n/*      dataset?                                                        */\n/* -------------------------------------------------------------------- */\n\n// TODO(schwehr): Refactor bDirectCopyFromJPEG to be a const.\n#if defined(HAVE_LIBJPEG) || defined(JPEG_DIRECT_COPY)\n    bool bDirectCopyFromJPEG = false;\n#endif\n\n    // Note: JPEG_DIRECT_COPY is not defined by default, because it is mainly\n    // useful for debugging purposes.\n#ifdef JPEG_DIRECT_COPY\n    if( CPLFetchBool(papszCreateOptions, \"JPEG_DIRECT_COPY\", false) &&\n        GTIFF_CanDirectCopyFromJPEG(poSrcDS, papszCreateOptions) )\n    {\n        CPLDebug(\"GTiff\", \"Using special direct copy mode from a JPEG dataset\");\n\n        bDirectCopyFromJPEG = true;\n    }\n#endif\n\n#ifdef HAVE_LIBJPEG\n    bool bCopyFromJPEG = false;\n\n    // When CreateCopy'ing() from a JPEG dataset, and asking for COMPRESS=JPEG,\n    // use DCT coefficients (unless other options are incompatible, like\n    // strip/tile dimensions, specifying JPEG_QUALITY option, incompatible\n    // PHOTOMETRIC with the source colorspace, etc.) to avoid the lossy steps\n    // involved by decompression/recompression.\n    if( !bDirectCopyFromJPEG &&\n        GTIFF_CanCopyFromJPEG(poSrcDS, papszCreateOptions) )\n    {\n        CPLDebug( \"GTiff\", \"Using special copy mode from a JPEG dataset\" );\n\n        bCopyFromJPEG = true;\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      If the source is RGB, then set the PHOTOMETRIC=RGB value        */\n/* -------------------------------------------------------------------- */\n\n    const bool bForcePhotometric =\n        CSLFetchNameValue(papszOptions, \"PHOTOMETRIC\") != nullptr;\n\n    if( l_nBands >= 3 && !bForcePhotometric &&\n#ifdef HAVE_LIBJPEG\n        !bCopyFromJPEG &&\n#endif\n        poSrcDS->GetRasterBand(1)->GetColorInterpretation() == GCI_RedBand &&\n        poSrcDS->GetRasterBand(2)->GetColorInterpretation() == GCI_GreenBand &&\n        poSrcDS->GetRasterBand(3)->GetColorInterpretation() == GCI_BlueBand )\n    {\n        papszCreateOptions =\n            CSLSetNameValue( papszCreateOptions, \"PHOTOMETRIC\", \"RGB\" );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Create the file.                                                */\n/* -------------------------------------------------------------------- */\n    VSILFILE* l_fpL = nullptr;\n    CPLString l_osTmpFilename;\n\n    const int nXSize = poSrcDS->GetRasterXSize();\n    const int nYSize = poSrcDS->GetRasterYSize();\n    TIFF *l_hTIFF =\n        CreateLL( pszFilename, nXSize, nYSize, l_nBands,\n                  eType, dfExtraSpaceForOverviews, papszCreateOptions, &l_fpL,\n                  l_osTmpFilename );\n    const bool bStreaming = !l_osTmpFilename.empty();\n\n    CSLDestroy( papszCreateOptions );\n    papszCreateOptions = nullptr;\n\n    if( l_hTIFF == nullptr )\n    {\n        if( bStreaming ) VSIUnlink(l_osTmpFilename);\n        return nullptr;\n    }\n\n    uint16 l_nPlanarConfig = 0;\n    TIFFGetField( l_hTIFF, TIFFTAG_PLANARCONFIG, &l_nPlanarConfig );\n\n    uint16 l_nBitsPerSample = 0;\n    TIFFGetField(l_hTIFF, TIFFTAG_BITSPERSAMPLE, &l_nBitsPerSample );\n\n    uint16 l_nCompression = 0;\n\n    if( !TIFFGetField( l_hTIFF, TIFFTAG_COMPRESSION, &(l_nCompression) ) )\n        l_nCompression = COMPRESSION_NONE;\n\n/* -------------------------------------------------------------------- */\n/*      Set the alpha channel if it is the last one.                    */\n/* -------------------------------------------------------------------- */\n    if( poSrcDS->GetRasterBand(l_nBands)->GetColorInterpretation() ==\n        GCI_AlphaBand )\n    {\n        uint16 *v = nullptr;\n        uint16 count = 0;\n        if( TIFFGetField( l_hTIFF, TIFFTAG_EXTRASAMPLES, &count, &v ) )\n        {\n            const int nBaseSamples = l_nBands - count;\n            if( l_nBands > nBaseSamples && l_nBands - nBaseSamples - 1 < count )\n            {\n                // We need to allocate a new array as (current) libtiff\n                // versions will not like that we reuse the array we got from\n                // TIFFGetField().\n\n                uint16* pasNewExtraSamples =\n                    static_cast<uint16 *>(\n                        CPLMalloc( count * sizeof(uint16) ) );\n                memcpy( pasNewExtraSamples, v, count * sizeof(uint16) );\n                pasNewExtraSamples[l_nBands - nBaseSamples - 1] =\n                    GTiffGetAlphaValue(\n                        CPLGetConfigOption(\n                            \"GTIFF_ALPHA\",\n                            CSLFetchNameValue(papszOptions,\"ALPHA\") ),\n                        DEFAULT_ALPHA_TYPE);\n\n                TIFFSetField( l_hTIFF, TIFFTAG_EXTRASAMPLES, count,\n                              pasNewExtraSamples);\n\n                CPLFree(pasNewExtraSamples);\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      If the output is jpeg compressed, and the input is RGB make     */\n/*      sure we note that.                                              */\n/* -------------------------------------------------------------------- */\n\n    if( l_nCompression == COMPRESSION_JPEG )\n    {\n        if( l_nBands >= 3\n            && (poSrcDS->GetRasterBand(1)->GetColorInterpretation()\n                == GCI_YCbCr_YBand)\n            && (poSrcDS->GetRasterBand(2)->GetColorInterpretation()\n                == GCI_YCbCr_CbBand)\n            && (poSrcDS->GetRasterBand(3)->GetColorInterpretation()\n                == GCI_YCbCr_CrBand) )\n        {\n            // Do nothing.\n        }\n        else\n        {\n            // Assume RGB if it is not explicitly YCbCr.\n            CPLDebug( \"GTiff\", \"Setting JPEGCOLORMODE_RGB\" );\n            TIFFSetField( l_hTIFF, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB );\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Does the source image consist of one band, with a palette?      */\n/*      If so, copy over.                                               */\n/* -------------------------------------------------------------------- */\n    if( (l_nBands == 1 || l_nBands == 2) &&\n        poSrcDS->GetRasterBand(1)->GetColorTable() != nullptr\n        && eType == GDT_Byte )\n    {\n        unsigned short anTRed[256] = { 0 };\n        unsigned short anTGreen[256] = { 0 };\n        unsigned short anTBlue[256] = { 0 };\n        GDALColorTable *poCT = poSrcDS->GetRasterBand(1)->GetColorTable();\n\n        for( int iColor = 0; iColor < 256; ++iColor )\n        {\n            if( iColor < poCT->GetColorEntryCount() )\n            {\n                GDALColorEntry sRGB = { 0, 0, 0, 0 };\n\n                poCT->GetColorEntryAsRGB( iColor, &sRGB );\n\n                anTRed[iColor] = static_cast<unsigned short>(257 * sRGB.c1);\n                anTGreen[iColor] = static_cast<unsigned short>(257 * sRGB.c2);\n                anTBlue[iColor] = static_cast<unsigned short>(257 * sRGB.c3);\n            }\n            else\n            {\n                anTRed[iColor] = 0;\n                anTGreen[iColor] = 0;\n                anTBlue[iColor] = 0;\n            }\n        }\n\n        if( !bForcePhotometric )\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_PALETTE );\n        TIFFSetField( l_hTIFF, TIFFTAG_COLORMAP, anTRed, anTGreen, anTBlue );\n    }\n    else if( (l_nBands == 1 || l_nBands == 2)\n             && poSrcDS->GetRasterBand(1)->GetColorTable() != nullptr\n             && eType == GDT_UInt16 )\n    {\n        unsigned short *panTRed = static_cast<unsigned short *>(\n            CPLMalloc(65536 * sizeof(unsigned short)) );\n        unsigned short *panTGreen = static_cast<unsigned short *>(\n            CPLMalloc(65536 * sizeof(unsigned short)) );\n        unsigned short *panTBlue = static_cast<unsigned short *>(\n            CPLMalloc(65536 * sizeof(unsigned short)) );\n\n        GDALColorTable *poCT = poSrcDS->GetRasterBand(1)->GetColorTable();\n\n        for( int iColor = 0; iColor < 65536; ++iColor )\n        {\n            if( iColor < poCT->GetColorEntryCount() )\n            {\n                GDALColorEntry sRGB = { 0, 0, 0, 0 };\n\n                poCT->GetColorEntryAsRGB( iColor, &sRGB );\n\n                panTRed[iColor] = static_cast<unsigned short>(257 * sRGB.c1);\n                panTGreen[iColor] = static_cast<unsigned short>(257 * sRGB.c2);\n                panTBlue[iColor] = static_cast<unsigned short>(257 * sRGB.c3);\n            }\n            else\n            {\n                panTRed[iColor] = 0;\n                panTGreen[iColor] = 0;\n                panTBlue[iColor] = 0;\n            }\n        }\n\n        if( !bForcePhotometric )\n            TIFFSetField( l_hTIFF, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_PALETTE );\n        TIFFSetField( l_hTIFF, TIFFTAG_COLORMAP, panTRed, panTGreen, panTBlue );\n\n        CPLFree( panTRed );\n        CPLFree( panTGreen );\n        CPLFree( panTBlue );\n    }\n    else if( poSrcDS->GetRasterBand(1)->GetColorTable() != nullptr )\n        CPLError(\n            CE_Warning, CPLE_AppDefined,\n            \"Unable to export color table to GeoTIFF file.  Color tables \"\n            \"can only be written to 1 band or 2 bands Byte or \"\n            \"UInt16 GeoTIFF files.\" );\n\n    if( l_nBands == 2\n        && poSrcDS->GetRasterBand(1)->GetColorTable() != nullptr\n        && (eType == GDT_Byte || eType == GDT_UInt16) )\n    {\n        uint16 v[1] = { EXTRASAMPLE_UNASSALPHA };\n\n        TIFFSetField(l_hTIFF, TIFFTAG_EXTRASAMPLES, 1, v );\n    }\n\n    // FIXME? libtiff writes extended tags in the order they are specified\n    // and not in increasing order.\n\n/* -------------------------------------------------------------------- */\n/*      Transfer some TIFF specific metadata, if available.             */\n/*      The return value will tell us if we need to try again later with*/\n/*      PAM because the profile doesn't allow to write some metadata    */\n/*      as TIFF tag                                                     */\n/* -------------------------------------------------------------------- */\n    const bool bHasWrittenMDInGeotiffTAG =\n            GTiffDataset::WriteMetadata( poSrcDS, l_hTIFF, false, pszProfile,\n                                         pszFilename, papszOptions );\n\n/* -------------------------------------------------------------------- */\n/*      Write NoData value, if exist.                                   */\n/* -------------------------------------------------------------------- */\n    if( EQUAL(pszProfile,szPROFILE_GDALGeoTIFF) )\n    {\n        int bSuccess = FALSE;\n        const double dfNoData =\n            poSrcDS->GetRasterBand(1)->GetNoDataValue( &bSuccess );\n        if( bSuccess )\n            GTiffDataset::WriteNoDataValue( l_hTIFF, dfNoData );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Are we addressing PixelIsPoint mode?                            */\n/* -------------------------------------------------------------------- */\n    bool bPixelIsPoint = false;\n    bool bPointGeoIgnore = false;\n\n    if( poSrcDS->GetMetadataItem( GDALMD_AREA_OR_POINT )\n        && EQUAL(poSrcDS->GetMetadataItem(GDALMD_AREA_OR_POINT),\n                 GDALMD_AOP_POINT) )\n    {\n        bPixelIsPoint = true;\n        bPointGeoIgnore =\n            CPLTestBool( CPLGetConfigOption( \"GTIFF_POINT_GEO_IGNORE\",\n                                             \"FALSE\") );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write affine transform if it is meaningful.                     */\n/* -------------------------------------------------------------------- */\n    const OGRSpatialReference* l_poSRS = nullptr;\n    double l_adfGeoTransform[6] = { 0.0 };\n\n    if( poSrcDS->GetGeoTransform( l_adfGeoTransform ) == CE_None )\n    {\n        if( bGeoTIFF )\n        {\n            l_poSRS = poSrcDS->GetSpatialRef();\n\n            if( l_adfGeoTransform[2] == 0.0 && l_adfGeoTransform[4] == 0.0\n                && l_adfGeoTransform[5] < 0.0 )\n            {\n                double dfOffset = 0.0;\n                {\n                    // In the case the SRS has a vertical component and we have\n                    // a single band, encode its scale/offset in the GeoTIFF tags\n                    int bHasScale = FALSE;\n                    double dfScale =\n                        poSrcDS->GetRasterBand(1)->GetScale(&bHasScale);\n                    int bHasOffset = FALSE;\n                    dfOffset =\n                        poSrcDS->GetRasterBand(1)->GetOffset(&bHasOffset);\n                    const bool bApplyScaleOffset =\n                        l_poSRS && l_poSRS->IsVertical() &&\n                        poSrcDS->GetRasterCount() == 1;\n                    if( bApplyScaleOffset && !bHasScale )\n                        dfScale = 1.0;\n                    if( !bApplyScaleOffset || !bHasOffset )\n                        dfOffset = 0.0;\n                    const double adfPixelScale[3] = {\n                        l_adfGeoTransform[1], fabs(l_adfGeoTransform[5]),\n                        bApplyScaleOffset ? dfScale : 0.0 };\n\n                    TIFFSetField( l_hTIFF, TIFFTAG_GEOPIXELSCALE, 3,\n                                  adfPixelScale );\n                }\n\n                double adfTiePoints[6] = {\n                    0.0,\n                    0.0,\n                    0.0,\n                    l_adfGeoTransform[0],\n                    l_adfGeoTransform[3],\n                    dfOffset\n                };\n\n                if( bPixelIsPoint && !bPointGeoIgnore )\n                {\n                    adfTiePoints[3] +=\n                        l_adfGeoTransform[1] * 0.5 + l_adfGeoTransform[2] * 0.5;\n                    adfTiePoints[4] +=\n                        l_adfGeoTransform[4] * 0.5 + l_adfGeoTransform[5] * 0.5;\n                }\n\n                TIFFSetField( l_hTIFF, TIFFTAG_GEOTIEPOINTS, 6, adfTiePoints );\n            }\n            else\n            {\n                double adfMatrix[16] = { 0.0 };\n\n                adfMatrix[0] = l_adfGeoTransform[1];\n                adfMatrix[1] = l_adfGeoTransform[2];\n                adfMatrix[3] = l_adfGeoTransform[0];\n                adfMatrix[4] = l_adfGeoTransform[4];\n                adfMatrix[5] = l_adfGeoTransform[5];\n                adfMatrix[7] = l_adfGeoTransform[3];\n                adfMatrix[15] = 1.0;\n\n                if( bPixelIsPoint && !bPointGeoIgnore )\n                {\n                    adfMatrix[3] +=\n                        l_adfGeoTransform[1] * 0.5 + l_adfGeoTransform[2] * 0.5;\n                    adfMatrix[7] +=\n                        l_adfGeoTransform[4] * 0.5 + l_adfGeoTransform[5] * 0.5;\n                }\n\n                TIFFSetField( l_hTIFF, TIFFTAG_GEOTRANSMATRIX, 16, adfMatrix );\n            }\n        }\n\n/* -------------------------------------------------------------------- */\n/*      Do we need a TFW file?                                          */\n/* -------------------------------------------------------------------- */\n        if( CPLFetchBool( papszOptions, \"TFW\", false ) )\n            GDALWriteWorldFile( pszFilename, \"tfw\", l_adfGeoTransform );\n        else if( CPLFetchBool( papszOptions, \"WORLDFILE\", false ) )\n            GDALWriteWorldFile( pszFilename, \"wld\", l_adfGeoTransform );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Otherwise write tiepoints if they are available.                */\n/* -------------------------------------------------------------------- */\n    else if( poSrcDS->GetGCPCount() > 0 && bGeoTIFF )\n    {\n        const GDAL_GCP *pasGCPs = poSrcDS->GetGCPs();\n        double *padfTiePoints = static_cast<double *>(\n            CPLMalloc(6 * sizeof(double) * poSrcDS->GetGCPCount()) );\n\n        for( int iGCP = 0; iGCP < poSrcDS->GetGCPCount(); ++iGCP )\n        {\n\n            padfTiePoints[iGCP*6+0] = pasGCPs[iGCP].dfGCPPixel;\n            padfTiePoints[iGCP*6+1] = pasGCPs[iGCP].dfGCPLine;\n            padfTiePoints[iGCP*6+2] = 0;\n            padfTiePoints[iGCP*6+3] = pasGCPs[iGCP].dfGCPX;\n            padfTiePoints[iGCP*6+4] = pasGCPs[iGCP].dfGCPY;\n            padfTiePoints[iGCP*6+5] = pasGCPs[iGCP].dfGCPZ;\n\n            if( bPixelIsPoint && !bPointGeoIgnore )\n            {\n                padfTiePoints[iGCP*6+0] += 0.5;\n                padfTiePoints[iGCP*6+1] += 0.5;\n            }\n        }\n\n        TIFFSetField( l_hTIFF, TIFFTAG_GEOTIEPOINTS,\n                      6*poSrcDS->GetGCPCount(), padfTiePoints );\n        CPLFree( padfTiePoints );\n\n        l_poSRS = poSrcDS->GetGCPSpatialRef();\n\n        if( CPLFetchBool( papszOptions, \"TFW\", false )\n            || CPLFetchBool( papszOptions, \"WORLDFILE\", false ) )\n        {\n            CPLError(\n                CE_Warning, CPLE_AppDefined,\n                \"TFW=ON or WORLDFILE=ON creation options are ignored when \"\n                \"GCPs are available\" );\n        }\n    }\n    else\n    {\n        l_poSRS = poSrcDS->GetSpatialRef();\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Write the projection information, if possible.                  */\n/* -------------------------------------------------------------------- */\n    const bool bHasProjection = l_poSRS != nullptr;\n    if( (bHasProjection || bPixelIsPoint) && bGeoTIFF )\n    {\n        GTIF *psGTIF = GTiffDatasetGTIFNew( l_hTIFF );\n\n        if( bHasProjection )\n        {\n            char* pszWKT = nullptr;\n            l_poSRS->exportToWkt(&pszWKT);\n            GTIFSetFromOGISDefnEx( psGTIF, pszWKT,\n                                   GetGTIFFKeysFlavor(papszOptions) );\n            CPLFree(pszWKT);\n        }\n\n        if( bPixelIsPoint )\n        {\n            GTIFKeySet( psGTIF, GTRasterTypeGeoKey, TYPE_SHORT, 1,\n                        RasterPixelIsPoint );\n        }\n\n        GTIFWriteKeys( psGTIF );\n        GTIFFree( psGTIF );\n    }\n\n    bool l_bDontReloadFirstBlock = false;\n\n#ifdef HAVE_LIBJPEG\n    if( bCopyFromJPEG )\n    {\n        GTIFF_CopyFromJPEG_WriteAdditionalTags(l_hTIFF,\n                                               poSrcDS);\n    }\n#endif\n\n#if defined(HAVE_LIBJPEG) && !defined(BIGTIFF_SUPPORT)\n    else\n#endif\n\n#if !defined(BIGTIFF_SUPPORT)\n    /* -------------------------------------------------------------------- */\n    /*      If we are writing jpeg compression we need to write some        */\n    /*      imagery to force the jpegtables to get created.  This is,       */\n    /*      likely only needed with libtiff >= 3.9.3 (#3633)                */\n    /* -------------------------------------------------------------------- */\n    if( l_nCompression == COMPRESSION_JPEG\n            && strstr(TIFFLIB_VERSION_STR, \"Version 3.9\") != nullptr )\n    {\n        CPLDebug( \"GDAL\",\n                  \"Writing zero block to force creation of JPEG tables.\" );\n        if( TIFFIsTiled( l_hTIFF ) )\n        {\n            const auto cc = TIFFTileSize( l_hTIFF );\n            unsigned char *pabyZeros =\n                static_cast<unsigned char *>( CPLCalloc(cc, 1) );\n            TIFFWriteEncodedTile( l_hTIFF, 0, pabyZeros, cc );\n            CPLFree( pabyZeros );\n        }\n        else\n        {\n            const auto cc = TIFFStripSize( l_hTIFF );\n            unsigned char *pabyZeros =\n                static_cast<unsigned char *>( CPLCalloc(cc,1) );\n            TIFFWriteEncodedStrip( l_hTIFF, 0, pabyZeros, cc );\n            CPLFree( pabyZeros );\n        }\n        l_bDontReloadFirstBlock = true;\n    }\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Cleanup                                                         */\n/* -------------------------------------------------------------------- */\n\n    TIFFWriteCheck( l_hTIFF, TIFFIsTiled(l_hTIFF), \"GTiffCreateCopy()\" );\n    TIFFWriteDirectory( l_hTIFF );\n    if( bStreaming )\n    {\n        // We need to write twice the directory to be sure that custom\n        // TIFF tags are correctly sorted and that padding bytes have been\n        // added.\n        TIFFSetDirectory( l_hTIFF, 0 );\n        TIFFWriteDirectory( l_hTIFF );\n\n        if( VSIFSeekL( l_fpL, 0, SEEK_END ) != 0 )\n            CPLError(CE_Failure, CPLE_FileIO, \"Cannot seek\");\n        const int nSize = static_cast<int>( VSIFTellL(l_fpL) );\n\n        vsi_l_offset nDataLength = 0;\n        VSIGetMemFileBuffer( l_osTmpFilename, &nDataLength, FALSE);\n        TIFFSetDirectory( l_hTIFF, 0 );\n        GTiffFillStreamableOffsetAndCount( l_hTIFF, nSize );\n        TIFFWriteDirectory( l_hTIFF );\n    }\n    TIFFSetDirectory( l_hTIFF,\n                    static_cast<tdir_t>(TIFFNumberOfDirectories(l_hTIFF) - 1) );\n    const toff_t l_nDirOffset = TIFFCurrentDirOffset( l_hTIFF );\n    TIFFFlush( l_hTIFF );\n    XTIFFClose( l_hTIFF );\n    l_hTIFF = nullptr;\n\n    {\n        const CPLErr eErr = VSIFCloseL(l_fpL) == 0 ? CE_None : CE_Failure;\n        l_fpL = nullptr;\n\n        if( eErr != CE_None )\n        {\n            VSIUnlink( bStreaming ? l_osTmpFilename.c_str() : pszFilename );\n            return nullptr;\n        }\n    }\n\n    // fpStreaming will assigned to the instance and not closed here.\n    VSILFILE *fpStreaming = nullptr;\n    if( bStreaming )\n    {\n        vsi_l_offset nDataLength = 0;\n        void* pabyBuffer =\n            VSIGetMemFileBuffer( l_osTmpFilename, &nDataLength, FALSE);\n        fpStreaming = VSIFOpenL( pszFilename, \"wb\" );\n        if( fpStreaming == nullptr )\n        {\n            VSIUnlink(l_osTmpFilename);\n            return nullptr;\n        }\n        if( static_cast<vsi_l_offset>(\n                VSIFWriteL( pabyBuffer, 1, static_cast<int>(nDataLength),\n                            fpStreaming ) ) != nDataLength )\n        {\n            CPLError( CE_Failure, CPLE_FileIO, \"Could not write %d bytes\",\n                      static_cast<int>(nDataLength) );\n            CPL_IGNORE_RET_VAL(VSIFCloseL( fpStreaming ));\n            VSIUnlink(l_osTmpFilename);\n            return nullptr;\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Re-open as a dataset and copy over missing metadata using       */\n/*      PAM facilities.                                                 */\n/* -------------------------------------------------------------------- */\n    CPLString osFileName(\"GTIFF_RAW:\");\n    const bool bAppend = CPLFetchBool(papszOptions, \"APPEND_SUBDATASET\", false);\n    if( bAppend )\n    {\n        osFileName += CPLSPrintf(\"GTIFF_DIR:off:\" CPL_FRMT_GUIB \":\",\n                                 static_cast<GUIntBig>(l_nDirOffset));\n    }\n\n    osFileName += bStreaming ? l_osTmpFilename.c_str() : pszFilename;\n\n    GDALOpenInfo oOpenInfo( osFileName, GA_Update );\n    if( bAppend )\n    {\n        static const char* const apszOpenOptions[] = { \"ALLOW_UPDATE=YES\", nullptr };\n        oOpenInfo.papszOpenOptions = const_cast<char**>(apszOpenOptions);\n    }\n    if( bStreaming )\n    {\n        // In case of single strip file, there's a libtiff check that would\n        // issue a warning since the file hasn't the required size.\n        CPLPushErrorHandler(CPLQuietErrorHandler);\n    }\n    GTiffDataset *poDS = cpl::down_cast<GTiffDataset *>( Open(&oOpenInfo) );\n    if( bStreaming )\n        CPLPopErrorHandler();\n    if( poDS == nullptr )\n    {\n        oOpenInfo.eAccess = GA_ReadOnly;\n        poDS = cpl::down_cast<GTiffDataset *>( Open(&oOpenInfo) );\n    }\n\n    if( poDS == nullptr )\n    {\n        VSIUnlink( bStreaming ? l_osTmpFilename.c_str() : pszFilename );\n        return nullptr;\n    }\n    poDS->eAccess = GA_Update;\n    poDS->osFilename = pszFilename;\n\n    if( bStreaming )\n    {\n        VSIUnlink(l_osTmpFilename);\n        poDS->fpToWrite = fpStreaming;\n    }\n    poDS->osProfile = pszProfile;\n\n    int nCloneInfoFlags = GCIF_PAM_DEFAULT & ~GCIF_MASK;\n\n    // If we explicitly asked not to tag the alpha band as such, do not\n    // reintroduce this alpha color interpretation in PAM.\n    if( poSrcDS->GetRasterBand(l_nBands)->GetColorInterpretation() ==\n        GCI_AlphaBand &&\n        GTiffGetAlphaValue(\n            CPLGetConfigOption(\n                \"GTIFF_ALPHA\",\n                CSLFetchNameValue(papszOptions,\"ALPHA\") ),\n            DEFAULT_ALPHA_TYPE) == EXTRASAMPLE_UNSPECIFIED )\n    {\n        nCloneInfoFlags &= ~GCIF_COLORINTERP;\n    }\n    // Ignore source band color interpretation if requesting PHOTOMETRIC=RGB\n    else if( l_nBands >= 3 &&\n        EQUAL(CSLFetchNameValueDef(papszOptions, \"PHOTOMETRIC\", \"\"), \"RGB\") )\n    {\n        for( int i = 1; i <= 3; i++)\n        {\n            poDS->GetRasterBand(i)->SetColorInterpretation(\n                static_cast<GDALColorInterp>(GCI_RedBand + (i-1)));\n        }\n        nCloneInfoFlags &= ~GCIF_COLORINTERP;\n        if( !(l_nBands == 4 && CSLFetchNameValue(papszOptions, \"ALPHA\") != nullptr) )\n        {\n            for( int i = 4; i <= l_nBands; i++)\n            {\n                poDS->GetRasterBand(i)->SetColorInterpretation(\n                    poSrcDS->GetRasterBand(i)->GetColorInterpretation());\n            }\n        }\n    }\n\n    CPLString osOldGTIFF_REPORT_COMPD_CSVal(\n        CPLGetConfigOption(\"GTIFF_REPORT_COMPD_CS\", \"\"));\n    CPLSetThreadLocalConfigOption(\"GTIFF_REPORT_COMPD_CS\", \"YES\");\n    poDS->CloneInfo( poSrcDS, nCloneInfoFlags );\n    CPLSetThreadLocalConfigOption(\"GTIFF_REPORT_COMPD_CS\",\n        osOldGTIFF_REPORT_COMPD_CSVal.empty() ? nullptr :\n        osOldGTIFF_REPORT_COMPD_CSVal.c_str());\n\n    if( !bGeoTIFF && (poDS->GetPamFlags() & GPF_DISABLED) == 0 )\n    {\n        // Copy georeferencing info to PAM if the profile is not GeoTIFF\n        poDS->GDALPamDataset::SetSpatialRef(poDS->GetSpatialRef());\n        double adfGeoTransform[6];\n        if( poDS->GetGeoTransform(adfGeoTransform) == CE_None )\n        {\n            poDS->GDALPamDataset::SetGeoTransform(adfGeoTransform);\n        }\n        poDS->GDALPamDataset::SetGCPs(poDS->GetGCPCount(),\n                                      poDS->GetGCPs(),\n                                      poDS->GetGCPSpatialRef());\n    }\n\n    poDS->papszCreationOptions = CSLDuplicate( papszOptions );\n    poDS->bDontReloadFirstBlock = l_bDontReloadFirstBlock;\n\n/* -------------------------------------------------------------------- */\n/*      CloneInfo() does not merge metadata, it just replaces it        */\n/*      totally.  So we have to merge it.                               */\n/* -------------------------------------------------------------------- */\n\n    char **papszSRC_MD = poSrcDS->GetMetadata();\n    char **papszDST_MD = CSLDuplicate(poDS->GetMetadata());\n\n    papszDST_MD = CSLMerge( papszDST_MD, papszSRC_MD );\n\n    poDS->SetMetadata( papszDST_MD );\n    CSLDestroy( papszDST_MD );\n\n    // Depending on the PHOTOMETRIC tag, the TIFF file may not have the same\n    // band count as the source. Will fail later in GDALDatasetCopyWholeRaster\n    // anyway.\n    for( int nBand = 1;\n         nBand <= std::min(poDS->GetRasterCount(), poSrcDS->GetRasterCount()) ;\n         ++nBand )\n    {\n        GDALRasterBand* poSrcBand = poSrcDS->GetRasterBand(nBand);\n        GDALRasterBand* poDstBand = poDS->GetRasterBand(nBand);\n        papszSRC_MD = poSrcBand->GetMetadata();\n        papszDST_MD = CSLDuplicate(poDstBand->GetMetadata());\n\n        papszDST_MD = CSLMerge( papszDST_MD, papszSRC_MD );\n\n        poDstBand->SetMetadata( papszDST_MD );\n        CSLDestroy( papszDST_MD );\n\n        char** papszCatNames = poSrcBand->GetCategoryNames();\n        if( nullptr != papszCatNames )\n            poDstBand->SetCategoryNames( papszCatNames );\n    }\n\n    l_hTIFF = static_cast<TIFF *>( poDS->GetInternalHandle(nullptr) );\n\n/* -------------------------------------------------------------------- */\n/*      Handle forcing xml:ESRI data to be written to PAM.              */\n/* -------------------------------------------------------------------- */\n    if( CPLTestBool(CPLGetConfigOption( \"ESRI_XML_PAM\", \"NO\" )) )\n    {\n        char **papszESRIMD = poSrcDS->GetMetadata(\"xml:ESRI\");\n        if( papszESRIMD )\n        {\n            poDS->SetMetadata( papszESRIMD, \"xml:ESRI\");\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Second chance: now that we have a PAM dataset, it is possible   */\n/*      to write metadata that we could not write as a TIFF tag.        */\n/* -------------------------------------------------------------------- */\n    if( !bHasWrittenMDInGeotiffTAG && !bStreaming )\n        GTiffDataset::WriteMetadata(\n            poDS, l_hTIFF, true, pszProfile,\n            pszFilename, papszOptions,\n            true /* don't write RPC and IMD file again */ );\n\n    if( !bStreaming )\n        GTiffDataset::WriteRPC(\n            poDS, l_hTIFF, true, pszProfile,\n            pszFilename, papszOptions,\n            true /* write only in PAM AND if needed */ );\n\n    // To avoid unnecessary directory rewriting.\n    poDS->bMetadataChanged = false;\n    poDS->bGeoTIFFInfoChanged = false;\n    poDS->bNoDataChanged = false;\n    poDS->bForceUnsetGTOrGCPs = false;\n    poDS->bForceUnsetProjection = false;\n    poDS->bStreamingOut = bStreaming;\n\n    // Don't try to load external metadata files (#6597).\n    poDS->bIMDRPCMetadataLoaded = true;\n\n    // We must re-set the compression level at this point, since it has been\n    // lost a few lines above when closing the newly create TIFF file The\n    // TIFFTAG_ZIPQUALITY & TIFFTAG_JPEGQUALITY are not store in the TIFF file.\n    // They are just TIFF session parameters.\n\n    poDS->nZLevel = GTiffGetZLevel(papszOptions);\n    poDS->nLZMAPreset = GTiffGetLZMAPreset(papszOptions);\n    poDS->nZSTDLevel = GTiffGetZSTDPreset(papszOptions);\n    poDS->nWebPLevel = GTiffGetWebPLevel(papszOptions);\n    poDS->bWebPLossless = GTiffGetWebPLossless(papszOptions);\n    poDS->nJpegQuality = GTiffGetJpegQuality(papszOptions);\n    poDS->nJpegTablesMode = GTiffGetJpegTablesMode(papszOptions);\n    poDS->GetDiscardLsbOption(papszOptions);\n#if HAVE_LERC\n    poDS->dfMaxZError = GTiffGetLERCMaxZError(papszOptions);\n#endif\n    poDS->InitCreationOrOpenOptions(papszOptions);\n\n    if( l_nCompression == COMPRESSION_ADOBE_DEFLATE ||\n        l_nCompression == COMPRESSION_LERC )\n    {\n        if( poDS->nZLevel != -1 )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_ZIPQUALITY, poDS->nZLevel );\n        }\n    }\n    if( l_nCompression == COMPRESSION_JPEG )\n    {\n        if( poDS->nJpegQuality != -1 )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_JPEGQUALITY, poDS->nJpegQuality );\n        }\n        TIFFSetField( l_hTIFF, TIFFTAG_JPEGTABLESMODE, poDS->nJpegTablesMode );\n    }\n    if( l_nCompression == COMPRESSION_LZMA )\n    {\n        if( poDS->nLZMAPreset != -1 )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_LZMAPRESET, poDS->nLZMAPreset );\n        }\n    }\n    if( l_nCompression == COMPRESSION_ZSTD ||\n        l_nCompression == COMPRESSION_LERC )\n    {\n        if( poDS->nZSTDLevel != -1 )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_ZSTD_LEVEL, poDS->nZSTDLevel );\n        }\n    }\n#if HAVE_LERC\n    if( l_nCompression == COMPRESSION_LERC )\n    {\n        TIFFSetField( l_hTIFF, TIFFTAG_LERC_MAXZERROR, poDS->dfMaxZError );\n    }\n#endif\n    if( l_nCompression == COMPRESSION_WEBP )\n    {\n        if( poDS->nWebPLevel != -1 )\n        {\n            TIFFSetField( l_hTIFF, TIFFTAG_WEBP_LEVEL, poDS->nWebPLevel );\n        }\n\n        if( poDS->bWebPLossless)\n        {\n          TIFFSetField( l_hTIFF, TIFFTAG_WEBP_LOSSLESS, poDS->bWebPLossless );\n        }\n    }\n\n    // Precreate (internal) mask, so that the IBuildOverviews() below\n    // has a chance to create also the overviews of the mask.\n    CPLErr eErr = CE_None;\n\n    const int nMaskFlags = poSrcDS->GetRasterBand(1)->GetMaskFlags();\n    bool bMask = false;\n    if( !(nMaskFlags & (GMF_ALL_VALID|GMF_ALPHA|GMF_NODATA) )\n        && (nMaskFlags & GMF_PER_DATASET) && !bStreaming )\n    {\n        bMask = true;\n        eErr = poDS->CreateMaskBand( nMaskFlags );\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Create and then copy existing overviews if requested            */\n/*  We do it such that all the IFDs are at the beginning of the file,   */\n/*  and that the imagery data for the smallest overview is written      */\n/*  first, that way the file is more usable when embedded in a          */\n/*  compressed stream.                                                  */\n/* -------------------------------------------------------------------- */\n\n    // For scaled progress due to overview copying.\n    const int nBandsWidthMask = l_nBands +  (bMask ? 1 : 0);\n    double dfTotalPixels =\n        static_cast<double>(nXSize) * nYSize * nBandsWidthMask;\n    double dfCurPixels = 0;\n\n    if( eErr == CE_None &&\n        CPLFetchBool(papszOptions, \"COPY_SRC_OVERVIEWS\", false) )\n    {\n        const int nSrcOverviews = poSrcDS->GetRasterBand(1)->GetOverviewCount();\n        if( nSrcOverviews )\n        {\n            eErr = poDS->CreateOverviewsFromSrcOverviews(poSrcDS);\n\n            if( poDS->nOverviewCount != nSrcOverviews )\n            {\n                CPLError( CE_Failure, CPLE_AppDefined,\n                        \"Did only manage to instantiate %d overview levels, \"\n                        \"whereas source contains %d\",\n                        poDS->nOverviewCount, nSrcOverviews);\n                eErr = CE_Failure;\n            }\n\n            for( int i = 0; i < nSrcOverviews; ++i )\n            {\n                GDALRasterBand* poOvrBand =\n                    poSrcDS->GetRasterBand(1)->GetOverview(i);\n                const double dfOvrPixels =\n                    static_cast<double>(poOvrBand->GetXSize()) *\n                                poOvrBand->GetYSize();\n                dfTotalPixels += dfOvrPixels * l_nBands;\n                if( poOvrBand->GetMaskFlags() == GMF_PER_DATASET )\n                {\n                    dfTotalPixels += dfOvrPixels;\n                }\n                else if( i == 0 &&\n                         poDS->GetRasterBand(1)->GetMaskFlags() == GMF_PER_DATASET )\n                {\n                    CPLError(CE_Warning, CPLE_AppDefined,\n                             \"Source dataset has a mask band on full \"\n                             \"resolution, overviews on the regular bands, \"\n                             \"but lacks overviews on the mask band.\");\n                }\n            }\n\n            char* papszCopyWholeRasterOptions[2] = { nullptr, nullptr };\n            if( l_nCompression != COMPRESSION_NONE )\n                papszCopyWholeRasterOptions[0] =\n                    const_cast<char*>( \"COMPRESSED=YES\" );\n            // Now copy the imagery.\n            for( int i = 0; eErr == CE_None && i < nSrcOverviews; ++i )\n            {\n                // Begin with the smallest overview.\n                const int iOvrLevel = nSrcOverviews - 1 - i;\n\n                // Create a fake dataset with the source overview level so that\n                // GDALDatasetCopyWholeRaster can cope with it.\n                GDALDataset* poSrcOvrDS =\n                    GDALCreateOverviewDataset(poSrcDS, iOvrLevel, TRUE);\n\n                GDALRasterBand* poOvrBand =\n                        poSrcDS->GetRasterBand(1)->GetOverview(iOvrLevel);\n                double dfNextCurPixels =\n                    dfCurPixels +\n                    static_cast<double>(poOvrBand->GetXSize()) *\n                    poOvrBand->GetYSize() * l_nBands;\n\n                void* pScaledData =\n                    GDALCreateScaledProgress( dfCurPixels / dfTotalPixels,\n                                            dfNextCurPixels / dfTotalPixels,\n                                            pfnProgress, pProgressData );\n\n                eErr =\n                    GDALDatasetCopyWholeRaster(\n                        GDALDataset::ToHandle(poSrcOvrDS),\n                        GDALDataset::ToHandle(poDS->papoOverviewDS[iOvrLevel]),\n                        papszCopyWholeRasterOptions,\n                        GDALScaledProgress, pScaledData );\n\n                dfCurPixels = dfNextCurPixels;\n                GDALDestroyScaledProgress(pScaledData);\n\n                delete poSrcOvrDS;\n                poSrcOvrDS = nullptr;\n                poDS->papoOverviewDS[iOvrLevel]->FlushCache();\n\n                // Copy mask of the overview.\n                if( eErr == CE_None &&\n                    poOvrBand->GetMaskFlags() == GMF_PER_DATASET &&\n                    poDS->papoOverviewDS[iOvrLevel]->poMaskDS != nullptr )\n                {\n                    dfNextCurPixels +=\n                        static_cast<double>(poOvrBand->GetXSize()) *\n                                            poOvrBand->GetYSize();\n                    pScaledData =\n                        GDALCreateScaledProgress( dfCurPixels / dfTotalPixels,\n                                            dfNextCurPixels / dfTotalPixels,\n                                            pfnProgress, pProgressData );\n                    eErr =\n                        GDALRasterBandCopyWholeRaster(\n                            poOvrBand->GetMaskBand(),\n                            poDS->papoOverviewDS[iOvrLevel]->\n                            poMaskDS->GetRasterBand(1),\n                            papszCopyWholeRasterOptions,\n                            GDALScaledProgress, pScaledData );\n                    dfCurPixels = dfNextCurPixels;\n                    GDALDestroyScaledProgress(pScaledData);\n                    poDS->papoOverviewDS[iOvrLevel]->poMaskDS->FlushCache();\n                }\n            }\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Copy actual imagery.                                            */\n/* -------------------------------------------------------------------- */\n    double dfNextCurPixels =\n        dfCurPixels + static_cast<double>(nXSize) * nYSize * l_nBands;\n    void* pScaledData = GDALCreateScaledProgress(\n        dfCurPixels / dfTotalPixels,\n        dfNextCurPixels / dfTotalPixels,\n        pfnProgress, pProgressData);\n\n#if defined(HAVE_LIBJPEG) || defined(JPEG_DIRECT_COPY)\n    bool bTryCopy = true;\n#endif\n\n#ifdef HAVE_LIBJPEG\n    if( bCopyFromJPEG )\n    {\n        eErr = GTIFF_CopyFromJPEG( poDS, poSrcDS,\n                                   pfnProgress, pProgressData,\n                                   bTryCopy );\n\n        // In case of failure in the decompression step, try normal copy.\n        if( bTryCopy )\n            eErr = CE_None;\n    }\n#endif\n\n#ifdef JPEG_DIRECT_COPY\n    if( bDirectCopyFromJPEG )\n    {\n        eErr = GTIFF_DirectCopyFromJPEG(poDS, poSrcDS,\n                                        pfnProgress, pProgressData,\n                                        bTryCopy);\n\n        // In case of failure in the reading step, try normal copy.\n        if( bTryCopy )\n            eErr = CE_None;\n    }\n#endif\n\n    if( \n#if defined(HAVE_LIBJPEG) || defined(JPEG_DIRECT_COPY)\n        bTryCopy &&\n#endif\n        (poDS->bTreatAsSplit || poDS->bTreatAsSplitBitmap) )\n    {\n        // For split bands, we use TIFFWriteScanline() interface.\n        CPLAssert(poDS->nBitsPerSample == 8 || poDS->nBitsPerSample == 1);\n\n        if( poDS->nPlanarConfig == PLANARCONFIG_CONTIG && poDS->nBands > 1 )\n        {\n            GByte* pabyScanline =\n                static_cast<GByte *>(\n                    VSI_MALLOC_VERBOSE(TIFFScanlineSize(l_hTIFF)) );\n            if( pabyScanline == nullptr )\n                eErr = CE_Failure;\n            for( int j = 0; j < nYSize && eErr == CE_None; ++j )\n            {\n                eErr =\n                    poSrcDS->RasterIO(\n                        GF_Read, 0, j, nXSize, 1,\n                        pabyScanline, nXSize, 1,\n                        GDT_Byte, l_nBands, nullptr, poDS->nBands, 0, 1,\n                        nullptr );\n                if( eErr == CE_None &&\n                    TIFFWriteScanline( l_hTIFF, pabyScanline, j, 0) == -1 )\n                {\n                    CPLError( CE_Failure, CPLE_AppDefined,\n                              \"TIFFWriteScanline() failed.\" );\n                    eErr = CE_Failure;\n                }\n                if( !GDALScaledProgress( (j + 1) * 1.0 / nYSize,\n                                         nullptr, pScaledData ) )\n                    eErr = CE_Failure;\n            }\n            CPLFree( pabyScanline );\n        }\n        else\n        {\n            GByte* pabyScanline = static_cast<GByte *>(\n                VSI_MALLOC_VERBOSE(nXSize) );\n            if( pabyScanline == nullptr )\n                eErr = CE_Failure;\n            else\n                eErr = CE_None;\n            for( int iBand = 1; iBand <= l_nBands && eErr == CE_None; ++iBand )\n            {\n                for( int j = 0; j < nYSize && eErr == CE_None; ++j )\n                {\n                    eErr = poSrcDS->GetRasterBand(iBand)->RasterIO(\n                        GF_Read, 0, j, nXSize, 1,\n                        pabyScanline, nXSize, 1,\n                        GDT_Byte, 0, 0, nullptr );\n                    if( poDS->bTreatAsSplitBitmap )\n                    {\n                        for( int i = 0; i < nXSize; ++i )\n                        {\n                            const GByte byVal = pabyScanline[i];\n                            if( (i & 0x7) == 0 )\n                                pabyScanline[i >> 3] = 0;\n                            if( byVal )\n                                pabyScanline[i >> 3] |= 0x80 >> (i & 0x7);\n                        }\n                    }\n                    if( eErr == CE_None &&\n                        TIFFWriteScanline(\n                            l_hTIFF, pabyScanline, j,\n                            static_cast<uint16>(iBand - 1)) == -1 )\n                    {\n                        CPLError( CE_Failure, CPLE_AppDefined,\n                                  \"TIFFWriteScanline() failed.\" );\n                        eErr = CE_Failure;\n                    }\n                    if( !GDALScaledProgress(\n                           (j + 1 + (iBand - 1) * nYSize) * 1.0 /\n                           (l_nBands * nYSize),\n                           nullptr, pScaledData ) )\n                        eErr = CE_Failure;\n                }\n            }\n            CPLFree(pabyScanline);\n        }\n\n        // Necessary to be able to read the file without re-opening.\n#if defined(HAVE_TIFFGETSIZEPROC)\n        TIFFSizeProc pfnSizeProc = TIFFGetSizeProc( l_hTIFF );\n\n        TIFFFlushData( l_hTIFF );\n\n        toff_t nNewDirOffset = pfnSizeProc( TIFFClientdata( l_hTIFF ) );\n        if( (nNewDirOffset % 2) == 1 )\n            ++nNewDirOffset;\n#endif\n\n        TIFFFlush( l_hTIFF );\n\n#if defined(HAVE_TIFFGETSIZEPROC)\n        if( poDS->nDirOffset != TIFFCurrentDirOffset( l_hTIFF ) )\n        {\n            poDS->nDirOffset = nNewDirOffset;\n            CPLDebug( \"GTiff\", \"directory moved during flush.\" );\n        }\n#endif\n    }\n    else if( \n#if defined(HAVE_LIBJPEG) || defined(JPEG_DIRECT_COPY)\n        bTryCopy &&\n#endif\n        eErr == CE_None )\n    {\n        char* papszCopyWholeRasterOptions[3] = { nullptr, nullptr, nullptr };\n        int iNextOption = 0;\n        papszCopyWholeRasterOptions[iNextOption++] =\n                const_cast<char *>( \"SKIP_HOLES=YES\" );\n        if( l_nCompression != COMPRESSION_NONE )\n        {\n            papszCopyWholeRasterOptions[iNextOption++] =\n                const_cast<char *>( \"COMPRESSED=YES\" );\n        }\n        // For streaming with separate, we really want that bands are written\n        // after each other, even if the source is pixel interleaved.\n        else if( bStreaming && poDS->nPlanarConfig == PLANARCONFIG_SEPARATE )\n        {\n            papszCopyWholeRasterOptions[iNextOption++] =\n                const_cast<char *>(\"INTERLEAVE=BAND\");\n        }\n\n    /* -------------------------------------------------------------------- */\n    /*      Do we want to ensure all blocks get written out on close to     */\n    /*      avoid sparse files?                                             */\n    /* -------------------------------------------------------------------- */\n        if( !CPLFetchBool( papszOptions, \"SPARSE_OK\", false ) )\n            poDS->bFillEmptyTilesAtClosing = true;\n\n        poDS->bWriteEmptyTiles =\n            bStreaming ||\n            (poDS->nCompression != COMPRESSION_NONE &&\n             poDS->bFillEmptyTilesAtClosing);\n        // Only required for people writing non-compressed stripped files in the\n        // rightorder and wanting all tstrips to be written in the same order\n        // so that the end result can be memory mapped without knowledge of each\n        // strip offset\n        if( CPLTestBool( CSLFetchNameValueDef(\n                             papszOptions,\n                             \"WRITE_EMPTY_TILES_SYNCHRONOUSLY\", \"FALSE\" )) ||\n           CPLTestBool( CSLFetchNameValueDef(\n                             papszOptions,\n                             \"@WRITE_EMPTY_TILES_SYNCHRONOUSLY\", \"FALSE\" )) )\n        {\n            poDS->bWriteEmptyTiles = true;\n        }\n\n        eErr = GDALDatasetCopyWholeRaster(\n            /* (GDALDatasetH) */ poSrcDS,\n            /* (GDALDatasetH) */ poDS,\n            papszCopyWholeRasterOptions,\n            GDALScaledProgress, pScaledData );\n    }\n\n    GDALDestroyScaledProgress(pScaledData);\n\n    if( eErr == CE_None && !bStreaming )\n    {\n        pScaledData = GDALCreateScaledProgress(\n            dfNextCurPixels / dfTotalPixels,\n            1.0,\n            pfnProgress, pProgressData);\n        if( poDS->poMaskDS )\n        {\n            const char* l_papszOptions[2] = { \"COMPRESSED=YES\", nullptr };\n            eErr = GDALRasterBandCopyWholeRaster(\n                                    poSrcDS->GetRasterBand(1)->GetMaskBand(),\n                                    poDS->GetRasterBand(1)->GetMaskBand(),\n                                    const_cast<char **>(l_papszOptions),\n                                    GDALScaledProgress, pScaledData );\n        }\n        else\n        {\n            eErr = GDALDriver::DefaultCopyMasks( poSrcDS, poDS, bStrict,\n                                                 nullptr,\n                                                 GDALScaledProgress, pScaledData );\n        }\n        GDALDestroyScaledProgress(pScaledData);\n    }\n\n    if( eErr == CE_Failure )\n    {\n        delete poDS;\n        poDS = nullptr;\n\n        if( CPLTestBool(CPLGetConfigOption(\"GTIFF_DELETE_ON_ERROR\", \"YES\")) )\n        {\n            if( !bStreaming )\n            {\n                // Should really delete more carefully.\n                VSIUnlink( pszFilename );\n            }\n        }\n    }\n\n    return poDS;\n}\n\n/************************************************************************/\n/*                          GetSpatialRef()                             */\n/************************************************************************/\n\nconst OGRSpatialReference* GTiffDataset::GetSpatialRef() const\n\n{\n    if( nGCPCount == 0 )\n    {\n        const_cast<GTiffDataset*>(this)->LoadGeoreferencingAndPamIfNeeded();\n        const_cast<GTiffDataset*>(this)->LookForProjection();\n\n        return oSRS.IsEmpty() ? nullptr : &oSRS;\n    }\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                           SetSpatialRef()                            */\n/************************************************************************/\n\nCPLErr GTiffDataset::SetSpatialRef( const OGRSpatialReference * poSRS )\n\n{\n    if( bStreamingOut && bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify projection at that point in \"\n            \"a streamed output file\" );\n        return CE_Failure;\n    }\n\n    LoadGeoreferencingAndPamIfNeeded();\n    LookForProjection();\n\n    if( poSRS == nullptr || poSRS->IsEmpty() )\n    {\n        if( !oSRS.IsEmpty() )\n        {\n            bForceUnsetProjection = true;\n        }\n        oSRS.Clear();\n    }\n    else\n    {\n        oSRS = *poSRS;\n        oSRS.SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);\n    }\n\n    bGeoTIFFInfoChanged = true;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                          GetGeoTransform()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::GetGeoTransform( double * padfTransform )\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    memcpy( padfTransform, adfGeoTransform, sizeof(double) * 6 );\n\n    if( !bGeoTransformValid )\n        return CE_Failure;\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                          SetGeoTransform()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::SetGeoTransform( double * padfTransform )\n\n{\n    if( bStreamingOut && bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify geotransform at that point in a \"\n            \"streamed output file\" );\n        return CE_Failure;\n    }\n\n    LoadGeoreferencingAndPamIfNeeded();\n\n    if( GetAccess() == GA_Update )\n    {\n        if( nGCPCount > 0 )\n        {\n            CPLError(CE_Warning, CPLE_AppDefined,\n                     \"GCPs previously set are going to be cleared \"\n                     \"due to the setting of a geotransform.\");\n            bForceUnsetGTOrGCPs = true;\n            GDALDeinitGCPs( nGCPCount, pasGCPList );\n            CPLFree( pasGCPList );\n            nGCPCount = 0;\n            pasGCPList = nullptr;\n        }\n        else if( padfTransform[0] == 0.0 &&\n                 padfTransform[1] == 0.0 &&\n                 padfTransform[2] == 0.0 &&\n                 padfTransform[3] == 0.0 &&\n                 padfTransform[4] == 0.0 &&\n                 padfTransform[5] == 0.0 )\n        {\n            if( bGeoTransformValid )\n            {\n                bForceUnsetGTOrGCPs = true;\n                bGeoTIFFInfoChanged = true;\n            }\n            bGeoTransformValid = false;\n            memcpy( adfGeoTransform, padfTransform, sizeof(double)*6 );\n            return CE_None;\n        }\n\n        memcpy( adfGeoTransform, padfTransform, sizeof(double)*6 );\n        bGeoTransformValid = true;\n        bGeoTIFFInfoChanged = true;\n\n        return CE_None;\n    }\n    else\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Attempt to call SetGeoTransform() on a read-only GeoTIFF file.\" );\n        return CE_Failure;\n    }\n}\n\n/************************************************************************/\n/*                            GetGCPCount()                             */\n/************************************************************************/\n\nint GTiffDataset::GetGCPCount()\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    return nGCPCount;\n}\n\n/************************************************************************/\n/*                          GetGCPSpatialRef()                          */\n/************************************************************************/\n\nconst OGRSpatialReference *GTiffDataset::GetGCPSpatialRef() const\n\n{\n    const_cast<GTiffDataset*>(this)->LoadGeoreferencingAndPamIfNeeded();\n\n    if( nGCPCount > 0 )\n    {\n        const_cast<GTiffDataset*>(this)->LookForProjection();\n    }\n    if( !oSRS.IsEmpty() )\n        return &oSRS;\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                               GetGCPs()                              */\n/************************************************************************/\n\nconst GDAL_GCP *GTiffDataset::GetGCPs()\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    return pasGCPList;\n}\n\n/************************************************************************/\n/*                               SetGCPs()                              */\n/************************************************************************/\n\nCPLErr GTiffDataset::SetGCPs( int nGCPCountIn, const GDAL_GCP *pasGCPListIn,\n                              const OGRSpatialReference *poGCPSRS )\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    if( GetAccess() == GA_Update )\n    {\n        LookForProjection();\n\n        if( nGCPCount > 0 && nGCPCountIn == 0 )\n        {\n            bForceUnsetGTOrGCPs = true;\n        }\n        else if( nGCPCountIn > 0 &&\n                 bGeoTransformValid )\n        {\n            CPLError(CE_Warning, CPLE_AppDefined,\n                     \"A geotransform previously set is going to be cleared \"\n                     \"due to the setting of GCPs.\");\n            adfGeoTransform[0] = 0.0;\n            adfGeoTransform[1] = 1.0;\n            adfGeoTransform[2] = 0.0;\n            adfGeoTransform[3] = 0.0;\n            adfGeoTransform[4] = 0.0;\n            adfGeoTransform[5] = 1.0;\n            bGeoTransformValid = false;\n            bForceUnsetGTOrGCPs = true;\n        }\n\n        if( poGCPSRS == nullptr || poGCPSRS->IsEmpty() )\n        {\n            if( !oSRS.IsEmpty() )\n            {\n                bForceUnsetProjection = true;\n            }\n            oSRS.Clear();\n        }\n        else\n        {\n            oSRS = *poGCPSRS;\n            oSRS.SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);\n        }\n\n        if( nGCPCount > 0 )\n        {\n            GDALDeinitGCPs( nGCPCount, pasGCPList );\n            CPLFree( pasGCPList );\n        }\n\n        nGCPCount = nGCPCountIn;\n        pasGCPList = GDALDuplicateGCPs(nGCPCount, pasGCPListIn);\n\n        bGeoTIFFInfoChanged = true;\n\n        return CE_None;\n    }\n    else\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"SetGCPs() is only supported on newly created GeoTIFF files.\");\n        return CE_Failure;\n    }\n}\n\n/************************************************************************/\n/*                      GetMetadataDomainList()                         */\n/************************************************************************/\n\nchar **GTiffDataset::GetMetadataDomainList()\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    char **papszDomainList = CSLDuplicate(oGTiffMDMD.GetDomainList());\n    char **papszBaseList = GDALDataset::GetMetadataDomainList();\n\n    const int nbBaseDomains = CSLCount(papszBaseList);\n\n    for( int domainId = 0; domainId < nbBaseDomains; ++domainId )\n        papszDomainList = CSLAddString(papszDomainList,papszBaseList[domainId]);\n\n    CSLDestroy(papszBaseList);\n\n    return BuildMetadataDomainList(\n        papszDomainList,\n        TRUE,\n        \"\", \"ProxyOverviewRequest\", MD_DOMAIN_RPC, MD_DOMAIN_IMD,\n        \"SUBDATASETS\", \"EXIF\",\n        \"xml:XMP\", \"COLOR_PROFILE\", nullptr);\n}\n\n/************************************************************************/\n/*                            GetMetadata()                             */\n/************************************************************************/\n\nchar **GTiffDataset::GetMetadata( const char * pszDomain )\n\n{\n    if( pszDomain == nullptr || !EQUAL(pszDomain, \"IMAGE_STRUCTURE\") )\n    {\n        LoadGeoreferencingAndPamIfNeeded();\n    }\n\n    if( pszDomain != nullptr && EQUAL(pszDomain, \"ProxyOverviewRequest\") )\n        return GDALPamDataset::GetMetadata( pszDomain );\n\n    if( pszDomain != nullptr && EQUAL(pszDomain, \"DERIVED_SUBDATASETS\"))\n    {\n        return GDALDataset::GetMetadata(pszDomain);\n    }\n\n    else if( pszDomain != nullptr && (EQUAL(pszDomain, MD_DOMAIN_RPC) ||\n                                   EQUAL(pszDomain, MD_DOMAIN_IMD) ||\n                                   EQUAL(pszDomain, MD_DOMAIN_IMAGERY)) )\n        LoadMetadata();\n\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"SUBDATASETS\") )\n        ScanDirectories();\n\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"EXIF\") )\n        LoadEXIFMetadata();\n\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"COLOR_PROFILE\") )\n        LoadICCProfile();\n\n    else if( pszDomain == nullptr || EQUAL(pszDomain, \"\") )\n        LoadMDAreaOrPoint();  // To set GDALMD_AREA_OR_POINT.\n\n    return oGTiffMDMD.GetMetadata( pszDomain );\n}\n\n/************************************************************************/\n/*                            SetMetadata()                             */\n/************************************************************************/\nCPLErr GTiffDataset::SetMetadata( char ** papszMD, const char *pszDomain )\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    if( bStreamingOut && bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify metadata at that point in a streamed output file\" );\n        return CE_Failure;\n    }\n\n    if( pszDomain != nullptr && EQUAL(pszDomain, MD_DOMAIN_RPC) )\n    {\n        // So that a subsequent GetMetadata() wouldn't override our new values\n        LoadMetadata();\n        m_bForceUnsetRPC = (CSLCount(papszMD) == 0);\n    }\n\n    if( (papszMD != nullptr) &&\n        (pszDomain != nullptr) &&\n        EQUAL(pszDomain, \"COLOR_PROFILE\") )\n    {\n        bColorProfileMetadataChanged = true;\n    }\n    else if( pszDomain == nullptr || !EQUAL(pszDomain,\"_temporary_\") )\n    {\n        bMetadataChanged = true;\n        // Cancel any existing metadata from PAM file.\n        if( eAccess == GA_Update &&\n            GDALPamDataset::GetMetadata(pszDomain) != nullptr )\n            GDALPamDataset::SetMetadata(nullptr, pszDomain);\n    }\n\n    if( (pszDomain == nullptr || EQUAL(pszDomain, \"\")) &&\n        CSLFetchNameValue(papszMD, GDALMD_AREA_OR_POINT) != nullptr )\n    {\n        const char* pszPrevValue =\n                GetMetadataItem(GDALMD_AREA_OR_POINT);\n        const char* pszNewValue =\n                CSLFetchNameValue(papszMD, GDALMD_AREA_OR_POINT);\n        if( pszPrevValue == nullptr || pszNewValue == nullptr ||\n            !EQUAL(pszPrevValue, pszNewValue) )\n        {\n            LookForProjection();\n            bGeoTIFFInfoChanged = true;\n        }\n    }\n\n    if( pszDomain != nullptr && EQUAL(pszDomain, \"xml:XMP\") )\n    {\n        if( papszMD != nullptr && *papszMD != nullptr )\n        {\n            int nTagSize = static_cast<int>(strlen(*papszMD));\n            TIFFSetField( hTIFF, TIFFTAG_XMLPACKET, nTagSize, *papszMD );\n        }\n        else\n        {\n#ifdef HAVE_UNSETFIELD\n            TIFFUnsetField( hTIFF, TIFFTAG_XMLPACKET );\n#else\n            CPLDebug(\n                \"GTiff\",\n                \"TIFFUnsetField() not supported, xml:XMP may not be cleared.\" );\n#endif\n        }\n    }\n\n    return oGTiffMDMD.SetMetadata( papszMD, pszDomain );\n}\n\n/************************************************************************/\n/*                          GetMetadataItem()                           */\n/************************************************************************/\n\nconst char *GTiffDataset::GetMetadataItem( const char *pszName,\n                                           const char *pszDomain )\n\n{\n    if( pszDomain == nullptr || !EQUAL(pszDomain, \"IMAGE_STRUCTURE\") )\n    {\n        LoadGeoreferencingAndPamIfNeeded();\n    }\n\n    if( pszDomain != nullptr && EQUAL(pszDomain,\"ProxyOverviewRequest\") )\n    {\n        return GDALPamDataset::GetMetadataItem( pszName, pszDomain );\n    }\n    else if( pszDomain != nullptr && (EQUAL(pszDomain, MD_DOMAIN_RPC) ||\n                                   EQUAL(pszDomain, MD_DOMAIN_IMD) ||\n                                   EQUAL(pszDomain, MD_DOMAIN_IMAGERY)) )\n    {\n        LoadMetadata();\n    }\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"SUBDATASETS\") )\n    {\n        ScanDirectories();\n    }\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"EXIF\") )\n    {\n        LoadEXIFMetadata();\n    }\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"COLOR_PROFILE\") )\n    {\n        LoadICCProfile();\n    }\n    else if( (pszDomain == nullptr || EQUAL(pszDomain, \"\")) &&\n        pszName != nullptr && EQUAL(pszName, GDALMD_AREA_OR_POINT) )\n    {\n        LoadMDAreaOrPoint();  // To set GDALMD_AREA_OR_POINT.\n    }\n\n#ifdef DEBUG_REACHED_VIRTUAL_MEM_IO\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"_DEBUG_\") &&\n             pszName != nullptr &&\n             EQUAL(pszName, \"UNREACHED_VIRTUALMEMIO_CODE_PATH\") )\n    {\n        CPLString osMissing;\n        for( int i = 0; i < static_cast<int>(\n                                CPL_ARRAYSIZE(anReachedVirtualMemIO)); ++i )\n        {\n            if( !anReachedVirtualMemIO[i] )\n            {\n                if( !osMissing.empty() ) osMissing += \",\";\n                osMissing += CPLSPrintf(\"%d\", i);\n            }\n        }\n        return (osMissing.size()) ? CPLSPrintf(\"%s\", osMissing.c_str()) : nullptr;\n    }\n#endif\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"_DEBUG_\") &&\n             pszName != nullptr && EQUAL(pszName, \"TIFFTAG_EXTRASAMPLES\") )\n    {\n        CPLString osRet;\n        uint16 *v = nullptr;\n        uint16 count = 0;\n\n        if( TIFFGetField( hTIFF, TIFFTAG_EXTRASAMPLES, &count, &v ) )\n        {\n            for( int i = 0; i < static_cast<int>(count); ++i )\n            {\n                if( i > 0 ) osRet += \",\";\n                osRet += CPLSPrintf(\"%d\", v[i]);\n            }\n        }\n        return (osRet.size()) ? CPLSPrintf(\"%s\", osRet.c_str()) : nullptr;\n    }\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"_DEBUG_\") &&\n             pszName != nullptr && EQUAL(pszName, \"TIFFTAG_PHOTOMETRIC\") )\n    {\n        return CPLSPrintf(\"%d\", nPhotometric);\n    }\n\n    else if( pszDomain != nullptr && EQUAL(pszDomain, \"_DEBUG_\") &&\n             pszName != nullptr && EQUAL( pszName, \"TIFFTAG_GDAL_METADATA\") )\n    {\n        char* pszText = nullptr;\n        if( !TIFFGetField( hTIFF, TIFFTAG_GDAL_METADATA, &pszText ) )\n            return nullptr;\n\n        return CPLSPrintf(\"%s\", pszText);\n    }\n\n    return oGTiffMDMD.GetMetadataItem( pszName, pszDomain );\n}\n\n/************************************************************************/\n/*                          SetMetadataItem()                           */\n/************************************************************************/\n\nCPLErr GTiffDataset::SetMetadataItem( const char *pszName,\n                                      const char *pszValue,\n                                      const char *pszDomain )\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    if( bStreamingOut && bCrystalized )\n    {\n        CPLError(\n            CE_Failure, CPLE_NotSupported,\n            \"Cannot modify metadata at that point in a streamed output file\" );\n        return CE_Failure;\n    }\n\n    if( (pszDomain != nullptr) && EQUAL(pszDomain, \"COLOR_PROFILE\") )\n    {\n        bColorProfileMetadataChanged = true;\n    }\n    else if( pszDomain == nullptr || !EQUAL(pszDomain,\"_temporary_\") )\n    {\n        bMetadataChanged = true;\n        // Cancel any existing metadata from PAM file.\n        if( eAccess == GA_Update &&\n            GDALPamDataset::GetMetadataItem(pszName, pszDomain) != nullptr )\n            GDALPamDataset::SetMetadataItem(pszName, nullptr, pszDomain);\n    }\n\n    if( (pszDomain == nullptr || EQUAL(pszDomain, \"\")) &&\n        pszName != nullptr && EQUAL(pszName, GDALMD_AREA_OR_POINT) )\n    {\n        LookForProjection();\n        bGeoTIFFInfoChanged = true;\n    }\n\n    return oGTiffMDMD.SetMetadataItem( pszName, pszValue, pszDomain );\n}\n\n/************************************************************************/\n/*                         GetInternalHandle()                          */\n/************************************************************************/\n\nvoid *GTiffDataset::GetInternalHandle( const char * /* pszHandleName */ )\n\n{\n    return hTIFF;\n}\n\n/************************************************************************/\n/*                         LoadEXIFMetadata()                           */\n/************************************************************************/\n\nvoid GTiffDataset::LoadEXIFMetadata()\n{\n    if( bEXIFMetadataLoaded )\n        return;\n    bEXIFMetadataLoaded = true;\n\n    if( !SetDirectory() )\n        return;\n\n    VSILFILE* fp = VSI_TIFFGetVSILFile(TIFFClientdata( hTIFF ));\n\n    GByte abyHeader[2] = { 0 };\n    if( VSIFSeekL(fp, 0, SEEK_SET) != 0 ||\n        VSIFReadL(abyHeader, 1, 2, fp) != 2 )\n        return;\n\n    const bool bLittleEndian = abyHeader[0] == 'I' && abyHeader[1] == 'I';\n    const bool bLeastSignificantBit = CPL_IS_LSB != 0;\n    const bool bSwabflag = bLittleEndian != bLeastSignificantBit;  // != is XOR.\n\n    char** papszMetadata = nullptr;\n    toff_t nOffset = 0;  // TODO(b/28199387): Refactor to simplify casting.\n\n    if( TIFFGetField(hTIFF, TIFFTAG_EXIFIFD, &nOffset) )\n    {\n        int nExifOffset = static_cast<int>(nOffset);\n        int nInterOffset = 0;\n        int nGPSOffset = 0;\n        EXIFExtractMetadata( papszMetadata,\n                             fp, static_cast<int>(nOffset),\n                             bSwabflag, 0,\n                             nExifOffset, nInterOffset, nGPSOffset);\n    }\n\n    if( TIFFGetField(hTIFF, TIFFTAG_GPSIFD, &nOffset) )\n    {\n        int nExifOffset = 0;  // TODO(b/28199387): Refactor to simplify casting.\n        int nInterOffset = 0;\n        int nGPSOffset = static_cast<int>(nOffset);\n        EXIFExtractMetadata( papszMetadata,\n                             fp, static_cast<int>(nOffset),\n                             bSwabflag, 0,\n                             nExifOffset, nInterOffset, nGPSOffset );\n    }\n\n    if( papszMetadata )\n    {\n        oGTiffMDMD.SetMetadata( papszMetadata, \"EXIF\" );\n        CSLDestroy( papszMetadata );\n    }\n}\n\n/************************************************************************/\n/*                           LoadMetadata()                             */\n/************************************************************************/\nvoid GTiffDataset::LoadMetadata()\n{\n    if( bIMDRPCMetadataLoaded )\n        return;\n    bIMDRPCMetadataLoaded = true;\n\n    GDALMDReaderManager mdreadermanager;\n    GDALMDReaderBase* mdreader =\n        mdreadermanager.GetReader(osFilename,\n                                  oOvManager.GetSiblingFiles(), MDR_ANY);\n\n    if( nullptr != mdreader )\n    {\n        mdreader->FillMetadata(&oGTiffMDMD);\n\n        if(mdreader->GetMetadataDomain(MD_DOMAIN_RPC) == nullptr)\n        {\n            char** papszRPCMD = GTiffDatasetReadRPCTag(hTIFF);\n            if( papszRPCMD )\n            {\n                oGTiffMDMD.SetMetadata( papszRPCMD, MD_DOMAIN_RPC );\n                CSLDestroy( papszRPCMD );\n            }\n        }\n\n        papszMetadataFiles = mdreader->GetMetadataFiles();\n    }\n    else\n    {\n        char** papszRPCMD = GTiffDatasetReadRPCTag(hTIFF);\n        if( papszRPCMD )\n        {\n            oGTiffMDMD.SetMetadata( papszRPCMD, MD_DOMAIN_RPC );\n            CSLDestroy( papszRPCMD );\n        }\n    }\n}\n\n/************************************************************************/\n/*                            GetFileList()                             */\n/************************************************************************/\n\nchar **GTiffDataset::GetFileList()\n\n{\n    LoadGeoreferencingAndPamIfNeeded();\n\n    char **papszFileList = GDALPamDataset::GetFileList();\n\n    LoadMetadata();\n    if(nullptr != papszMetadataFiles)\n    {\n        for( int i = 0; papszMetadataFiles[i] != nullptr; ++i )\n        {\n            if( CSLFindString( papszFileList, papszMetadataFiles[i] ) < 0 )\n            {\n                papszFileList =\n                    CSLAddString( papszFileList, papszMetadataFiles[i] );\n            }\n        }\n    }\n\n    if( !osGeorefFilename.empty() &&\n        CSLFindString(papszFileList, osGeorefFilename) == -1 )\n    {\n        papszFileList = CSLAddString( papszFileList, osGeorefFilename );\n    }\n\n    return papszFileList;\n}\n\n/************************************************************************/\n/*                         CreateMaskBand()                             */\n/************************************************************************/\n\nCPLErr GTiffDataset::CreateMaskBand(int nFlagsIn)\n{\n    ScanDirectories();\n\n    if( poMaskDS != nullptr )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"This TIFF dataset has already an internal mask band\" );\n        return CE_Failure;\n    }\n    else if( CPLTestBool(CPLGetConfigOption(\"GDAL_TIFF_INTERNAL_MASK\", \"NO\")) )\n    {\n        if( nFlagsIn != GMF_PER_DATASET )\n        {\n            CPLError(\n                CE_Failure, CPLE_AppDefined,\n                \"The only flag value supported for internal mask is \"\n                \"GMF_PER_DATASET\" );\n            return CE_Failure;\n        }\n\n        int l_nCompression = COMPRESSION_PACKBITS;\n        if( strstr(GDALGetMetadataItem(GDALGetDriverByName( \"GTiff\" ),\n                                       GDAL_DMD_CREATIONOPTIONLIST, nullptr ),\n                   \"<Value>DEFLATE</Value>\") != nullptr )\n            l_nCompression = COMPRESSION_ADOBE_DEFLATE;\n\n    /* -------------------------------------------------------------------- */\n    /*      If we don't have read access, then create the mask externally.  */\n    /* -------------------------------------------------------------------- */\n        if( GetAccess() != GA_Update )\n        {\n            CPLError( CE_Warning, CPLE_AppDefined,\n                      \"File open for read-only accessing, \"\n                      \"creating mask externally.\" );\n\n            return GDALPamDataset::CreateMaskBand(nFlagsIn);\n        }\n\n        if( poBaseDS && !poBaseDS->SetDirectory() )\n            return CE_Failure;\n\n        if( !SetDirectory() )\n            return CE_Failure;\n\n        bool bIsOverview = false;\n        uint32 nSubType = 0;\n        if( TIFFGetField(hTIFF, TIFFTAG_SUBFILETYPE, &nSubType) )\n        {\n            bIsOverview = (nSubType & FILETYPE_REDUCEDIMAGE) != 0;\n\n            if( (nSubType & FILETYPE_MASK) != 0 )\n            {\n                CPLError( CE_Failure, CPLE_AppDefined,\n                          \"Cannot create a mask on a TIFF mask IFD !\" );\n                return CE_Failure;\n            }\n        }\n\n        const int bIsTiled = TIFFIsTiled(hTIFF);\n\n        FlushDirectory();\n\n        const toff_t nOffset =\n            GTIFFWriteDirectory(\n                hTIFF,\n                bIsOverview ?\n                FILETYPE_REDUCEDIMAGE | FILETYPE_MASK : FILETYPE_MASK,\n                nRasterXSize, nRasterYSize,\n                1, PLANARCONFIG_CONTIG, 1,\n                nBlockXSize, nBlockYSize,\n                bIsTiled, l_nCompression,\n                PHOTOMETRIC_MASK, PREDICTOR_NONE,\n                SAMPLEFORMAT_UINT, nullptr, nullptr, nullptr, 0, nullptr, \"\", nullptr, nullptr,\n                nullptr, nullptr );\n        if( nOffset == 0 )\n            return CE_Failure;\n\n        poMaskDS = new GTiffDataset();\n        poMaskDS->ShareLockWithParentDataset(this);\n        poMaskDS->bPromoteTo8Bits =\n            CPLTestBool(\n                CPLGetConfigOption(\"GDAL_TIFF_INTERNAL_MASK_TO_8BIT\", \"YES\"));\n        if( poMaskDS->OpenOffset( hTIFF, ppoActiveDSRef, nOffset,\n                                  false, GA_Update ) != CE_None)\n        {\n            delete poMaskDS;\n            poMaskDS = nullptr;\n            return CE_Failure;\n        }\n\n        return CE_None;\n    }\n\n    return GDALPamDataset::CreateMaskBand(nFlagsIn);\n}\n\n/************************************************************************/\n/*                         CreateMaskBand()                             */\n/************************************************************************/\n\nCPLErr GTiffRasterBand::CreateMaskBand( int nFlagsIn )\n{\n    poGDS->ScanDirectories();\n\n    if( poGDS->poMaskDS != nullptr )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"This TIFF dataset has already an internal mask band\" );\n        return CE_Failure;\n    }\n\n    if( CPLTestBool( CPLGetConfigOption(\"GDAL_TIFF_INTERNAL_MASK\", \"NO\") ) )\n    {\n        return poGDS->CreateMaskBand(nFlagsIn);\n    }\n\n    return GDALPamRasterBand::CreateMaskBand(nFlagsIn);\n}\n\n/************************************************************************/\n/*                       PrepareTIFFErrorFormat()                       */\n/*                                                                      */\n/*      sometimes the \"module\" has stuff in it that has special         */\n/*      meaning in a printf() style format, so we try to escape it.     */\n/*      For now we hope the only thing we have to escape is %'s.        */\n/************************************************************************/\n\nstatic char *PrepareTIFFErrorFormat( const char *module, const char *fmt )\n\n{\n    const size_t nModuleSize = strlen(module);\n    const size_t nModFmtSize = nModuleSize * 2 + strlen(fmt) + 2;\n    char *pszModFmt = static_cast<char *>( CPLMalloc( nModFmtSize ) );\n\n    size_t iOut = 0;  // Used after for.\n\n    for( size_t iIn = 0; iIn < nModuleSize; ++iIn )\n    {\n        if( module[iIn] == '%' )\n        {\n            CPLAssert(iOut < nModFmtSize - 2);\n            pszModFmt[iOut++] = '%';\n            pszModFmt[iOut++] = '%';\n        }\n        else\n        {\n            CPLAssert(iOut < nModFmtSize - 1);\n            pszModFmt[iOut++] = module[iIn];\n        }\n    }\n    CPLAssert(iOut < nModFmtSize);\n    pszModFmt[iOut] = '\\0';\n    strcat( pszModFmt, \":\" );\n    strcat( pszModFmt, fmt );\n\n    return pszModFmt;\n}\n\n/************************************************************************/\n/*                        GTiffWarningHandler()                         */\n/************************************************************************/\nstatic void\nGTiffWarningHandler(const char* module, const char* fmt, va_list ap )\n{\n    if( strstr(fmt,\"nknown field\") != nullptr )\n        return;\n\n    char *pszModFmt = PrepareTIFFErrorFormat( module, fmt );\n    if( strstr(fmt, \"does not end in null byte\") != nullptr )\n    {\n        CPLString osMsg;\n        osMsg.vPrintf(pszModFmt, ap);\n        CPLDebug( \"GTiff\", \"%s\", osMsg.c_str() );\n    }\n    else\n    {\n        CPLErrorV( CE_Warning, CPLE_AppDefined, pszModFmt, ap );\n    }\n    CPLFree( pszModFmt );\n}\n\n/************************************************************************/\n/*                         GTiffErrorHandler()                          */\n/************************************************************************/\nstatic void\nGTiffErrorHandler( const char* module, const char* fmt, va_list ap )\n{\n#ifdef BIGTIFF_SUPPORT\n    if( strcmp(fmt, \"Maximum TIFF file size exceeded\") == 0 )\n    {\n        // Ideally there would be a thread-safe way of setting this flag,\n        // but we cannot really use the extended error handler, since the\n        // handler is for all TIFF handles, and not necessarily the ones of\n        // this driver.\n        if( bGlobalInExternalOvr )\n            fmt =\n                \"Maximum TIFF file size exceeded. \"\n                \"Use --config BIGTIFF_OVERVIEW YES configuration option.\";\n        else\n            fmt =\n                \"Maximum TIFF file size exceeded. \"\n                \"Use BIGTIFF=YES creation option.\";\n    }\n#endif\n\n    char* pszModFmt = PrepareTIFFErrorFormat( module, fmt );\n    CPLErrorV( CE_Failure, CPLE_AppDefined, pszModFmt, ap );\n    CPLFree( pszModFmt );\n}\n\n/************************************************************************/\n/*                          GTiffTagExtender()                          */\n/*                                                                      */\n/*      Install tags specially known to GDAL.                           */\n/************************************************************************/\n\nstatic TIFFExtendProc _ParentExtender = nullptr;\n\nstatic void GTiffTagExtender(TIFF *tif)\n\n{\n    const TIFFFieldInfo xtiffFieldInfo[] = {\n        { TIFFTAG_GDAL_METADATA, -1, -1, TIFF_ASCII, FIELD_CUSTOM,\n          TRUE, FALSE, const_cast<char *>( \"GDALMetadata\" ) },\n        { TIFFTAG_GDAL_NODATA, -1, -1, TIFF_ASCII, FIELD_CUSTOM,\n          TRUE, FALSE, const_cast<char*>( \"GDALNoDataValue\" ) },\n        { TIFFTAG_RPCCOEFFICIENT, -1, -1, TIFF_DOUBLE, FIELD_CUSTOM,\n          TRUE, TRUE, const_cast<char *>( \"RPCCoefficient\" ) },\n        { TIFFTAG_TIFF_RSID, -1, -1, TIFF_ASCII, FIELD_CUSTOM,\n          TRUE, FALSE, const_cast<char *>( \"TIFF_RSID\" ) },\n        { TIFFTAG_GEO_METADATA, -1, -1, TIFF_BYTE, FIELD_CUSTOM,\n          TRUE, TRUE, const_cast<char *>( \"GEO_METADATA\" ) }\n    };\n\n    if( _ParentExtender )\n        (*_ParentExtender)(tif);\n\n    TIFFMergeFieldInfo( tif, xtiffFieldInfo,\n                        sizeof(xtiffFieldInfo) / sizeof(xtiffFieldInfo[0]) );\n}\n\n/************************************************************************/\n/*                          GTiffOneTimeInit()                          */\n/*                                                                      */\n/*      This is stuff that is initialized for the TIFF library just     */\n/*      once.  We deliberately defer the initialization till the        */\n/*      first time we are likely to call into libtiff to avoid          */\n/*      unnecessary paging in of the library for GDAL apps that         */\n/*      don't use it.                                                   */\n/************************************************************************/\n#if defined(HAVE_DLFCN_H) && !defined(WIN32)\n#include <dlfcn.h>\n#endif\n\nstatic std::mutex oDeleteMutex;\n#ifdef HAVE_LERC\nstatic TIFFCodec* pLercCodec = nullptr;\n#endif\n\nint GTiffOneTimeInit()\n\n{\n    std::lock_guard<std::mutex> oLock(oDeleteMutex);\n \n#ifdef HAVE_LERC\n    if( pLercCodec == nullptr )\n    {\n        pLercCodec = TIFFRegisterCODEC(COMPRESSION_LERC, \"LERC\", TIFFInitLERC);\n    }\n#endif\n\n    static bool bOneTimeInitDone = false;\n    if( bOneTimeInitDone )\n        return TRUE;\n\n    bOneTimeInitDone = true;\n\n    // This is a frequent configuration error that is difficult to track down\n    // for people unaware of the issue : GDAL built against internal libtiff\n    // (4.X), but used by an application that links with external libtiff (3.X)\n    // Note: on my conf, the order that cause GDAL to crash - and that is\n    // detected by the following code - is \"-ltiff -lgdal\". \"-lgdal -ltiff\"\n    // works for the GTiff driver but probably breaks the application that\n    // believes it uses libtiff 3.X but we cannot detect that.\n#if defined(BIGTIFF_SUPPORT) && !defined(RENAME_INTERNAL_LIBTIFF_SYMBOLS)\n#if defined(HAVE_DLFCN_H) && !defined(WIN32)\n    const char* (*pfnVersion)(void);\n#ifdef HAVE_GCC_WARNING_ZERO_AS_NULL_POINTER_CONSTANT\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n#endif\n    pfnVersion = reinterpret_cast<const char* (*)(void)>(dlsym(RTLD_DEFAULT, \"TIFFGetVersion\"));\n#ifdef HAVE_GCC_WARNING_ZERO_AS_NULL_POINTER_CONSTANT\n#pragma GCC diagnostic pop\n#endif\n    if( pfnVersion )\n    {\n        const char* pszVersion = pfnVersion();\n        if( pszVersion && strstr(pszVersion, \"Version 3.\") != nullptr )\n        {\n            CPLError(\n                CE_Warning, CPLE_AppDefined,\n                \"libtiff version mismatch: You're linking against libtiff 3.X, \"\n                \"but GDAL has been compiled against libtiff >= 4.0.0\" );\n        }\n    }\n#endif  // HAVE_DLFCN_H\n#endif  // BIGTIFF_SUPPORT\n\n    _ParentExtender = TIFFSetTagExtender(GTiffTagExtender);\n\n    TIFFSetWarningHandler( GTiffWarningHandler );\n    TIFFSetErrorHandler( GTiffErrorHandler );\n\n    LibgeotiffOneTimeInit();\n\n    return TRUE;\n}\n\n/************************************************************************/\n/*                        GDALDeregister_GTiff()                        */\n/************************************************************************/\n\nstatic\nvoid GDALDeregister_GTiff( GDALDriver * )\n\n{\n#ifdef HAVE_LERC\n    if( pLercCodec )\n        TIFFUnRegisterCODEC(pLercCodec);\n    pLercCodec = nullptr;\n#endif\n\n    delete gpoCompressThreadPool;\n    gpoCompressThreadPool = nullptr;\n}\n\n/************************************************************************/\n/*                   GTIFFGetCompressionMethod()                        */\n/************************************************************************/\n\nint GTIFFGetCompressionMethod(const char* pszValue, const char* pszVariableName)\n{\n    int nCompression = COMPRESSION_NONE;\n    if( EQUAL( pszValue, \"NONE\" ) )\n        nCompression = COMPRESSION_NONE;\n    else if( EQUAL( pszValue, \"JPEG\" ) )\n        nCompression = COMPRESSION_JPEG;\n    else if( EQUAL( pszValue, \"LZW\" ) )\n        nCompression = COMPRESSION_LZW;\n    else if( EQUAL( pszValue, \"PACKBITS\" ))\n        nCompression = COMPRESSION_PACKBITS;\n    else if( EQUAL( pszValue, \"DEFLATE\" ) || EQUAL( pszValue, \"ZIP\" ))\n        nCompression = COMPRESSION_ADOBE_DEFLATE;\n    else if( EQUAL( pszValue, \"FAX3\" )\n             || EQUAL( pszValue, \"CCITTFAX3\" ))\n        nCompression = COMPRESSION_CCITTFAX3;\n    else if( EQUAL( pszValue, \"FAX4\" )\n             || EQUAL( pszValue, \"CCITTFAX4\" ))\n        nCompression = COMPRESSION_CCITTFAX4;\n    else if( EQUAL( pszValue, \"CCITTRLE\" ) )\n        nCompression = COMPRESSION_CCITTRLE;\n    else if( EQUAL( pszValue, \"LZMA\" ) )\n        nCompression = COMPRESSION_LZMA;\n    else if( EQUAL( pszValue, \"ZSTD\" ) )\n        nCompression = COMPRESSION_ZSTD;\n#ifdef HAVE_LERC\n    else if( EQUAL( pszValue, \"LERC\" ) ||\n             EQUAL( pszValue, \"LERC_DEFLATE\" ) ||\n             EQUAL( pszValue, \"LERC_ZSTD\" ) )\n    {\n        nCompression = COMPRESSION_LERC;\n    }\n#endif\n    else if( EQUAL( pszValue, \"WEBP\" ) )\n        nCompression = COMPRESSION_WEBP;\n    else\n        CPLError( CE_Warning, CPLE_IllegalArg,\n                  \"%s=%s value not recognised, ignoring.\",\n                  pszVariableName,pszValue );\n\n#if defined(TIFFLIB_VERSION) && TIFFLIB_VERSION > 20031007  // 3.6.0\n    if( nCompression != COMPRESSION_NONE &&\n        !TIFFIsCODECConfigured(static_cast<uint16>(nCompression)) )\n    {\n        CPLError(\n            CE_Failure, CPLE_AppDefined,\n            \"Cannot create TIFF file due to missing codec for %s.\", pszValue );\n        return -1;\n    }\n#endif\n\n    return nCompression;\n}\n\n/************************************************************************/\n/*                          GDALRegister_GTiff()                        */\n/************************************************************************/\n\nvoid GDALRegister_GTiff()\n\n{\n    if( GDALGetDriverByName( \"GTiff\" ) != nullptr )\n        return;\n\n    CPLString osOptions;\n    CPLString osCompressValues;\n    bool bHasJPEG = false;\n    bool bHasLZMA = false;\n    bool bHasZSTD = false;\n    bool bHasWebP = false;\n\n    GDALDriver *poDriver = new GDALDriver();\n\n/* -------------------------------------------------------------------- */\n/*      Determine which compression codecs are available that we        */\n/*      want to advertise.  If we are using an old libtiff we won't     */\n/*      be able to find out so we just assume all are available.        */\n/* -------------------------------------------------------------------- */\n    osCompressValues = \"       <Value>NONE</Value>\";\n\n#if TIFFLIB_VERSION <= 20040919\n    osCompressValues +=\n            \"       <Value>PACKBITS</Value>\"\n            \"       <Value>JPEG</Value>\"\n            \"       <Value>LZW</Value>\"\n            \"       <Value>DEFLATE</Value>\";\n    bool bHasLZW = true;\n    bool bHasDEFLATE = true;\n#else\n    bool bHasLZW = false;\n    bool bHasDEFLATE = false;\n    TIFFCodec *codecs = TIFFGetConfiguredCODECs();\n\n    for( TIFFCodec *c = codecs; c->name; ++c )\n    {\n        if( c->scheme == COMPRESSION_PACKBITS )\n        {\n            osCompressValues +=\n                    \"       <Value>PACKBITS</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_JPEG )\n        {\n            bHasJPEG = true;\n            osCompressValues +=\n                    \"       <Value>JPEG</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_LZW )\n        {\n            bHasLZW = true;\n            osCompressValues +=\n                    \"       <Value>LZW</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_ADOBE_DEFLATE )\n        {\n            bHasDEFLATE = true;\n            osCompressValues +=\n                    \"       <Value>DEFLATE</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_CCITTRLE )\n        {\n            osCompressValues +=\n                    \"       <Value>CCITTRLE</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_CCITTFAX3 )\n        {\n            osCompressValues +=\n                    \"       <Value>CCITTFAX3</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_CCITTFAX4 )\n        {\n            osCompressValues +=\n                    \"       <Value>CCITTFAX4</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_LZMA )\n        {\n            bHasLZMA = true;\n            osCompressValues +=\n                    \"       <Value>LZMA</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_ZSTD )\n        {\n            bHasZSTD = true;\n            osCompressValues +=\n                    \"       <Value>ZSTD</Value>\";\n        }\n        else if( c->scheme == COMPRESSION_WEBP )\n        {\n            bHasWebP = true;\n            osCompressValues +=\n                    \"       <Value>WEBP</Value>\";\n        }\n    }\n#ifdef HAVE_LERC\n    osCompressValues +=\n                    \"       <Value>LERC</Value>\";\n    osCompressValues +=\n                    \"       <Value>LERC_DEFLATE</Value>\";\n    if( bHasZSTD )\n    {\n        osCompressValues +=\n                    \"       <Value>LERC_ZSTD</Value>\";\n    }\n#endif\n    _TIFFfree( codecs );\n#endif\n\n/* -------------------------------------------------------------------- */\n/*      Build full creation option list.                                */\n/* -------------------------------------------------------------------- */\n    osOptions = \"<CreationOptionList>\"\n              \"   <Option name='COMPRESS' type='string-select'>\";\n    osOptions += osCompressValues;\n    osOptions += \"   </Option>\";\n    if( bHasLZW || bHasDEFLATE || bHasZSTD )\n        osOptions += \"\"\n\"   <Option name='PREDICTOR' type='int' description='Predictor Type (1=default, 2=horizontal differencing, 3=floating point prediction)'/>\";\n    osOptions += \"\"\n\"   <Option name='DISCARD_LSB' type='string' description='Number of least-significant bits to set to clear as a single value or comma-separated list of values for per-band values'/>\";\n    if( bHasJPEG )\n    {\n        osOptions += \"\"\n\"   <Option name='JPEG_QUALITY' type='int' description='JPEG quality 1-100' default='75'/>\"\n\"   <Option name='JPEGTABLESMODE' type='int' description='Content of JPEGTABLES tag. 0=no JPEGTABLES tag, 1=Quantization tables only, 2=Huffman tables only, 3=Both' default='1'/>\";\n#ifdef JPEG_DIRECT_COPY\n        osOptions += \"\"\n\"   <Option name='JPEG_DIRECT_COPY' type='boolean' description='To copy without any decompression/recompression a JPEG source file' default='NO'/>\";\n#endif\n    }\n    if( bHasDEFLATE )\n        osOptions += \"\"\n\"   <Option name='ZLEVEL' type='int' description='DEFLATE compression level 1-9' default='6'/>\";\n    if( bHasLZMA )\n        osOptions += \"\"\n\"   <Option name='LZMA_PRESET' type='int' description='LZMA compression level 0(fast)-9(slow)' default='6'/>\";\n    if( bHasZSTD )\n        osOptions += \"\"\n\"   <Option name='ZSTD_LEVEL' type='int' description='ZSTD compression level 1(fast)-22(slow)' default='9'/>\";\n#ifdef HAVE_LERC\n    osOptions += \"\"\n\"   <Option name='MAX_Z_ERROR' type='float' description='Maximum error for LERC compression' default='0'/>\";\n#endif\n    if ( bHasWebP )\n    {\n      osOptions += \"\"\n#if WEBP_ENCODER_ABI_VERSION >= 0x0100\n\"   <Option name='WEBP_LOSSLESS' type='boolean' description='Whether lossless compression should be used' default='FALSE'/>\"\n#endif\n\"   <Option name='WEBP_LEVEL' type='int' description='WEBP quality level. Low values result in higher compression ratios' default='75'/>\";\n    }\n    osOptions += \"\"\n\"   <Option name='NUM_THREADS' type='string' description='Number of worker threads for compression. Can be set to ALL_CPUS' default='1'/>\"\n\"   <Option name='NBITS' type='int' description='BITS for sub-byte files (1-7), sub-uint16 (9-15), sub-uint32 (17-31), or float32 (16)'/>\"\n\"   <Option name='INTERLEAVE' type='string-select' default='PIXEL'>\"\n\"       <Value>BAND</Value>\"\n\"       <Value>PIXEL</Value>\"\n\"   </Option>\"\n\"   <Option name='TILED' type='boolean' description='Switch to tiled format'/>\"\n\"   <Option name='TFW' type='boolean' description='Write out world file'/>\"\n\"   <Option name='RPB' type='boolean' description='Write out .RPB (RPC) file'/>\"\n\"   <Option name='RPCTXT' type='boolean' description='Write out _RPC.TXT file'/>\"\n\"   <Option name='BLOCKXSIZE' type='int' description='Tile Width'/>\"\n\"   <Option name='BLOCKYSIZE' type='int' description='Tile/Strip Height'/>\"\n\"   <Option name='PHOTOMETRIC' type='string-select'>\"\n\"       <Value>MINISBLACK</Value>\"\n\"       <Value>MINISWHITE</Value>\"\n\"       <Value>PALETTE</Value>\"\n\"       <Value>RGB</Value>\"\n\"       <Value>CMYK</Value>\"\n\"       <Value>YCBCR</Value>\"\n\"       <Value>CIELAB</Value>\"\n\"       <Value>ICCLAB</Value>\"\n\"       <Value>ITULAB</Value>\"\n\"   </Option>\"\n\"   <Option name='SPARSE_OK' type='boolean' description='Should empty blocks be omitted on disk?' default='FALSE'/>\"\n\"   <Option name='ALPHA' type='string-select' description='Mark first extrasample as being alpha'>\"\n\"       <Value>NON-PREMULTIPLIED</Value>\"\n\"       <Value>PREMULTIPLIED</Value>\"\n\"       <Value>UNSPECIFIED</Value>\"\n\"       <Value aliasOf='NON-PREMULTIPLIED'>YES</Value>\"\n\"       <Value aliasOf='UNSPECIFIED'>NO</Value>\"\n\"   </Option>\"\n\"   <Option name='PROFILE' type='string-select' default='GDALGeoTIFF'>\"\n\"       <Value>GDALGeoTIFF</Value>\"\n\"       <Value>GeoTIFF</Value>\"\n\"       <Value>BASELINE</Value>\"\n\"   </Option>\"\n\"   <Option name='PIXELTYPE' type='string-select'>\"\n\"       <Value>DEFAULT</Value>\"\n\"       <Value>SIGNEDBYTE</Value>\"\n\"   </Option>\"\n#ifdef BIGTIFF_SUPPORT\n\"   <Option name='BIGTIFF' type='string-select' description='Force creation of BigTIFF file'>\"\n\"     <Value>YES</Value>\"\n\"     <Value>NO</Value>\"\n\"     <Value>IF_NEEDED</Value>\"\n\"     <Value>IF_SAFER</Value>\"\n\"   </Option>\"\n#endif\n\"   <Option name='ENDIANNESS' type='string-select' default='NATIVE' description='Force endianness of created file. For DEBUG purpose mostly'>\"\n\"       <Value>NATIVE</Value>\"\n\"       <Value>INVERTED</Value>\"\n\"       <Value>LITTLE</Value>\"\n\"       <Value>BIG</Value>\"\n\"   </Option>\"\n\"   <Option name='COPY_SRC_OVERVIEWS' type='boolean' default='NO' description='Force copy of overviews of source dataset (CreateCopy())'/>\"\n\"   <Option name='SOURCE_ICC_PROFILE' type='string' description='ICC profile'/>\"\n\"   <Option name='SOURCE_PRIMARIES_RED' type='string' description='x,y,1.0 (xyY) red chromaticity'/>\"\n\"   <Option name='SOURCE_PRIMARIES_GREEN' type='string' description='x,y,1.0 (xyY) green chromaticity'/>\"\n\"   <Option name='SOURCE_PRIMARIES_BLUE' type='string' description='x,y,1.0 (xyY) blue chromaticity'/>\"\n\"   <Option name='SOURCE_WHITEPOINT' type='string' description='x,y,1.0 (xyY) whitepoint'/>\"\n\"   <Option name='TIFFTAG_TRANSFERFUNCTION_RED' type='string' description='Transfer function for red'/>\"\n\"   <Option name='TIFFTAG_TRANSFERFUNCTION_GREEN' type='string' description='Transfer function for green'/>\"\n\"   <Option name='TIFFTAG_TRANSFERFUNCTION_BLUE' type='string' description='Transfer function for blue'/>\"\n\"   <Option name='TIFFTAG_TRANSFERRANGE_BLACK' type='string' description='Transfer range for black'/>\"\n\"   <Option name='TIFFTAG_TRANSFERRANGE_WHITE' type='string' description='Transfer range for white'/>\"\n\"   <Option name='STREAMABLE_OUTPUT' type='boolean' default='NO' description='Enforce a mode compatible with a streamable file'/>\"\n\"   <Option name='GEOTIFF_KEYS_FLAVOR' type='string-select' default='STANDARD' description='Which flavor of GeoTIFF keys must be used'>\"\n\"       <Value>STANDARD</Value>\"\n\"       <Value>ESRI_PE</Value>\"\n\"   </Option>\"\n\"</CreationOptionList>\";\n\n/* -------------------------------------------------------------------- */\n/*      Set the driver details.                                         */\n/* -------------------------------------------------------------------- */\n    poDriver->SetDescription( \"GTiff\" );\n    poDriver->SetMetadataItem( GDAL_DCAP_RASTER, \"YES\" );\n    poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, \"GeoTIFF\" );\n    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, \"frmt_gtiff.html\" );\n    poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, \"image/tiff\" );\n    poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, \"tif\" );\n    poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, \"tif tiff\" );\n    poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,\n                               \"Byte UInt16 Int16 UInt32 Int32 Float32 \"\n                               \"Float64 CInt16 CInt32 CFloat32 CFloat64\" );\n    poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST, osOptions );\n    poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,\n\"<OpenOptionList>\"\n\"   <Option name='NUM_THREADS' type='string' description='Number of worker threads for compression. Can be set to ALL_CPUS' default='1'/>\"\n\"   <Option name='GEOTIFF_KEYS_FLAVOR' type='string-select' default='STANDARD' description='Which flavor of GeoTIFF keys must be used (for writing)'>\"\n\"       <Value>STANDARD</Value>\"\n\"       <Value>ESRI_PE</Value>\"\n\"   </Option>\"\n\"   <Option name='GEOREF_SOURCES' type='string' description='Comma separated list made with values INTERNAL/TABFILE/WORLDFILE/PAM/NONE that describe the priority order for georeferencing' default='PAM,INTERNAL,TABFILE,WORLDFILE'/>\"\n\"   <Option name='SPARSE_OK' type='boolean' description='Should empty blocks be omitted on disk?' default='FALSE'/>\"\n\"</OpenOptionList>\" );\n    poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, \"YES\" );\n    poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, \"YES\" );\n\n#ifdef INTERNAL_LIBTIFF\n    poDriver->SetMetadataItem( \"LIBTIFF\", \"INTERNAL\" );\n#else\n    poDriver->SetMetadataItem( \"LIBTIFF\", TIFFLIB_VERSION_STR );\n#endif\n\n    poDriver->pfnOpen = GTiffDataset::Open;\n    poDriver->pfnCreate = GTiffDataset::Create;\n    poDriver->pfnCreateCopy = GTiffDataset::CreateCopy;\n    poDriver->pfnUnloadDriver = GDALDeregister_GTiff;\n    poDriver->pfnIdentify = GTiffDataset::Identify;\n\n    GetGDALDriverManager()->RegisterDriver( poDriver );\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/vrt/vrtderivedrasterband.cpp": "/******************************************************************************\n *\n * Project:  Virtual GDAL Datasets\n * Purpose:  Implementation of a sourced raster band that derives its raster\n *           by applying an algorithm (GDALDerivedPixelFunc) to the sources.\n * Author:   Pete Nagy\n *\n ******************************************************************************\n * Copyright (c) 2005 Vexcel Corp.\n * Copyright (c) 2008-2011, Even Rouault <even dot rouault at mines-paris dot org>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *****************************************************************************/\n\n#include \"cpl_minixml.h\"\n#include \"cpl_string.h\"\n#include \"vrtdataset.h\"\n#include \"cpl_multiproc.h\"\n#include \"cpl_spawn.h\"\n\n#if !defined(WIN32)\n  #include <sys/stat.h>\n  #include <sys/types.h>\n  #ifdef HAVE_UNISTD_H\n    #include <unistd.h>\n  #endif\n#endif\n\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <utility>\n\n/*! @cond Doxygen_Suppress */\n\nCPL_CVSID(\"$Id: vrtderivedrasterband.cpp 02beee46c6d3fb365eaef6218b3c4944d83661c2 2019-11-11 11:59:23Z Even Rouault $\")\n\n// #define GDAL_VRT_DISABLE_PYTHON\n// #define PYTHONSO_DEFAULT \"libpython2.7.so\"\n\n#ifndef GDAL_VRT_ENABLE_PYTHON_DEFAULT\n// Can be YES, NO or TRUSTED_MODULES\n#define GDAL_VRT_ENABLE_PYTHON_DEFAULT \"TRUSTED_MODULES\"\n#endif\n\nstatic std::map<CPLString, GDALDerivedPixelFunc> osMapPixelFunction;\nstatic bool gbHasInitializedPython = false;\nstatic int gnPythonInstanceCounter = 0;\nstatic CPLMutex* ghMutex = nullptr;\n\n// Subset of Python API defined as function of pointers\ntypedef struct PyObject_t PyObject;\n#define Py_file_input 257\nstatic void (*Py_SetProgramName)(const char*) = nullptr;\nstatic PyObject* (*PyBuffer_FromReadWriteMemory)(void*, size_t) = nullptr;\nstatic PyObject* (*PyTuple_New)(size_t) = nullptr;\nstatic PyObject* (*PyInt_FromLong)(long) = nullptr;\nstatic PyObject* (*PyFloat_FromDouble)(double) = nullptr;\nstatic PyObject* (*PyObject_Call)(PyObject*, PyObject*, PyObject*) = nullptr;\nstatic void (*Py_IncRef)(PyObject*) = nullptr;\nstatic void (*Py_DecRef)(PyObject*) = nullptr;\nstatic PyObject* (*PyErr_Occurred)(void) = nullptr;\nstatic void (*PyErr_Print)(void) = nullptr;\nstatic int (*Py_IsInitialized)(void) = nullptr;\nstatic void (*Py_InitializeEx)(int) = nullptr;\nstatic void (*PyEval_InitThreads)(void) = nullptr;\ntypedef struct PyThreadState_t PyThreadState;\nstatic PyThreadState* (*PyEval_SaveThread)(void) = nullptr;\nstatic void (*PyEval_RestoreThread)(PyThreadState*) = nullptr;\nstatic void (*Py_Finalize)(void) = nullptr;\nstatic PyObject* (*Py_CompileString)(const char*, const char*, int) = nullptr;\nstatic PyObject* (*Py_CompileStringExFlags)(const char*, const char*, int, void*, int) = nullptr;\nstatic PyObject* (*PyImport_ExecCodeModule)(const char*, PyObject*) = nullptr;\nstatic PyObject* (*PyObject_GetAttrString)(PyObject*, const char*) = nullptr;\nstatic int (*PyTuple_SetItem)(PyObject *, size_t, PyObject *) = nullptr;\nstatic void (*PyObject_Print)(PyObject*,FILE*,int) = nullptr;\nstatic PyObject* (*PyString_FromStringAndSize)(const void*, size_t) = nullptr;\nstatic PyObject* (*PyImport_ImportModule)(const char*) = nullptr;\nstatic int (*PyCallable_Check)(PyObject*) = nullptr;\nstatic PyObject* (*PyDict_New)(void) = nullptr;\nstatic int (*PyDict_SetItemString)(PyObject *p, const char *key,\n                                   PyObject *val) = nullptr;\nstatic void (*PyErr_Fetch)(PyObject **poPyType, PyObject **poPyValue,\n                           PyObject **poPyTraceback) = nullptr;\nstatic void (*PyErr_Clear)(void) = nullptr;\nstatic const char* (*PyString_AsString)(PyObject*) = nullptr;\nstatic const char* (*Py_GetVersion)(void) = nullptr;\n\ntypedef int PyGILState_STATE;\nstatic PyGILState_STATE (*PyGILState_Ensure)(void) = nullptr;\nstatic void (*PyGILState_Release)(PyGILState_STATE) = nullptr;\n\n// Emulate Py_CompileString with Py_CompileStringExFlags\n// Probably just a temporary measure for a bug of Python 3.8.0 on Windows\n// https://bugs.python.org/issue37633\nstatic PyObject* GDAL_Py_CompileString(const char *str, const char *filename, int start)\n{\n    return Py_CompileStringExFlags(str, filename, start, nullptr, -1);\n}\n\n/* Flags for getting buffers */\n#define PyBUF_WRITABLE 0x0001\n#define PyBUF_FORMAT 0x0004\n#define PyBUF_ND 0x0008\n#define PyBUF_STRIDES (0x0010 | PyBUF_ND)\n#define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)\n#define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)\n\ntypedef struct\n{\n    //cppcheck-suppress unusedStructMember\n    char big_enough[256];\n} Py_buffer;\nstatic int (*PyBuffer_FillInfo)(Py_buffer *view, PyObject *obj, void *buf,\n                                size_t len, int readonly, int infoflags) = nullptr;\nstatic PyObject* (*PyMemoryView_FromBuffer)(Py_buffer *view) = nullptr;\n\nstatic PyThreadState* gphThreadState = nullptr;\n\n/************************************************************************/\n/*                        GDALCreateNumpyArray()                        */\n/************************************************************************/\n\nstatic PyObject* GDALCreateNumpyArray(PyObject* pCreateArray,\n                                      void* pBuffer,\n                                      GDALDataType eType,\n                                      int nHeight,\n                                      int nWidth )\n{\n    PyObject* poPyBuffer;\n    const size_t nSize = static_cast<size_t>(nHeight) * nWidth *\n                                    GDALGetDataTypeSizeBytes(eType);\n    if( PyBuffer_FromReadWriteMemory )\n    {\n        // Python 2\n        poPyBuffer = PyBuffer_FromReadWriteMemory(pBuffer, nSize);\n    }\n    else\n    {\n        // Python 3\n        Py_buffer pybuffer;\n        if( PyBuffer_FillInfo(&pybuffer, nullptr, (char*)pBuffer,\n                              nSize,\n                              0, PyBUF_FULL) != 0)\n        {\n            return nullptr;\n        }\n        poPyBuffer = PyMemoryView_FromBuffer(&pybuffer);\n    }\n    PyObject* pArgsCreateArray = PyTuple_New(4);\n    PyTuple_SetItem(pArgsCreateArray, 0, poPyBuffer);\n    const char* pszDataType = nullptr;\n    switch( eType )\n    {\n        case GDT_Byte: pszDataType = \"uint8\"; break;\n        case GDT_UInt16: pszDataType = \"uint16\"; break;\n        case GDT_Int16: pszDataType = \"int16\"; break;\n        case GDT_UInt32: pszDataType = \"uint32\"; break;\n        case GDT_Int32: pszDataType = \"int32\"; break;\n        case GDT_Float32: pszDataType = \"float32\"; break;\n        case GDT_Float64: pszDataType = \"float64\"; break;\n        case GDT_CInt16:\n        case GDT_CInt32:\n            CPLAssert(FALSE);\n            break;\n        case GDT_CFloat32: pszDataType = \"complex64\"; break;\n        case GDT_CFloat64: pszDataType = \"complex128\"; break;\n        default:\n            CPLAssert(FALSE);\n            break;\n    }\n    PyTuple_SetItem(pArgsCreateArray, 1,\n                PyString_FromStringAndSize(pszDataType, strlen(pszDataType)));\n    PyTuple_SetItem(pArgsCreateArray, 2, PyInt_FromLong(nHeight));\n    PyTuple_SetItem(pArgsCreateArray, 3, PyInt_FromLong(nWidth));\n    PyObject* poNumpyArray = PyObject_Call(pCreateArray, pArgsCreateArray, nullptr);\n    Py_DecRef(pArgsCreateArray);\n    if (PyErr_Occurred())\n        PyErr_Print();\n    return poNumpyArray;\n}\n\n/* MinGW32 might define HAVE_DLFCN_H, so skip the unix implementation */\n#if defined(HAVE_DLFCN_H) && !defined(WIN32)\n\n#include <dlfcn.h>\n\ntypedef void* LibraryHandle;\n\n#define LOAD_NOCHECK_WITH_NAME(libHandle, x, name) \\\n    do { \\\n            void* ptr = dlsym(libHandle, name); \\\n            memcpy(&x, &ptr, sizeof(void*)); \\\n    } while(0)\n\n#elif defined(WIN32)\n\n#include <windows.h>\n#include <psapi.h>\n\ntypedef HMODULE LibraryHandle;\n\n#define LOAD_NOCHECK_WITH_NAME(libHandle, x, name) \\\n    do { \\\n            FARPROC ptr = GetProcAddress(libHandle, name); \\\n            memcpy(&x, &ptr, sizeof(void*)); \\\n    } while(0)\n\n#endif\n\n#define STRINGIFY(x) #x\n\n#define LOAD_NOCHECK(libHandle, x) LOAD_NOCHECK_WITH_NAME(libHandle, x, STRINGIFY(x))\n#define LOAD_WITH_NAME(libHandle, x, name) \\\n    do { \\\n            LOAD_NOCHECK_WITH_NAME(libHandle, x, name); \\\n            if (!x) \\\n            { \\\n                CPLError(CE_Failure, CPLE_AppDefined, \"Cannot find %s\", name); \\\n                return false; \\\n            } \\\n    } while(0)\n#define LOAD(libHandle, x) LOAD_WITH_NAME(libHandle, x, STRINGIFY(x))\n\n/************************************************************************/\n/*                          LoadPythonAPI()                             */\n/************************************************************************/\n\n#if defined(LOAD_NOCHECK_WITH_NAME) && defined(HAVE_DLFCN_H) && !defined(WIN32)\nstatic LibraryHandle libHandleStatic = nullptr;\n#endif\n\n/** Load the subset of the Python C API that we need */\nstatic bool LoadPythonAPI()\n{\n    CPLMutexHolder oHolder(&ghMutex);\n\n    static bool bInit = false;\n    if( bInit )\n        return true;\n\n#ifdef LOAD_NOCHECK_WITH_NAME\n    // The static here is just to avoid Coverity warning about resource leak.\n    LibraryHandle libHandle = nullptr;\n    CPL_IGNORE_RET_VAL(libHandle);\n\n    const char* pszPythonSO = CPLGetConfigOption(\"PYTHONSO\", nullptr);\n#if defined(HAVE_DLFCN_H) && !defined(WIN32)\n\n    // First try in the current process in case the python symbols would\n    // be already loaded\n    libHandle = dlopen(nullptr, RTLD_LAZY);\n    libHandleStatic = libHandle;\n    if( libHandle != nullptr &&\n        dlsym(libHandle, \"Py_SetProgramName\") != nullptr )\n    {\n        CPLDebug(\"VRT\", \"Current process has python symbols loaded\");\n    }\n    else\n    {\n        libHandle = nullptr;\n    }\n\n    // Then try the user provided shared object name\n    if( libHandle == nullptr && pszPythonSO != nullptr )\n    {\n        // coverity[tainted_string]\n        libHandle = dlopen(pszPythonSO, RTLD_NOW | RTLD_GLOBAL);\n        if( libHandle == nullptr )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"Cannot load %s\",\n                     pszPythonSO);\n            return false;\n        }\n        if( dlsym(libHandle, \"Py_SetProgramName\") == nullptr )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"Cannot find Py_SetProgramName symbol in %s\",\n                     pszPythonSO);\n            return false;\n        }\n    }\n\n    // Then try the PYTHONSO_DEFAULT if defined at compile time\n#ifdef PYTHONSO_DEFAULT\n    if( libHandle == NULL )\n    {\n        libHandle = dlopen(PYTHONSO_DEFAULT, RTLD_NOW | RTLD_GLOBAL);\n        if( !libHandle )\n        {\n            CPLDebug(\"VRT\", \"%s found\", PYTHONSO_DEFAULT);\n        }\n    }\n#endif\n\n#if defined(__MACH__) && defined(__APPLE__)\n#define SO_EXT \"dylib\"\n#else\n#define IS_SO_EXT\n#define SO_EXT \"so\"\n#endif\n\n    const auto tryDlopen = [](CPLString osPythonSO)\n    {\n        CPLDebug(\"VRT\", \"Trying %s\", osPythonSO.c_str());\n        auto l_libHandle = dlopen(osPythonSO.c_str(), RTLD_NOW | RTLD_GLOBAL);\n#ifdef IS_SO_EXT\n        if( l_libHandle == nullptr )\n        {\n            osPythonSO += \".1.0\";\n            CPLDebug(\"VRT\", \"Trying %s\", osPythonSO.c_str());\n            l_libHandle = dlopen(osPythonSO.c_str(), RTLD_NOW | RTLD_GLOBAL);\n        }\n#endif\n        return l_libHandle;\n    };\n\n    // Then try to find the libpython that corresponds to the python binary\n    // in the PATH\n    if( libHandle == nullptr )\n    {\n        CPLString osVersion;\n        char* pszPath = getenv(\"PATH\");\n        if( pszPath != nullptr\n#ifdef DEBUG\n           // For testing purposes\n           && CPLTestBool( CPLGetConfigOption(\n                                    \"VRT_ENABLE_PYTHON_PATH\", \"YES\") )\n#endif\n          )\n        {\n            char** papszTokens = CSLTokenizeString2(pszPath, \":\", 0);\n            for( int iTry = 0; iTry < 2; ++iTry )\n            {\n                for( char** papszIter = papszTokens;\n                        papszIter != nullptr && *papszIter != nullptr;\n                        ++papszIter )\n                {\n                    struct stat sStat;\n                    CPLString osPythonBinary(\n                        CPLFormFilename(*papszIter, \"python\", nullptr));\n                    if( iTry == 1 )\n                        osPythonBinary += \"3\";\n                    if( lstat(osPythonBinary, &sStat) != 0 )\n                        continue;\n\n                    CPLDebug(\"VRT\", \"Found %s\", osPythonBinary.c_str());\n\n                    if( S_ISLNK(sStat.st_mode)\n#ifdef DEBUG\n                        // For testing purposes\n                        && CPLTestBool( CPLGetConfigOption(\n                                    \"VRT_ENABLE_PYTHON_SYMLINK\", \"YES\") )\n#endif\n                        )\n                    {\n                        // If this is a symlink, hopefully the resolved\n                        // name will be like \"python2.7\"\n                        const int nBufSize = 2048;\n                        std::vector<char> oFilename(nBufSize);\n                        char *szPointerFilename = &oFilename[0];\n                        int nBytes = static_cast<int>(\n                            readlink( osPythonBinary, szPointerFilename,\n                                      nBufSize ) );\n                        if (nBytes != -1)\n                        {\n                            szPointerFilename[std::min(nBytes,\n                                                       nBufSize - 1)] = 0;\n                            CPLString osFilename(\n                                            CPLGetFilename(szPointerFilename));\n                            CPLDebug(\"VRT\", \"Which is an alias to: %s\",\n                                     szPointerFilename);\n                            if( STARTS_WITH(osFilename, \"python\") )\n                            {\n                                osVersion = osFilename.substr(strlen(\"python\"));\n                                CPLDebug(\"VRT\",\n                                         \"Python version from binary name: %s\",\n                                         osVersion.c_str());\n                            }\n                        }\n                        else\n                        {\n                            CPLDebug(\"VRT\", \"realink(%s) failed\",\n                                        osPythonBinary.c_str());\n                        }\n                    }\n\n                    // Otherwise, expensive way: start the binary and ask\n                    // it for its version...\n                    if( osVersion.empty() )\n                    {\n                        const char* pszPrintVersion =\n                            \"import sys; print(str(sys.version_info[0]) +\"\n                            \"'.' + str(sys.version_info[1]))\";\n                        const char* const apszArgv[] = {\n                                osPythonBinary.c_str(), \"-c\",\n                                pszPrintVersion,\n                                nullptr };\n                        const CPLString osTmpFilename(\n                                        \"/vsimem/LoadPythonAPI/out.txt\");\n                        VSILFILE* fout = VSIFOpenL( osTmpFilename, \"wb+\");\n                        if( CPLSpawn( apszArgv, nullptr, fout, FALSE ) == 0 )\n                        {\n                            char* pszStr = reinterpret_cast<char*>(\n                                VSIGetMemFileBuffer( osTmpFilename,\n                                                        nullptr, FALSE ));\n                            osVersion = pszStr;\n                            if( !osVersion.empty() &&\n                                osVersion.back() == '\\n' )\n                            {\n                                osVersion.resize(osVersion.size() - 1);\n                            }\n                            CPLDebug(\"VRT\", \"Python version from binary: %s\",\n                                        osVersion.c_str());\n                        }\n                        VSIFCloseL(fout);\n                        VSIUnlink(osTmpFilename);\n                    }\n                    break;\n                }\n                if( !osVersion.empty() )\n                    break;\n            }\n            CSLDestroy(papszTokens);\n        }\n\n        if( !osVersion.empty() )\n        {\n            libHandle = tryDlopen(\"libpython\" + osVersion + \".\" SO_EXT);\n            if( libHandle != nullptr )\n            {\n                CPLDebug(\"VRT\", \"... success\");\n            }\n            else if( osVersion[0] == '3' )\n            {\n                libHandle = tryDlopen(\"libpython\" + osVersion + \"m.\" SO_EXT);\n                if( libHandle != nullptr )\n                {\n                    CPLDebug(\"VRT\", \"... success\");\n                }\n            }\n        }\n    }\n\n    // Otherwise probe a few known objects.\n    // Note: update doc/source/drivers/raster/vrt.rst if change\n    if( libHandle == nullptr )\n    {\n        const char* const apszPythonSO[] = { \"libpython2.7.\" SO_EXT,\n                                                \"libpython2.6.\" SO_EXT,\n                                                \"libpython3.4m.\" SO_EXT,\n                                                \"libpython3.5m.\" SO_EXT,\n                                                \"libpython3.6m.\" SO_EXT,\n                                                \"libpython3.7m.\" SO_EXT,\n                                                \"libpython3.8m.\" SO_EXT,\n                                                \"libpython3.3.\" SO_EXT,\n                                                \"libpython3.2.\" SO_EXT };\n        for( size_t i = 0; libHandle == nullptr &&\n                            i < CPL_ARRAYSIZE(apszPythonSO); ++i )\n        {\n            libHandle = tryDlopen(apszPythonSO[i]);\n            if( libHandle != nullptr )\n                CPLDebug(\"VRT\", \"... success\");\n        }\n    }\n\n#elif defined(WIN32)\n\n    // First try in the current process in case the python symbols would\n    // be already loaded\n    HANDLE hProcess = GetCurrentProcess();\n    const size_t nMaxModules = 10000;\n    HMODULE* pahModules = static_cast<HMODULE*>(\n        CPLMalloc(nMaxModules * sizeof(HMODULE)));\n    DWORD nSizeNeeded = 0;\n\n    EnumProcessModules(hProcess, pahModules, nMaxModules * sizeof(HMODULE),\n                        &nSizeNeeded);\n\n    const size_t nModules =\n        std::min(nMaxModules,\n                 static_cast<size_t>(nSizeNeeded) / sizeof(HMODULE));\n    for( size_t i = 0; i < nModules; i++ )\n    {\n        if( GetProcAddress(pahModules[i], \"Py_SetProgramName\") )\n        {\n            libHandle = pahModules[i];\n            CPLDebug(\"VRT\", \"Current process has python symbols loaded\");\n            break;\n        }\n    }\n    CPLFree(pahModules);\n\n    // Then try the user provided shared object name\n    if( libHandle == nullptr && pszPythonSO != nullptr )\n    {\n        UINT        uOldErrorMode;\n        /* Avoid error boxes to pop up (#5211, #5525) */\n        uOldErrorMode = SetErrorMode(SEM_NOOPENFILEERRORBOX |\n                                     SEM_FAILCRITICALERRORS);\n\n#if (defined(WIN32) && _MSC_VER >= 1310) || __MSVCRT_VERSION__ >= 0x0601\n        if( CPLTestBool( CPLGetConfigOption( \"GDAL_FILENAME_IS_UTF8\", \"YES\" ) ) )\n        {\n            wchar_t *pwszFilename =\n                CPLRecodeToWChar( pszPythonSO, CPL_ENC_UTF8, CPL_ENC_UCS2 );\n            libHandle = LoadLibraryW(pwszFilename);\n            CPLFree( pwszFilename );\n        }\n        else\n#endif\n        {\n            libHandle = LoadLibrary(pszPythonSO);\n        }\n\n        SetErrorMode(uOldErrorMode);\n\n        if( libHandle == nullptr )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"Cannot load %s\",\n                     pszPythonSO);\n            return false;\n        }\n        if( GetProcAddress(libHandle, \"Py_SetProgramName\") == nullptr )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"Cannot find Py_SetProgramName symbol in %s\",\n                     pszPythonSO);\n            return false;\n        }\n    }\n\n    // Then try the PYTHONSO_DEFAULT if defined at compile time\n#ifdef PYTHONSO_DEFAULT\n    if( libHandle == nullptr )\n    {\n        UINT        uOldErrorMode;\n        uOldErrorMode = SetErrorMode(SEM_NOOPENFILEERRORBOX |\n                                        SEM_FAILCRITICALERRORS);\n\n        libHandle = LoadLibrary(PYTHONSO_DEFAULT);\n        SetErrorMode(uOldErrorMode);\n        if( !libHandle )\n        {\n            CPLDebug(\"VRT\", \"%s found\", PYTHONSO_DEFAULT);\n        }\n    }\n#endif\n\n    // Then try to find the pythonXY.dll that corresponds to the python binary\n    // in the PATH\n    if( libHandle == nullptr )\n    {\n        CPLString osDLLName;\n        char* pszPath = getenv(\"PATH\");\n        if( pszPath != nullptr\n#ifdef DEBUG\n           // For testing purposes\n           && CPLTestBool( CPLGetConfigOption(\n                                    \"VRT_ENABLE_PYTHON_PATH\", \"YES\") )\n#endif\n          )\n        {\n            char** papszTokens = CSLTokenizeString2(pszPath, \";\", 0);\n            for( int iTry = 0; iTry < 2; ++iTry )\n            {\n                for( char** papszIter = papszTokens;\n                        papszIter != nullptr && *papszIter != nullptr;\n                        ++papszIter )\n                {\n                    VSIStatBufL sStat;\n                    CPLString osPythonBinary(\n                            CPLFormFilename(*papszIter, \"python.exe\", nullptr));\n                    if( iTry == 1 )\n                        osPythonBinary += \"3\";\n                    if( VSIStatL(osPythonBinary, &sStat) != 0 )\n                        continue;\n\n                    CPLDebug(\"VRT\", \"Found %s\", osPythonBinary.c_str());\n\n                    // In python2.7, the dll is in the same directory as the exe\n                    char** papszFiles = VSIReadDir(*papszIter);\n                    for( char** papszFileIter = papszFiles;\n                                papszFileIter != nullptr && *papszFileIter != nullptr;\n                                ++papszFileIter )\n                    {\n                        if( STARTS_WITH_CI(*papszFileIter, \"python\") &&\n                            !EQUAL(*papszFileIter, \"python3.dll\") &&\n                            EQUAL(CPLGetExtension(*papszFileIter), \"dll\") )\n                        {\n                            osDLLName = CPLFormFilename(*papszIter,\n                                                        *papszFileIter,\n                                                        nullptr);\n                            break;\n                        }\n                    }\n                    CSLDestroy(papszFiles);\n\n                    // In python3.2, the dll is in the DLLs subdirectory\n                    if( osDLLName.empty() )\n                    {\n                        CPLString osDLLsDir(\n                                CPLFormFilename(*papszIter, \"DLLs\", nullptr));\n                        papszFiles = VSIReadDir( osDLLsDir );\n                        for( char** papszFileIter = papszFiles;\n                                    papszFileIter != nullptr && *papszFileIter != nullptr;\n                                    ++papszFileIter )\n                        {\n                            if( STARTS_WITH_CI(*papszFileIter, \"python\") &&\n                                EQUAL(CPLGetExtension(*papszFileIter), \"dll\") )\n                            {\n                                osDLLName = CPLFormFilename(osDLLsDir,\n                                                            *papszFileIter,\n                                                            nullptr);\n                                break;\n                            }\n                        }\n                        CSLDestroy(papszFiles);\n                    }\n\n                    break;\n                }\n                if( !osDLLName.empty() )\n                    break;\n            }\n            CSLDestroy(papszTokens);\n        }\n\n        if( !osDLLName.empty() )\n        {\n            //CPLDebug(\"VRT\", \"Trying %s\", osDLLName.c_str());\n            UINT        uOldErrorMode;\n            uOldErrorMode = SetErrorMode(SEM_NOOPENFILEERRORBOX |\n                                            SEM_FAILCRITICALERRORS);\n            libHandle = LoadLibrary(osDLLName);\n            SetErrorMode(uOldErrorMode);\n            if( libHandle != nullptr )\n            {\n                CPLDebug(\"VRT\", \"%s loaded\", osDLLName.c_str());\n            }\n        }\n    }\n\n    // Otherwise probe a few known objects\n    // Note: update vrt_tutorial.dox if change\n    if( libHandle == nullptr )\n    {\n        const char* const apszPythonSO[] = { \"python27.dll\",\n                                            \"python26.dll\",\n                                            \"python34.dll\",\n                                            \"python35.dll\",\n                                            \"python36.dll\",\n                                            \"python37.dll\",\n                                            \"python38.dll\",\n                                            \"python33.dll\",\n                                            \"python32.dll\" };\n        UINT        uOldErrorMode;\n        uOldErrorMode = SetErrorMode(SEM_NOOPENFILEERRORBOX |\n                                        SEM_FAILCRITICALERRORS);\n\n        for( size_t i = 0; libHandle == nullptr &&\n                            i < CPL_ARRAYSIZE(apszPythonSO); ++i )\n        {\n            CPLDebug(\"VRT\", \"Trying %s\", apszPythonSO[i]);\n            libHandle = LoadLibrary(apszPythonSO[i]);\n            if( libHandle != nullptr )\n                CPLDebug(\"VRT\", \"... success\");\n        }\n        SetErrorMode(uOldErrorMode);\n    }\n#endif\n    if( !libHandle )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Cannot find python/libpython. You can set the PYTHONSO \"\n                 \"configuration option to point to the a python .so/.dll/.dylib\");\n        return false;\n    }\n\n    LOAD(libHandle, Py_SetProgramName);\n    LOAD_NOCHECK(libHandle, PyBuffer_FromReadWriteMemory);\n    LOAD_NOCHECK(libHandle, PyBuffer_FillInfo);\n    LOAD_NOCHECK(libHandle, PyMemoryView_FromBuffer);\n    if( PyBuffer_FromReadWriteMemory == nullptr &&\n        (PyBuffer_FillInfo == nullptr || PyMemoryView_FromBuffer == nullptr) )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Cannot find PyBuffer_FillInfo or \"\n                 \"PyBuffer_FillInfo+PyMemoryView_FromBuffer\\n\");\n        return false;\n    }\n    LOAD(libHandle, PyTuple_New);\n    if( PyBuffer_FromReadWriteMemory )\n    {\n        // Python 2\n        LOAD(libHandle, PyInt_FromLong);\n        LOAD(libHandle, PyString_FromStringAndSize);\n        LOAD(libHandle, PyString_AsString);\n    }\n    else\n    {\n        // Python 3\n        LOAD_WITH_NAME(libHandle, PyInt_FromLong, \"PyLong_FromLong\");\n        LOAD_WITH_NAME(libHandle, PyString_FromStringAndSize,\n                                        \"PyBytes_FromStringAndSize\");\n        LOAD_WITH_NAME(libHandle, PyString_AsString, \"PyBytes_AsString\");\n    }\n    LOAD(libHandle, PyFloat_FromDouble);\n    LOAD(libHandle, PyObject_Call);\n    LOAD(libHandle, Py_IncRef);\n    LOAD(libHandle, Py_DecRef);\n    LOAD(libHandle, PyErr_Occurred);\n    LOAD(libHandle, PyErr_Print);\n    LOAD(libHandle, Py_IsInitialized);\n    LOAD(libHandle, Py_InitializeEx);\n    LOAD(libHandle, PyEval_InitThreads);\n    LOAD(libHandle, PyEval_SaveThread);\n    LOAD(libHandle, PyEval_RestoreThread);\n    LOAD(libHandle, Py_Finalize);\n    LOAD_NOCHECK(libHandle, Py_CompileString);\n    if( Py_CompileString == nullptr )\n    {\n        // Probably just a temporary measure for a bug of Python 3.8.0 on Windows\n        // https://bugs.python.org/issue37633\n        LOAD(libHandle, Py_CompileStringExFlags);\n        Py_CompileString = GDAL_Py_CompileString;\n    }\n    LOAD(libHandle, PyImport_ExecCodeModule);\n    LOAD(libHandle, PyObject_GetAttrString);\n    LOAD(libHandle, PyTuple_SetItem);\n    LOAD(libHandle, PyObject_Print);\n    LOAD(libHandle, PyImport_ImportModule);\n    LOAD(libHandle, PyCallable_Check);\n    LOAD(libHandle, PyDict_New);\n    LOAD(libHandle, PyDict_SetItemString);\n    LOAD(libHandle, PyGILState_Ensure);\n    LOAD(libHandle, PyGILState_Release);\n    LOAD(libHandle, PyErr_Fetch);\n    LOAD(libHandle, PyErr_Clear);\n    LOAD(libHandle, Py_GetVersion);\n\n    CPLString osPythonVersion(Py_GetVersion());\n    osPythonVersion.replaceAll(\"\\r\\n\", ' ');\n    osPythonVersion.replaceAll('\\n', ' ');\n    CPLDebug(\"VRT\", \"Python version used: %s\", osPythonVersion.c_str());\n\n#else // LOAD_NOCHECK_WITH_NAME\n    CPLError(CE_Failure, CPLE_AppDefined,\n             \"This platform doesn't support dynamic loading of libraries\")\n    return false;\n#endif // LOAD_NOCHECK_WITH_NAME\n\n    bInit = true;\n    return true;\n}\n\n/************************************************************************/\n/*                      GetPyExceptionString()                          */\n/************************************************************************/\n\nstatic CPLString GetPyExceptionString()\n{\n    PyObject *poPyType = nullptr;\n    PyObject *poPyValue = nullptr;\n    PyObject *poPyTraceback = nullptr;\n\n    PyErr_Fetch(&poPyType, &poPyValue, &poPyTraceback);\n    if( poPyType )\n        Py_IncRef(poPyType);\n    if( poPyValue )\n        Py_IncRef(poPyValue);\n    if( poPyTraceback )\n        Py_IncRef(poPyTraceback);\n\n    // This is a mess. traceback.format_exception/format_exception_only\n    // sometimes throw exceptions themselves !\n    CPLString osPythonCode(\n        \"import traceback\\n\"\n        \"\\n\"\n        \"def GDALFormatException2(etype, value):\\n\"\n        \"    try:\\n\"\n        \"       return ''.join(traceback.format_exception_only(etype, value)).encode('UTF-8')\\n\"\n        \"    except:\\n\"\n        \"       return (str(etype) + ', ' + str(value)).encode('UTF-8')\\n\"\n        \"\\n\"\n        \"def GDALFormatException3(etype, value, tb):\\n\"\n        //\"    print(etype, value, tb)\\n\"\n        \"    try:\\n\"\n        \"       return ''.join(traceback.format_exception(etype, value, tb)).encode('UTF-8')\\n\"\n        \"    except:\\n\"\n        \"       return (str(etype) + ', ' + str(value)).encode('UTF-8')\\n\");\n\n    CPLString osRet(\"An exception occurred in exception formatting code...\");\n\n    static int nCounter = 0;\n    CPLString osModuleName( CPLSPrintf(\"gdal_exception_%d\", nCounter));\n    PyObject* poCompiledString = Py_CompileString(osPythonCode,\n                                                  osModuleName, Py_file_input);\n    if( poCompiledString == nullptr || PyErr_Occurred() )\n    {\n        PyErr_Print();\n    }\n    else\n    {\n        PyObject* poModule =\n            PyImport_ExecCodeModule(osModuleName, poCompiledString);\n        CPLAssert(poModule);\n\n        Py_DecRef(poCompiledString);\n\n        PyObject* poPyGDALFormatException2 = PyObject_GetAttrString(poModule,\n                                                \"GDALFormatException2\" );\n        CPLAssert(poPyGDALFormatException2);\n\n        PyObject* poPyGDALFormatException3 = PyObject_GetAttrString(poModule,\n                                                \"GDALFormatException3\" );\n        CPLAssert(poPyGDALFormatException3);\n\n        Py_DecRef(poModule);\n\n        PyObject* pyArgs = PyTuple_New( poPyTraceback ? 3 : 2);\n        PyTuple_SetItem(pyArgs, 0, poPyType);\n        PyTuple_SetItem(pyArgs, 1, poPyValue);\n        if( poPyTraceback )\n            PyTuple_SetItem(pyArgs, 2, poPyTraceback );\n        PyObject* poPyRet = PyObject_Call(\n            poPyTraceback ? poPyGDALFormatException3 : poPyGDALFormatException2,\n            pyArgs, nullptr );\n        Py_DecRef(pyArgs);\n\n        if( PyErr_Occurred() )\n        {\n            osRet = \"An exception occurred in exception formatting code...\";\n            PyErr_Print();\n        }\n        else\n        {\n            osRet = PyString_AsString(poPyRet);\n            Py_DecRef(poPyRet);\n        }\n\n        Py_DecRef(poPyGDALFormatException2);\n        Py_DecRef(poPyGDALFormatException3);\n    }\n\n    if( poPyType )\n        Py_DecRef(poPyType);\n    if( poPyValue )\n        Py_DecRef(poPyValue);\n    if( poPyTraceback )\n        Py_DecRef(poPyTraceback);\n\n    return osRet;\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                     VRTDerivedRasterBandPrivateData                  */\n/* ==================================================================== */\n/************************************************************************/\n\nclass VRTDerivedRasterBandPrivateData\n{\n    public:\n        CPLString m_osCode;\n        CPLString m_osLanguage;\n        int       m_nBufferRadius;\n        PyObject* m_poGDALCreateNumpyArray;\n        PyObject* m_poUserFunction;\n        bool      m_bPythonInitializationDone;\n        bool      m_bPythonInitializationSuccess;\n        bool      m_bExclusiveLock;\n        bool      m_bFirstTime;\n        std::vector< std::pair<CPLString,CPLString> > m_oFunctionArgs;\n\n        VRTDerivedRasterBandPrivateData():\n            m_osLanguage(\"C\"),\n            m_nBufferRadius(0),\n            m_poGDALCreateNumpyArray(nullptr),\n            m_poUserFunction(nullptr),\n            m_bPythonInitializationDone(false),\n            m_bPythonInitializationSuccess(false),\n            m_bExclusiveLock(false),\n            m_bFirstTime(true)\n        {\n        }\n\n        virtual ~VRTDerivedRasterBandPrivateData()\n        {\n            if( m_poGDALCreateNumpyArray )\n                Py_DecRef(m_poGDALCreateNumpyArray);\n            if( m_poUserFunction )\n                Py_DecRef(m_poUserFunction);\n\n            CPLMutexHolder oHolder(&ghMutex);\n            gnPythonInstanceCounter --;\n        }\n};\n\n/************************************************************************/\n/* ==================================================================== */\n/*                            VRT_GIL_Holder                            */\n/* ==================================================================== */\n/************************************************************************/\n\nclass VRT_GIL_Holder\n{\n        bool             m_bExclusiveLock;\n        PyGILState_STATE m_eState;\n\n    public:\n\n        explicit VRT_GIL_Holder(bool bExclusiveLock);\n        virtual ~VRT_GIL_Holder();\n};\n\nVRT_GIL_Holder::VRT_GIL_Holder(bool bExclusiveLock):\n    m_bExclusiveLock(bExclusiveLock)\n{\n    if( bExclusiveLock )\n    {\n        if( ghMutex )\n            CPLAcquireMutex( ghMutex, 1000.0 );\n    }\n    m_eState = PyGILState_Ensure();\n}\n\nVRT_GIL_Holder::~VRT_GIL_Holder()\n{\n    PyGILState_Release(m_eState);\n    if( m_bExclusiveLock )\n    {\n        if( ghMutex )\n            CPLReleaseMutex( ghMutex );\n    }\n    else\n    {\n    }\n}\n\n/************************************************************************/\n/* ==================================================================== */\n/*                          VRTDerivedRasterBand                        */\n/* ==================================================================== */\n/************************************************************************/\n\n/************************************************************************/\n/*                        VRTDerivedRasterBand()                        */\n/************************************************************************/\n\nVRTDerivedRasterBand::VRTDerivedRasterBand( GDALDataset *poDSIn, int nBandIn ) :\n    VRTSourcedRasterBand( poDSIn, nBandIn ),\n    m_poPrivate(nullptr),\n    pszFuncName(nullptr),\n    eSourceTransferType(GDT_Unknown)\n{\n    m_poPrivate = new VRTDerivedRasterBandPrivateData;\n}\n\n/************************************************************************/\n/*                        VRTDerivedRasterBand()                        */\n/************************************************************************/\n\nVRTDerivedRasterBand::VRTDerivedRasterBand( GDALDataset *poDSIn, int nBandIn,\n                                            GDALDataType eType,\n                                            int nXSize, int nYSize ) :\n    VRTSourcedRasterBand(poDSIn, nBandIn, eType, nXSize, nYSize),\n    m_poPrivate(nullptr),\n    pszFuncName(nullptr),\n    eSourceTransferType(GDT_Unknown)\n{\n    m_poPrivate = new VRTDerivedRasterBandPrivateData;\n}\n\n/************************************************************************/\n/*                       ~VRTDerivedRasterBand()                        */\n/************************************************************************/\n\nVRTDerivedRasterBand::~VRTDerivedRasterBand()\n\n{\n    CPLFree( pszFuncName );\n    delete m_poPrivate;\n}\n\n/************************************************************************/\n/*                               Cleanup()                              */\n/************************************************************************/\n\nvoid VRTDerivedRasterBand::Cleanup()\n{\n    if( ghMutex )\n        CPLDestroyMutex(ghMutex);\n    ghMutex = nullptr;\n\n    if( gnPythonInstanceCounter == 0 && gbHasInitializedPython &&\n        CPLTestBool(CPLGetConfigOption(\"GDAL_VRT_ENABLE_PYTHON_FINALIZE\",\n                                       \"YES\")) )\n    {\n        // We call Py_Finalize at driver destruction, rather at dataset\n        // destruction, since numpy crashes when it is reloaded after the next\n        // Py_Initialize\n        CPLDebug(\"VRT\", \"Py_Finalize() = %p\", Py_Finalize);\n        PyEval_RestoreThread(gphThreadState);\n        Py_Finalize();\n        gbHasInitializedPython = false;\n        gphThreadState = nullptr;\n    }\n}\n\n/************************************************************************/\n/*                           AddPixelFunction()                         */\n/************************************************************************/\n\n/*! @endcond */\n\n/**\n * This adds a pixel function to the global list of available pixel\n * functions for derived bands.  Pixel functions must be registered\n * in this way before a derived band tries to access data.\n *\n * Derived bands are stored with only the name of the pixel function\n * that it will apply, and if a pixel function matching the name is not\n * found the IRasterIO() call will do nothing.\n *\n * @param pszFuncName Name used to access pixel function\n * @param pfnNewFunction Pixel function associated with name.  An\n *  existing pixel function registered with the same name will be\n *  replaced with the new one.\n *\n * @return CE_None, invalid (NULL) parameters are currently ignored.\n */\nCPLErr CPL_STDCALL\nGDALAddDerivedBandPixelFunc( const char *pszFuncName,\n                             GDALDerivedPixelFunc pfnNewFunction )\n{\n    if( pszFuncName == nullptr || pszFuncName[0] == '\\0' ||\n        pfnNewFunction == nullptr )\n    {\n      return CE_None;\n    }\n\n    osMapPixelFunction[pszFuncName] = pfnNewFunction;\n\n    return CE_None;\n}\n\n/*! @cond Doxygen_Suppress */\n\n/**\n * This adds a pixel function to the global list of available pixel\n * functions for derived bands.\n *\n * This is the same as the c function GDALAddDerivedBandPixelFunc()\n *\n * @param pszFuncName Name used to access pixel function\n * @param pfnNewFunction Pixel function associated with name.  An\n *  existing pixel function registered with the same name will be\n *  replaced with the new one.\n *\n * @return CE_None, invalid (NULL) parameters are currently ignored.\n */\nCPLErr\nVRTDerivedRasterBand::AddPixelFunction(\n    const char *pszFuncName, GDALDerivedPixelFunc pfnNewFunction )\n{\n    return GDALAddDerivedBandPixelFunc(pszFuncName, pfnNewFunction);\n}\n\n/************************************************************************/\n/*                           GetPixelFunction()                         */\n/************************************************************************/\n\n/**\n * Get a pixel function previously registered using the global\n * AddPixelFunction.\n *\n * @param pszFuncName The name associated with the pixel function.\n *\n * @return A derived band pixel function, or NULL if none have been\n * registered for pszFuncName.\n */\nGDALDerivedPixelFunc\nVRTDerivedRasterBand::GetPixelFunction( const char *pszFuncName )\n{\n    if( pszFuncName == nullptr || pszFuncName[0] == '\\0' )\n    {\n        return nullptr;\n    }\n\n    std::map<CPLString, GDALDerivedPixelFunc>::iterator oIter =\n        osMapPixelFunction.find(pszFuncName);\n\n    if( oIter == osMapPixelFunction.end())\n        return nullptr;\n\n    return oIter->second;\n}\n\n/************************************************************************/\n/*                         SetPixelFunctionName()                       */\n/************************************************************************/\n\n/**\n * Set the pixel function name to be applied to this derived band.  The\n * name should match a pixel function registered using AddPixelFunction.\n *\n * @param pszFuncNameIn Name of pixel function to be applied to this derived\n * band.\n */\nvoid VRTDerivedRasterBand::SetPixelFunctionName( const char *pszFuncNameIn )\n{\n    pszFuncName = CPLStrdup( pszFuncNameIn );\n}\n\n/************************************************************************/\n/*                         SetPixelFunctionLanguage()                   */\n/************************************************************************/\n\n/**\n * Set the language of the pixel function.\n *\n * @param pszLanguage Language of the pixel function (only \"C\" and \"Python\"\n * are supported currently)\n * @since GDAL 2.3\n */\nvoid VRTDerivedRasterBand::SetPixelFunctionLanguage( const char* pszLanguage )\n{\n    m_poPrivate->m_osLanguage = pszLanguage;\n}\n\n/************************************************************************/\n/*                         SetSourceTransferType()                      */\n/************************************************************************/\n\n/**\n * Set the transfer type to be used to obtain pixel information from\n * all of the sources.  If unset, the transfer type used will be the\n * same as the derived band data type.  This makes it possible, for\n * example, to pass CFloat32 source pixels to the pixel function, even\n * if the pixel function generates a raster for a derived band that\n * is of type Byte.\n *\n * @param eDataTypeIn Data type to use to obtain pixel information from\n * the sources to be passed to the derived band pixel function.\n */\nvoid VRTDerivedRasterBand::SetSourceTransferType( GDALDataType eDataTypeIn )\n{\n    eSourceTransferType = eDataTypeIn;\n}\n\n/************************************************************************/\n/*                           InitializePython()                         */\n/************************************************************************/\n\nbool VRTDerivedRasterBand::InitializePython()\n{\n    if( m_poPrivate->m_bPythonInitializationDone )\n        return m_poPrivate->m_bPythonInitializationSuccess;\n\n    m_poPrivate->m_bPythonInitializationDone = true;\n    m_poPrivate->m_bPythonInitializationSuccess = false;\n\n    const CPLString osPythonFullname( pszFuncName ? pszFuncName : \"\" );\n    const size_t nIdxDot = osPythonFullname.rfind(\".\");\n    CPLString osPythonModule;\n    CPLString osPythonFunction;\n    if( nIdxDot != std::string::npos )\n    {\n        osPythonModule = osPythonFullname.substr(0, nIdxDot);\n        osPythonFunction = osPythonFullname.substr(nIdxDot+1);\n    }\n    else\n    {\n        osPythonFunction = osPythonFullname;\n    }\n\n#ifndef GDAL_VRT_DISABLE_PYTHON\n    const char* pszPythonEnabled =\n                            CPLGetConfigOption(\"GDAL_VRT_ENABLE_PYTHON\", nullptr);\n#else\n    const char* pszPythonEnabled = \"NO\";\n#endif\n    const CPLString osPythonEnabled(pszPythonEnabled ? pszPythonEnabled :\n                                            GDAL_VRT_ENABLE_PYTHON_DEFAULT);\n\n    if( EQUAL(osPythonEnabled, \"TRUSTED_MODULES\") )\n    {\n        bool bIsTrustedModule = false;\n        const CPLString osVRTTrustedModules(\n                    CPLGetConfigOption( \"GDAL_VRT_PYTHON_TRUSTED_MODULES\", \"\") );\n        if( !osPythonModule.empty() )\n        {\n            char** papszTrustedModules = CSLTokenizeString2(\n                                                osVRTTrustedModules, \",\", 0 );\n            for( char** papszIter = papszTrustedModules;\n                !bIsTrustedModule && papszIter && *papszIter;\n                ++papszIter )\n            {\n                const char* pszIterModule = *papszIter;\n                size_t nIterModuleLen = strlen(pszIterModule);\n                if( nIterModuleLen > 2 &&\n                    strncmp(pszIterModule + nIterModuleLen - 2, \".*\", 2) == 0 )\n                {\n                    bIsTrustedModule =\n                        (strncmp( osPythonModule, pszIterModule,\n                                                  nIterModuleLen - 2 ) == 0) &&\n                        (osPythonModule.size() == nIterModuleLen - 2 ||\n                         (osPythonModule.size() >= nIterModuleLen &&\n                          osPythonModule[nIterModuleLen-1] == '.') );\n                }\n                else if( nIterModuleLen >= 1 &&\n                        pszIterModule[nIterModuleLen-1] == '*' )\n                {\n                    bIsTrustedModule = (strncmp( osPythonModule, pszIterModule,\n                                                nIterModuleLen - 1 ) == 0);\n                }\n                else\n                {\n                    bIsTrustedModule =\n                                (strcmp(osPythonModule, pszIterModule) == 0);\n                }\n            }\n            CSLDestroy(papszTrustedModules);\n        }\n\n        if( !bIsTrustedModule )\n        {\n            if( osPythonModule.empty() )\n            {\n                CPLError(CE_Failure, CPLE_AppDefined,\n                         \"Python code needs to be executed, but it uses online code \"\n                         \"in the VRT whereas the current policy is to trust only \"\n                         \"code from external trusted modules (defined in the \"\n                         \"GDAL_VRT_PYTHON_TRUSTED_MODULES configuration option). \"\n                         \"If you trust the code in %s, you can set the \"\n                         \"GDAL_VRT_ENABLE_PYTHON configuration option to YES.\",\n                         GetDataset() ? GetDataset()->GetDescription() :\n                                    \"(unknown VRT)\");\n            }\n            else if( osVRTTrustedModules.empty() )\n            {\n                CPLError(CE_Failure, CPLE_AppDefined,\n                         \"Python code needs to be executed, but it uses code \"\n                         \"from module '%s', whereas the current policy is to \"\n                         \"trust only code from modules defined in the \"\n                         \"GDAL_VRT_PYTHON_TRUSTED_MODULES configuration option, \"\n                         \"which is currently unset. \"\n                         \"If you trust the code in '%s', you can add module '%s' \"\n                         \"to GDAL_VRT_PYTHON_TRUSTED_MODULES (or set the \"\n                         \"GDAL_VRT_ENABLE_PYTHON configuration option to YES).\",\n                         osPythonModule.c_str(),\n                         GetDataset() ? GetDataset()->GetDescription() :\n                                    \"(unknown VRT)\",\n                         osPythonModule.c_str());\n            }\n            else\n            {\n                CPLError(CE_Failure, CPLE_AppDefined,\n                         \"Python code needs to be executed, but it uses code \"\n                         \"from module '%s', whereas the current policy is to \"\n                         \"trust only code from modules '%s' (defined in the \"\n                         \"GDAL_VRT_PYTHON_TRUSTED_MODULES configuration option). \"\n                         \"If you trust the code in '%s', you can add module '%s' \"\n                         \"to GDAL_VRT_PYTHON_TRUSTED_MODULES (or set the \"\n                         \"GDAL_VRT_ENABLE_PYTHON configuration option to YES).\",\n                         osPythonModule.c_str(),\n                         osVRTTrustedModules.c_str(),\n                         GetDataset() ? GetDataset()->GetDescription() :\n                                    \"(unknown VRT)\",\n                         osPythonModule.c_str());\n            }\n            return false;\n        }\n    }\n\n#ifdef disabled_because_this_is_probably_broken_by_design\n    // See https://lwn.net/Articles/574215/\n    // and http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\n    else if( EQUAL(osPythonEnabled, \"IF_SAFE\") )\n    {\n        bool bSafe = true;\n        // If the function comes from another module, then we don't know\n        if( !osPythonModule.empty() )\n        {\n            CPLDebug(\"VRT\", \"Python function is from another module\");\n            bSafe = false;\n        }\n\n        CPLString osCode(m_poPrivate->m_osCode);\n\n        // Reject all imports except a few trusted modules\n        const char* const apszTrustedImports[] = {\n                \"import math\",\n                \"from math import\",\n                \"import numpy\", // caution: numpy has lots of I/O functions !\n                \"from numpy import\",\n                // TODO: not sure if importing arbitrary stuff from numba is OK\n                // so let's just restrict to jit.\n                \"from numba import jit\",\n\n                // Not imports but still whitelisted, whereas other __ is banned\n                \"__init__\",\n                \"__call__\",\n        };\n        for( size_t i = 0; i < CPL_ARRAYSIZE(apszTrustedImports); ++i )\n        {\n            osCode.replaceAll(CPLString(apszTrustedImports[i]), \"\");\n        }\n\n        // Some dangerous built-in functions or numpy functions\n        const char* const apszUntrusted[] = { \"import\", // and __import__\n                                              \"eval\",\n                                              \"compile\",\n                                              \"open\",\n                                              \"load\", // reload, numpy.load\n                                              \"file\", // and exec_file, numpy.fromfile, numpy.tofile\n                                              \"input\", // and raw_input\n                                              \"save\", // numpy.save\n                                              \"memmap\", // numpy.memmap\n                                              \"DataSource\", // numpy.DataSource\n                                              \"genfromtxt\", // numpy.genfromtxt\n                                              \"getattr\",\n                                              \"ctypeslib\", // numpy.ctypeslib\n                                              \"testing\", // numpy.testing\n                                              \"dump\", // numpy.ndarray.dump\n                                              \"fromregex\", // numpy.fromregex\n                                              \"__\"\n                                             };\n        for( size_t i = 0; i < CPL_ARRAYSIZE(apszUntrusted); ++i )\n        {\n            if( osCode.find(apszUntrusted[i]) != std::string::npos )\n            {\n                CPLDebug(\"VRT\", \"Found '%s' word in Python code\",\n                         apszUntrusted[i]);\n                bSafe = false;\n            }\n        }\n\n        if( !bSafe )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"Python code needs to be executed, but we cannot verify \"\n                     \"if it is safe, so this is disabled by default. \"\n                     \"If you trust the code in %s, you can set the \"\n                     \"GDAL_VRT_ENABLE_PYTHON configuration option to YES.\",\n                     GetDataset() ? GetDataset()->GetDescription() :\n                                    \"(unknown VRT)\");\n            return false;\n        }\n    }\n#endif //disabled_because_this_is_probably_broken_by_design\n\n    else if( !EQUAL(osPythonEnabled, \"YES\") &&\n             !EQUAL(osPythonEnabled, \"ON\") &&\n             !EQUAL(osPythonEnabled, \"TRUE\") )\n    {\n        if( pszPythonEnabled == nullptr )\n        {\n            // Note: this is dead code with our current default policy\n            // GDAL_VRT_ENABLE_PYTHON == \"TRUSTED_MODULES\"\n            CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Python code needs to be executed, but this is \"\n                 \"disabled by default. If you trust the code in %s, \"\n                 \"you can set the GDAL_VRT_ENABLE_PYTHON configuration \"\n                 \"option to YES.\",\n                GetDataset() ? GetDataset()->GetDescription() :\n                                                    \"(unknown VRT)\");\n        }\n        else\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                    \"Python code in %s needs to be executed, but this has been \"\n                    \"explicitly disabled.\",\n                     GetDataset() ? GetDataset()->GetDescription() :\n                                                            \"(unknown VRT)\");\n        }\n        return false;\n    }\n\n    if( !LoadPythonAPI() )\n        return false;\n\n    // Make sure the python interpreter is initialized\n    {\n        CPLMutexHolder oHolder(&ghMutex);\n        int bIsInitialized = Py_IsInitialized();\n        if( !bIsInitialized)\n        {\n            gbHasInitializedPython = true;\n            Py_InitializeEx(0);\n            CPLDebug(\"VRT\", \"Py_Initialize()\");\n            PyEval_InitThreads();\n            gphThreadState = PyEval_SaveThread();\n        }\n        gnPythonInstanceCounter ++;\n    }\n\n    // Whether we should just use our own global mutex, in addition to Python\n    // GIL locking.\n    m_poPrivate->m_bExclusiveLock =\n        CPLTestBool(CPLGetConfigOption(\"GDAL_VRT_PYTHON_EXCLUSIVE_LOCK\", \"NO\"));\n\n    // numba jit'ification doesn't seem to be thread-safe, so force use of\n    // lock now and at first execution of function. Later executions seem to\n    // be thread-safe. This problem doesn't seem to appear for code in\n    // regular files\n    const bool bUseExclusiveLock = m_poPrivate->m_bExclusiveLock ||\n                    m_poPrivate->m_osCode.find(\"@jit\") != std::string::npos;\n    VRT_GIL_Holder oHolder(bUseExclusiveLock);\n\n    // As we don't want to depend on numpy C API/ABI, we use a trick to build\n    // a numpy array object. We define a Python function to which we pass a\n    // Python buffer object.\n\n    // We need to build a unique module name, otherwise this will crash in\n    // multithreaded use cases.\n    CPLString osModuleName( CPLSPrintf(\"gdal_vrt_module_%p\", this) );\n    PyObject* poCompiledString = Py_CompileString(\n        (\"import numpy\\n\"\n        \"def GDALCreateNumpyArray(buffer, dtype, height, width):\\n\"\n        \"    return numpy.frombuffer(buffer, str(dtype.decode('ascii'))).\"\n                                                \"reshape([height, width])\\n\"\n        \"\\n\" + m_poPrivate->m_osCode).c_str(),\n        osModuleName, Py_file_input);\n    if( poCompiledString == nullptr || PyErr_Occurred() )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"Couldn't compile code:\\n%s\",\n                 GetPyExceptionString().c_str());\n        return false;\n    }\n    PyObject* poModule =\n        PyImport_ExecCodeModule(osModuleName, poCompiledString);\n    Py_DecRef(poCompiledString);\n\n    if( poModule == nullptr || PyErr_Occurred() )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"%s\", GetPyExceptionString().c_str());\n        return false;\n    }\n\n    // Fetch user computation function\n    if( !osPythonModule.empty() )\n    {\n        PyObject* poUserModule = PyImport_ImportModule(osPythonModule);\n        if (poUserModule == nullptr || PyErr_Occurred())\n        {\n            CPLString osException = GetPyExceptionString();\n            if( !osException.empty() && osException.back() == '\\n' )\n            {\n                osException.resize( osException.size() - 1 );\n            }\n            if( osException.find(\"ModuleNotFoundError\") == 0 )\n            {\n                osException += \". You may need to define PYTHONPATH\";\n            }\n            CPLError(CE_Failure, CPLE_AppDefined,\n                 \"%s\", osException.c_str());\n            Py_DecRef(poModule);\n            return false;\n        }\n        m_poPrivate->m_poUserFunction = PyObject_GetAttrString(poUserModule,\n                                                            osPythonFunction );\n        Py_DecRef(poUserModule);\n    }\n    else\n    {\n        m_poPrivate->m_poUserFunction = PyObject_GetAttrString(poModule,\n                                            osPythonFunction );\n    }\n    if (m_poPrivate->m_poUserFunction == nullptr || PyErr_Occurred())\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"%s\", GetPyExceptionString().c_str());\n        Py_DecRef(poModule);\n        return false;\n    }\n    if( !PyCallable_Check(m_poPrivate->m_poUserFunction) )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined, \"Object '%s' is not callable\",\n                 osPythonFunction.c_str());\n        Py_DecRef(poModule);\n        return false;\n    }\n\n    // Fetch our GDALCreateNumpyArray python function\n    m_poPrivate->m_poGDALCreateNumpyArray =\n        PyObject_GetAttrString(poModule, \"GDALCreateNumpyArray\" );\n    if (m_poPrivate->m_poGDALCreateNumpyArray == nullptr || PyErr_Occurred())\n    {\n        // Shouldn't happen normally...\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"%s\", GetPyExceptionString().c_str());\n        Py_DecRef(poModule);\n        return false;\n    }\n    Py_DecRef(poModule);\n\n    m_poPrivate->m_bPythonInitializationSuccess = true;\n    return true;\n}\n\n/************************************************************************/\n/*                             IRasterIO()                              */\n/************************************************************************/\n\n/**\n * Read/write a region of image data for this band.\n *\n * Each of the sources for this derived band will be read and passed to\n * the derived band pixel function.  The pixel function is responsible\n * for applying whatever algorithm is necessary to generate this band's\n * pixels from the sources.\n *\n * The sources will be read using the transfer type specified for sources\n * using SetSourceTransferType().  If no transfer type has been set for\n * this derived band, the band's data type will be used as the transfer type.\n *\n * @see gdalrasterband\n *\n * @param eRWFlag Either GF_Read to read a region of data, or GT_Write to\n * write a region of data.\n *\n * @param nXOff The pixel offset to the top left corner of the region\n * of the band to be accessed.  This would be zero to start from the left side.\n *\n * @param nYOff The line offset to the top left corner of the region\n * of the band to be accessed.  This would be zero to start from the top.\n *\n * @param nXSize The width of the region of the band to be accessed in pixels.\n *\n * @param nYSize The height of the region of the band to be accessed in lines.\n *\n * @param pData The buffer into which the data should be read, or from which\n * it should be written.  This buffer must contain at least nBufXSize *\n * nBufYSize words of type eBufType.  It is organized in left to right,\n * top to bottom pixel order.  Spacing is controlled by the nPixelSpace,\n * and nLineSpace parameters.\n *\n * @param nBufXSize The width of the buffer image into which the desired\n * region is to be read, or from which it is to be written.\n *\n * @param nBufYSize The height of the buffer image into which the desired\n * region is to be read, or from which it is to be written.\n *\n * @param eBufType The type of the pixel values in the pData data buffer.  The\n * pixel values will automatically be translated to/from the GDALRasterBand\n * data type as needed.\n *\n * @param nPixelSpace The byte offset from the start of one pixel value in\n * pData to the start of the next pixel value within a scanline.  If defaulted\n * (0) the size of the datatype eBufType is used.\n *\n * @param nLineSpace The byte offset from the start of one scanline in\n * pData to the start of the next.  If defaulted the size of the datatype\n * eBufType * nBufXSize is used.\n *\n * @return CE_Failure if the access fails, otherwise CE_None.\n */\nCPLErr VRTDerivedRasterBand::IRasterIO( GDALRWFlag eRWFlag,\n                                        int nXOff, int nYOff, int nXSize,\n                                        int nYSize, void * pData, int nBufXSize,\n                                        int nBufYSize, GDALDataType eBufType,\n                                        GSpacing nPixelSpace,\n                                        GSpacing nLineSpace,\n                                        GDALRasterIOExtraArg* psExtraArg )\n{\n    if( eRWFlag == GF_Write )\n    {\n        CPLError( CE_Failure, CPLE_AppDefined,\n                  \"Writing through VRTSourcedRasterBand is not supported.\" );\n        return CE_Failure;\n    }\n\n    const int nBufTypeSize = GDALGetDataTypeSizeBytes(eBufType);\n    GDALDataType eSrcType = eSourceTransferType;\n    if( eSrcType == GDT_Unknown || eSrcType >= GDT_TypeCount ) {\n        eSrcType = eBufType;\n    }\n    const int nSrcTypeSize = GDALGetDataTypeSizeBytes(eSrcType);\n\n/* -------------------------------------------------------------------- */\n/*      Initialize the buffer to some background value. Use the         */\n/*      nodata value if available.                                      */\n/* -------------------------------------------------------------------- */\n    if( bSkipBufferInitialization )\n    {\n        // Do nothing\n    }\n    else if( nPixelSpace == nBufTypeSize &&\n        (!m_bNoDataValueSet || m_dfNoDataValue == 0) ) {\n        memset( pData, 0,\n                static_cast<size_t>(nBufXSize * nBufYSize * nPixelSpace) );\n    }\n    else if( m_bNoDataValueSet )\n    {\n        double dfWriteValue = m_dfNoDataValue;\n\n        for( int iLine = 0; iLine < nBufYSize; iLine++ )\n        {\n            GDALCopyWords(\n                &dfWriteValue, GDT_Float64, 0,\n                reinterpret_cast<GByte *>( pData ) + nLineSpace * iLine,\n                eBufType, static_cast<int>(nPixelSpace), nBufXSize );\n        }\n    }\n\n/* -------------------------------------------------------------------- */\n/*      Do we have overviews that would be appropriate to satisfy       */\n/*      this request?                                                   */\n/* -------------------------------------------------------------------- */\n    if( (nBufXSize < nXSize || nBufYSize < nYSize)\n        && GetOverviewCount() > 0 )\n    {\n        if( OverviewRasterIO(\n               eRWFlag, nXOff, nYOff, nXSize, nYSize,\n               pData, nBufXSize, nBufYSize,\n               eBufType, nPixelSpace, nLineSpace, psExtraArg ) == CE_None )\n            return CE_None;\n    }\n\n    /* ---- Get pixel function for band ---- */\n    GDALDerivedPixelFunc pfnPixelFunc = nullptr;\n\n    if( EQUAL(m_poPrivate->m_osLanguage, \"C\") )\n    {\n        pfnPixelFunc = VRTDerivedRasterBand::GetPixelFunction(pszFuncName);\n        if( pfnPixelFunc == nullptr )\n        {\n            CPLError( CE_Failure, CPLE_IllegalArg,\n                    \"VRTDerivedRasterBand::IRasterIO:\"\n                    \"Derived band pixel function '%s' not registered.\",\n                    this->pszFuncName) ;\n            return CE_Failure;\n        }\n    }\n\n    /* TODO: It would be nice to use a MallocBlock function for each\n       individual buffer that would recycle blocks of memory from a\n       cache by reassigning blocks that are nearly the same size.\n       A corresponding FreeBlock might only truly free if the total size\n       of freed blocks gets to be too great of a percentage of the size\n       of the allocated blocks. */\n\n    // Get buffers for each source.\n    const int nBufferRadius = m_poPrivate->m_nBufferRadius;\n    if( nBufferRadius > (INT_MAX - nBufXSize) / 2 ||\n        nBufferRadius > (INT_MAX - nBufYSize) / 2 )\n    {\n        return CE_Failure;\n    }\n    const int nExtBufXSize = nBufXSize + 2 * nBufferRadius;\n    const int nExtBufYSize = nBufYSize + 2 * nBufferRadius;\n    void **pBuffers\n        = reinterpret_cast<void **>( CPLMalloc(sizeof(void *) * nSources) );\n    for( int iSource = 0; iSource < nSources; iSource++ ) {\n        pBuffers[iSource] =\n            VSI_MALLOC3_VERBOSE(nSrcTypeSize, nExtBufXSize, nExtBufYSize);\n        if( pBuffers[iSource] == nullptr )\n        {\n            for (int i = 0; i < iSource; i++) {\n                VSIFree(pBuffers[i]);\n            }\n            CPLFree(pBuffers);\n            return CE_Failure;\n        }\n\n        /* ------------------------------------------------------------ */\n        /* #4045: Initialize the newly allocated buffers before handing */\n        /* them off to the sources. These buffers are packed, so we     */\n        /* don't need any special line-by-line handling when a nonzero  */\n        /* nodata value is set.                                         */\n        /* ------------------------------------------------------------ */\n        if( !m_bNoDataValueSet || m_dfNoDataValue == 0 )\n        {\n            memset( pBuffers[iSource], 0, static_cast<size_t>(nSrcTypeSize) *\n                    nExtBufXSize * nExtBufYSize );\n        }\n        else\n        {\n            GDALCopyWords( &m_dfNoDataValue, GDT_Float64, 0,\n                           reinterpret_cast<GByte *>( pBuffers[iSource] ),\n                           eSrcType, nSrcTypeSize,\n                           nExtBufXSize * nExtBufYSize );\n        }\n    }\n\n    GDALRasterIOExtraArg sExtraArg;\n    GDALCopyRasterIOExtraArg(&sExtraArg, psExtraArg);\n\n    int nXShiftInBuffer = 0;\n    int nYShiftInBuffer = 0;\n    int nExtBufXSizeReq = nExtBufXSize;\n    int nExtBufYSizeReq = nExtBufYSize;\n\n    int nXOffExt = nXOff;\n    int nYOffExt = nYOff;\n    int nXSizeExt = nXSize;\n    int nYSizeExt = nYSize;\n\n    if( nBufferRadius )\n    {\n        double dfXRatio = static_cast<double>(nXSize) / nBufXSize;\n        double dfYRatio = static_cast<double>(nYSize) / nBufYSize;\n\n        if( !sExtraArg.bFloatingPointWindowValidity )\n        {\n            sExtraArg.dfXOff = nXOff;\n            sExtraArg.dfYOff = nYOff;\n            sExtraArg.dfXSize = nXSize;\n            sExtraArg.dfYSize = nYSize;\n        }\n\n        sExtraArg.dfXOff -= dfXRatio * nBufferRadius;\n        sExtraArg.dfYOff -= dfYRatio * nBufferRadius;\n        sExtraArg.dfXSize += 2 * dfXRatio * nBufferRadius;\n        sExtraArg.dfYSize += 2 * dfYRatio * nBufferRadius;\n        if( sExtraArg.dfXOff < 0 )\n        {\n            nXShiftInBuffer = -static_cast<int>(sExtraArg.dfXOff / dfXRatio);\n            nExtBufXSizeReq -= nXShiftInBuffer;\n            sExtraArg.dfXSize += sExtraArg.dfXOff;\n            sExtraArg.dfXOff = 0;\n        }\n        if( sExtraArg.dfYOff < 0 )\n        {\n            nYShiftInBuffer = -static_cast<int>(sExtraArg.dfYOff / dfYRatio);\n            nExtBufYSizeReq -= nYShiftInBuffer;\n            sExtraArg.dfYSize += sExtraArg.dfYOff;\n            sExtraArg.dfYOff = 0;\n        }\n        if( sExtraArg.dfXOff + sExtraArg.dfXSize > nRasterXSize )\n        {\n            nExtBufXSizeReq -= static_cast<int>((sExtraArg.dfXOff +\n                        sExtraArg.dfXSize - nRasterXSize) / dfXRatio);\n            sExtraArg.dfXSize = nRasterXSize - sExtraArg.dfXOff;\n        }\n        if( sExtraArg.dfYOff + sExtraArg.dfYSize > nRasterYSize )\n        {\n            nExtBufYSizeReq -= static_cast<int>((sExtraArg.dfYOff +\n                        sExtraArg.dfYSize - nRasterYSize) / dfYRatio);\n            sExtraArg.dfYSize = nRasterYSize - sExtraArg.dfYOff;\n        }\n\n        nXOffExt = static_cast<int>(sExtraArg.dfXOff);\n        nYOffExt = static_cast<int>(sExtraArg.dfYOff);\n        nXSizeExt = std::min(static_cast<int>(sExtraArg.dfXSize + 0.5),\n                             nRasterXSize - nXOffExt);\n        nYSizeExt = std::min(static_cast<int>(sExtraArg.dfYSize + 0.5),\n                             nRasterYSize - nYOffExt);\n    }\n\n    // Load values for sources into packed buffers.\n    CPLErr eErr = CE_None;\n    for( int iSource = 0; iSource < nSources && eErr == CE_None; iSource++ ) {\n        GByte* pabyBuffer = reinterpret_cast<GByte*>(pBuffers[iSource]);\n        eErr = reinterpret_cast<VRTSource *>( papoSources[iSource] )->RasterIO(\n            eSrcType,\n            nXOffExt, nYOffExt, nXSizeExt, nYSizeExt,\n            pabyBuffer + (nYShiftInBuffer * nExtBufXSize +\n                                            nXShiftInBuffer) * nSrcTypeSize,\n            nExtBufXSizeReq, nExtBufYSizeReq,\n            eSrcType,\n            nSrcTypeSize,\n            nSrcTypeSize * nExtBufXSize,\n            &sExtraArg );\n\n        // Extend first lines\n        for( int iY = 0; iY < nYShiftInBuffer; iY++ )\n        {\n            memcpy( pabyBuffer + iY * nExtBufXSize * nSrcTypeSize,\n                    pabyBuffer + nYShiftInBuffer * nExtBufXSize * nSrcTypeSize,\n                    nExtBufXSize * nSrcTypeSize );\n        }\n        // Extend last lines\n        for( int iY = nYShiftInBuffer + nExtBufYSizeReq; iY < nExtBufYSize; iY++ )\n        {\n            memcpy( pabyBuffer + iY * nExtBufXSize * nSrcTypeSize,\n                    pabyBuffer + (nYShiftInBuffer + nExtBufYSizeReq - 1) *\n                                                    nExtBufXSize * nSrcTypeSize,\n                    nExtBufXSize * nSrcTypeSize );\n        }\n        // Extend first cols\n        if( nXShiftInBuffer )\n        {\n            for( int iY = 0; iY < nExtBufYSize; iY ++ )\n            {\n                for( int iX = 0; iX < nXShiftInBuffer; iX++ )\n                {\n                    memcpy( pabyBuffer + (iY * nExtBufXSize + iX) * nSrcTypeSize,\n                            pabyBuffer + (iY * nExtBufXSize +\n                                                nXShiftInBuffer) * nSrcTypeSize,\n                            nSrcTypeSize );\n                }\n            }\n        }\n        // Extent last cols\n        if( nXShiftInBuffer + nExtBufXSizeReq < nExtBufXSize )\n        {\n            for( int iY = 0; iY < nExtBufYSize; iY ++ )\n            {\n                for( int iX = nXShiftInBuffer + nExtBufXSizeReq;\n                         iX < nExtBufXSize; iX++ )\n                {\n                    memcpy( pabyBuffer + (iY * nExtBufXSize + iX) * nSrcTypeSize,\n                            pabyBuffer + (iY * nExtBufXSize + nXShiftInBuffer +\n                                            nExtBufXSizeReq - 1) * nSrcTypeSize,\n                            nSrcTypeSize );\n                }\n            }\n        }\n    }\n\n    // Apply pixel function.\n    if( eErr == CE_None && EQUAL(m_poPrivate->m_osLanguage, \"Python\") )\n    {\n        eErr = CE_Failure;\n\n        // numpy doesn't have native cint16/cint32\n        if( eSrcType == GDT_CInt16 || eSrcType == GDT_CInt32 )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"CInt16/CInt32 data type not supported for SourceTransferType\");\n            goto end;\n        }\n        if( eDataType == GDT_CInt16 || eDataType == GDT_CInt32 )\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"CInt16/CInt32 data type not supported for data type\");\n            goto end;\n        }\n\n        if( !InitializePython() )\n            goto end;\n\n        GByte* pabyTmpBuffer = nullptr;\n        // Do we need a temporary buffer or can we use directly the output\n        // buffer ?\n        if( nBufferRadius != 0 ||\n            eDataType != eBufType ||\n            nPixelSpace != nBufTypeSize ||\n            nLineSpace != static_cast<GSpacing>(nBufTypeSize) * nBufXSize )\n        {\n            pabyTmpBuffer = reinterpret_cast<GByte*>(VSI_CALLOC_VERBOSE(\n                            static_cast<size_t>(nExtBufXSize) * nExtBufYSize,\n                            GDALGetDataTypeSizeBytes(eDataType)));\n            if( !pabyTmpBuffer )\n                goto end;\n        }\n\n        {\n        const bool bUseExclusiveLock = m_poPrivate->m_bExclusiveLock ||\n                    ( m_poPrivate->m_bFirstTime &&\n                    m_poPrivate->m_osCode.find(\"@jit\") != std::string::npos);\n        m_poPrivate->m_bFirstTime = false;\n        VRT_GIL_Holder oHolder(bUseExclusiveLock);\n\n        // Prepare target numpy array\n        PyObject* poPyDstArray = GDALCreateNumpyArray(\n                                    m_poPrivate->m_poGDALCreateNumpyArray,\n                                    pabyTmpBuffer ? pabyTmpBuffer : pData,\n                                    eDataType,\n                                    nExtBufYSize,\n                                    nExtBufXSize);\n        if( !poPyDstArray )\n        {\n            VSIFree(pabyTmpBuffer);\n            goto end;\n        }\n\n        // Wrap source buffers as input numpy arrays\n        PyObject* pyArgInputArray = PyTuple_New(nSources);\n        for( int i = 0; i < nSources; i++ )\n        {\n            GByte* pabyBuffer = reinterpret_cast<GByte*>(pBuffers[i]);\n            PyObject* poPySrcArray = GDALCreateNumpyArray(\n                        m_poPrivate->m_poGDALCreateNumpyArray,\n                        pabyBuffer,\n                        eSrcType,\n                        nExtBufYSize,\n                        nExtBufXSize);\n            CPLAssert(poPySrcArray);\n            PyTuple_SetItem(pyArgInputArray, i, poPySrcArray);\n        }\n\n        // Create arguments\n        PyObject* pyArgs = PyTuple_New(10);\n        PyTuple_SetItem(pyArgs, 0, pyArgInputArray);\n        PyTuple_SetItem(pyArgs, 1, poPyDstArray);\n        PyTuple_SetItem(pyArgs, 2, PyInt_FromLong(nXOff));\n        PyTuple_SetItem(pyArgs, 3, PyInt_FromLong(nYOff));\n        PyTuple_SetItem(pyArgs, 4, PyInt_FromLong(nXSize));\n        PyTuple_SetItem(pyArgs, 5, PyInt_FromLong(nYSize));\n        PyTuple_SetItem(pyArgs, 6, PyInt_FromLong(nRasterXSize));\n        PyTuple_SetItem(pyArgs, 7, PyInt_FromLong(nRasterYSize));\n        PyTuple_SetItem(pyArgs, 8, PyInt_FromLong(nBufferRadius));\n\n        double adfGeoTransform[6];\n        adfGeoTransform[0] = 0;\n        adfGeoTransform[1] = 1;\n        adfGeoTransform[2] = 0;\n        adfGeoTransform[3] = 0;\n        adfGeoTransform[4] = 0;\n        adfGeoTransform[5] = 1;\n        if( GetDataset() )\n            GetDataset()->GetGeoTransform(adfGeoTransform);\n        PyObject* pyGT = PyTuple_New(6);\n        for(int i = 0; i < 6; i++ )\n            PyTuple_SetItem(pyGT, i, PyFloat_FromDouble(adfGeoTransform[i]));\n        PyTuple_SetItem(pyArgs, 9, pyGT);\n\n        // Prepare kwargs\n        PyObject* pyKwargs = PyDict_New();\n        for( size_t i = 0; i < m_poPrivate->m_oFunctionArgs.size(); ++i )\n        {\n            const char* pszKey =\n                m_poPrivate->m_oFunctionArgs[i].first.c_str();\n            const char* pszValue =\n                m_poPrivate->m_oFunctionArgs[i].second.c_str();\n            PyDict_SetItemString(pyKwargs, pszKey,\n                PyString_FromStringAndSize(pszValue, strlen(pszValue)));\n        }\n\n        // Call user function\n        PyObject* pRetValue = PyObject_Call(\n                                        m_poPrivate->m_poUserFunction,\n                                        pyArgs, pyKwargs);\n\n        Py_DecRef(pyArgs);\n        Py_DecRef(pyKwargs);\n\n        if (PyErr_Occurred())\n        {\n            CPLError(CE_Failure, CPLE_AppDefined,\n                     \"%s\", GetPyExceptionString().c_str());\n        }\n        else\n        {\n            eErr = CE_None;\n        }\n        if( pRetValue )\n            Py_DecRef(pRetValue);\n        } // End of GIL section\n\n        if( pabyTmpBuffer )\n        {\n            // Copy numpy destination array to user buffer\n            for( int iY = 0; iY < nBufYSize; iY++ )\n            {\n                size_t nSrcOffset = (static_cast<size_t>(iY + nBufferRadius) *\n                    nExtBufXSize + nBufferRadius) *\n                    GDALGetDataTypeSizeBytes(eDataType);\n                GDALCopyWords(pabyTmpBuffer + nSrcOffset,\n                              eDataType,\n                              GDALGetDataTypeSizeBytes(eDataType),\n                              reinterpret_cast<GByte*>(pData) + iY * nLineSpace,\n                              eBufType,\n                              static_cast<int>(nPixelSpace),\n                              nBufXSize);\n            }\n\n            VSIFree(pabyTmpBuffer);\n        }\n    }\n    else if( eErr == CE_None && pfnPixelFunc != nullptr ) {\n        eErr = pfnPixelFunc( reinterpret_cast<void **>( pBuffers ), nSources,\n                             pData, nBufXSize, nBufYSize,\n                             eSrcType, eBufType, static_cast<int>(nPixelSpace),\n                             static_cast<int>(nLineSpace) );\n    }\nend:\n    // Release buffers.\n    for ( int iSource = 0; iSource < nSources; iSource++ ) {\n        VSIFree(pBuffers[iSource]);\n    }\n    CPLFree(pBuffers);\n\n    return eErr;\n}\n\n/************************************************************************/\n/*                         IGetDataCoverageStatus()                     */\n/************************************************************************/\n\nint  VRTDerivedRasterBand::IGetDataCoverageStatus( int /* nXOff */,\n                                                   int /* nYOff */,\n                                                   int /* nXSize */,\n                                                   int /* nYSize */,\n                                                   int /* nMaskFlagStop */,\n                                                   double* pdfDataPct)\n{\n    if( pdfDataPct != nullptr )\n        *pdfDataPct = -1.0;\n    return GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED | GDAL_DATA_COVERAGE_STATUS_DATA;\n}\n\n/************************************************************************/\n/*                              XMLInit()                               */\n/************************************************************************/\n\nCPLErr VRTDerivedRasterBand::XMLInit( CPLXMLNode *psTree,\n                                      const char *pszVRTPath,\n                                      void* pUniqueHandle,\n                                      std::map<CPLString, GDALDataset*>& oMapSharedSources )\n\n{\n    const CPLErr eErr = VRTSourcedRasterBand::XMLInit( psTree, pszVRTPath,\n                                                       pUniqueHandle,\n                                                       oMapSharedSources );\n    if( eErr != CE_None )\n        return eErr;\n\n    // Read derived pixel function type.\n    SetPixelFunctionName( CPLGetXMLValue( psTree, \"PixelFunctionType\", nullptr ) );\n    if( pszFuncName == nullptr || EQUAL(pszFuncName, \"\") )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined,\n                 \"PixelFunctionType missing\");\n        return CE_Failure;\n    }\n\n    m_poPrivate->m_osLanguage = CPLGetXMLValue( psTree,\n                                                \"PixelFunctionLanguage\", \"C\" );\n    if( !EQUAL(m_poPrivate->m_osLanguage, \"C\") &&\n        !EQUAL(m_poPrivate->m_osLanguage, \"Python\") )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"Unsupported PixelFunctionLanguage\");\n        return CE_Failure;\n    }\n\n    m_poPrivate->m_osCode =\n                        CPLGetXMLValue( psTree, \"PixelFunctionCode\", \"\" );\n    if( !m_poPrivate->m_osCode.empty() &&\n        !EQUAL(m_poPrivate->m_osLanguage, \"Python\") )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"PixelFunctionCode can only be used with Python\");\n        return CE_Failure;\n    }\n\n    m_poPrivate->m_nBufferRadius =\n                        atoi(CPLGetXMLValue( psTree, \"BufferRadius\", \"0\" ));\n    if( m_poPrivate->m_nBufferRadius < 0 ||\n        m_poPrivate->m_nBufferRadius > 1024 )\n    {\n        CPLError(CE_Failure, CPLE_AppDefined, \"Invalid value for BufferRadius\");\n        return CE_Failure;\n    }\n    if( m_poPrivate->m_nBufferRadius != 0 &&\n        !EQUAL(m_poPrivate->m_osLanguage, \"Python\") )\n    {\n        CPLError(CE_Failure, CPLE_NotSupported,\n                 \"BufferRadius can only be used with Python\");\n        return CE_Failure;\n    }\n\n    CPLXMLNode* psArgs = CPLGetXMLNode( psTree, \"PixelFunctionArguments\" );\n    if( psArgs != nullptr )\n    {\n        if( !EQUAL(m_poPrivate->m_osLanguage, \"Python\") )\n        {\n            CPLError(CE_Failure, CPLE_NotSupported,\n                     \"PixelFunctionArguments can only be used with Python\");\n            return CE_Failure;\n        }\n        for( CPLXMLNode* psIter = psArgs->psChild;\n                         psIter != nullptr;\n                         psIter = psIter->psNext )\n        {\n            if( psIter->eType == CXT_Attribute )\n            {\n                m_poPrivate->m_oFunctionArgs.push_back(\n                    std::pair<CPLString,CPLString>(psIter->pszValue,\n                                                   psIter->psChild->pszValue));\n            }\n        }\n    }\n\n    // Read optional source transfer data type.\n    const char *pszTypeName = CPLGetXMLValue(psTree, \"SourceTransferType\", nullptr);\n    if( pszTypeName != nullptr )\n    {\n        eSourceTransferType = GDALGetDataTypeByName( pszTypeName );\n    }\n\n    return CE_None;\n}\n\n/************************************************************************/\n/*                           SerializeToXML()                           */\n/************************************************************************/\n\nCPLXMLNode *VRTDerivedRasterBand::SerializeToXML( const char *pszVRTPath )\n{\n    CPLXMLNode *psTree = VRTSourcedRasterBand::SerializeToXML( pszVRTPath );\n\n/* -------------------------------------------------------------------- */\n/*      Set subclass.                                                   */\n/* -------------------------------------------------------------------- */\n    CPLCreateXMLNode(\n        CPLCreateXMLNode( psTree, CXT_Attribute, \"subClass\" ),\n        CXT_Text, \"VRTDerivedRasterBand\" );\n\n    /* ---- Encode DerivedBand-specific fields ---- */\n    if( !EQUAL( m_poPrivate->m_osLanguage, \"C\" ) )\n    {\n        CPLSetXMLValue( psTree, \"PixelFunctionLanguage\",\n                        m_poPrivate->m_osLanguage );\n    }\n    if( pszFuncName != nullptr && strlen(pszFuncName) > 0 )\n        CPLSetXMLValue( psTree, \"PixelFunctionType\", pszFuncName );\n    if( !m_poPrivate->m_oFunctionArgs.empty() )\n    {\n        CPLXMLNode* psArgs = CPLCreateXMLNode( psTree, CXT_Element,\n                                               \"PixelFunctionArguments\" );\n        for( size_t i = 0; i < m_poPrivate->m_oFunctionArgs.size(); ++i )\n        {\n            const char* pszKey =\n                m_poPrivate->m_oFunctionArgs[i].first.c_str();\n            const char* pszValue =\n                m_poPrivate->m_oFunctionArgs[i].second.c_str();\n            CPLCreateXMLNode(\n                CPLCreateXMLNode( psArgs, CXT_Attribute, pszKey ),\n                                  CXT_Text, pszValue );\n        }\n    }\n    if( !m_poPrivate->m_osCode.empty() )\n    {\n        if( m_poPrivate->m_osCode.find(\"<![CDATA[\") == std::string::npos )\n        {\n            CPLCreateXMLNode(\n                CPLCreateXMLNode( psTree,\n                                  CXT_Element, \"PixelFunctionCode\" ),\n                 CXT_Literal,\n                 (\"<![CDATA[\" + m_poPrivate->m_osCode + \"]]>\").c_str() );\n        }\n        else\n        {\n            CPLSetXMLValue( psTree, \"PixelFunctionCode\",\n                            m_poPrivate->m_osCode );\n        }\n    }\n    if( m_poPrivate->m_nBufferRadius != 0 )\n        CPLSetXMLValue( psTree, \"BufferRadius\",\n                        CPLSPrintf(\"%d\",m_poPrivate->m_nBufferRadius) );\n    if( this->eSourceTransferType != GDT_Unknown)\n        CPLSetXMLValue( psTree, \"SourceTransferType\",\n                        GDALGetDataTypeName( eSourceTransferType ) );\n\n    return psTree;\n}\n\n/************************************************************************/\n/*                             GetMinimum()                             */\n/************************************************************************/\n\ndouble VRTDerivedRasterBand::GetMinimum( int *pbSuccess )\n{\n    return GDALRasterBand::GetMinimum(pbSuccess);\n}\n\n/************************************************************************/\n/*                             GetMaximum()                             */\n/************************************************************************/\n\ndouble VRTDerivedRasterBand::GetMaximum( int *pbSuccess )\n{\n    return GDALRasterBand::GetMaximum(pbSuccess);\n}\n\n/************************************************************************/\n/*                       ComputeRasterMinMax()                          */\n/************************************************************************/\n\nCPLErr VRTDerivedRasterBand::ComputeRasterMinMax( int bApproxOK, double* adfMinMax )\n{\n    return GDALRasterBand::ComputeRasterMinMax( bApproxOK, adfMinMax );\n}\n\n/************************************************************************/\n/*                         ComputeStatistics()                          */\n/************************************************************************/\n\nCPLErr\nVRTDerivedRasterBand::ComputeStatistics( int bApproxOK,\n                                         double *pdfMin, double *pdfMax,\n                                         double *pdfMean, double *pdfStdDev,\n                                         GDALProgressFunc pfnProgress,\n                                         void *pProgressData )\n\n{\n    return GDALRasterBand::ComputeStatistics(  bApproxOK,\n                                            pdfMin, pdfMax,\n                                            pdfMean, pdfStdDev,\n                                            pfnProgress, pProgressData );\n}\n\n/************************************************************************/\n/*                            GetHistogram()                            */\n/************************************************************************/\n\nCPLErr VRTDerivedRasterBand::GetHistogram( double dfMin, double dfMax,\n                                           int nBuckets, GUIntBig *panHistogram,\n                                           int bIncludeOutOfRange, int bApproxOK,\n                                           GDALProgressFunc pfnProgress,\n                                           void *pProgressData )\n\n{\n    return VRTRasterBand::GetHistogram( dfMin, dfMax,\n                                            nBuckets, panHistogram,\n                                            bIncludeOutOfRange, bApproxOK,\n                                            pfnProgress, pProgressData );\n}\n\n/*! @endcond */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_pen2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_pen3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_ogr_sym.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_ogr_brush.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_pen1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/ogr/style_textanchor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/swig/csharp/gdal.snk",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/swig/java/test_data/poly.shp",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/swig/java/test_data/poly.shx",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/swig/java/test_data/byte.tif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/swig/java/test_data/poly.dbf",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/data/seed_3d.dgn",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/data/s57expectedinput.csv",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/data/default.rsc",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/data/gdalicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/data/seed_2d.dgn",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/msg/PublicDecompWTMakefiles.zip",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/jpipkak/jpipsequence.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/jpipkak/gdalsequence.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/frmts/jpipkak/components.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/grid/ellipse.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/grid/gridding.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/safe-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/foss4g2013.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/foss4g2017.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/OSGeo_project.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/ingres-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/waypoint_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/foss4g2019.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/i3-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/foss4g2014.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/act-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/cadcorp_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/foss4g2018.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/images/src-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/ogr/style_pen2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/ogr/style_pen3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/ogr/style_pen1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gdal-3.0.3-5xgwpkov7ijvrenvps4dsyhpfwmnsjrs/spack-src/doc/ogr/style_textanchor.gif"
    ],
    "total_files": 3382
}