{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-ocl-icd-2.2.5-xqbxtsadwhmwca65sd2w7f6lxyyyr5ia/spack-src/ocl_icd_loader.c": "/**\nCopyright (c) 2012, Brice Videau <brice.videau@imag.fr>\nCopyright (c) 2012, Vincent Danjean <Vincent.Danjean@ens-lyon.org>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include <dirent.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <dlfcn.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include \"config.h\"\n#ifdef USE_PTHREAD\n#  include <pthread.h>\n#endif\n#pragma GCC diagnostic push\n#  pragma GCC diagnostic ignored \"-Wcpp\"\n#  define CL_USE_DEPRECATED_OPENCL_1_1_APIS\n#  include <CL/opencl.h>\n#pragma GCC diagnostic pop\n\n#pragma GCC visibility push(hidden)\n\n#include \"ocl_icd_loader.h\"\n#define DEBUG_OCL_ICD_PROVIDE_DUMP_FIELD\n#include \"ocl_icd_debug.h\"\n\n#define ETC_OPENCL_VENDORS \"/etc/OpenCL/vendors\"\n\nint debug_ocl_icd_mask=0;\n\ntypedef __typeof__(clGetPlatformInfo) *clGetPlatformInfo_fn;\n\ninline void dump_vendor_icd(const char* info, const struct vendor_icd *v) {\n  debug(D_DUMP, \"%s %p={ num=%i, handle=%p, f=%p}\\n\", info,\n\tv, v->num_platforms, v->dl_handle, v->ext_fn_ptr);\n}\n\nstruct vendor_icd *_icds=NULL;\nstruct platform_icd *_picds=NULL;\nstatic cl_uint _num_icds = 0;\ncl_uint _num_picds = 0;\n\n#ifdef DEBUG_OCL_ICD\n#  define _clS(x) [-x] = #x\n#  define MAX_CL_ERRORS (-CL_INVALID_DEVICE_PARTITION_COUNT)\nstatic char const * const clErrorStr[MAX_CL_ERRORS+1] = {\n  _clS(CL_SUCCESS),\n  _clS(CL_DEVICE_NOT_FOUND),\n  _clS(CL_DEVICE_NOT_AVAILABLE),\n  _clS(CL_COMPILER_NOT_AVAILABLE),\n  _clS(CL_MEM_OBJECT_ALLOCATION_FAILURE),\n  _clS(CL_OUT_OF_RESOURCES),\n  _clS(CL_OUT_OF_HOST_MEMORY),\n  _clS(CL_PROFILING_INFO_NOT_AVAILABLE),\n  _clS(CL_MEM_COPY_OVERLAP),\n  _clS(CL_IMAGE_FORMAT_MISMATCH),\n  _clS(CL_IMAGE_FORMAT_NOT_SUPPORTED),\n  _clS(CL_BUILD_PROGRAM_FAILURE),\n  _clS(CL_MAP_FAILURE),\n  _clS(CL_MISALIGNED_SUB_BUFFER_OFFSET),\n  _clS(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST),\n  _clS(CL_COMPILE_PROGRAM_FAILURE),\n  _clS(CL_LINKER_NOT_AVAILABLE),\n  _clS(CL_LINK_PROGRAM_FAILURE),\n  _clS(CL_DEVICE_PARTITION_FAILED),\n  _clS(CL_KERNEL_ARG_INFO_NOT_AVAILABLE),\n  _clS(CL_INVALID_VALUE),\n  _clS(CL_INVALID_DEVICE_TYPE),\n  _clS(CL_INVALID_PLATFORM),\n  _clS(CL_INVALID_DEVICE),\n  _clS(CL_INVALID_CONTEXT),\n  _clS(CL_INVALID_QUEUE_PROPERTIES),\n  _clS(CL_INVALID_COMMAND_QUEUE),\n  _clS(CL_INVALID_HOST_PTR),\n  _clS(CL_INVALID_MEM_OBJECT),\n  _clS(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR),\n  _clS(CL_INVALID_IMAGE_SIZE),\n  _clS(CL_INVALID_SAMPLER),\n  _clS(CL_INVALID_BINARY),\n  _clS(CL_INVALID_BUILD_OPTIONS),\n  _clS(CL_INVALID_PROGRAM),\n  _clS(CL_INVALID_PROGRAM_EXECUTABLE),\n  _clS(CL_INVALID_KERNEL_NAME),\n  _clS(CL_INVALID_KERNEL_DEFINITION),\n  _clS(CL_INVALID_KERNEL),\n  _clS(CL_INVALID_ARG_INDEX),\n  _clS(CL_INVALID_ARG_VALUE),\n  _clS(CL_INVALID_ARG_SIZE),\n  _clS(CL_INVALID_KERNEL_ARGS),\n  _clS(CL_INVALID_WORK_DIMENSION),\n  _clS(CL_INVALID_WORK_GROUP_SIZE),\n  _clS(CL_INVALID_WORK_ITEM_SIZE),\n  _clS(CL_INVALID_GLOBAL_OFFSET),\n  _clS(CL_INVALID_EVENT_WAIT_LIST),\n  _clS(CL_INVALID_EVENT),\n  _clS(CL_INVALID_OPERATION),\n  _clS(CL_INVALID_GL_OBJECT),\n  _clS(CL_INVALID_BUFFER_SIZE),\n  _clS(CL_INVALID_MIP_LEVEL),\n  _clS(CL_INVALID_GLOBAL_WORK_SIZE),\n  _clS(CL_INVALID_PROPERTY),\n  _clS(CL_INVALID_IMAGE_DESCRIPTOR),\n  _clS(CL_INVALID_COMPILER_OPTIONS),\n  _clS(CL_INVALID_LINKER_OPTIONS),\n  _clS(CL_INVALID_DEVICE_PARTITION_COUNT)\n};\n#undef _clS\n#endif\n\nstatic char* _clerror2string (cl_int error) __attribute__((unused));\nstatic char* _clerror2string (cl_int error) {\n#ifdef DEBUG_OCL_ICD\n  if (-error > MAX_CL_ERRORS || error > 0) {\n    debug(D_WARN, \"Unknown error code %d\", error);\n    RETURN_STR(\"OpenCL Error\");\n  }\n  const char *ret=clErrorStr[-error];\n  if (ret == NULL) {\n    debug(D_WARN, \"Unknown error code %d\", error);\n    RETURN_STR(\"OpenCL Error\");\n  }\n  RETURN_STR(ret);\n#else\n  static char number[15];\n  if (error==0) {\n    RETURN_STR(\"CL_SUCCESS\");\n  }\n  snprintf(number, 15, \"%i\", error);\n  RETURN_STR(number);\n#endif\n}\n\nstatic inline int _string_end_with_icd(const char* str) {\n  size_t len = strlen(str);\n  if( len<5 || strcmp(str + len - 4, \".icd\" ) != 0 ) {\n    return 0;\n  }\n  return 1;\n}\n\nstatic inline int _string_with_slash(const char* str) {\n  return strchr(str, '/') != NULL;\n}\n\nstatic inline unsigned int _find_num_icds(DIR *dir) {\n  unsigned int num_icds = 0;\n  struct dirent *ent;\n  while( (ent=readdir(dir)) != NULL ){\n    if (_string_end_with_icd(ent->d_name)) {\n      num_icds++;\n    }\n  }\n  rewinddir(dir);\n  RETURN(num_icds);\n}\n\nstatic inline unsigned int _load_icd(int num_icds, const char* lib_path) {\n  unsigned int ret=0;\n  debug(D_LOG, \"Loading ICD '%s'\", lib_path);\n\n  _icds[num_icds].dl_handle = dlopen(lib_path, RTLD_LAZY|RTLD_LOCAL);//|RTLD_DEEPBIND);\n  if(_icds[num_icds].dl_handle != NULL) {\n    debug(D_LOG, \"ICD[%i] loaded\", num_icds);\n    ret=1;\n  } else {\n    debug(D_WARN, \"error while dlopening the IDL: '%s',\\n  => skipping ICD\", dlerror());\n  }\n  return ret;\n}\n\nstatic inline unsigned int _open_driver(unsigned int num_icds,\n\t\t\t\t\tconst char*dir_path, const char*file_path) {\n  char * lib_path;\n  char * err;\n  unsigned int lib_path_length;\n  if (dir_path != NULL) {\n    lib_path_length = strlen(dir_path) + strlen(file_path) + 2;\n    lib_path = malloc(lib_path_length*sizeof(char));\n    sprintf(lib_path,\"%s/%s\", dir_path, file_path);\n  } else {\n    lib_path_length = strlen(file_path) + 1;\n    lib_path = malloc(lib_path_length*sizeof(char));\n    sprintf(lib_path,\"%s\", file_path);\n  }\n  debug(D_LOG, \"Considering file '%s'\", lib_path);\n  FILE *f = fopen(lib_path,\"r\");\n  free(lib_path);\n  if (f==NULL) {\n    RETURN(num_icds);\n  }\n\n  fseek(f, 0, SEEK_END);\n  lib_path_length = ftell(f)+1;\n  fseek(f, 0, SEEK_SET);\n  if(lib_path_length == 1) {\n    debug(D_WARN, \"File contents too short, skipping ICD\");\n    fclose(f);\n    RETURN(num_icds);\n  }\n  lib_path = malloc(lib_path_length*sizeof(char));\n  err = fgets(lib_path, lib_path_length, f);\n  fclose(f);\n  if( err == NULL ) {\n    free(lib_path);\n    debug(D_WARN, \"Error while loading file contents, skipping ICD\");\n    RETURN(num_icds);\n  }\n\n  lib_path_length = strnlen(lib_path, lib_path_length);\n\n  if( lib_path[lib_path_length-1] == '\\n' )\n    lib_path[lib_path_length-1] = '\\0';\n\n  num_icds += _load_icd(num_icds, lib_path);\n\n  free(lib_path);\n  RETURN(num_icds);\n}\n\nstatic inline unsigned int _open_drivers(DIR *dir, const char* dir_path) {\n  unsigned int num_icds = 0;\n  struct dirent *ent;\n  while( (ent=readdir(dir)) != NULL ){\n    if(! _string_end_with_icd(ent->d_name)) {\n      continue;\n    }\n    num_icds = _open_driver(num_icds, dir_path, ent->d_name);\n\n  }\n  RETURN(num_icds);\n}\n\nstatic void* _get_function_addr(void* dlh, clGetExtensionFunctionAddress_fn fn, const char*name) {\n  void *addr1;\n  debug(D_LOG,\"Looking for function %s\",name);\n  addr1=dlsym(dlh, name);\n  if (addr1 == NULL) {\n    debug(D_WARN, \"Missing global symbol '%s' in ICD, should be skipped\", name);\n  }\n  void* addr2=NULL;\n  if (fn) {\n    addr2=(*fn)(name);\n    if (addr2 == NULL) {\n      debug(D_WARN, \"Missing function '%s' in ICD, should be skipped\", name);\n    }\n#ifdef DEBUG_OCL_ICD\n    if (addr1 && addr2 && addr1!=addr2) {\n      debug(D_WARN, \"Function and symbol '%s' have different addresses!\", name);\n    }\n#endif\n  }\n  if (!addr2) addr2=addr1;\n  RETURN(addr2);\n}\n\nstatic int _allocate_platforms(int req) {\n  static cl_uint allocated=0;\n  debug(D_LOG,\"Requesting allocation for %d platforms\",req);\n  if (allocated - _num_picds < req) {\n    if (allocated==0) {\n      _picds=(struct platform_icd*)malloc(req*sizeof(struct platform_icd));\n    } else {\n      req = req - (allocated - _num_picds);\n      _picds=(struct platform_icd*)realloc(_picds, (allocated+req)*sizeof(struct platform_icd));\n    }\n    allocated += req;\n  }\n  RETURN(allocated - _num_picds);\n}\n\nstatic char* _malloc_clGetPlatformInfo(clGetPlatformInfo_fn plt_info_ptr,\n\t\t cl_platform_id pid, cl_platform_info cname, char* sname) {\n  cl_int error;\n  size_t param_value_size_ret;\n  error = plt_info_ptr(pid, cname, 0, NULL, &param_value_size_ret);\n  if (error != CL_SUCCESS) {\n    debug(D_WARN, \"Error %s while requesting %s in platform %p\",\n\t  _clerror2string(error), sname, pid);\n    return NULL;\n  }\n  char *param_value = (char *)malloc(sizeof(char)*param_value_size_ret);\n  if (param_value == NULL) {\n    debug(D_WARN, \"Error in malloc while requesting %s in platform %p\",\n\t  sname, pid);\n    return NULL;\n  }\n  error = plt_info_ptr(pid, cname, param_value_size_ret, param_value, NULL);\n  if (error != CL_SUCCESS){\n    free(param_value);\n    debug(D_WARN, \"Error %s while requesting %s in platform %p\",\n\t  _clerror2string(error), sname, pid);\n    return NULL;\n  }\n  RETURN_STR(param_value);\n}\n\nstatic void _count_devices(struct platform_icd *p) {\n  cl_int error;\n\n  /* Ensure they are 0 in case of errors */\n  p->ngpus = p->ncpus = p->ndevs = 0;\n\n  error = clGetDeviceIDs(p->pid, CL_DEVICE_TYPE_GPU, 0, NULL, &(p->ngpus));\n  if (error != CL_SUCCESS && error != CL_DEVICE_NOT_FOUND){\n    debug(D_WARN, \"Error %s while counting GPU devices in platform %p\",\n\t  _clerror2string(error), p->pid);\n  }\n\n  error = clGetDeviceIDs(p->pid, CL_DEVICE_TYPE_CPU, 0, NULL, &(p->ncpus));\n  if (error != CL_SUCCESS && error != CL_DEVICE_NOT_FOUND){\n    debug(D_WARN, \"Error %s while counting CPU devices in platform %p\",\n\t  _clerror2string(error), p->pid);\n  }\n\n  error = clGetDeviceIDs(p->pid, CL_DEVICE_TYPE_ALL, 0, NULL, &(p->ndevs));\n  if (error != CL_SUCCESS && error != CL_DEVICE_NOT_FOUND){\n    debug(D_WARN, \"Error %s while counting ALL devices in platform %p\",\n\t  _clerror2string(error), p->pid);\n  }\n\n}\n\nstatic int _cmp_platforms(const void *_a, const void *_b) {\n\tconst struct platform_icd *a=(const struct platform_icd *)_a;\n\tconst struct platform_icd *b=(const struct platform_icd *)_b;\n\n\t/* sort first platforms handling max gpu */\n\tif (a->ngpus > b->ngpus) return -1;\n\tif (a->ngpus < b->ngpus) return 1;\n\t/* sort next platforms handling max cpu */\n\tif (a->ncpus > b->ncpus) return -1;\n\tif (a->ncpus < b->ncpus) return 1;\n\t/* sort then platforms handling max devices */\n\tif (a->ndevs > b->ndevs) return -1;\n\tif (a->ndevs < b->ndevs) return 1;\n\t/* else consider platforms equal */\n\treturn 0;\n}\n\nstatic void _sort_platforms(struct platform_icd *picds, int npicds) {\n\tqsort(picds, npicds, sizeof(*picds),\n\t\t&_cmp_platforms);\n}\n\nstatic inline void _find_and_check_platforms(cl_uint num_icds) {\n  cl_uint i;\n  _num_icds = 0;\n  for( i=0; i<num_icds; i++){\n    debug(D_LOG, \"Checking ICD %i/%i\", i, num_icds);\n    dump_vendor_icd(\"before looking for platforms\", &_icds[i]);\n    struct vendor_icd *picd = &_icds[i];\n    void* dlh = _icds[i].dl_handle;\n    picd->ext_fn_ptr = _get_function_addr(dlh, NULL, \"clGetExtensionFunctionAddress\");\n    clIcdGetPlatformIDsKHR_fn plt_fn_ptr =\n      _get_function_addr(dlh, picd->ext_fn_ptr, \"clIcdGetPlatformIDsKHR\");\n    clGetPlatformInfo_fn plt_info_ptr =\n      _get_function_addr(dlh, picd->ext_fn_ptr,\t\"clGetPlatformInfo\");\n    if( picd->ext_fn_ptr == NULL\n\t|| plt_fn_ptr == NULL\n\t|| plt_info_ptr == NULL) {\n      debug(D_WARN, \"Missing symbols in ICD, skipping it\");\n      continue;\n    }\n    cl_uint num_platforms=0;\n    cl_int error;\n    error = (*plt_fn_ptr)(0, NULL, &num_platforms);\n    if( error != CL_SUCCESS || num_platforms == 0) {\n      debug(D_LOG, \"No platform in ICD, skipping it\");\n      continue;\n    }\n    cl_platform_id *platforms = (cl_platform_id *) malloc( sizeof(cl_platform_id) * num_platforms);\n    error = (*plt_fn_ptr)(num_platforms, platforms, NULL);\n    if( error != CL_SUCCESS ){\n      free(platforms);\n      debug(D_WARN, \"Error in loading ICD platforms, skipping ICD\");\n      continue;\n    }\n    cl_uint num_valid_platforms=0;\n    cl_uint j;\n    debug(D_LOG, \"Try to load %d platforms\", num_platforms);\n    if (_allocate_platforms(num_platforms) < num_platforms) {\n      free(platforms);\n      debug(D_WARN, \"Not enought platform allocated. Skipping ICD\");\n      continue;\n    }\n    for(j=0; j<num_platforms; j++) {\n      debug(D_LOG, \"Checking platform %i\", j);\n      struct platform_icd *p=&_picds[_num_picds];\n      char *param_value=NULL;\n      p->extension_suffix=NULL;\n      p->vicd=&_icds[i];\n      p->pid=platforms[j];\n#ifdef DEBUG_OCL_ICD\n      if (debug_ocl_icd_mask & D_DUMP) {\n        int log=debug_ocl_icd_mask & D_TRACE;\n        debug_ocl_icd_mask &= ~D_TRACE;\n\tdump_platform(p->vicd->ext_fn_ptr, p->pid);\n        debug_ocl_icd_mask |= log;\n      }\n#endif\n      {\n\t      /* Allow to workaround a bug in the Intel ICD used\n\t       * with optirun (search for NVidia Optimus for more info)\n\t       */\n\t      const char* str=getenv(\"OCL_ICD_ASSUME_ICD_EXTENSION\");\n\t      if (! str || str[0]==0) {\n\t\t      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_EXTENSIONS, \"extensions\");\n\t\t      if (param_value == NULL){\n\t\t\t      debug(D_WARN, \"Skipping platform %i\", j);\n\t\t\t      continue;\n\t\t      }\n\t\t      debug(D_DUMP, \"Supported extensions: %s\", param_value);\n\t\t      if( strstr(param_value, \"cl_khr_icd\") == NULL){\n\t\t\t      free(param_value);\n\t\t\t      debug(D_WARN, \"Missing khr extension in platform %i, skipping it\", j);\n\t\t\t      continue;\n\t\t      }\n\t\t      free(param_value);\n\t      }\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_ICD_SUFFIX_KHR, \"suffix\");\n      if (param_value == NULL){\n\tdebug(D_WARN, \"Skipping platform %i\", j);\n        continue;\n      }\n      p->extension_suffix = param_value;\n      debug(D_DUMP|D_LOG, \"Extension suffix: %s\", param_value);\n#ifdef DEBUG_OCL_ICD\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_PROFILE, \"profile\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Profile: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_VERSION, \"version\");\n      p->version = param_value;\n      if (param_value != NULL){\n        debug(D_DUMP, \"Version: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_NAME, \"name\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Name: %s\", param_value);\n\tfree(param_value);\n      }\n      param_value=_malloc_clGetPlatformInfo(plt_info_ptr, p->pid, CL_PLATFORM_VENDOR, \"vendor\");\n      if (param_value != NULL){\n        debug(D_DUMP, \"Vendor: %s\", param_value);\n\tfree(param_value);\n      }\n#endif\n      _count_devices(p);\n      num_valid_platforms++;\n      _num_picds++;\n    }\n    if( num_valid_platforms != 0 ) {\n      if ( _num_icds != i ) {\n        picd->dl_handle = dlh;\n      }\n      dump_vendor_icd(\"after looking for platforms\", &_icds[_num_icds]);\n      _num_icds++;\n      picd->num_platforms = num_valid_platforms;\n    } else {\n      dlclose(dlh);\n    }\n    free(platforms);\n  }\n  _sort_platforms(&_picds[0], _num_picds);\n}\n\nstatic void __initClIcd( void ) {\n  debug_init();\n  cl_uint num_icds = 0;\n  int is_dir = 0;\n  DIR *dir = NULL;\n  const char* dir_path=getenv(\"OCL_ICD_VENDORS\");\n  if (! dir_path || dir_path[0]==0) {\n    debug(D_DUMP, \"OCL_ICD_VENDORS empty or not defined, using %s\", ETC_OPENCL_VENDORS);\n    dir_path=ETC_OPENCL_VENDORS;\n    is_dir=1;\n  }\n  if (!is_dir) {\n    struct stat buf;\n    int ret=stat(dir_path, &buf);\n    if (ret != 0 && errno != ENOENT) {\n      debug(D_WARN, \"Cannot stat '%s'. Aborting\", dir_path);\n    }\n    if (ret == 0 && S_ISDIR(buf.st_mode)) {\n      is_dir=1;\n    }\n  }\n\n  if (!is_dir) {\n    debug(D_LOG,\"Only loading '%s' as an ICD\", dir_path);\n    num_icds = 1;\n    dir=NULL;\n  } else {\n    debug(D_LOG,\"Reading icd list from '%s'\", dir_path);\n    dir = opendir(dir_path);\n    if(dir == NULL) {\n      if (errno == ENOTDIR) {\n        debug(D_DUMP, \"%s is not a directory, trying to use it as a ICD libname\",\n\t  dir_path);\n      }\n      goto abort;\n    }\n\n    num_icds = _find_num_icds(dir);\n    if(num_icds == 0) {\n      goto abort;\n    }\n  }\n\n  _icds = (struct vendor_icd*)malloc(num_icds * sizeof(struct vendor_icd));\n  if (_icds == NULL) {\n    goto abort;\n  }\n\n  if (!is_dir) {\n    if (_string_end_with_icd(dir_path)) {\n      num_icds = 0;\n      if (! _string_with_slash(dir_path)) {\n\tnum_icds = _open_driver(0, ETC_OPENCL_VENDORS, dir_path);\n      }\n      if (num_icds == 0) {\n\tnum_icds = _open_driver(0, NULL, dir_path);\n      }\n    } else {\n      num_icds = _load_icd(0, dir_path);\n    }\n  } else {\n    num_icds = _open_drivers(dir, dir_path);\n  }\n  if(num_icds == 0) {\n    goto abort;\n  }\n\n  _find_and_check_platforms(num_icds);\n  if(_num_icds == 0){\n    goto abort;\n  }\n\n  if (_num_icds < num_icds) {\n    _icds = (struct vendor_icd*)realloc(_icds, _num_icds * sizeof(struct vendor_icd));\n  }\n  debug(D_WARN, \"%d valid vendor(s)!\", _num_icds);\n\n  if (dir != NULL){\n    closedir(dir);\n  }\n  return;\n abort:\n  _num_icds = 0;\n  if (_icds) {\n    free(_icds);\n    _icds = NULL;\n  }\n  if (dir != NULL){\n    closedir(dir);\n  }\n  return;\n}\n\n#ifdef USE_PTHREAD\nstatic pthread_once_t once_init = PTHREAD_ONCE_INIT;\n#else\nstatic int gard=0;\n#endif\nvolatile static __thread int in_init = 0;\nvolatile static cl_uint _initialized = 0;\n\nstatic void _initClIcd_real( void ) {\n#ifdef USE_PTHREAD\n  if (in_init) {\n    /* probably reentrency, in_init is a __thread variable */\n    debug(D_WARN, \"Executing init while already in init!\");\n  } else {\n    in_init=1;\n    __sync_synchronize();\n    pthread_once(&once_init, &__initClIcd);\n    __sync_synchronize();\n    in_init=0;\n  }\n#else\n  if (__sync_bool_compare_and_swap(&gard, 0, 1)) {\n    in_init=1;\n    __sync_synchronize();\n    __initClIcd();\n    __sync_synchronize();\n    in_init=0;\n  } else {\n    if (in_init) {\n      /* probably reentrency (could also be preemptive user-level threads). */\n    } else {\n      /* someone else started __initClIcd(). We wait until it ends. */\n      debug(D_WARN, \"Waiting end of init\");\n      while (!_initialized) {\n\t__sync_synchronize();\n      }\n      debug(D_WARN, \"Wait done\");\n   }\n  }\n#endif\n  _initialized = 1;\n}\n\nstatic inline void _initClIcd( void ) {\n  if( __builtin_expect (_initialized, 1) )\n    return;\n  _initClIcd_real();\n}\n\ncl_platform_id __attribute__((visibility(\"internal\")))\ngetDefaultPlatformID() {\n  static cl_platform_id defaultPlatformID=NULL;\n  static int defaultSet=0;\n  _initClIcd();\n  if (! defaultSet) {\n    do {\n      if(_num_picds == 0) {\n\tbreak;\n      }\n      const char *default_platform = getenv(\"OPENCL_ICD_DEFAULT_PLATFORM\");\n      int num_default_platform;\n      char *end_scan;\n      if (! default_platform) {\n\tnum_default_platform = 0;\n      } else {\n\tnum_default_platform = strtol(default_platform, &end_scan, 10);\n\tif (*default_platform == '\\0' || *end_scan != '\\0') {\n\t  break;\n\t}\n      }\n      if (num_default_platform < 0 || num_default_platform >= _num_picds) {\n\tbreak;\n      }\n      defaultPlatformID=_picds[num_default_platform].pid;\n    } while(0);\n    defaultSet=1;\n  }\n  return defaultPlatformID;\n}\n\n#pragma GCC visibility pop\n#define hidden_alias(name) \\\n  typeof(name) name##_hid __attribute__ ((alias (#name), visibility(\"hidden\")))\n\ntypedef enum {\n  CL_ICDL_OCL_VERSION=1,\n  CL_ICDL_VERSION=2,\n  CL_ICDL_NAME=3,\n  CL_ICDL_VENDOR=4,\n} cl_icdl_info;\n\nstatic cl_int clGetICDLoaderInfoOCLICD(\n  cl_icdl_info     param_name,\n  size_t           param_value_size,\n  void *           param_value,\n  size_t *         param_value_size_ret)\n{\n  char cl_icdl_ocl_version[] = \"OpenCL 1.2\";\n  char cl_icdl_version[] = PACKAGE_VERSION;\n  char cl_icdl_name[] = PACKAGE_NAME;\n  char cl_icdl_vendor[] = \"OCL Icd free software\";\n\n  size_t size_string;\n  char * string_p;\n#define oclcase(name, NAME) \\\n  case CL_ICDL_##NAME: \\\n    string_p = cl_icdl_##name; \\\n    size_string = sizeof(cl_icdl_##name); \\\n    break\n\n  switch ( param_name ) {\n    oclcase(ocl_version,OCL_VERSION);\n    oclcase(version,VERSION);\n    oclcase(name,NAME);\n    oclcase(vendor,VENDOR);\n    default:\n      return CL_INVALID_VALUE;\n      break;\n  }\n#undef oclcase\n  if( param_value != NULL ) {\n    if( size_string > param_value_size )\n      return CL_INVALID_VALUE;\n    memcpy(param_value, string_p, size_string);\n  }\n  if( param_value_size_ret != NULL )\n    *param_value_size_ret = size_string;\n  return CL_SUCCESS;\n}\n\nCL_API_ENTRY void * CL_API_CALL\nclGetExtensionFunctionAddress(const char * func_name) CL_API_SUFFIX__VERSION_1_0 {\n  debug_trace();\n  _initClIcd();\n  if( func_name == NULL )\n    return NULL;\n  cl_uint suffix_length;\n  cl_uint i;\n  void * return_value=NULL;\n  struct func_desc const * fn=&function_description[0];\n  int lenfn=strlen(func_name);\n  if (lenfn > 3 &&\n      (strcmp(func_name+lenfn-3, \"KHR\")==0 || strcmp(func_name+lenfn-3, \"EXT\")==0)) {\n    while (fn->name != NULL) {\n      if (strcmp(func_name, fn->name)==0)\n        RETURN(fn->addr);\n      fn++;\n    }\n  }\n  for(i=0; i<_num_picds; i++) {\n    suffix_length = strlen(_picds[i].extension_suffix);\n    if( suffix_length > strlen(func_name) )\n      continue;\n    if(strcmp(_picds[i].extension_suffix, &func_name[strlen(func_name)-suffix_length]) == 0)\n      RETURN((*_picds[i].vicd->ext_fn_ptr)(func_name));\n  }\n  if(strcmp(func_name, \"clGetICDLoaderInfoOCLICD\") == 0) {\n    return (void*)(void*(*)(void))(&clGetICDLoaderInfoOCLICD);\n  }\n  RETURN(return_value);\n}\nhidden_alias(clGetExtensionFunctionAddress);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclGetPlatformIDs(cl_uint          num_entries,\n                 cl_platform_id * platforms,\n                 cl_uint *        num_platforms) CL_API_SUFFIX__VERSION_1_0 {\n  debug_trace();\n  _initClIcd();\n  if( platforms == NULL && num_platforms == NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( num_entries == 0 && platforms != NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( _num_icds == 0 || _num_picds == 0 ) {\n    if ( num_platforms != NULL )\n      *num_platforms = 0;\n    RETURN(CL_PLATFORM_NOT_FOUND_KHR);\n  }\n\n  cl_uint i;\n  if( num_platforms != NULL ){\n    *num_platforms = _num_picds;\n  }\n  if( platforms != NULL ) {\n    cl_uint n_platforms = _num_picds < num_entries ? _num_picds : num_entries;\n    for( i=0; i<n_platforms; i++) {\n      *(platforms++) = _picds[i].pid;\n    }\n  }\n  return CL_SUCCESS;\n}\nhidden_alias(clGetPlatformIDs);\n\n#define RETURN_WITH_ERRCODE(errvar, errvalue, retvalue) \\\n  do { \\\n    if(errvar) { \\\n      *errvar=errvalue; \\\n    } \\\n    RETURN(NULL); \\\n  } while(0)\n\n#define CHECK_PLATFORM(__pid) \\\n  ({ \\\n    cl_platform_id _pid=(__pid); \\\n    int good=0; \\\n    cl_uint j; \\\n    for( j=0; j<_num_picds; j++) { \\\n      if( _picds[j].pid == _pid) { \\\n        good=1; \\\n        break; \\\n      } \\\n    } \\\n    good; \\\n  })\n\nCL_API_ENTRY cl_context CL_API_CALL\nclCreateContext(const cl_context_properties *  properties ,\n                cl_uint                        num_devices ,\n                const cl_device_id *           devices ,\n                void (CL_CALLBACK *  pfn_notify )(const char *, const void *, size_t, void *),\n                void *                         user_data ,\n                cl_int *                       errcode_ret ){\n  debug_trace();\n  _initClIcd();\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n        if((struct _cl_platform_id *) properties[i+1] == NULL) {\n          if(errcode_ret) {\n            *errcode_ret = CL_INVALID_PLATFORM;\n          }\n          RETURN(NULL);\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n\t    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_PLATFORM, NULL);\n          }\n        }\n        RETURN(((struct _cl_platform_id *) properties[i+1])\n          ->dispatch->clCreateContext(properties, num_devices, devices,\n                        pfn_notify, user_data, errcode_ret));\n      }\n      i += 2;\n    }\n  }\n  if(devices == NULL || num_devices == 0) {\n    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_VALUE, NULL);\n  }\n  if((struct _cl_device_id *)devices[0] == NULL) {\n    RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_DEVICE, NULL);\n  }\n  RETURN(((struct _cl_device_id *)devices[0])\n    ->dispatch->clCreateContext(properties, num_devices, devices,\n                  pfn_notify, user_data, errcode_ret));\n}\nhidden_alias(clCreateContext);\n\nCL_API_ENTRY cl_context CL_API_CALL\nclCreateContextFromType(const cl_context_properties *  properties ,\n                        cl_device_type                 device_type ,\n                        void (CL_CALLBACK *      pfn_notify )(const char *, const void *, size_t, void *),\n                        void *                         user_data ,\n                        cl_int *                       errcode_ret ){\n  debug_trace();\n  _initClIcd();\n  if(_num_picds == 0) {\n    goto out;\n  }\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n\tif( (struct _cl_platform_id *) properties[i+1] == NULL ) {\n\t  goto out;\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n            goto out;\n          }\n        }\n        return ((struct _cl_platform_id *) properties[i+1])\n          ->dispatch->clCreateContextFromType(properties, device_type,\n                        pfn_notify, user_data, errcode_ret);\n      }\n      i += 2;\n    }\n  } else {\n    const char *default_platform = getenv(\"OPENCL_ICD_DEFAULT_PLATFORM\");\n    int num_default_platform;\n    char *end_scan;\n    if (! default_platform) {\n      num_default_platform = 0;\n    } else {\n      num_default_platform = strtol(default_platform, &end_scan, 10);\n      if (*default_platform == '\\0' || *end_scan != '\\0') {\n\tgoto out;\n      }\n    }\n    if (num_default_platform < 0 || num_default_platform >= _num_picds) {\n      goto out;\n    }\n    RETURN(_picds[num_default_platform].pid->dispatch->clCreateContextFromType\n\t(properties, device_type, pfn_notify, user_data, errcode_ret));\n  }\n out:\n  RETURN_WITH_ERRCODE(errcode_ret, CL_INVALID_PLATFORM, NULL);\n}\nhidden_alias(clCreateContextFromType);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclGetGLContextInfoKHR(const cl_context_properties *  properties ,\n                      cl_gl_context_info             param_name ,\n                      size_t                         param_value_size ,\n                      void *                         param_value ,\n                      size_t *                       param_value_size_ret ){\n  debug_trace();\n  _initClIcd();\n  cl_uint i=0;\n  if( properties != NULL){\n    while( properties[i] != 0 ) {\n      if( properties[i] == CL_CONTEXT_PLATFORM ) {\n        if( (struct _cl_platform_id *) properties[i+1] == NULL ) {\n\t  RETURN(CL_INVALID_PLATFORM);\n        } else {\n          if( !CHECK_PLATFORM((cl_platform_id) properties[i+1]) ) {\n\t    RETURN(CL_INVALID_PLATFORM);\n          }\n        }\n        RETURN(((struct _cl_platform_id *) properties[i+1])\n\t  ->dispatch->clGetGLContextInfoKHR(properties, param_name,\n                        param_value_size, param_value, param_value_size_ret));\n      }\n      i += 2;\n    }\n  }\n  RETURN(CL_INVALID_PLATFORM);\n}\nhidden_alias(clGetGLContextInfoKHR);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclWaitForEvents(cl_uint              num_events ,\n                const cl_event *     event_list ){\n  debug_trace();\n  if( num_events == 0 || event_list == NULL )\n    RETURN(CL_INVALID_VALUE);\n  if( (struct _cl_event *)event_list[0] == NULL )\n    RETURN(CL_INVALID_EVENT);\n  RETURN(((struct _cl_event *)event_list[0])\n    ->dispatch->clWaitForEvents(num_events, event_list));\n}\nhidden_alias(clWaitForEvents);\n\nCL_API_ENTRY cl_int CL_API_CALL\nclUnloadCompiler( void ){\n  debug_trace();\n  RETURN(CL_SUCCESS);\n}\nhidden_alias(clUnloadCompiler);\n",
        "/tmp/vanessa/spack-stage/spack-stage-ocl-icd-2.2.5-xqbxtsadwhmwca65sd2w7f6lxyyyr5ia/spack-src/icd_generator.rb": "=begin\nCopyright (c) 2012, Brice Videau <brice.videau@imag.fr>\nCopyright (c) 2012, Vincent Danjean <Vincent.Danjean@ens-lyon.org>\nAll rights reserved.\n      \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    \n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n        \nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n=end\n\nrequire 'yaml'\n\nmodule IcdGenerator\n  $api_entries = {}\n  $api_entries_array = []\n  $cl_objects = [\"platform_id\", \"device_id\", \"context\", \"command_queue\", \"mem\", \"program\", \"kernel\", \"event\", \"sampler\"]\n  $know_entries = { 1 => \"clGetPlatformInfo\", 0 => \"clGetPlatformIDs\", 2 => \"clGetDeviceIDs\" }\n  $use_name_in_test = { 1 => \"clGetPlatformInfo\", 0 => \"clGetPlatformIDs\", 2 => \"clGetDeviceIDs\" }\n  # do not call these functions when trying to discover the mapping\n  $forbidden_funcs = [\"clGetExtensionFunctionAddress\", \"clGetPlatformIDs\",\n    \"clGetPlatformInfo\", \"clGetGLContextInfoKHR\", \"clUnloadCompiler\",\n    \"clSetCommandQueueProperty\", \"clGetDeviceIDs\"]\n  $windows_funcs = [\"clGetDeviceIDsFromD3D10KHR\", \"clCreateFromD3D10BufferKHR\",\n    \"clCreateFromD3D10Texture2DKHR\", \"clCreateFromD3D10Texture3DKHR\",\n    \"clEnqueueAcquireD3D10ObjectsKHR\", \"clEnqueueReleaseD3D10ObjectsKHR\",\n    \"clGetDeviceIDsFromD3D11KHR\", \"clCreateFromD3D11BufferKHR\",\n    \"clCreateFromD3D11Texture2DKHR\", \"clCreateFromD3D11Texture3DKHR\",\n    \"clEnqueueAcquireD3D11ObjectsKHR\", \"clEnqueueReleaseD3D11ObjectsKHR\",\n    \"clGetDeviceIDsFromDX9MediaAdapterKHR\", \"clCreateFromDX9MediaSurfaceKHR\",\n    \"clEnqueueAcquireDX9MediaSurfacesKHR\", \"clEnqueueReleaseDX9MediaSurfacesKHR\"]\n  # do not create weak functions for these ones in the discovering program\n  $noweak_funcs = [\"clGetExtensionFunctionAddress\", \"clGetPlatformIDs\",\n    \"clGetPlatformInfo\", \"clGetGLContextInfoKHR\", \"clUnloadCompiler\",\n    \"clCreateContext\", \"clCreateContextFromType\", \"clWaitForEvents\"]\n  # functions written specifically in the loader\n  $specific_loader_funcs = [\"clGetExtensionFunctionAddress\",\"clGetPlatformIDs\",\n                         \"clGetGLContextInfoKHR\", \"clUnloadCompiler\",\n    \"clCreateContext\", \"clCreateContextFromType\", \"clWaitForEvents\"]\n  $header_files = [\"/usr/include/CL/cl.h\", \"/usr/include/CL/cl_gl.h\",\n    \"/usr/include/CL/cl_ext.h\", \"/usr/include/CL/cl_gl_ext.h\"]\n  $windows_header_files = [\"/usr/include/CL/cl_dx9_media_sharing.h\", \"/usr/include/CL/cl_d3d11.h\", \"/usr/include/CL/cl_d3d10.h\"]\n  $cl_data_type_error = { \"cl_platform_id\"   => \"CL_INVALID_PLATFORM\",\n                          \"cl_device_id\"     => \"CL_INVALID_DEVICE\",\n                          \"cl_context\"       => \"CL_INVALID_CONTEXT\",\n                          \"cl_command_queue\" => \"CL_INVALID_COMMAND_QUEUE\",\n                          \"cl_mem\"           => \"CL_INVALID_MEM_OBJECT\",\n                          \"cl_program\"       => \"CL_INVALID_PROGRAM\",\n                          \"cl_kernel\"        => \"CL_INVALID_KERNEL\",\n                          \"cl_event\"         => \"CL_INVALID_EVENT\",\n                          \"cl_sampler\"       => \"CL_INVALID_SAMPLER\"}\n  $non_standard_error = [ \"clGetExtensionFunctionAddressForPlatform\", \"clSVMAlloc\" ]\n  $versions_entries = []\n  $buff=50\n  $license = <<EOF\nCopyright (c) 2012, Brice Videau <brice.videau@imag.fr>\nCopyright (c) 2012, Vincent Danjean <Vincent.Danjean@ens-lyon.org>\nAll rights reserved.\n      \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    \n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n        \nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nDo not edit this file. It is automatically generated.\nEOF\n\n  ##########################################################\n  ##########################################################\n  # helper functions\n  def self.parse_headers\n    api_entries = []\n    $header_files.each{ |fname|\n      f = File::open(fname)\n      doc = f.read\n      api_entries += doc.scan(/CL_API_ENTRY.*?;/m)\n      f.close\n    }\n    api_entries.each{ |entry|\n#      puts entry\n      begin \n        entry_name = entry.match(/CL_API_CALL(.*?)\\(/m)[1].strip\n      rescue\n        entry_name = entry.match(/(\\S*?)\\(/m)[1].strip\n      end\n      next if entry_name.match('\\*')\n      next if entry_name.match(\"INTEL\")\n      next if entry_name.match(\"APPLE\")\n      $api_entries[entry_name] = entry.gsub(\"\\r\",\"\")\n    }\n#    $api_entries.each{ |key, value|\n#      puts \"#{key}: #{value}\"\n#    }\n  end\n\n  def self.load_database(yamlfile, with_windows=false)\n    doc = YAML::load_file(yamlfile)\n    $known_entries = {}\n    $api_entries ||= {}\n    $versions_entries = Hash::new { |hash,key| hash[key]=[] }\n    entry_name = \"\"\n    version = \"\"\n    doc.each { |key, value|\n      #puts (key.to_s+\":: \"+value)\n      begin\n        entry_name = value.match(/CL_API_CALL(.*?)\\(/m)[1].strip\n      rescue\n        entry_name = value.match(/(\\S*?)\\(/m)[1].strip\n      end\n      next if (!with_windows) && $windows_funcs.include?(entry_name)\n      version = value.match(/SUFFIX__VERSION_(\\d_\\d)/m)[1]\n      $versions_entries[version].push(entry_name)\n      $known_entries[key] = entry_name\n      $api_entries[entry_name] = value\n    }\n    $api_entries_array = []\n    ($known_entries.length+$buff).times { |i|\n      #puts (i.to_s+\": \"+$known_entries[i])\n      if $known_entries[i] then\n        $api_entries_array.push( $api_entries[$known_entries[i]] )\n      else\n        $api_entries_array.push( \"CL_API_ENTRY cl_int CL_API_CALL clUnknown#{i}(void);\" )\n      end\n    }\n  end\n\n  def self.include_headers\n    headers =\"\"\n    $header_files.each { |h|\n      if h.match('^/usr/include/') then\n        headers += \"#include <#{h[13..-1]}>\\n\"\n      else\n        headers += \"#include \\\"#{h}\\\"\\n\"\n      end\n    }\n    return headers\n  end\n\n  ##########################################################\n  ##########################################################\n  # generate mode\n  def self.generate_libdummy_icd_header\n    libdummy_icd_structures = \"/**\\n#{$license}\\n*/\\n\"\n    libdummy_icd_structures +=  \"#include <CL/opencl.h>\\n\"\n    libdummy_icd_structures += self.include_headers\n    libdummy_icd_structures += \"\\n\\nstruct _cl_icd_dispatch;\\n\"\n    libdummy_icd_structures += \"struct _cl_platform_id { struct _cl_icd_dispatch *dispatch; };\\n\\n\"\n    libdummy_icd_structures += \"struct _cl_icd_dispatch {\\n\"\n    ($api_entries.length+$buff).times { |i|\n      if( $known_entries[i] ) then\n        libdummy_icd_structures += \"  void(*known#{i})(void);\\n\"\n      else\n        libdummy_icd_structures += \"  void(*unknown#{i})(void);\\n\"\n      end\n    }\n    libdummy_icd_structures += \"};\\n\\n\"\n    libdummy_icd_structures += \"#pragma GCC visibility push(hidden)\\n\\n\"\n    libdummy_icd_structures += \"struct _cl_icd_dispatch master_dispatch; \\n\\n\"\n    $use_name_in_test.each { |k, f|\n      libdummy_icd_structures += \"typeof(#{f}) INT#{f};\\n\"\n    }\n    libdummy_icd_structures += \"#pragma GCC visibility pop\\n\\n\"\n    return libdummy_icd_structures\n  end\n\n  def self.generate_libdummy_icd_source\n    libdummy_icd_source = \"/**\\n#{$license}\\n*/\\n\\n\"\n    libdummy_icd_source += \"#include <stdio.h>\\n\\n\"\n    libdummy_icd_source += \"#include \\\"libdummy_icd_gen.h\\\"\\n\\n\"\n    libdummy_icd_source += \"#include \\\"libdummy_icd.h\\\"\\n\\n\"\n    (0...$api_entries.length+$buff).each { |i|\n      libdummy_icd_source += \"void dummyFunc#{i}(void){ printf(\\\"#{i}  : \\\"); fflush(NULL); }\\n\"\n    }\n    libdummy_icd_source += \"\\nstruct _cl_icd_dispatch master_dispatch = {\\n\"\n    comma=\",\"\n    ($api_entries.length+$buff).times { |i|\n      comma=\"\" if (i == $api_entries.length+$buff-1)\n      if( $use_name_in_test[i] ) then \n        libdummy_icd_source += \"  (void(*)(void))& INT#{$known_entries[i]}#{comma}\\n\"\n      else\n        libdummy_icd_source += \"  (void(*)(void))& dummyFunc#{i}#{comma}\\n\"\n      end\n    }\n    libdummy_icd_source += \"};\\n\"\n    return libdummy_icd_source\n  end\n  \n  def self.generate_run_dummy_icd_source\n    run_dummy_icd = \"/**\\n#{$license}\\n*/\\n\"\n    run_dummy_icd += \"#include <stdlib.h>\\n\"\n    run_dummy_icd += \"#include <stdio.h>\\n\"\n    run_dummy_icd += \"#pragma GCC diagnostic push\\n\"\n    run_dummy_icd += \"#  pragma GCC diagnostic ignored \\\"-Wcpp\\\"\\n\"\n    run_dummy_icd += \"#  define CL_USE_DEPRECATED_OPENCL_1_0_APIS\\n\"\n    run_dummy_icd += \"#  define CL_USE_DEPRECATED_OPENCL_1_1_APIS\\n\"\n    run_dummy_icd += \"#  define CL_USE_DEPRECATED_OPENCL_1_2_APIS\\n\"\n    run_dummy_icd += \"#  include <CL/opencl.h>\\n\"\n    run_dummy_icd += self.include_headers\n    run_dummy_icd += \"#pragma GCC diagnostic pop\\n\"\n    run_dummy_icd += \"\\n\\n\"\n    run_dummy_icd += \"typedef CL_API_ENTRY cl_int (CL_API_CALL* oclFuncPtr_fn)(cl_platform_id platform);\\n\\n\"\n    run_dummy_icd += \"void call_all_OpenCL_functions(cl_platform_id chosen_platform) {\\n\"\n    run_dummy_icd += \"  oclFuncPtr_fn oclFuncPtr;\\n\"\n    run_dummy_icd += \"  cl_context_properties properties[] = { CL_CONTEXT_PLATFORM, (cl_context_properties)chosen_platform, 0 };\\n\"\n    $api_entries.each_key { |func_name|\n       next if $forbidden_funcs.include?(func_name)\n       if func_name == \"clCreateContext\" then\n         run_dummy_icd += \"  #{func_name}(properties,1,(cl_device_id*)&chosen_platform,NULL,NULL,NULL);\\n\"\n       elsif func_name == \"clGetGLContextInfoKHR\" then\n         run_dummy_icd += \"  #{func_name}(properties,CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR, 0, NULL, NULL);\\n\"\n       elsif func_name == \"clCreateContextFromType\" then\n         run_dummy_icd += \"  #{func_name}(properties,CL_DEVICE_TYPE_CPU,NULL,NULL,NULL);\\n\"\n       elsif func_name == \"clWaitForEvents\" then\n         run_dummy_icd += \"  #{func_name}(1,(cl_event*)&chosen_platform);\\n\"\n       elsif func_name == \"clGetExtensionFunctionAddressForPlatform\" then\n         run_dummy_icd += \"  #{func_name}((cl_platform_id)chosen_platform, \\\"clIcdGetPlatformIDsKHR\\\");\\n\"\n       elsif func_name == \"clGetDeviceIDs\" then\n         run_dummy_icd += \"  #{func_name}((cl_platform_id)chosen_platform,0,0,NULL,NULL);\\n\"\n       else\n         run_dummy_icd += \"  oclFuncPtr = (oclFuncPtr_fn)\" + func_name + \";\\n\"\n         run_dummy_icd += \"  oclFuncPtr(chosen_platform);\\n\"\n       end\n       run_dummy_icd += \"  printf(\\\"%s\\\\n\\\", \\\"#{func_name}\\\");\"\n       run_dummy_icd += \"  fflush(NULL);\\n\"\n    }\n    run_dummy_icd += \"  return;\\n}\\n\"\n    return run_dummy_icd\n  end\n\n  def self.generate_run_dummy_icd_weak_source\n    run_dummy_icd_weak = \"/**\\n#{$license}\\n*/\\n\"\n    run_dummy_icd_weak += <<EOF\n#define _GNU_SOURCE 1\n#include <stdio.h>\n#include <dlfcn.h>\n\n#define F(f) \\\\\n__attribute__((weak)) int f (void* arg, int arg2, int arg3, void* arg4, void* arg5) { \\\\\n  void (* p)(void*, int, int, void*, void*)=NULL; \\\\\n  p=dlsym(RTLD_NEXT, #f); \\\\\n  if (p) { \\\\\n    (*p)(arg, arg2, arg3, arg4, arg5); \\\\\n  } else { \\\\\n    printf(\"-1 : \"); \\\\\n  } \\\\\n  return 0; \\\\\n}\n\nEOF\n    $api_entries.each_key { |func_name|\n       next if $noweak_funcs.include?(func_name)\n       run_dummy_icd_weak += \"F(#{func_name})\\n\"\n    }\n    return run_dummy_icd_weak\n  end\n\n  def self.generate_sources(from_headers=true, from_database=false, database=nil)\n    if from_headers then        \n      parse_headers\n    end\n    if from_database then\n      load_database(database)\n    end\n    File.open('libdummy_icd_gen.h','w') { |f|\n      f.puts generate_libdummy_icd_header\n    }\n    File.open('libdummy_icd_gen.c','w') { |f|\n      f.puts generate_libdummy_icd_source\n    }\n    File.open('run_dummy_icd_gen.c','w') { |f|\n      f.puts generate_run_dummy_icd_source\n    }\n    File.open('run_dummy_icd_weak_gen.c','w') { |f|\n      f.puts generate_run_dummy_icd_weak_source\n    }\n  end\n\n  ##########################################################\n  ##########################################################\n  # database mode\n  def self.generate_ocl_icd_header\n    ocl_icd_header = \"/**\\n#{$license}\\n*/\\n\\n\"\n    ocl_icd_header += \"#ifndef OCL_ICD_H\\n\"\n    ocl_icd_header += \"#define OCL_ICD_H\\n\"\n    ocl_icd_header += \"#pragma GCC diagnostic push\\n\"\n    ocl_icd_header += \"#  pragma GCC diagnostic ignored \\\"-Wcpp\\\"\\n\"\n    ocl_icd_header += \"#  define CL_USE_DEPRECATED_OPENCL_1_0_APIS\\n\"\n    ocl_icd_header += \"#  define CL_USE_DEPRECATED_OPENCL_1_1_APIS\\n\"\n    ocl_icd_header += \"#  define CL_USE_DEPRECATED_OPENCL_1_2_APIS\\n\"\n    ocl_icd_header += \"#  include <CL/opencl.h>\\n\"\n    ocl_icd_header += self.include_headers\n    ocl_icd_header += \"#pragma GCC diagnostic pop\\n\"\n    ocl_icd_header += <<EOF\n\n#define OCL_ICD_API_VERSION\t1\n#define OCL_ICD_IDENTIFIED_FUNCTIONS\t#{$known_entries.count}\n\nstruct _cl_icd_dispatch {\nEOF\n    nb=0\n    $api_entries_array.each { |entry|\n      version = entry.split(\"\\n\").\n\tgrep(/ CL_API_SUFFIX__(VERSION_[0-9_]+)[^0-9_]/).join('').\n\tgsub(/.* CL_API_SUFFIX__(VERSION_[0-9_]+)[^0-9_].*$/, '\\1')\n      if (version != '') then\n\tocl_icd_header += '#ifdef CL_'+version+\"\\n\"\n      end\n      ocl_icd_header += entry.gsub(\"\\r\",\"\").\n\tsub(/CL_API_CALL\\n?(.*?)\\(/m,'(CL_API_CALL*\\1)('+\"\\n  \").\n\tgsub(/\\) (CL_API_SUFFIX__VERSION)/m,\"\\n) \\\\1\").gsub(/\\s*$/,'').\n\tgsub(/^[\\t ]+/,\"    \").gsub(/^([^\\t ])/, '  \\1') + \"\\n\"\n      if (version != '') then\n\tocl_icd_header += '#else'+\"\\n\"\n\tocl_icd_header += '  CL_API_ENTRY cl_int (CL_API_CALL* clUnknown'+nb.to_s+\")(void);\\n\"\n\tocl_icd_header += '#endif'+\"\\n\"\n      end\n      ocl_icd_header += \"\\n\"\n      nb=nb+1\n    }\n    ocl_icd_header += \"};\\n\"\n    ocl_icd_header += \"#endif\\n\\n\"\n    return ocl_icd_header\n  end\n\n  def self.generate_ocl_icd_loader_header\n    ocl_icd_header = \"/**\\n#{$license}\\n*/\\n\\n\"\n    ocl_icd_header += \"#include \\\"ocl_icd.h\\\"\\n\\n\"\n    ocl_icd_header += <<EOF\n\nstruct func_desc {\n  const char* name;\n  void(*const addr)(void);\n};\ntypedef __typeof__(clGetExtensionFunctionAddress) *clGetExtensionFunctionAddress_fn;\nextern const struct func_desc function_description[];\nstruct vendor_icd {\n  cl_uint\tnum_platforms;\n  void *\tdl_handle;\n  clGetExtensionFunctionAddress_fn ext_fn_ptr;\n};\n\nstruct platform_icd {\n  char *\textension_suffix;\n  char *\tversion;\n  struct vendor_icd *vicd;\n  cl_platform_id pid;\n  cl_uint\tngpus; /* number of GPU devices */\n  cl_uint\tncpus; /* number of CPU devices */\n  cl_uint\tndevs; /* total number of devices, of all types */\n};\n\nEOF\n    ocl_icd_header += \"extern struct _cl_icd_dispatch master_dispatch;\\n\"\n    $cl_objects.each { |o|\n      ocl_icd_header += \"struct _cl_#{o} { struct _cl_icd_dispatch *dispatch; };\\n\"\n    }\n    return ocl_icd_header\n  end\n\n  def self.generate_ocl_icd_loader_map\n    ocl_icd_loader_map = \"/**\\n#{$license}\\n*/\\n\\n\"\n    prev_version=\"\"\n    $versions_entries.keys.sort.each { |version|\n      ocl_icd_loader_map += \"OPENCL_#{version.sub('_','.')} {\\n\";\n      ocl_icd_loader_map += \"  global:\\n\";\n      $versions_entries[version].each { |symb|\n        ocl_icd_loader_map += \"    #{symb};\\n\"\n      }\n      if (prev_version == \"\") then\n        ocl_icd_loader_map += \"  local:\\n\";\n        ocl_icd_loader_map += \"    *;\\n\";\n      end\n      ocl_icd_loader_map += \"} #{prev_version};\\n\\n\";\n      prev_version=\"OPENCL_#{version.sub('_','.')}\";\n    }\n    return ocl_icd_loader_map\n  end\n \n  def self.generate_ocl_icd_bindings_source\n    ocl_icd_bindings_source = \"/**\\n#{$license}\\n*/\\n\"\n    ocl_icd_bindings_source += \"#include \\\"ocl_icd.h\\\"\\n\"\n    ocl_icd_bindings_source += \"struct _cl_icd_dispatch master_dispatch = {\\n\"\n    ($api_entries.length+$buff-1).times { |i|\n      if( $known_entries[i] ) then \n        ocl_icd_bindings_source += \"  #{$known_entries[i]},\\n\"\n      else\n        ocl_icd_bindings_source += \"  (void *) NULL,\\n\"\n      end\n    }\n    if( $known_entries[$api_entries.length+$buff-1] ) then\n      ocl_icd_bindings_source += \"  #{$known_entries[$api_entries.length+$buff-1]}\\n\"\n    else\n      ocl_icd_bindings_source += \"  (void *) NULL\\n\"\n    end\n    ocl_icd_bindings_source += \"};\\n\"\n    ocl_icd_bindings_source += <<EOF\n\nCL_API_ENTRY cl_int CL_API_CALL clIcdGetPlatformIDsKHR(  \n             cl_uint num_entries, \n             cl_platform_id *platforms,\n             cl_uint *num_platforms) {\n  if( platforms == NULL && num_platforms == NULL )\n    return CL_INVALID_VALUE;\n  if( num_entries == 0 && platforms != NULL )\n    return CL_INVALID_VALUE;\n#error You have to fill the commented lines with corresponding variables from your library\n//  if( your_number_of_platforms == 0)\n//    return CL_PLATFORM_NOT_FOUND_KHR;\n//  if( num_platforms != NULL )\n//    *num_platforms = your_number_of_platforms;\n  if( platforms != NULL ) {\n    cl_uint i;\n//    for( i=0; i<(your_number_of_platforms<num_entries?your_number_of_platforms:num_entries); i++)\n//      platforms[i] = &your_platforms[i];\n  }\n  return CL_SUCCESS;\n}\n\nCL_API_ENTRY void * CL_API_CALL clGetExtensionFunctionAddress(\n             const char *   func_name) CL_API_SUFFIX__VERSION_1_0 {\n#error You have to fill this function with your extensions of incorporate these lines in your version\n  if( func_name != NULL &&  strcmp(\"clIcdGetPlatformIDsKHR\", func_name) == 0 )\n    return (void *)clIcdGetPlatformIDsKHR;\n  return NULL;\n}\nCL_API_ENTRY cl_int CL_API_CALL clGetPlatformInfo(\n             cl_platform_id   platform, \n             cl_platform_info param_name,\n             size_t           param_value_size, \n             void *           param_value,\n             size_t *         param_value_size_ret) CL_API_SUFFIX__VERSION_1_0 {\n#error You ahve to fill this function with your information or assert that your version responds to CL_PLATFORM_ICD_SUFFIX_KHR\n//  char cl_platform_profile[] = \"FULL_PROFILE\";\n//  char cl_platform_version[] = \"OpenCL 1.1\";\n//  char cl_platform_name[] = \"DummyCL\";\n//  char cl_platform_vendor[] = \"LIG\";\n//  char cl_platform_extensions[] = \"cl_khr_icd\";\n//  char cl_platform_icd_suffix_khr[] = \"DUMMY\";\n  size_t size_string;\n  char * string_p;\n  if( platform != NULL ) {\n    int found = 0;\n    int i;\n    for(i=0; i<num_master_platforms; i++) {\n      if( platform == &master_platforms[i] )\n        found = 1;\n    }\n    if(!found)\n      return CL_INVALID_PLATFORM;\n  }\n  switch ( param_name ) {\n    case CL_PLATFORM_PROFILE:\n      string_p = cl_platform_profile;\n      size_string = sizeof(cl_platform_profile);\n      break;\n    case CL_PLATFORM_VERSION:\n      string_p = cl_platform_version;\n      size_string = sizeof(cl_platform_version);\n      break;\n    case CL_PLATFORM_NAME:\n      string_p = cl_platform_name;\n      size_string = sizeof(cl_platform_name);\n      break;\n    case CL_PLATFORM_VENDOR:\n      string_p = cl_platform_vendor;\n      size_string = sizeof(cl_platform_vendor);\n      break;\n    case CL_PLATFORM_EXTENSIONS:\n      string_p = cl_platform_extensions;\n      size_string = sizeof(cl_platform_extensions);\n      break;\n    case CL_PLATFORM_ICD_SUFFIX_KHR:\n      string_p = cl_platform_icd_suffix_khr;\n      size_string = sizeof(cl_platform_icd_suffix_khr);\n      break;\n    default:\n      return CL_INVALID_VALUE;\n      break;\n  }\n  if( param_value != NULL ) {\n    if( size_string > param_value_size )\n      return CL_INVALID_VALUE;\n    memcpy(param_value, string_p, size_string);\n  }\n  if( param_value_size_ret != NULL )\n    *param_value_size_ret = size_string;\n  return CL_SUCCESS;\n}\nEOF\n    return ocl_icd_bindings_source\n  end\n\n  def self.generate_ocl_icd_loader_gen_source\n    skip_funcs = $specific_loader_funcs\n    ocl_icd_loader_gen_source = \"/**\\n#{$license}\\n*/\\n\"\n    ocl_icd_loader_gen_source += \"#include \\\"ocl_icd_loader.h\\\"\\n\"\n    ocl_icd_loader_gen_source += \"#define DEBUG_OCL_ICD_PROVIDE_DUMP_FIELD\\n\"\n    ocl_icd_loader_gen_source += \"#include \\\"ocl_icd_debug.h\\\"\\n\"\n    $api_entries.each { |func_name, entry|\n      next if skip_funcs.include?(func_name)\n      clean_entry = entry.sub(/(.*\\)).*/m,'\\1').gsub(\"/*\",\"\").gsub(\"*/\",\"\").gsub(\"\\r\",\"\") + \"{\\n\"\n      return_type = entry.match(/CL_API_ENTRY (.*) CL_API_CALL/)[1]\n      parameters = clean_entry.match(/\\(.*\\)/m)[0][1..-2]\n      parameters.gsub!(/\\[.*?\\]/,\"\")\n      parameters.sub!(/\\(.*?\\*\\s*(.*?)\\)\\s*\\(.*?\\)/m,'\\1')\n      ocl_icd_loader_gen_source += clean_entry.gsub(/\\*\\[.*?\\]/,\"*  \").gsub(/\\[.+?\\]/,\"\")\n      first_parameter = parameters.match(/.*?\\,/m)\n      if not first_parameter then\n        first_parameter =  parameters.match(/.*/m)[0]\n      else\n        first_parameter = first_parameter[0][0..-2]\n      end\n      fps = first_parameter.split\n      ocl_icd_loader_gen_source += \"  debug_trace();\\n\"\n      raise \"Unsupported data_type #{fps[0]}\" if not $cl_data_type_error[fps[0]]\n      ps = parameters.split(\",\")\n      ps = ps.collect { |p|\n        p = p.split\n        p = p[-1].gsub(\"*\",\"\")\n      }\n      error_handler = lambda {\n         if(ps.include?(\"errcode_ret\")) then\n          ocl_icd_loader_gen_source += \"    if( errcode_ret != NULL ) {\\n\";\n          ocl_icd_loader_gen_source += \"      *errcode_ret = #{$cl_data_type_error[fps[0]]};\\n\"\n          ocl_icd_loader_gen_source += \"    }\\n\"\n          if return_type != \"void\" then\n            ocl_icd_loader_gen_source += \"    RETURN(NULL);\\n\"\n          else\n            ocl_icd_loader_gen_source += \"    return;\\n\"\n          end\n        elsif ($non_standard_error.include?(func_name)) then\n          if return_type != \"void\" then\n            ocl_icd_loader_gen_source += \"    RETURN(NULL);\\n\"\n          else\n            ocl_icd_loader_gen_source += \"    return;\\n\"\n          end\n        else\n          if return_type != \"void\" then\n            ocl_icd_loader_gen_source += \"    RETURN(#{$cl_data_type_error[fps[0]]});\\n\" if return_type != \"void\"\n          else\n            ocl_icd_loader_gen_source += \"    return;\\n\"\n          end\n        end\n      }\n       \n      if(fps[0] == \"cl_platform_id\") then\n        ocl_icd_loader_gen_source += \"  #{fps[1]}=selectPlatformID(#{fps[1]});\\n\"\n      end\n      ocl_icd_loader_gen_source += \"  if( (struct _#{fps[0]} *)#{fps[1]} == NULL) {\\n\"\n      error_handler.call\n      ocl_icd_loader_gen_source += \"  }\\n\"\n      if return_type != \"void\" then\n        return_debug=\"RETURN\"\n      else\n        return_debug=\"return\"\n      end\n      ocl_icd_loader_gen_source += \"  #{return_debug}(((struct _#{fps[0]} *)#{fps[1]})->dispatch->#{func_name}(\"\n      ocl_icd_loader_gen_source += ps.join(\", \")\n      ocl_icd_loader_gen_source += \"));\\n\"\n      ocl_icd_loader_gen_source += \"}\\n\\n\"\n    }\n    ocl_icd_loader_gen_source += \"#pragma GCC visibility push(hidden)\\n\\n\"\n    skip_funcs = $specific_loader_funcs\n    $api_entries.each { |func_name, entry|\n      #next if func_name.match(/EXT$/)\n      #next if func_name.match(/KHR$/)\n      if (skip_funcs.include?(func_name)) then\n        ocl_icd_loader_gen_source += \"extern typeof(#{func_name}) #{func_name}_hid;\\n\"\n      else\n        ocl_icd_loader_gen_source += \"typeof(#{func_name}) #{func_name}_hid __attribute__ ((alias (\\\"#{func_name}\\\"), visibility(\\\"hidden\\\")));\\n\"\n      end\n    }\n    ocl_icd_loader_gen_source += \"\\n\\nstruct func_desc const function_description[]= {\\n\"\n    $api_entries.each { |func_name, entry|\n      #next if func_name.match(/EXT$/)\n      #next if func_name.match(/KHR$/)\n      ocl_icd_loader_gen_source += \"  {\\\"#{func_name}\\\", (void(* const)(void))&#{func_name}_hid },\\n\"\n    }\n    ocl_icd_loader_gen_source += <<EOF\n  {NULL, NULL}\n};\n\n#ifdef DEBUG_OCL_ICD\nvoid dump_platform(clGEFA_t f, cl_platform_id pid) {\n  debug(D_ALWAYS, \"platform @%p:  name=field_in_struct [clGetExtensionFunctionAddress(name)/clGetExtensionFunctionAddressForPlatform(name)]\", pid);\nEOF\n    $api_entries_array.each { |entry|\n      e = entry.gsub(\"\\r\",\" \").gsub(\"\\n\",\" \").gsub(\"\\t\",\" \").\n        sub(/.*CL_API_CALL *([^ ()]*)[ ()].*$/m, '\\1')\n      ocl_icd_loader_gen_source += \"  dump_field(pid, f, #{e});\\n\"\n    }\n\n    ocl_icd_loader_gen_source += <<EOF\n}\n#endif\n\n#pragma GCC visibility pop\n\nEOF\n    return ocl_icd_loader_gen_source;\n  end\n  \n  def self.generate_from_database(yamlfile)\n    load_database(yamlfile)\n    File.open('ocl_icd.h','w') { |f|\n      f.puts generate_ocl_icd_header\n    }\n    File.open('ocl_icd_loader_gen.h','w') { |f|\n      f.puts generate_ocl_icd_loader_header\n    }\n    File.open('ocl_icd_loader_gen.map','w') { |f|\n      f.puts generate_ocl_icd_loader_map\n    }\n    File.open('ocl_icd_bindings.c','w') { |f|\n      f.puts generate_ocl_icd_bindings_source\n    }\n    File.open('ocl_icd_loader_gen.c','w') { |f|\n      f.puts generate_ocl_icd_loader_gen_source\n    }\n  end\n\n  ##########################################################\n  ##########################################################\n  # update-database mode\n  def self.savedb(yamlfile)\n    File::open(yamlfile,\"w\") { |f|\n      f.write($license.gsub(/^/,\"# \"))\n      f.write( <<EOF\n\n# In Intel (OpenCL 1.1):\n# * clSetCommandQueueProperty(13): nil (deprecated in 1.1)\n# * clGetGLContextInfoKHR(74): function present with its symbol\n# * 75-80: nil\n# * 92: correspond to symbol clGetKernelArgInfo (first abandonned version?)\n# * 93-: garbage\n# In nvidia (OpenCL 1.1):\n# * clGetGLContextInfoKHR(74): function present but no symbol\n# * 75-80: nil\n# * 89-: nil\n# * only two OpenCL symbols: clGetPlatformInfo(1) and clGetExtensionFunctionAddress(65)\n# In AMD (OpenCL 1.2):\n# * clGetPlatformIDs(0): nil (symbol present)\n# * clGetGLContextInfoKHR(74): function present but no symbol\n# * 75-80: nil\n# * 92: nil\n# * 109-118: nil\n# * 119-: garbage\n\nEOF\n)\n      # Not using YAML::dump as:\n      # * keys are not ordered\n      # * strings are badly formatted in new YAML ruby implementation (psych)\n      # * it is very easy to do it ourself\n      #f.write(YAML::dump(api_db))\n      f.write(\"--- \")\n      $known_entries.keys.sort.each { |k|\n        f.write(\"\\n#{k}: |-\\n  \")\n        f.write($api_entries[$known_entries[k]].gsub(\"\\n\",\"\\n  \"))\n      }\n      f.write(\"\\n\")\n    }\n  end\n\n  def self.updatedb_from_input(dbfile, inputfile)\n    parse_headers\n    load_database(dbfile, with_windows=true)\n    doc = YAML::load_file(inputfile)\n    doc.delete(-1)\n    doc.each_key {|i|\n      next if $known_entries[i]\n      $known_entries[i]=doc[i]\n    }\n    self.savedb(dbfile)\n  end\n\nend\n\n############################################################\n############################################################\n############################################################\n\n### Main program\n\nrequire 'optparse'\n\noptions = {}\nOptionParser.new do |opts|\n  opts.banner = \"Usage: cd_generator.rb [options] mode\"\n\n  opts.on(\"-d\", \"--database FILE\", String, \"YAML file (default ocl_interface.yaml)\") do |v|\n    options[:database] = v\n  end\n  opts.on(\"-i\", \"--input FILE\", String,\n          \"binding between OpenCL functions and entry number (required for update-database)\") \\\n  do |v|\n    options[:input] = v\n  end\n  opts.on(\"-s\", \"--[no-]system-headers\", \n          \"Look for OpenCL functions in system header files\") \\\n  do |v|\n    options[:\"system-headers\"] = v\n  end\n  opts.on(\"-m\", \"--mode [MODE]\", [:database, :generate, :\"update-database\"],\n          \"Select mode (database, generate, update-database)\") do |m|\n    options[:mode] = m\n  end\nend.parse!\n\nif !options[:database] then\n  options[:database] = \"ocl_interface.yaml\"\nend\n\nif !options[:mode] then\n  raise \"--mode option required\"\nend\nif options[:mode] == :generate then\n  if !options[:\"system-headers\"] then\n    IcdGenerator.generate_sources(from_headers=false, from_database=true, database=options[:database])\n  else\n    IcdGenerator.generate_sources(from_headers=true, from_database=false)\n  end\nelsif options[:mode] == :\"update-database\" then\n  if !options[:input] then\n    raise \"--input option required\"\n  end\n  IcdGenerator.updatedb_from_input(options[:database], options[:input])\nelsif options[:mode] == :database then\n  IcdGenerator.generate_from_database(options[:database])\nelse\n  raise \"Mode must be one of generate, database or update-database not #{options[:mode]}\" \nend\n\n"
    },
    "skipped": [],
    "total_files": 37
}