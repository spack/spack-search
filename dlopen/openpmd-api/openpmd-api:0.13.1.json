{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openpmd-api-0.13.1-awb2qvsc2jjc4s3ba3fohu6rqsy7hohp/spack-src/CHANGELOG.rst": ".. _install-changelog:\n\nChangelog\n=========\n\n0.13.1\n------\n**Date:** 2020-01-08\n\nFix openPMD-ls & Iteration open/close\n\nThis release fixes regressions in the series \"ls\" functionality and tools, related to ``Iteration::open()`` and ``::close()`` functionality.\nWe also add support to read back complex numbers with JSON.\n\nChanges to \"0.13.0\"\n^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix ``Iteration::close()`` and ``helper::listSeries``` / ``list_series`` / ``openPMD-ls`` #878 #880 #882 #883 #884\n- ``setup.py``: stay with ``Python_EXECUTABLE`` #875\n- ``FindPython.cmake``: Avoid overspecifying ``Development.Module`` with CMake 3.18+ #868\n- ``ChunkInfo``:\n\n  - fix includes #879\n  - tests: adapt ``sourceID`` to handle nondeterministic subfile order #871\n- ADIOS1: fix ``Iteration::open()`` #864\n- JSON: support complex datatype reads #885\n- Docs: fix formatting of first read/write #892\n\nOther\n\"\"\"\"\"\n\n- bounds check: more readable error message #890\n- ADIOS2: add a missing space in an error message #881\n- Docs: released pypi wheels include windows #869\n- CI:\n\n  - LGTM: fix C++ #873\n  - Brew returns non-zero if already installed #877\n\n\n0.13.0\n------\n**Date:** 2021-01-03\n\nStreaming Support, Python, Benchmarks\n\nThis release adds first support for streaming I/O via ADIOS2's SST engine.\nMore I/O benchmarks have been added with realistic application load patterns.\nMany Python properties for openPMD attributes have been modernized, with slight breaking changes in Iteration and Mesh data order.\nThis release requires C++14 and adds support for Python 3.9.\nWith this release, we leave the \"alpha\" phase of the software and declare \"beta\" status.\n\nChanges to \"0.12.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2: streaming support (via ADIOS SST) #570\n- add ``::availableChunks`` call to record component types #802 #835 #847\n- HDF5: control alignment via ``OPENPMD_HDF5_ALIGNMENT`` #830\n- JSON configuration on the dataset level #818\n- Python\n\n  - attributes as properties in ``Series``, ``Mesh``, ``Iteration``, ... #859\n  - add missing python interface (read/write) for ``machine`` #796\n  - add ``Record_Component.make_empty()`` #538\n- added tests ``8a`` & ``8b`` to do 1D/2D mesh writing and reading #803 #816 #834\n- PyPI: support for Windows wheels on ``x86-64`` #853\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix ``Series`` attributes: read defaults #812\n- allow reading a file-based series with many iterations without crashing the number of file handles #822 #837\n- Python: Fix & replace ``Data_Order`` semantics #850\n- ADIOS1:\n\n  - add missing ``CLOSE_FILE`` IO task to parallel backend #785\n- ADIOS2:\n\n  - fix engine destruction order, anticipating release 2.7.0 #838\n- HDF5:\n\n  - support alternate form of empty records (FBPIC) #849\n- Intel ICC (``icpc``):\n\n  - fix export #788\n  - fix segfault in ``Iteration`` #789\n- fix & support ClangCL on Windows #832\n- CMake:\n\n  - Warnings: ICC & root project only #791\n  - Warnings: FindADIOS(1).cmake 2.8.12+ #841\n  - Warnings: less verbose on Windows #851\n\nOther\n\"\"\"\"\"\n\n- switched to \"beta\" status: dropping the version ``-suffix``\n- switch to C++14 #825 #826 #836\n- CMake:\n\n  - require version 3.15.0+ #857\n  - re-order dependency checks #810\n- Python: support 3.6 - 3.9 #828\n- NLohmann-JSON dependency updated to 3.9.1+ #839\n- pybind11 dependency updated 2.6.1+ #857\n- ADIOS2:\n\n  - less verbose about missing boolean helper attributes #801\n  - turn off statistics (Min/Max) #831\n- HDF5: better status checks & error messages #795\n- Docs:\n\n  - release cibuildwheel example #775\n  - ``Iteration::close()`` is MPI-collective #779\n  - overview compression ADIOS2 #781\n  - add comment on ``lib64/`` #793\n  - typo in description for ADIOS1 #797\n  - conda: recommend fresh environment #799\n  - Sphinx/rst: fix warnings #809\n  - first read: slice example #819\n- CI:\n\n  - Travis -> GH Action #823 #827\n  - remove Cygwin #820\n  - sanitize only project (temporarily disabled) #800\n  - update LGTM environment #844\n  - clang-tidy updates #843\n  - set oldest supported macOS #854\n- Tests:\n\n  - add HiPACE parallel I/O pattern #842 #848\n  - cover FBPIC empty HDF5 #849\n- Internal: add ``Optional`` based on ``variantSrc::variant`` #806\n\n\n0.12.0-alpha\n------------\n**Date:** 2020-09-07\n\nComplex Numbers, Close & Backend Options\n\nThis release adds data type support for complex numbers, allows to close iterations and adds first support for backend configuration options (via JSON), which are currently implemented for ADIOS2.\nFurther installation options have been added (homebrew and CLI tool support with pip).\nNew free standing functions and macro defines are provided for version checks.\n\nChanges to \"0.11.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ``Record(Component)``: ``scalar()``, ``constant()``, ``empty()`` #711\n- Advanced backend configuration via JSON #569 #733\n- Support for complex floating point types #639\n- Functionality to close an iteration (and associated files) #746\n- Python:\n\n  - ``__init__.py`` facade #720\n  - add ``Mesh_Record_Component.position`` read-write property #713\n  - add ``openpmd-ls`` tool in ``pip`` installs and as module #721 #724\n  - more idiomatic unit properties #735\n  - add ``file_extensions`` property #768\n- CD:\n\n  - homebrew: add Formula (OSX/Linux) #724 #725\n  - PyPI: autodeploy wheels (OSX/Linux) #716 #719\n- version compare macro #747\n- ``getFileExtensions`` function #768\n- Spack environment file ``spack.yaml`` added to repo #737\n- ``openpmd-ls``: add ``-v, --version`` option #771\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ``flush()`` exceptions in ``~Series``/``~..IOHandler`` do not abort anymore #709\n- ``Iteration``/``Attributable`` assignment operator left object in invalid state #769\n- ``Datatype.hpp``: add missing include #764\n- readme: python example syntax was broken and outdated #722\n- examples:\n\n  - fix ``\"weighting\"`` record attribute (ED-PIC) #728\n  - fix & validate all created test/example files #738 #739\n- warnings:\n\n  - ``listSeries``: unused params in try-catch #707\n  - fix Doxygen 1.18.8 and 1.18.20 warnings #766\n  - extended write example: remove MSVC warning #752\n\nOther\n\"\"\"\"\"\n\n- CMake: require version 3.12.0+ #755\n- ADIOS2: require version 2.6.0+ #754\n- separate header for export macros #704\n- rename ``AccessType``/``Access_Type`` to ``Access`` #740 #743 #744\n- CI & tests:\n\n  - migration to travis-ci.com / GitHub app #703\n  - migrate to GitHub checkout action v2 #712\n  - fix OSX numpy install #714\n  - move ``.travis/`` to ``.github/ci/`` #715\n  - move example file download scripts to ``share/openPMD/`` #715\n  - add GCC 9.3 builds #723\n  - add Cygwin builds #727\n  - add Clang 10.0 builds #759\n  - migrate Spack to use AppleClang #758\n  - style check scripts: ``eval``-uable #757\n  - new Spack external package syntax #760\n  - python tests: ``testAttributes`` JSON backend coverage #767\n- ``listSeries``: remove unused parameters in try-catch #706\n- safer internal ``*dynamic_cast`` of pointers #745\n- CMake: subproject inclusion cleanup #751\n- Python: remove redundant move in container #753\n- read example: show particle load #706\n- Record component: fix formatting #763\n- add ``.editorconfig`` file #762\n- MPI benchmark: doxygen params #653\n\n\n0.11.1-alpha\n------------\n**Date:** 2020-03-24\n\nHDF5-1.12, Azimuthal Examples & Tagfile\n\nThis release adds support for the latest HDF5 release.\nAlso, we add versioned Doxygen and a tagfile for external docs to our online manual.\n\nChanges to \"0.11.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- HDF5: Support 1.12 release #696\n- Doxygen: per-version index in Sphinx pages #697\n\nOther\n\"\"\"\"\"\n\n- Examples:\n\n  - document azimuthal decomposition read/write #678\n  - better example namespace alias (io) #698\n- Docs: update API detail pages #699\n\n\n0.11.0-alpha\n------------\n**Date:** 2020-03-05\n\nRobust Independent I/O\n\nThis release improves MPI-parallel I/O with HDF5 and ADIOS.\nADIOS2 is now the default backend for handing ``.bp`` files.\n\nChanges to \"0.10.3-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2:\n\n  - new default for ``.bp`` files (over ADIOS1) #676\n  - expose engine #656\n- HDF5: ``OPENPMD_HDF5_INDEPENDENT=ON`` is now default in parallel I/O #677\n- defaults for ``date`` and software base attributes #657\n- ``Series::setSoftware()`` add second argument for version #657\n- free standing functions to query the API version and feature variants at runtime #665\n- expose ``determineFormat`` and ``suffix`` functions #684\n- CLI: add ``openpmd-ls`` tool #574\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ``std::ostream& operator<<`` overloads are not declared in namespace ``std`` anymore #662\n- ADIOS1:\n\n  - ensure creation of files that only contain attributes #674\n  - deprecated in favor of ADIOS2 backend #676\n  - allow non-collective ``storeChunk()`` calls with multiple iterations #679\n- Pip: work-around setuptools/CMake bootstrap issues on some systems #689\n\nOther\n\"\"\"\"\"\n\n- deprecated ``Series::setSoftwareVersion``: set the version with the second argument of ``setSoftware()`` #657\n- ADIOS2: require version 2.5.0+ #656\n- nvcc:\n\n  - warning missing ``erase`` overload of ``Container`` child classes #648\n  - warning on unreachable code #659\n  - MPark.Variant: update C++14 hotfix #618 to upstream version #650\n- docs:\n\n  - typo in Python example for first read #649\n  - remove all Doxygen warnings and add to CI #654\n  - backend feature matrix #661\n  - document CMake's ``FetchContent`` feature for developers #667\n  - more notes on HDF5 & ADIOS1 #685\n- migrate static checks for python code to GitHub actions #660\n- add MPICH tests to CI #670\n- ``Attribute`` constructor: move argument into place #663\n- Spack: ADIOS2 backend now enabled by default #664 #676\n- add independent HDF5 write test to CI #669\n- add test of multiple active ``Series`` #686\n\n\n0.10.3-alpha\n------------\n**Date:** 2019-12-22\n\nImproved HDF5 Handling\n\nMore robust HDF5 file handling and fixes of local includes for more isolated builds.\n\nChanges to \"0.10.2-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Source files: fix includes #640\n- HDF5: gracefully handle already open files #643\n\nOther\n\"\"\"\"\"\n\n- Better handling of legacy libSplash HDF5 files #641\n- new contributors #644\n\n\n0.10.2-alpha\n------------\n**Date:** 2019-12-17\n\nImproved Error Messages\n\nThrown errors are now prefixed by the backend in use and ADIOS1 series reads are more robust.\n\nChanges to \"0.10.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Implement assignment operators for: ``IOTask``, ``Mesh``, ``Iteration``, ``BaseRecord``, ``Record`` #628\n- Missing ``virtual`` destructors added #632\n\nOther\n\"\"\"\"\"\n\n- Backends: Prefix Error Messages #634\n- ADIOS1: Skip Invalid Scalar Particle Records #635\n\n\n0.10.1-alpha\n------------\n**Date:** 2019-12-06\n\nADIOS2 Open Speed and NVCC Fixes\n\nThis releases improves the initial time spend when parsing data series with the ADIOS2 backend.\nCompile problems when using the CUDA NVCC compiler in downstream projects have been fixed.\nWe adopted a Code of Conduct in openPMD.\n\nChanges to \"0.10.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++: add ``Container::contains`` method #622\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ADIOS2:\n\n  - fix C++17 build #614\n  - improve initial open speed of series #613\n- nvcc:\n\n  - ignore export of ``enum class Operation`` #617\n  - fix C++14 build #618\n\nOther\n\"\"\"\"\"\n\n- community:\n\n  - code of conduct added #619\n  - all contributors listed in README #621\n- ``manylinux2010`` build automation updated for Python 3.8 #615\n\n\n0.10.0-alpha\n------------\n**Date:** 2019-11-14\n\nADIOS2 Preview, Python & MPI Improved\n\nThis release adds a first (preview) implementation of ADIOS2 (BP4).\nPython 3.8 support as well as improved pip builds on macOS and Windows have been added.\nADIOS1 and HDF5 now support non-collective (independent) store and load operations with MPI.\nMore HPC compilers, such as IBM XL, ICC and PGI have been tested.\nThe manual has been improved with more details on APIs, examples, installation and backends.\n\nChanges to \"0.9.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2: support added (v2.4.0+) #482 #513 #530 #568 #572 #573 #588 #605\n- HDF5: add ``OPENPMD_HDF5_INDEPENDENT`` for non-collective parallel I/O #576\n- Python:\n\n  - Python 3.8 support #581\n  - support empty datasets via ``Record_Component.make_empty`` #538\n- pkg-config: add ``static`` variable (``true``/``false``) to ``openPMD.pc`` package #580\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Clang: fix pybind11 compile on older releases, such as AppleClang 7.3-9.0, Clang 3.9 #543\n- Python:\n\n  - OSX: fix ``dlopen`` issues due to missing ``@loader_path`` with ``pip``/``setup.py`` #595\n  - Windows: fix a missing ``DLL`` issue by building static with ``pip``/``setup.py`` #602\n  - import ``mpi4py`` first (MPICH on OSX issue) #596\n  - skip examples using HDF5 if backend is missing #544\n  - fix a variable shadowing in ``Mesh`` #582\n  - add missing ``.unit_dimension`` for records #611\n- ADIOS1: fix deadlock in MPI-parallel, non-collective calls to ``storeChunk()`` #554\n- xlC 16.1: work-around C-array initializer parsing issue #547\n- icc 19.0.0 and PGI 19.5: fix compiler ID identification #548\n- CMake: fix false-positives in ``FindADIOS.cmake`` module #609\n- Series: throws an error message if no file ending is specified #610\n\nOther\n\"\"\"\"\"\n\n- Python: improve ``pip`` install instructions #594 #600\n- PGI 19.5: fix warning ``static constexpr: storage class first`` #546\n- JSON:\n\n  - the backend is now always enabled #564 #587\n  - NLohmann-JSON dependency updated to 3.7.0+ #556\n- gitignore: generalize CLion, more build dirs #549 #552\n- fix clang-tidy warnings: ``strcmp`` and modernize ``auto``, ``const`` correctness #551 #560\n- ``ParallelIOTest``: less code duplication #553\n- Sphinx manual:\n\n  - PDF Chapters #557\n  - draft for the API architecture design #186\n  - draft for MPI data and collective contract in API usage #583\n  - fix tables & missing examples #579\n  - \"first write\" explains ``unitDimension`` #592\n  - link to datasets used in examples #598\n  - fix minor formatting and include problems #608\n- README:\n\n  - add authors and acknowledgements #566\n  - correct a typo #584\n  - use ``$(which python3)`` for CMake Python option #599\n  - update ADIOS homepage & CMake #604\n- Travis CI:\n\n  - speedup dependency build #558\n  - ``-Werror`` only in build phase #565\n\n\n0.9.0-alpha\n-----------\n**Date:** 2019-07-25\n\nImproved Builds and Packages\n\nThis release improves PyPI releases with proper declaration of build dependencies (use pip 19.0+).\nFor ``Makefile``-based projects, an ``openPMD.pc`` file to be used with ``pkg-config`` is added on install.\n``RecordComponent`` now supports a ``makeEmpty`` method to write a zero-extent, yet multi-dimensional record component.\nWe are now building as shared library by default.\n\nChanges to \"0.8.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++: support empty datasets via ``RecordComponent::makeEmpty`` #528 #529\n- CMake:\n\n  - build a shared library by default #506\n  - generate ``pkg-config`` ``.pc`` file #532 #535 #537\n- Python:\n\n  - ``manylinux2010`` wheels for PyPI #523\n  - add ``pyproject.toml`` for build dependencies (PEP-518) #527\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- MPark.Variant: work-around missing version bump #504\n- linker error concerning ``Mesh::setTimeOffset`` method template #511\n- remove dummy dataset writing from ``RecordComponent::flush()`` #528\n- remove dummy dataset writing from ``PatchRecordComponent::flush`` #512\n- allow flushing before defining ``position`` and ``positionOffset`` components of particle species #518 #519\n- CMake:\n\n  - make install paths cacheable on Windows #521\n  - HDF5 linkage is private #533\n- warnings:\n\n  - unused variable in JSON backend #507\n  - MSVC: Warning DLL Interface STDlib #508\n\nOther\n\"\"\"\"\"\n\n- increase pybind11 dependency to 2.3.0+ #525\n- GitHub:\n\n  - auto-add labels #515\n  - issue template for install issues #526\n  - update badges #522\n- docs:\n\n  - link parallel python examples in manual #499\n  - improved Doxygen parsing for all backends #500\n  - fix typos #517\n\n\n0.8.0-alpha\n-----------\n**Date:** 2019-03-09\n\nPython mpi4py and Slice Support\n\nWe implemented MPI support for the Python frontend via ``mpi4py`` and added ``[]``-slice access to ``Record_Component`` loads and stores.\nA bug requiring write permissions for read-only series was fixed and memory provided by users is now properly checked for being contiguous.\nIntroductory chapters in the manual have been greatly extended.\n\nChanges to \"0.7.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - mpi4py support added #454\n  - slice protocol for record component #458\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- do not require write permissions to open ``Series`` read-only #395\n- loadChunk: re-enable range/extent checks for adjusted ranges #469\n- Python: stricter contiguous check for user-provided arrays #458\n- CMake tests as root: apply OpenMPI flag only if present #456\n\nOther\n\"\"\"\"\"\n\n- increase pybind11 dependency to 2.2.4+ #455\n- Python: remove (inofficial) bindings for 2.7 #435\n- CMake 3.12+: apply policy ``CMP0074`` for ``<Package>_ROOT`` vars #391 #464\n- CMake: Optional ADIOS1 Wrapper Libs #472\n- MPark.Variant: updated to 1.4.0+ #465\n- Catch2: updated to 2.6.1+ #466\n- NLohmann-JSON: updated to 3.5.0+ #467\n- Docs:\n\n  - PyPI install method #450 #451 #497\n  - more info on MPI #449\n  - new \"first steps\" section #473 #478\n  - update invasive test info #474\n  - more info on ``Access`` #483\n  - improved MPI-parallel write example #496\n\n\n0.7.1-alpha\n-----------\n**Date:** 2018-01-23\n\nBug Fixes in Multi-Platform Builds\n\nThis release fixes several issues on OSX, during cross-compile and with modern compilers.\n\nChanges to \"0.7.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix compilation with C++17 for python bindings #438\n- ``FindADIOS.cmake``: Cross-Compile Support #436\n- ADIOS1: fix runtime crash with libc++ (e.g. OSX) #442\n\nOther\n\"\"\"\"\"\n\n- CI: clang libc++ coverage #441 #444\n- Docs:\n\n  - additional release workflows for maintainers #439\n  - ADIOS1 backend options in manual #440\n  - updated Spack variants #445\n\n\n0.7.0-alpha\n-----------\n**Date:** 2019-01-11\n\nJSON Support, Interface Simplification and Stability\n\nThis release introduces serial JSON (``.json``) support.\nOur API has been unified with slight breaking changes such as a new Python module name (``import openpmd_api`` from now on) as well as re-ordered ``store/loadChunk`` argument orders.\nPlease see our new \"upgrade guide\" section in the manual how to update existing scripts.\nAdditionally, many little bugs have been fixed.\nOfficial Python 3.7 support and a parallel benchmark example have been added.\n\nChanges to \"0.6.3-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++:\n\n  - ``storeChunk`` argument order changed, defaults added #386 #416\n  - ``loadChunk`` argument order changed, defaults added #408\n- Python:\n\n  - ``import openPMD`` renamed to ``import openpmd_api`` #380 #392\n  - ``store_chunk`` argument order changed, defaults added #386\n  - ``load_chunk`` defaults added #408\n  - works with Python 3.7 #376\n  - setup.py for sdist #240\n- Backends: JSON support added #384 #393 #338 #429\n- Parallel benchmark added #346 #398 #402 #411\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- spurious MPI C++11 API usage in ParallelIOTest removed #396\n- spurious symbol issues on OSX #427\n- ``new []``/``delete`` mismatch in ParallelIOTest #422\n- use-after-free in SerialIOTest #409\n- fix ODR issue in ADIOS1 backend corrupting the ``AbstractIOHandler`` vtable #415\n- fix race condition in MPI-parallel directory creation #419\n- ADIOS1: fix use-after-free in parallel I/O method options #421\n\nOther\n\"\"\"\"\"\n\n- modernize ``IOTask``'s ``AbstractParameter`` for slice safety #410\n- Docs: upgrade guide added #385\n- Docs: python particle writing example #430\n- CI: GCC 8.1.0 & Python 3.7.0 #376\n- CI: (re-)activate Clang-Tidy #423\n- IOTask: init all parameters' members #420\n- KDevelop project files to ``.gitignore`` #424\n- C++:\n\n  - ``Mesh``'s ``setAxisLabels|GridSpacing|GridGlobalOffset`` passed as ``const &`` #425\n- CMake:\n\n  - treat third party libraries properly as ``IMPORTED`` #389 #403\n  - Catch2: separate implementation and tests #399 #400\n  - enable check for more warnings #401\n\n\n0.6.3-alpha\n-----------\n**Date:** 2018-11-12\n\nReading Varying Iteration Padding Reading\n\nSupport reading series with varying iteration padding (or no padding at all) as currently used in PIConGPU.\n\nChanges to \"0.6.2-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- support reading series with varying or no iteration padding in filename #388\n\n\n0.6.2-alpha\n-----------\n**Date:** 2018-09-25\n\nPython Stride: Regression\n\nA regression in the last fix for python strides made the relaxation not efficient for 2-D and higher.\n\nChanges to \"0.6.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Python: relax strides further\n\n\n0.6.1-alpha\n-----------\n**Date:** 2018-09-24\n\nRelaxed Python Stride Checks\n\nPython stride checks have been relaxed and one-element n-d arrays are allowed for scalars.\n\nChanges to \"0.6.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - stride check too strict #369\n  - allow one-element n-d arrays for scalars in ``store``, ``make_constant`` #314\n\nOther\n\"\"\"\"\"\n\n- dependency change: Catch2 2.3.0+\n- Python: add extended write example #314\n\n\n0.6.0-alpha\n-----------\n**Date:** 2018-09-20\n\nParticle Patches Improved, Constant Scalars and Python Containers Fixed\n\nScalar records properly support const-ness.\nThe Particle Patch load interface was changed, loading now all patches at once, and Python bindings are available.\nNumpy ``dtype`` is now a first-class citizen for Python ``Datatype`` control, being accepted and returned instead of enums.\nPython lifetime in garbage collection for containers such as ``meshes``, ``particles`` and ``iterations`` is now properly implemented.\n\nChanges to \"0.5.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - accept & return ``numpy.dtype`` for ``Datatype`` #351\n  - better check for (unsupported) numpy array strides #353\n  - implement ``Record_Component.make_constant`` #354\n  - implement ``Particle_Patches`` #362\n- comply with runtime constraints w.r.t. ``written`` status #352\n- load at once ``ParticlePatches.load()`` #364\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- dataOrder: mesh attribute is a string #355\n- constant scalar Mesh Records: reading corrected #358\n- particle patches: stricter ``load( idx )`` range check #363, then removed in #364\n- Python: lifetime of ``Iteration.meshes/particles`` and ``Series.iterations`` members #354\n\nOther\n\"\"\"\"\"\n\n- test cases for mixed constant/non-constant Records #358\n- examples: close handles explicitly #359 #360\n\n0.5.0-alpha\n-----------\n**Date:** 2018-09-17\n\nRefactored Type System\n\nThe type system for ``Datatype::``s was refactored.\nInteger types are now represented by ``SHORT``, ``INT``, ``LONG`` and ``LONGLONG`` as fundamental C/C++ types.\nPython support enters \"alpha\" stage with fixed floating point storage and ``Attribute`` handling.\n\nChanges to \"0.4.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Removed ``Datatype::INT32`` types with ``::SHORT``, ``::INT`` equivalents #337\n- ``Attribute::get<...>()`` performs a ``static_cast`` now #345\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Refactor type system and ``Attribute`` set/get\n\n  - integers #337\n  - support ``long double`` reads on MSVC #184\n- ``setAttribute``: explicit C-string handling #341\n- ``Dataset``: ``setCompression`` warning and error logic #326\n- avoid impact on unrelated classes in invasive tests #324\n- Python\n\n  - single precision support: ``numpy.float`` is an alias for ``builtins.float`` #318 #320\n  - ``Dataset`` method namings to underscores #319\n  - container namespace ambiguity #343\n  - ``set_attribute``: broken numpy, list and string support #330\n\nOther\n\"\"\"\"\"\n\n- CMake: invasive tests not enabled by default #323\n- ``store_chunk``: more detailed type mismatch error #322\n- ``no_such_file_error`` & ``no_such_attribute_error``: remove c-string constructor #325 #327\n- add virtual destructor to ``Attributable`` #332\n- Python: Numpy 1.15+ required #330\n\n\n0.4.0-alpha\n-----------\n**Date:** 2018-08-27\n\nImproved output handling\n\nRefactored and hardened for ``fileBased`` output.\nRecords are not flushed before the ambiguity between scalar and vector records are resolved.\nTrying to write globally zero-extent records will throw gracefully instead of leading to undefined behavior in backends.\n\nChanges to \"0.3.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- do not assume record structure prematurely #297\n- throw in (global) zero-extent dataset creation and write #309\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ADIOS1 ``fileBased`` IO #297\n- ADIOS2 stub header #302\n- name sanitization in ADIOS1 and HDF5 backends #310\n\nOther\n\"\"\"\"\"\n\n- CI updates: #291\n\n  - measure C++ unit test coverage with coveralls\n  - clang-format support\n  - clang-tidy support\n  - include-what-you-use support #291 export headers #300\n  - OSX High Sierra support #301\n  - individual cache per build # 303\n  - readable build names #308\n- remove superfluous whitespaces #292\n- readme: openPMD is for scientific data #294\n- ``override`` implies ``virtual`` #293\n- spack load: ``-r`` #298\n- default constructors and destructors #304\n- string pass-by-value #305\n- test cases with 0-sized reads & writes #135\n\n\n0.3.1-alpha\n-----------\n**Date:** 2018-07-07\n\nRefined fileBased Series & Python Data Load\n\nA specification for iteration padding in filenames for ``fileBased`` series is introduced.\nPadding present in read iterations is detected and conserved in processing.\nPython builds have been simplified and python data loads now work for both meshes and particles.\n\nChanges to \"0.3.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- CMake:\n\n  - add ``openPMD::openPMD`` alias for full-source inclusion #277\n  - include internally shipped pybind11 v2.2.3 #281\n  - ADIOS1: enable serial API usage even if MPI is present #252 #254\n- introduce detection and specification ``%0\\d+T`` of iteration padding #270\n- Python:\n\n  - add unit tests #249\n  - expose record components for particles #284\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- improved handling of ``fileBased`` Series and ``READ_WRITE`` access\n- expose ``Container`` constructor as ``protected`` rather than ``public`` #282\n- Python:\n\n  - return actual data in ``load_chunk`` #286\n\nOther\n\"\"\"\"\"\n\n- docs:\n\n  - improve \"Install from source\" section #274 #285\n  - Spack python 3 install command #278\n\n\n0.3.0-alpha\n-----------\n**Date:** 2018-06-18\n\nPython Attributes, Better FS Handling and Runtime Checks\n\nThis release exposes openPMD attributes to Python.\nA new independent mechanism for verifying internal conditions is now in place.\nFilesystem support is now more robust on varying directory separators.\n\nChanges to \"0.2.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- CMake: add new ``openPMD_USE_VERIFY`` option #229\n- introduce ``VERIFY`` macro for pre-/post-conditions that replaces ``ASSERT`` #229 #260\n- serial Singularity container #236\n- Python:\n\n  - expose attributes #256 #266\n  - use lists for offsets & extents #266\n- C++:\n\n  - ``setAttribute`` signature changed to const ref #268\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- handle directory separators platform-dependent #229\n- recursive directory creation with existing base #261\n- ``FindADIOS.cmake``: reset on multiple calls #263\n- ``SerialIOTest``: remove variable shadowing #262\n- ADIOS1: memory violation in string attribute writes #269\n\nOther\n\"\"\"\"\"\n\n- enforce platform-specific directory separators on user input #229\n- docs:\n\n  - link updates to https #259\n  - minimum MPI version #251\n  - title updated #235\n- remove MPI from serial ADIOS interface #258\n- better name for scalar record in examples #257\n- check validity of internally used pointers #247\n- various CI updates #246 #250 #261\n\n\n0.2.0-alpha\n-----------\n**Date:** 2018-06-11\n\nInitial Numpy Bindings\n\nAdds first bindings for record component reading and writing.\nFixes some minor CMake issues.\n\nChanges to \"0.1.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python: first NumPy bindings for record component chunk store/load #219\n- CMake: add new ``BUILD_EXAMPLES`` option #238\n- CMake: build directories controllable #241\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- forgot to bump ``version.hpp``/``__version__`` in last release\n- CMake: Overwritable Install Paths #237\n\n\n0.1.1-alpha\n-----------\n**Date:** 2018-06-07\n\nADIOS1 Build Fixes & Less Flushes\n\nWe fixed build issues with the ADIOS1 backend.\nThe number of performed flushes in backends was generally minimized.\n\nChanges to \"0.1.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- SerialIOTest: ``loadChunk`` template missing for ADIOS1 #227\n- prepare running serial applications linked against parallel ADIOS1 library #228\n\nOther\n\"\"\"\"\"\n\n- minimize number of flushes in backend #212\n\n\n0.1.0-alpha\n-----------\n**Date:** 2018-06-06\n\nThis is the first developer release of openPMD-api.\n\nBoth HDF5 and ADIOS1 are implemented as backends with serial and parallel I/O support.\nThe C++11 API is considered alpha state with few changes expected to come.\nWe also ship an unstable preview of the Python3 API.\n",
        "/tmp/vanessa/spack-stage/spack-stage-openpmd-api-0.13.1-awb2qvsc2jjc4s3ba3fohu6rqsy7hohp/spack-src/share/openPMD/thirdParty/pybind11/include/pybind11/detail/internals.h": "/*\n    pybind11/detail/internals.h: Internal data structure and related functions\n\n    Copyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>\n\n    All rights reserved. Use of this source code is governed by a\n    BSD-style license that can be found in the LICENSE file.\n*/\n\n#pragma once\n\n#include \"../pytypes.h\"\n\nPYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)\nPYBIND11_NAMESPACE_BEGIN(detail)\n// Forward declarations\ninline PyTypeObject *make_static_property_type();\ninline PyTypeObject *make_default_metaclass();\ninline PyObject *make_object_base_type(PyTypeObject *metaclass);\n\n// The old Python Thread Local Storage (TLS) API is deprecated in Python 3.7 in favor of the new\n// Thread Specific Storage (TSS) API.\n#if PY_VERSION_HEX >= 0x03070000\n#    define PYBIND11_TLS_KEY_INIT(var) Py_tss_t *var = nullptr\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_tss_get((key))\n#    define PYBIND11_TLS_REPLACE_VALUE(key, value) PyThread_tss_set((key), (value))\n#    define PYBIND11_TLS_DELETE_VALUE(key) PyThread_tss_set((key), nullptr)\n#    define PYBIND11_TLS_FREE(key) PyThread_tss_free(key)\n#else\n    // Usually an int but a long on Cygwin64 with Python 3.x\n#    define PYBIND11_TLS_KEY_INIT(var) decltype(PyThread_create_key()) var = 0\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_get_key_value((key))\n#    if PY_MAJOR_VERSION < 3\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_delete_key_value(key)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             do {                                                            \\\n                 PyThread_delete_key_value((key));                           \\\n                 PyThread_set_key_value((key), (value));                     \\\n             } while (false)\n#    else\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_set_key_value((key), nullptr)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             PyThread_set_key_value((key), (value))\n#    endif\n#    define PYBIND11_TLS_FREE(key) (void)key\n#endif\n\n// Python loads modules by default with dlopen with the RTLD_LOCAL flag; under libc++ and possibly\n// other STLs, this means `typeid(A)` from one module won't equal `typeid(A)` from another module\n// even when `A` is the same, non-hidden-visibility type (e.g. from a common include).  Under\n// libstdc++, this doesn't happen: equality and the type_index hash are based on the type name,\n// which works.  If not under a known-good stl, provide our own name-based hash and equality\n// functions that use the type name.\n#if defined(__GLIBCXX__)\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs; }\nusing type_hash = std::hash<std::type_index>;\nusing type_equal_to = std::equal_to<std::type_index>;\n#else\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) {\n    return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n}\n\nstruct type_hash {\n    size_t operator()(const std::type_index &t) const {\n        size_t hash = 5381;\n        const char *ptr = t.name();\n        while (auto c = static_cast<unsigned char>(*ptr++))\n            hash = (hash * 33) ^ c;\n        return hash;\n    }\n};\n\nstruct type_equal_to {\n    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {\n        return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n    }\n};\n#endif\n\ntemplate <typename value_type>\nusing type_map = std::unordered_map<std::type_index, value_type, type_hash, type_equal_to>;\n\nstruct override_hash {\n    inline size_t operator()(const std::pair<const PyObject *, const char *>& v) const {\n        size_t value = std::hash<const void *>()(v.first);\n        value ^= std::hash<const void *>()(v.second) + 0x9e3779b9 + (value<<6) + (value>>2);\n        return value;\n    }\n};\n\n/// Internal data structure used to track registered instances and types.\n/// Whenever binary incompatible changes are made to this structure,\n/// `PYBIND11_INTERNALS_VERSION` must be incremented.\nstruct internals {\n    type_map<type_info *> registered_types_cpp; // std::type_index -> pybind11's type information\n    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py; // PyTypeObject* -> base type_info(s)\n    std::unordered_multimap<const void *, instance*> registered_instances; // void * -> instance*\n    std::unordered_set<std::pair<const PyObject *, const char *>, override_hash> inactive_override_cache;\n    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;\n    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;\n    std::forward_list<void (*) (std::exception_ptr)> registered_exception_translators;\n    std::unordered_map<std::string, void *> shared_data; // Custom data to be shared across extensions\n    std::vector<PyObject *> loader_patient_stack; // Used by `loader_life_support`\n    std::forward_list<std::string> static_strings; // Stores the std::strings backing detail::c_str()\n    PyTypeObject *static_property_type;\n    PyTypeObject *default_metaclass;\n    PyObject *instance_base;\n#if defined(WITH_THREAD)\n    PYBIND11_TLS_KEY_INIT(tstate);\n    PyInterpreterState *istate = nullptr;\n    ~internals() {\n        // This destructor is called *after* Py_Finalize() in finalize_interpreter().\n        // That *SHOULD BE* fine. The following details what happens whe PyThread_tss_free is called.\n        // PYBIND11_TLS_FREE is PyThread_tss_free on python 3.7+. On older python, it does nothing.\n        // PyThread_tss_free calls PyThread_tss_delete and PyMem_RawFree.\n        // PyThread_tss_delete just calls TlsFree (on Windows) or pthread_key_delete (on *NIX). Neither\n        // of those have anything to do with CPython internals.\n        // PyMem_RawFree *requires* that the `tstate` be allocated with the CPython allocator.\n        PYBIND11_TLS_FREE(tstate);\n    }\n#endif\n};\n\n/// Additional type information which does not fit into the PyTypeObject.\n/// Changes to this struct also require bumping `PYBIND11_INTERNALS_VERSION`.\nstruct type_info {\n    PyTypeObject *type;\n    const std::type_info *cpptype;\n    size_t type_size, type_align, holder_size_in_ptrs;\n    void *(*operator_new)(size_t);\n    void (*init_instance)(instance *, const void *);\n    void (*dealloc)(value_and_holder &v_h);\n    std::vector<PyObject *(*)(PyObject *, PyTypeObject *)> implicit_conversions;\n    std::vector<std::pair<const std::type_info *, void *(*)(void *)>> implicit_casts;\n    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;\n    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;\n    void *get_buffer_data = nullptr;\n    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;\n    /* A simple type never occurs as a (direct or indirect) parent\n     * of a class that makes use of multiple inheritance */\n    bool simple_type : 1;\n    /* True if there is no multiple inheritance in this type's inheritance tree */\n    bool simple_ancestors : 1;\n    /* for base vs derived holder_type checks */\n    bool default_holder : 1;\n    /* true if this is a type registered with py::module_local */\n    bool module_local : 1;\n};\n\n/// Tracks the `internals` and `type_info` ABI version independent of the main library version\n#define PYBIND11_INTERNALS_VERSION 4\n\n/// On MSVC, debug and release builds are not ABI-compatible!\n#if defined(_MSC_VER) && defined(_DEBUG)\n#  define PYBIND11_BUILD_TYPE \"_debug\"\n#else\n#  define PYBIND11_BUILD_TYPE \"\"\n#endif\n\n/// Let's assume that different compilers are ABI-incompatible.\n/// A user can manually set this string if they know their\n/// compiler is compatible.\n#ifndef PYBIND11_COMPILER_TYPE\n#  if defined(_MSC_VER)\n#    define PYBIND11_COMPILER_TYPE \"_msvc\"\n#  elif defined(__INTEL_COMPILER)\n#    define PYBIND11_COMPILER_TYPE \"_icc\"\n#  elif defined(__clang__)\n#    define PYBIND11_COMPILER_TYPE \"_clang\"\n#  elif defined(__PGI)\n#    define PYBIND11_COMPILER_TYPE \"_pgi\"\n#  elif defined(__MINGW32__)\n#    define PYBIND11_COMPILER_TYPE \"_mingw\"\n#  elif defined(__CYGWIN__)\n#    define PYBIND11_COMPILER_TYPE \"_gcc_cygwin\"\n#  elif defined(__GNUC__)\n#    define PYBIND11_COMPILER_TYPE \"_gcc\"\n#  else\n#    define PYBIND11_COMPILER_TYPE \"_unknown\"\n#  endif\n#endif\n\n/// Also standard libs\n#ifndef PYBIND11_STDLIB\n#  if defined(_LIBCPP_VERSION)\n#    define PYBIND11_STDLIB \"_libcpp\"\n#  elif defined(__GLIBCXX__) || defined(__GLIBCPP__)\n#    define PYBIND11_STDLIB \"_libstdcpp\"\n#  else\n#    define PYBIND11_STDLIB \"\"\n#  endif\n#endif\n\n/// On Linux/OSX, changes in __GXX_ABI_VERSION__ indicate ABI incompatibility.\n#ifndef PYBIND11_BUILD_ABI\n#  if defined(__GXX_ABI_VERSION)\n#    define PYBIND11_BUILD_ABI \"_cxxabi\" PYBIND11_TOSTRING(__GXX_ABI_VERSION)\n#  else\n#    define PYBIND11_BUILD_ABI \"\"\n#  endif\n#endif\n\n#ifndef PYBIND11_INTERNALS_KIND\n#  if defined(WITH_THREAD)\n#    define PYBIND11_INTERNALS_KIND \"\"\n#  else\n#    define PYBIND11_INTERNALS_KIND \"_without_thread\"\n#  endif\n#endif\n\n#define PYBIND11_INTERNALS_ID \"__pybind11_internals_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n#define PYBIND11_MODULE_LOCAL_ID \"__pybind11_module_local_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n/// Each module locally stores a pointer to the `internals` data. The data\n/// itself is shared among modules with the same `PYBIND11_INTERNALS_ID`.\ninline internals **&get_internals_pp() {\n    static internals **internals_pp = nullptr;\n    return internals_pp;\n}\n\ninline void translate_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)           { e.restore();                                    return;\n    } catch (const builtin_exception &e)     { e.set_error();                                  return;\n    } catch (const std::bad_alloc &e)        { PyErr_SetString(PyExc_MemoryError,   e.what()); return;\n    } catch (const std::domain_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::invalid_argument &e) { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::length_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::out_of_range &e)     { PyErr_SetString(PyExc_IndexError,    e.what()); return;\n    } catch (const std::range_error &e)      { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::overflow_error &e)   { PyErr_SetString(PyExc_OverflowError, e.what()); return;\n    } catch (const std::exception &e)        { PyErr_SetString(PyExc_RuntimeError,  e.what()); return;\n    } catch (...) {\n        PyErr_SetString(PyExc_RuntimeError, \"Caught an unknown exception!\");\n        return;\n    }\n}\n\n#if !defined(__GLIBCXX__)\ninline void translate_local_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)       { e.restore();   return;\n    } catch (const builtin_exception &e) { e.set_error(); return;\n    }\n}\n#endif\n\n/// Return a reference to the current `internals` data\nPYBIND11_NOINLINE inline internals &get_internals() {\n    auto **&internals_pp = get_internals_pp();\n    if (internals_pp && *internals_pp)\n        return **internals_pp;\n\n    // Ensure that the GIL is held since we will need to make Python calls.\n    // Cannot use py::gil_scoped_acquire here since that constructor calls get_internals.\n    struct gil_scoped_acquire_local {\n        gil_scoped_acquire_local() : state (PyGILState_Ensure()) {}\n        ~gil_scoped_acquire_local() { PyGILState_Release(state); }\n        const PyGILState_STATE state;\n    } gil;\n\n    constexpr auto *id = PYBIND11_INTERNALS_ID;\n    auto builtins = handle(PyEval_GetBuiltins());\n    if (builtins.contains(id) && isinstance<capsule>(builtins[id])) {\n        internals_pp = static_cast<internals **>(capsule(builtins[id]));\n\n        // We loaded builtins through python's builtins, which means that our `error_already_set`\n        // and `builtin_exception` may be different local classes than the ones set up in the\n        // initial exception translator, below, so add another for our local exception classes.\n        //\n        // libstdc++ doesn't require this (types there are identified only by name)\n#if !defined(__GLIBCXX__)\n        (*internals_pp)->registered_exception_translators.push_front(&translate_local_exception);\n#endif\n    } else {\n        if (!internals_pp) internals_pp = new internals*();\n        auto *&internals_ptr = *internals_pp;\n        internals_ptr = new internals();\n#if defined(WITH_THREAD)\n\n        #if PY_VERSION_HEX < 0x03090000\n                PyEval_InitThreads();\n        #endif\n        PyThreadState *tstate = PyThreadState_Get();\n        #if PY_VERSION_HEX >= 0x03070000\n            internals_ptr->tstate = PyThread_tss_alloc();\n            if (!internals_ptr->tstate || PyThread_tss_create(internals_ptr->tstate))\n                pybind11_fail(\"get_internals: could not successfully initialize the TSS key!\");\n            PyThread_tss_set(internals_ptr->tstate, tstate);\n        #else\n            internals_ptr->tstate = PyThread_create_key();\n            if (internals_ptr->tstate == -1)\n                pybind11_fail(\"get_internals: could not successfully initialize the TLS key!\");\n            PyThread_set_key_value(internals_ptr->tstate, tstate);\n        #endif\n        internals_ptr->istate = tstate->interp;\n#endif\n        builtins[id] = capsule(internals_pp);\n        internals_ptr->registered_exception_translators.push_front(&translate_exception);\n        internals_ptr->static_property_type = make_static_property_type();\n        internals_ptr->default_metaclass = make_default_metaclass();\n        internals_ptr->instance_base = make_object_base_type(internals_ptr->default_metaclass);\n    }\n    return **internals_pp;\n}\n\n/// Works like `internals.registered_types_cpp`, but for module-local registered types:\ninline type_map<type_info *> &registered_local_types_cpp() {\n    static type_map<type_info *> locals{};\n    return locals;\n}\n\n/// Constructs a std::string with the given arguments, stores it in `internals`, and returns its\n/// `c_str()`.  Such strings objects have a long storage duration -- the internal strings are only\n/// cleared when the program exits or after interpreter shutdown (when embedding), and so are\n/// suitable for c-style strings needed by Python internals (such as PyTypeObject's tp_name).\ntemplate <typename... Args>\nconst char *c_str(Args &&...args) {\n    auto &strings = get_internals().static_strings;\n    strings.emplace_front(std::forward<Args>(args)...);\n    return strings.front().c_str();\n}\n\nPYBIND11_NAMESPACE_END(detail)\n\n/// Returns a named pointer that is shared among all extension modules (using the same\n/// pybind11 version) running in the current interpreter. Names starting with underscores\n/// are reserved for internal usage. Returns `nullptr` if no matching entry was found.\ninline PYBIND11_NOINLINE void *get_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    return it != internals.shared_data.end() ? it->second : nullptr;\n}\n\n/// Set the shared data that can be later recovered by `get_shared_data()`.\ninline PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {\n    detail::get_internals().shared_data[name] = data;\n    return data;\n}\n\n/// Returns a typed reference to a shared data entry (by using `get_shared_data()`) if\n/// such entry exists. Otherwise, a new object of default-constructible type `T` is\n/// added to the shared data under the given name and a reference to it is returned.\ntemplate<typename T>\nT &get_or_create_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    T *ptr = (T *) (it != internals.shared_data.end() ? it->second : nullptr);\n    if (!ptr) {\n        ptr = new T();\n        internals.shared_data[name] = ptr;\n    }\n    return *ptr;\n}\n\nPYBIND11_NAMESPACE_END(PYBIND11_NAMESPACE)\n",
        "/tmp/vanessa/spack-stage/spack-stage-openpmd-api-0.13.1-awb2qvsc2jjc4s3ba3fohu6rqsy7hohp/spack-src/docs/source/install/changelog.rst": ".. _install-changelog:\n\nChangelog\n=========\n\n0.13.1\n------\n**Date:** 2020-01-08\n\nFix openPMD-ls & Iteration open/close\n\nThis release fixes regressions in the series \"ls\" functionality and tools, related to ``Iteration::open()`` and ``::close()`` functionality.\nWe also add support to read back complex numbers with JSON.\n\nChanges to \"0.13.0\"\n^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix ``Iteration::close()`` and ``helper::listSeries``` / ``list_series`` / ``openPMD-ls`` #878 #880 #882 #883 #884\n- ``setup.py``: stay with ``Python_EXECUTABLE`` #875\n- ``FindPython.cmake``: Avoid overspecifying ``Development.Module`` with CMake 3.18+ #868\n- ``ChunkInfo``:\n\n  - fix includes #879\n  - tests: adapt ``sourceID`` to handle nondeterministic subfile order #871\n- ADIOS1: fix ``Iteration::open()`` #864\n- JSON: support complex datatype reads #885\n- Docs: fix formatting of first read/write #892\n\nOther\n\"\"\"\"\"\n\n- bounds check: more readable error message #890\n- ADIOS2: add a missing space in an error message #881\n- Docs: released pypi wheels include windows #869\n- CI:\n\n  - LGTM: fix C++ #873\n  - Brew returns non-zero if already installed #877\n\n\n0.13.0\n------\n**Date:** 2021-01-03\n\nStreaming Support, Python, Benchmarks\n\nThis release adds first support for streaming I/O via ADIOS2's SST engine.\nMore I/O benchmarks have been added with realistic application load patterns.\nMany Python properties for openPMD attributes have been modernized, with slight breaking changes in Iteration and Mesh data order.\nThis release requires C++14 and adds support for Python 3.9.\nWith this release, we leave the \"alpha\" phase of the software and declare \"beta\" status.\n\nChanges to \"0.12.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2: streaming support (via ADIOS SST) #570\n- add ``::availableChunks`` call to record component types #802 #835 #847\n- HDF5: control alignment via ``OPENPMD_HDF5_ALIGNMENT`` #830\n- JSON configuration on the dataset level #818\n- Python\n\n  - attributes as properties in ``Series``, ``Mesh``, ``Iteration``, ... #859\n  - add missing python interface (read/write) for ``machine`` #796\n  - add ``Record_Component.make_empty()`` #538\n- added tests ``8a`` & ``8b`` to do 1D/2D mesh writing and reading #803 #816 #834\n- PyPI: support for Windows wheels on ``x86-64`` #853\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix ``Series`` attributes: read defaults #812\n- allow reading a file-based series with many iterations without crashing the number of file handles #822 #837\n- Python: Fix & replace ``Data_Order`` semantics #850\n- ADIOS1:\n\n  - add missing ``CLOSE_FILE`` IO task to parallel backend #785\n- ADIOS2:\n\n  - fix engine destruction order, anticipating release 2.7.0 #838\n- HDF5:\n\n  - support alternate form of empty records (FBPIC) #849\n- Intel ICC (``icpc``):\n\n  - fix export #788\n  - fix segfault in ``Iteration`` #789\n- fix & support ClangCL on Windows #832\n- CMake:\n\n  - Warnings: ICC & root project only #791\n  - Warnings: FindADIOS(1).cmake 2.8.12+ #841\n  - Warnings: less verbose on Windows #851\n\nOther\n\"\"\"\"\"\n\n- switched to \"beta\" status: dropping the version ``-suffix``\n- switch to C++14 #825 #826 #836\n- CMake:\n\n  - require version 3.15.0+ #857\n  - re-order dependency checks #810\n- Python: support 3.6 - 3.9 #828\n- NLohmann-JSON dependency updated to 3.9.1+ #839\n- pybind11 dependency updated 2.6.1+ #857\n- ADIOS2:\n\n  - less verbose about missing boolean helper attributes #801\n  - turn off statistics (Min/Max) #831\n- HDF5: better status checks & error messages #795\n- Docs:\n\n  - release cibuildwheel example #775\n  - ``Iteration::close()`` is MPI-collective #779\n  - overview compression ADIOS2 #781\n  - add comment on ``lib64/`` #793\n  - typo in description for ADIOS1 #797\n  - conda: recommend fresh environment #799\n  - Sphinx/rst: fix warnings #809\n  - first read: slice example #819\n- CI:\n\n  - Travis -> GH Action #823 #827\n  - remove Cygwin #820\n  - sanitize only project (temporarily disabled) #800\n  - update LGTM environment #844\n  - clang-tidy updates #843\n  - set oldest supported macOS #854\n- Tests:\n\n  - add HiPACE parallel I/O pattern #842 #848\n  - cover FBPIC empty HDF5 #849\n- Internal: add ``Optional`` based on ``variantSrc::variant`` #806\n\n\n0.12.0-alpha\n------------\n**Date:** 2020-09-07\n\nComplex Numbers, Close & Backend Options\n\nThis release adds data type support for complex numbers, allows to close iterations and adds first support for backend configuration options (via JSON), which are currently implemented for ADIOS2.\nFurther installation options have been added (homebrew and CLI tool support with pip).\nNew free standing functions and macro defines are provided for version checks.\n\nChanges to \"0.11.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ``Record(Component)``: ``scalar()``, ``constant()``, ``empty()`` #711\n- Advanced backend configuration via JSON #569 #733\n- Support for complex floating point types #639\n- Functionality to close an iteration (and associated files) #746\n- Python:\n\n  - ``__init__.py`` facade #720\n  - add ``Mesh_Record_Component.position`` read-write property #713\n  - add ``openpmd-ls`` tool in ``pip`` installs and as module #721 #724\n  - more idiomatic unit properties #735\n  - add ``file_extensions`` property #768\n- CD:\n\n  - homebrew: add Formula (OSX/Linux) #724 #725\n  - PyPI: autodeploy wheels (OSX/Linux) #716 #719\n- version compare macro #747\n- ``getFileExtensions`` function #768\n- Spack environment file ``spack.yaml`` added to repo #737\n- ``openpmd-ls``: add ``-v, --version`` option #771\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ``flush()`` exceptions in ``~Series``/``~..IOHandler`` do not abort anymore #709\n- ``Iteration``/``Attributable`` assignment operator left object in invalid state #769\n- ``Datatype.hpp``: add missing include #764\n- readme: python example syntax was broken and outdated #722\n- examples:\n\n  - fix ``\"weighting\"`` record attribute (ED-PIC) #728\n  - fix & validate all created test/example files #738 #739\n- warnings:\n\n  - ``listSeries``: unused params in try-catch #707\n  - fix Doxygen 1.18.8 and 1.18.20 warnings #766\n  - extended write example: remove MSVC warning #752\n\nOther\n\"\"\"\"\"\n\n- CMake: require version 3.12.0+ #755\n- ADIOS2: require version 2.6.0+ #754\n- separate header for export macros #704\n- rename ``AccessType``/``Access_Type`` to ``Access`` #740 #743 #744\n- CI & tests:\n\n  - migration to travis-ci.com / GitHub app #703\n  - migrate to GitHub checkout action v2 #712\n  - fix OSX numpy install #714\n  - move ``.travis/`` to ``.github/ci/`` #715\n  - move example file download scripts to ``share/openPMD/`` #715\n  - add GCC 9.3 builds #723\n  - add Cygwin builds #727\n  - add Clang 10.0 builds #759\n  - migrate Spack to use AppleClang #758\n  - style check scripts: ``eval``-uable #757\n  - new Spack external package syntax #760\n  - python tests: ``testAttributes`` JSON backend coverage #767\n- ``listSeries``: remove unused parameters in try-catch #706\n- safer internal ``*dynamic_cast`` of pointers #745\n- CMake: subproject inclusion cleanup #751\n- Python: remove redundant move in container #753\n- read example: show particle load #706\n- Record component: fix formatting #763\n- add ``.editorconfig`` file #762\n- MPI benchmark: doxygen params #653\n\n\n0.11.1-alpha\n------------\n**Date:** 2020-03-24\n\nHDF5-1.12, Azimuthal Examples & Tagfile\n\nThis release adds support for the latest HDF5 release.\nAlso, we add versioned Doxygen and a tagfile for external docs to our online manual.\n\nChanges to \"0.11.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- HDF5: Support 1.12 release #696\n- Doxygen: per-version index in Sphinx pages #697\n\nOther\n\"\"\"\"\"\n\n- Examples:\n\n  - document azimuthal decomposition read/write #678\n  - better example namespace alias (io) #698\n- Docs: update API detail pages #699\n\n\n0.11.0-alpha\n------------\n**Date:** 2020-03-05\n\nRobust Independent I/O\n\nThis release improves MPI-parallel I/O with HDF5 and ADIOS.\nADIOS2 is now the default backend for handing ``.bp`` files.\n\nChanges to \"0.10.3-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2:\n\n  - new default for ``.bp`` files (over ADIOS1) #676\n  - expose engine #656\n- HDF5: ``OPENPMD_HDF5_INDEPENDENT=ON`` is now default in parallel I/O #677\n- defaults for ``date`` and software base attributes #657\n- ``Series::setSoftware()`` add second argument for version #657\n- free standing functions to query the API version and feature variants at runtime #665\n- expose ``determineFormat`` and ``suffix`` functions #684\n- CLI: add ``openpmd-ls`` tool #574\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ``std::ostream& operator<<`` overloads are not declared in namespace ``std`` anymore #662\n- ADIOS1:\n\n  - ensure creation of files that only contain attributes #674\n  - deprecated in favor of ADIOS2 backend #676\n  - allow non-collective ``storeChunk()`` calls with multiple iterations #679\n- Pip: work-around setuptools/CMake bootstrap issues on some systems #689\n\nOther\n\"\"\"\"\"\n\n- deprecated ``Series::setSoftwareVersion``: set the version with the second argument of ``setSoftware()`` #657\n- ADIOS2: require version 2.5.0+ #656\n- nvcc:\n\n  - warning missing ``erase`` overload of ``Container`` child classes #648\n  - warning on unreachable code #659\n  - MPark.Variant: update C++14 hotfix #618 to upstream version #650\n- docs:\n\n  - typo in Python example for first read #649\n  - remove all Doxygen warnings and add to CI #654\n  - backend feature matrix #661\n  - document CMake's ``FetchContent`` feature for developers #667\n  - more notes on HDF5 & ADIOS1 #685\n- migrate static checks for python code to GitHub actions #660\n- add MPICH tests to CI #670\n- ``Attribute`` constructor: move argument into place #663\n- Spack: ADIOS2 backend now enabled by default #664 #676\n- add independent HDF5 write test to CI #669\n- add test of multiple active ``Series`` #686\n\n\n0.10.3-alpha\n------------\n**Date:** 2019-12-22\n\nImproved HDF5 Handling\n\nMore robust HDF5 file handling and fixes of local includes for more isolated builds.\n\nChanges to \"0.10.2-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Source files: fix includes #640\n- HDF5: gracefully handle already open files #643\n\nOther\n\"\"\"\"\"\n\n- Better handling of legacy libSplash HDF5 files #641\n- new contributors #644\n\n\n0.10.2-alpha\n------------\n**Date:** 2019-12-17\n\nImproved Error Messages\n\nThrown errors are now prefixed by the backend in use and ADIOS1 series reads are more robust.\n\nChanges to \"0.10.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Implement assignment operators for: ``IOTask``, ``Mesh``, ``Iteration``, ``BaseRecord``, ``Record`` #628\n- Missing ``virtual`` destructors added #632\n\nOther\n\"\"\"\"\"\n\n- Backends: Prefix Error Messages #634\n- ADIOS1: Skip Invalid Scalar Particle Records #635\n\n\n0.10.1-alpha\n------------\n**Date:** 2019-12-06\n\nADIOS2 Open Speed and NVCC Fixes\n\nThis releases improves the initial time spend when parsing data series with the ADIOS2 backend.\nCompile problems when using the CUDA NVCC compiler in downstream projects have been fixed.\nWe adopted a Code of Conduct in openPMD.\n\nChanges to \"0.10.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++: add ``Container::contains`` method #622\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ADIOS2:\n\n  - fix C++17 build #614\n  - improve initial open speed of series #613\n- nvcc:\n\n  - ignore export of ``enum class Operation`` #617\n  - fix C++14 build #618\n\nOther\n\"\"\"\"\"\n\n- community:\n\n  - code of conduct added #619\n  - all contributors listed in README #621\n- ``manylinux2010`` build automation updated for Python 3.8 #615\n\n\n0.10.0-alpha\n------------\n**Date:** 2019-11-14\n\nADIOS2 Preview, Python & MPI Improved\n\nThis release adds a first (preview) implementation of ADIOS2 (BP4).\nPython 3.8 support as well as improved pip builds on macOS and Windows have been added.\nADIOS1 and HDF5 now support non-collective (independent) store and load operations with MPI.\nMore HPC compilers, such as IBM XL, ICC and PGI have been tested.\nThe manual has been improved with more details on APIs, examples, installation and backends.\n\nChanges to \"0.9.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- ADIOS2: support added (v2.4.0+) #482 #513 #530 #568 #572 #573 #588 #605\n- HDF5: add ``OPENPMD_HDF5_INDEPENDENT`` for non-collective parallel I/O #576\n- Python:\n\n  - Python 3.8 support #581\n  - support empty datasets via ``Record_Component.make_empty`` #538\n- pkg-config: add ``static`` variable (``true``/``false``) to ``openPMD.pc`` package #580\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Clang: fix pybind11 compile on older releases, such as AppleClang 7.3-9.0, Clang 3.9 #543\n- Python:\n\n  - OSX: fix ``dlopen`` issues due to missing ``@loader_path`` with ``pip``/``setup.py`` #595\n  - Windows: fix a missing ``DLL`` issue by building static with ``pip``/``setup.py`` #602\n  - import ``mpi4py`` first (MPICH on OSX issue) #596\n  - skip examples using HDF5 if backend is missing #544\n  - fix a variable shadowing in ``Mesh`` #582\n  - add missing ``.unit_dimension`` for records #611\n- ADIOS1: fix deadlock in MPI-parallel, non-collective calls to ``storeChunk()`` #554\n- xlC 16.1: work-around C-array initializer parsing issue #547\n- icc 19.0.0 and PGI 19.5: fix compiler ID identification #548\n- CMake: fix false-positives in ``FindADIOS.cmake`` module #609\n- Series: throws an error message if no file ending is specified #610\n\nOther\n\"\"\"\"\"\n\n- Python: improve ``pip`` install instructions #594 #600\n- PGI 19.5: fix warning ``static constexpr: storage class first`` #546\n- JSON:\n\n  - the backend is now always enabled #564 #587\n  - NLohmann-JSON dependency updated to 3.7.0+ #556\n- gitignore: generalize CLion, more build dirs #549 #552\n- fix clang-tidy warnings: ``strcmp`` and modernize ``auto``, ``const`` correctness #551 #560\n- ``ParallelIOTest``: less code duplication #553\n- Sphinx manual:\n\n  - PDF Chapters #557\n  - draft for the API architecture design #186\n  - draft for MPI data and collective contract in API usage #583\n  - fix tables & missing examples #579\n  - \"first write\" explains ``unitDimension`` #592\n  - link to datasets used in examples #598\n  - fix minor formatting and include problems #608\n- README:\n\n  - add authors and acknowledgements #566\n  - correct a typo #584\n  - use ``$(which python3)`` for CMake Python option #599\n  - update ADIOS homepage & CMake #604\n- Travis CI:\n\n  - speedup dependency build #558\n  - ``-Werror`` only in build phase #565\n\n\n0.9.0-alpha\n-----------\n**Date:** 2019-07-25\n\nImproved Builds and Packages\n\nThis release improves PyPI releases with proper declaration of build dependencies (use pip 19.0+).\nFor ``Makefile``-based projects, an ``openPMD.pc`` file to be used with ``pkg-config`` is added on install.\n``RecordComponent`` now supports a ``makeEmpty`` method to write a zero-extent, yet multi-dimensional record component.\nWe are now building as shared library by default.\n\nChanges to \"0.8.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++: support empty datasets via ``RecordComponent::makeEmpty`` #528 #529\n- CMake:\n\n  - build a shared library by default #506\n  - generate ``pkg-config`` ``.pc`` file #532 #535 #537\n- Python:\n\n  - ``manylinux2010`` wheels for PyPI #523\n  - add ``pyproject.toml`` for build dependencies (PEP-518) #527\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- MPark.Variant: work-around missing version bump #504\n- linker error concerning ``Mesh::setTimeOffset`` method template #511\n- remove dummy dataset writing from ``RecordComponent::flush()`` #528\n- remove dummy dataset writing from ``PatchRecordComponent::flush`` #512\n- allow flushing before defining ``position`` and ``positionOffset`` components of particle species #518 #519\n- CMake:\n\n  - make install paths cacheable on Windows #521\n  - HDF5 linkage is private #533\n- warnings:\n\n  - unused variable in JSON backend #507\n  - MSVC: Warning DLL Interface STDlib #508\n\nOther\n\"\"\"\"\"\n\n- increase pybind11 dependency to 2.3.0+ #525\n- GitHub:\n\n  - auto-add labels #515\n  - issue template for install issues #526\n  - update badges #522\n- docs:\n\n  - link parallel python examples in manual #499\n  - improved Doxygen parsing for all backends #500\n  - fix typos #517\n\n\n0.8.0-alpha\n-----------\n**Date:** 2019-03-09\n\nPython mpi4py and Slice Support\n\nWe implemented MPI support for the Python frontend via ``mpi4py`` and added ``[]``-slice access to ``Record_Component`` loads and stores.\nA bug requiring write permissions for read-only series was fixed and memory provided by users is now properly checked for being contiguous.\nIntroductory chapters in the manual have been greatly extended.\n\nChanges to \"0.7.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - mpi4py support added #454\n  - slice protocol for record component #458\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- do not require write permissions to open ``Series`` read-only #395\n- loadChunk: re-enable range/extent checks for adjusted ranges #469\n- Python: stricter contiguous check for user-provided arrays #458\n- CMake tests as root: apply OpenMPI flag only if present #456\n\nOther\n\"\"\"\"\"\n\n- increase pybind11 dependency to 2.2.4+ #455\n- Python: remove (inofficial) bindings for 2.7 #435\n- CMake 3.12+: apply policy ``CMP0074`` for ``<Package>_ROOT`` vars #391 #464\n- CMake: Optional ADIOS1 Wrapper Libs #472\n- MPark.Variant: updated to 1.4.0+ #465\n- Catch2: updated to 2.6.1+ #466\n- NLohmann-JSON: updated to 3.5.0+ #467\n- Docs:\n\n  - PyPI install method #450 #451 #497\n  - more info on MPI #449\n  - new \"first steps\" section #473 #478\n  - update invasive test info #474\n  - more info on ``Access`` #483\n  - improved MPI-parallel write example #496\n\n\n0.7.1-alpha\n-----------\n**Date:** 2018-01-23\n\nBug Fixes in Multi-Platform Builds\n\nThis release fixes several issues on OSX, during cross-compile and with modern compilers.\n\nChanges to \"0.7.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- fix compilation with C++17 for python bindings #438\n- ``FindADIOS.cmake``: Cross-Compile Support #436\n- ADIOS1: fix runtime crash with libc++ (e.g. OSX) #442\n\nOther\n\"\"\"\"\"\n\n- CI: clang libc++ coverage #441 #444\n- Docs:\n\n  - additional release workflows for maintainers #439\n  - ADIOS1 backend options in manual #440\n  - updated Spack variants #445\n\n\n0.7.0-alpha\n-----------\n**Date:** 2019-01-11\n\nJSON Support, Interface Simplification and Stability\n\nThis release introduces serial JSON (``.json``) support.\nOur API has been unified with slight breaking changes such as a new Python module name (``import openpmd_api`` from now on) as well as re-ordered ``store/loadChunk`` argument orders.\nPlease see our new \"upgrade guide\" section in the manual how to update existing scripts.\nAdditionally, many little bugs have been fixed.\nOfficial Python 3.7 support and a parallel benchmark example have been added.\n\nChanges to \"0.6.3-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- C++:\n\n  - ``storeChunk`` argument order changed, defaults added #386 #416\n  - ``loadChunk`` argument order changed, defaults added #408\n- Python:\n\n  - ``import openPMD`` renamed to ``import openpmd_api`` #380 #392\n  - ``store_chunk`` argument order changed, defaults added #386\n  - ``load_chunk`` defaults added #408\n  - works with Python 3.7 #376\n  - setup.py for sdist #240\n- Backends: JSON support added #384 #393 #338 #429\n- Parallel benchmark added #346 #398 #402 #411\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- spurious MPI C++11 API usage in ParallelIOTest removed #396\n- spurious symbol issues on OSX #427\n- ``new []``/``delete`` mismatch in ParallelIOTest #422\n- use-after-free in SerialIOTest #409\n- fix ODR issue in ADIOS1 backend corrupting the ``AbstractIOHandler`` vtable #415\n- fix race condition in MPI-parallel directory creation #419\n- ADIOS1: fix use-after-free in parallel I/O method options #421\n\nOther\n\"\"\"\"\"\n\n- modernize ``IOTask``'s ``AbstractParameter`` for slice safety #410\n- Docs: upgrade guide added #385\n- Docs: python particle writing example #430\n- CI: GCC 8.1.0 & Python 3.7.0 #376\n- CI: (re-)activate Clang-Tidy #423\n- IOTask: init all parameters' members #420\n- KDevelop project files to ``.gitignore`` #424\n- C++:\n\n  - ``Mesh``'s ``setAxisLabels|GridSpacing|GridGlobalOffset`` passed as ``const &`` #425\n- CMake:\n\n  - treat third party libraries properly as ``IMPORTED`` #389 #403\n  - Catch2: separate implementation and tests #399 #400\n  - enable check for more warnings #401\n\n\n0.6.3-alpha\n-----------\n**Date:** 2018-11-12\n\nReading Varying Iteration Padding Reading\n\nSupport reading series with varying iteration padding (or no padding at all) as currently used in PIConGPU.\n\nChanges to \"0.6.2-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- support reading series with varying or no iteration padding in filename #388\n\n\n0.6.2-alpha\n-----------\n**Date:** 2018-09-25\n\nPython Stride: Regression\n\nA regression in the last fix for python strides made the relaxation not efficient for 2-D and higher.\n\nChanges to \"0.6.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Python: relax strides further\n\n\n0.6.1-alpha\n-----------\n**Date:** 2018-09-24\n\nRelaxed Python Stride Checks\n\nPython stride checks have been relaxed and one-element n-d arrays are allowed for scalars.\n\nChanges to \"0.6.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - stride check too strict #369\n  - allow one-element n-d arrays for scalars in ``store``, ``make_constant`` #314\n\nOther\n\"\"\"\"\"\n\n- dependency change: Catch2 2.3.0+\n- Python: add extended write example #314\n\n\n0.6.0-alpha\n-----------\n**Date:** 2018-09-20\n\nParticle Patches Improved, Constant Scalars and Python Containers Fixed\n\nScalar records properly support const-ness.\nThe Particle Patch load interface was changed, loading now all patches at once, and Python bindings are available.\nNumpy ``dtype`` is now a first-class citizen for Python ``Datatype`` control, being accepted and returned instead of enums.\nPython lifetime in garbage collection for containers such as ``meshes``, ``particles`` and ``iterations`` is now properly implemented.\n\nChanges to \"0.5.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python:\n\n  - accept & return ``numpy.dtype`` for ``Datatype`` #351\n  - better check for (unsupported) numpy array strides #353\n  - implement ``Record_Component.make_constant`` #354\n  - implement ``Particle_Patches`` #362\n- comply with runtime constraints w.r.t. ``written`` status #352\n- load at once ``ParticlePatches.load()`` #364\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- dataOrder: mesh attribute is a string #355\n- constant scalar Mesh Records: reading corrected #358\n- particle patches: stricter ``load( idx )`` range check #363, then removed in #364\n- Python: lifetime of ``Iteration.meshes/particles`` and ``Series.iterations`` members #354\n\nOther\n\"\"\"\"\"\n\n- test cases for mixed constant/non-constant Records #358\n- examples: close handles explicitly #359 #360\n\n0.5.0-alpha\n-----------\n**Date:** 2018-09-17\n\nRefactored Type System\n\nThe type system for ``Datatype::``s was refactored.\nInteger types are now represented by ``SHORT``, ``INT``, ``LONG`` and ``LONGLONG`` as fundamental C/C++ types.\nPython support enters \"alpha\" stage with fixed floating point storage and ``Attribute`` handling.\n\nChanges to \"0.4.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Removed ``Datatype::INT32`` types with ``::SHORT``, ``::INT`` equivalents #337\n- ``Attribute::get<...>()`` performs a ``static_cast`` now #345\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- Refactor type system and ``Attribute`` set/get\n\n  - integers #337\n  - support ``long double`` reads on MSVC #184\n- ``setAttribute``: explicit C-string handling #341\n- ``Dataset``: ``setCompression`` warning and error logic #326\n- avoid impact on unrelated classes in invasive tests #324\n- Python\n\n  - single precision support: ``numpy.float`` is an alias for ``builtins.float`` #318 #320\n  - ``Dataset`` method namings to underscores #319\n  - container namespace ambiguity #343\n  - ``set_attribute``: broken numpy, list and string support #330\n\nOther\n\"\"\"\"\"\n\n- CMake: invasive tests not enabled by default #323\n- ``store_chunk``: more detailed type mismatch error #322\n- ``no_such_file_error`` & ``no_such_attribute_error``: remove c-string constructor #325 #327\n- add virtual destructor to ``Attributable`` #332\n- Python: Numpy 1.15+ required #330\n\n\n0.4.0-alpha\n-----------\n**Date:** 2018-08-27\n\nImproved output handling\n\nRefactored and hardened for ``fileBased`` output.\nRecords are not flushed before the ambiguity between scalar and vector records are resolved.\nTrying to write globally zero-extent records will throw gracefully instead of leading to undefined behavior in backends.\n\nChanges to \"0.3.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- do not assume record structure prematurely #297\n- throw in (global) zero-extent dataset creation and write #309\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- ADIOS1 ``fileBased`` IO #297\n- ADIOS2 stub header #302\n- name sanitization in ADIOS1 and HDF5 backends #310\n\nOther\n\"\"\"\"\"\n\n- CI updates: #291\n\n  - measure C++ unit test coverage with coveralls\n  - clang-format support\n  - clang-tidy support\n  - include-what-you-use support #291 export headers #300\n  - OSX High Sierra support #301\n  - individual cache per build # 303\n  - readable build names #308\n- remove superfluous whitespaces #292\n- readme: openPMD is for scientific data #294\n- ``override`` implies ``virtual`` #293\n- spack load: ``-r`` #298\n- default constructors and destructors #304\n- string pass-by-value #305\n- test cases with 0-sized reads & writes #135\n\n\n0.3.1-alpha\n-----------\n**Date:** 2018-07-07\n\nRefined fileBased Series & Python Data Load\n\nA specification for iteration padding in filenames for ``fileBased`` series is introduced.\nPadding present in read iterations is detected and conserved in processing.\nPython builds have been simplified and python data loads now work for both meshes and particles.\n\nChanges to \"0.3.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- CMake:\n\n  - add ``openPMD::openPMD`` alias for full-source inclusion #277\n  - include internally shipped pybind11 v2.2.3 #281\n  - ADIOS1: enable serial API usage even if MPI is present #252 #254\n- introduce detection and specification ``%0\\d+T`` of iteration padding #270\n- Python:\n\n  - add unit tests #249\n  - expose record components for particles #284\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- improved handling of ``fileBased`` Series and ``READ_WRITE`` access\n- expose ``Container`` constructor as ``protected`` rather than ``public`` #282\n- Python:\n\n  - return actual data in ``load_chunk`` #286\n\nOther\n\"\"\"\"\"\n\n- docs:\n\n  - improve \"Install from source\" section #274 #285\n  - Spack python 3 install command #278\n\n\n0.3.0-alpha\n-----------\n**Date:** 2018-06-18\n\nPython Attributes, Better FS Handling and Runtime Checks\n\nThis release exposes openPMD attributes to Python.\nA new independent mechanism for verifying internal conditions is now in place.\nFilesystem support is now more robust on varying directory separators.\n\nChanges to \"0.2.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- CMake: add new ``openPMD_USE_VERIFY`` option #229\n- introduce ``VERIFY`` macro for pre-/post-conditions that replaces ``ASSERT`` #229 #260\n- serial Singularity container #236\n- Python:\n\n  - expose attributes #256 #266\n  - use lists for offsets & extents #266\n- C++:\n\n  - ``setAttribute`` signature changed to const ref #268\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- handle directory separators platform-dependent #229\n- recursive directory creation with existing base #261\n- ``FindADIOS.cmake``: reset on multiple calls #263\n- ``SerialIOTest``: remove variable shadowing #262\n- ADIOS1: memory violation in string attribute writes #269\n\nOther\n\"\"\"\"\"\n\n- enforce platform-specific directory separators on user input #229\n- docs:\n\n  - link updates to https #259\n  - minimum MPI version #251\n  - title updated #235\n- remove MPI from serial ADIOS interface #258\n- better name for scalar record in examples #257\n- check validity of internally used pointers #247\n- various CI updates #246 #250 #261\n\n\n0.2.0-alpha\n-----------\n**Date:** 2018-06-11\n\nInitial Numpy Bindings\n\nAdds first bindings for record component reading and writing.\nFixes some minor CMake issues.\n\nChanges to \"0.1.1-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFeatures\n\"\"\"\"\"\"\"\"\n\n- Python: first NumPy bindings for record component chunk store/load #219\n- CMake: add new ``BUILD_EXAMPLES`` option #238\n- CMake: build directories controllable #241\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- forgot to bump ``version.hpp``/``__version__`` in last release\n- CMake: Overwritable Install Paths #237\n\n\n0.1.1-alpha\n-----------\n**Date:** 2018-06-07\n\nADIOS1 Build Fixes & Less Flushes\n\nWe fixed build issues with the ADIOS1 backend.\nThe number of performed flushes in backends was generally minimized.\n\nChanges to \"0.1.0-alpha\"\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBug Fixes\n\"\"\"\"\"\"\"\"\"\n\n- SerialIOTest: ``loadChunk`` template missing for ADIOS1 #227\n- prepare running serial applications linked against parallel ADIOS1 library #228\n\nOther\n\"\"\"\"\"\n\n- minimize number of flushes in backend #212\n\n\n0.1.0-alpha\n-----------\n**Date:** 2018-06-06\n\nThis is the first developer release of openPMD-api.\n\nBoth HDF5 and ADIOS1 are implemented as backends with serial and parallel I/O support.\nThe C++11 API is considered alpha state with few changes expected to come.\nWe also ship an unstable preview of the Python3 API.\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openpmd-api-0.13.1-awb2qvsc2jjc4s3ba3fohu6rqsy7hohp/spack-src/docs/source/openPMD.png"
    ],
    "total_files": 341
}