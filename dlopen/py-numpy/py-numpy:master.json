{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/random/_examples/cffi/extending.py": "\"\"\"\nUse cffi to access any of the underlying C functions from distributions.h\n\"\"\"\nimport os\nimport numpy as np\nimport cffi\nfrom .parse import parse_distributions_h\nffi = cffi.FFI()\n\ninc_dir = os.path.join(np.get_include(), 'numpy')\n\n# Basic numpy types\nffi.cdef('''\n    typedef intptr_t npy_intp;\n    typedef unsigned char npy_bool;\n\n''')\n\nparse_distributions_h(ffi, inc_dir)\n\nlib = ffi.dlopen(np.random._generator.__file__)\n\n# Compare the distributions.h random_standard_normal_fill to\n# Generator.standard_random\nbit_gen = np.random.PCG64()\nrng = np.random.Generator(bit_gen)\nstate = bit_gen.state\n\ninterface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new('double[%d]' % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n\n# reset the state\nbit_gen.state = state\n\nvals = rng.standard_normal(n)\n\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/random/_examples/numba/extending_distributions.py": "r\"\"\"\nBuilding the required library in this example requires a source distribution\nof NumPy or clone of the NumPy git repository since distributions.c is not\nincluded in binary distributions.\n\nOn *nix, execute in numpy/random/src/distributions\n\nexport ${PYTHON_VERSION}=3.8 # Python version\nexport PYTHON_INCLUDE=#path to Python's include folder, usually \\\n    ${PYTHON_HOME}/include/python${PYTHON_VERSION}m\nexport NUMPY_INCLUDE=#path to numpy's include folder, usually \\\n    ${PYTHON_HOME}/lib/python${PYTHON_VERSION}/site-packages/numpy/core/include\ngcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows\n\nrem PYTHON_HOME and PYTHON_VERSION are setup dependent, this is an example\nset PYTHON_HOME=c:\\Anaconda\nset PYTHON_VERSION=38\ncl.exe /LD .\\distributions.c -DDLL_EXPORT \\\n    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os\n\nimport numba as nb\nimport numpy as np\nfrom cffi import FFI\n\nfrom numpy.random import PCG64\n\nffi = FFI()\nif os.path.exists('./distributions.dll'):\n    lib = ffi.dlopen('./distributions.dll')\nelif os.path.exists('./libdistributions.so'):\n    lib = ffi.dlopen('./libdistributions.so')\nelse:\n    raise RuntimeError('Required DLL/so file was not found.')\n\nffi.cdef(\"\"\"\ndouble random_standard_normal(void *bitgen_state);\n\"\"\")\nx = PCG64()\nxffi = x.cffi\nbit_generator = xffi.bit_generator\n\nrandom_standard_normal = lib.random_standard_normal\n\n\ndef normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\n\n\nnormalsj = nb.jit(normals, nopython=True)\n\n# Numba requires a memory address for void *\n# Can also get address from x.ctypes.bit_generator.value\nbit_generator_address = int(ffi.cast('uintptr_t', bit_generator))\n\nnorm = normalsj(1000, bit_generator_address)\nprint(norm[:12])\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/random/extending.rst": ".. currentmodule:: numpy.random\n\n.. _extending:\n\nExtending\n---------\nThe BitGenerators have been designed to be extendable using standard tools for\nhigh-performance Python -- numba and Cython.  The `~Generator` object can also\nbe used with user-provided BitGenerators as long as these export a small set of\nrequired functions.\n\nNumba\n=====\nNumba can be used with either CTypes or CFFI.  The current iteration of the\nBitGenerators all export a small set of functions through both interfaces.\n\nThis example shows how numba can be used to produce gaussian samples using\na pure Python implementation which is then compiled.  The random numbers are\nprovided by ``ctypes.next_double``.\n\n.. literalinclude:: ../../../../numpy/random/_examples/numba/extending.py\n    :language: python\n    :end-before: example 2\n\nBoth CTypes and CFFI allow the more complicated distributions to be used\ndirectly in Numba after compiling the file distributions.c into a ``DLL`` or\n``so``.  An example showing the use of a more complicated distribution is in\nthe `examples` section below.\n\n.. _random_cython:\n\nCython\n======\n\nCython can be used to unpack the ``PyCapsule`` provided by a BitGenerator.\nThis example uses `PCG64` and the example from above.  The usual caveats\nfor writing high-performance code using Cython -- removing bounds checks and\nwrap around, providing array alignment information -- still apply.\n\n.. literalinclude:: ../../../../numpy/random/_examples/cython/extending_distributions.pyx\n    :language: cython\n    :end-before: example 2\n\nThe BitGenerator can also be directly accessed using the members of the ``bitgen_t``\nstruct.\n\n.. literalinclude:: ../../../../numpy/random/_examples/cython/extending_distributions.pyx\n    :language: cython\n    :start-after: example 2\n    :end-before: example 3\n\nCython can be used to directly access the functions in\n``numpy/random/c_distributions.pxd``. This requires linking with the\n``npyrandom`` library located in ``numpy/random/lib``.\n\n.. literalinclude:: ../../../../numpy/random/_examples/cython/extending_distributions.pyx\n    :language: cython\n    :start-after: example 3\n\nSee :ref:`extending_cython_example` for the complete listings of these examples\nand a minimal ``setup.py`` to build the c-extension modules.\n\nCFFI\n====\n\nCFFI can be used to directly access the functions in\n``include/numpy/random/distributions.h``. Some \"massaging\" of the header\nfile is required:\n\n.. literalinclude:: ../../../../numpy/random/_examples/cffi/extending.py\n    :language: python\n    :end-before: dlopen\n\nOnce the header is parsed by ``ffi.cdef``, the functions can be accessed\ndirectly from the ``_generator`` shared object, using the `BitGenerator.cffi` interface.\n\n.. literalinclude:: ../../../../numpy/random/_examples/cffi/extending.py\n    :language: python\n    :start-after: dlopen\n\n\nNew Bit Generators\n==================\n`~Generator` can be used with user-provided `~BitGenerator`\\ s. The simplest\nway to write a new BitGenerator is to examine the pyx file of one of the\nexisting BitGenerators. The key structure that must be provided is the\n``capsule`` which contains a ``PyCapsule`` to a struct pointer of type\n``bitgen_t``,\n\n.. code-block:: c\n\n  typedef struct bitgen {\n    void *state;\n    uint64_t (*next_uint64)(void *st);\n    uint32_t (*next_uint32)(void *st);\n    double (*next_double)(void *st);\n    uint64_t (*next_raw)(void *st);\n  } bitgen_t;\n\nwhich provides 5 pointers. The first is an opaque pointer to the data structure\nused by the BitGenerators.  The next three are function pointers which return\nthe next 64- and 32-bit unsigned integers, the next random double and the next\nraw value.  This final function is used for testing and so can be set to\nthe next 64-bit unsigned integer function if not needed. Functions inside\n``Generator`` use this structure as in\n\n.. code-block:: c\n\n  bitgen_state->next_uint64(bitgen_state->state)\n\nExamples\n========\n\n.. toctree::\n    Numba <examples/numba>\n    CFFI + Numba <examples/numba_cffi> \n    Cython <examples/cython/index>\n    CFFI <examples/cffi>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/.git/objects/pack/pack-88ef3121797adfe525b4d53506e8c0b7ed5a276f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/.git/objects/pack/pack-88ef3121797adfe525b4d53506e8c0b7ed5a276f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/python3.npy",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/win64python2.npy",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/py2-objarr.npz",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/py3-objarr.npz",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/py2-objarr.npy",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/lib/tests/data/py3-objarr.npy",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/core/tests/data/recarray_from_file.fits",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/core/tests/data/astype_copy.pkl",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/numpy/f2py/tests/src/module_data/mod.mod",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/logomark/numpylogoicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/logomark/numpylogoiconlight.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/logomark/numpylogoicondark.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/secondary/numpylogo2light.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/secondary/numpylogo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/secondary/numpylogo2dark.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/primary/numpylogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/primary/numpylogolight.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/branding/logo/primary/numpylogodark.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/tools/allocation_tracking/sorttable.js",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/neps/_static/nep-0040_dtype-hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/neps/_static/nep0013_image3.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/neps/_static/nep0013_image2.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/neps/_static/nep0013_image1.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/neps/_static/nep-0000.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/dev/pull_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/dev/gitwash/forking_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/dev/gitwash/forked_page.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/dev/gitwash/forking_message.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/dtype-hierarchy.dia",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/opt-infra.odg",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/dtype-hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/opt-infra.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/dtype-hierarchy.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/threefundamental.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/reference/figures/threefundamental.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/theory.broadcast_4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/theory.broadcast_3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/theory.broadcast_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/theory.broadcast_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/theory.broadcast_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_MSE_formula.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_ones_zeros_random.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_pandas.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_transposing_reshaping.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_matrix_broadcasting.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_matrix_aggregation.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_MSE_explanation2.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_matrix_aggregation_row.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_readcsv.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_sub_mult_divide.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_array.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_multiply_broadcasting.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_mse_viz1.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_array_data_ones.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_create_array.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_ones_zeros_matrix.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_mse_viz2.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_matrix_arithmetic.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_MSE_explanation.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_create_matrix.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_array_dataones.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_MSE_implementation.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_aggregation.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_data_plus_ones.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_matrix_indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-numpy-master-2hzcrudjokt5emn5rf2wpmxayua2vxac/spack-src/doc/source/user/images/np_reshape.png"
    ],
    "total_files": 1564
}